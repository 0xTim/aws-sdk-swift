// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Servicediscovery {

    public struct CreateServiceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "HealthCheckConfig", required: false, type: .structure), 
            AWSShapeMember(label: "CreatorRequestId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "HealthCheckCustomConfig", required: false, type: .structure), 
            AWSShapeMember(label: "DnsConfig", required: true, type: .structure)
        ]
        /// A description for the service.
        public let description: String?
        ///  Public DNS namespaces only. A complex type that contains settings for an optional health check. If you specify settings for a health check, Route 53 associates the health check with all the records that you specify in DnsConfig. For information about the charges for health checks, see Route 53 Pricing.
        public let healthCheckConfig: HealthCheckConfig?
        /// A unique string that identifies the request and that allows failed CreateService requests to be retried without the risk of executing the operation twice. CreatorRequestId can be any unique string, for example, a date/time stamp.
        public let creatorRequestId: String?
        /// The name that you want to assign to the service.
        public let name: String
        public let healthCheckCustomConfig: HealthCheckCustomConfig?
        /// A complex type that contains information about the records that you want Route 53 to create when you register an instance. 
        public let dnsConfig: DnsConfig

        public init(description: String? = nil, healthCheckConfig: HealthCheckConfig? = nil, creatorRequestId: String? = nil, name: String, healthCheckCustomConfig: HealthCheckCustomConfig? = nil, dnsConfig: DnsConfig) {
            self.description = description
            self.healthCheckConfig = healthCheckConfig
            self.creatorRequestId = creatorRequestId
            self.name = name
            self.healthCheckCustomConfig = healthCheckCustomConfig
            self.dnsConfig = dnsConfig
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case healthCheckConfig = "HealthCheckConfig"
            case creatorRequestId = "CreatorRequestId"
            case name = "Name"
            case healthCheckCustomConfig = "HealthCheckCustomConfig"
            case dnsConfig = "DnsConfig"
        }
    }

    public struct ListOperationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// For the first ListOperations request, omit this value. If the response contains NextToken, submit another ListOperations request to get the next group of results. Specify the value of NextToken from the previous response in the next request.  Route 53 gets MaxResults operations and then filters them based on the specified criteria. It's possible that no operations in the first MaxResults operations matched the specified criteria but that subsequent groups of MaxResults operations do contain operations that match the criteria. 
        public let nextToken: String?
        /// A complex type that contains specifications for the operations that you want to list, for example, operations that you started between a specified start date and end date. If you specify more than one filter, an operation must match all filters to be returned by ListOperations.
        public let filters: [OperationFilter]?
        /// The maximum number of items that you want Amazon Route 53 to return in the response to a ListOperations request. If you don't specify a value for MaxResults, Route 53 returns up to 100 operations.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, filters: [OperationFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case maxResults = "MaxResults"
        }
    }

    public struct RegisterInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: true, type: .map), 
            AWSShapeMember(label: "ServiceId", required: true, type: .string), 
            AWSShapeMember(label: "CreatorRequestId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]
        /// A string map that contains the following information for the service that you specify in ServiceId:   The attributes that apply to the records that are defined in the service.    For each attribute, the applicable value.   Supported attribute keys include the following:  AWS_ALIAS_DNS_NAME     If you want Route 53 to create an alias record that routes traffic to an Elastic Load Balancing load balancer, specify the DNS name that is associated with the load balancer. For information about how to get the DNS name, see "DNSName" in the topic AliasTarget. Note the following:   The configuration for the service that is specified by ServiceId must include settings for an A record, an AAAA record, or both.   In the service that is specified by ServiceId, the value of RoutingPolicy must be WEIGHTED.   If the service that is specified by ServiceId includes HealthCheckConfig settings, Route 53 will create the health check, but it won't associate the health check with the alias record.   Auto naming currently doesn't support creating alias records that route traffic to AWS resources other than ELB load balancers.   If you specify a value for AWS_ALIAS_DNS_NAME, don't specify values for any of the AWS_INSTANCE attributes.    AWS_INSTANCE_CNAME  If the service configuration includes a CNAME record, the domain name that you want Route 53 to return in response to DNS queries, for example, example.com. This value is required if the service specified by ServiceId includes settings for an CNAME record.  AWS_INSTANCE_IPV4  If the service configuration includes an A record, the IPv4 address that you want Route 53 to return in response to DNS queries, for example, 192.0.2.44. This value is required if the service specified by ServiceId includes settings for an A record. If the service includes settings for an SRV record, you must specify a value for AWS_INSTANCE_IPV4, AWS_INSTANCE_IPV6, or both.  AWS_INSTANCE_IPV6  If the service configuration includes an AAAA record, the IPv6 address that you want Route 53 to return in response to DNS queries, for example, 2001:0db8:85a3:0000:0000:abcd:0001:2345. This value is required if the service specified by ServiceId includes settings for an AAAA record. If the service includes settings for an SRV record, you must specify a value for AWS_INSTANCE_IPV4, AWS_INSTANCE_IPV6, or both.  AWS_INSTANCE_PORT  If the service includes an SRV record, the value that you want Route 53 to return for the port. If the service includes HealthCheckConfig, the port on the endpoint that you want Route 53 to send requests to.  This value is required if you specified settings for an SRV record when you created the service.
        public let attributes: [String: String]
        /// The ID of the service that you want to use for settings for the records and health check that Route 53 will create.
        public let serviceId: String
        /// A unique string that identifies the request and that allows failed RegisterInstance requests to be retried without the risk of executing the operation twice. You must use a unique CreatorRequestId string every time you submit a RegisterInstance request if you're registering additional instances for the same namespace and service. CreatorRequestId can be any unique string, for example, a date/time stamp.
        public let creatorRequestId: String?
        /// An identifier that you want to associate with the instance. Note the following:   If the service that is specified by ServiceId includes settings for an SRV record, the value of InstanceId is automatically included as part of the value for the SRV record. For more information, see DnsRecord$Type.   You can use this value to update an existing instance.   To register a new instance, you must specify a value that is unique among instances that you register by using the same service.    If you specify an existing InstanceId and ServiceId, Route 53 updates the existing records. If there's also an existing health check, Route 53 deletes the old health check and creates a new one.   The health check isn't deleted immediately, so it will still appear for a while if you submit a ListHealthChecks request, for example.   
        public let instanceId: String

        public init(attributes: [String: String], serviceId: String, creatorRequestId: String? = nil, instanceId: String) {
            self.attributes = attributes
            self.serviceId = serviceId
            self.creatorRequestId = creatorRequestId
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case serviceId = "ServiceId"
            case creatorRequestId = "CreatorRequestId"
            case instanceId = "InstanceId"
        }
    }

    public struct CreatePrivateDnsNamespaceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OperationId", required: false, type: .string)
        ]
        /// A value that you can use to determine whether the request completed successfully. To get the status of the operation, see GetOperation.
        public let operationId: String?

        public init(operationId: String? = nil) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public enum OperationStatus: String, CustomStringConvertible, Codable {
        case submitted = "SUBMITTED"
        case pending = "PENDING"
        case success = "SUCCESS"
        case fail = "FAIL"
        public var description: String { return self.rawValue }
    }

    public struct GetInstancesHealthStatusResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .map), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A complex type that contains the IDs and the health status of the instances that you specified in the GetInstancesHealthStatus request.
        public let status: [String: HealthStatus]?
        /// If more than MaxResults instances match the specified criteria, you can submit another GetInstancesHealthStatus request to get the next group of results. Specify the value of NextToken from the previous response in the next request.
        public let nextToken: String?

        public init(status: [String: HealthStatus]? = nil, nextToken: String? = nil) {
            self.status = status
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case nextToken = "NextToken"
        }
    }

    public struct RegisterInstanceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OperationId", required: false, type: .string)
        ]
        /// A value that you can use to determine whether the request completed successfully. To get the status of the operation, see GetOperation.
        public let operationId: String?

        public init(operationId: String? = nil) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public struct GetServiceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Service", required: false, type: .structure)
        ]
        /// A complex type that contains information about the service.
        public let service: Service?

        public init(service: Service? = nil) {
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case service = "Service"
        }
    }

    public struct DnsProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostedZoneId", required: false, type: .string)
        ]
        /// The ID for the hosted zone that Route 53 creates when you create a namespace.
        public let hostedZoneId: String?

        public init(hostedZoneId: String? = nil) {
            self.hostedZoneId = hostedZoneId
        }

        private enum CodingKeys: String, CodingKey {
            case hostedZoneId = "HostedZoneId"
        }
    }

    public struct ListInstancesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Instances", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Summary information about the instances that are associated with the specified service.
        public let instances: [InstanceSummary]?
        /// If more than MaxResults instances match the specified criteria, you can submit another ListInstances request to get the next group of results. Specify the value of NextToken from the previous response in the next request.
        public let nextToken: String?

        public init(instances: [InstanceSummary]? = nil, nextToken: String? = nil) {
            self.instances = instances
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instances = "Instances"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteServiceResponse: AWSShape {

    }

    public struct DeleteNamespaceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OperationId", required: false, type: .string)
        ]
        /// A value that you can use to determine whether the request completed successfully. To get the status of the operation, see GetOperation.
        public let operationId: String?

        public init(operationId: String? = nil) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public struct NamespaceFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Condition", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: true, type: .enum), 
            AWSShapeMember(label: "Values", required: true, type: .list)
        ]
        /// The operator that you want to use to determine whether ListNamespaces returns a namespace. Valid values for condition include:    EQ: When you specify EQ for the condition, you can choose to list only public namespaces or private namespaces, but not both. EQ is the default condition and can be omitted.    IN: When you specify IN for the condition, you can choose to list public namespaces, private namespaces, or both.     BETWEEN: Not applicable  
        public let condition: FilterCondition?
        /// Specify TYPE.
        public let name: NamespaceFilterName
        /// If you specify EQ for Condition, specify either DNS_PUBLIC or DNS_PRIVATE. If you specify IN for Condition, you can specify DNS_PUBLIC, DNS_PRIVATE, or both.
        public let values: [String]

        public init(condition: FilterCondition? = nil, name: NamespaceFilterName, values: [String]) {
            self.condition = condition
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case condition = "Condition"
            case name = "Name"
            case values = "Values"
        }
    }

    public struct ListNamespacesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// For the first ListNamespaces request, omit this value. If the response contains NextToken, submit another ListNamespaces request to get the next group of results. Specify the value of NextToken from the previous response in the next request.  Route 53 gets MaxResults namespaces and then filters them based on the specified criteria. It's possible that no namespaces in the first MaxResults namespaces matched the specified criteria but that subsequent groups of MaxResults namespaces do contain namespaces that match the criteria. 
        public let nextToken: String?
        /// A complex type that contains specifications for the namespaces that you want to list. If you specify more than one filter, a namespace must match all filters to be returned by ListNamespaces.
        public let filters: [NamespaceFilter]?
        /// The maximum number of namespaces that you want Amazon Route 53 to return in the response to a ListNamespaces request. If you don't specify a value for MaxResults, Route 53 returns up to 100 namespaces.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, filters: [NamespaceFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case maxResults = "MaxResults"
        }
    }

    public enum HealthStatus: String, CustomStringConvertible, Codable {
        case healthy = "HEALTHY"
        case unhealthy = "UNHEALTHY"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public enum CustomHealthStatus: String, CustomStringConvertible, Codable {
        case healthy = "HEALTHY"
        case unhealthy = "UNHEALTHY"
        public var description: String { return self.rawValue }
    }

    public struct ServiceSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The description that you specify when you create the service.
        public let description: String?
        /// The Amazon Resource Name (ARN) that Route 53 assigns to the service when you create it.
        public let arn: String?
        /// The number of instances that are currently associated with the service. Instances that were previously associated with the service but that have been deleted are not included in the count.
        public let instanceCount: Int32?
        /// The name of the service.
        public let name: String?
        /// The ID that Route 53 assigned to the service when you created it.
        public let id: String?

        public init(description: String? = nil, arn: String? = nil, instanceCount: Int32? = nil, name: String? = nil, id: String? = nil) {
            self.description = description
            self.arn = arn
            self.instanceCount = instanceCount
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case arn = "Arn"
            case instanceCount = "InstanceCount"
            case name = "Name"
            case id = "Id"
        }
    }

    public struct DeregisterInstanceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OperationId", required: false, type: .string)
        ]
        /// A value that you can use to determine whether the request completed successfully. For more information, see GetOperation.
        public let operationId: String?

        public init(operationId: String? = nil) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public struct GetOperationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Operation", required: false, type: .structure)
        ]
        /// A complex type that contains information about the operation.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "Operation"
        }
    }

    public struct ListInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ServiceId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// For the first ListInstances request, omit this value. If more than MaxResults instances match the specified criteria, you can submit another ListInstances request to get the next group of results. Specify the value of NextToken from the previous response in the next request.
        public let nextToken: String?
        /// The ID of the service that you want to list instances for.
        public let serviceId: String
        /// The maximum number of instances that you want Amazon Route 53 to return in the response to a ListInstances request. If you don't specify a value for MaxResults, Route 53 returns up to 100 instances.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, serviceId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.serviceId = serviceId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case serviceId = "ServiceId"
            case maxResults = "MaxResults"
        }
    }

    public enum FilterCondition: String, CustomStringConvertible, Codable {
        case eq = "EQ"
        case `in` = "IN"
        case between = "BETWEEN"
        public var description: String { return self.rawValue }
    }

    public enum NamespaceType: String, CustomStringConvertible, Codable {
        case dnsPublic = "DNS_PUBLIC"
        case dnsPrivate = "DNS_PRIVATE"
        public var description: String { return self.rawValue }
    }

    public struct DeleteServiceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The ID of the service that you want to delete.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct GetOperationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OperationId", required: true, type: .string)
        ]
        /// The ID of the operation that you want to get more information about.
        public let operationId: String

        public init(operationId: String) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public enum RoutingPolicy: String, CustomStringConvertible, Codable {
        case multivalue = "MULTIVALUE"
        case weighted = "WEIGHTED"
        public var description: String { return self.rawValue }
    }

    public struct GetInstancesHealthStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Instances", required: false, type: .list), 
            AWSShapeMember(label: "ServiceId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// An array that contains the IDs of all the instances that you want to get the health status for. If you omit Instances, Amazon Route 53 returns the health status for all the instances that are associated with the specified service.  To get the IDs for the instances that you've registered by using a specified service, submit a ListInstances request. 
        public let instances: [String]?
        /// The ID of the service that the instance is associated with.
        public let serviceId: String
        /// For the first GetInstancesHealthStatus request, omit this value. If more than MaxResults instances match the specified criteria, you can submit another GetInstancesHealthStatus request to get the next group of results. Specify the value of NextToken from the previous response in the next request.
        public let nextToken: String?
        /// The maximum number of instances that you want Route 53 to return in the response to a GetInstancesHealthStatus request. If you don't specify a value for MaxResults, Route 53 returns up to 100 instances.
        public let maxResults: Int32?

        public init(instances: [String]? = nil, serviceId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.instances = instances
            self.serviceId = serviceId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case instances = "Instances"
            case serviceId = "ServiceId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct GetInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "ServiceId", required: true, type: .string)
        ]
        /// The ID of the instance that you want to get information about.
        public let instanceId: String
        /// The ID of the service that the instance is associated with.
        public let serviceId: String

        public init(instanceId: String, serviceId: String) {
            self.instanceId = instanceId
            self.serviceId = serviceId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case serviceId = "ServiceId"
        }
    }

    public struct Instance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatorRequestId", required: false, type: .string), 
            AWSShapeMember(label: "Attributes", required: false, type: .map), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// A unique string that identifies the request and that allows failed RegisterInstance requests to be retried without the risk of executing the operation twice. You must use a unique CreatorRequestId string every time you submit a RegisterInstance request if you're registering additional instances for the same namespace and service. CreatorRequestId can be any unique string, for example, a date/time stamp.
        public let creatorRequestId: String?
        /// A string map that contains the following information for the service that you specify in ServiceId:   The attributes that apply to the records that are defined in the service.    For each attribute, the applicable value.   Supported attribute keys include the following:  AWS_ALIAS_DNS_NAME     If you want Route 53 to create an alias record that routes traffic to an Elastic Load Balancing load balancer, specify the DNS name that is associated with the load balancer. For information about how to get the DNS name, see "DNSName" in the topic AliasTarget. Note the following:   The configuration for the service that is specified by ServiceId must include settings for an A record, an AAAA record, or both.   In the service that is specified by ServiceId, the value of RoutingPolicy must be WEIGHTED.   If the service that is specified by ServiceId includes HealthCheckConfig settings, Route 53 will create the health check, but it won't associate the health check with the alias record.   Auto naming currently doesn't support creating alias records that route traffic to AWS resources other than ELB load balancers.   If you specify a value for AWS_ALIAS_DNS_NAME, don't specify values for any of the AWS_INSTANCE attributes.    AWS_INSTANCE_CNAME  If the service configuration includes a CNAME record, the domain name that you want Route 53 to return in response to DNS queries, for example, example.com. This value is required if the service specified by ServiceId includes settings for an CNAME record.  AWS_INSTANCE_IPV4  If the service configuration includes an A record, the IPv4 address that you want Route 53 to return in response to DNS queries, for example, 192.0.2.44. This value is required if the service specified by ServiceId includes settings for an A record. If the service includes settings for an SRV record, you must specify a value for AWS_INSTANCE_IPV4, AWS_INSTANCE_IPV6, or both.  AWS_INSTANCE_IPV6  If the service configuration includes an AAAA record, the IPv6 address that you want Route 53 to return in response to DNS queries, for example, 2001:0db8:85a3:0000:0000:abcd:0001:2345. This value is required if the service specified by ServiceId includes settings for an AAAA record. If the service includes settings for an SRV record, you must specify a value for AWS_INSTANCE_IPV4, AWS_INSTANCE_IPV6, or both.  AWS_INSTANCE_PORT  If the service includes an SRV record, the value that you want Route 53 to return for the port. If the service includes HealthCheckConfig, the port on the endpoint that you want Route 53 to send requests to.  This value is required if you specified settings for an SRV record when you created the service.
        public let attributes: [String: String]?
        /// An identifier that you want to associate with the instance. Note the following:   If the service that is specified by ServiceId includes settings for an SRV record, the value of InstanceId is automatically included as part of the value for the SRV record. For more information, see DnsRecord$Type.   You can use this value to update an existing instance.   To register a new instance, you must specify a value that is unique among instances that you register by using the same service.    If you specify an existing InstanceId and ServiceId, Route 53 updates the existing records. If there's also an existing health check, Route 53 deletes the old health check and creates a new one.   The health check isn't deleted immediately, so it will still appear for a while if you submit a ListHealthChecks request, for example.   
        public let id: String

        public init(creatorRequestId: String? = nil, attributes: [String: String]? = nil, id: String) {
            self.creatorRequestId = creatorRequestId
            self.attributes = attributes
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case creatorRequestId = "CreatorRequestId"
            case attributes = "Attributes"
            case id = "Id"
        }
    }

    public struct DnsConfigChange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DnsRecords", required: true, type: .list)
        ]
        /// An array that contains one DnsRecord object for each record that you want Route 53 to create when you register an instance.
        public let dnsRecords: [DnsRecord]

        public init(dnsRecords: [DnsRecord]) {
            self.dnsRecords = dnsRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dnsRecords = "DnsRecords"
        }
    }

    public struct HealthCheckConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailureThreshold", required: false, type: .integer), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "ResourcePath", required: false, type: .string)
        ]
        /// The number of consecutive health checks that an endpoint must pass or fail for Route 53 to change the current status of the endpoint from unhealthy to healthy or vice versa. For more information, see How Route 53 Determines Whether an Endpoint Is Healthy in the Route 53 Developer Guide.
        public let failureThreshold: Int32?
        /// The type of health check that you want to create, which indicates how Route 53 determines whether an endpoint is healthy.  You can't change the value of Type after you create a health check.  You can create the following types of health checks:    HTTP: Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTP request and waits for an HTTP status code of 200 or greater and less than 400.    HTTPS: Route 53 tries to establish a TCP connection. If successful, Route 53 submits an HTTPS request and waits for an HTTP status code of 200 or greater and less than 400.  If you specify HTTPS for the value of Type, the endpoint must support TLS v1.0 or later.     TCP: Route 53 tries to establish a TCP connection.   For more information, see How Route 53 Determines Whether an Endpoint Is Healthy in the Route 53 Developer Guide.
        public let `type`: HealthCheckType?
        /// The path that you want Route 53 to request when performing health checks. The path can be any value for which your endpoint will return an HTTP status code of 2xx or 3xx when the endpoint is healthy, such as the file /docs/route53-health-check.html. Route 53 automatically adds the DNS name for the service and a leading forward slash (/) character. 
        public let resourcePath: String?

        public init(failureThreshold: Int32? = nil, type: HealthCheckType? = nil, resourcePath: String? = nil) {
            self.failureThreshold = failureThreshold
            self.`type` = `type`
            self.resourcePath = resourcePath
        }

        private enum CodingKeys: String, CodingKey {
            case failureThreshold = "FailureThreshold"
            case `type` = "Type"
            case resourcePath = "ResourcePath"
        }
    }

    public struct ListOperationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Operations", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Summary information about the operations that match the specified criteria.
        public let operations: [OperationSummary]?
        /// If the response contains NextToken, submit another ListOperations request to get the next group of results. Specify the value of NextToken from the previous response in the next request.  Route 53 gets MaxResults operations and then filters them based on the specified criteria. It's possible that no operations in the first MaxResults operations matched the specified criteria but that subsequent groups of MaxResults operations do contain operations that match the criteria. 
        public let nextToken: String?

        public init(operations: [OperationSummary]? = nil, nextToken: String? = nil) {
            self.operations = operations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "Operations"
            case nextToken = "NextToken"
        }
    }

    public struct Service: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "HealthCheckConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DnsConfig", required: false, type: .structure), 
            AWSShapeMember(label: "HealthCheckCustomConfig", required: false, type: .structure), 
            AWSShapeMember(label: "CreateDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "CreatorRequestId", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The ID that Route 53 assigned to the service when you created it.
        public let id: String?
        ///  Public DNS namespaces only. A complex type that contains settings for an optional health check. If you specify settings for a health check, Route 53 associates the health check with all the records that you specify in DnsConfig. For information about the charges for health checks, see Route 53 Pricing.
        public let healthCheckConfig: HealthCheckConfig?
        /// The Amazon Resource Name (ARN) that Route 53 assigns to the service when you create it.
        public let arn: String?
        /// The name of the service.
        public let name: String?
        /// A complex type that contains information about the records that you want Route 53 to create when you register an instance.
        public let dnsConfig: DnsConfig?
        public let healthCheckCustomConfig: HealthCheckCustomConfig?
        /// The date and time that the service was created, in Unix format and Coordinated Universal Time (UTC). The value of CreateDate is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.
        public let createDate: TimeStamp?
        /// The number of instances that are currently associated with the service. Instances that were previously associated with the service but that have been deleted are not included in the count.
        public let instanceCount: Int32?
        /// A unique string that identifies the request and that allows failed requests to be retried without the risk of executing the operation twice. CreatorRequestId can be any unique string, for example, a date/time stamp.
        public let creatorRequestId: String?
        /// The description of the service.
        public let description: String?

        public init(id: String? = nil, healthCheckConfig: HealthCheckConfig? = nil, arn: String? = nil, name: String? = nil, dnsConfig: DnsConfig? = nil, healthCheckCustomConfig: HealthCheckCustomConfig? = nil, createDate: TimeStamp? = nil, instanceCount: Int32? = nil, creatorRequestId: String? = nil, description: String? = nil) {
            self.id = id
            self.healthCheckConfig = healthCheckConfig
            self.arn = arn
            self.name = name
            self.dnsConfig = dnsConfig
            self.healthCheckCustomConfig = healthCheckCustomConfig
            self.createDate = createDate
            self.instanceCount = instanceCount
            self.creatorRequestId = creatorRequestId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case healthCheckConfig = "HealthCheckConfig"
            case arn = "Arn"
            case name = "Name"
            case dnsConfig = "DnsConfig"
            case healthCheckCustomConfig = "HealthCheckCustomConfig"
            case createDate = "CreateDate"
            case instanceCount = "InstanceCount"
            case creatorRequestId = "CreatorRequestId"
            case description = "Description"
        }
    }

    public struct CreatePublicDnsNamespaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatorRequestId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// A unique string that identifies the request and that allows failed CreatePublicDnsNamespace requests to be retried without the risk of executing the operation twice. CreatorRequestId can be any unique string, for example, a date/time stamp.
        public let creatorRequestId: String?
        /// The name that you want to assign to this namespace.
        public let name: String
        /// A description for the namespace.
        public let description: String?

        public init(creatorRequestId: String? = nil, name: String, description: String? = nil) {
            self.creatorRequestId = creatorRequestId
            self.name = name
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case creatorRequestId = "CreatorRequestId"
            case name = "Name"
            case description = "Description"
        }
    }

    public struct UpdateServiceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Service", required: true, type: .structure), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// A complex type that contains the new settings for the service.
        public let service: ServiceChange
        /// The ID of the service that you want to update.
        public let id: String

        public init(service: ServiceChange, id: String) {
            self.service = service
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case service = "Service"
            case id = "Id"
        }
    }

    public enum OperationTargetType: String, CustomStringConvertible, Codable {
        case namespace = "NAMESPACE"
        case service = "SERVICE"
        case instance = "INSTANCE"
        public var description: String { return self.rawValue }
    }

    public enum RecordType: String, CustomStringConvertible, Codable {
        case srv = "SRV"
        case a = "A"
        case aaaa = "AAAA"
        case cname = "CNAME"
        public var description: String { return self.rawValue }
    }

    public struct CreatePrivateDnsNamespaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatorRequestId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Vpc", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// A unique string that identifies the request and that allows failed CreatePrivateDnsNamespace requests to be retried without the risk of executing the operation twice. CreatorRequestId can be any unique string, for example, a date/time stamp.
        public let creatorRequestId: String?
        /// The name that you want to assign to this namespace. When you create a namespace, Amazon Route 53 automatically creates a hosted zone that has the same name as the namespace.
        public let name: String
        /// The ID of the Amazon VPC that you want to associate the namespace with.
        public let vpc: String
        /// A description for the namespace.
        public let description: String?

        public init(creatorRequestId: String? = nil, name: String, vpc: String, description: String? = nil) {
            self.creatorRequestId = creatorRequestId
            self.name = name
            self.vpc = vpc
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case creatorRequestId = "CreatorRequestId"
            case name = "Name"
            case vpc = "Vpc"
            case description = "Description"
        }
    }

    public struct GetNamespaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The ID of the namespace that you want to get information about.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct GetServiceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The ID of the service that you want to get settings for.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct ListNamespacesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Namespaces", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// An array that contains one NamespaceSummary object for each namespace that matches the specified filter criteria.
        public let namespaces: [NamespaceSummary]?
        /// If the response contains NextToken, submit another ListNamespaces request to get the next group of results. Specify the value of NextToken from the previous response in the next request.  Route 53 gets MaxResults namespaces and then filters them based on the specified criteria. It's possible that no namespaces in the first MaxResults namespaces matched the specified criteria but that subsequent groups of MaxResults namespaces do contain namespaces that match the criteria. 
        public let nextToken: String?

        public init(namespaces: [NamespaceSummary]? = nil, nextToken: String? = nil) {
            self.namespaces = namespaces
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case namespaces = "Namespaces"
            case nextToken = "NextToken"
        }
    }

    public struct GetInstanceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Instance", required: false, type: .structure)
        ]
        /// A complex type that contains information about a specified instance.
        public let instance: Instance?

        public init(instance: Instance? = nil) {
            self.instance = instance
        }

        private enum CodingKeys: String, CodingKey {
            case instance = "Instance"
        }
    }

    public struct CreatePublicDnsNamespaceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OperationId", required: false, type: .string)
        ]
        /// A value that you can use to determine whether the request completed successfully. To get the status of the operation, see GetOperation.
        public let operationId: String?

        public init(operationId: String? = nil) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public struct DeregisterInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "ServiceId", required: true, type: .string)
        ]
        /// The value that you specified for Id in the RegisterInstance request.
        public let instanceId: String
        /// The ID of the service that the instance is associated with.
        public let serviceId: String

        public init(instanceId: String, serviceId: String) {
            self.instanceId = instanceId
            self.serviceId = serviceId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case serviceId = "ServiceId"
        }
    }

    public struct OperationFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Condition", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: true, type: .enum), 
            AWSShapeMember(label: "Values", required: true, type: .list)
        ]
        /// The operator that you want to use to determine whether an operation matches the specified value. Valid values for condition include:    EQ: When you specify EQ for the condition, you can specify only one value. EQ is supported for NAMESPACE_ID, SERVICE_ID, STATUS, and TYPE. EQ is the default condition and can be omitted.    IN: When you specify IN for the condition, you can specify a list of one or more values. IN is supported for STATUS and TYPE. An operation must match one of the specified values to be returned in the response.    BETWEEN: Specify a start date and an end date in Unix date/time format and Coordinated Universal Time (UTC). The start date must be the first value. BETWEEN is supported for UPDATE_DATE.   
        public let condition: FilterCondition?
        /// Specify the operations that you want to get:    NAMESPACE_ID: Gets operations related to specified namespaces.    SERVICE_ID: Gets operations related to specified services.    STATUS: Gets operations based on the status of the operations: SUBMITTED, PENDING, SUCCEED, or FAIL.    TYPE: Gets specified types of operation.    UPDATE_DATE: Gets operations that changed status during a specified date/time range.   
        public let name: OperationFilterName
        /// Specify values that are applicable to the value that you specify for Name:     NAMESPACE_ID: Specify one namespace ID.    SERVICE_ID: Specify one service ID.    STATUS: Specify one or more statuses: SUBMITTED, PENDING, SUCCEED, or FAIL.    TYPE: Specify one or more of the following types: CREATE_NAMESPACE, DELETE_NAMESPACE, UPDATE_SERVICE, REGISTER_INSTANCE, or DEREGISTER_INSTANCE.    UPDATE_DATE: Specify a start date and an end date in Unix date/time format and Coordinated Universal Time (UTC). The start date must be the first value.  
        public let values: [String]

        public init(condition: FilterCondition? = nil, name: OperationFilterName, values: [String]) {
            self.condition = condition
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case condition = "Condition"
            case name = "Name"
            case values = "Values"
        }
    }

    public struct UpdateInstanceCustomHealthStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string), 
            AWSShapeMember(label: "Status", required: true, type: .enum), 
            AWSShapeMember(label: "ServiceId", required: true, type: .string)
        ]
        public let instanceId: String
        public let status: CustomHealthStatus
        public let serviceId: String

        public init(instanceId: String, status: CustomHealthStatus, serviceId: String) {
            self.instanceId = instanceId
            self.status = status
            self.serviceId = serviceId
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case status = "Status"
            case serviceId = "ServiceId"
        }
    }

    public struct NamespaceSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that Route 53 assigns to the namespace when you create it.
        public let arn: String?
        /// The type of the namespace, either public or private.
        public let `type`: NamespaceType?
        /// The name of the namespace. When you create a namespace, Route 53 automatically creates a hosted zone that has the same name as the namespace.
        public let name: String?
        /// The ID of the namespace.
        public let id: String?

        public init(arn: String? = nil, type: NamespaceType? = nil, name: String? = nil, id: String? = nil) {
            self.arn = arn
            self.`type` = `type`
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case `type` = "Type"
            case name = "Name"
            case id = "Id"
        }
    }

    public struct UpdateServiceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OperationId", required: false, type: .string)
        ]
        /// A value that you can use to determine whether the request completed successfully. To get the status of the operation, see GetOperation.
        public let operationId: String?

        public init(operationId: String? = nil) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "OperationId"
        }
    }

    public struct CreateServiceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Service", required: false, type: .structure)
        ]
        /// A complex type that contains information about the new service.
        public let service: Service?

        public init(service: Service? = nil) {
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case service = "Service"
        }
    }

    public struct Operation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "UpdateDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Targets", required: false, type: .map), 
            AWSShapeMember(label: "CreateDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "ErrorCode", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The status of the operation. Values include the following:    SUBMITTED: This is the initial state immediately after you submit a request.    PENDING: Route 53 is performing the operation.    SUCCESS: The operation succeeded.    FAIL: The operation failed. For the failure reason, see ErrorMessage.  
        public let status: OperationStatus?
        /// The date and time that the value of Status changed to the current value, in Unix date/time format and Coordinated Universal Time (UTC). The value of UpdateDate is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.
        public let updateDate: TimeStamp?
        /// The name of the target entity that is associated with the operation:    NAMESPACE: The namespace ID is returned in the ResourceId property.    SERVICE: The service ID is returned in the ResourceId property.    INSTANCE: The instance ID is returned in the ResourceId property.  
        public let targets: [OperationTargetType: String]?
        /// The date and time that the request was submitted, in Unix date/time format and Coordinated Universal Time (UTC). The value of CreateDate is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.
        public let createDate: TimeStamp?
        /// If the value of Status is FAIL, the reason that the operation failed.
        public let errorMessage: String?
        /// The code associated with ErrorMessage. Values for ErrorCode include the following:    ACCESS_DENIED     CANNOT_CREATE_HOSTED_ZONE     EXPIRED_TOKEN     HOSTED_ZONE_NOT_FOUND     INTERNAL_FAILURE     INVALID_CHANGE_BATCH     THROTTLED_REQUEST   
        public let errorCode: String?
        /// The name of the operation that is associated with the specified ID.
        public let `type`: OperationType?
        /// The ID of the operation that you want to get information about.
        public let id: String?

        public init(status: OperationStatus? = nil, updateDate: TimeStamp? = nil, targets: [OperationTargetType: String]? = nil, createDate: TimeStamp? = nil, errorMessage: String? = nil, errorCode: String? = nil, type: OperationType? = nil, id: String? = nil) {
            self.status = status
            self.updateDate = updateDate
            self.targets = targets
            self.createDate = createDate
            self.errorMessage = errorMessage
            self.errorCode = errorCode
            self.`type` = `type`
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case updateDate = "UpdateDate"
            case targets = "Targets"
            case createDate = "CreateDate"
            case errorMessage = "ErrorMessage"
            case errorCode = "ErrorCode"
            case `type` = "Type"
            case id = "Id"
        }
    }

    public struct HealthCheckCustomConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailureThreshold", required: false, type: .integer)
        ]
        public let failureThreshold: Int32?

        public init(failureThreshold: Int32? = nil) {
            self.failureThreshold = failureThreshold
        }

        private enum CodingKeys: String, CodingKey {
            case failureThreshold = "FailureThreshold"
        }
    }

    public enum OperationType: String, CustomStringConvertible, Codable {
        case createNamespace = "CREATE_NAMESPACE"
        case deleteNamespace = "DELETE_NAMESPACE"
        case updateService = "UPDATE_SERVICE"
        case registerInstance = "REGISTER_INSTANCE"
        case deregisterInstance = "DEREGISTER_INSTANCE"
        public var description: String { return self.rawValue }
    }

    public enum ServiceFilterName: String, CustomStringConvertible, Codable {
        case namespaceId = "NAMESPACE_ID"
        public var description: String { return self.rawValue }
    }

    public enum OperationFilterName: String, CustomStringConvertible, Codable {
        case namespaceId = "NAMESPACE_ID"
        case serviceId = "SERVICE_ID"
        case status = "STATUS"
        case `type` = "TYPE"
        case updateDate = "UPDATE_DATE"
        public var description: String { return self.rawValue }
    }

    public struct ServiceChange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DnsConfig", required: true, type: .structure), 
            AWSShapeMember(label: "HealthCheckConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// A complex type that contains information about the records that you want Route 53 to create when you register an instance.
        public let dnsConfig: DnsConfigChange
        public let healthCheckConfig: HealthCheckConfig?
        /// A description for the service.
        public let description: String?

        public init(dnsConfig: DnsConfigChange, healthCheckConfig: HealthCheckConfig? = nil, description: String? = nil) {
            self.dnsConfig = dnsConfig
            self.healthCheckConfig = healthCheckConfig
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case dnsConfig = "DnsConfig"
            case healthCheckConfig = "HealthCheckConfig"
            case description = "Description"
        }
    }

    public struct GetNamespaceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Namespace", required: false, type: .structure)
        ]
        /// A complex type that contains information about the specified namespace.
        public let namespace: Namespace?

        public init(namespace: Namespace? = nil) {
            self.namespace = namespace
        }

        private enum CodingKeys: String, CodingKey {
            case namespace = "Namespace"
        }
    }

    public enum NamespaceFilterName: String, CustomStringConvertible, Codable {
        case `type` = "TYPE"
        public var description: String { return self.rawValue }
    }

    public struct InstanceSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .map), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// A string map that contains the following information:   The attributes that are associate with the instance.    For each attribute, the applicable value.   Supported attribute keys include the following:    AWS_ALIAS_DNS_NAME: For an alias record that routes traffic to an Elastic Load Balancing load balancer, the DNS name that is associated with the load balancer.     AWS_INSTANCE_CNAME: For a CNAME record, the domain name that Route 53 returns in response to DNS queries, for example, example.com.    AWS_INSTANCE_IPV4: For an A record, the IPv4 address that Route 53 returns in response to DNS queries, for example, 192.0.2.44.    AWS_INSTANCE_IPV6: For an AAAA record, the IPv6 address that Route 53 returns in response to DNS queries, for example, 2001:0db8:85a3:0000:0000:abcd:0001:2345.    AWS_INSTANCE_PORT: For an SRV record, the value that Route 53 returns for the port. In addition, if the service includes HealthCheckConfig, the port on the endpoint that Route 53 sends requests to.  
        public let attributes: [String: String]?
        /// The ID for an instance that you created by using a specified service.
        public let id: String?

        public init(attributes: [String: String]? = nil, id: String? = nil) {
            self.attributes = attributes
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case id = "Id"
        }
    }

    public struct NamespaceProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DnsProperties", required: false, type: .structure)
        ]
        /// A complex type that contains the ID for the hosted zone that Route 53 creates when you create a namespace.
        public let dnsProperties: DnsProperties?

        public init(dnsProperties: DnsProperties? = nil) {
            self.dnsProperties = dnsProperties
        }

        private enum CodingKeys: String, CodingKey {
            case dnsProperties = "DnsProperties"
        }
    }

    public struct ListServicesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// For the first ListServices request, omit this value. If the response contains NextToken, submit another ListServices request to get the next group of results. Specify the value of NextToken from the previous response in the next request.  Route 53 gets MaxResults services and then filters them based on the specified criteria. It's possible that no services in the first MaxResults services matched the specified criteria but that subsequent groups of MaxResults services do contain services that match the criteria. 
        public let nextToken: String?
        /// A complex type that contains specifications for the namespaces that you want to list services for.  If you specify more than one filter, an operation must match all filters to be returned by ListServices.
        public let filters: [ServiceFilter]?
        /// The maximum number of services that you want Amazon Route 53 to return in the response to a ListServices request. If you don't specify a value for MaxResults, Route 53 returns up to 100 services.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, filters: [ServiceFilter]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case maxResults = "MaxResults"
        }
    }

    public struct DnsConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DnsRecords", required: true, type: .list), 
            AWSShapeMember(label: "RoutingPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "NamespaceId", required: true, type: .string)
        ]
        /// An array that contains one DnsRecord object for each record that you want Route 53 to create when you register an instance.
        public let dnsRecords: [DnsRecord]
        /// The routing policy that you want to apply to all records that Route 53 creates when you register an instance and specify this service.  If you want to use this service to register instances that create alias records, specify WEIGHTED for the routing policy.  You can specify the following values:  MULTIVALUE  If you define a health check for the service and the health check is healthy, Route 53 returns the applicable value for up to eight instances. For example, suppose the service includes configurations for one A record and a health check, and you use the service to register 10 instances. Route 53 responds to DNS queries with IP addresses for up to eight healthy instances. If fewer than eight instances are healthy, Route 53 responds to every DNS query with the IP addresses for all of the healthy instances. If you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the values for up to eight instances. For more information about the multivalue routing policy, see Multivalue Answer Routing in the Route 53 Developer Guide.  WEIGHTED  Route 53 returns the applicable value from one randomly selected instance from among the instances that you registered using the same service. Currently, all records have the same weight, so you can't route more or less traffic to any instances. For example, suppose the service includes configurations for one A record and a health check, and you use the service to register 10 instances. Route 53 responds to DNS queries with the IP address for one randomly selected instance from among the healthy instances. If no instances are healthy, Route 53 responds to DNS queries as if all of the instances were healthy. If you don't define a health check for the service, Route 53 assumes that all instances are healthy and returns the applicable value for one randomly selected instance. For more information about the weighted routing policy, see Weighted Routing in the Route 53 Developer Guide.
        public let routingPolicy: RoutingPolicy?
        /// The ID of the namespace to use for DNS configuration.
        public let namespaceId: String

        public init(dnsRecords: [DnsRecord], routingPolicy: RoutingPolicy? = nil, namespaceId: String) {
            self.dnsRecords = dnsRecords
            self.routingPolicy = routingPolicy
            self.namespaceId = namespaceId
        }

        private enum CodingKeys: String, CodingKey {
            case dnsRecords = "DnsRecords"
            case routingPolicy = "RoutingPolicy"
            case namespaceId = "NamespaceId"
        }
    }

    public struct DnsRecord: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "TTL", required: true, type: .long)
        ]
        /// The type of the resource, which indicates the type of value that Route 53 returns in response to DNS queries. Note the following:    A, AAAA, and SRV records: You can specify settings for a maximum of one A, one AAAA, and one SRV record. You can specify them in any combination.     CNAME records: If you specify CNAME for Type, you can't define any other records. This is a limitation of DNS—you can't create a CNAME record and any other type of record that has the same name as a CNAME record.    Alias records: If you want Route 53 to create an alias record when you register an instance, specify A or AAAA for Type.    All records: You specify settings other than TTL and Type when you register an instance.   The following values are supported:  A  Route 53 returns the IP address of the resource in IPv4 format, such as 192.0.2.44.  AAAA  Route 53 returns the IP address of the resource in IPv6 format, such as 2001:0db8:85a3:0000:0000:abcd:0001:2345.  CNAME  Route 53 returns the domain name of the resource, such as www.example.com. Note the following:   You specify the domain name that you want to route traffic to when you register an instance. For more information, see RegisterInstanceRequest$Attributes.   You must specify WEIGHTED for the value of RoutingPolicy.   You can't specify both CNAME for Type and settings for HealthCheckConfig. If you do, the request will fail with an InvalidInput error.    SRV  Route 53 returns the value for an SRV record. The value for an SRV record uses the following values:  priority weight port service-hostname  Note the following about the values:   The values of priority and weight are both set to 1 and can't be changed.    The value of port comes from the value that you specify for the AWS_INSTANCE_PORT attribute when you submit a RegisterInstance request.    The value of service-hostname is a concatenation of the following values:   The value that you specify for InstanceId when you register an instance.   The name of the service.   The name of the namespace.    For example, if the value of InstanceId is test, the name of the service is backend, and the name of the namespace is example.com, the value of service-hostname is:  test.backend.example.com    If you specify settings for an SRV record and if you specify values for AWS_INSTANCE_IPV4, AWS_INSTANCE_IPV6, or both in the RegisterInstance request, Route 53 automatically creates A and/or AAAA records that have the same name as the value of service-hostname in the SRV record. You can ignore these records.
        public let `type`: RecordType
        /// The amount of time, in seconds, that you want DNS resolvers to cache the settings for this record.  Alias records don't include a TTL because Route 53 uses the TTL for the AWS resource that an alias record routes traffic to. If you include the AWS_ALIAS_DNS_NAME attribute when you submit a RegisterInstance request, the TTL value is ignored. Always specify a TTL for the service; you can use a service to register instances that create either alias or non-alias records. 
        public let ttl: Int64

        public init(type: RecordType, ttl: Int64) {
            self.`type` = `type`
            self.ttl = ttl
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case ttl = "TTL"
        }
    }

    public struct Namespace: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Properties", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreateDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreatorRequestId", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "ServiceCount", required: false, type: .integer), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The ID of a namespace.
        public let id: String?
        /// The Amazon Resource Name (ARN) that Route 53 assigns to the namespace when you create it.
        public let arn: String?
        /// A complex type that contains information that's specific to the type of the namespace.
        public let properties: NamespaceProperties?
        /// The name of the namespace, such as example.com.
        public let name: String?
        /// The date that the namespace was created, in Unix date/time format and Coordinated Universal Time (UTC). The value of CreateDate is accurate to milliseconds. For example, the value 1516925490.087 represents Friday, January 26, 2018 12:11:30.087 AM.
        public let createDate: TimeStamp?
        /// A unique string that identifies the request and that allows failed requests to be retried without the risk of executing an operation twice. 
        public let creatorRequestId: String?
        /// The type of the namespace. Valid values are DNS_PUBLIC and DNS_PRIVATE.
        public let `type`: NamespaceType?
        /// The number of services that are associated with the namespace.
        public let serviceCount: Int32?
        /// The description that you specify for the namespace when you create it.
        public let description: String?

        public init(id: String? = nil, arn: String? = nil, properties: NamespaceProperties? = nil, name: String? = nil, createDate: TimeStamp? = nil, creatorRequestId: String? = nil, type: NamespaceType? = nil, serviceCount: Int32? = nil, description: String? = nil) {
            self.id = id
            self.arn = arn
            self.properties = properties
            self.name = name
            self.createDate = createDate
            self.creatorRequestId = creatorRequestId
            self.`type` = `type`
            self.serviceCount = serviceCount
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case arn = "Arn"
            case properties = "Properties"
            case name = "Name"
            case createDate = "CreateDate"
            case creatorRequestId = "CreatorRequestId"
            case `type` = "Type"
            case serviceCount = "ServiceCount"
            case description = "Description"
        }
    }

    public struct OperationSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The status of the operation. Values include the following:    SUBMITTED: This is the initial state immediately after you submit a request.    PENDING: Route 53 is performing the operation.    SUCCESS: The operation succeeded.    FAIL: The operation failed. For the failure reason, see ErrorMessage.  
        public let status: OperationStatus?
        /// The ID for an operation.
        public let id: String?

        public init(status: OperationStatus? = nil, id: String? = nil) {
            self.status = status
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case id = "Id"
        }
    }

    public struct ListServicesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Services", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// An array that contains one ServiceSummary object for each service that matches the specified filter criteria.
        public let services: [ServiceSummary]?
        /// If the response contains NextToken, submit another ListServices request to get the next group of results. Specify the value of NextToken from the previous response in the next request.  Route 53 gets MaxResults services and then filters them based on the specified criteria. It's possible that no services in the first MaxResults services matched the specified criteria but that subsequent groups of MaxResults services do contain services that match the criteria. 
        public let nextToken: String?

        public init(services: [ServiceSummary]? = nil, nextToken: String? = nil) {
            self.services = services
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case services = "Services"
            case nextToken = "NextToken"
        }
    }

    public struct ServiceFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Condition", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: true, type: .enum), 
            AWSShapeMember(label: "Values", required: true, type: .list)
        ]
        /// The operator that you want to use to determine whether a service is returned by ListServices. Valid values for Condition include the following:    EQ: When you specify EQ, specify one namespace ID for Values. EQ is the default condition and can be omitted.    IN: When you specify IN, specify a list of the IDs for the namespaces that you want ListServices to return a list of services for.    BETWEEN: Not applicable.  
        public let condition: FilterCondition?
        /// Specify NAMESPACE_ID.
        public let name: ServiceFilterName
        /// The values that are applicable to the value that you specify for Condition to filter the list of services.
        public let values: [String]

        public init(condition: FilterCondition? = nil, name: ServiceFilterName, values: [String]) {
            self.condition = condition
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case condition = "Condition"
            case name = "Name"
            case values = "Values"
        }
    }

    public struct DeleteNamespaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The ID of the namespace that you want to delete.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public enum HealthCheckType: String, CustomStringConvertible, Codable {
        case http = "HTTP"
        case https = "HTTPS"
        case tcp = "TCP"
        public var description: String { return self.rawValue }
    }

}