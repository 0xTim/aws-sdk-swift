// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension GuardDuty {

    public struct DeleteInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct UpdateIPSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "IpSetId", location: .uri(locationName: "ipSetId"), required: true, type: .string), 
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: false, type: .string), 
            AWSShapeMember(label: "Activate", location: .body(locationName: "activate"), required: false, type: .boolean)
        ]
        public let detectorId: String
        /// The unique ID that specifies the IPSet that you want to update.
        public let name: String?
        public let ipSetId: String
        /// The updated URI of the file that contains the IPSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key).
        public let location: String?
        /// The updated boolean value that specifies whether the IPSet is active or not.
        public let activate: Bool?

        public init(detectorId: String, name: String? = nil, ipSetId: String, location: String? = nil, activate: Bool? = nil) {
            self.detectorId = detectorId
            self.name = name
            self.ipSetId = ipSetId
            self.location = location
            self.activate = activate
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case name = "name"
            case ipSetId = "ipSetId"
            case location = "location"
            case activate = "activate"
        }
    }

    public struct UpdateFilterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string)
        ]
        /// The name of the filter.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct DisassociateFromMasterAccountRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let detectorId: String

        public init(detectorId: String) {
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
        }
    }

    public struct ListDetectorsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "DetectorIds", location: .body(locationName: "detectorIds"), required: false, type: .list)
        ]
        public let nextToken: String?
        public let detectorIds: [String]?

        public init(nextToken: String? = nil, detectorIds: [String]? = nil) {
            self.nextToken = nextToken
            self.detectorIds = detectorIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case detectorIds = "detectorIds"
        }
    }

    public enum DetectorStatus: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public enum Feedback: String, CustomStringConvertible, Codable {
        case useful = "USEFUL"
        case notUseful = "NOT_USEFUL"
        public var description: String { return self.rawValue }
    }

    public struct GetDetectorResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceRole", location: .body(locationName: "serviceRole"), required: false, type: .string), 
            AWSShapeMember(label: "CreatedAt", location: .body(locationName: "createdAt"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "UpdatedAt", location: .body(locationName: "updatedAt"), required: false, type: .string)
        ]
        public let serviceRole: String?
        public let createdAt: String?
        public let status: DetectorStatus?
        public let updatedAt: String?

        public init(serviceRole: String? = nil, createdAt: String? = nil, status: DetectorStatus? = nil, updatedAt: String? = nil) {
            self.serviceRole = serviceRole
            self.createdAt = createdAt
            self.status = status
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case serviceRole = "serviceRole"
            case createdAt = "createdAt"
            case status = "status"
            case updatedAt = "updatedAt"
        }
    }

    public struct GetInvitationsCountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InvitationsCount", location: .body(locationName: "invitationsCount"), required: false, type: .integer)
        ]
        /// The number of received invitations.
        public let invitationsCount: Int32?

        public init(invitationsCount: Int32? = nil) {
            self.invitationsCount = invitationsCount
        }

        private enum CodingKeys: String, CodingKey {
            case invitationsCount = "invitationsCount"
        }
    }

    public struct DeleteFilterResponse: AWSShape {

    }

    public struct GetMasterAccountRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let detectorId: String

        public init(detectorId: String) {
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
        }
    }

    public enum FilterAction: String, CustomStringConvertible, Codable {
        case noop = "NOOP"
        case archive = "ARCHIVE"
        public var description: String { return self.rawValue }
    }

    public struct CreateIPSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: false, type: .enum), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: false, type: .string), 
            AWSShapeMember(label: "Activate", location: .body(locationName: "activate"), required: false, type: .boolean)
        ]
        public let detectorId: String
        /// The format of the file that contains the IPSet.
        public let format: IpSetFormat?
        /// The user friendly name to identify the IPSet. This name is displayed in all findings that are triggered by activity that involves IP addresses included in this IPSet.
        public let name: String?
        /// The URI of the file that contains the IPSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key)
        public let location: String?
        /// A boolean value that indicates whether GuardDuty is to start using the uploaded IPSet.
        public let activate: Bool?

        public init(detectorId: String, format: IpSetFormat? = nil, name: String? = nil, location: String? = nil, activate: Bool? = nil) {
            self.detectorId = detectorId
            self.format = format
            self.name = name
            self.location = location
            self.activate = activate
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case format = "format"
            case name = "name"
            case location = "location"
            case activate = "activate"
        }
    }

    public struct Resource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceDetails", location: .body(locationName: "instanceDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "AccessKeyDetails", location: .body(locationName: "accessKeyDetails"), required: false, type: .structure)
        ]
        /// The type of the AWS resource.
        public let resourceType: String?
        public let instanceDetails: InstanceDetails?
        public let accessKeyDetails: AccessKeyDetails?

        public init(resourceType: String? = nil, instanceDetails: InstanceDetails? = nil, accessKeyDetails: AccessKeyDetails? = nil) {
            self.resourceType = resourceType
            self.instanceDetails = instanceDetails
            self.accessKeyDetails = accessKeyDetails
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case instanceDetails = "instanceDetails"
            case accessKeyDetails = "accessKeyDetails"
        }
    }

    public struct GetFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "SortCriteria", location: .body(locationName: "sortCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "FindingIds", location: .body(locationName: "findingIds"), required: false, type: .list)
        ]
        public let detectorId: String
        /// Represents the criteria used for sorting findings.
        public let sortCriteria: SortCriteria?
        /// IDs of the findings that you want to retrieve.
        public let findingIds: [String]?

        public init(detectorId: String, sortCriteria: SortCriteria? = nil, findingIds: [String]? = nil) {
            self.detectorId = detectorId
            self.sortCriteria = sortCriteria
            self.findingIds = findingIds
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case sortCriteria = "sortCriteria"
            case findingIds = "findingIds"
        }
    }

    public struct CreateDetectorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enable", location: .body(locationName: "enable"), required: false, type: .boolean)
        ]
        /// A boolean value that specifies whether the detector is to be enabled.
        public let enable: Bool?

        public init(enable: Bool? = nil) {
            self.enable = enable
        }

        private enum CodingKeys: String, CodingKey {
            case enable = "enable"
        }
    }

    public struct DomainDetails: AWSShape {

    }

    public struct DeleteFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "FilterName", location: .uri(locationName: "filterName"), required: true, type: .string)
        ]
        public let detectorId: String
        public let filterName: String

        public init(detectorId: String, filterName: String) {
            self.detectorId = detectorId
            self.filterName = filterName
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case filterName = "filterName"
        }
    }

    public struct IamInstanceProfile: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string)
        ]
        /// AWS EC2 instance profile ID.
        public let id: String?
        /// AWS EC2 instance profile ARN.
        public let arn: String?

        public init(id: String? = nil, arn: String? = nil) {
            self.id = id
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case arn = "arn"
        }
    }

    public struct CreateFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FindingCriteria", location: .body(locationName: "findingCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "Action", location: .body(locationName: "action"), required: false, type: .enum), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "Rank", location: .body(locationName: "rank"), required: false, type: .integer), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// Represents the criteria to be used in the filter for querying findings.
        public let findingCriteria: FindingCriteria?
        /// Specifies the action that is to be applied to the findings that match the filter.
        public let action: FilterAction?
        public let detectorId: String
        /// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
        public let rank: Int32?
        /// The idempotency token for the create request.
        public let clientToken: String?
        /// The name of the filter.
        public let name: String?
        /// The description of the filter.
        public let description: String?

        public init(findingCriteria: FindingCriteria? = nil, action: FilterAction? = nil, detectorId: String, rank: Int32? = nil, clientToken: String? = nil, name: String? = nil, description: String? = nil) {
            self.findingCriteria = findingCriteria
            self.action = action
            self.detectorId = detectorId
            self.rank = rank
            self.clientToken = clientToken
            self.name = name
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case findingCriteria = "findingCriteria"
            case action = "action"
            case detectorId = "detectorId"
            case rank = "rank"
            case clientToken = "clientToken"
            case name = "name"
            case description = "description"
        }
    }

    public struct DeleteDetectorResponse: AWSShape {

    }

    public struct Master: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RelationshipStatus", location: .body(locationName: "relationshipStatus"), required: false, type: .string), 
            AWSShapeMember(label: "InvitedAt", location: .body(locationName: "invitedAt"), required: false, type: .string), 
            AWSShapeMember(label: "InvitationId", location: .body(locationName: "invitationId"), required: false, type: .string), 
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: false, type: .string)
        ]
        /// The status of the relationship between the master and member accounts.
        public let relationshipStatus: String?
        /// Timestamp at which the invitation was sent
        public let invitedAt: String?
        /// This value is used to validate the master account to the member account.
        public let invitationId: String?
        /// Master account ID
        public let accountId: String?

        public init(relationshipStatus: String? = nil, invitedAt: String? = nil, invitationId: String? = nil, accountId: String? = nil) {
            self.relationshipStatus = relationshipStatus
            self.invitedAt = invitedAt
            self.invitationId = invitationId
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case relationshipStatus = "relationshipStatus"
            case invitedAt = "invitedAt"
            case invitationId = "invitationId"
            case accountId = "accountId"
        }
    }

    public struct DisassociateFromMasterAccountResponse: AWSShape {

    }

    public struct UpdateDetectorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "Enable", location: .body(locationName: "enable"), required: false, type: .boolean)
        ]
        public let detectorId: String
        /// Updated boolean value for the detector that specifies whether the detector is enabled.
        public let enable: Bool?

        public init(detectorId: String, enable: Bool? = nil) {
            self.detectorId = detectorId
            self.enable = enable
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case enable = "enable"
        }
    }

    public struct ArchiveFindingsResponse: AWSShape {

    }

    public struct DeleteMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct DeleteThreatIntelSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "ThreatIntelSetId", location: .uri(locationName: "threatIntelSetId"), required: true, type: .string)
        ]
        public let detectorId: String
        public let threatIntelSetId: String

        public init(detectorId: String, threatIntelSetId: String) {
            self.detectorId = detectorId
            self.threatIntelSetId = threatIntelSetId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case threatIntelSetId = "threatIntelSetId"
        }
    }

    public enum IpSetStatus: String, CustomStringConvertible, Codable {
        case inactive = "INACTIVE"
        case activating = "ACTIVATING"
        case active = "ACTIVE"
        case deactivating = "DEACTIVATING"
        case error = "ERROR"
        case deletePending = "DELETE_PENDING"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct Organization: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Asn", location: .body(locationName: "asn"), required: false, type: .string), 
            AWSShapeMember(label: "Org", location: .body(locationName: "org"), required: false, type: .string), 
            AWSShapeMember(label: "Isp", location: .body(locationName: "isp"), required: false, type: .string), 
            AWSShapeMember(label: "AsnOrg", location: .body(locationName: "asnOrg"), required: false, type: .string)
        ]
        /// Autonomous system number of the internet provider of the remote IP address.
        public let asn: String?
        /// Name of the internet provider.
        public let org: String?
        /// ISP information for the internet provider.
        public let isp: String?
        /// Organization that registered this ASN.
        public let asnOrg: String?

        public init(asn: String? = nil, org: String? = nil, isp: String? = nil, asnOrg: String? = nil) {
            self.asn = asn
            self.org = org
            self.isp = isp
            self.asnOrg = asnOrg
        }

        private enum CodingKeys: String, CodingKey {
            case asn = "asn"
            case org = "org"
            case isp = "isp"
            case asnOrg = "asnOrg"
        }
    }

    public struct PortProbeAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortProbeDetails", location: .body(locationName: "portProbeDetails"), required: false, type: .list), 
            AWSShapeMember(label: "Blocked", location: .body(locationName: "blocked"), required: false, type: .boolean)
        ]
        /// A list of port probe details objects.
        public let portProbeDetails: [PortProbeDetail]?
        /// Port probe blocked information.
        public let blocked: Bool?

        public init(portProbeDetails: [PortProbeDetail]? = nil, blocked: Bool? = nil) {
            self.portProbeDetails = portProbeDetails
            self.blocked = blocked
        }

        private enum CodingKeys: String, CodingKey {
            case portProbeDetails = "portProbeDetails"
            case blocked = "blocked"
        }
    }

    public enum ThreatIntelSetFormat: String, CustomStringConvertible, Codable {
        case txt = "TXT"
        case stix = "STIX"
        case otxCsv = "OTX_CSV"
        case alienVault = "ALIEN_VAULT"
        case proofPoint = "PROOF_POINT"
        case fireEye = "FIRE_EYE"
        public var description: String { return self.rawValue }
    }

    public struct GetMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list), 
            AWSShapeMember(label: "Members", location: .body(locationName: "members"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?
        public let members: [Member]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil, members: [Member]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
            self.members = members
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
            case members = "members"
        }
    }

    public struct ListFiltersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        public let nextToken: String?
        public let detectorId: String
        public let maxResults: Int32?

        public init(nextToken: String? = nil, detectorId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.detectorId = detectorId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case detectorId = "detectorId"
            case maxResults = "maxResults"
        }
    }

    public struct DeleteIPSetResponse: AWSShape {

    }

    public struct AwsApiCallAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceName", location: .body(locationName: "serviceName"), required: false, type: .string), 
            AWSShapeMember(label: "DomainDetails", location: .body(locationName: "domainDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "CallerType", location: .body(locationName: "callerType"), required: false, type: .string), 
            AWSShapeMember(label: "Api", location: .body(locationName: "api"), required: false, type: .string), 
            AWSShapeMember(label: "RemoteIpDetails", location: .body(locationName: "remoteIpDetails"), required: false, type: .structure)
        ]
        /// AWS service name whose API was invoked.
        public let serviceName: String?
        /// Domain information for the AWS API call.
        public let domainDetails: DomainDetails?
        /// AWS API caller type.
        public let callerType: String?
        /// AWS API name.
        public let api: String?
        /// Remote IP information of the connection.
        public let remoteIpDetails: RemoteIpDetails?

        public init(serviceName: String? = nil, domainDetails: DomainDetails? = nil, callerType: String? = nil, api: String? = nil, remoteIpDetails: RemoteIpDetails? = nil) {
            self.serviceName = serviceName
            self.domainDetails = domainDetails
            self.callerType = callerType
            self.api = api
            self.remoteIpDetails = remoteIpDetails
        }

        private enum CodingKeys: String, CodingKey {
            case serviceName = "serviceName"
            case domainDetails = "domainDetails"
            case callerType = "callerType"
            case api = "api"
            case remoteIpDetails = "remoteIpDetails"
        }
    }

    public struct CreateThreatIntelSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: false, type: .enum), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: false, type: .string), 
            AWSShapeMember(label: "Activate", location: .body(locationName: "activate"), required: false, type: .boolean)
        ]
        public let detectorId: String
        /// The format of the file that contains the ThreatIntelSet.
        public let format: ThreatIntelSetFormat?
        /// A user-friendly ThreatIntelSet name that is displayed in all finding generated by activity that involves IP addresses included in this ThreatIntelSet.
        public let name: String?
        /// The URI of the file that contains the ThreatIntelSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key).
        public let location: String?
        /// A boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.
        public let activate: Bool?

        public init(detectorId: String, format: ThreatIntelSetFormat? = nil, name: String? = nil, location: String? = nil, activate: Bool? = nil) {
            self.detectorId = detectorId
            self.format = format
            self.name = name
            self.location = location
            self.activate = activate
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case format = "format"
            case name = "name"
            case location = "location"
            case activate = "activate"
        }
    }

    public struct CreateFilterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string)
        ]
        /// The name of the successfully created filter.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct NetworkInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublicDnsName", location: .body(locationName: "publicDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddresses"), required: false, type: .list), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "securityGroups"), required: false, type: .list), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6Addresses"), required: false, type: .list), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string)
        ]
        /// Public DNS name of the EC2 instance.
        public let publicDnsName: String?
        /// The ID of the network interface
        public let networkInterfaceId: String?
        /// Public IP address of the EC2 instance.
        public let publicIp: String?
        /// Other private IP address information of the EC2 instance.
        public let privateIpAddresses: [PrivateIpAddressDetails]?
        /// Private DNS name of the EC2 instance.
        public let privateDnsName: String?
        /// The VPC ID of the EC2 instance.
        public let vpcId: String?
        /// Security groups associated with the EC2 instance.
        public let securityGroups: [SecurityGroup]?
        /// The subnet ID of the EC2 instance.
        public let subnetId: String?
        /// A list of EC2 instance IPv6 address information.
        public let ipv6Addresses: [String]?
        /// Private IP address of the EC2 instance.
        public let privateIpAddress: String?

        public init(publicDnsName: String? = nil, networkInterfaceId: String? = nil, publicIp: String? = nil, privateIpAddresses: [PrivateIpAddressDetails]? = nil, privateDnsName: String? = nil, vpcId: String? = nil, securityGroups: [SecurityGroup]? = nil, subnetId: String? = nil, ipv6Addresses: [String]? = nil, privateIpAddress: String? = nil) {
            self.publicDnsName = publicDnsName
            self.networkInterfaceId = networkInterfaceId
            self.publicIp = publicIp
            self.privateIpAddresses = privateIpAddresses
            self.privateDnsName = privateDnsName
            self.vpcId = vpcId
            self.securityGroups = securityGroups
            self.subnetId = subnetId
            self.ipv6Addresses = ipv6Addresses
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case publicDnsName = "publicDnsName"
            case networkInterfaceId = "networkInterfaceId"
            case publicIp = "publicIp"
            case privateIpAddresses = "privateIpAddresses"
            case privateDnsName = "privateDnsName"
            case vpcId = "vpcId"
            case securityGroups = "securityGroups"
            case subnetId = "subnetId"
            case ipv6Addresses = "ipv6Addresses"
            case privateIpAddress = "privateIpAddress"
        }
    }

    public enum ThreatIntelSetStatus: String, CustomStringConvertible, Codable {
        case inactive = "INACTIVE"
        case activating = "ACTIVATING"
        case active = "ACTIVE"
        case deactivating = "DEACTIVATING"
        case error = "ERROR"
        case deletePending = "DELETE_PENDING"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct GetIPSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: false, type: .enum), 
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        /// The user friendly name to identify the IPSet. This name is displayed in all findings that are triggered by activity that involves IP addresses included in this IPSet.
        public let name: String?
        /// The format of the file that contains the IPSet.
        public let format: IpSetFormat?
        /// The URI of the file that contains the IPSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key)
        public let location: String?
        /// The status of ipSet file uploaded.
        public let status: IpSetStatus?

        public init(name: String? = nil, format: IpSetFormat? = nil, location: String? = nil, status: IpSetStatus? = nil) {
            self.name = name
            self.format = format
            self.location = location
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case format = "format"
            case location = "location"
            case status = "status"
        }
    }

    public struct Finding: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Resource", location: .body(locationName: "resource"), required: true, type: .structure), 
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: true, type: .string), 
            AWSShapeMember(label: "Region", location: .body(locationName: "region"), required: true, type: .string), 
            AWSShapeMember(label: "CreatedAt", location: .body(locationName: "createdAt"), required: true, type: .string), 
            AWSShapeMember(label: "Confidence", location: .body(locationName: "confidence"), required: false, type: .double), 
            AWSShapeMember(label: "UpdatedAt", location: .body(locationName: "updatedAt"), required: true, type: .string), 
            AWSShapeMember(label: "Service", location: .body(locationName: "service"), required: false, type: .structure), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: true, type: .string), 
            AWSShapeMember(label: "Title", location: .body(locationName: "title"), required: false, type: .string), 
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: true, type: .string), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "SchemaVersion", location: .body(locationName: "schemaVersion"), required: true, type: .string), 
            AWSShapeMember(label: "Partition", location: .body(locationName: "partition"), required: false, type: .string), 
            AWSShapeMember(label: "Severity", location: .body(locationName: "severity"), required: true, type: .double)
        ]
        /// The AWS resource associated with the activity that prompted GuardDuty to generate a finding.
        public let resource: Resource
        /// The ARN of a finding described by the action.
        public let arn: String
        /// The AWS region where the activity occurred that prompted GuardDuty to generate a finding.
        public let region: String
        /// The time stamp at which a finding was generated.
        public let createdAt: String
        /// The confidence level of a finding.
        public let confidence: Double?
        /// The time stamp at which a finding was last updated.
        public let updatedAt: String
        /// Additional information assigned to the generated finding by GuardDuty.
        public let service: Service?
        /// The type of a finding described by the action.
        public let `type`: String
        /// The title of a finding.
        public let title: String?
        /// AWS account ID where the activity occurred that prompted GuardDuty to generate a finding.
        public let accountId: String
        /// The identifier that corresponds to a finding described by the action.
        public let id: String
        /// The description of a finding.
        public let description: String?
        /// Findings' schema version.
        public let schemaVersion: String
        /// The AWS resource partition.
        public let partition: String?
        /// The severity of a finding.
        public let severity: Double

        public init(resource: Resource, arn: String, region: String, createdAt: String, confidence: Double? = nil, updatedAt: String, service: Service? = nil, type: String, title: String? = nil, accountId: String, id: String, description: String? = nil, schemaVersion: String, partition: String? = nil, severity: Double) {
            self.resource = resource
            self.arn = arn
            self.region = region
            self.createdAt = createdAt
            self.confidence = confidence
            self.updatedAt = updatedAt
            self.service = service
            self.`type` = `type`
            self.title = title
            self.accountId = accountId
            self.id = id
            self.description = description
            self.schemaVersion = schemaVersion
            self.partition = partition
            self.severity = severity
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "resource"
            case arn = "arn"
            case region = "region"
            case createdAt = "createdAt"
            case confidence = "confidence"
            case updatedAt = "updatedAt"
            case service = "service"
            case `type` = "type"
            case title = "title"
            case accountId = "accountId"
            case id = "id"
            case description = "description"
            case schemaVersion = "schemaVersion"
            case partition = "partition"
            case severity = "severity"
        }
    }

    public enum IpSetFormat: String, CustomStringConvertible, Codable {
        case txt = "TXT"
        case stix = "STIX"
        case otxCsv = "OTX_CSV"
        case alienVault = "ALIEN_VAULT"
        case proofPoint = "PROOF_POINT"
        case fireEye = "FIRE_EYE"
        public var description: String { return self.rawValue }
    }

    public struct GetFindingsStatisticsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FindingStatistics", location: .body(locationName: "findingStatistics"), required: false, type: .structure)
        ]
        /// Finding statistics object.
        public let findingStatistics: FindingStatistics?

        public init(findingStatistics: FindingStatistics? = nil) {
            self.findingStatistics = findingStatistics
        }

        private enum CodingKeys: String, CodingKey {
            case findingStatistics = "findingStatistics"
        }
    }

    public struct InviteMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string), 
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: false, type: .list), 
            AWSShapeMember(label: "DisableEmailNotification", location: .body(locationName: "disableEmailNotification"), required: false, type: .boolean)
        ]
        public let detectorId: String
        /// The invitation message that you want to send to the accounts that you’re inviting to GuardDuty as members.
        public let message: String?
        /// A list of account IDs of the accounts that you want to invite to GuardDuty as members.
        public let accountIds: [String]?
        /// A boolean value that specifies whether you want to disable email notification to the accounts that you’re inviting to GuardDuty as members.
        public let disableEmailNotification: Bool?

        public init(detectorId: String, message: String? = nil, accountIds: [String]? = nil, disableEmailNotification: Bool? = nil) {
            self.detectorId = detectorId
            self.message = message
            self.accountIds = accountIds
            self.disableEmailNotification = disableEmailNotification
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case message = "message"
            case accountIds = "accountIds"
            case disableEmailNotification = "disableEmailNotification"
        }
    }

    public struct Country: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CountryName", location: .body(locationName: "countryName"), required: false, type: .string), 
            AWSShapeMember(label: "CountryCode", location: .body(locationName: "countryCode"), required: false, type: .string)
        ]
        /// Country name of the remote IP address.
        public let countryName: String?
        /// Country code of the remote IP address.
        public let countryCode: String?

        public init(countryName: String? = nil, countryCode: String? = nil) {
            self.countryName = countryName
            self.countryCode = countryCode
        }

        private enum CodingKeys: String, CodingKey {
            case countryName = "countryName"
            case countryCode = "countryCode"
        }
    }

    public struct GetMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: false, type: .list)
        ]
        public let detectorId: String
        /// A list of account IDs of the GuardDuty member accounts that you want to describe.
        public let accountIds: [String]?

        public init(detectorId: String, accountIds: [String]? = nil) {
            self.detectorId = detectorId
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case accountIds = "accountIds"
        }
    }

    public struct CreateThreatIntelSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ThreatIntelSetId", location: .body(locationName: "threatIntelSetId"), required: false, type: .string)
        ]
        public let threatIntelSetId: String?

        public init(threatIntelSetId: String? = nil) {
            self.threatIntelSetId = threatIntelSetId
        }

        private enum CodingKeys: String, CodingKey {
            case threatIntelSetId = "threatIntelSetId"
        }
    }

    public struct CreateIPSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IpSetId", location: .body(locationName: "ipSetId"), required: false, type: .string)
        ]
        public let ipSetId: String?

        public init(ipSetId: String? = nil) {
            self.ipSetId = ipSetId
        }

        private enum CodingKeys: String, CodingKey {
            case ipSetId = "ipSetId"
        }
    }

    public enum FindingStatisticType: String, CustomStringConvertible, Codable {
        case countBySeverity = "COUNT_BY_SEVERITY"
        public var description: String { return self.rawValue }
    }

    public struct Condition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Lt", location: .body(locationName: "lt"), required: false, type: .integer), 
            AWSShapeMember(label: "Neq", location: .body(locationName: "neq"), required: false, type: .list), 
            AWSShapeMember(label: "Gte", location: .body(locationName: "gte"), required: false, type: .integer), 
            AWSShapeMember(label: "Gt", location: .body(locationName: "gt"), required: false, type: .integer), 
            AWSShapeMember(label: "Lte", location: .body(locationName: "lte"), required: false, type: .integer), 
            AWSShapeMember(label: "Eq", location: .body(locationName: "eq"), required: false, type: .list)
        ]
        /// Represents the less than condition to be applied to a single field when querying for findings.
        public let lt: Int32?
        /// Represents the not equal condition to be applied to a single field when querying for findings.
        public let neq: [String]?
        /// Represents the greater than equal condition to be applied to a single field when querying for findings.
        public let gte: Int32?
        /// Represents the greater than condition to be applied to a single field when querying for findings.
        public let gt: Int32?
        /// Represents the less than equal condition to be applied to a single field when querying for findings.
        public let lte: Int32?
        /// Represents the equal condition to be applied to a single field when querying for findings.
        public let eq: [String]?

        public init(lt: Int32? = nil, neq: [String]? = nil, gte: Int32? = nil, gt: Int32? = nil, lte: Int32? = nil, eq: [String]? = nil) {
            self.lt = lt
            self.neq = neq
            self.gte = gte
            self.gt = gt
            self.lte = lte
            self.eq = eq
        }

        private enum CodingKeys: String, CodingKey {
            case lt = "lt"
            case neq = "neq"
            case gte = "gte"
            case gt = "gt"
            case lte = "lte"
            case eq = "eq"
        }
    }

    public struct ArchiveFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "FindingIds", location: .body(locationName: "findingIds"), required: false, type: .list)
        ]
        public let detectorId: String
        /// IDs of the findings that you want to archive.
        public let findingIds: [String]?

        public init(detectorId: String, findingIds: [String]? = nil) {
            self.detectorId = detectorId
            self.findingIds = findingIds
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case findingIds = "findingIds"
        }
    }

    public struct UnprocessedAccount: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Result", location: .body(locationName: "result"), required: true, type: .string), 
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: true, type: .string)
        ]
        /// A reason why the account hasn't been processed.
        public let result: String
        /// AWS Account ID.
        public let accountId: String

        public init(result: String, accountId: String) {
            self.result = result
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case result = "result"
            case accountId = "accountId"
        }
    }

    public struct CreateSampleFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "FindingTypes", location: .body(locationName: "findingTypes"), required: false, type: .list)
        ]
        public let detectorId: String
        /// Types of sample findings that you want to generate.
        public let findingTypes: [String]?

        public init(detectorId: String, findingTypes: [String]? = nil) {
            self.detectorId = detectorId
            self.findingTypes = findingTypes
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case findingTypes = "findingTypes"
        }
    }

    public struct DeclineInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct PortProbeDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RemoteIpDetails", location: .body(locationName: "remoteIpDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "LocalPortDetails", location: .body(locationName: "localPortDetails"), required: false, type: .structure)
        ]
        /// Remote IP information of the connection.
        public let remoteIpDetails: RemoteIpDetails?
        /// Local port information of the connection.
        public let localPortDetails: LocalPortDetails?

        public init(remoteIpDetails: RemoteIpDetails? = nil, localPortDetails: LocalPortDetails? = nil) {
            self.remoteIpDetails = remoteIpDetails
            self.localPortDetails = localPortDetails
        }

        private enum CodingKeys: String, CodingKey {
            case remoteIpDetails = "remoteIpDetails"
            case localPortDetails = "localPortDetails"
        }
    }

    public struct Invitation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RelationshipStatus", location: .body(locationName: "relationshipStatus"), required: false, type: .string), 
            AWSShapeMember(label: "InvitedAt", location: .body(locationName: "invitedAt"), required: false, type: .string), 
            AWSShapeMember(label: "InvitationId", location: .body(locationName: "invitationId"), required: false, type: .string), 
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: false, type: .string)
        ]
        /// The status of the relationship between the inviter and invitee accounts.
        public let relationshipStatus: String?
        /// Timestamp at which the invitation was sent
        public let invitedAt: String?
        /// This value is used to validate the inviter account to the member account.
        public let invitationId: String?
        /// Inviter account ID
        public let accountId: String?

        public init(relationshipStatus: String? = nil, invitedAt: String? = nil, invitationId: String? = nil, accountId: String? = nil) {
            self.relationshipStatus = relationshipStatus
            self.invitedAt = invitedAt
            self.invitationId = invitationId
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case relationshipStatus = "relationshipStatus"
            case invitedAt = "invitedAt"
            case invitationId = "invitationId"
            case accountId = "accountId"
        }
    }

    public struct DeleteThreatIntelSetResponse: AWSShape {

    }

    public struct ListInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Invitations", location: .body(locationName: "invitations"), required: false, type: .list)
        ]
        public let nextToken: String?
        public let invitations: [Invitation]?

        public init(nextToken: String? = nil, invitations: [Invitation]? = nil) {
            self.nextToken = nextToken
            self.invitations = invitations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case invitations = "invitations"
        }
    }

    public struct UpdateDetectorResponse: AWSShape {

    }

    public struct ListInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        public let nextToken: String?
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct StopMonitoringMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct UnarchiveFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "FindingIds", location: .body(locationName: "findingIds"), required: false, type: .list)
        ]
        public let detectorId: String
        /// IDs of the findings that you want to unarchive.
        public let findingIds: [String]?

        public init(detectorId: String, findingIds: [String]? = nil) {
            self.detectorId = detectorId
            self.findingIds = findingIds
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case findingIds = "findingIds"
        }
    }

    public struct ProductCode: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductType", location: .body(locationName: "productType"), required: false, type: .string), 
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string)
        ]
        /// Product code type.
        public let productType: String?
        /// Product code information.
        public let code: String?

        public init(productType: String? = nil, code: String? = nil) {
            self.productType = productType
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case productType = "productType"
            case code = "code"
        }
    }

    public enum OrderBy: String, CustomStringConvertible, Codable {
        case asc = "ASC"
        case desc = "DESC"
        public var description: String { return self.rawValue }
    }

    public struct RemotePortDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Port", location: .body(locationName: "port"), required: false, type: .integer), 
            AWSShapeMember(label: "PortName", location: .body(locationName: "portName"), required: false, type: .string)
        ]
        /// Port number of the remote connection.
        public let port: Int32?
        /// Port name of the remote connection.
        public let portName: String?

        public init(port: Int32? = nil, portName: String? = nil) {
            self.port = port
            self.portName = portName
        }

        private enum CodingKeys: String, CodingKey {
            case port = "port"
            case portName = "portName"
        }
    }

    public struct SecurityGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string), 
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string)
        ]
        /// EC2 instance's security group ID.
        public let groupId: String?
        /// EC2 instance's security group name.
        public let groupName: String?

        public init(groupId: String? = nil, groupName: String? = nil) {
            self.groupId = groupId
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
            case groupName = "groupName"
        }
    }

    public struct StartMonitoringMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct AcceptInvitationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "InvitationId", location: .body(locationName: "invitationId"), required: false, type: .string), 
            AWSShapeMember(label: "MasterId", location: .body(locationName: "masterId"), required: false, type: .string)
        ]
        public let detectorId: String
        /// This value is used to validate the master account to the member account.
        public let invitationId: String?
        /// The account ID of the master GuardDuty account whose invitation you're accepting.
        public let masterId: String?

        public init(detectorId: String, invitationId: String? = nil, masterId: String? = nil) {
            self.detectorId = detectorId
            self.invitationId = invitationId
            self.masterId = masterId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case invitationId = "invitationId"
            case masterId = "masterId"
        }
    }

    public struct ListDetectorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        public let nextToken: String?
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct GeoLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Lat", location: .body(locationName: "lat"), required: false, type: .double), 
            AWSShapeMember(label: "Lon", location: .body(locationName: "lon"), required: false, type: .double)
        ]
        /// Latitude information of remote IP address.
        public let lat: Double?
        /// Longitude information of remote IP address.
        public let lon: Double?

        public init(lat: Double? = nil, lon: Double? = nil) {
            self.lat = lat
            self.lon = lon
        }

        private enum CodingKeys: String, CodingKey {
            case lat = "lat"
            case lon = "lon"
        }
    }

    public struct RemoteIpDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "City", location: .body(locationName: "city"), required: false, type: .structure), 
            AWSShapeMember(label: "Organization", location: .body(locationName: "organization"), required: false, type: .structure), 
            AWSShapeMember(label: "GeoLocation", location: .body(locationName: "geoLocation"), required: false, type: .structure), 
            AWSShapeMember(label: "IpAddressV4", location: .body(locationName: "ipAddressV4"), required: false, type: .string), 
            AWSShapeMember(label: "Country", location: .body(locationName: "country"), required: false, type: .structure)
        ]
        /// City information of the remote IP address.
        public let city: City?
        /// ISP Organization information of the remote IP address.
        public let organization: Organization?
        /// Location information of the remote IP address.
        public let geoLocation: GeoLocation?
        /// IPV4 remote address of the connection.
        public let ipAddressV4: String?
        /// Country code of the remote IP address.
        public let country: Country?

        public init(city: City? = nil, organization: Organization? = nil, geoLocation: GeoLocation? = nil, ipAddressV4: String? = nil, country: Country? = nil) {
            self.city = city
            self.organization = organization
            self.geoLocation = geoLocation
            self.ipAddressV4 = ipAddressV4
            self.country = country
        }

        private enum CodingKeys: String, CodingKey {
            case city = "city"
            case organization = "organization"
            case geoLocation = "geoLocation"
            case ipAddressV4 = "ipAddressV4"
            case country = "country"
        }
    }

    public struct PrivateIpAddressDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string)
        ]
        /// Private IP address of the EC2 instance.
        public let privateIpAddress: String?
        /// Private DNS name of the EC2 instance.
        public let privateDnsName: String?

        public init(privateIpAddress: String? = nil, privateDnsName: String? = nil) {
            self.privateIpAddress = privateIpAddress
            self.privateDnsName = privateDnsName
        }

        private enum CodingKeys: String, CodingKey {
            case privateIpAddress = "privateIpAddress"
            case privateDnsName = "privateDnsName"
        }
    }

    public struct DeleteInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: false, type: .list)
        ]
        /// A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to delete invitations from.
        public let accountIds: [String]?

        public init(accountIds: [String]? = nil) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "accountIds"
        }
    }

    public struct UpdateThreatIntelSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: false, type: .string), 
            AWSShapeMember(label: "Activate", location: .body(locationName: "activate"), required: false, type: .boolean), 
            AWSShapeMember(label: "ThreatIntelSetId", location: .uri(locationName: "threatIntelSetId"), required: true, type: .string)
        ]
        public let detectorId: String
        /// The unique ID that specifies the ThreatIntelSet that you want to update.
        public let name: String?
        /// The updated URI of the file that contains the ThreateIntelSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key)
        public let location: String?
        /// The updated boolean value that specifies whether the ThreateIntelSet is active or not.
        public let activate: Bool?
        public let threatIntelSetId: String

        public init(detectorId: String, name: String? = nil, location: String? = nil, activate: Bool? = nil, threatIntelSetId: String) {
            self.detectorId = detectorId
            self.name = name
            self.location = location
            self.activate = activate
            self.threatIntelSetId = threatIntelSetId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case name = "name"
            case location = "location"
            case activate = "activate"
            case threatIntelSetId = "threatIntelSetId"
        }
    }

    public struct CreateMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "AccountDetails", location: .body(locationName: "accountDetails"), required: false, type: .list)
        ]
        public let detectorId: String
        /// A list of account ID and email address pairs of the accounts that you want to associate with the master GuardDuty account.
        public let accountDetails: [AccountDetail]?

        public init(detectorId: String, accountDetails: [AccountDetail]? = nil) {
            self.detectorId = detectorId
            self.accountDetails = accountDetails
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case accountDetails = "accountDetails"
        }
    }

    public struct InstanceDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .list), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterfaces"), required: false, type: .list), 
            AWSShapeMember(label: "InstanceState", location: .body(locationName: "instanceState"), required: false, type: .string), 
            AWSShapeMember(label: "LaunchTime", location: .body(locationName: "launchTime"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "ImageDescription", location: .body(locationName: "imageDescription"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .list)
        ]
        /// The image ID of the EC2 instance.
        public let imageId: String?
        /// The availability zone of the EC2 instance.
        public let availabilityZone: String?
        /// The product code of the EC2 instance.
        public let productCodes: [ProductCode]?
        public let iamInstanceProfile: IamInstanceProfile?
        /// The platform of the EC2 instance.
        public let platform: String?
        /// The type of the EC2 instance.
        public let instanceType: String?
        /// The network interface information of the EC2 instance.
        public let networkInterfaces: [NetworkInterface]?
        /// The state of the EC2 instance.
        public let instanceState: String?
        /// The launch time of the EC2 instance.
        public let launchTime: String?
        /// The ID of the EC2 instance.
        public let instanceId: String?
        /// The image description of the EC2 instance.
        public let imageDescription: String?
        /// The tags of the EC2 instance.
        public let tags: [Tag]?

        public init(imageId: String? = nil, availabilityZone: String? = nil, productCodes: [ProductCode]? = nil, iamInstanceProfile: IamInstanceProfile? = nil, platform: String? = nil, instanceType: String? = nil, networkInterfaces: [NetworkInterface]? = nil, instanceState: String? = nil, launchTime: String? = nil, instanceId: String? = nil, imageDescription: String? = nil, tags: [Tag]? = nil) {
            self.imageId = imageId
            self.availabilityZone = availabilityZone
            self.productCodes = productCodes
            self.iamInstanceProfile = iamInstanceProfile
            self.platform = platform
            self.instanceType = instanceType
            self.networkInterfaces = networkInterfaces
            self.instanceState = instanceState
            self.launchTime = launchTime
            self.instanceId = instanceId
            self.imageDescription = imageDescription
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "imageId"
            case availabilityZone = "availabilityZone"
            case productCodes = "productCodes"
            case iamInstanceProfile = "iamInstanceProfile"
            case platform = "platform"
            case instanceType = "instanceType"
            case networkInterfaces = "networkInterfaces"
            case instanceState = "instanceState"
            case launchTime = "launchTime"
            case instanceId = "instanceId"
            case imageDescription = "imageDescription"
            case tags = "tags"
        }
    }

    public struct FindingCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Criterion", location: .body(locationName: "criterion"), required: false, type: .map)
        ]
        /// Represents a map of finding properties that match specified conditions and values when querying findings.
        public let criterion: [String: Condition]?

        public init(criterion: [String: Condition]? = nil) {
            self.criterion = criterion
        }

        private enum CodingKeys: String, CodingKey {
            case criterion = "criterion"
        }
    }

    public struct GetThreatIntelSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: false, type: .enum), 
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        /// A user-friendly ThreatIntelSet name that is displayed in all finding generated by activity that involves IP addresses included in this ThreatIntelSet.
        public let name: String?
        /// The format of the threatIntelSet.
        public let format: ThreatIntelSetFormat?
        /// The URI of the file that contains the ThreatIntelSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key).
        public let location: String?
        /// The status of threatIntelSet file uploaded.
        public let status: ThreatIntelSetStatus?

        public init(name: String? = nil, format: ThreatIntelSetFormat? = nil, location: String? = nil, status: ThreatIntelSetStatus? = nil) {
            self.name = name
            self.format = format
            self.location = location
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case format = "format"
            case location = "location"
            case status = "status"
        }
    }

    public struct DeclineInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: false, type: .list)
        ]
        /// A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to decline invitations from.
        public let accountIds: [String]?

        public init(accountIds: [String]? = nil) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "accountIds"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .body(locationName: "key"), required: false, type: .string), 
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]
        /// EC2 instance tag key.
        public let key: String?
        /// EC2 instance tag value.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct AccountDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: true, type: .string), 
            AWSShapeMember(label: "Email", location: .body(locationName: "email"), required: true, type: .string)
        ]
        /// Member account ID.
        public let accountId: String
        /// Member account's email address.
        public let email: String

        public init(accountId: String, email: String) {
            self.accountId = accountId
            self.email = email
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case email = "email"
        }
    }

    public struct Member: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RelationshipStatus", location: .body(locationName: "relationshipStatus"), required: true, type: .string), 
            AWSShapeMember(label: "MasterId", location: .body(locationName: "masterId"), required: true, type: .string), 
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: true, type: .string), 
            AWSShapeMember(label: "InvitedAt", location: .body(locationName: "invitedAt"), required: false, type: .string), 
            AWSShapeMember(label: "Email", location: .body(locationName: "email"), required: true, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .body(locationName: "detectorId"), required: false, type: .string), 
            AWSShapeMember(label: "UpdatedAt", location: .body(locationName: "updatedAt"), required: true, type: .string)
        ]
        /// The status of the relationship between the member and the master.
        public let relationshipStatus: String
        public let masterId: String
        public let accountId: String
        /// Timestamp at which the invitation was sent
        public let invitedAt: String?
        /// Member account's email address.
        public let email: String
        public let detectorId: String?
        public let updatedAt: String

        public init(relationshipStatus: String, masterId: String, accountId: String, invitedAt: String? = nil, email: String, detectorId: String? = nil, updatedAt: String) {
            self.relationshipStatus = relationshipStatus
            self.masterId = masterId
            self.accountId = accountId
            self.invitedAt = invitedAt
            self.email = email
            self.detectorId = detectorId
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case relationshipStatus = "relationshipStatus"
            case masterId = "masterId"
            case accountId = "accountId"
            case invitedAt = "invitedAt"
            case email = "email"
            case detectorId = "detectorId"
            case updatedAt = "updatedAt"
        }
    }

    public struct UpdateFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "FilterName", location: .uri(locationName: "filterName"), required: true, type: .string), 
            AWSShapeMember(label: "Rank", location: .body(locationName: "rank"), required: false, type: .integer), 
            AWSShapeMember(label: "FindingCriteria", location: .body(locationName: "findingCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "Action", location: .body(locationName: "action"), required: false, type: .enum), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        public let detectorId: String
        public let filterName: String
        /// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
        public let rank: Int32?
        /// Represents the criteria to be used in the filter for querying findings.
        public let findingCriteria: FindingCriteria?
        /// Specifies the action that is to be applied to the findings that match the filter.
        public let action: FilterAction?
        /// The description of the filter.
        public let description: String?

        public init(detectorId: String, filterName: String, rank: Int32? = nil, findingCriteria: FindingCriteria? = nil, action: FilterAction? = nil, description: String? = nil) {
            self.detectorId = detectorId
            self.filterName = filterName
            self.rank = rank
            self.findingCriteria = findingCriteria
            self.action = action
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case filterName = "filterName"
            case rank = "rank"
            case findingCriteria = "findingCriteria"
            case action = "action"
            case description = "description"
        }
    }

    public struct DnsRequestAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Domain", location: .body(locationName: "domain"), required: false, type: .string)
        ]
        /// Domain information for the DNS request.
        public let domain: String?

        public init(domain: String? = nil) {
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "domain"
        }
    }

    public struct ListFiltersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "FilterNames", location: .body(locationName: "filterNames"), required: false, type: .list)
        ]
        public let nextToken: String?
        public let filterNames: [String]?

        public init(nextToken: String? = nil, filterNames: [String]? = nil) {
            self.nextToken = nextToken
            self.filterNames = filterNames
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case filterNames = "filterNames"
        }
    }

    public struct GetFindingsStatisticsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FindingCriteria", location: .body(locationName: "findingCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "FindingStatisticTypes", location: .body(locationName: "findingStatisticTypes"), required: false, type: .list)
        ]
        /// Represents the criteria used for querying findings.
        public let findingCriteria: FindingCriteria?
        public let detectorId: String
        /// Types of finding statistics to retrieve.
        public let findingStatisticTypes: [FindingStatisticType]?

        public init(findingCriteria: FindingCriteria? = nil, detectorId: String, findingStatisticTypes: [FindingStatisticType]? = nil) {
            self.findingCriteria = findingCriteria
            self.detectorId = detectorId
            self.findingStatisticTypes = findingStatisticTypes
        }

        private enum CodingKeys: String, CodingKey {
            case findingCriteria = "findingCriteria"
            case detectorId = "detectorId"
            case findingStatisticTypes = "findingStatisticTypes"
        }
    }

    public struct AccessKeyDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserName", location: .body(locationName: "userName"), required: false, type: .string), 
            AWSShapeMember(label: "UserType", location: .body(locationName: "userType"), required: false, type: .string), 
            AWSShapeMember(label: "AccessKeyId", location: .body(locationName: "accessKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "PrincipalId", location: .body(locationName: "principalId"), required: false, type: .string)
        ]
        /// The name of the user.
        public let userName: String?
        /// The type of the user.
        public let userType: String?
        /// Access key ID of the user.
        public let accessKeyId: String?
        /// The principal ID of the user.
        public let principalId: String?

        public init(userName: String? = nil, userType: String? = nil, accessKeyId: String? = nil, principalId: String? = nil) {
            self.userName = userName
            self.userType = userType
            self.accessKeyId = accessKeyId
            self.principalId = principalId
        }

        private enum CodingKeys: String, CodingKey {
            case userName = "userName"
            case userType = "userType"
            case accessKeyId = "accessKeyId"
            case principalId = "principalId"
        }
    }

    public struct DeleteIPSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "IpSetId", location: .uri(locationName: "ipSetId"), required: true, type: .string)
        ]
        public let detectorId: String
        public let ipSetId: String

        public init(detectorId: String, ipSetId: String) {
            self.detectorId = detectorId
            self.ipSetId = ipSetId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case ipSetId = "ipSetId"
        }
    }

    public struct Action: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AwsApiCallAction", location: .body(locationName: "awsApiCallAction"), required: false, type: .structure), 
            AWSShapeMember(label: "DnsRequestAction", location: .body(locationName: "dnsRequestAction"), required: false, type: .structure), 
            AWSShapeMember(label: "ActionType", location: .body(locationName: "actionType"), required: false, type: .string), 
            AWSShapeMember(label: "PortProbeAction", location: .body(locationName: "portProbeAction"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkConnectionAction", location: .body(locationName: "networkConnectionAction"), required: false, type: .structure)
        ]
        /// Information about the AWS_API_CALL action described in this finding.
        public let awsApiCallAction: AwsApiCallAction?
        /// Information about the DNS_REQUEST action described in this finding.
        public let dnsRequestAction: DnsRequestAction?
        /// GuardDuty Finding activity type.
        public let actionType: String?
        /// Information about the PORT_PROBE action described in this finding.
        public let portProbeAction: PortProbeAction?
        /// Information about the NETWORK_CONNECTION action described in this finding.
        public let networkConnectionAction: NetworkConnectionAction?

        public init(awsApiCallAction: AwsApiCallAction? = nil, dnsRequestAction: DnsRequestAction? = nil, actionType: String? = nil, portProbeAction: PortProbeAction? = nil, networkConnectionAction: NetworkConnectionAction? = nil) {
            self.awsApiCallAction = awsApiCallAction
            self.dnsRequestAction = dnsRequestAction
            self.actionType = actionType
            self.portProbeAction = portProbeAction
            self.networkConnectionAction = networkConnectionAction
        }

        private enum CodingKeys: String, CodingKey {
            case awsApiCallAction = "awsApiCallAction"
            case dnsRequestAction = "dnsRequestAction"
            case actionType = "actionType"
            case portProbeAction = "portProbeAction"
            case networkConnectionAction = "networkConnectionAction"
        }
    }

    public struct DisassociateMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: false, type: .list)
        ]
        public let detectorId: String
        /// A list of account IDs of the GuardDuty member accounts that you want to disassociate from master.
        public let accountIds: [String]?

        public init(detectorId: String, accountIds: [String]? = nil) {
            self.detectorId = detectorId
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case accountIds = "accountIds"
        }
    }

    public struct GetMasterAccountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Master", location: .body(locationName: "master"), required: false, type: .structure)
        ]
        public let master: Master?

        public init(master: Master? = nil) {
            self.master = master
        }

        private enum CodingKeys: String, CodingKey {
            case master = "master"
        }
    }

    public struct DeleteDetectorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let detectorId: String

        public init(detectorId: String) {
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
        }
    }

    public struct GetThreatIntelSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "ThreatIntelSetId", location: .uri(locationName: "threatIntelSetId"), required: true, type: .string)
        ]
        public let detectorId: String
        public let threatIntelSetId: String

        public init(detectorId: String, threatIntelSetId: String) {
            self.detectorId = detectorId
            self.threatIntelSetId = threatIntelSetId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case threatIntelSetId = "threatIntelSetId"
        }
    }

    public struct GetInvitationsCountRequest: AWSShape {

    }

    public struct GetFilterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "FindingCriteria", location: .body(locationName: "findingCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "Rank", location: .body(locationName: "rank"), required: false, type: .integer), 
            AWSShapeMember(label: "Action", location: .body(locationName: "action"), required: false, type: .enum), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The name of the filter.
        public let name: String?
        /// Represents the criteria to be used in the filter for querying findings.
        public let findingCriteria: FindingCriteria?
        /// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
        public let rank: Int32?
        /// Specifies the action that is to be applied to the findings that match the filter.
        public let action: FilterAction?
        /// The description of the filter.
        public let description: String?

        public init(name: String? = nil, findingCriteria: FindingCriteria? = nil, rank: Int32? = nil, action: FilterAction? = nil, description: String? = nil) {
            self.name = name
            self.findingCriteria = findingCriteria
            self.rank = rank
            self.action = action
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case findingCriteria = "findingCriteria"
            case rank = "rank"
            case action = "action"
            case description = "description"
        }
    }

    public struct SortCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", location: .body(locationName: "attributeName"), required: false, type: .string), 
            AWSShapeMember(label: "OrderBy", location: .body(locationName: "orderBy"), required: false, type: .enum)
        ]
        /// Represents the finding attribute (for example, accountId) by which to sort findings.
        public let attributeName: String?
        /// Order by which the sorted findings are to be displayed.
        public let orderBy: OrderBy?

        public init(attributeName: String? = nil, orderBy: OrderBy? = nil) {
            self.attributeName = attributeName
            self.orderBy = orderBy
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "attributeName"
            case orderBy = "orderBy"
        }
    }

    public struct UnarchiveFindingsResponse: AWSShape {

    }

    public struct UpdateFindingsFeedbackRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FindingIds", location: .body(locationName: "findingIds"), required: false, type: .list), 
            AWSShapeMember(label: "Feedback", location: .body(locationName: "feedback"), required: false, type: .enum), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "Comments", location: .body(locationName: "comments"), required: false, type: .string)
        ]
        /// IDs of the findings that you want to mark as useful or not useful.
        public let findingIds: [String]?
        /// Valid values: USEFUL | NOT_USEFUL
        public let feedback: Feedback?
        public let detectorId: String
        /// Additional feedback about the GuardDuty findings.
        public let comments: String?

        public init(findingIds: [String]? = nil, feedback: Feedback? = nil, detectorId: String, comments: String? = nil) {
            self.findingIds = findingIds
            self.feedback = feedback
            self.detectorId = detectorId
            self.comments = comments
        }

        private enum CodingKeys: String, CodingKey {
            case findingIds = "findingIds"
            case feedback = "feedback"
            case detectorId = "detectorId"
            case comments = "comments"
        }
    }

    public struct GetFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Findings", location: .body(locationName: "findings"), required: false, type: .list)
        ]
        public let findings: [Finding]?

        public init(findings: [Finding]? = nil) {
            self.findings = findings
        }

        private enum CodingKeys: String, CodingKey {
            case findings = "findings"
        }
    }

    public struct ListMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "OnlyAssociated", location: .querystring(locationName: "onlyAssociated"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let detectorId: String
        public let maxResults: Int32?
        public let onlyAssociated: String?

        public init(nextToken: String? = nil, detectorId: String, maxResults: Int32? = nil, onlyAssociated: String? = nil) {
            self.nextToken = nextToken
            self.detectorId = detectorId
            self.maxResults = maxResults
            self.onlyAssociated = onlyAssociated
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case detectorId = "detectorId"
            case maxResults = "maxResults"
            case onlyAssociated = "onlyAssociated"
        }
    }

    public struct ListIPSetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        public let nextToken: String?
        public let detectorId: String
        public let maxResults: Int32?

        public init(nextToken: String? = nil, detectorId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.detectorId = detectorId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case detectorId = "detectorId"
            case maxResults = "maxResults"
        }
    }

    public struct AcceptInvitationResponse: AWSShape {

    }

    public struct ListIPSetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "IpSetIds", location: .body(locationName: "ipSetIds"), required: false, type: .list)
        ]
        public let nextToken: String?
        public let ipSetIds: [String]?

        public init(nextToken: String? = nil, ipSetIds: [String]? = nil) {
            self.nextToken = nextToken
            self.ipSetIds = ipSetIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case ipSetIds = "ipSetIds"
        }
    }

    public struct FindingStatistics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CountBySeverity", location: .body(locationName: "countBySeverity"), required: false, type: .map)
        ]
        /// Represents a map of severity to count statistic for a set of findings
        public let countBySeverity: [String: Int32]?

        public init(countBySeverity: [String: Int32]? = nil) {
            self.countBySeverity = countBySeverity
        }

        private enum CodingKeys: String, CodingKey {
            case countBySeverity = "countBySeverity"
        }
    }

    public struct UpdateIPSetResponse: AWSShape {

    }

    public struct Service: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Archived", location: .body(locationName: "archived"), required: false, type: .boolean), 
            AWSShapeMember(label: "Action", location: .body(locationName: "action"), required: false, type: .structure), 
            AWSShapeMember(label: "EventLastSeen", location: .body(locationName: "eventLastSeen"), required: false, type: .string), 
            AWSShapeMember(label: "EventFirstSeen", location: .body(locationName: "eventFirstSeen"), required: false, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .body(locationName: "detectorId"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceRole", location: .body(locationName: "resourceRole"), required: false, type: .string), 
            AWSShapeMember(label: "UserFeedback", location: .body(locationName: "userFeedback"), required: false, type: .string), 
            AWSShapeMember(label: "ServiceName", location: .body(locationName: "serviceName"), required: false, type: .string), 
            AWSShapeMember(label: "Count", location: .body(locationName: "count"), required: false, type: .integer)
        ]
        /// Indicates whether this finding is archived.
        public let archived: Bool?
        /// Information about the activity described in a finding.
        public let action: Action?
        /// Last seen timestamp of the activity that prompted GuardDuty to generate this finding.
        public let eventLastSeen: String?
        /// First seen timestamp of the activity that prompted GuardDuty to generate this finding.
        public let eventFirstSeen: String?
        /// Detector ID for the GuardDuty service.
        public let detectorId: String?
        /// Resource role information for this finding.
        public let resourceRole: String?
        /// Feedback left about the finding.
        public let userFeedback: String?
        /// The name of the AWS service (GuardDuty) that generated a finding.
        public let serviceName: String?
        /// Total count of the occurrences of this finding type.
        public let count: Int32?

        public init(archived: Bool? = nil, action: Action? = nil, eventLastSeen: String? = nil, eventFirstSeen: String? = nil, detectorId: String? = nil, resourceRole: String? = nil, userFeedback: String? = nil, serviceName: String? = nil, count: Int32? = nil) {
            self.archived = archived
            self.action = action
            self.eventLastSeen = eventLastSeen
            self.eventFirstSeen = eventFirstSeen
            self.detectorId = detectorId
            self.resourceRole = resourceRole
            self.userFeedback = userFeedback
            self.serviceName = serviceName
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case archived = "archived"
            case action = "action"
            case eventLastSeen = "eventLastSeen"
            case eventFirstSeen = "eventFirstSeen"
            case detectorId = "detectorId"
            case resourceRole = "resourceRole"
            case userFeedback = "userFeedback"
            case serviceName = "serviceName"
            case count = "count"
        }
    }

    public struct StartMonitoringMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: false, type: .list)
        ]
        public let detectorId: String
        /// A list of account IDs of the GuardDuty member accounts whose findings you want the master account to monitor.
        public let accountIds: [String]?

        public init(detectorId: String, accountIds: [String]? = nil) {
            self.detectorId = detectorId
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case accountIds = "accountIds"
        }
    }

    public struct NetworkConnectionAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: false, type: .string), 
            AWSShapeMember(label: "Blocked", location: .body(locationName: "blocked"), required: false, type: .boolean), 
            AWSShapeMember(label: "ConnectionDirection", location: .body(locationName: "connectionDirection"), required: false, type: .string), 
            AWSShapeMember(label: "RemoteIpDetails", location: .body(locationName: "remoteIpDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "RemotePortDetails", location: .body(locationName: "remotePortDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "LocalPortDetails", location: .body(locationName: "localPortDetails"), required: false, type: .structure)
        ]
        /// Network connection protocol.
        public let `protocol`: String?
        /// Network connection blocked information.
        public let blocked: Bool?
        /// Network connection direction.
        public let connectionDirection: String?
        /// Remote IP information of the connection.
        public let remoteIpDetails: RemoteIpDetails?
        /// Remote port information of the connection.
        public let remotePortDetails: RemotePortDetails?
        /// Local port information of the connection.
        public let localPortDetails: LocalPortDetails?

        public init(protocol: String? = nil, blocked: Bool? = nil, connectionDirection: String? = nil, remoteIpDetails: RemoteIpDetails? = nil, remotePortDetails: RemotePortDetails? = nil, localPortDetails: LocalPortDetails? = nil) {
            self.`protocol` = `protocol`
            self.blocked = blocked
            self.connectionDirection = connectionDirection
            self.remoteIpDetails = remoteIpDetails
            self.remotePortDetails = remotePortDetails
            self.localPortDetails = localPortDetails
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "protocol"
            case blocked = "blocked"
            case connectionDirection = "connectionDirection"
            case remoteIpDetails = "remoteIpDetails"
            case remotePortDetails = "remotePortDetails"
            case localPortDetails = "localPortDetails"
        }
    }

    public struct City: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CityName", location: .body(locationName: "cityName"), required: false, type: .string)
        ]
        /// City name of the remote IP address.
        public let cityName: String?

        public init(cityName: String? = nil) {
            self.cityName = cityName
        }

        private enum CodingKeys: String, CodingKey {
            case cityName = "cityName"
        }
    }

    public struct GetIPSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "IpSetId", location: .uri(locationName: "ipSetId"), required: true, type: .string)
        ]
        public let detectorId: String
        public let ipSetId: String

        public init(detectorId: String, ipSetId: String) {
            self.detectorId = detectorId
            self.ipSetId = ipSetId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case ipSetId = "ipSetId"
        }
    }

    public struct LocalPortDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Port", location: .body(locationName: "port"), required: false, type: .integer), 
            AWSShapeMember(label: "PortName", location: .body(locationName: "portName"), required: false, type: .string)
        ]
        /// Port number of the local connection.
        public let port: Int32?
        /// Port name of the local connection.
        public let portName: String?

        public init(port: Int32? = nil, portName: String? = nil) {
            self.port = port
            self.portName = portName
        }

        private enum CodingKeys: String, CodingKey {
            case port = "port"
            case portName = "portName"
        }
    }

    public struct CreateSampleFindingsResponse: AWSShape {

    }

    public struct CreateDetectorResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .body(locationName: "detectorId"), required: false, type: .string)
        ]
        /// The unique ID of the created detector.
        public let detectorId: String?

        public init(detectorId: String? = nil) {
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
        }
    }

    public struct ListMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Members", location: .body(locationName: "members"), required: false, type: .list)
        ]
        public let nextToken: String?
        public let members: [Member]?

        public init(nextToken: String? = nil, members: [Member]? = nil) {
            self.nextToken = nextToken
            self.members = members
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case members = "members"
        }
    }

    public struct DisassociateMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct CreateMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct UpdateThreatIntelSetResponse: AWSShape {

    }

    public struct GetFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "FilterName", location: .uri(locationName: "filterName"), required: true, type: .string)
        ]
        public let detectorId: String
        public let filterName: String

        public init(detectorId: String, filterName: String) {
            self.detectorId = detectorId
            self.filterName = filterName
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case filterName = "filterName"
        }
    }

    public struct DeleteMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: false, type: .list)
        ]
        public let detectorId: String
        /// A list of account IDs of the GuardDuty member accounts that you want to delete.
        public let accountIds: [String]?

        public init(detectorId: String, accountIds: [String]? = nil) {
            self.detectorId = detectorId
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case accountIds = "accountIds"
        }
    }

    public struct ListThreatIntelSetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        public let nextToken: String?
        public let detectorId: String
        public let maxResults: Int32?

        public init(nextToken: String? = nil, detectorId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.detectorId = detectorId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case detectorId = "detectorId"
            case maxResults = "maxResults"
        }
    }

    public struct UpdateFindingsFeedbackResponse: AWSShape {

    }

    public struct ListFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "SortCriteria", location: .body(locationName: "sortCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "FindingCriteria", location: .body(locationName: "findingCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListFindings action. For subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.
        public let nextToken: String?
        public let detectorId: String
        /// Represents the criteria used for sorting findings.
        public let sortCriteria: SortCriteria?
        /// Represents the criteria used for querying findings.
        public let findingCriteria: FindingCriteria?
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, detectorId: String, sortCriteria: SortCriteria? = nil, findingCriteria: FindingCriteria? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.detectorId = detectorId
            self.sortCriteria = sortCriteria
            self.findingCriteria = findingCriteria
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case detectorId = "detectorId"
            case sortCriteria = "sortCriteria"
            case findingCriteria = "findingCriteria"
            case maxResults = "maxResults"
        }
    }

    public struct GetDetectorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let detectorId: String

        public init(detectorId: String) {
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
        }
    }

    public struct ListFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "FindingIds", location: .body(locationName: "findingIds"), required: false, type: .list)
        ]
        public let nextToken: String?
        public let findingIds: [String]?

        public init(nextToken: String? = nil, findingIds: [String]? = nil) {
            self.nextToken = nextToken
            self.findingIds = findingIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case findingIds = "findingIds"
        }
    }

    public struct StopMonitoringMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: false, type: .list)
        ]
        public let detectorId: String
        /// A list of account IDs of the GuardDuty member accounts whose findings you want the master account to stop monitoring.
        public let accountIds: [String]?

        public init(detectorId: String, accountIds: [String]? = nil) {
            self.detectorId = detectorId
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case accountIds = "accountIds"
        }
    }

    public struct ErrorResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string), 
            AWSShapeMember(label: "Type", location: .body(locationName: "__type"), required: false, type: .string)
        ]
        /// The error message.
        public let message: String?
        /// The error type.
        public let `type`: String?

        public init(message: String? = nil, type: String? = nil) {
            self.message = message
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
            case `type` = "__type"
        }
    }

    public struct ListThreatIntelSetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ThreatIntelSetIds", location: .body(locationName: "threatIntelSetIds"), required: false, type: .list)
        ]
        public let nextToken: String?
        public let threatIntelSetIds: [String]?

        public init(nextToken: String? = nil, threatIntelSetIds: [String]? = nil) {
            self.nextToken = nextToken
            self.threatIntelSetIds = threatIntelSetIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case threatIntelSetIds = "threatIntelSetIds"
        }
    }

    public struct InviteMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

}