// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension GuardDuty {

    public struct GetFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Findings", location: .body(locationName: "findings"), required: false, type: .list)
        ]
        public let findings: [Finding]?

        public init(findings: [Finding]? = nil) {
            self.findings = findings
        }

        private enum CodingKeys: String, CodingKey {
            case findings = "findings"
        }
    }

    public struct InviteMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string), 
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: true, type: .list), 
            AWSShapeMember(label: "DisableEmailNotification", location: .body(locationName: "disableEmailNotification"), required: false, type: .boolean)
        ]
        public let detectorId: String
        /// The invitation message that you want to send to the accounts that you’re inviting to GuardDuty as members.
        public let message: String?
        /// A list of account IDs of the accounts that you want to invite to GuardDuty as members.
        public let accountIds: [String]
        /// A boolean value that specifies whether you want to disable email notification to the accounts that you’re inviting to GuardDuty as members.
        public let disableEmailNotification: Bool?

        public init(detectorId: String, message: String? = nil, accountIds: [String], disableEmailNotification: Bool? = nil) {
            self.detectorId = detectorId
            self.message = message
            self.accountIds = accountIds
            self.disableEmailNotification = disableEmailNotification
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case message = "message"
            case accountIds = "accountIds"
            case disableEmailNotification = "disableEmailNotification"
        }
    }

    public struct CreateDetectorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "FindingPublishingFrequency", location: .body(locationName: "findingPublishingFrequency"), required: false, type: .enum), 
            AWSShapeMember(label: "Enable", location: .body(locationName: "enable"), required: true, type: .boolean)
        ]
        /// The idempotency token for the create request.
        public let clientToken: String?
        /// A enum value that specifies how frequently customer got Finding updates published.
        public let findingPublishingFrequency: FindingPublishingFrequency?
        /// A boolean value that specifies whether the detector is to be enabled.
        public let enable: Bool

        public init(clientToken: String? = nil, findingPublishingFrequency: FindingPublishingFrequency? = nil, enable: Bool) {
            self.clientToken = clientToken
            self.findingPublishingFrequency = findingPublishingFrequency
            self.enable = enable
        }

        private enum CodingKeys: String, CodingKey {
            case clientToken = "clientToken"
            case findingPublishingFrequency = "findingPublishingFrequency"
            case enable = "enable"
        }
    }

    public struct CreateIPSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: true, type: .enum), 
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: true, type: .string), 
            AWSShapeMember(label: "Activate", location: .body(locationName: "activate"), required: true, type: .boolean), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string)
        ]
        /// The user friendly name to identify the IPSet. This name is displayed in all findings that are triggered by activity that involves IP addresses included in this IPSet.
        public let name: String
        /// The format of the file that contains the IPSet.
        public let format: IpSetFormat
        /// The URI of the file that contains the IPSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key)
        public let location: String
        /// A boolean value that indicates whether GuardDuty is to start using the uploaded IPSet.
        public let activate: Bool
        public let detectorId: String
        /// The idempotency token for the create request.
        public let clientToken: String?

        public init(name: String, format: IpSetFormat, location: String, activate: Bool, detectorId: String, clientToken: String? = nil) {
            self.name = name
            self.format = format
            self.location = location
            self.activate = activate
            self.detectorId = detectorId
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case format = "format"
            case location = "location"
            case activate = "activate"
            case detectorId = "detectorId"
            case clientToken = "clientToken"
        }
    }

    public struct UpdateIPSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: false, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "Activate", location: .body(locationName: "activate"), required: false, type: .boolean), 
            AWSShapeMember(label: "IpSetId", location: .uri(locationName: "ipSetId"), required: true, type: .string)
        ]
        /// The unique ID that specifies the IPSet that you want to update.
        public let name: String?
        /// The updated URI of the file that contains the IPSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key).
        public let location: String?
        public let detectorId: String
        /// The updated boolean value that specifies whether the IPSet is active or not.
        public let activate: Bool?
        public let ipSetId: String

        public init(name: String? = nil, location: String? = nil, detectorId: String, activate: Bool? = nil, ipSetId: String) {
            self.name = name
            self.location = location
            self.detectorId = detectorId
            self.activate = activate
            self.ipSetId = ipSetId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case location = "location"
            case detectorId = "detectorId"
            case activate = "activate"
            case ipSetId = "ipSetId"
        }
    }

    public struct GetThreatIntelSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: false, type: .string), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: false, type: .enum), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        /// The URI of the file that contains the ThreatIntelSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key).
        public let location: String?
        /// The format of the threatIntelSet.
        public let format: ThreatIntelSetFormat?
        /// A user-friendly ThreatIntelSet name that is displayed in all finding generated by activity that involves IP addresses included in this ThreatIntelSet.
        public let name: String?
        /// The status of threatIntelSet file uploaded.
        public let status: ThreatIntelSetStatus?

        public init(location: String? = nil, format: ThreatIntelSetFormat? = nil, name: String? = nil, status: ThreatIntelSetStatus? = nil) {
            self.location = location
            self.format = format
            self.name = name
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case location = "location"
            case format = "format"
            case name = "name"
            case status = "status"
        }
    }

    public struct FindingCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Criterion", location: .body(locationName: "criterion"), required: false, type: .map)
        ]
        /// Represents a map of finding properties that match specified conditions and values when querying findings.
        public let criterion: [String: Condition]?

        public init(criterion: [String: Condition]? = nil) {
            self.criterion = criterion
        }

        private enum CodingKeys: String, CodingKey {
            case criterion = "criterion"
        }
    }

    public enum DetectorStatus: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public struct CreateSampleFindingsResponse: AWSShape {

    }

    public struct CreateDetectorResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .body(locationName: "detectorId"), required: false, type: .string)
        ]
        /// The unique ID of the created detector.
        public let detectorId: String?

        public init(detectorId: String? = nil) {
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
        }
    }

    public struct Condition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Gt", location: .body(locationName: "gt"), required: false, type: .integer), 
            AWSShapeMember(label: "Neq", location: .body(locationName: "neq"), required: false, type: .list), 
            AWSShapeMember(label: "Lte", location: .body(locationName: "lte"), required: false, type: .integer), 
            AWSShapeMember(label: "Gte", location: .body(locationName: "gte"), required: false, type: .integer), 
            AWSShapeMember(label: "Lt", location: .body(locationName: "lt"), required: false, type: .integer), 
            AWSShapeMember(label: "Eq", location: .body(locationName: "eq"), required: false, type: .list)
        ]
        /// Represents the greater than condition to be applied to a single field when querying for findings.
        public let gt: Int32?
        /// Represents the not equal condition to be applied to a single field when querying for findings.
        public let neq: [String]?
        /// Represents the less than equal condition to be applied to a single field when querying for findings.
        public let lte: Int32?
        /// Represents the greater than equal condition to be applied to a single field when querying for findings.
        public let gte: Int32?
        /// Represents the less than condition to be applied to a single field when querying for findings.
        public let lt: Int32?
        /// Represents the equal condition to be applied to a single field when querying for findings.
        public let eq: [String]?

        public init(gt: Int32? = nil, neq: [String]? = nil, lte: Int32? = nil, gte: Int32? = nil, lt: Int32? = nil, eq: [String]? = nil) {
            self.gt = gt
            self.neq = neq
            self.lte = lte
            self.gte = gte
            self.lt = lt
            self.eq = eq
        }

        private enum CodingKeys: String, CodingKey {
            case gt = "gt"
            case neq = "neq"
            case lte = "lte"
            case gte = "gte"
            case lt = "lt"
            case eq = "eq"
        }
    }

    public struct GetFindingsStatisticsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FindingStatistics", location: .body(locationName: "findingStatistics"), required: false, type: .structure)
        ]
        /// Finding statistics object.
        public let findingStatistics: FindingStatistics?

        public init(findingStatistics: FindingStatistics? = nil) {
            self.findingStatistics = findingStatistics
        }

        private enum CodingKeys: String, CodingKey {
            case findingStatistics = "findingStatistics"
        }
    }

    public struct DeleteInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct ListDetectorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        public let maxResults: Int32?
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct UpdateFindingsFeedbackResponse: AWSShape {

    }

    public struct GetIPSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IpSetId", location: .uri(locationName: "ipSetId"), required: true, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let ipSetId: String
        public let detectorId: String

        public init(ipSetId: String, detectorId: String) {
            self.ipSetId = ipSetId
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case ipSetId = "ipSetId"
            case detectorId = "detectorId"
        }
    }

    public struct ErrorResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", location: .body(locationName: "__type"), required: false, type: .string), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string)
        ]
        /// The error type.
        public let `type`: String?
        /// The error message.
        public let message: String?

        public init(type: String? = nil, message: String? = nil) {
            self.`type` = `type`
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "__type"
            case message = "message"
        }
    }

    public struct ListThreatIntelSetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        public let nextToken: String?
        public let detectorId: String
        public let maxResults: Int32?

        public init(nextToken: String? = nil, detectorId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.detectorId = detectorId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case detectorId = "detectorId"
            case maxResults = "maxResults"
        }
    }

    public struct NetworkConnectionAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocalPortDetails", location: .body(locationName: "localPortDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "Blocked", location: .body(locationName: "blocked"), required: false, type: .boolean), 
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectionDirection", location: .body(locationName: "connectionDirection"), required: false, type: .string), 
            AWSShapeMember(label: "RemotePortDetails", location: .body(locationName: "remotePortDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "RemoteIpDetails", location: .body(locationName: "remoteIpDetails"), required: false, type: .structure)
        ]
        /// Local port information of the connection.
        public let localPortDetails: LocalPortDetails?
        /// Network connection blocked information.
        public let blocked: Bool?
        /// Network connection protocol.
        public let `protocol`: String?
        /// Network connection direction.
        public let connectionDirection: String?
        /// Remote port information of the connection.
        public let remotePortDetails: RemotePortDetails?
        /// Remote IP information of the connection.
        public let remoteIpDetails: RemoteIpDetails?

        public init(localPortDetails: LocalPortDetails? = nil, blocked: Bool? = nil, protocol: String? = nil, connectionDirection: String? = nil, remotePortDetails: RemotePortDetails? = nil, remoteIpDetails: RemoteIpDetails? = nil) {
            self.localPortDetails = localPortDetails
            self.blocked = blocked
            self.`protocol` = `protocol`
            self.connectionDirection = connectionDirection
            self.remotePortDetails = remotePortDetails
            self.remoteIpDetails = remoteIpDetails
        }

        private enum CodingKeys: String, CodingKey {
            case localPortDetails = "localPortDetails"
            case blocked = "blocked"
            case `protocol` = "protocol"
            case connectionDirection = "connectionDirection"
            case remotePortDetails = "remotePortDetails"
            case remoteIpDetails = "remoteIpDetails"
        }
    }

    public struct UpdateFindingsFeedbackRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "Feedback", location: .body(locationName: "feedback"), required: true, type: .enum), 
            AWSShapeMember(label: "Comments", location: .body(locationName: "comments"), required: false, type: .string), 
            AWSShapeMember(label: "FindingIds", location: .body(locationName: "findingIds"), required: true, type: .list)
        ]
        public let detectorId: String
        /// Valid values: USEFUL | NOT_USEFUL
        public let feedback: Feedback
        /// Additional feedback about the GuardDuty findings.
        public let comments: String?
        /// IDs of the findings that you want to mark as useful or not useful.
        public let findingIds: [String]

        public init(detectorId: String, feedback: Feedback, comments: String? = nil, findingIds: [String]) {
            self.detectorId = detectorId
            self.feedback = feedback
            self.comments = comments
            self.findingIds = findingIds
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case feedback = "feedback"
            case comments = "comments"
            case findingIds = "findingIds"
        }
    }

    public struct Finding: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpdatedAt", location: .body(locationName: "updatedAt"), required: true, type: .string), 
            AWSShapeMember(label: "SchemaVersion", location: .body(locationName: "schemaVersion"), required: true, type: .string), 
            AWSShapeMember(label: "Title", location: .body(locationName: "title"), required: false, type: .string), 
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Resource", location: .body(locationName: "resource"), required: true, type: .structure), 
            AWSShapeMember(label: "Region", location: .body(locationName: "region"), required: true, type: .string), 
            AWSShapeMember(label: "CreatedAt", location: .body(locationName: "createdAt"), required: true, type: .string), 
            AWSShapeMember(label: "Partition", location: .body(locationName: "partition"), required: false, type: .string), 
            AWSShapeMember(label: "Severity", location: .body(locationName: "severity"), required: true, type: .double), 
            AWSShapeMember(label: "Confidence", location: .body(locationName: "confidence"), required: false, type: .double), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: true, type: .string), 
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: true, type: .string), 
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: true, type: .string), 
            AWSShapeMember(label: "Service", location: .body(locationName: "service"), required: false, type: .structure)
        ]
        /// The time stamp at which a finding was last updated.
        public let updatedAt: String
        /// Findings' schema version.
        public let schemaVersion: String
        /// The title of a finding.
        public let title: String?
        /// The ARN of a finding described by the action.
        public let arn: String
        /// The description of a finding.
        public let description: String?
        /// The AWS resource associated with the activity that prompted GuardDuty to generate a finding.
        public let resource: Resource
        /// The AWS region where the activity occurred that prompted GuardDuty to generate a finding.
        public let region: String
        /// The time stamp at which a finding was generated.
        public let createdAt: String
        /// The AWS resource partition.
        public let partition: String?
        /// The severity of a finding.
        public let severity: Double
        /// The confidence level of a finding.
        public let confidence: Double?
        /// The identifier that corresponds to a finding described by the action.
        public let id: String
        /// The type of a finding described by the action.
        public let `type`: String
        /// AWS account ID where the activity occurred that prompted GuardDuty to generate a finding.
        public let accountId: String
        /// Additional information assigned to the generated finding by GuardDuty.
        public let service: Service?

        public init(updatedAt: String, schemaVersion: String, title: String? = nil, arn: String, description: String? = nil, resource: Resource, region: String, createdAt: String, partition: String? = nil, severity: Double, confidence: Double? = nil, id: String, type: String, accountId: String, service: Service? = nil) {
            self.updatedAt = updatedAt
            self.schemaVersion = schemaVersion
            self.title = title
            self.arn = arn
            self.description = description
            self.resource = resource
            self.region = region
            self.createdAt = createdAt
            self.partition = partition
            self.severity = severity
            self.confidence = confidence
            self.id = id
            self.`type` = `type`
            self.accountId = accountId
            self.service = service
        }

        private enum CodingKeys: String, CodingKey {
            case updatedAt = "updatedAt"
            case schemaVersion = "schemaVersion"
            case title = "title"
            case arn = "arn"
            case description = "description"
            case resource = "resource"
            case region = "region"
            case createdAt = "createdAt"
            case partition = "partition"
            case severity = "severity"
            case confidence = "confidence"
            case id = "id"
            case `type` = "type"
            case accountId = "accountId"
            case service = "service"
        }
    }

    public enum IpSetFormat: String, CustomStringConvertible, Codable {
        case txt = "TXT"
        case stix = "STIX"
        case otxCsv = "OTX_CSV"
        case alienVault = "ALIEN_VAULT"
        case proofPoint = "PROOF_POINT"
        case fireEye = "FIRE_EYE"
        public var description: String { return self.rawValue }
    }

    public struct DisassociateFromMasterAccountResponse: AWSShape {

    }

    public struct GetDetectorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let detectorId: String

        public init(detectorId: String) {
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
        }
    }

    public struct GetDetectorResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "CreatedAt", location: .body(locationName: "createdAt"), required: false, type: .string), 
            AWSShapeMember(label: "UpdatedAt", location: .body(locationName: "updatedAt"), required: false, type: .string), 
            AWSShapeMember(label: "FindingPublishingFrequency", location: .body(locationName: "findingPublishingFrequency"), required: false, type: .enum), 
            AWSShapeMember(label: "ServiceRole", location: .body(locationName: "serviceRole"), required: false, type: .string)
        ]
        public let status: DetectorStatus?
        public let createdAt: String?
        public let updatedAt: String?
        public let findingPublishingFrequency: FindingPublishingFrequency?
        public let serviceRole: String?

        public init(status: DetectorStatus? = nil, createdAt: String? = nil, updatedAt: String? = nil, findingPublishingFrequency: FindingPublishingFrequency? = nil, serviceRole: String? = nil) {
            self.status = status
            self.createdAt = createdAt
            self.updatedAt = updatedAt
            self.findingPublishingFrequency = findingPublishingFrequency
            self.serviceRole = serviceRole
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case createdAt = "createdAt"
            case updatedAt = "updatedAt"
            case findingPublishingFrequency = "findingPublishingFrequency"
            case serviceRole = "serviceRole"
        }
    }

    public struct GetIPSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: false, type: .string), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: false, type: .enum), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        /// The URI of the file that contains the IPSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key)
        public let location: String?
        /// The format of the file that contains the IPSet.
        public let format: IpSetFormat?
        /// The user friendly name to identify the IPSet. This name is displayed in all findings that are triggered by activity that involves IP addresses included in this IPSet.
        public let name: String?
        /// The status of ipSet file uploaded.
        public let status: IpSetStatus?

        public init(location: String? = nil, format: IpSetFormat? = nil, name: String? = nil, status: IpSetStatus? = nil) {
            self.location = location
            self.format = format
            self.name = name
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case location = "location"
            case format = "format"
            case name = "name"
            case status = "status"
        }
    }

    public enum OrderBy: String, CustomStringConvertible, Codable {
        case asc = "ASC"
        case desc = "DESC"
        public var description: String { return self.rawValue }
    }

    public struct Action: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AwsApiCallAction", location: .body(locationName: "awsApiCallAction"), required: false, type: .structure), 
            AWSShapeMember(label: "DnsRequestAction", location: .body(locationName: "dnsRequestAction"), required: false, type: .structure), 
            AWSShapeMember(label: "PortProbeAction", location: .body(locationName: "portProbeAction"), required: false, type: .structure), 
            AWSShapeMember(label: "ActionType", location: .body(locationName: "actionType"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkConnectionAction", location: .body(locationName: "networkConnectionAction"), required: false, type: .structure)
        ]
        /// Information about the AWS_API_CALL action described in this finding.
        public let awsApiCallAction: AwsApiCallAction?
        /// Information about the DNS_REQUEST action described in this finding.
        public let dnsRequestAction: DnsRequestAction?
        /// Information about the PORT_PROBE action described in this finding.
        public let portProbeAction: PortProbeAction?
        /// GuardDuty Finding activity type.
        public let actionType: String?
        /// Information about the NETWORK_CONNECTION action described in this finding.
        public let networkConnectionAction: NetworkConnectionAction?

        public init(awsApiCallAction: AwsApiCallAction? = nil, dnsRequestAction: DnsRequestAction? = nil, portProbeAction: PortProbeAction? = nil, actionType: String? = nil, networkConnectionAction: NetworkConnectionAction? = nil) {
            self.awsApiCallAction = awsApiCallAction
            self.dnsRequestAction = dnsRequestAction
            self.portProbeAction = portProbeAction
            self.actionType = actionType
            self.networkConnectionAction = networkConnectionAction
        }

        private enum CodingKeys: String, CodingKey {
            case awsApiCallAction = "awsApiCallAction"
            case dnsRequestAction = "dnsRequestAction"
            case portProbeAction = "portProbeAction"
            case actionType = "actionType"
            case networkConnectionAction = "networkConnectionAction"
        }
    }

    public struct StopMonitoringMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: true, type: .list), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// A list of account IDs of the GuardDuty member accounts whose findings you want the master account to stop monitoring.
        public let accountIds: [String]
        public let detectorId: String

        public init(accountIds: [String], detectorId: String) {
            self.accountIds = accountIds
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "accountIds"
            case detectorId = "detectorId"
        }
    }

    public struct UnprocessedAccount: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: true, type: .string), 
            AWSShapeMember(label: "Result", location: .body(locationName: "result"), required: true, type: .string)
        ]
        /// AWS Account ID.
        public let accountId: String
        /// A reason why the account hasn't been processed.
        public let result: String

        public init(accountId: String, result: String) {
            self.accountId = accountId
            self.result = result
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case result = "result"
        }
    }

    public struct ArchiveFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FindingIds", location: .body(locationName: "findingIds"), required: true, type: .list), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// IDs of the findings that you want to archive.
        public let findingIds: [String]
        public let detectorId: String

        public init(findingIds: [String], detectorId: String) {
            self.findingIds = findingIds
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case findingIds = "findingIds"
            case detectorId = "detectorId"
        }
    }

    public struct RemoteIpDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GeoLocation", location: .body(locationName: "geoLocation"), required: false, type: .structure), 
            AWSShapeMember(label: "IpAddressV4", location: .body(locationName: "ipAddressV4"), required: false, type: .string), 
            AWSShapeMember(label: "Organization", location: .body(locationName: "organization"), required: false, type: .structure), 
            AWSShapeMember(label: "City", location: .body(locationName: "city"), required: false, type: .structure), 
            AWSShapeMember(label: "Country", location: .body(locationName: "country"), required: false, type: .structure)
        ]
        /// Location information of the remote IP address.
        public let geoLocation: GeoLocation?
        /// IPV4 remote address of the connection.
        public let ipAddressV4: String?
        /// ISP Organization information of the remote IP address.
        public let organization: Organization?
        /// City information of the remote IP address.
        public let city: City?
        /// Country code of the remote IP address.
        public let country: Country?

        public init(geoLocation: GeoLocation? = nil, ipAddressV4: String? = nil, organization: Organization? = nil, city: City? = nil, country: Country? = nil) {
            self.geoLocation = geoLocation
            self.ipAddressV4 = ipAddressV4
            self.organization = organization
            self.city = city
            self.country = country
        }

        private enum CodingKeys: String, CodingKey {
            case geoLocation = "geoLocation"
            case ipAddressV4 = "ipAddressV4"
            case organization = "organization"
            case city = "city"
            case country = "country"
        }
    }

    public struct CreateThreatIntelSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ThreatIntelSetId", location: .body(locationName: "threatIntelSetId"), required: false, type: .string)
        ]
        public let threatIntelSetId: String?

        public init(threatIntelSetId: String? = nil) {
            self.threatIntelSetId = threatIntelSetId
        }

        private enum CodingKeys: String, CodingKey {
            case threatIntelSetId = "threatIntelSetId"
        }
    }

    public struct PrivateIpAddressDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string)
        ]
        /// Private DNS name of the EC2 instance.
        public let privateDnsName: String?
        /// Private IP address of the EC2 instance.
        public let privateIpAddress: String?

        public init(privateDnsName: String? = nil, privateIpAddress: String? = nil) {
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case privateDnsName = "privateDnsName"
            case privateIpAddress = "privateIpAddress"
        }
    }

    public struct DeleteFilterResponse: AWSShape {

    }

    public struct DisassociateMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: true, type: .list), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// A list of account IDs of the GuardDuty member accounts that you want to disassociate from master.
        public let accountIds: [String]
        public let detectorId: String

        public init(accountIds: [String], detectorId: String) {
            self.accountIds = accountIds
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "accountIds"
            case detectorId = "detectorId"
        }
    }

    public struct GetFindingsStatisticsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FindingStatisticTypes", location: .body(locationName: "findingStatisticTypes"), required: true, type: .list), 
            AWSShapeMember(label: "FindingCriteria", location: .body(locationName: "findingCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// Types of finding statistics to retrieve.
        public let findingStatisticTypes: [FindingStatisticType]
        /// Represents the criteria used for querying findings.
        public let findingCriteria: FindingCriteria?
        public let detectorId: String

        public init(findingStatisticTypes: [FindingStatisticType], findingCriteria: FindingCriteria? = nil, detectorId: String) {
            self.findingStatisticTypes = findingStatisticTypes
            self.findingCriteria = findingCriteria
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case findingStatisticTypes = "findingStatisticTypes"
            case findingCriteria = "findingCriteria"
            case detectorId = "detectorId"
        }
    }

    public struct StartMonitoringMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct IamInstanceProfile: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string), 
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string)
        ]
        /// AWS EC2 instance profile ID.
        public let id: String?
        /// AWS EC2 instance profile ARN.
        public let arn: String?

        public init(id: String? = nil, arn: String? = nil) {
            self.id = id
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case arn = "arn"
        }
    }

    public struct UpdateFilterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string)
        ]
        /// The name of the filter.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct DeclineInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: true, type: .list)
        ]
        /// A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to decline invitations from.
        public let accountIds: [String]

        public init(accountIds: [String]) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "accountIds"
        }
    }

    public struct NetworkInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddresses"), required: false, type: .list), 
            AWSShapeMember(label: "PublicDnsName", location: .body(locationName: "publicDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "securityGroups"), required: false, type: .list), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6Addresses"), required: false, type: .list), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string)
        ]
        /// The VPC ID of the EC2 instance.
        public let vpcId: String?
        /// The subnet ID of the EC2 instance.
        public let subnetId: String?
        /// Other private IP address information of the EC2 instance.
        public let privateIpAddresses: [PrivateIpAddressDetails]?
        /// Public DNS name of the EC2 instance.
        public let publicDnsName: String?
        /// Security groups associated with the EC2 instance.
        public let securityGroups: [SecurityGroup]?
        /// Private DNS name of the EC2 instance.
        public let privateDnsName: String?
        /// Private IP address of the EC2 instance.
        public let privateIpAddress: String?
        /// A list of EC2 instance IPv6 address information.
        public let ipv6Addresses: [String]?
        /// Public IP address of the EC2 instance.
        public let publicIp: String?
        /// The ID of the network interface
        public let networkInterfaceId: String?

        public init(vpcId: String? = nil, subnetId: String? = nil, privateIpAddresses: [PrivateIpAddressDetails]? = nil, publicDnsName: String? = nil, securityGroups: [SecurityGroup]? = nil, privateDnsName: String? = nil, privateIpAddress: String? = nil, ipv6Addresses: [String]? = nil, publicIp: String? = nil, networkInterfaceId: String? = nil) {
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.privateIpAddresses = privateIpAddresses
            self.publicDnsName = publicDnsName
            self.securityGroups = securityGroups
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
            self.ipv6Addresses = ipv6Addresses
            self.publicIp = publicIp
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "vpcId"
            case subnetId = "subnetId"
            case privateIpAddresses = "privateIpAddresses"
            case publicDnsName = "publicDnsName"
            case securityGroups = "securityGroups"
            case privateDnsName = "privateDnsName"
            case privateIpAddress = "privateIpAddress"
            case ipv6Addresses = "ipv6Addresses"
            case publicIp = "publicIp"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct DeleteDetectorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let detectorId: String

        public init(detectorId: String) {
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
        }
    }

    public struct ListIPSetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        public let nextToken: String?
        public let detectorId: String
        public let maxResults: Int32?

        public init(nextToken: String? = nil, detectorId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.detectorId = detectorId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case detectorId = "detectorId"
            case maxResults = "maxResults"
        }
    }

    public struct GetFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FindingIds", location: .body(locationName: "findingIds"), required: true, type: .list), 
            AWSShapeMember(label: "SortCriteria", location: .body(locationName: "sortCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// IDs of the findings that you want to retrieve.
        public let findingIds: [String]
        /// Represents the criteria used for sorting findings.
        public let sortCriteria: SortCriteria?
        public let detectorId: String

        public init(findingIds: [String], sortCriteria: SortCriteria? = nil, detectorId: String) {
            self.findingIds = findingIds
            self.sortCriteria = sortCriteria
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case findingIds = "findingIds"
            case sortCriteria = "sortCriteria"
            case detectorId = "detectorId"
        }
    }

    public struct DisassociateFromMasterAccountRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let detectorId: String

        public init(detectorId: String) {
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
        }
    }

    public struct SecurityGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string)
        ]
        /// EC2 instance's security group name.
        public let groupName: String?
        /// EC2 instance's security group ID.
        public let groupId: String?

        public init(groupName: String? = nil, groupId: String? = nil) {
            self.groupName = groupName
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "groupName"
            case groupId = "groupId"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .body(locationName: "key"), required: false, type: .string), 
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]
        /// EC2 instance tag key.
        public let key: String?
        /// EC2 instance tag value.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct InstanceDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTime", location: .body(locationName: "launchTime"), required: false, type: .string), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .list), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "ImageDescription", location: .body(locationName: "imageDescription"), required: false, type: .string), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .list), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceState", location: .body(locationName: "instanceState"), required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterfaces"), required: false, type: .list)
        ]
        /// The launch time of the EC2 instance.
        public let launchTime: String?
        /// The image ID of the EC2 instance.
        public let imageId: String?
        /// The ID of the EC2 instance.
        public let instanceId: String?
        /// The tags of the EC2 instance.
        public let tags: [Tag]?
        public let iamInstanceProfile: IamInstanceProfile?
        /// The image description of the EC2 instance.
        public let imageDescription: String?
        /// The product code of the EC2 instance.
        public let productCodes: [ProductCode]?
        /// The availability zone of the EC2 instance.
        public let availabilityZone: String?
        /// The state of the EC2 instance.
        public let instanceState: String?
        /// The type of the EC2 instance.
        public let instanceType: String?
        /// The platform of the EC2 instance.
        public let platform: String?
        /// The network interface information of the EC2 instance.
        public let networkInterfaces: [NetworkInterface]?

        public init(launchTime: String? = nil, imageId: String? = nil, instanceId: String? = nil, tags: [Tag]? = nil, iamInstanceProfile: IamInstanceProfile? = nil, imageDescription: String? = nil, productCodes: [ProductCode]? = nil, availabilityZone: String? = nil, instanceState: String? = nil, instanceType: String? = nil, platform: String? = nil, networkInterfaces: [NetworkInterface]? = nil) {
            self.launchTime = launchTime
            self.imageId = imageId
            self.instanceId = instanceId
            self.tags = tags
            self.iamInstanceProfile = iamInstanceProfile
            self.imageDescription = imageDescription
            self.productCodes = productCodes
            self.availabilityZone = availabilityZone
            self.instanceState = instanceState
            self.instanceType = instanceType
            self.platform = platform
            self.networkInterfaces = networkInterfaces
        }

        private enum CodingKeys: String, CodingKey {
            case launchTime = "launchTime"
            case imageId = "imageId"
            case instanceId = "instanceId"
            case tags = "tags"
            case iamInstanceProfile = "iamInstanceProfile"
            case imageDescription = "imageDescription"
            case productCodes = "productCodes"
            case availabilityZone = "availabilityZone"
            case instanceState = "instanceState"
            case instanceType = "instanceType"
            case platform = "platform"
            case networkInterfaces = "networkInterfaces"
        }
    }

    public struct ListInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Invitations", location: .body(locationName: "invitations"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        public let invitations: [Invitation]?
        public let nextToken: String?

        public init(invitations: [Invitation]? = nil, nextToken: String? = nil) {
            self.invitations = invitations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case invitations = "invitations"
            case nextToken = "nextToken"
        }
    }

    public struct FindingStatistics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CountBySeverity", location: .body(locationName: "countBySeverity"), required: false, type: .map)
        ]
        /// Represents a map of severity to count statistic for a set of findings
        public let countBySeverity: [String: Int32]?

        public init(countBySeverity: [String: Int32]? = nil) {
            self.countBySeverity = countBySeverity
        }

        private enum CodingKeys: String, CodingKey {
            case countBySeverity = "countBySeverity"
        }
    }

    public struct DisassociateMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct CreateFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "Action", location: .body(locationName: "action"), required: false, type: .enum), 
            AWSShapeMember(label: "Rank", location: .body(locationName: "rank"), required: false, type: .integer), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "FindingCriteria", location: .body(locationName: "findingCriteria"), required: true, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The name of the filter.
        public let name: String
        /// The idempotency token for the create request.
        public let clientToken: String?
        /// Specifies the action that is to be applied to the findings that match the filter.
        public let action: FilterAction?
        /// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
        public let rank: Int32?
        public let detectorId: String
        /// Represents the criteria to be used in the filter for querying findings.
        public let findingCriteria: FindingCriteria
        /// The description of the filter.
        public let description: String?

        public init(name: String, clientToken: String? = nil, action: FilterAction? = nil, rank: Int32? = nil, detectorId: String, findingCriteria: FindingCriteria, description: String? = nil) {
            self.name = name
            self.clientToken = clientToken
            self.action = action
            self.rank = rank
            self.detectorId = detectorId
            self.findingCriteria = findingCriteria
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case clientToken = "clientToken"
            case action = "action"
            case rank = "rank"
            case detectorId = "detectorId"
            case findingCriteria = "findingCriteria"
            case description = "description"
        }
    }

    public struct CreateThreatIntelSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: true, type: .enum), 
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: true, type: .string), 
            AWSShapeMember(label: "Activate", location: .body(locationName: "activate"), required: true, type: .boolean), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string)
        ]
        /// A user-friendly ThreatIntelSet name that is displayed in all finding generated by activity that involves IP addresses included in this ThreatIntelSet.
        public let name: String
        /// The format of the file that contains the ThreatIntelSet.
        public let format: ThreatIntelSetFormat
        /// The URI of the file that contains the ThreatIntelSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key).
        public let location: String
        /// A boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.
        public let activate: Bool
        public let detectorId: String
        /// The idempotency token for the create request.
        public let clientToken: String?

        public init(name: String, format: ThreatIntelSetFormat, location: String, activate: Bool, detectorId: String, clientToken: String? = nil) {
            self.name = name
            self.format = format
            self.location = location
            self.activate = activate
            self.detectorId = detectorId
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case format = "format"
            case location = "location"
            case activate = "activate"
            case detectorId = "detectorId"
            case clientToken = "clientToken"
        }
    }

    public struct AwsApiCallAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainDetails", location: .body(locationName: "domainDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "Api", location: .body(locationName: "api"), required: false, type: .string), 
            AWSShapeMember(label: "RemoteIpDetails", location: .body(locationName: "remoteIpDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "CallerType", location: .body(locationName: "callerType"), required: false, type: .string), 
            AWSShapeMember(label: "ServiceName", location: .body(locationName: "serviceName"), required: false, type: .string)
        ]
        /// Domain information for the AWS API call.
        public let domainDetails: DomainDetails?
        /// AWS API name.
        public let api: String?
        /// Remote IP information of the connection.
        public let remoteIpDetails: RemoteIpDetails?
        /// AWS API caller type.
        public let callerType: String?
        /// AWS service name whose API was invoked.
        public let serviceName: String?

        public init(domainDetails: DomainDetails? = nil, api: String? = nil, remoteIpDetails: RemoteIpDetails? = nil, callerType: String? = nil, serviceName: String? = nil) {
            self.domainDetails = domainDetails
            self.api = api
            self.remoteIpDetails = remoteIpDetails
            self.callerType = callerType
            self.serviceName = serviceName
        }

        private enum CodingKeys: String, CodingKey {
            case domainDetails = "domainDetails"
            case api = "api"
            case remoteIpDetails = "remoteIpDetails"
            case callerType = "callerType"
            case serviceName = "serviceName"
        }
    }

    public struct LocalPortDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortName", location: .body(locationName: "portName"), required: false, type: .string), 
            AWSShapeMember(label: "Port", location: .body(locationName: "port"), required: false, type: .integer)
        ]
        /// Port name of the local connection.
        public let portName: String?
        /// Port number of the local connection.
        public let port: Int32?

        public init(portName: String? = nil, port: Int32? = nil) {
            self.portName = portName
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case portName = "portName"
            case port = "port"
        }
    }

    public struct UpdateDetectorResponse: AWSShape {

    }

    public struct GetThreatIntelSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "ThreatIntelSetId", location: .uri(locationName: "threatIntelSetId"), required: true, type: .string)
        ]
        public let detectorId: String
        public let threatIntelSetId: String

        public init(detectorId: String, threatIntelSetId: String) {
            self.detectorId = detectorId
            self.threatIntelSetId = threatIntelSetId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case threatIntelSetId = "threatIntelSetId"
        }
    }

    public struct GetMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: true, type: .list), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// A list of account IDs of the GuardDuty member accounts that you want to describe.
        public let accountIds: [String]
        public let detectorId: String

        public init(accountIds: [String], detectorId: String) {
            self.accountIds = accountIds
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "accountIds"
            case detectorId = "detectorId"
        }
    }

    public struct DeleteIPSetResponse: AWSShape {

    }

    public struct UpdateDetectorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "FindingPublishingFrequency", location: .body(locationName: "findingPublishingFrequency"), required: false, type: .enum), 
            AWSShapeMember(label: "Enable", location: .body(locationName: "enable"), required: false, type: .boolean)
        ]
        public let detectorId: String
        /// A enum value that specifies how frequently customer got Finding updates published.
        public let findingPublishingFrequency: FindingPublishingFrequency?
        /// Updated boolean value for the detector that specifies whether the detector is enabled.
        public let enable: Bool?

        public init(detectorId: String, findingPublishingFrequency: FindingPublishingFrequency? = nil, enable: Bool? = nil) {
            self.detectorId = detectorId
            self.findingPublishingFrequency = findingPublishingFrequency
            self.enable = enable
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case findingPublishingFrequency = "findingPublishingFrequency"
            case enable = "enable"
        }
    }

    public struct Invitation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RelationshipStatus", location: .body(locationName: "relationshipStatus"), required: false, type: .string), 
            AWSShapeMember(label: "InvitedAt", location: .body(locationName: "invitedAt"), required: false, type: .string), 
            AWSShapeMember(label: "InvitationId", location: .body(locationName: "invitationId"), required: false, type: .string), 
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: false, type: .string)
        ]
        /// The status of the relationship between the inviter and invitee accounts.
        public let relationshipStatus: String?
        /// Timestamp at which the invitation was sent
        public let invitedAt: String?
        /// This value is used to validate the inviter account to the member account.
        public let invitationId: String?
        /// Inviter account ID
        public let accountId: String?

        public init(relationshipStatus: String? = nil, invitedAt: String? = nil, invitationId: String? = nil, accountId: String? = nil) {
            self.relationshipStatus = relationshipStatus
            self.invitedAt = invitedAt
            self.invitationId = invitationId
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case relationshipStatus = "relationshipStatus"
            case invitedAt = "invitedAt"
            case invitationId = "invitationId"
            case accountId = "accountId"
        }
    }

    public enum Feedback: String, CustomStringConvertible, Codable {
        case useful = "USEFUL"
        case notUseful = "NOT_USEFUL"
        public var description: String { return self.rawValue }
    }

    public struct CreateSampleFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FindingTypes", location: .body(locationName: "findingTypes"), required: false, type: .list), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// Types of sample findings that you want to generate.
        public let findingTypes: [String]?
        public let detectorId: String

        public init(findingTypes: [String]? = nil, detectorId: String) {
            self.findingTypes = findingTypes
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case findingTypes = "findingTypes"
            case detectorId = "detectorId"
        }
    }

    public struct AccessKeyDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessKeyId", location: .body(locationName: "accessKeyId"), required: false, type: .string), 
            AWSShapeMember(label: "UserName", location: .body(locationName: "userName"), required: false, type: .string), 
            AWSShapeMember(label: "PrincipalId", location: .body(locationName: "principalId"), required: false, type: .string), 
            AWSShapeMember(label: "UserType", location: .body(locationName: "userType"), required: false, type: .string)
        ]
        /// Access key ID of the user.
        public let accessKeyId: String?
        /// The name of the user.
        public let userName: String?
        /// The principal ID of the user.
        public let principalId: String?
        /// The type of the user.
        public let userType: String?

        public init(accessKeyId: String? = nil, userName: String? = nil, principalId: String? = nil, userType: String? = nil) {
            self.accessKeyId = accessKeyId
            self.userName = userName
            self.principalId = principalId
            self.userType = userType
        }

        private enum CodingKeys: String, CodingKey {
            case accessKeyId = "accessKeyId"
            case userName = "userName"
            case principalId = "principalId"
            case userType = "userType"
        }
    }

    public struct DomainDetails: AWSShape {

    }

    public struct ListFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FindingIds", location: .body(locationName: "findingIds"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        public let findingIds: [String]?
        public let nextToken: String?

        public init(findingIds: [String]? = nil, nextToken: String? = nil) {
            self.findingIds = findingIds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case findingIds = "findingIds"
            case nextToken = "nextToken"
        }
    }

    public struct Organization: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AsnOrg", location: .body(locationName: "asnOrg"), required: false, type: .string), 
            AWSShapeMember(label: "Org", location: .body(locationName: "org"), required: false, type: .string), 
            AWSShapeMember(label: "Asn", location: .body(locationName: "asn"), required: false, type: .string), 
            AWSShapeMember(label: "Isp", location: .body(locationName: "isp"), required: false, type: .string)
        ]
        /// Organization that registered this ASN.
        public let asnOrg: String?
        /// Name of the internet provider.
        public let org: String?
        /// Autonomous system number of the internet provider of the remote IP address.
        public let asn: String?
        /// ISP information for the internet provider.
        public let isp: String?

        public init(asnOrg: String? = nil, org: String? = nil, asn: String? = nil, isp: String? = nil) {
            self.asnOrg = asnOrg
            self.org = org
            self.asn = asn
            self.isp = isp
        }

        private enum CodingKeys: String, CodingKey {
            case asnOrg = "asnOrg"
            case org = "org"
            case asn = "asn"
            case isp = "isp"
        }
    }

    public struct UpdateThreatIntelSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "ThreatIntelSetId", location: .uri(locationName: "threatIntelSetId"), required: true, type: .string), 
            AWSShapeMember(label: "Activate", location: .body(locationName: "activate"), required: false, type: .boolean)
        ]
        public let detectorId: String
        /// The updated URI of the file that contains the ThreateIntelSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key)
        public let location: String?
        /// The unique ID that specifies the ThreatIntelSet that you want to update.
        public let name: String?
        public let threatIntelSetId: String
        /// The updated boolean value that specifies whether the ThreateIntelSet is active or not.
        public let activate: Bool?

        public init(detectorId: String, location: String? = nil, name: String? = nil, threatIntelSetId: String, activate: Bool? = nil) {
            self.detectorId = detectorId
            self.location = location
            self.name = name
            self.threatIntelSetId = threatIntelSetId
            self.activate = activate
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case location = "location"
            case name = "name"
            case threatIntelSetId = "threatIntelSetId"
            case activate = "activate"
        }
    }

    public enum IpSetStatus: String, CustomStringConvertible, Codable {
        case inactive = "INACTIVE"
        case activating = "ACTIVATING"
        case active = "ACTIVE"
        case deactivating = "DEACTIVATING"
        case error = "ERROR"
        case deletePending = "DELETE_PENDING"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct GetMasterAccountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Master", location: .body(locationName: "master"), required: false, type: .structure)
        ]
        public let master: Master?

        public init(master: Master? = nil) {
            self.master = master
        }

        private enum CodingKeys: String, CodingKey {
            case master = "master"
        }
    }

    public struct ListInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        public let maxResults: Int32?
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: true, type: .list)
        ]
        /// A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to delete invitations from.
        public let accountIds: [String]

        public init(accountIds: [String]) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "accountIds"
        }
    }

    public enum FilterAction: String, CustomStringConvertible, Codable {
        case noop = "NOOP"
        case archive = "ARCHIVE"
        public var description: String { return self.rawValue }
    }

    public struct CreateMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountDetails", location: .body(locationName: "accountDetails"), required: true, type: .list), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// A list of account ID and email address pairs of the accounts that you want to associate with the master GuardDuty account.
        public let accountDetails: [AccountDetail]
        public let detectorId: String

        public init(accountDetails: [AccountDetail], detectorId: String) {
            self.accountDetails = accountDetails
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case accountDetails = "accountDetails"
            case detectorId = "detectorId"
        }
    }

    public struct GetMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Members", location: .body(locationName: "members"), required: false, type: .list), 
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        public let members: [Member]?
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(members: [Member]? = nil, unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.members = members
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case members = "members"
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct City: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CityName", location: .body(locationName: "cityName"), required: false, type: .string)
        ]
        /// City name of the remote IP address.
        public let cityName: String?

        public init(cityName: String? = nil) {
            self.cityName = cityName
        }

        private enum CodingKeys: String, CodingKey {
            case cityName = "cityName"
        }
    }

    public struct GetInvitationsCountRequest: AWSShape {

    }

    public struct AcceptInvitationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "MasterId", location: .body(locationName: "masterId"), required: true, type: .string), 
            AWSShapeMember(label: "InvitationId", location: .body(locationName: "invitationId"), required: true, type: .string)
        ]
        public let detectorId: String
        /// The account ID of the master GuardDuty account whose invitation you're accepting.
        public let masterId: String
        /// This value is used to validate the master account to the member account.
        public let invitationId: String

        public init(detectorId: String, masterId: String, invitationId: String) {
            self.detectorId = detectorId
            self.masterId = masterId
            self.invitationId = invitationId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case masterId = "masterId"
            case invitationId = "invitationId"
        }
    }

    public struct UnarchiveFindingsResponse: AWSShape {

    }

    public struct ProductCode: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductType", location: .body(locationName: "productType"), required: false, type: .string), 
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string)
        ]
        /// Product code type.
        public let productType: String?
        /// Product code information.
        public let code: String?

        public init(productType: String? = nil, code: String? = nil) {
            self.productType = productType
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case productType = "productType"
            case code = "code"
        }
    }

    public struct ListFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "FindingCriteria", location: .body(locationName: "findingCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "SortCriteria", location: .body(locationName: "sortCriteria"), required: false, type: .structure)
        ]
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.
        public let maxResults: Int32?
        public let detectorId: String
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListFindings action. For subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// Represents the criteria used for querying findings.
        public let findingCriteria: FindingCriteria?
        /// Represents the criteria used for sorting findings.
        public let sortCriteria: SortCriteria?

        public init(maxResults: Int32? = nil, detectorId: String, nextToken: String? = nil, findingCriteria: FindingCriteria? = nil, sortCriteria: SortCriteria? = nil) {
            self.maxResults = maxResults
            self.detectorId = detectorId
            self.nextToken = nextToken
            self.findingCriteria = findingCriteria
            self.sortCriteria = sortCriteria
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case detectorId = "detectorId"
            case nextToken = "nextToken"
            case findingCriteria = "findingCriteria"
            case sortCriteria = "sortCriteria"
        }
    }

    public struct DeleteMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct CreateFilterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string)
        ]
        /// The name of the successfully created filter.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct ListIPSetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IpSetIds", location: .body(locationName: "ipSetIds"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        public let ipSetIds: [String]?
        public let nextToken: String?

        public init(ipSetIds: [String]? = nil, nextToken: String? = nil) {
            self.ipSetIds = ipSetIds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ipSetIds = "ipSetIds"
            case nextToken = "nextToken"
        }
    }

    public struct DeclineInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct ListFiltersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        public let nextToken: String?
        public let detectorId: String
        public let maxResults: Int32?

        public init(nextToken: String? = nil, detectorId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.detectorId = detectorId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case detectorId = "detectorId"
            case maxResults = "maxResults"
        }
    }

    public struct DeleteThreatIntelSetResponse: AWSShape {

    }

    public struct Master: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RelationshipStatus", location: .body(locationName: "relationshipStatus"), required: false, type: .string), 
            AWSShapeMember(label: "InvitedAt", location: .body(locationName: "invitedAt"), required: false, type: .string), 
            AWSShapeMember(label: "InvitationId", location: .body(locationName: "invitationId"), required: false, type: .string), 
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: false, type: .string)
        ]
        /// The status of the relationship between the master and member accounts.
        public let relationshipStatus: String?
        /// Timestamp at which the invitation was sent
        public let invitedAt: String?
        /// This value is used to validate the master account to the member account.
        public let invitationId: String?
        /// Master account ID
        public let accountId: String?

        public init(relationshipStatus: String? = nil, invitedAt: String? = nil, invitationId: String? = nil, accountId: String? = nil) {
            self.relationshipStatus = relationshipStatus
            self.invitedAt = invitedAt
            self.invitationId = invitationId
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case relationshipStatus = "relationshipStatus"
            case invitedAt = "invitedAt"
            case invitationId = "invitationId"
            case accountId = "accountId"
        }
    }

    public struct UpdateThreatIntelSetResponse: AWSShape {

    }

    public struct SortCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrderBy", location: .body(locationName: "orderBy"), required: false, type: .enum), 
            AWSShapeMember(label: "AttributeName", location: .body(locationName: "attributeName"), required: false, type: .string)
        ]
        /// Order by which the sorted findings are to be displayed.
        public let orderBy: OrderBy?
        /// Represents the finding attribute (for example, accountId) by which to sort findings.
        public let attributeName: String?

        public init(orderBy: OrderBy? = nil, attributeName: String? = nil) {
            self.orderBy = orderBy
            self.attributeName = attributeName
        }

        private enum CodingKeys: String, CodingKey {
            case orderBy = "orderBy"
            case attributeName = "attributeName"
        }
    }

    public struct DeleteDetectorResponse: AWSShape {

    }

    public struct Service: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventLastSeen", location: .body(locationName: "eventLastSeen"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceRole", location: .body(locationName: "resourceRole"), required: false, type: .string), 
            AWSShapeMember(label: "Action", location: .body(locationName: "action"), required: false, type: .structure), 
            AWSShapeMember(label: "Archived", location: .body(locationName: "archived"), required: false, type: .boolean), 
            AWSShapeMember(label: "ServiceName", location: .body(locationName: "serviceName"), required: false, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .body(locationName: "detectorId"), required: false, type: .string), 
            AWSShapeMember(label: "Count", location: .body(locationName: "count"), required: false, type: .integer), 
            AWSShapeMember(label: "UserFeedback", location: .body(locationName: "userFeedback"), required: false, type: .string), 
            AWSShapeMember(label: "EventFirstSeen", location: .body(locationName: "eventFirstSeen"), required: false, type: .string)
        ]
        /// Last seen timestamp of the activity that prompted GuardDuty to generate this finding.
        public let eventLastSeen: String?
        /// Resource role information for this finding.
        public let resourceRole: String?
        /// Information about the activity described in a finding.
        public let action: Action?
        /// Indicates whether this finding is archived.
        public let archived: Bool?
        /// The name of the AWS service (GuardDuty) that generated a finding.
        public let serviceName: String?
        /// Detector ID for the GuardDuty service.
        public let detectorId: String?
        /// Total count of the occurrences of this finding type.
        public let count: Int32?
        /// Feedback left about the finding.
        public let userFeedback: String?
        /// First seen timestamp of the activity that prompted GuardDuty to generate this finding.
        public let eventFirstSeen: String?

        public init(eventLastSeen: String? = nil, resourceRole: String? = nil, action: Action? = nil, archived: Bool? = nil, serviceName: String? = nil, detectorId: String? = nil, count: Int32? = nil, userFeedback: String? = nil, eventFirstSeen: String? = nil) {
            self.eventLastSeen = eventLastSeen
            self.resourceRole = resourceRole
            self.action = action
            self.archived = archived
            self.serviceName = serviceName
            self.detectorId = detectorId
            self.count = count
            self.userFeedback = userFeedback
            self.eventFirstSeen = eventFirstSeen
        }

        private enum CodingKeys: String, CodingKey {
            case eventLastSeen = "eventLastSeen"
            case resourceRole = "resourceRole"
            case action = "action"
            case archived = "archived"
            case serviceName = "serviceName"
            case detectorId = "detectorId"
            case count = "count"
            case userFeedback = "userFeedback"
            case eventFirstSeen = "eventFirstSeen"
        }
    }

    public enum FindingStatisticType: String, CustomStringConvertible, Codable {
        case countBySeverity = "COUNT_BY_SEVERITY"
        public var description: String { return self.rawValue }
    }

    public struct Member: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpdatedAt", location: .body(locationName: "updatedAt"), required: true, type: .string), 
            AWSShapeMember(label: "MasterId", location: .body(locationName: "masterId"), required: true, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .body(locationName: "detectorId"), required: false, type: .string), 
            AWSShapeMember(label: "Email", location: .body(locationName: "email"), required: true, type: .string), 
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: true, type: .string), 
            AWSShapeMember(label: "RelationshipStatus", location: .body(locationName: "relationshipStatus"), required: true, type: .string), 
            AWSShapeMember(label: "InvitedAt", location: .body(locationName: "invitedAt"), required: false, type: .string)
        ]
        public let updatedAt: String
        public let masterId: String
        public let detectorId: String?
        /// Member account's email address.
        public let email: String
        public let accountId: String
        /// The status of the relationship between the member and the master.
        public let relationshipStatus: String
        /// Timestamp at which the invitation was sent
        public let invitedAt: String?

        public init(updatedAt: String, masterId: String, detectorId: String? = nil, email: String, accountId: String, relationshipStatus: String, invitedAt: String? = nil) {
            self.updatedAt = updatedAt
            self.masterId = masterId
            self.detectorId = detectorId
            self.email = email
            self.accountId = accountId
            self.relationshipStatus = relationshipStatus
            self.invitedAt = invitedAt
        }

        private enum CodingKeys: String, CodingKey {
            case updatedAt = "updatedAt"
            case masterId = "masterId"
            case detectorId = "detectorId"
            case email = "email"
            case accountId = "accountId"
            case relationshipStatus = "relationshipStatus"
            case invitedAt = "invitedAt"
        }
    }

    public struct ListDetectorsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorIds", location: .body(locationName: "detectorIds"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        public let detectorIds: [String]?
        public let nextToken: String?

        public init(detectorIds: [String]? = nil, nextToken: String? = nil) {
            self.detectorIds = detectorIds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case detectorIds = "detectorIds"
            case nextToken = "nextToken"
        }
    }

    public struct GetMasterAccountRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let detectorId: String

        public init(detectorId: String) {
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
        }
    }

    public struct UpdateFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Action", location: .body(locationName: "action"), required: false, type: .enum), 
            AWSShapeMember(label: "FindingCriteria", location: .body(locationName: "findingCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "FilterName", location: .uri(locationName: "filterName"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Rank", location: .body(locationName: "rank"), required: false, type: .integer)
        ]
        /// Specifies the action that is to be applied to the findings that match the filter.
        public let action: FilterAction?
        /// Represents the criteria to be used in the filter for querying findings.
        public let findingCriteria: FindingCriteria?
        public let detectorId: String
        public let filterName: String
        /// The description of the filter.
        public let description: String?
        /// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
        public let rank: Int32?

        public init(action: FilterAction? = nil, findingCriteria: FindingCriteria? = nil, detectorId: String, filterName: String, description: String? = nil, rank: Int32? = nil) {
            self.action = action
            self.findingCriteria = findingCriteria
            self.detectorId = detectorId
            self.filterName = filterName
            self.description = description
            self.rank = rank
        }

        private enum CodingKeys: String, CodingKey {
            case action = "action"
            case findingCriteria = "findingCriteria"
            case detectorId = "detectorId"
            case filterName = "filterName"
            case description = "description"
            case rank = "rank"
        }
    }

    public struct Resource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceDetails", location: .body(locationName: "instanceDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .string), 
            AWSShapeMember(label: "AccessKeyDetails", location: .body(locationName: "accessKeyDetails"), required: false, type: .structure)
        ]
        public let instanceDetails: InstanceDetails?
        /// The type of the AWS resource.
        public let resourceType: String?
        public let accessKeyDetails: AccessKeyDetails?

        public init(instanceDetails: InstanceDetails? = nil, resourceType: String? = nil, accessKeyDetails: AccessKeyDetails? = nil) {
            self.instanceDetails = instanceDetails
            self.resourceType = resourceType
            self.accessKeyDetails = accessKeyDetails
        }

        private enum CodingKeys: String, CodingKey {
            case instanceDetails = "instanceDetails"
            case resourceType = "resourceType"
            case accessKeyDetails = "accessKeyDetails"
        }
    }

    public struct GeoLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Lat", location: .body(locationName: "lat"), required: false, type: .double), 
            AWSShapeMember(label: "Lon", location: .body(locationName: "lon"), required: false, type: .double)
        ]
        /// Latitude information of remote IP address.
        public let lat: Double?
        /// Longitude information of remote IP address.
        public let lon: Double?

        public init(lat: Double? = nil, lon: Double? = nil) {
            self.lat = lat
            self.lon = lon
        }

        private enum CodingKeys: String, CodingKey {
            case lat = "lat"
            case lon = "lon"
        }
    }

    public struct PortProbeAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Blocked", location: .body(locationName: "blocked"), required: false, type: .boolean), 
            AWSShapeMember(label: "PortProbeDetails", location: .body(locationName: "portProbeDetails"), required: false, type: .list)
        ]
        /// Port probe blocked information.
        public let blocked: Bool?
        /// A list of port probe details objects.
        public let portProbeDetails: [PortProbeDetail]?

        public init(blocked: Bool? = nil, portProbeDetails: [PortProbeDetail]? = nil) {
            self.blocked = blocked
            self.portProbeDetails = portProbeDetails
        }

        private enum CodingKeys: String, CodingKey {
            case blocked = "blocked"
            case portProbeDetails = "portProbeDetails"
        }
    }

    public struct StartMonitoringMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: true, type: .list), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// A list of account IDs of the GuardDuty member accounts whose findings you want the master account to monitor.
        public let accountIds: [String]
        public let detectorId: String

        public init(accountIds: [String], detectorId: String) {
            self.accountIds = accountIds
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "accountIds"
            case detectorId = "detectorId"
        }
    }

    public struct DeleteFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FilterName", location: .uri(locationName: "filterName"), required: true, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let filterName: String
        public let detectorId: String

        public init(filterName: String, detectorId: String) {
            self.filterName = filterName
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case filterName = "filterName"
            case detectorId = "detectorId"
        }
    }

    public struct DnsRequestAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Domain", location: .body(locationName: "domain"), required: false, type: .string)
        ]
        /// Domain information for the DNS request.
        public let domain: String?

        public init(domain: String? = nil) {
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "domain"
        }
    }

    public struct GetFilterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "FindingCriteria", location: .body(locationName: "findingCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "Action", location: .body(locationName: "action"), required: false, type: .enum), 
            AWSShapeMember(label: "Rank", location: .body(locationName: "rank"), required: false, type: .integer), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The name of the filter.
        public let name: String?
        /// Represents the criteria to be used in the filter for querying findings.
        public let findingCriteria: FindingCriteria?
        /// Specifies the action that is to be applied to the findings that match the filter.
        public let action: FilterAction?
        /// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
        public let rank: Int32?
        /// The description of the filter.
        public let description: String?

        public init(name: String? = nil, findingCriteria: FindingCriteria? = nil, action: FilterAction? = nil, rank: Int32? = nil, description: String? = nil) {
            self.name = name
            self.findingCriteria = findingCriteria
            self.action = action
            self.rank = rank
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case findingCriteria = "findingCriteria"
            case action = "action"
            case rank = "rank"
            case description = "description"
        }
    }

    public struct ArchiveFindingsResponse: AWSShape {

    }

    public struct Country: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CountryCode", location: .body(locationName: "countryCode"), required: false, type: .string), 
            AWSShapeMember(label: "CountryName", location: .body(locationName: "countryName"), required: false, type: .string)
        ]
        /// Country code of the remote IP address.
        public let countryCode: String?
        /// Country name of the remote IP address.
        public let countryName: String?

        public init(countryCode: String? = nil, countryName: String? = nil) {
            self.countryCode = countryCode
            self.countryName = countryName
        }

        private enum CodingKeys: String, CodingKey {
            case countryCode = "countryCode"
            case countryName = "countryName"
        }
    }

    public struct AccountDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: true, type: .string), 
            AWSShapeMember(label: "Email", location: .body(locationName: "email"), required: true, type: .string)
        ]
        /// Member account ID.
        public let accountId: String
        /// Member account's email address.
        public let email: String

        public init(accountId: String, email: String) {
            self.accountId = accountId
            self.email = email
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case email = "email"
        }
    }

    public struct CreateMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct InviteMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct GetFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FilterName", location: .uri(locationName: "filterName"), required: true, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let filterName: String
        public let detectorId: String

        public init(filterName: String, detectorId: String) {
            self.filterName = filterName
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case filterName = "filterName"
            case detectorId = "detectorId"
        }
    }

    public struct UpdateIPSetResponse: AWSShape {

    }

    public enum ThreatIntelSetFormat: String, CustomStringConvertible, Codable {
        case txt = "TXT"
        case stix = "STIX"
        case otxCsv = "OTX_CSV"
        case alienVault = "ALIEN_VAULT"
        case proofPoint = "PROOF_POINT"
        case fireEye = "FIRE_EYE"
        public var description: String { return self.rawValue }
    }

    public struct AcceptInvitationResponse: AWSShape {

    }

    public enum ThreatIntelSetStatus: String, CustomStringConvertible, Codable {
        case inactive = "INACTIVE"
        case activating = "ACTIVATING"
        case active = "ACTIVE"
        case deactivating = "DEACTIVATING"
        case error = "ERROR"
        case deletePending = "DELETE_PENDING"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct PortProbeDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RemoteIpDetails", location: .body(locationName: "remoteIpDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "LocalPortDetails", location: .body(locationName: "localPortDetails"), required: false, type: .structure)
        ]
        /// Remote IP information of the connection.
        public let remoteIpDetails: RemoteIpDetails?
        /// Local port information of the connection.
        public let localPortDetails: LocalPortDetails?

        public init(remoteIpDetails: RemoteIpDetails? = nil, localPortDetails: LocalPortDetails? = nil) {
            self.remoteIpDetails = remoteIpDetails
            self.localPortDetails = localPortDetails
        }

        private enum CodingKeys: String, CodingKey {
            case remoteIpDetails = "remoteIpDetails"
            case localPortDetails = "localPortDetails"
        }
    }

    public struct DeleteMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: true, type: .list), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// A list of account IDs of the GuardDuty member accounts that you want to delete.
        public let accountIds: [String]
        public let detectorId: String

        public init(accountIds: [String], detectorId: String) {
            self.accountIds = accountIds
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "accountIds"
            case detectorId = "detectorId"
        }
    }

    public struct DeleteThreatIntelSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "ThreatIntelSetId", location: .uri(locationName: "threatIntelSetId"), required: true, type: .string)
        ]
        public let detectorId: String
        public let threatIntelSetId: String

        public init(detectorId: String, threatIntelSetId: String) {
            self.detectorId = detectorId
            self.threatIntelSetId = threatIntelSetId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case threatIntelSetId = "threatIntelSetId"
        }
    }

    public struct RemotePortDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortName", location: .body(locationName: "portName"), required: false, type: .string), 
            AWSShapeMember(label: "Port", location: .body(locationName: "port"), required: false, type: .integer)
        ]
        /// Port name of the remote connection.
        public let portName: String?
        /// Port number of the remote connection.
        public let port: Int32?

        public init(portName: String? = nil, port: Int32? = nil) {
            self.portName = portName
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case portName = "portName"
            case port = "port"
        }
    }

    public struct ListMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "OnlyAssociated", location: .querystring(locationName: "onlyAssociated"), required: false, type: .string)
        ]
        public let maxResults: Int32?
        public let detectorId: String
        public let nextToken: String?
        public let onlyAssociated: String?

        public init(maxResults: Int32? = nil, detectorId: String, nextToken: String? = nil, onlyAssociated: String? = nil) {
            self.maxResults = maxResults
            self.detectorId = detectorId
            self.nextToken = nextToken
            self.onlyAssociated = onlyAssociated
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case detectorId = "detectorId"
            case nextToken = "nextToken"
            case onlyAssociated = "onlyAssociated"
        }
    }

    public struct CreateIPSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IpSetId", location: .body(locationName: "ipSetId"), required: false, type: .string)
        ]
        public let ipSetId: String?

        public init(ipSetId: String? = nil) {
            self.ipSetId = ipSetId
        }

        private enum CodingKeys: String, CodingKey {
            case ipSetId = "ipSetId"
        }
    }

    public enum FindingPublishingFrequency: String, CustomStringConvertible, Codable {
        case fifteenMinutes = "FIFTEEN_MINUTES"
        case oneHour = "ONE_HOUR"
        case sixHours = "SIX_HOURS"
        public var description: String { return self.rawValue }
    }

    public struct ListMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Members", location: .body(locationName: "members"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        public let members: [Member]?
        public let nextToken: String?

        public init(members: [Member]? = nil, nextToken: String? = nil) {
            self.members = members
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case members = "members"
            case nextToken = "nextToken"
        }
    }

    public struct ListThreatIntelSetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ThreatIntelSetIds", location: .body(locationName: "threatIntelSetIds"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        public let threatIntelSetIds: [String]?
        public let nextToken: String?

        public init(threatIntelSetIds: [String]? = nil, nextToken: String? = nil) {
            self.threatIntelSetIds = threatIntelSetIds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case threatIntelSetIds = "threatIntelSetIds"
            case nextToken = "nextToken"
        }
    }

    public struct StopMonitoringMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct ListFiltersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FilterNames", location: .body(locationName: "filterNames"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        public let filterNames: [String]?
        public let nextToken: String?

        public init(filterNames: [String]? = nil, nextToken: String? = nil) {
            self.filterNames = filterNames
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filterNames = "filterNames"
            case nextToken = "nextToken"
        }
    }

    public struct GetInvitationsCountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InvitationsCount", location: .body(locationName: "invitationsCount"), required: false, type: .integer)
        ]
        /// The number of received invitations.
        public let invitationsCount: Int32?

        public init(invitationsCount: Int32? = nil) {
            self.invitationsCount = invitationsCount
        }

        private enum CodingKeys: String, CodingKey {
            case invitationsCount = "invitationsCount"
        }
    }

    public struct UnarchiveFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FindingIds", location: .body(locationName: "findingIds"), required: true, type: .list), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// IDs of the findings that you want to unarchive.
        public let findingIds: [String]
        public let detectorId: String

        public init(findingIds: [String], detectorId: String) {
            self.findingIds = findingIds
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case findingIds = "findingIds"
            case detectorId = "detectorId"
        }
    }

    public struct DeleteIPSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IpSetId", location: .uri(locationName: "ipSetId"), required: true, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let ipSetId: String
        public let detectorId: String

        public init(ipSetId: String, detectorId: String) {
            self.ipSetId = ipSetId
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case ipSetId = "ipSetId"
            case detectorId = "detectorId"
        }
    }

}