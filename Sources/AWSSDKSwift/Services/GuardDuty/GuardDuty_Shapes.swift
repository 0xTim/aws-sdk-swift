// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension GuardDuty {

    public struct NetworkInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "PublicDnsName", location: .body(locationName: "publicDnsName"), required: false, type: .string), 
            AWSShapeMember(label: "PublicIp", location: .body(locationName: "publicIp"), required: false, type: .string), 
            AWSShapeMember(label: "VpcId", location: .body(locationName: "vpcId"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "subnetId"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", location: .body(locationName: "securityGroups"), required: false, type: .list), 
            AWSShapeMember(label: "PrivateIpAddresses", location: .body(locationName: "privateIpAddresses"), required: false, type: .list), 
            AWSShapeMember(label: "Ipv6Addresses", location: .body(locationName: "ipv6Addresses"), required: false, type: .list), 
            AWSShapeMember(label: "NetworkInterfaceId", location: .body(locationName: "networkInterfaceId"), required: false, type: .string)
        ]
        /// Private DNS name of the EC2 instance.
        public let privateDnsName: String?
        /// Public DNS name of the EC2 instance.
        public let publicDnsName: String?
        /// Public IP address of the EC2 instance.
        public let publicIp: String?
        /// The VPC ID of the EC2 instance.
        public let vpcId: String?
        /// The subnet ID of the EC2 instance.
        public let subnetId: String?
        /// Private IP address of the EC2 instance.
        public let privateIpAddress: String?
        /// Security groups associated with the EC2 instance.
        public let securityGroups: [SecurityGroup]?
        /// Other private IP address information of the EC2 instance.
        public let privateIpAddresses: [PrivateIpAddressDetails]?
        /// A list of EC2 instance IPv6 address information.
        public let ipv6Addresses: [String]?
        /// The ID of the network interface
        public let networkInterfaceId: String?

        public init(privateDnsName: String? = nil, publicDnsName: String? = nil, publicIp: String? = nil, vpcId: String? = nil, subnetId: String? = nil, privateIpAddress: String? = nil, securityGroups: [SecurityGroup]? = nil, privateIpAddresses: [PrivateIpAddressDetails]? = nil, ipv6Addresses: [String]? = nil, networkInterfaceId: String? = nil) {
            self.privateDnsName = privateDnsName
            self.publicDnsName = publicDnsName
            self.publicIp = publicIp
            self.vpcId = vpcId
            self.subnetId = subnetId
            self.privateIpAddress = privateIpAddress
            self.securityGroups = securityGroups
            self.privateIpAddresses = privateIpAddresses
            self.ipv6Addresses = ipv6Addresses
            self.networkInterfaceId = networkInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case privateDnsName = "privateDnsName"
            case publicDnsName = "publicDnsName"
            case publicIp = "publicIp"
            case vpcId = "vpcId"
            case subnetId = "subnetId"
            case privateIpAddress = "privateIpAddress"
            case securityGroups = "securityGroups"
            case privateIpAddresses = "privateIpAddresses"
            case ipv6Addresses = "ipv6Addresses"
            case networkInterfaceId = "networkInterfaceId"
        }
    }

    public struct StartMonitoringMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public enum ThreatIntelSetFormat: String, CustomStringConvertible, Codable {
        case txt = "TXT"
        case stix = "STIX"
        case otxCsv = "OTX_CSV"
        case alienVault = "ALIEN_VAULT"
        case proofPoint = "PROOF_POINT"
        case fireEye = "FIRE_EYE"
        public var description: String { return self.rawValue }
    }

    public struct DisassociateMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: true, type: .list)
        ]
        public let detectorId: String
        /// A list of account IDs of the GuardDuty member accounts that you want to disassociate from master.
        public let accountIds: [String]

        public init(detectorId: String, accountIds: [String]) {
            self.detectorId = detectorId
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case accountIds = "accountIds"
        }
    }

    public struct Invitation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: false, type: .string), 
            AWSShapeMember(label: "RelationshipStatus", location: .body(locationName: "relationshipStatus"), required: false, type: .string), 
            AWSShapeMember(label: "InvitationId", location: .body(locationName: "invitationId"), required: false, type: .string), 
            AWSShapeMember(label: "InvitedAt", location: .body(locationName: "invitedAt"), required: false, type: .string)
        ]
        /// Inviter account ID
        public let accountId: String?
        /// The status of the relationship between the inviter and invitee accounts.
        public let relationshipStatus: String?
        /// This value is used to validate the inviter account to the member account.
        public let invitationId: String?
        /// Timestamp at which the invitation was sent
        public let invitedAt: String?

        public init(accountId: String? = nil, relationshipStatus: String? = nil, invitationId: String? = nil, invitedAt: String? = nil) {
            self.accountId = accountId
            self.relationshipStatus = relationshipStatus
            self.invitationId = invitationId
            self.invitedAt = invitedAt
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case relationshipStatus = "relationshipStatus"
            case invitationId = "invitationId"
            case invitedAt = "invitedAt"
        }
    }

    public struct GetMasterAccountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Master", location: .body(locationName: "master"), required: false, type: .structure)
        ]
        public let master: Master?

        public init(master: Master? = nil) {
            self.master = master
        }

        private enum CodingKeys: String, CodingKey {
            case master = "master"
        }
    }

    public struct UnarchiveFindingsResponse: AWSShape {

    }

    public struct DisassociateMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct DeclineInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct ErrorResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string), 
            AWSShapeMember(label: "Type", location: .body(locationName: "__type"), required: false, type: .string)
        ]
        /// The error message.
        public let message: String?
        /// The error type.
        public let `type`: String?

        public init(message: String? = nil, type: String? = nil) {
            self.message = message
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
            case `type` = "__type"
        }
    }

    public struct ListMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "OnlyAssociated", location: .querystring(locationName: "onlyAssociated"), required: false, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: Int32?
        public let onlyAssociated: String?
        public let detectorId: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, onlyAssociated: String? = nil, detectorId: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.onlyAssociated = onlyAssociated
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case onlyAssociated = "onlyAssociated"
            case detectorId = "detectorId"
        }
    }

    public struct UpdateThreatIntelSetResponse: AWSShape {

    }

    public struct GetFilterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Action", location: .body(locationName: "action"), required: false, type: .enum), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "FindingCriteria", location: .body(locationName: "findingCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Rank", location: .body(locationName: "rank"), required: false, type: .integer)
        ]
        /// Specifies the action that is to be applied to the findings that match the filter.
        public let action: FilterAction?
        /// The name of the filter.
        public let name: String?
        /// Represents the criteria to be used in the filter for querying findings.
        public let findingCriteria: FindingCriteria?
        /// The description of the filter.
        public let description: String?
        /// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
        public let rank: Int32?

        public init(action: FilterAction? = nil, name: String? = nil, findingCriteria: FindingCriteria? = nil, description: String? = nil, rank: Int32? = nil) {
            self.action = action
            self.name = name
            self.findingCriteria = findingCriteria
            self.description = description
            self.rank = rank
        }

        private enum CodingKeys: String, CodingKey {
            case action = "action"
            case name = "name"
            case findingCriteria = "findingCriteria"
            case description = "description"
            case rank = "rank"
        }
    }

    public enum OrderBy: String, CustomStringConvertible, Codable {
        case asc = "ASC"
        case desc = "DESC"
        public var description: String { return self.rawValue }
    }

    public struct GetThreatIntelSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: false, type: .enum), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        /// The URI of the file that contains the ThreatIntelSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key).
        public let location: String?
        /// A user-friendly ThreatIntelSet name that is displayed in all finding generated by activity that involves IP addresses included in this ThreatIntelSet.
        public let name: String?
        /// The format of the threatIntelSet.
        public let format: ThreatIntelSetFormat?
        /// The status of threatIntelSet file uploaded.
        public let status: ThreatIntelSetStatus?

        public init(location: String? = nil, name: String? = nil, format: ThreatIntelSetFormat? = nil, status: ThreatIntelSetStatus? = nil) {
            self.location = location
            self.name = name
            self.format = format
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case location = "location"
            case name = "name"
            case format = "format"
            case status = "status"
        }
    }

    public struct UpdateDetectorResponse: AWSShape {

    }

    public struct RemotePortDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Port", location: .body(locationName: "port"), required: false, type: .integer), 
            AWSShapeMember(label: "PortName", location: .body(locationName: "portName"), required: false, type: .string)
        ]
        /// Port number of the remote connection.
        public let port: Int32?
        /// Port name of the remote connection.
        public let portName: String?

        public init(port: Int32? = nil, portName: String? = nil) {
            self.port = port
            self.portName = portName
        }

        private enum CodingKeys: String, CodingKey {
            case port = "port"
            case portName = "portName"
        }
    }

    public enum FilterAction: String, CustomStringConvertible, Codable {
        case noop = "NOOP"
        case archive = "ARCHIVE"
        public var description: String { return self.rawValue }
    }

    public struct CreateThreatIntelSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: true, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "Activate", location: .body(locationName: "activate"), required: true, type: .boolean), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: true, type: .enum), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string)
        ]
        /// The URI of the file that contains the ThreatIntelSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key).
        public let location: String
        public let detectorId: String
        /// A user-friendly ThreatIntelSet name that is displayed in all finding generated by activity that involves IP addresses included in this ThreatIntelSet.
        public let name: String
        /// A boolean value that indicates whether GuardDuty is to start using the uploaded ThreatIntelSet.
        public let activate: Bool
        /// The format of the file that contains the ThreatIntelSet.
        public let format: ThreatIntelSetFormat
        /// The idempotency token for the create request.
        public let clientToken: String?

        public init(location: String, detectorId: String, name: String, activate: Bool, format: ThreatIntelSetFormat, clientToken: String? = nil) {
            self.location = location
            self.detectorId = detectorId
            self.name = name
            self.activate = activate
            self.format = format
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case location = "location"
            case detectorId = "detectorId"
            case name = "name"
            case activate = "activate"
            case format = "format"
            case clientToken = "clientToken"
        }
    }

    public struct ListInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        public let maxResults: Int32?
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteDetectorResponse: AWSShape {

    }

    public struct DeleteFilterResponse: AWSShape {

    }

    public struct UpdateIPSetResponse: AWSShape {

    }

    public struct UpdateDetectorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enable", location: .body(locationName: "enable"), required: false, type: .boolean), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "FindingPublishingFrequency", location: .body(locationName: "findingPublishingFrequency"), required: false, type: .enum)
        ]
        /// Updated boolean value for the detector that specifies whether the detector is enabled.
        public let enable: Bool?
        public let detectorId: String
        /// A enum value that specifies how frequently customer got Finding updates published.
        public let findingPublishingFrequency: FindingPublishingFrequency?

        public init(enable: Bool? = nil, detectorId: String, findingPublishingFrequency: FindingPublishingFrequency? = nil) {
            self.enable = enable
            self.detectorId = detectorId
            self.findingPublishingFrequency = findingPublishingFrequency
        }

        private enum CodingKeys: String, CodingKey {
            case enable = "enable"
            case detectorId = "detectorId"
            case findingPublishingFrequency = "findingPublishingFrequency"
        }
    }

    public struct ArchiveFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FindingIds", location: .body(locationName: "findingIds"), required: true, type: .list), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// IDs of the findings that you want to archive.
        public let findingIds: [String]
        public let detectorId: String

        public init(findingIds: [String], detectorId: String) {
            self.findingIds = findingIds
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case findingIds = "findingIds"
            case detectorId = "detectorId"
        }
    }

    public struct Member: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Email", location: .body(locationName: "email"), required: true, type: .string), 
            AWSShapeMember(label: "RelationshipStatus", location: .body(locationName: "relationshipStatus"), required: true, type: .string), 
            AWSShapeMember(label: "UpdatedAt", location: .body(locationName: "updatedAt"), required: true, type: .string), 
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: true, type: .string), 
            AWSShapeMember(label: "MasterId", location: .body(locationName: "masterId"), required: true, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .body(locationName: "detectorId"), required: false, type: .string), 
            AWSShapeMember(label: "InvitedAt", location: .body(locationName: "invitedAt"), required: false, type: .string)
        ]
        /// Member account's email address.
        public let email: String
        /// The status of the relationship between the member and the master.
        public let relationshipStatus: String
        public let updatedAt: String
        public let accountId: String
        public let masterId: String
        public let detectorId: String?
        /// Timestamp at which the invitation was sent
        public let invitedAt: String?

        public init(email: String, relationshipStatus: String, updatedAt: String, accountId: String, masterId: String, detectorId: String? = nil, invitedAt: String? = nil) {
            self.email = email
            self.relationshipStatus = relationshipStatus
            self.updatedAt = updatedAt
            self.accountId = accountId
            self.masterId = masterId
            self.detectorId = detectorId
            self.invitedAt = invitedAt
        }

        private enum CodingKeys: String, CodingKey {
            case email = "email"
            case relationshipStatus = "relationshipStatus"
            case updatedAt = "updatedAt"
            case accountId = "accountId"
            case masterId = "masterId"
            case detectorId = "detectorId"
            case invitedAt = "invitedAt"
        }
    }

    public struct NetworkConnectionAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionDirection", location: .body(locationName: "connectionDirection"), required: false, type: .string), 
            AWSShapeMember(label: "RemoteIpDetails", location: .body(locationName: "remoteIpDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "RemotePortDetails", location: .body(locationName: "remotePortDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: false, type: .string), 
            AWSShapeMember(label: "Blocked", location: .body(locationName: "blocked"), required: false, type: .boolean), 
            AWSShapeMember(label: "LocalPortDetails", location: .body(locationName: "localPortDetails"), required: false, type: .structure)
        ]
        /// Network connection direction.
        public let connectionDirection: String?
        /// Remote IP information of the connection.
        public let remoteIpDetails: RemoteIpDetails?
        /// Remote port information of the connection.
        public let remotePortDetails: RemotePortDetails?
        /// Network connection protocol.
        public let `protocol`: String?
        /// Network connection blocked information.
        public let blocked: Bool?
        /// Local port information of the connection.
        public let localPortDetails: LocalPortDetails?

        public init(connectionDirection: String? = nil, remoteIpDetails: RemoteIpDetails? = nil, remotePortDetails: RemotePortDetails? = nil, protocol: String? = nil, blocked: Bool? = nil, localPortDetails: LocalPortDetails? = nil) {
            self.connectionDirection = connectionDirection
            self.remoteIpDetails = remoteIpDetails
            self.remotePortDetails = remotePortDetails
            self.`protocol` = `protocol`
            self.blocked = blocked
            self.localPortDetails = localPortDetails
        }

        private enum CodingKeys: String, CodingKey {
            case connectionDirection = "connectionDirection"
            case remoteIpDetails = "remoteIpDetails"
            case remotePortDetails = "remotePortDetails"
            case `protocol` = "protocol"
            case blocked = "blocked"
            case localPortDetails = "localPortDetails"
        }
    }

    public struct GetIPSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "IpSetId", location: .uri(locationName: "ipSetId"), required: true, type: .string)
        ]
        public let detectorId: String
        public let ipSetId: String

        public init(detectorId: String, ipSetId: String) {
            self.detectorId = detectorId
            self.ipSetId = ipSetId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case ipSetId = "ipSetId"
        }
    }

    public struct ListIPSetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IpSetIds", location: .body(locationName: "ipSetIds"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        public let ipSetIds: [String]?
        public let nextToken: String?

        public init(ipSetIds: [String]? = nil, nextToken: String? = nil) {
            self.ipSetIds = ipSetIds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case ipSetIds = "ipSetIds"
            case nextToken = "nextToken"
        }
    }

    public struct CreateDetectorResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .body(locationName: "detectorId"), required: false, type: .string)
        ]
        /// The unique ID of the created detector.
        public let detectorId: String?

        public init(detectorId: String? = nil) {
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
        }
    }

    public struct Condition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Lt", location: .body(locationName: "lt"), required: false, type: .integer), 
            AWSShapeMember(label: "Lte", location: .body(locationName: "lte"), required: false, type: .integer), 
            AWSShapeMember(label: "Gte", location: .body(locationName: "gte"), required: false, type: .integer), 
            AWSShapeMember(label: "Gt", location: .body(locationName: "gt"), required: false, type: .integer), 
            AWSShapeMember(label: "Neq", location: .body(locationName: "neq"), required: false, type: .list), 
            AWSShapeMember(label: "Eq", location: .body(locationName: "eq"), required: false, type: .list)
        ]
        /// Represents the less than condition to be applied to a single field when querying for findings.
        public let lt: Int32?
        /// Represents the less than equal condition to be applied to a single field when querying for findings.
        public let lte: Int32?
        /// Represents the greater than equal condition to be applied to a single field when querying for findings.
        public let gte: Int32?
        /// Represents the greater than condition to be applied to a single field when querying for findings.
        public let gt: Int32?
        /// Represents the not equal condition to be applied to a single field when querying for findings.
        public let neq: [String]?
        /// Represents the equal condition to be applied to a single field when querying for findings.
        public let eq: [String]?

        public init(lt: Int32? = nil, lte: Int32? = nil, gte: Int32? = nil, gt: Int32? = nil, neq: [String]? = nil, eq: [String]? = nil) {
            self.lt = lt
            self.lte = lte
            self.gte = gte
            self.gt = gt
            self.neq = neq
            self.eq = eq
        }

        private enum CodingKeys: String, CodingKey {
            case lt = "lt"
            case lte = "lte"
            case gte = "gte"
            case gt = "gt"
            case neq = "neq"
            case eq = "eq"
        }
    }

    public struct GetFindingsStatisticsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FindingCriteria", location: .body(locationName: "findingCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "FindingStatisticTypes", location: .body(locationName: "findingStatisticTypes"), required: true, type: .list)
        ]
        /// Represents the criteria used for querying findings.
        public let findingCriteria: FindingCriteria?
        public let detectorId: String
        /// Types of finding statistics to retrieve.
        public let findingStatisticTypes: [FindingStatisticType]

        public init(findingCriteria: FindingCriteria? = nil, detectorId: String, findingStatisticTypes: [FindingStatisticType]) {
            self.findingCriteria = findingCriteria
            self.detectorId = detectorId
            self.findingStatisticTypes = findingStatisticTypes
        }

        private enum CodingKeys: String, CodingKey {
            case findingCriteria = "findingCriteria"
            case detectorId = "detectorId"
            case findingStatisticTypes = "findingStatisticTypes"
        }
    }

    public struct DeleteThreatIntelSetResponse: AWSShape {

    }

    public struct GetFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FilterName", location: .uri(locationName: "filterName"), required: true, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let filterName: String
        public let detectorId: String

        public init(filterName: String, detectorId: String) {
            self.filterName = filterName
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case filterName = "filterName"
            case detectorId = "detectorId"
        }
    }

    public enum DetectorStatus: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public struct GetFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FindingIds", location: .body(locationName: "findingIds"), required: true, type: .list), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "SortCriteria", location: .body(locationName: "sortCriteria"), required: false, type: .structure)
        ]
        /// IDs of the findings that you want to retrieve.
        public let findingIds: [String]
        public let detectorId: String
        /// Represents the criteria used for sorting findings.
        public let sortCriteria: SortCriteria?

        public init(findingIds: [String], detectorId: String, sortCriteria: SortCriteria? = nil) {
            self.findingIds = findingIds
            self.detectorId = detectorId
            self.sortCriteria = sortCriteria
        }

        private enum CodingKeys: String, CodingKey {
            case findingIds = "findingIds"
            case detectorId = "detectorId"
            case sortCriteria = "sortCriteria"
        }
    }

    public enum IpSetStatus: String, CustomStringConvertible, Codable {
        case inactive = "INACTIVE"
        case activating = "ACTIVATING"
        case active = "ACTIVE"
        case deactivating = "DEACTIVATING"
        case error = "ERROR"
        case deletePending = "DELETE_PENDING"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct Country: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CountryCode", location: .body(locationName: "countryCode"), required: false, type: .string), 
            AWSShapeMember(label: "CountryName", location: .body(locationName: "countryName"), required: false, type: .string)
        ]
        /// Country code of the remote IP address.
        public let countryCode: String?
        /// Country name of the remote IP address.
        public let countryName: String?

        public init(countryCode: String? = nil, countryName: String? = nil) {
            self.countryCode = countryCode
            self.countryName = countryName
        }

        private enum CodingKeys: String, CodingKey {
            case countryCode = "countryCode"
            case countryName = "countryName"
        }
    }

    public struct StopMonitoringMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: true, type: .list)
        ]
        public let detectorId: String
        /// A list of account IDs of the GuardDuty member accounts whose findings you want the master account to stop monitoring.
        public let accountIds: [String]

        public init(detectorId: String, accountIds: [String]) {
            self.detectorId = detectorId
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case accountIds = "accountIds"
        }
    }

    public struct DeleteInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: true, type: .list)
        ]
        /// A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to delete invitations from.
        public let accountIds: [String]

        public init(accountIds: [String]) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "accountIds"
        }
    }

    public struct DeleteMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: true, type: .list)
        ]
        public let detectorId: String
        /// A list of account IDs of the GuardDuty member accounts that you want to delete.
        public let accountIds: [String]

        public init(detectorId: String, accountIds: [String]) {
            self.detectorId = detectorId
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case accountIds = "accountIds"
        }
    }

    public struct GeoLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Lat", location: .body(locationName: "lat"), required: false, type: .double), 
            AWSShapeMember(label: "Lon", location: .body(locationName: "lon"), required: false, type: .double)
        ]
        /// Latitude information of remote IP address.
        public let lat: Double?
        /// Longitude information of remote IP address.
        public let lon: Double?

        public init(lat: Double? = nil, lon: Double? = nil) {
            self.lat = lat
            self.lon = lon
        }

        private enum CodingKeys: String, CodingKey {
            case lat = "lat"
            case lon = "lon"
        }
    }

    public struct DisassociateFromMasterAccountResponse: AWSShape {

    }

    public struct ProductCode: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", location: .body(locationName: "code"), required: false, type: .string), 
            AWSShapeMember(label: "ProductType", location: .body(locationName: "productType"), required: false, type: .string)
        ]
        /// Product code information.
        public let code: String?
        /// Product code type.
        public let productType: String?

        public init(code: String? = nil, productType: String? = nil) {
            self.code = code
            self.productType = productType
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case productType = "productType"
        }
    }

    public struct ArchiveFindingsResponse: AWSShape {

    }

    public struct GetFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Findings", location: .body(locationName: "findings"), required: false, type: .list)
        ]
        public let findings: [Finding]?

        public init(findings: [Finding]? = nil) {
            self.findings = findings
        }

        private enum CodingKeys: String, CodingKey {
            case findings = "findings"
        }
    }

    public struct CreateSampleFindingsResponse: AWSShape {

    }

    public struct DeleteFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FilterName", location: .uri(locationName: "filterName"), required: true, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let filterName: String
        public let detectorId: String

        public init(filterName: String, detectorId: String) {
            self.filterName = filterName
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case filterName = "filterName"
            case detectorId = "detectorId"
        }
    }

    public struct GetMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list), 
            AWSShapeMember(label: "Members", location: .body(locationName: "members"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?
        public let members: [Member]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil, members: [Member]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
            self.members = members
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
            case members = "members"
        }
    }

    public struct AwsApiCallAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainDetails", location: .body(locationName: "domainDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "ServiceName", location: .body(locationName: "serviceName"), required: false, type: .string), 
            AWSShapeMember(label: "RemoteIpDetails", location: .body(locationName: "remoteIpDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "CallerType", location: .body(locationName: "callerType"), required: false, type: .string), 
            AWSShapeMember(label: "Api", location: .body(locationName: "api"), required: false, type: .string)
        ]
        /// Domain information for the AWS API call.
        public let domainDetails: DomainDetails?
        /// AWS service name whose API was invoked.
        public let serviceName: String?
        /// Remote IP information of the connection.
        public let remoteIpDetails: RemoteIpDetails?
        /// AWS API caller type.
        public let callerType: String?
        /// AWS API name.
        public let api: String?

        public init(domainDetails: DomainDetails? = nil, serviceName: String? = nil, remoteIpDetails: RemoteIpDetails? = nil, callerType: String? = nil, api: String? = nil) {
            self.domainDetails = domainDetails
            self.serviceName = serviceName
            self.remoteIpDetails = remoteIpDetails
            self.callerType = callerType
            self.api = api
        }

        private enum CodingKeys: String, CodingKey {
            case domainDetails = "domainDetails"
            case serviceName = "serviceName"
            case remoteIpDetails = "remoteIpDetails"
            case callerType = "callerType"
            case api = "api"
        }
    }

    public struct GetInvitationsCountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InvitationsCount", location: .body(locationName: "invitationsCount"), required: false, type: .integer)
        ]
        /// The number of received invitations.
        public let invitationsCount: Int32?

        public init(invitationsCount: Int32? = nil) {
            self.invitationsCount = invitationsCount
        }

        private enum CodingKeys: String, CodingKey {
            case invitationsCount = "invitationsCount"
        }
    }

    public struct Resource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", location: .body(locationName: "resourceType"), required: false, type: .string), 
            AWSShapeMember(label: "AccessKeyDetails", location: .body(locationName: "accessKeyDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceDetails", location: .body(locationName: "instanceDetails"), required: false, type: .structure)
        ]
        /// The type of the AWS resource.
        public let resourceType: String?
        public let accessKeyDetails: AccessKeyDetails?
        public let instanceDetails: InstanceDetails?

        public init(resourceType: String? = nil, accessKeyDetails: AccessKeyDetails? = nil, instanceDetails: InstanceDetails? = nil) {
            self.resourceType = resourceType
            self.accessKeyDetails = accessKeyDetails
            self.instanceDetails = instanceDetails
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case accessKeyDetails = "accessKeyDetails"
            case instanceDetails = "instanceDetails"
        }
    }

    public struct GetThreatIntelSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ThreatIntelSetId", location: .uri(locationName: "threatIntelSetId"), required: true, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let threatIntelSetId: String
        public let detectorId: String

        public init(threatIntelSetId: String, detectorId: String) {
            self.threatIntelSetId = threatIntelSetId
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case threatIntelSetId = "threatIntelSetId"
            case detectorId = "detectorId"
        }
    }

    public struct ListFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .body(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "SortCriteria", location: .body(locationName: "sortCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "FindingCriteria", location: .body(locationName: "findingCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListFindings action. For subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 50. The maximum value is 50.
        public let maxResults: Int32?
        /// Represents the criteria used for sorting findings.
        public let sortCriteria: SortCriteria?
        /// Represents the criteria used for querying findings.
        public let findingCriteria: FindingCriteria?
        public let detectorId: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, sortCriteria: SortCriteria? = nil, findingCriteria: FindingCriteria? = nil, detectorId: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.sortCriteria = sortCriteria
            self.findingCriteria = findingCriteria
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case sortCriteria = "sortCriteria"
            case findingCriteria = "findingCriteria"
            case detectorId = "detectorId"
        }
    }

    public struct UnarchiveFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FindingIds", location: .body(locationName: "findingIds"), required: true, type: .list), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// IDs of the findings that you want to unarchive.
        public let findingIds: [String]
        public let detectorId: String

        public init(findingIds: [String], detectorId: String) {
            self.findingIds = findingIds
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case findingIds = "findingIds"
            case detectorId = "detectorId"
        }
    }

    public struct GetDetectorResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceRole", location: .body(locationName: "serviceRole"), required: false, type: .string), 
            AWSShapeMember(label: "CreatedAt", location: .body(locationName: "createdAt"), required: false, type: .string), 
            AWSShapeMember(label: "FindingPublishingFrequency", location: .body(locationName: "findingPublishingFrequency"), required: false, type: .enum), 
            AWSShapeMember(label: "UpdatedAt", location: .body(locationName: "updatedAt"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        public let serviceRole: String?
        public let createdAt: String?
        public let findingPublishingFrequency: FindingPublishingFrequency?
        public let updatedAt: String?
        public let status: DetectorStatus?

        public init(serviceRole: String? = nil, createdAt: String? = nil, findingPublishingFrequency: FindingPublishingFrequency? = nil, updatedAt: String? = nil, status: DetectorStatus? = nil) {
            self.serviceRole = serviceRole
            self.createdAt = createdAt
            self.findingPublishingFrequency = findingPublishingFrequency
            self.updatedAt = updatedAt
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case serviceRole = "serviceRole"
            case createdAt = "createdAt"
            case findingPublishingFrequency = "findingPublishingFrequency"
            case updatedAt = "updatedAt"
            case status = "status"
        }
    }

    public enum IpSetFormat: String, CustomStringConvertible, Codable {
        case txt = "TXT"
        case stix = "STIX"
        case otxCsv = "OTX_CSV"
        case alienVault = "ALIEN_VAULT"
        case proofPoint = "PROOF_POINT"
        case fireEye = "FIRE_EYE"
        public var description: String { return self.rawValue }
    }

    public struct CreateSampleFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "FindingTypes", location: .body(locationName: "findingTypes"), required: false, type: .list)
        ]
        public let detectorId: String
        /// Types of sample findings that you want to generate.
        public let findingTypes: [String]?

        public init(detectorId: String, findingTypes: [String]? = nil) {
            self.detectorId = detectorId
            self.findingTypes = findingTypes
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case findingTypes = "findingTypes"
        }
    }

    public struct AcceptInvitationResponse: AWSShape {

    }

    public enum FindingStatisticType: String, CustomStringConvertible, Codable {
        case countBySeverity = "COUNT_BY_SEVERITY"
        public var description: String { return self.rawValue }
    }

    public struct City: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CityName", location: .body(locationName: "cityName"), required: false, type: .string)
        ]
        /// City name of the remote IP address.
        public let cityName: String?

        public init(cityName: String? = nil) {
            self.cityName = cityName
        }

        private enum CodingKeys: String, CodingKey {
            case cityName = "cityName"
        }
    }

    public struct CreateIPSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IpSetId", location: .body(locationName: "ipSetId"), required: false, type: .string)
        ]
        public let ipSetId: String?

        public init(ipSetId: String? = nil) {
            self.ipSetId = ipSetId
        }

        private enum CodingKeys: String, CodingKey {
            case ipSetId = "ipSetId"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", location: .body(locationName: "key"), required: false, type: .string), 
            AWSShapeMember(label: "Value", location: .body(locationName: "value"), required: false, type: .string)
        ]
        /// EC2 instance tag key.
        public let key: String?
        /// EC2 instance tag value.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct UpdateIPSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Activate", location: .body(locationName: "activate"), required: false, type: .boolean), 
            AWSShapeMember(label: "IpSetId", location: .uri(locationName: "ipSetId"), required: true, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// The updated URI of the file that contains the IPSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key).
        public let location: String?
        /// The unique ID that specifies the IPSet that you want to update.
        public let name: String?
        /// The updated boolean value that specifies whether the IPSet is active or not.
        public let activate: Bool?
        public let ipSetId: String
        public let detectorId: String

        public init(location: String? = nil, name: String? = nil, activate: Bool? = nil, ipSetId: String, detectorId: String) {
            self.location = location
            self.name = name
            self.activate = activate
            self.ipSetId = ipSetId
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case location = "location"
            case name = "name"
            case activate = "activate"
            case ipSetId = "ipSetId"
            case detectorId = "detectorId"
        }
    }

    public struct Organization: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Isp", location: .body(locationName: "isp"), required: false, type: .string), 
            AWSShapeMember(label: "Asn", location: .body(locationName: "asn"), required: false, type: .string), 
            AWSShapeMember(label: "AsnOrg", location: .body(locationName: "asnOrg"), required: false, type: .string), 
            AWSShapeMember(label: "Org", location: .body(locationName: "org"), required: false, type: .string)
        ]
        /// ISP information for the internet provider.
        public let isp: String?
        /// Autonomous system number of the internet provider of the remote IP address.
        public let asn: String?
        /// Organization that registered this ASN.
        public let asnOrg: String?
        /// Name of the internet provider.
        public let org: String?

        public init(isp: String? = nil, asn: String? = nil, asnOrg: String? = nil, org: String? = nil) {
            self.isp = isp
            self.asn = asn
            self.asnOrg = asnOrg
            self.org = org
        }

        private enum CodingKeys: String, CodingKey {
            case isp = "isp"
            case asn = "asn"
            case asnOrg = "asnOrg"
            case org = "org"
        }
    }

    public struct InstanceDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceState", location: .body(locationName: "instanceState"), required: false, type: .string), 
            AWSShapeMember(label: "ImageId", location: .body(locationName: "imageId"), required: false, type: .string), 
            AWSShapeMember(label: "LaunchTime", location: .body(locationName: "launchTime"), required: false, type: .string), 
            AWSShapeMember(label: "IamInstanceProfile", location: .body(locationName: "iamInstanceProfile"), required: false, type: .structure), 
            AWSShapeMember(label: "InstanceType", location: .body(locationName: "instanceType"), required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaces", location: .body(locationName: "networkInterfaces"), required: false, type: .list), 
            AWSShapeMember(label: "InstanceId", location: .body(locationName: "instanceId"), required: false, type: .string), 
            AWSShapeMember(label: "Tags", location: .body(locationName: "tags"), required: false, type: .list), 
            AWSShapeMember(label: "ProductCodes", location: .body(locationName: "productCodes"), required: false, type: .list), 
            AWSShapeMember(label: "Platform", location: .body(locationName: "platform"), required: false, type: .string), 
            AWSShapeMember(label: "ImageDescription", location: .body(locationName: "imageDescription"), required: false, type: .string)
        ]
        /// The state of the EC2 instance.
        public let instanceState: String?
        /// The image ID of the EC2 instance.
        public let imageId: String?
        /// The launch time of the EC2 instance.
        public let launchTime: String?
        public let iamInstanceProfile: IamInstanceProfile?
        /// The type of the EC2 instance.
        public let instanceType: String?
        /// The availability zone of the EC2 instance.
        public let availabilityZone: String?
        /// The network interface information of the EC2 instance.
        public let networkInterfaces: [NetworkInterface]?
        /// The ID of the EC2 instance.
        public let instanceId: String?
        /// The tags of the EC2 instance.
        public let tags: [Tag]?
        /// The product code of the EC2 instance.
        public let productCodes: [ProductCode]?
        /// The platform of the EC2 instance.
        public let platform: String?
        /// The image description of the EC2 instance.
        public let imageDescription: String?

        public init(instanceState: String? = nil, imageId: String? = nil, launchTime: String? = nil, iamInstanceProfile: IamInstanceProfile? = nil, instanceType: String? = nil, availabilityZone: String? = nil, networkInterfaces: [NetworkInterface]? = nil, instanceId: String? = nil, tags: [Tag]? = nil, productCodes: [ProductCode]? = nil, platform: String? = nil, imageDescription: String? = nil) {
            self.instanceState = instanceState
            self.imageId = imageId
            self.launchTime = launchTime
            self.iamInstanceProfile = iamInstanceProfile
            self.instanceType = instanceType
            self.availabilityZone = availabilityZone
            self.networkInterfaces = networkInterfaces
            self.instanceId = instanceId
            self.tags = tags
            self.productCodes = productCodes
            self.platform = platform
            self.imageDescription = imageDescription
        }

        private enum CodingKeys: String, CodingKey {
            case instanceState = "instanceState"
            case imageId = "imageId"
            case launchTime = "launchTime"
            case iamInstanceProfile = "iamInstanceProfile"
            case instanceType = "instanceType"
            case availabilityZone = "availabilityZone"
            case networkInterfaces = "networkInterfaces"
            case instanceId = "instanceId"
            case tags = "tags"
            case productCodes = "productCodes"
            case platform = "platform"
            case imageDescription = "imageDescription"
        }
    }

    public struct CreateThreatIntelSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ThreatIntelSetId", location: .body(locationName: "threatIntelSetId"), required: false, type: .string)
        ]
        public let threatIntelSetId: String?

        public init(threatIntelSetId: String? = nil) {
            self.threatIntelSetId = threatIntelSetId
        }

        private enum CodingKeys: String, CodingKey {
            case threatIntelSetId = "threatIntelSetId"
        }
    }

    public struct UnprocessedAccount: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: true, type: .string), 
            AWSShapeMember(label: "Result", location: .body(locationName: "result"), required: true, type: .string)
        ]
        /// AWS Account ID.
        public let accountId: String
        /// A reason why the account hasn't been processed.
        public let result: String

        public init(accountId: String, result: String) {
            self.accountId = accountId
            self.result = result
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case result = "result"
        }
    }

    public struct UpdateFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Action", location: .body(locationName: "action"), required: false, type: .enum), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "FilterName", location: .uri(locationName: "filterName"), required: true, type: .string), 
            AWSShapeMember(label: "FindingCriteria", location: .body(locationName: "findingCriteria"), required: false, type: .structure), 
            AWSShapeMember(label: "Rank", location: .body(locationName: "rank"), required: false, type: .integer), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// Specifies the action that is to be applied to the findings that match the filter.
        public let action: FilterAction?
        /// The description of the filter.
        public let description: String?
        public let filterName: String
        /// Represents the criteria to be used in the filter for querying findings.
        public let findingCriteria: FindingCriteria?
        /// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
        public let rank: Int32?
        public let detectorId: String

        public init(action: FilterAction? = nil, description: String? = nil, filterName: String, findingCriteria: FindingCriteria? = nil, rank: Int32? = nil, detectorId: String) {
            self.action = action
            self.description = description
            self.filterName = filterName
            self.findingCriteria = findingCriteria
            self.rank = rank
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case action = "action"
            case description = "description"
            case filterName = "filterName"
            case findingCriteria = "findingCriteria"
            case rank = "rank"
            case detectorId = "detectorId"
        }
    }

    public struct AcceptInvitationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InvitationId", location: .body(locationName: "invitationId"), required: true, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "MasterId", location: .body(locationName: "masterId"), required: true, type: .string)
        ]
        /// This value is used to validate the master account to the member account.
        public let invitationId: String
        public let detectorId: String
        /// The account ID of the master GuardDuty account whose invitation you're accepting.
        public let masterId: String

        public init(invitationId: String, detectorId: String, masterId: String) {
            self.invitationId = invitationId
            self.detectorId = detectorId
            self.masterId = masterId
        }

        private enum CodingKeys: String, CodingKey {
            case invitationId = "invitationId"
            case detectorId = "detectorId"
            case masterId = "masterId"
        }
    }

    public struct AccessKeyDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserType", location: .body(locationName: "userType"), required: false, type: .string), 
            AWSShapeMember(label: "UserName", location: .body(locationName: "userName"), required: false, type: .string), 
            AWSShapeMember(label: "PrincipalId", location: .body(locationName: "principalId"), required: false, type: .string), 
            AWSShapeMember(label: "AccessKeyId", location: .body(locationName: "accessKeyId"), required: false, type: .string)
        ]
        /// The type of the user.
        public let userType: String?
        /// The name of the user.
        public let userName: String?
        /// The principal ID of the user.
        public let principalId: String?
        /// Access key ID of the user.
        public let accessKeyId: String?

        public init(userType: String? = nil, userName: String? = nil, principalId: String? = nil, accessKeyId: String? = nil) {
            self.userType = userType
            self.userName = userName
            self.principalId = principalId
            self.accessKeyId = accessKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case userType = "userType"
            case userName = "userName"
            case principalId = "principalId"
            case accessKeyId = "accessKeyId"
        }
    }

    public struct StartMonitoringMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: true, type: .list)
        ]
        public let detectorId: String
        /// A list of account IDs of the GuardDuty member accounts whose findings you want the master account to monitor.
        public let accountIds: [String]

        public init(detectorId: String, accountIds: [String]) {
            self.detectorId = detectorId
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case accountIds = "accountIds"
        }
    }

    public struct FindingStatistics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CountBySeverity", location: .body(locationName: "countBySeverity"), required: false, type: .map)
        ]
        /// Represents a map of severity to count statistic for a set of findings
        public let countBySeverity: [String: Int32]?

        public init(countBySeverity: [String: Int32]? = nil) {
            self.countBySeverity = countBySeverity
        }

        private enum CodingKeys: String, CodingKey {
            case countBySeverity = "countBySeverity"
        }
    }

    public struct ListDetectorsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "DetectorIds", location: .body(locationName: "detectorIds"), required: false, type: .list)
        ]
        public let nextToken: String?
        public let detectorIds: [String]?

        public init(nextToken: String? = nil, detectorIds: [String]? = nil) {
            self.nextToken = nextToken
            self.detectorIds = detectorIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case detectorIds = "detectorIds"
        }
    }

    public struct ListFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FindingIds", location: .body(locationName: "findingIds"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        public let findingIds: [String]?
        public let nextToken: String?

        public init(findingIds: [String]? = nil, nextToken: String? = nil) {
            self.findingIds = findingIds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case findingIds = "findingIds"
            case nextToken = "nextToken"
        }
    }

    public struct UpdateFindingsFeedbackResponse: AWSShape {

    }

    public struct GetIPSetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: false, type: .enum), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        /// The URI of the file that contains the IPSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key)
        public let location: String?
        /// The user friendly name to identify the IPSet. This name is displayed in all findings that are triggered by activity that involves IP addresses included in this IPSet.
        public let name: String?
        /// The format of the file that contains the IPSet.
        public let format: IpSetFormat?
        /// The status of ipSet file uploaded.
        public let status: IpSetStatus?

        public init(location: String? = nil, name: String? = nil, format: IpSetFormat? = nil, status: IpSetStatus? = nil) {
            self.location = location
            self.name = name
            self.format = format
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case location = "location"
            case name = "name"
            case format = "format"
            case status = "status"
        }
    }

    public struct Action: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AwsApiCallAction", location: .body(locationName: "awsApiCallAction"), required: false, type: .structure), 
            AWSShapeMember(label: "NetworkConnectionAction", location: .body(locationName: "networkConnectionAction"), required: false, type: .structure), 
            AWSShapeMember(label: "PortProbeAction", location: .body(locationName: "portProbeAction"), required: false, type: .structure), 
            AWSShapeMember(label: "ActionType", location: .body(locationName: "actionType"), required: false, type: .string), 
            AWSShapeMember(label: "DnsRequestAction", location: .body(locationName: "dnsRequestAction"), required: false, type: .structure)
        ]
        /// Information about the AWS_API_CALL action described in this finding.
        public let awsApiCallAction: AwsApiCallAction?
        /// Information about the NETWORK_CONNECTION action described in this finding.
        public let networkConnectionAction: NetworkConnectionAction?
        /// Information about the PORT_PROBE action described in this finding.
        public let portProbeAction: PortProbeAction?
        /// GuardDuty Finding activity type.
        public let actionType: String?
        /// Information about the DNS_REQUEST action described in this finding.
        public let dnsRequestAction: DnsRequestAction?

        public init(awsApiCallAction: AwsApiCallAction? = nil, networkConnectionAction: NetworkConnectionAction? = nil, portProbeAction: PortProbeAction? = nil, actionType: String? = nil, dnsRequestAction: DnsRequestAction? = nil) {
            self.awsApiCallAction = awsApiCallAction
            self.networkConnectionAction = networkConnectionAction
            self.portProbeAction = portProbeAction
            self.actionType = actionType
            self.dnsRequestAction = dnsRequestAction
        }

        private enum CodingKeys: String, CodingKey {
            case awsApiCallAction = "awsApiCallAction"
            case networkConnectionAction = "networkConnectionAction"
            case portProbeAction = "portProbeAction"
            case actionType = "actionType"
            case dnsRequestAction = "dnsRequestAction"
        }
    }

    public struct DeleteDetectorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let detectorId: String

        public init(detectorId: String) {
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
        }
    }

    public struct GetInvitationsCountRequest: AWSShape {

    }

    public struct ListThreatIntelSetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        public let maxResults: Int32?
        public let detectorId: String
        public let nextToken: String?

        public init(maxResults: Int32? = nil, detectorId: String, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.detectorId = detectorId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case detectorId = "detectorId"
            case nextToken = "nextToken"
        }
    }

    public struct CreateDetectorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enable", location: .body(locationName: "enable"), required: true, type: .boolean), 
            AWSShapeMember(label: "FindingPublishingFrequency", location: .body(locationName: "findingPublishingFrequency"), required: false, type: .enum), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string)
        ]
        /// A boolean value that specifies whether the detector is to be enabled.
        public let enable: Bool
        /// A enum value that specifies how frequently customer got Finding updates published.
        public let findingPublishingFrequency: FindingPublishingFrequency?
        /// The idempotency token for the create request.
        public let clientToken: String?

        public init(enable: Bool, findingPublishingFrequency: FindingPublishingFrequency? = nil, clientToken: String? = nil) {
            self.enable = enable
            self.findingPublishingFrequency = findingPublishingFrequency
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case enable = "enable"
            case findingPublishingFrequency = "findingPublishingFrequency"
            case clientToken = "clientToken"
        }
    }

    public struct GetDetectorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let detectorId: String

        public init(detectorId: String) {
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
        }
    }

    public struct UpdateFilterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string)
        ]
        /// The name of the filter.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct GetMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: true, type: .list)
        ]
        public let detectorId: String
        /// A list of account IDs of the GuardDuty member accounts that you want to describe.
        public let accountIds: [String]

        public init(detectorId: String, accountIds: [String]) {
            self.detectorId = detectorId
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case accountIds = "accountIds"
        }
    }

    public struct ListFiltersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "FilterNames", location: .body(locationName: "filterNames"), required: false, type: .list)
        ]
        public let nextToken: String?
        public let filterNames: [String]?

        public init(nextToken: String? = nil, filterNames: [String]? = nil) {
            self.nextToken = nextToken
            self.filterNames = filterNames
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case filterNames = "filterNames"
        }
    }

    public struct DeleteInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct DeleteMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct InviteMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisableEmailNotification", location: .body(locationName: "disableEmailNotification"), required: false, type: .boolean), 
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string), 
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: true, type: .list), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// A boolean value that specifies whether you want to disable email notification to the accounts that you’re inviting to GuardDuty as members.
        public let disableEmailNotification: Bool?
        /// The invitation message that you want to send to the accounts that you’re inviting to GuardDuty as members.
        public let message: String?
        /// A list of account IDs of the accounts that you want to invite to GuardDuty as members.
        public let accountIds: [String]
        public let detectorId: String

        public init(disableEmailNotification: Bool? = nil, message: String? = nil, accountIds: [String], detectorId: String) {
            self.disableEmailNotification = disableEmailNotification
            self.message = message
            self.accountIds = accountIds
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case disableEmailNotification = "disableEmailNotification"
            case message = "message"
            case accountIds = "accountIds"
            case detectorId = "detectorId"
        }
    }

    public struct DeleteThreatIntelSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ThreatIntelSetId", location: .uri(locationName: "threatIntelSetId"), required: true, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let threatIntelSetId: String
        public let detectorId: String

        public init(threatIntelSetId: String, detectorId: String) {
            self.threatIntelSetId = threatIntelSetId
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case threatIntelSetId = "threatIntelSetId"
            case detectorId = "detectorId"
        }
    }

    public struct CreateFilterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rank", location: .body(locationName: "rank"), required: false, type: .integer), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string), 
            AWSShapeMember(label: "FindingCriteria", location: .body(locationName: "findingCriteria"), required: true, type: .structure), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "Action", location: .body(locationName: "action"), required: false, type: .enum), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string)
        ]
        /// Specifies the position of the filter in the list of current filters. Also specifies the order in which this filter is applied to the findings.
        public let rank: Int32?
        /// The idempotency token for the create request.
        public let clientToken: String?
        /// Represents the criteria to be used in the filter for querying findings.
        public let findingCriteria: FindingCriteria
        public let detectorId: String
        /// Specifies the action that is to be applied to the findings that match the filter.
        public let action: FilterAction?
        /// The description of the filter.
        public let description: String?
        /// The name of the filter.
        public let name: String

        public init(rank: Int32? = nil, clientToken: String? = nil, findingCriteria: FindingCriteria, detectorId: String, action: FilterAction? = nil, description: String? = nil, name: String) {
            self.rank = rank
            self.clientToken = clientToken
            self.findingCriteria = findingCriteria
            self.detectorId = detectorId
            self.action = action
            self.description = description
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case rank = "rank"
            case clientToken = "clientToken"
            case findingCriteria = "findingCriteria"
            case detectorId = "detectorId"
            case action = "action"
            case description = "description"
            case name = "name"
        }
    }

    public struct DomainDetails: AWSShape {

    }

    public enum ThreatIntelSetStatus: String, CustomStringConvertible, Codable {
        case inactive = "INACTIVE"
        case activating = "ACTIVATING"
        case active = "ACTIVE"
        case deactivating = "DEACTIVATING"
        case error = "ERROR"
        case deletePending = "DELETE_PENDING"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct IamInstanceProfile: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: false, type: .string), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: false, type: .string)
        ]
        /// AWS EC2 instance profile ARN.
        public let arn: String?
        /// AWS EC2 instance profile ID.
        public let id: String?

        public init(arn: String? = nil, id: String? = nil) {
            self.arn = arn
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case id = "id"
        }
    }

    public struct AccountDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: true, type: .string), 
            AWSShapeMember(label: "Email", location: .body(locationName: "email"), required: true, type: .string)
        ]
        /// Member account ID.
        public let accountId: String
        /// Member account's email address.
        public let email: String

        public init(accountId: String, email: String) {
            self.accountId = accountId
            self.email = email
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case email = "email"
        }
    }

    public struct CreateMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "AccountDetails", location: .body(locationName: "accountDetails"), required: true, type: .list)
        ]
        public let detectorId: String
        /// A list of account ID and email address pairs of the accounts that you want to associate with the master GuardDuty account.
        public let accountDetails: [AccountDetail]

        public init(detectorId: String, accountDetails: [AccountDetail]) {
            self.detectorId = detectorId
            self.accountDetails = accountDetails
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case accountDetails = "accountDetails"
        }
    }

    public struct UpdateFindingsFeedbackRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Feedback", location: .body(locationName: "feedback"), required: true, type: .enum), 
            AWSShapeMember(label: "FindingIds", location: .body(locationName: "findingIds"), required: true, type: .list), 
            AWSShapeMember(label: "Comments", location: .body(locationName: "comments"), required: false, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// Valid values: USEFUL | NOT_USEFUL
        public let feedback: Feedback
        /// IDs of the findings that you want to mark as useful or not useful.
        public let findingIds: [String]
        /// Additional feedback about the GuardDuty findings.
        public let comments: String?
        public let detectorId: String

        public init(feedback: Feedback, findingIds: [String], comments: String? = nil, detectorId: String) {
            self.feedback = feedback
            self.findingIds = findingIds
            self.comments = comments
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case feedback = "feedback"
            case findingIds = "findingIds"
            case comments = "comments"
            case detectorId = "detectorId"
        }
    }

    public struct Service: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Count", location: .body(locationName: "count"), required: false, type: .integer), 
            AWSShapeMember(label: "EventLastSeen", location: .body(locationName: "eventLastSeen"), required: false, type: .string), 
            AWSShapeMember(label: "ServiceName", location: .body(locationName: "serviceName"), required: false, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .body(locationName: "detectorId"), required: false, type: .string), 
            AWSShapeMember(label: "Action", location: .body(locationName: "action"), required: false, type: .structure), 
            AWSShapeMember(label: "UserFeedback", location: .body(locationName: "userFeedback"), required: false, type: .string), 
            AWSShapeMember(label: "EventFirstSeen", location: .body(locationName: "eventFirstSeen"), required: false, type: .string), 
            AWSShapeMember(label: "Archived", location: .body(locationName: "archived"), required: false, type: .boolean), 
            AWSShapeMember(label: "ResourceRole", location: .body(locationName: "resourceRole"), required: false, type: .string)
        ]
        /// Total count of the occurrences of this finding type.
        public let count: Int32?
        /// Last seen timestamp of the activity that prompted GuardDuty to generate this finding.
        public let eventLastSeen: String?
        /// The name of the AWS service (GuardDuty) that generated a finding.
        public let serviceName: String?
        /// Detector ID for the GuardDuty service.
        public let detectorId: String?
        /// Information about the activity described in a finding.
        public let action: Action?
        /// Feedback left about the finding.
        public let userFeedback: String?
        /// First seen timestamp of the activity that prompted GuardDuty to generate this finding.
        public let eventFirstSeen: String?
        /// Indicates whether this finding is archived.
        public let archived: Bool?
        /// Resource role information for this finding.
        public let resourceRole: String?

        public init(count: Int32? = nil, eventLastSeen: String? = nil, serviceName: String? = nil, detectorId: String? = nil, action: Action? = nil, userFeedback: String? = nil, eventFirstSeen: String? = nil, archived: Bool? = nil, resourceRole: String? = nil) {
            self.count = count
            self.eventLastSeen = eventLastSeen
            self.serviceName = serviceName
            self.detectorId = detectorId
            self.action = action
            self.userFeedback = userFeedback
            self.eventFirstSeen = eventFirstSeen
            self.archived = archived
            self.resourceRole = resourceRole
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case eventLastSeen = "eventLastSeen"
            case serviceName = "serviceName"
            case detectorId = "detectorId"
            case action = "action"
            case userFeedback = "userFeedback"
            case eventFirstSeen = "eventFirstSeen"
            case archived = "archived"
            case resourceRole = "resourceRole"
        }
    }

    public struct SecurityGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", location: .body(locationName: "groupName"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .body(locationName: "groupId"), required: false, type: .string)
        ]
        /// EC2 instance's security group name.
        public let groupName: String?
        /// EC2 instance's security group ID.
        public let groupId: String?

        public init(groupName: String? = nil, groupId: String? = nil) {
            self.groupName = groupName
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "groupName"
            case groupId = "groupId"
        }
    }

    public struct GetFindingsStatisticsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FindingStatistics", location: .body(locationName: "findingStatistics"), required: false, type: .structure)
        ]
        /// Finding statistics object.
        public let findingStatistics: FindingStatistics?

        public init(findingStatistics: FindingStatistics? = nil) {
            self.findingStatistics = findingStatistics
        }

        private enum CodingKeys: String, CodingKey {
            case findingStatistics = "findingStatistics"
        }
    }

    public struct PortProbeDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RemoteIpDetails", location: .body(locationName: "remoteIpDetails"), required: false, type: .structure), 
            AWSShapeMember(label: "LocalPortDetails", location: .body(locationName: "localPortDetails"), required: false, type: .structure)
        ]
        /// Remote IP information of the connection.
        public let remoteIpDetails: RemoteIpDetails?
        /// Local port information of the connection.
        public let localPortDetails: LocalPortDetails?

        public init(remoteIpDetails: RemoteIpDetails? = nil, localPortDetails: LocalPortDetails? = nil) {
            self.remoteIpDetails = remoteIpDetails
            self.localPortDetails = localPortDetails
        }

        private enum CodingKeys: String, CodingKey {
            case remoteIpDetails = "remoteIpDetails"
            case localPortDetails = "localPortDetails"
        }
    }

    public struct DeleteIPSetResponse: AWSShape {

    }

    public struct PrivateIpAddressDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrivateIpAddress", location: .body(locationName: "privateIpAddress"), required: false, type: .string), 
            AWSShapeMember(label: "PrivateDnsName", location: .body(locationName: "privateDnsName"), required: false, type: .string)
        ]
        /// Private IP address of the EC2 instance.
        public let privateIpAddress: String?
        /// Private DNS name of the EC2 instance.
        public let privateDnsName: String?

        public init(privateIpAddress: String? = nil, privateDnsName: String? = nil) {
            self.privateIpAddress = privateIpAddress
            self.privateDnsName = privateDnsName
        }

        private enum CodingKeys: String, CodingKey {
            case privateIpAddress = "privateIpAddress"
            case privateDnsName = "privateDnsName"
        }
    }

    public struct ListThreatIntelSetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ThreatIntelSetIds", location: .body(locationName: "threatIntelSetIds"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        public let threatIntelSetIds: [String]?
        public let nextToken: String?

        public init(threatIntelSetIds: [String]? = nil, nextToken: String? = nil) {
            self.threatIntelSetIds = threatIntelSetIds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case threatIntelSetIds = "threatIntelSetIds"
            case nextToken = "nextToken"
        }
    }

    public struct SortCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", location: .body(locationName: "attributeName"), required: false, type: .string), 
            AWSShapeMember(label: "OrderBy", location: .body(locationName: "orderBy"), required: false, type: .enum)
        ]
        /// Represents the finding attribute (for example, accountId) by which to sort findings.
        public let attributeName: String?
        /// Order by which the sorted findings are to be displayed.
        public let orderBy: OrderBy?

        public init(attributeName: String? = nil, orderBy: OrderBy? = nil) {
            self.attributeName = attributeName
            self.orderBy = orderBy
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "attributeName"
            case orderBy = "orderBy"
        }
    }

    public enum Feedback: String, CustomStringConvertible, Codable {
        case useful = "USEFUL"
        case notUseful = "NOT_USEFUL"
        public var description: String { return self.rawValue }
    }

    public struct ListDetectorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        public let maxResults: Int32?
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct PortProbeAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Blocked", location: .body(locationName: "blocked"), required: false, type: .boolean), 
            AWSShapeMember(label: "PortProbeDetails", location: .body(locationName: "portProbeDetails"), required: false, type: .list)
        ]
        /// Port probe blocked information.
        public let blocked: Bool?
        /// A list of port probe details objects.
        public let portProbeDetails: [PortProbeDetail]?

        public init(blocked: Bool? = nil, portProbeDetails: [PortProbeDetail]? = nil) {
            self.blocked = blocked
            self.portProbeDetails = portProbeDetails
        }

        private enum CodingKeys: String, CodingKey {
            case blocked = "blocked"
            case portProbeDetails = "portProbeDetails"
        }
    }

    public struct ListIPSetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        public let maxResults: Int32?
        public let detectorId: String
        public let nextToken: String?

        public init(maxResults: Int32? = nil, detectorId: String, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.detectorId = detectorId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case detectorId = "detectorId"
            case nextToken = "nextToken"
        }
    }

    public struct CreateMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct LocalPortDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Port", location: .body(locationName: "port"), required: false, type: .integer), 
            AWSShapeMember(label: "PortName", location: .body(locationName: "portName"), required: false, type: .string)
        ]
        /// Port number of the local connection.
        public let port: Int32?
        /// Port name of the local connection.
        public let portName: String?

        public init(port: Int32? = nil, portName: String? = nil) {
            self.port = port
            self.portName = portName
        }

        private enum CodingKeys: String, CodingKey {
            case port = "port"
            case portName = "portName"
        }
    }

    public struct GetMasterAccountRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let detectorId: String

        public init(detectorId: String) {
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
        }
    }

    public struct ListFiltersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        public let maxResults: Int32?
        public let detectorId: String
        public let nextToken: String?

        public init(maxResults: Int32? = nil, detectorId: String, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.detectorId = detectorId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case detectorId = "detectorId"
            case nextToken = "nextToken"
        }
    }

    public enum FindingPublishingFrequency: String, CustomStringConvertible, Codable {
        case fifteenMinutes = "FIFTEEN_MINUTES"
        case oneHour = "ONE_HOUR"
        case sixHours = "SIX_HOURS"
        public var description: String { return self.rawValue }
    }

    public struct RemoteIpDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "City", location: .body(locationName: "city"), required: false, type: .structure), 
            AWSShapeMember(label: "Organization", location: .body(locationName: "organization"), required: false, type: .structure), 
            AWSShapeMember(label: "Country", location: .body(locationName: "country"), required: false, type: .structure), 
            AWSShapeMember(label: "GeoLocation", location: .body(locationName: "geoLocation"), required: false, type: .structure), 
            AWSShapeMember(label: "IpAddressV4", location: .body(locationName: "ipAddressV4"), required: false, type: .string)
        ]
        /// City information of the remote IP address.
        public let city: City?
        /// ISP Organization information of the remote IP address.
        public let organization: Organization?
        /// Country code of the remote IP address.
        public let country: Country?
        /// Location information of the remote IP address.
        public let geoLocation: GeoLocation?
        /// IPV4 remote address of the connection.
        public let ipAddressV4: String?

        public init(city: City? = nil, organization: Organization? = nil, country: Country? = nil, geoLocation: GeoLocation? = nil, ipAddressV4: String? = nil) {
            self.city = city
            self.organization = organization
            self.country = country
            self.geoLocation = geoLocation
            self.ipAddressV4 = ipAddressV4
        }

        private enum CodingKeys: String, CodingKey {
            case city = "city"
            case organization = "organization"
            case country = "country"
            case geoLocation = "geoLocation"
            case ipAddressV4 = "ipAddressV4"
        }
    }

    public struct UpdateThreatIntelSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: false, type: .string), 
            AWSShapeMember(label: "ThreatIntelSetId", location: .uri(locationName: "threatIntelSetId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Activate", location: .body(locationName: "activate"), required: false, type: .boolean), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        /// The updated URI of the file that contains the ThreateIntelSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key)
        public let location: String?
        public let threatIntelSetId: String
        /// The unique ID that specifies the ThreatIntelSet that you want to update.
        public let name: String?
        /// The updated boolean value that specifies whether the ThreateIntelSet is active or not.
        public let activate: Bool?
        public let detectorId: String

        public init(location: String? = nil, threatIntelSetId: String, name: String? = nil, activate: Bool? = nil, detectorId: String) {
            self.location = location
            self.threatIntelSetId = threatIntelSetId
            self.name = name
            self.activate = activate
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case location = "location"
            case threatIntelSetId = "threatIntelSetId"
            case name = "name"
            case activate = "activate"
            case detectorId = "detectorId"
        }
    }

    public struct DeleteIPSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "IpSetId", location: .uri(locationName: "ipSetId"), required: true, type: .string)
        ]
        public let detectorId: String
        public let ipSetId: String

        public init(detectorId: String, ipSetId: String) {
            self.detectorId = detectorId
            self.ipSetId = ipSetId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
            case ipSetId = "ipSetId"
        }
    }

    public struct ListMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Members", location: .body(locationName: "members"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        public let members: [Member]?
        public let nextToken: String?

        public init(members: [Member]? = nil, nextToken: String? = nil) {
            self.members = members
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case members = "members"
            case nextToken = "nextToken"
        }
    }

    public struct DisassociateFromMasterAccountRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string)
        ]
        public let detectorId: String

        public init(detectorId: String) {
            self.detectorId = detectorId
        }

        private enum CodingKeys: String, CodingKey {
            case detectorId = "detectorId"
        }
    }

    public struct InviteMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct Master: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: false, type: .string), 
            AWSShapeMember(label: "RelationshipStatus", location: .body(locationName: "relationshipStatus"), required: false, type: .string), 
            AWSShapeMember(label: "InvitationId", location: .body(locationName: "invitationId"), required: false, type: .string), 
            AWSShapeMember(label: "InvitedAt", location: .body(locationName: "invitedAt"), required: false, type: .string)
        ]
        /// Master account ID
        public let accountId: String?
        /// The status of the relationship between the master and member accounts.
        public let relationshipStatus: String?
        /// This value is used to validate the master account to the member account.
        public let invitationId: String?
        /// Timestamp at which the invitation was sent
        public let invitedAt: String?

        public init(accountId: String? = nil, relationshipStatus: String? = nil, invitationId: String? = nil, invitedAt: String? = nil) {
            self.accountId = accountId
            self.relationshipStatus = relationshipStatus
            self.invitationId = invitationId
            self.invitedAt = invitedAt
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "accountId"
            case relationshipStatus = "relationshipStatus"
            case invitationId = "invitationId"
            case invitedAt = "invitedAt"
        }
    }

    public struct CreateIPSetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Location", location: .body(locationName: "location"), required: true, type: .string), 
            AWSShapeMember(label: "DetectorId", location: .uri(locationName: "detectorId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "Activate", location: .body(locationName: "activate"), required: true, type: .boolean), 
            AWSShapeMember(label: "Format", location: .body(locationName: "format"), required: true, type: .enum), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "clientToken"), required: false, type: .string)
        ]
        /// The URI of the file that contains the IPSet. For example (https://s3.us-west-2.amazonaws.com/my-bucket/my-object-key)
        public let location: String
        public let detectorId: String
        /// The user friendly name to identify the IPSet. This name is displayed in all findings that are triggered by activity that involves IP addresses included in this IPSet.
        public let name: String
        /// A boolean value that indicates whether GuardDuty is to start using the uploaded IPSet.
        public let activate: Bool
        /// The format of the file that contains the IPSet.
        public let format: IpSetFormat
        /// The idempotency token for the create request.
        public let clientToken: String?

        public init(location: String, detectorId: String, name: String, activate: Bool, format: IpSetFormat, clientToken: String? = nil) {
            self.location = location
            self.detectorId = detectorId
            self.name = name
            self.activate = activate
            self.format = format
            self.clientToken = clientToken
        }

        private enum CodingKeys: String, CodingKey {
            case location = "location"
            case detectorId = "detectorId"
            case name = "name"
            case activate = "activate"
            case format = "format"
            case clientToken = "clientToken"
        }
    }

    public struct ListInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "Invitations", location: .body(locationName: "invitations"), required: false, type: .list)
        ]
        public let nextToken: String?
        public let invitations: [Invitation]?

        public init(nextToken: String? = nil, invitations: [Invitation]? = nil) {
            self.nextToken = nextToken
            self.invitations = invitations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case invitations = "invitations"
        }
    }

    public struct Finding: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", location: .body(locationName: "type"), required: true, type: .string), 
            AWSShapeMember(label: "Confidence", location: .body(locationName: "confidence"), required: false, type: .double), 
            AWSShapeMember(label: "Arn", location: .body(locationName: "arn"), required: true, type: .string), 
            AWSShapeMember(label: "AccountId", location: .body(locationName: "accountId"), required: true, type: .string), 
            AWSShapeMember(label: "UpdatedAt", location: .body(locationName: "updatedAt"), required: true, type: .string), 
            AWSShapeMember(label: "Partition", location: .body(locationName: "partition"), required: false, type: .string), 
            AWSShapeMember(label: "CreatedAt", location: .body(locationName: "createdAt"), required: true, type: .string), 
            AWSShapeMember(label: "Region", location: .body(locationName: "region"), required: true, type: .string), 
            AWSShapeMember(label: "Severity", location: .body(locationName: "severity"), required: true, type: .double), 
            AWSShapeMember(label: "Id", location: .body(locationName: "id"), required: true, type: .string), 
            AWSShapeMember(label: "Resource", location: .body(locationName: "resource"), required: true, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Service", location: .body(locationName: "service"), required: false, type: .structure), 
            AWSShapeMember(label: "Title", location: .body(locationName: "title"), required: false, type: .string), 
            AWSShapeMember(label: "SchemaVersion", location: .body(locationName: "schemaVersion"), required: true, type: .string)
        ]
        /// The type of a finding described by the action.
        public let `type`: String
        /// The confidence level of a finding.
        public let confidence: Double?
        /// The ARN of a finding described by the action.
        public let arn: String
        /// AWS account ID where the activity occurred that prompted GuardDuty to generate a finding.
        public let accountId: String
        /// The time stamp at which a finding was last updated.
        public let updatedAt: String
        /// The AWS resource partition.
        public let partition: String?
        /// The time stamp at which a finding was generated.
        public let createdAt: String
        /// The AWS region where the activity occurred that prompted GuardDuty to generate a finding.
        public let region: String
        /// The severity of a finding.
        public let severity: Double
        /// The identifier that corresponds to a finding described by the action.
        public let id: String
        /// The AWS resource associated with the activity that prompted GuardDuty to generate a finding.
        public let resource: Resource
        /// The description of a finding.
        public let description: String?
        /// Additional information assigned to the generated finding by GuardDuty.
        public let service: Service?
        /// The title of a finding.
        public let title: String?
        /// Findings' schema version.
        public let schemaVersion: String

        public init(type: String, confidence: Double? = nil, arn: String, accountId: String, updatedAt: String, partition: String? = nil, createdAt: String, region: String, severity: Double, id: String, resource: Resource, description: String? = nil, service: Service? = nil, title: String? = nil, schemaVersion: String) {
            self.`type` = `type`
            self.confidence = confidence
            self.arn = arn
            self.accountId = accountId
            self.updatedAt = updatedAt
            self.partition = partition
            self.createdAt = createdAt
            self.region = region
            self.severity = severity
            self.id = id
            self.resource = resource
            self.description = description
            self.service = service
            self.title = title
            self.schemaVersion = schemaVersion
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
            case confidence = "confidence"
            case arn = "arn"
            case accountId = "accountId"
            case updatedAt = "updatedAt"
            case partition = "partition"
            case createdAt = "createdAt"
            case region = "region"
            case severity = "severity"
            case id = "id"
            case resource = "resource"
            case description = "description"
            case service = "service"
            case title = "title"
            case schemaVersion = "schemaVersion"
        }
    }

    public struct StopMonitoringMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", location: .body(locationName: "unprocessedAccounts"), required: false, type: .list)
        ]
        /// A list of objects containing the unprocessed account and a result string explaining why it was unprocessed.
        public let unprocessedAccounts: [UnprocessedAccount]?

        public init(unprocessedAccounts: [UnprocessedAccount]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "unprocessedAccounts"
        }
    }

    public struct CreateFilterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string)
        ]
        /// The name of the successfully created filter.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct DeclineInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", location: .body(locationName: "accountIds"), required: true, type: .list)
        ]
        /// A list of account IDs of the AWS accounts that sent invitations to the current member account that you want to decline invitations from.
        public let accountIds: [String]

        public init(accountIds: [String]) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "accountIds"
        }
    }

    public struct FindingCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Criterion", location: .body(locationName: "criterion"), required: false, type: .map)
        ]
        /// Represents a map of finding properties that match specified conditions and values when querying findings.
        public let criterion: [String: Condition]?

        public init(criterion: [String: Condition]? = nil) {
            self.criterion = criterion
        }

        private enum CodingKeys: String, CodingKey {
            case criterion = "criterion"
        }
    }

    public struct DnsRequestAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Domain", location: .body(locationName: "domain"), required: false, type: .string)
        ]
        /// Domain information for the DNS request.
        public let domain: String?

        public init(domain: String? = nil) {
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "domain"
        }
    }

}