// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension CloudDirectory {

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of tag key value pairs that are associated with the response.
        public let tags: [Tag]?
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?

        public init(nextToken: String? = nil, tags: [Tag]? = nil) {
            self.tags = tags
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case nextToken = "NextToken"
        }
    }

    public struct BatchCreateIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the index created by this operation.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct UpdateTypedLinkFacetResponse: AWSShape {

        public init() {
        }

    }

    public struct BatchGetObjectInformationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SchemaFacets", required: false, type: .list)
        ]
        /// The ObjectIdentifier of the specified object.
        public let objectIdentifier: String?
        /// The facets attached to the specified object.
        public let schemaFacets: [SchemaFacet]?

        public init(objectIdentifier: String? = nil, schemaFacets: [SchemaFacet]? = nil) {
            self.objectIdentifier = objectIdentifier
            self.schemaFacets = schemaFacets
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
            case schemaFacets = "SchemaFacets"
        }
    }

    public struct BatchWriteOperation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachToIndex", required: false, type: .structure), 
            AWSShapeMember(label: "UpdateObjectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "RemoveFacetFromObject", required: false, type: .structure), 
            AWSShapeMember(label: "UpdateLinkAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "DetachFromIndex", required: false, type: .structure), 
            AWSShapeMember(label: "DetachPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "DeleteObject", required: false, type: .structure), 
            AWSShapeMember(label: "DetachTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "AttachTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "CreateObject", required: false, type: .structure), 
            AWSShapeMember(label: "AttachObject", required: false, type: .structure), 
            AWSShapeMember(label: "AttachPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "AddFacetToObject", required: false, type: .structure), 
            AWSShapeMember(label: "DetachObject", required: false, type: .structure), 
            AWSShapeMember(label: "CreateIndex", required: false, type: .structure)
        ]
        /// Attaches the specified object to the specified index.
        public let attachToIndex: BatchAttachToIndex?
        /// Updates a given object's attributes.
        public let updateObjectAttributes: BatchUpdateObjectAttributes?
        /// A batch operation that removes a facet from an object.
        public let removeFacetFromObject: BatchRemoveFacetFromObject?
        /// Updates a given object's attributes.
        public let updateLinkAttributes: BatchUpdateLinkAttributes?
        /// Detaches the specified object from the specified index.
        public let detachFromIndex: BatchDetachFromIndex?
        /// Detaches a policy from a Directory.
        public let detachPolicy: BatchDetachPolicy?
        /// Deletes an object in a Directory.
        public let deleteObject: BatchDeleteObject?
        /// Detaches a typed link from a specified source and target object. For more information, see Typed Links.
        public let detachTypedLink: BatchDetachTypedLink?
        /// Attaches a typed link to a specified source and target object. For more information, see Typed Links.
        public let attachTypedLink: BatchAttachTypedLink?
        /// Creates an object.
        public let createObject: BatchCreateObject?
        /// Attaches an object to a Directory.
        public let attachObject: BatchAttachObject?
        /// Attaches a policy object to a regular object. An object can have a limited number of attached policies.
        public let attachPolicy: BatchAttachPolicy?
        /// A batch operation that adds a facet to an object.
        public let addFacetToObject: BatchAddFacetToObject?
        /// Detaches an object from a Directory.
        public let detachObject: BatchDetachObject?
        /// Creates an index object. See Indexing and search for more information.
        public let createIndex: BatchCreateIndex?

        public init(addFacetToObject: BatchAddFacetToObject? = nil, attachObject: BatchAttachObject? = nil, attachPolicy: BatchAttachPolicy? = nil, attachToIndex: BatchAttachToIndex? = nil, attachTypedLink: BatchAttachTypedLink? = nil, createIndex: BatchCreateIndex? = nil, createObject: BatchCreateObject? = nil, deleteObject: BatchDeleteObject? = nil, detachFromIndex: BatchDetachFromIndex? = nil, detachObject: BatchDetachObject? = nil, detachPolicy: BatchDetachPolicy? = nil, detachTypedLink: BatchDetachTypedLink? = nil, removeFacetFromObject: BatchRemoveFacetFromObject? = nil, updateLinkAttributes: BatchUpdateLinkAttributes? = nil, updateObjectAttributes: BatchUpdateObjectAttributes? = nil) {
            self.attachToIndex = attachToIndex
            self.updateObjectAttributes = updateObjectAttributes
            self.removeFacetFromObject = removeFacetFromObject
            self.updateLinkAttributes = updateLinkAttributes
            self.detachFromIndex = detachFromIndex
            self.detachPolicy = detachPolicy
            self.deleteObject = deleteObject
            self.detachTypedLink = detachTypedLink
            self.attachTypedLink = attachTypedLink
            self.createObject = createObject
            self.attachObject = attachObject
            self.attachPolicy = attachPolicy
            self.addFacetToObject = addFacetToObject
            self.detachObject = detachObject
            self.createIndex = createIndex
        }

        private enum CodingKeys: String, CodingKey {
            case attachToIndex = "AttachToIndex"
            case updateObjectAttributes = "UpdateObjectAttributes"
            case removeFacetFromObject = "RemoveFacetFromObject"
            case updateLinkAttributes = "UpdateLinkAttributes"
            case detachFromIndex = "DetachFromIndex"
            case detachPolicy = "DetachPolicy"
            case deleteObject = "DeleteObject"
            case detachTypedLink = "DetachTypedLink"
            case attachTypedLink = "AttachTypedLink"
            case createObject = "CreateObject"
            case attachObject = "AttachObject"
            case attachPolicy = "AttachPolicy"
            case addFacetToObject = "AddFacetToObject"
            case detachObject = "DetachObject"
            case createIndex = "CreateIndex"
        }
    }

    public enum UpdateActionType: String, CustomStringConvertible, Codable {
        case createOrUpdate = "CREATE_OR_UPDATE"
        case delete = "DELETE"
        public var description: String { return self.rawValue }
    }

    public struct BatchCreateObjectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The ID that is associated with the object.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct PathToObjectIdentifiers: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifiers", required: false, type: .list), 
            AWSShapeMember(label: "Path", required: false, type: .string)
        ]
        /// Lists ObjectIdentifiers starting from directory root to the object in the request.
        public let objectIdentifiers: [String]?
        /// The path that is used to identify the object starting from directory root.
        public let path: String?

        public init(objectIdentifiers: [String]? = nil, path: String? = nil) {
            self.objectIdentifiers = objectIdentifiers
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifiers = "ObjectIdentifiers"
            case path = "Path"
        }
    }

    public struct BatchReadResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Responses", required: false, type: .list)
        ]
        /// A list of all the responses for each batch read.
        public let responses: [BatchReadOperationResponse]?

        public init(responses: [BatchReadOperationResponse]? = nil) {
            self.responses = responses
        }

        private enum CodingKeys: String, CodingKey {
            case responses = "Responses"
        }
    }

    public struct ListPolicyAttachmentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectIdentifiers", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// A list of ObjectIdentifiers to which the policy is attached.
        public let objectIdentifiers: [String]?

        public init(nextToken: String? = nil, objectIdentifiers: [String]? = nil) {
            self.nextToken = nextToken
            self.objectIdentifiers = objectIdentifiers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case objectIdentifiers = "ObjectIdentifiers"
        }
    }

    public struct BatchListObjectPoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AttachedPolicyIds", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// A list of policy ObjectIdentifiers, that are attached to the object.
        public let attachedPolicyIds: [String]?

        public init(attachedPolicyIds: [String]? = nil, nextToken: String? = nil) {
            self.nextToken = nextToken
            self.attachedPolicyIds = attachedPolicyIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case attachedPolicyIds = "AttachedPolicyIds"
        }
    }

    public struct ObjectReference: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Selector", required: false, type: .string)
        ]
        /// A path selector supports easy selection of an object by the parent/child links leading to it from the directory root. Use the link names from each parent/child link to construct the path. Path selectors start with a slash (/) and link names are separated by slashes. For more information about paths, see Access Objects. You can identify an object in one of the following ways:    $ObjectIdentifier - An object identifier is an opaque string provided by Amazon Cloud Directory. When creating objects, the system will provide you with the identifier of the created object. An object’s identifier is immutable and no two objects will ever share the same object identifier    /some/path - Identifies the object based on path    #SomeBatchReference - Identifies the object in a batch call  
        public let selector: String?

        public init(selector: String? = nil) {
            self.selector = selector
        }

        private enum CodingKeys: String, CodingKey {
            case selector = "Selector"
        }
    }

    public struct AttachObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LinkName", required: true, type: .string), 
            AWSShapeMember(label: "ParentReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ChildReference", required: true, type: .structure)
        ]
        /// The link name with which the child object is attached to the parent.
        public let linkName: String
        /// The parent object reference.
        public let parentReference: ObjectReference
        /// Amazon Resource Name (ARN) that is associated with the Directory where both objects reside. For more information, see arns.
        public let directoryArn: String
        /// The child object reference to be attached to the object.
        public let childReference: ObjectReference

        public init(childReference: ObjectReference, directoryArn: String, linkName: String, parentReference: ObjectReference) {
            self.linkName = linkName
            self.parentReference = parentReference
            self.directoryArn = directoryArn
            self.childReference = childReference
        }

        private enum CodingKeys: String, CodingKey {
            case linkName = "LinkName"
            case parentReference = "ParentReference"
            case directoryArn = "x-amz-data-partition"
            case childReference = "ChildReference"
        }
    }

    public struct ListManagedSchemaArnsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "SchemaArn", required: false, type: .string)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The response for ListManagedSchemaArns. When this parameter is used, all minor version ARNs for a major version are listed.
        public let schemaArn: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, schemaArn: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case schemaArn = "SchemaArn"
        }
    }

    public struct BatchAttachToIndex: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetReference", required: true, type: .structure), 
            AWSShapeMember(label: "IndexReference", required: true, type: .structure)
        ]
        /// A reference to the object that you are attaching to the index.
        public let targetReference: ObjectReference
        /// A reference to the index that you are attaching the object to.
        public let indexReference: ObjectReference

        public init(indexReference: ObjectReference, targetReference: ObjectReference) {
            self.targetReference = targetReference
            self.indexReference = indexReference
        }

        private enum CodingKeys: String, CodingKey {
            case targetReference = "TargetReference"
            case indexReference = "IndexReference"
        }
    }

    public struct CreateObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaFacets", required: true, type: .list), 
            AWSShapeMember(label: "ParentReference", required: false, type: .structure), 
            AWSShapeMember(label: "ObjectAttributeList", required: false, type: .list), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "LinkName", required: false, type: .string)
        ]
        /// A list of schema facets to be associated with the object. Do not provide minor version components. See SchemaFacet for details.
        public let schemaFacets: [SchemaFacet]
        /// If specified, the parent reference to which this object will be attached.
        public let parentReference: ObjectReference?
        /// The attribute map whose attribute ARN contains the key and attribute value as the map value.
        public let objectAttributeList: [AttributeKeyAndValue]?
        /// The Amazon Resource Name (ARN) that is associated with the Directory in which the object will be created. For more information, see arns.
        public let directoryArn: String
        /// The name of link that is used to attach this object to a parent.
        public let linkName: String?

        public init(directoryArn: String, linkName: String? = nil, objectAttributeList: [AttributeKeyAndValue]? = nil, parentReference: ObjectReference? = nil, schemaFacets: [SchemaFacet]) {
            self.schemaFacets = schemaFacets
            self.parentReference = parentReference
            self.objectAttributeList = objectAttributeList
            self.directoryArn = directoryArn
            self.linkName = linkName
        }

        private enum CodingKeys: String, CodingKey {
            case schemaFacets = "SchemaFacets"
            case parentReference = "ParentReference"
            case objectAttributeList = "ObjectAttributeList"
            case directoryArn = "x-amz-data-partition"
            case linkName = "LinkName"
        }
    }

    public struct BatchListObjectParentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParentLinks", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let parentLinks: [ObjectIdentifierAndLinkNameTuple]?
        public let nextToken: String?

        public init(nextToken: String? = nil, parentLinks: [ObjectIdentifierAndLinkNameTuple]? = nil) {
            self.parentLinks = parentLinks
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case parentLinks = "ParentLinks"
            case nextToken = "NextToken"
        }
    }

    public struct BatchGetLinkAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The attributes that are associated with the typed link.
        public let attributes: [AttributeKeyAndValue]?

        public init(attributes: [AttributeKeyAndValue]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct ObjectAttributeRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeKey", required: false, type: .structure), 
            AWSShapeMember(label: "Range", required: false, type: .structure)
        ]
        /// The key of the attribute that the attribute range covers.
        public let attributeKey: AttributeKey?
        /// The range of attribute values being selected.
        public let range: TypedAttributeValueRange?

        public init(attributeKey: AttributeKey? = nil, range: TypedAttributeValueRange? = nil) {
            self.attributeKey = attributeKey
            self.range = range
        }

        private enum CodingKeys: String, CodingKey {
            case attributeKey = "AttributeKey"
            case range = "Range"
        }
    }

    public struct GetLinkAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The attributes that are associated with the typed link.
        public let attributes: [AttributeKeyAndValue]?

        public init(attributes: [AttributeKeyAndValue]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct BatchAttachObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParentReference", required: true, type: .structure), 
            AWSShapeMember(label: "ChildReference", required: true, type: .structure), 
            AWSShapeMember(label: "LinkName", required: true, type: .string)
        ]
        /// The parent object reference.
        public let parentReference: ObjectReference
        /// The child object reference that is to be attached to the object.
        public let childReference: ObjectReference
        /// The name of the link.
        public let linkName: String

        public init(childReference: ObjectReference, linkName: String, parentReference: ObjectReference) {
            self.parentReference = parentReference
            self.childReference = childReference
            self.linkName = linkName
        }

        private enum CodingKeys: String, CodingKey {
            case parentReference = "ParentReference"
            case childReference = "ChildReference"
            case linkName = "LinkName"
        }
    }

    public struct GetFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The name of the facet to retrieve.
        public let name: String
        /// The Amazon Resource Name (ARN) that is associated with the Facet. For more information, see arns.
        public let schemaArn: String

        public init(name: String, schemaArn: String) {
            self.name = name
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case schemaArn = "x-amz-data-partition"
        }
    }

    public struct ObjectIdentifierAndLinkNameTuple: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LinkName", required: false, type: .string), 
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The name of the link between the parent and the child object.
        public let linkName: String?
        /// The ID that is associated with the object.
        public let objectIdentifier: String?

        public init(linkName: String? = nil, objectIdentifier: String? = nil) {
            self.linkName = linkName
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case linkName = "LinkName"
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct BatchUpdateLinkAttributesResponse: AWSShape {

        public init() {
        }

    }

    public struct CreateSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String?

        public init(schemaArn: String? = nil) {
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
        }
    }

    public struct GetLinkAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifier", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "AttributeNames", required: true, type: .list), 
            AWSShapeMember(label: "ConsistencyLevel", required: false, type: .enum)
        ]
        /// Allows a typed link specifier to be accepted as input.
        public let typedLinkSpecifier: TypedLinkSpecifier
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the typed link resides. For more information, see arns or Typed Links.
        public let directoryArn: String
        /// A list of attribute names whose values will be retrieved.
        public let attributeNames: [String]
        /// The consistency level at which to retrieve the attributes on a typed link.
        public let consistencyLevel: ConsistencyLevel?

        public init(attributeNames: [String], consistencyLevel: ConsistencyLevel? = nil, directoryArn: String, typedLinkSpecifier: TypedLinkSpecifier) {
            self.typedLinkSpecifier = typedLinkSpecifier
            self.directoryArn = directoryArn
            self.attributeNames = attributeNames
            self.consistencyLevel = consistencyLevel
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifier = "TypedLinkSpecifier"
            case directoryArn = "x-amz-data-partition"
            case attributeNames = "AttributeNames"
            case consistencyLevel = "ConsistencyLevel"
        }
    }

    public struct ListObjectChildrenResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Children", required: false, type: .map)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Children structure, which is a map with key as the LinkName and ObjectIdentifier as the value.
        public let children: [String: String]?

        public init(children: [String: String]? = nil, nextToken: String? = nil) {
            self.nextToken = nextToken
            self.children = children
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case children = "Children"
        }
    }

    public struct TypedLinkAttributeDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "IsImmutable", required: false, type: .boolean), 
            AWSShapeMember(label: "RequiredBehavior", required: true, type: .enum), 
            AWSShapeMember(label: "Rules", required: false, type: .map), 
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "DefaultValue", required: false, type: .structure)
        ]
        /// The unique name of the typed link attribute.
        public let name: String
        /// Whether the attribute is mutable or not.
        public let isImmutable: Bool?
        /// The required behavior of the TypedLinkAttributeDefinition.
        public let requiredBehavior: RequiredAttributeBehavior
        /// Validation rules that are attached to the attribute definition.
        public let rules: [String: Rule]?
        /// The type of the attribute.
        public let `type`: FacetAttributeType
        /// The default value of the attribute (if configured).
        public let defaultValue: TypedAttributeValue?

        public init(defaultValue: TypedAttributeValue? = nil, isImmutable: Bool? = nil, name: String, requiredBehavior: RequiredAttributeBehavior, rules: [String: Rule]? = nil, type: FacetAttributeType) {
            self.name = name
            self.isImmutable = isImmutable
            self.requiredBehavior = requiredBehavior
            self.rules = rules
            self.`type` = `type`
            self.defaultValue = defaultValue
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case isImmutable = "IsImmutable"
            case requiredBehavior = "RequiredBehavior"
            case rules = "Rules"
            case `type` = "Type"
            case defaultValue = "DefaultValue"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ResourceArn", required: true, type: .string)
        ]
        /// The pagination token. This is for future use. Currently pagination is not supported for tagging.
        public let nextToken: String?
        /// The MaxResults parameter sets the maximum number of results returned in a single page. This is for future use and is not supported currently.
        public let maxResults: Int32?
        /// The Amazon Resource Name (ARN) of the resource. Tagging is only supported for directories.
        public let resourceArn: String

        public init(maxResults: Int32? = nil, nextToken: String? = nil, resourceArn: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case resourceArn = "ResourceArn"
        }
    }

    public struct UpgradeAppliedSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", required: false, type: .string), 
            AWSShapeMember(label: "UpgradedSchemaArn", required: false, type: .string)
        ]
        /// The ARN of the directory that is returned as part of the response.
        public let directoryArn: String?
        /// The ARN of the upgraded schema that is returned as part of the response.
        public let upgradedSchemaArn: String?

        public init(directoryArn: String? = nil, upgradedSchemaArn: String? = nil) {
            self.directoryArn = directoryArn
            self.upgradedSchemaArn = upgradedSchemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "DirectoryArn"
            case upgradedSchemaArn = "UpgradedSchemaArn"
        }
    }

    public struct ListObjectParentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Parents", required: false, type: .map), 
            AWSShapeMember(label: "ParentLinks", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The parent structure, which is a map with key as the ObjectIdentifier and LinkName as the value.
        public let parents: [String: String]?
        /// Returns a list of parent reference and LinkName Tuples.
        public let parentLinks: [ObjectIdentifierAndLinkNameTuple]?

        public init(nextToken: String? = nil, parentLinks: [ObjectIdentifierAndLinkNameTuple]? = nil, parents: [String: String]? = nil) {
            self.nextToken = nextToken
            self.parents = parents
            self.parentLinks = parentLinks
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case parents = "Parents"
            case parentLinks = "ParentLinks"
        }
    }

    public struct BatchGetObjectInformation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// A reference to the object.
        public let objectReference: ObjectReference

        public init(objectReference: ObjectReference) {
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
        }
    }

    public enum RangeMode: String, CustomStringConvertible, Codable {
        case first = "FIRST"
        case last = "LAST"
        case lastBeforeMissingValues = "LAST_BEFORE_MISSING_VALUES"
        case inclusive = "INCLUSIVE"
        case exclusive = "EXCLUSIVE"
        public var description: String { return self.rawValue }
    }

    public struct CreateObjectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The identifier that is associated with the object.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct GetObjectInformationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaFacets", required: false, type: .list), 
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The facets attached to the specified object. Although the response does not include minor version information, the most recently applied minor version of each Facet is in effect. See GetAppliedSchemaVersion for details.
        public let schemaFacets: [SchemaFacet]?
        /// The ObjectIdentifier of the specified object.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil, schemaFacets: [SchemaFacet]? = nil) {
            self.schemaFacets = schemaFacets
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case schemaFacets = "SchemaFacets"
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct AttachTypedLinkResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifier", required: false, type: .structure)
        ]
        /// Returns a typed link specifier as output.
        public let typedLinkSpecifier: TypedLinkSpecifier?

        public init(typedLinkSpecifier: TypedLinkSpecifier? = nil) {
            self.typedLinkSpecifier = typedLinkSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifier = "TypedLinkSpecifier"
        }
    }

    public struct AttributeKey: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FacetName", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "SchemaArn", required: true, type: .string)
        ]
        /// The name of the facet that the attribute exists within.
        public let facetName: String
        /// The name of the attribute.
        public let name: String
        /// The Amazon Resource Name (ARN) of the schema that contains the facet and attribute.
        public let schemaArn: String

        public init(facetName: String, name: String, schemaArn: String) {
            self.facetName = facetName
            self.name = name
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case facetName = "FacetName"
            case name = "Name"
            case schemaArn = "SchemaArn"
        }
    }

    public struct IndexAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "IndexedAttributes", required: false, type: .list)
        ]
        /// In response to ListIndex, the ObjectIdentifier of the object attached to the index. In response to ListAttachedIndices, the ObjectIdentifier of the index attached to the object. This field will always contain the ObjectIdentifier of the object on the opposite side of the attachment specified in the query.
        public let objectIdentifier: String?
        /// The indexed attribute values.
        public let indexedAttributes: [AttributeKeyAndValue]?

        public init(indexedAttributes: [AttributeKeyAndValue]? = nil, objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
            self.indexedAttributes = indexedAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
            case indexedAttributes = "IndexedAttributes"
        }
    }

    public struct BatchRemoveFacetFromObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .structure)
        ]
        /// A reference to the object whose facet will be removed.
        public let objectReference: ObjectReference
        /// The facet to remove from the object.
        public let schemaFacet: SchemaFacet

        public init(objectReference: ObjectReference, schemaFacet: SchemaFacet) {
            self.objectReference = objectReference
            self.schemaFacet = schemaFacet
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case schemaFacet = "SchemaFacet"
        }
    }

    public struct UpdateObjectAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the updated object.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct BatchUpdateObjectAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "AttributeUpdates", required: true, type: .list)
        ]
        /// Reference that identifies the object.
        public let objectReference: ObjectReference
        /// Attributes update structure.
        public let attributeUpdates: [ObjectAttributeUpdate]

        public init(attributeUpdates: [ObjectAttributeUpdate], objectReference: ObjectReference) {
            self.objectReference = objectReference
            self.attributeUpdates = attributeUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case attributeUpdates = "AttributeUpdates"
        }
    }

    public struct BatchRemoveFacetFromObjectResponse: AWSShape {

        public init() {
        }

    }

    public struct BatchDetachFromIndex: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetReference", required: true, type: .structure), 
            AWSShapeMember(label: "IndexReference", required: true, type: .structure)
        ]
        /// A reference to the object being detached from the index.
        public let targetReference: ObjectReference
        /// A reference to the index object.
        public let indexReference: ObjectReference

        public init(indexReference: ObjectReference, targetReference: ObjectReference) {
            self.targetReference = targetReference
            self.indexReference = indexReference
        }

        private enum CodingKeys: String, CodingKey {
            case targetReference = "TargetReference"
            case indexReference = "IndexReference"
        }
    }

    public struct PolicyToPath: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Path", required: false, type: .string), 
            AWSShapeMember(label: "Policies", required: false, type: .list)
        ]
        /// The path that is referenced from the root.
        public let path: String?
        /// List of policy objects.
        public let policies: [PolicyAttachment]?

        public init(path: String? = nil, policies: [PolicyAttachment]? = nil) {
            self.path = path
            self.policies = policies
        }

        private enum CodingKeys: String, CodingKey {
            case path = "Path"
            case policies = "Policies"
        }
    }

    public struct ListTypedLinkFacetAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The unique name of the typed link facet.
        public let name: String
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String
        /// The pagination token.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, name: String, nextToken: String? = nil, schemaArn: String) {
            self.name = name
            self.maxResults = maxResults
            self.schemaArn = schemaArn
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case maxResults = "MaxResults"
            case schemaArn = "x-amz-data-partition"
            case nextToken = "NextToken"
        }
    }

    public struct AttachPolicyResponse: AWSShape {

        public init() {
        }

    }

    public struct AttachToIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the object that was attached to the index.
        public let attachedObjectIdentifier: String?

        public init(attachedObjectIdentifier: String? = nil) {
            self.attachedObjectIdentifier = attachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case attachedObjectIdentifier = "AttachedObjectIdentifier"
        }
    }

    public struct Rule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Parameters", required: false, type: .map)
        ]
        /// The type of attribute validation rule.
        public let `type`: RuleType?
        /// The minimum and maximum parameters that are associated with the rule.
        public let parameters: [String: String]?

        public init(parameters: [String: String]? = nil, type: RuleType? = nil) {
            self.`type` = `type`
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case parameters = "Parameters"
        }
    }

    public struct CreateFacetResponse: AWSShape {

        public init() {
        }

    }

    public enum RequiredAttributeBehavior: String, CustomStringConvertible, Codable {
        case requiredAlways = "REQUIRED_ALWAYS"
        case notRequired = "NOT_REQUIRED"
        public var description: String { return self.rawValue }
    }

    public struct PutSchemaFromJsonRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Document", required: true, type: .string), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The replacement JSON schema.
        public let document: String
        /// The ARN of the schema to update.
        public let schemaArn: String

        public init(document: String, schemaArn: String) {
            self.document = document
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case document = "Document"
            case schemaArn = "x-amz-data-partition"
        }
    }

    public struct ListPublishedSchemaArnsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The response for ListPublishedSchemaArns when this parameter is used will list all minor version ARNs for a major version.
        public let schemaArn: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, schemaArn: String? = nil) {
            self.nextToken = nextToken
            self.schemaArn = schemaArn
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case schemaArn = "SchemaArn"
            case maxResults = "MaxResults"
        }
    }

    public struct PublishSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinorVersion", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: true, type: .string), 
            AWSShapeMember(label: "DevelopmentSchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The minor version under which the schema will be published. This parameter is recommended. Schemas have both a major and minor version associated with them.
        public let minorVersion: String?
        /// The major version under which the schema will be published. Schemas have both a major and minor version associated with them.
        public let version: String
        /// The Amazon Resource Name (ARN) that is associated with the development schema. For more information, see arns.
        public let developmentSchemaArn: String
        /// The new name under which the schema will be published. If this is not provided, the development schema is considered.
        public let name: String?

        public init(developmentSchemaArn: String, minorVersion: String? = nil, name: String? = nil, version: String) {
            self.minorVersion = minorVersion
            self.version = version
            self.developmentSchemaArn = developmentSchemaArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case minorVersion = "MinorVersion"
            case version = "Version"
            case developmentSchemaArn = "x-amz-data-partition"
            case name = "Name"
        }
    }

    public struct GetTypedLinkFacetInformationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The unique name of the typed link facet.
        public let name: String
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String

        public init(name: String, schemaArn: String) {
            self.name = name
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case schemaArn = "x-amz-data-partition"
        }
    }

    public enum FacetStyle: String, CustomStringConvertible, Codable {
        case `static` = "STATIC"
        case dynamic = "DYNAMIC"
        public var description: String { return self.rawValue }
    }

    public struct TypedLinkSchemaAndFacetName: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: true, type: .string), 
            AWSShapeMember(label: "TypedLinkName", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String
        /// The unique name of the typed link facet.
        public let typedLinkName: String

        public init(schemaArn: String, typedLinkName: String) {
            self.schemaArn = schemaArn
            self.typedLinkName = typedLinkName
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
            case typedLinkName = "TypedLinkName"
        }
    }

    public struct ListTypedLinkFacetNamesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "FacetNames", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The names of typed link facets that exist within the schema.
        public let facetNames: [String]?

        public init(facetNames: [String]? = nil, nextToken: String? = nil) {
            self.nextToken = nextToken
            self.facetNames = facetNames
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case facetNames = "FacetNames"
        }
    }

    public struct DetachTypedLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifier", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// Used to accept a typed link specifier as input.
        public let typedLinkSpecifier: TypedLinkSpecifier
        /// The Amazon Resource Name (ARN) of the directory where you want to detach the typed link.
        public let directoryArn: String

        public init(directoryArn: String, typedLinkSpecifier: TypedLinkSpecifier) {
            self.typedLinkSpecifier = typedLinkSpecifier
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifier = "TypedLinkSpecifier"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct DetachPolicyResponse: AWSShape {

        public init() {
        }

    }

    public struct GetDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The ARN of the directory.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct CreateTypedLinkFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Facet", required: true, type: .structure), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        ///  Facet structure that is associated with the typed link facet.
        public let facet: TypedLinkFacet
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String

        public init(facet: TypedLinkFacet, schemaArn: String) {
            self.facet = facet
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case facet = "Facet"
            case schemaArn = "x-amz-data-partition"
        }
    }

    public struct ListObjectPoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AttachedPolicyIds", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// A list of policy ObjectIdentifiers, that are attached to the object.
        public let attachedPolicyIds: [String]?

        public init(attachedPolicyIds: [String]? = nil, nextToken: String? = nil) {
            self.nextToken = nextToken
            self.attachedPolicyIds = attachedPolicyIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case attachedPolicyIds = "AttachedPolicyIds"
        }
    }

    public struct BatchDetachObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BatchReferenceName", required: false, type: .string), 
            AWSShapeMember(label: "LinkName", required: true, type: .string), 
            AWSShapeMember(label: "ParentReference", required: true, type: .structure)
        ]
        /// The batch reference name. See Transaction Support for more information.
        public let batchReferenceName: String?
        /// The name of the link.
        public let linkName: String
        /// Parent reference from which the object with the specified link name is detached.
        public let parentReference: ObjectReference

        public init(batchReferenceName: String? = nil, linkName: String, parentReference: ObjectReference) {
            self.batchReferenceName = batchReferenceName
            self.linkName = linkName
            self.parentReference = parentReference
        }

        private enum CodingKeys: String, CodingKey {
            case batchReferenceName = "BatchReferenceName"
            case linkName = "LinkName"
            case parentReference = "ParentReference"
        }
    }

    public struct BatchListObjectChildren: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Reference of the object for which child objects are being listed.
        public let objectReference: ObjectReference
        /// Maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.objectReference = objectReference
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct BatchListIndex: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IndexReference", required: true, type: .structure), 
            AWSShapeMember(label: "RangesOnIndexedValues", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The reference to the index to list.
        public let indexReference: ObjectReference
        /// Specifies the ranges of indexed values that you want to query.
        public let rangesOnIndexedValues: [ObjectAttributeRange]?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?

        public init(indexReference: ObjectReference, maxResults: Int32? = nil, nextToken: String? = nil, rangesOnIndexedValues: [ObjectAttributeRange]? = nil) {
            self.indexReference = indexReference
            self.rangesOnIndexedValues = rangesOnIndexedValues
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case indexReference = "IndexReference"
            case rangesOnIndexedValues = "RangesOnIndexedValues"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct CreateDirectoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", required: true, type: .string), 
            AWSShapeMember(label: "AppliedSchemaArn", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ObjectIdentifier", required: true, type: .string)
        ]
        /// The ARN that is associated with the Directory. For more information, see arns.
        public let directoryArn: String
        /// The ARN of the published schema in the Directory. Once a published schema is copied into the directory, it has its own ARN, which is referred to applied schema ARN. For more information, see arns.
        public let appliedSchemaArn: String
        /// The name of the Directory.
        public let name: String
        /// The root object node of the created directory.
        public let objectIdentifier: String

        public init(appliedSchemaArn: String, directoryArn: String, name: String, objectIdentifier: String) {
            self.directoryArn = directoryArn
            self.appliedSchemaArn = appliedSchemaArn
            self.name = name
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "DirectoryArn"
            case appliedSchemaArn = "AppliedSchemaArn"
            case name = "Name"
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct BatchAddFacetToObjectResponse: AWSShape {

        public init() {
        }

    }

    public struct DeleteTypedLinkFacetResponse: AWSShape {

        public init() {
        }

    }

    public struct BatchWriteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Operations", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Directory. For more information, see arns.
        public let directoryArn: String
        /// A list of operations that are part of the batch.
        public let operations: [BatchWriteOperation]

        public init(directoryArn: String, operations: [BatchWriteOperation]) {
            self.directoryArn = directoryArn
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case operations = "Operations"
        }
    }

    public struct UpdateLinkAttributesResponse: AWSShape {

        public init() {
        }

    }

    public struct ListObjectPoliciesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Directory where objects reside. For more information, see arns.
        public let directoryArn: String
        /// Reference that identifies the object for which policies will be listed.
        public let objectReference: ObjectReference
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        public let consistencyLevel: ConsistencyLevel?

        public init(consistencyLevel: ConsistencyLevel? = nil, directoryArn: String, maxResults: Int32? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.directoryArn = directoryArn
            self.objectReference = objectReference
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.consistencyLevel = consistencyLevel
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case objectReference = "ObjectReference"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case consistencyLevel = "x-amz-consistency-level"
        }
    }

    public struct ListAttachedIndicesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IndexAttachments", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The indices attached to the specified object.
        public let indexAttachments: [IndexAttachment]?
        /// The pagination token.
        public let nextToken: String?

        public init(indexAttachments: [IndexAttachment]? = nil, nextToken: String? = nil) {
            self.indexAttachments = indexAttachments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case indexAttachments = "IndexAttachments"
            case nextToken = "NextToken"
        }
    }

    public struct DetachFromIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the object that was detached from the index.
        public let detachedObjectIdentifier: String?

        public init(detachedObjectIdentifier: String? = nil) {
            self.detachedObjectIdentifier = detachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case detachedObjectIdentifier = "DetachedObjectIdentifier"
        }
    }

    public struct BatchGetObjectAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "AttributeNames", required: true, type: .list), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .structure)
        ]
        /// Reference that identifies the object whose attributes will be retrieved.
        public let objectReference: ObjectReference
        /// List of attribute names whose values will be retrieved.
        public let attributeNames: [String]
        /// Identifier for the facet whose attributes will be retrieved. See SchemaFacet for details.
        public let schemaFacet: SchemaFacet

        public init(attributeNames: [String], objectReference: ObjectReference, schemaFacet: SchemaFacet) {
            self.objectReference = objectReference
            self.attributeNames = attributeNames
            self.schemaFacet = schemaFacet
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case attributeNames = "AttributeNames"
            case schemaFacet = "SchemaFacet"
        }
    }

    public struct GetObjectAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The attributes that are associated with the object.
        public let attributes: [AttributeKeyAndValue]?

        public init(attributes: [AttributeKeyAndValue]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct ListFacetAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The attributes attached to the facet.
        public let attributes: [FacetAttribute]?

        public init(attributes: [FacetAttribute]? = nil, nextToken: String? = nil) {
            self.nextToken = nextToken
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case attributes = "Attributes"
        }
    }

    public struct GetFacetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Facet", required: false, type: .structure)
        ]
        /// The Facet structure that is associated with the facet.
        public let facet: Facet?

        public init(facet: Facet? = nil) {
            self.facet = facet
        }

        private enum CodingKeys: String, CodingKey {
            case facet = "Facet"
        }
    }

    public struct CreateDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the published schema that will be copied into the data Directory. For more information, see arns.
        public let schemaArn: String
        /// The name of the Directory. Should be unique per account, per region.
        public let name: String

        public init(name: String, schemaArn: String) {
            self.schemaArn = schemaArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
        }
    }

    public struct BatchGetObjectAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The attribute values that are associated with an object.
        public let attributes: [AttributeKeyAndValue]?

        public init(attributes: [AttributeKeyAndValue]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct GetDirectoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Directory", required: true, type: .structure)
        ]
        /// Metadata about the directory.
        public let directory: Directory

        public init(directory: Directory) {
            self.directory = directory
        }

        private enum CodingKeys: String, CodingKey {
            case directory = "Directory"
        }
    }

    public struct GetAppliedSchemaVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: true, type: .string)
        ]
        /// The ARN of the applied schema.
        public let schemaArn: String

        public init(schemaArn: String) {
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
        }
    }

    public struct CreateIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the index created by this operation.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct AttachToIndexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IndexReference", required: true, type: .structure), 
            AWSShapeMember(label: "TargetReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// A reference to the index that you are attaching the object to.
        public let indexReference: ObjectReference
        /// A reference to the object that you are attaching to the index.
        public let targetReference: ObjectReference
        /// The Amazon Resource Name (ARN) of the directory where the object and index exist.
        public let directoryArn: String

        public init(directoryArn: String, indexReference: ObjectReference, targetReference: ObjectReference) {
            self.indexReference = indexReference
            self.targetReference = targetReference
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case indexReference = "IndexReference"
            case targetReference = "TargetReference"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct UpgradeAppliedSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "DirectoryArn", required: true, type: .string), 
            AWSShapeMember(label: "PublishedSchemaArn", required: true, type: .string)
        ]
        /// Used for testing whether the major version schemas are backward compatible or not. If schema compatibility fails, an exception would be thrown else the call would succeed but no changes will be saved. This parameter is optional.
        public let dryRun: Bool?
        /// The ARN for the directory to which the upgraded schema will be applied.
        public let directoryArn: String
        /// The revision of the published schema to upgrade the directory to.
        public let publishedSchemaArn: String

        public init(directoryArn: String, dryRun: Bool? = nil, publishedSchemaArn: String) {
            self.dryRun = dryRun
            self.directoryArn = directoryArn
            self.publishedSchemaArn = publishedSchemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case directoryArn = "DirectoryArn"
            case publishedSchemaArn = "PublishedSchemaArn"
        }
    }

    public struct BatchListObjectParentPaths: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.nextToken = nextToken
            self.objectReference = objectReference
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case objectReference = "ObjectReference"
            case maxResults = "MaxResults"
        }
    }

    public struct ListIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IndexAttachments", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The objects and indexed values attached to the index.
        public let indexAttachments: [IndexAttachment]?
        /// The pagination token.
        public let nextToken: String?

        public init(indexAttachments: [IndexAttachment]? = nil, nextToken: String? = nil) {
            self.indexAttachments = indexAttachments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case indexAttachments = "IndexAttachments"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides. For more information, see arns.
        public let directoryArn: String
        /// A reference that identifies the object.
        public let objectReference: ObjectReference

        public init(directoryArn: String, objectReference: ObjectReference) {
            self.directoryArn = directoryArn
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case objectReference = "ObjectReference"
        }
    }

    public enum FacetAttributeType: String, CustomStringConvertible, Codable {
        case string = "STRING"
        case binary = "BINARY"
        case boolean = "BOOLEAN"
        case number = "NUMBER"
        case datetime = "DATETIME"
        case variant = "VARIANT"
        public var description: String { return self.rawValue }
    }

    public struct BatchAttachTypedLink: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "TypedLinkFacet", required: true, type: .structure), 
            AWSShapeMember(label: "Attributes", required: true, type: .list), 
            AWSShapeMember(label: "SourceObjectReference", required: true, type: .structure)
        ]
        /// Identifies the target object that the typed link will attach to.
        public let targetObjectReference: ObjectReference
        /// Identifies the typed link facet that is associated with the typed link.
        public let typedLinkFacet: TypedLinkSchemaAndFacetName
        /// A set of attributes that are associated with the typed link.
        public let attributes: [AttributeNameAndValue]
        /// Identifies the source object that the typed link will attach to.
        public let sourceObjectReference: ObjectReference

        public init(attributes: [AttributeNameAndValue], sourceObjectReference: ObjectReference, targetObjectReference: ObjectReference, typedLinkFacet: TypedLinkSchemaAndFacetName) {
            self.targetObjectReference = targetObjectReference
            self.typedLinkFacet = typedLinkFacet
            self.attributes = attributes
            self.sourceObjectReference = sourceObjectReference
        }

        private enum CodingKeys: String, CodingKey {
            case targetObjectReference = "TargetObjectReference"
            case typedLinkFacet = "TypedLinkFacet"
            case attributes = "Attributes"
            case sourceObjectReference = "SourceObjectReference"
        }
    }

    public struct TypedLinkFacet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "IdentityAttributeOrder", required: true, type: .list), 
            AWSShapeMember(label: "Attributes", required: true, type: .list)
        ]
        /// The unique name of the typed link facet.
        public let name: String
        /// The set of attributes that distinguish links made from this facet from each other, in the order of significance. Listing typed links can filter on the values of these attributes. See ListOutgoingTypedLinks and ListIncomingTypedLinks for details.
        public let identityAttributeOrder: [String]
        /// A set of key-value pairs associated with the typed link. Typed link attributes are used when you have data values that are related to the link itself, and not to one of the two objects being linked. Identity attributes also serve to distinguish the link from others of the same type between the same objects.
        public let attributes: [TypedLinkAttributeDefinition]

        public init(attributes: [TypedLinkAttributeDefinition], identityAttributeOrder: [String], name: String) {
            self.name = name
            self.identityAttributeOrder = identityAttributeOrder
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case identityAttributeOrder = "IdentityAttributeOrder"
            case attributes = "Attributes"
        }
    }

    public struct BatchListPolicyAttachments: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PolicyReference", required: true, type: .structure)
        ]
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?
        /// The reference that identifies the policy object.
        public let policyReference: ObjectReference

        public init(maxResults: Int32? = nil, nextToken: String? = nil, policyReference: ObjectReference) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.policyReference = policyReference
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case policyReference = "PolicyReference"
        }
    }

    public struct DisableDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The ARN of the directory to disable.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct BatchDeleteObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The reference that identifies the object.
        public let objectReference: ObjectReference

        public init(objectReference: ObjectReference) {
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
        }
    }

    public struct AttachTypedLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "TypedLinkFacet", required: true, type: .structure), 
            AWSShapeMember(label: "SourceObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Attributes", required: true, type: .list)
        ]
        /// Identifies the target object that the typed link will attach to.
        public let targetObjectReference: ObjectReference
        /// Identifies the typed link facet that is associated with the typed link.
        public let typedLinkFacet: TypedLinkSchemaAndFacetName
        /// Identifies the source object that the typed link will attach to.
        public let sourceObjectReference: ObjectReference
        /// The Amazon Resource Name (ARN) of the directory where you want to attach the typed link.
        public let directoryArn: String
        /// A set of attributes that are associated with the typed link.
        public let attributes: [AttributeNameAndValue]

        public init(attributes: [AttributeNameAndValue], directoryArn: String, sourceObjectReference: ObjectReference, targetObjectReference: ObjectReference, typedLinkFacet: TypedLinkSchemaAndFacetName) {
            self.targetObjectReference = targetObjectReference
            self.typedLinkFacet = typedLinkFacet
            self.sourceObjectReference = sourceObjectReference
            self.directoryArn = directoryArn
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case targetObjectReference = "TargetObjectReference"
            case typedLinkFacet = "TypedLinkFacet"
            case sourceObjectReference = "SourceObjectReference"
            case directoryArn = "x-amz-data-partition"
            case attributes = "Attributes"
        }
    }

    public struct BatchLookupPolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PolicyToPathList", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Provides list of path to policies. Policies contain PolicyId, ObjectIdentifier, and PolicyType. For more information, see Policies.
        public let policyToPathList: [PolicyToPath]?

        public init(nextToken: String? = nil, policyToPathList: [PolicyToPath]? = nil) {
            self.nextToken = nextToken
            self.policyToPathList = policyToPathList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case policyToPathList = "PolicyToPathList"
        }
    }

    public struct UntagResourceResponse: AWSShape {

        public init() {
        }

    }

    public struct BatchCreateIndex: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrderedIndexedAttributeList", required: true, type: .list), 
            AWSShapeMember(label: "ParentReference", required: false, type: .structure), 
            AWSShapeMember(label: "LinkName", required: false, type: .string), 
            AWSShapeMember(label: "BatchReferenceName", required: false, type: .string), 
            AWSShapeMember(label: "IsUnique", required: true, type: .boolean)
        ]
        /// Specifies the attributes that should be indexed on. Currently only a single attribute is supported.
        public let orderedIndexedAttributeList: [AttributeKey]
        /// A reference to the parent object that contains the index object.
        public let parentReference: ObjectReference?
        /// The name of the link between the parent object and the index object.
        public let linkName: String?
        /// The batch reference name. See Transaction Support for more information.
        public let batchReferenceName: String?
        /// Indicates whether the attribute that is being indexed has unique values or not.
        public let isUnique: Bool

        public init(batchReferenceName: String? = nil, isUnique: Bool, linkName: String? = nil, orderedIndexedAttributeList: [AttributeKey], parentReference: ObjectReference? = nil) {
            self.orderedIndexedAttributeList = orderedIndexedAttributeList
            self.parentReference = parentReference
            self.linkName = linkName
            self.batchReferenceName = batchReferenceName
            self.isUnique = isUnique
        }

        private enum CodingKeys: String, CodingKey {
            case orderedIndexedAttributeList = "OrderedIndexedAttributeList"
            case parentReference = "ParentReference"
            case linkName = "LinkName"
            case batchReferenceName = "BatchReferenceName"
            case isUnique = "IsUnique"
        }
    }

    public struct ListDirectoriesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "state", required: false, type: .enum)
        ]
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?
        /// The state of the directories in the list. Can be either Enabled, Disabled, or Deleted.
        public let state: DirectoryState?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, state: DirectoryState? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case state = "state"
        }
    }

    public struct BatchListIncomingTypedLinks: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FilterAttributeRanges", required: false, type: .list), 
            AWSShapeMember(label: "FilterTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
        public let filterAttributeRanges: [TypedLinkAttributeRange]?
        /// Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls.
        public let filterTypedLink: TypedLinkSchemaAndFacetName?
        /// The reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(filterAttributeRanges: [TypedLinkAttributeRange]? = nil, filterTypedLink: TypedLinkSchemaAndFacetName? = nil, maxResults: Int32? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.filterAttributeRanges = filterAttributeRanges
            self.filterTypedLink = filterTypedLink
            self.objectReference = objectReference
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filterAttributeRanges = "FilterAttributeRanges"
            case filterTypedLink = "FilterTypedLink"
            case objectReference = "ObjectReference"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct BatchListIncomingTypedLinksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LinkSpecifiers", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Returns one or more typed link specifiers as output.
        public let linkSpecifiers: [TypedLinkSpecifier]?
        /// The pagination token.
        public let nextToken: String?

        public init(linkSpecifiers: [TypedLinkSpecifier]? = nil, nextToken: String? = nil) {
            self.linkSpecifiers = linkSpecifiers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case linkSpecifiers = "LinkSpecifiers"
            case nextToken = "NextToken"
        }
    }

    public struct PutSchemaFromJsonResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        /// The ARN of the schema to update.
        public let arn: String?

        public init(arn: String? = nil) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
        }
    }

    public struct AttributeKeyAndValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .structure), 
            AWSShapeMember(label: "Value", required: true, type: .structure)
        ]
        /// The key of the attribute.
        public let key: AttributeKey
        /// The value of the attribute.
        public let value: TypedAttributeValue

        public init(key: AttributeKey, value: TypedAttributeValue) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct BatchListObjectAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The attributes map that is associated with the object. AttributeArn is the key; attribute value is the value.
        public let attributes: [AttributeKeyAndValue]?

        public init(attributes: [AttributeKeyAndValue]? = nil, nextToken: String? = nil) {
            self.nextToken = nextToken
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case attributes = "Attributes"
        }
    }

    public struct ApplySchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublishedSchemaArn", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// Published schema Amazon Resource Name (ARN) that needs to be copied. For more information, see arns.
        public let publishedSchemaArn: String
        /// The Amazon Resource Name (ARN) that is associated with the Directory into which the schema is copied. For more information, see arns.
        public let directoryArn: String

        public init(directoryArn: String, publishedSchemaArn: String) {
            self.publishedSchemaArn = publishedSchemaArn
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case publishedSchemaArn = "PublishedSchemaArn"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct ListDirectoriesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Directories", required: true, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Lists all directories that are associated with your account in pagination fashion.
        public let directories: [Directory]

        public init(directories: [Directory], nextToken: String? = nil) {
            self.nextToken = nextToken
            self.directories = directories
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case directories = "Directories"
        }
    }

    public struct GetObjectInformationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum)
        ]
        /// The ARN of the directory being retrieved.
        public let directoryArn: String
        /// A reference to the object.
        public let objectReference: ObjectReference
        /// The consistency level at which to retrieve the object information.
        public let consistencyLevel: ConsistencyLevel?

        public init(consistencyLevel: ConsistencyLevel? = nil, directoryArn: String, objectReference: ObjectReference) {
            self.directoryArn = directoryArn
            self.objectReference = objectReference
            self.consistencyLevel = consistencyLevel
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case objectReference = "ObjectReference"
            case consistencyLevel = "x-amz-consistency-level"
        }
    }

    public struct AttributeNameAndValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .structure)
        ]
        /// The attribute name of the typed link.
        public let attributeName: String
        /// The value for the typed link.
        public let value: TypedAttributeValue

        public init(attributeName: String, value: TypedAttributeValue) {
            self.attributeName = attributeName
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case value = "Value"
        }
    }

    public struct ListManagedSchemaArnsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArns", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The ARNs for all AWS managed schemas.
        public let schemaArns: [String]?
        /// The pagination token.
        public let nextToken: String?

        public init(nextToken: String? = nil, schemaArns: [String]? = nil) {
            self.schemaArns = schemaArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArns = "SchemaArns"
            case nextToken = "NextToken"
        }
    }

    public struct BatchListAttachedIndicesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "IndexAttachments", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The indices attached to the specified object.
        public let indexAttachments: [IndexAttachment]?

        public init(indexAttachments: [IndexAttachment]? = nil, nextToken: String? = nil) {
            self.nextToken = nextToken
            self.indexAttachments = indexAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case indexAttachments = "IndexAttachments"
        }
    }

    public struct ListPublishedSchemaArnsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArns", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The ARNs of published schemas.
        public let schemaArns: [String]?
        /// The pagination token.
        public let nextToken: String?

        public init(nextToken: String? = nil, schemaArns: [String]? = nil) {
            self.schemaArns = schemaArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArns = "SchemaArns"
            case nextToken = "NextToken"
        }
    }

    public struct FacetAttributeReference: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetFacetName", required: true, type: .string), 
            AWSShapeMember(label: "TargetAttributeName", required: true, type: .string)
        ]
        /// The target facet name that is associated with the facet reference. See Attribute References for more information.
        public let targetFacetName: String
        /// The target attribute name that is associated with the facet reference. See Attribute References for more information.
        public let targetAttributeName: String

        public init(targetAttributeName: String, targetFacetName: String) {
            self.targetFacetName = targetFacetName
            self.targetAttributeName = targetAttributeName
        }

        private enum CodingKeys: String, CodingKey {
            case targetFacetName = "TargetFacetName"
            case targetAttributeName = "TargetAttributeName"
        }
    }

    public struct BatchLookupPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?
        /// Reference that identifies the object whose policies will be looked up.
        public let objectReference: ObjectReference

        public init(maxResults: Int32? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case objectReference = "ObjectReference"
        }
    }

    public struct FacetAttributeUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attribute", required: false, type: .structure), 
            AWSShapeMember(label: "Action", required: false, type: .enum)
        ]
        /// The attribute to update.
        public let attribute: FacetAttribute?
        /// The action to perform when updating the attribute.
        public let action: UpdateActionType?

        public init(action: UpdateActionType? = nil, attribute: FacetAttribute? = nil) {
            self.attribute = attribute
            self.action = action
        }

        private enum CodingKeys: String, CodingKey {
            case attribute = "Attribute"
            case action = "Action"
        }
    }

    public struct ListFacetAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The name of the facet whose attributes will be retrieved.
        public let name: String
        /// The pagination token.
        public let nextToken: String?
        /// The ARN of the schema where the facet resides.
        public let schemaArn: String

        public init(maxResults: Int32? = nil, name: String, nextToken: String? = nil, schemaArn: String) {
            self.maxResults = maxResults
            self.name = name
            self.nextToken = nextToken
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case name = "Name"
            case nextToken = "NextToken"
            case schemaArn = "x-amz-data-partition"
        }
    }

    public struct FacetAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeDefinition", required: false, type: .structure), 
            AWSShapeMember(label: "RequiredBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "AttributeReference", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// A facet attribute consists of either a definition or a reference. This structure contains the attribute definition. See Attribute References for more information.
        public let attributeDefinition: FacetAttributeDefinition?
        /// The required behavior of the FacetAttribute.
        public let requiredBehavior: RequiredAttributeBehavior?
        /// An attribute reference that is associated with the attribute. See Attribute References for more information.
        public let attributeReference: FacetAttributeReference?
        /// The name of the facet attribute.
        public let name: String

        public init(attributeDefinition: FacetAttributeDefinition? = nil, attributeReference: FacetAttributeReference? = nil, name: String, requiredBehavior: RequiredAttributeBehavior? = nil) {
            self.attributeDefinition = attributeDefinition
            self.requiredBehavior = requiredBehavior
            self.attributeReference = attributeReference
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case attributeDefinition = "AttributeDefinition"
            case requiredBehavior = "RequiredBehavior"
            case attributeReference = "AttributeReference"
            case name = "Name"
        }
    }

    public struct DisableDirectoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", required: true, type: .string)
        ]
        /// The ARN of the directory that has been disabled.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "DirectoryArn"
        }
    }

    public struct ListAppliedSchemaArnsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", required: true, type: .string), 
            AWSShapeMember(label: "SchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The ARN of the directory you are listing.
        public let directoryArn: String
        /// The response for ListAppliedSchemaArns when this parameter is used will list all minor version ARNs for a major version.
        public let schemaArn: String?
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(directoryArn: String, maxResults: Int32? = nil, nextToken: String? = nil, schemaArn: String? = nil) {
            self.directoryArn = directoryArn
            self.schemaArn = schemaArn
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "DirectoryArn"
            case schemaArn = "SchemaArn"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DeleteDirectoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", required: true, type: .string)
        ]
        /// The ARN of the deleted directory.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "DirectoryArn"
        }
    }

    public struct GetTypedLinkFacetInformationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityAttributeOrder", required: false, type: .list)
        ]
        /// The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed links considers the order that the attributes are defined on the typed link facet. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range. Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls. For more information about identity attributes, see Typed Links.
        public let identityAttributeOrder: [String]?

        public init(identityAttributeOrder: [String]? = nil) {
            self.identityAttributeOrder = identityAttributeOrder
        }

        private enum CodingKeys: String, CodingKey {
            case identityAttributeOrder = "IdentityAttributeOrder"
        }
    }

    public struct BatchWriteOperationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeleteObject", required: false, type: .structure), 
            AWSShapeMember(label: "AttachTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "RemoveFacetFromObject", required: false, type: .structure), 
            AWSShapeMember(label: "UpdateLinkAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "AddFacetToObject", required: false, type: .structure), 
            AWSShapeMember(label: "AttachToIndex", required: false, type: .structure), 
            AWSShapeMember(label: "AttachObject", required: false, type: .structure), 
            AWSShapeMember(label: "UpdateObjectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "DetachFromIndex", required: false, type: .structure), 
            AWSShapeMember(label: "CreateObject", required: false, type: .structure), 
            AWSShapeMember(label: "CreateIndex", required: false, type: .structure), 
            AWSShapeMember(label: "DetachTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "AttachPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "DetachPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "DetachObject", required: false, type: .structure)
        ]
        /// Deletes an object in a Directory.
        public let deleteObject: BatchDeleteObjectResponse?
        /// Attaches a typed link to a specified source and target object. For more information, see Typed Links.
        public let attachTypedLink: BatchAttachTypedLinkResponse?
        /// The result of a batch remove facet from object operation.
        public let removeFacetFromObject: BatchRemoveFacetFromObjectResponse?
        /// Represents the output of a BatchWrite response operation.
        public let updateLinkAttributes: BatchUpdateLinkAttributesResponse?
        /// The result of an add facet to object batch operation.
        public let addFacetToObject: BatchAddFacetToObjectResponse?
        /// Attaches the specified object to the specified index.
        public let attachToIndex: BatchAttachToIndexResponse?
        /// Attaches an object to a Directory.
        public let attachObject: BatchAttachObjectResponse?
        /// Updates a given object’s attributes.
        public let updateObjectAttributes: BatchUpdateObjectAttributesResponse?
        /// Detaches the specified object from the specified index.
        public let detachFromIndex: BatchDetachFromIndexResponse?
        /// Creates an object in a Directory.
        public let createObject: BatchCreateObjectResponse?
        /// Creates an index object. See Indexing and search for more information.
        public let createIndex: BatchCreateIndexResponse?
        /// Detaches a typed link from a specified source and target object. For more information, see Typed Links.
        public let detachTypedLink: BatchDetachTypedLinkResponse?
        /// Attaches a policy object to a regular object. An object can have a limited number of attached policies.
        public let attachPolicy: BatchAttachPolicyResponse?
        /// Detaches a policy from a Directory.
        public let detachPolicy: BatchDetachPolicyResponse?
        /// Detaches an object from a Directory.
        public let detachObject: BatchDetachObjectResponse?

        public init(addFacetToObject: BatchAddFacetToObjectResponse? = nil, attachObject: BatchAttachObjectResponse? = nil, attachPolicy: BatchAttachPolicyResponse? = nil, attachToIndex: BatchAttachToIndexResponse? = nil, attachTypedLink: BatchAttachTypedLinkResponse? = nil, createIndex: BatchCreateIndexResponse? = nil, createObject: BatchCreateObjectResponse? = nil, deleteObject: BatchDeleteObjectResponse? = nil, detachFromIndex: BatchDetachFromIndexResponse? = nil, detachObject: BatchDetachObjectResponse? = nil, detachPolicy: BatchDetachPolicyResponse? = nil, detachTypedLink: BatchDetachTypedLinkResponse? = nil, removeFacetFromObject: BatchRemoveFacetFromObjectResponse? = nil, updateLinkAttributes: BatchUpdateLinkAttributesResponse? = nil, updateObjectAttributes: BatchUpdateObjectAttributesResponse? = nil) {
            self.deleteObject = deleteObject
            self.attachTypedLink = attachTypedLink
            self.removeFacetFromObject = removeFacetFromObject
            self.updateLinkAttributes = updateLinkAttributes
            self.addFacetToObject = addFacetToObject
            self.attachToIndex = attachToIndex
            self.attachObject = attachObject
            self.updateObjectAttributes = updateObjectAttributes
            self.detachFromIndex = detachFromIndex
            self.createObject = createObject
            self.createIndex = createIndex
            self.detachTypedLink = detachTypedLink
            self.attachPolicy = attachPolicy
            self.detachPolicy = detachPolicy
            self.detachObject = detachObject
        }

        private enum CodingKeys: String, CodingKey {
            case deleteObject = "DeleteObject"
            case attachTypedLink = "AttachTypedLink"
            case removeFacetFromObject = "RemoveFacetFromObject"
            case updateLinkAttributes = "UpdateLinkAttributes"
            case addFacetToObject = "AddFacetToObject"
            case attachToIndex = "AttachToIndex"
            case attachObject = "AttachObject"
            case updateObjectAttributes = "UpdateObjectAttributes"
            case detachFromIndex = "DetachFromIndex"
            case createObject = "CreateObject"
            case createIndex = "CreateIndex"
            case detachTypedLink = "DetachTypedLink"
            case attachPolicy = "AttachPolicy"
            case detachPolicy = "DetachPolicy"
            case detachObject = "DetachObject"
        }
    }

    public struct CreateSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The name that is associated with the schema. This is unique to each account and in each region.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public enum BatchWriteExceptionType: String, CustomStringConvertible, Codable {
        case internalserviceexception = "InternalServiceException"
        case validationexception = "ValidationException"
        case invalidarnexception = "InvalidArnException"
        case linknamealreadyinuseexception = "LinkNameAlreadyInUseException"
        case stillcontainslinksexception = "StillContainsLinksException"
        case facetvalidationexception = "FacetValidationException"
        case objectnotdetachedexception = "ObjectNotDetachedException"
        case resourcenotfoundexception = "ResourceNotFoundException"
        case accessdeniedexception = "AccessDeniedException"
        case invalidattachmentexception = "InvalidAttachmentException"
        case notindexexception = "NotIndexException"
        case notnodeexception = "NotNodeException"
        case indexedattributemissingexception = "IndexedAttributeMissingException"
        case objectalreadydetachedexception = "ObjectAlreadyDetachedException"
        case notpolicyexception = "NotPolicyException"
        case directorynotenabledexception = "DirectoryNotEnabledException"
        case limitexceededexception = "LimitExceededException"
        case unsupportedindextypeexception = "UnsupportedIndexTypeException"
        public var description: String { return self.rawValue }
    }

    public struct LookupPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// The token to request the next page of results.
        public let nextToken: String?
        /// Reference that identifies the object whose policies will be looked up.
        public let objectReference: ObjectReference
        /// The Amazon Resource Name (ARN) that is associated with the Directory. For more information, see arns.
        public let directoryArn: String

        public init(directoryArn: String, maxResults: Int32? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.objectReference = objectReference
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case objectReference = "ObjectReference"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct BatchWriteResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Responses", required: false, type: .list)
        ]
        /// A list of all the responses for each batch write.
        public let responses: [BatchWriteOperationResponse]?

        public init(responses: [BatchWriteOperationResponse]? = nil) {
            self.responses = responses
        }

        private enum CodingKeys: String, CodingKey {
            case responses = "Responses"
        }
    }

    public struct GetSchemaAsJsonResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Document", required: false, type: .string)
        ]
        /// The name of the retrieved schema.
        public let name: String?
        /// The JSON representation of the schema document.
        public let document: String?

        public init(document: String? = nil, name: String? = nil) {
            self.name = name
            self.document = document
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case document = "Document"
        }
    }

    public enum DirectoryState: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct TagResourceResponse: AWSShape {

        public init() {
        }

    }

    public struct ListIncomingTypedLinksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConsistencyLevel", required: false, type: .enum), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "FilterTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "FilterAttributeRanges", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The consistency level to execute the request at.
        public let consistencyLevel: ConsistencyLevel?
        /// The pagination token.
        public let nextToken: String?
        /// Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls.
        public let filterTypedLink: TypedLinkSchemaAndFacetName?
        /// The Amazon Resource Name (ARN) of the directory where you want to list the typed links.
        public let directoryArn: String
        /// Reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference
        /// Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
        public let filterAttributeRanges: [TypedLinkAttributeRange]?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(consistencyLevel: ConsistencyLevel? = nil, directoryArn: String, filterAttributeRanges: [TypedLinkAttributeRange]? = nil, filterTypedLink: TypedLinkSchemaAndFacetName? = nil, maxResults: Int32? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.consistencyLevel = consistencyLevel
            self.nextToken = nextToken
            self.filterTypedLink = filterTypedLink
            self.directoryArn = directoryArn
            self.objectReference = objectReference
            self.filterAttributeRanges = filterAttributeRanges
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case consistencyLevel = "ConsistencyLevel"
            case nextToken = "NextToken"
            case filterTypedLink = "FilterTypedLink"
            case directoryArn = "x-amz-data-partition"
            case objectReference = "ObjectReference"
            case filterAttributeRanges = "FilterAttributeRanges"
            case maxResults = "MaxResults"
        }
    }

    public struct BatchListOutgoingTypedLinks: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "FilterTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "FilterAttributeRanges", required: false, type: .list)
        ]
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference
        /// The pagination token.
        public let nextToken: String?
        /// Filters are interpreted in the order of the attributes defined on the typed link facet, not the order they are supplied to any API calls.
        public let filterTypedLink: TypedLinkSchemaAndFacetName?
        /// Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
        public let filterAttributeRanges: [TypedLinkAttributeRange]?

        public init(filterAttributeRanges: [TypedLinkAttributeRange]? = nil, filterTypedLink: TypedLinkSchemaAndFacetName? = nil, maxResults: Int32? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.maxResults = maxResults
            self.objectReference = objectReference
            self.nextToken = nextToken
            self.filterTypedLink = filterTypedLink
            self.filterAttributeRanges = filterAttributeRanges
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case objectReference = "ObjectReference"
            case nextToken = "NextToken"
            case filterTypedLink = "FilterTypedLink"
            case filterAttributeRanges = "FilterAttributeRanges"
        }
    }

    public struct BatchListPolicyAttachmentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifiers", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of ObjectIdentifiers to which the policy is attached.
        public let objectIdentifiers: [String]?
        /// The pagination token.
        public let nextToken: String?

        public init(nextToken: String? = nil, objectIdentifiers: [String]? = nil) {
            self.objectIdentifiers = objectIdentifiers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifiers = "ObjectIdentifiers"
            case nextToken = "NextToken"
        }
    }

    public enum ConsistencyLevel: String, CustomStringConvertible, Codable {
        case serializable = "SERIALIZABLE"
        case eventual = "EVENTUAL"
        public var description: String { return self.rawValue }
    }

    public struct BatchAttachToIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the object that was attached to the index.
        public let attachedObjectIdentifier: String?

        public init(attachedObjectIdentifier: String? = nil) {
            self.attachedObjectIdentifier = attachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case attachedObjectIdentifier = "AttachedObjectIdentifier"
        }
    }

    public struct EnableDirectoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", required: true, type: .string)
        ]
        /// The ARN of the enabled directory.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "DirectoryArn"
        }
    }

    public enum ObjectType: String, CustomStringConvertible, Codable {
        case node = "NODE"
        case leafNode = "LEAF_NODE"
        case policy = "POLICY"
        case index = "INDEX"
        public var description: String { return self.rawValue }
    }

    public struct AttachPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "PolicyReference", required: true, type: .structure)
        ]
        /// The reference that identifies the object to which the policy will be attached.
        public let objectReference: ObjectReference
        /// The Amazon Resource Name (ARN) that is associated with the Directory where both objects reside. For more information, see arns.
        public let directoryArn: String
        /// The reference that is associated with the policy object.
        public let policyReference: ObjectReference

        public init(directoryArn: String, objectReference: ObjectReference, policyReference: ObjectReference) {
            self.objectReference = objectReference
            self.directoryArn = directoryArn
            self.policyReference = policyReference
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case directoryArn = "x-amz-data-partition"
            case policyReference = "PolicyReference"
        }
    }

    public struct GetAppliedSchemaVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AppliedSchemaArn", required: false, type: .string)
        ]
        /// Current applied schema ARN, including the minor version in use if one was provided.
        public let appliedSchemaArn: String?

        public init(appliedSchemaArn: String? = nil) {
            self.appliedSchemaArn = appliedSchemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case appliedSchemaArn = "AppliedSchemaArn"
        }
    }

    public struct BatchListObjectChildrenResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Children", required: false, type: .map), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The children structure, which is a map with the key as the LinkName and ObjectIdentifier as the value.
        public let children: [String: String]?
        /// The pagination token.
        public let nextToken: String?

        public init(children: [String: String]? = nil, nextToken: String? = nil) {
            self.children = children
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case children = "Children"
            case nextToken = "NextToken"
        }
    }

    public struct BatchReadOperation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ListIncomingTypedLinks", required: false, type: .structure), 
            AWSShapeMember(label: "GetLinkAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "GetObjectInformation", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectParentPaths", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectPolicies", required: false, type: .structure), 
            AWSShapeMember(label: "ListAttachedIndices", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectChildren", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectParents", required: false, type: .structure), 
            AWSShapeMember(label: "ListOutgoingTypedLinks", required: false, type: .structure), 
            AWSShapeMember(label: "ListIndex", required: false, type: .structure), 
            AWSShapeMember(label: "LookupPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "GetObjectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "ListPolicyAttachments", required: false, type: .structure)
        ]
        /// Returns a paginated list of all the incoming TypedLinkSpecifier information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see Typed Links.
        public let listIncomingTypedLinks: BatchListIncomingTypedLinks?
        /// Retrieves attributes that are associated with a typed link.
        public let getLinkAttributes: BatchGetLinkAttributes?
        /// Retrieves metadata about an object.
        public let getObjectInformation: BatchGetObjectInformation?
        /// Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see Directory Structure.
        public let listObjectParentPaths: BatchListObjectParentPaths?
        /// Returns policies attached to an object in pagination fashion.
        public let listObjectPolicies: BatchListObjectPolicies?
        /// Lists indices attached to an object.
        public let listAttachedIndices: BatchListAttachedIndices?
        /// Returns a paginated list of child objects that are associated with a given object.
        public let listObjectChildren: BatchListObjectChildren?
        /// Lists all attributes that are associated with an object.
        public let listObjectAttributes: BatchListObjectAttributes?
        public let listObjectParents: BatchListObjectParents?
        /// Returns a paginated list of all the outgoing TypedLinkSpecifier information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see Typed Links.
        public let listOutgoingTypedLinks: BatchListOutgoingTypedLinks?
        /// Lists objects attached to the specified index.
        public let listIndex: BatchListIndex?
        /// Lists all policies from the root of the Directory to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don't have the policies attached, it returns the ObjectIdentifier for such objects. If policies are present, it returns ObjectIdentifier, policyId, and policyType. Paths that don't lead to the root from the target object are ignored. For more information, see Policies.
        public let lookupPolicy: BatchLookupPolicy?
        /// Retrieves attributes within a facet that are associated with an object.
        public let getObjectAttributes: BatchGetObjectAttributes?
        /// Returns all of the ObjectIdentifiers to which a given policy is attached.
        public let listPolicyAttachments: BatchListPolicyAttachments?

        public init(getLinkAttributes: BatchGetLinkAttributes? = nil, getObjectAttributes: BatchGetObjectAttributes? = nil, getObjectInformation: BatchGetObjectInformation? = nil, listAttachedIndices: BatchListAttachedIndices? = nil, listIncomingTypedLinks: BatchListIncomingTypedLinks? = nil, listIndex: BatchListIndex? = nil, listObjectAttributes: BatchListObjectAttributes? = nil, listObjectChildren: BatchListObjectChildren? = nil, listObjectParentPaths: BatchListObjectParentPaths? = nil, listObjectParents: BatchListObjectParents? = nil, listObjectPolicies: BatchListObjectPolicies? = nil, listOutgoingTypedLinks: BatchListOutgoingTypedLinks? = nil, listPolicyAttachments: BatchListPolicyAttachments? = nil, lookupPolicy: BatchLookupPolicy? = nil) {
            self.listIncomingTypedLinks = listIncomingTypedLinks
            self.getLinkAttributes = getLinkAttributes
            self.getObjectInformation = getObjectInformation
            self.listObjectParentPaths = listObjectParentPaths
            self.listObjectPolicies = listObjectPolicies
            self.listAttachedIndices = listAttachedIndices
            self.listObjectChildren = listObjectChildren
            self.listObjectAttributes = listObjectAttributes
            self.listObjectParents = listObjectParents
            self.listOutgoingTypedLinks = listOutgoingTypedLinks
            self.listIndex = listIndex
            self.lookupPolicy = lookupPolicy
            self.getObjectAttributes = getObjectAttributes
            self.listPolicyAttachments = listPolicyAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case listIncomingTypedLinks = "ListIncomingTypedLinks"
            case getLinkAttributes = "GetLinkAttributes"
            case getObjectInformation = "GetObjectInformation"
            case listObjectParentPaths = "ListObjectParentPaths"
            case listObjectPolicies = "ListObjectPolicies"
            case listAttachedIndices = "ListAttachedIndices"
            case listObjectChildren = "ListObjectChildren"
            case listObjectAttributes = "ListObjectAttributes"
            case listObjectParents = "ListObjectParents"
            case listOutgoingTypedLinks = "ListOutgoingTypedLinks"
            case listIndex = "ListIndex"
            case lookupPolicy = "LookupPolicy"
            case getObjectAttributes = "GetObjectAttributes"
            case listPolicyAttachments = "ListPolicyAttachments"
        }
    }

    public struct ObjectAttributeUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectAttributeKey", required: false, type: .structure), 
            AWSShapeMember(label: "ObjectAttributeAction", required: false, type: .structure)
        ]
        /// The key of the attribute being updated.
        public let objectAttributeKey: AttributeKey?
        /// The action to perform as part of the attribute update.
        public let objectAttributeAction: ObjectAttributeAction?

        public init(objectAttributeAction: ObjectAttributeAction? = nil, objectAttributeKey: AttributeKey? = nil) {
            self.objectAttributeKey = objectAttributeKey
            self.objectAttributeAction = objectAttributeAction
        }

        private enum CodingKeys: String, CodingKey {
            case objectAttributeKey = "ObjectAttributeKey"
            case objectAttributeAction = "ObjectAttributeAction"
        }
    }

    public struct BatchReadSuccessfulResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ListAttachedIndices", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "ListIncomingTypedLinks", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectParents", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectParentPaths", required: false, type: .structure), 
            AWSShapeMember(label: "ListIndex", required: false, type: .structure), 
            AWSShapeMember(label: "GetObjectInformation", required: false, type: .structure), 
            AWSShapeMember(label: "GetObjectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectPolicies", required: false, type: .structure), 
            AWSShapeMember(label: "ListOutgoingTypedLinks", required: false, type: .structure), 
            AWSShapeMember(label: "GetLinkAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "ListPolicyAttachments", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectChildren", required: false, type: .structure), 
            AWSShapeMember(label: "LookupPolicy", required: false, type: .structure)
        ]
        /// Lists indices attached to an object.
        public let listAttachedIndices: BatchListAttachedIndicesResponse?
        /// Lists all attributes that are associated with an object.
        public let listObjectAttributes: BatchListObjectAttributesResponse?
        /// Returns a paginated list of all the incoming TypedLinkSpecifier information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see Typed Links.
        public let listIncomingTypedLinks: BatchListIncomingTypedLinksResponse?
        public let listObjectParents: BatchListObjectParentsResponse?
        /// Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see Directory Structure.
        public let listObjectParentPaths: BatchListObjectParentPathsResponse?
        /// Lists objects attached to the specified index.
        public let listIndex: BatchListIndexResponse?
        /// Retrieves metadata about an object.
        public let getObjectInformation: BatchGetObjectInformationResponse?
        /// Retrieves attributes within a facet that are associated with an object.
        public let getObjectAttributes: BatchGetObjectAttributesResponse?
        /// Returns policies attached to an object in pagination fashion.
        public let listObjectPolicies: BatchListObjectPoliciesResponse?
        /// Returns a paginated list of all the outgoing TypedLinkSpecifier information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see Typed Links.
        public let listOutgoingTypedLinks: BatchListOutgoingTypedLinksResponse?
        /// The list of attributes to retrieve from the typed link.
        public let getLinkAttributes: BatchGetLinkAttributesResponse?
        /// Returns all of the ObjectIdentifiers to which a given policy is attached.
        public let listPolicyAttachments: BatchListPolicyAttachmentsResponse?
        /// Returns a paginated list of child objects that are associated with a given object.
        public let listObjectChildren: BatchListObjectChildrenResponse?
        /// Lists all policies from the root of the Directory to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don't have the policies attached, it returns the ObjectIdentifier for such objects. If policies are present, it returns ObjectIdentifier, policyId, and policyType. Paths that don't lead to the root from the target object are ignored. For more information, see Policies.
        public let lookupPolicy: BatchLookupPolicyResponse?

        public init(getLinkAttributes: BatchGetLinkAttributesResponse? = nil, getObjectAttributes: BatchGetObjectAttributesResponse? = nil, getObjectInformation: BatchGetObjectInformationResponse? = nil, listAttachedIndices: BatchListAttachedIndicesResponse? = nil, listIncomingTypedLinks: BatchListIncomingTypedLinksResponse? = nil, listIndex: BatchListIndexResponse? = nil, listObjectAttributes: BatchListObjectAttributesResponse? = nil, listObjectChildren: BatchListObjectChildrenResponse? = nil, listObjectParentPaths: BatchListObjectParentPathsResponse? = nil, listObjectParents: BatchListObjectParentsResponse? = nil, listObjectPolicies: BatchListObjectPoliciesResponse? = nil, listOutgoingTypedLinks: BatchListOutgoingTypedLinksResponse? = nil, listPolicyAttachments: BatchListPolicyAttachmentsResponse? = nil, lookupPolicy: BatchLookupPolicyResponse? = nil) {
            self.listAttachedIndices = listAttachedIndices
            self.listObjectAttributes = listObjectAttributes
            self.listIncomingTypedLinks = listIncomingTypedLinks
            self.listObjectParents = listObjectParents
            self.listObjectParentPaths = listObjectParentPaths
            self.listIndex = listIndex
            self.getObjectInformation = getObjectInformation
            self.getObjectAttributes = getObjectAttributes
            self.listObjectPolicies = listObjectPolicies
            self.listOutgoingTypedLinks = listOutgoingTypedLinks
            self.getLinkAttributes = getLinkAttributes
            self.listPolicyAttachments = listPolicyAttachments
            self.listObjectChildren = listObjectChildren
            self.lookupPolicy = lookupPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case listAttachedIndices = "ListAttachedIndices"
            case listObjectAttributes = "ListObjectAttributes"
            case listIncomingTypedLinks = "ListIncomingTypedLinks"
            case listObjectParents = "ListObjectParents"
            case listObjectParentPaths = "ListObjectParentPaths"
            case listIndex = "ListIndex"
            case getObjectInformation = "GetObjectInformation"
            case getObjectAttributes = "GetObjectAttributes"
            case listObjectPolicies = "ListObjectPolicies"
            case listOutgoingTypedLinks = "ListOutgoingTypedLinks"
            case getLinkAttributes = "GetLinkAttributes"
            case listPolicyAttachments = "ListPolicyAttachments"
            case listObjectChildren = "ListObjectChildren"
            case lookupPolicy = "LookupPolicy"
        }
    }

    public struct BatchListObjectAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "FacetFilter", required: false, type: .structure)
        ]
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?
        /// Reference of the object whose attributes need to be listed.
        public let objectReference: ObjectReference
        /// Used to filter the list of object attributes that are associated with a certain facet.
        public let facetFilter: SchemaFacet?

        public init(facetFilter: SchemaFacet? = nil, maxResults: Int32? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.objectReference = objectReference
            self.facetFilter = facetFilter
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case objectReference = "ObjectReference"
            case facetFilter = "FacetFilter"
        }
    }

    public struct DeleteFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The name of the facet to delete.
        public let name: String
        /// The Amazon Resource Name (ARN) that is associated with the Facet. For more information, see arns.
        public let schemaArn: String

        public init(name: String, schemaArn: String) {
            self.name = name
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case schemaArn = "x-amz-data-partition"
        }
    }

    public struct ListObjectParentPathsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The reference that identifies the object whose parent paths are listed.
        public let objectReference: ObjectReference
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// The ARN of the directory to which the parent path applies.
        public let directoryArn: String
        /// The pagination token.
        public let nextToken: String?

        public init(directoryArn: String, maxResults: Int32? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.objectReference = objectReference
            self.maxResults = maxResults
            self.directoryArn = directoryArn
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case maxResults = "MaxResults"
            case directoryArn = "x-amz-data-partition"
            case nextToken = "NextToken"
        }
    }

    public struct BatchAttachTypedLinkResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifier", required: false, type: .structure)
        ]
        /// Returns a typed link specifier as output.
        public let typedLinkSpecifier: TypedLinkSpecifier?

        public init(typedLinkSpecifier: TypedLinkSpecifier? = nil) {
            self.typedLinkSpecifier = typedLinkSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifier = "TypedLinkSpecifier"
        }
    }

    public struct ListOutgoingTypedLinksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TypedLinkSpecifiers", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Returns a typed link specifier as output.
        public let typedLinkSpecifiers: [TypedLinkSpecifier]?

        public init(nextToken: String? = nil, typedLinkSpecifiers: [TypedLinkSpecifier]? = nil) {
            self.nextToken = nextToken
            self.typedLinkSpecifiers = typedLinkSpecifiers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case typedLinkSpecifiers = "TypedLinkSpecifiers"
        }
    }

    public struct BatchUpdateObjectAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// ID that is associated with the object.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct ListDevelopmentSchemaArnsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SchemaArns", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The ARNs of retrieved development schemas.
        public let schemaArns: [String]?

        public init(nextToken: String? = nil, schemaArns: [String]? = nil) {
            self.nextToken = nextToken
            self.schemaArns = schemaArns
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case schemaArns = "SchemaArns"
        }
    }

    public struct ObjectAttributeAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectAttributeActionType", required: false, type: .enum), 
            AWSShapeMember(label: "ObjectAttributeUpdateValue", required: false, type: .structure)
        ]
        /// A type that can be either Update or Delete.
        public let objectAttributeActionType: UpdateActionType?
        /// The value that you want to update to.
        public let objectAttributeUpdateValue: TypedAttributeValue?

        public init(objectAttributeActionType: UpdateActionType? = nil, objectAttributeUpdateValue: TypedAttributeValue? = nil) {
            self.objectAttributeActionType = objectAttributeActionType
            self.objectAttributeUpdateValue = objectAttributeUpdateValue
        }

        private enum CodingKeys: String, CodingKey {
            case objectAttributeActionType = "ObjectAttributeActionType"
            case objectAttributeUpdateValue = "ObjectAttributeUpdateValue"
        }
    }

    public struct ListObjectAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "FacetFilter", required: false, type: .structure)
        ]
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        public let consistencyLevel: ConsistencyLevel?
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides. For more information, see arns.
        public let directoryArn: String
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// The reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference
        /// Used to filter the list of object attributes that are associated with a certain facet.
        public let facetFilter: SchemaFacet?

        public init(consistencyLevel: ConsistencyLevel? = nil, directoryArn: String, facetFilter: SchemaFacet? = nil, maxResults: Int32? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.consistencyLevel = consistencyLevel
            self.directoryArn = directoryArn
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.objectReference = objectReference
            self.facetFilter = facetFilter
        }

        private enum CodingKeys: String, CodingKey {
            case consistencyLevel = "x-amz-consistency-level"
            case directoryArn = "x-amz-data-partition"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case objectReference = "ObjectReference"
            case facetFilter = "FacetFilter"
        }
    }

    public struct PublishSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublishedSchemaArn", required: false, type: .string)
        ]
        /// The ARN that is associated with the published schema. For more information, see arns.
        public let publishedSchemaArn: String?

        public init(publishedSchemaArn: String? = nil) {
            self.publishedSchemaArn = publishedSchemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case publishedSchemaArn = "PublishedSchemaArn"
        }
    }

    public struct UpgradePublishedSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "DevelopmentSchemaArn", required: true, type: .string), 
            AWSShapeMember(label: "MinorVersion", required: true, type: .string), 
            AWSShapeMember(label: "PublishedSchemaArn", required: true, type: .string)
        ]
        /// Used for testing whether the Development schema provided is backwards compatible, or not, with the publish schema provided by the user to be upgraded. If schema compatibility fails, an exception would be thrown else the call would succeed. This parameter is optional and defaults to false.
        public let dryRun: Bool?
        /// The ARN of the development schema with the changes used for the upgrade.
        public let developmentSchemaArn: String
        /// Identifies the minor version of the published schema that will be created. This parameter is NOT optional.
        public let minorVersion: String
        /// The ARN of the published schema to be upgraded.
        public let publishedSchemaArn: String

        public init(developmentSchemaArn: String, dryRun: Bool? = nil, minorVersion: String, publishedSchemaArn: String) {
            self.dryRun = dryRun
            self.developmentSchemaArn = developmentSchemaArn
            self.minorVersion = minorVersion
            self.publishedSchemaArn = publishedSchemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case developmentSchemaArn = "DevelopmentSchemaArn"
            case minorVersion = "MinorVersion"
            case publishedSchemaArn = "PublishedSchemaArn"
        }
    }

    public struct TypedLinkSpecifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityAttributeValues", required: true, type: .list), 
            AWSShapeMember(label: "TargetObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "SourceObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "TypedLinkFacet", required: true, type: .structure)
        ]
        /// Identifies the attribute value to update.
        public let identityAttributeValues: [AttributeNameAndValue]
        /// Identifies the target object that the typed link will attach to.
        public let targetObjectReference: ObjectReference
        /// Identifies the source object that the typed link will attach to.
        public let sourceObjectReference: ObjectReference
        /// Identifies the typed link facet that is associated with the typed link.
        public let typedLinkFacet: TypedLinkSchemaAndFacetName

        public init(identityAttributeValues: [AttributeNameAndValue], sourceObjectReference: ObjectReference, targetObjectReference: ObjectReference, typedLinkFacet: TypedLinkSchemaAndFacetName) {
            self.identityAttributeValues = identityAttributeValues
            self.targetObjectReference = targetObjectReference
            self.sourceObjectReference = sourceObjectReference
            self.typedLinkFacet = typedLinkFacet
        }

        private enum CodingKeys: String, CodingKey {
            case identityAttributeValues = "IdentityAttributeValues"
            case targetObjectReference = "TargetObjectReference"
            case sourceObjectReference = "SourceObjectReference"
            case typedLinkFacet = "TypedLinkFacet"
        }
    }

    public struct ListPolicyAttachmentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyReference", required: true, type: .structure), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The reference that identifies the policy object.
        public let policyReference: ObjectReference
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        public let consistencyLevel: ConsistencyLevel?
        /// The pagination token.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) that is associated with the Directory where objects reside. For more information, see arns.
        public let directoryArn: String
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?

        public init(consistencyLevel: ConsistencyLevel? = nil, directoryArn: String, maxResults: Int32? = nil, nextToken: String? = nil, policyReference: ObjectReference) {
            self.policyReference = policyReference
            self.consistencyLevel = consistencyLevel
            self.nextToken = nextToken
            self.directoryArn = directoryArn
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case policyReference = "PolicyReference"
            case consistencyLevel = "x-amz-consistency-level"
            case nextToken = "NextToken"
            case directoryArn = "x-amz-data-partition"
            case maxResults = "MaxResults"
        }
    }

    public struct ListTypedLinkFacetNamesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String
        /// The pagination token.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, schemaArn: String) {
            self.maxResults = maxResults
            self.schemaArn = schemaArn
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case schemaArn = "x-amz-data-partition"
            case nextToken = "NextToken"
        }
    }

    public enum RuleType: String, CustomStringConvertible, Codable {
        case binaryLength = "BINARY_LENGTH"
        case numberComparison = "NUMBER_COMPARISON"
        case stringFromSet = "STRING_FROM_SET"
        case stringLength = "STRING_LENGTH"
        public var description: String { return self.rawValue }
    }

    public struct DeleteFacetResponse: AWSShape {

        public init() {
        }

    }

    public struct TypedAttributeValueRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndValue", required: false, type: .structure), 
            AWSShapeMember(label: "StartMode", required: true, type: .enum), 
            AWSShapeMember(label: "StartValue", required: false, type: .structure), 
            AWSShapeMember(label: "EndMode", required: true, type: .enum)
        ]
        /// The attribute value to terminate the range at.
        public let endValue: TypedAttributeValue?
        /// The inclusive or exclusive range start.
        public let startMode: RangeMode
        /// The value to start the range at.
        public let startValue: TypedAttributeValue?
        /// The inclusive or exclusive range end.
        public let endMode: RangeMode

        public init(endMode: RangeMode, endValue: TypedAttributeValue? = nil, startMode: RangeMode, startValue: TypedAttributeValue? = nil) {
            self.endValue = endValue
            self.startMode = startMode
            self.startValue = startValue
            self.endMode = endMode
        }

        private enum CodingKeys: String, CodingKey {
            case endValue = "EndValue"
            case startMode = "StartMode"
            case startValue = "StartValue"
            case endMode = "EndMode"
        }
    }

    public struct CreateFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FacetStyle", required: false, type: .enum), 
            AWSShapeMember(label: "Attributes", required: false, type: .list), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ObjectType", required: false, type: .enum)
        ]
        /// There are two different styles that you can define on any given facet, Static and Dynamic. For static facets, all attributes must be defined in the schema. For dynamic facets, attributes can be defined during data plane operations.
        public let facetStyle: FacetStyle?
        /// The attributes that are associated with the Facet.
        public let attributes: [FacetAttribute]?
        /// The schema ARN in which the new Facet will be created. For more information, see arns.
        public let schemaArn: String
        /// The name of the Facet, which is unique for a given schema.
        public let name: String
        /// Specifies whether a given object created from this facet is of type node, leaf node, policy or index.   Node: Can have multiple children but one parent.     Leaf node: Cannot have children but can have multiple parents.     Policy: Allows you to store a policy document and policy type. For more information, see Policies.     Index: Can be created with the Index API.  
        public let objectType: ObjectType?

        public init(attributes: [FacetAttribute]? = nil, facetStyle: FacetStyle? = nil, name: String, objectType: ObjectType? = nil, schemaArn: String) {
            self.facetStyle = facetStyle
            self.attributes = attributes
            self.schemaArn = schemaArn
            self.name = name
            self.objectType = objectType
        }

        private enum CodingKeys: String, CodingKey {
            case facetStyle = "FacetStyle"
            case attributes = "Attributes"
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
            case objectType = "ObjectType"
        }
    }

    public struct RemoveFacetFromObjectResponse: AWSShape {

        public init() {
        }

    }

    public struct TypedLinkFacetAttributeUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Action", required: true, type: .enum), 
            AWSShapeMember(label: "Attribute", required: true, type: .structure)
        ]
        /// The action to perform when updating the attribute.
        public let action: UpdateActionType
        /// The attribute to update.
        public let attribute: TypedLinkAttributeDefinition

        public init(action: UpdateActionType, attribute: TypedLinkAttributeDefinition) {
            self.action = action
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case attribute = "Attribute"
        }
    }

    public struct AddFacetToObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .structure), 
            AWSShapeMember(label: "ObjectAttributeList", required: false, type: .list)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides. For more information, see arns.
        public let directoryArn: String
        /// A reference to the object you are adding the specified facet to.
        public let objectReference: ObjectReference
        /// Identifiers for the facet that you are adding to the object. See SchemaFacet for details.
        public let schemaFacet: SchemaFacet
        /// Attributes on the facet that you are adding to the object.
        public let objectAttributeList: [AttributeKeyAndValue]?

        public init(directoryArn: String, objectAttributeList: [AttributeKeyAndValue]? = nil, objectReference: ObjectReference, schemaFacet: SchemaFacet) {
            self.directoryArn = directoryArn
            self.objectReference = objectReference
            self.schemaFacet = schemaFacet
            self.objectAttributeList = objectAttributeList
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case objectReference = "ObjectReference"
            case schemaFacet = "SchemaFacet"
            case objectAttributeList = "ObjectAttributeList"
        }
    }

    public struct CreateTypedLinkFacetResponse: AWSShape {

        public init() {
        }

    }

    public struct RemoveFacetFromObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .structure)
        ]
        /// The ARN of the directory in which the object resides.
        public let directoryArn: String
        /// A reference to the object to remove the facet from.
        public let objectReference: ObjectReference
        /// The facet to remove. See SchemaFacet for details.
        public let schemaFacet: SchemaFacet

        public init(directoryArn: String, objectReference: ObjectReference, schemaFacet: SchemaFacet) {
            self.directoryArn = directoryArn
            self.objectReference = objectReference
            self.schemaFacet = schemaFacet
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case objectReference = "ObjectReference"
            case schemaFacet = "SchemaFacet"
        }
    }

    public struct DeleteSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the development schema. For more information, see arns.
        public let schemaArn: String

        public init(schemaArn: String) {
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource. Tagging is only supported for directories.
        public let resourceArn: String
        /// Keys of the tag that need to be removed from the resource.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tagKeys = "TagKeys"
        }
    }

    public struct BatchListObjectPolicies: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference

        public init(maxResults: Int32? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case objectReference = "ObjectReference"
        }
    }

    public struct BatchAddFacetToObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .structure), 
            AWSShapeMember(label: "ObjectAttributeList", required: true, type: .list)
        ]
        /// A reference to the object being mutated.
        public let objectReference: ObjectReference
        /// Represents the facet being added to the object.
        public let schemaFacet: SchemaFacet
        /// The attributes to set on the object.
        public let objectAttributeList: [AttributeKeyAndValue]

        public init(objectAttributeList: [AttributeKeyAndValue], objectReference: ObjectReference, schemaFacet: SchemaFacet) {
            self.objectReference = objectReference
            self.schemaFacet = schemaFacet
            self.objectAttributeList = objectAttributeList
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case schemaFacet = "SchemaFacet"
            case objectAttributeList = "ObjectAttributeList"
        }
    }

    public struct SchemaFacet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FacetName", required: false, type: .string), 
            AWSShapeMember(label: "SchemaArn", required: false, type: .string)
        ]
        /// The name of the facet.
        public let facetName: String?
        /// The ARN of the schema that contains the facet with no minor component. See arns and In-Place Schema Upgrade for a description of when to provide minor versions.
        public let schemaArn: String?

        public init(facetName: String? = nil, schemaArn: String? = nil) {
            self.facetName = facetName
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case facetName = "FacetName"
            case schemaArn = "SchemaArn"
        }
    }

    public struct UpdateObjectAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "AttributeUpdates", required: true, type: .list)
        ]
        /// The reference that identifies the object.
        public let objectReference: ObjectReference
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides. For more information, see arns.
        public let directoryArn: String
        /// The attributes update structure.
        public let attributeUpdates: [ObjectAttributeUpdate]

        public init(attributeUpdates: [ObjectAttributeUpdate], directoryArn: String, objectReference: ObjectReference) {
            self.objectReference = objectReference
            self.directoryArn = directoryArn
            self.attributeUpdates = attributeUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case directoryArn = "x-amz-data-partition"
            case attributeUpdates = "AttributeUpdates"
        }
    }

    public struct ApplySchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AppliedSchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", required: false, type: .string)
        ]
        /// The applied schema ARN that is associated with the copied schema in the Directory. You can use this ARN to describe the schema information applied on this directory. For more information, see arns.
        public let appliedSchemaArn: String?
        /// The ARN that is associated with the Directory. For more information, see arns.
        public let directoryArn: String?

        public init(appliedSchemaArn: String? = nil, directoryArn: String? = nil) {
            self.appliedSchemaArn = appliedSchemaArn
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case appliedSchemaArn = "AppliedSchemaArn"
            case directoryArn = "DirectoryArn"
        }
    }

    public struct ListFacetNamesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FacetNames", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The names of facets that exist within the schema.
        public let facetNames: [String]?
        /// The pagination token.
        public let nextToken: String?

        public init(facetNames: [String]? = nil, nextToken: String? = nil) {
            self.facetNames = facetNames
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case facetNames = "FacetNames"
            case nextToken = "NextToken"
        }
    }

    public struct LookupPolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyToPathList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Provides list of path to policies. Policies contain PolicyId, ObjectIdentifier, and PolicyType. For more information, see Policies.
        public let policyToPathList: [PolicyToPath]?
        /// The pagination token.
        public let nextToken: String?

        public init(nextToken: String? = nil, policyToPathList: [PolicyToPath]? = nil) {
            self.policyToPathList = policyToPathList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case policyToPathList = "PolicyToPathList"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: false, type: .string)
        ]
        /// The input ARN that is returned as part of the response. For more information, see arns.
        public let schemaArn: String?

        public init(schemaArn: String? = nil) {
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
        }
    }

    public struct Facet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "FacetStyle", required: false, type: .enum), 
            AWSShapeMember(label: "ObjectType", required: false, type: .enum)
        ]
        /// The name of the Facet.
        public let name: String?
        /// There are two different styles that you can define on any given facet, Static and Dynamic. For static facets, all attributes must be defined in the schema. For dynamic facets, attributes can be defined during data plane operations.
        public let facetStyle: FacetStyle?
        /// The object type that is associated with the facet. See CreateFacetRequest$ObjectType for more details.
        public let objectType: ObjectType?

        public init(facetStyle: FacetStyle? = nil, name: String? = nil, objectType: ObjectType? = nil) {
            self.name = name
            self.facetStyle = facetStyle
            self.objectType = objectType
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case facetStyle = "FacetStyle"
            case objectType = "ObjectType"
        }
    }

    public struct Directory: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DirectoryArn", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The state of the directory. Can be either Enabled, Disabled, or Deleted.
        public let state: DirectoryState?
        /// The date and time when the directory was created.
        public let creationDateTime: TimeStamp?
        /// The Amazon Resource Name (ARN) that is associated with the directory. For more information, see arns.
        public let directoryArn: String?
        /// The name of the directory.
        public let name: String?

        public init(creationDateTime: TimeStamp? = nil, directoryArn: String? = nil, name: String? = nil, state: DirectoryState? = nil) {
            self.state = state
            self.creationDateTime = creationDateTime
            self.directoryArn = directoryArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case state = "State"
            case creationDateTime = "CreationDateTime"
            case directoryArn = "DirectoryArn"
            case name = "Name"
        }
    }

    public struct AttachObjectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachedObjectIdentifier", required: false, type: .string)
        ]
        /// The attached ObjectIdentifier, which is the child ObjectIdentifier.
        public let attachedObjectIdentifier: String?

        public init(attachedObjectIdentifier: String? = nil) {
            self.attachedObjectIdentifier = attachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case attachedObjectIdentifier = "AttachedObjectIdentifier"
        }
    }

    public struct BatchDetachTypedLink: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifier", required: true, type: .structure)
        ]
        /// Used to accept a typed link specifier as input.
        public let typedLinkSpecifier: TypedLinkSpecifier

        public init(typedLinkSpecifier: TypedLinkSpecifier) {
            self.typedLinkSpecifier = typedLinkSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifier = "TypedLinkSpecifier"
        }
    }

    public struct UpdateSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: false, type: .string)
        ]
        /// The ARN that is associated with the updated schema. For more information, see arns.
        public let schemaArn: String?

        public init(schemaArn: String? = nil) {
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
        }
    }

    public struct UpdateFacetResponse: AWSShape {

        public init() {
        }

    }

    public struct ListAppliedSchemaArnsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArns", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The ARNs of schemas that are applied to the directory.
        public let schemaArns: [String]?
        /// The pagination token.
        public let nextToken: String?

        public init(nextToken: String? = nil, schemaArns: [String]? = nil) {
            self.schemaArns = schemaArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArns = "SchemaArns"
            case nextToken = "NextToken"
        }
    }

    public struct FacetAttributeDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Rules", required: false, type: .map), 
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "DefaultValue", required: false, type: .structure), 
            AWSShapeMember(label: "IsImmutable", required: false, type: .boolean)
        ]
        /// Validation rules attached to the attribute definition.
        public let rules: [String: Rule]?
        /// The type of the attribute.
        public let `type`: FacetAttributeType
        /// The default value of the attribute (if configured).
        public let defaultValue: TypedAttributeValue?
        /// Whether the attribute is mutable or not.
        public let isImmutable: Bool?

        public init(defaultValue: TypedAttributeValue? = nil, isImmutable: Bool? = nil, rules: [String: Rule]? = nil, type: FacetAttributeType) {
            self.rules = rules
            self.`type` = `type`
            self.defaultValue = defaultValue
            self.isImmutable = isImmutable
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "Rules"
            case `type` = "Type"
            case defaultValue = "DefaultValue"
            case isImmutable = "IsImmutable"
        }
    }

    public struct BatchDetachTypedLinkResponse: AWSShape {

        public init() {
        }

    }

    public struct AddFacetToObjectResponse: AWSShape {

        public init() {
        }

    }

    public struct BatchUpdateLinkAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifier", required: true, type: .structure), 
            AWSShapeMember(label: "AttributeUpdates", required: true, type: .list)
        ]
        /// Allows a typed link specifier to be accepted as input.
        public let typedLinkSpecifier: TypedLinkSpecifier
        /// The attributes update structure.
        public let attributeUpdates: [LinkAttributeUpdate]

        public init(attributeUpdates: [LinkAttributeUpdate], typedLinkSpecifier: TypedLinkSpecifier) {
            self.typedLinkSpecifier = typedLinkSpecifier
            self.attributeUpdates = attributeUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifier = "TypedLinkSpecifier"
            case attributeUpdates = "AttributeUpdates"
        }
    }

    public struct UpdateLinkAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifier", required: true, type: .structure), 
            AWSShapeMember(label: "AttributeUpdates", required: true, type: .list), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// Allows a typed link specifier to be accepted as input.
        public let typedLinkSpecifier: TypedLinkSpecifier
        /// The attributes update structure.
        public let attributeUpdates: [LinkAttributeUpdate]
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the updated typed link resides. For more information, see arns or Typed Links.
        public let directoryArn: String

        public init(attributeUpdates: [LinkAttributeUpdate], directoryArn: String, typedLinkSpecifier: TypedLinkSpecifier) {
            self.typedLinkSpecifier = typedLinkSpecifier
            self.attributeUpdates = attributeUpdates
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifier = "TypedLinkSpecifier"
            case attributeUpdates = "AttributeUpdates"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct DetachFromIndexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "IndexReference", required: true, type: .structure), 
            AWSShapeMember(label: "TargetReference", required: true, type: .structure)
        ]
        /// The Amazon Resource Name (ARN) of the directory the index and object exist in.
        public let directoryArn: String
        /// A reference to the index object.
        public let indexReference: ObjectReference
        /// A reference to the object being detached from the index.
        public let targetReference: ObjectReference

        public init(directoryArn: String, indexReference: ObjectReference, targetReference: ObjectReference) {
            self.directoryArn = directoryArn
            self.indexReference = indexReference
            self.targetReference = targetReference
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case indexReference = "IndexReference"
            case targetReference = "TargetReference"
        }
    }

    public struct LinkAttributeAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeActionType", required: false, type: .enum), 
            AWSShapeMember(label: "AttributeUpdateValue", required: false, type: .structure)
        ]
        /// A type that can be either UPDATE_OR_CREATE or DELETE.
        public let attributeActionType: UpdateActionType?
        /// The value that you want to update to.
        public let attributeUpdateValue: TypedAttributeValue?

        public init(attributeActionType: UpdateActionType? = nil, attributeUpdateValue: TypedAttributeValue? = nil) {
            self.attributeActionType = attributeActionType
            self.attributeUpdateValue = attributeUpdateValue
        }

        private enum CodingKeys: String, CodingKey {
            case attributeActionType = "AttributeActionType"
            case attributeUpdateValue = "AttributeUpdateValue"
        }
    }

    public struct ListIndexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "IndexReference", required: true, type: .structure), 
            AWSShapeMember(label: "RangesOnIndexedValues", required: false, type: .list)
        ]
        /// The consistency level to execute the request at.
        public let consistencyLevel: ConsistencyLevel?
        /// The maximum number of objects in a single page to retrieve from the index during a request. For more information, see Amazon Cloud Directory Limits.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?
        /// The ARN of the directory that the index exists in.
        public let directoryArn: String
        /// The reference to the index to list.
        public let indexReference: ObjectReference
        /// Specifies the ranges of indexed values that you want to query.
        public let rangesOnIndexedValues: [ObjectAttributeRange]?

        public init(consistencyLevel: ConsistencyLevel? = nil, directoryArn: String, indexReference: ObjectReference, maxResults: Int32? = nil, nextToken: String? = nil, rangesOnIndexedValues: [ObjectAttributeRange]? = nil) {
            self.consistencyLevel = consistencyLevel
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.directoryArn = directoryArn
            self.indexReference = indexReference
            self.rangesOnIndexedValues = rangesOnIndexedValues
        }

        private enum CodingKeys: String, CodingKey {
            case consistencyLevel = "x-amz-consistency-level"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case directoryArn = "x-amz-data-partition"
            case indexReference = "IndexReference"
            case rangesOnIndexedValues = "RangesOnIndexedValues"
        }
    }

    public struct BatchListObjectParents: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        public let nextToken: String?
        public let objectReference: ObjectReference
        public let maxResults: Int32?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.nextToken = nextToken
            self.objectReference = objectReference
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case objectReference = "ObjectReference"
            case maxResults = "MaxResults"
        }
    }

    public struct BatchListAttachedIndices: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "TargetReference", required: true, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// A reference to the object that has indices attached.
        public let targetReference: ObjectReference
        /// The pagination token.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, targetReference: ObjectReference) {
            self.maxResults = maxResults
            self.targetReference = targetReference
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case targetReference = "TargetReference"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteTypedLinkFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String
        /// The unique name of the typed link facet.
        public let name: String

        public init(name: String, schemaArn: String) {
            self.schemaArn = schemaArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
        }
    }

    public struct UpdateTypedLinkFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityAttributeOrder", required: true, type: .list), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "AttributeUpdates", required: true, type: .list)
        ]
        /// The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed links considers the order that the attributes are defined on the typed link facet. When providing ranges to a typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range. Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls. For more information about identity attributes, see Typed Links.
        public let identityAttributeOrder: [String]
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String
        /// The unique name of the typed link facet.
        public let name: String
        /// Attributes update structure.
        public let attributeUpdates: [TypedLinkFacetAttributeUpdate]

        public init(attributeUpdates: [TypedLinkFacetAttributeUpdate], identityAttributeOrder: [String], name: String, schemaArn: String) {
            self.identityAttributeOrder = identityAttributeOrder
            self.schemaArn = schemaArn
            self.name = name
            self.attributeUpdates = attributeUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case identityAttributeOrder = "IdentityAttributeOrder"
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
            case attributeUpdates = "AttributeUpdates"
        }
    }

    public struct ListDevelopmentSchemaArnsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetObjectAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "AttributeNames", required: true, type: .list)
        ]
        /// The consistency level at which to retrieve the attributes on an object.
        public let consistencyLevel: ConsistencyLevel?
        /// Identifier for the facet whose attributes will be retrieved. See SchemaFacet for details.
        public let schemaFacet: SchemaFacet
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides.
        public let directoryArn: String
        /// Reference that identifies the object whose attributes will be retrieved.
        public let objectReference: ObjectReference
        /// List of attribute names whose values will be retrieved.
        public let attributeNames: [String]

        public init(attributeNames: [String], consistencyLevel: ConsistencyLevel? = nil, directoryArn: String, objectReference: ObjectReference, schemaFacet: SchemaFacet) {
            self.consistencyLevel = consistencyLevel
            self.schemaFacet = schemaFacet
            self.directoryArn = directoryArn
            self.objectReference = objectReference
            self.attributeNames = attributeNames
        }

        private enum CodingKeys: String, CodingKey {
            case consistencyLevel = "x-amz-consistency-level"
            case schemaFacet = "SchemaFacet"
            case directoryArn = "x-amz-data-partition"
            case objectReference = "ObjectReference"
            case attributeNames = "AttributeNames"
        }
    }

    public struct ListAttachedIndicesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "TargetReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The consistency level to use for this operation.
        public let consistencyLevel: ConsistencyLevel?
        /// A reference to the object that has indices attached.
        public let targetReference: ObjectReference
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The pagination token.
        public let nextToken: String?
        /// The ARN of the directory.
        public let directoryArn: String

        public init(consistencyLevel: ConsistencyLevel? = nil, directoryArn: String, maxResults: Int32? = nil, nextToken: String? = nil, targetReference: ObjectReference) {
            self.consistencyLevel = consistencyLevel
            self.targetReference = targetReference
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case consistencyLevel = "x-amz-consistency-level"
            case targetReference = "TargetReference"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct DetachObjectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier that was detached from the object.
        public let detachedObjectIdentifier: String?

        public init(detachedObjectIdentifier: String? = nil) {
            self.detachedObjectIdentifier = detachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case detachedObjectIdentifier = "DetachedObjectIdentifier"
        }
    }

    public struct BatchListIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IndexAttachments", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The objects and indexed values attached to the index.
        public let indexAttachments: [IndexAttachment]?
        /// The pagination token.
        public let nextToken: String?

        public init(indexAttachments: [IndexAttachment]? = nil, nextToken: String? = nil) {
            self.indexAttachments = indexAttachments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case indexAttachments = "IndexAttachments"
            case nextToken = "NextToken"
        }
    }

    public struct ListObjectChildrenRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// The reference that identifies the object for which child objects are being listed.
        public let objectReference: ObjectReference
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        public let consistencyLevel: ConsistencyLevel?
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides. For more information, see arns.
        public let directoryArn: String
        /// The pagination token.
        public let nextToken: String?

        public init(consistencyLevel: ConsistencyLevel? = nil, directoryArn: String, maxResults: Int32? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.maxResults = maxResults
            self.objectReference = objectReference
            self.consistencyLevel = consistencyLevel
            self.directoryArn = directoryArn
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case objectReference = "ObjectReference"
            case consistencyLevel = "x-amz-consistency-level"
            case directoryArn = "x-amz-data-partition"
            case nextToken = "NextToken"
        }
    }

    public struct UpgradePublishedSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpgradedSchemaArn", required: false, type: .string)
        ]
        /// The ARN of the upgraded schema that is returned as part of the response.
        public let upgradedSchemaArn: String?

        public init(upgradedSchemaArn: String? = nil) {
            self.upgradedSchemaArn = upgradedSchemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case upgradedSchemaArn = "UpgradedSchemaArn"
        }
    }

    public struct GetSchemaAsJsonRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The ARN of the schema to retrieve.
        public let schemaArn: String

        public init(schemaArn: String) {
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
        }
    }

    public struct ListIncomingTypedLinksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "LinkSpecifiers", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Returns one or more typed link specifiers as output.
        public let linkSpecifiers: [TypedLinkSpecifier]?

        public init(linkSpecifiers: [TypedLinkSpecifier]? = nil, nextToken: String? = nil) {
            self.nextToken = nextToken
            self.linkSpecifiers = linkSpecifiers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case linkSpecifiers = "LinkSpecifiers"
        }
    }

    public struct DetachPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// Reference that identifies the policy object.
        public let policyReference: ObjectReference
        /// The Amazon Resource Name (ARN) that is associated with the Directory where both objects reside. For more information, see arns.
        public let directoryArn: String
        /// Reference that identifies the object whose policy object will be detached.
        public let objectReference: ObjectReference

        public init(directoryArn: String, objectReference: ObjectReference, policyReference: ObjectReference) {
            self.policyReference = policyReference
            self.directoryArn = directoryArn
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case policyReference = "PolicyReference"
            case directoryArn = "x-amz-data-partition"
            case objectReference = "ObjectReference"
        }
    }

    public struct UpdateFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ObjectType", required: false, type: .enum), 
            AWSShapeMember(label: "AttributeUpdates", required: false, type: .list)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Facet. For more information, see arns.
        public let schemaArn: String
        /// The name of the facet.
        public let name: String
        /// The object type that is associated with the facet. See CreateFacetRequest$ObjectType for more details.
        public let objectType: ObjectType?
        /// List of attributes that need to be updated in a given schema Facet. Each attribute is followed by AttributeAction, which specifies the type of update operation to perform. 
        public let attributeUpdates: [FacetAttributeUpdate]?

        public init(attributeUpdates: [FacetAttributeUpdate]? = nil, name: String, objectType: ObjectType? = nil, schemaArn: String) {
            self.schemaArn = schemaArn
            self.name = name
            self.objectType = objectType
            self.attributeUpdates = attributeUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
            case objectType = "ObjectType"
            case attributeUpdates = "AttributeUpdates"
        }
    }

    public struct BatchDeleteObjectResponse: AWSShape {

        public init() {
        }

    }

    public struct ListOutgoingTypedLinksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "FilterAttributeRanges", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "FilterTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "ConsistencyLevel", required: false, type: .enum)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) of the directory where you want to list the typed links.
        public let directoryArn: String
        /// Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
        public let filterAttributeRanges: [TypedLinkAttributeRange]?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// Filters are interpreted in the order of the attributes defined on the typed link facet, not the order they are supplied to any API calls.
        public let filterTypedLink: TypedLinkSchemaAndFacetName?
        /// A reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference
        /// The consistency level to execute the request at.
        public let consistencyLevel: ConsistencyLevel?

        public init(consistencyLevel: ConsistencyLevel? = nil, directoryArn: String, filterAttributeRanges: [TypedLinkAttributeRange]? = nil, filterTypedLink: TypedLinkSchemaAndFacetName? = nil, maxResults: Int32? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.nextToken = nextToken
            self.directoryArn = directoryArn
            self.filterAttributeRanges = filterAttributeRanges
            self.maxResults = maxResults
            self.filterTypedLink = filterTypedLink
            self.objectReference = objectReference
            self.consistencyLevel = consistencyLevel
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case directoryArn = "x-amz-data-partition"
            case filterAttributeRanges = "FilterAttributeRanges"
            case maxResults = "MaxResults"
            case filterTypedLink = "FilterTypedLink"
            case objectReference = "ObjectReference"
            case consistencyLevel = "ConsistencyLevel"
        }
    }

    public struct BatchReadException: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]
        /// A type of exception, such as InvalidArnException.
        public let `type`: BatchReadExceptionType?
        /// An exception message that is associated with the failure.
        public let message: String?

        public init(message: String? = nil, type: BatchReadExceptionType? = nil) {
            self.`type` = `type`
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case message = "Message"
        }
    }

    public struct LinkAttributeUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeAction", required: false, type: .structure), 
            AWSShapeMember(label: "AttributeKey", required: false, type: .structure)
        ]
        /// The action to perform as part of the attribute update.
        public let attributeAction: LinkAttributeAction?
        /// The key of the attribute being updated.
        public let attributeKey: AttributeKey?

        public init(attributeAction: LinkAttributeAction? = nil, attributeKey: AttributeKey? = nil) {
            self.attributeAction = attributeAction
            self.attributeKey = attributeKey
        }

        private enum CodingKeys: String, CodingKey {
            case attributeAction = "AttributeAction"
            case attributeKey = "AttributeKey"
        }
    }

    public struct BatchListOutgoingTypedLinksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifiers", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Returns a typed link specifier as output.
        public let typedLinkSpecifiers: [TypedLinkSpecifier]?
        /// The pagination token.
        public let nextToken: String?

        public init(nextToken: String? = nil, typedLinkSpecifiers: [TypedLinkSpecifier]? = nil) {
            self.typedLinkSpecifiers = typedLinkSpecifiers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifiers = "TypedLinkSpecifiers"
            case nextToken = "NextToken"
        }
    }

    public struct DetachObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LinkName", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ParentReference", required: true, type: .structure)
        ]
        /// The link name associated with the object that needs to be detached.
        public let linkName: String
        /// The Amazon Resource Name (ARN) that is associated with the Directory where objects reside. For more information, see arns.
        public let directoryArn: String
        /// The parent reference from which the object with the specified link name is detached.
        public let parentReference: ObjectReference

        public init(directoryArn: String, linkName: String, parentReference: ObjectReference) {
            self.linkName = linkName
            self.directoryArn = directoryArn
            self.parentReference = parentReference
        }

        private enum CodingKeys: String, CodingKey {
            case linkName = "LinkName"
            case directoryArn = "x-amz-data-partition"
            case parentReference = "ParentReference"
        }
    }

    public struct DeleteDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The ARN of the directory to delete.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
        }
    }

    public enum BatchReadExceptionType: String, CustomStringConvertible, Codable {
        case validationexception = "ValidationException"
        case invalidarnexception = "InvalidArnException"
        case resourcenotfoundexception = "ResourceNotFoundException"
        case invalidnexttokenexception = "InvalidNextTokenException"
        case accessdeniedexception = "AccessDeniedException"
        case notnodeexception = "NotNodeException"
        case facetvalidationexception = "FacetValidationException"
        case cannotlistparentofrootexception = "CannotListParentOfRootException"
        case notindexexception = "NotIndexException"
        case notpolicyexception = "NotPolicyException"
        case directorynotenabledexception = "DirectoryNotEnabledException"
        case limitexceededexception = "LimitExceededException"
        case internalserviceexception = "InternalServiceException"
        public var description: String { return self.rawValue }
    }

    public struct TypedAttributeValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StringValue", required: false, type: .string), 
            AWSShapeMember(label: "DatetimeValue", required: false, type: .timestamp), 
            AWSShapeMember(label: "BinaryValue", required: false, type: .blob), 
            AWSShapeMember(label: "NumberValue", required: false, type: .string), 
            AWSShapeMember(label: "BooleanValue", required: false, type: .boolean)
        ]
        /// A string data value.
        public let stringValue: String?
        /// A date and time value.
        public let datetimeValue: TimeStamp?
        /// A binary data value.
        public let binaryValue: Data?
        /// A number data value.
        public let numberValue: String?
        /// A Boolean data value.
        public let booleanValue: Bool?

        public init(binaryValue: Data? = nil, booleanValue: Bool? = nil, datetimeValue: TimeStamp? = nil, numberValue: String? = nil, stringValue: String? = nil) {
            self.stringValue = stringValue
            self.datetimeValue = datetimeValue
            self.binaryValue = binaryValue
            self.numberValue = numberValue
            self.booleanValue = booleanValue
        }

        private enum CodingKeys: String, CodingKey {
            case stringValue = "StringValue"
            case datetimeValue = "DatetimeValue"
            case binaryValue = "BinaryValue"
            case numberValue = "NumberValue"
            case booleanValue = "BooleanValue"
        }
    }

    public struct DeleteObjectResponse: AWSShape {

        public init() {
        }

    }

    public struct BatchDetachPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "PolicyReference", required: true, type: .structure)
        ]
        /// Reference that identifies the object whose policy object will be detached.
        public let objectReference: ObjectReference
        /// Reference that identifies the policy object.
        public let policyReference: ObjectReference

        public init(objectReference: ObjectReference, policyReference: ObjectReference) {
            self.objectReference = objectReference
            self.policyReference = policyReference
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case policyReference = "PolicyReference"
        }
    }

    public struct BatchAttachPolicyResponse: AWSShape {

        public init() {
        }

    }

    public struct CreateIndexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrderedIndexedAttributeList", required: true, type: .list), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ParentReference", required: false, type: .structure), 
            AWSShapeMember(label: "IsUnique", required: true, type: .boolean), 
            AWSShapeMember(label: "LinkName", required: false, type: .string)
        ]
        /// Specifies the attributes that should be indexed on. Currently only a single attribute is supported.
        public let orderedIndexedAttributeList: [AttributeKey]
        /// The ARN of the directory where the index should be created.
        public let directoryArn: String
        /// A reference to the parent object that contains the index object.
        public let parentReference: ObjectReference?
        /// Indicates whether the attribute that is being indexed has unique values or not.
        public let isUnique: Bool
        /// The name of the link between the parent object and the index object.
        public let linkName: String?

        public init(directoryArn: String, isUnique: Bool, linkName: String? = nil, orderedIndexedAttributeList: [AttributeKey], parentReference: ObjectReference? = nil) {
            self.orderedIndexedAttributeList = orderedIndexedAttributeList
            self.directoryArn = directoryArn
            self.parentReference = parentReference
            self.isUnique = isUnique
            self.linkName = linkName
        }

        private enum CodingKeys: String, CodingKey {
            case orderedIndexedAttributeList = "OrderedIndexedAttributeList"
            case directoryArn = "x-amz-data-partition"
            case parentReference = "ParentReference"
            case isUnique = "IsUnique"
            case linkName = "LinkName"
        }
    }

    public struct BatchAttachPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "PolicyReference", required: true, type: .structure)
        ]
        /// The reference that identifies the object to which the policy will be attached.
        public let objectReference: ObjectReference
        /// The reference that is associated with the policy object.
        public let policyReference: ObjectReference

        public init(objectReference: ObjectReference, policyReference: ObjectReference) {
            self.objectReference = objectReference
            self.policyReference = policyReference
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case policyReference = "PolicyReference"
        }
    }

    public struct PolicyAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "PolicyType", required: false, type: .string), 
            AWSShapeMember(label: "PolicyId", required: false, type: .string)
        ]
        /// The ObjectIdentifier that is associated with PolicyAttachment.
        public let objectIdentifier: String?
        /// The type of policy that can be associated with PolicyAttachment.
        public let policyType: String?
        /// The ID of PolicyAttachment.
        public let policyId: String?

        public init(objectIdentifier: String? = nil, policyId: String? = nil, policyType: String? = nil) {
            self.objectIdentifier = objectIdentifier
            self.policyType = policyType
            self.policyId = policyId
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
            case policyType = "PolicyType"
            case policyId = "PolicyId"
        }
    }

    public struct BatchDetachObjectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the detached object.
        public let detachedObjectIdentifier: String?

        public init(detachedObjectIdentifier: String? = nil) {
            self.detachedObjectIdentifier = detachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case detachedObjectIdentifier = "detachedObjectIdentifier"
        }
    }

    public struct ListObjectParentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "IncludeAllLinksToEachParent", required: false, type: .boolean), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// When set to True, returns all ListObjectParentsResponse$ParentLinks. There could be multiple links between a parent-child pair.
        public let includeAllLinksToEachParent: Bool?
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        public let consistencyLevel: ConsistencyLevel?
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides. For more information, see arns.
        public let directoryArn: String
        /// The reference that identifies the object for which parent objects are being listed.
        public let objectReference: ObjectReference

        public init(consistencyLevel: ConsistencyLevel? = nil, directoryArn: String, includeAllLinksToEachParent: Bool? = nil, maxResults: Int32? = nil, nextToken: String? = nil, objectReference: ObjectReference) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.includeAllLinksToEachParent = includeAllLinksToEachParent
            self.consistencyLevel = consistencyLevel
            self.directoryArn = directoryArn
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case includeAllLinksToEachParent = "IncludeAllLinksToEachParent"
            case consistencyLevel = "x-amz-consistency-level"
            case directoryArn = "x-amz-data-partition"
            case objectReference = "ObjectReference"
        }
    }

    public struct ListObjectAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Attributes map that is associated with the object. AttributeArn is the key, and attribute value is the value.
        public let attributes: [AttributeKeyAndValue]?

        public init(attributes: [AttributeKeyAndValue]? = nil, nextToken: String? = nil) {
            self.nextToken = nextToken
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case attributes = "Attributes"
        }
    }

    public struct BatchListObjectParentPathsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PathToObjectIdentifiersList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Returns the path to the ObjectIdentifiers that are associated with the directory.
        public let pathToObjectIdentifiersList: [PathToObjectIdentifiers]?
        /// The pagination token.
        public let nextToken: String?

        public init(nextToken: String? = nil, pathToObjectIdentifiersList: [PathToObjectIdentifiers]? = nil) {
            self.pathToObjectIdentifiersList = pathToObjectIdentifiersList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case pathToObjectIdentifiersList = "PathToObjectIdentifiersList"
            case nextToken = "NextToken"
        }
    }

    public struct ListTypedLinkFacetAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// An ordered set of attributes associate with the typed link.
        public let attributes: [TypedLinkAttributeDefinition]?

        public init(attributes: [TypedLinkAttributeDefinition]? = nil, nextToken: String? = nil) {
            self.nextToken = nextToken
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case attributes = "Attributes"
        }
    }

    public struct BatchGetLinkAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifier", required: true, type: .structure), 
            AWSShapeMember(label: "AttributeNames", required: true, type: .list)
        ]
        /// Allows a typed link specifier to be accepted as input.
        public let typedLinkSpecifier: TypedLinkSpecifier
        /// A list of attribute names whose values will be retrieved.
        public let attributeNames: [String]

        public init(attributeNames: [String], typedLinkSpecifier: TypedLinkSpecifier) {
            self.typedLinkSpecifier = typedLinkSpecifier
            self.attributeNames = attributeNames
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifier = "TypedLinkSpecifier"
            case attributeNames = "AttributeNames"
        }
    }

    public struct BatchDetachPolicyResponse: AWSShape {

        public init() {
        }

    }

    public struct BatchCreateObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LinkName", required: false, type: .string), 
            AWSShapeMember(label: "ObjectAttributeList", required: true, type: .list), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .list), 
            AWSShapeMember(label: "ParentReference", required: false, type: .structure), 
            AWSShapeMember(label: "BatchReferenceName", required: false, type: .string)
        ]
        /// The name of the link.
        public let linkName: String?
        /// An attribute map, which contains an attribute ARN as the key and attribute value as the map value.
        public let objectAttributeList: [AttributeKeyAndValue]
        /// A list of FacetArns that will be associated with the object. For more information, see arns.
        public let schemaFacet: [SchemaFacet]
        /// If specified, the parent reference to which this object will be attached.
        public let parentReference: ObjectReference?
        /// The batch reference name. See Transaction Support for more information.
        public let batchReferenceName: String?

        public init(batchReferenceName: String? = nil, linkName: String? = nil, objectAttributeList: [AttributeKeyAndValue], parentReference: ObjectReference? = nil, schemaFacet: [SchemaFacet]) {
            self.linkName = linkName
            self.objectAttributeList = objectAttributeList
            self.schemaFacet = schemaFacet
            self.parentReference = parentReference
            self.batchReferenceName = batchReferenceName
        }

        private enum CodingKeys: String, CodingKey {
            case linkName = "LinkName"
            case objectAttributeList = "ObjectAttributeList"
            case schemaFacet = "SchemaFacet"
            case parentReference = "ParentReference"
            case batchReferenceName = "BatchReferenceName"
        }
    }

    public struct EnableDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The ARN of the directory to enable.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct ListFacetNamesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) to retrieve facet names from.
        public let schemaArn: String
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, schemaArn: String) {
            self.nextToken = nextToken
            self.schemaArn = schemaArn
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case schemaArn = "x-amz-data-partition"
            case maxResults = "MaxResults"
        }
    }

    public struct BatchReadRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "Operations", required: true, type: .list), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        public let consistencyLevel: ConsistencyLevel?
        /// A list of operations that are part of the batch.
        public let operations: [BatchReadOperation]
        /// The Amazon Resource Name (ARN) that is associated with the Directory. For more information, see arns.
        public let directoryArn: String

        public init(consistencyLevel: ConsistencyLevel? = nil, directoryArn: String, operations: [BatchReadOperation]) {
            self.consistencyLevel = consistencyLevel
            self.operations = operations
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case consistencyLevel = "x-amz-consistency-level"
            case operations = "Operations"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct TypedLinkAttributeRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Range", required: true, type: .structure), 
            AWSShapeMember(label: "AttributeName", required: false, type: .string)
        ]
        /// The range of attribute values that are being selected.
        public let range: TypedAttributeValueRange
        /// The unique name of the typed link attribute.
        public let attributeName: String?

        public init(attributeName: String? = nil, range: TypedAttributeValueRange) {
            self.range = range
            self.attributeName = attributeName
        }

        private enum CodingKeys: String, CodingKey {
            case range = "Range"
            case attributeName = "AttributeName"
        }
    }

    public struct UpdateSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the development schema. For more information, see arns.
        public let schemaArn: String
        /// The name of the schema.
        public let name: String

        public init(name: String, schemaArn: String) {
            self.schemaArn = schemaArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
        }
    }

    public struct BatchAttachObjectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the object that has been attached.
        public let attachedObjectIdentifier: String?

        public init(attachedObjectIdentifier: String? = nil) {
            self.attachedObjectIdentifier = attachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case attachedObjectIdentifier = "attachedObjectIdentifier"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource. Tagging is only supported for directories.
        public let resourceArn: String
        /// A list of tag key-value pairs.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tags = "Tags"
        }
    }

    public struct ListObjectParentPathsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PathToObjectIdentifiersList", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Returns the path to the ObjectIdentifiers that are associated with the directory.
        public let pathToObjectIdentifiersList: [PathToObjectIdentifiers]?

        public init(nextToken: String? = nil, pathToObjectIdentifiersList: [PathToObjectIdentifiers]? = nil) {
            self.nextToken = nextToken
            self.pathToObjectIdentifiersList = pathToObjectIdentifiersList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case pathToObjectIdentifiersList = "PathToObjectIdentifiersList"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The key that is associated with the tag.
        public let key: String?
        /// The value that is associated with the tag.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct BatchDetachFromIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the object that was detached from the index.
        public let detachedObjectIdentifier: String?

        public init(detachedObjectIdentifier: String? = nil) {
            self.detachedObjectIdentifier = detachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case detachedObjectIdentifier = "DetachedObjectIdentifier"
        }
    }

    public struct BatchReadOperationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SuccessfulResponse", required: false, type: .structure), 
            AWSShapeMember(label: "ExceptionResponse", required: false, type: .structure)
        ]
        /// Identifies which operation in a batch has succeeded.
        public let successfulResponse: BatchReadSuccessfulResponse?
        /// Identifies which operation in a batch has failed.
        public let exceptionResponse: BatchReadException?

        public init(exceptionResponse: BatchReadException? = nil, successfulResponse: BatchReadSuccessfulResponse? = nil) {
            self.successfulResponse = successfulResponse
            self.exceptionResponse = exceptionResponse
        }

        private enum CodingKeys: String, CodingKey {
            case successfulResponse = "SuccessfulResponse"
            case exceptionResponse = "ExceptionResponse"
        }
    }

}