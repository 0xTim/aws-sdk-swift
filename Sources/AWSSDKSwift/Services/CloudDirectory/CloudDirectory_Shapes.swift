// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension CloudDirectory {

    public struct DetachObjectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier that was detached from the object.
        public let detachedObjectIdentifier: String?

        public init(detachedObjectIdentifier: String? = nil) {
            self.detachedObjectIdentifier = detachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case detachedObjectIdentifier = "DetachedObjectIdentifier"
        }
    }

    public struct ListIncomingTypedLinksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "LinkSpecifiers", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Returns one or more typed link specifiers as output.
        public let linkSpecifiers: [TypedLinkSpecifier]?

        public init(nextToken: String? = nil, linkSpecifiers: [TypedLinkSpecifier]? = nil) {
            self.nextToken = nextToken
            self.linkSpecifiers = linkSpecifiers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case linkSpecifiers = "LinkSpecifiers"
        }
    }

    public struct CreateSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String?

        public init(schemaArn: String? = nil) {
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
        }
    }

    public struct BatchReadException: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        /// An exception message that is associated with the failure.
        public let message: String?
        /// A type of exception, such as InvalidArnException.
        public let `type`: BatchReadExceptionType?

        public init(message: String? = nil, type: BatchReadExceptionType? = nil) {
            self.message = message
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case `type` = "Type"
        }
    }

    public struct UpdateSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: false, type: .string)
        ]
        /// The ARN that is associated with the updated schema. For more information, see arns.
        public let schemaArn: String?

        public init(schemaArn: String? = nil) {
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
        }
    }

    public struct RemoveFacetFromObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .structure)
        ]
        /// A reference to the object to remove the facet from.
        public let objectReference: ObjectReference
        /// The ARN of the directory in which the object resides.
        public let directoryArn: String
        /// The facet to remove. See SchemaFacet for details.
        public let schemaFacet: SchemaFacet

        public init(objectReference: ObjectReference, directoryArn: String, schemaFacet: SchemaFacet) {
            self.objectReference = objectReference
            self.directoryArn = directoryArn
            self.schemaFacet = schemaFacet
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case directoryArn = "x-amz-data-partition"
            case schemaFacet = "SchemaFacet"
        }
    }

    public struct BatchListObjectChildren: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Reference of the object for which child objects are being listed.
        public let objectReference: ObjectReference
        /// Maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, objectReference: ObjectReference, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.objectReference = objectReference
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case objectReference = "ObjectReference"
            case maxResults = "MaxResults"
        }
    }

    public struct TagResourceResponse: AWSShape {

    }

    public struct BatchListIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "IndexAttachments", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The objects and indexed values attached to the index.
        public let indexAttachments: [IndexAttachment]?

        public init(nextToken: String? = nil, indexAttachments: [IndexAttachment]? = nil) {
            self.nextToken = nextToken
            self.indexAttachments = indexAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case indexAttachments = "IndexAttachments"
        }
    }

    public struct UpdateFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeUpdates", required: false, type: .list), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ObjectType", required: false, type: .enum)
        ]
        /// List of attributes that need to be updated in a given schema Facet. Each attribute is followed by AttributeAction, which specifies the type of update operation to perform. 
        public let attributeUpdates: [FacetAttributeUpdate]?
        /// The Amazon Resource Name (ARN) that is associated with the Facet. For more information, see arns.
        public let schemaArn: String
        /// The name of the facet.
        public let name: String
        /// The object type that is associated with the facet. See CreateFacetRequest$ObjectType for more details.
        public let objectType: ObjectType?

        public init(attributeUpdates: [FacetAttributeUpdate]? = nil, schemaArn: String, name: String, objectType: ObjectType? = nil) {
            self.attributeUpdates = attributeUpdates
            self.schemaArn = schemaArn
            self.name = name
            self.objectType = objectType
        }

        private enum CodingKeys: String, CodingKey {
            case attributeUpdates = "AttributeUpdates"
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
            case objectType = "ObjectType"
        }
    }

    public struct BatchUpdateLinkAttributesResponse: AWSShape {

    }

    public struct DetachObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LinkName", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ParentReference", required: true, type: .structure)
        ]
        /// The link name associated with the object that needs to be detached.
        public let linkName: String
        /// The Amazon Resource Name (ARN) that is associated with the Directory where objects reside. For more information, see arns.
        public let directoryArn: String
        /// The parent reference from which the object with the specified link name is detached.
        public let parentReference: ObjectReference

        public init(linkName: String, directoryArn: String, parentReference: ObjectReference) {
            self.linkName = linkName
            self.directoryArn = directoryArn
            self.parentReference = parentReference
        }

        private enum CodingKeys: String, CodingKey {
            case linkName = "LinkName"
            case directoryArn = "x-amz-data-partition"
            case parentReference = "ParentReference"
        }
    }

    public struct ListObjectChildrenResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Children", required: false, type: .map)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Children structure, which is a map with key as the LinkName and ObjectIdentifier as the value.
        public let children: [String: String]?

        public init(nextToken: String? = nil, children: [String: String]? = nil) {
            self.nextToken = nextToken
            self.children = children
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case children = "Children"
        }
    }

    public struct UpgradePublishedSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpgradedSchemaArn", required: false, type: .string)
        ]
        /// The ARN of the upgraded schema that is returned as part of the response.
        public let upgradedSchemaArn: String?

        public init(upgradedSchemaArn: String? = nil) {
            self.upgradedSchemaArn = upgradedSchemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case upgradedSchemaArn = "UpgradedSchemaArn"
        }
    }

    public struct ListObjectParentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Parents", required: false, type: .map)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The parent structure, which is a map with key as the ObjectIdentifier and LinkName as the value.
        public let parents: [String: String]?

        public init(nextToken: String? = nil, parents: [String: String]? = nil) {
            self.nextToken = nextToken
            self.parents = parents
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case parents = "Parents"
        }
    }

    public struct ObjectAttributeRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Range", required: false, type: .structure), 
            AWSShapeMember(label: "AttributeKey", required: false, type: .structure)
        ]
        /// The range of attribute values being selected.
        public let range: TypedAttributeValueRange?
        /// The key of the attribute that the attribute range covers.
        public let attributeKey: AttributeKey?

        public init(range: TypedAttributeValueRange? = nil, attributeKey: AttributeKey? = nil) {
            self.range = range
            self.attributeKey = attributeKey
        }

        private enum CodingKeys: String, CodingKey {
            case range = "Range"
            case attributeKey = "AttributeKey"
        }
    }

    public struct GetObjectAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeNames", required: true, type: .list), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .structure), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// List of attribute names whose values will be retrieved.
        public let attributeNames: [String]
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides.
        public let directoryArn: String
        /// The consistency level at which to retrieve the attributes on an object.
        public let consistencyLevel: ConsistencyLevel?
        /// Identifier for the facet whose attributes will be retrieved. See SchemaFacet for details.
        public let schemaFacet: SchemaFacet
        /// Reference that identifies the object whose attributes will be retrieved.
        public let objectReference: ObjectReference

        public init(attributeNames: [String], directoryArn: String, consistencyLevel: ConsistencyLevel? = nil, schemaFacet: SchemaFacet, objectReference: ObjectReference) {
            self.attributeNames = attributeNames
            self.directoryArn = directoryArn
            self.consistencyLevel = consistencyLevel
            self.schemaFacet = schemaFacet
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case attributeNames = "AttributeNames"
            case directoryArn = "x-amz-data-partition"
            case consistencyLevel = "x-amz-consistency-level"
            case schemaFacet = "SchemaFacet"
            case objectReference = "ObjectReference"
        }
    }

    public struct BatchAttachToIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the object that was attached to the index.
        public let attachedObjectIdentifier: String?

        public init(attachedObjectIdentifier: String? = nil) {
            self.attachedObjectIdentifier = attachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case attachedObjectIdentifier = "AttachedObjectIdentifier"
        }
    }

    public struct BatchListIncomingTypedLinks: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "FilterAttributeRanges", required: false, type: .list), 
            AWSShapeMember(label: "FilterTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
        public let filterAttributeRanges: [TypedLinkAttributeRange]?
        /// Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls.
        public let filterTypedLink: TypedLinkSchemaAndFacetName?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference

        public init(nextToken: String? = nil, filterAttributeRanges: [TypedLinkAttributeRange]? = nil, filterTypedLink: TypedLinkSchemaAndFacetName? = nil, maxResults: Int32? = nil, objectReference: ObjectReference) {
            self.nextToken = nextToken
            self.filterAttributeRanges = filterAttributeRanges
            self.filterTypedLink = filterTypedLink
            self.maxResults = maxResults
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filterAttributeRanges = "FilterAttributeRanges"
            case filterTypedLink = "FilterTypedLink"
            case maxResults = "MaxResults"
            case objectReference = "ObjectReference"
        }
    }

    public struct DeleteFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Facet. For more information, see arns.
        public let schemaArn: String
        /// The name of the facet to delete.
        public let name: String

        public init(schemaArn: String, name: String) {
            self.schemaArn = schemaArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
        }
    }

    public struct BatchDetachPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "PolicyReference", required: true, type: .structure)
        ]
        /// Reference that identifies the object whose policy object will be detached.
        public let objectReference: ObjectReference
        /// Reference that identifies the policy object.
        public let policyReference: ObjectReference

        public init(objectReference: ObjectReference, policyReference: ObjectReference) {
            self.objectReference = objectReference
            self.policyReference = policyReference
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case policyReference = "PolicyReference"
        }
    }

    public struct AttachObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LinkName", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ChildReference", required: true, type: .structure), 
            AWSShapeMember(label: "ParentReference", required: true, type: .structure)
        ]
        /// The link name with which the child object is attached to the parent.
        public let linkName: String
        /// Amazon Resource Name (ARN) that is associated with the Directory where both objects reside. For more information, see arns.
        public let directoryArn: String
        /// The child object reference to be attached to the object.
        public let childReference: ObjectReference
        /// The parent object reference.
        public let parentReference: ObjectReference

        public init(linkName: String, directoryArn: String, childReference: ObjectReference, parentReference: ObjectReference) {
            self.linkName = linkName
            self.directoryArn = directoryArn
            self.childReference = childReference
            self.parentReference = parentReference
        }

        private enum CodingKeys: String, CodingKey {
            case linkName = "LinkName"
            case directoryArn = "x-amz-data-partition"
            case childReference = "ChildReference"
            case parentReference = "ParentReference"
        }
    }

    public struct LookupPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The token to request the next page of results.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) that is associated with the Directory. For more information, see arns.
        public let directoryArn: String
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// Reference that identifies the object whose policies will be looked up.
        public let objectReference: ObjectReference

        public init(nextToken: String? = nil, directoryArn: String, maxResults: Int32? = nil, objectReference: ObjectReference) {
            self.nextToken = nextToken
            self.directoryArn = directoryArn
            self.maxResults = maxResults
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case directoryArn = "x-amz-data-partition"
            case maxResults = "MaxResults"
            case objectReference = "ObjectReference"
        }
    }

    public struct ListPublishedSchemaArnsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArns", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The ARNs of published schemas.
        public let schemaArns: [String]?
        /// The pagination token.
        public let nextToken: String?

        public init(schemaArns: [String]? = nil, nextToken: String? = nil) {
            self.schemaArns = schemaArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArns = "SchemaArns"
            case nextToken = "NextToken"
        }
    }

    public enum RangeMode: String, CustomStringConvertible, Codable {
        case first = "FIRST"
        case last = "LAST"
        case lastBeforeMissingValues = "LAST_BEFORE_MISSING_VALUES"
        case inclusive = "INCLUSIVE"
        case exclusive = "EXCLUSIVE"
        public var description: String { return self.rawValue }
    }

    public struct BatchAddFacetToObjectResponse: AWSShape {

    }

    public struct GetFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Facet. For more information, see arns.
        public let schemaArn: String
        /// The name of the facet to retrieve.
        public let name: String

        public init(schemaArn: String, name: String) {
            self.schemaArn = schemaArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
        }
    }

    public struct ApplySchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublishedSchemaArn", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// Published schema Amazon Resource Name (ARN) that needs to be copied. For more information, see arns.
        public let publishedSchemaArn: String
        /// The Amazon Resource Name (ARN) that is associated with the Directory into which the schema is copied. For more information, see arns.
        public let directoryArn: String

        public init(publishedSchemaArn: String, directoryArn: String) {
            self.publishedSchemaArn = publishedSchemaArn
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case publishedSchemaArn = "PublishedSchemaArn"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct ListOutgoingTypedLinksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TypedLinkSpecifiers", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Returns a typed link specifier as output.
        public let typedLinkSpecifiers: [TypedLinkSpecifier]?

        public init(nextToken: String? = nil, typedLinkSpecifiers: [TypedLinkSpecifier]? = nil) {
            self.nextToken = nextToken
            self.typedLinkSpecifiers = typedLinkSpecifiers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case typedLinkSpecifiers = "TypedLinkSpecifiers"
        }
    }

    public struct ObjectAttributeAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectAttributeActionType", required: false, type: .enum), 
            AWSShapeMember(label: "ObjectAttributeUpdateValue", required: false, type: .structure)
        ]
        /// A type that can be either Update or Delete.
        public let objectAttributeActionType: UpdateActionType?
        /// The value that you want to update to.
        public let objectAttributeUpdateValue: TypedAttributeValue?

        public init(objectAttributeActionType: UpdateActionType? = nil, objectAttributeUpdateValue: TypedAttributeValue? = nil) {
            self.objectAttributeActionType = objectAttributeActionType
            self.objectAttributeUpdateValue = objectAttributeUpdateValue
        }

        private enum CodingKeys: String, CodingKey {
            case objectAttributeActionType = "ObjectAttributeActionType"
            case objectAttributeUpdateValue = "ObjectAttributeUpdateValue"
        }
    }

    public enum BatchReadExceptionType: String, CustomStringConvertible, Codable {
        case validationexception = "ValidationException"
        case invalidarnexception = "InvalidArnException"
        case resourcenotfoundexception = "ResourceNotFoundException"
        case invalidnexttokenexception = "InvalidNextTokenException"
        case accessdeniedexception = "AccessDeniedException"
        case notnodeexception = "NotNodeException"
        case facetvalidationexception = "FacetValidationException"
        case cannotlistparentofrootexception = "CannotListParentOfRootException"
        case notindexexception = "NotIndexException"
        case notpolicyexception = "NotPolicyException"
        case directorynotenabledexception = "DirectoryNotEnabledException"
        case limitexceededexception = "LimitExceededException"
        case internalserviceexception = "InternalServiceException"
        public var description: String { return self.rawValue }
    }

    public struct UpgradeAppliedSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublishedSchemaArn", required: true, type: .string), 
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "DirectoryArn", required: true, type: .string)
        ]
        /// The revision of the published schema to upgrade the directory to.
        public let publishedSchemaArn: String
        /// Used for testing whether the major version schemas are backward compatible or not. If schema compatibility fails, an exception would be thrown else the call would succeed but no changes will be saved. This parameter is optional.
        public let dryRun: Bool?
        /// The ARN for the directory to which the upgraded schema will be applied.
        public let directoryArn: String

        public init(publishedSchemaArn: String, dryRun: Bool? = nil, directoryArn: String) {
            self.publishedSchemaArn = publishedSchemaArn
            self.dryRun = dryRun
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case publishedSchemaArn = "PublishedSchemaArn"
            case dryRun = "DryRun"
            case directoryArn = "DirectoryArn"
        }
    }

    public struct ListPolicyAttachmentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "PolicyReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) that is associated with the Directory where objects reside. For more information, see arns.
        public let directoryArn: String
        /// The reference that identifies the policy object.
        public let policyReference: ObjectReference
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        public let consistencyLevel: ConsistencyLevel?

        public init(nextToken: String? = nil, directoryArn: String, policyReference: ObjectReference, maxResults: Int32? = nil, consistencyLevel: ConsistencyLevel? = nil) {
            self.nextToken = nextToken
            self.directoryArn = directoryArn
            self.policyReference = policyReference
            self.maxResults = maxResults
            self.consistencyLevel = consistencyLevel
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case directoryArn = "x-amz-data-partition"
            case policyReference = "PolicyReference"
            case maxResults = "MaxResults"
            case consistencyLevel = "x-amz-consistency-level"
        }
    }

    public struct UpdateObjectAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the updated object.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct CreateTypedLinkFacetResponse: AWSShape {

    }

    public struct EnableDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The ARN of the directory to enable.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
        }
    }

    public enum ConsistencyLevel: String, CustomStringConvertible, Codable {
        case serializable = "SERIALIZABLE"
        case eventual = "EVENTUAL"
        public var description: String { return self.rawValue }
    }

    public struct AttributeKeyAndValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .structure), 
            AWSShapeMember(label: "Value", required: true, type: .structure)
        ]
        /// The key of the attribute.
        public let key: AttributeKey
        /// The value of the attribute.
        public let value: TypedAttributeValue

        public init(key: AttributeKey, value: TypedAttributeValue) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct BatchAttachObjectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the object that has been attached.
        public let attachedObjectIdentifier: String?

        public init(attachedObjectIdentifier: String? = nil) {
            self.attachedObjectIdentifier = attachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case attachedObjectIdentifier = "attachedObjectIdentifier"
        }
    }

    public struct ListObjectParentPathsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PathToObjectIdentifiersList", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Returns the path to the ObjectIdentifiers that are associated with the directory.
        public let pathToObjectIdentifiersList: [PathToObjectIdentifiers]?

        public init(nextToken: String? = nil, pathToObjectIdentifiersList: [PathToObjectIdentifiers]? = nil) {
            self.nextToken = nextToken
            self.pathToObjectIdentifiersList = pathToObjectIdentifiersList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case pathToObjectIdentifiersList = "PathToObjectIdentifiersList"
        }
    }

    public struct DetachTypedLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifier", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// Used to accept a typed link specifier as input.
        public let typedLinkSpecifier: TypedLinkSpecifier
        /// The Amazon Resource Name (ARN) of the directory where you want to detach the typed link.
        public let directoryArn: String

        public init(typedLinkSpecifier: TypedLinkSpecifier, directoryArn: String) {
            self.typedLinkSpecifier = typedLinkSpecifier
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifier = "TypedLinkSpecifier"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct UpdateFacetResponse: AWSShape {

    }

    public struct ListObjectAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "FacetFilter", required: false, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Used to filter the list of object attributes that are associated with a certain facet.
        public let facetFilter: SchemaFacet?
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides. For more information, see arns.
        public let directoryArn: String
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        public let consistencyLevel: ConsistencyLevel?
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// The reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference

        public init(nextToken: String? = nil, facetFilter: SchemaFacet? = nil, directoryArn: String, consistencyLevel: ConsistencyLevel? = nil, maxResults: Int32? = nil, objectReference: ObjectReference) {
            self.nextToken = nextToken
            self.facetFilter = facetFilter
            self.directoryArn = directoryArn
            self.consistencyLevel = consistencyLevel
            self.maxResults = maxResults
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case facetFilter = "FacetFilter"
            case directoryArn = "x-amz-data-partition"
            case consistencyLevel = "x-amz-consistency-level"
            case maxResults = "MaxResults"
            case objectReference = "ObjectReference"
        }
    }

    public struct AttributeNameAndValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .structure)
        ]
        /// The attribute name of the typed link.
        public let attributeName: String
        /// The value for the typed link.
        public let value: TypedAttributeValue

        public init(attributeName: String, value: TypedAttributeValue) {
            self.attributeName = attributeName
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case value = "Value"
        }
    }

    public struct ListFacetNamesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "FacetNames", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The names of facets that exist within the schema.
        public let facetNames: [String]?

        public init(nextToken: String? = nil, facetNames: [String]? = nil) {
            self.nextToken = nextToken
            self.facetNames = facetNames
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case facetNames = "FacetNames"
        }
    }

    public struct ListAttachedIndicesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "IndexAttachments", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The indices attached to the specified object.
        public let indexAttachments: [IndexAttachment]?

        public init(nextToken: String? = nil, indexAttachments: [IndexAttachment]? = nil) {
            self.nextToken = nextToken
            self.indexAttachments = indexAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case indexAttachments = "IndexAttachments"
        }
    }

    public struct RemoveFacetFromObjectResponse: AWSShape {

    }

    public struct ListDirectoriesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "state", required: false, type: .enum), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The state of the directories in the list. Can be either Enabled, Disabled, or Deleted.
        public let state: DirectoryState?
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(state: DirectoryState? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.state = state
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct ListObjectParentPathsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The ARN of the directory to which the parent path applies.
        public let directoryArn: String
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// The reference that identifies the object whose parent paths are listed.
        public let objectReference: ObjectReference

        public init(nextToken: String? = nil, directoryArn: String, maxResults: Int32? = nil, objectReference: ObjectReference) {
            self.nextToken = nextToken
            self.directoryArn = directoryArn
            self.maxResults = maxResults
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case directoryArn = "x-amz-data-partition"
            case maxResults = "MaxResults"
            case objectReference = "ObjectReference"
        }
    }

    public struct ListManagedSchemaArnsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The response for ListManagedSchemaArns. When this parameter is used, all minor version ARNs for a major version are listed.
        public let schemaArn: String?
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(schemaArn: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.schemaArn = schemaArn
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct UpdateTypedLinkFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "IdentityAttributeOrder", required: true, type: .list), 
            AWSShapeMember(label: "AttributeUpdates", required: true, type: .list)
        ]
        /// The unique name of the typed link facet.
        public let name: String
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String
        /// The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed links considers the order that the attributes are defined on the typed link facet. When providing ranges to a typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range. Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls. For more information about identity attributes, see Typed link.
        public let identityAttributeOrder: [String]
        /// Attributes update structure.
        public let attributeUpdates: [TypedLinkFacetAttributeUpdate]

        public init(name: String, schemaArn: String, identityAttributeOrder: [String], attributeUpdates: [TypedLinkFacetAttributeUpdate]) {
            self.name = name
            self.schemaArn = schemaArn
            self.identityAttributeOrder = identityAttributeOrder
            self.attributeUpdates = attributeUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case schemaArn = "x-amz-data-partition"
            case identityAttributeOrder = "IdentityAttributeOrder"
            case attributeUpdates = "AttributeUpdates"
        }
    }

    public struct UpdateLinkAttributesResponse: AWSShape {

    }

    public struct BatchListObjectPoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachedPolicyIds", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of policy ObjectIdentifiers, that are attached to the object.
        public let attachedPolicyIds: [String]?
        /// The pagination token.
        public let nextToken: String?

        public init(attachedPolicyIds: [String]? = nil, nextToken: String? = nil) {
            self.attachedPolicyIds = attachedPolicyIds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case attachedPolicyIds = "AttachedPolicyIds"
            case nextToken = "NextToken"
        }
    }

    public struct BatchListOutgoingTypedLinksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TypedLinkSpecifiers", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Returns a typed link specifier as output.
        public let typedLinkSpecifiers: [TypedLinkSpecifier]?

        public init(nextToken: String? = nil, typedLinkSpecifiers: [TypedLinkSpecifier]? = nil) {
            self.nextToken = nextToken
            self.typedLinkSpecifiers = typedLinkSpecifiers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case typedLinkSpecifiers = "TypedLinkSpecifiers"
        }
    }

    public struct Facet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectType", required: false, type: .enum), 
            AWSShapeMember(label: "FacetStyle", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The object type that is associated with the facet. See CreateFacetRequest$ObjectType for more details.
        public let objectType: ObjectType?
        /// There are two different styles that you can define on any given facet, Static and Dynamic. For static facets, all attributes must be defined in the schema. For dynamic facets, attributes can be defined during data plane operations.
        public let facetStyle: FacetStyle?
        /// The name of the Facet.
        public let name: String?

        public init(objectType: ObjectType? = nil, facetStyle: FacetStyle? = nil, name: String? = nil) {
            self.objectType = objectType
            self.facetStyle = facetStyle
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case objectType = "ObjectType"
            case facetStyle = "FacetStyle"
            case name = "Name"
        }
    }

    public struct EnableDirectoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", required: true, type: .string)
        ]
        /// The ARN of the enabled directory.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "DirectoryArn"
        }
    }

    public struct BatchWriteOperation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachObject", required: false, type: .structure), 
            AWSShapeMember(label: "CreateObject", required: false, type: .structure), 
            AWSShapeMember(label: "AttachToIndex", required: false, type: .structure), 
            AWSShapeMember(label: "DeleteObject", required: false, type: .structure), 
            AWSShapeMember(label: "RemoveFacetFromObject", required: false, type: .structure), 
            AWSShapeMember(label: "UpdateObjectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "DetachPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "CreateIndex", required: false, type: .structure), 
            AWSShapeMember(label: "UpdateLinkAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "DetachFromIndex", required: false, type: .structure), 
            AWSShapeMember(label: "DetachTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "AddFacetToObject", required: false, type: .structure), 
            AWSShapeMember(label: "AttachTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "DetachObject", required: false, type: .structure), 
            AWSShapeMember(label: "AttachPolicy", required: false, type: .structure)
        ]
        /// Attaches an object to a Directory.
        public let attachObject: BatchAttachObject?
        /// Creates an object.
        public let createObject: BatchCreateObject?
        /// Attaches the specified object to the specified index.
        public let attachToIndex: BatchAttachToIndex?
        /// Deletes an object in a Directory.
        public let deleteObject: BatchDeleteObject?
        /// A batch operation that removes a facet from an object.
        public let removeFacetFromObject: BatchRemoveFacetFromObject?
        /// Updates a given object's attributes.
        public let updateObjectAttributes: BatchUpdateObjectAttributes?
        /// Detaches a policy from a Directory.
        public let detachPolicy: BatchDetachPolicy?
        /// Creates an index object. See Indexing for more information.
        public let createIndex: BatchCreateIndex?
        /// Updates a given object's attributes.
        public let updateLinkAttributes: BatchUpdateLinkAttributes?
        /// Detaches the specified object from the specified index.
        public let detachFromIndex: BatchDetachFromIndex?
        /// Detaches a typed link from a specified source and target object. For more information, see Typed link.
        public let detachTypedLink: BatchDetachTypedLink?
        /// A batch operation that adds a facet to an object.
        public let addFacetToObject: BatchAddFacetToObject?
        /// Attaches a typed link to a specified source and target object. For more information, see Typed link.
        public let attachTypedLink: BatchAttachTypedLink?
        /// Detaches an object from a Directory.
        public let detachObject: BatchDetachObject?
        /// Attaches a policy object to a regular object. An object can have a limited number of attached policies.
        public let attachPolicy: BatchAttachPolicy?

        public init(attachObject: BatchAttachObject? = nil, createObject: BatchCreateObject? = nil, attachToIndex: BatchAttachToIndex? = nil, deleteObject: BatchDeleteObject? = nil, removeFacetFromObject: BatchRemoveFacetFromObject? = nil, updateObjectAttributes: BatchUpdateObjectAttributes? = nil, detachPolicy: BatchDetachPolicy? = nil, createIndex: BatchCreateIndex? = nil, updateLinkAttributes: BatchUpdateLinkAttributes? = nil, detachFromIndex: BatchDetachFromIndex? = nil, detachTypedLink: BatchDetachTypedLink? = nil, addFacetToObject: BatchAddFacetToObject? = nil, attachTypedLink: BatchAttachTypedLink? = nil, detachObject: BatchDetachObject? = nil, attachPolicy: BatchAttachPolicy? = nil) {
            self.attachObject = attachObject
            self.createObject = createObject
            self.attachToIndex = attachToIndex
            self.deleteObject = deleteObject
            self.removeFacetFromObject = removeFacetFromObject
            self.updateObjectAttributes = updateObjectAttributes
            self.detachPolicy = detachPolicy
            self.createIndex = createIndex
            self.updateLinkAttributes = updateLinkAttributes
            self.detachFromIndex = detachFromIndex
            self.detachTypedLink = detachTypedLink
            self.addFacetToObject = addFacetToObject
            self.attachTypedLink = attachTypedLink
            self.detachObject = detachObject
            self.attachPolicy = attachPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case attachObject = "AttachObject"
            case createObject = "CreateObject"
            case attachToIndex = "AttachToIndex"
            case deleteObject = "DeleteObject"
            case removeFacetFromObject = "RemoveFacetFromObject"
            case updateObjectAttributes = "UpdateObjectAttributes"
            case detachPolicy = "DetachPolicy"
            case createIndex = "CreateIndex"
            case updateLinkAttributes = "UpdateLinkAttributes"
            case detachFromIndex = "DetachFromIndex"
            case detachTypedLink = "DetachTypedLink"
            case addFacetToObject = "AddFacetToObject"
            case attachTypedLink = "AttachTypedLink"
            case detachObject = "DetachObject"
            case attachPolicy = "AttachPolicy"
        }
    }

    public struct DetachFromIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the object that was detached from the index.
        public let detachedObjectIdentifier: String?

        public init(detachedObjectIdentifier: String? = nil) {
            self.detachedObjectIdentifier = detachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case detachedObjectIdentifier = "DetachedObjectIdentifier"
        }
    }

    public struct BatchDetachFromIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the object that was detached from the index.
        public let detachedObjectIdentifier: String?

        public init(detachedObjectIdentifier: String? = nil) {
            self.detachedObjectIdentifier = detachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case detachedObjectIdentifier = "DetachedObjectIdentifier"
        }
    }

    public struct PublishSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PublishedSchemaArn", required: false, type: .string)
        ]
        /// The ARN that is associated with the published schema. For more information, see arns.
        public let publishedSchemaArn: String?

        public init(publishedSchemaArn: String? = nil) {
            self.publishedSchemaArn = publishedSchemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case publishedSchemaArn = "PublishedSchemaArn"
        }
    }

    public struct BatchListIncomingTypedLinksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "LinkSpecifiers", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Returns one or more typed link specifiers as output.
        public let linkSpecifiers: [TypedLinkSpecifier]?

        public init(nextToken: String? = nil, linkSpecifiers: [TypedLinkSpecifier]? = nil) {
            self.nextToken = nextToken
            self.linkSpecifiers = linkSpecifiers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case linkSpecifiers = "LinkSpecifiers"
        }
    }

    public struct DisableDirectoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", required: true, type: .string)
        ]
        /// The ARN of the directory that has been disabled.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "DirectoryArn"
        }
    }

    public struct CreateObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LinkName", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectAttributeList", required: false, type: .list), 
            AWSShapeMember(label: "ParentReference", required: false, type: .structure), 
            AWSShapeMember(label: "SchemaFacets", required: true, type: .list)
        ]
        /// The name of link that is used to attach this object to a parent.
        public let linkName: String?
        /// The Amazon Resource Name (ARN) that is associated with the Directory in which the object will be created. For more information, see arns.
        public let directoryArn: String
        /// The attribute map whose attribute ARN contains the key and attribute value as the map value.
        public let objectAttributeList: [AttributeKeyAndValue]?
        /// If specified, the parent reference to which this object will be attached.
        public let parentReference: ObjectReference?
        /// A list of schema facets to be associated with the object. Do not provide minor version components. See SchemaFacet for details.
        public let schemaFacets: [SchemaFacet]

        public init(linkName: String? = nil, directoryArn: String, objectAttributeList: [AttributeKeyAndValue]? = nil, parentReference: ObjectReference? = nil, schemaFacets: [SchemaFacet]) {
            self.linkName = linkName
            self.directoryArn = directoryArn
            self.objectAttributeList = objectAttributeList
            self.parentReference = parentReference
            self.schemaFacets = schemaFacets
        }

        private enum CodingKeys: String, CodingKey {
            case linkName = "LinkName"
            case directoryArn = "x-amz-data-partition"
            case objectAttributeList = "ObjectAttributeList"
            case parentReference = "ParentReference"
            case schemaFacets = "SchemaFacets"
        }
    }

    public struct BatchListObjectChildrenResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Children", required: false, type: .map)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The children structure, which is a map with the key as the LinkName and ObjectIdentifier as the value.
        public let children: [String: String]?

        public init(nextToken: String? = nil, children: [String: String]? = nil) {
            self.nextToken = nextToken
            self.children = children
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case children = "Children"
        }
    }

    public struct UpdateSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the development schema. For more information, see arns.
        public let schemaArn: String
        /// The name of the schema.
        public let name: String

        public init(schemaArn: String, name: String) {
            self.schemaArn = schemaArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
        }
    }

    public struct CreateTypedLinkFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Facet", required: true, type: .structure)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String
        ///  Facet structure that is associated with the typed link facet.
        public let facet: TypedLinkFacet

        public init(schemaArn: String, facet: TypedLinkFacet) {
            self.schemaArn = schemaArn
            self.facet = facet
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case facet = "Facet"
        }
    }

    public struct ObjectReference: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Selector", required: false, type: .string)
        ]
        /// A path selector supports easy selection of an object by the parent/child links leading to it from the directory root. Use the link names from each parent/child link to construct the path. Path selectors start with a slash (/) and link names are separated by slashes. For more information about paths, see Accessing Objects. You can identify an object in one of the following ways:    $ObjectIdentifier - An object identifier is an opaque string provided by Amazon Cloud Directory. When creating objects, the system will provide you with the identifier of the created object. An object’s identifier is immutable and no two objects will ever share the same object identifier    /some/path - Identifies the object based on path    #SomeBatchReference - Identifies the object in a batch call  
        public let selector: String?

        public init(selector: String? = nil) {
            self.selector = selector
        }

        private enum CodingKeys: String, CodingKey {
            case selector = "Selector"
        }
    }

    public struct BatchAttachObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LinkName", required: true, type: .string), 
            AWSShapeMember(label: "ChildReference", required: true, type: .structure), 
            AWSShapeMember(label: "ParentReference", required: true, type: .structure)
        ]
        /// The name of the link.
        public let linkName: String
        /// The child object reference that is to be attached to the object.
        public let childReference: ObjectReference
        /// The parent object reference.
        public let parentReference: ObjectReference

        public init(linkName: String, childReference: ObjectReference, parentReference: ObjectReference) {
            self.linkName = linkName
            self.childReference = childReference
            self.parentReference = parentReference
        }

        private enum CodingKeys: String, CodingKey {
            case linkName = "LinkName"
            case childReference = "ChildReference"
            case parentReference = "ParentReference"
        }
    }

    public struct BatchGetLinkAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The attributes that are associated with the typed link.
        public let attributes: [AttributeKeyAndValue]?

        public init(attributes: [AttributeKeyAndValue]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct BatchCreateIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the index created by this operation.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct FacetAttributeReference: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetFacetName", required: true, type: .string), 
            AWSShapeMember(label: "TargetAttributeName", required: true, type: .string)
        ]
        /// The target facet name that is associated with the facet reference. See Attribute References for more information.
        public let targetFacetName: String
        /// The target attribute name that is associated with the facet reference. See Attribute References for more information.
        public let targetAttributeName: String

        public init(targetFacetName: String, targetAttributeName: String) {
            self.targetFacetName = targetFacetName
            self.targetAttributeName = targetAttributeName
        }

        private enum CodingKeys: String, CodingKey {
            case targetFacetName = "TargetFacetName"
            case targetAttributeName = "TargetAttributeName"
        }
    }

    public struct PutSchemaFromJsonResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        /// The ARN of the schema to update.
        public let arn: String?

        public init(arn: String? = nil) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
        }
    }

    public struct ListAttachedIndicesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TargetReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// A reference to the object that has indices attached.
        public let targetReference: ObjectReference
        /// The ARN of the directory.
        public let directoryArn: String
        /// The consistency level to use for this operation.
        public let consistencyLevel: ConsistencyLevel?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, targetReference: ObjectReference, directoryArn: String, consistencyLevel: ConsistencyLevel? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.targetReference = targetReference
            self.directoryArn = directoryArn
            self.consistencyLevel = consistencyLevel
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case targetReference = "TargetReference"
            case directoryArn = "x-amz-data-partition"
            case consistencyLevel = "x-amz-consistency-level"
            case maxResults = "MaxResults"
        }
    }

    public struct AddFacetToObjectResponse: AWSShape {

    }

    public struct BatchListObjectParentPathsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PathToObjectIdentifiersList", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Returns the path to the ObjectIdentifiers that are associated with the directory.
        public let pathToObjectIdentifiersList: [PathToObjectIdentifiers]?

        public init(nextToken: String? = nil, pathToObjectIdentifiersList: [PathToObjectIdentifiers]? = nil) {
            self.nextToken = nextToken
            self.pathToObjectIdentifiersList = pathToObjectIdentifiersList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case pathToObjectIdentifiersList = "PathToObjectIdentifiersList"
        }
    }

    public struct GetDirectoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Directory", required: true, type: .structure)
        ]
        /// Metadata about the directory.
        public let directory: Directory

        public init(directory: Directory) {
            self.directory = directory
        }

        private enum CodingKeys: String, CodingKey {
            case directory = "Directory"
        }
    }

    public struct GetLinkAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeNames", required: true, type: .list), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ConsistencyLevel", required: false, type: .enum), 
            AWSShapeMember(label: "TypedLinkSpecifier", required: true, type: .structure)
        ]
        /// A list of attribute names whose values will be retrieved.
        public let attributeNames: [String]
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the typed link resides. For more information, see arns or Typed link.
        public let directoryArn: String
        /// The consistency level at which to retrieve the attributes on a typed link.
        public let consistencyLevel: ConsistencyLevel?
        /// Allows a typed link specifier to be accepted as input.
        public let typedLinkSpecifier: TypedLinkSpecifier

        public init(attributeNames: [String], directoryArn: String, consistencyLevel: ConsistencyLevel? = nil, typedLinkSpecifier: TypedLinkSpecifier) {
            self.attributeNames = attributeNames
            self.directoryArn = directoryArn
            self.consistencyLevel = consistencyLevel
            self.typedLinkSpecifier = typedLinkSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case attributeNames = "AttributeNames"
            case directoryArn = "x-amz-data-partition"
            case consistencyLevel = "ConsistencyLevel"
            case typedLinkSpecifier = "TypedLinkSpecifier"
        }
    }

    public struct DeleteTypedLinkFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String
        /// The unique name of the typed link facet.
        public let name: String

        public init(schemaArn: String, name: String) {
            self.schemaArn = schemaArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
        }
    }

    public struct BatchDetachFromIndex: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IndexReference", required: true, type: .structure), 
            AWSShapeMember(label: "TargetReference", required: true, type: .structure)
        ]
        /// A reference to the index object.
        public let indexReference: ObjectReference
        /// A reference to the object being detached from the index.
        public let targetReference: ObjectReference

        public init(indexReference: ObjectReference, targetReference: ObjectReference) {
            self.indexReference = indexReference
            self.targetReference = targetReference
        }

        private enum CodingKeys: String, CodingKey {
            case indexReference = "IndexReference"
            case targetReference = "TargetReference"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// The token to use to retrieve the next page of results. This value is null when there are no more results to return.
        public let nextToken: String?
        /// A list of tag key value pairs that are associated with the response.
        public let tags: [Tag]?

        public init(nextToken: String? = nil, tags: [Tag]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case tags = "Tags"
        }
    }

    public struct SchemaFacet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "FacetName", required: false, type: .string)
        ]
        /// The ARN of the schema that contains the facet with no minor component. See arns and In-Place Schema Upgrade for a description of when to provide minor versions.
        public let schemaArn: String?
        /// The name of the facet.
        public let facetName: String?

        public init(schemaArn: String? = nil, facetName: String? = nil) {
            self.schemaArn = schemaArn
            self.facetName = facetName
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
            case facetName = "FacetName"
        }
    }

    public struct BatchUpdateObjectAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "AttributeUpdates", required: true, type: .list)
        ]
        /// Reference that identifies the object.
        public let objectReference: ObjectReference
        /// Attributes update structure.
        public let attributeUpdates: [ObjectAttributeUpdate]

        public init(objectReference: ObjectReference, attributeUpdates: [ObjectAttributeUpdate]) {
            self.objectReference = objectReference
            self.attributeUpdates = attributeUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case attributeUpdates = "AttributeUpdates"
        }
    }

    public struct CreateIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the index created by this operation.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct CreateObjectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The identifier that is associated with the object.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct LinkAttributeAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeUpdateValue", required: false, type: .structure), 
            AWSShapeMember(label: "AttributeActionType", required: false, type: .enum)
        ]
        /// The value that you want to update to.
        public let attributeUpdateValue: TypedAttributeValue?
        /// A type that can be either UPDATE_OR_CREATE or DELETE.
        public let attributeActionType: UpdateActionType?

        public init(attributeUpdateValue: TypedAttributeValue? = nil, attributeActionType: UpdateActionType? = nil) {
            self.attributeUpdateValue = attributeUpdateValue
            self.attributeActionType = attributeActionType
        }

        private enum CodingKeys: String, CodingKey {
            case attributeUpdateValue = "AttributeUpdateValue"
            case attributeActionType = "AttributeActionType"
        }
    }

    public struct TypedAttributeValueRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartMode", required: true, type: .enum), 
            AWSShapeMember(label: "EndValue", required: false, type: .structure), 
            AWSShapeMember(label: "StartValue", required: false, type: .structure), 
            AWSShapeMember(label: "EndMode", required: true, type: .enum)
        ]
        /// The inclusive or exclusive range start.
        public let startMode: RangeMode
        /// The attribute value to terminate the range at.
        public let endValue: TypedAttributeValue?
        /// The value to start the range at.
        public let startValue: TypedAttributeValue?
        /// The inclusive or exclusive range end.
        public let endMode: RangeMode

        public init(startMode: RangeMode, endValue: TypedAttributeValue? = nil, startValue: TypedAttributeValue? = nil, endMode: RangeMode) {
            self.startMode = startMode
            self.endValue = endValue
            self.startValue = startValue
            self.endMode = endMode
        }

        private enum CodingKeys: String, CodingKey {
            case startMode = "StartMode"
            case endValue = "EndValue"
            case startValue = "StartValue"
            case endMode = "EndMode"
        }
    }

    public enum RuleType: String, CustomStringConvertible, Codable {
        case binaryLength = "BINARY_LENGTH"
        case numberComparison = "NUMBER_COMPARISON"
        case stringFromSet = "STRING_FROM_SET"
        case stringLength = "STRING_LENGTH"
        public var description: String { return self.rawValue }
    }

    public struct ListFacetAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The ARN of the schema where the facet resides.
        public let schemaArn: String
        /// The name of the facet whose attributes will be retrieved.
        public let name: String
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, schemaArn: String, name: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.schemaArn = schemaArn
            self.name = name
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
            case maxResults = "MaxResults"
        }
    }

    public struct PublishSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DevelopmentSchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "MinorVersion", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: true, type: .string)
        ]
        /// The new name under which the schema will be published. If this is not provided, the development schema is considered.
        public let name: String?
        /// The Amazon Resource Name (ARN) that is associated with the development schema. For more information, see arns.
        public let developmentSchemaArn: String
        /// The minor version under which the schema will be published. This parameter is recommended. Schemas have both a major and minor version associated with them.
        public let minorVersion: String?
        /// The major version under which the schema will be published. Schemas have both a major and minor version associated with them.
        public let version: String

        public init(name: String? = nil, developmentSchemaArn: String, minorVersion: String? = nil, version: String) {
            self.name = name
            self.developmentSchemaArn = developmentSchemaArn
            self.minorVersion = minorVersion
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case developmentSchemaArn = "x-amz-data-partition"
            case minorVersion = "MinorVersion"
            case version = "Version"
        }
    }

    public struct BatchGetObjectInformation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// A reference to the object.
        public let objectReference: ObjectReference

        public init(objectReference: ObjectReference) {
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
        }
    }

    public struct ListAppliedSchemaArnsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The response for ListAppliedSchemaArns when this parameter is used will list all minor version ARNs for a major version.
        public let schemaArn: String?
        /// The ARN of the directory you are listing.
        public let directoryArn: String
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, schemaArn: String? = nil, directoryArn: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.schemaArn = schemaArn
            self.directoryArn = directoryArn
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case schemaArn = "SchemaArn"
            case directoryArn = "DirectoryArn"
            case maxResults = "MaxResults"
        }
    }

    public struct UpgradeAppliedSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpgradedSchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", required: false, type: .string)
        ]
        /// The ARN of the upgraded schema that is returned as part of the response.
        public let upgradedSchemaArn: String?
        /// The ARN of the directory that is returned as part of the response.
        public let directoryArn: String?

        public init(upgradedSchemaArn: String? = nil, directoryArn: String? = nil) {
            self.upgradedSchemaArn = upgradedSchemaArn
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case upgradedSchemaArn = "UpgradedSchemaArn"
            case directoryArn = "DirectoryArn"
        }
    }

    public struct ListOutgoingTypedLinksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FilterAttributeRanges", required: false, type: .list), 
            AWSShapeMember(label: "FilterTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ConsistencyLevel", required: false, type: .enum), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
        public let filterAttributeRanges: [TypedLinkAttributeRange]?
        /// Filters are interpreted in the order of the attributes defined on the typed link facet, not the order they are supplied to any API calls.
        public let filterTypedLink: TypedLinkSchemaAndFacetName?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The consistency level to execute the request at.
        public let consistencyLevel: ConsistencyLevel?
        /// A reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference
        /// The Amazon Resource Name (ARN) of the directory where you want to list the typed links.
        public let directoryArn: String
        /// The pagination token.
        public let nextToken: String?

        public init(filterAttributeRanges: [TypedLinkAttributeRange]? = nil, filterTypedLink: TypedLinkSchemaAndFacetName? = nil, maxResults: Int32? = nil, consistencyLevel: ConsistencyLevel? = nil, objectReference: ObjectReference, directoryArn: String, nextToken: String? = nil) {
            self.filterAttributeRanges = filterAttributeRanges
            self.filterTypedLink = filterTypedLink
            self.maxResults = maxResults
            self.consistencyLevel = consistencyLevel
            self.objectReference = objectReference
            self.directoryArn = directoryArn
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filterAttributeRanges = "FilterAttributeRanges"
            case filterTypedLink = "FilterTypedLink"
            case maxResults = "MaxResults"
            case consistencyLevel = "ConsistencyLevel"
            case objectReference = "ObjectReference"
            case directoryArn = "x-amz-data-partition"
            case nextToken = "NextToken"
        }
    }

    public struct BatchCreateIndex: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LinkName", required: false, type: .string), 
            AWSShapeMember(label: "OrderedIndexedAttributeList", required: true, type: .list), 
            AWSShapeMember(label: "BatchReferenceName", required: false, type: .string), 
            AWSShapeMember(label: "IsUnique", required: true, type: .boolean), 
            AWSShapeMember(label: "ParentReference", required: false, type: .structure)
        ]
        /// The name of the link between the parent object and the index object.
        public let linkName: String?
        /// Specifies the attributes that should be indexed on. Currently only a single attribute is supported.
        public let orderedIndexedAttributeList: [AttributeKey]
        /// The batch reference name. See Batches for more information.
        public let batchReferenceName: String?
        /// Indicates whether the attribute that is being indexed has unique values or not.
        public let isUnique: Bool
        /// A reference to the parent object that contains the index object.
        public let parentReference: ObjectReference?

        public init(linkName: String? = nil, orderedIndexedAttributeList: [AttributeKey], batchReferenceName: String? = nil, isUnique: Bool, parentReference: ObjectReference? = nil) {
            self.linkName = linkName
            self.orderedIndexedAttributeList = orderedIndexedAttributeList
            self.batchReferenceName = batchReferenceName
            self.isUnique = isUnique
            self.parentReference = parentReference
        }

        private enum CodingKeys: String, CodingKey {
            case linkName = "LinkName"
            case orderedIndexedAttributeList = "OrderedIndexedAttributeList"
            case batchReferenceName = "BatchReferenceName"
            case isUnique = "IsUnique"
            case parentReference = "ParentReference"
        }
    }

    public struct FacetAttributeUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Action", required: false, type: .enum), 
            AWSShapeMember(label: "Attribute", required: false, type: .structure)
        ]
        /// The action to perform when updating the attribute.
        public let action: UpdateActionType?
        /// The attribute to update.
        public let attribute: FacetAttribute?

        public init(action: UpdateActionType? = nil, attribute: FacetAttribute? = nil) {
            self.action = action
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case attribute = "Attribute"
        }
    }

    public struct ListDevelopmentSchemaArnsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArns", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The ARNs of retrieved development schemas.
        public let schemaArns: [String]?
        /// The pagination token.
        public let nextToken: String?

        public init(schemaArns: [String]? = nil, nextToken: String? = nil) {
            self.schemaArns = schemaArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArns = "SchemaArns"
            case nextToken = "NextToken"
        }
    }

    public enum BatchWriteExceptionType: String, CustomStringConvertible, Codable {
        case internalserviceexception = "InternalServiceException"
        case validationexception = "ValidationException"
        case invalidarnexception = "InvalidArnException"
        case linknamealreadyinuseexception = "LinkNameAlreadyInUseException"
        case stillcontainslinksexception = "StillContainsLinksException"
        case facetvalidationexception = "FacetValidationException"
        case objectnotdetachedexception = "ObjectNotDetachedException"
        case resourcenotfoundexception = "ResourceNotFoundException"
        case accessdeniedexception = "AccessDeniedException"
        case invalidattachmentexception = "InvalidAttachmentException"
        case notindexexception = "NotIndexException"
        case notnodeexception = "NotNodeException"
        case indexedattributemissingexception = "IndexedAttributeMissingException"
        case objectalreadydetachedexception = "ObjectAlreadyDetachedException"
        case notpolicyexception = "NotPolicyException"
        case directorynotenabledexception = "DirectoryNotEnabledException"
        case limitexceededexception = "LimitExceededException"
        case unsupportedindextypeexception = "UnsupportedIndexTypeException"
        public var description: String { return self.rawValue }
    }

    public struct BatchLookupPolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PolicyToPathList", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Provides list of path to policies. Policies contain PolicyId, ObjectIdentifier, and PolicyType. For more information, see Policies.
        public let policyToPathList: [PolicyToPath]?

        public init(nextToken: String? = nil, policyToPathList: [PolicyToPath]? = nil) {
            self.nextToken = nextToken
            self.policyToPathList = policyToPathList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case policyToPathList = "PolicyToPathList"
        }
    }

    public struct BatchAttachTypedLink: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: true, type: .list), 
            AWSShapeMember(label: "SourceObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "TypedLinkFacet", required: true, type: .structure), 
            AWSShapeMember(label: "TargetObjectReference", required: true, type: .structure)
        ]
        /// A set of attributes that are associated with the typed link.
        public let attributes: [AttributeNameAndValue]
        /// Identifies the source object that the typed link will attach to.
        public let sourceObjectReference: ObjectReference
        /// Identifies the typed link facet that is associated with the typed link.
        public let typedLinkFacet: TypedLinkSchemaAndFacetName
        /// Identifies the target object that the typed link will attach to.
        public let targetObjectReference: ObjectReference

        public init(attributes: [AttributeNameAndValue], sourceObjectReference: ObjectReference, typedLinkFacet: TypedLinkSchemaAndFacetName, targetObjectReference: ObjectReference) {
            self.attributes = attributes
            self.sourceObjectReference = sourceObjectReference
            self.typedLinkFacet = typedLinkFacet
            self.targetObjectReference = targetObjectReference
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case sourceObjectReference = "SourceObjectReference"
            case typedLinkFacet = "TypedLinkFacet"
            case targetObjectReference = "TargetObjectReference"
        }
    }

    public struct ListTypedLinkFacetNamesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(schemaArn: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.schemaArn = schemaArn
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct CreateFacetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "FacetStyle", required: false, type: .enum), 
            AWSShapeMember(label: "ObjectType", required: false, type: .enum)
        ]
        /// The attributes that are associated with the Facet.
        public let attributes: [FacetAttribute]?
        /// The schema ARN in which the new Facet will be created. For more information, see arns.
        public let schemaArn: String
        /// The name of the Facet, which is unique for a given schema.
        public let name: String
        /// There are two different styles that you can define on any given facet, Static and Dynamic. For static facets, all attributes must be defined in the schema. For dynamic facets, attributes can be defined during data plane operations.
        public let facetStyle: FacetStyle?
        /// Specifies whether a given object created from this facet is of type node, leaf node, policy or index.   Node: Can have multiple children but one parent.     Leaf node: Cannot have children but can have multiple parents.     Policy: Allows you to store a policy document and policy type. For more information, see Policies.     Index: Can be created with the Index API.  
        public let objectType: ObjectType?

        public init(attributes: [FacetAttribute]? = nil, schemaArn: String, name: String, facetStyle: FacetStyle? = nil, objectType: ObjectType? = nil) {
            self.attributes = attributes
            self.schemaArn = schemaArn
            self.name = name
            self.facetStyle = facetStyle
            self.objectType = objectType
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
            case facetStyle = "FacetStyle"
            case objectType = "ObjectType"
        }
    }

    public struct DeleteTypedLinkFacetResponse: AWSShape {

    }

    public struct ListPublishedSchemaArnsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The response for ListPublishedSchemaArns when this parameter is used will list all minor version ARNs for a major version.
        public let schemaArn: String?
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(schemaArn: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.schemaArn = schemaArn
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public enum UpdateActionType: String, CustomStringConvertible, Codable {
        case createOrUpdate = "CREATE_OR_UPDATE"
        case delete = "DELETE"
        public var description: String { return self.rawValue }
    }

    public struct AttachToIndexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "IndexReference", required: true, type: .structure), 
            AWSShapeMember(label: "TargetReference", required: true, type: .structure)
        ]
        /// The Amazon Resource Name (ARN) of the directory where the object and index exist.
        public let directoryArn: String
        /// A reference to the index that you are attaching the object to.
        public let indexReference: ObjectReference
        /// A reference to the object that you are attaching to the index.
        public let targetReference: ObjectReference

        public init(directoryArn: String, indexReference: ObjectReference, targetReference: ObjectReference) {
            self.directoryArn = directoryArn
            self.indexReference = indexReference
            self.targetReference = targetReference
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case indexReference = "IndexReference"
            case targetReference = "TargetReference"
        }
    }

    public struct BatchGetObjectAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "AttributeNames", required: true, type: .list), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .structure)
        ]
        /// Reference that identifies the object whose attributes will be retrieved.
        public let objectReference: ObjectReference
        /// List of attribute names whose values will be retrieved.
        public let attributeNames: [String]
        /// Identifier for the facet whose attributes will be retrieved. See SchemaFacet for details.
        public let schemaFacet: SchemaFacet

        public init(objectReference: ObjectReference, attributeNames: [String], schemaFacet: SchemaFacet) {
            self.objectReference = objectReference
            self.attributeNames = attributeNames
            self.schemaFacet = schemaFacet
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case attributeNames = "AttributeNames"
            case schemaFacet = "SchemaFacet"
        }
    }

    public struct DetachFromIndexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "IndexReference", required: true, type: .structure), 
            AWSShapeMember(label: "TargetReference", required: true, type: .structure)
        ]
        /// The Amazon Resource Name (ARN) of the directory the index and object exist in.
        public let directoryArn: String
        /// A reference to the index object.
        public let indexReference: ObjectReference
        /// A reference to the object being detached from the index.
        public let targetReference: ObjectReference

        public init(directoryArn: String, indexReference: ObjectReference, targetReference: ObjectReference) {
            self.directoryArn = directoryArn
            self.indexReference = indexReference
            self.targetReference = targetReference
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case indexReference = "IndexReference"
            case targetReference = "TargetReference"
        }
    }

    public struct TypedLinkAttributeDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "DefaultValue", required: false, type: .structure), 
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "Rules", required: false, type: .map), 
            AWSShapeMember(label: "RequiredBehavior", required: true, type: .enum), 
            AWSShapeMember(label: "IsImmutable", required: false, type: .boolean)
        ]
        /// The unique name of the typed link attribute.
        public let name: String
        /// The default value of the attribute (if configured).
        public let defaultValue: TypedAttributeValue?
        /// The type of the attribute.
        public let `type`: FacetAttributeType
        /// Validation rules that are attached to the attribute definition.
        public let rules: [String: Rule]?
        /// The required behavior of the TypedLinkAttributeDefinition.
        public let requiredBehavior: RequiredAttributeBehavior
        /// Whether the attribute is mutable or not.
        public let isImmutable: Bool?

        public init(name: String, defaultValue: TypedAttributeValue? = nil, type: FacetAttributeType, rules: [String: Rule]? = nil, requiredBehavior: RequiredAttributeBehavior, isImmutable: Bool? = nil) {
            self.name = name
            self.defaultValue = defaultValue
            self.`type` = `type`
            self.rules = rules
            self.requiredBehavior = requiredBehavior
            self.isImmutable = isImmutable
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case defaultValue = "DefaultValue"
            case `type` = "Type"
            case rules = "Rules"
            case requiredBehavior = "RequiredBehavior"
            case isImmutable = "IsImmutable"
        }
    }

    public struct DeleteObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// A reference that identifies the object.
        public let objectReference: ObjectReference
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides. For more information, see arns.
        public let directoryArn: String

        public init(objectReference: ObjectReference, directoryArn: String) {
            self.objectReference = objectReference
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct BatchLookupPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Reference that identifies the object whose policies will be looked up.
        public let objectReference: ObjectReference
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, objectReference: ObjectReference, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.objectReference = objectReference
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case objectReference = "ObjectReference"
            case maxResults = "MaxResults"
        }
    }

    public enum FacetAttributeType: String, CustomStringConvertible, Codable {
        case string = "STRING"
        case binary = "BINARY"
        case boolean = "BOOLEAN"
        case number = "NUMBER"
        case datetime = "DATETIME"
        case variant = "VARIANT"
        public var description: String { return self.rawValue }
    }

    public struct ListIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "IndexAttachments", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The objects and indexed values attached to the index.
        public let indexAttachments: [IndexAttachment]?

        public init(nextToken: String? = nil, indexAttachments: [IndexAttachment]? = nil) {
            self.nextToken = nextToken
            self.indexAttachments = indexAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case indexAttachments = "IndexAttachments"
        }
    }

    public struct PutSchemaFromJsonRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Document", required: true, type: .string)
        ]
        /// The ARN of the schema to update.
        public let schemaArn: String
        /// The replacement JSON schema.
        public let document: String

        public init(schemaArn: String, document: String) {
            self.schemaArn = schemaArn
            self.document = document
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case document = "Document"
        }
    }

    public struct AttributeKey: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: true, type: .string), 
            AWSShapeMember(label: "FacetName", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the schema that contains the facet and attribute.
        public let schemaArn: String
        /// The name of the facet that the attribute exists within.
        public let facetName: String
        /// The name of the attribute.
        public let name: String

        public init(schemaArn: String, facetName: String, name: String) {
            self.schemaArn = schemaArn
            self.facetName = facetName
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
            case facetName = "FacetName"
            case name = "Name"
        }
    }

    public struct TypedLinkFacet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityAttributeOrder", required: true, type: .list), 
            AWSShapeMember(label: "Attributes", required: true, type: .list), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The set of attributes that distinguish links made from this facet from each other, in the order of significance. Listing typed links can filter on the values of these attributes. See ListOutgoingTypedLinks and ListIncomingTypedLinks for details.
        public let identityAttributeOrder: [String]
        /// A set of key-value pairs associated with the typed link. Typed link attributes are used when you have data values that are related to the link itself, and not to one of the two objects being linked. Identity attributes also serve to distinguish the link from others of the same type between the same objects.
        public let attributes: [TypedLinkAttributeDefinition]
        /// The unique name of the typed link facet.
        public let name: String

        public init(identityAttributeOrder: [String], attributes: [TypedLinkAttributeDefinition], name: String) {
            self.identityAttributeOrder = identityAttributeOrder
            self.attributes = attributes
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case identityAttributeOrder = "IdentityAttributeOrder"
            case attributes = "Attributes"
            case name = "Name"
        }
    }

    public struct BatchDeleteObjectResponse: AWSShape {

    }

    public struct BatchDetachObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BatchReferenceName", required: false, type: .string), 
            AWSShapeMember(label: "LinkName", required: true, type: .string), 
            AWSShapeMember(label: "ParentReference", required: true, type: .structure)
        ]
        /// The batch reference name. See Batches for more information.
        public let batchReferenceName: String?
        /// The name of the link.
        public let linkName: String
        /// Parent reference from which the object with the specified link name is detached.
        public let parentReference: ObjectReference

        public init(batchReferenceName: String? = nil, linkName: String, parentReference: ObjectReference) {
            self.batchReferenceName = batchReferenceName
            self.linkName = linkName
            self.parentReference = parentReference
        }

        private enum CodingKeys: String, CodingKey {
            case batchReferenceName = "BatchReferenceName"
            case linkName = "LinkName"
            case parentReference = "ParentReference"
        }
    }

    public struct AttachPolicyResponse: AWSShape {

    }

    public struct CreateDirectoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryArn", required: true, type: .string), 
            AWSShapeMember(label: "AppliedSchemaArn", required: true, type: .string)
        ]
        /// The root object node of the created directory.
        public let objectIdentifier: String
        /// The name of the Directory.
        public let name: String
        /// The ARN that is associated with the Directory. For more information, see arns.
        public let directoryArn: String
        /// The ARN of the published schema in the Directory. Once a published schema is copied into the directory, it has its own ARN, which is referred to applied schema ARN. For more information, see arns.
        public let appliedSchemaArn: String

        public init(objectIdentifier: String, name: String, directoryArn: String, appliedSchemaArn: String) {
            self.objectIdentifier = objectIdentifier
            self.name = name
            self.directoryArn = directoryArn
            self.appliedSchemaArn = appliedSchemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
            case name = "Name"
            case directoryArn = "DirectoryArn"
            case appliedSchemaArn = "AppliedSchemaArn"
        }
    }

    public struct BatchCreateObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LinkName", required: false, type: .string), 
            AWSShapeMember(label: "ObjectAttributeList", required: true, type: .list), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .list), 
            AWSShapeMember(label: "BatchReferenceName", required: false, type: .string), 
            AWSShapeMember(label: "ParentReference", required: false, type: .structure)
        ]
        /// The name of the link.
        public let linkName: String?
        /// An attribute map, which contains an attribute ARN as the key and attribute value as the map value.
        public let objectAttributeList: [AttributeKeyAndValue]
        /// A list of FacetArns that will be associated with the object. For more information, see arns.
        public let schemaFacet: [SchemaFacet]
        /// The batch reference name. See Batches for more information.
        public let batchReferenceName: String?
        /// If specified, the parent reference to which this object will be attached.
        public let parentReference: ObjectReference?

        public init(linkName: String? = nil, objectAttributeList: [AttributeKeyAndValue], schemaFacet: [SchemaFacet], batchReferenceName: String? = nil, parentReference: ObjectReference? = nil) {
            self.linkName = linkName
            self.objectAttributeList = objectAttributeList
            self.schemaFacet = schemaFacet
            self.batchReferenceName = batchReferenceName
            self.parentReference = parentReference
        }

        private enum CodingKeys: String, CodingKey {
            case linkName = "LinkName"
            case objectAttributeList = "ObjectAttributeList"
            case schemaFacet = "SchemaFacet"
            case batchReferenceName = "BatchReferenceName"
            case parentReference = "ParentReference"
        }
    }

    public struct AttachTypedLinkResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifier", required: false, type: .structure)
        ]
        /// Returns a typed link specifier as output.
        public let typedLinkSpecifier: TypedLinkSpecifier?

        public init(typedLinkSpecifier: TypedLinkSpecifier? = nil) {
            self.typedLinkSpecifier = typedLinkSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifier = "TypedLinkSpecifier"
        }
    }

    public struct BatchReadOperationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExceptionResponse", required: false, type: .structure), 
            AWSShapeMember(label: "SuccessfulResponse", required: false, type: .structure)
        ]
        /// Identifies which operation in a batch has failed.
        public let exceptionResponse: BatchReadException?
        /// Identifies which operation in a batch has succeeded.
        public let successfulResponse: BatchReadSuccessfulResponse?

        public init(exceptionResponse: BatchReadException? = nil, successfulResponse: BatchReadSuccessfulResponse? = nil) {
            self.exceptionResponse = exceptionResponse
            self.successfulResponse = successfulResponse
        }

        private enum CodingKeys: String, CodingKey {
            case exceptionResponse = "ExceptionResponse"
            case successfulResponse = "SuccessfulResponse"
        }
    }

    public struct TypedLinkSchemaAndFacetName: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: true, type: .string), 
            AWSShapeMember(label: "TypedLinkName", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String
        /// The unique name of the typed link facet.
        public let typedLinkName: String

        public init(schemaArn: String, typedLinkName: String) {
            self.schemaArn = schemaArn
            self.typedLinkName = typedLinkName
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
            case typedLinkName = "TypedLinkName"
        }
    }

    public struct GetObjectInformationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The consistency level at which to retrieve the object information.
        public let consistencyLevel: ConsistencyLevel?
        /// A reference to the object.
        public let objectReference: ObjectReference
        /// The ARN of the directory being retrieved.
        public let directoryArn: String

        public init(consistencyLevel: ConsistencyLevel? = nil, objectReference: ObjectReference, directoryArn: String) {
            self.consistencyLevel = consistencyLevel
            self.objectReference = objectReference
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case consistencyLevel = "x-amz-consistency-level"
            case objectReference = "ObjectReference"
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct TypedLinkFacetAttributeUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Action", required: true, type: .enum), 
            AWSShapeMember(label: "Attribute", required: true, type: .structure)
        ]
        /// The action to perform when updating the attribute.
        public let action: UpdateActionType
        /// The attribute to update.
        public let attribute: TypedLinkAttributeDefinition

        public init(action: UpdateActionType, attribute: TypedLinkAttributeDefinition) {
            self.action = action
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case attribute = "Attribute"
        }
    }

    public struct ObjectAttributeUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectAttributeAction", required: false, type: .structure), 
            AWSShapeMember(label: "ObjectAttributeKey", required: false, type: .structure)
        ]
        /// The action to perform as part of the attribute update.
        public let objectAttributeAction: ObjectAttributeAction?
        /// The key of the attribute being updated.
        public let objectAttributeKey: AttributeKey?

        public init(objectAttributeAction: ObjectAttributeAction? = nil, objectAttributeKey: AttributeKey? = nil) {
            self.objectAttributeAction = objectAttributeAction
            self.objectAttributeKey = objectAttributeKey
        }

        private enum CodingKeys: String, CodingKey {
            case objectAttributeAction = "ObjectAttributeAction"
            case objectAttributeKey = "ObjectAttributeKey"
        }
    }

    public struct BatchCreateObjectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// The ID that is associated with the object.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct DeleteDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The ARN of the directory to delete.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct ListIncomingTypedLinksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FilterAttributeRanges", required: false, type: .list), 
            AWSShapeMember(label: "FilterTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ConsistencyLevel", required: false, type: .enum), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
        public let filterAttributeRanges: [TypedLinkAttributeRange]?
        /// Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls.
        public let filterTypedLink: TypedLinkSchemaAndFacetName?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The consistency level to execute the request at.
        public let consistencyLevel: ConsistencyLevel?
        /// Reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference
        /// The Amazon Resource Name (ARN) of the directory where you want to list the typed links.
        public let directoryArn: String
        /// The pagination token.
        public let nextToken: String?

        public init(filterAttributeRanges: [TypedLinkAttributeRange]? = nil, filterTypedLink: TypedLinkSchemaAndFacetName? = nil, maxResults: Int32? = nil, consistencyLevel: ConsistencyLevel? = nil, objectReference: ObjectReference, directoryArn: String, nextToken: String? = nil) {
            self.filterAttributeRanges = filterAttributeRanges
            self.filterTypedLink = filterTypedLink
            self.maxResults = maxResults
            self.consistencyLevel = consistencyLevel
            self.objectReference = objectReference
            self.directoryArn = directoryArn
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case filterAttributeRanges = "FilterAttributeRanges"
            case filterTypedLink = "FilterTypedLink"
            case maxResults = "MaxResults"
            case consistencyLevel = "ConsistencyLevel"
            case objectReference = "ObjectReference"
            case directoryArn = "x-amz-data-partition"
            case nextToken = "NextToken"
        }
    }

    public struct BatchReadSuccessfulResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ListObjectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectChildren", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectParentPaths", required: false, type: .structure), 
            AWSShapeMember(label: "LookupPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectPolicies", required: false, type: .structure), 
            AWSShapeMember(label: "GetObjectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "GetLinkAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "ListIncomingTypedLinks", required: false, type: .structure), 
            AWSShapeMember(label: "ListAttachedIndices", required: false, type: .structure), 
            AWSShapeMember(label: "ListIndex", required: false, type: .structure), 
            AWSShapeMember(label: "ListOutgoingTypedLinks", required: false, type: .structure), 
            AWSShapeMember(label: "ListPolicyAttachments", required: false, type: .structure), 
            AWSShapeMember(label: "GetObjectInformation", required: false, type: .structure)
        ]
        /// Lists all attributes that are associated with an object.
        public let listObjectAttributes: BatchListObjectAttributesResponse?
        /// Returns a paginated list of child objects that are associated with a given object.
        public let listObjectChildren: BatchListObjectChildrenResponse?
        /// Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see Directory Structure.
        public let listObjectParentPaths: BatchListObjectParentPathsResponse?
        /// Lists all policies from the root of the Directory to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don't have the policies attached, it returns the ObjectIdentifier for such objects. If policies are present, it returns ObjectIdentifier, policyId, and policyType. Paths that don't lead to the root from the target object are ignored. For more information, see Policies.
        public let lookupPolicy: BatchLookupPolicyResponse?
        /// Returns policies attached to an object in pagination fashion.
        public let listObjectPolicies: BatchListObjectPoliciesResponse?
        /// Retrieves attributes within a facet that are associated with an object.
        public let getObjectAttributes: BatchGetObjectAttributesResponse?
        /// The list of attributes to retrieve from the typed link.
        public let getLinkAttributes: BatchGetLinkAttributesResponse?
        /// Returns a paginated list of all the incoming TypedLinkSpecifier information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see Typed link.
        public let listIncomingTypedLinks: BatchListIncomingTypedLinksResponse?
        /// Lists indices attached to an object.
        public let listAttachedIndices: BatchListAttachedIndicesResponse?
        /// Lists objects attached to the specified index.
        public let listIndex: BatchListIndexResponse?
        /// Returns a paginated list of all the outgoing TypedLinkSpecifier information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see Typed link.
        public let listOutgoingTypedLinks: BatchListOutgoingTypedLinksResponse?
        /// Returns all of the ObjectIdentifiers to which a given policy is attached.
        public let listPolicyAttachments: BatchListPolicyAttachmentsResponse?
        /// Retrieves metadata about an object.
        public let getObjectInformation: BatchGetObjectInformationResponse?

        public init(listObjectAttributes: BatchListObjectAttributesResponse? = nil, listObjectChildren: BatchListObjectChildrenResponse? = nil, listObjectParentPaths: BatchListObjectParentPathsResponse? = nil, lookupPolicy: BatchLookupPolicyResponse? = nil, listObjectPolicies: BatchListObjectPoliciesResponse? = nil, getObjectAttributes: BatchGetObjectAttributesResponse? = nil, getLinkAttributes: BatchGetLinkAttributesResponse? = nil, listIncomingTypedLinks: BatchListIncomingTypedLinksResponse? = nil, listAttachedIndices: BatchListAttachedIndicesResponse? = nil, listIndex: BatchListIndexResponse? = nil, listOutgoingTypedLinks: BatchListOutgoingTypedLinksResponse? = nil, listPolicyAttachments: BatchListPolicyAttachmentsResponse? = nil, getObjectInformation: BatchGetObjectInformationResponse? = nil) {
            self.listObjectAttributes = listObjectAttributes
            self.listObjectChildren = listObjectChildren
            self.listObjectParentPaths = listObjectParentPaths
            self.lookupPolicy = lookupPolicy
            self.listObjectPolicies = listObjectPolicies
            self.getObjectAttributes = getObjectAttributes
            self.getLinkAttributes = getLinkAttributes
            self.listIncomingTypedLinks = listIncomingTypedLinks
            self.listAttachedIndices = listAttachedIndices
            self.listIndex = listIndex
            self.listOutgoingTypedLinks = listOutgoingTypedLinks
            self.listPolicyAttachments = listPolicyAttachments
            self.getObjectInformation = getObjectInformation
        }

        private enum CodingKeys: String, CodingKey {
            case listObjectAttributes = "ListObjectAttributes"
            case listObjectChildren = "ListObjectChildren"
            case listObjectParentPaths = "ListObjectParentPaths"
            case lookupPolicy = "LookupPolicy"
            case listObjectPolicies = "ListObjectPolicies"
            case getObjectAttributes = "GetObjectAttributes"
            case getLinkAttributes = "GetLinkAttributes"
            case listIncomingTypedLinks = "ListIncomingTypedLinks"
            case listAttachedIndices = "ListAttachedIndices"
            case listIndex = "ListIndex"
            case listOutgoingTypedLinks = "ListOutgoingTypedLinks"
            case listPolicyAttachments = "ListPolicyAttachments"
            case getObjectInformation = "GetObjectInformation"
        }
    }

    public struct ListFacetNamesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The Amazon Resource Name (ARN) to retrieve facet names from.
        public let schemaArn: String
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(schemaArn: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.schemaArn = schemaArn
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct BatchListIndex: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "IndexReference", required: true, type: .structure), 
            AWSShapeMember(label: "RangesOnIndexedValues", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The reference to the index to list.
        public let indexReference: ObjectReference
        /// Specifies the ranges of indexed values that you want to query.
        public let rangesOnIndexedValues: [ObjectAttributeRange]?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, indexReference: ObjectReference, rangesOnIndexedValues: [ObjectAttributeRange]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.indexReference = indexReference
            self.rangesOnIndexedValues = rangesOnIndexedValues
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case indexReference = "IndexReference"
            case rangesOnIndexedValues = "RangesOnIndexedValues"
            case maxResults = "MaxResults"
        }
    }

    public struct Directory: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", required: false, type: .string), 
            AWSShapeMember(label: "CreationDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "State", required: false, type: .enum)
        ]
        /// The name of the directory.
        public let name: String?
        /// The Amazon Resource Name (ARN) that is associated with the directory. For more information, see arns.
        public let directoryArn: String?
        /// The date and time when the directory was created.
        public let creationDateTime: TimeStamp?
        /// The state of the directory. Can be either Enabled, Disabled, or Deleted.
        public let state: DirectoryState?

        public init(name: String? = nil, directoryArn: String? = nil, creationDateTime: TimeStamp? = nil, state: DirectoryState? = nil) {
            self.name = name
            self.directoryArn = directoryArn
            self.creationDateTime = creationDateTime
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case directoryArn = "DirectoryArn"
            case creationDateTime = "CreationDateTime"
            case state = "State"
        }
    }

    public struct BatchGetObjectAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The attribute values that are associated with an object.
        public let attributes: [AttributeKeyAndValue]?

        public init(attributes: [AttributeKeyAndValue]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct DeleteDirectoryResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", required: true, type: .string)
        ]
        /// The ARN of the deleted directory.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "DirectoryArn"
        }
    }

    public struct DetachPolicyResponse: AWSShape {

    }

    public struct AddFacetToObjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ObjectAttributeList", required: false, type: .list), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .structure), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides. For more information, see arns.
        public let directoryArn: String
        /// Attributes on the facet that you are adding to the object.
        public let objectAttributeList: [AttributeKeyAndValue]?
        /// Identifiers for the facet that you are adding to the object. See SchemaFacet for details.
        public let schemaFacet: SchemaFacet
        /// A reference to the object you are adding the specified facet to.
        public let objectReference: ObjectReference

        public init(directoryArn: String, objectAttributeList: [AttributeKeyAndValue]? = nil, schemaFacet: SchemaFacet, objectReference: ObjectReference) {
            self.directoryArn = directoryArn
            self.objectAttributeList = objectAttributeList
            self.schemaFacet = schemaFacet
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case objectAttributeList = "ObjectAttributeList"
            case schemaFacet = "SchemaFacet"
            case objectReference = "ObjectReference"
        }
    }

    public struct BatchAttachPolicyResponse: AWSShape {

    }

    public struct BatchListObjectPolicies: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, objectReference: ObjectReference, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.objectReference = objectReference
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case objectReference = "ObjectReference"
            case maxResults = "MaxResults"
        }
    }

    public struct ListObjectChildrenRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides. For more information, see arns.
        public let directoryArn: String
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        public let consistencyLevel: ConsistencyLevel?
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// The reference that identifies the object for which child objects are being listed.
        public let objectReference: ObjectReference

        public init(nextToken: String? = nil, directoryArn: String, consistencyLevel: ConsistencyLevel? = nil, maxResults: Int32? = nil, objectReference: ObjectReference) {
            self.nextToken = nextToken
            self.directoryArn = directoryArn
            self.consistencyLevel = consistencyLevel
            self.maxResults = maxResults
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case directoryArn = "x-amz-data-partition"
            case consistencyLevel = "x-amz-consistency-level"
            case maxResults = "MaxResults"
            case objectReference = "ObjectReference"
        }
    }

    public struct ListDirectoriesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Directories", required: true, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Lists all directories that are associated with your account in pagination fashion.
        public let directories: [Directory]

        public init(nextToken: String? = nil, directories: [Directory]) {
            self.nextToken = nextToken
            self.directories = directories
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case directories = "Directories"
        }
    }

    public struct LinkAttributeUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeAction", required: false, type: .structure), 
            AWSShapeMember(label: "AttributeKey", required: false, type: .structure)
        ]
        /// The action to perform as part of the attribute update.
        public let attributeAction: LinkAttributeAction?
        /// The key of the attribute being updated.
        public let attributeKey: AttributeKey?

        public init(attributeAction: LinkAttributeAction? = nil, attributeKey: AttributeKey? = nil) {
            self.attributeAction = attributeAction
            self.attributeKey = attributeKey
        }

        private enum CodingKeys: String, CodingKey {
            case attributeAction = "AttributeAction"
            case attributeKey = "AttributeKey"
        }
    }

    public struct BatchWriteResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Responses", required: false, type: .list)
        ]
        /// A list of all the responses for each batch write.
        public let responses: [BatchWriteOperationResponse]?

        public init(responses: [BatchWriteOperationResponse]? = nil) {
            self.responses = responses
        }

        private enum CodingKeys: String, CodingKey {
            case responses = "Responses"
        }
    }

    public struct BatchListObjectParentPaths: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, objectReference: ObjectReference, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.objectReference = objectReference
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case objectReference = "ObjectReference"
            case maxResults = "MaxResults"
        }
    }

    public struct CreateDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the published schema that will be copied into the data Directory. For more information, see arns.
        public let schemaArn: String
        /// The name of the Directory. Should be unique per account, per region.
        public let name: String

        public init(schemaArn: String, name: String) {
            self.schemaArn = schemaArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
        }
    }

    public struct CreateIndexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LinkName", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "OrderedIndexedAttributeList", required: true, type: .list), 
            AWSShapeMember(label: "ParentReference", required: false, type: .structure), 
            AWSShapeMember(label: "IsUnique", required: true, type: .boolean)
        ]
        /// The name of the link between the parent object and the index object.
        public let linkName: String?
        /// The ARN of the directory where the index should be created.
        public let directoryArn: String
        /// Specifies the attributes that should be indexed on. Currently only a single attribute is supported.
        public let orderedIndexedAttributeList: [AttributeKey]
        /// A reference to the parent object that contains the index object.
        public let parentReference: ObjectReference?
        /// Indicates whether the attribute that is being indexed has unique values or not.
        public let isUnique: Bool

        public init(linkName: String? = nil, directoryArn: String, orderedIndexedAttributeList: [AttributeKey], parentReference: ObjectReference? = nil, isUnique: Bool) {
            self.linkName = linkName
            self.directoryArn = directoryArn
            self.orderedIndexedAttributeList = orderedIndexedAttributeList
            self.parentReference = parentReference
            self.isUnique = isUnique
        }

        private enum CodingKeys: String, CodingKey {
            case linkName = "LinkName"
            case directoryArn = "x-amz-data-partition"
            case orderedIndexedAttributeList = "OrderedIndexedAttributeList"
            case parentReference = "ParentReference"
            case isUnique = "IsUnique"
        }
    }

    public struct CreateSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The name that is associated with the schema. This is unique to each account and in each region.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct ListObjectAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Attributes map that is associated with the object. AttributeArn is the key, and attribute value is the value.
        public let attributes: [AttributeKeyAndValue]?

        public init(nextToken: String? = nil, attributes: [AttributeKeyAndValue]? = nil) {
            self.nextToken = nextToken
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case attributes = "Attributes"
        }
    }

    public struct BatchReadOperation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ListObjectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectChildren", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectParentPaths", required: false, type: .structure), 
            AWSShapeMember(label: "LookupPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "ListObjectPolicies", required: false, type: .structure), 
            AWSShapeMember(label: "GetObjectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "GetLinkAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "ListIncomingTypedLinks", required: false, type: .structure), 
            AWSShapeMember(label: "ListAttachedIndices", required: false, type: .structure), 
            AWSShapeMember(label: "ListIndex", required: false, type: .structure), 
            AWSShapeMember(label: "ListOutgoingTypedLinks", required: false, type: .structure), 
            AWSShapeMember(label: "ListPolicyAttachments", required: false, type: .structure), 
            AWSShapeMember(label: "GetObjectInformation", required: false, type: .structure)
        ]
        /// Lists all attributes that are associated with an object.
        public let listObjectAttributes: BatchListObjectAttributes?
        /// Returns a paginated list of child objects that are associated with a given object.
        public let listObjectChildren: BatchListObjectChildren?
        /// Retrieves all available parent paths for any object type such as node, leaf node, policy node, and index node objects. For more information about objects, see Directory Structure.
        public let listObjectParentPaths: BatchListObjectParentPaths?
        /// Lists all policies from the root of the Directory to the object specified. If there are no policies present, an empty list is returned. If policies are present, and if some objects don't have the policies attached, it returns the ObjectIdentifier for such objects. If policies are present, it returns ObjectIdentifier, policyId, and policyType. Paths that don't lead to the root from the target object are ignored. For more information, see Policies.
        public let lookupPolicy: BatchLookupPolicy?
        /// Returns policies attached to an object in pagination fashion.
        public let listObjectPolicies: BatchListObjectPolicies?
        /// Retrieves attributes within a facet that are associated with an object.
        public let getObjectAttributes: BatchGetObjectAttributes?
        /// Retrieves attributes that are associated with a typed link.
        public let getLinkAttributes: BatchGetLinkAttributes?
        /// Returns a paginated list of all the incoming TypedLinkSpecifier information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see Typed link.
        public let listIncomingTypedLinks: BatchListIncomingTypedLinks?
        /// Lists indices attached to an object.
        public let listAttachedIndices: BatchListAttachedIndices?
        /// Lists objects attached to the specified index.
        public let listIndex: BatchListIndex?
        /// Returns a paginated list of all the outgoing TypedLinkSpecifier information for an object. It also supports filtering by typed link facet and identity attributes. For more information, see Typed link.
        public let listOutgoingTypedLinks: BatchListOutgoingTypedLinks?
        /// Returns all of the ObjectIdentifiers to which a given policy is attached.
        public let listPolicyAttachments: BatchListPolicyAttachments?
        /// Retrieves metadata about an object.
        public let getObjectInformation: BatchGetObjectInformation?

        public init(listObjectAttributes: BatchListObjectAttributes? = nil, listObjectChildren: BatchListObjectChildren? = nil, listObjectParentPaths: BatchListObjectParentPaths? = nil, lookupPolicy: BatchLookupPolicy? = nil, listObjectPolicies: BatchListObjectPolicies? = nil, getObjectAttributes: BatchGetObjectAttributes? = nil, getLinkAttributes: BatchGetLinkAttributes? = nil, listIncomingTypedLinks: BatchListIncomingTypedLinks? = nil, listAttachedIndices: BatchListAttachedIndices? = nil, listIndex: BatchListIndex? = nil, listOutgoingTypedLinks: BatchListOutgoingTypedLinks? = nil, listPolicyAttachments: BatchListPolicyAttachments? = nil, getObjectInformation: BatchGetObjectInformation? = nil) {
            self.listObjectAttributes = listObjectAttributes
            self.listObjectChildren = listObjectChildren
            self.listObjectParentPaths = listObjectParentPaths
            self.lookupPolicy = lookupPolicy
            self.listObjectPolicies = listObjectPolicies
            self.getObjectAttributes = getObjectAttributes
            self.getLinkAttributes = getLinkAttributes
            self.listIncomingTypedLinks = listIncomingTypedLinks
            self.listAttachedIndices = listAttachedIndices
            self.listIndex = listIndex
            self.listOutgoingTypedLinks = listOutgoingTypedLinks
            self.listPolicyAttachments = listPolicyAttachments
            self.getObjectInformation = getObjectInformation
        }

        private enum CodingKeys: String, CodingKey {
            case listObjectAttributes = "ListObjectAttributes"
            case listObjectChildren = "ListObjectChildren"
            case listObjectParentPaths = "ListObjectParentPaths"
            case lookupPolicy = "LookupPolicy"
            case listObjectPolicies = "ListObjectPolicies"
            case getObjectAttributes = "GetObjectAttributes"
            case getLinkAttributes = "GetLinkAttributes"
            case listIncomingTypedLinks = "ListIncomingTypedLinks"
            case listAttachedIndices = "ListAttachedIndices"
            case listIndex = "ListIndex"
            case listOutgoingTypedLinks = "ListOutgoingTypedLinks"
            case listPolicyAttachments = "ListPolicyAttachments"
            case getObjectInformation = "GetObjectInformation"
        }
    }

    public struct BatchDetachPolicyResponse: AWSShape {

    }

    public enum DirectoryState: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct PolicyAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "PolicyId", required: false, type: .string), 
            AWSShapeMember(label: "PolicyType", required: false, type: .string)
        ]
        /// The ObjectIdentifier that is associated with PolicyAttachment.
        public let objectIdentifier: String?
        /// The ID of PolicyAttachment.
        public let policyId: String?
        /// The type of policy that can be associated with PolicyAttachment.
        public let policyType: String?

        public init(objectIdentifier: String? = nil, policyId: String? = nil, policyType: String? = nil) {
            self.objectIdentifier = objectIdentifier
            self.policyId = policyId
            self.policyType = policyType
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
            case policyId = "PolicyId"
            case policyType = "PolicyType"
        }
    }

    public struct GetObjectAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The attributes that are associated with the object.
        public let attributes: [AttributeKeyAndValue]?

        public init(attributes: [AttributeKeyAndValue]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct BatchListAttachedIndices: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "TargetReference", required: true, type: .structure)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// A reference to the object that has indices attached.
        public let targetReference: ObjectReference

        public init(nextToken: String? = nil, maxResults: Int32? = nil, targetReference: ObjectReference) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.targetReference = targetReference
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case targetReference = "TargetReference"
        }
    }

    public struct UpgradePublishedSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DryRun", required: false, type: .boolean), 
            AWSShapeMember(label: "DevelopmentSchemaArn", required: true, type: .string), 
            AWSShapeMember(label: "MinorVersion", required: true, type: .string), 
            AWSShapeMember(label: "PublishedSchemaArn", required: true, type: .string)
        ]
        /// Used for testing whether the Development schema provided is backwards compatible, or not, with the publish schema provided by the user to be upgraded. If schema compatibility fails, an exception would be thrown else the call would succeed. This parameter is optional and defaults to false.
        public let dryRun: Bool?
        /// The ARN of the development schema with the changes used for the upgrade.
        public let developmentSchemaArn: String
        /// Identifies the minor version of the published schema that will be created. This parameter is NOT optional.
        public let minorVersion: String
        /// The ARN of the published schema to be upgraded.
        public let publishedSchemaArn: String

        public init(dryRun: Bool? = nil, developmentSchemaArn: String, minorVersion: String, publishedSchemaArn: String) {
            self.dryRun = dryRun
            self.developmentSchemaArn = developmentSchemaArn
            self.minorVersion = minorVersion
            self.publishedSchemaArn = publishedSchemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case dryRun = "DryRun"
            case developmentSchemaArn = "DevelopmentSchemaArn"
            case minorVersion = "MinorVersion"
            case publishedSchemaArn = "PublishedSchemaArn"
        }
    }

    public struct BatchGetLinkAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifier", required: true, type: .structure), 
            AWSShapeMember(label: "AttributeNames", required: true, type: .list)
        ]
        /// Allows a typed link specifier to be accepted as input.
        public let typedLinkSpecifier: TypedLinkSpecifier
        /// A list of attribute names whose values will be retrieved.
        public let attributeNames: [String]

        public init(typedLinkSpecifier: TypedLinkSpecifier, attributeNames: [String]) {
            self.typedLinkSpecifier = typedLinkSpecifier
            self.attributeNames = attributeNames
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifier = "TypedLinkSpecifier"
            case attributeNames = "AttributeNames"
        }
    }

    public struct ListAppliedSchemaArnsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArns", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The ARNs of schemas that are applied to the directory.
        public let schemaArns: [String]?
        /// The pagination token.
        public let nextToken: String?

        public init(schemaArns: [String]? = nil, nextToken: String? = nil) {
            self.schemaArns = schemaArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArns = "SchemaArns"
            case nextToken = "NextToken"
        }
    }

    public struct FacetAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "AttributeReference", required: false, type: .structure), 
            AWSShapeMember(label: "AttributeDefinition", required: false, type: .structure), 
            AWSShapeMember(label: "RequiredBehavior", required: false, type: .enum)
        ]
        /// The name of the facet attribute.
        public let name: String
        /// An attribute reference that is associated with the attribute. See Attribute References for more information.
        public let attributeReference: FacetAttributeReference?
        /// A facet attribute consists of either a definition or a reference. This structure contains the attribute definition. See Attribute References for more information.
        public let attributeDefinition: FacetAttributeDefinition?
        /// The required behavior of the FacetAttribute.
        public let requiredBehavior: RequiredAttributeBehavior?

        public init(name: String, attributeReference: FacetAttributeReference? = nil, attributeDefinition: FacetAttributeDefinition? = nil, requiredBehavior: RequiredAttributeBehavior? = nil) {
            self.name = name
            self.attributeReference = attributeReference
            self.attributeDefinition = attributeDefinition
            self.requiredBehavior = requiredBehavior
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case attributeReference = "AttributeReference"
            case attributeDefinition = "AttributeDefinition"
            case requiredBehavior = "RequiredBehavior"
        }
    }

    public struct TypedAttributeValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NumberValue", required: false, type: .string), 
            AWSShapeMember(label: "BooleanValue", required: false, type: .boolean), 
            AWSShapeMember(label: "DatetimeValue", required: false, type: .timestamp), 
            AWSShapeMember(label: "StringValue", required: false, type: .string), 
            AWSShapeMember(label: "BinaryValue", required: false, type: .blob)
        ]
        /// A number data value.
        public let numberValue: String?
        /// A Boolean data value.
        public let booleanValue: Bool?
        /// A date and time value.
        public let datetimeValue: TimeStamp?
        /// A string data value.
        public let stringValue: String?
        /// A binary data value.
        public let binaryValue: Data?

        public init(numberValue: String? = nil, booleanValue: Bool? = nil, datetimeValue: TimeStamp? = nil, stringValue: String? = nil, binaryValue: Data? = nil) {
            self.numberValue = numberValue
            self.booleanValue = booleanValue
            self.datetimeValue = datetimeValue
            self.stringValue = stringValue
            self.binaryValue = binaryValue
        }

        private enum CodingKeys: String, CodingKey {
            case numberValue = "NumberValue"
            case booleanValue = "BooleanValue"
            case datetimeValue = "DatetimeValue"
            case stringValue = "StringValue"
            case binaryValue = "BinaryValue"
        }
    }

    public struct BatchAddFacetToObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaFacet", required: true, type: .structure), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "ObjectAttributeList", required: true, type: .list)
        ]
        /// Represents the facet being added to the object.
        public let schemaFacet: SchemaFacet
        /// A reference to the object being mutated.
        public let objectReference: ObjectReference
        /// The attributes to set on the object.
        public let objectAttributeList: [AttributeKeyAndValue]

        public init(schemaFacet: SchemaFacet, objectReference: ObjectReference, objectAttributeList: [AttributeKeyAndValue]) {
            self.schemaFacet = schemaFacet
            self.objectReference = objectReference
            self.objectAttributeList = objectAttributeList
        }

        private enum CodingKeys: String, CodingKey {
            case schemaFacet = "SchemaFacet"
            case objectReference = "ObjectReference"
            case objectAttributeList = "ObjectAttributeList"
        }
    }

    public struct AttachToIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the object that was attached to the index.
        public let attachedObjectIdentifier: String?

        public init(attachedObjectIdentifier: String? = nil) {
            self.attachedObjectIdentifier = attachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case attachedObjectIdentifier = "AttachedObjectIdentifier"
        }
    }

    public struct UpdateTypedLinkFacetResponse: AWSShape {

    }

    public struct BatchRemoveFacetFromObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "SchemaFacet", required: true, type: .structure)
        ]
        /// A reference to the object whose facet will be removed.
        public let objectReference: ObjectReference
        /// The facet to remove from the object.
        public let schemaFacet: SchemaFacet

        public init(objectReference: ObjectReference, schemaFacet: SchemaFacet) {
            self.objectReference = objectReference
            self.schemaFacet = schemaFacet
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case schemaFacet = "SchemaFacet"
        }
    }

    public struct GetTypedLinkFacetInformationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String
        /// The unique name of the typed link facet.
        public let name: String

        public init(schemaArn: String, name: String) {
            self.schemaArn = schemaArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
        }
    }

    public struct ListManagedSchemaArnsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArns", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The ARNs for all AWS managed schemas.
        public let schemaArns: [String]?
        /// The pagination token.
        public let nextToken: String?

        public init(schemaArns: [String]? = nil, nextToken: String? = nil) {
            self.schemaArns = schemaArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArns = "SchemaArns"
            case nextToken = "NextToken"
        }
    }

    public struct BatchDetachObjectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detachedObjectIdentifier", required: false, type: .string)
        ]
        /// The ObjectIdentifier of the detached object.
        public let detachedObjectIdentifier: String?

        public init(detachedObjectIdentifier: String? = nil) {
            self.detachedObjectIdentifier = detachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case detachedObjectIdentifier = "detachedObjectIdentifier"
        }
    }

    public struct PolicyToPath: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policies", required: false, type: .list), 
            AWSShapeMember(label: "Path", required: false, type: .string)
        ]
        /// List of policy objects.
        public let policies: [PolicyAttachment]?
        /// The path that is referenced from the root.
        public let path: String?

        public init(policies: [PolicyAttachment]? = nil, path: String? = nil) {
            self.policies = policies
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case policies = "Policies"
            case path = "Path"
        }
    }

    public struct ApplySchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AppliedSchemaArn", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", required: false, type: .string)
        ]
        /// The applied schema ARN that is associated with the copied schema in the Directory. You can use this ARN to describe the schema information applied on this directory. For more information, see arns.
        public let appliedSchemaArn: String?
        /// The ARN that is associated with the Directory. For more information, see arns.
        public let directoryArn: String?

        public init(appliedSchemaArn: String? = nil, directoryArn: String? = nil) {
            self.appliedSchemaArn = appliedSchemaArn
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case appliedSchemaArn = "AppliedSchemaArn"
            case directoryArn = "DirectoryArn"
        }
    }

    public struct ListTypedLinkFacetNamesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "FacetNames", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The names of typed link facets that exist within the schema.
        public let facetNames: [String]?

        public init(nextToken: String? = nil, facetNames: [String]? = nil) {
            self.nextToken = nextToken
            self.facetNames = facetNames
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case facetNames = "FacetNames"
        }
    }

    public struct BatchUpdateLinkAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifier", required: true, type: .structure), 
            AWSShapeMember(label: "AttributeUpdates", required: true, type: .list)
        ]
        /// Allows a typed link specifier to be accepted as input.
        public let typedLinkSpecifier: TypedLinkSpecifier
        /// The attributes update structure.
        public let attributeUpdates: [LinkAttributeUpdate]

        public init(typedLinkSpecifier: TypedLinkSpecifier, attributeUpdates: [LinkAttributeUpdate]) {
            self.typedLinkSpecifier = typedLinkSpecifier
            self.attributeUpdates = attributeUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifier = "TypedLinkSpecifier"
            case attributeUpdates = "AttributeUpdates"
        }
    }

    public struct BatchWriteRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Operations", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) that is associated with the Directory. For more information, see arns.
        public let directoryArn: String
        /// A list of operations that are part of the batch.
        public let operations: [BatchWriteOperation]

        public init(directoryArn: String, operations: [BatchWriteOperation]) {
            self.directoryArn = directoryArn
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
            case operations = "Operations"
        }
    }

    public struct GetTypedLinkFacetInformationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityAttributeOrder", required: false, type: .list)
        ]
        /// The order of identity attributes for the facet, from most significant to least significant. The ability to filter typed links considers the order that the attributes are defined on the typed link facet. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range. Filters are interpreted in the order of the attributes on the typed link facet, not the order in which they are supplied to any API calls. For more information about identity attributes, see Typed link.
        public let identityAttributeOrder: [String]?

        public init(identityAttributeOrder: [String]? = nil) {
            self.identityAttributeOrder = identityAttributeOrder
        }

        private enum CodingKeys: String, CodingKey {
            case identityAttributeOrder = "IdentityAttributeOrder"
        }
    }

    public struct ListIndexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "RangesOnIndexedValues", required: false, type: .list), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "IndexReference", required: true, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Specifies the ranges of indexed values that you want to query.
        public let rangesOnIndexedValues: [ObjectAttributeRange]?
        /// The ARN of the directory that the index exists in.
        public let directoryArn: String
        /// The reference to the index to list.
        public let indexReference: ObjectReference
        /// The maximum number of objects in a single page to retrieve from the index during a request. For more information, see AWS Directory Service Limits.
        public let maxResults: Int32?
        /// The consistency level to execute the request at.
        public let consistencyLevel: ConsistencyLevel?

        public init(nextToken: String? = nil, rangesOnIndexedValues: [ObjectAttributeRange]? = nil, directoryArn: String, indexReference: ObjectReference, maxResults: Int32? = nil, consistencyLevel: ConsistencyLevel? = nil) {
            self.nextToken = nextToken
            self.rangesOnIndexedValues = rangesOnIndexedValues
            self.directoryArn = directoryArn
            self.indexReference = indexReference
            self.maxResults = maxResults
            self.consistencyLevel = consistencyLevel
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case rangesOnIndexedValues = "RangesOnIndexedValues"
            case directoryArn = "x-amz-data-partition"
            case indexReference = "IndexReference"
            case maxResults = "MaxResults"
            case consistencyLevel = "x-amz-consistency-level"
        }
    }

    public struct BatchListObjectAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "FacetFilter", required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Used to filter the list of object attributes that are associated with a certain facet.
        public let facetFilter: SchemaFacet?
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// Reference of the object whose attributes need to be listed.
        public let objectReference: ObjectReference

        public init(nextToken: String? = nil, facetFilter: SchemaFacet? = nil, maxResults: Int32? = nil, objectReference: ObjectReference) {
            self.nextToken = nextToken
            self.facetFilter = facetFilter
            self.maxResults = maxResults
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case facetFilter = "FacetFilter"
            case maxResults = "MaxResults"
            case objectReference = "ObjectReference"
        }
    }

    public struct BatchGetObjectInformationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SchemaFacets", required: false, type: .list)
        ]
        /// The ObjectIdentifier of the specified object.
        public let objectIdentifier: String?
        /// The facets attached to the specified object.
        public let schemaFacets: [SchemaFacet]?

        public init(objectIdentifier: String? = nil, schemaFacets: [SchemaFacet]? = nil) {
            self.objectIdentifier = objectIdentifier
            self.schemaFacets = schemaFacets
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
            case schemaFacets = "SchemaFacets"
        }
    }

    public struct AttachPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "PolicyReference", required: true, type: .structure)
        ]
        /// The reference that identifies the object to which the policy will be attached.
        public let objectReference: ObjectReference
        /// The Amazon Resource Name (ARN) that is associated with the Directory where both objects reside. For more information, see arns.
        public let directoryArn: String
        /// The reference that is associated with the policy object.
        public let policyReference: ObjectReference

        public init(objectReference: ObjectReference, directoryArn: String, policyReference: ObjectReference) {
            self.objectReference = objectReference
            self.directoryArn = directoryArn
            self.policyReference = policyReference
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case directoryArn = "x-amz-data-partition"
            case policyReference = "PolicyReference"
        }
    }

    public struct ListFacetAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The attributes attached to the facet.
        public let attributes: [FacetAttribute]?

        public init(nextToken: String? = nil, attributes: [FacetAttribute]? = nil) {
            self.nextToken = nextToken
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case attributes = "Attributes"
        }
    }

    public struct ListObjectParentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides. For more information, see arns.
        public let directoryArn: String
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        public let consistencyLevel: ConsistencyLevel?
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// The reference that identifies the object for which parent objects are being listed.
        public let objectReference: ObjectReference

        public init(nextToken: String? = nil, directoryArn: String, consistencyLevel: ConsistencyLevel? = nil, maxResults: Int32? = nil, objectReference: ObjectReference) {
            self.nextToken = nextToken
            self.directoryArn = directoryArn
            self.consistencyLevel = consistencyLevel
            self.maxResults = maxResults
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case directoryArn = "x-amz-data-partition"
            case consistencyLevel = "x-amz-consistency-level"
            case maxResults = "MaxResults"
            case objectReference = "ObjectReference"
        }
    }

    public struct FacetAttributeDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultValue", required: false, type: .structure), 
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "Rules", required: false, type: .map), 
            AWSShapeMember(label: "IsImmutable", required: false, type: .boolean)
        ]
        /// The default value of the attribute (if configured).
        public let defaultValue: TypedAttributeValue?
        /// The type of the attribute.
        public let `type`: FacetAttributeType
        /// Validation rules attached to the attribute definition.
        public let rules: [String: Rule]?
        /// Whether the attribute is mutable or not.
        public let isImmutable: Bool?

        public init(defaultValue: TypedAttributeValue? = nil, type: FacetAttributeType, rules: [String: Rule]? = nil, isImmutable: Bool? = nil) {
            self.defaultValue = defaultValue
            self.`type` = `type`
            self.rules = rules
            self.isImmutable = isImmutable
        }

        private enum CodingKeys: String, CodingKey {
            case defaultValue = "DefaultValue"
            case `type` = "Type"
            case rules = "Rules"
            case isImmutable = "IsImmutable"
        }
    }

    public struct GetAppliedSchemaVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AppliedSchemaArn", required: false, type: .string)
        ]
        /// Current applied schema ARN, including the minor version in use if one was provided.
        public let appliedSchemaArn: String?

        public init(appliedSchemaArn: String? = nil) {
            self.appliedSchemaArn = appliedSchemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case appliedSchemaArn = "AppliedSchemaArn"
        }
    }

    public struct GetSchemaAsJsonResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Document", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The JSON representation of the schema document.
        public let document: String?
        /// The name of the retrieved schema.
        public let name: String?

        public init(document: String? = nil, name: String? = nil) {
            self.document = document
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case document = "Document"
            case name = "Name"
        }
    }

    public struct BatchRemoveFacetFromObjectResponse: AWSShape {

    }

    public struct GetSchemaAsJsonRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The ARN of the schema to retrieve.
        public let schemaArn: String

        public init(schemaArn: String) {
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
        }
    }

    public struct BatchReadResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Responses", required: false, type: .list)
        ]
        /// A list of all the responses for each batch read.
        public let responses: [BatchReadOperationResponse]?

        public init(responses: [BatchReadOperationResponse]? = nil) {
            self.responses = responses
        }

        private enum CodingKeys: String, CodingKey {
            case responses = "Responses"
        }
    }

    public enum RequiredAttributeBehavior: String, CustomStringConvertible, Codable {
        case requiredAlways = "REQUIRED_ALWAYS"
        case notRequired = "NOT_REQUIRED"
        public var description: String { return self.rawValue }
    }

    public struct TypedLinkSpecifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdentityAttributeValues", required: true, type: .list), 
            AWSShapeMember(label: "SourceObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "TypedLinkFacet", required: true, type: .structure), 
            AWSShapeMember(label: "TargetObjectReference", required: true, type: .structure)
        ]
        /// Identifies the attribute value to update.
        public let identityAttributeValues: [AttributeNameAndValue]
        /// Identifies the source object that the typed link will attach to.
        public let sourceObjectReference: ObjectReference
        /// Identifies the typed link facet that is associated with the typed link.
        public let typedLinkFacet: TypedLinkSchemaAndFacetName
        /// Identifies the target object that the typed link will attach to.
        public let targetObjectReference: ObjectReference

        public init(identityAttributeValues: [AttributeNameAndValue], sourceObjectReference: ObjectReference, typedLinkFacet: TypedLinkSchemaAndFacetName, targetObjectReference: ObjectReference) {
            self.identityAttributeValues = identityAttributeValues
            self.sourceObjectReference = sourceObjectReference
            self.typedLinkFacet = typedLinkFacet
            self.targetObjectReference = targetObjectReference
        }

        private enum CodingKeys: String, CodingKey {
            case identityAttributeValues = "IdentityAttributeValues"
            case sourceObjectReference = "SourceObjectReference"
            case typedLinkFacet = "TypedLinkFacet"
            case targetObjectReference = "TargetObjectReference"
        }
    }

    public struct BatchDetachTypedLinkResponse: AWSShape {

    }

    public struct CreateFacetResponse: AWSShape {

    }

    public struct BatchDeleteObject: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The reference that identifies the object.
        public let objectReference: ObjectReference

        public init(objectReference: ObjectReference) {
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
        }
    }

    public struct DisableDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The ARN of the directory to disable.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct BatchListAttachedIndicesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "IndexAttachments", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The indices attached to the specified object.
        public let indexAttachments: [IndexAttachment]?

        public init(nextToken: String? = nil, indexAttachments: [IndexAttachment]? = nil) {
            self.nextToken = nextToken
            self.indexAttachments = indexAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case indexAttachments = "IndexAttachments"
        }
    }

    public struct ListPolicyAttachmentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectIdentifiers", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// A list of ObjectIdentifiers to which the policy is attached.
        public let objectIdentifiers: [String]?

        public init(nextToken: String? = nil, objectIdentifiers: [String]? = nil) {
            self.nextToken = nextToken
            self.objectIdentifiers = objectIdentifiers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case objectIdentifiers = "ObjectIdentifiers"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The key that is associated with the tag.
        public let key: String?
        /// The value that is associated with the tag.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct BatchListPolicyAttachments: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "PolicyReference", required: true, type: .structure)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The reference that identifies the policy object.
        public let policyReference: ObjectReference

        public init(nextToken: String? = nil, maxResults: Int32? = nil, policyReference: ObjectReference) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.policyReference = policyReference
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case policyReference = "PolicyReference"
        }
    }

    public struct ListObjectPoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachedPolicyIds", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of policy ObjectIdentifiers, that are attached to the object.
        public let attachedPolicyIds: [String]?
        /// The pagination token.
        public let nextToken: String?

        public init(attachedPolicyIds: [String]? = nil, nextToken: String? = nil) {
            self.attachedPolicyIds = attachedPolicyIds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case attachedPolicyIds = "AttachedPolicyIds"
            case nextToken = "NextToken"
        }
    }

    public struct Rule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Parameters", required: false, type: .map)
        ]
        /// The type of attribute validation rule.
        public let `type`: RuleType?
        /// The minimum and maximum parameters that are associated with the rule.
        public let parameters: [String: String]?

        public init(type: RuleType? = nil, parameters: [String: String]? = nil) {
            self.`type` = `type`
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case parameters = "Parameters"
        }
    }

    public struct AttachTypedLinkRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: true, type: .list), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "SourceObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "TypedLinkFacet", required: true, type: .structure), 
            AWSShapeMember(label: "TargetObjectReference", required: true, type: .structure)
        ]
        /// A set of attributes that are associated with the typed link.
        public let attributes: [AttributeNameAndValue]
        /// The Amazon Resource Name (ARN) of the directory where you want to attach the typed link.
        public let directoryArn: String
        /// Identifies the source object that the typed link will attach to.
        public let sourceObjectReference: ObjectReference
        /// Identifies the typed link facet that is associated with the typed link.
        public let typedLinkFacet: TypedLinkSchemaAndFacetName
        /// Identifies the target object that the typed link will attach to.
        public let targetObjectReference: ObjectReference

        public init(attributes: [AttributeNameAndValue], directoryArn: String, sourceObjectReference: ObjectReference, typedLinkFacet: TypedLinkSchemaAndFacetName, targetObjectReference: ObjectReference) {
            self.attributes = attributes
            self.directoryArn = directoryArn
            self.sourceObjectReference = sourceObjectReference
            self.typedLinkFacet = typedLinkFacet
            self.targetObjectReference = targetObjectReference
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
            case directoryArn = "x-amz-data-partition"
            case sourceObjectReference = "SourceObjectReference"
            case typedLinkFacet = "TypedLinkFacet"
            case targetObjectReference = "TargetObjectReference"
        }
    }

    public struct ListDevelopmentSchemaArnsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct GetFacetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Facet", required: false, type: .structure)
        ]
        /// The Facet structure that is associated with the facet.
        public let facet: Facet?

        public init(facet: Facet? = nil) {
            self.facet = facet
        }

        private enum CodingKeys: String, CodingKey {
            case facet = "Facet"
        }
    }

    public struct ListTypedLinkFacetAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// An ordered set of attributes associate with the typed link.
        public let attributes: [TypedLinkAttributeDefinition]?

        public init(nextToken: String? = nil, attributes: [TypedLinkAttributeDefinition]? = nil) {
            self.nextToken = nextToken
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case attributes = "Attributes"
        }
    }

    public struct BatchListObjectAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The attributes map that is associated with the object. AttributeArn is the key; attribute value is the value.
        public let attributes: [AttributeKeyAndValue]?

        public init(nextToken: String? = nil, attributes: [AttributeKeyAndValue]? = nil) {
            self.nextToken = nextToken
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case attributes = "Attributes"
        }
    }

    public struct DeleteFacetResponse: AWSShape {

    }

    public struct IndexAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "IndexedAttributes", required: false, type: .list)
        ]
        /// In response to ListIndex, the ObjectIdentifier of the object attached to the index. In response to ListAttachedIndices, the ObjectIdentifier of the index attached to the object. This field will always contain the ObjectIdentifier of the object on the opposite side of the attachment specified in the query.
        public let objectIdentifier: String?
        /// The indexed attribute values.
        public let indexedAttributes: [AttributeKeyAndValue]?

        public init(objectIdentifier: String? = nil, indexedAttributes: [AttributeKeyAndValue]? = nil) {
            self.objectIdentifier = objectIdentifier
            self.indexedAttributes = indexedAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
            case indexedAttributes = "IndexedAttributes"
        }
    }

    public struct LookupPolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PolicyToPathList", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Provides list of path to policies. Policies contain PolicyId, ObjectIdentifier, and PolicyType. For more information, see Policies.
        public let policyToPathList: [PolicyToPath]?

        public init(nextToken: String? = nil, policyToPathList: [PolicyToPath]? = nil) {
            self.nextToken = nextToken
            self.policyToPathList = policyToPathList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case policyToPathList = "PolicyToPathList"
        }
    }

    public struct DeleteObjectResponse: AWSShape {

    }

    public struct BatchListPolicyAttachmentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ObjectIdentifiers", required: false, type: .list)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// A list of ObjectIdentifiers to which the policy is attached.
        public let objectIdentifiers: [String]?

        public init(nextToken: String? = nil, objectIdentifiers: [String]? = nil) {
            self.nextToken = nextToken
            self.objectIdentifiers = objectIdentifiers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case objectIdentifiers = "ObjectIdentifiers"
        }
    }

    public struct GetLinkAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Attributes", required: false, type: .list)
        ]
        /// The attributes that are associated with the typed link.
        public let attributes: [AttributeKeyAndValue]?

        public init(attributes: [AttributeKeyAndValue]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "Attributes"
        }
    }

    public struct BatchDetachTypedLink: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifier", required: true, type: .structure)
        ]
        /// Used to accept a typed link specifier as input.
        public let typedLinkSpecifier: TypedLinkSpecifier

        public init(typedLinkSpecifier: TypedLinkSpecifier) {
            self.typedLinkSpecifier = typedLinkSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifier = "TypedLinkSpecifier"
        }
    }

    public enum ObjectType: String, CustomStringConvertible, Codable {
        case node = "NODE"
        case leafNode = "LEAF_NODE"
        case policy = "POLICY"
        case index = "INDEX"
        public var description: String { return self.rawValue }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource. Tagging is only supported for directories.
        public let resourceArn: String
        /// A list of tag key-value pairs.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tags = "Tags"
        }
    }

    public struct PathToObjectIdentifiers: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifiers", required: false, type: .list), 
            AWSShapeMember(label: "Path", required: false, type: .string)
        ]
        /// Lists ObjectIdentifiers starting from directory root to the object in the request.
        public let objectIdentifiers: [String]?
        /// The path that is used to identify the object starting from directory root.
        public let path: String?

        public init(objectIdentifiers: [String]? = nil, path: String? = nil) {
            self.objectIdentifiers = objectIdentifiers
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifiers = "ObjectIdentifiers"
            case path = "Path"
        }
    }

    public enum FacetStyle: String, CustomStringConvertible, Codable {
        case `static` = "STATIC"
        case dynamic = "DYNAMIC"
        public var description: String { return self.rawValue }
    }

    public struct DeleteSchemaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: false, type: .string)
        ]
        /// The input ARN that is returned as part of the response. For more information, see arns.
        public let schemaArn: String?

        public init(schemaArn: String? = nil) {
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
        }
    }

    public struct GetAppliedSchemaVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", required: true, type: .string)
        ]
        /// The ARN of the applied schema.
        public let schemaArn: String

        public init(schemaArn: String) {
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "SchemaArn"
        }
    }

    public struct DeleteSchemaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the development schema. For more information, see arns.
        public let schemaArn: String

        public init(schemaArn: String) {
            self.schemaArn = schemaArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaArn = "x-amz-data-partition"
        }
    }

    public struct BatchAttachTypedLinkResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypedLinkSpecifier", required: false, type: .structure)
        ]
        /// Returns a typed link specifier as output.
        public let typedLinkSpecifier: TypedLinkSpecifier?

        public init(typedLinkSpecifier: TypedLinkSpecifier? = nil) {
            self.typedLinkSpecifier = typedLinkSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case typedLinkSpecifier = "TypedLinkSpecifier"
        }
    }

    public struct GetDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string)
        ]
        /// The ARN of the directory.
        public let directoryArn: String

        public init(directoryArn: String) {
            self.directoryArn = directoryArn
        }

        private enum CodingKeys: String, CodingKey {
            case directoryArn = "x-amz-data-partition"
        }
    }

    public struct TypedLinkAttributeRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: false, type: .string), 
            AWSShapeMember(label: "Range", required: true, type: .structure)
        ]
        /// The unique name of the typed link attribute.
        public let attributeName: String?
        /// The range of attribute values that are being selected.
        public let range: TypedAttributeValueRange

        public init(attributeName: String? = nil, range: TypedAttributeValueRange) {
            self.attributeName = attributeName
            self.range = range
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case range = "Range"
        }
    }

    public struct UntagResourceResponse: AWSShape {

    }

    public struct GetObjectInformationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SchemaFacets", required: false, type: .list)
        ]
        /// The ObjectIdentifier of the specified object.
        public let objectIdentifier: String?
        /// The facets attached to the specified object. Although the response does not include minor version information, the most recently applied minor version of each Facet is in effect. See GetAppliedSchemaVersion for details.
        public let schemaFacets: [SchemaFacet]?

        public init(objectIdentifier: String? = nil, schemaFacets: [SchemaFacet]? = nil) {
            self.objectIdentifier = objectIdentifier
            self.schemaFacets = schemaFacets
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
            case schemaFacets = "SchemaFacets"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ResourceArn", required: true, type: .string)
        ]
        /// The pagination token. This is for future use. Currently pagination is not supported for tagging.
        public let nextToken: String?
        /// The MaxResults parameter sets the maximum number of results returned in a single page. This is for future use and is not supported currently.
        public let maxResults: Int32?
        /// The Amazon Resource Name (ARN) of the resource. Tagging is only supported for directories.
        public let resourceArn: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, resourceArn: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case resourceArn = "ResourceArn"
        }
    }

    public struct BatchReadRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Operations", required: true, type: .list)
        ]
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        public let consistencyLevel: ConsistencyLevel?
        /// The Amazon Resource Name (ARN) that is associated with the Directory. For more information, see arns.
        public let directoryArn: String
        /// A list of operations that are part of the batch.
        public let operations: [BatchReadOperation]

        public init(consistencyLevel: ConsistencyLevel? = nil, directoryArn: String, operations: [BatchReadOperation]) {
            self.consistencyLevel = consistencyLevel
            self.directoryArn = directoryArn
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case consistencyLevel = "x-amz-consistency-level"
            case directoryArn = "x-amz-data-partition"
            case operations = "Operations"
        }
    }

    public struct ListObjectPoliciesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "ConsistencyLevel", location: .header(locationName: "x-amz-consistency-level"), required: false, type: .enum), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) that is associated with the Directory where objects reside. For more information, see arns.
        public let directoryArn: String
        /// Represents the manner and timing in which the successful write or update of an object is reflected in a subsequent read operation of that same object.
        public let consistencyLevel: ConsistencyLevel?
        /// The maximum number of items to be retrieved in a single call. This is an approximate number.
        public let maxResults: Int32?
        /// Reference that identifies the object for which policies will be listed.
        public let objectReference: ObjectReference

        public init(nextToken: String? = nil, directoryArn: String, consistencyLevel: ConsistencyLevel? = nil, maxResults: Int32? = nil, objectReference: ObjectReference) {
            self.nextToken = nextToken
            self.directoryArn = directoryArn
            self.consistencyLevel = consistencyLevel
            self.maxResults = maxResults
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case directoryArn = "x-amz-data-partition"
            case consistencyLevel = "x-amz-consistency-level"
            case maxResults = "MaxResults"
            case objectReference = "ObjectReference"
        }
    }

    public struct BatchUpdateObjectAttributesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectIdentifier", required: false, type: .string)
        ]
        /// ID that is associated with the object.
        public let objectIdentifier: String?

        public init(objectIdentifier: String? = nil) {
            self.objectIdentifier = objectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case objectIdentifier = "ObjectIdentifier"
        }
    }

    public struct BatchAttachToIndex: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IndexReference", required: true, type: .structure), 
            AWSShapeMember(label: "TargetReference", required: true, type: .structure)
        ]
        /// A reference to the index that you are attaching the object to.
        public let indexReference: ObjectReference
        /// A reference to the object that you are attaching to the index.
        public let targetReference: ObjectReference

        public init(indexReference: ObjectReference, targetReference: ObjectReference) {
            self.indexReference = indexReference
            self.targetReference = targetReference
        }

        private enum CodingKeys: String, CodingKey {
            case indexReference = "IndexReference"
            case targetReference = "TargetReference"
        }
    }

    public struct ListTypedLinkFacetAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SchemaArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) that is associated with the schema. For more information, see arns.
        public let schemaArn: String
        /// The unique name of the typed link facet.
        public let name: String
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, schemaArn: String, name: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.schemaArn = schemaArn
            self.name = name
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case schemaArn = "x-amz-data-partition"
            case name = "Name"
            case maxResults = "MaxResults"
        }
    }

    public struct BatchAttachPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "PolicyReference", required: true, type: .structure)
        ]
        /// The reference that identifies the object to which the policy will be attached.
        public let objectReference: ObjectReference
        /// The reference that is associated with the policy object.
        public let policyReference: ObjectReference

        public init(objectReference: ObjectReference, policyReference: ObjectReference) {
            self.objectReference = objectReference
            self.policyReference = policyReference
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case policyReference = "PolicyReference"
        }
    }

    public struct UpdateLinkAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeUpdates", required: true, type: .list), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "TypedLinkSpecifier", required: true, type: .structure)
        ]
        /// The attributes update structure.
        public let attributeUpdates: [LinkAttributeUpdate]
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the updated typed link resides. For more information, see arns or Typed link.
        public let directoryArn: String
        /// Allows a typed link specifier to be accepted as input.
        public let typedLinkSpecifier: TypedLinkSpecifier

        public init(attributeUpdates: [LinkAttributeUpdate], directoryArn: String, typedLinkSpecifier: TypedLinkSpecifier) {
            self.attributeUpdates = attributeUpdates
            self.directoryArn = directoryArn
            self.typedLinkSpecifier = typedLinkSpecifier
        }

        private enum CodingKeys: String, CodingKey {
            case attributeUpdates = "AttributeUpdates"
            case directoryArn = "x-amz-data-partition"
            case typedLinkSpecifier = "TypedLinkSpecifier"
        }
    }

    public struct DetachPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "PolicyReference", required: true, type: .structure)
        ]
        /// Reference that identifies the object whose policy object will be detached.
        public let objectReference: ObjectReference
        /// The Amazon Resource Name (ARN) that is associated with the Directory where both objects reside. For more information, see arns.
        public let directoryArn: String
        /// Reference that identifies the policy object.
        public let policyReference: ObjectReference

        public init(objectReference: ObjectReference, directoryArn: String, policyReference: ObjectReference) {
            self.objectReference = objectReference
            self.directoryArn = directoryArn
            self.policyReference = policyReference
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case directoryArn = "x-amz-data-partition"
            case policyReference = "PolicyReference"
        }
    }

    public struct UpdateObjectAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure), 
            AWSShapeMember(label: "DirectoryArn", location: .header(locationName: "x-amz-data-partition"), required: true, type: .string), 
            AWSShapeMember(label: "AttributeUpdates", required: true, type: .list)
        ]
        /// The reference that identifies the object.
        public let objectReference: ObjectReference
        /// The Amazon Resource Name (ARN) that is associated with the Directory where the object resides. For more information, see arns.
        public let directoryArn: String
        /// The attributes update structure.
        public let attributeUpdates: [ObjectAttributeUpdate]

        public init(objectReference: ObjectReference, directoryArn: String, attributeUpdates: [ObjectAttributeUpdate]) {
            self.objectReference = objectReference
            self.directoryArn = directoryArn
            self.attributeUpdates = attributeUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case objectReference = "ObjectReference"
            case directoryArn = "x-amz-data-partition"
            case attributeUpdates = "AttributeUpdates"
        }
    }

    public struct AttachObjectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachedObjectIdentifier", required: false, type: .string)
        ]
        /// The attached ObjectIdentifier, which is the child ObjectIdentifier.
        public let attachedObjectIdentifier: String?

        public init(attachedObjectIdentifier: String? = nil) {
            self.attachedObjectIdentifier = attachedObjectIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case attachedObjectIdentifier = "AttachedObjectIdentifier"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource. Tagging is only supported for directories.
        public let resourceArn: String
        /// Keys of the tag that need to be removed from the resource.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tagKeys = "TagKeys"
        }
    }

    public struct BatchWriteOperationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttachObject", required: false, type: .structure), 
            AWSShapeMember(label: "CreateObject", required: false, type: .structure), 
            AWSShapeMember(label: "AttachToIndex", required: false, type: .structure), 
            AWSShapeMember(label: "DeleteObject", required: false, type: .structure), 
            AWSShapeMember(label: "RemoveFacetFromObject", required: false, type: .structure), 
            AWSShapeMember(label: "UpdateObjectAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "DetachPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "CreateIndex", required: false, type: .structure), 
            AWSShapeMember(label: "UpdateLinkAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "DetachFromIndex", required: false, type: .structure), 
            AWSShapeMember(label: "DetachTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "AddFacetToObject", required: false, type: .structure), 
            AWSShapeMember(label: "AttachTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "DetachObject", required: false, type: .structure), 
            AWSShapeMember(label: "AttachPolicy", required: false, type: .structure)
        ]
        /// Attaches an object to a Directory.
        public let attachObject: BatchAttachObjectResponse?
        /// Creates an object in a Directory.
        public let createObject: BatchCreateObjectResponse?
        /// Attaches the specified object to the specified index.
        public let attachToIndex: BatchAttachToIndexResponse?
        /// Deletes an object in a Directory.
        public let deleteObject: BatchDeleteObjectResponse?
        /// The result of a batch remove facet from object operation.
        public let removeFacetFromObject: BatchRemoveFacetFromObjectResponse?
        /// Updates a given object’s attributes.
        public let updateObjectAttributes: BatchUpdateObjectAttributesResponse?
        /// Detaches a policy from a Directory.
        public let detachPolicy: BatchDetachPolicyResponse?
        /// Creates an index object. See Indexing for more information.
        public let createIndex: BatchCreateIndexResponse?
        /// Represents the output of a BatchWrite response operation.
        public let updateLinkAttributes: BatchUpdateLinkAttributesResponse?
        /// Detaches the specified object from the specified index.
        public let detachFromIndex: BatchDetachFromIndexResponse?
        /// Detaches a typed link from a specified source and target object. For more information, see Typed link.
        public let detachTypedLink: BatchDetachTypedLinkResponse?
        /// The result of an add facet to object batch operation.
        public let addFacetToObject: BatchAddFacetToObjectResponse?
        /// Attaches a typed link to a specified source and target object. For more information, see Typed link.
        public let attachTypedLink: BatchAttachTypedLinkResponse?
        /// Detaches an object from a Directory.
        public let detachObject: BatchDetachObjectResponse?
        /// Attaches a policy object to a regular object. An object can have a limited number of attached policies.
        public let attachPolicy: BatchAttachPolicyResponse?

        public init(attachObject: BatchAttachObjectResponse? = nil, createObject: BatchCreateObjectResponse? = nil, attachToIndex: BatchAttachToIndexResponse? = nil, deleteObject: BatchDeleteObjectResponse? = nil, removeFacetFromObject: BatchRemoveFacetFromObjectResponse? = nil, updateObjectAttributes: BatchUpdateObjectAttributesResponse? = nil, detachPolicy: BatchDetachPolicyResponse? = nil, createIndex: BatchCreateIndexResponse? = nil, updateLinkAttributes: BatchUpdateLinkAttributesResponse? = nil, detachFromIndex: BatchDetachFromIndexResponse? = nil, detachTypedLink: BatchDetachTypedLinkResponse? = nil, addFacetToObject: BatchAddFacetToObjectResponse? = nil, attachTypedLink: BatchAttachTypedLinkResponse? = nil, detachObject: BatchDetachObjectResponse? = nil, attachPolicy: BatchAttachPolicyResponse? = nil) {
            self.attachObject = attachObject
            self.createObject = createObject
            self.attachToIndex = attachToIndex
            self.deleteObject = deleteObject
            self.removeFacetFromObject = removeFacetFromObject
            self.updateObjectAttributes = updateObjectAttributes
            self.detachPolicy = detachPolicy
            self.createIndex = createIndex
            self.updateLinkAttributes = updateLinkAttributes
            self.detachFromIndex = detachFromIndex
            self.detachTypedLink = detachTypedLink
            self.addFacetToObject = addFacetToObject
            self.attachTypedLink = attachTypedLink
            self.detachObject = detachObject
            self.attachPolicy = attachPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case attachObject = "AttachObject"
            case createObject = "CreateObject"
            case attachToIndex = "AttachToIndex"
            case deleteObject = "DeleteObject"
            case removeFacetFromObject = "RemoveFacetFromObject"
            case updateObjectAttributes = "UpdateObjectAttributes"
            case detachPolicy = "DetachPolicy"
            case createIndex = "CreateIndex"
            case updateLinkAttributes = "UpdateLinkAttributes"
            case detachFromIndex = "DetachFromIndex"
            case detachTypedLink = "DetachTypedLink"
            case addFacetToObject = "AddFacetToObject"
            case attachTypedLink = "AttachTypedLink"
            case detachObject = "DetachObject"
            case attachPolicy = "AttachPolicy"
        }
    }

    public struct BatchListOutgoingTypedLinks: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "FilterAttributeRanges", required: false, type: .list), 
            AWSShapeMember(label: "FilterTypedLink", required: false, type: .structure), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ObjectReference", required: true, type: .structure)
        ]
        /// The pagination token.
        public let nextToken: String?
        /// Provides range filters for multiple attributes. When providing ranges to typed link selection, any inexact ranges must be specified at the end. Any attributes that do not have a range specified are presumed to match the entire range.
        public let filterAttributeRanges: [TypedLinkAttributeRange]?
        /// Filters are interpreted in the order of the attributes defined on the typed link facet, not the order they are supplied to any API calls.
        public let filterTypedLink: TypedLinkSchemaAndFacetName?
        /// The maximum number of results to retrieve.
        public let maxResults: Int32?
        /// The reference that identifies the object whose attributes will be listed.
        public let objectReference: ObjectReference

        public init(nextToken: String? = nil, filterAttributeRanges: [TypedLinkAttributeRange]? = nil, filterTypedLink: TypedLinkSchemaAndFacetName? = nil, maxResults: Int32? = nil, objectReference: ObjectReference) {
            self.nextToken = nextToken
            self.filterAttributeRanges = filterAttributeRanges
            self.filterTypedLink = filterTypedLink
            self.maxResults = maxResults
            self.objectReference = objectReference
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filterAttributeRanges = "FilterAttributeRanges"
            case filterTypedLink = "FilterTypedLink"
            case maxResults = "MaxResults"
            case objectReference = "ObjectReference"
        }
    }

}