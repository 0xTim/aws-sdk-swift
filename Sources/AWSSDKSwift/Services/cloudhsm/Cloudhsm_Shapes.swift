// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Cloudhsm {

    public struct ModifyHapgResponse: Serializable, Initializable {
        /// The ARN of the high-availability partition group.
        var hapgArn: String? = nil

        public init() {}

        public init(hapgArn: String? = nil) {
            self.hapgArn = hapgArn
        }

    }

    public struct DeleteHsmResponse: Serializable, Initializable {
        /// The status of the operation.
        var status: String = ""

        public init() {}

        public init(status: String) {
            self.status = status
        }

    }

    public struct DescribeHsmRequest: Serializable, Initializable {
        /// The serial number of the HSM. Either the HsmArn or the HsmSerialNumber parameter must be specified.
        var hsmSerialNumber: String? = nil
        /// The ARN of the HSM. Either the HsmArn or the SerialNumber parameter must be specified.
        var hsmArn: String? = nil

        public init() {}

        public init(hsmSerialNumber: String? = nil, hsmArn: String? = nil) {
            self.hsmSerialNumber = hsmSerialNumber
            self.hsmArn = hsmArn
        }

    }

    public struct ListTagsForResourceRequest: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the AWS CloudHSM resource.
        var resourceArn: String = ""

        public init() {}

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

    }

    public struct ListTagsForResourceResponse: Serializable, Initializable {
        /// One or more tags.
        var tagList: [Tag] = []

        public init() {}

        public init(tagList: [Tag]) {
            self.tagList = tagList
        }

    }

    public struct CreateHapgRequest: Serializable, Initializable {
        /// The label of the new high-availability partition group.
        var label: String = ""

        public init() {}

        public init(label: String) {
            self.label = label
        }

    }

    public struct GetConfigRequest: Serializable, Initializable {
        /// The ARN of the client.
        var clientArn: String = ""
        /// A list of ARNs that identify the high-availability partition groups that are associated with the client.
        var hapgList: [String] = []
        /// The client version.
        var clientVersion: String = ""

        public init() {}

        public init(clientArn: String, hapgList: [String], clientVersion: String) {
            self.clientArn = clientArn
            self.hapgList = hapgList
            self.clientVersion = clientVersion
        }

    }

    public struct ModifyHapgRequest: Serializable, Initializable {
        /// The new label for the high-availability partition group.
        var label: String? = nil
        /// The ARN of the high-availability partition group to modify.
        var hapgArn: String = ""
        /// The list of partition serial numbers to make members of the high-availability partition group.
        var partitionSerialList: [String]? = nil

        public init() {}

        public init(label: String? = nil, hapgArn: String, partitionSerialList: [String]? = nil) {
            self.label = label
            self.hapgArn = hapgArn
            self.partitionSerialList = partitionSerialList
        }

    }

    public struct ListLunaClientsRequest: Serializable, Initializable {
        /// The NextToken value from a previous call to ListLunaClients. Pass null if this is the first call.
        var nextToken: String? = nil

        public init() {}

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

    }

    public struct CreateLunaClientRequest: Serializable, Initializable {
        /// The contents of a Base64-Encoded X.509 v3 certificate to be installed on the HSMs used by this client.
        var certificate: String = ""
        /// The label for the client.
        var label: String? = nil

        public init() {}

        public init(certificate: String, label: String? = nil) {
            self.certificate = certificate
            self.label = label
        }

    }

    public struct ModifyLunaClientRequest: Serializable, Initializable {
        /// The new certificate for the client.
        var certificate: String = ""
        /// The ARN of the client.
        var clientArn: String = ""

        public init() {}

        public init(certificate: String, clientArn: String) {
            self.certificate = certificate
            self.clientArn = clientArn
        }

    }

    public struct DescribeLunaClientRequest: Serializable, Initializable {
        /// The ARN of the client.
        var clientArn: String? = nil
        /// The certificate fingerprint.
        var certificateFingerprint: String? = nil

        public init() {}

        public init(clientArn: String? = nil, certificateFingerprint: String? = nil) {
            self.clientArn = clientArn
            self.certificateFingerprint = certificateFingerprint
        }

    }

    public struct GetConfigResponse: Serializable, Initializable {
        /// The type of credentials.
        var configType: String? = nil
        /// The chrystoki.conf configuration file.
        var configFile: String? = nil
        /// The certificate file containing the server.pem files of the HSMs.
        var configCred: String? = nil

        public init() {}

        public init(configType: String? = nil, configFile: String? = nil, configCred: String? = nil) {
            self.configType = configType
            self.configFile = configFile
            self.configCred = configCred
        }

    }

    public struct DeleteHsmRequest: Serializable, Initializable {
        /// The ARN of the HSM to delete.
        var hsmArn: String = ""

        public init() {}

        public init(hsmArn: String) {
            self.hsmArn = hsmArn
        }

    }

    public struct ListHsmsRequest: Serializable, Initializable {
        /// The NextToken value from a previous call to ListHsms. Pass null if this is the first call.
        var nextToken: String? = nil

        public init() {}

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

    }

    public struct ModifyHsmRequest: Serializable, Initializable {
        /// The new external ID.
        var externalId: String? = nil
        /// The new identifier of the subnet that the HSM is in. The new subnet must be in the same Availability Zone as the current subnet.
        var subnetId: String? = nil
        /// The new IP address for the elastic network interface (ENI) attached to the HSM. If the HSM is moved to a different subnet, and an IP address is not specified, an IP address will be randomly chosen from the CIDR range of the new subnet.
        var eniIp: String? = nil
        /// The new IAM role ARN.
        var iamRoleArn: String? = nil
        /// The new IP address for the syslog monitoring server. The AWS CloudHSM service only supports one syslog monitoring server.
        var syslogIp: String? = nil
        /// The ARN of the HSM to modify.
        var hsmArn: String = ""

        public init() {}

        public init(externalId: String? = nil, subnetId: String? = nil, eniIp: String? = nil, iamRoleArn: String? = nil, syslogIp: String? = nil, hsmArn: String) {
            self.externalId = externalId
            self.subnetId = subnetId
            self.eniIp = eniIp
            self.iamRoleArn = iamRoleArn
            self.syslogIp = syslogIp
            self.hsmArn = hsmArn
        }

    }

    public struct DescribeHapgResponse: Serializable, Initializable {
        var hsmsPendingDeletion: [String]? = nil
        /// The state of the high-availability partition group.
        var state: String? = nil
        /// The ARN of the high-availability partition group.
        var hapgArn: String? = nil
        /// The serial number of the high-availability partition group.
        var hapgSerial: String? = nil
        var hsmsLastActionFailed: [String]? = nil
        /// The list of partition serial numbers that belong to the high-availability partition group.
        var partitionSerialList: [String]? = nil
        var hsmsPendingRegistration: [String]? = nil
        /// The date and time the high-availability partition group was last modified.
        var lastModifiedTimestamp: String? = nil
        /// The label for the high-availability partition group.
        var label: String? = nil

        public init() {}

        public init(hsmsPendingDeletion: [String]? = nil, state: String? = nil, hapgArn: String? = nil, hapgSerial: String? = nil, hsmsLastActionFailed: [String]? = nil, partitionSerialList: [String]? = nil, hsmsPendingRegistration: [String]? = nil, lastModifiedTimestamp: String? = nil, label: String? = nil) {
            self.hsmsPendingDeletion = hsmsPendingDeletion
            self.state = state
            self.hapgArn = hapgArn
            self.hapgSerial = hapgSerial
            self.hsmsLastActionFailed = hsmsLastActionFailed
            self.partitionSerialList = partitionSerialList
            self.hsmsPendingRegistration = hsmsPendingRegistration
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.label = label
        }

    }

    public struct DescribeLunaClientResponse: Serializable, Initializable {
        /// The certificate installed on the HSMs used by this client.
        var certificate: String? = nil
        /// The date and time the client was last modified.
        var lastModifiedTimestamp: String? = nil
        /// The ARN of the client.
        var clientArn: String? = nil
        /// The certificate fingerprint.
        var certificateFingerprint: String? = nil
        /// The label of the client.
        var label: String? = nil

        public init() {}

        public init(certificate: String? = nil, lastModifiedTimestamp: String? = nil, clientArn: String? = nil, certificateFingerprint: String? = nil, label: String? = nil) {
            self.certificate = certificate
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.clientArn = clientArn
            self.certificateFingerprint = certificateFingerprint
            self.label = label
        }

    }

    public struct RemoveTagsFromResourceResponse: Serializable, Initializable {
        /// The status of the operation.
        var status: String = ""

        public init() {}

        public init(status: String) {
            self.status = status
        }

    }

    public struct Tag: Serializable, Initializable {
        /// The value of the tag.
        var value: String = ""
        /// The key of the tag.
        var key: String = ""

        public init() {}

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

    }

    public struct AddTagsToResourceResponse: Serializable, Initializable {
        /// The status of the operation.
        var status: String = ""

        public init() {}

        public init(status: String) {
            self.status = status
        }

    }

    public struct DeleteHapgRequest: Serializable, Initializable {
        /// The ARN of the high-availability partition group to delete.
        var hapgArn: String = ""

        public init() {}

        public init(hapgArn: String) {
            self.hapgArn = hapgArn
        }

    }

    public struct DescribeHsmResponse: Serializable, Initializable {
        /// Contains additional information about the status of the HSM.
        var statusDetails: String? = nil
        /// The identifier of the subnet that the HSM is in.
        var subnetId: String? = nil
        /// The IP address assigned to the HSM's ENI.
        var eniIp: String? = nil
        /// The identifier of the elastic network interface (ENI) attached to the HSM.
        var eniId: String? = nil
        /// The ARN of the HSM.
        var hsmArn: String? = nil
        /// The public SSH key.
        var sshPublicKey: String? = nil
        /// The subscription end date.
        var subscriptionEndDate: String? = nil
        /// The date and time that the SSH key was last updated.
        var sshKeyLastUpdated: String? = nil
        /// The Availability Zone that the HSM is in.
        var availabilityZone: String? = nil
        /// The serial number of the HSM.
        var serialNumber: String? = nil
        /// The status of the HSM.
        var status: String? = nil
        /// The ARN of the IAM role assigned to the HSM.
        var iamRoleArn: String? = nil
        /// The date and time that the server certificate was last updated.
        var serverCertLastUpdated: String? = nil
        /// The identifier of the VPC that the HSM is in.
        var vpcId: String? = nil
        var subscriptionType: String? = nil
        /// The URI of the certificate server.
        var serverCertUri: String? = nil
        /// The list of partitions on the HSM.
        var partitions: [String]? = nil
        /// The HSM software version.
        var softwareVersion: String? = nil
        /// The HSM model type.
        var hsmType: String? = nil
        /// The subscription start date.
        var subscriptionStartDate: String? = nil
        /// The name of the HSM vendor.
        var vendorName: String? = nil

        public init() {}

        public init(statusDetails: String? = nil, subnetId: String? = nil, eniIp: String? = nil, eniId: String? = nil, hsmArn: String? = nil, sshPublicKey: String? = nil, subscriptionEndDate: String? = nil, sshKeyLastUpdated: String? = nil, availabilityZone: String? = nil, serialNumber: String? = nil, status: String? = nil, iamRoleArn: String? = nil, serverCertLastUpdated: String? = nil, vpcId: String? = nil, subscriptionType: String? = nil, serverCertUri: String? = nil, partitions: [String]? = nil, softwareVersion: String? = nil, hsmType: String? = nil, subscriptionStartDate: String? = nil, vendorName: String? = nil) {
            self.statusDetails = statusDetails
            self.subnetId = subnetId
            self.eniIp = eniIp
            self.eniId = eniId
            self.hsmArn = hsmArn
            self.sshPublicKey = sshPublicKey
            self.subscriptionEndDate = subscriptionEndDate
            self.sshKeyLastUpdated = sshKeyLastUpdated
            self.availabilityZone = availabilityZone
            self.serialNumber = serialNumber
            self.status = status
            self.iamRoleArn = iamRoleArn
            self.serverCertLastUpdated = serverCertLastUpdated
            self.vpcId = vpcId
            self.subscriptionType = subscriptionType
            self.serverCertUri = serverCertUri
            self.partitions = partitions
            self.softwareVersion = softwareVersion
            self.hsmType = hsmType
            self.subscriptionStartDate = subscriptionStartDate
            self.vendorName = vendorName
        }

    }

    public struct ListLunaClientsResponse: Serializable, Initializable {
        /// If not null, more results are available. Pass this to ListLunaClients to retrieve the next set of items.
        var nextToken: String? = nil
        /// The list of clients.
        var clientList: [String] = []

        public init() {}

        public init(nextToken: String? = nil, clientList: [String]) {
            self.nextToken = nextToken
            self.clientList = clientList
        }

    }

    public struct DeleteLunaClientResponse: Serializable, Initializable {
        /// The status of the action.
        var status: String = ""

        public init() {}

        public init(status: String) {
            self.status = status
        }

    }

    public struct ListAvailableZonesResponse: Serializable, Initializable {
        /// The list of Availability Zones that have available AWS CloudHSM capacity.
        var aZList: [String]? = nil

        public init() {}

        public init(aZList: [String]? = nil) {
            self.aZList = aZList
        }

    }

    public struct AddTagsToResourceRequest: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the AWS CloudHSM resource to tag.
        var resourceArn: String = ""
        /// One or more tags.
        var tagList: [Tag] = []

        public init() {}

        public init(resourceArn: String, tagList: [Tag]) {
            self.resourceArn = resourceArn
            self.tagList = tagList
        }

    }

    public struct CreateLunaClientResponse: Serializable, Initializable {
        /// The ARN of the client.
        var clientArn: String? = nil

        public init() {}

        public init(clientArn: String? = nil) {
            self.clientArn = clientArn
        }

    }

    public struct CreateHapgResponse: Serializable, Initializable {
        /// The ARN of the high-availability partition group.
        var hapgArn: String? = nil

        public init() {}

        public init(hapgArn: String? = nil) {
            self.hapgArn = hapgArn
        }

    }

    public struct CreateHsmResponse: Serializable, Initializable {
        /// The ARN of the HSM.
        var hsmArn: String? = nil

        public init() {}

        public init(hsmArn: String? = nil) {
            self.hsmArn = hsmArn
        }

    }

    public struct ListHapgsResponse: Serializable, Initializable {
        /// If not null, more results are available. Pass this value to ListHapgs to retrieve the next set of items.
        var nextToken: String? = nil
        /// The list of high-availability partition groups.
        var hapgList: [String] = []

        public init() {}

        public init(nextToken: String? = nil, hapgList: [String]) {
            self.nextToken = nextToken
            self.hapgList = hapgList
        }

    }

    public struct CreateHsmRequest: Serializable, Initializable {
        /// The identifier of the subnet in your VPC in which to place the HSM.
        var subnetId: String = ""
        /// A user-defined token to ensure idempotence. Subsequent calls to this operation with the same token will be ignored.
        var clientToken: String? = nil
        /// The IP address to assign to the HSM's ENI. If an IP address is not specified, an IP address will be randomly chosen from the CIDR range of the subnet.
        var eniIp: String? = nil
        /// The ARN of an IAM role to enable the AWS CloudHSM service to allocate an ENI on your behalf.
        var iamRoleArn: String = ""
        /// The SSH public key to install on the HSM.
        var sshKey: String = ""
        var subscriptionType: String = ""
        /// The IP address for the syslog monitoring server. The AWS CloudHSM service only supports one syslog monitoring server.
        var syslogIp: String? = nil
        /// The external ID from IamRoleArn, if present.
        var externalId: String? = nil

        public init() {}

        public init(subnetId: String, clientToken: String? = nil, eniIp: String? = nil, iamRoleArn: String, sshKey: String, subscriptionType: String, syslogIp: String? = nil, externalId: String? = nil) {
            self.subnetId = subnetId
            self.clientToken = clientToken
            self.eniIp = eniIp
            self.iamRoleArn = iamRoleArn
            self.sshKey = sshKey
            self.subscriptionType = subscriptionType
            self.syslogIp = syslogIp
            self.externalId = externalId
        }

    }

    public struct RemoveTagsFromResourceRequest: Serializable, Initializable {
        /// The tag key or keys to remove. Specify only the tag key to remove (not the value). To overwrite the value for an existing tag, use AddTagsToResource.
        var tagKeyList: [String] = []
        /// The Amazon Resource Name (ARN) of the AWS CloudHSM resource.
        var resourceArn: String = ""

        public init() {}

        public init(tagKeyList: [String], resourceArn: String) {
            self.tagKeyList = tagKeyList
            self.resourceArn = resourceArn
        }

    }

    public struct ListAvailableZonesRequest: Serializable, Initializable {

        public init() {}

    }

    public struct DeleteHapgResponse: Serializable, Initializable {
        /// The status of the action.
        var status: String = ""

        public init() {}

        public init(status: String) {
            self.status = status
        }

    }

    public struct DeleteLunaClientRequest: Serializable, Initializable {
        /// The ARN of the client to delete.
        var clientArn: String = ""

        public init() {}

        public init(clientArn: String) {
            self.clientArn = clientArn
        }

    }

    public struct ListHsmsResponse: Serializable, Initializable {
        /// The list of ARNs that identify the HSMs.
        var hsmList: [String]? = nil
        /// If not null, more results are available. Pass this value to ListHsms to retrieve the next set of items.
        var nextToken: String? = nil

        public init() {}

        public init(hsmList: [String]? = nil, nextToken: String? = nil) {
            self.hsmList = hsmList
            self.nextToken = nextToken
        }

    }

    public struct DescribeHapgRequest: Serializable, Initializable {
        /// The ARN of the high-availability partition group to describe.
        var hapgArn: String = ""

        public init() {}

        public init(hapgArn: String) {
            self.hapgArn = hapgArn
        }

    }

    public struct ModifyLunaClientResponse: Serializable, Initializable {
        /// The ARN of the client.
        var clientArn: String? = nil

        public init() {}

        public init(clientArn: String? = nil) {
            self.clientArn = clientArn
        }

    }

    public struct ModifyHsmResponse: Serializable, Initializable {
        /// The ARN of the HSM.
        var hsmArn: String? = nil

        public init() {}

        public init(hsmArn: String? = nil) {
            self.hsmArn = hsmArn
        }

    }

    public struct ListHapgsRequest: Serializable, Initializable {
        /// The NextToken value from a previous call to ListHapgs. Pass null if this is the first call.
        var nextToken: String? = nil

        public init() {}

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

    }

}