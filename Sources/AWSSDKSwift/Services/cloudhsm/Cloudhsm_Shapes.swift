// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Cloudhsm {

    public struct ModifyHapgResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HapgArn", required: false, type: .string)
        ]
        /// The ARN of the high-availability partition group.
        public let hapgArn: String?

        public init(hapgArn: String? = nil) {
            self.hapgArn = hapgArn
        }

        private enum CodingKeys: String, CodingKey {
            case hapgArn = "HapgArn"
        }
    }

    public struct DeleteHsmResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: true, type: .string)
        ]
        /// The status of the operation.
        public let status: String

        public init(status: String) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct DescribeHsmRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmSerialNumber", required: false, type: .string), 
            AWSShapeMember(label: "HsmArn", required: false, type: .string)
        ]
        /// The serial number of the HSM. Either the HsmArn or the HsmSerialNumber parameter must be specified.
        public let hsmSerialNumber: String?
        /// The ARN of the HSM. Either the HsmArn or the SerialNumber parameter must be specified.
        public let hsmArn: String?

        public init(hsmSerialNumber: String? = nil, hsmArn: String? = nil) {
            self.hsmSerialNumber = hsmSerialNumber
            self.hsmArn = hsmArn
        }

        private enum CodingKeys: String, CodingKey {
            case hsmSerialNumber = "HsmSerialNumber"
            case hsmArn = "HsmArn"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the AWS CloudHSM resource.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagList", required: true, type: .list)
        ]
        /// One or more tags.
        public let tagList: [Tag]

        public init(tagList: [Tag]) {
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case tagList = "TagList"
        }
    }

    public struct CreateHapgRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Label", required: true, type: .string)
        ]
        /// The label of the new high-availability partition group.
        public let label: String

        public init(label: String) {
            self.label = label
        }

        private enum CodingKeys: String, CodingKey {
            case label = "Label"
        }
    }

    public struct GetConfigRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientArn", required: true, type: .string), 
            AWSShapeMember(label: "HapgList", required: true, type: .list), 
            AWSShapeMember(label: "ClientVersion", required: true, type: .enum)
        ]
        /// The ARN of the client.
        public let clientArn: String
        /// A list of ARNs that identify the high-availability partition groups that are associated with the client.
        public let hapgList: [String]
        /// The client version.
        public let clientVersion: ClientVersion

        public init(clientArn: String, hapgList: [String], clientVersion: ClientVersion) {
            self.clientArn = clientArn
            self.hapgList = hapgList
            self.clientVersion = clientVersion
        }

        private enum CodingKeys: String, CodingKey {
            case clientArn = "ClientArn"
            case hapgList = "HapgList"
            case clientVersion = "ClientVersion"
        }
    }

    public struct ModifyHapgRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Label", required: false, type: .string), 
            AWSShapeMember(label: "HapgArn", required: true, type: .string), 
            AWSShapeMember(label: "PartitionSerialList", required: false, type: .list)
        ]
        /// The new label for the high-availability partition group.
        public let label: String?
        /// The ARN of the high-availability partition group to modify.
        public let hapgArn: String
        /// The list of partition serial numbers to make members of the high-availability partition group.
        public let partitionSerialList: [String]?

        public init(label: String? = nil, hapgArn: String, partitionSerialList: [String]? = nil) {
            self.label = label
            self.hapgArn = hapgArn
            self.partitionSerialList = partitionSerialList
        }

        private enum CodingKeys: String, CodingKey {
            case label = "Label"
            case hapgArn = "HapgArn"
            case partitionSerialList = "PartitionSerialList"
        }
    }

    public struct ListLunaClientsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The NextToken value from a previous call to ListLunaClients. Pass null if this is the first call.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
        }
    }

    public struct CreateLunaClientRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificate", required: true, type: .string), 
            AWSShapeMember(label: "Label", required: false, type: .string)
        ]
        /// The contents of a Base64-Encoded X.509 v3 certificate to be installed on the HSMs used by this client.
        public let certificate: String
        /// The label for the client.
        public let label: String?

        public init(certificate: String, label: String? = nil) {
            self.certificate = certificate
            self.label = label
        }

        private enum CodingKeys: String, CodingKey {
            case certificate = "Certificate"
            case label = "Label"
        }
    }

    public enum SubscriptionType: String, CustomStringConvertible, Codable {
        case production = "PRODUCTION"
        public var description: String { return self.rawValue }
    }

    public enum CloudHsmObjectState: String, CustomStringConvertible, Codable {
        case ready = "READY"
        case updating = "UPDATING"
        case degraded = "DEGRADED"
        public var description: String { return self.rawValue }
    }

    public struct ModifyLunaClientRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificate", required: true, type: .string), 
            AWSShapeMember(label: "ClientArn", required: true, type: .string)
        ]
        /// The new certificate for the client.
        public let certificate: String
        /// The ARN of the client.
        public let clientArn: String

        public init(certificate: String, clientArn: String) {
            self.certificate = certificate
            self.clientArn = clientArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificate = "Certificate"
            case clientArn = "ClientArn"
        }
    }

    public struct DescribeLunaClientRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientArn", required: false, type: .string), 
            AWSShapeMember(label: "CertificateFingerprint", required: false, type: .string)
        ]
        /// The ARN of the client.
        public let clientArn: String?
        /// The certificate fingerprint.
        public let certificateFingerprint: String?

        public init(clientArn: String? = nil, certificateFingerprint: String? = nil) {
            self.clientArn = clientArn
            self.certificateFingerprint = certificateFingerprint
        }

        private enum CodingKeys: String, CodingKey {
            case clientArn = "ClientArn"
            case certificateFingerprint = "CertificateFingerprint"
        }
    }

    public struct GetConfigResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConfigType", required: false, type: .string), 
            AWSShapeMember(label: "ConfigFile", required: false, type: .string), 
            AWSShapeMember(label: "ConfigCred", required: false, type: .string)
        ]
        /// The type of credentials.
        public let configType: String?
        /// The chrystoki.conf configuration file.
        public let configFile: String?
        /// The certificate file containing the server.pem files of the HSMs.
        public let configCred: String?

        public init(configType: String? = nil, configFile: String? = nil, configCred: String? = nil) {
            self.configType = configType
            self.configFile = configFile
            self.configCred = configCred
        }

        private enum CodingKeys: String, CodingKey {
            case configType = "ConfigType"
            case configFile = "ConfigFile"
            case configCred = "ConfigCred"
        }
    }

    public enum HsmStatus: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case running = "RUNNING"
        case updating = "UPDATING"
        case suspended = "SUSPENDED"
        case terminating = "TERMINATING"
        case terminated = "TERMINATED"
        case degraded = "DEGRADED"
        public var description: String { return self.rawValue }
    }

    public struct DeleteHsmRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmArn", location: .body(locationName: "HsmArn"), required: true, type: .string)
        ]
        /// The ARN of the HSM to delete.
        public let hsmArn: String

        public init(hsmArn: String) {
            self.hsmArn = hsmArn
        }

        private enum CodingKeys: String, CodingKey {
            case hsmArn = "HsmArn"
        }
    }

    public struct ListHsmsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The NextToken value from a previous call to ListHsms. Pass null if this is the first call.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
        }
    }

    public struct ModifyHsmRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExternalId", location: .body(locationName: "ExternalId"), required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "SubnetId"), required: false, type: .string), 
            AWSShapeMember(label: "EniIp", location: .body(locationName: "EniIp"), required: false, type: .string), 
            AWSShapeMember(label: "IamRoleArn", location: .body(locationName: "IamRoleArn"), required: false, type: .string), 
            AWSShapeMember(label: "SyslogIp", location: .body(locationName: "SyslogIp"), required: false, type: .string), 
            AWSShapeMember(label: "HsmArn", location: .body(locationName: "HsmArn"), required: true, type: .string)
        ]
        /// The new external ID.
        public let externalId: String?
        /// The new identifier of the subnet that the HSM is in. The new subnet must be in the same Availability Zone as the current subnet.
        public let subnetId: String?
        /// The new IP address for the elastic network interface (ENI) attached to the HSM. If the HSM is moved to a different subnet, and an IP address is not specified, an IP address will be randomly chosen from the CIDR range of the new subnet.
        public let eniIp: String?
        /// The new IAM role ARN.
        public let iamRoleArn: String?
        /// The new IP address for the syslog monitoring server. The AWS CloudHSM service only supports one syslog monitoring server.
        public let syslogIp: String?
        /// The ARN of the HSM to modify.
        public let hsmArn: String

        public init(externalId: String? = nil, subnetId: String? = nil, eniIp: String? = nil, iamRoleArn: String? = nil, syslogIp: String? = nil, hsmArn: String) {
            self.externalId = externalId
            self.subnetId = subnetId
            self.eniIp = eniIp
            self.iamRoleArn = iamRoleArn
            self.syslogIp = syslogIp
            self.hsmArn = hsmArn
        }

        private enum CodingKeys: String, CodingKey {
            case externalId = "ExternalId"
            case subnetId = "SubnetId"
            case eniIp = "EniIp"
            case iamRoleArn = "IamRoleArn"
            case syslogIp = "SyslogIp"
            case hsmArn = "HsmArn"
        }
    }

    public struct DescribeHapgResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmsPendingDeletion", required: false, type: .list), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "HapgArn", required: false, type: .string), 
            AWSShapeMember(label: "HapgSerial", required: false, type: .string), 
            AWSShapeMember(label: "HsmsLastActionFailed", required: false, type: .list), 
            AWSShapeMember(label: "PartitionSerialList", required: false, type: .list), 
            AWSShapeMember(label: "HsmsPendingRegistration", required: false, type: .list), 
            AWSShapeMember(label: "LastModifiedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Label", required: false, type: .string)
        ]
        public let hsmsPendingDeletion: [String]?
        /// The state of the high-availability partition group.
        public let state: CloudHsmObjectState?
        /// The ARN of the high-availability partition group.
        public let hapgArn: String?
        /// The serial number of the high-availability partition group.
        public let hapgSerial: String?
        public let hsmsLastActionFailed: [String]?
        /// The list of partition serial numbers that belong to the high-availability partition group.
        public let partitionSerialList: [String]?
        public let hsmsPendingRegistration: [String]?
        /// The date and time the high-availability partition group was last modified.
        public let lastModifiedTimestamp: String?
        /// The label for the high-availability partition group.
        public let label: String?

        public init(hsmsPendingDeletion: [String]? = nil, state: CloudHsmObjectState? = nil, hapgArn: String? = nil, hapgSerial: String? = nil, hsmsLastActionFailed: [String]? = nil, partitionSerialList: [String]? = nil, hsmsPendingRegistration: [String]? = nil, lastModifiedTimestamp: String? = nil, label: String? = nil) {
            self.hsmsPendingDeletion = hsmsPendingDeletion
            self.state = state
            self.hapgArn = hapgArn
            self.hapgSerial = hapgSerial
            self.hsmsLastActionFailed = hsmsLastActionFailed
            self.partitionSerialList = partitionSerialList
            self.hsmsPendingRegistration = hsmsPendingRegistration
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.label = label
        }

        private enum CodingKeys: String, CodingKey {
            case hsmsPendingDeletion = "HsmsPendingDeletion"
            case state = "State"
            case hapgArn = "HapgArn"
            case hapgSerial = "HapgSerial"
            case hsmsLastActionFailed = "HsmsLastActionFailed"
            case partitionSerialList = "PartitionSerialList"
            case hsmsPendingRegistration = "HsmsPendingRegistration"
            case lastModifiedTimestamp = "LastModifiedTimestamp"
            case label = "Label"
        }
    }

    public struct DescribeLunaClientResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificate", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "ClientArn", required: false, type: .string), 
            AWSShapeMember(label: "CertificateFingerprint", required: false, type: .string), 
            AWSShapeMember(label: "Label", required: false, type: .string)
        ]
        /// The certificate installed on the HSMs used by this client.
        public let certificate: String?
        /// The date and time the client was last modified.
        public let lastModifiedTimestamp: String?
        /// The ARN of the client.
        public let clientArn: String?
        /// The certificate fingerprint.
        public let certificateFingerprint: String?
        /// The label of the client.
        public let label: String?

        public init(certificate: String? = nil, lastModifiedTimestamp: String? = nil, clientArn: String? = nil, certificateFingerprint: String? = nil, label: String? = nil) {
            self.certificate = certificate
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.clientArn = clientArn
            self.certificateFingerprint = certificateFingerprint
            self.label = label
        }

        private enum CodingKeys: String, CodingKey {
            case certificate = "Certificate"
            case lastModifiedTimestamp = "LastModifiedTimestamp"
            case clientArn = "ClientArn"
            case certificateFingerprint = "CertificateFingerprint"
            case label = "Label"
        }
    }

    public struct RemoveTagsFromResourceResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: true, type: .string)
        ]
        /// The status of the operation.
        public let status: String

        public init(status: String) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct Tag: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The value of the tag.
        public let value: String
        /// The key of the tag.
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct AddTagsToResourceResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: true, type: .string)
        ]
        /// The status of the operation.
        public let status: String

        public init(status: String) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct DeleteHapgRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HapgArn", required: true, type: .string)
        ]
        /// The ARN of the high-availability partition group to delete.
        public let hapgArn: String

        public init(hapgArn: String) {
            self.hapgArn = hapgArn
        }

        private enum CodingKeys: String, CodingKey {
            case hapgArn = "HapgArn"
        }
    }

    public struct DescribeHsmResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StatusDetails", required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "EniIp", required: false, type: .string), 
            AWSShapeMember(label: "EniId", required: false, type: .string), 
            AWSShapeMember(label: "HsmArn", required: false, type: .string), 
            AWSShapeMember(label: "SshPublicKey", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionEndDate", required: false, type: .string), 
            AWSShapeMember(label: "SshKeyLastUpdated", required: false, type: .string), 
            AWSShapeMember(label: "SerialNumber", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "IamRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "ServerCertLastUpdated", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionType", required: false, type: .enum), 
            AWSShapeMember(label: "ServerCertUri", required: false, type: .string), 
            AWSShapeMember(label: "Partitions", required: false, type: .list), 
            AWSShapeMember(label: "SoftwareVersion", required: false, type: .string), 
            AWSShapeMember(label: "HsmType", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionStartDate", required: false, type: .string), 
            AWSShapeMember(label: "VendorName", required: false, type: .string)
        ]
        /// Contains additional information about the status of the HSM.
        public let statusDetails: String?
        /// The identifier of the subnet that the HSM is in.
        public let subnetId: String?
        /// The IP address assigned to the HSM's ENI.
        public let eniIp: String?
        /// The identifier of the elastic network interface (ENI) attached to the HSM.
        public let eniId: String?
        /// The ARN of the HSM.
        public let hsmArn: String?
        /// The public SSH key.
        public let sshPublicKey: String?
        /// The subscription end date.
        public let subscriptionEndDate: String?
        /// The date and time that the SSH key was last updated.
        public let sshKeyLastUpdated: String?
        /// The serial number of the HSM.
        public let serialNumber: String?
        /// The Availability Zone that the HSM is in.
        public let availabilityZone: String?
        /// The status of the HSM.
        public let status: HsmStatus?
        /// The ARN of the IAM role assigned to the HSM.
        public let iamRoleArn: String?
        /// The date and time that the server certificate was last updated.
        public let serverCertLastUpdated: String?
        /// The identifier of the VPC that the HSM is in.
        public let vpcId: String?
        public let subscriptionType: SubscriptionType?
        /// The URI of the certificate server.
        public let serverCertUri: String?
        /// The list of partitions on the HSM.
        public let partitions: [String]?
        /// The HSM software version.
        public let softwareVersion: String?
        /// The HSM model type.
        public let hsmType: String?
        /// The subscription start date.
        public let subscriptionStartDate: String?
        /// The name of the HSM vendor.
        public let vendorName: String?

        public init(statusDetails: String? = nil, subnetId: String? = nil, eniIp: String? = nil, eniId: String? = nil, hsmArn: String? = nil, sshPublicKey: String? = nil, subscriptionEndDate: String? = nil, sshKeyLastUpdated: String? = nil, serialNumber: String? = nil, availabilityZone: String? = nil, status: HsmStatus? = nil, iamRoleArn: String? = nil, serverCertLastUpdated: String? = nil, vpcId: String? = nil, subscriptionType: SubscriptionType? = nil, serverCertUri: String? = nil, partitions: [String]? = nil, softwareVersion: String? = nil, hsmType: String? = nil, subscriptionStartDate: String? = nil, vendorName: String? = nil) {
            self.statusDetails = statusDetails
            self.subnetId = subnetId
            self.eniIp = eniIp
            self.eniId = eniId
            self.hsmArn = hsmArn
            self.sshPublicKey = sshPublicKey
            self.subscriptionEndDate = subscriptionEndDate
            self.sshKeyLastUpdated = sshKeyLastUpdated
            self.serialNumber = serialNumber
            self.availabilityZone = availabilityZone
            self.status = status
            self.iamRoleArn = iamRoleArn
            self.serverCertLastUpdated = serverCertLastUpdated
            self.vpcId = vpcId
            self.subscriptionType = subscriptionType
            self.serverCertUri = serverCertUri
            self.partitions = partitions
            self.softwareVersion = softwareVersion
            self.hsmType = hsmType
            self.subscriptionStartDate = subscriptionStartDate
            self.vendorName = vendorName
        }

        private enum CodingKeys: String, CodingKey {
            case statusDetails = "StatusDetails"
            case subnetId = "SubnetId"
            case eniIp = "EniIp"
            case eniId = "EniId"
            case hsmArn = "HsmArn"
            case sshPublicKey = "SshPublicKey"
            case subscriptionEndDate = "SubscriptionEndDate"
            case sshKeyLastUpdated = "SshKeyLastUpdated"
            case serialNumber = "SerialNumber"
            case availabilityZone = "AvailabilityZone"
            case status = "Status"
            case iamRoleArn = "IamRoleArn"
            case serverCertLastUpdated = "ServerCertLastUpdated"
            case vpcId = "VpcId"
            case subscriptionType = "SubscriptionType"
            case serverCertUri = "ServerCertUri"
            case partitions = "Partitions"
            case softwareVersion = "SoftwareVersion"
            case hsmType = "HsmType"
            case subscriptionStartDate = "SubscriptionStartDate"
            case vendorName = "VendorName"
        }
    }

    public struct ListLunaClientsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ClientList", required: true, type: .list)
        ]
        /// If not null, more results are available. Pass this to ListLunaClients to retrieve the next set of items.
        public let nextToken: String?
        /// The list of clients.
        public let clientList: [String]

        public init(nextToken: String? = nil, clientList: [String]) {
            self.nextToken = nextToken
            self.clientList = clientList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case clientList = "ClientList"
        }
    }

    public struct DeleteLunaClientResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: true, type: .string)
        ]
        /// The status of the action.
        public let status: String

        public init(status: String) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct ListAvailableZonesResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AZList", required: false, type: .list)
        ]
        /// The list of Availability Zones that have available AWS CloudHSM capacity.
        public let aZList: [String]?

        public init(aZList: [String]? = nil) {
            self.aZList = aZList
        }

        private enum CodingKeys: String, CodingKey {
            case aZList = "AZList"
        }
    }

    public struct AddTagsToResourceRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "TagList", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the AWS CloudHSM resource to tag.
        public let resourceArn: String
        /// One or more tags.
        public let tagList: [Tag]

        public init(resourceArn: String, tagList: [Tag]) {
            self.resourceArn = resourceArn
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tagList = "TagList"
        }
    }

    public struct CreateLunaClientResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientArn", required: false, type: .string)
        ]
        /// The ARN of the client.
        public let clientArn: String?

        public init(clientArn: String? = nil) {
            self.clientArn = clientArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientArn = "ClientArn"
        }
    }

    public struct CreateHapgResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HapgArn", required: false, type: .string)
        ]
        /// The ARN of the high-availability partition group.
        public let hapgArn: String?

        public init(hapgArn: String? = nil) {
            self.hapgArn = hapgArn
        }

        private enum CodingKeys: String, CodingKey {
            case hapgArn = "HapgArn"
        }
    }

    public struct CreateHsmResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmArn", required: false, type: .string)
        ]
        /// The ARN of the HSM.
        public let hsmArn: String?

        public init(hsmArn: String? = nil) {
            self.hsmArn = hsmArn
        }

        private enum CodingKeys: String, CodingKey {
            case hsmArn = "HsmArn"
        }
    }

    public struct ListHapgsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "HapgList", required: true, type: .list)
        ]
        /// If not null, more results are available. Pass this value to ListHapgs to retrieve the next set of items.
        public let nextToken: String?
        /// The list of high-availability partition groups.
        public let hapgList: [String]

        public init(nextToken: String? = nil, hapgList: [String]) {
            self.nextToken = nextToken
            self.hapgList = hapgList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case hapgList = "HapgList"
        }
    }

    public struct CreateHsmRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", location: .body(locationName: "SubnetId"), required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", location: .body(locationName: "ClientToken"), required: false, type: .string), 
            AWSShapeMember(label: "EniIp", location: .body(locationName: "EniIp"), required: false, type: .string), 
            AWSShapeMember(label: "IamRoleArn", location: .body(locationName: "IamRoleArn"), required: true, type: .string), 
            AWSShapeMember(label: "SshKey", location: .body(locationName: "SshKey"), required: true, type: .string), 
            AWSShapeMember(label: "SubscriptionType", location: .body(locationName: "SubscriptionType"), required: true, type: .enum), 
            AWSShapeMember(label: "SyslogIp", location: .body(locationName: "SyslogIp"), required: false, type: .string), 
            AWSShapeMember(label: "ExternalId", location: .body(locationName: "ExternalId"), required: false, type: .string)
        ]
        /// The identifier of the subnet in your VPC in which to place the HSM.
        public let subnetId: String
        /// A user-defined token to ensure idempotence. Subsequent calls to this operation with the same token will be ignored.
        public let clientToken: String?
        /// The IP address to assign to the HSM's ENI. If an IP address is not specified, an IP address will be randomly chosen from the CIDR range of the subnet.
        public let eniIp: String?
        /// The ARN of an IAM role to enable the AWS CloudHSM service to allocate an ENI on your behalf.
        public let iamRoleArn: String
        /// The SSH public key to install on the HSM.
        public let sshKey: String
        public let subscriptionType: SubscriptionType
        /// The IP address for the syslog monitoring server. The AWS CloudHSM service only supports one syslog monitoring server.
        public let syslogIp: String?
        /// The external ID from IamRoleArn, if present.
        public let externalId: String?

        public init(subnetId: String, clientToken: String? = nil, eniIp: String? = nil, iamRoleArn: String, sshKey: String, subscriptionType: SubscriptionType, syslogIp: String? = nil, externalId: String? = nil) {
            self.subnetId = subnetId
            self.clientToken = clientToken
            self.eniIp = eniIp
            self.iamRoleArn = iamRoleArn
            self.sshKey = sshKey
            self.subscriptionType = subscriptionType
            self.syslogIp = syslogIp
            self.externalId = externalId
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
            case clientToken = "ClientToken"
            case eniIp = "EniIp"
            case iamRoleArn = "IamRoleArn"
            case sshKey = "SshKey"
            case subscriptionType = "SubscriptionType"
            case syslogIp = "SyslogIp"
            case externalId = "ExternalId"
        }
    }

    public struct RemoveTagsFromResourceRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagKeyList", required: true, type: .list), 
            AWSShapeMember(label: "ResourceArn", required: true, type: .string)
        ]
        /// The tag key or keys to remove. Specify only the tag key to remove (not the value). To overwrite the value for an existing tag, use AddTagsToResource.
        public let tagKeyList: [String]
        /// The Amazon Resource Name (ARN) of the AWS CloudHSM resource.
        public let resourceArn: String

        public init(tagKeyList: [String], resourceArn: String) {
            self.tagKeyList = tagKeyList
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeyList = "TagKeyList"
            case resourceArn = "ResourceArn"
        }
    }

    public struct ListAvailableZonesRequest: AWSShape {

    }

    public struct DeleteHapgResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: true, type: .string)
        ]
        /// The status of the action.
        public let status: String

        public init(status: String) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct DeleteLunaClientRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientArn", required: true, type: .string)
        ]
        /// The ARN of the client to delete.
        public let clientArn: String

        public init(clientArn: String) {
            self.clientArn = clientArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientArn = "ClientArn"
        }
    }

    public struct ListHsmsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The list of ARNs that identify the HSMs.
        public let hsmList: [String]?
        /// If not null, more results are available. Pass this value to ListHsms to retrieve the next set of items.
        public let nextToken: String?

        public init(hsmList: [String]? = nil, nextToken: String? = nil) {
            self.hsmList = hsmList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case hsmList = "HsmList"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeHapgRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HapgArn", required: true, type: .string)
        ]
        /// The ARN of the high-availability partition group to describe.
        public let hapgArn: String

        public init(hapgArn: String) {
            self.hapgArn = hapgArn
        }

        private enum CodingKeys: String, CodingKey {
            case hapgArn = "HapgArn"
        }
    }

    public struct ModifyLunaClientResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientArn", required: false, type: .string)
        ]
        /// The ARN of the client.
        public let clientArn: String?

        public init(clientArn: String? = nil) {
            self.clientArn = clientArn
        }

        private enum CodingKeys: String, CodingKey {
            case clientArn = "ClientArn"
        }
    }

    public struct ModifyHsmResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HsmArn", required: false, type: .string)
        ]
        /// The ARN of the HSM.
        public let hsmArn: String?

        public init(hsmArn: String? = nil) {
            self.hsmArn = hsmArn
        }

        private enum CodingKeys: String, CodingKey {
            case hsmArn = "HsmArn"
        }
    }

    public struct ListHapgsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The NextToken value from a previous call to ListHapgs. Pass null if this is the first call.
        public let nextToken: String?

        public init(nextToken: String? = nil) {
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
        }
    }

    public enum ClientVersion: String, CustomStringConvertible, Codable {
        case clientVersion51 = "5.1"
        case clientVersion53 = "5.3"
        public var description: String { return self.rawValue }
    }

}