// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Elasticache {

    public struct DescribeEngineDefaultParametersResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EngineDefaults", required: false, type: .structure)
        ]
        public let engineDefaults: EngineDefaults?

        public init(engineDefaults: EngineDefaults? = nil) {
            self.engineDefaults = engineDefaults
        }

        private enum CodingKeys: String, CodingKey {
            case engineDefaults = "EngineDefaults"
        }
    }

    public struct EventsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Events", required: false, type: .structure)
        ]
        /// Provides an identifier to allow retrieval of paginated results.
        public let marker: String?
        /// A list of events. Each element in the list contains detailed information about one event.
        public let events: EventList?

        public init(marker: String? = nil, events: EventList? = nil) {
            self.marker = marker
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case events = "Events"
        }
    }

    public struct NodeGroupList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NodeGroup", required: false, type: .list)
        ]
        public let nodeGroup: [NodeGroup]?

        public init(nodeGroup: [NodeGroup]? = nil) {
            self.nodeGroup = nodeGroup
        }

        private enum CodingKeys: String, CodingKey {
            case nodeGroup = "NodeGroup"
        }
    }

    public struct ReplicationGroup: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PendingModifiedValues", required: false, type: .structure), 
            AWSShapeMember(label: "AutomaticFailover", required: false, type: .enum), 
            AWSShapeMember(label: "MemberClusters", required: false, type: .structure), 
            AWSShapeMember(label: "ClusterEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ConfigurationEndpoint", required: false, type: .structure), 
            AWSShapeMember(label: "SnapshotWindow", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "SnapshottingClusterId", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationGroupId", required: false, type: .string), 
            AWSShapeMember(label: "CacheNodeType", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotRetentionLimit", required: false, type: .integer), 
            AWSShapeMember(label: "NodeGroups", required: false, type: .structure)
        ]
        /// A group of settings to be applied to the replication group, either immediately or during the next maintenance window.
        public let pendingModifiedValues: ReplicationGroupPendingModifiedValues?
        /// Indicates the status of Multi-AZ for this replication group.  ElastiCache Multi-AZ replication groups are not supported on:   Redis versions earlier than 2.8.6.   Redis (cluster mode disabled):T1 and T2 cache node types. Redis (cluster mode enabled): T1 node types.   
        public let automaticFailover: AutomaticFailoverStatus?
        /// The names of all the cache clusters that are part of this replication group.
        public let memberClusters: ClusterIdList?
        /// A flag indicating whether or not this replication group is cluster enabled; i.e., whether its data can be partitioned across multiple shards (API/CLI: node groups). Valid values: true | false 
        public let clusterEnabled: Bool?
        /// The description of the replication group.
        public let description: String?
        /// The configuration endpoint for this replicaiton group. Use the configuration endpoint to connect to this replication group.
        public let configurationEndpoint: Endpoint?
        /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard). Example: 05:00-09:00  If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.  Note: This parameter is only valid if the Engine parameter is redis.
        public let snapshotWindow: String?
        /// The current state of this replication group - creating, available, modifying, deleting, create-failed, snapshotting.
        public let status: String?
        /// The cache cluster ID that is used as the daily snapshot source for the replication group.
        public let snapshottingClusterId: String?
        /// The identifier for the replication group.
        public let replicationGroupId: String?
        /// The name of the compute and memory capacity node type for each node in the replication group.
        public let cacheNodeType: String?
        /// The number of days for which ElastiCache retains automatic cache cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.   If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off. 
        public let snapshotRetentionLimit: Int32?
        /// A single element list with information about the nodes in the replication group.
        public let nodeGroups: NodeGroupList?

        public init(pendingModifiedValues: ReplicationGroupPendingModifiedValues? = nil, automaticFailover: AutomaticFailoverStatus? = nil, memberClusters: ClusterIdList? = nil, clusterEnabled: Bool? = nil, description: String? = nil, configurationEndpoint: Endpoint? = nil, snapshotWindow: String? = nil, status: String? = nil, snapshottingClusterId: String? = nil, replicationGroupId: String? = nil, cacheNodeType: String? = nil, snapshotRetentionLimit: Int32? = nil, nodeGroups: NodeGroupList? = nil) {
            self.pendingModifiedValues = pendingModifiedValues
            self.automaticFailover = automaticFailover
            self.memberClusters = memberClusters
            self.clusterEnabled = clusterEnabled
            self.description = description
            self.configurationEndpoint = configurationEndpoint
            self.snapshotWindow = snapshotWindow
            self.status = status
            self.snapshottingClusterId = snapshottingClusterId
            self.replicationGroupId = replicationGroupId
            self.cacheNodeType = cacheNodeType
            self.snapshotRetentionLimit = snapshotRetentionLimit
            self.nodeGroups = nodeGroups
        }

        private enum CodingKeys: String, CodingKey {
            case pendingModifiedValues = "PendingModifiedValues"
            case automaticFailover = "AutomaticFailover"
            case memberClusters = "MemberClusters"
            case clusterEnabled = "ClusterEnabled"
            case description = "Description"
            case configurationEndpoint = "ConfigurationEndpoint"
            case snapshotWindow = "SnapshotWindow"
            case status = "Status"
            case snapshottingClusterId = "SnapshottingClusterId"
            case replicationGroupId = "ReplicationGroupId"
            case cacheNodeType = "CacheNodeType"
            case snapshotRetentionLimit = "SnapshotRetentionLimit"
            case nodeGroups = "NodeGroups"
        }
    }

    public struct ReplicationGroupList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationGroup", required: false, type: .list)
        ]
        public let replicationGroup: [ReplicationGroup]?

        public init(replicationGroup: [ReplicationGroup]? = nil) {
            self.replicationGroup = replicationGroup
        }

        private enum CodingKeys: String, CodingKey {
            case replicationGroup = "ReplicationGroup"
        }
    }

    public struct CacheSubnetGroupMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "CacheSubnetGroups", required: false, type: .structure)
        ]
        /// Provides an identifier to allow retrieval of paginated results.
        public let marker: String?
        /// A list of cache subnet groups. Each element in the list contains detailed information about one group.
        public let cacheSubnetGroups: CacheSubnetGroups?

        public init(marker: String? = nil, cacheSubnetGroups: CacheSubnetGroups? = nil) {
            self.marker = marker
            self.cacheSubnetGroups = cacheSubnetGroups
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case cacheSubnetGroups = "CacheSubnetGroups"
        }
    }

    public struct CreateCacheClusterResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheCluster", required: false, type: .structure)
        ]
        public let cacheCluster: CacheCluster?

        public init(cacheCluster: CacheCluster? = nil) {
            self.cacheCluster = cacheCluster
        }

        private enum CodingKeys: String, CodingKey {
            case cacheCluster = "CacheCluster"
        }
    }

    public struct Endpoint: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Address", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer)
        ]
        /// The DNS hostname of the cache node.
        public let address: String?
        /// The port number that the cache engine is listening on.
        public let port: Int32?

        public init(address: String? = nil, port: Int32? = nil) {
            self.address = address
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case address = "Address"
            case port = "Port"
        }
    }

    public struct ReservedCacheNodesOfferingList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedCacheNodesOffering", required: false, type: .list)
        ]
        public let reservedCacheNodesOffering: [ReservedCacheNodesOffering]?

        public init(reservedCacheNodesOffering: [ReservedCacheNodesOffering]? = nil) {
            self.reservedCacheNodesOffering = reservedCacheNodesOffering
        }

        private enum CodingKeys: String, CodingKey {
            case reservedCacheNodesOffering = "ReservedCacheNodesOffering"
        }
    }

    public enum ChangeType: String, CustomStringConvertible, Codable {
        case immediate = "immediate"
        case requires_reboot = "requires-reboot"
        public var description: String { return self.rawValue }
    }

    public struct ParameterNameValue: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterName", required: false, type: .string), 
            AWSShapeMember(label: "ParameterValue", required: false, type: .string)
        ]
        /// The name of the parameter.
        public let parameterName: String?
        /// The value of the parameter.
        public let parameterValue: String?

        public init(parameterName: String? = nil, parameterValue: String? = nil) {
            self.parameterName = parameterName
            self.parameterValue = parameterValue
        }

        private enum CodingKeys: String, CodingKey {
            case parameterName = "ParameterName"
            case parameterValue = "ParameterValue"
        }
    }

    public struct DeleteCacheSubnetGroupMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheSubnetGroupName", required: true, type: .string)
        ]
        /// The name of the cache subnet group to delete. Constraints: Must contain no more than 255 alphanumeric characters or hyphens.
        public let cacheSubnetGroupName: String

        public init(cacheSubnetGroupName: String) {
            self.cacheSubnetGroupName = cacheSubnetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case cacheSubnetGroupName = "CacheSubnetGroupName"
        }
    }

    public struct CacheClusterMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "CacheClusters", required: false, type: .structure)
        ]
        /// Provides an identifier to allow retrieval of paginated results.
        public let marker: String?
        /// A list of cache clusters. Each item in the list contains detailed information about one cache cluster.
        public let cacheClusters: CacheClusterList?

        public init(marker: String? = nil, cacheClusters: CacheClusterList? = nil) {
            self.marker = marker
            self.cacheClusters = cacheClusters
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case cacheClusters = "CacheClusters"
        }
    }

    public struct SecurityGroupIdsList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroupId", required: false, type: .list)
        ]
        public let securityGroupId: [String]?

        public init(securityGroupId: [String]? = nil) {
            self.securityGroupId = securityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupId = "SecurityGroupId"
        }
    }

    public struct ReservedCacheNodeList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedCacheNode", required: false, type: .list)
        ]
        public let reservedCacheNode: [ReservedCacheNode]?

        public init(reservedCacheNode: [ReservedCacheNode]? = nil) {
            self.reservedCacheNode = reservedCacheNode
        }

        private enum CodingKeys: String, CodingKey {
            case reservedCacheNode = "ReservedCacheNode"
        }
    }

    public struct DescribeCacheParametersMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Source", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "CacheParameterGroupName", required: true, type: .string)
        ]
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        public let maxRecords: Int32?
        /// The parameter types to return. Valid values: user | system | engine-default 
        public let source: String?
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The name of a specific cache parameter group to return details for.
        public let cacheParameterGroupName: String

        public init(maxRecords: Int32? = nil, source: String? = nil, marker: String? = nil, cacheParameterGroupName: String) {
            self.maxRecords = maxRecords
            self.source = source
            self.marker = marker
            self.cacheParameterGroupName = cacheParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case source = "Source"
            case marker = "Marker"
            case cacheParameterGroupName = "CacheParameterGroupName"
        }
    }

    public struct ReservedCacheNode: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CacheNodeCount", required: false, type: .integer), 
            AWSShapeMember(label: "RecurringCharges", required: false, type: .structure), 
            AWSShapeMember(label: "FixedPrice", required: false, type: .double), 
            AWSShapeMember(label: "UsagePrice", required: false, type: .double), 
            AWSShapeMember(label: "State", required: false, type: .string), 
            AWSShapeMember(label: "CacheNodeType", required: false, type: .string), 
            AWSShapeMember(label: "ReservedCacheNodeId", required: false, type: .string), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "ReservedCacheNodesOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "OfferingType", required: false, type: .string), 
            AWSShapeMember(label: "ProductDescription", required: false, type: .string)
        ]
        /// The time the reservation started.
        public let startTime: Double?
        /// The number of cache nodes that have been reserved.
        public let cacheNodeCount: Int32?
        /// The recurring price charged to run this reserved cache node.
        public let recurringCharges: RecurringChargeList?
        /// The fixed price charged for this reserved cache node.
        public let fixedPrice: Double?
        /// The hourly price charged for this reserved cache node.
        public let usagePrice: Double?
        /// The state of the reserved cache node.
        public let state: String?
        /// The cache node type for the reserved cache nodes. Valid node types are as follows:   General purpose:   Current generation: cache.t2.micro, cache.t2.small, cache.t2.medium, cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge, cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge    Previous generation: cache.t1.micro, cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge      Compute optimized: cache.c1.xlarge    Memory optimized:   Current generation: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge, cache.r3.4xlarge, cache.r3.8xlarge    Previous generation: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge       Notes:    All T2 instances are created in an Amazon Virtual Private Cloud (Amazon VPC).   Redis backup/restore is not supported for Redis (cluster mode disabled) T1 and T2 instances. Backup/restore is supported on Redis (cluster mode enabled) T2 instances.   Redis Append-only files (AOF) functionality is not supported for T1 or T2 instances.   For a complete listing of node types and specifications, see Amazon ElastiCache Product Features and Details and either Cache Node Type-Specific Parameters for Memcached or Cache Node Type-Specific Parameters for Redis.
        public let cacheNodeType: String?
        /// The unique identifier for the reservation.
        public let reservedCacheNodeId: String?
        /// The duration of the reservation in seconds.
        public let duration: Int32?
        /// The offering identifier.
        public let reservedCacheNodesOfferingId: String?
        /// The offering type of this reserved cache node.
        public let offeringType: String?
        /// The description of the reserved cache node.
        public let productDescription: String?

        public init(startTime: Double? = nil, cacheNodeCount: Int32? = nil, recurringCharges: RecurringChargeList? = nil, fixedPrice: Double? = nil, usagePrice: Double? = nil, state: String? = nil, cacheNodeType: String? = nil, reservedCacheNodeId: String? = nil, duration: Int32? = nil, reservedCacheNodesOfferingId: String? = nil, offeringType: String? = nil, productDescription: String? = nil) {
            self.startTime = startTime
            self.cacheNodeCount = cacheNodeCount
            self.recurringCharges = recurringCharges
            self.fixedPrice = fixedPrice
            self.usagePrice = usagePrice
            self.state = state
            self.cacheNodeType = cacheNodeType
            self.reservedCacheNodeId = reservedCacheNodeId
            self.duration = duration
            self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
            self.offeringType = offeringType
            self.productDescription = productDescription
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case cacheNodeCount = "CacheNodeCount"
            case recurringCharges = "RecurringCharges"
            case fixedPrice = "FixedPrice"
            case usagePrice = "UsagePrice"
            case state = "State"
            case cacheNodeType = "CacheNodeType"
            case reservedCacheNodeId = "ReservedCacheNodeId"
            case duration = "Duration"
            case reservedCacheNodesOfferingId = "ReservedCacheNodesOfferingId"
            case offeringType = "OfferingType"
            case productDescription = "ProductDescription"
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The tag's value. May be null.
        public let value: String?
        /// The key for the tag. May not be null.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public enum PendingAutomaticFailoverStatus: String, CustomStringConvertible, Codable {
        case enabled = "enabled"
        case disabled = "disabled"
        public var description: String { return self.rawValue }
    }

    public struct ResetCacheParameterGroupMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheParameterGroupName", required: true, type: .string), 
            AWSShapeMember(label: "ParameterNameValues", required: false, type: .structure), 
            AWSShapeMember(label: "ResetAllParameters", required: false, type: .boolean)
        ]
        /// The name of the cache parameter group to reset.
        public let cacheParameterGroupName: String
        /// An array of parameter names to reset to their default values. If ResetAllParameters is true, do not use ParameterNameValues. If ResetAllParameters is false, you must specify the name of at least one parameter to reset.
        public let parameterNameValues: ParameterNameValueList?
        /// If true, all parameters in the cache parameter group are reset to their default values. If false, only the parameters listed by ParameterNameValues are reset to their default values. Valid values: true | false 
        public let resetAllParameters: Bool?

        public init(cacheParameterGroupName: String, parameterNameValues: ParameterNameValueList? = nil, resetAllParameters: Bool? = nil) {
            self.cacheParameterGroupName = cacheParameterGroupName
            self.parameterNameValues = parameterNameValues
            self.resetAllParameters = resetAllParameters
        }

        private enum CodingKeys: String, CodingKey {
            case cacheParameterGroupName = "CacheParameterGroupName"
            case parameterNameValues = "ParameterNameValues"
            case resetAllParameters = "ResetAllParameters"
        }
    }

    public struct CopySnapshotResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Snapshot", required: false, type: .structure)
        ]
        public let snapshot: Snapshot?

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

        private enum CodingKeys: String, CodingKey {
            case snapshot = "Snapshot"
        }
    }

    public struct ListTagsForResourceMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceName", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster or arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let resourceName: String

        public init(resourceName: String) {
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceName = "ResourceName"
        }
    }

    public struct CacheEngineVersionList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheEngineVersion", required: false, type: .list)
        ]
        public let cacheEngineVersion: [CacheEngineVersion]?

        public init(cacheEngineVersion: [CacheEngineVersion]? = nil) {
            self.cacheEngineVersion = cacheEngineVersion
        }

        private enum CodingKeys: String, CodingKey {
            case cacheEngineVersion = "CacheEngineVersion"
        }
    }

    public struct PreferredAvailabilityZoneList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PreferredAvailabilityZone", required: false, type: .list)
        ]
        public let preferredAvailabilityZone: [String]?

        public init(preferredAvailabilityZone: [String]? = nil) {
            self.preferredAvailabilityZone = preferredAvailabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case preferredAvailabilityZone = "PreferredAvailabilityZone"
        }
    }

    public struct ReservedCacheNodesOffering: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OfferingType", required: false, type: .string), 
            AWSShapeMember(label: "RecurringCharges", required: false, type: .structure), 
            AWSShapeMember(label: "UsagePrice", required: false, type: .double), 
            AWSShapeMember(label: "CacheNodeType", required: false, type: .string), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "ReservedCacheNodesOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "FixedPrice", required: false, type: .double), 
            AWSShapeMember(label: "ProductDescription", required: false, type: .string)
        ]
        /// The offering type.
        public let offeringType: String?
        /// The recurring price charged to run this reserved cache node.
        public let recurringCharges: RecurringChargeList?
        /// The hourly price charged for this offering.
        public let usagePrice: Double?
        /// The cache node type for the reserved cache node. Valid node types are as follows:   General purpose:   Current generation: cache.t2.micro, cache.t2.small, cache.t2.medium, cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge, cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge    Previous generation: cache.t1.micro, cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge      Compute optimized: cache.c1.xlarge    Memory optimized:   Current generation: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge, cache.r3.4xlarge, cache.r3.8xlarge    Previous generation: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge       Notes:    All T2 instances are created in an Amazon Virtual Private Cloud (Amazon VPC).   Redis backup/restore is not supported for Redis (cluster mode disabled) T1 and T2 instances. Backup/restore is supported on Redis (cluster mode enabled) T2 instances.   Redis Append-only files (AOF) functionality is not supported for T1 or T2 instances.   For a complete listing of node types and specifications, see Amazon ElastiCache Product Features and Details and either Cache Node Type-Specific Parameters for Memcached or Cache Node Type-Specific Parameters for Redis.
        public let cacheNodeType: String?
        /// The duration of the offering. in seconds.
        public let duration: Int32?
        /// A unique identifier for the reserved cache node offering.
        public let reservedCacheNodesOfferingId: String?
        /// The fixed price charged for this offering.
        public let fixedPrice: Double?
        /// The cache engine used by the offering.
        public let productDescription: String?

        public init(offeringType: String? = nil, recurringCharges: RecurringChargeList? = nil, usagePrice: Double? = nil, cacheNodeType: String? = nil, duration: Int32? = nil, reservedCacheNodesOfferingId: String? = nil, fixedPrice: Double? = nil, productDescription: String? = nil) {
            self.offeringType = offeringType
            self.recurringCharges = recurringCharges
            self.usagePrice = usagePrice
            self.cacheNodeType = cacheNodeType
            self.duration = duration
            self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
            self.fixedPrice = fixedPrice
            self.productDescription = productDescription
        }

        private enum CodingKeys: String, CodingKey {
            case offeringType = "OfferingType"
            case recurringCharges = "RecurringCharges"
            case usagePrice = "UsagePrice"
            case cacheNodeType = "CacheNodeType"
            case duration = "Duration"
            case reservedCacheNodesOfferingId = "ReservedCacheNodesOfferingId"
            case fixedPrice = "FixedPrice"
            case productDescription = "ProductDescription"
        }
    }

    public struct CacheSecurityGroupMembershipList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheSecurityGroup", required: false, type: .list)
        ]
        public let cacheSecurityGroup: [CacheSecurityGroupMembership]?

        public init(cacheSecurityGroup: [CacheSecurityGroupMembership]? = nil) {
            self.cacheSecurityGroup = cacheSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case cacheSecurityGroup = "CacheSecurityGroup"
        }
    }

    public struct RevokeCacheSecurityGroupIngressMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EC2SecurityGroupOwnerId", required: true, type: .string), 
            AWSShapeMember(label: "CacheSecurityGroupName", required: true, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupName", required: true, type: .string)
        ]
        /// The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
        public let eC2SecurityGroupOwnerId: String
        /// The name of the cache security group to revoke ingress from.
        public let cacheSecurityGroupName: String
        /// The name of the Amazon EC2 security group to revoke access from.
        public let eC2SecurityGroupName: String

        public init(eC2SecurityGroupOwnerId: String, cacheSecurityGroupName: String, eC2SecurityGroupName: String) {
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.cacheSecurityGroupName = cacheSecurityGroupName
            self.eC2SecurityGroupName = eC2SecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case eC2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
            case cacheSecurityGroupName = "CacheSecurityGroupName"
            case eC2SecurityGroupName = "EC2SecurityGroupName"
        }
    }

    public struct TestFailoverMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NodeGroupId", required: true, type: .string), 
            AWSShapeMember(label: "ReplicationGroupId", required: true, type: .string)
        ]
        /// The name of the node group (called shard in the console) in this replication group on which automatic failover is to be tested. You may test automatic failover on up to 5 node groups in any rolling 24-hour period.
        public let nodeGroupId: String
        /// The name of the replication group (console: cluster) whose automatic failover is being tested by this operation.
        public let replicationGroupId: String

        public init(nodeGroupId: String, replicationGroupId: String) {
            self.nodeGroupId = nodeGroupId
            self.replicationGroupId = replicationGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case nodeGroupId = "NodeGroupId"
            case replicationGroupId = "ReplicationGroupId"
        }
    }

    public struct RecurringCharge: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecurringChargeAmount", required: false, type: .double), 
            AWSShapeMember(label: "RecurringChargeFrequency", required: false, type: .string)
        ]
        /// The monetary amount of the recurring charge.
        public let recurringChargeAmount: Double?
        /// The frequency of the recurring charge.
        public let recurringChargeFrequency: String?

        public init(recurringChargeAmount: Double? = nil, recurringChargeFrequency: String? = nil) {
            self.recurringChargeAmount = recurringChargeAmount
            self.recurringChargeFrequency = recurringChargeFrequency
        }

        private enum CodingKeys: String, CodingKey {
            case recurringChargeAmount = "RecurringChargeAmount"
            case recurringChargeFrequency = "RecurringChargeFrequency"
        }
    }

    public struct CacheNodeTypeSpecificValueList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheNodeTypeSpecificValue", required: false, type: .list)
        ]
        public let cacheNodeTypeSpecificValue: [CacheNodeTypeSpecificValue]?

        public init(cacheNodeTypeSpecificValue: [CacheNodeTypeSpecificValue]? = nil) {
            self.cacheNodeTypeSpecificValue = cacheNodeTypeSpecificValue
        }

        private enum CodingKeys: String, CodingKey {
            case cacheNodeTypeSpecificValue = "CacheNodeTypeSpecificValue"
        }
    }

    public struct CreateSnapshotMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheClusterId", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotName", required: true, type: .string), 
            AWSShapeMember(label: "ReplicationGroupId", required: false, type: .string)
        ]
        /// The identifier of an existing cache cluster. The snapshot is created from this cache cluster.
        public let cacheClusterId: String?
        /// A name for the snapshot being created.
        public let snapshotName: String
        /// The identifier of an existing replication group. The snapshot is created from this replication group.
        public let replicationGroupId: String?

        public init(cacheClusterId: String? = nil, snapshotName: String, replicationGroupId: String? = nil) {
            self.cacheClusterId = cacheClusterId
            self.snapshotName = snapshotName
            self.replicationGroupId = replicationGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case cacheClusterId = "CacheClusterId"
            case snapshotName = "SnapshotName"
            case replicationGroupId = "ReplicationGroupId"
        }
    }

    public struct CacheClusterList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheCluster", required: false, type: .list)
        ]
        public let cacheCluster: [CacheCluster]?

        public init(cacheCluster: [CacheCluster]? = nil) {
            self.cacheCluster = cacheCluster
        }

        private enum CodingKeys: String, CodingKey {
            case cacheCluster = "CacheCluster"
        }
    }

    public struct DescribeEventsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "SourceType", required: false, type: .enum), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SourceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Duration", required: false, type: .integer)
        ]
        /// The beginning of the time interval to retrieve events for, specified in ISO 8601 format.  Example: 2017-03-30T07:03:49.555Z
        public let startTime: Double?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        public let maxRecords: Int32?
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The event source to retrieve events for. If no value is specified, all events are returned.
        public let sourceType: SourceType?
        /// The end of the time interval for which to retrieve events, specified in ISO 8601 format.  Example: 2017-03-30T07:03:49.555Z
        public let endTime: Double?
        /// The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
        public let sourceIdentifier: String?
        /// The number of minutes worth of events to retrieve.
        public let duration: Int32?

        public init(startTime: Double? = nil, maxRecords: Int32? = nil, marker: String? = nil, sourceType: SourceType? = nil, endTime: Double? = nil, sourceIdentifier: String? = nil, duration: Int32? = nil) {
            self.startTime = startTime
            self.maxRecords = maxRecords
            self.marker = marker
            self.sourceType = sourceType
            self.endTime = endTime
            self.sourceIdentifier = sourceIdentifier
            self.duration = duration
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case sourceType = "SourceType"
            case endTime = "EndTime"
            case sourceIdentifier = "SourceIdentifier"
            case duration = "Duration"
        }
    }

    public struct CacheNode: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceCacheNodeId", required: false, type: .string), 
            AWSShapeMember(label: "CustomerAvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "CacheNodeId", required: false, type: .string), 
            AWSShapeMember(label: "CacheNodeStatus", required: false, type: .string), 
            AWSShapeMember(label: "ParameterGroupStatus", required: false, type: .string), 
            AWSShapeMember(label: "CacheNodeCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Endpoint", required: false, type: .structure)
        ]
        /// The ID of the primary node to which this read replica node is synchronized. If this field is empty, this node is not associated with a primary cache cluster.
        public let sourceCacheNodeId: String?
        /// The Availability Zone where this node was created and now resides.
        public let customerAvailabilityZone: String?
        /// The cache node identifier. A node ID is a numeric identifier (0001, 0002, etc.). The combination of cluster ID and node ID uniquely identifies every cache node used in a customer's AWS account.
        public let cacheNodeId: String?
        /// The current state of this cache node.
        public let cacheNodeStatus: String?
        /// The status of the parameter group applied to this cache node.
        public let parameterGroupStatus: String?
        /// The date and time when the cache node was created.
        public let cacheNodeCreateTime: Double?
        /// The hostname for connecting to this cache node.
        public let endpoint: Endpoint?

        public init(sourceCacheNodeId: String? = nil, customerAvailabilityZone: String? = nil, cacheNodeId: String? = nil, cacheNodeStatus: String? = nil, parameterGroupStatus: String? = nil, cacheNodeCreateTime: Double? = nil, endpoint: Endpoint? = nil) {
            self.sourceCacheNodeId = sourceCacheNodeId
            self.customerAvailabilityZone = customerAvailabilityZone
            self.cacheNodeId = cacheNodeId
            self.cacheNodeStatus = cacheNodeStatus
            self.parameterGroupStatus = parameterGroupStatus
            self.cacheNodeCreateTime = cacheNodeCreateTime
            self.endpoint = endpoint
        }

        private enum CodingKeys: String, CodingKey {
            case sourceCacheNodeId = "SourceCacheNodeId"
            case customerAvailabilityZone = "CustomerAvailabilityZone"
            case cacheNodeId = "CacheNodeId"
            case cacheNodeStatus = "CacheNodeStatus"
            case parameterGroupStatus = "ParameterGroupStatus"
            case cacheNodeCreateTime = "CacheNodeCreateTime"
            case endpoint = "Endpoint"
        }
    }

    public struct CreateCacheClusterMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthToken", required: false, type: .string), 
            AWSShapeMember(label: "AZMode", required: false, type: .enum), 
            AWSShapeMember(label: "SnapshotArns", required: false, type: .structure), 
            AWSShapeMember(label: "CacheSecurityGroupNames", required: false, type: .structure), 
            AWSShapeMember(label: "NumCacheNodes", required: false, type: .integer), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "PreferredAvailabilityZones", required: false, type: .structure), 
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "SnapshotName", required: false, type: .string), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "NotificationTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotWindow", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationGroupId", required: false, type: .string), 
            AWSShapeMember(label: "PreferredAvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "CacheSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "CacheNodeType", required: false, type: .string), 
            AWSShapeMember(label: "CacheParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "CacheClusterId", required: true, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "SnapshotRetentionLimit", required: false, type: .integer)
        ]
        ///  Reserved parameter. The password used to access a password protected server. Password constraints:   Must be only printable ASCII characters.   Must be at least 16 characters and no more than 128 characters in length.   Cannot contain any of the following characters: '/', '"', or "@".    For more information, see AUTH password at Redis.
        public let authToken: String?
        /// Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region. This parameter is only supported for Memcached cache clusters. If the AZMode and PreferredAvailabilityZones are not specified, ElastiCache assumes single-az mode.
        public let aZMode: AZMode?
        /// A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.  This parameter is only valid if the Engine parameter is redis.  Example of an Amazon S3 ARN: arn:aws:s3:::my_bucket/snapshot1.rdb 
        public let snapshotArns: SnapshotArnsList?
        /// A list of security group names to associate with this cache cluster. Use this parameter only when you are creating a cache cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).
        public let cacheSecurityGroupNames: CacheSecurityGroupNameList?
        /// The initial number of cache nodes that the cache cluster has. For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20. If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at http://aws.amazon.com/contact-us/elasticache-node-limit-request/.
        public let numCacheNodes: Int32?
        /// A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
        public let tags: TagList?
        /// A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important. This option is only supported on Memcached.  If you are creating your cache cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group. The number of Availability Zones listed must equal the value of NumCacheNodes.  If you want all the nodes in the same Availability Zone, use PreferredAvailabilityZone instead, or repeat the Availability Zone multiple times in the list. Default: System chosen Availability Zones.
        public let preferredAvailabilityZones: PreferredAvailabilityZoneList?
        /// One or more VPC security groups associated with the cache cluster. Use this parameter only when you are creating a cache cluster in an Amazon Virtual Private Cloud (Amazon VPC).
        public let securityGroupIds: SecurityGroupIdsList?
        /// The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to restoring while the new node group (shard) is being created.  This parameter is only valid if the Engine parameter is redis. 
        public let snapshotName: String?
        /// This parameter is currently disabled.
        public let autoMinorVersionUpgrade: Bool?
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.  The Amazon SNS topic owner must be the same as the cache cluster owner. 
        public let notificationTopicArn: String?
        /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard). Example: 05:00-09:00  If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.  Note: This parameter is only valid if the Engine parameter is redis.
        public let snapshotWindow: String?
        /// The version number of the cache engine to be used for this cache cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.  Important: You can upgrade to a newer engine version (see Selecting a Cache Engine and Version), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cache cluster or replication group and create it anew with the earlier engine version. 
        public let engineVersion: String?
        ///  Due to current limitations on Redis (cluster mode disabled), this operation or parameter is not supported on Redis (cluster mode enabled) replication groups.  The ID of the replication group to which this cache cluster should belong. If this parameter is specified, the cache cluster is added to the specified replication group as a read replica; otherwise, the cache cluster is a standalone primary that is not part of any replication group. If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cache cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.  This parameter is only valid if the Engine parameter is redis. 
        public let replicationGroupId: String?
        /// The EC2 Availability Zone in which the cache cluster is created. All nodes belonging to this Memcached cache cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use PreferredAvailabilityZones. Default: System chosen Availability Zone.
        public let preferredAvailabilityZone: String?
        /// The name of the subnet group to be used for the cache cluster. Use this parameter only when you are creating a cache cluster in an Amazon Virtual Private Cloud (Amazon VPC).  If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see Subnets and Subnet Groups. 
        public let cacheSubnetGroupName: String?
        /// Specifies the weekly time range during which maintenance on the cache cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are: Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:    sun     mon     tue     wed     thu     fri     sat    Example: sun:23:00-mon:01:30 
        public let preferredMaintenanceWindow: String?
        /// The name of the cache engine to be used for this cache cluster. Valid values for this parameter are: memcached | redis 
        public let engine: String?
        /// The compute and memory capacity of the nodes in the node group (shard). Valid node types are as follows:   General purpose:   Current generation: cache.t2.micro, cache.t2.small, cache.t2.medium, cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge, cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge    Previous generation: cache.t1.micro, cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge      Compute optimized: cache.c1.xlarge    Memory optimized:   Current generation: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge, cache.r3.4xlarge, cache.r3.8xlarge    Previous generation: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge       Notes:    All T2 instances are created in an Amazon Virtual Private Cloud (Amazon VPC).   Redis backup/restore is not supported for Redis (cluster mode disabled) T1 and T2 instances. Backup/restore is supported on Redis (cluster mode enabled) T2 instances.   Redis Append-only files (AOF) functionality is not supported for T1 or T2 instances.   For a complete listing of node types and specifications, see Amazon ElastiCache Product Features and Details and either Cache Node Type-Specific Parameters for Memcached or Cache Node Type-Specific Parameters for Redis.
        public let cacheNodeType: String?
        /// The name of the parameter group to associate with this cache cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has cluster-enabled='yes' when creating a cluster.
        public let cacheParameterGroupName: String?
        /// The node group (shard) identifier. This parameter is stored as a lowercase string.  Constraints:    A name must contain from 1 to 20 alphanumeric characters or hyphens.   The first character must be a letter.   A name cannot end with a hyphen or contain two consecutive hyphens.  
        public let cacheClusterId: String
        /// The port number on which each of the cache nodes accepts connections.
        public let port: Int32?
        /// The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot taken today is retained for 5 days before being deleted.  This parameter is only valid if the Engine parameter is redis.  Default: 0 (i.e., automatic backups are disabled for this cache cluster).
        public let snapshotRetentionLimit: Int32?

        public init(authToken: String? = nil, aZMode: AZMode? = nil, snapshotArns: SnapshotArnsList? = nil, cacheSecurityGroupNames: CacheSecurityGroupNameList? = nil, numCacheNodes: Int32? = nil, tags: TagList? = nil, preferredAvailabilityZones: PreferredAvailabilityZoneList? = nil, securityGroupIds: SecurityGroupIdsList? = nil, snapshotName: String? = nil, autoMinorVersionUpgrade: Bool? = nil, notificationTopicArn: String? = nil, snapshotWindow: String? = nil, engineVersion: String? = nil, replicationGroupId: String? = nil, preferredAvailabilityZone: String? = nil, cacheSubnetGroupName: String? = nil, preferredMaintenanceWindow: String? = nil, engine: String? = nil, cacheNodeType: String? = nil, cacheParameterGroupName: String? = nil, cacheClusterId: String, port: Int32? = nil, snapshotRetentionLimit: Int32? = nil) {
            self.authToken = authToken
            self.aZMode = aZMode
            self.snapshotArns = snapshotArns
            self.cacheSecurityGroupNames = cacheSecurityGroupNames
            self.numCacheNodes = numCacheNodes
            self.tags = tags
            self.preferredAvailabilityZones = preferredAvailabilityZones
            self.securityGroupIds = securityGroupIds
            self.snapshotName = snapshotName
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.notificationTopicArn = notificationTopicArn
            self.snapshotWindow = snapshotWindow
            self.engineVersion = engineVersion
            self.replicationGroupId = replicationGroupId
            self.preferredAvailabilityZone = preferredAvailabilityZone
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.engine = engine
            self.cacheNodeType = cacheNodeType
            self.cacheParameterGroupName = cacheParameterGroupName
            self.cacheClusterId = cacheClusterId
            self.port = port
            self.snapshotRetentionLimit = snapshotRetentionLimit
        }

        private enum CodingKeys: String, CodingKey {
            case authToken = "AuthToken"
            case aZMode = "AZMode"
            case snapshotArns = "SnapshotArns"
            case cacheSecurityGroupNames = "CacheSecurityGroupNames"
            case numCacheNodes = "NumCacheNodes"
            case tags = "Tags"
            case preferredAvailabilityZones = "PreferredAvailabilityZones"
            case securityGroupIds = "SecurityGroupIds"
            case snapshotName = "SnapshotName"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case notificationTopicArn = "NotificationTopicArn"
            case snapshotWindow = "SnapshotWindow"
            case engineVersion = "EngineVersion"
            case replicationGroupId = "ReplicationGroupId"
            case preferredAvailabilityZone = "PreferredAvailabilityZone"
            case cacheSubnetGroupName = "CacheSubnetGroupName"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case engine = "Engine"
            case cacheNodeType = "CacheNodeType"
            case cacheParameterGroupName = "CacheParameterGroupName"
            case cacheClusterId = "CacheClusterId"
            case port = "Port"
            case snapshotRetentionLimit = "SnapshotRetentionLimit"
        }
    }

    public struct RemoveTagsFromResourceMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceName", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster or arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let resourceName: String
        /// A list of TagKeys identifying the tags you want removed from the named resource.
        public let tagKeys: [String]

        public init(resourceName: String, tagKeys: [String]) {
            self.resourceName = resourceName
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceName = "ResourceName"
            case tagKeys = "TagKeys"
        }
    }

    public struct DeleteReplicationGroupResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationGroup", required: false, type: .structure)
        ]
        public let replicationGroup: ReplicationGroup?

        public init(replicationGroup: ReplicationGroup? = nil) {
            self.replicationGroup = replicationGroup
        }

        private enum CodingKeys: String, CodingKey {
            case replicationGroup = "ReplicationGroup"
        }
    }

    public struct CacheParameterGroupsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "CacheParameterGroups", required: false, type: .structure)
        ]
        /// Provides an identifier to allow retrieval of paginated results.
        public let marker: String?
        /// A list of cache parameter groups. Each element in the list contains detailed information about one cache parameter group.
        public let cacheParameterGroups: CacheParameterGroupList?

        public init(marker: String? = nil, cacheParameterGroups: CacheParameterGroupList? = nil) {
            self.marker = marker
            self.cacheParameterGroups = cacheParameterGroups
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case cacheParameterGroups = "CacheParameterGroups"
        }
    }

    public struct EventList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Event", required: false, type: .list)
        ]
        public let event: [Event]?

        public init(event: [Event]? = nil) {
            self.event = event
        }

        private enum CodingKeys: String, CodingKey {
            case event = "Event"
        }
    }

    public struct TestFailoverResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationGroup", required: false, type: .structure)
        ]
        public let replicationGroup: ReplicationGroup?

        public init(replicationGroup: ReplicationGroup? = nil) {
            self.replicationGroup = replicationGroup
        }

        private enum CodingKeys: String, CodingKey {
            case replicationGroup = "ReplicationGroup"
        }
    }

    public struct CacheEngineVersion: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheEngineDescription", required: false, type: .string), 
            AWSShapeMember(label: "CacheParameterGroupFamily", required: false, type: .string), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "CacheEngineVersionDescription", required: false, type: .string)
        ]
        /// The description of the cache engine.
        public let cacheEngineDescription: String?
        /// The name of the cache parameter group family associated with this cache engine. Valid values are: memcached1.4 | redis2.6 | redis2.8 | redis3.2 
        public let cacheParameterGroupFamily: String?
        /// The name of the cache engine.
        public let engine: String?
        /// The version number of the cache engine.
        public let engineVersion: String?
        /// The description of the cache engine version.
        public let cacheEngineVersionDescription: String?

        public init(cacheEngineDescription: String? = nil, cacheParameterGroupFamily: String? = nil, engine: String? = nil, engineVersion: String? = nil, cacheEngineVersionDescription: String? = nil) {
            self.cacheEngineDescription = cacheEngineDescription
            self.cacheParameterGroupFamily = cacheParameterGroupFamily
            self.engine = engine
            self.engineVersion = engineVersion
            self.cacheEngineVersionDescription = cacheEngineVersionDescription
        }

        private enum CodingKeys: String, CodingKey {
            case cacheEngineDescription = "CacheEngineDescription"
            case cacheParameterGroupFamily = "CacheParameterGroupFamily"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case cacheEngineVersionDescription = "CacheEngineVersionDescription"
        }
    }

    public struct NodeGroupMemberList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NodeGroupMember", required: false, type: .list)
        ]
        public let nodeGroupMember: [NodeGroupMember]?

        public init(nodeGroupMember: [NodeGroupMember]? = nil) {
            self.nodeGroupMember = nodeGroupMember
        }

        private enum CodingKeys: String, CodingKey {
            case nodeGroupMember = "NodeGroupMember"
        }
    }

    public struct CacheParameterGroupDetails: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheNodeTypeSpecificParameters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .structure)
        ]
        /// A list of parameters specific to a particular cache node type. Each element in the list contains detailed information about one parameter.
        public let cacheNodeTypeSpecificParameters: CacheNodeTypeSpecificParametersList?
        /// Provides an identifier to allow retrieval of paginated results.
        public let marker: String?
        /// A list of Parameter instances.
        public let parameters: ParametersList?

        public init(cacheNodeTypeSpecificParameters: CacheNodeTypeSpecificParametersList? = nil, marker: String? = nil, parameters: ParametersList? = nil) {
            self.cacheNodeTypeSpecificParameters = cacheNodeTypeSpecificParameters
            self.marker = marker
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case cacheNodeTypeSpecificParameters = "CacheNodeTypeSpecificParameters"
            case marker = "Marker"
            case parameters = "Parameters"
        }
    }

    public struct DescribeSnapshotsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "ShowNodeGroupConfig", required: false, type: .boolean), 
            AWSShapeMember(label: "ReplicationGroupId", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotSource", required: false, type: .string), 
            AWSShapeMember(label: "CacheClusterId", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotName", required: false, type: .string)
        ]
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 50 Constraints: minimum 20; maximum 50.
        public let maxRecords: Int32?
        /// A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
        public let showNodeGroupConfig: Bool?
        /// A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
        public let replicationGroupId: String?
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// If set to system, the output shows snapshots that were automatically created by ElastiCache. If set to user the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
        public let snapshotSource: String?
        /// A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cache cluster are described.
        public let cacheClusterId: String?
        /// A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
        public let snapshotName: String?

        public init(maxRecords: Int32? = nil, showNodeGroupConfig: Bool? = nil, replicationGroupId: String? = nil, marker: String? = nil, snapshotSource: String? = nil, cacheClusterId: String? = nil, snapshotName: String? = nil) {
            self.maxRecords = maxRecords
            self.showNodeGroupConfig = showNodeGroupConfig
            self.replicationGroupId = replicationGroupId
            self.marker = marker
            self.snapshotSource = snapshotSource
            self.cacheClusterId = cacheClusterId
            self.snapshotName = snapshotName
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case showNodeGroupConfig = "ShowNodeGroupConfig"
            case replicationGroupId = "ReplicationGroupId"
            case marker = "Marker"
            case snapshotSource = "SnapshotSource"
            case cacheClusterId = "CacheClusterId"
            case snapshotName = "SnapshotName"
        }
    }

    public struct RevokeCacheSecurityGroupIngressResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheSecurityGroup", required: false, type: .structure)
        ]
        public let cacheSecurityGroup: CacheSecurityGroup?

        public init(cacheSecurityGroup: CacheSecurityGroup? = nil) {
            self.cacheSecurityGroup = cacheSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case cacheSecurityGroup = "CacheSecurityGroup"
        }
    }

    public struct SubnetIdentifierList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIdentifier", required: false, type: .list)
        ]
        public let subnetIdentifier: [String]?

        public init(subnetIdentifier: [String]? = nil) {
            self.subnetIdentifier = subnetIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIdentifier = "SubnetIdentifier"
        }
    }

    public struct EC2SecurityGroup: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EC2SecurityGroupOwnerId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupName", required: false, type: .string)
        ]
        /// The AWS account ID of the Amazon EC2 security group owner.
        public let eC2SecurityGroupOwnerId: String?
        /// The status of the Amazon EC2 security group.
        public let status: String?
        /// The name of the Amazon EC2 security group.
        public let eC2SecurityGroupName: String?

        public init(eC2SecurityGroupOwnerId: String? = nil, status: String? = nil, eC2SecurityGroupName: String? = nil) {
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.status = status
            self.eC2SecurityGroupName = eC2SecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case eC2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
            case status = "Status"
            case eC2SecurityGroupName = "EC2SecurityGroupName"
        }
    }

    public struct Subnet: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SubnetAvailabilityZone", required: false, type: .structure)
        ]
        /// The unique identifier for the subnet.
        public let subnetIdentifier: String?
        /// The Availability Zone associated with the subnet.
        public let subnetAvailabilityZone: AvailabilityZone?

        public init(subnetIdentifier: String? = nil, subnetAvailabilityZone: AvailabilityZone? = nil) {
            self.subnetIdentifier = subnetIdentifier
            self.subnetAvailabilityZone = subnetAvailabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIdentifier = "SubnetIdentifier"
            case subnetAvailabilityZone = "SubnetAvailabilityZone"
        }
    }

    public struct Parameter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterValue", required: false, type: .string), 
            AWSShapeMember(label: "AllowedValues", required: false, type: .string), 
            AWSShapeMember(label: "DataType", required: false, type: .string), 
            AWSShapeMember(label: "ParameterName", required: false, type: .string), 
            AWSShapeMember(label: "Source", required: false, type: .string), 
            AWSShapeMember(label: "IsModifiable", required: false, type: .boolean), 
            AWSShapeMember(label: "MinimumEngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "ChangeType", required: false, type: .enum), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The value of the parameter.
        public let parameterValue: String?
        /// The valid range of values for the parameter.
        public let allowedValues: String?
        /// The valid data type for the parameter.
        public let dataType: String?
        /// The name of the parameter.
        public let parameterName: String?
        /// The source of the parameter.
        public let source: String?
        /// Indicates whether (true) or not (false) the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed.
        public let isModifiable: Bool?
        /// The earliest cache engine version to which the parameter can apply.
        public let minimumEngineVersion: String?
        /// Indicates whether a change to the parameter is applied immediately or requires a reboot for the change to be applied. You can force a reboot or wait until the next maintenance window's reboot. For more information, see Rebooting a Cluster.
        public let changeType: ChangeType?
        /// A description of the parameter.
        public let description: String?

        public init(parameterValue: String? = nil, allowedValues: String? = nil, dataType: String? = nil, parameterName: String? = nil, source: String? = nil, isModifiable: Bool? = nil, minimumEngineVersion: String? = nil, changeType: ChangeType? = nil, description: String? = nil) {
            self.parameterValue = parameterValue
            self.allowedValues = allowedValues
            self.dataType = dataType
            self.parameterName = parameterName
            self.source = source
            self.isModifiable = isModifiable
            self.minimumEngineVersion = minimumEngineVersion
            self.changeType = changeType
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case parameterValue = "ParameterValue"
            case allowedValues = "AllowedValues"
            case dataType = "DataType"
            case parameterName = "ParameterName"
            case source = "Source"
            case isModifiable = "IsModifiable"
            case minimumEngineVersion = "MinimumEngineVersion"
            case changeType = "ChangeType"
            case description = "Description"
        }
    }

    public struct CacheParameterGroupStatus: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "CacheNodeIdsToReboot", required: false, type: .structure), 
            AWSShapeMember(label: "ParameterApplyStatus", required: false, type: .string)
        ]
        /// The name of the cache parameter group.
        public let cacheParameterGroupName: String?
        /// A list of the cache node IDs which need to be rebooted for parameter changes to be applied. A node ID is a numeric identifier (0001, 0002, etc.).
        public let cacheNodeIdsToReboot: CacheNodeIdsList?
        /// The status of parameter updates.
        public let parameterApplyStatus: String?

        public init(cacheParameterGroupName: String? = nil, cacheNodeIdsToReboot: CacheNodeIdsList? = nil, parameterApplyStatus: String? = nil) {
            self.cacheParameterGroupName = cacheParameterGroupName
            self.cacheNodeIdsToReboot = cacheNodeIdsToReboot
            self.parameterApplyStatus = parameterApplyStatus
        }

        private enum CodingKeys: String, CodingKey {
            case cacheParameterGroupName = "CacheParameterGroupName"
            case cacheNodeIdsToReboot = "CacheNodeIdsToReboot"
            case parameterApplyStatus = "ParameterApplyStatus"
        }
    }

    public struct Event: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "SourceType", required: false, type: .enum), 
            AWSShapeMember(label: "Date", required: false, type: .timestamp)
        ]
        /// The identifier for the source of the event. For example, if the event occurred at the cache cluster level, the identifier would be the name of the cache cluster.
        public let sourceIdentifier: String?
        /// The text of the event.
        public let message: String?
        /// Specifies the origin of this event - a cache cluster, a parameter group, a security group, etc.
        public let sourceType: SourceType?
        /// The date and time when the event occurred.
        public let date: Double?

        public init(sourceIdentifier: String? = nil, message: String? = nil, sourceType: SourceType? = nil, date: Double? = nil) {
            self.sourceIdentifier = sourceIdentifier
            self.message = message
            self.sourceType = sourceType
            self.date = date
        }

        private enum CodingKeys: String, CodingKey {
            case sourceIdentifier = "SourceIdentifier"
            case message = "Message"
            case sourceType = "SourceType"
            case date = "Date"
        }
    }

    public struct SnapshotList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Snapshot", required: false, type: .list)
        ]
        public let snapshot: [Snapshot]?

        public init(snapshot: [Snapshot]? = nil) {
            self.snapshot = snapshot
        }

        private enum CodingKeys: String, CodingKey {
            case snapshot = "Snapshot"
        }
    }

    public struct DeleteCacheClusterResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheCluster", required: false, type: .structure)
        ]
        public let cacheCluster: CacheCluster?

        public init(cacheCluster: CacheCluster? = nil) {
            self.cacheCluster = cacheCluster
        }

        private enum CodingKeys: String, CodingKey {
            case cacheCluster = "CacheCluster"
        }
    }

    public struct CacheNodeTypeSpecificValue: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "CacheNodeType", required: false, type: .string)
        ]
        /// The value for the cache node type.
        public let value: String?
        /// The cache node type for which this value applies.
        public let cacheNodeType: String?

        public init(value: String? = nil, cacheNodeType: String? = nil) {
            self.value = value
            self.cacheNodeType = cacheNodeType
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case cacheNodeType = "CacheNodeType"
        }
    }

    public struct CacheCluster: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PendingModifiedValues", required: false, type: .structure), 
            AWSShapeMember(label: "SnapshotRetentionLimit", required: false, type: .integer), 
            AWSShapeMember(label: "CacheSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "CacheClusterCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "NumCacheNodes", required: false, type: .integer), 
            AWSShapeMember(label: "CacheClusterStatus", required: false, type: .string), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "CacheNodes", required: false, type: .structure), 
            AWSShapeMember(label: "SnapshotWindow", required: false, type: .string), 
            AWSShapeMember(label: "NotificationConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "ConfigurationEndpoint", required: false, type: .structure), 
            AWSShapeMember(label: "PreferredAvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "ReplicationGroupId", required: false, type: .string), 
            AWSShapeMember(label: "CacheParameterGroup", required: false, type: .structure), 
            AWSShapeMember(label: "CacheSecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "ClientDownloadLandingPage", required: false, type: .string), 
            AWSShapeMember(label: "CacheClusterId", required: false, type: .string), 
            AWSShapeMember(label: "CacheNodeType", required: false, type: .string), 
            AWSShapeMember(label: "Engine", required: false, type: .string)
        ]
        public let pendingModifiedValues: PendingModifiedValues?
        /// The number of days for which ElastiCache retains automatic cache cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.   If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off. 
        public let snapshotRetentionLimit: Int32?
        /// The name of the cache subnet group associated with the cache cluster.
        public let cacheSubnetGroupName: String?
        /// The date and time when the cache cluster was created.
        public let cacheClusterCreateTime: Double?
        /// The number of cache nodes in the cache cluster. For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.
        public let numCacheNodes: Int32?
        /// The current state of this cache cluster, one of the following values: available, creating, deleted, deleting, incompatible-network, modifying, rebooting cache cluster nodes, restore-failed, or snapshotting.
        public let cacheClusterStatus: String?
        /// This parameter is currently disabled.
        public let autoMinorVersionUpgrade: Bool?
        /// A list of cache nodes that are members of the cache cluster.
        public let cacheNodes: CacheNodeList?
        /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cache cluster. Example: 05:00-09:00 
        public let snapshotWindow: String?
        public let notificationConfiguration: NotificationConfiguration?
        /// The version of the cache engine that is used in this cache cluster.
        public let engineVersion: String?
        /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:    sun     mon     tue     wed     thu     fri     sat    Example: sun:23:00-mon:01:30 
        public let preferredMaintenanceWindow: String?
        /// Represents a Memcached cluster endpoint which, if Automatic Discovery is enabled on the cluster, can be used by an application to connect to any node in the cluster. The configuration endpoint will always have .cfg in it. Example: mem-3.9dvc4r.cfg.usw2.cache.amazonaws.com:11211 
        public let configurationEndpoint: Endpoint?
        /// The name of the Availability Zone in which the cache cluster is located or "Multiple" if the cache nodes are located in different Availability Zones.
        public let preferredAvailabilityZone: String?
        /// A list of VPC Security Groups associated with the cache cluster.
        public let securityGroups: [SecurityGroupMembership]?
        /// The replication group to which this cache cluster belongs. If this field is empty, the cache cluster is not associated with any replication group.
        public let replicationGroupId: String?
        public let cacheParameterGroup: CacheParameterGroupStatus?
        /// A list of cache security group elements, composed of name and status sub-elements.
        public let cacheSecurityGroups: CacheSecurityGroupMembershipList?
        /// The URL of the web page where you can download the latest ElastiCache client library.
        public let clientDownloadLandingPage: String?
        /// The user-supplied identifier of the cache cluster. This identifier is a unique key that identifies a cache cluster.
        public let cacheClusterId: String?
        /// The name of the compute and memory capacity node type for the cache cluster. Valid node types are as follows:   General purpose:   Current generation: cache.t2.micro, cache.t2.small, cache.t2.medium, cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge, cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge    Previous generation: cache.t1.micro, cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge      Compute optimized: cache.c1.xlarge    Memory optimized:   Current generation: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge, cache.r3.4xlarge, cache.r3.8xlarge    Previous generation: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge       Notes:    All T2 instances are created in an Amazon Virtual Private Cloud (Amazon VPC).   Redis backup/restore is not supported for Redis (cluster mode disabled) T1 and T2 instances. Backup/restore is supported on Redis (cluster mode enabled) T2 instances.   Redis Append-only files (AOF) functionality is not supported for T1 or T2 instances.   For a complete listing of node types and specifications, see Amazon ElastiCache Product Features and Details and either Cache Node Type-Specific Parameters for Memcached or Cache Node Type-Specific Parameters for Redis.
        public let cacheNodeType: String?
        /// The name of the cache engine (memcached or redis) to be used for this cache cluster.
        public let engine: String?

        public init(pendingModifiedValues: PendingModifiedValues? = nil, snapshotRetentionLimit: Int32? = nil, cacheSubnetGroupName: String? = nil, cacheClusterCreateTime: Double? = nil, numCacheNodes: Int32? = nil, cacheClusterStatus: String? = nil, autoMinorVersionUpgrade: Bool? = nil, cacheNodes: CacheNodeList? = nil, snapshotWindow: String? = nil, notificationConfiguration: NotificationConfiguration? = nil, engineVersion: String? = nil, preferredMaintenanceWindow: String? = nil, configurationEndpoint: Endpoint? = nil, preferredAvailabilityZone: String? = nil, securityGroups: [SecurityGroupMembership]? = nil, replicationGroupId: String? = nil, cacheParameterGroup: CacheParameterGroupStatus? = nil, cacheSecurityGroups: CacheSecurityGroupMembershipList? = nil, clientDownloadLandingPage: String? = nil, cacheClusterId: String? = nil, cacheNodeType: String? = nil, engine: String? = nil) {
            self.pendingModifiedValues = pendingModifiedValues
            self.snapshotRetentionLimit = snapshotRetentionLimit
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.cacheClusterCreateTime = cacheClusterCreateTime
            self.numCacheNodes = numCacheNodes
            self.cacheClusterStatus = cacheClusterStatus
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.cacheNodes = cacheNodes
            self.snapshotWindow = snapshotWindow
            self.notificationConfiguration = notificationConfiguration
            self.engineVersion = engineVersion
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.configurationEndpoint = configurationEndpoint
            self.preferredAvailabilityZone = preferredAvailabilityZone
            self.securityGroups = securityGroups
            self.replicationGroupId = replicationGroupId
            self.cacheParameterGroup = cacheParameterGroup
            self.cacheSecurityGroups = cacheSecurityGroups
            self.clientDownloadLandingPage = clientDownloadLandingPage
            self.cacheClusterId = cacheClusterId
            self.cacheNodeType = cacheNodeType
            self.engine = engine
        }

        private enum CodingKeys: String, CodingKey {
            case pendingModifiedValues = "PendingModifiedValues"
            case snapshotRetentionLimit = "SnapshotRetentionLimit"
            case cacheSubnetGroupName = "CacheSubnetGroupName"
            case cacheClusterCreateTime = "CacheClusterCreateTime"
            case numCacheNodes = "NumCacheNodes"
            case cacheClusterStatus = "CacheClusterStatus"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case cacheNodes = "CacheNodes"
            case snapshotWindow = "SnapshotWindow"
            case notificationConfiguration = "NotificationConfiguration"
            case engineVersion = "EngineVersion"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case configurationEndpoint = "ConfigurationEndpoint"
            case preferredAvailabilityZone = "PreferredAvailabilityZone"
            case securityGroups = "SecurityGroups"
            case replicationGroupId = "ReplicationGroupId"
            case cacheParameterGroup = "CacheParameterGroup"
            case cacheSecurityGroups = "CacheSecurityGroups"
            case clientDownloadLandingPage = "ClientDownloadLandingPage"
            case cacheClusterId = "CacheClusterId"
            case cacheNodeType = "CacheNodeType"
            case engine = "Engine"
        }
    }

    public struct CacheSecurityGroupMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "CacheSecurityGroups", required: false, type: .structure)
        ]
        /// Provides an identifier to allow retrieval of paginated results.
        public let marker: String?
        /// A list of cache security groups. Each element in the list contains detailed information about one group.
        public let cacheSecurityGroups: CacheSecurityGroups?

        public init(marker: String? = nil, cacheSecurityGroups: CacheSecurityGroups? = nil) {
            self.marker = marker
            self.cacheSecurityGroups = cacheSecurityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case cacheSecurityGroups = "CacheSecurityGroups"
        }
    }

    public struct NodeGroupMember: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReadEndpoint", required: false, type: .structure), 
            AWSShapeMember(label: "CurrentRole", required: false, type: .string), 
            AWSShapeMember(label: "PreferredAvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "CacheNodeId", required: false, type: .string), 
            AWSShapeMember(label: "CacheClusterId", required: false, type: .string)
        ]
        public let readEndpoint: Endpoint?
        /// The role that is currently assigned to the node - primary or replica.
        public let currentRole: String?
        /// The name of the Availability Zone in which the node is located.
        public let preferredAvailabilityZone: String?
        /// The ID of the node within its cache cluster. A node ID is a numeric identifier (0001, 0002, etc.).
        public let cacheNodeId: String?
        /// The ID of the cache cluster to which the node belongs.
        public let cacheClusterId: String?

        public init(readEndpoint: Endpoint? = nil, currentRole: String? = nil, preferredAvailabilityZone: String? = nil, cacheNodeId: String? = nil, cacheClusterId: String? = nil) {
            self.readEndpoint = readEndpoint
            self.currentRole = currentRole
            self.preferredAvailabilityZone = preferredAvailabilityZone
            self.cacheNodeId = cacheNodeId
            self.cacheClusterId = cacheClusterId
        }

        private enum CodingKeys: String, CodingKey {
            case readEndpoint = "ReadEndpoint"
            case currentRole = "CurrentRole"
            case preferredAvailabilityZone = "PreferredAvailabilityZone"
            case cacheNodeId = "CacheNodeId"
            case cacheClusterId = "CacheClusterId"
        }
    }

    public struct PurchaseReservedCacheNodesOfferingMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedCacheNodeId", required: false, type: .string), 
            AWSShapeMember(label: "CacheNodeCount", required: false, type: .integer), 
            AWSShapeMember(label: "ReservedCacheNodesOfferingId", required: true, type: .string)
        ]
        /// A customer-specified identifier to track this reservation.  The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.  Example: myreservationID
        public let reservedCacheNodeId: String?
        /// The number of cache node instances to reserve. Default: 1 
        public let cacheNodeCount: Int32?
        /// The ID of the reserved cache node offering to purchase. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706 
        public let reservedCacheNodesOfferingId: String

        public init(reservedCacheNodeId: String? = nil, cacheNodeCount: Int32? = nil, reservedCacheNodesOfferingId: String) {
            self.reservedCacheNodeId = reservedCacheNodeId
            self.cacheNodeCount = cacheNodeCount
            self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
        }

        private enum CodingKeys: String, CodingKey {
            case reservedCacheNodeId = "ReservedCacheNodeId"
            case cacheNodeCount = "CacheNodeCount"
            case reservedCacheNodesOfferingId = "ReservedCacheNodesOfferingId"
        }
    }

    public struct DescribeSnapshotsListMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Snapshots", required: false, type: .structure)
        ]
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// A list of snapshots. Each item in the list contains detailed information about one snapshot.
        public let snapshots: SnapshotList?

        public init(marker: String? = nil, snapshots: SnapshotList? = nil) {
            self.marker = marker
            self.snapshots = snapshots
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case snapshots = "Snapshots"
        }
    }

    public struct CacheSecurityGroupMembership: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "CacheSecurityGroupName", required: false, type: .string)
        ]
        /// The membership status in the cache security group. The status changes when a cache security group is modified, or when the cache security groups assigned to a cache cluster are modified.
        public let status: String?
        /// The name of the cache security group.
        public let cacheSecurityGroupName: String?

        public init(status: String? = nil, cacheSecurityGroupName: String? = nil) {
            self.status = status
            self.cacheSecurityGroupName = cacheSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case cacheSecurityGroupName = "CacheSecurityGroupName"
        }
    }

    public struct ModifyCacheParameterGroupMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheParameterGroupName", required: true, type: .string), 
            AWSShapeMember(label: "ParameterNameValues", required: true, type: .structure)
        ]
        /// The name of the cache parameter group to modify.
        public let cacheParameterGroupName: String
        /// An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
        public let parameterNameValues: ParameterNameValueList

        public init(cacheParameterGroupName: String, parameterNameValues: ParameterNameValueList) {
            self.cacheParameterGroupName = cacheParameterGroupName
            self.parameterNameValues = parameterNameValues
        }

        private enum CodingKeys: String, CodingKey {
            case cacheParameterGroupName = "CacheParameterGroupName"
            case parameterNameValues = "ParameterNameValues"
        }
    }

    public struct AddTagsToResourceMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .structure), 
            AWSShapeMember(label: "ResourceName", required: true, type: .string)
        ]
        /// A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
        public let tags: TagList
        /// The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster or arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let resourceName: String

        public init(tags: TagList, resourceName: String) {
            self.tags = tags
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case resourceName = "ResourceName"
        }
    }

    public struct CacheSubnetGroups: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheSubnetGroup", required: false, type: .list)
        ]
        public let cacheSubnetGroup: [CacheSubnetGroup]?

        public init(cacheSubnetGroup: [CacheSubnetGroup]? = nil) {
            self.cacheSubnetGroup = cacheSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case cacheSubnetGroup = "CacheSubnetGroup"
        }
    }

    public enum AutomaticFailoverStatus: String, CustomStringConvertible, Codable {
        case enabled = "enabled"
        case disabled = "disabled"
        case enabling = "enabling"
        case disabling = "disabling"
        public var description: String { return self.rawValue }
    }

    public struct CacheNodeList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheNode", required: false, type: .list)
        ]
        public let cacheNode: [CacheNode]?

        public init(cacheNode: [CacheNode]? = nil) {
            self.cacheNode = cacheNode
        }

        private enum CodingKeys: String, CodingKey {
            case cacheNode = "CacheNode"
        }
    }

    public struct RebootCacheClusterResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheCluster", required: false, type: .structure)
        ]
        public let cacheCluster: CacheCluster?

        public init(cacheCluster: CacheCluster? = nil) {
            self.cacheCluster = cacheCluster
        }

        private enum CodingKeys: String, CodingKey {
            case cacheCluster = "CacheCluster"
        }
    }

    public struct ModifyCacheSubnetGroupMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheSubnetGroupName", required: true, type: .string), 
            AWSShapeMember(label: "SubnetIds", required: false, type: .structure), 
            AWSShapeMember(label: "CacheSubnetGroupDescription", required: false, type: .string)
        ]
        /// The name for the cache subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters or hyphens. Example: mysubnetgroup 
        public let cacheSubnetGroupName: String
        /// The EC2 subnet IDs for the cache subnet group.
        public let subnetIds: SubnetIdentifierList?
        /// A description of the cache subnet group.
        public let cacheSubnetGroupDescription: String?

        public init(cacheSubnetGroupName: String, subnetIds: SubnetIdentifierList? = nil, cacheSubnetGroupDescription: String? = nil) {
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.subnetIds = subnetIds
            self.cacheSubnetGroupDescription = cacheSubnetGroupDescription
        }

        private enum CodingKeys: String, CodingKey {
            case cacheSubnetGroupName = "CacheSubnetGroupName"
            case subnetIds = "SubnetIds"
            case cacheSubnetGroupDescription = "CacheSubnetGroupDescription"
        }
    }

    public struct ModifyCacheClusterResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheCluster", required: false, type: .structure)
        ]
        public let cacheCluster: CacheCluster?

        public init(cacheCluster: CacheCluster? = nil) {
            self.cacheCluster = cacheCluster
        }

        private enum CodingKeys: String, CodingKey {
            case cacheCluster = "CacheCluster"
        }
    }

    public struct ModifyCacheClusterMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheNodeIdsToRemove", required: false, type: .structure), 
            AWSShapeMember(label: "CacheSecurityGroupNames", required: false, type: .structure), 
            AWSShapeMember(label: "NumCacheNodes", required: false, type: .integer), 
            AWSShapeMember(label: "NotificationTopicStatus", required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "ApplyImmediately", required: false, type: .boolean), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "NotificationTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotWindow", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "CacheParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "NewAvailabilityZones", required: false, type: .structure), 
            AWSShapeMember(label: "CacheNodeType", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotRetentionLimit", required: false, type: .integer), 
            AWSShapeMember(label: "CacheClusterId", required: true, type: .string), 
            AWSShapeMember(label: "AZMode", required: false, type: .enum)
        ]
        /// A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when NumCacheNodes is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of NumCacheNodes in the request. For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this ModifyCacheCluser call is 5, you must list 2 (7 - 5) cache node IDs to remove.
        public let cacheNodeIdsToRemove: CacheNodeIdsList?
        /// A list of cache security group names to authorize on this cache cluster. This change is asynchronously applied as soon as possible. You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC). Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".
        public let cacheSecurityGroupNames: CacheSecurityGroupNameList?
        /// The number of cache nodes that the cache cluster should have. If the value for NumCacheNodes is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled. If you are removing cache nodes, you must use the CacheNodeIdsToRemove parameter to provide the IDs of the specific cache nodes to remove. For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.  Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see ApplyImmediately). A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the ModifyCacheCluster request and set NumCacheNodes equal to the number of cache nodes currently in the cache cluster. 
        public let numCacheNodes: Int32?
        /// The status of the Amazon SNS notification topic. Notifications are sent only if the status is active. Valid values: active | inactive 
        public let notificationTopicStatus: String?
        /// Specifies the VPC Security Groups associated with the cache cluster. This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).
        public let securityGroupIds: SecurityGroupIdsList?
        /// If true, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the PreferredMaintenanceWindow setting for the cache cluster. If false, changes to the cache cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.  If you perform a ModifyCacheCluster before a pending modification is applied, the pending modification is replaced by the newer modification.  Valid values: true | false  Default: false 
        public let applyImmediately: Bool?
        /// This parameter is currently disabled.
        public let autoMinorVersionUpgrade: Bool?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.  The Amazon SNS topic owner must be same as the cache cluster owner. 
        public let notificationTopicArn: String?
        /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cache cluster. 
        public let snapshotWindow: String?
        /// The upgraded version of the cache engine to be run on the cache nodes.  Important: You can upgrade to a newer engine version (see Selecting a Cache Engine and Version), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cache cluster and create it anew with the earlier engine version. 
        public let engineVersion: String?
        /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:    sun     mon     tue     wed     thu     fri     sat    Example: sun:23:00-mon:01:30 
        public let preferredMaintenanceWindow: String?
        /// The name of the cache parameter group to apply to this cache cluster. This change is asynchronously applied as soon as possible for parameters when the ApplyImmediately parameter is specified as true for this request.
        public let cacheParameterGroupName: String?
        /// The list of Availability Zones where the new Memcached cache nodes are created. This parameter is only valid when NumCacheNodes in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request. This option is only supported on Memcached clusters. Scenarios:    Scenario 1: You have 3 active nodes and wish to add 2 nodes. Specify NumCacheNodes=5 (3 + 2) and optionally specify two Availability Zones for the two new nodes.    Scenario 2: You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify NumCacheNodes=6 ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.    Scenario 3: You want to cancel all pending operations. Specify NumCacheNodes=3 to cancel all pending operations.   The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting NumCacheNodes to the number of current nodes. If cross-az is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the Availability Zone Considerations section of Cache Node Considerations for Memcached.  Impact of new add/remove requests upon pending requests    Scenario-1   Pending Action: Delete   New Request: Delete   Result: The new delete, pending or immediate, replaces the pending delete.     Scenario-2   Pending Action: Delete   New Request: Create   Result: The new create, pending or immediate, replaces the pending delete.     Scenario-3   Pending Action: Create   New Request: Delete   Result: The new delete, pending or immediate, replaces the pending create.     Scenario-4   Pending Action: Create   New Request: Create   Result: The new create is added to the pending create.   Important: If the new create request is Apply Immediately - Yes, all creates are performed immediately. If the new create request is Apply Immediately - No, all creates are pending.     
        public let newAvailabilityZones: PreferredAvailabilityZoneList?
        /// A valid cache node type that you want to scale this cache cluster up to.
        public let cacheNodeType: String?
        /// The number of days for which ElastiCache retains automatic cache cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.  If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off. 
        public let snapshotRetentionLimit: Int32?
        /// The cache cluster identifier. This value is stored as a lowercase string.
        public let cacheClusterId: String
        /// Specifies whether the new nodes in this Memcached cache cluster are all created in a single Availability Zone or created across multiple Availability Zones. Valid values: single-az | cross-az. This option is only supported for Memcached cache clusters.  You cannot specify single-az if the Memcached cache cluster already has cache nodes in different Availability Zones. If cross-az is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes are located in different Availability Zones. For instructions on how to move existing Memcached nodes to different Availability Zones, see the Availability Zone Considerations section of Cache Node Considerations for Memcached. 
        public let aZMode: AZMode?

        public init(cacheNodeIdsToRemove: CacheNodeIdsList? = nil, cacheSecurityGroupNames: CacheSecurityGroupNameList? = nil, numCacheNodes: Int32? = nil, notificationTopicStatus: String? = nil, securityGroupIds: SecurityGroupIdsList? = nil, applyImmediately: Bool? = nil, autoMinorVersionUpgrade: Bool? = nil, notificationTopicArn: String? = nil, snapshotWindow: String? = nil, engineVersion: String? = nil, preferredMaintenanceWindow: String? = nil, cacheParameterGroupName: String? = nil, newAvailabilityZones: PreferredAvailabilityZoneList? = nil, cacheNodeType: String? = nil, snapshotRetentionLimit: Int32? = nil, cacheClusterId: String, aZMode: AZMode? = nil) {
            self.cacheNodeIdsToRemove = cacheNodeIdsToRemove
            self.cacheSecurityGroupNames = cacheSecurityGroupNames
            self.numCacheNodes = numCacheNodes
            self.notificationTopicStatus = notificationTopicStatus
            self.securityGroupIds = securityGroupIds
            self.applyImmediately = applyImmediately
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.notificationTopicArn = notificationTopicArn
            self.snapshotWindow = snapshotWindow
            self.engineVersion = engineVersion
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.cacheParameterGroupName = cacheParameterGroupName
            self.newAvailabilityZones = newAvailabilityZones
            self.cacheNodeType = cacheNodeType
            self.snapshotRetentionLimit = snapshotRetentionLimit
            self.cacheClusterId = cacheClusterId
            self.aZMode = aZMode
        }

        private enum CodingKeys: String, CodingKey {
            case cacheNodeIdsToRemove = "CacheNodeIdsToRemove"
            case cacheSecurityGroupNames = "CacheSecurityGroupNames"
            case numCacheNodes = "NumCacheNodes"
            case notificationTopicStatus = "NotificationTopicStatus"
            case securityGroupIds = "SecurityGroupIds"
            case applyImmediately = "ApplyImmediately"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case notificationTopicArn = "NotificationTopicArn"
            case snapshotWindow = "SnapshotWindow"
            case engineVersion = "EngineVersion"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case cacheParameterGroupName = "CacheParameterGroupName"
            case newAvailabilityZones = "NewAvailabilityZones"
            case cacheNodeType = "CacheNodeType"
            case snapshotRetentionLimit = "SnapshotRetentionLimit"
            case cacheClusterId = "CacheClusterId"
            case aZMode = "AZMode"
        }
    }

    public struct DescribeEngineDefaultParametersMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "CacheParameterGroupFamily", required: true, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The name of the cache parameter group family. Valid values are: memcached1.4 | redis2.6 | redis2.8 | redis3.2 
        public let cacheParameterGroupFamily: String
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        public let maxRecords: Int32?

        public init(marker: String? = nil, cacheParameterGroupFamily: String, maxRecords: Int32? = nil) {
            self.marker = marker
            self.cacheParameterGroupFamily = cacheParameterGroupFamily
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case cacheParameterGroupFamily = "CacheParameterGroupFamily"
            case maxRecords = "MaxRecords"
        }
    }

    public struct CopySnapshotMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetSnapshotName", required: true, type: .string), 
            AWSShapeMember(label: "TargetBucket", required: false, type: .string), 
            AWSShapeMember(label: "SourceSnapshotName", required: true, type: .string)
        ]
        /// A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
        public let targetSnapshotName: String
        /// The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access. When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket in the Amazon ElastiCache User Guide. For more information, see Exporting a Snapshot in the Amazon ElastiCache User Guide.
        public let targetBucket: String?
        /// The name of an existing snapshot from which to make a copy.
        public let sourceSnapshotName: String

        public init(targetSnapshotName: String, targetBucket: String? = nil, sourceSnapshotName: String) {
            self.targetSnapshotName = targetSnapshotName
            self.targetBucket = targetBucket
            self.sourceSnapshotName = sourceSnapshotName
        }

        private enum CodingKeys: String, CodingKey {
            case targetSnapshotName = "TargetSnapshotName"
            case targetBucket = "TargetBucket"
            case sourceSnapshotName = "SourceSnapshotName"
        }
    }

    public struct ListAllowedNodeTypeModificationsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheClusterId", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationGroupId", required: false, type: .string)
        ]
        /// The name of the cache cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.  You must provide a value for either the CacheClusterId or the ReplicationGroupId. 
        public let cacheClusterId: String?
        /// The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.  You must provide a value for either the CacheClusterId or the ReplicationGroupId. 
        public let replicationGroupId: String?

        public init(cacheClusterId: String? = nil, replicationGroupId: String? = nil) {
            self.cacheClusterId = cacheClusterId
            self.replicationGroupId = replicationGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case cacheClusterId = "CacheClusterId"
            case replicationGroupId = "ReplicationGroupId"
        }
    }

    public struct RecurringChargeList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecurringCharge", required: false, type: .list)
        ]
        public let recurringCharge: [RecurringCharge]?

        public init(recurringCharge: [RecurringCharge]? = nil) {
            self.recurringCharge = recurringCharge
        }

        private enum CodingKeys: String, CodingKey {
            case recurringCharge = "RecurringCharge"
        }
    }

    public struct EngineDefaults: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheParameterGroupFamily", required: false, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "CacheNodeTypeSpecificParameters", required: false, type: .structure)
        ]
        /// Specifies the name of the cache parameter group family to which the engine default parameters apply. Valid values are: memcached1.4 | redis2.6 | redis2.8 | redis3.2 
        public let cacheParameterGroupFamily: String?
        /// Contains a list of engine default parameters.
        public let parameters: ParametersList?
        /// Provides an identifier to allow retrieval of paginated results.
        public let marker: String?
        /// A list of parameters specific to a particular cache node type. Each element in the list contains detailed information about one parameter.
        public let cacheNodeTypeSpecificParameters: CacheNodeTypeSpecificParametersList?

        public init(cacheParameterGroupFamily: String? = nil, parameters: ParametersList? = nil, marker: String? = nil, cacheNodeTypeSpecificParameters: CacheNodeTypeSpecificParametersList? = nil) {
            self.cacheParameterGroupFamily = cacheParameterGroupFamily
            self.parameters = parameters
            self.marker = marker
            self.cacheNodeTypeSpecificParameters = cacheNodeTypeSpecificParameters
        }

        private enum CodingKeys: String, CodingKey {
            case cacheParameterGroupFamily = "CacheParameterGroupFamily"
            case parameters = "Parameters"
            case marker = "Marker"
            case cacheNodeTypeSpecificParameters = "CacheNodeTypeSpecificParameters"
        }
    }

    public struct NotificationConfiguration: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicStatus", required: false, type: .string), 
            AWSShapeMember(label: "TopicArn", required: false, type: .string)
        ]
        /// The current state of the topic.
        public let topicStatus: String?
        /// The Amazon Resource Name (ARN) that identifies the topic.
        public let topicArn: String?

        public init(topicStatus: String? = nil, topicArn: String? = nil) {
            self.topicStatus = topicStatus
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case topicStatus = "TopicStatus"
            case topicArn = "TopicArn"
        }
    }

    public struct DescribeReservedCacheNodesOfferingsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "CacheNodeType", required: false, type: .string), 
            AWSShapeMember(label: "Duration", required: false, type: .string), 
            AWSShapeMember(label: "OfferingType", required: false, type: .string), 
            AWSShapeMember(label: "ReservedCacheNodesOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "ProductDescription", required: false, type: .string)
        ]
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        public let maxRecords: Int32?
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type. Valid node types are as follows:   General purpose:   Current generation: cache.t2.micro, cache.t2.small, cache.t2.medium, cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge, cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge    Previous generation: cache.t1.micro, cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge      Compute optimized: cache.c1.xlarge    Memory optimized:   Current generation: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge, cache.r3.4xlarge, cache.r3.8xlarge    Previous generation: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge       Notes:    All T2 instances are created in an Amazon Virtual Private Cloud (Amazon VPC).   Redis backup/restore is not supported for Redis (cluster mode disabled) T1 and T2 instances. Backup/restore is supported on Redis (cluster mode enabled) T2 instances.   Redis Append-only files (AOF) functionality is not supported for T1 or T2 instances.   For a complete listing of node types and specifications, see Amazon ElastiCache Product Features and Details and either Cache Node Type-Specific Parameters for Memcached or Cache Node Type-Specific Parameters for Redis.
        public let cacheNodeType: String?
        /// Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration. Valid Values: 1 | 3 | 31536000 | 94608000 
        public let duration: String?
        /// The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type. Valid Values: "Light Utilization"|"Medium Utilization"|"Heavy Utilization" 
        public let offeringType: String?
        /// The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706 
        public let reservedCacheNodesOfferingId: String?
        /// The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
        public let productDescription: String?

        public init(maxRecords: Int32? = nil, marker: String? = nil, cacheNodeType: String? = nil, duration: String? = nil, offeringType: String? = nil, reservedCacheNodesOfferingId: String? = nil, productDescription: String? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.cacheNodeType = cacheNodeType
            self.duration = duration
            self.offeringType = offeringType
            self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
            self.productDescription = productDescription
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case cacheNodeType = "CacheNodeType"
            case duration = "Duration"
            case offeringType = "OfferingType"
            case reservedCacheNodesOfferingId = "ReservedCacheNodesOfferingId"
            case productDescription = "ProductDescription"
        }
    }

    public struct CreateCacheParameterGroupResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheParameterGroup", required: false, type: .structure)
        ]
        public let cacheParameterGroup: CacheParameterGroup?

        public init(cacheParameterGroup: CacheParameterGroup? = nil) {
            self.cacheParameterGroup = cacheParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case cacheParameterGroup = "CacheParameterGroup"
        }
    }

    public struct Snapshot: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "CacheClusterId", required: false, type: .string), 
            AWSShapeMember(label: "CacheClusterCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "NumCacheNodes", required: false, type: .integer), 
            AWSShapeMember(label: "AutomaticFailover", required: false, type: .enum), 
            AWSShapeMember(label: "TopicArn", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotStatus", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotSource", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotName", required: false, type: .string), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "SnapshotWindow", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "CacheParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationGroupId", required: false, type: .string), 
            AWSShapeMember(label: "NumNodeGroups", required: false, type: .integer), 
            AWSShapeMember(label: "ReplicationGroupDescription", required: false, type: .string), 
            AWSShapeMember(label: "PreferredAvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "CacheNodeType", required: false, type: .string), 
            AWSShapeMember(label: "NodeSnapshots", required: false, type: .structure), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "CacheSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotRetentionLimit", required: false, type: .integer)
        ]
        /// The port number used by each cache nodes in the source cache cluster.
        public let port: Int32?
        /// The user-supplied identifier of the source cache cluster.
        public let cacheClusterId: String?
        /// The date and time when the source cache cluster was created.
        public let cacheClusterCreateTime: Double?
        /// The number of cache nodes in the source cache cluster. For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.
        public let numCacheNodes: Int32?
        /// Indicates the status of Multi-AZ for the source replication group.  ElastiCache Multi-AZ replication groups are not supported on:   Redis versions earlier than 2.8.6.   Redis (cluster mode disabled):T1 and T2 cache node types. Redis (cluster mode enabled): T1 node types.   
        public let automaticFailover: AutomaticFailoverStatus?
        /// The Amazon Resource Name (ARN) for the topic used by the source cache cluster for publishing notifications.
        public let topicArn: String?
        /// The status of the snapshot. Valid values: creating | available | restoring | copying | deleting.
        public let snapshotStatus: String?
        /// Indicates whether the snapshot is from an automatic backup (automated) or was created manually (manual).
        public let snapshotSource: String?
        /// The name of a snapshot. For an automatic snapshot, the name is system-generated. For a manual snapshot, this is the user-provided name.
        public let snapshotName: String?
        /// This parameter is currently disabled.
        public let autoMinorVersionUpgrade: Bool?
        /// The daily time range during which ElastiCache takes daily snapshots of the source cache cluster.
        public let snapshotWindow: String?
        /// The version of the cache engine version that is used by the source cache cluster.
        public let engineVersion: String?
        /// The Amazon Virtual Private Cloud identifier (VPC ID) of the cache subnet group for the source cache cluster.
        public let vpcId: String?
        /// The cache parameter group that is associated with the source cache cluster.
        public let cacheParameterGroupName: String?
        /// The unique identifier of the source replication group.
        public let replicationGroupId: String?
        /// The number of node groups (shards) in this snapshot. When restoring from a snapshot, the number of node groups (shards) in the snapshot and in the restored replication group must be the same.
        public let numNodeGroups: Int32?
        /// A description of the source replication group.
        public let replicationGroupDescription: String?
        /// The name of the Availability Zone in which the source cache cluster is located.
        public let preferredAvailabilityZone: String?
        /// The name of the compute and memory capacity node type for the source cache cluster. Valid node types are as follows:   General purpose:   Current generation: cache.t2.micro, cache.t2.small, cache.t2.medium, cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge, cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge    Previous generation: cache.t1.micro, cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge      Compute optimized: cache.c1.xlarge    Memory optimized:   Current generation: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge, cache.r3.4xlarge, cache.r3.8xlarge    Previous generation: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge       Notes:    All T2 instances are created in an Amazon Virtual Private Cloud (Amazon VPC).   Redis backup/restore is not supported for Redis (cluster mode disabled) T1 and T2 instances. Backup/restore is supported on Redis (cluster mode enabled) T2 instances.   Redis Append-only files (AOF) functionality is not supported for T1 or T2 instances.   For a complete listing of node types and specifications, see Amazon ElastiCache Product Features and Details and either Cache Node Type-Specific Parameters for Memcached or Cache Node Type-Specific Parameters for Redis.
        public let cacheNodeType: String?
        /// A list of the cache nodes in the source cache cluster.
        public let nodeSnapshots: NodeSnapshotList?
        /// The name of the cache engine (memcached or redis) used by the source cache cluster.
        public let engine: String?
        /// The name of the cache subnet group associated with the source cache cluster.
        public let cacheSubnetGroupName: String?
        /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:    sun     mon     tue     wed     thu     fri     sat    Example: sun:23:00-mon:01:30 
        public let preferredMaintenanceWindow: String?
        /// For an automatic snapshot, the number of days for which ElastiCache retains the snapshot before deleting it. For manual snapshots, this field reflects the SnapshotRetentionLimit for the source cache cluster when the snapshot was created. This field is otherwise ignored: Manual snapshots do not expire, and can only be deleted using the DeleteSnapshot operation.   Important If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
        public let snapshotRetentionLimit: Int32?

        public init(port: Int32? = nil, cacheClusterId: String? = nil, cacheClusterCreateTime: Double? = nil, numCacheNodes: Int32? = nil, automaticFailover: AutomaticFailoverStatus? = nil, topicArn: String? = nil, snapshotStatus: String? = nil, snapshotSource: String? = nil, snapshotName: String? = nil, autoMinorVersionUpgrade: Bool? = nil, snapshotWindow: String? = nil, engineVersion: String? = nil, vpcId: String? = nil, cacheParameterGroupName: String? = nil, replicationGroupId: String? = nil, numNodeGroups: Int32? = nil, replicationGroupDescription: String? = nil, preferredAvailabilityZone: String? = nil, cacheNodeType: String? = nil, nodeSnapshots: NodeSnapshotList? = nil, engine: String? = nil, cacheSubnetGroupName: String? = nil, preferredMaintenanceWindow: String? = nil, snapshotRetentionLimit: Int32? = nil) {
            self.port = port
            self.cacheClusterId = cacheClusterId
            self.cacheClusterCreateTime = cacheClusterCreateTime
            self.numCacheNodes = numCacheNodes
            self.automaticFailover = automaticFailover
            self.topicArn = topicArn
            self.snapshotStatus = snapshotStatus
            self.snapshotSource = snapshotSource
            self.snapshotName = snapshotName
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.snapshotWindow = snapshotWindow
            self.engineVersion = engineVersion
            self.vpcId = vpcId
            self.cacheParameterGroupName = cacheParameterGroupName
            self.replicationGroupId = replicationGroupId
            self.numNodeGroups = numNodeGroups
            self.replicationGroupDescription = replicationGroupDescription
            self.preferredAvailabilityZone = preferredAvailabilityZone
            self.cacheNodeType = cacheNodeType
            self.nodeSnapshots = nodeSnapshots
            self.engine = engine
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.snapshotRetentionLimit = snapshotRetentionLimit
        }

        private enum CodingKeys: String, CodingKey {
            case port = "Port"
            case cacheClusterId = "CacheClusterId"
            case cacheClusterCreateTime = "CacheClusterCreateTime"
            case numCacheNodes = "NumCacheNodes"
            case automaticFailover = "AutomaticFailover"
            case topicArn = "TopicArn"
            case snapshotStatus = "SnapshotStatus"
            case snapshotSource = "SnapshotSource"
            case snapshotName = "SnapshotName"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case snapshotWindow = "SnapshotWindow"
            case engineVersion = "EngineVersion"
            case vpcId = "VpcId"
            case cacheParameterGroupName = "CacheParameterGroupName"
            case replicationGroupId = "ReplicationGroupId"
            case numNodeGroups = "NumNodeGroups"
            case replicationGroupDescription = "ReplicationGroupDescription"
            case preferredAvailabilityZone = "PreferredAvailabilityZone"
            case cacheNodeType = "CacheNodeType"
            case nodeSnapshots = "NodeSnapshots"
            case engine = "Engine"
            case cacheSubnetGroupName = "CacheSubnetGroupName"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case snapshotRetentionLimit = "SnapshotRetentionLimit"
        }
    }

    public struct DeleteCacheClusterMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheClusterId", required: true, type: .string), 
            AWSShapeMember(label: "FinalSnapshotIdentifier", required: false, type: .string)
        ]
        /// The cache cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
        public let cacheClusterId: String
        /// The user-supplied name of a final cache cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cache cluster immediately afterward.
        public let finalSnapshotIdentifier: String?

        public init(cacheClusterId: String, finalSnapshotIdentifier: String? = nil) {
            self.cacheClusterId = cacheClusterId
            self.finalSnapshotIdentifier = finalSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case cacheClusterId = "CacheClusterId"
            case finalSnapshotIdentifier = "FinalSnapshotIdentifier"
        }
    }

    public struct AllowedNodeTypeModificationsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScaleUpModifications", required: false, type: .list)
        ]
        /// A string list, each element of which specifies a cache node type which you can use to scale your cache cluster or replication group. When scaling up a Redis cluster or replication group using ModifyCacheCluster or ModifyReplicationGroup, use a value from this list for the CacheNodeType parameter.
        public let scaleUpModifications: [String]?

        public init(scaleUpModifications: [String]? = nil) {
            self.scaleUpModifications = scaleUpModifications
        }

        private enum CodingKeys: String, CodingKey {
            case scaleUpModifications = "ScaleUpModifications"
        }
    }

    public struct DeleteSnapshotResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Snapshot", required: false, type: .structure)
        ]
        public let snapshot: Snapshot?

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

        private enum CodingKeys: String, CodingKey {
            case snapshot = "Snapshot"
        }
    }

    public struct TagList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .list)
        ]
        public let tag: [Tag]?

        public init(tag: [Tag]? = nil) {
            self.tag = tag
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
        }
    }

    public struct ReplicationGroupPendingModifiedValues: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrimaryClusterId", required: false, type: .string), 
            AWSShapeMember(label: "AutomaticFailoverStatus", required: false, type: .enum)
        ]
        /// The primary cluster ID that is applied immediately (if --apply-immediately was specified), or during the next maintenance window.
        public let primaryClusterId: String?
        /// Indicates the status of Multi-AZ for this Redis replication group.  ElastiCache Multi-AZ replication groups are not supported on:   Redis versions earlier than 2.8.6.   Redis (cluster mode disabled):T1 and T2 cache node types. Redis (cluster mode enabled): T1 node types.   
        public let automaticFailoverStatus: PendingAutomaticFailoverStatus?

        public init(primaryClusterId: String? = nil, automaticFailoverStatus: PendingAutomaticFailoverStatus? = nil) {
            self.primaryClusterId = primaryClusterId
            self.automaticFailoverStatus = automaticFailoverStatus
        }

        private enum CodingKeys: String, CodingKey {
            case primaryClusterId = "PrimaryClusterId"
            case automaticFailoverStatus = "AutomaticFailoverStatus"
        }
    }

    public struct ClusterIdList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterId", required: false, type: .list)
        ]
        public let clusterId: [String]?

        public init(clusterId: [String]? = nil) {
            self.clusterId = clusterId
        }

        private enum CodingKeys: String, CodingKey {
            case clusterId = "ClusterId"
        }
    }

    public struct ReplicationGroupMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationGroups", required: false, type: .structure)
        ]
        /// Provides an identifier to allow retrieval of paginated results.
        public let marker: String?
        /// A list of replication groups. Each item in the list contains detailed information about one replication group.
        public let replicationGroups: ReplicationGroupList?

        public init(marker: String? = nil, replicationGroups: ReplicationGroupList? = nil) {
            self.marker = marker
            self.replicationGroups = replicationGroups
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case replicationGroups = "ReplicationGroups"
        }
    }

    public struct DescribeCacheSubnetGroupsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The name of the cache subnet group to return details for.
        public let cacheSubnetGroupName: String?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        public let maxRecords: Int32?
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(cacheSubnetGroupName: String? = nil, maxRecords: Int32? = nil, marker: String? = nil) {
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.maxRecords = maxRecords
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case cacheSubnetGroupName = "CacheSubnetGroupName"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
        }
    }

    public struct ReservedCacheNodesOfferingMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ReservedCacheNodesOfferings", required: false, type: .structure)
        ]
        /// Provides an identifier to allow retrieval of paginated results.
        public let marker: String?
        /// A list of reserved cache node offerings. Each element in the list contains detailed information about one offering.
        public let reservedCacheNodesOfferings: ReservedCacheNodesOfferingList?

        public init(marker: String? = nil, reservedCacheNodesOfferings: ReservedCacheNodesOfferingList? = nil) {
            self.marker = marker
            self.reservedCacheNodesOfferings = reservedCacheNodesOfferings
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case reservedCacheNodesOfferings = "ReservedCacheNodesOfferings"
        }
    }

    public struct CacheNodeTypeSpecificParametersList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheNodeTypeSpecificParameter", required: false, type: .list)
        ]
        public let cacheNodeTypeSpecificParameter: [CacheNodeTypeSpecificParameter]?

        public init(cacheNodeTypeSpecificParameter: [CacheNodeTypeSpecificParameter]? = nil) {
            self.cacheNodeTypeSpecificParameter = cacheNodeTypeSpecificParameter
        }

        private enum CodingKeys: String, CodingKey {
            case cacheNodeTypeSpecificParameter = "CacheNodeTypeSpecificParameter"
        }
    }

    public struct NodeGroupConfiguration: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Slots", required: false, type: .string), 
            AWSShapeMember(label: "ReplicaAvailabilityZones", required: false, type: .structure), 
            AWSShapeMember(label: "PrimaryAvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "ReplicaCount", required: false, type: .integer)
        ]
        /// A string that specifies the keyspace for a particular node group. Keyspaces range from 0 to 16,383. The string is in the format startkey-endkey. Example: "0-3999" 
        public let slots: String?
        /// A list of Availability Zones to be used for the read replicas. The number of Availability Zones in this list must match the value of ReplicaCount or ReplicasPerNodeGroup if not specified.
        public let replicaAvailabilityZones: AvailabilityZonesList?
        /// The Availability Zone where the primary node of this node group (shard) is launched.
        public let primaryAvailabilityZone: String?
        /// The number of read replica nodes in this node group (shard).
        public let replicaCount: Int32?

        public init(slots: String? = nil, replicaAvailabilityZones: AvailabilityZonesList? = nil, primaryAvailabilityZone: String? = nil, replicaCount: Int32? = nil) {
            self.slots = slots
            self.replicaAvailabilityZones = replicaAvailabilityZones
            self.primaryAvailabilityZone = primaryAvailabilityZone
            self.replicaCount = replicaCount
        }

        private enum CodingKeys: String, CodingKey {
            case slots = "Slots"
            case replicaAvailabilityZones = "ReplicaAvailabilityZones"
            case primaryAvailabilityZone = "PrimaryAvailabilityZone"
            case replicaCount = "ReplicaCount"
        }
    }

    public struct CacheParameterGroupNameMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheParameterGroupName", required: false, type: .string)
        ]
        /// The name of the cache parameter group.
        public let cacheParameterGroupName: String?

        public init(cacheParameterGroupName: String? = nil) {
            self.cacheParameterGroupName = cacheParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case cacheParameterGroupName = "CacheParameterGroupName"
        }
    }

    public struct CreateSnapshotResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Snapshot", required: false, type: .structure)
        ]
        public let snapshot: Snapshot?

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

        private enum CodingKeys: String, CodingKey {
            case snapshot = "Snapshot"
        }
    }

    public struct CreateCacheSecurityGroupMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheSecurityGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: true, type: .string)
        ]
        /// A name for the cache security group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default". Example: mysecuritygroup 
        public let cacheSecurityGroupName: String
        /// A description for the cache security group.
        public let description: String

        public init(cacheSecurityGroupName: String, description: String) {
            self.cacheSecurityGroupName = cacheSecurityGroupName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case cacheSecurityGroupName = "CacheSecurityGroupName"
            case description = "Description"
        }
    }

    public enum SourceType: String, CustomStringConvertible, Codable {
        case cache_cluster = "cache-cluster"
        case cache_parameter_group = "cache-parameter-group"
        case cache_security_group = "cache-security-group"
        case cache_subnet_group = "cache-subnet-group"
        case replication_group = "replication-group"
        public var description: String { return self.rawValue }
    }

    public struct DescribeReservedCacheNodesMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "CacheNodeType", required: false, type: .string), 
            AWSShapeMember(label: "ReservedCacheNodeId", required: false, type: .string), 
            AWSShapeMember(label: "Duration", required: false, type: .string), 
            AWSShapeMember(label: "OfferingType", required: false, type: .string), 
            AWSShapeMember(label: "ReservedCacheNodesOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "ProductDescription", required: false, type: .string)
        ]
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        public let maxRecords: Int32?
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type. Valid node types are as follows:   General purpose:   Current generation: cache.t2.micro, cache.t2.small, cache.t2.medium, cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge, cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge    Previous generation: cache.t1.micro, cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge      Compute optimized: cache.c1.xlarge    Memory optimized:   Current generation: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge, cache.r3.4xlarge, cache.r3.8xlarge    Previous generation: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge       Notes:    All T2 instances are created in an Amazon Virtual Private Cloud (Amazon VPC).   Redis backup/restore is not supported for Redis (cluster mode disabled) T1 and T2 instances. Backup/restore is supported on Redis (cluster mode enabled) T2 instances.   Redis Append-only files (AOF) functionality is not supported for T1 or T2 instances.   For a complete listing of node types and specifications, see Amazon ElastiCache Product Features and Details and either Cache Node Type-Specific Parameters for Memcached or Cache Node Type-Specific Parameters for Redis.
        public let cacheNodeType: String?
        /// The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
        public let reservedCacheNodeId: String?
        /// The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration. Valid Values: 1 | 3 | 31536000 | 94608000 
        public let duration: String?
        /// The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type. Valid values: "Light Utilization"|"Medium Utilization"|"Heavy Utilization" 
        public let offeringType: String?
        /// The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
        public let reservedCacheNodesOfferingId: String?
        /// The product description filter value. Use this parameter to show only those reservations matching the specified product description.
        public let productDescription: String?

        public init(maxRecords: Int32? = nil, marker: String? = nil, cacheNodeType: String? = nil, reservedCacheNodeId: String? = nil, duration: String? = nil, offeringType: String? = nil, reservedCacheNodesOfferingId: String? = nil, productDescription: String? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.cacheNodeType = cacheNodeType
            self.reservedCacheNodeId = reservedCacheNodeId
            self.duration = duration
            self.offeringType = offeringType
            self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
            self.productDescription = productDescription
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case cacheNodeType = "CacheNodeType"
            case reservedCacheNodeId = "ReservedCacheNodeId"
            case duration = "Duration"
            case offeringType = "OfferingType"
            case reservedCacheNodesOfferingId = "ReservedCacheNodesOfferingId"
            case productDescription = "ProductDescription"
        }
    }

    public enum AZMode: String, CustomStringConvertible, Codable {
        case single_az = "single-az"
        case cross_az = "cross-az"
        public var description: String { return self.rawValue }
    }

    public struct DescribeCacheEngineVersionsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "CacheParameterGroupFamily", required: false, type: .string), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "DefaultOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        public let maxRecords: Int32?
        /// The name of a specific cache parameter group family to return details for. Valid values are: memcached1.4 | redis2.6 | redis2.8 | redis3.2  Constraints:   Must be 1 to 255 alphanumeric characters   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens  
        public let cacheParameterGroupFamily: String?
        /// The cache engine to return. Valid values: memcached | redis 
        public let engine: String?
        /// The cache engine version to return. Example: 1.4.14 
        public let engineVersion: String?
        /// If true, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
        public let defaultOnly: Bool?
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(maxRecords: Int32? = nil, cacheParameterGroupFamily: String? = nil, engine: String? = nil, engineVersion: String? = nil, defaultOnly: Bool? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.cacheParameterGroupFamily = cacheParameterGroupFamily
            self.engine = engine
            self.engineVersion = engineVersion
            self.defaultOnly = defaultOnly
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case cacheParameterGroupFamily = "CacheParameterGroupFamily"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case defaultOnly = "DefaultOnly"
            case marker = "Marker"
        }
    }

    public struct ModifyCacheSubnetGroupResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheSubnetGroup", required: false, type: .structure)
        ]
        public let cacheSubnetGroup: CacheSubnetGroup?

        public init(cacheSubnetGroup: CacheSubnetGroup? = nil) {
            self.cacheSubnetGroup = cacheSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case cacheSubnetGroup = "CacheSubnetGroup"
        }
    }

    public struct NodeSnapshot: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NodeGroupConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CacheNodeId", required: false, type: .string), 
            AWSShapeMember(label: "NodeGroupId", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CacheNodeCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CacheClusterId", required: false, type: .string), 
            AWSShapeMember(label: "CacheSize", required: false, type: .string)
        ]
        /// The configuration for the source node group (shard).
        public let nodeGroupConfiguration: NodeGroupConfiguration?
        /// The cache node identifier for the node in the source cache cluster.
        public let cacheNodeId: String?
        /// A unique identifier for the source node group (shard).
        public let nodeGroupId: String?
        /// The date and time when the source node's metadata and cache data set was obtained for the snapshot.
        public let snapshotCreateTime: Double?
        /// The date and time when the cache node was created in the source cache cluster.
        public let cacheNodeCreateTime: Double?
        /// A unique identifier for the source cache cluster.
        public let cacheClusterId: String?
        /// The size of the cache on the source cache node.
        public let cacheSize: String?

        public init(nodeGroupConfiguration: NodeGroupConfiguration? = nil, cacheNodeId: String? = nil, nodeGroupId: String? = nil, snapshotCreateTime: Double? = nil, cacheNodeCreateTime: Double? = nil, cacheClusterId: String? = nil, cacheSize: String? = nil) {
            self.nodeGroupConfiguration = nodeGroupConfiguration
            self.cacheNodeId = cacheNodeId
            self.nodeGroupId = nodeGroupId
            self.snapshotCreateTime = snapshotCreateTime
            self.cacheNodeCreateTime = cacheNodeCreateTime
            self.cacheClusterId = cacheClusterId
            self.cacheSize = cacheSize
        }

        private enum CodingKeys: String, CodingKey {
            case nodeGroupConfiguration = "NodeGroupConfiguration"
            case cacheNodeId = "CacheNodeId"
            case nodeGroupId = "NodeGroupId"
            case snapshotCreateTime = "SnapshotCreateTime"
            case cacheNodeCreateTime = "CacheNodeCreateTime"
            case cacheClusterId = "CacheClusterId"
            case cacheSize = "CacheSize"
        }
    }

    public struct CreateReplicationGroupMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotArns", required: false, type: .structure), 
            AWSShapeMember(label: "CacheSecurityGroupNames", required: false, type: .structure), 
            AWSShapeMember(label: "ReplicasPerNodeGroup", required: false, type: .integer), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "NodeGroupConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SnapshotWindow", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationGroupId", required: true, type: .string), 
            AWSShapeMember(label: "PrimaryClusterId", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "AutomaticFailoverEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "SnapshotRetentionLimit", required: false, type: .integer), 
            AWSShapeMember(label: "PreferredCacheClusterAZs", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "NumCacheClusters", required: false, type: .integer), 
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "SnapshotName", required: false, type: .string), 
            AWSShapeMember(label: "NotificationTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "CacheSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "CacheParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "NumNodeGroups", required: false, type: .integer), 
            AWSShapeMember(label: "ReplicationGroupDescription", required: true, type: .string), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "CacheNodeType", required: false, type: .string), 
            AWSShapeMember(label: "AuthToken", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer)
        ]
        /// A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the new replication group. The Amazon S3 object name in the ARN cannot contain any commas. The new replication group will have the number of node groups (console: shards) specified by the parameter NumNodeGroups or the number of node groups configured by NodeGroupConfiguration regardless of the number of ARNs specified here.  This parameter is only valid if the Engine parameter is redis.  Example of an Amazon S3 ARN: arn:aws:s3:::my_bucket/snapshot1.rdb 
        public let snapshotArns: SnapshotArnsList?
        /// A list of cache security group names to associate with this replication group.
        public let cacheSecurityGroupNames: CacheSecurityGroupNameList?
        /// An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
        public let replicasPerNodeGroup: Int32?
        /// This parameter is currently disabled.
        public let autoMinorVersionUpgrade: Bool?
        /// A list of node group (shard) configuration options. Each node group (shard) configuration has the following: Slots, PrimaryAvailabilityZone, ReplicaAvailabilityZones, ReplicaCount. If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to individually configure each node group (shard), or you can omit this parameter.
        public let nodeGroupConfiguration: NodeGroupConfigurationList?
        /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard). Example: 05:00-09:00  If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.  This parameter is only valid if the Engine parameter is redis. 
        public let snapshotWindow: String?
        /// The version number of the cache engine to be used for the cache clusters in this replication group. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.  Important: You can upgrade to a newer engine version (see Selecting a Cache Engine and Version) in the ElastiCache User Guide, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cache cluster or replication group and create it anew with the earlier engine version. 
        public let engineVersion: String?
        /// The replication group identifier. This parameter is stored as a lowercase string. Constraints:   A name must contain from 1 to 20 alphanumeric characters or hyphens.   The first character must be a letter.   A name cannot end with a hyphen or contain two consecutive hyphens.  
        public let replicationGroupId: String
        /// The identifier of the cache cluster that serves as the primary for this replication group. This cache cluster must already exist and have a status of available. This parameter is not required if NumCacheClusters, NumNodeGroups, or ReplicasPerNodeGroup is specified.
        public let primaryClusterId: String?
        /// Specifies the weekly time range during which maintenance on the cache cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are: Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:    sun     mon     tue     wed     thu     fri     sat    Example: sun:23:00-mon:01:30 
        public let preferredMaintenanceWindow: String?
        /// Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails. If true, Multi-AZ is enabled for this replication group. If false, Multi-AZ is disabled for this replication group.  AutomaticFailoverEnabled must be enabled for Redis (cluster mode enabled) replication groups. Default: false  ElastiCache Multi-AZ replication groups is not supported on:   Redis versions earlier than 2.8.6.   Redis (cluster mode disabled): T1 and T2 node types. Redis (cluster mode enabled): T2 node types.   
        public let automaticFailoverEnabled: Bool?
        /// The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.  This parameter is only valid if the Engine parameter is redis.  Default: 0 (i.e., automatic backups are disabled for this cache cluster).
        public let snapshotRetentionLimit: Int32?
        /// A list of EC2 Availability Zones in which the replication group's cache clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list. This parameter is not used if there is more than one node group (shard). You should use NodeGroupConfiguration instead.  If you are creating your replication group in an Amazon VPC (recommended), you can only locate cache clusters in Availability Zones associated with the subnets in the selected subnet group. The number of Availability Zones listed must equal the value of NumCacheClusters.  Default: system chosen Availability Zones.
        public let preferredCacheClusterAZs: AvailabilityZonesList?
        /// A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
        public let tags: TagList?
        /// The number of clusters this replication group initially has. This parameter is not used if there is more than one node group (shard). You should use ReplicasPerNodeGroup instead. If AutomaticFailoverEnabled is true, the value of this parameter must be at least 2. If AutomaticFailoverEnabled is false you can omit this parameter (it will default to 1), or you can explicitly set it to a value between 2 and 6. The maximum permitted value for NumCacheClusters is 6 (primary plus 5 replicas).
        public let numCacheClusters: Int32?
        /// One or more Amazon VPC security groups associated with this replication group. Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).
        public let securityGroupIds: SecurityGroupIdsList?
        /// The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to restoring while the new replication group is being created.  This parameter is only valid if the Engine parameter is redis. 
        public let snapshotName: String?
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.  The Amazon SNS topic owner must be the same as the cache cluster owner. 
        public let notificationTopicArn: String?
        /// The name of the cache subnet group to be used for the replication group.  If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see Subnets and Subnet Groups. 
        public let cacheSubnetGroupName: String?
        /// The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used. If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name.    To create a Redis (cluster mode disabled) replication group, use CacheParameterGroupName=default.redis3.2.   To create a Redis (cluster mode enabled) replication group, use CacheParameterGroupName=default.redis3.2.cluster.on.  
        public let cacheParameterGroupName: String?
        /// An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1. Default: 1
        public let numNodeGroups: Int32?
        /// A user-created description for the replication group.
        public let replicationGroupDescription: String
        /// The name of the cache engine to be used for the cache clusters in this replication group.
        public let engine: String?
        /// The compute and memory capacity of the nodes in the node group (shard). Valid node types are as follows:   General purpose:   Current generation: cache.t2.micro, cache.t2.small, cache.t2.medium, cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge, cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge    Previous generation: cache.t1.micro, cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge      Compute optimized: cache.c1.xlarge    Memory optimized:   Current generation: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge, cache.r3.4xlarge, cache.r3.8xlarge    Previous generation: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge       Notes:    All T2 instances are created in an Amazon Virtual Private Cloud (Amazon VPC).   Redis backup/restore is not supported for Redis (cluster mode disabled) T1 and T2 instances. Backup/restore is supported on Redis (cluster mode enabled) T2 instances.   Redis Append-only files (AOF) functionality is not supported for T1 or T2 instances.   For a complete listing of node types and specifications, see Amazon ElastiCache Product Features and Details and either Cache Node Type-Specific Parameters for Memcached or Cache Node Type-Specific Parameters for Redis.
        public let cacheNodeType: String?
        ///  Reserved parameter. The password used to access a password protected server. Password constraints:   Must be only printable ASCII characters.   Must be at least 16 characters and no more than 128 characters in length.   Cannot contain any of the following characters: '/', '"', or "@".    For more information, see AUTH password at Redis.
        public let authToken: String?
        /// The port number on which each member of the replication group accepts connections.
        public let port: Int32?

        public init(snapshotArns: SnapshotArnsList? = nil, cacheSecurityGroupNames: CacheSecurityGroupNameList? = nil, replicasPerNodeGroup: Int32? = nil, autoMinorVersionUpgrade: Bool? = nil, nodeGroupConfiguration: NodeGroupConfigurationList? = nil, snapshotWindow: String? = nil, engineVersion: String? = nil, replicationGroupId: String, primaryClusterId: String? = nil, preferredMaintenanceWindow: String? = nil, automaticFailoverEnabled: Bool? = nil, snapshotRetentionLimit: Int32? = nil, preferredCacheClusterAZs: AvailabilityZonesList? = nil, tags: TagList? = nil, numCacheClusters: Int32? = nil, securityGroupIds: SecurityGroupIdsList? = nil, snapshotName: String? = nil, notificationTopicArn: String? = nil, cacheSubnetGroupName: String? = nil, cacheParameterGroupName: String? = nil, numNodeGroups: Int32? = nil, replicationGroupDescription: String, engine: String? = nil, cacheNodeType: String? = nil, authToken: String? = nil, port: Int32? = nil) {
            self.snapshotArns = snapshotArns
            self.cacheSecurityGroupNames = cacheSecurityGroupNames
            self.replicasPerNodeGroup = replicasPerNodeGroup
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.nodeGroupConfiguration = nodeGroupConfiguration
            self.snapshotWindow = snapshotWindow
            self.engineVersion = engineVersion
            self.replicationGroupId = replicationGroupId
            self.primaryClusterId = primaryClusterId
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.automaticFailoverEnabled = automaticFailoverEnabled
            self.snapshotRetentionLimit = snapshotRetentionLimit
            self.preferredCacheClusterAZs = preferredCacheClusterAZs
            self.tags = tags
            self.numCacheClusters = numCacheClusters
            self.securityGroupIds = securityGroupIds
            self.snapshotName = snapshotName
            self.notificationTopicArn = notificationTopicArn
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.cacheParameterGroupName = cacheParameterGroupName
            self.numNodeGroups = numNodeGroups
            self.replicationGroupDescription = replicationGroupDescription
            self.engine = engine
            self.cacheNodeType = cacheNodeType
            self.authToken = authToken
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotArns = "SnapshotArns"
            case cacheSecurityGroupNames = "CacheSecurityGroupNames"
            case replicasPerNodeGroup = "ReplicasPerNodeGroup"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case nodeGroupConfiguration = "NodeGroupConfiguration"
            case snapshotWindow = "SnapshotWindow"
            case engineVersion = "EngineVersion"
            case replicationGroupId = "ReplicationGroupId"
            case primaryClusterId = "PrimaryClusterId"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case automaticFailoverEnabled = "AutomaticFailoverEnabled"
            case snapshotRetentionLimit = "SnapshotRetentionLimit"
            case preferredCacheClusterAZs = "PreferredCacheClusterAZs"
            case tags = "Tags"
            case numCacheClusters = "NumCacheClusters"
            case securityGroupIds = "SecurityGroupIds"
            case snapshotName = "SnapshotName"
            case notificationTopicArn = "NotificationTopicArn"
            case cacheSubnetGroupName = "CacheSubnetGroupName"
            case cacheParameterGroupName = "CacheParameterGroupName"
            case numNodeGroups = "NumNodeGroups"
            case replicationGroupDescription = "ReplicationGroupDescription"
            case engine = "Engine"
            case cacheNodeType = "CacheNodeType"
            case authToken = "AuthToken"
            case port = "Port"
        }
    }

    public struct CacheEngineVersionMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "CacheEngineVersions", required: false, type: .structure)
        ]
        /// Provides an identifier to allow retrieval of paginated results.
        public let marker: String?
        /// A list of cache engine version details. Each element in the list contains detailed information about one cache engine version.
        public let cacheEngineVersions: CacheEngineVersionList?

        public init(marker: String? = nil, cacheEngineVersions: CacheEngineVersionList? = nil) {
            self.marker = marker
            self.cacheEngineVersions = cacheEngineVersions
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case cacheEngineVersions = "CacheEngineVersions"
        }
    }

    public struct CacheSecurityGroups: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheSecurityGroup", required: false, type: .list)
        ]
        public let cacheSecurityGroup: [CacheSecurityGroup]?

        public init(cacheSecurityGroup: [CacheSecurityGroup]? = nil) {
            self.cacheSecurityGroup = cacheSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case cacheSecurityGroup = "CacheSecurityGroup"
        }
    }

    public struct SecurityGroupMembership: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecurityGroupId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string)
        ]
        /// The identifier of the cache security group.
        public let securityGroupId: String?
        /// The status of the cache security group membership. The status changes whenever a cache security group is modified, or when the cache security groups assigned to a cache cluster are modified.
        public let status: String?

        public init(securityGroupId: String? = nil, status: String? = nil) {
            self.securityGroupId = securityGroupId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case securityGroupId = "SecurityGroupId"
            case status = "Status"
        }
    }

    public struct DescribeCacheClustersMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "ShowCacheClustersNotInReplicationGroups", required: false, type: .boolean), 
            AWSShapeMember(label: "ShowCacheNodeInfo", required: false, type: .boolean), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "CacheClusterId", required: false, type: .string)
        ]
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        public let maxRecords: Int32?
        /// An optional flag that can be included in the DescribeCacheCluster request to show only nodes (API/CLI: clusters) that are not members of a replication group. In practice, this mean Memcached and single node Redis clusters.
        public let showCacheClustersNotInReplicationGroups: Bool?
        /// An optional flag that can be included in the DescribeCacheCluster request to retrieve information about the individual cache nodes.
        public let showCacheNodeInfo: Bool?
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The user-supplied cluster identifier. If this parameter is specified, only information about that specific cache cluster is returned. This parameter isn't case sensitive.
        public let cacheClusterId: String?

        public init(maxRecords: Int32? = nil, showCacheClustersNotInReplicationGroups: Bool? = nil, showCacheNodeInfo: Bool? = nil, marker: String? = nil, cacheClusterId: String? = nil) {
            self.maxRecords = maxRecords
            self.showCacheClustersNotInReplicationGroups = showCacheClustersNotInReplicationGroups
            self.showCacheNodeInfo = showCacheNodeInfo
            self.marker = marker
            self.cacheClusterId = cacheClusterId
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case showCacheClustersNotInReplicationGroups = "ShowCacheClustersNotInReplicationGroups"
            case showCacheNodeInfo = "ShowCacheNodeInfo"
            case marker = "Marker"
            case cacheClusterId = "CacheClusterId"
        }
    }

    public struct CacheSubnetGroup: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subnets", required: false, type: .structure), 
            AWSShapeMember(label: "CacheSubnetGroupDescription", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "CacheSubnetGroupName", required: false, type: .string)
        ]
        /// A list of subnets associated with the cache subnet group.
        public let subnets: SubnetList?
        /// The description of the cache subnet group.
        public let cacheSubnetGroupDescription: String?
        /// The Amazon Virtual Private Cloud identifier (VPC ID) of the cache subnet group.
        public let vpcId: String?
        /// The name of the cache subnet group.
        public let cacheSubnetGroupName: String?

        public init(subnets: SubnetList? = nil, cacheSubnetGroupDescription: String? = nil, vpcId: String? = nil, cacheSubnetGroupName: String? = nil) {
            self.subnets = subnets
            self.cacheSubnetGroupDescription = cacheSubnetGroupDescription
            self.vpcId = vpcId
            self.cacheSubnetGroupName = cacheSubnetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case subnets = "Subnets"
            case cacheSubnetGroupDescription = "CacheSubnetGroupDescription"
            case vpcId = "VpcId"
            case cacheSubnetGroupName = "CacheSubnetGroupName"
        }
    }

    public struct RebootCacheClusterMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheClusterId", required: true, type: .string), 
            AWSShapeMember(label: "CacheNodeIdsToReboot", required: true, type: .structure)
        ]
        /// The cache cluster identifier. This parameter is stored as a lowercase string.
        public let cacheClusterId: String
        /// A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cache cluster, specify all of the cache node IDs.
        public let cacheNodeIdsToReboot: CacheNodeIdsList

        public init(cacheClusterId: String, cacheNodeIdsToReboot: CacheNodeIdsList) {
            self.cacheClusterId = cacheClusterId
            self.cacheNodeIdsToReboot = cacheNodeIdsToReboot
        }

        private enum CodingKeys: String, CodingKey {
            case cacheClusterId = "CacheClusterId"
            case cacheNodeIdsToReboot = "CacheNodeIdsToReboot"
        }
    }

    public struct AuthorizeCacheSecurityGroupIngressMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EC2SecurityGroupOwnerId", required: true, type: .string), 
            AWSShapeMember(label: "CacheSecurityGroupName", required: true, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupName", required: true, type: .string)
        ]
        /// The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
        public let eC2SecurityGroupOwnerId: String
        /// The cache security group that allows network ingress.
        public let cacheSecurityGroupName: String
        /// The Amazon EC2 security group to be authorized for ingress to the cache security group.
        public let eC2SecurityGroupName: String

        public init(eC2SecurityGroupOwnerId: String, cacheSecurityGroupName: String, eC2SecurityGroupName: String) {
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.cacheSecurityGroupName = cacheSecurityGroupName
            self.eC2SecurityGroupName = eC2SecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case eC2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
            case cacheSecurityGroupName = "CacheSecurityGroupName"
            case eC2SecurityGroupName = "EC2SecurityGroupName"
        }
    }

    public struct CacheSecurityGroup: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheSecurityGroupName", required: false, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "OwnerId", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The name of the cache security group.
        public let cacheSecurityGroupName: String?
        /// A list of Amazon EC2 security groups that are associated with this cache security group.
        public let eC2SecurityGroups: EC2SecurityGroupList?
        /// The AWS account ID of the cache security group owner.
        public let ownerId: String?
        /// The description of the cache security group.
        public let description: String?

        public init(cacheSecurityGroupName: String? = nil, eC2SecurityGroups: EC2SecurityGroupList? = nil, ownerId: String? = nil, description: String? = nil) {
            self.cacheSecurityGroupName = cacheSecurityGroupName
            self.eC2SecurityGroups = eC2SecurityGroups
            self.ownerId = ownerId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case cacheSecurityGroupName = "CacheSecurityGroupName"
            case eC2SecurityGroups = "EC2SecurityGroups"
            case ownerId = "OwnerId"
            case description = "Description"
        }
    }

    public struct CacheParameterGroupList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheParameterGroup", required: false, type: .list)
        ]
        public let cacheParameterGroup: [CacheParameterGroup]?

        public init(cacheParameterGroup: [CacheParameterGroup]? = nil) {
            self.cacheParameterGroup = cacheParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case cacheParameterGroup = "CacheParameterGroup"
        }
    }

    public struct AvailabilityZone: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the Availability Zone.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct DeleteCacheParameterGroupMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheParameterGroupName", required: true, type: .string)
        ]
        /// The name of the cache parameter group to delete.  The specified cache security group must not be associated with any cache clusters. 
        public let cacheParameterGroupName: String

        public init(cacheParameterGroupName: String) {
            self.cacheParameterGroupName = cacheParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case cacheParameterGroupName = "CacheParameterGroupName"
        }
    }

    public struct SnapshotArnsList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotArn", required: false, type: .list)
        ]
        public let snapshotArn: [String]?

        public init(snapshotArn: [String]? = nil) {
            self.snapshotArn = snapshotArn
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotArn = "SnapshotArn"
        }
    }

    public struct CreateCacheSecurityGroupResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheSecurityGroup", required: false, type: .structure)
        ]
        public let cacheSecurityGroup: CacheSecurityGroup?

        public init(cacheSecurityGroup: CacheSecurityGroup? = nil) {
            self.cacheSecurityGroup = cacheSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case cacheSecurityGroup = "CacheSecurityGroup"
        }
    }

    public struct CreateReplicationGroupResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationGroup", required: false, type: .structure)
        ]
        public let replicationGroup: ReplicationGroup?

        public init(replicationGroup: ReplicationGroup? = nil) {
            self.replicationGroup = replicationGroup
        }

        private enum CodingKeys: String, CodingKey {
            case replicationGroup = "ReplicationGroup"
        }
    }

    public struct AuthorizeCacheSecurityGroupIngressResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheSecurityGroup", required: false, type: .structure)
        ]
        public let cacheSecurityGroup: CacheSecurityGroup?

        public init(cacheSecurityGroup: CacheSecurityGroup? = nil) {
            self.cacheSecurityGroup = cacheSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case cacheSecurityGroup = "CacheSecurityGroup"
        }
    }

    public struct EC2SecurityGroupList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EC2SecurityGroup", required: false, type: .list)
        ]
        public let eC2SecurityGroup: [EC2SecurityGroup]?

        public init(eC2SecurityGroup: [EC2SecurityGroup]? = nil) {
            self.eC2SecurityGroup = eC2SecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case eC2SecurityGroup = "EC2SecurityGroup"
        }
    }

    public struct ParameterNameValueList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterNameValue", required: false, type: .list)
        ]
        public let parameterNameValue: [ParameterNameValue]?

        public init(parameterNameValue: [ParameterNameValue]? = nil) {
            self.parameterNameValue = parameterNameValue
        }

        private enum CodingKeys: String, CodingKey {
            case parameterNameValue = "ParameterNameValue"
        }
    }

    public struct NodeSnapshotList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NodeSnapshot", required: false, type: .list)
        ]
        public let nodeSnapshot: [NodeSnapshot]?

        public init(nodeSnapshot: [NodeSnapshot]? = nil) {
            self.nodeSnapshot = nodeSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case nodeSnapshot = "NodeSnapshot"
        }
    }

    public struct CacheParameterGroup: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheParameterGroupFamily", required: false, type: .string), 
            AWSShapeMember(label: "CacheParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The name of the cache parameter group family that this cache parameter group is compatible with. Valid values are: memcached1.4 | redis2.6 | redis2.8 | redis3.2 
        public let cacheParameterGroupFamily: String?
        /// The name of the cache parameter group.
        public let cacheParameterGroupName: String?
        /// The description for this cache parameter group.
        public let description: String?

        public init(cacheParameterGroupFamily: String? = nil, cacheParameterGroupName: String? = nil, description: String? = nil) {
            self.cacheParameterGroupFamily = cacheParameterGroupFamily
            self.cacheParameterGroupName = cacheParameterGroupName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case cacheParameterGroupFamily = "CacheParameterGroupFamily"
            case cacheParameterGroupName = "CacheParameterGroupName"
            case description = "Description"
        }
    }

    public struct SubnetList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subnet", required: false, type: .list)
        ]
        public let subnet: [Subnet]?

        public init(subnet: [Subnet]? = nil) {
            self.subnet = subnet
        }

        private enum CodingKeys: String, CodingKey {
            case subnet = "Subnet"
        }
    }

    public struct CreateCacheParameterGroupMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheParameterGroupFamily", required: true, type: .string), 
            AWSShapeMember(label: "CacheParameterGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: true, type: .string)
        ]
        /// The name of the cache parameter group family that the cache parameter group can be used with. Valid values are: memcached1.4 | redis2.6 | redis2.8 | redis3.2 
        public let cacheParameterGroupFamily: String
        /// A user-specified name for the cache parameter group.
        public let cacheParameterGroupName: String
        /// A user-specified description for the cache parameter group.
        public let description: String

        public init(cacheParameterGroupFamily: String, cacheParameterGroupName: String, description: String) {
            self.cacheParameterGroupFamily = cacheParameterGroupFamily
            self.cacheParameterGroupName = cacheParameterGroupName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case cacheParameterGroupFamily = "CacheParameterGroupFamily"
            case cacheParameterGroupName = "CacheParameterGroupName"
            case description = "Description"
        }
    }

    public struct NodeGroup: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NodeGroupMembers", required: false, type: .structure), 
            AWSShapeMember(label: "Slots", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "NodeGroupId", required: false, type: .string), 
            AWSShapeMember(label: "PrimaryEndpoint", required: false, type: .structure)
        ]
        /// A list containing information about individual nodes within the node group (shard).
        public let nodeGroupMembers: NodeGroupMemberList?
        /// The keyspace for this node group (shard).
        public let slots: String?
        /// The current state of this replication group - creating, available, etc.
        public let status: String?
        /// The identifier for the node group (shard). A Redis (cluster mode disabled) replication group contains only 1 node group; therefore, the node group ID is 0001. A Redis (cluster mode enabled) replication group contains 1 to 15 node groups numbered 0001 to 0015. 
        public let nodeGroupId: String?
        /// The endpoint of the primary node in this node group (shard).
        public let primaryEndpoint: Endpoint?

        public init(nodeGroupMembers: NodeGroupMemberList? = nil, slots: String? = nil, status: String? = nil, nodeGroupId: String? = nil, primaryEndpoint: Endpoint? = nil) {
            self.nodeGroupMembers = nodeGroupMembers
            self.slots = slots
            self.status = status
            self.nodeGroupId = nodeGroupId
            self.primaryEndpoint = primaryEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case nodeGroupMembers = "NodeGroupMembers"
            case slots = "Slots"
            case status = "Status"
            case nodeGroupId = "NodeGroupId"
            case primaryEndpoint = "PrimaryEndpoint"
        }
    }

    public struct DeleteSnapshotMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotName", required: true, type: .string)
        ]
        /// The name of the snapshot to be deleted.
        public let snapshotName: String

        public init(snapshotName: String) {
            self.snapshotName = snapshotName
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotName = "SnapshotName"
        }
    }

    public struct CacheSecurityGroupNameList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheSecurityGroupName", required: false, type: .list)
        ]
        public let cacheSecurityGroupName: [String]?

        public init(cacheSecurityGroupName: [String]? = nil) {
            self.cacheSecurityGroupName = cacheSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case cacheSecurityGroupName = "CacheSecurityGroupName"
        }
    }

    public struct TagListMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagList", required: false, type: .structure)
        ]
        /// A list of cost allocation tags as key-value pairs.
        public let tagList: TagList?

        public init(tagList: TagList? = nil) {
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case tagList = "TagList"
        }
    }

    public struct DeleteReplicationGroupMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RetainPrimaryCluster", required: false, type: .boolean), 
            AWSShapeMember(label: "FinalSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationGroupId", required: true, type: .string)
        ]
        /// If set to true, all of the read replicas are deleted, but the primary node is retained.
        public let retainPrimaryCluster: Bool?
        /// The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
        public let finalSnapshotIdentifier: String?
        /// The identifier for the cluster to be deleted. This parameter is not case sensitive.
        public let replicationGroupId: String

        public init(retainPrimaryCluster: Bool? = nil, finalSnapshotIdentifier: String? = nil, replicationGroupId: String) {
            self.retainPrimaryCluster = retainPrimaryCluster
            self.finalSnapshotIdentifier = finalSnapshotIdentifier
            self.replicationGroupId = replicationGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case retainPrimaryCluster = "RetainPrimaryCluster"
            case finalSnapshotIdentifier = "FinalSnapshotIdentifier"
            case replicationGroupId = "ReplicationGroupId"
        }
    }

    public struct AvailabilityZonesList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .list)
        ]
        public let availabilityZone: [String]?

        public init(availabilityZone: [String]? = nil) {
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
        }
    }

    public struct ModifyReplicationGroupResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReplicationGroup", required: false, type: .structure)
        ]
        public let replicationGroup: ReplicationGroup?

        public init(replicationGroup: ReplicationGroup? = nil) {
            self.replicationGroup = replicationGroup
        }

        private enum CodingKeys: String, CodingKey {
            case replicationGroup = "ReplicationGroup"
        }
    }

    public struct ReservedCacheNodeMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ReservedCacheNodes", required: false, type: .structure)
        ]
        /// Provides an identifier to allow retrieval of paginated results.
        public let marker: String?
        /// A list of reserved cache nodes. Each element in the list contains detailed information about one node.
        public let reservedCacheNodes: ReservedCacheNodeList?

        public init(marker: String? = nil, reservedCacheNodes: ReservedCacheNodeList? = nil) {
            self.marker = marker
            self.reservedCacheNodes = reservedCacheNodes
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case reservedCacheNodes = "ReservedCacheNodes"
        }
    }

    public struct DescribeReplicationGroupsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationGroupId", required: false, type: .string)
        ]
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        public let maxRecords: Int32?
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The identifier for the replication group to be described. This parameter is not case sensitive. If you do not specify this parameter, information about all replication groups is returned.
        public let replicationGroupId: String?

        public init(maxRecords: Int32? = nil, marker: String? = nil, replicationGroupId: String? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.replicationGroupId = replicationGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case replicationGroupId = "ReplicationGroupId"
        }
    }

    public struct DeleteCacheSecurityGroupMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheSecurityGroupName", required: true, type: .string)
        ]
        /// The name of the cache security group to delete.  You cannot delete the default security group. 
        public let cacheSecurityGroupName: String

        public init(cacheSecurityGroupName: String) {
            self.cacheSecurityGroupName = cacheSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case cacheSecurityGroupName = "CacheSecurityGroupName"
        }
    }

    public struct CreateCacheSubnetGroupMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheSubnetGroupName", required: true, type: .string), 
            AWSShapeMember(label: "SubnetIds", required: true, type: .structure), 
            AWSShapeMember(label: "CacheSubnetGroupDescription", required: true, type: .string)
        ]
        /// A name for the cache subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters or hyphens. Example: mysubnetgroup 
        public let cacheSubnetGroupName: String
        /// A list of VPC subnet IDs for the cache subnet group.
        public let subnetIds: SubnetIdentifierList
        /// A description for the cache subnet group.
        public let cacheSubnetGroupDescription: String

        public init(cacheSubnetGroupName: String, subnetIds: SubnetIdentifierList, cacheSubnetGroupDescription: String) {
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.subnetIds = subnetIds
            self.cacheSubnetGroupDescription = cacheSubnetGroupDescription
        }

        private enum CodingKeys: String, CodingKey {
            case cacheSubnetGroupName = "CacheSubnetGroupName"
            case subnetIds = "SubnetIds"
            case cacheSubnetGroupDescription = "CacheSubnetGroupDescription"
        }
    }

    public struct NodeGroupConfigurationList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NodeGroupConfiguration", required: false, type: .list)
        ]
        public let nodeGroupConfiguration: [NodeGroupConfiguration]?

        public init(nodeGroupConfiguration: [NodeGroupConfiguration]? = nil) {
            self.nodeGroupConfiguration = nodeGroupConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case nodeGroupConfiguration = "NodeGroupConfiguration"
        }
    }

    public struct PendingModifiedValues: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheNodeType", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "NumCacheNodes", required: false, type: .integer), 
            AWSShapeMember(label: "CacheNodeIdsToRemove", required: false, type: .structure)
        ]
        /// The cache node type that this cache cluster or replication group is scaled to.
        public let cacheNodeType: String?
        /// The new cache engine version that the cache cluster runs.
        public let engineVersion: String?
        /// The new number of cache nodes for the cache cluster. For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.
        public let numCacheNodes: Int32?
        /// A list of cache node IDs that are being removed (or will be removed) from the cache cluster. A node ID is a numeric identifier (0001, 0002, etc.).
        public let cacheNodeIdsToRemove: CacheNodeIdsList?

        public init(cacheNodeType: String? = nil, engineVersion: String? = nil, numCacheNodes: Int32? = nil, cacheNodeIdsToRemove: CacheNodeIdsList? = nil) {
            self.cacheNodeType = cacheNodeType
            self.engineVersion = engineVersion
            self.numCacheNodes = numCacheNodes
            self.cacheNodeIdsToRemove = cacheNodeIdsToRemove
        }

        private enum CodingKeys: String, CodingKey {
            case cacheNodeType = "CacheNodeType"
            case engineVersion = "EngineVersion"
            case numCacheNodes = "NumCacheNodes"
            case cacheNodeIdsToRemove = "CacheNodeIdsToRemove"
        }
    }

    public struct CacheNodeIdsList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheNodeId", required: false, type: .list)
        ]
        public let cacheNodeId: [String]?

        public init(cacheNodeId: [String]? = nil) {
            self.cacheNodeId = cacheNodeId
        }

        private enum CodingKeys: String, CodingKey {
            case cacheNodeId = "CacheNodeId"
        }
    }

    public struct ModifyReplicationGroupMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheSecurityGroupNames", required: false, type: .structure), 
            AWSShapeMember(label: "NotificationTopicStatus", required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "ApplyImmediately", required: false, type: .boolean), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "NotificationTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "SnapshottingClusterId", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotWindow", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationGroupId", required: true, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "CacheParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationGroupDescription", required: false, type: .string), 
            AWSShapeMember(label: "NodeGroupId", required: false, type: .string), 
            AWSShapeMember(label: "CacheNodeType", required: false, type: .string), 
            AWSShapeMember(label: "PrimaryClusterId", required: false, type: .string), 
            AWSShapeMember(label: "AutomaticFailoverEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "SnapshotRetentionLimit", required: false, type: .integer)
        ]
        /// A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible. This parameter can be used only with replication group containing cache clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC). Constraints: Must contain no more than 255 alphanumeric characters. Must not be Default.
        public let cacheSecurityGroupNames: CacheSecurityGroupNameList?
        /// The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is active. Valid values: active | inactive 
        public let notificationTopicStatus: String?
        /// Specifies the VPC Security Groups associated with the cache clusters in the replication group. This parameter can be used only with replication group containing cache clusters running in an Amazon Virtual Private Cloud (Amazon VPC).
        public let securityGroupIds: SecurityGroupIdsList?
        /// If true, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the PreferredMaintenanceWindow setting for the replication group. If false, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first. Valid values: true | false  Default: false 
        public let applyImmediately: Bool?
        /// This parameter is currently disabled.
        public let autoMinorVersionUpgrade: Bool?
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.  The Amazon SNS topic owner must be same as the replication group owner.  
        public let notificationTopicArn: String?
        /// The cache cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
        public let snapshottingClusterId: String?
        /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by SnapshottingClusterId. Example: 05:00-09:00  If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.
        public let snapshotWindow: String?
        /// The upgraded version of the cache engine to be run on the cache clusters in the replication group.  Important: You can upgrade to a newer engine version (see Selecting a Cache Engine and Version), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. 
        public let engineVersion: String?
        /// The identifier of the replication group to modify.
        public let replicationGroupId: String
        /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:    sun     mon     tue     wed     thu     fri     sat    Example: sun:23:00-mon:01:30 
        public let preferredMaintenanceWindow: String?
        /// The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the ApplyImmediately parameter is specified as true for this request.
        public let cacheParameterGroupName: String?
        /// A description for the replication group. Maximum length is 255 characters.
        public let replicationGroupDescription: String?
        /// The name of the Node Group (called shard in the console).
        public let nodeGroupId: String?
        /// A valid cache node type that you want to scale this replication group to.
        public let cacheNodeType: String?
        /// For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
        public let primaryClusterId: String?
        /// Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure. Valid values: true | false   ElastiCache Multi-AZ replication groups are not supported on:   Redis versions earlier than 2.8.6.   Redis (cluster mode disabled):T1 and T2 cache node types. Redis (cluster mode enabled): T1 node types.   
        public let automaticFailoverEnabled: Bool?
        /// The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.  Important If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
        public let snapshotRetentionLimit: Int32?

        public init(cacheSecurityGroupNames: CacheSecurityGroupNameList? = nil, notificationTopicStatus: String? = nil, securityGroupIds: SecurityGroupIdsList? = nil, applyImmediately: Bool? = nil, autoMinorVersionUpgrade: Bool? = nil, notificationTopicArn: String? = nil, snapshottingClusterId: String? = nil, snapshotWindow: String? = nil, engineVersion: String? = nil, replicationGroupId: String, preferredMaintenanceWindow: String? = nil, cacheParameterGroupName: String? = nil, replicationGroupDescription: String? = nil, nodeGroupId: String? = nil, cacheNodeType: String? = nil, primaryClusterId: String? = nil, automaticFailoverEnabled: Bool? = nil, snapshotRetentionLimit: Int32? = nil) {
            self.cacheSecurityGroupNames = cacheSecurityGroupNames
            self.notificationTopicStatus = notificationTopicStatus
            self.securityGroupIds = securityGroupIds
            self.applyImmediately = applyImmediately
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.notificationTopicArn = notificationTopicArn
            self.snapshottingClusterId = snapshottingClusterId
            self.snapshotWindow = snapshotWindow
            self.engineVersion = engineVersion
            self.replicationGroupId = replicationGroupId
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.cacheParameterGroupName = cacheParameterGroupName
            self.replicationGroupDescription = replicationGroupDescription
            self.nodeGroupId = nodeGroupId
            self.cacheNodeType = cacheNodeType
            self.primaryClusterId = primaryClusterId
            self.automaticFailoverEnabled = automaticFailoverEnabled
            self.snapshotRetentionLimit = snapshotRetentionLimit
        }

        private enum CodingKeys: String, CodingKey {
            case cacheSecurityGroupNames = "CacheSecurityGroupNames"
            case notificationTopicStatus = "NotificationTopicStatus"
            case securityGroupIds = "SecurityGroupIds"
            case applyImmediately = "ApplyImmediately"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case notificationTopicArn = "NotificationTopicArn"
            case snapshottingClusterId = "SnapshottingClusterId"
            case snapshotWindow = "SnapshotWindow"
            case engineVersion = "EngineVersion"
            case replicationGroupId = "ReplicationGroupId"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case cacheParameterGroupName = "CacheParameterGroupName"
            case replicationGroupDescription = "ReplicationGroupDescription"
            case nodeGroupId = "NodeGroupId"
            case cacheNodeType = "CacheNodeType"
            case primaryClusterId = "PrimaryClusterId"
            case automaticFailoverEnabled = "AutomaticFailoverEnabled"
            case snapshotRetentionLimit = "SnapshotRetentionLimit"
        }
    }

    public struct DescribeCacheSecurityGroupsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "CacheSecurityGroupName", required: false, type: .string)
        ]
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        public let maxRecords: Int32?
        /// The name of the cache security group to return details for.
        public let cacheSecurityGroupName: String?

        public init(marker: String? = nil, maxRecords: Int32? = nil, cacheSecurityGroupName: String? = nil) {
            self.marker = marker
            self.maxRecords = maxRecords
            self.cacheSecurityGroupName = cacheSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case cacheSecurityGroupName = "CacheSecurityGroupName"
        }
    }

    public struct CacheNodeTypeSpecificParameter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheNodeTypeSpecificValues", required: false, type: .structure), 
            AWSShapeMember(label: "AllowedValues", required: false, type: .string), 
            AWSShapeMember(label: "DataType", required: false, type: .string), 
            AWSShapeMember(label: "ParameterName", required: false, type: .string), 
            AWSShapeMember(label: "Source", required: false, type: .string), 
            AWSShapeMember(label: "IsModifiable", required: false, type: .boolean), 
            AWSShapeMember(label: "MinimumEngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "ChangeType", required: false, type: .enum), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// A list of cache node types and their corresponding values for this parameter.
        public let cacheNodeTypeSpecificValues: CacheNodeTypeSpecificValueList?
        /// The valid range of values for the parameter.
        public let allowedValues: String?
        /// The valid data type for the parameter.
        public let dataType: String?
        /// The name of the parameter.
        public let parameterName: String?
        /// The source of the parameter value.
        public let source: String?
        /// Indicates whether (true) or not (false) the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed.
        public let isModifiable: Bool?
        /// The earliest cache engine version to which the parameter can apply.
        public let minimumEngineVersion: String?
        /// Indicates whether a change to the parameter is applied immediately or requires a reboot for the change to be applied. You can force a reboot or wait until the next maintenance window's reboot. For more information, see Rebooting a Cluster.
        public let changeType: ChangeType?
        /// A description of the parameter.
        public let description: String?

        public init(cacheNodeTypeSpecificValues: CacheNodeTypeSpecificValueList? = nil, allowedValues: String? = nil, dataType: String? = nil, parameterName: String? = nil, source: String? = nil, isModifiable: Bool? = nil, minimumEngineVersion: String? = nil, changeType: ChangeType? = nil, description: String? = nil) {
            self.cacheNodeTypeSpecificValues = cacheNodeTypeSpecificValues
            self.allowedValues = allowedValues
            self.dataType = dataType
            self.parameterName = parameterName
            self.source = source
            self.isModifiable = isModifiable
            self.minimumEngineVersion = minimumEngineVersion
            self.changeType = changeType
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case cacheNodeTypeSpecificValues = "CacheNodeTypeSpecificValues"
            case allowedValues = "AllowedValues"
            case dataType = "DataType"
            case parameterName = "ParameterName"
            case source = "Source"
            case isModifiable = "IsModifiable"
            case minimumEngineVersion = "MinimumEngineVersion"
            case changeType = "ChangeType"
            case description = "Description"
        }
    }

    public struct PurchaseReservedCacheNodesOfferingResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedCacheNode", required: false, type: .structure)
        ]
        public let reservedCacheNode: ReservedCacheNode?

        public init(reservedCacheNode: ReservedCacheNode? = nil) {
            self.reservedCacheNode = reservedCacheNode
        }

        private enum CodingKeys: String, CodingKey {
            case reservedCacheNode = "ReservedCacheNode"
        }
    }

    public struct DescribeCacheParameterGroupsMessage: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "CacheParameterGroupName", required: false, type: .string)
        ]
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        public let maxRecords: Int32?
        /// The name of a specific cache parameter group to return details for.
        public let cacheParameterGroupName: String?

        public init(marker: String? = nil, maxRecords: Int32? = nil, cacheParameterGroupName: String? = nil) {
            self.marker = marker
            self.maxRecords = maxRecords
            self.cacheParameterGroupName = cacheParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case maxRecords = "MaxRecords"
            case cacheParameterGroupName = "CacheParameterGroupName"
        }
    }

    public struct ParametersList: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameter", required: false, type: .list)
        ]
        public let parameter: [Parameter]?

        public init(parameter: [Parameter]? = nil) {
            self.parameter = parameter
        }

        private enum CodingKeys: String, CodingKey {
            case parameter = "Parameter"
        }
    }

    public struct CreateCacheSubnetGroupResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheSubnetGroup", required: false, type: .structure)
        ]
        public let cacheSubnetGroup: CacheSubnetGroup?

        public init(cacheSubnetGroup: CacheSubnetGroup? = nil) {
            self.cacheSubnetGroup = cacheSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case cacheSubnetGroup = "CacheSubnetGroup"
        }
    }

}