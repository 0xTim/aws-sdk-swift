// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Elasticache {

    public struct EventsMessage: Serializable, Initializable {
        /// Provides an identifier to allow retrieval of paginated results.
        var marker: String? = nil
        /// A list of events. Each element in the list contains detailed information about one event.
        var events: [Event]? = nil

        public init() {}

        public init(marker: String? = nil, events: [Event]? = nil) {
            self.marker = marker
            self.events = events
        }

    }

    public struct DescribeEngineDefaultParametersResult: Serializable, Initializable {
        var engineDefaults: EngineDefaults? = nil

        public init() {}

        public init(engineDefaults: EngineDefaults? = nil) {
            self.engineDefaults = engineDefaults
        }

    }

    public struct ReplicationGroup: Serializable, Initializable {
        /// A group of settings to be applied to the replication group, either immediately or during the next maintenance window.
        var pendingModifiedValues: ReplicationGroupPendingModifiedValues? = nil
        /// The current state of this replication group - creating, available, modifying, deleting, create-failed, snapshotting.
        var status: String? = nil
        /// The configuration endpoint for this replicaiton group. Use the configuration endpoint to connect to this replication group.
        var configurationEndpoint: Endpoint? = nil
        /// The cache cluster ID that is used as the daily snapshot source for the replication group.
        var snapshottingClusterId: String? = nil
        /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard). Example: 05:00-09:00  If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.  Note: This parameter is only valid if the Engine parameter is redis.
        var snapshotWindow: String? = nil
        /// The identifier for the replication group.
        var replicationGroupId: String? = nil
        /// A single element list with information about the nodes in the replication group.
        var nodeGroups: [NodeGroup]? = nil
        /// Indicates the status of Multi-AZ for this replication group.  ElastiCache Multi-AZ replication groups are not supported on:   Redis versions earlier than 2.8.6.   Redis (cluster mode disabled):T1 and T2 cache node types. Redis (cluster mode enabled): T1 node types.   
        var automaticFailover: String? = nil
        /// The names of all the cache clusters that are part of this replication group.
        var memberClusters: [String]? = nil
        /// The number of days for which ElastiCache retains automatic cache cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.   If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off. 
        var snapshotRetentionLimit: Int32? = nil
        /// The description of the replication group.
        var description: String? = nil

        public init() {}

        public init(pendingModifiedValues: ReplicationGroupPendingModifiedValues? = nil, status: String? = nil, configurationEndpoint: Endpoint? = nil, snapshottingClusterId: String? = nil, snapshotWindow: String? = nil, replicationGroupId: String? = nil, nodeGroups: [NodeGroup]? = nil, automaticFailover: String? = nil, memberClusters: [String]? = nil, snapshotRetentionLimit: Int32? = nil, description: String? = nil) {
            self.pendingModifiedValues = pendingModifiedValues
            self.status = status
            self.configurationEndpoint = configurationEndpoint
            self.snapshottingClusterId = snapshottingClusterId
            self.snapshotWindow = snapshotWindow
            self.replicationGroupId = replicationGroupId
            self.nodeGroups = nodeGroups
            self.automaticFailover = automaticFailover
            self.memberClusters = memberClusters
            self.snapshotRetentionLimit = snapshotRetentionLimit
            self.description = description
        }

    }

    public struct CacheSubnetGroupMessage: Serializable, Initializable {
        /// Provides an identifier to allow retrieval of paginated results.
        var marker: String? = nil
        /// A list of cache subnet groups. Each element in the list contains detailed information about one group.
        var cacheSubnetGroups: [CacheSubnetGroup]? = nil

        public init() {}

        public init(marker: String? = nil, cacheSubnetGroups: [CacheSubnetGroup]? = nil) {
            self.marker = marker
            self.cacheSubnetGroups = cacheSubnetGroups
        }

    }

    public struct CreateCacheClusterResult: Serializable, Initializable {
        var cacheCluster: CacheCluster? = nil

        public init() {}

        public init(cacheCluster: CacheCluster? = nil) {
            self.cacheCluster = cacheCluster
        }

    }

    public struct Endpoint: Serializable, Initializable {
        /// The DNS hostname of the cache node.
        var address: String? = nil
        /// The port number that the cache engine is listening on.
        var port: Int32? = nil

        public init() {}

        public init(address: String? = nil, port: Int32? = nil) {
            self.address = address
            self.port = port
        }

    }

    public struct ParameterNameValue: Serializable, Initializable {
        /// The name of the parameter.
        var parameterName: String? = nil
        /// The value of the parameter.
        var parameterValue: String? = nil

        public init() {}

        public init(parameterName: String? = nil, parameterValue: String? = nil) {
            self.parameterName = parameterName
            self.parameterValue = parameterValue
        }

    }

    public struct DeleteCacheSubnetGroupMessage: Serializable, Initializable {
        /// The name of the cache subnet group to delete. Constraints: Must contain no more than 255 alphanumeric characters or hyphens.
        var cacheSubnetGroupName: String = ""

        public init() {}

        public init(cacheSubnetGroupName: String) {
            self.cacheSubnetGroupName = cacheSubnetGroupName
        }

    }

    public struct CacheClusterMessage: Serializable, Initializable {
        /// Provides an identifier to allow retrieval of paginated results.
        var marker: String? = nil
        /// A list of cache clusters. Each item in the list contains detailed information about one cache cluster.
        var cacheClusters: [CacheCluster]? = nil

        public init() {}

        public init(marker: String? = nil, cacheClusters: [CacheCluster]? = nil) {
            self.marker = marker
            self.cacheClusters = cacheClusters
        }

    }

    public struct DescribeCacheParametersMessage: Serializable, Initializable {
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        var maxRecords: Int32? = nil
        /// The parameter types to return. Valid values: user | system | engine-default 
        var source: String? = nil
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        var marker: String? = nil
        /// The name of a specific cache parameter group to return details for.
        var cacheParameterGroupName: String = ""

        public init() {}

        public init(maxRecords: Int32? = nil, source: String? = nil, marker: String? = nil, cacheParameterGroupName: String) {
            self.maxRecords = maxRecords
            self.source = source
            self.marker = marker
            self.cacheParameterGroupName = cacheParameterGroupName
        }

    }

    public struct ReservedCacheNode: Serializable, Initializable {
        /// The time the reservation started.
        var startTime: Date? = nil
        /// The number of cache nodes that have been reserved.
        var cacheNodeCount: Int32? = nil
        /// The recurring price charged to run this reserved cache node.
        var recurringCharges: [RecurringCharge]? = nil
        /// The fixed price charged for this reserved cache node.
        var fixedPrice: Double? = nil
        /// The hourly price charged for this reserved cache node.
        var usagePrice: Double? = nil
        /// The state of the reserved cache node.
        var state: String? = nil
        /// The cache node type for the reserved cache nodes. Valid node types are as follows:   General purpose:   Current generation: cache.t2.micro, cache.t2.small, cache.t2.medium, cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge, cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge    Previous generation: cache.t1.micro, cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge      Compute optimized: cache.c1.xlarge    Memory optimized:   Current generation: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge, cache.r3.4xlarge, cache.r3.8xlarge    Previous generation: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge       Notes:    All T2 instances are created in an Amazon Virtual Private Cloud (Amazon VPC).   Redis backup/restore is not supported for Redis (cluster mode disabled) T1 and T2 instances. Backup/restore is supported on Redis (cluster mode enabled) T2 instances.   Redis Append-only files (AOF) functionality is not supported for T1 or T2 instances.   For a complete listing of node types and specifications, see Amazon ElastiCache Product Features and Details and either Cache Node Type-Specific Parameters for Memcached or Cache Node Type-Specific Parameters for Redis.
        var cacheNodeType: String? = nil
        /// The unique identifier for the reservation.
        var reservedCacheNodeId: String? = nil
        /// The duration of the reservation in seconds.
        var duration: Int32? = nil
        /// The offering identifier.
        var reservedCacheNodesOfferingId: String? = nil
        /// The offering type of this reserved cache node.
        var offeringType: String? = nil
        /// The description of the reserved cache node.
        var productDescription: String? = nil

        public init() {}

        public init(startTime: Date? = nil, cacheNodeCount: Int32? = nil, recurringCharges: [RecurringCharge]? = nil, fixedPrice: Double? = nil, usagePrice: Double? = nil, state: String? = nil, cacheNodeType: String? = nil, reservedCacheNodeId: String? = nil, duration: Int32? = nil, reservedCacheNodesOfferingId: String? = nil, offeringType: String? = nil, productDescription: String? = nil) {
            self.startTime = startTime
            self.cacheNodeCount = cacheNodeCount
            self.recurringCharges = recurringCharges
            self.fixedPrice = fixedPrice
            self.usagePrice = usagePrice
            self.state = state
            self.cacheNodeType = cacheNodeType
            self.reservedCacheNodeId = reservedCacheNodeId
            self.duration = duration
            self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
            self.offeringType = offeringType
            self.productDescription = productDescription
        }

    }

    public struct Tag: Serializable, Initializable {
        /// The tag's value. May not be null.
        var value: String? = nil
        /// The key for the tag.
        var key: String? = nil

        public init() {}

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

    }

    public struct ResetCacheParameterGroupMessage: Serializable, Initializable {
        /// The name of the cache parameter group to reset.
        var cacheParameterGroupName: String = ""
        /// An array of parameter names to reset to their default values. If ResetAllParameters is true, do not use ParameterNameValues. If ResetAllParameters is false, you must specify the name of at least one parameter to reset.
        var parameterNameValues: [ParameterNameValue]? = nil
        /// If true, all parameters in the cache parameter group are reset to their default values. If false, only the parameters listed by ParameterNameValues are reset to their default values. Valid values: true | false 
        var resetAllParameters: Bool? = nil

        public init() {}

        public init(cacheParameterGroupName: String, parameterNameValues: [ParameterNameValue]? = nil, resetAllParameters: Bool? = nil) {
            self.cacheParameterGroupName = cacheParameterGroupName
            self.parameterNameValues = parameterNameValues
            self.resetAllParameters = resetAllParameters
        }

    }

    public struct CopySnapshotResult: Serializable, Initializable {
        var snapshot: Snapshot? = nil

        public init() {}

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

    }

    public struct ListTagsForResourceMessage: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the resource for which you want the list of tags, for example arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster or arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        var resourceName: String = ""

        public init() {}

        public init(resourceName: String) {
            self.resourceName = resourceName
        }

    }

    public struct ReservedCacheNodesOffering: Serializable, Initializable {
        /// The offering type.
        var offeringType: String? = nil
        /// The recurring price charged to run this reserved cache node.
        var recurringCharges: [RecurringCharge]? = nil
        /// The hourly price charged for this offering.
        var usagePrice: Double? = nil
        /// The cache node type for the reserved cache node. Valid node types are as follows:   General purpose:   Current generation: cache.t2.micro, cache.t2.small, cache.t2.medium, cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge, cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge    Previous generation: cache.t1.micro, cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge      Compute optimized: cache.c1.xlarge    Memory optimized:   Current generation: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge, cache.r3.4xlarge, cache.r3.8xlarge    Previous generation: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge       Notes:    All T2 instances are created in an Amazon Virtual Private Cloud (Amazon VPC).   Redis backup/restore is not supported for Redis (cluster mode disabled) T1 and T2 instances. Backup/restore is supported on Redis (cluster mode enabled) T2 instances.   Redis Append-only files (AOF) functionality is not supported for T1 or T2 instances.   For a complete listing of node types and specifications, see Amazon ElastiCache Product Features and Details and either Cache Node Type-Specific Parameters for Memcached or Cache Node Type-Specific Parameters for Redis.
        var cacheNodeType: String? = nil
        /// The duration of the offering. in seconds.
        var duration: Int32? = nil
        /// A unique identifier for the reserved cache node offering.
        var reservedCacheNodesOfferingId: String? = nil
        /// The fixed price charged for this offering.
        var fixedPrice: Double? = nil
        /// The cache engine used by the offering.
        var productDescription: String? = nil

        public init() {}

        public init(offeringType: String? = nil, recurringCharges: [RecurringCharge]? = nil, usagePrice: Double? = nil, cacheNodeType: String? = nil, duration: Int32? = nil, reservedCacheNodesOfferingId: String? = nil, fixedPrice: Double? = nil, productDescription: String? = nil) {
            self.offeringType = offeringType
            self.recurringCharges = recurringCharges
            self.usagePrice = usagePrice
            self.cacheNodeType = cacheNodeType
            self.duration = duration
            self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
            self.fixedPrice = fixedPrice
            self.productDescription = productDescription
        }

    }

    public struct RevokeCacheSecurityGroupIngressMessage: Serializable, Initializable {
        /// The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
        var eC2SecurityGroupOwnerId: String = ""
        /// The name of the cache security group to revoke ingress from.
        var cacheSecurityGroupName: String = ""
        /// The name of the Amazon EC2 security group to revoke access from.
        var eC2SecurityGroupName: String = ""

        public init() {}

        public init(eC2SecurityGroupOwnerId: String, cacheSecurityGroupName: String, eC2SecurityGroupName: String) {
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.cacheSecurityGroupName = cacheSecurityGroupName
            self.eC2SecurityGroupName = eC2SecurityGroupName
        }

    }

    public struct RecurringCharge: Serializable, Initializable {
        /// The monetary amount of the recurring charge.
        var recurringChargeAmount: Double? = nil
        /// The frequency of the recurring charge.
        var recurringChargeFrequency: String? = nil

        public init() {}

        public init(recurringChargeAmount: Double? = nil, recurringChargeFrequency: String? = nil) {
            self.recurringChargeAmount = recurringChargeAmount
            self.recurringChargeFrequency = recurringChargeFrequency
        }

    }

    public struct CreateSnapshotMessage: Serializable, Initializable {
        /// The identifier of an existing cache cluster. The snapshot is created from this cache cluster.
        var cacheClusterId: String? = nil
        /// A name for the snapshot being created.
        var snapshotName: String = ""
        /// The identifier of an existing replication group. The snapshot is created from this replication group.
        var replicationGroupId: String? = nil

        public init() {}

        public init(cacheClusterId: String? = nil, snapshotName: String, replicationGroupId: String? = nil) {
            self.cacheClusterId = cacheClusterId
            self.snapshotName = snapshotName
            self.replicationGroupId = replicationGroupId
        }

    }

    public struct DescribeEventsMessage: Serializable, Initializable {
        /// The beginning of the time interval to retrieve events for, specified in ISO 8601 format.
        var startTime: Date? = nil
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        var maxRecords: Int32? = nil
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        var marker: String? = nil
        /// The event source to retrieve events for. If no value is specified, all events are returned.
        var sourceType: String? = nil
        /// The end of the time interval for which to retrieve events, specified in ISO 8601 format.
        var endTime: Date? = nil
        /// The identifier of the event source for which events are returned. If not specified, all sources are included in the response.
        var sourceIdentifier: String? = nil
        /// The number of minutes' worth of events to retrieve.
        var duration: Int32? = nil

        public init() {}

        public init(startTime: Date? = nil, maxRecords: Int32? = nil, marker: String? = nil, sourceType: String? = nil, endTime: Date? = nil, sourceIdentifier: String? = nil, duration: Int32? = nil) {
            self.startTime = startTime
            self.maxRecords = maxRecords
            self.marker = marker
            self.sourceType = sourceType
            self.endTime = endTime
            self.sourceIdentifier = sourceIdentifier
            self.duration = duration
        }

    }

    public struct CacheNode: Serializable, Initializable {
        /// The ID of the primary node to which this read replica node is synchronized. If this field is empty, this node is not associated with a primary cache cluster.
        var sourceCacheNodeId: String? = nil
        /// The Availability Zone where this node was created and now resides.
        var customerAvailabilityZone: String? = nil
        /// The cache node identifier. A node ID is a numeric identifier (0001, 0002, etc.). The combination of cluster ID and node ID uniquely identifies every cache node used in a customer's AWS account.
        var cacheNodeId: String? = nil
        /// The current state of this cache node.
        var cacheNodeStatus: String? = nil
        /// The status of the parameter group applied to this cache node.
        var parameterGroupStatus: String? = nil
        /// The date and time when the cache node was created.
        var cacheNodeCreateTime: Date? = nil
        /// The hostname for connecting to this cache node.
        var endpoint: Endpoint? = nil

        public init() {}

        public init(sourceCacheNodeId: String? = nil, customerAvailabilityZone: String? = nil, cacheNodeId: String? = nil, cacheNodeStatus: String? = nil, parameterGroupStatus: String? = nil, cacheNodeCreateTime: Date? = nil, endpoint: Endpoint? = nil) {
            self.sourceCacheNodeId = sourceCacheNodeId
            self.customerAvailabilityZone = customerAvailabilityZone
            self.cacheNodeId = cacheNodeId
            self.cacheNodeStatus = cacheNodeStatus
            self.parameterGroupStatus = parameterGroupStatus
            self.cacheNodeCreateTime = cacheNodeCreateTime
            self.endpoint = endpoint
        }

    }

    public struct CreateCacheClusterMessage: Serializable, Initializable {
        ///  Reserved parameter. The password used to access a password protected server. Password constraints:   Must be only printable ASCII characters.   Must be at least 16 characters and no more than 128 characters in length.   Cannot contain any of the following characters: '/', '"', or "@".    For more information, see AUTH password at Redis.
        var authToken: String? = nil
        /// Specifies whether the nodes in this Memcached cluster are created in a single Availability Zone or created across multiple Availability Zones in the cluster's region. This parameter is only supported for Memcached cache clusters. If the AZMode and PreferredAvailabilityZones are not specified, ElastiCache assumes single-az mode.
        var aZMode: String? = nil
        /// A single-element string list containing an Amazon Resource Name (ARN) that uniquely identifies a Redis RDB snapshot file stored in Amazon S3. The snapshot file is used to populate the node group (shard). The Amazon S3 object name in the ARN cannot contain any commas.  This parameter is only valid if the Engine parameter is redis.  Example of an Amazon S3 ARN: arn:aws:s3:::my_bucket/snapshot1.rdb 
        var snapshotArns: [String]? = nil
        /// A list of security group names to associate with this cache cluster. Use this parameter only when you are creating a cache cluster outside of an Amazon Virtual Private Cloud (Amazon VPC).
        var cacheSecurityGroupNames: [String]? = nil
        /// The initial number of cache nodes that the cache cluster has. For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20. If you need more than 20 nodes for your Memcached cluster, please fill out the ElastiCache Limit Increase Request form at http://aws.amazon.com/contact-us/elasticache-node-limit-request/.
        var numCacheNodes: Int32? = nil
        /// A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
        var tags: [Tag]? = nil
        /// A list of the Availability Zones in which cache nodes are created. The order of the zones in the list is not important. This option is only supported on Memcached.  If you are creating your cache cluster in an Amazon VPC (recommended) you can only locate nodes in Availability Zones that are associated with the subnets in the selected subnet group. The number of Availability Zones listed must equal the value of NumCacheNodes.  If you want all the nodes in the same Availability Zone, use PreferredAvailabilityZone instead, or repeat the Availability Zone multiple times in the list. Default: System chosen Availability Zones.
        var preferredAvailabilityZones: [String]? = nil
        /// One or more VPC security groups associated with the cache cluster. Use this parameter only when you are creating a cache cluster in an Amazon Virtual Private Cloud (Amazon VPC).
        var securityGroupIds: [String]? = nil
        /// The name of a Redis snapshot from which to restore data into the new node group (shard). The snapshot status changes to restoring while the new node group (shard) is being created.  This parameter is only valid if the Engine parameter is redis. 
        var snapshotName: String? = nil
        /// This parameter is currently disabled.
        var autoMinorVersionUpgrade: Bool? = nil
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.  The Amazon SNS topic owner must be the same as the cache cluster owner. 
        var notificationTopicArn: String? = nil
        /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard). Example: 05:00-09:00  If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.  Note: This parameter is only valid if the Engine parameter is redis.
        var snapshotWindow: String? = nil
        /// The version number of the cache engine to be used for this cache cluster. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.  Important: You can upgrade to a newer engine version (see Selecting a Cache Engine and Version), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cache cluster or replication group and create it anew with the earlier engine version. 
        var engineVersion: String? = nil
        ///  Due to current limitations on Redis (cluster mode disabled), this operation or parameter is not supported on Redis (cluster mode enabled) replication groups.  The ID of the replication group to which this cache cluster should belong. If this parameter is specified, the cache cluster is added to the specified replication group as a read replica; otherwise, the cache cluster is a standalone primary that is not part of any replication group. If the specified replication group is Multi-AZ enabled and the Availability Zone is not specified, the cache cluster is created in Availability Zones that provide the best spread of read replicas across Availability Zones.  This parameter is only valid if the Engine parameter is redis. 
        var replicationGroupId: String? = nil
        /// The EC2 Availability Zone in which the cache cluster is created. All nodes belonging to this Memcached cache cluster are placed in the preferred Availability Zone. If you want to create your nodes across multiple Availability Zones, use PreferredAvailabilityZones. Default: System chosen Availability Zone.
        var preferredAvailabilityZone: String? = nil
        /// The name of the subnet group to be used for the cache cluster. Use this parameter only when you are creating a cache cluster in an Amazon Virtual Private Cloud (Amazon VPC).  If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see Subnets and Subnet Groups. 
        var cacheSubnetGroupName: String? = nil
        /// Specifies the weekly time range during which maintenance on the cache cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are: Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:    sun     mon     tue     wed     thu     fri     sat    Example: sun:23:00-mon:01:30 
        var preferredMaintenanceWindow: String? = nil
        /// The name of the cache engine to be used for this cache cluster. Valid values for this parameter are: memcached | redis 
        var engine: String? = nil
        /// The compute and memory capacity of the nodes in the node group (shard). Valid node types are as follows:   General purpose:   Current generation: cache.t2.micro, cache.t2.small, cache.t2.medium, cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge, cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge    Previous generation: cache.t1.micro, cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge      Compute optimized: cache.c1.xlarge    Memory optimized:   Current generation: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge, cache.r3.4xlarge, cache.r3.8xlarge    Previous generation: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge       Notes:    All T2 instances are created in an Amazon Virtual Private Cloud (Amazon VPC).   Redis backup/restore is not supported for Redis (cluster mode disabled) T1 and T2 instances. Backup/restore is supported on Redis (cluster mode enabled) T2 instances.   Redis Append-only files (AOF) functionality is not supported for T1 or T2 instances.   For a complete listing of node types and specifications, see Amazon ElastiCache Product Features and Details and either Cache Node Type-Specific Parameters for Memcached or Cache Node Type-Specific Parameters for Redis.
        var cacheNodeType: String? = nil
        /// The name of the parameter group to associate with this cache cluster. If this argument is omitted, the default parameter group for the specified engine is used. You cannot use any parameter group which has cluster-enabled='yes' when creating a cluster.
        var cacheParameterGroupName: String? = nil
        /// The node group (shard) identifier. This parameter is stored as a lowercase string.  Constraints:    A name must contain from 1 to 20 alphanumeric characters or hyphens.   The first character must be a letter.   A name cannot end with a hyphen or contain two consecutive hyphens.  
        var cacheClusterId: String = ""
        /// The port number on which each of the cache nodes accepts connections.
        var port: Int32? = nil
        /// The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot taken today is retained for 5 days before being deleted.  This parameter is only valid if the Engine parameter is redis.  Default: 0 (i.e., automatic backups are disabled for this cache cluster).
        var snapshotRetentionLimit: Int32? = nil

        public init() {}

        public init(authToken: String? = nil, aZMode: String? = nil, snapshotArns: [String]? = nil, cacheSecurityGroupNames: [String]? = nil, numCacheNodes: Int32? = nil, tags: [Tag]? = nil, preferredAvailabilityZones: [String]? = nil, securityGroupIds: [String]? = nil, snapshotName: String? = nil, autoMinorVersionUpgrade: Bool? = nil, notificationTopicArn: String? = nil, snapshotWindow: String? = nil, engineVersion: String? = nil, replicationGroupId: String? = nil, preferredAvailabilityZone: String? = nil, cacheSubnetGroupName: String? = nil, preferredMaintenanceWindow: String? = nil, engine: String? = nil, cacheNodeType: String? = nil, cacheParameterGroupName: String? = nil, cacheClusterId: String, port: Int32? = nil, snapshotRetentionLimit: Int32? = nil) {
            self.authToken = authToken
            self.aZMode = aZMode
            self.snapshotArns = snapshotArns
            self.cacheSecurityGroupNames = cacheSecurityGroupNames
            self.numCacheNodes = numCacheNodes
            self.tags = tags
            self.preferredAvailabilityZones = preferredAvailabilityZones
            self.securityGroupIds = securityGroupIds
            self.snapshotName = snapshotName
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.notificationTopicArn = notificationTopicArn
            self.snapshotWindow = snapshotWindow
            self.engineVersion = engineVersion
            self.replicationGroupId = replicationGroupId
            self.preferredAvailabilityZone = preferredAvailabilityZone
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.engine = engine
            self.cacheNodeType = cacheNodeType
            self.cacheParameterGroupName = cacheParameterGroupName
            self.cacheClusterId = cacheClusterId
            self.port = port
            self.snapshotRetentionLimit = snapshotRetentionLimit
        }

    }

    public struct RemoveTagsFromResourceMessage: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the resource from which you want the tags removed, for example arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster or arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        var resourceName: String = ""
        /// A list of TagKeys identifying the tags you want removed from the named resource.
        var tagKeys: [String] = []

        public init() {}

        public init(resourceName: String, tagKeys: [String]) {
            self.resourceName = resourceName
            self.tagKeys = tagKeys
        }

    }

    public struct DeleteReplicationGroupResult: Serializable, Initializable {
        var replicationGroup: ReplicationGroup? = nil

        public init() {}

        public init(replicationGroup: ReplicationGroup? = nil) {
            self.replicationGroup = replicationGroup
        }

    }

    public struct CacheParameterGroupsMessage: Serializable, Initializable {
        /// Provides an identifier to allow retrieval of paginated results.
        var marker: String? = nil
        /// A list of cache parameter groups. Each element in the list contains detailed information about one cache parameter group.
        var cacheParameterGroups: [CacheParameterGroup]? = nil

        public init() {}

        public init(marker: String? = nil, cacheParameterGroups: [CacheParameterGroup]? = nil) {
            self.marker = marker
            self.cacheParameterGroups = cacheParameterGroups
        }

    }

    public struct CacheEngineVersion: Serializable, Initializable {
        /// The description of the cache engine.
        var cacheEngineDescription: String? = nil
        /// The name of the cache parameter group family associated with this cache engine. Valid values are: memcached1.4 | redis2.6 | redis2.8 | redis3.2 
        var cacheParameterGroupFamily: String? = nil
        /// The name of the cache engine.
        var engine: String? = nil
        /// The version number of the cache engine.
        var engineVersion: String? = nil
        /// The description of the cache engine version.
        var cacheEngineVersionDescription: String? = nil

        public init() {}

        public init(cacheEngineDescription: String? = nil, cacheParameterGroupFamily: String? = nil, engine: String? = nil, engineVersion: String? = nil, cacheEngineVersionDescription: String? = nil) {
            self.cacheEngineDescription = cacheEngineDescription
            self.cacheParameterGroupFamily = cacheParameterGroupFamily
            self.engine = engine
            self.engineVersion = engineVersion
            self.cacheEngineVersionDescription = cacheEngineVersionDescription
        }

    }

    public struct CacheParameterGroupDetails: Serializable, Initializable {
        /// A list of parameters specific to a particular cache node type. Each element in the list contains detailed information about one parameter.
        var cacheNodeTypeSpecificParameters: [CacheNodeTypeSpecificParameter]? = nil
        /// Provides an identifier to allow retrieval of paginated results.
        var marker: String? = nil
        /// A list of Parameter instances.
        var parameters: [Parameter]? = nil

        public init() {}

        public init(cacheNodeTypeSpecificParameters: [CacheNodeTypeSpecificParameter]? = nil, marker: String? = nil, parameters: [Parameter]? = nil) {
            self.cacheNodeTypeSpecificParameters = cacheNodeTypeSpecificParameters
            self.marker = marker
            self.parameters = parameters
        }

    }

    public struct DescribeSnapshotsMessage: Serializable, Initializable {
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 50 Constraints: minimum 20; maximum 50.
        var maxRecords: Int32? = nil
        /// A Boolean value which if true, the node group (shard) configuration is included in the snapshot description.
        var showNodeGroupConfig: Bool? = nil
        /// A user-supplied replication group identifier. If this parameter is specified, only snapshots associated with that specific replication group are described.
        var replicationGroupId: String? = nil
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        var marker: String? = nil
        /// If set to system, the output shows snapshots that were automatically created by ElastiCache. If set to user the output shows snapshots that were manually created. If omitted, the output shows both automatically and manually created snapshots.
        var snapshotSource: String? = nil
        /// A user-supplied cluster identifier. If this parameter is specified, only snapshots associated with that specific cache cluster are described.
        var cacheClusterId: String? = nil
        /// A user-supplied name of the snapshot. If this parameter is specified, only this snapshot are described.
        var snapshotName: String? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, showNodeGroupConfig: Bool? = nil, replicationGroupId: String? = nil, marker: String? = nil, snapshotSource: String? = nil, cacheClusterId: String? = nil, snapshotName: String? = nil) {
            self.maxRecords = maxRecords
            self.showNodeGroupConfig = showNodeGroupConfig
            self.replicationGroupId = replicationGroupId
            self.marker = marker
            self.snapshotSource = snapshotSource
            self.cacheClusterId = cacheClusterId
            self.snapshotName = snapshotName
        }

    }

    public struct RevokeCacheSecurityGroupIngressResult: Serializable, Initializable {
        var cacheSecurityGroup: CacheSecurityGroup? = nil

        public init() {}

        public init(cacheSecurityGroup: CacheSecurityGroup? = nil) {
            self.cacheSecurityGroup = cacheSecurityGroup
        }

    }

    public struct EC2SecurityGroup: Serializable, Initializable {
        /// The AWS account ID of the Amazon EC2 security group owner.
        var eC2SecurityGroupOwnerId: String? = nil
        /// The status of the Amazon EC2 security group.
        var status: String? = nil
        /// The name of the Amazon EC2 security group.
        var eC2SecurityGroupName: String? = nil

        public init() {}

        public init(eC2SecurityGroupOwnerId: String? = nil, status: String? = nil, eC2SecurityGroupName: String? = nil) {
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.status = status
            self.eC2SecurityGroupName = eC2SecurityGroupName
        }

    }

    public struct Subnet: Serializable, Initializable {
        /// The unique identifier for the subnet.
        var subnetIdentifier: String? = nil
        /// The Availability Zone associated with the subnet.
        var subnetAvailabilityZone: AvailabilityZone? = nil

        public init() {}

        public init(subnetIdentifier: String? = nil, subnetAvailabilityZone: AvailabilityZone? = nil) {
            self.subnetIdentifier = subnetIdentifier
            self.subnetAvailabilityZone = subnetAvailabilityZone
        }

    }

    public struct Parameter: Serializable, Initializable {
        /// The value of the parameter.
        var parameterValue: String? = nil
        /// The valid range of values for the parameter.
        var allowedValues: String? = nil
        /// The valid data type for the parameter.
        var dataType: String? = nil
        /// The name of the parameter.
        var parameterName: String? = nil
        /// The source of the parameter.
        var source: String? = nil
        /// Indicates whether (true) or not (false) the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed.
        var isModifiable: Bool? = nil
        /// The earliest cache engine version to which the parameter can apply.
        var minimumEngineVersion: String? = nil
        /// Indicates whether a change to the parameter is applied immediately or requires a reboot for the change to be applied. You can force a reboot or wait until the next maintenance window's reboot. For more information, see Rebooting a Cluster.
        var changeType: String? = nil
        /// A description of the parameter.
        var description: String? = nil

        public init() {}

        public init(parameterValue: String? = nil, allowedValues: String? = nil, dataType: String? = nil, parameterName: String? = nil, source: String? = nil, isModifiable: Bool? = nil, minimumEngineVersion: String? = nil, changeType: String? = nil, description: String? = nil) {
            self.parameterValue = parameterValue
            self.allowedValues = allowedValues
            self.dataType = dataType
            self.parameterName = parameterName
            self.source = source
            self.isModifiable = isModifiable
            self.minimumEngineVersion = minimumEngineVersion
            self.changeType = changeType
            self.description = description
        }

    }

    public struct CacheParameterGroupStatus: Serializable, Initializable {
        /// The name of the cache parameter group.
        var cacheParameterGroupName: String? = nil
        /// A list of the cache node IDs which need to be rebooted for parameter changes to be applied. A node ID is a numeric identifier (0001, 0002, etc.).
        var cacheNodeIdsToReboot: [String]? = nil
        /// The status of parameter updates.
        var parameterApplyStatus: String? = nil

        public init() {}

        public init(cacheParameterGroupName: String? = nil, cacheNodeIdsToReboot: [String]? = nil, parameterApplyStatus: String? = nil) {
            self.cacheParameterGroupName = cacheParameterGroupName
            self.cacheNodeIdsToReboot = cacheNodeIdsToReboot
            self.parameterApplyStatus = parameterApplyStatus
        }

    }

    public struct Event: Serializable, Initializable {
        /// The identifier for the source of the event. For example, if the event occurred at the cache cluster level, the identifier would be the name of the cache cluster.
        var sourceIdentifier: String? = nil
        /// The text of the event.
        var message: String? = nil
        /// Specifies the origin of this event - a cache cluster, a parameter group, a security group, etc.
        var sourceType: String? = nil
        /// The date and time when the event occurred.
        var date: Date? = nil

        public init() {}

        public init(sourceIdentifier: String? = nil, message: String? = nil, sourceType: String? = nil, date: Date? = nil) {
            self.sourceIdentifier = sourceIdentifier
            self.message = message
            self.sourceType = sourceType
            self.date = date
        }

    }

    public struct DeleteCacheClusterResult: Serializable, Initializable {
        var cacheCluster: CacheCluster? = nil

        public init() {}

        public init(cacheCluster: CacheCluster? = nil) {
            self.cacheCluster = cacheCluster
        }

    }

    public struct CacheNodeTypeSpecificValue: Serializable, Initializable {
        /// The value for the cache node type.
        var value: String? = nil
        /// The cache node type for which this value applies.
        var cacheNodeType: String? = nil

        public init() {}

        public init(value: String? = nil, cacheNodeType: String? = nil) {
            self.value = value
            self.cacheNodeType = cacheNodeType
        }

    }

    public struct CacheCluster: Serializable, Initializable {
        var pendingModifiedValues: PendingModifiedValues? = nil
        /// The number of days for which ElastiCache retains automatic cache cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.   If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off. 
        var snapshotRetentionLimit: Int32? = nil
        /// The name of the cache subnet group associated with the cache cluster.
        var cacheSubnetGroupName: String? = nil
        /// The date and time when the cache cluster was created.
        var cacheClusterCreateTime: Date? = nil
        /// The number of cache nodes in the cache cluster. For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.
        var numCacheNodes: Int32? = nil
        /// The current state of this cache cluster, one of the following values: available, creating, deleted, deleting, incompatible-network, modifying, rebooting cache cluster nodes, restore-failed, or snapshotting.
        var cacheClusterStatus: String? = nil
        /// This parameter is currently disabled.
        var autoMinorVersionUpgrade: Bool? = nil
        /// A list of cache nodes that are members of the cache cluster.
        var cacheNodes: [CacheNode]? = nil
        /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cache cluster. Example: 05:00-09:00 
        var snapshotWindow: String? = nil
        var notificationConfiguration: NotificationConfiguration? = nil
        /// The version of the cache engine that is used in this cache cluster.
        var engineVersion: String? = nil
        /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:    sun     mon     tue     wed     thu     fri     sat    Example: sun:23:00-mon:01:30 
        var preferredMaintenanceWindow: String? = nil
        var configurationEndpoint: Endpoint? = nil
        /// The name of the Availability Zone in which the cache cluster is located or "Multiple" if the cache nodes are located in different Availability Zones.
        var preferredAvailabilityZone: String? = nil
        /// A list of VPC Security Groups associated with the cache cluster.
        var securityGroups: [SecurityGroupMembership]? = nil
        /// The replication group to which this cache cluster belongs. If this field is empty, the cache cluster is not associated with any replication group.
        var replicationGroupId: String? = nil
        var cacheParameterGroup: CacheParameterGroupStatus? = nil
        /// A list of cache security group elements, composed of name and status sub-elements.
        var cacheSecurityGroups: [CacheSecurityGroupMembership]? = nil
        /// The URL of the web page where you can download the latest ElastiCache client library.
        var clientDownloadLandingPage: String? = nil
        /// The user-supplied identifier of the cache cluster. This identifier is a unique key that identifies a cache cluster.
        var cacheClusterId: String? = nil
        /// The name of the compute and memory capacity node type for the cache cluster. Valid node types are as follows:   General purpose:   Current generation: cache.t2.micro, cache.t2.small, cache.t2.medium, cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge, cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge    Previous generation: cache.t1.micro, cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge      Compute optimized: cache.c1.xlarge    Memory optimized:   Current generation: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge, cache.r3.4xlarge, cache.r3.8xlarge    Previous generation: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge       Notes:    All T2 instances are created in an Amazon Virtual Private Cloud (Amazon VPC).   Redis backup/restore is not supported for Redis (cluster mode disabled) T1 and T2 instances. Backup/restore is supported on Redis (cluster mode enabled) T2 instances.   Redis Append-only files (AOF) functionality is not supported for T1 or T2 instances.   For a complete listing of node types and specifications, see Amazon ElastiCache Product Features and Details and either Cache Node Type-Specific Parameters for Memcached or Cache Node Type-Specific Parameters for Redis.
        var cacheNodeType: String? = nil
        /// The name of the cache engine (memcached or redis) to be used for this cache cluster.
        var engine: String? = nil

        public init() {}

        public init(pendingModifiedValues: PendingModifiedValues? = nil, snapshotRetentionLimit: Int32? = nil, cacheSubnetGroupName: String? = nil, cacheClusterCreateTime: Date? = nil, numCacheNodes: Int32? = nil, cacheClusterStatus: String? = nil, autoMinorVersionUpgrade: Bool? = nil, cacheNodes: [CacheNode]? = nil, snapshotWindow: String? = nil, notificationConfiguration: NotificationConfiguration? = nil, engineVersion: String? = nil, preferredMaintenanceWindow: String? = nil, configurationEndpoint: Endpoint? = nil, preferredAvailabilityZone: String? = nil, securityGroups: [SecurityGroupMembership]? = nil, replicationGroupId: String? = nil, cacheParameterGroup: CacheParameterGroupStatus? = nil, cacheSecurityGroups: [CacheSecurityGroupMembership]? = nil, clientDownloadLandingPage: String? = nil, cacheClusterId: String? = nil, cacheNodeType: String? = nil, engine: String? = nil) {
            self.pendingModifiedValues = pendingModifiedValues
            self.snapshotRetentionLimit = snapshotRetentionLimit
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.cacheClusterCreateTime = cacheClusterCreateTime
            self.numCacheNodes = numCacheNodes
            self.cacheClusterStatus = cacheClusterStatus
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.cacheNodes = cacheNodes
            self.snapshotWindow = snapshotWindow
            self.notificationConfiguration = notificationConfiguration
            self.engineVersion = engineVersion
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.configurationEndpoint = configurationEndpoint
            self.preferredAvailabilityZone = preferredAvailabilityZone
            self.securityGroups = securityGroups
            self.replicationGroupId = replicationGroupId
            self.cacheParameterGroup = cacheParameterGroup
            self.cacheSecurityGroups = cacheSecurityGroups
            self.clientDownloadLandingPage = clientDownloadLandingPage
            self.cacheClusterId = cacheClusterId
            self.cacheNodeType = cacheNodeType
            self.engine = engine
        }

    }

    public struct CacheSecurityGroupMessage: Serializable, Initializable {
        /// Provides an identifier to allow retrieval of paginated results.
        var marker: String? = nil
        /// A list of cache security groups. Each element in the list contains detailed information about one group.
        var cacheSecurityGroups: [CacheSecurityGroup]? = nil

        public init() {}

        public init(marker: String? = nil, cacheSecurityGroups: [CacheSecurityGroup]? = nil) {
            self.marker = marker
            self.cacheSecurityGroups = cacheSecurityGroups
        }

    }

    public struct NodeGroupMember: Serializable, Initializable {
        var readEndpoint: Endpoint? = nil
        /// The role that is currently assigned to the node - primary or replica.
        var currentRole: String? = nil
        /// The name of the Availability Zone in which the node is located.
        var preferredAvailabilityZone: String? = nil
        /// The ID of the node within its cache cluster. A node ID is a numeric identifier (0001, 0002, etc.).
        var cacheNodeId: String? = nil
        /// The ID of the cache cluster to which the node belongs.
        var cacheClusterId: String? = nil

        public init() {}

        public init(readEndpoint: Endpoint? = nil, currentRole: String? = nil, preferredAvailabilityZone: String? = nil, cacheNodeId: String? = nil, cacheClusterId: String? = nil) {
            self.readEndpoint = readEndpoint
            self.currentRole = currentRole
            self.preferredAvailabilityZone = preferredAvailabilityZone
            self.cacheNodeId = cacheNodeId
            self.cacheClusterId = cacheClusterId
        }

    }

    public struct PurchaseReservedCacheNodesOfferingMessage: Serializable, Initializable {
        /// A customer-specified identifier to track this reservation.  The Reserved Cache Node ID is an unique customer-specified identifier to track this reservation. If this parameter is not specified, ElastiCache automatically generates an identifier for the reservation.  Example: myreservationID
        var reservedCacheNodeId: String? = nil
        /// The number of cache node instances to reserve. Default: 1 
        var cacheNodeCount: Int32? = nil
        /// The ID of the reserved cache node offering to purchase. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706 
        var reservedCacheNodesOfferingId: String = ""

        public init() {}

        public init(reservedCacheNodeId: String? = nil, cacheNodeCount: Int32? = nil, reservedCacheNodesOfferingId: String) {
            self.reservedCacheNodeId = reservedCacheNodeId
            self.cacheNodeCount = cacheNodeCount
            self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
        }

    }

    public struct DescribeSnapshotsListMessage: Serializable, Initializable {
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        var marker: String? = nil
        /// A list of snapshots. Each item in the list contains detailed information about one snapshot.
        var snapshots: [Snapshot]? = nil

        public init() {}

        public init(marker: String? = nil, snapshots: [Snapshot]? = nil) {
            self.marker = marker
            self.snapshots = snapshots
        }

    }

    public struct CacheSecurityGroupMembership: Serializable, Initializable {
        /// The membership status in the cache security group. The status changes when a cache security group is modified, or when the cache security groups assigned to a cache cluster are modified.
        var status: String? = nil
        /// The name of the cache security group.
        var cacheSecurityGroupName: String? = nil

        public init() {}

        public init(status: String? = nil, cacheSecurityGroupName: String? = nil) {
            self.status = status
            self.cacheSecurityGroupName = cacheSecurityGroupName
        }

    }

    public struct ModifyCacheParameterGroupMessage: Serializable, Initializable {
        /// The name of the cache parameter group to modify.
        var cacheParameterGroupName: String = ""
        /// An array of parameter names and values for the parameter update. You must supply at least one parameter name and value; subsequent arguments are optional. A maximum of 20 parameters may be modified per request.
        var parameterNameValues: [ParameterNameValue] = []

        public init() {}

        public init(cacheParameterGroupName: String, parameterNameValues: [ParameterNameValue]) {
            self.cacheParameterGroupName = cacheParameterGroupName
            self.parameterNameValues = parameterNameValues
        }

    }

    public struct AddTagsToResourceMessage: Serializable, Initializable {
        /// A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
        var tags: [Tag] = []
        /// The Amazon Resource Name (ARN) of the resource to which the tags are to be added, for example arn:aws:elasticache:us-west-2:0123456789:cluster:myCluster or arn:aws:elasticache:us-west-2:0123456789:snapshot:mySnapshot. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        var resourceName: String = ""

        public init() {}

        public init(tags: [Tag], resourceName: String) {
            self.tags = tags
            self.resourceName = resourceName
        }

    }

    public struct RebootCacheClusterResult: Serializable, Initializable {
        var cacheCluster: CacheCluster? = nil

        public init() {}

        public init(cacheCluster: CacheCluster? = nil) {
            self.cacheCluster = cacheCluster
        }

    }

    public struct ModifyCacheSubnetGroupMessage: Serializable, Initializable {
        /// The name for the cache subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters or hyphens. Example: mysubnetgroup 
        var cacheSubnetGroupName: String = ""
        /// The EC2 subnet IDs for the cache subnet group.
        var subnetIds: [String]? = nil
        /// A description of the cache subnet group.
        var cacheSubnetGroupDescription: String? = nil

        public init() {}

        public init(cacheSubnetGroupName: String, subnetIds: [String]? = nil, cacheSubnetGroupDescription: String? = nil) {
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.subnetIds = subnetIds
            self.cacheSubnetGroupDescription = cacheSubnetGroupDescription
        }

    }

    public struct ModifyCacheClusterResult: Serializable, Initializable {
        var cacheCluster: CacheCluster? = nil

        public init() {}

        public init(cacheCluster: CacheCluster? = nil) {
            self.cacheCluster = cacheCluster
        }

    }

    public struct ModifyCacheClusterMessage: Serializable, Initializable {
        /// A list of cache node IDs to be removed. A node ID is a numeric identifier (0001, 0002, etc.). This parameter is only valid when NumCacheNodes is less than the existing number of cache nodes. The number of cache node IDs supplied in this parameter must match the difference between the existing number of cache nodes in the cluster or pending cache nodes, whichever is greater, and the value of NumCacheNodes in the request. For example: If you have 3 active cache nodes, 7 pending cache nodes, and the number of cache nodes in this ModifyCacheCluser call is 5, you must list 2 (7 - 5) cache node IDs to remove.
        var cacheNodeIdsToRemove: [String]? = nil
        /// A list of cache security group names to authorize on this cache cluster. This change is asynchronously applied as soon as possible. You can use this parameter only with clusters that are created outside of an Amazon Virtual Private Cloud (Amazon VPC). Constraints: Must contain no more than 255 alphanumeric characters. Must not be "Default".
        var cacheSecurityGroupNames: [String]? = nil
        /// The number of cache nodes that the cache cluster should have. If the value for NumCacheNodes is greater than the sum of the number of current cache nodes and the number of cache nodes pending creation (which may be zero), more nodes are added. If the value is less than the number of existing cache nodes, nodes are removed. If the value is equal to the number of current cache nodes, any pending add or remove requests are canceled. If you are removing cache nodes, you must use the CacheNodeIdsToRemove parameter to provide the IDs of the specific cache nodes to remove. For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.  Adding or removing Memcached cache nodes can be applied immediately or as a pending operation (see ApplyImmediately). A pending operation to modify the number of cache nodes in a cluster during its maintenance window, whether by adding or removing nodes in accordance with the scale out architecture, is not queued. The customer's latest request to add or remove nodes to the cluster overrides any previous pending operations to modify the number of cache nodes in the cluster. For example, a request to remove 2 nodes would override a previous pending operation to remove 3 nodes. Similarly, a request to add 2 nodes would override a previous pending operation to remove 3 nodes and vice versa. As Memcached cache nodes may now be provisioned in different Availability Zones with flexible cache node placement, a request to add nodes does not automatically override a previous pending operation to add nodes. The customer can modify the previous pending operation to add more nodes or explicitly cancel the pending request and retry the new request. To cancel pending operations to modify the number of cache nodes in a cluster, use the ModifyCacheCluster request and set NumCacheNodes equal to the number of cache nodes currently in the cache cluster. 
        var numCacheNodes: Int32? = nil
        /// The status of the Amazon SNS notification topic. Notifications are sent only if the status is active. Valid values: active | inactive 
        var notificationTopicStatus: String? = nil
        /// Specifies the VPC Security Groups associated with the cache cluster. This parameter can be used only with clusters that are created in an Amazon Virtual Private Cloud (Amazon VPC).
        var securityGroupIds: [String]? = nil
        /// If true, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the PreferredMaintenanceWindow setting for the cache cluster. If false, changes to the cache cluster are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first.  If you perform a ModifyCacheCluster before a pending modification is applied, the pending modification is replaced by the newer modification.  Valid values: true | false  Default: false 
        var applyImmediately: Bool? = nil
        /// This parameter is currently disabled.
        var autoMinorVersionUpgrade: Bool? = nil
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.  The Amazon SNS topic owner must be same as the cache cluster owner. 
        var notificationTopicArn: String? = nil
        /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your cache cluster. 
        var snapshotWindow: String? = nil
        /// The upgraded version of the cache engine to be run on the cache nodes.  Important: You can upgrade to a newer engine version (see Selecting a Cache Engine and Version), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cache cluster and create it anew with the earlier engine version. 
        var engineVersion: String? = nil
        /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:    sun     mon     tue     wed     thu     fri     sat    Example: sun:23:00-mon:01:30 
        var preferredMaintenanceWindow: String? = nil
        /// The name of the cache parameter group to apply to this cache cluster. This change is asynchronously applied as soon as possible for parameters when the ApplyImmediately parameter is specified as true for this request.
        var cacheParameterGroupName: String? = nil
        /// The list of Availability Zones where the new Memcached cache nodes are created. This parameter is only valid when NumCacheNodes in the request is greater than the sum of the number of active cache nodes and the number of cache nodes pending creation (which may be zero). The number of Availability Zones supplied in this list must match the cache nodes being added in this request. This option is only supported on Memcached clusters. Scenarios:    Scenario 1: You have 3 active nodes and wish to add 2 nodes. Specify NumCacheNodes=5 (3 + 2) and optionally specify two Availability Zones for the two new nodes.    Scenario 2: You have 3 active nodes and 2 nodes pending creation (from the scenario 1 call) and want to add 1 more node. Specify NumCacheNodes=6 ((3 + 2) + 1) and optionally specify an Availability Zone for the new node.    Scenario 3: You want to cancel all pending operations. Specify NumCacheNodes=3 to cancel all pending operations.   The Availability Zone placement of nodes pending creation cannot be modified. If you wish to cancel any nodes pending creation, add 0 nodes by setting NumCacheNodes to the number of current nodes. If cross-az is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes can be located in different Availability Zones. For guidance on how to move existing Memcached nodes to different Availability Zones, see the Availability Zone Considerations section of Cache Node Considerations for Memcached.  Impact of new add/remove requests upon pending requests    Scenario-1   Pending Action: Delete   New Request: Delete   Result: The new delete, pending or immediate, replaces the pending delete.     Scenario-2   Pending Action: Delete   New Request: Create   Result: The new create, pending or immediate, replaces the pending delete.     Scenario-3   Pending Action: Create   New Request: Delete   Result: The new delete, pending or immediate, replaces the pending create.     Scenario-4   Pending Action: Create   New Request: Create   Result: The new create is added to the pending create.   Important: If the new create request is Apply Immediately - Yes, all creates are performed immediately. If the new create request is Apply Immediately - No, all creates are pending.     
        var newAvailabilityZones: [String]? = nil
        /// A valid cache node type that you want to scale this cache cluster up to.
        var cacheNodeType: String? = nil
        /// The number of days for which ElastiCache retains automatic cache cluster snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.  If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off. 
        var snapshotRetentionLimit: Int32? = nil
        /// The cache cluster identifier. This value is stored as a lowercase string.
        var cacheClusterId: String = ""
        /// Specifies whether the new nodes in this Memcached cache cluster are all created in a single Availability Zone or created across multiple Availability Zones. Valid values: single-az | cross-az. This option is only supported for Memcached cache clusters.  You cannot specify single-az if the Memcached cache cluster already has cache nodes in different Availability Zones. If cross-az is specified, existing Memcached nodes remain in their current Availability Zone. Only newly created nodes are located in different Availability Zones. For instructions on how to move existing Memcached nodes to different Availability Zones, see the Availability Zone Considerations section of Cache Node Considerations for Memcached. 
        var aZMode: String? = nil

        public init() {}

        public init(cacheNodeIdsToRemove: [String]? = nil, cacheSecurityGroupNames: [String]? = nil, numCacheNodes: Int32? = nil, notificationTopicStatus: String? = nil, securityGroupIds: [String]? = nil, applyImmediately: Bool? = nil, autoMinorVersionUpgrade: Bool? = nil, notificationTopicArn: String? = nil, snapshotWindow: String? = nil, engineVersion: String? = nil, preferredMaintenanceWindow: String? = nil, cacheParameterGroupName: String? = nil, newAvailabilityZones: [String]? = nil, cacheNodeType: String? = nil, snapshotRetentionLimit: Int32? = nil, cacheClusterId: String, aZMode: String? = nil) {
            self.cacheNodeIdsToRemove = cacheNodeIdsToRemove
            self.cacheSecurityGroupNames = cacheSecurityGroupNames
            self.numCacheNodes = numCacheNodes
            self.notificationTopicStatus = notificationTopicStatus
            self.securityGroupIds = securityGroupIds
            self.applyImmediately = applyImmediately
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.notificationTopicArn = notificationTopicArn
            self.snapshotWindow = snapshotWindow
            self.engineVersion = engineVersion
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.cacheParameterGroupName = cacheParameterGroupName
            self.newAvailabilityZones = newAvailabilityZones
            self.cacheNodeType = cacheNodeType
            self.snapshotRetentionLimit = snapshotRetentionLimit
            self.cacheClusterId = cacheClusterId
            self.aZMode = aZMode
        }

    }

    public struct DescribeEngineDefaultParametersMessage: Serializable, Initializable {
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        var marker: String? = nil
        /// The name of the cache parameter group family. Valid values are: memcached1.4 | redis2.6 | redis2.8 | redis3.2 
        var cacheParameterGroupFamily: String = ""
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        var maxRecords: Int32? = nil

        public init() {}

        public init(marker: String? = nil, cacheParameterGroupFamily: String, maxRecords: Int32? = nil) {
            self.marker = marker
            self.cacheParameterGroupFamily = cacheParameterGroupFamily
            self.maxRecords = maxRecords
        }

    }

    public struct CopySnapshotMessage: Serializable, Initializable {
        /// A name for the snapshot copy. ElastiCache does not permit overwriting a snapshot, therefore this name must be unique within its context - ElastiCache or an Amazon S3 bucket if exporting.
        var targetSnapshotName: String = ""
        /// The Amazon S3 bucket to which the snapshot is exported. This parameter is used only when exporting a snapshot for external access. When using this parameter to export a snapshot, be sure Amazon ElastiCache has the needed permissions to this S3 bucket. For more information, see Step 2: Grant ElastiCache Access to Your Amazon S3 Bucket in the Amazon ElastiCache User Guide. For more information, see Exporting a Snapshot in the Amazon ElastiCache User Guide.
        var targetBucket: String? = nil
        /// The name of an existing snapshot from which to make a copy.
        var sourceSnapshotName: String = ""

        public init() {}

        public init(targetSnapshotName: String, targetBucket: String? = nil, sourceSnapshotName: String) {
            self.targetSnapshotName = targetSnapshotName
            self.targetBucket = targetBucket
            self.sourceSnapshotName = sourceSnapshotName
        }

    }

    public struct ListAllowedNodeTypeModificationsMessage: Serializable, Initializable {
        /// The name of the cache cluster you want to scale up to a larger node instanced type. ElastiCache uses the cluster id to identify the current node type of this cluster and from that to create a list of node types you can scale up to.  You must provide a value for either the CacheClusterId or the ReplicationGroupId. 
        var cacheClusterId: String? = nil
        /// The name of the replication group want to scale up to a larger node type. ElastiCache uses the replication group id to identify the current node type being used by this replication group, and from that to create a list of node types you can scale up to.  You must provide a value for either the CacheClusterId or the ReplicationGroupId. 
        var replicationGroupId: String? = nil

        public init() {}

        public init(cacheClusterId: String? = nil, replicationGroupId: String? = nil) {
            self.cacheClusterId = cacheClusterId
            self.replicationGroupId = replicationGroupId
        }

    }

    public struct EngineDefaults: Serializable, Initializable {
        /// Specifies the name of the cache parameter group family to which the engine default parameters apply. Valid values are: memcached1.4 | redis2.6 | redis2.8 | redis3.2 
        var cacheParameterGroupFamily: String? = nil
        /// Contains a list of engine default parameters.
        var parameters: [Parameter]? = nil
        /// Provides an identifier to allow retrieval of paginated results.
        var marker: String? = nil
        /// A list of parameters specific to a particular cache node type. Each element in the list contains detailed information about one parameter.
        var cacheNodeTypeSpecificParameters: [CacheNodeTypeSpecificParameter]? = nil

        public init() {}

        public init(cacheParameterGroupFamily: String? = nil, parameters: [Parameter]? = nil, marker: String? = nil, cacheNodeTypeSpecificParameters: [CacheNodeTypeSpecificParameter]? = nil) {
            self.cacheParameterGroupFamily = cacheParameterGroupFamily
            self.parameters = parameters
            self.marker = marker
            self.cacheNodeTypeSpecificParameters = cacheNodeTypeSpecificParameters
        }

    }

    public struct NotificationConfiguration: Serializable, Initializable {
        /// The current state of the topic.
        var topicStatus: String? = nil
        /// The Amazon Resource Name (ARN) that identifies the topic.
        var topicArn: String? = nil

        public init() {}

        public init(topicStatus: String? = nil, topicArn: String? = nil) {
            self.topicStatus = topicStatus
            self.topicArn = topicArn
        }

    }

    public struct DescribeReservedCacheNodesOfferingsMessage: Serializable, Initializable {
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        var maxRecords: Int32? = nil
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        var marker: String? = nil
        /// The cache node type filter value. Use this parameter to show only the available offerings matching the specified cache node type. Valid node types are as follows:   General purpose:   Current generation: cache.t2.micro, cache.t2.small, cache.t2.medium, cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge, cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge    Previous generation: cache.t1.micro, cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge      Compute optimized: cache.c1.xlarge    Memory optimized:   Current generation: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge, cache.r3.4xlarge, cache.r3.8xlarge    Previous generation: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge       Notes:    All T2 instances are created in an Amazon Virtual Private Cloud (Amazon VPC).   Redis backup/restore is not supported for Redis (cluster mode disabled) T1 and T2 instances. Backup/restore is supported on Redis (cluster mode enabled) T2 instances.   Redis Append-only files (AOF) functionality is not supported for T1 or T2 instances.   For a complete listing of node types and specifications, see Amazon ElastiCache Product Features and Details and either Cache Node Type-Specific Parameters for Memcached or Cache Node Type-Specific Parameters for Redis.
        var cacheNodeType: String? = nil
        /// Duration filter value, specified in years or seconds. Use this parameter to show only reservations for a given duration. Valid Values: 1 | 3 | 31536000 | 94608000 
        var duration: String? = nil
        /// The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type. Valid Values: "Light Utilization"|"Medium Utilization"|"Heavy Utilization" 
        var offeringType: String? = nil
        /// The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706 
        var reservedCacheNodesOfferingId: String? = nil
        /// The product description filter value. Use this parameter to show only the available offerings matching the specified product description.
        var productDescription: String? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, marker: String? = nil, cacheNodeType: String? = nil, duration: String? = nil, offeringType: String? = nil, reservedCacheNodesOfferingId: String? = nil, productDescription: String? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.cacheNodeType = cacheNodeType
            self.duration = duration
            self.offeringType = offeringType
            self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
            self.productDescription = productDescription
        }

    }

    public struct CreateCacheParameterGroupResult: Serializable, Initializable {
        var cacheParameterGroup: CacheParameterGroup? = nil

        public init() {}

        public init(cacheParameterGroup: CacheParameterGroup? = nil) {
            self.cacheParameterGroup = cacheParameterGroup
        }

    }

    public struct Snapshot: Serializable, Initializable {
        /// The port number used by each cache nodes in the source cache cluster.
        var port: Int32? = nil
        /// The user-supplied identifier of the source cache cluster.
        var cacheClusterId: String? = nil
        /// The date and time when the source cache cluster was created.
        var cacheClusterCreateTime: Date? = nil
        /// The number of cache nodes in the source cache cluster. For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.
        var numCacheNodes: Int32? = nil
        /// Indicates the status of Multi-AZ for the source replication group.  ElastiCache Multi-AZ replication groups are not supported on:   Redis versions earlier than 2.8.6.   Redis (cluster mode disabled):T1 and T2 cache node types. Redis (cluster mode enabled): T1 node types.   
        var automaticFailover: String? = nil
        /// The Amazon Resource Name (ARN) for the topic used by the source cache cluster for publishing notifications.
        var topicArn: String? = nil
        /// The status of the snapshot. Valid values: creating | available | restoring | copying | deleting.
        var snapshotStatus: String? = nil
        /// Indicates whether the snapshot is from an automatic backup (automated) or was created manually (manual).
        var snapshotSource: String? = nil
        /// The name of a snapshot. For an automatic snapshot, the name is system-generated. For a manual snapshot, this is the user-provided name.
        var snapshotName: String? = nil
        /// This parameter is currently disabled.
        var autoMinorVersionUpgrade: Bool? = nil
        /// The daily time range during which ElastiCache takes daily snapshots of the source cache cluster.
        var snapshotWindow: String? = nil
        /// The version of the cache engine version that is used by the source cache cluster.
        var engineVersion: String? = nil
        /// The Amazon Virtual Private Cloud identifier (VPC ID) of the cache subnet group for the source cache cluster.
        var vpcId: String? = nil
        /// The cache parameter group that is associated with the source cache cluster.
        var cacheParameterGroupName: String? = nil
        /// The unique identifier of the source replication group.
        var replicationGroupId: String? = nil
        /// The number of node groups (shards) in this snapshot. When restoring from a snapshot, the number of node groups (shards) in the snapshot and in the restored replication group must be the same.
        var numNodeGroups: Int32? = nil
        /// A description of the source replication group.
        var replicationGroupDescription: String? = nil
        /// The name of the Availability Zone in which the source cache cluster is located.
        var preferredAvailabilityZone: String? = nil
        /// The name of the compute and memory capacity node type for the source cache cluster. Valid node types are as follows:   General purpose:   Current generation: cache.t2.micro, cache.t2.small, cache.t2.medium, cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge, cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge    Previous generation: cache.t1.micro, cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge      Compute optimized: cache.c1.xlarge    Memory optimized:   Current generation: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge, cache.r3.4xlarge, cache.r3.8xlarge    Previous generation: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge       Notes:    All T2 instances are created in an Amazon Virtual Private Cloud (Amazon VPC).   Redis backup/restore is not supported for Redis (cluster mode disabled) T1 and T2 instances. Backup/restore is supported on Redis (cluster mode enabled) T2 instances.   Redis Append-only files (AOF) functionality is not supported for T1 or T2 instances.   For a complete listing of node types and specifications, see Amazon ElastiCache Product Features and Details and either Cache Node Type-Specific Parameters for Memcached or Cache Node Type-Specific Parameters for Redis.
        var cacheNodeType: String? = nil
        /// A list of the cache nodes in the source cache cluster.
        var nodeSnapshots: [NodeSnapshot]? = nil
        /// The name of the cache engine (memcached or redis) used by the source cache cluster.
        var engine: String? = nil
        /// The name of the cache subnet group associated with the source cache cluster.
        var cacheSubnetGroupName: String? = nil
        /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:    sun     mon     tue     wed     thu     fri     sat    Example: sun:23:00-mon:01:30 
        var preferredMaintenanceWindow: String? = nil
        /// For an automatic snapshot, the number of days for which ElastiCache retains the snapshot before deleting it. For manual snapshots, this field reflects the SnapshotRetentionLimit for the source cache cluster when the snapshot was created. This field is otherwise ignored: Manual snapshots do not expire, and can only be deleted using the DeleteSnapshot operation.   Important If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
        var snapshotRetentionLimit: Int32? = nil

        public init() {}

        public init(port: Int32? = nil, cacheClusterId: String? = nil, cacheClusterCreateTime: Date? = nil, numCacheNodes: Int32? = nil, automaticFailover: String? = nil, topicArn: String? = nil, snapshotStatus: String? = nil, snapshotSource: String? = nil, snapshotName: String? = nil, autoMinorVersionUpgrade: Bool? = nil, snapshotWindow: String? = nil, engineVersion: String? = nil, vpcId: String? = nil, cacheParameterGroupName: String? = nil, replicationGroupId: String? = nil, numNodeGroups: Int32? = nil, replicationGroupDescription: String? = nil, preferredAvailabilityZone: String? = nil, cacheNodeType: String? = nil, nodeSnapshots: [NodeSnapshot]? = nil, engine: String? = nil, cacheSubnetGroupName: String? = nil, preferredMaintenanceWindow: String? = nil, snapshotRetentionLimit: Int32? = nil) {
            self.port = port
            self.cacheClusterId = cacheClusterId
            self.cacheClusterCreateTime = cacheClusterCreateTime
            self.numCacheNodes = numCacheNodes
            self.automaticFailover = automaticFailover
            self.topicArn = topicArn
            self.snapshotStatus = snapshotStatus
            self.snapshotSource = snapshotSource
            self.snapshotName = snapshotName
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.snapshotWindow = snapshotWindow
            self.engineVersion = engineVersion
            self.vpcId = vpcId
            self.cacheParameterGroupName = cacheParameterGroupName
            self.replicationGroupId = replicationGroupId
            self.numNodeGroups = numNodeGroups
            self.replicationGroupDescription = replicationGroupDescription
            self.preferredAvailabilityZone = preferredAvailabilityZone
            self.cacheNodeType = cacheNodeType
            self.nodeSnapshots = nodeSnapshots
            self.engine = engine
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.snapshotRetentionLimit = snapshotRetentionLimit
        }

    }

    public struct DeleteCacheClusterMessage: Serializable, Initializable {
        /// The cache cluster identifier for the cluster to be deleted. This parameter is not case sensitive.
        var cacheClusterId: String = ""
        /// The user-supplied name of a final cache cluster snapshot. This is the unique name that identifies the snapshot. ElastiCache creates the snapshot, and then deletes the cache cluster immediately afterward.
        var finalSnapshotIdentifier: String? = nil

        public init() {}

        public init(cacheClusterId: String, finalSnapshotIdentifier: String? = nil) {
            self.cacheClusterId = cacheClusterId
            self.finalSnapshotIdentifier = finalSnapshotIdentifier
        }

    }

    public struct AllowedNodeTypeModificationsMessage: Serializable, Initializable {
        var scaleUpModifications: [String]? = nil

        public init() {}

        public init(scaleUpModifications: [String]? = nil) {
            self.scaleUpModifications = scaleUpModifications
        }

    }

    public struct DeleteSnapshotResult: Serializable, Initializable {
        var snapshot: Snapshot? = nil

        public init() {}

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

    }

    public struct ReplicationGroupPendingModifiedValues: Serializable, Initializable {
        /// The primary cluster ID that is applied immediately (if --apply-immediately was specified), or during the next maintenance window.
        var primaryClusterId: String? = nil
        /// Indicates the status of Multi-AZ for this Redis replication group.  ElastiCache Multi-AZ replication groups are not supported on:   Redis versions earlier than 2.8.6.   Redis (cluster mode disabled):T1 and T2 cache node types. Redis (cluster mode enabled): T1 node types.   
        var automaticFailoverStatus: String? = nil

        public init() {}

        public init(primaryClusterId: String? = nil, automaticFailoverStatus: String? = nil) {
            self.primaryClusterId = primaryClusterId
            self.automaticFailoverStatus = automaticFailoverStatus
        }

    }

    public struct ReplicationGroupMessage: Serializable, Initializable {
        /// Provides an identifier to allow retrieval of paginated results.
        var marker: String? = nil
        /// A list of replication groups. Each item in the list contains detailed information about one replication group.
        var replicationGroups: [ReplicationGroup]? = nil

        public init() {}

        public init(marker: String? = nil, replicationGroups: [ReplicationGroup]? = nil) {
            self.marker = marker
            self.replicationGroups = replicationGroups
        }

    }

    public struct DescribeCacheSubnetGroupsMessage: Serializable, Initializable {
        /// The name of the cache subnet group to return details for.
        var cacheSubnetGroupName: String? = nil
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        var maxRecords: Int32? = nil
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        var marker: String? = nil

        public init() {}

        public init(cacheSubnetGroupName: String? = nil, maxRecords: Int32? = nil, marker: String? = nil) {
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.maxRecords = maxRecords
            self.marker = marker
        }

    }

    public struct ReservedCacheNodesOfferingMessage: Serializable, Initializable {
        /// Provides an identifier to allow retrieval of paginated results.
        var marker: String? = nil
        /// A list of reserved cache node offerings. Each element in the list contains detailed information about one offering.
        var reservedCacheNodesOfferings: [ReservedCacheNodesOffering]? = nil

        public init() {}

        public init(marker: String? = nil, reservedCacheNodesOfferings: [ReservedCacheNodesOffering]? = nil) {
            self.marker = marker
            self.reservedCacheNodesOfferings = reservedCacheNodesOfferings
        }

    }

    public struct NodeGroupConfiguration: Serializable, Initializable {
        /// A string that specifies the keyspaces as a series of comma separated values. Keyspaces are 0 to 16,383. The string is in the format startkey-endkey. Example: "0-3999" 
        var slots: String? = nil
        /// A list of Availability Zones to be used for the read replicas. The number of Availability Zones in this list must match the value of ReplicaCount or ReplicasPerNodeGroup if not specified.
        var replicaAvailabilityZones: [String]? = nil
        /// The Availability Zone where the primary node of this node group (shard) is launched.
        var primaryAvailabilityZone: String? = nil
        /// The number of read replica nodes in this node group (shard).
        var replicaCount: Int32? = nil

        public init() {}

        public init(slots: String? = nil, replicaAvailabilityZones: [String]? = nil, primaryAvailabilityZone: String? = nil, replicaCount: Int32? = nil) {
            self.slots = slots
            self.replicaAvailabilityZones = replicaAvailabilityZones
            self.primaryAvailabilityZone = primaryAvailabilityZone
            self.replicaCount = replicaCount
        }

    }

    public struct CacheParameterGroupNameMessage: Serializable, Initializable {
        /// The name of the cache parameter group.
        var cacheParameterGroupName: String? = nil

        public init() {}

        public init(cacheParameterGroupName: String? = nil) {
            self.cacheParameterGroupName = cacheParameterGroupName
        }

    }

    public struct CreateSnapshotResult: Serializable, Initializable {
        var snapshot: Snapshot? = nil

        public init() {}

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

    }

    public struct CreateCacheSecurityGroupMessage: Serializable, Initializable {
        /// A name for the cache security group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters. Cannot be the word "Default". Example: mysecuritygroup 
        var cacheSecurityGroupName: String = ""
        /// A description for the cache security group.
        var description: String = ""

        public init() {}

        public init(cacheSecurityGroupName: String, description: String) {
            self.cacheSecurityGroupName = cacheSecurityGroupName
            self.description = description
        }

    }

    public struct DescribeReservedCacheNodesMessage: Serializable, Initializable {
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        var maxRecords: Int32? = nil
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        var marker: String? = nil
        /// The cache node type filter value. Use this parameter to show only those reservations matching the specified cache node type. Valid node types are as follows:   General purpose:   Current generation: cache.t2.micro, cache.t2.small, cache.t2.medium, cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge, cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge    Previous generation: cache.t1.micro, cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge      Compute optimized: cache.c1.xlarge    Memory optimized:   Current generation: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge, cache.r3.4xlarge, cache.r3.8xlarge    Previous generation: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge       Notes:    All T2 instances are created in an Amazon Virtual Private Cloud (Amazon VPC).   Redis backup/restore is not supported for Redis (cluster mode disabled) T1 and T2 instances. Backup/restore is supported on Redis (cluster mode enabled) T2 instances.   Redis Append-only files (AOF) functionality is not supported for T1 or T2 instances.   For a complete listing of node types and specifications, see Amazon ElastiCache Product Features and Details and either Cache Node Type-Specific Parameters for Memcached or Cache Node Type-Specific Parameters for Redis.
        var cacheNodeType: String? = nil
        /// The reserved cache node identifier filter value. Use this parameter to show only the reservation that matches the specified reservation ID.
        var reservedCacheNodeId: String? = nil
        /// The duration filter value, specified in years or seconds. Use this parameter to show only reservations for this duration. Valid Values: 1 | 3 | 31536000 | 94608000 
        var duration: String? = nil
        /// The offering type filter value. Use this parameter to show only the available offerings matching the specified offering type. Valid values: "Light Utilization"|"Medium Utilization"|"Heavy Utilization" 
        var offeringType: String? = nil
        /// The offering identifier filter value. Use this parameter to show only purchased reservations matching the specified offering identifier.
        var reservedCacheNodesOfferingId: String? = nil
        /// The product description filter value. Use this parameter to show only those reservations matching the specified product description.
        var productDescription: String? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, marker: String? = nil, cacheNodeType: String? = nil, reservedCacheNodeId: String? = nil, duration: String? = nil, offeringType: String? = nil, reservedCacheNodesOfferingId: String? = nil, productDescription: String? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.cacheNodeType = cacheNodeType
            self.reservedCacheNodeId = reservedCacheNodeId
            self.duration = duration
            self.offeringType = offeringType
            self.reservedCacheNodesOfferingId = reservedCacheNodesOfferingId
            self.productDescription = productDescription
        }

    }

    public struct DescribeCacheEngineVersionsMessage: Serializable, Initializable {
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        var maxRecords: Int32? = nil
        /// The name of a specific cache parameter group family to return details for. Valid values are: memcached1.4 | redis2.6 | redis2.8 | redis3.2  Constraints:   Must be 1 to 255 alphanumeric characters   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens  
        var cacheParameterGroupFamily: String? = nil
        /// The cache engine to return. Valid values: memcached | redis 
        var engine: String? = nil
        /// The cache engine version to return. Example: 1.4.14 
        var engineVersion: String? = nil
        /// If true, specifies that only the default version of the specified engine or engine and major version combination is to be returned.
        var defaultOnly: Bool? = nil
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        var marker: String? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, cacheParameterGroupFamily: String? = nil, engine: String? = nil, engineVersion: String? = nil, defaultOnly: Bool? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.cacheParameterGroupFamily = cacheParameterGroupFamily
            self.engine = engine
            self.engineVersion = engineVersion
            self.defaultOnly = defaultOnly
            self.marker = marker
        }

    }

    public struct ModifyCacheSubnetGroupResult: Serializable, Initializable {
        var cacheSubnetGroup: CacheSubnetGroup? = nil

        public init() {}

        public init(cacheSubnetGroup: CacheSubnetGroup? = nil) {
            self.cacheSubnetGroup = cacheSubnetGroup
        }

    }

    public struct NodeSnapshot: Serializable, Initializable {
        /// The configuration for the source node group (shard).
        var nodeGroupConfiguration: NodeGroupConfiguration? = nil
        /// The cache node identifier for the node in the source cache cluster.
        var cacheNodeId: String? = nil
        /// A unique identifier for the source node group (shard).
        var nodeGroupId: String? = nil
        /// The date and time when the source node's metadata and cache data set was obtained for the snapshot.
        var snapshotCreateTime: Date? = nil
        /// The date and time when the cache node was created in the source cache cluster.
        var cacheNodeCreateTime: Date? = nil
        /// A unique identifier for the source cache cluster.
        var cacheClusterId: String? = nil
        /// The size of the cache on the source cache node.
        var cacheSize: String? = nil

        public init() {}

        public init(nodeGroupConfiguration: NodeGroupConfiguration? = nil, cacheNodeId: String? = nil, nodeGroupId: String? = nil, snapshotCreateTime: Date? = nil, cacheNodeCreateTime: Date? = nil, cacheClusterId: String? = nil, cacheSize: String? = nil) {
            self.nodeGroupConfiguration = nodeGroupConfiguration
            self.cacheNodeId = cacheNodeId
            self.nodeGroupId = nodeGroupId
            self.snapshotCreateTime = snapshotCreateTime
            self.cacheNodeCreateTime = cacheNodeCreateTime
            self.cacheClusterId = cacheClusterId
            self.cacheSize = cacheSize
        }

    }

    public struct CreateReplicationGroupMessage: Serializable, Initializable {
        /// A list of Amazon Resource Names (ARN) that uniquely identify the Redis RDB snapshot files stored in Amazon S3. The snapshot files are used to populate the replication group. The Amazon S3 object name in the ARN cannot contain any commas. The list must match the number of node groups (shards) in the replication group, which means you cannot repartition.  This parameter is only valid if the Engine parameter is redis.  Example of an Amazon S3 ARN: arn:aws:s3:::my_bucket/snapshot1.rdb 
        var snapshotArns: [String]? = nil
        /// A list of cache security group names to associate with this replication group.
        var cacheSecurityGroupNames: [String]? = nil
        /// An optional parameter that specifies the number of replica nodes in each node group (shard). Valid values are 0 to 5.
        var replicasPerNodeGroup: Int32? = nil
        /// This parameter is currently disabled.
        var autoMinorVersionUpgrade: Bool? = nil
        /// A list of node group (shard) configuration options. Each node group (shard) configuration has the following: Slots, PrimaryAvailabilityZone, ReplicaAvailabilityZones, ReplicaCount. If you're creating a Redis (cluster mode disabled) or a Redis (cluster mode enabled) replication group, you can use this parameter to configure one node group (shard) or you can omit this parameter.
        var nodeGroupConfiguration: [NodeGroupConfiguration]? = nil
        /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of your node group (shard). Example: 05:00-09:00  If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.  This parameter is only valid if the Engine parameter is redis. 
        var snapshotWindow: String? = nil
        /// The version number of the cache engine to be used for the cache clusters in this replication group. To view the supported cache engine versions, use the DescribeCacheEngineVersions operation.  Important: You can upgrade to a newer engine version (see Selecting a Cache Engine and Version) in the ElastiCache User Guide, but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing cache cluster or replication group and create it anew with the earlier engine version. 
        var engineVersion: String? = nil
        /// The replication group identifier. This parameter is stored as a lowercase string. Constraints:   A name must contain from 1 to 20 alphanumeric characters or hyphens.   The first character must be a letter.   A name cannot end with a hyphen or contain two consecutive hyphens.  
        var replicationGroupId: String = ""
        /// The identifier of the cache cluster that serves as the primary for this replication group. This cache cluster must already exist and have a status of available. This parameter is not required if NumCacheClusters, NumNodeGroups, or ReplicasPerNodeGroup is specified.
        var primaryClusterId: String? = nil
        /// Specifies the weekly time range during which maintenance on the cache cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are: Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:    sun     mon     tue     wed     thu     fri     sat    Example: sun:23:00-mon:01:30 
        var preferredMaintenanceWindow: String? = nil
        /// Specifies whether a read-only replica is automatically promoted to read/write primary if the existing primary fails. If true, Multi-AZ is enabled for this replication group. If false, Multi-AZ is disabled for this replication group.  AutomaticFailoverEnabled must be enabled for Redis (cluster mode enabled) replication groups. Default: false  ElastiCache Multi-AZ replication groups is not supported on:   Redis versions earlier than 2.8.6.   Redis (cluster mode disabled): T1 and T2 node types. Redis (cluster mode enabled): T2 node types.   
        var automaticFailoverEnabled: Bool? = nil
        /// The number of days for which ElastiCache retains automatic snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.  This parameter is only valid if the Engine parameter is redis.  Default: 0 (i.e., automatic backups are disabled for this cache cluster).
        var snapshotRetentionLimit: Int32? = nil
        /// A list of EC2 Availability Zones in which the replication group's cache clusters are created. The order of the Availability Zones in the list is the order in which clusters are allocated. The primary cluster is created in the first AZ in the list. This parameter is not used if there is more than one node group (shard). You should use NodeGroupConfiguration instead.  If you are creating your replication group in an Amazon VPC (recommended), you can only locate cache clusters in Availability Zones associated with the subnets in the selected subnet group. The number of Availability Zones listed must equal the value of NumCacheClusters.  Default: system chosen Availability Zones.
        var preferredCacheClusterAZs: [String]? = nil
        /// A list of cost allocation tags to be added to this resource. A tag is a key-value pair. A tag key must be accompanied by a tag value.
        var tags: [Tag]? = nil
        /// The number of clusters this replication group initially has. This parameter is not used if there is more than one node group (shard). You should use ReplicasPerNodeGroup instead. If Multi-AZ is enabled, the value of this parameter must be at least 2. The maximum permitted value for NumCacheClusters is 6 (primary plus 5 replicas).
        var numCacheClusters: Int32? = nil
        /// One or more Amazon VPC security groups associated with this replication group. Use this parameter only when you are creating a replication group in an Amazon Virtual Private Cloud (Amazon VPC).
        var securityGroupIds: [String]? = nil
        /// The name of a snapshot from which to restore data into the new replication group. The snapshot status changes to restoring while the new replication group is being created.  This parameter is only valid if the Engine parameter is redis. 
        var snapshotName: String? = nil
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic to which notifications are sent.  The Amazon SNS topic owner must be the same as the cache cluster owner. 
        var notificationTopicArn: String? = nil
        /// The name of the cache subnet group to be used for the replication group.  If you're going to launch your cluster in an Amazon VPC, you need to create a subnet group before you start creating a cluster. For more information, see Subnets and Subnet Groups. 
        var cacheSubnetGroupName: String? = nil
        /// The name of the parameter group to associate with this replication group. If this argument is omitted, the default cache parameter group for the specified engine is used. If you are running Redis version 3.2.4 or later, only one node group (shard), and want to use a default parameter group, we recommend that you specify the parameter group by name.    To create a Redis (cluster mode disabled) replication group, use CacheParameterGroupName=default.redis3.2.   To create a Redis (cluster mode enabled) replication group, use CacheParameterGroupName=default.redis3.2.cluster.on.  
        var cacheParameterGroupName: String? = nil
        /// An optional parameter that specifies the number of node groups (shards) for this Redis (cluster mode enabled) replication group. For Redis (cluster mode disabled) either omit this parameter or set it to 1. Default: 1
        var numNodeGroups: Int32? = nil
        /// A user-created description for the replication group.
        var replicationGroupDescription: String = ""
        /// The name of the cache engine to be used for the cache clusters in this replication group.
        var engine: String? = nil
        /// The compute and memory capacity of the nodes in the node group (shard). Valid node types are as follows:   General purpose:   Current generation: cache.t2.micro, cache.t2.small, cache.t2.medium, cache.m3.medium, cache.m3.large, cache.m3.xlarge, cache.m3.2xlarge, cache.m4.large, cache.m4.xlarge, cache.m4.2xlarge, cache.m4.4xlarge, cache.m4.10xlarge    Previous generation: cache.t1.micro, cache.m1.small, cache.m1.medium, cache.m1.large, cache.m1.xlarge      Compute optimized: cache.c1.xlarge    Memory optimized:   Current generation: cache.r3.large, cache.r3.xlarge, cache.r3.2xlarge, cache.r3.4xlarge, cache.r3.8xlarge    Previous generation: cache.m2.xlarge, cache.m2.2xlarge, cache.m2.4xlarge       Notes:    All T2 instances are created in an Amazon Virtual Private Cloud (Amazon VPC).   Redis backup/restore is not supported for Redis (cluster mode disabled) T1 and T2 instances. Backup/restore is supported on Redis (cluster mode enabled) T2 instances.   Redis Append-only files (AOF) functionality is not supported for T1 or T2 instances.   For a complete listing of node types and specifications, see Amazon ElastiCache Product Features and Details and either Cache Node Type-Specific Parameters for Memcached or Cache Node Type-Specific Parameters for Redis.
        var cacheNodeType: String? = nil
        ///  Reserved parameter. The password used to access a password protected server. Password constraints:   Must be only printable ASCII characters.   Must be at least 16 characters and no more than 128 characters in length.   Cannot contain any of the following characters: '/', '"', or "@".    For more information, see AUTH password at Redis.
        var authToken: String? = nil
        /// The port number on which each member of the replication group accepts connections.
        var port: Int32? = nil

        public init() {}

        public init(snapshotArns: [String]? = nil, cacheSecurityGroupNames: [String]? = nil, replicasPerNodeGroup: Int32? = nil, autoMinorVersionUpgrade: Bool? = nil, nodeGroupConfiguration: [NodeGroupConfiguration]? = nil, snapshotWindow: String? = nil, engineVersion: String? = nil, replicationGroupId: String, primaryClusterId: String? = nil, preferredMaintenanceWindow: String? = nil, automaticFailoverEnabled: Bool? = nil, snapshotRetentionLimit: Int32? = nil, preferredCacheClusterAZs: [String]? = nil, tags: [Tag]? = nil, numCacheClusters: Int32? = nil, securityGroupIds: [String]? = nil, snapshotName: String? = nil, notificationTopicArn: String? = nil, cacheSubnetGroupName: String? = nil, cacheParameterGroupName: String? = nil, numNodeGroups: Int32? = nil, replicationGroupDescription: String, engine: String? = nil, cacheNodeType: String? = nil, authToken: String? = nil, port: Int32? = nil) {
            self.snapshotArns = snapshotArns
            self.cacheSecurityGroupNames = cacheSecurityGroupNames
            self.replicasPerNodeGroup = replicasPerNodeGroup
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.nodeGroupConfiguration = nodeGroupConfiguration
            self.snapshotWindow = snapshotWindow
            self.engineVersion = engineVersion
            self.replicationGroupId = replicationGroupId
            self.primaryClusterId = primaryClusterId
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.automaticFailoverEnabled = automaticFailoverEnabled
            self.snapshotRetentionLimit = snapshotRetentionLimit
            self.preferredCacheClusterAZs = preferredCacheClusterAZs
            self.tags = tags
            self.numCacheClusters = numCacheClusters
            self.securityGroupIds = securityGroupIds
            self.snapshotName = snapshotName
            self.notificationTopicArn = notificationTopicArn
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.cacheParameterGroupName = cacheParameterGroupName
            self.numNodeGroups = numNodeGroups
            self.replicationGroupDescription = replicationGroupDescription
            self.engine = engine
            self.cacheNodeType = cacheNodeType
            self.authToken = authToken
            self.port = port
        }

    }

    public struct CacheEngineVersionMessage: Serializable, Initializable {
        /// Provides an identifier to allow retrieval of paginated results.
        var marker: String? = nil
        /// A list of cache engine version details. Each element in the list contains detailed information about one cache engine version.
        var cacheEngineVersions: [CacheEngineVersion]? = nil

        public init() {}

        public init(marker: String? = nil, cacheEngineVersions: [CacheEngineVersion]? = nil) {
            self.marker = marker
            self.cacheEngineVersions = cacheEngineVersions
        }

    }

    public struct SecurityGroupMembership: Serializable, Initializable {
        /// The identifier of the cache security group.
        var securityGroupId: String? = nil
        /// The status of the cache security group membership. The status changes whenever a cache security group is modified, or when the cache security groups assigned to a cache cluster are modified.
        var status: String? = nil

        public init() {}

        public init(securityGroupId: String? = nil, status: String? = nil) {
            self.securityGroupId = securityGroupId
            self.status = status
        }

    }

    public struct DescribeCacheClustersMessage: Serializable, Initializable {
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        var maxRecords: Int32? = nil
        /// An optional flag that can be included in the DescribeCacheCluster request to retrieve information about the individual cache nodes.
        var showCacheNodeInfo: Bool? = nil
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        var marker: String? = nil
        /// The user-supplied cluster identifier. If this parameter is specified, only information about that specific cache cluster is returned. This parameter isn't case sensitive.
        var cacheClusterId: String? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, showCacheNodeInfo: Bool? = nil, marker: String? = nil, cacheClusterId: String? = nil) {
            self.maxRecords = maxRecords
            self.showCacheNodeInfo = showCacheNodeInfo
            self.marker = marker
            self.cacheClusterId = cacheClusterId
        }

    }

    public struct CacheSubnetGroup: Serializable, Initializable {
        /// A list of subnets associated with the cache subnet group.
        var subnets: [Subnet]? = nil
        /// The description of the cache subnet group.
        var cacheSubnetGroupDescription: String? = nil
        /// The Amazon Virtual Private Cloud identifier (VPC ID) of the cache subnet group.
        var vpcId: String? = nil
        /// The name of the cache subnet group.
        var cacheSubnetGroupName: String? = nil

        public init() {}

        public init(subnets: [Subnet]? = nil, cacheSubnetGroupDescription: String? = nil, vpcId: String? = nil, cacheSubnetGroupName: String? = nil) {
            self.subnets = subnets
            self.cacheSubnetGroupDescription = cacheSubnetGroupDescription
            self.vpcId = vpcId
            self.cacheSubnetGroupName = cacheSubnetGroupName
        }

    }

    public struct RebootCacheClusterMessage: Serializable, Initializable {
        /// The cache cluster identifier. This parameter is stored as a lowercase string.
        var cacheClusterId: String = ""
        /// A list of cache node IDs to reboot. A node ID is a numeric identifier (0001, 0002, etc.). To reboot an entire cache cluster, specify all of the cache node IDs.
        var cacheNodeIdsToReboot: [String] = []

        public init() {}

        public init(cacheClusterId: String, cacheNodeIdsToReboot: [String]) {
            self.cacheClusterId = cacheClusterId
            self.cacheNodeIdsToReboot = cacheNodeIdsToReboot
        }

    }

    public struct AuthorizeCacheSecurityGroupIngressMessage: Serializable, Initializable {
        /// The AWS account number of the Amazon EC2 security group owner. Note that this is not the same thing as an AWS access key ID - you must provide a valid AWS account number for this parameter.
        var eC2SecurityGroupOwnerId: String = ""
        /// The cache security group that allows network ingress.
        var cacheSecurityGroupName: String = ""
        /// The Amazon EC2 security group to be authorized for ingress to the cache security group.
        var eC2SecurityGroupName: String = ""

        public init() {}

        public init(eC2SecurityGroupOwnerId: String, cacheSecurityGroupName: String, eC2SecurityGroupName: String) {
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.cacheSecurityGroupName = cacheSecurityGroupName
            self.eC2SecurityGroupName = eC2SecurityGroupName
        }

    }

    public struct CacheSecurityGroup: Serializable, Initializable {
        /// The name of the cache security group.
        var cacheSecurityGroupName: String? = nil
        /// A list of Amazon EC2 security groups that are associated with this cache security group.
        var eC2SecurityGroups: [EC2SecurityGroup]? = nil
        /// The AWS account ID of the cache security group owner.
        var ownerId: String? = nil
        /// The description of the cache security group.
        var description: String? = nil

        public init() {}

        public init(cacheSecurityGroupName: String? = nil, eC2SecurityGroups: [EC2SecurityGroup]? = nil, ownerId: String? = nil, description: String? = nil) {
            self.cacheSecurityGroupName = cacheSecurityGroupName
            self.eC2SecurityGroups = eC2SecurityGroups
            self.ownerId = ownerId
            self.description = description
        }

    }

    public struct AvailabilityZone: Serializable, Initializable {
        /// The name of the Availability Zone.
        var name: String? = nil

        public init() {}

        public init(name: String? = nil) {
            self.name = name
        }

    }

    public struct DeleteCacheParameterGroupMessage: Serializable, Initializable {
        /// The name of the cache parameter group to delete.  The specified cache security group must not be associated with any cache clusters. 
        var cacheParameterGroupName: String = ""

        public init() {}

        public init(cacheParameterGroupName: String) {
            self.cacheParameterGroupName = cacheParameterGroupName
        }

    }

    public struct CreateCacheSecurityGroupResult: Serializable, Initializable {
        var cacheSecurityGroup: CacheSecurityGroup? = nil

        public init() {}

        public init(cacheSecurityGroup: CacheSecurityGroup? = nil) {
            self.cacheSecurityGroup = cacheSecurityGroup
        }

    }

    public struct CreateReplicationGroupResult: Serializable, Initializable {
        var replicationGroup: ReplicationGroup? = nil

        public init() {}

        public init(replicationGroup: ReplicationGroup? = nil) {
            self.replicationGroup = replicationGroup
        }

    }

    public struct AuthorizeCacheSecurityGroupIngressResult: Serializable, Initializable {
        var cacheSecurityGroup: CacheSecurityGroup? = nil

        public init() {}

        public init(cacheSecurityGroup: CacheSecurityGroup? = nil) {
            self.cacheSecurityGroup = cacheSecurityGroup
        }

    }

    public struct CacheParameterGroup: Serializable, Initializable {
        /// The name of the cache parameter group family that this cache parameter group is compatible with. Valid values are: memcached1.4 | redis2.6 | redis2.8 | redis3.2 
        var cacheParameterGroupFamily: String? = nil
        /// The name of the cache parameter group.
        var cacheParameterGroupName: String? = nil
        /// The description for this cache parameter group.
        var description: String? = nil

        public init() {}

        public init(cacheParameterGroupFamily: String? = nil, cacheParameterGroupName: String? = nil, description: String? = nil) {
            self.cacheParameterGroupFamily = cacheParameterGroupFamily
            self.cacheParameterGroupName = cacheParameterGroupName
            self.description = description
        }

    }

    public struct CreateCacheParameterGroupMessage: Serializable, Initializable {
        /// The name of the cache parameter group family that the cache parameter group can be used with. Valid values are: memcached1.4 | redis2.6 | redis2.8 | redis3.2 
        var cacheParameterGroupFamily: String = ""
        /// A user-specified name for the cache parameter group.
        var cacheParameterGroupName: String = ""
        /// A user-specified description for the cache parameter group.
        var description: String = ""

        public init() {}

        public init(cacheParameterGroupFamily: String, cacheParameterGroupName: String, description: String) {
            self.cacheParameterGroupFamily = cacheParameterGroupFamily
            self.cacheParameterGroupName = cacheParameterGroupName
            self.description = description
        }

    }

    public struct NodeGroup: Serializable, Initializable {
        /// A list containing information about individual nodes within the node group (shard).
        var nodeGroupMembers: [NodeGroupMember]? = nil
        /// The keyspace for this node group (shard).
        var slots: String? = nil
        /// The current state of this replication group - creating, available, etc.
        var status: String? = nil
        /// The identifier for the node group (shard). A Redis (cluster mode disabled) replication group contains only 1 node group; therefore, the node group ID is 0001. A Redis (cluster mode enabled) replication group contains 1 to 15 node groups numbered 0001 to 0015. 
        var nodeGroupId: String? = nil
        /// The endpoint of the primary node in this node group (shard).
        var primaryEndpoint: Endpoint? = nil

        public init() {}

        public init(nodeGroupMembers: [NodeGroupMember]? = nil, slots: String? = nil, status: String? = nil, nodeGroupId: String? = nil, primaryEndpoint: Endpoint? = nil) {
            self.nodeGroupMembers = nodeGroupMembers
            self.slots = slots
            self.status = status
            self.nodeGroupId = nodeGroupId
            self.primaryEndpoint = primaryEndpoint
        }

    }

    public struct DeleteSnapshotMessage: Serializable, Initializable {
        /// The name of the snapshot to be deleted.
        var snapshotName: String = ""

        public init() {}

        public init(snapshotName: String) {
            self.snapshotName = snapshotName
        }

    }

    public struct TagListMessage: Serializable, Initializable {
        /// A list of cost allocation tags as key-value pairs.
        var tagList: [Tag]? = nil

        public init() {}

        public init(tagList: [Tag]? = nil) {
            self.tagList = tagList
        }

    }

    public struct DeleteReplicationGroupMessage: Serializable, Initializable {
        /// If set to true, all of the read replicas are deleted, but the primary node is retained.
        var retainPrimaryCluster: Bool? = nil
        /// The name of a final node group (shard) snapshot. ElastiCache creates the snapshot from the primary node in the cluster, rather than one of the replicas; this is to ensure that it captures the freshest data. After the final snapshot is taken, the replication group is immediately deleted.
        var finalSnapshotIdentifier: String? = nil
        /// The identifier for the cluster to be deleted. This parameter is not case sensitive.
        var replicationGroupId: String = ""

        public init() {}

        public init(retainPrimaryCluster: Bool? = nil, finalSnapshotIdentifier: String? = nil, replicationGroupId: String) {
            self.retainPrimaryCluster = retainPrimaryCluster
            self.finalSnapshotIdentifier = finalSnapshotIdentifier
            self.replicationGroupId = replicationGroupId
        }

    }

    public struct ModifyReplicationGroupResult: Serializable, Initializable {
        var replicationGroup: ReplicationGroup? = nil

        public init() {}

        public init(replicationGroup: ReplicationGroup? = nil) {
            self.replicationGroup = replicationGroup
        }

    }

    public struct ReservedCacheNodeMessage: Serializable, Initializable {
        /// Provides an identifier to allow retrieval of paginated results.
        var marker: String? = nil
        /// A list of reserved cache nodes. Each element in the list contains detailed information about one node.
        var reservedCacheNodes: [ReservedCacheNode]? = nil

        public init() {}

        public init(marker: String? = nil, reservedCacheNodes: [ReservedCacheNode]? = nil) {
            self.marker = marker
            self.reservedCacheNodes = reservedCacheNodes
        }

    }

    public struct DescribeReplicationGroupsMessage: Serializable, Initializable {
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        var maxRecords: Int32? = nil
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        var marker: String? = nil
        /// The identifier for the replication group to be described. This parameter is not case sensitive. If you do not specify this parameter, information about all replication groups is returned.
        var replicationGroupId: String? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, marker: String? = nil, replicationGroupId: String? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.replicationGroupId = replicationGroupId
        }

    }

    public struct DeleteCacheSecurityGroupMessage: Serializable, Initializable {
        /// The name of the cache security group to delete.  You cannot delete the default security group. 
        var cacheSecurityGroupName: String = ""

        public init() {}

        public init(cacheSecurityGroupName: String) {
            self.cacheSecurityGroupName = cacheSecurityGroupName
        }

    }

    public struct CreateCacheSubnetGroupMessage: Serializable, Initializable {
        /// A name for the cache subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters or hyphens. Example: mysubnetgroup 
        var cacheSubnetGroupName: String = ""
        /// A list of VPC subnet IDs for the cache subnet group.
        var subnetIds: [String] = []
        /// A description for the cache subnet group.
        var cacheSubnetGroupDescription: String = ""

        public init() {}

        public init(cacheSubnetGroupName: String, subnetIds: [String], cacheSubnetGroupDescription: String) {
            self.cacheSubnetGroupName = cacheSubnetGroupName
            self.subnetIds = subnetIds
            self.cacheSubnetGroupDescription = cacheSubnetGroupDescription
        }

    }

    public struct PendingModifiedValues: Serializable, Initializable {
        /// The cache node type that this cache cluster or replication group is scaled to.
        var cacheNodeType: String? = nil
        /// The new cache engine version that the cache cluster runs.
        var engineVersion: String? = nil
        /// The new number of cache nodes for the cache cluster. For clusters running Redis, this value must be 1. For clusters running Memcached, this value must be between 1 and 20.
        var numCacheNodes: Int32? = nil
        /// A list of cache node IDs that are being removed (or will be removed) from the cache cluster. A node ID is a numeric identifier (0001, 0002, etc.).
        var cacheNodeIdsToRemove: [String]? = nil

        public init() {}

        public init(cacheNodeType: String? = nil, engineVersion: String? = nil, numCacheNodes: Int32? = nil, cacheNodeIdsToRemove: [String]? = nil) {
            self.cacheNodeType = cacheNodeType
            self.engineVersion = engineVersion
            self.numCacheNodes = numCacheNodes
            self.cacheNodeIdsToRemove = cacheNodeIdsToRemove
        }

    }

    public struct ModifyReplicationGroupMessage: Serializable, Initializable {
        /// A list of cache security group names to authorize for the clusters in this replication group. This change is asynchronously applied as soon as possible. This parameter can be used only with replication group containing cache clusters running outside of an Amazon Virtual Private Cloud (Amazon VPC). Constraints: Must contain no more than 255 alphanumeric characters. Must not be Default.
        var cacheSecurityGroupNames: [String]? = nil
        /// The status of the Amazon SNS notification topic for the replication group. Notifications are sent only if the status is active. Valid values: active | inactive 
        var notificationTopicStatus: String? = nil
        /// Specifies the VPC Security Groups associated with the cache clusters in the replication group. This parameter can be used only with replication group containing cache clusters running in an Amazon Virtual Private Cloud (Amazon VPC).
        var securityGroupIds: [String]? = nil
        /// If true, this parameter causes the modifications in this request and any pending modifications to be applied, asynchronously and as soon as possible, regardless of the PreferredMaintenanceWindow setting for the replication group. If false, changes to the nodes in the replication group are applied on the next maintenance reboot, or the next failure reboot, whichever occurs first. Valid values: true | false  Default: false 
        var applyImmediately: Bool? = nil
        /// This parameter is currently disabled.
        var autoMinorVersionUpgrade: Bool? = nil
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications are sent.  The Amazon SNS topic owner must be same as the replication group owner.  
        var notificationTopicArn: String? = nil
        /// The cache cluster ID that is used as the daily snapshot source for the replication group. This parameter cannot be set for Redis (cluster mode enabled) replication groups.
        var snapshottingClusterId: String? = nil
        /// The daily time range (in UTC) during which ElastiCache begins taking a daily snapshot of the node group (shard) specified by SnapshottingClusterId. Example: 05:00-09:00  If you do not specify this parameter, ElastiCache automatically chooses an appropriate time range.
        var snapshotWindow: String? = nil
        /// The upgraded version of the cache engine to be run on the cache clusters in the replication group.  Important: You can upgrade to a newer engine version (see Selecting a Cache Engine and Version), but you cannot downgrade to an earlier engine version. If you want to use an earlier engine version, you must delete the existing replication group and create it anew with the earlier engine version. 
        var engineVersion: String? = nil
        /// The identifier of the replication group to modify.
        var replicationGroupId: String = ""
        /// Specifies the weekly time range during which maintenance on the cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:    sun     mon     tue     wed     thu     fri     sat    Example: sun:23:00-mon:01:30 
        var preferredMaintenanceWindow: String? = nil
        /// The name of the cache parameter group to apply to all of the clusters in this replication group. This change is asynchronously applied as soon as possible for parameters when the ApplyImmediately parameter is specified as true for this request.
        var cacheParameterGroupName: String? = nil
        /// A description for the replication group. Maximum length is 255 characters.
        var replicationGroupDescription: String? = nil
        /// For replication groups with a single primary, if this parameter is specified, ElastiCache promotes the specified cluster in the specified replication group to the primary role. The nodes of all other clusters in the replication group are read replicas.
        var primaryClusterId: String? = nil
        /// A valid cache node type that you want to scale this replication group to.
        var cacheNodeType: String? = nil
        /// Determines whether a read replica is automatically promoted to read/write primary if the existing primary encounters a failure. Valid values: true | false   ElastiCache Multi-AZ replication groups are not supported on:   Redis versions earlier than 2.8.6.   Redis (cluster mode disabled):T1 and T2 cache node types. Redis (cluster mode enabled): T1 node types.   
        var automaticFailoverEnabled: Bool? = nil
        /// The number of days for which ElastiCache retains automatic node group (shard) snapshots before deleting them. For example, if you set SnapshotRetentionLimit to 5, a snapshot that was taken today is retained for 5 days before being deleted.  Important If the value of SnapshotRetentionLimit is set to zero (0), backups are turned off.
        var snapshotRetentionLimit: Int32? = nil

        public init() {}

        public init(cacheSecurityGroupNames: [String]? = nil, notificationTopicStatus: String? = nil, securityGroupIds: [String]? = nil, applyImmediately: Bool? = nil, autoMinorVersionUpgrade: Bool? = nil, notificationTopicArn: String? = nil, snapshottingClusterId: String? = nil, snapshotWindow: String? = nil, engineVersion: String? = nil, replicationGroupId: String, preferredMaintenanceWindow: String? = nil, cacheParameterGroupName: String? = nil, replicationGroupDescription: String? = nil, primaryClusterId: String? = nil, cacheNodeType: String? = nil, automaticFailoverEnabled: Bool? = nil, snapshotRetentionLimit: Int32? = nil) {
            self.cacheSecurityGroupNames = cacheSecurityGroupNames
            self.notificationTopicStatus = notificationTopicStatus
            self.securityGroupIds = securityGroupIds
            self.applyImmediately = applyImmediately
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.notificationTopicArn = notificationTopicArn
            self.snapshottingClusterId = snapshottingClusterId
            self.snapshotWindow = snapshotWindow
            self.engineVersion = engineVersion
            self.replicationGroupId = replicationGroupId
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.cacheParameterGroupName = cacheParameterGroupName
            self.replicationGroupDescription = replicationGroupDescription
            self.primaryClusterId = primaryClusterId
            self.cacheNodeType = cacheNodeType
            self.automaticFailoverEnabled = automaticFailoverEnabled
            self.snapshotRetentionLimit = snapshotRetentionLimit
        }

    }

    public struct DescribeCacheSecurityGroupsMessage: Serializable, Initializable {
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        var marker: String? = nil
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        var maxRecords: Int32? = nil
        /// The name of the cache security group to return details for.
        var cacheSecurityGroupName: String? = nil

        public init() {}

        public init(marker: String? = nil, maxRecords: Int32? = nil, cacheSecurityGroupName: String? = nil) {
            self.marker = marker
            self.maxRecords = maxRecords
            self.cacheSecurityGroupName = cacheSecurityGroupName
        }

    }

    public struct CacheNodeTypeSpecificParameter: Serializable, Initializable {
        /// A list of cache node types and their corresponding values for this parameter.
        var cacheNodeTypeSpecificValues: [CacheNodeTypeSpecificValue]? = nil
        /// The valid range of values for the parameter.
        var allowedValues: String? = nil
        /// The valid data type for the parameter.
        var dataType: String? = nil
        /// The name of the parameter.
        var parameterName: String? = nil
        /// The source of the parameter value.
        var source: String? = nil
        /// Indicates whether (true) or not (false) the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed.
        var isModifiable: Bool? = nil
        /// The earliest cache engine version to which the parameter can apply.
        var minimumEngineVersion: String? = nil
        /// Indicates whether a change to the parameter is applied immediately or requires a reboot for the change to be applied. You can force a reboot or wait until the next maintenance window's reboot. For more information, see Rebooting a Cluster.
        var changeType: String? = nil
        /// A description of the parameter.
        var description: String? = nil

        public init() {}

        public init(cacheNodeTypeSpecificValues: [CacheNodeTypeSpecificValue]? = nil, allowedValues: String? = nil, dataType: String? = nil, parameterName: String? = nil, source: String? = nil, isModifiable: Bool? = nil, minimumEngineVersion: String? = nil, changeType: String? = nil, description: String? = nil) {
            self.cacheNodeTypeSpecificValues = cacheNodeTypeSpecificValues
            self.allowedValues = allowedValues
            self.dataType = dataType
            self.parameterName = parameterName
            self.source = source
            self.isModifiable = isModifiable
            self.minimumEngineVersion = minimumEngineVersion
            self.changeType = changeType
            self.description = description
        }

    }

    public struct PurchaseReservedCacheNodesOfferingResult: Serializable, Initializable {
        var reservedCacheNode: ReservedCacheNode? = nil

        public init() {}

        public init(reservedCacheNode: ReservedCacheNode? = nil) {
            self.reservedCacheNode = reservedCacheNode
        }

    }

    public struct DescribeCacheParameterGroupsMessage: Serializable, Initializable {
        /// An optional marker returned from a prior request. Use this marker for pagination of results from this operation. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        var marker: String? = nil
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a marker is included in the response so that the remaining results can be retrieved. Default: 100 Constraints: minimum 20; maximum 100.
        var maxRecords: Int32? = nil
        /// The name of a specific cache parameter group to return details for.
        var cacheParameterGroupName: String? = nil

        public init() {}

        public init(marker: String? = nil, maxRecords: Int32? = nil, cacheParameterGroupName: String? = nil) {
            self.marker = marker
            self.maxRecords = maxRecords
            self.cacheParameterGroupName = cacheParameterGroupName
        }

    }

    public struct CreateCacheSubnetGroupResult: Serializable, Initializable {
        var cacheSubnetGroup: CacheSubnetGroup? = nil

        public init() {}

        public init(cacheSubnetGroup: CacheSubnetGroup? = nil) {
            self.cacheSubnetGroup = cacheSubnetGroup
        }

    }

}