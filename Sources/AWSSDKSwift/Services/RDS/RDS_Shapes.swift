// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension RDS {

    public struct DescribeEngineDefaultParametersResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EngineDefaults", required: false, type: .structure)
        ]
        public let engineDefaults: EngineDefaults?

        public init(engineDefaults: EngineDefaults? = nil) {
            self.engineDefaults = engineDefaults
        }

        private enum CodingKeys: String, CodingKey {
            case engineDefaults = "EngineDefaults"
        }
    }

    public struct OptionConfigurationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionConfiguration", required: false, type: .list)
        ]
        public let optionConfiguration: [OptionConfiguration]?

        public init(optionConfiguration: [OptionConfiguration]? = nil) {
            self.optionConfiguration = optionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case optionConfiguration = "OptionConfiguration"
        }
    }

    public struct ModifyEventSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnsTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "EventCategories", required: false, type: .structure), 
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
        public let snsTopicArn: String?
        /// The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned. Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot
        public let sourceType: String?
        ///  A Boolean value; set to true to activate the subscription. 
        public let enabled: Bool?
        ///  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the Events topic in the Amazon RDS User Guide or by using the DescribeEventCategories action. 
        public let eventCategories: EventCategoriesList?
        /// The name of the RDS event notification subscription.
        public let subscriptionName: String

        public init(snsTopicArn: String? = nil, sourceType: String? = nil, enabled: Bool? = nil, eventCategories: EventCategoriesList? = nil, subscriptionName: String) {
            self.snsTopicArn = snsTopicArn
            self.sourceType = sourceType
            self.enabled = enabled
            self.eventCategories = eventCategories
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case snsTopicArn = "SnsTopicArn"
            case sourceType = "SourceType"
            case enabled = "Enabled"
            case eventCategories = "EventCategories"
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct RemoveFromGlobalClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DbClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "GlobalClusterIdentifier", required: false, type: .string)
        ]
        ///  The Amazon Resource Name (ARN) identifying the cluster that was detached from the Aurora global database cluster. 
        public let dbClusterIdentifier: String?
        ///  The cluster identifier to detach from the Aurora global database cluster. 
        public let globalClusterIdentifier: String?

        public init(dbClusterIdentifier: String? = nil, globalClusterIdentifier: String? = nil) {
            self.dbClusterIdentifier = dbClusterIdentifier
            self.globalClusterIdentifier = globalClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dbClusterIdentifier = "DbClusterIdentifier"
            case globalClusterIdentifier = "GlobalClusterIdentifier"
        }
    }

    public struct EventSubscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "CustomerAwsId", required: false, type: .string), 
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "EventSubscriptionArn", required: false, type: .string), 
            AWSShapeMember(label: "SnsTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "SourceIdsList", required: false, type: .structure), 
            AWSShapeMember(label: "SubscriptionCreationTime", required: false, type: .string), 
            AWSShapeMember(label: "CustSubscriptionId", required: false, type: .string), 
            AWSShapeMember(label: "EventCategoriesList", required: false, type: .structure)
        ]
        /// A Boolean value indicating if the subscription is enabled. True indicates the subscription is enabled.
        public let enabled: Bool?
        /// The status of the RDS event notification subscription. Constraints: Can be one of the following: creating | modifying | deleting | active | no-permission | topic-not-exist The status "no-permission" indicates that RDS no longer has permission to post to the SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.
        public let status: String?
        /// The AWS customer account associated with the RDS event notification subscription.
        public let customerAwsId: String?
        /// The source type for the RDS event notification subscription.
        public let sourceType: String?
        /// The Amazon Resource Name (ARN) for the event subscription.
        public let eventSubscriptionArn: String?
        /// The topic ARN of the RDS event notification subscription.
        public let snsTopicArn: String?
        /// A list of source IDs for the RDS event notification subscription.
        public let sourceIdsList: SourceIdsList?
        /// The time the RDS event notification subscription was created.
        public let subscriptionCreationTime: String?
        /// The RDS event notification subscription Id.
        public let custSubscriptionId: String?
        /// A list of event categories for the RDS event notification subscription.
        public let eventCategoriesList: EventCategoriesList?

        public init(enabled: Bool? = nil, status: String? = nil, customerAwsId: String? = nil, sourceType: String? = nil, eventSubscriptionArn: String? = nil, snsTopicArn: String? = nil, sourceIdsList: SourceIdsList? = nil, subscriptionCreationTime: String? = nil, custSubscriptionId: String? = nil, eventCategoriesList: EventCategoriesList? = nil) {
            self.enabled = enabled
            self.status = status
            self.customerAwsId = customerAwsId
            self.sourceType = sourceType
            self.eventSubscriptionArn = eventSubscriptionArn
            self.snsTopicArn = snsTopicArn
            self.sourceIdsList = sourceIdsList
            self.subscriptionCreationTime = subscriptionCreationTime
            self.custSubscriptionId = custSubscriptionId
            self.eventCategoriesList = eventCategoriesList
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case status = "Status"
            case customerAwsId = "CustomerAwsId"
            case sourceType = "SourceType"
            case eventSubscriptionArn = "EventSubscriptionArn"
            case snsTopicArn = "SnsTopicArn"
            case sourceIdsList = "SourceIdsList"
            case subscriptionCreationTime = "SubscriptionCreationTime"
            case custSubscriptionId = "CustSubscriptionId"
            case eventCategoriesList = "EventCategoriesList"
        }
    }

    public struct DBClusterEndpoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterEndpointIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterEndpointArn", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "CustomEndpointType", required: false, type: .string), 
            AWSShapeMember(label: "ExcludedMembers", required: false, type: .list), 
            AWSShapeMember(label: "EndpointType", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterEndpointResourceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "StaticMembers", required: false, type: .list), 
            AWSShapeMember(label: "Endpoint", required: false, type: .string)
        ]
        /// The identifier associated with the endpoint. This parameter is stored as a lowercase string.
        public let dBClusterEndpointIdentifier: String?
        /// The Amazon Resource Name (ARN) for the endpoint.
        public let dBClusterEndpointArn: String?
        /// The current status of the endpoint. One of: creating, available, deleting, modifying.
        public let status: String?
        /// The type associated with a custom endpoint. One of: READER, ANY.
        public let customEndpointType: String?
        /// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
        public let excludedMembers: [String]?
        /// The type of the endpoint. One of: READER, WRITER, CUSTOM.
        public let endpointType: String?
        /// A unique system-generated identifier for an endpoint. It remains the same for the whole life of the endpoint.
        public let dBClusterEndpointResourceIdentifier: String?
        /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
        public let dBClusterIdentifier: String?
        /// List of DB instance identifiers that are part of the custom endpoint group.
        public let staticMembers: [String]?
        /// The DNS address of the endpoint.
        public let endpoint: String?

        public init(dBClusterEndpointIdentifier: String? = nil, dBClusterEndpointArn: String? = nil, status: String? = nil, customEndpointType: String? = nil, excludedMembers: [String]? = nil, endpointType: String? = nil, dBClusterEndpointResourceIdentifier: String? = nil, dBClusterIdentifier: String? = nil, staticMembers: [String]? = nil, endpoint: String? = nil) {
            self.dBClusterEndpointIdentifier = dBClusterEndpointIdentifier
            self.dBClusterEndpointArn = dBClusterEndpointArn
            self.status = status
            self.customEndpointType = customEndpointType
            self.excludedMembers = excludedMembers
            self.endpointType = endpointType
            self.dBClusterEndpointResourceIdentifier = dBClusterEndpointResourceIdentifier
            self.dBClusterIdentifier = dBClusterIdentifier
            self.staticMembers = staticMembers
            self.endpoint = endpoint
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterEndpointIdentifier = "DBClusterEndpointIdentifier"
            case dBClusterEndpointArn = "DBClusterEndpointArn"
            case status = "Status"
            case customEndpointType = "CustomEndpointType"
            case excludedMembers = "ExcludedMembers"
            case endpointType = "EndpointType"
            case dBClusterEndpointResourceIdentifier = "DBClusterEndpointResourceIdentifier"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case staticMembers = "StaticMembers"
            case endpoint = "Endpoint"
        }
    }

    public struct RemoveSourceIdentifierFromSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string)
        ]
        ///  The source identifier to be removed from the subscription, such as the DB instance identifier for a DB instance or the name of a security group. 
        public let sourceIdentifier: String
        /// The name of the RDS event notification subscription you want to remove a source identifier from.
        public let subscriptionName: String

        public init(sourceIdentifier: String, subscriptionName: String) {
            self.sourceIdentifier = sourceIdentifier
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case sourceIdentifier = "SourceIdentifier"
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct DeleteDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "SkipFinalSnapshot", required: false, type: .boolean), 
            AWSShapeMember(label: "FinalDBSnapshotIdentifier", required: false, type: .string)
        ]
        /// The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive. Constraints:   Must match an existing DBClusterIdentifier.  
        public let dBClusterIdentifier: String
        ///  Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If true is specified, no DB cluster snapshot is created. If false is specified, a DB cluster snapshot is created before the DB cluster is deleted.   You must specify a FinalDBSnapshotIdentifier parameter if SkipFinalSnapshot is false.  Default: false 
        public let skipFinalSnapshot: Bool?
        ///  The DB cluster snapshot identifier of the new DB cluster snapshot created when SkipFinalSnapshot is set to false.    Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.   Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens  
        public let finalDBSnapshotIdentifier: String?

        public init(dBClusterIdentifier: String, skipFinalSnapshot: Bool? = nil, finalDBSnapshotIdentifier: String? = nil) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.skipFinalSnapshot = skipFinalSnapshot
            self.finalDBSnapshotIdentifier = finalDBSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case skipFinalSnapshot = "SkipFinalSnapshot"
            case finalDBSnapshotIdentifier = "FinalDBSnapshotIdentifier"
        }
    }

    public struct PurchaseReservedDBInstancesOfferingMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedDBInstancesOfferingId", required: true, type: .string), 
            AWSShapeMember(label: "DBInstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "ReservedDBInstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// The ID of the Reserved DB instance offering to purchase. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706
        public let reservedDBInstancesOfferingId: String
        /// The number of instances to reserve. Default: 1 
        public let dBInstanceCount: Int32?
        /// Customer-specified identifier to track this reservation. Example: myreservationID
        public let reservedDBInstanceId: String?
        public let tags: TagList?

        public init(reservedDBInstancesOfferingId: String, dBInstanceCount: Int32? = nil, reservedDBInstanceId: String? = nil, tags: TagList? = nil) {
            self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
            self.dBInstanceCount = dBInstanceCount
            self.reservedDBInstanceId = reservedDBInstanceId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
            case dBInstanceCount = "DBInstanceCount"
            case reservedDBInstanceId = "ReservedDBInstanceId"
            case tags = "Tags"
        }
    }

    public struct AccountQuota: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Used", required: false, type: .long), 
            AWSShapeMember(label: "Max", required: false, type: .long), 
            AWSShapeMember(label: "AccountQuotaName", required: false, type: .string)
        ]
        /// The amount currently used toward the quota maximum.
        public let used: Int64?
        /// The maximum allowed value for the quota.
        public let max: Int64?
        /// The name of the Amazon RDS quota for this AWS account.
        public let accountQuotaName: String?

        public init(used: Int64? = nil, max: Int64? = nil, accountQuotaName: String? = nil) {
            self.used = used
            self.max = max
            self.accountQuotaName = accountQuotaName
        }

        private enum CodingKeys: String, CodingKey {
            case used = "Used"
            case max = "Max"
            case accountQuotaName = "AccountQuotaName"
        }
    }

    public enum ApplyMethod: String, CustomStringConvertible, Codable {
        case immediate = "immediate"
        case pendingReboot = "pending-reboot"
        public var description: String { return self.rawValue }
    }

    public struct StopDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string)
        ]
        /// The DB cluster identifier of the Amazon Aurora DB cluster to be stopped. This parameter is stored as a lowercase string.
        public let dBClusterIdentifier: String

        public init(dBClusterIdentifier: String) {
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct PromoteReadReplicaMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "PreferredBackupWindow", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string)
        ]
        /// The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups. Default: 1 Constraints:   Must be a value from 0 to 8  
        public let backupRetentionPeriod: Int32?
        ///  The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter.   The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see  Adjusting the Preferred Maintenance Window in the Amazon RDS User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.  
        public let preferredBackupWindow: String?
        /// The DB instance identifier. This value is stored as a lowercase string. Constraints:   Must match the identifier of an existing Read Replica DB instance.   Example: mydbinstance 
        public let dBInstanceIdentifier: String

        public init(backupRetentionPeriod: Int32? = nil, preferredBackupWindow: String? = nil, dBInstanceIdentifier: String) {
            self.backupRetentionPeriod = backupRetentionPeriod
            self.preferredBackupWindow = preferredBackupWindow
            self.dBInstanceIdentifier = dBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case preferredBackupWindow = "PreferredBackupWindow"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
        }
    }

    public struct SubnetIdentifierList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIdentifier", required: false, type: .list)
        ]
        public let subnetIdentifier: [String]?

        public init(subnetIdentifier: [String]? = nil) {
            self.subnetIdentifier = subnetIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIdentifier = "SubnetIdentifier"
        }
    }

    public struct OptionGroupOptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroupOptions", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        public let optionGroupOptions: OptionGroupOptionsList?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(optionGroupOptions: OptionGroupOptionsList? = nil, marker: String? = nil) {
            self.optionGroupOptions = optionGroupOptions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroupOptions = "OptionGroupOptions"
            case marker = "Marker"
        }
    }

    public struct Range: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "To", required: false, type: .integer), 
            AWSShapeMember(label: "From", required: false, type: .integer), 
            AWSShapeMember(label: "Step", required: false, type: .integer)
        ]
        /// The maximum value in the range.
        public let to: Int32?
        /// The minimum value in the range.
        public let from: Int32?
        /// The step value for the range. For example, if you have a range of 5,000 to 10,000, with a step value of 1,000, the valid values start at 5,000 and step up by 1,000. Even though 7,500 is within the range, it isn't a valid value for the range. The valid values are 5,000, 6,000, 7,000, 8,000... 
        public let step: Int32?

        public init(to: Int32? = nil, from: Int32? = nil, step: Int32? = nil) {
            self.to = to
            self.from = from
            self.step = step
        }

        private enum CodingKeys: String, CodingKey {
            case to = "To"
            case from = "From"
            case step = "Step"
        }
    }

    public struct EventSubscriptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscriptionsList", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A list of EventSubscriptions data types.
        public let eventSubscriptionsList: EventSubscriptionsList?
        ///  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(eventSubscriptionsList: EventSubscriptionsList? = nil, marker: String? = nil) {
            self.eventSubscriptionsList = eventSubscriptionsList
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscriptionsList = "EventSubscriptionsList"
            case marker = "Marker"
        }
    }

    public struct Subnet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetStatus", required: false, type: .string), 
            AWSShapeMember(label: "SubnetIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SubnetAvailabilityZone", required: false, type: .structure)
        ]
        /// Specifies the status of the subnet.
        public let subnetStatus: String?
        /// Specifies the identifier of the subnet.
        public let subnetIdentifier: String?
        public let subnetAvailabilityZone: AvailabilityZone?

        public init(subnetStatus: String? = nil, subnetIdentifier: String? = nil, subnetAvailabilityZone: AvailabilityZone? = nil) {
            self.subnetStatus = subnetStatus
            self.subnetIdentifier = subnetIdentifier
            self.subnetAvailabilityZone = subnetAvailabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case subnetStatus = "SubnetStatus"
            case subnetIdentifier = "SubnetIdentifier"
            case subnetAvailabilityZone = "SubnetAvailabilityZone"
        }
    }

    public struct CreateEventSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceIds", required: false, type: .structure), 
            AWSShapeMember(label: "EventCategories", required: false, type: .structure), 
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "SnsTopicArn", required: true, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens. Constraints:   If SourceIds are supplied, SourceType must also be provided.   If the source type is a DB instance, then a DBInstanceIdentifier must be supplied.   If the source type is a DB security group, a DBSecurityGroupName must be supplied.   If the source type is a DB parameter group, a DBParameterGroupName must be supplied.   If the source type is a DB snapshot, a DBSnapshotIdentifier must be supplied.  
        public let sourceIds: SourceIdsList?
        ///  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the Events topic in the Amazon RDS User Guide or by using the DescribeEventCategories action. 
        public let eventCategories: EventCategoriesList?
        /// The name of the subscription. Constraints: The name must be less than 255 characters.
        public let subscriptionName: String
        public let tags: TagList?
        /// The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned. Valid values: db-instance | db-cluster | db-parameter-group | db-security-group | db-snapshot | db-cluster-snapshot 
        public let sourceType: String?
        /// The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
        public let snsTopicArn: String
        ///  A Boolean value; set to true to activate the subscription, set to false to create the subscription but not active it. 
        public let enabled: Bool?

        public init(sourceIds: SourceIdsList? = nil, eventCategories: EventCategoriesList? = nil, subscriptionName: String, tags: TagList? = nil, sourceType: String? = nil, snsTopicArn: String, enabled: Bool? = nil) {
            self.sourceIds = sourceIds
            self.eventCategories = eventCategories
            self.subscriptionName = subscriptionName
            self.tags = tags
            self.sourceType = sourceType
            self.snsTopicArn = snsTopicArn
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case sourceIds = "SourceIds"
            case eventCategories = "EventCategories"
            case subscriptionName = "SubscriptionName"
            case tags = "Tags"
            case sourceType = "SourceType"
            case snsTopicArn = "SnsTopicArn"
            case enabled = "Enabled"
        }
    }

    public struct ValidStorageOptionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ValidStorageOptions", required: false, type: .list)
        ]
        public let validStorageOptions: [ValidStorageOptions]?

        public init(validStorageOptions: [ValidStorageOptions]? = nil) {
            self.validStorageOptions = validStorageOptions
        }

        private enum CodingKeys: String, CodingKey {
            case validStorageOptions = "ValidStorageOptions"
        }
    }

    public struct ValidStorageOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "IopsToStorageRatio", required: false, type: .structure), 
            AWSShapeMember(label: "ProvisionedIops", required: false, type: .structure), 
            AWSShapeMember(label: "StorageSize", required: false, type: .structure)
        ]
        /// The valid storage types for your DB instance. For example, gp2, io1. 
        public let storageType: String?
        /// The valid range of Provisioned IOPS to gibibytes of storage multiplier. For example, 3-10, which means that provisioned IOPS can be between 3 and 10 times storage. 
        public let iopsToStorageRatio: DoubleRangeList?
        /// The valid range of provisioned IOPS. For example, 1000-20000. 
        public let provisionedIops: RangeList?
        /// The valid range of storage in gibibytes. For example, 100 to 16384. 
        public let storageSize: RangeList?

        public init(storageType: String? = nil, iopsToStorageRatio: DoubleRangeList? = nil, provisionedIops: RangeList? = nil, storageSize: RangeList? = nil) {
            self.storageType = storageType
            self.iopsToStorageRatio = iopsToStorageRatio
            self.provisionedIops = provisionedIops
            self.storageSize = storageSize
        }

        private enum CodingKeys: String, CodingKey {
            case storageType = "StorageType"
            case iopsToStorageRatio = "IopsToStorageRatio"
            case provisionedIops = "ProvisionedIops"
            case storageSize = "StorageSize"
        }
    }

    public struct AvailabilityZone: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the Availability Zone.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct DBInstanceAutomatedBackupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstanceAutomatedBackups", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  A list of DBInstanceAutomatedBackup instances. 
        public let dBInstanceAutomatedBackups: DBInstanceAutomatedBackupList?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords . 
        public let marker: String?

        public init(dBInstanceAutomatedBackups: DBInstanceAutomatedBackupList? = nil, marker: String? = nil) {
            self.dBInstanceAutomatedBackups = dBInstanceAutomatedBackups
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceAutomatedBackups = "DBInstanceAutomatedBackups"
            case marker = "Marker"
        }
    }

    public struct DescribeDBClusterSnapshotAttributesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshotIdentifier", required: true, type: .string)
        ]
        /// The identifier for the DB cluster snapshot to describe the attributes for.
        public let dBClusterSnapshotIdentifier: String

        public init(dBClusterSnapshotIdentifier: String) {
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
        }
    }

    public struct CopyDBParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceDBParameterGroupIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "TargetDBParameterGroupDescription", required: true, type: .string), 
            AWSShapeMember(label: "TargetDBParameterGroupIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        ///  The identifier or ARN for the source DB parameter group. For information about creating an ARN, see  Constructing an ARN for Amazon RDS in the Amazon RDS User Guide.  Constraints:   Must specify a valid DB parameter group.   Must specify a valid DB parameter group identifier, for example my-db-param-group, or a valid ARN.  
        public let sourceDBParameterGroupIdentifier: String
        /// A description for the copied DB parameter group.
        public let targetDBParameterGroupDescription: String
        /// The identifier for the copied DB parameter group. Constraints:   Can't be null, empty, or blank   Must contain from 1 to 255 letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: my-db-parameter-group 
        public let targetDBParameterGroupIdentifier: String
        public let tags: TagList?

        public init(sourceDBParameterGroupIdentifier: String, targetDBParameterGroupDescription: String, targetDBParameterGroupIdentifier: String, tags: TagList? = nil) {
            self.sourceDBParameterGroupIdentifier = sourceDBParameterGroupIdentifier
            self.targetDBParameterGroupDescription = targetDBParameterGroupDescription
            self.targetDBParameterGroupIdentifier = targetDBParameterGroupIdentifier
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case sourceDBParameterGroupIdentifier = "SourceDBParameterGroupIdentifier"
            case targetDBParameterGroupDescription = "TargetDBParameterGroupDescription"
            case targetDBParameterGroupIdentifier = "TargetDBParameterGroupIdentifier"
            case tags = "Tags"
        }
    }

    public struct PurchaseReservedDBInstancesOfferingResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedDBInstance", required: false, type: .structure)
        ]
        public let reservedDBInstance: ReservedDBInstance?

        public init(reservedDBInstance: ReservedDBInstance? = nil) {
            self.reservedDBInstance = reservedDBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case reservedDBInstance = "ReservedDBInstance"
        }
    }

    public struct DescribeEngineDefaultClusterParametersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroupFamily", required: true, type: .string)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous DescribeEngineDefaultClusterParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The name of the DB cluster parameter group family to return engine parameter information for.
        public let dBParameterGroupFamily: String

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, marker: String? = nil, dBParameterGroupFamily: String) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
            self.dBParameterGroupFamily = dBParameterGroupFamily
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
        }
    }

    public struct GlobalClusterMember: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsWriter", required: false, type: .boolean), 
            AWSShapeMember(label: "Readers", required: false, type: .list), 
            AWSShapeMember(label: "DBClusterArn", required: false, type: .string)
        ]
        ///  Specifies whether the Aurora cluster is the primary cluster (that is, has read-write capability) for the Aurora global database with which it is associated. 
        public let isWriter: Bool?
        ///  The Amazon Resource Name (ARN) for each read-only secondary cluster associated with the Aurora global database. 
        public let readers: [String]?
        ///  The Amazon Resource Name (ARN) for each Aurora cluster. 
        public let dBClusterArn: String?

        public init(isWriter: Bool? = nil, readers: [String]? = nil, dBClusterArn: String? = nil) {
            self.isWriter = isWriter
            self.readers = readers
            self.dBClusterArn = dBClusterArn
        }

        private enum CodingKeys: String, CodingKey {
            case isWriter = "IsWriter"
            case readers = "Readers"
            case dBClusterArn = "DBClusterArn"
        }
    }

    public struct EngineDefaults: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroupFamily", required: false, type: .string), 
            AWSShapeMember(label: "Parameters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Specifies the name of the DB parameter group family that the engine default parameters apply to.
        public let dBParameterGroupFamily: String?
        /// Contains a list of engine default parameters.
        public let parameters: ParametersList?
        ///  An optional pagination token provided by a previous EngineDefaults request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords . 
        public let marker: String?

        public init(dBParameterGroupFamily: String? = nil, parameters: ParametersList? = nil, marker: String? = nil) {
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.parameters = parameters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case parameters = "Parameters"
            case marker = "Marker"
        }
    }

    public struct CopyDBSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "PreSignedUrl", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "TargetDBSnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "CopyTags", required: false, type: .boolean), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "SourceDBSnapshotIdentifier", required: true, type: .string)
        ]
        /// The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.  If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot.  If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter.  If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted.  If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. 
        public let kmsKeyId: String?
        /// The URL that contains a Signature Version 4 signed request for the CopyDBSnapshot API action in the source AWS Region that contains the source DB snapshot to copy.  You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the --source-region option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI.  The presigned URL must be a valid request for the CopyDBSnapshot API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values:     DestinationRegion - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the CopyDBSnapshot action is called that contains this presigned URL.  For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the CopyDBSnapshot action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the CopyDBSnapshot action in the us-west-2 AWS Region. For this example, the DestinationRegion in the presigned URL must be set to the us-east-1 AWS Region.     KmsKeyId - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the CopyDBSnapshot action that is called in the destination AWS Region, and the action contained in the presigned URL.     SourceDBSnapshotIdentifier - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your SourceDBSnapshotIdentifier looks like the following example: arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115.    To learn how to generate a Signature Version 4 signed request, see Authenticating Requests: Using Query Parameters (AWS Signature Version 4) and Signature Version 4 Signing Process. 
        public let preSignedUrl: String?
        public let tags: TagList?
        /// The identifier for the copy of the snapshot.  Constraints:   Can't be null, empty, or blank   Must contain from 1 to 255 letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: my-db-snapshot 
        public let targetDBSnapshotIdentifier: String
        /// True to copy all tags from the source DB snapshot to the target DB snapshot, and otherwise false. The default is false.
        public let copyTags: Bool?
        /// The name of an option group to associate with the copy of the snapshot. Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see Option Group Considerations in the Amazon RDS User Guide. 
        public let optionGroupName: String?
        /// The identifier for the source DB snapshot. If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify rds:mysql-instance1-snapshot-20130805.  If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805.  If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot.  If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the SourceDBSnapshotIdentifier in the PreSignedUrl parameter.  Constraints:   Must specify a valid system snapshot in the "available" state.   Example: rds:mydb-2012-04-02-00-01  Example: arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805 
        public let sourceDBSnapshotIdentifier: String

        public init(kmsKeyId: String? = nil, preSignedUrl: String? = nil, tags: TagList? = nil, targetDBSnapshotIdentifier: String, copyTags: Bool? = nil, optionGroupName: String? = nil, sourceDBSnapshotIdentifier: String) {
            self.kmsKeyId = kmsKeyId
            self.preSignedUrl = preSignedUrl
            self.tags = tags
            self.targetDBSnapshotIdentifier = targetDBSnapshotIdentifier
            self.copyTags = copyTags
            self.optionGroupName = optionGroupName
            self.sourceDBSnapshotIdentifier = sourceDBSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case preSignedUrl = "PreSignedUrl"
            case tags = "Tags"
            case targetDBSnapshotIdentifier = "TargetDBSnapshotIdentifier"
            case copyTags = "CopyTags"
            case optionGroupName = "OptionGroupName"
            case sourceDBSnapshotIdentifier = "SourceDBSnapshotIdentifier"
        }
    }

    public struct ModifyOptionGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroup", required: false, type: .structure)
        ]
        public let optionGroup: OptionGroup?

        public init(optionGroup: OptionGroup? = nil) {
            self.optionGroup = optionGroup
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroup = "OptionGroup"
        }
    }

    public struct OptionGroupMembershipList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroupMembership", required: false, type: .list)
        ]
        public let optionGroupMembership: [OptionGroupMembership]?

        public init(optionGroupMembership: [OptionGroupMembership]? = nil) {
            self.optionGroupMembership = optionGroupMembership
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroupMembership = "OptionGroupMembership"
        }
    }

    public struct CertificateMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificates", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The list of Certificate objects for the AWS account.
        public let certificates: CertificateList?
        ///  An optional pagination token provided by a previous DescribeCertificates request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords . 
        public let marker: String?

        public init(certificates: CertificateList? = nil, marker: String? = nil) {
            self.certificates = certificates
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "Certificates"
            case marker = "Marker"
        }
    }

    public struct DescribeReservedDBInstancesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "ReservedDBInstanceId", required: false, type: .string), 
            AWSShapeMember(label: "ProductDescription", required: false, type: .string), 
            AWSShapeMember(label: "OfferingType", required: false, type: .string), 
            AWSShapeMember(label: "Duration", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "ReservedDBInstancesOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The Multi-AZ filter value. Specify this parameter to show only those reservations matching the specified Multi-AZ parameter.
        public let multiAZ: Bool?
        /// The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
        public let reservedDBInstanceId: String?
        /// The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
        public let productDescription: String?
        /// The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type. Valid Values: "Partial Upfront" | "All Upfront" | "No Upfront"  
        public let offeringType: String?
        /// The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration. Valid Values: 1 | 3 | 31536000 | 94608000 
        public let duration: String?
        /// The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
        public let dBInstanceClass: String?
        /// The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
        public let reservedDBInstancesOfferingId: String?
        ///  The maximum number of records to include in the response. If more than the MaxRecords value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(filters: FilterList? = nil, marker: String? = nil, multiAZ: Bool? = nil, reservedDBInstanceId: String? = nil, productDescription: String? = nil, offeringType: String? = nil, duration: String? = nil, dBInstanceClass: String? = nil, reservedDBInstancesOfferingId: String? = nil, maxRecords: Int32? = nil) {
            self.filters = filters
            self.marker = marker
            self.multiAZ = multiAZ
            self.reservedDBInstanceId = reservedDBInstanceId
            self.productDescription = productDescription
            self.offeringType = offeringType
            self.duration = duration
            self.dBInstanceClass = dBInstanceClass
            self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case marker = "Marker"
            case multiAZ = "MultiAZ"
            case reservedDBInstanceId = "ReservedDBInstanceId"
            case productDescription = "ProductDescription"
            case offeringType = "OfferingType"
            case duration = "Duration"
            case dBInstanceClass = "DBInstanceClass"
            case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
            case maxRecords = "MaxRecords"
        }
    }

    public struct CreateDBClusterSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "DBClusterSnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string)
        ]
        /// The tags to be assigned to the DB cluster snapshot.
        public let tags: TagList?
        /// The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example: my-cluster1-snapshot1 
        public let dBClusterSnapshotIdentifier: String
        /// The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive. Constraints:   Must match the identifier of an existing DBCluster.   Example: my-cluster1 
        public let dBClusterIdentifier: String

        public init(tags: TagList? = nil, dBClusterSnapshotIdentifier: String, dBClusterIdentifier: String) {
            self.tags = tags
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct DBClusterSnapshotList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshot", required: false, type: .list)
        ]
        public let dBClusterSnapshot: [DBClusterSnapshot]?

        public init(dBClusterSnapshot: [DBClusterSnapshot]? = nil) {
            self.dBClusterSnapshot = dBClusterSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshot = "DBClusterSnapshot"
        }
    }

    public struct ProcessorFeature: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The value of a processor feature name.
        public let value: String?
        /// The name of the processor feature. Valid names are coreCount and threadsPerCore.
        public let name: String?

        public init(value: String? = nil, name: String? = nil) {
            self.value = value
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case name = "Name"
        }
    }

    public struct ApplyPendingMaintenanceActionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourcePendingMaintenanceActions", required: false, type: .structure)
        ]
        public let resourcePendingMaintenanceActions: ResourcePendingMaintenanceActions?

        public init(resourcePendingMaintenanceActions: ResourcePendingMaintenanceActions? = nil) {
            self.resourcePendingMaintenanceActions = resourcePendingMaintenanceActions
        }

        private enum CodingKeys: String, CodingKey {
            case resourcePendingMaintenanceActions = "ResourcePendingMaintenanceActions"
        }
    }

    public struct DBSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBSubnetGroups", required: false, type: .structure)
        ]
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        ///  A list of DBSubnetGroup instances. 
        public let dBSubnetGroups: DBSubnetGroups?

        public init(marker: String? = nil, dBSubnetGroups: DBSubnetGroups? = nil) {
            self.marker = marker
            self.dBSubnetGroups = dBSubnetGroups
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case dBSubnetGroups = "DBSubnetGroups"
        }
    }

    public struct CertificateList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificate", required: false, type: .list)
        ]
        public let certificate: [Certificate]?

        public init(certificate: [Certificate]? = nil) {
            self.certificate = certificate
        }

        private enum CodingKeys: String, CodingKey {
            case certificate = "Certificate"
        }
    }

    public struct ModifyGlobalClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GlobalCluster", required: false, type: .structure)
        ]
        public let globalCluster: GlobalCluster?

        public init(globalCluster: GlobalCluster? = nil) {
            self.globalCluster = globalCluster
        }

        private enum CodingKeys: String, CodingKey {
            case globalCluster = "GlobalCluster"
        }
    }

    public struct DescribeDBParameterGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "DBParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// The name of a specific DB parameter group to return details for. Constraints:   If supplied, must match the name of an existing DBClusterParameterGroup.  
        public let dBParameterGroupName: String?
        ///  An optional pagination token provided by a previous DescribeDBParameterGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, dBParameterGroupName: String? = nil, marker: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.dBParameterGroupName = dBParameterGroupName
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case dBParameterGroupName = "DBParameterGroupName"
            case marker = "Marker"
        }
    }

    public struct DescribeDBClusterEndpointsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterEndpointIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: false, type: .string)
        ]
        /// A set of name-value pairs that define which endpoints to include in the output. The filters are specified as name-value pairs, in the format Name=endpoint_type,Values=endpoint_type1,endpoint_type2,.... Name can be one of: db-cluster-endpoint-type, db-cluster-endpoint-custom-type, db-cluster-endpoint-id, db-cluster-endpoint-status. Values for the  db-cluster-endpoint-type filter can be one or more of: reader, writer, custom. Values for the db-cluster-endpoint-custom-type filter can be one or more of: reader, any. Values for the db-cluster-endpoint-status filter can be one or more of: available, creating, deleting, modifying. 
        public let filters: FilterList?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous DescribeDBClusterEndpoints request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The identifier of the endpoint to describe. This parameter is stored as a lowercase string.
        public let dBClusterEndpointIdentifier: String?
        /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
        public let dBClusterIdentifier: String?

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, marker: String? = nil, dBClusterEndpointIdentifier: String? = nil, dBClusterIdentifier: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
            self.dBClusterEndpointIdentifier = dBClusterEndpointIdentifier
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case dBClusterEndpointIdentifier = "DBClusterEndpointIdentifier"
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct ModifyDBSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string)
        ]
        /// The identifier of the DB snapshot to modify.
        public let dBSnapshotIdentifier: String
        /// The engine version to upgrade the DB snapshot to.  The following are the database engines and engine versions that are available when you upgrade a DB snapshot.   MySQL     5.5.46 (supported for 5.1 DB snapshots)    Oracle     12.1.0.2.v8 (supported for 12.1.0.1 DB snapshots)    11.2.0.4.v12 (supported for 11.2.0.2 DB snapshots)    11.2.0.4.v11 (supported for 11.2.0.3 DB snapshots)  
        public let engineVersion: String?
        /// The option group to identify with the upgraded DB snapshot.  You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see Option Group Considerations in the Amazon RDS User Guide. 
        public let optionGroupName: String?

        public init(dBSnapshotIdentifier: String, engineVersion: String? = nil, optionGroupName: String? = nil) {
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.engineVersion = engineVersion
            self.optionGroupName = optionGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case engineVersion = "EngineVersion"
            case optionGroupName = "OptionGroupName"
        }
    }

    public struct DBSnapshotAttributeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotAttribute", required: false, type: .list)
        ]
        public let dBSnapshotAttribute: [DBSnapshotAttribute]?

        public init(dBSnapshotAttribute: [DBSnapshotAttribute]? = nil) {
            self.dBSnapshotAttribute = dBSnapshotAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotAttribute = "DBSnapshotAttribute"
        }
    }

    public struct DBParameterGroupList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroup", required: false, type: .list)
        ]
        public let dBParameterGroup: [DBParameterGroup]?

        public init(dBParameterGroup: [DBParameterGroup]? = nil) {
            self.dBParameterGroup = dBParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroup = "DBParameterGroup"
        }
    }

    public struct CopyDBParameterGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroup", required: false, type: .structure)
        ]
        public let dBParameterGroup: DBParameterGroup?

        public init(dBParameterGroup: DBParameterGroup? = nil) {
            self.dBParameterGroup = dBParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroup = "DBParameterGroup"
        }
    }

    public struct TagList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .list)
        ]
        public let tag: [Tag]?

        public init(tag: [Tag]? = nil) {
            self.tag = tag
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
        }
    }

    public struct AttributeValueList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeValue", required: false, type: .list)
        ]
        public let attributeValue: [String]?

        public init(attributeValue: [String]? = nil) {
            self.attributeValue = attributeValue
        }

        private enum CodingKeys: String, CodingKey {
            case attributeValue = "AttributeValue"
        }
    }

    public struct DBParameterGroupDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  A list of Parameter values. 
        public let parameters: ParametersList?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(parameters: ParametersList? = nil, marker: String? = nil) {
            self.parameters = parameters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case marker = "Marker"
        }
    }

    public struct UpgradeTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "IsMajorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// A value that indicates whether the target version is applied to any source DB instances that have AutoMinorVersionUpgrade set to true.
        public let autoUpgrade: Bool?
        /// The name of the upgrade target database engine.
        public let engine: String?
        /// A value that indicates whether a database engine is upgraded to a major version.
        public let isMajorVersionUpgrade: Bool?
        /// The version number of the upgrade target database engine.
        public let engineVersion: String?
        /// The version of the database engine that a DB instance can be upgraded to.
        public let description: String?

        public init(autoUpgrade: Bool? = nil, engine: String? = nil, isMajorVersionUpgrade: Bool? = nil, engineVersion: String? = nil, description: String? = nil) {
            self.autoUpgrade = autoUpgrade
            self.engine = engine
            self.isMajorVersionUpgrade = isMajorVersionUpgrade
            self.engineVersion = engineVersion
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case autoUpgrade = "AutoUpgrade"
            case engine = "Engine"
            case isMajorVersionUpgrade = "IsMajorVersionUpgrade"
            case engineVersion = "EngineVersion"
            case description = "Description"
        }
    }

    public struct DBClusterParameterGroupNameMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterParameterGroupName", required: false, type: .string)
        ]
        /// The name of the DB cluster parameter group. Constraints:   Must be 1 to 255 letters or numbers.   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens    This value is stored as a lowercase string. 
        public let dBClusterParameterGroupName: String?

        public init(dBClusterParameterGroupName: String? = nil) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
        }
    }

    public struct ResourcePendingMaintenanceActions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PendingMaintenanceActionDetails", required: false, type: .structure), 
            AWSShapeMember(label: "ResourceIdentifier", required: false, type: .string)
        ]
        /// A list that provides details about the pending maintenance actions for the resource.
        public let pendingMaintenanceActionDetails: PendingMaintenanceActionDetails?
        /// The ARN of the resource that has pending maintenance actions.
        public let resourceIdentifier: String?

        public init(pendingMaintenanceActionDetails: PendingMaintenanceActionDetails? = nil, resourceIdentifier: String? = nil) {
            self.pendingMaintenanceActionDetails = pendingMaintenanceActionDetails
            self.resourceIdentifier = resourceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case pendingMaintenanceActionDetails = "PendingMaintenanceActionDetails"
            case resourceIdentifier = "ResourceIdentifier"
        }
    }

    public struct ModifyCurrentDBClusterCapacityMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecondsBeforeTimeout", required: false, type: .integer), 
            AWSShapeMember(label: "Capacity", required: false, type: .integer), 
            AWSShapeMember(label: "TimeoutAction", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string)
        ]
        /// The amount of time, in seconds, that Aurora Serverless tries to find a scaling point to perform seamless scaling before enforcing the timeout action. The default is 300.   Value must be from 10 through 600.  
        public let secondsBeforeTimeout: Int32?
        /// The DB cluster capacity. Constraints:   Value must be 2, 4, 8, 16, 32, 64, 128, or 256.  
        public let capacity: Int32?
        /// The action to take when the timeout is reached, either ForceApplyCapacityChange or RollbackCapacityChange.  ForceApplyCapacityChange, the default, sets the capacity to the specified value as soon as possible.  RollbackCapacityChange ignores the capacity change if a scaling point is not found in the timeout period.
        public let timeoutAction: String?
        /// The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive. Constraints:   Must match the identifier of an existing DB cluster.  
        public let dBClusterIdentifier: String

        public init(secondsBeforeTimeout: Int32? = nil, capacity: Int32? = nil, timeoutAction: String? = nil, dBClusterIdentifier: String) {
            self.secondsBeforeTimeout = secondsBeforeTimeout
            self.capacity = capacity
            self.timeoutAction = timeoutAction
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case secondsBeforeTimeout = "SecondsBeforeTimeout"
            case capacity = "Capacity"
            case timeoutAction = "TimeoutAction"
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct SourceIdsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceId", required: false, type: .list)
        ]
        public let sourceId: [String]?

        public init(sourceId: [String]? = nil) {
            self.sourceId = sourceId
        }

        private enum CodingKeys: String, CodingKey {
            case sourceId = "SourceId"
        }
    }

    public struct ReservedDBInstancesOffering: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedDBInstancesOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "FixedPrice", required: false, type: .double), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "CurrencyCode", required: false, type: .string), 
            AWSShapeMember(label: "ProductDescription", required: false, type: .string), 
            AWSShapeMember(label: "OfferingType", required: false, type: .string), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "UsagePrice", required: false, type: .double), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "RecurringCharges", required: false, type: .structure)
        ]
        /// The offering identifier.
        public let reservedDBInstancesOfferingId: String?
        /// The fixed price charged for this offering.
        public let fixedPrice: Double?
        /// Indicates if the offering applies to Multi-AZ deployments.
        public let multiAZ: Bool?
        /// The currency code for the reserved DB instance offering.
        public let currencyCode: String?
        /// The database engine used by the offering.
        public let productDescription: String?
        /// The offering type.
        public let offeringType: String?
        /// The duration of the offering in seconds.
        public let duration: Int32?
        /// The hourly price charged for this offering.
        public let usagePrice: Double?
        /// The DB instance class for the reserved DB instance.
        public let dBInstanceClass: String?
        /// The recurring price charged to run this reserved DB instance.
        public let recurringCharges: RecurringChargeList?

        public init(reservedDBInstancesOfferingId: String? = nil, fixedPrice: Double? = nil, multiAZ: Bool? = nil, currencyCode: String? = nil, productDescription: String? = nil, offeringType: String? = nil, duration: Int32? = nil, usagePrice: Double? = nil, dBInstanceClass: String? = nil, recurringCharges: RecurringChargeList? = nil) {
            self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
            self.fixedPrice = fixedPrice
            self.multiAZ = multiAZ
            self.currencyCode = currencyCode
            self.productDescription = productDescription
            self.offeringType = offeringType
            self.duration = duration
            self.usagePrice = usagePrice
            self.dBInstanceClass = dBInstanceClass
            self.recurringCharges = recurringCharges
        }

        private enum CodingKeys: String, CodingKey {
            case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
            case fixedPrice = "FixedPrice"
            case multiAZ = "MultiAZ"
            case currencyCode = "CurrencyCode"
            case productDescription = "ProductDescription"
            case offeringType = "OfferingType"
            case duration = "Duration"
            case usagePrice = "UsagePrice"
            case dBInstanceClass = "DBInstanceClass"
            case recurringCharges = "RecurringCharges"
        }
    }

    public struct ListTagsForResourceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceName", required: true, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .structure)
        ]
        /// The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see  Constructing an ARN for Amazon RDS in the Amazon RDS User Guide.
        public let resourceName: String
        /// This parameter is not currently supported.
        public let filters: FilterList?

        public init(resourceName: String, filters: FilterList? = nil) {
            self.resourceName = resourceName
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case resourceName = "ResourceName"
            case filters = "Filters"
        }
    }

    public struct PendingMaintenanceAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Action", required: false, type: .string), 
            AWSShapeMember(label: "CurrentApplyDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "AutoAppliedAfterDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "OptInStatus", required: false, type: .string), 
            AWSShapeMember(label: "ForcedApplyDate", required: false, type: .timestamp)
        ]
        /// The type of pending maintenance action that is available for the resource.
        public let action: String?
        /// The effective date when the pending maintenance action is applied to the resource. This date takes into account opt-in requests received from the ApplyPendingMaintenanceAction API, the AutoAppliedAfterDate, and the ForcedApplyDate. This value is blank if an opt-in request has not been received and nothing has been specified as AutoAppliedAfterDate or ForcedApplyDate.
        public let currentApplyDate: TimeStamp?
        /// A description providing more detail about the maintenance action.
        public let description: String?
        /// The date of the maintenance window when the action is applied. The maintenance action is applied to the resource during its first maintenance window after this date. If this date is specified, any next-maintenance opt-in requests are ignored.
        public let autoAppliedAfterDate: TimeStamp?
        /// Indicates the type of opt-in request that has been received for the resource.
        public let optInStatus: String?
        /// The date when the maintenance action is automatically applied. The maintenance action is applied to the resource on this date regardless of the maintenance window for the resource. If this date is specified, any immediate opt-in requests are ignored.
        public let forcedApplyDate: TimeStamp?

        public init(action: String? = nil, currentApplyDate: TimeStamp? = nil, description: String? = nil, autoAppliedAfterDate: TimeStamp? = nil, optInStatus: String? = nil, forcedApplyDate: TimeStamp? = nil) {
            self.action = action
            self.currentApplyDate = currentApplyDate
            self.description = description
            self.autoAppliedAfterDate = autoAppliedAfterDate
            self.optInStatus = optInStatus
            self.forcedApplyDate = forcedApplyDate
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case currentApplyDate = "CurrentApplyDate"
            case description = "Description"
            case autoAppliedAfterDate = "AutoAppliedAfterDate"
            case optInStatus = "OptInStatus"
            case forcedApplyDate = "ForcedApplyDate"
        }
    }

    public struct CreateOptionGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EngineName", required: true, type: .string), 
            AWSShapeMember(label: "MajorEngineVersion", required: true, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: true, type: .string), 
            AWSShapeMember(label: "OptionGroupDescription", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// Specifies the name of the engine that this option group should be associated with.
        public let engineName: String
        /// Specifies the major version of the engine that this option group should be associated with.
        public let majorEngineVersion: String
        /// Specifies the name of the option group to be created. Constraints:   Must be 1 to 255 letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: myoptiongroup 
        public let optionGroupName: String
        /// The description of the option group.
        public let optionGroupDescription: String
        public let tags: TagList?

        public init(engineName: String, majorEngineVersion: String, optionGroupName: String, optionGroupDescription: String, tags: TagList? = nil) {
            self.engineName = engineName
            self.majorEngineVersion = majorEngineVersion
            self.optionGroupName = optionGroupName
            self.optionGroupDescription = optionGroupDescription
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case engineName = "EngineName"
            case majorEngineVersion = "MajorEngineVersion"
            case optionGroupName = "OptionGroupName"
            case optionGroupDescription = "OptionGroupDescription"
            case tags = "Tags"
        }
    }

    public struct DBSecurityGroupMembershipList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSecurityGroup", required: false, type: .list)
        ]
        public let dBSecurityGroup: [DBSecurityGroupMembership]?

        public init(dBSecurityGroup: [DBSecurityGroupMembership]? = nil) {
            self.dBSecurityGroup = dBSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroup = "DBSecurityGroup"
        }
    }

    public struct DBEngineVersionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBEngineVersions", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  A list of DBEngineVersion elements. 
        public let dBEngineVersions: DBEngineVersionList?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(dBEngineVersions: DBEngineVersionList? = nil, marker: String? = nil) {
            self.dBEngineVersions = dBEngineVersions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBEngineVersions = "DBEngineVersions"
            case marker = "Marker"
        }
    }

    public struct OptionVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsDefault", required: false, type: .boolean), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        /// True if the version is the default version of the option, and otherwise false.
        public let isDefault: Bool?
        /// The version of the option.
        public let version: String?

        public init(isDefault: Bool? = nil, version: String? = nil) {
            self.isDefault = isDefault
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case isDefault = "IsDefault"
            case version = "Version"
        }
    }

    public struct CreateOptionGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroup", required: false, type: .structure)
        ]
        public let optionGroup: OptionGroup?

        public init(optionGroup: OptionGroup? = nil) {
            self.optionGroup = optionGroup
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroup = "OptionGroup"
        }
    }

    public struct TagListMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagList", required: false, type: .structure)
        ]
        /// List of tags returned by the ListTagsForResource operation.
        public let tagList: TagList?

        public init(tagList: TagList? = nil) {
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case tagList = "TagList"
        }
    }

    public struct AvailableProcessorFeatureList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailableProcessorFeature", required: false, type: .list)
        ]
        public let availableProcessorFeature: [AvailableProcessorFeature]?

        public init(availableProcessorFeature: [AvailableProcessorFeature]? = nil) {
            self.availableProcessorFeature = availableProcessorFeature
        }

        private enum CodingKeys: String, CodingKey {
            case availableProcessorFeature = "AvailableProcessorFeature"
        }
    }

    public struct DBSecurityGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "DBSecurityGroupName", required: false, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "OwnerId", required: false, type: .string), 
            AWSShapeMember(label: "IPRanges", required: false, type: .structure), 
            AWSShapeMember(label: "DBSecurityGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "DBSecurityGroupDescription", required: false, type: .string)
        ]
        /// Provides the VpcId of the DB security group.
        public let vpcId: String?
        /// Specifies the name of the DB security group.
        public let dBSecurityGroupName: String?
        ///  Contains a list of EC2SecurityGroup elements. 
        public let eC2SecurityGroups: EC2SecurityGroupList?
        /// Provides the AWS ID of the owner of a specific DB security group.
        public let ownerId: String?
        ///  Contains a list of IPRange elements. 
        public let iPRanges: IPRangeList?
        /// The Amazon Resource Name (ARN) for the DB security group.
        public let dBSecurityGroupArn: String?
        /// Provides the description of the DB security group.
        public let dBSecurityGroupDescription: String?

        public init(vpcId: String? = nil, dBSecurityGroupName: String? = nil, eC2SecurityGroups: EC2SecurityGroupList? = nil, ownerId: String? = nil, iPRanges: IPRangeList? = nil, dBSecurityGroupArn: String? = nil, dBSecurityGroupDescription: String? = nil) {
            self.vpcId = vpcId
            self.dBSecurityGroupName = dBSecurityGroupName
            self.eC2SecurityGroups = eC2SecurityGroups
            self.ownerId = ownerId
            self.iPRanges = iPRanges
            self.dBSecurityGroupArn = dBSecurityGroupArn
            self.dBSecurityGroupDescription = dBSecurityGroupDescription
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case dBSecurityGroupName = "DBSecurityGroupName"
            case eC2SecurityGroups = "EC2SecurityGroups"
            case ownerId = "OwnerId"
            case iPRanges = "IPRanges"
            case dBSecurityGroupArn = "DBSecurityGroupArn"
            case dBSecurityGroupDescription = "DBSecurityGroupDescription"
        }
    }

    public struct MinimumEngineVersionPerAllowedValueList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinimumEngineVersionPerAllowedValue", required: false, type: .list)
        ]
        public let minimumEngineVersionPerAllowedValue: [MinimumEngineVersionPerAllowedValue]?

        public init(minimumEngineVersionPerAllowedValue: [MinimumEngineVersionPerAllowedValue]? = nil) {
            self.minimumEngineVersionPerAllowedValue = minimumEngineVersionPerAllowedValue
        }

        private enum CodingKeys: String, CodingKey {
            case minimumEngineVersionPerAllowedValue = "MinimumEngineVersionPerAllowedValue"
        }
    }

    public struct RevokeDBSecurityGroupIngressResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSecurityGroup", required: false, type: .structure)
        ]
        public let dBSecurityGroup: DBSecurityGroup?

        public init(dBSecurityGroup: DBSecurityGroup? = nil) {
            self.dBSecurityGroup = dBSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroup = "DBSecurityGroup"
        }
    }

    public struct DBParameterGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroups", required: false, type: .structure)
        ]
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        ///  A list of DBParameterGroup instances. 
        public let dBParameterGroups: DBParameterGroupList?

        public init(marker: String? = nil, dBParameterGroups: DBParameterGroupList? = nil) {
            self.marker = marker
            self.dBParameterGroups = dBParameterGroups
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case dBParameterGroups = "DBParameterGroups"
        }
    }

    public struct RecurringChargeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecurringCharge", required: false, type: .list)
        ]
        public let recurringCharge: [RecurringCharge]?

        public init(recurringCharge: [RecurringCharge]? = nil) {
            self.recurringCharge = recurringCharge
        }

        private enum CodingKeys: String, CodingKey {
            case recurringCharge = "RecurringCharge"
        }
    }

    public struct OptionGroupOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionsConflictsWith", required: false, type: .structure), 
            AWSShapeMember(label: "RequiresAutoMinorEngineVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "PortRequired", required: false, type: .boolean), 
            AWSShapeMember(label: "OptionGroupOptionSettings", required: false, type: .structure), 
            AWSShapeMember(label: "DefaultPort", required: false, type: .integer), 
            AWSShapeMember(label: "VpcOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupOptionVersions", required: false, type: .structure), 
            AWSShapeMember(label: "MajorEngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "EngineName", required: false, type: .string), 
            AWSShapeMember(label: "SupportsOptionVersionDowngrade", required: false, type: .boolean), 
            AWSShapeMember(label: "Permanent", required: false, type: .boolean), 
            AWSShapeMember(label: "Persistent", required: false, type: .boolean), 
            AWSShapeMember(label: "OptionsDependedOn", required: false, type: .structure), 
            AWSShapeMember(label: "MinimumRequiredMinorEngineVersion", required: false, type: .string)
        ]
        /// The options that conflict with this option.
        public let optionsConflictsWith: OptionsConflictsWith?
        /// If true, you must enable the Auto Minor Version Upgrade setting for your DB instance before you can use this option. You can enable Auto Minor Version Upgrade when you first create your DB instance, or by modifying your DB instance later. 
        public let requiresAutoMinorEngineVersionUpgrade: Bool?
        /// Specifies whether the option requires a port.
        public let portRequired: Bool?
        /// The option settings that are available (and the default value) for each option in an option group.
        public let optionGroupOptionSettings: OptionGroupOptionSettingsList?
        /// If the option requires a port, specifies the default port for the option.
        public let defaultPort: Int32?
        /// If true, you can only use this option with a DB instance that is in a VPC. 
        public let vpcOnly: Bool?
        /// The description of the option.
        public let description: String?
        /// The name of the option.
        public let name: String?
        /// The versions that are available for the option.
        public let optionGroupOptionVersions: OptionGroupOptionVersionsList?
        /// Indicates the major engine version that the option is available for.
        public let majorEngineVersion: String?
        /// The name of the engine that this option can be applied to.
        public let engineName: String?
        /// If true, you can change the option to an earlier version of the option. This only applies to options that have different versions available. 
        public let supportsOptionVersionDowngrade: Bool?
        /// Permanent options can never be removed from an option group. An option group containing a permanent option can't be removed from a DB instance.
        public let permanent: Bool?
        /// Persistent options can't be removed from an option group while DB instances are associated with the option group. If you disassociate all DB instances from the option group, your can remove the persistent option from the option group.
        public let persistent: Bool?
        /// The options that are prerequisites for this option.
        public let optionsDependedOn: OptionsDependedOn?
        /// The minimum required engine version for the option to be applied.
        public let minimumRequiredMinorEngineVersion: String?

        public init(optionsConflictsWith: OptionsConflictsWith? = nil, requiresAutoMinorEngineVersionUpgrade: Bool? = nil, portRequired: Bool? = nil, optionGroupOptionSettings: OptionGroupOptionSettingsList? = nil, defaultPort: Int32? = nil, vpcOnly: Bool? = nil, description: String? = nil, name: String? = nil, optionGroupOptionVersions: OptionGroupOptionVersionsList? = nil, majorEngineVersion: String? = nil, engineName: String? = nil, supportsOptionVersionDowngrade: Bool? = nil, permanent: Bool? = nil, persistent: Bool? = nil, optionsDependedOn: OptionsDependedOn? = nil, minimumRequiredMinorEngineVersion: String? = nil) {
            self.optionsConflictsWith = optionsConflictsWith
            self.requiresAutoMinorEngineVersionUpgrade = requiresAutoMinorEngineVersionUpgrade
            self.portRequired = portRequired
            self.optionGroupOptionSettings = optionGroupOptionSettings
            self.defaultPort = defaultPort
            self.vpcOnly = vpcOnly
            self.description = description
            self.name = name
            self.optionGroupOptionVersions = optionGroupOptionVersions
            self.majorEngineVersion = majorEngineVersion
            self.engineName = engineName
            self.supportsOptionVersionDowngrade = supportsOptionVersionDowngrade
            self.permanent = permanent
            self.persistent = persistent
            self.optionsDependedOn = optionsDependedOn
            self.minimumRequiredMinorEngineVersion = minimumRequiredMinorEngineVersion
        }

        private enum CodingKeys: String, CodingKey {
            case optionsConflictsWith = "OptionsConflictsWith"
            case requiresAutoMinorEngineVersionUpgrade = "RequiresAutoMinorEngineVersionUpgrade"
            case portRequired = "PortRequired"
            case optionGroupOptionSettings = "OptionGroupOptionSettings"
            case defaultPort = "DefaultPort"
            case vpcOnly = "VpcOnly"
            case description = "Description"
            case name = "Name"
            case optionGroupOptionVersions = "OptionGroupOptionVersions"
            case majorEngineVersion = "MajorEngineVersion"
            case engineName = "EngineName"
            case supportsOptionVersionDowngrade = "SupportsOptionVersionDowngrade"
            case permanent = "Permanent"
            case persistent = "Persistent"
            case optionsDependedOn = "OptionsDependedOn"
            case minimumRequiredMinorEngineVersion = "MinimumRequiredMinorEngineVersion"
        }
    }

    public struct AddTagsToResourceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .structure), 
            AWSShapeMember(label: "ResourceName", required: true, type: .string)
        ]
        /// The tags to be assigned to the Amazon RDS resource.
        public let tags: TagList
        /// The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see  Constructing an RDS Amazon Resource Name (ARN).
        public let resourceName: String

        public init(tags: TagList, resourceName: String) {
            self.tags = tags
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case resourceName = "ResourceName"
        }
    }

    public struct RevokeDBSecurityGroupIngressMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EC2SecurityGroupName", required: false, type: .string), 
            AWSShapeMember(label: "DBSecurityGroupName", required: true, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupId", required: false, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupOwnerId", required: false, type: .string), 
            AWSShapeMember(label: "CIDRIP", required: false, type: .string)
        ]
        ///  The name of the EC2 security group to revoke access from. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided. 
        public let eC2SecurityGroupName: String?
        /// The name of the DB security group to revoke ingress from.
        public let dBSecurityGroupName: String
        ///  The id of the EC2 security group to revoke access from. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided. 
        public let eC2SecurityGroupId: String?
        ///  The AWS Account Number of the owner of the EC2 security group specified in the EC2SecurityGroupName parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided. 
        public let eC2SecurityGroupOwnerId: String?
        ///  The IP range to revoke access from. Must be a valid CIDR range. If CIDRIP is specified, EC2SecurityGroupName, EC2SecurityGroupId and EC2SecurityGroupOwnerId can't be provided. 
        public let cidrip: String?

        public init(eC2SecurityGroupName: String? = nil, dBSecurityGroupName: String, eC2SecurityGroupId: String? = nil, eC2SecurityGroupOwnerId: String? = nil, cidrip: String? = nil) {
            self.eC2SecurityGroupName = eC2SecurityGroupName
            self.dBSecurityGroupName = dBSecurityGroupName
            self.eC2SecurityGroupId = eC2SecurityGroupId
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.cidrip = cidrip
        }

        private enum CodingKeys: String, CodingKey {
            case eC2SecurityGroupName = "EC2SecurityGroupName"
            case dBSecurityGroupName = "DBSecurityGroupName"
            case eC2SecurityGroupId = "EC2SecurityGroupId"
            case eC2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
            case cidrip = "CIDRIP"
        }
    }

    public struct ScalingConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoPause", required: false, type: .boolean), 
            AWSShapeMember(label: "SecondsUntilAutoPause", required: false, type: .integer), 
            AWSShapeMember(label: "MaxCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "MinCapacity", required: false, type: .integer)
        ]
        /// A value that specifies whether to allow or disallow automatic pause for an Aurora DB cluster in serverless DB engine mode. A DB cluster can be paused only when it's idle (it has no connections).  If a DB cluster is paused for more than seven days, the DB cluster might be backed up with a snapshot. In this case, the DB cluster is restored when there is a request to connect to it.  
        public let autoPause: Bool?
        /// The time, in seconds, before an Aurora DB cluster in serverless mode is paused.
        public let secondsUntilAutoPause: Int32?
        /// The maximum capacity for an Aurora DB cluster in serverless DB engine mode. Valid capacity values are 2, 4, 8, 16, 32, 64, 128, and 256. The maximum capacity must be greater than or equal to the minimum capacity.
        public let maxCapacity: Int32?
        /// The minimum capacity for an Aurora DB cluster in serverless DB engine mode. Valid capacity values are 2, 4, 8, 16, 32, 64, 128, and 256. The minimum capacity must be less than or equal to the maximum capacity.
        public let minCapacity: Int32?

        public init(autoPause: Bool? = nil, secondsUntilAutoPause: Int32? = nil, maxCapacity: Int32? = nil, minCapacity: Int32? = nil) {
            self.autoPause = autoPause
            self.secondsUntilAutoPause = secondsUntilAutoPause
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case autoPause = "AutoPause"
            case secondsUntilAutoPause = "SecondsUntilAutoPause"
            case maxCapacity = "MaxCapacity"
            case minCapacity = "MinCapacity"
        }
    }

    public struct RestoreDBClusterFromSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .structure)
        ]
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct Endpoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Address", required: false, type: .string), 
            AWSShapeMember(label: "HostedZoneId", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer)
        ]
        /// Specifies the DNS address of the DB instance.
        public let address: String?
        /// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
        public let hostedZoneId: String?
        /// Specifies the port that the database engine is listening on.
        public let port: Int32?

        public init(address: String? = nil, hostedZoneId: String? = nil, port: Int32? = nil) {
            self.address = address
            self.hostedZoneId = hostedZoneId
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case address = "Address"
            case hostedZoneId = "HostedZoneId"
            case port = "Port"
        }
    }

    public struct DescribeCertificatesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "CertificateIdentifier", required: false, type: .string)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous DescribeCertificates request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive. Constraints:   Must match an existing CertificateIdentifier.  
        public let certificateIdentifier: String?

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, marker: String? = nil, certificateIdentifier: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
            self.certificateIdentifier = certificateIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case certificateIdentifier = "CertificateIdentifier"
        }
    }

    public struct DBSecurityGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBSecurityGroups", required: false, type: .structure)
        ]
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        ///  A list of DBSecurityGroup instances. 
        public let dBSecurityGroups: DBSecurityGroups?

        public init(marker: String? = nil, dBSecurityGroups: DBSecurityGroups? = nil) {
            self.marker = marker
            self.dBSecurityGroups = dBSecurityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case dBSecurityGroups = "DBSecurityGroups"
        }
    }

    public struct DoubleRangeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DoubleRange", required: false, type: .list)
        ]
        public let doubleRange: [DoubleRange]?

        public init(doubleRange: [DoubleRange]? = nil) {
            self.doubleRange = doubleRange
        }

        private enum CodingKeys: String, CodingKey {
            case doubleRange = "DoubleRange"
        }
    }

    public struct DoubleRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "To", required: false, type: .double), 
            AWSShapeMember(label: "From", required: false, type: .double)
        ]
        /// The maximum value in the range.
        public let to: Double?
        /// The minimum value in the range.
        public let from: Double?

        public init(to: Double? = nil, from: Double? = nil) {
            self.to = to
            self.from = from
        }

        private enum CodingKeys: String, CodingKey {
            case to = "To"
            case from = "From"
        }
    }

    public struct RestoreDBClusterFromS3Message: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnableCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "MasterUserPassword", required: true, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .structure), 
            AWSShapeMember(label: "MasterUsername", required: true, type: .string), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "StorageEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "DeletionProtection", required: false, type: .boolean), 
            AWSShapeMember(label: "SourceEngine", required: true, type: .string), 
            AWSShapeMember(label: "SourceEngineVersion", required: true, type: .string), 
            AWSShapeMember(label: "DBClusterParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "S3BucketName", required: true, type: .string), 
            AWSShapeMember(label: "S3IngestionRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "S3Prefix", required: false, type: .string), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "Engine", required: true, type: .string), 
            AWSShapeMember(label: "CharacterSetName", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "PreferredBackupWindow", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "BacktrackWindow", required: false, type: .long)
        ]
        /// The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon Aurora User Guide.
        public let enableCloudwatchLogsExports: [String]?
        /// The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@". Constraints: Must contain from 8 to 41 characters.
        public let masterUserPassword: String
        /// A list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
        public let availabilityZones: AvailabilityZones?
        /// The name of the master user for the restored DB cluster. Constraints:   Must be 1 to 16 letters or numbers.   First character must be a letter.   Can't be a reserved word for the chosen database engine.  
        public let masterUsername: String
        /// The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1. Default: 1 Constraints:   Must be a value from 1 to 35  
        public let backupRetentionPeriod: Int32?
        /// Specifies whether the restored DB cluster is encrypted.
        public let storageEncrypted: Bool?
        /// The version number of the database engine to use.  Aurora MySQL  Example: 5.6.10a   Aurora PostgreSQL  Example: 9.6.3 
        public let engineVersion: String?
        /// The AWS KMS key identifier for an encrypted DB cluster. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key. If the StorageEncrypted parameter is true, and you do not specify a value for the KmsKeyId parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.
        public let kmsKeyId: String?
        /// A value that indicates that the restored DB cluster should be associated with the specified option group. Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.
        public let optionGroupName: String?
        /// The port number on which the instances in the restored DB cluster accept connections.  Default: 3306 
        public let port: Int32?
        /// Indicates if the DB cluster should have deletion protection enabled. The database can't be deleted when this value is set to true. The default is false. 
        public let deletionProtection: Bool?
        /// The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket.  Valid values: mysql 
        public let sourceEngine: String
        /// The version of the database that the backup files were created from. MySQL version 5.5 and 5.6 are supported.  Example: 5.6.22 
        public let sourceEngineVersion: String
        /// The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, default.aurora5.6 is used.  Constraints:   If supplied, must match the name of an existing DBClusterParameterGroup.  
        public let dBClusterParameterGroupName: String?
        /// The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
        public let s3BucketName: String
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
        public let s3IngestionRoleArn: String
        /// A DB subnet group to associate with the restored DB cluster. Constraints: If supplied, must match the name of an existing DBSubnetGroup.  Example: mySubnetgroup 
        public let dBSubnetGroupName: String?
        /// The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a SourceS3Prefix value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
        public let s3Prefix: String?
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// The name of the database engine to be used for the restored DB cluster. Valid Values: aurora, aurora-postgresql 
        public let engine: String
        /// A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
        public let characterSetName: String?
        public let tags: TagList?
        /// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see  Adjusting the Preferred Maintenance Window in the Amazon Aurora User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.  
        public let preferredBackupWindow: String?
        /// The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example: my-cluster1 
        public let dBClusterIdentifier: String
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see  Adjusting the Preferred Maintenance Window in the Amazon Aurora User Guide.  Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// A list of EC2 VPC security groups to associate with the restored DB cluster.
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// The database name for the restored DB cluster.
        public let databaseName: String?
        /// The target backtrack window, in seconds. To disable backtracking, set this value to 0. Default: 0 Constraints:   If specified, this value must be set to a number from 0 to 259,200 (72 hours).  
        public let backtrackWindow: Int64?

        public init(enableCloudwatchLogsExports: [String]? = nil, masterUserPassword: String, availabilityZones: AvailabilityZones? = nil, masterUsername: String, backupRetentionPeriod: Int32? = nil, storageEncrypted: Bool? = nil, engineVersion: String? = nil, kmsKeyId: String? = nil, optionGroupName: String? = nil, port: Int32? = nil, deletionProtection: Bool? = nil, sourceEngine: String, sourceEngineVersion: String, dBClusterParameterGroupName: String? = nil, s3BucketName: String, s3IngestionRoleArn: String, dBSubnetGroupName: String? = nil, s3Prefix: String? = nil, enableIAMDatabaseAuthentication: Bool? = nil, engine: String, characterSetName: String? = nil, tags: TagList? = nil, preferredBackupWindow: String? = nil, dBClusterIdentifier: String, preferredMaintenanceWindow: String? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, databaseName: String? = nil, backtrackWindow: Int64? = nil) {
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.masterUserPassword = masterUserPassword
            self.availabilityZones = availabilityZones
            self.masterUsername = masterUsername
            self.backupRetentionPeriod = backupRetentionPeriod
            self.storageEncrypted = storageEncrypted
            self.engineVersion = engineVersion
            self.kmsKeyId = kmsKeyId
            self.optionGroupName = optionGroupName
            self.port = port
            self.deletionProtection = deletionProtection
            self.sourceEngine = sourceEngine
            self.sourceEngineVersion = sourceEngineVersion
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.s3BucketName = s3BucketName
            self.s3IngestionRoleArn = s3IngestionRoleArn
            self.dBSubnetGroupName = dBSubnetGroupName
            self.s3Prefix = s3Prefix
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.engine = engine
            self.characterSetName = characterSetName
            self.tags = tags
            self.preferredBackupWindow = preferredBackupWindow
            self.dBClusterIdentifier = dBClusterIdentifier
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.databaseName = databaseName
            self.backtrackWindow = backtrackWindow
        }

        private enum CodingKeys: String, CodingKey {
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case masterUserPassword = "MasterUserPassword"
            case availabilityZones = "AvailabilityZones"
            case masterUsername = "MasterUsername"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case storageEncrypted = "StorageEncrypted"
            case engineVersion = "EngineVersion"
            case kmsKeyId = "KmsKeyId"
            case optionGroupName = "OptionGroupName"
            case port = "Port"
            case deletionProtection = "DeletionProtection"
            case sourceEngine = "SourceEngine"
            case sourceEngineVersion = "SourceEngineVersion"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case s3BucketName = "S3BucketName"
            case s3IngestionRoleArn = "S3IngestionRoleArn"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case s3Prefix = "S3Prefix"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case engine = "Engine"
            case characterSetName = "CharacterSetName"
            case tags = "Tags"
            case preferredBackupWindow = "PreferredBackupWindow"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case databaseName = "DatabaseName"
            case backtrackWindow = "BacktrackWindow"
        }
    }

    public enum SourceType: String, CustomStringConvertible, Codable {
        case dbInstance = "db-instance"
        case dbParameterGroup = "db-parameter-group"
        case dbSecurityGroup = "db-security-group"
        case dbSnapshot = "db-snapshot"
        case dbCluster = "db-cluster"
        case dbClusterSnapshot = "db-cluster-snapshot"
        public var description: String { return self.rawValue }
    }

    public struct PromoteReadReplicaResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct SourceRegion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RegionName", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "Endpoint", required: false, type: .string)
        ]
        /// The name of the source AWS Region.
        public let regionName: String?
        /// The status of the source AWS Region.
        public let status: String?
        /// The endpoint for the source AWS Region endpoint.
        public let endpoint: String?

        public init(regionName: String? = nil, status: String? = nil, endpoint: String? = nil) {
            self.regionName = regionName
            self.status = status
            self.endpoint = endpoint
        }

        private enum CodingKeys: String, CodingKey {
            case regionName = "RegionName"
            case status = "Status"
            case endpoint = "Endpoint"
        }
    }

    public struct ModifyGlobalClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeletionProtection", required: false, type: .boolean), 
            AWSShapeMember(label: "GlobalClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "NewGlobalClusterIdentifier", required: false, type: .string)
        ]
        ///  Indicates if the global database cluster has deletion protection enabled. The global database cluster can't be deleted when this value is set to true. 
        public let deletionProtection: Bool?
        ///  The DB cluster identifier for the global cluster being modified. This parameter is not case-sensitive.  Constraints:   Must match the identifier of an existing global database cluster.  
        public let globalClusterIdentifier: String?
        ///  The new cluster identifier for the global database cluster when modifying a global database cluster. This value is stored as a lowercase string.  Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens   The first character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: my-cluster2 
        public let newGlobalClusterIdentifier: String?

        public init(deletionProtection: Bool? = nil, globalClusterIdentifier: String? = nil, newGlobalClusterIdentifier: String? = nil) {
            self.deletionProtection = deletionProtection
            self.globalClusterIdentifier = globalClusterIdentifier
            self.newGlobalClusterIdentifier = newGlobalClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case deletionProtection = "DeletionProtection"
            case globalClusterIdentifier = "GlobalClusterIdentifier"
            case newGlobalClusterIdentifier = "NewGlobalClusterIdentifier"
        }
    }

    public struct DescribeDBLogFilesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "FileLastWritten", required: false, type: .long), 
            AWSShapeMember(label: "FilenameContains", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "FileSize", required: false, type: .long), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        /// The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
        public let marker: String?
        /// Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
        public let fileLastWritten: Int64?
        /// Filters the available log files for log file names that contain the specified string.
        public let filenameContains: String?
        /// The customer-assigned name of the DB instance that contains the log files you want to list. Constraints:   Must match the identifier of an existing DBInstance.  
        public let dBInstanceIdentifier: String
        /// Filters the available log files for files larger than the specified size.
        public let fileSize: Int64?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
        public let maxRecords: Int32?

        public init(filters: FilterList? = nil, marker: String? = nil, fileLastWritten: Int64? = nil, filenameContains: String? = nil, dBInstanceIdentifier: String, fileSize: Int64? = nil, maxRecords: Int32? = nil) {
            self.filters = filters
            self.marker = marker
            self.fileLastWritten = fileLastWritten
            self.filenameContains = filenameContains
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.fileSize = fileSize
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case marker = "Marker"
            case fileLastWritten = "FileLastWritten"
            case filenameContains = "FilenameContains"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case fileSize = "FileSize"
            case maxRecords = "MaxRecords"
        }
    }

    public struct SupportedTimezonesList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Timezone", required: false, type: .list)
        ]
        public let timezone: [Timezone]?

        public init(timezone: [Timezone]? = nil) {
            self.timezone = timezone
        }

        private enum CodingKeys: String, CodingKey {
            case timezone = "Timezone"
        }
    }

    public struct CreateDBParameterGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroup", required: false, type: .structure)
        ]
        public let dBParameterGroup: DBParameterGroup?

        public init(dBParameterGroup: DBParameterGroup? = nil) {
            self.dBParameterGroup = dBParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroup = "DBParameterGroup"
        }
    }

    public struct RebootDBInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ForceFailover", required: false, type: .boolean), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string)
        ]
        ///  When true, the reboot is conducted through a MultiAZ failover.  Constraint: You can't specify true if the instance is not configured for MultiAZ.
        public let forceFailover: Bool?
        /// The DB instance identifier. This parameter is stored as a lowercase string. Constraints:   Must match the identifier of an existing DBInstance.  
        public let dBInstanceIdentifier: String

        public init(forceFailover: Bool? = nil, dBInstanceIdentifier: String) {
            self.forceFailover = forceFailover
            self.dBInstanceIdentifier = dBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case forceFailover = "ForceFailover"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
        }
    }

    public struct StartDBInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct DescribeDBClustersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: false, type: .string)
        ]
        /// A filter that specifies one or more DB clusters to describe. Supported filters:    db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.  
        public let filters: FilterList?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// An optional pagination token provided by a previous DescribeDBClusters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. Constraints:   If supplied, must match an existing DBClusterIdentifier.  
        public let dBClusterIdentifier: String?

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, marker: String? = nil, dBClusterIdentifier: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct ValidUpgradeTargetList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpgradeTarget", required: false, type: .list)
        ]
        public let upgradeTarget: [UpgradeTarget]?

        public init(upgradeTarget: [UpgradeTarget]? = nil) {
            self.upgradeTarget = upgradeTarget
        }

        private enum CodingKeys: String, CodingKey {
            case upgradeTarget = "UpgradeTarget"
        }
    }

    public struct DeleteDBClusterEndpointMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterEndpointIdentifier", required: true, type: .string)
        ]
        /// The identifier associated with the custom endpoint. This parameter is stored as a lowercase string.
        public let dBClusterEndpointIdentifier: String

        public init(dBClusterEndpointIdentifier: String) {
            self.dBClusterEndpointIdentifier = dBClusterEndpointIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterEndpointIdentifier = "DBClusterEndpointIdentifier"
        }
    }

    public struct DeleteEventSubscriptionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .structure)
        ]
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct DownloadDBLogFilePortionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "NumberOfLines", required: false, type: .integer), 
            AWSShapeMember(label: "LogFileName", required: true, type: .string)
        ]
        /// The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
        public let marker: String?
        /// The customer-assigned name of the DB instance that contains the log files you want to list. Constraints:   Must match the identifier of an existing DBInstance.  
        public let dBInstanceIdentifier: String
        /// The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size. If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.   If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.   If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.   If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.   You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.  
        public let numberOfLines: Int32?
        /// The name of the log file to be downloaded.
        public let logFileName: String

        public init(marker: String? = nil, dBInstanceIdentifier: String, numberOfLines: Int32? = nil, logFileName: String) {
            self.marker = marker
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.numberOfLines = numberOfLines
            self.logFileName = logFileName
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case numberOfLines = "NumberOfLines"
            case logFileName = "LogFileName"
        }
    }

    public struct RestoreDBInstanceToPointInTimeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct AddSourceIdentifierToSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string)
        ]
        /// The identifier of the event source to be added. Constraints:   If the source type is a DB instance, then a DBInstanceIdentifier must be supplied.   If the source type is a DB security group, a DBSecurityGroupName must be supplied.   If the source type is a DB parameter group, a DBParameterGroupName must be supplied.   If the source type is a DB snapshot, a DBSnapshotIdentifier must be supplied.  
        public let sourceIdentifier: String
        /// The name of the RDS event notification subscription you want to add a source identifier to.
        public let subscriptionName: String

        public init(sourceIdentifier: String, subscriptionName: String) {
            self.sourceIdentifier = sourceIdentifier
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case sourceIdentifier = "SourceIdentifier"
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct DBClusterBacktrackMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterBacktracks", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Contains a list of backtracks for the user.
        public let dBClusterBacktracks: DBClusterBacktrackList?
        /// A pagination token that can be used in a subsequent DescribeDBClusterBacktracks request.
        public let marker: String?

        public init(dBClusterBacktracks: DBClusterBacktrackList? = nil, marker: String? = nil) {
            self.dBClusterBacktracks = dBClusterBacktracks
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterBacktracks = "DBClusterBacktracks"
            case marker = "Marker"
        }
    }

    public struct PromoteReadReplicaDBClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .structure)
        ]
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct EventCategoriesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategoriesMapList", required: false, type: .structure)
        ]
        /// A list of EventCategoriesMap data types.
        public let eventCategoriesMapList: EventCategoriesMapList?

        public init(eventCategoriesMapList: EventCategoriesMapList? = nil) {
            self.eventCategoriesMapList = eventCategoriesMapList
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategoriesMapList = "EventCategoriesMapList"
        }
    }

    public struct CreateDBClusterSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshot", required: false, type: .structure)
        ]
        public let dBClusterSnapshot: DBClusterSnapshot?

        public init(dBClusterSnapshot: DBClusterSnapshot? = nil) {
            self.dBClusterSnapshot = dBClusterSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshot = "DBClusterSnapshot"
        }
    }

    public struct DBClusterMemberList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterMember", required: false, type: .list)
        ]
        public let dBClusterMember: [DBClusterMember]?

        public init(dBClusterMember: [DBClusterMember]? = nil) {
            self.dBClusterMember = dBClusterMember
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterMember = "DBClusterMember"
        }
    }

    public struct PendingMaintenanceActionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PendingMaintenanceActions", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A list of the pending maintenance actions for the resource.
        public let pendingMaintenanceActions: PendingMaintenanceActions?
        ///  An optional pagination token provided by a previous DescribePendingMaintenanceActions request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by MaxRecords. 
        public let marker: String?

        public init(pendingMaintenanceActions: PendingMaintenanceActions? = nil, marker: String? = nil) {
            self.pendingMaintenanceActions = pendingMaintenanceActions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case pendingMaintenanceActions = "PendingMaintenanceActions"
            case marker = "Marker"
        }
    }

    public struct DomainMembershipList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainMembership", required: false, type: .list)
        ]
        public let domainMembership: [DomainMembership]?

        public init(domainMembership: [DomainMembership]? = nil) {
            self.domainMembership = domainMembership
        }

        private enum CodingKeys: String, CodingKey {
            case domainMembership = "DomainMembership"
        }
    }

    public struct OptionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Option", required: false, type: .list)
        ]
        public let option: [Option]?

        public init(option: [Option]? = nil) {
            self.option = option
        }

        private enum CodingKeys: String, CodingKey {
            case option = "Option"
        }
    }

    public struct AddRoleToDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "RoleArn", required: true, type: .string)
        ]
        /// The name of the DB cluster to associate the IAM role with.
        public let dBClusterIdentifier: String
        /// The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example arn:aws:iam::123456789012:role/AuroraAccessRole.
        public let roleArn: String

        public init(dBClusterIdentifier: String, roleArn: String) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case roleArn = "RoleArn"
        }
    }

    public struct ModifyDBInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct Event: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceArn", required: false, type: .string), 
            AWSShapeMember(label: "SourceType", required: false, type: .enum), 
            AWSShapeMember(label: "SourceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "EventCategories", required: false, type: .structure), 
            AWSShapeMember(label: "Date", required: false, type: .timestamp)
        ]
        /// The Amazon Resource Name (ARN) for the event.
        public let sourceArn: String?
        /// Specifies the source type for this event.
        public let sourceType: SourceType?
        /// Provides the identifier for the source of the event.
        public let sourceIdentifier: String?
        /// Provides the text of this event.
        public let message: String?
        /// Specifies the category for the event.
        public let eventCategories: EventCategoriesList?
        /// Specifies the date and time of the event.
        public let date: TimeStamp?

        public init(sourceArn: String? = nil, sourceType: SourceType? = nil, sourceIdentifier: String? = nil, message: String? = nil, eventCategories: EventCategoriesList? = nil, date: TimeStamp? = nil) {
            self.sourceArn = sourceArn
            self.sourceType = sourceType
            self.sourceIdentifier = sourceIdentifier
            self.message = message
            self.eventCategories = eventCategories
            self.date = date
        }

        private enum CodingKeys: String, CodingKey {
            case sourceArn = "SourceArn"
            case sourceType = "SourceType"
            case sourceIdentifier = "SourceIdentifier"
            case message = "Message"
            case eventCategories = "EventCategories"
            case date = "Date"
        }
    }

    public struct CreateDBSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshot", required: false, type: .structure)
        ]
        public let dBSnapshot: DBSnapshot?

        public init(dBSnapshot: DBSnapshot? = nil) {
            self.dBSnapshot = dBSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshot = "DBSnapshot"
        }
    }

    public struct DescribeDBSnapshotAttributesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotIdentifier", required: true, type: .string)
        ]
        /// The identifier for the DB snapshot to describe the attributes for.
        public let dBSnapshotIdentifier: String

        public init(dBSnapshotIdentifier: String) {
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
        }
    }

    public struct CopyOptionGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroup", required: false, type: .structure)
        ]
        public let optionGroup: OptionGroup?

        public init(optionGroup: OptionGroup? = nil) {
            self.optionGroup = optionGroup
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroup = "OptionGroup"
        }
    }

    public struct DescribeDBLogFilesDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastWritten", required: false, type: .long), 
            AWSShapeMember(label: "Size", required: false, type: .long), 
            AWSShapeMember(label: "LogFileName", required: false, type: .string)
        ]
        /// A POSIX timestamp when the last log entry was written.
        public let lastWritten: Int64?
        /// The size, in bytes, of the log file for the specified DB instance.
        public let size: Int64?
        /// The name of the log file for the specified DB instance.
        public let logFileName: String?

        public init(lastWritten: Int64? = nil, size: Int64? = nil, logFileName: String? = nil) {
            self.lastWritten = lastWritten
            self.size = size
            self.logFileName = logFileName
        }

        private enum CodingKeys: String, CodingKey {
            case lastWritten = "LastWritten"
            case size = "Size"
            case logFileName = "LogFileName"
        }
    }

    public struct Certificate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ValidFrom", required: false, type: .timestamp), 
            AWSShapeMember(label: "CertificateIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Thumbprint", required: false, type: .string), 
            AWSShapeMember(label: "CertificateType", required: false, type: .string), 
            AWSShapeMember(label: "ValidTill", required: false, type: .timestamp), 
            AWSShapeMember(label: "CertificateArn", required: false, type: .string)
        ]
        /// The starting date from which the certificate is valid.
        public let validFrom: TimeStamp?
        /// The unique key that identifies a certificate.
        public let certificateIdentifier: String?
        /// The thumbprint of the certificate.
        public let thumbprint: String?
        /// The type of the certificate.
        public let certificateType: String?
        /// The final date that the certificate continues to be valid.
        public let validTill: TimeStamp?
        /// The Amazon Resource Name (ARN) for the certificate.
        public let certificateArn: String?

        public init(validFrom: TimeStamp? = nil, certificateIdentifier: String? = nil, thumbprint: String? = nil, certificateType: String? = nil, validTill: TimeStamp? = nil, certificateArn: String? = nil) {
            self.validFrom = validFrom
            self.certificateIdentifier = certificateIdentifier
            self.thumbprint = thumbprint
            self.certificateType = certificateType
            self.validTill = validTill
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case validFrom = "ValidFrom"
            case certificateIdentifier = "CertificateIdentifier"
            case thumbprint = "Thumbprint"
            case certificateType = "CertificateType"
            case validTill = "ValidTill"
            case certificateArn = "CertificateArn"
        }
    }

    public struct ReservedDBInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedDBInstances", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A list of reserved DB instances.
        public let reservedDBInstances: ReservedDBInstanceList?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(reservedDBInstances: ReservedDBInstanceList? = nil, marker: String? = nil) {
            self.reservedDBInstances = reservedDBInstances
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case reservedDBInstances = "ReservedDBInstances"
            case marker = "Marker"
        }
    }

    public struct CopyDBClusterSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshot", required: false, type: .structure)
        ]
        public let dBClusterSnapshot: DBClusterSnapshot?

        public init(dBClusterSnapshot: DBClusterSnapshot? = nil) {
            self.dBClusterSnapshot = dBClusterSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshot = "DBClusterSnapshot"
        }
    }

    public struct StopDBClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .structure)
        ]
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct DBParameterGroupNameMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroupName", required: false, type: .string)
        ]
        /// Provides the name of the DB parameter group.
        public let dBParameterGroupName: String?

        public init(dBParameterGroupName: String? = nil) {
            self.dBParameterGroupName = dBParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
        }
    }

    public struct RemoveRoleFromDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "RoleArn", required: true, type: .string)
        ]
        /// The name of the DB cluster to disassociate the IAM role from.
        public let dBClusterIdentifier: String
        /// The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example arn:aws:iam::123456789012:role/AuroraAccessRole.
        public let roleArn: String

        public init(dBClusterIdentifier: String, roleArn: String) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case roleArn = "RoleArn"
        }
    }

    public struct DBClusterEndpointList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterEndpointList", required: false, type: .list)
        ]
        public let dBClusterEndpointList: [DBClusterEndpoint]?

        public init(dBClusterEndpointList: [DBClusterEndpoint]? = nil) {
            self.dBClusterEndpointList = dBClusterEndpointList
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterEndpointList = "DBClusterEndpointList"
        }
    }

    public struct CreateDBInstanceReadReplicaResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct ModifyDBSnapshotAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotAttributesResult", required: false, type: .structure)
        ]
        public let dBSnapshotAttributesResult: DBSnapshotAttributesResult?

        public init(dBSnapshotAttributesResult: DBSnapshotAttributesResult? = nil) {
            self.dBSnapshotAttributesResult = dBSnapshotAttributesResult
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotAttributesResult = "DBSnapshotAttributesResult"
        }
    }

    public struct DescribeOrderableDBInstanceOptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Engine", required: true, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "Vpc", required: false, type: .boolean), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
        public let licenseModel: String?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords . 
        public let marker: String?
        /// The name of the engine to retrieve DB instance options for.
        public let engine: String
        /// The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
        public let engineVersion: String?
        /// The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
        public let vpc: Bool?
        /// The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
        public let dBInstanceClass: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(licenseModel: String? = nil, filters: FilterList? = nil, marker: String? = nil, engine: String, engineVersion: String? = nil, vpc: Bool? = nil, dBInstanceClass: String? = nil, maxRecords: Int32? = nil) {
            self.licenseModel = licenseModel
            self.filters = filters
            self.marker = marker
            self.engine = engine
            self.engineVersion = engineVersion
            self.vpc = vpc
            self.dBInstanceClass = dBInstanceClass
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case licenseModel = "LicenseModel"
            case filters = "Filters"
            case marker = "Marker"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case vpc = "Vpc"
            case dBInstanceClass = "DBInstanceClass"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DBSubnetGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "DBSubnetGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "Subnets", required: false, type: .structure), 
            AWSShapeMember(label: "SubnetGroupStatus", required: false, type: .string), 
            AWSShapeMember(label: "DBSubnetGroupDescription", required: false, type: .string)
        ]
        /// The name of the DB subnet group.
        public let dBSubnetGroupName: String?
        /// Provides the VpcId of the DB subnet group.
        public let vpcId: String?
        /// The Amazon Resource Name (ARN) for the DB subnet group.
        public let dBSubnetGroupArn: String?
        ///  Contains a list of Subnet elements. 
        public let subnets: SubnetList?
        /// Provides the status of the DB subnet group.
        public let subnetGroupStatus: String?
        /// Provides the description of the DB subnet group.
        public let dBSubnetGroupDescription: String?

        public init(dBSubnetGroupName: String? = nil, vpcId: String? = nil, dBSubnetGroupArn: String? = nil, subnets: SubnetList? = nil, subnetGroupStatus: String? = nil, dBSubnetGroupDescription: String? = nil) {
            self.dBSubnetGroupName = dBSubnetGroupName
            self.vpcId = vpcId
            self.dBSubnetGroupArn = dBSubnetGroupArn
            self.subnets = subnets
            self.subnetGroupStatus = subnetGroupStatus
            self.dBSubnetGroupDescription = dBSubnetGroupDescription
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroupName = "DBSubnetGroupName"
            case vpcId = "VpcId"
            case dBSubnetGroupArn = "DBSubnetGroupArn"
            case subnets = "Subnets"
            case subnetGroupStatus = "SubnetGroupStatus"
            case dBSubnetGroupDescription = "DBSubnetGroupDescription"
        }
    }

    public struct CopyDBClusterParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceDBClusterParameterGroupIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "TargetDBClusterParameterGroupIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "TargetDBClusterParameterGroupDescription", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see  Constructing an ARN for Amazon RDS in the Amazon Aurora User Guide.  Constraints:   Must specify a valid DB cluster parameter group.   If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example my-db-cluster-param-group, or a valid ARN.   If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1.  
        public let sourceDBClusterParameterGroupIdentifier: String
        /// The identifier for the copied DB cluster parameter group. Constraints:   Can't be null, empty, or blank   Must contain from 1 to 255 letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: my-cluster-param-group1 
        public let targetDBClusterParameterGroupIdentifier: String
        /// A description for the copied DB cluster parameter group.
        public let targetDBClusterParameterGroupDescription: String
        public let tags: TagList?

        public init(sourceDBClusterParameterGroupIdentifier: String, targetDBClusterParameterGroupIdentifier: String, targetDBClusterParameterGroupDescription: String, tags: TagList? = nil) {
            self.sourceDBClusterParameterGroupIdentifier = sourceDBClusterParameterGroupIdentifier
            self.targetDBClusterParameterGroupIdentifier = targetDBClusterParameterGroupIdentifier
            self.targetDBClusterParameterGroupDescription = targetDBClusterParameterGroupDescription
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case sourceDBClusterParameterGroupIdentifier = "SourceDBClusterParameterGroupIdentifier"
            case targetDBClusterParameterGroupIdentifier = "TargetDBClusterParameterGroupIdentifier"
            case targetDBClusterParameterGroupDescription = "TargetDBClusterParameterGroupDescription"
            case tags = "Tags"
        }
    }

    public struct RestoreDBInstanceFromS3Message: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnableCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "MasterUserPassword", required: false, type: .string), 
            AWSShapeMember(label: "PerformanceInsightsKMSKeyId", required: false, type: .string), 
            AWSShapeMember(label: "MasterUsername", required: false, type: .string), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "StorageEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "UseDefaultProcessorFeatures", required: false, type: .boolean), 
            AWSShapeMember(label: "DBInstanceClass", required: true, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "DeletionProtection", required: false, type: .boolean), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "SourceEngine", required: true, type: .string), 
            AWSShapeMember(label: "SourceEngineVersion", required: true, type: .string), 
            AWSShapeMember(label: "DBSecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "S3BucketName", required: true, type: .string), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "S3IngestionRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "EnablePerformanceInsights", required: false, type: .boolean), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "S3Prefix", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "DBName", required: false, type: .string), 
            AWSShapeMember(label: "CopyTagsToSnapshot", required: false, type: .boolean), 
            AWSShapeMember(label: "DBParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "MonitoringInterval", required: false, type: .integer), 
            AWSShapeMember(label: "Engine", required: true, type: .string), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "MonitoringRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "PreferredBackupWindow", required: false, type: .string), 
            AWSShapeMember(label: "PerformanceInsightsRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "ProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "Iops", required: false, type: .integer)
        ]
        /// The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon RDS User Guide.
        public let enableCloudwatchLogsExports: [String]?
        /// The password for the master user. The password can include any printable ASCII character except "/", """, or "@".  Constraints: Must contain from 8 to 41 characters.
        public let masterUserPassword: String?
        /// The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. 
        public let performanceInsightsKMSKeyId: String?
        /// The name for the master user.  Constraints:    Must be 1 to 16 letters or numbers.   First character must be a letter.   Can't be a reserved word for the chosen database engine.  
        public let masterUsername: String?
        /// The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see CreateDBInstance. 
        public let backupRetentionPeriod: Int32?
        /// Specifies whether the new DB instance is encrypted or not. 
        public let storageEncrypted: Bool?
        /// The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see CreateDBInstance, or call DescribeDBEngineVersions. 
        public let engineVersion: String?
        /// The AWS KMS key identifier for an encrypted DB instance.  The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.  If the StorageEncrypted parameter is true, and you do not specify a value for the KmsKeyId parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. 
        public let kmsKeyId: String?
        /// The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
        public let optionGroupName: String?
        /// A value that specifies that the DB instance class of the DB instance uses its default processor features.
        public let useDefaultProcessorFeatures: Bool?
        /// The compute and memory capacity of the DB instance, for example, db.m4.large. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class in the Amazon RDS User Guide.  Importing from Amazon S3 is not supported on the db.t2.micro DB instance class. 
        public let dBInstanceClass: String
        /// The port number on which the database accepts connections.  Type: Integer  Valid Values: 1150-65535  Default: 3306 
        public let port: Int32?
        /// Indicates if the DB instance should have deletion protection enabled. The database can't be deleted when this value is set to true. The default is false. For more information, see  Deleting a DB Instance. 
        public let deletionProtection: Bool?
        /// The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see Regions and Availability Zones in the Amazon RDS User Guide.  Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.   Example: us-east-1d  Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to true. The specified Availability Zone must be in the same AWS Region as the current endpoint. 
        public let availabilityZone: String?
        /// The name of the engine of your source database.  Valid Values: mysql 
        public let sourceEngine: String
        /// The engine version of your source database.  Valid Values: 5.6 
        public let sourceEngineVersion: String
        /// A list of DB security groups to associate with this DB instance. Default: The default DB security group for the database engine.
        public let dBSecurityGroups: DBSecurityGroupNameList?
        /// The license model for this DB instance. Use general-public-license. 
        public let licenseModel: String?
        /// The name of your Amazon S3 bucket that contains your database backup file. 
        public let s3BucketName: String
        /// Specifies the storage type to be associated with the DB instance.  Valid values: standard | gp2 | io1  If you specify io1, you must also include a value for the Iops parameter.  Default: io1 if the Iops parameter is specified; otherwise standard 
        public let storageType: String?
        /// An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
        public let s3IngestionRoleArn: String
        /// True to enable Performance Insights for the DB instance, and otherwise false.  For more information, see Using Amazon Performance Insights in the Amazon Relational Database Service User Guide. 
        public let enablePerformanceInsights: Bool?
        /// A DB subnet group to associate with this DB instance.
        public let dBSubnetGroupName: String?
        /// The prefix of your Amazon S3 bucket. 
        public let s3Prefix: String?
        /// The DB instance identifier. This parameter is stored as a lowercase string.  Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example: mydbinstance 
        public let dBInstanceIdentifier: String
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.  Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in CreateDBInstance.   Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth.  
        public let allocatedStorage: Int32?
        /// Specifies whether the DB instance is a Multi-AZ deployment. If MultiAZ is set to true, you can't set the AvailabilityZone parameter. 
        public let multiAZ: Bool?
        /// The name of the database to create when the DB instance is created. Follow the naming rules specified in CreateDBInstance. 
        public let dBName: String?
        /// True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false.  Default: false. 
        public let copyTagsToSnapshot: Bool?
        /// The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default parameter group for the specified engine is used. 
        public let dBParameterGroupName: String?
        /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0.  If MonitoringRoleArn is specified, then you must also set MonitoringInterval to a value other than 0.  Valid Values: 0, 1, 5, 10, 15, 30, 60  Default: 0 
        public let monitoringInterval: Int32?
        /// The name of the database engine to be used for this instance.  Valid Values: mysql 
        public let engine: String
        /// Specifies the accessibility options for the DB instance. A value of true specifies an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. A value of false specifies an internal instance with a DNS name that resolves to a private IP address. For more information, see CreateDBInstance.
        public let publiclyAccessible: Bool?
        /// A list of tags to associate with this DB instance. For more information, see Tagging Amazon RDS Resources in the Amazon RDS User Guide. 
        public let tags: TagList?
        /// The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, see Setting Up and Enabling Enhanced Monitoring in the Amazon RDS User Guide.  If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn value. 
        public let monitoringRoleArn: String?
        /// The time range each day during which automated backups are created if automated backups are enabled. For more information, see The Backup Window in the Amazon RDS User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.  
        public let preferredBackupWindow: String?
        /// The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
        public let performanceInsightsRetentionPeriod: Int32?
        /// The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see Amazon RDS Maintenance Window in the Amazon RDS User Guide.  Constraints:   Must be in the format ddd:hh24:mi-ddd:hh24:mi.   Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred backup window.   Must be at least 30 minutes.  
        public let preferredMaintenanceWindow: String?
        /// A list of VPC security groups to associate with this DB instance. 
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// True to indicate that minor engine upgrades are applied automatically to the DB instance during the maintenance window, and otherwise false.  Default: true 
        public let autoMinorVersionUpgrade: Bool?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        public let processorFeatures: ProcessorFeatureList?
        /// The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see see Amazon RDS Provisioned IOPS Storage to Improve Performance in the Amazon RDS User Guide. 
        public let iops: Int32?

        public init(enableCloudwatchLogsExports: [String]? = nil, masterUserPassword: String? = nil, performanceInsightsKMSKeyId: String? = nil, masterUsername: String? = nil, backupRetentionPeriod: Int32? = nil, storageEncrypted: Bool? = nil, engineVersion: String? = nil, kmsKeyId: String? = nil, optionGroupName: String? = nil, useDefaultProcessorFeatures: Bool? = nil, dBInstanceClass: String, port: Int32? = nil, deletionProtection: Bool? = nil, availabilityZone: String? = nil, sourceEngine: String, sourceEngineVersion: String, dBSecurityGroups: DBSecurityGroupNameList? = nil, licenseModel: String? = nil, s3BucketName: String, storageType: String? = nil, s3IngestionRoleArn: String, enablePerformanceInsights: Bool? = nil, dBSubnetGroupName: String? = nil, s3Prefix: String? = nil, dBInstanceIdentifier: String, enableIAMDatabaseAuthentication: Bool? = nil, allocatedStorage: Int32? = nil, multiAZ: Bool? = nil, dBName: String? = nil, copyTagsToSnapshot: Bool? = nil, dBParameterGroupName: String? = nil, monitoringInterval: Int32? = nil, engine: String, publiclyAccessible: Bool? = nil, tags: TagList? = nil, monitoringRoleArn: String? = nil, preferredBackupWindow: String? = nil, performanceInsightsRetentionPeriod: Int32? = nil, preferredMaintenanceWindow: String? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, autoMinorVersionUpgrade: Bool? = nil, processorFeatures: ProcessorFeatureList? = nil, iops: Int32? = nil) {
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.masterUserPassword = masterUserPassword
            self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
            self.masterUsername = masterUsername
            self.backupRetentionPeriod = backupRetentionPeriod
            self.storageEncrypted = storageEncrypted
            self.engineVersion = engineVersion
            self.kmsKeyId = kmsKeyId
            self.optionGroupName = optionGroupName
            self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
            self.dBInstanceClass = dBInstanceClass
            self.port = port
            self.deletionProtection = deletionProtection
            self.availabilityZone = availabilityZone
            self.sourceEngine = sourceEngine
            self.sourceEngineVersion = sourceEngineVersion
            self.dBSecurityGroups = dBSecurityGroups
            self.licenseModel = licenseModel
            self.s3BucketName = s3BucketName
            self.storageType = storageType
            self.s3IngestionRoleArn = s3IngestionRoleArn
            self.enablePerformanceInsights = enablePerformanceInsights
            self.dBSubnetGroupName = dBSubnetGroupName
            self.s3Prefix = s3Prefix
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.allocatedStorage = allocatedStorage
            self.multiAZ = multiAZ
            self.dBName = dBName
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.dBParameterGroupName = dBParameterGroupName
            self.monitoringInterval = monitoringInterval
            self.engine = engine
            self.publiclyAccessible = publiclyAccessible
            self.tags = tags
            self.monitoringRoleArn = monitoringRoleArn
            self.preferredBackupWindow = preferredBackupWindow
            self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.processorFeatures = processorFeatures
            self.iops = iops
        }

        private enum CodingKeys: String, CodingKey {
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case masterUserPassword = "MasterUserPassword"
            case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
            case masterUsername = "MasterUsername"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case storageEncrypted = "StorageEncrypted"
            case engineVersion = "EngineVersion"
            case kmsKeyId = "KmsKeyId"
            case optionGroupName = "OptionGroupName"
            case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
            case dBInstanceClass = "DBInstanceClass"
            case port = "Port"
            case deletionProtection = "DeletionProtection"
            case availabilityZone = "AvailabilityZone"
            case sourceEngine = "SourceEngine"
            case sourceEngineVersion = "SourceEngineVersion"
            case dBSecurityGroups = "DBSecurityGroups"
            case licenseModel = "LicenseModel"
            case s3BucketName = "S3BucketName"
            case storageType = "StorageType"
            case s3IngestionRoleArn = "S3IngestionRoleArn"
            case enablePerformanceInsights = "EnablePerformanceInsights"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case s3Prefix = "S3Prefix"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case allocatedStorage = "AllocatedStorage"
            case multiAZ = "MultiAZ"
            case dBName = "DBName"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case dBParameterGroupName = "DBParameterGroupName"
            case monitoringInterval = "MonitoringInterval"
            case engine = "Engine"
            case publiclyAccessible = "PubliclyAccessible"
            case tags = "Tags"
            case monitoringRoleArn = "MonitoringRoleArn"
            case preferredBackupWindow = "PreferredBackupWindow"
            case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case processorFeatures = "ProcessorFeatures"
            case iops = "Iops"
        }
    }

    public struct VpcSecurityGroupMembership: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupId", required: false, type: .string)
        ]
        /// The status of the VPC security group.
        public let status: String?
        /// The name of the VPC security group.
        public let vpcSecurityGroupId: String?

        public init(status: String? = nil, vpcSecurityGroupId: String? = nil) {
            self.status = status
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case vpcSecurityGroupId = "VpcSecurityGroupId"
        }
    }

    public struct CreateDBSecurityGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "DBSecurityGroupName", required: true, type: .string), 
            AWSShapeMember(label: "DBSecurityGroupDescription", required: true, type: .string)
        ]
        public let tags: TagList?
        /// The name for the DB security group. This value is stored as a lowercase string. Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Must not be "Default"   Example: mysecuritygroup 
        public let dBSecurityGroupName: String
        /// The description for the DB security group.
        public let dBSecurityGroupDescription: String

        public init(tags: TagList? = nil, dBSecurityGroupName: String, dBSecurityGroupDescription: String) {
            self.tags = tags
            self.dBSecurityGroupName = dBSecurityGroupName
            self.dBSecurityGroupDescription = dBSecurityGroupDescription
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case dBSecurityGroupName = "DBSecurityGroupName"
            case dBSecurityGroupDescription = "DBSecurityGroupDescription"
        }
    }

    public struct CreateGlobalClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GlobalCluster", required: false, type: .structure)
        ]
        public let globalCluster: GlobalCluster?

        public init(globalCluster: GlobalCluster? = nil) {
            self.globalCluster = globalCluster
        }

        private enum CodingKeys: String, CodingKey {
            case globalCluster = "GlobalCluster"
        }
    }

    public struct DescribeDBClusterSnapshotsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "IncludeShared", required: false, type: .boolean), 
            AWSShapeMember(label: "IncludePublic", required: false, type: .boolean), 
            AWSShapeMember(label: "SnapshotType", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        /// An optional pagination token provided by a previous DescribeDBClusterSnapshots request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the DBClusterIdentifier parameter. This value is stored as a lowercase string.  Constraints:   If supplied, must match the identifier of an existing DBClusterSnapshot.   If this identifier is for an automated snapshot, the SnapshotType parameter must also be specified.  
        public let dBClusterSnapshotIdentifier: String?
        /// True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is false. You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the ModifyDBClusterSnapshotAttribute API action.
        public let includeShared: Bool?
        /// True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is false. The default is false. You can share a manual DB cluster snapshot as public by using the ModifyDBClusterSnapshotAttribute API action.
        public let includePublic: Bool?
        /// The type of DB cluster snapshots to be returned. You can specify one of the following values:    automated - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.    manual - Return all DB cluster snapshots that have been taken by my AWS account.    shared - Return all manual DB cluster snapshots that have been shared to my AWS account.    public - Return all DB cluster snapshots that have been marked as public.   If you don't specify a SnapshotType value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the IncludeShared parameter to true. You can include public DB cluster snapshots with these results by setting the IncludePublic parameter to true. The IncludeShared and IncludePublic parameters don't apply for SnapshotType values of manual or automated. The IncludePublic parameter doesn't apply when SnapshotType is set to shared. The IncludeShared parameter doesn't apply when SnapshotType is set to public.
        public let snapshotType: String?
        /// The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the DBClusterSnapshotIdentifier parameter. This parameter is not case-sensitive.  Constraints:   If supplied, must match the identifier of an existing DBCluster.  
        public let dBClusterIdentifier: String?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(filters: FilterList? = nil, marker: String? = nil, dBClusterSnapshotIdentifier: String? = nil, includeShared: Bool? = nil, includePublic: Bool? = nil, snapshotType: String? = nil, dBClusterIdentifier: String? = nil, maxRecords: Int32? = nil) {
            self.filters = filters
            self.marker = marker
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
            self.includeShared = includeShared
            self.includePublic = includePublic
            self.snapshotType = snapshotType
            self.dBClusterIdentifier = dBClusterIdentifier
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case marker = "Marker"
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
            case includeShared = "IncludeShared"
            case includePublic = "IncludePublic"
            case snapshotType = "SnapshotType"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case maxRecords = "MaxRecords"
        }
    }

    public struct OrderableDBInstanceOptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrderableDBInstanceOptions", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// An OrderableDBInstanceOption structure containing information about orderable options for the DB instance.
        public let orderableDBInstanceOptions: OrderableDBInstanceOptionsList?
        ///  An optional pagination token provided by a previous OrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords . 
        public let marker: String?

        public init(orderableDBInstanceOptions: OrderableDBInstanceOptionsList? = nil, marker: String? = nil) {
            self.orderableDBInstanceOptions = orderableDBInstanceOptions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case orderableDBInstanceOptions = "OrderableDBInstanceOptions"
            case marker = "Marker"
        }
    }

    public struct CreateDBParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: true, type: .string), 
            AWSShapeMember(label: "DBParameterGroupFamily", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// The name of the DB parameter group. Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens    This value is stored as a lowercase string. 
        public let dBParameterGroupName: String
        /// The description for the DB parameter group.
        public let description: String
        /// The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family. To list all of the available parameter group families, use the following command:  aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"   The output contains duplicates. 
        public let dBParameterGroupFamily: String
        public let tags: TagList?

        public init(dBParameterGroupName: String, description: String, dBParameterGroupFamily: String, tags: TagList? = nil) {
            self.dBParameterGroupName = dBParameterGroupName
            self.description = description
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
            case description = "Description"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case tags = "Tags"
        }
    }

    public struct CreateDBClusterEndpointMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StaticMembers", required: false, type: .list), 
            AWSShapeMember(label: "EndpointType", required: true, type: .string), 
            AWSShapeMember(label: "ExcludedMembers", required: false, type: .list), 
            AWSShapeMember(label: "DBClusterEndpointIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string)
        ]
        /// List of DB instance identifiers that are part of the custom endpoint group.
        public let staticMembers: [String]?
        /// The type of the endpoint. One of: READER, ANY. 
        public let endpointType: String
        /// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
        public let excludedMembers: [String]?
        /// The identifier to use for the new endpoint. This parameter is stored as a lowercase string.
        public let dBClusterEndpointIdentifier: String
        /// The DB cluster identifier of the DB cluster associated with the endpoint. This parameter is stored as a lowercase string.
        public let dBClusterIdentifier: String

        public init(staticMembers: [String]? = nil, endpointType: String, excludedMembers: [String]? = nil, dBClusterEndpointIdentifier: String, dBClusterIdentifier: String) {
            self.staticMembers = staticMembers
            self.endpointType = endpointType
            self.excludedMembers = excludedMembers
            self.dBClusterEndpointIdentifier = dBClusterEndpointIdentifier
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case staticMembers = "StaticMembers"
            case endpointType = "EndpointType"
            case excludedMembers = "ExcludedMembers"
            case dBClusterEndpointIdentifier = "DBClusterEndpointIdentifier"
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct DeleteDBInstanceAutomatedBackupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DbiResourceId", required: true, type: .string)
        ]
        /// The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
        public let dbiResourceId: String

        public init(dbiResourceId: String) {
            self.dbiResourceId = dbiResourceId
        }

        private enum CodingKeys: String, CodingKey {
            case dbiResourceId = "DbiResourceId"
        }
    }

    public struct DescribeEngineDefaultParametersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroupFamily", required: true, type: .string)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous DescribeEngineDefaultParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The name of the DB parameter group family.
        public let dBParameterGroupFamily: String

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, marker: String? = nil, dBParameterGroupFamily: String) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
            self.dBParameterGroupFamily = dBParameterGroupFamily
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
        }
    }

    public struct SupportedCharacterSetsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CharacterSet", required: false, type: .list)
        ]
        public let characterSet: [CharacterSet]?

        public init(characterSet: [CharacterSet]? = nil) {
            self.characterSet = characterSet
        }

        private enum CodingKeys: String, CodingKey {
            case characterSet = "CharacterSet"
        }
    }

    public struct DeleteDBParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroupName", required: true, type: .string)
        ]
        /// The name of the DB parameter group. Constraints:   Must be the name of an existing DB parameter group   You can't delete a default DB parameter group   Can't be associated with any DB instances  
        public let dBParameterGroupName: String

        public init(dBParameterGroupName: String) {
            self.dBParameterGroupName = dBParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
        }
    }

    public struct ReservedDBInstanceList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedDBInstance", required: false, type: .list)
        ]
        public let reservedDBInstance: [ReservedDBInstance]?

        public init(reservedDBInstance: [ReservedDBInstance]? = nil) {
            self.reservedDBInstance = reservedDBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case reservedDBInstance = "ReservedDBInstance"
        }
    }

    public struct DBParameterGroupStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "ParameterApplyStatus", required: false, type: .string)
        ]
        /// The name of the DP parameter group.
        public let dBParameterGroupName: String?
        /// The status of parameter updates.
        public let parameterApplyStatus: String?

        public init(dBParameterGroupName: String? = nil, parameterApplyStatus: String? = nil) {
            self.dBParameterGroupName = dBParameterGroupName
            self.parameterApplyStatus = parameterApplyStatus
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
            case parameterApplyStatus = "ParameterApplyStatus"
        }
    }

    public struct DownloadDBLogFilePortionDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogFileData", required: false, type: .string), 
            AWSShapeMember(label: "AdditionalDataPending", required: false, type: .boolean), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Entries from the specified log file.
        public let logFileData: String?
        /// Boolean value that if true, indicates there is more data to be downloaded.
        public let additionalDataPending: Bool?
        /// A pagination token that can be used in a subsequent DownloadDBLogFilePortion request.
        public let marker: String?

        public init(logFileData: String? = nil, additionalDataPending: Bool? = nil, marker: String? = nil) {
            self.logFileData = logFileData
            self.additionalDataPending = additionalDataPending
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case logFileData = "LogFileData"
            case additionalDataPending = "AdditionalDataPending"
            case marker = "Marker"
        }
    }

    public struct ModifyDBClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .structure)
        ]
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct AvailabilityZoneList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .list)
        ]
        public let availabilityZone: [AvailabilityZone]?

        public init(availabilityZone: [AvailabilityZone]? = nil) {
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
        }
    }

    public struct VpcSecurityGroupIdList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcSecurityGroupId", required: false, type: .list)
        ]
        public let vpcSecurityGroupId: [String]?

        public init(vpcSecurityGroupId: [String]? = nil) {
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcSecurityGroupId = "VpcSecurityGroupId"
        }
    }

    public struct RemoveFromGlobalClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GlobalCluster", required: false, type: .structure)
        ]
        public let globalCluster: GlobalCluster?

        public init(globalCluster: GlobalCluster? = nil) {
            self.globalCluster = globalCluster
        }

        private enum CodingKeys: String, CodingKey {
            case globalCluster = "GlobalCluster"
        }
    }

    public struct OptionSetting: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ApplyType", required: false, type: .string), 
            AWSShapeMember(label: "DataType", required: false, type: .string), 
            AWSShapeMember(label: "AllowedValues", required: false, type: .string), 
            AWSShapeMember(label: "DefaultValue", required: false, type: .string), 
            AWSShapeMember(label: "IsCollection", required: false, type: .boolean), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "IsModifiable", required: false, type: .boolean), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The name of the option that has settings that you can set.
        public let name: String?
        /// The DB engine specific parameter type.
        public let applyType: String?
        /// The data type of the option setting.
        public let dataType: String?
        /// The allowed values of the option setting.
        public let allowedValues: String?
        /// The default value of the option setting.
        public let defaultValue: String?
        /// Indicates if the option setting is part of a collection.
        public let isCollection: Bool?
        /// The current value of the option setting.
        public let value: String?
        /// A Boolean value that, when true, indicates the option setting can be modified from the default.
        public let isModifiable: Bool?
        /// The description of the option setting.
        public let description: String?

        public init(name: String? = nil, applyType: String? = nil, dataType: String? = nil, allowedValues: String? = nil, defaultValue: String? = nil, isCollection: Bool? = nil, value: String? = nil, isModifiable: Bool? = nil, description: String? = nil) {
            self.name = name
            self.applyType = applyType
            self.dataType = dataType
            self.allowedValues = allowedValues
            self.defaultValue = defaultValue
            self.isCollection = isCollection
            self.value = value
            self.isModifiable = isModifiable
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case applyType = "ApplyType"
            case dataType = "DataType"
            case allowedValues = "AllowedValues"
            case defaultValue = "DefaultValue"
            case isCollection = "IsCollection"
            case value = "Value"
            case isModifiable = "IsModifiable"
            case description = "Description"
        }
    }

    public struct OptionGroupsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroup", required: false, type: .list)
        ]
        public let optionGroup: [OptionGroup]?

        public init(optionGroup: [OptionGroup]? = nil) {
            self.optionGroup = optionGroup
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroup = "OptionGroup"
        }
    }

    public struct EventCategoriesList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategory", required: false, type: .list)
        ]
        public let eventCategory: [String]?

        public init(eventCategory: [String]? = nil) {
            self.eventCategory = eventCategory
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategory = "EventCategory"
        }
    }

    public struct DeleteGlobalClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GlobalCluster", required: false, type: .structure)
        ]
        public let globalCluster: GlobalCluster?

        public init(globalCluster: GlobalCluster? = nil) {
            self.globalCluster = globalCluster
        }

        private enum CodingKeys: String, CodingKey {
            case globalCluster = "GlobalCluster"
        }
    }

    public struct DBEngineVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "ValidUpgradeTarget", required: false, type: .structure), 
            AWSShapeMember(label: "SupportedEngineModes", required: false, type: .list), 
            AWSShapeMember(label: "DefaultCharacterSet", required: false, type: .structure), 
            AWSShapeMember(label: "SupportedCharacterSets", required: false, type: .structure), 
            AWSShapeMember(label: "DBParameterGroupFamily", required: false, type: .string), 
            AWSShapeMember(label: "ExportableLogTypes", required: false, type: .list), 
            AWSShapeMember(label: "DBEngineDescription", required: false, type: .string), 
            AWSShapeMember(label: "SupportedTimezones", required: false, type: .structure), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "SupportsLogExportsToCloudwatchLogs", required: false, type: .boolean), 
            AWSShapeMember(label: "DBEngineVersionDescription", required: false, type: .string), 
            AWSShapeMember(label: "SupportsReadReplica", required: false, type: .boolean)
        ]
        /// The version number of the database engine.
        public let engineVersion: String?
        /// A list of engine versions that this database engine version can be upgraded to.
        public let validUpgradeTarget: ValidUpgradeTargetList?
        /// A list of the supported DB engine modes.
        public let supportedEngineModes: [String]?
        ///  The default character set for new instances of this engine version, if the CharacterSetName parameter of the CreateDBInstance API is not specified. 
        public let defaultCharacterSet: CharacterSet?
        ///  A list of the character sets supported by this engine for the CharacterSetName parameter of the CreateDBInstance action. 
        public let supportedCharacterSets: SupportedCharacterSetsList?
        /// The name of the DB parameter group family for the database engine.
        public let dBParameterGroupFamily: String?
        /// The types of logs that the database engine has available for export to CloudWatch Logs.
        public let exportableLogTypes: [String]?
        /// The description of the database engine.
        public let dBEngineDescription: String?
        /// A list of the time zones supported by this engine for the Timezone parameter of the CreateDBInstance action. 
        public let supportedTimezones: SupportedTimezonesList?
        /// The name of the database engine.
        public let engine: String?
        /// A value that indicates whether the engine version supports exporting the log types specified by ExportableLogTypes to CloudWatch Logs.
        public let supportsLogExportsToCloudwatchLogs: Bool?
        /// The description of the database engine version.
        public let dBEngineVersionDescription: String?
        /// Indicates whether the database engine version supports read replicas.
        public let supportsReadReplica: Bool?

        public init(engineVersion: String? = nil, validUpgradeTarget: ValidUpgradeTargetList? = nil, supportedEngineModes: [String]? = nil, defaultCharacterSet: CharacterSet? = nil, supportedCharacterSets: SupportedCharacterSetsList? = nil, dBParameterGroupFamily: String? = nil, exportableLogTypes: [String]? = nil, dBEngineDescription: String? = nil, supportedTimezones: SupportedTimezonesList? = nil, engine: String? = nil, supportsLogExportsToCloudwatchLogs: Bool? = nil, dBEngineVersionDescription: String? = nil, supportsReadReplica: Bool? = nil) {
            self.engineVersion = engineVersion
            self.validUpgradeTarget = validUpgradeTarget
            self.supportedEngineModes = supportedEngineModes
            self.defaultCharacterSet = defaultCharacterSet
            self.supportedCharacterSets = supportedCharacterSets
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.exportableLogTypes = exportableLogTypes
            self.dBEngineDescription = dBEngineDescription
            self.supportedTimezones = supportedTimezones
            self.engine = engine
            self.supportsLogExportsToCloudwatchLogs = supportsLogExportsToCloudwatchLogs
            self.dBEngineVersionDescription = dBEngineVersionDescription
            self.supportsReadReplica = supportsReadReplica
        }

        private enum CodingKeys: String, CodingKey {
            case engineVersion = "EngineVersion"
            case validUpgradeTarget = "ValidUpgradeTarget"
            case supportedEngineModes = "SupportedEngineModes"
            case defaultCharacterSet = "DefaultCharacterSet"
            case supportedCharacterSets = "SupportedCharacterSets"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case exportableLogTypes = "ExportableLogTypes"
            case dBEngineDescription = "DBEngineDescription"
            case supportedTimezones = "SupportedTimezones"
            case engine = "Engine"
            case supportsLogExportsToCloudwatchLogs = "SupportsLogExportsToCloudwatchLogs"
            case dBEngineVersionDescription = "DBEngineVersionDescription"
            case supportsReadReplica = "SupportsReadReplica"
        }
    }

    public struct CreateGlobalClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "GlobalClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DeletionProtection", required: false, type: .boolean), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "SourceDBClusterIdentifier", required: false, type: .string)
        ]
        ///  The storage encryption setting for the new global database cluster. 
        public let storageEncrypted: Bool?
        ///  The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon Aurora will not create a database in the global database cluster you are creating. 
        public let databaseName: String?
        /// Provides the name of the database engine to be used for this DB cluster.
        public let engine: String?
        /// The cluster identifier of the new global database cluster.
        public let globalClusterIdentifier: String?
        ///  The deletion protection setting for the new global database. The global database can't be deleted when this value is set to true. 
        public let deletionProtection: Bool?
        /// The engine version of the Aurora global database.
        public let engineVersion: String?
        ///  The Amazon Resource Name (ARN) to use as the primary cluster of the global database. This parameter is optional. 
        public let sourceDBClusterIdentifier: String?

        public init(storageEncrypted: Bool? = nil, databaseName: String? = nil, engine: String? = nil, globalClusterIdentifier: String? = nil, deletionProtection: Bool? = nil, engineVersion: String? = nil, sourceDBClusterIdentifier: String? = nil) {
            self.storageEncrypted = storageEncrypted
            self.databaseName = databaseName
            self.engine = engine
            self.globalClusterIdentifier = globalClusterIdentifier
            self.deletionProtection = deletionProtection
            self.engineVersion = engineVersion
            self.sourceDBClusterIdentifier = sourceDBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case storageEncrypted = "StorageEncrypted"
            case databaseName = "DatabaseName"
            case engine = "Engine"
            case globalClusterIdentifier = "GlobalClusterIdentifier"
            case deletionProtection = "DeletionProtection"
            case engineVersion = "EngineVersion"
            case sourceDBClusterIdentifier = "SourceDBClusterIdentifier"
        }
    }

    public struct DescribeDBInstanceAutomatedBackupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DbiResourceId", required: false, type: .string)
        ]
        /// A filter that specifies which resources to return based on status. Supported filters are the following:    status     active - automated backups for current instances    retained - automated backups for deleted instances    creating - automated backups that are waiting for the first automated snapshot to be available      db-instance-id - Accepts DB instance identifiers and Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance automated backupss identified by these ARNs.    dbi-resource-id - Accepts DB instance resource identifiers and DB Amazon Resource Names (ARNs) for DB instances. The results list includes only information about the DB instance resources identified by these ARNs.   Returns all resources by default. The status for each resource is specified in the response.
        public let filters: FilterList?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
        public let maxRecords: Int32?
        /// (Optional) The user-supplied instance identifier. If this parameter is specified, it must match the identifier of an existing DB instance. It returns information from the specific DB instance' automated backup. This parameter isn't case-sensitive. 
        public let dBInstanceIdentifier: String?
        /// The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
        public let marker: String?
        /// The resource ID of the DB instance that is the source of the automated backup. This parameter isn't case-sensitive. 
        public let dbiResourceId: String?

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, dBInstanceIdentifier: String? = nil, marker: String? = nil, dbiResourceId: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.marker = marker
            self.dbiResourceId = dbiResourceId
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case marker = "Marker"
            case dbiResourceId = "DbiResourceId"
        }
    }

    public struct DescribeDBLogFilesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DescribeDBLogFiles", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The DB log files returned.
        public let describeDBLogFiles: DescribeDBLogFilesList?
        /// A pagination token that can be used in a subsequent DescribeDBLogFiles request.
        public let marker: String?

        public init(describeDBLogFiles: DescribeDBLogFilesList? = nil, marker: String? = nil) {
            self.describeDBLogFiles = describeDBLogFiles
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case describeDBLogFiles = "DescribeDBLogFiles"
            case marker = "Marker"
        }
    }

    public struct AddSourceIdentifierToSubscriptionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .structure)
        ]
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct CopyDBClusterParameterGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterParameterGroup", required: false, type: .structure)
        ]
        public let dBClusterParameterGroup: DBClusterParameterGroup?

        public init(dBClusterParameterGroup: DBClusterParameterGroup? = nil) {
            self.dBClusterParameterGroup = dBClusterParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroup = "DBClusterParameterGroup"
        }
    }

    public struct AccountAttributesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountQuotas", required: false, type: .structure)
        ]
        /// A list of AccountQuota objects. Within this list, each quota has a name, a count of usage toward the quota maximum, and a maximum value for the quota.
        public let accountQuotas: AccountQuotaList?

        public init(accountQuotas: AccountQuotaList? = nil) {
            self.accountQuotas = accountQuotas
        }

        private enum CodingKeys: String, CodingKey {
            case accountQuotas = "AccountQuotas"
        }
    }

    public struct ModifyEventSubscriptionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .structure)
        ]
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct OptionGroups: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroupsList", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// List of option groups.
        public let optionGroupsList: OptionGroupsList?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(optionGroupsList: OptionGroupsList? = nil, marker: String? = nil) {
            self.optionGroupsList = optionGroupsList
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroupsList = "OptionGroupsList"
            case marker = "Marker"
        }
    }

    public struct DBClusterSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshots", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Provides a list of DB cluster snapshots for the user.
        public let dBClusterSnapshots: DBClusterSnapshotList?
        ///  An optional pagination token provided by a previous DescribeDBClusterSnapshots request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(dBClusterSnapshots: DBClusterSnapshotList? = nil, marker: String? = nil) {
            self.dBClusterSnapshots = dBClusterSnapshots
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshots = "DBClusterSnapshots"
            case marker = "Marker"
        }
    }

    public struct CreateDBInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnableCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "MasterUserPassword", required: false, type: .string), 
            AWSShapeMember(label: "PerformanceInsightsKMSKeyId", required: false, type: .string), 
            AWSShapeMember(label: "MasterUsername", required: false, type: .string), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "StorageEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "DomainIAMRoleName", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "DBInstanceClass", required: true, type: .string), 
            AWSShapeMember(label: "Timezone", required: false, type: .string), 
            AWSShapeMember(label: "PromotionTier", required: false, type: .integer), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "DeletionProtection", required: false, type: .boolean), 
            AWSShapeMember(label: "DBSecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "TdeCredentialArn", required: false, type: .string), 
            AWSShapeMember(label: "EnablePerformanceInsights", required: false, type: .boolean), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "DBName", required: false, type: .string), 
            AWSShapeMember(label: "CopyTagsToSnapshot", required: false, type: .boolean), 
            AWSShapeMember(label: "TdeCredentialPassword", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "MonitoringInterval", required: false, type: .integer), 
            AWSShapeMember(label: "Engine", required: true, type: .string), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "Domain", required: false, type: .string), 
            AWSShapeMember(label: "PreferredBackupWindow", required: false, type: .string), 
            AWSShapeMember(label: "PerformanceInsightsRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "MonitoringRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "ProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "CharacterSetName", required: false, type: .string), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "DBClusterIdentifier", required: false, type: .string)
        ]
        /// The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs  in the Amazon Relational Database Service User Guide.
        public let enableCloudwatchLogsExports: [String]?
        /// The password for the master user. The password can include any printable ASCII character except "/", """, or "@".  Amazon Aurora  Not applicable. The password for the master user is managed by the DB cluster. For more information, see CreateDBCluster.  MariaDB  Constraints: Must contain from 8 to 41 characters.  Microsoft SQL Server  Constraints: Must contain from 8 to 128 characters.  MySQL  Constraints: Must contain from 8 to 41 characters.  Oracle  Constraints: Must contain from 8 to 30 characters.  PostgreSQL  Constraints: Must contain from 8 to 128 characters.
        public let masterUserPassword: String?
        /// The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
        public let performanceInsightsKMSKeyId: String?
        /// The name for the master user.  Amazon Aurora  Not applicable. The name for the master user is managed by the DB cluster. For more information, see CreateDBCluster.   MariaDB  Constraints:   Required for MariaDB.   Must be 1 to 16 letters or numbers.   Can't be a reserved word for the chosen database engine.    Microsoft SQL Server  Constraints:   Required for SQL Server.   Must be 1 to 128 letters or numbers.   The first character must be a letter.   Can't be a reserved word for the chosen database engine.    MySQL  Constraints:   Required for MySQL.   Must be 1 to 16 letters or numbers.   First character must be a letter.   Can't be a reserved word for the chosen database engine.    Oracle  Constraints:   Required for Oracle.   Must be 1 to 30 letters or numbers.   First character must be a letter.   Can't be a reserved word for the chosen database engine.    PostgreSQL  Constraints:   Required for PostgreSQL.   Must be 1 to 63 letters or numbers.   First character must be a letter.   Can't be a reserved word for the chosen database engine.  
        public let masterUsername: String?
        /// The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.  Amazon Aurora  Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see CreateDBCluster. Default: 1 Constraints:   Must be a value from 0 to 35   Can't be set to 0 if the DB instance is a source to Read Replicas  
        public let backupRetentionPeriod: Int32?
        /// Specifies whether the DB instance is encrypted.  Amazon Aurora  Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see CreateDBCluster. Default: false
        public let storageEncrypted: Bool?
        /// Specify the name of the IAM role to be used when making API calls to the Directory Service.
        public let domainIAMRoleName: String?
        /// The version number of the database engine to use. For a list of valid engine versions, call DescribeDBEngineVersions. The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.  Amazon Aurora  Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster. For more information, see CreateDBCluster.  MariaDB  See MariaDB on Amazon RDS Versions in the Amazon RDS User Guide.   Microsoft SQL Server  See Version and Feature Support on Amazon RDS in the Amazon RDS User Guide.   MySQL  See MySQL on Amazon RDS Versions in the Amazon RDS User Guide.   Oracle  See Oracle Database Engine Release Notes in the Amazon RDS User Guide.   PostgreSQL  See Supported PostgreSQL Database Versions in the Amazon RDS User Guide. 
        public let engineVersion: String?
        /// The AWS KMS key identifier for an encrypted DB instance. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.  Amazon Aurora  Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see CreateDBCluster. If the StorageEncrypted parameter is true, and you do not specify a value for the KmsKeyId parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.
        public let kmsKeyId: String?
        /// Indicates that the DB instance should be associated with the specified option group. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance
        public let optionGroupName: String?
        /// The port number on which the database accepts connections.  MySQL   Default: 3306   Valid Values: 1150-65535  Type: Integer  MariaDB   Default: 3306   Valid Values: 1150-65535  Type: Integer  PostgreSQL   Default: 5432   Valid Values: 1150-65535  Type: Integer  Oracle   Default: 1521   Valid Values: 1150-65535   SQL Server   Default: 1433   Valid Values: 1150-65535 except for 1434, 3389, 47001, 49152, and 49152 through 49156.   Amazon Aurora   Default: 3306   Valid Values: 1150-65535  Type: Integer
        public let port: Int32?
        /// The compute and memory capacity of the DB instance, for example, db.m4.large. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class in the Amazon RDS User Guide. 
        public let dBInstanceClass: String
        /// The time zone of the DB instance. The time zone parameter is currently supported only by Microsoft SQL Server. 
        public let timezone: String?
        /// A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see  Fault Tolerance for an Aurora DB Cluster in the Amazon Aurora User Guide.  Default: 1 Valid Values: 0 - 15
        public let promotionTier: Int32?
        ///  The EC2 Availability Zone that the DB instance is created in. For information on AWS Regions and Availability Zones, see Regions and Availability Zones.  Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.  Example: us-east-1d   Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to true. The specified Availability Zone must be in the same AWS Region as the current endpoint. 
        public let availabilityZone: String?
        /// Indicates if the DB instance should have deletion protection enabled. The database can't be deleted when this value is set to true. The default is false. For more information, see  Deleting a DB Instance. 
        public let deletionProtection: Bool?
        /// A list of DB security groups to associate with this DB instance. Default: The default DB security group for the database engine.
        public let dBSecurityGroups: DBSecurityGroupNameList?
        /// License model information for this DB instance.  Valid values: license-included | bring-your-own-license | general-public-license 
        public let licenseModel: String?
        /// Specifies the storage type to be associated with the DB instance.  Valid values: standard | gp2 | io1   If you specify io1, you must also include a value for the Iops parameter.   Default: io1 if the Iops parameter is specified, otherwise standard 
        public let storageType: String?
        /// The ARN from the key store with which to associate the instance for TDE encryption.
        public let tdeCredentialArn: String?
        /// True to enable Performance Insights for the DB instance, and otherwise false.  For more information, see Using Amazon Performance Insights in the Amazon Relational Database Service User Guide. 
        public let enablePerformanceInsights: Bool?
        /// A DB subnet group to associate with this DB instance. If there is no DB subnet group, then it is a non-VPC DB instance.
        public let dBSubnetGroupName: String?
        /// The DB instance identifier. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example: mydbinstance 
        public let dBInstanceIdentifier: String
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.  You can enable IAM database authentication for the following database engines:  Amazon Aurora  Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see CreateDBCluster.  MySQL    For MySQL 5.6, minor version 5.6.34 or higher   For MySQL 5.7, minor version 5.7.16 or higher   Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// The amount of storage (in gibibytes) to allocate for the DB instance. Type: Integer  Amazon Aurora  Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.  MySQL  Constraints to the amount of storage for each storage type are the following:    General Purpose (SSD) storage (gp2): Must be an integer from 20 to 16384.   Provisioned IOPS storage (io1): Must be an integer from 100 to 16384.   Magnetic storage (standard): Must be an integer from 5 to 3072.    MariaDB  Constraints to the amount of storage for each storage type are the following:    General Purpose (SSD) storage (gp2): Must be an integer from 20 to 16384.   Provisioned IOPS storage (io1): Must be an integer from 100 to 16384.   Magnetic storage (standard): Must be an integer from 5 to 3072.    PostgreSQL  Constraints to the amount of storage for each storage type are the following:    General Purpose (SSD) storage (gp2): Must be an integer from 20 to 16384.   Provisioned IOPS storage (io1): Must be an integer from 100 to 16384.   Magnetic storage (standard): Must be an integer from 5 to 3072.    Oracle  Constraints to the amount of storage for each storage type are the following:    General Purpose (SSD) storage (gp2): Must be an integer from 20 to 32768.   Provisioned IOPS storage (io1): Must be an integer from 100 to 32768.   Magnetic storage (standard): Must be an integer from 10 to 3072.    SQL Server  Constraints to the amount of storage for each storage type are the following:    General Purpose (SSD) storage (gp2):   Enterprise and Standard editions: Must be an integer from 200 to 16384.   Web and Express editions: Must be an integer from 20 to 16384.     Provisioned IOPS storage (io1):   Enterprise and Standard editions: Must be an integer from 200 to 16384.   Web and Express editions: Must be an integer from 100 to 16384.     Magnetic storage (standard):   Enterprise and Standard editions: Must be an integer from 200 to 1024.   Web and Express editions: Must be an integer from 20 to 1024.    
        public let allocatedStorage: Int32?
        /// A value that specifies whether the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
        public let multiAZ: Bool?
        /// The meaning of this parameter differs according to the database engine you use. Type: String  MySQL  The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance. Constraints:   Must contain 1 to 64 letters or numbers.   Can't be a word reserved by the specified database engine    MariaDB  The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance. Constraints:   Must contain 1 to 64 letters or numbers.   Can't be a word reserved by the specified database engine    PostgreSQL  The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance. Constraints:   Must contain 1 to 63 letters, numbers, or underscores.   Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).   Can't be a word reserved by the specified database engine    Oracle  The Oracle System ID (SID) of the created DB instance. If you specify null, the default value ORCL is used. You can't specify the string NULL, or any other reserved word, for DBName.  Default: ORCL  Constraints:   Can't be longer than 8 characters    SQL Server  Not applicable. Must be null.  Amazon Aurora  The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance. Constraints:   Must contain 1 to 64 letters or numbers.   Can't be a word reserved by the specified database engine  
        public let dBName: String?
        /// True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
        public let copyTagsToSnapshot: Bool?
        /// The password for the given ARN from the key store in order to access the device.
        public let tdeCredentialPassword: String?
        /// The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used. Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens  
        public let dBParameterGroupName: String?
        /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. If MonitoringRoleArn is specified, then you must also set MonitoringInterval to a value other than 0. Valid Values: 0, 1, 5, 10, 15, 30, 60 
        public let monitoringInterval: Int32?
        /// The name of the database engine to be used for this instance.  Not every database engine is available for every AWS Region.  Valid Values:     aurora (for MySQL 5.6-compatible Aurora)    aurora-mysql (for MySQL 5.7-compatible Aurora)    aurora-postgresql     mariadb     mysql     oracle-ee     oracle-se2     oracle-se1     oracle-se     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web   
        public let engine: String
        /// Specifies the accessibility options for the DB instance. A value of true specifies an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. A value of false specifies an internal instance with a DNS name that resolves to a private IP address. Default: The default behavior varies depending on whether DBSubnetGroupName is specified. If DBSubnetGroupName is not specified, and PubliclyAccessible is not specified, the following applies:   If the default VPC in the target region doesn’t have an Internet gateway attached to it, the DB instance is private.   If the default VPC in the target region has an Internet gateway attached to it, the DB instance is public.   If DBSubnetGroupName is specified, and PubliclyAccessible is not specified, the following applies:   If the subnets are part of a VPC that doesn’t have an Internet gateway attached to it, the DB instance is private.   If the subnets are part of a VPC that has an Internet gateway attached to it, the DB instance is public.  
        public let publiclyAccessible: Bool?
        public let tags: TagList?
        /// Specify the Active Directory Domain to create the instance in.
        public let domain: String?
        ///  The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter. For more information, see The Backup Window in the Amazon RDS User Guide.   Amazon Aurora  Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see CreateDBCluster.  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see  Adjusting the Preferred DB Instance Maintenance Window in the Amazon RDS User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.  
        public let preferredBackupWindow: String?
        /// The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
        public let performanceInsightsRetentionPeriod: Int32?
        /// The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, go to Setting Up and Enabling Enhanced Monitoring in the Amazon RDS User Guide. If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn value.
        public let monitoringRoleArn: String?
        /// A list of Amazon EC2 VPC security groups to associate with this DB instance.  Amazon Aurora  Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see CreateDBCluster. Default: The default EC2 VPC security group for the DB subnet group's VPC.
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window. Default: true 
        public let autoMinorVersionUpgrade: Bool?
        /// The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see Amazon RDS Maintenance Window.   Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.  Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        public let processorFeatures: ProcessorFeatureList?
        /// For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.  Amazon Aurora  Not applicable. The character set is managed by the DB cluster. For more information, see CreateDBCluster.
        public let characterSetName: String?
        /// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see see Amazon RDS Provisioned IOPS Storage to Improve Performance in the Amazon RDS User Guide.  Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. 
        public let iops: Int32?
        /// The identifier of the DB cluster that the instance will belong to. For information on creating a DB cluster, see CreateDBCluster. Type: String
        public let dBClusterIdentifier: String?

        public init(enableCloudwatchLogsExports: [String]? = nil, masterUserPassword: String? = nil, performanceInsightsKMSKeyId: String? = nil, masterUsername: String? = nil, backupRetentionPeriod: Int32? = nil, storageEncrypted: Bool? = nil, domainIAMRoleName: String? = nil, engineVersion: String? = nil, kmsKeyId: String? = nil, optionGroupName: String? = nil, port: Int32? = nil, dBInstanceClass: String, timezone: String? = nil, promotionTier: Int32? = nil, availabilityZone: String? = nil, deletionProtection: Bool? = nil, dBSecurityGroups: DBSecurityGroupNameList? = nil, licenseModel: String? = nil, storageType: String? = nil, tdeCredentialArn: String? = nil, enablePerformanceInsights: Bool? = nil, dBSubnetGroupName: String? = nil, dBInstanceIdentifier: String, enableIAMDatabaseAuthentication: Bool? = nil, allocatedStorage: Int32? = nil, multiAZ: Bool? = nil, dBName: String? = nil, copyTagsToSnapshot: Bool? = nil, tdeCredentialPassword: String? = nil, dBParameterGroupName: String? = nil, monitoringInterval: Int32? = nil, engine: String, publiclyAccessible: Bool? = nil, tags: TagList? = nil, domain: String? = nil, preferredBackupWindow: String? = nil, performanceInsightsRetentionPeriod: Int32? = nil, monitoringRoleArn: String? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, autoMinorVersionUpgrade: Bool? = nil, preferredMaintenanceWindow: String? = nil, processorFeatures: ProcessorFeatureList? = nil, characterSetName: String? = nil, iops: Int32? = nil, dBClusterIdentifier: String? = nil) {
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.masterUserPassword = masterUserPassword
            self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
            self.masterUsername = masterUsername
            self.backupRetentionPeriod = backupRetentionPeriod
            self.storageEncrypted = storageEncrypted
            self.domainIAMRoleName = domainIAMRoleName
            self.engineVersion = engineVersion
            self.kmsKeyId = kmsKeyId
            self.optionGroupName = optionGroupName
            self.port = port
            self.dBInstanceClass = dBInstanceClass
            self.timezone = timezone
            self.promotionTier = promotionTier
            self.availabilityZone = availabilityZone
            self.deletionProtection = deletionProtection
            self.dBSecurityGroups = dBSecurityGroups
            self.licenseModel = licenseModel
            self.storageType = storageType
            self.tdeCredentialArn = tdeCredentialArn
            self.enablePerformanceInsights = enablePerformanceInsights
            self.dBSubnetGroupName = dBSubnetGroupName
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.allocatedStorage = allocatedStorage
            self.multiAZ = multiAZ
            self.dBName = dBName
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.tdeCredentialPassword = tdeCredentialPassword
            self.dBParameterGroupName = dBParameterGroupName
            self.monitoringInterval = monitoringInterval
            self.engine = engine
            self.publiclyAccessible = publiclyAccessible
            self.tags = tags
            self.domain = domain
            self.preferredBackupWindow = preferredBackupWindow
            self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
            self.monitoringRoleArn = monitoringRoleArn
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.processorFeatures = processorFeatures
            self.characterSetName = characterSetName
            self.iops = iops
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case masterUserPassword = "MasterUserPassword"
            case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
            case masterUsername = "MasterUsername"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case storageEncrypted = "StorageEncrypted"
            case domainIAMRoleName = "DomainIAMRoleName"
            case engineVersion = "EngineVersion"
            case kmsKeyId = "KmsKeyId"
            case optionGroupName = "OptionGroupName"
            case port = "Port"
            case dBInstanceClass = "DBInstanceClass"
            case timezone = "Timezone"
            case promotionTier = "PromotionTier"
            case availabilityZone = "AvailabilityZone"
            case deletionProtection = "DeletionProtection"
            case dBSecurityGroups = "DBSecurityGroups"
            case licenseModel = "LicenseModel"
            case storageType = "StorageType"
            case tdeCredentialArn = "TdeCredentialArn"
            case enablePerformanceInsights = "EnablePerformanceInsights"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case allocatedStorage = "AllocatedStorage"
            case multiAZ = "MultiAZ"
            case dBName = "DBName"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case tdeCredentialPassword = "TdeCredentialPassword"
            case dBParameterGroupName = "DBParameterGroupName"
            case monitoringInterval = "MonitoringInterval"
            case engine = "Engine"
            case publiclyAccessible = "PubliclyAccessible"
            case tags = "Tags"
            case domain = "Domain"
            case preferredBackupWindow = "PreferredBackupWindow"
            case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
            case monitoringRoleArn = "MonitoringRoleArn"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case processorFeatures = "ProcessorFeatures"
            case characterSetName = "CharacterSetName"
            case iops = "Iops"
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct DBSecurityGroupNameList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSecurityGroupName", required: false, type: .list)
        ]
        public let dBSecurityGroupName: [String]?

        public init(dBSecurityGroupName: [String]? = nil) {
            self.dBSecurityGroupName = dBSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroupName = "DBSecurityGroupName"
        }
    }

    public struct StopDBInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string)
        ]
        ///  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
        public let dBSnapshotIdentifier: String?
        ///  The user-supplied instance identifier. 
        public let dBInstanceIdentifier: String

        public init(dBSnapshotIdentifier: String? = nil, dBInstanceIdentifier: String) {
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.dBInstanceIdentifier = dBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
        }
    }

    public struct DescribeOptionGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "EngineName", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "MajorEngineVersion", required: false, type: .string)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// Filters the list of option groups to only include groups associated with a specific database engine.
        public let engineName: String?
        /// The name of the option group to describe. Can't be supplied together with EngineName or MajorEngineVersion.
        public let optionGroupName: String?
        /// Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
        public let majorEngineVersion: String?

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, marker: String? = nil, engineName: String? = nil, optionGroupName: String? = nil, majorEngineVersion: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
            self.engineName = engineName
            self.optionGroupName = optionGroupName
            self.majorEngineVersion = majorEngineVersion
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case engineName = "EngineName"
            case optionGroupName = "OptionGroupName"
            case majorEngineVersion = "MajorEngineVersion"
        }
    }

    public struct Parameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplyType", required: false, type: .string), 
            AWSShapeMember(label: "MinimumEngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "ApplyMethod", required: false, type: .enum), 
            AWSShapeMember(label: "DataType", required: false, type: .string), 
            AWSShapeMember(label: "AllowedValues", required: false, type: .string), 
            AWSShapeMember(label: "ParameterName", required: false, type: .string), 
            AWSShapeMember(label: "IsModifiable", required: false, type: .boolean), 
            AWSShapeMember(label: "Source", required: false, type: .string), 
            AWSShapeMember(label: "ParameterValue", required: false, type: .string), 
            AWSShapeMember(label: "SupportedEngineModes", required: false, type: .list), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// Specifies the engine specific parameters type.
        public let applyType: String?
        /// The earliest engine version to which the parameter can apply.
        public let minimumEngineVersion: String?
        /// Indicates when to apply parameter updates.
        public let applyMethod: ApplyMethod?
        /// Specifies the valid data type for the parameter.
        public let dataType: String?
        /// Specifies the valid range of values for the parameter.
        public let allowedValues: String?
        /// Specifies the name of the parameter.
        public let parameterName: String?
        ///  Indicates whether (true) or not (false) the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed. 
        public let isModifiable: Bool?
        /// Indicates the source of the parameter value.
        public let source: String?
        /// Specifies the value of the parameter.
        public let parameterValue: String?
        /// The valid DB engine modes.
        public let supportedEngineModes: [String]?
        /// Provides a description of the parameter.
        public let description: String?

        public init(applyType: String? = nil, minimumEngineVersion: String? = nil, applyMethod: ApplyMethod? = nil, dataType: String? = nil, allowedValues: String? = nil, parameterName: String? = nil, isModifiable: Bool? = nil, source: String? = nil, parameterValue: String? = nil, supportedEngineModes: [String]? = nil, description: String? = nil) {
            self.applyType = applyType
            self.minimumEngineVersion = minimumEngineVersion
            self.applyMethod = applyMethod
            self.dataType = dataType
            self.allowedValues = allowedValues
            self.parameterName = parameterName
            self.isModifiable = isModifiable
            self.source = source
            self.parameterValue = parameterValue
            self.supportedEngineModes = supportedEngineModes
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case applyType = "ApplyType"
            case minimumEngineVersion = "MinimumEngineVersion"
            case applyMethod = "ApplyMethod"
            case dataType = "DataType"
            case allowedValues = "AllowedValues"
            case parameterName = "ParameterName"
            case isModifiable = "IsModifiable"
            case source = "Source"
            case parameterValue = "ParameterValue"
            case supportedEngineModes = "SupportedEngineModes"
            case description = "Description"
        }
    }

    public struct DescribeReservedDBInstancesOfferingsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "ProductDescription", required: false, type: .string), 
            AWSShapeMember(label: "OfferingType", required: false, type: .string), 
            AWSShapeMember(label: "Duration", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "ReservedDBInstancesOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The Multi-AZ filter value. Specify this parameter to show only the available offerings matching the specified Multi-AZ parameter.
        public let multiAZ: Bool?
        /// Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.  The results show offerings that partially match the filter value. 
        public let productDescription: String?
        /// The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type. Valid Values: "Partial Upfront" | "All Upfront" | "No Upfront"  
        public let offeringType: String?
        /// Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration. Valid Values: 1 | 3 | 31536000 | 94608000 
        public let duration: String?
        /// The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
        public let dBInstanceClass: String?
        /// The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706 
        public let reservedDBInstancesOfferingId: String?
        ///  The maximum number of records to include in the response. If more than the MaxRecords value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(filters: FilterList? = nil, marker: String? = nil, multiAZ: Bool? = nil, productDescription: String? = nil, offeringType: String? = nil, duration: String? = nil, dBInstanceClass: String? = nil, reservedDBInstancesOfferingId: String? = nil, maxRecords: Int32? = nil) {
            self.filters = filters
            self.marker = marker
            self.multiAZ = multiAZ
            self.productDescription = productDescription
            self.offeringType = offeringType
            self.duration = duration
            self.dBInstanceClass = dBInstanceClass
            self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case marker = "Marker"
            case multiAZ = "MultiAZ"
            case productDescription = "ProductDescription"
            case offeringType = "OfferingType"
            case duration = "Duration"
            case dBInstanceClass = "DBInstanceClass"
            case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DBCluster: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Capacity", required: false, type: .integer), 
            AWSShapeMember(label: "IAMDatabaseAuthenticationEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .structure), 
            AWSShapeMember(label: "VpcSecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "MasterUsername", required: false, type: .string), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "CustomEndpoints", required: false, type: .list), 
            AWSShapeMember(label: "PercentProgress", required: false, type: .string), 
            AWSShapeMember(label: "LatestRestorableTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "StorageEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "ScalingConfigurationInfo", required: false, type: .structure), 
            AWSShapeMember(label: "DBClusterOptionGroupMemberships", required: false, type: .structure), 
            AWSShapeMember(label: "DeletionProtection", required: false, type: .boolean), 
            AWSShapeMember(label: "DBSubnetGroup", required: false, type: .string), 
            AWSShapeMember(label: "Endpoint", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "ClusterCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ReaderEndpoint", required: false, type: .string), 
            AWSShapeMember(label: "HostedZoneId", required: false, type: .string), 
            AWSShapeMember(label: "EarliestBacktrackTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "AssociatedRoles", required: false, type: .structure), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "DbClusterResourceId", required: false, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "CloneGroupId", required: false, type: .string), 
            AWSShapeMember(label: "ReadReplicaIdentifiers", required: false, type: .structure), 
            AWSShapeMember(label: "ReplicationSourceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "EnabledCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "CharacterSetName", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterArn", required: false, type: .string), 
            AWSShapeMember(label: "PreferredBackupWindow", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterMembers", required: false, type: .structure), 
            AWSShapeMember(label: "HttpEndpointEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "EarliestRestorableTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "BacktrackWindow", required: false, type: .long), 
            AWSShapeMember(label: "DBClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterParameterGroup", required: false, type: .string), 
            AWSShapeMember(label: "EngineMode", required: false, type: .string), 
            AWSShapeMember(label: "BacktrackConsumedChangeRecords", required: false, type: .long)
        ]
        public let capacity: Int32?
        /// True if mapping of AWS Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.
        public let iAMDatabaseAuthenticationEnabled: Bool?
        /// Provides the list of EC2 Availability Zones that instances in the DB cluster can be created in.
        public let availabilityZones: AvailabilityZones?
        /// Provides a list of VPC security groups that the DB cluster belongs to.
        public let vpcSecurityGroups: VpcSecurityGroupMembershipList?
        /// Contains the master username for the DB cluster.
        public let masterUsername: String?
        /// Specifies the number of days for which automatic DB snapshots are retained.
        public let backupRetentionPeriod: Int32?
        /// Identifies all custom endpoints associated with the cluster.
        public let customEndpoints: [String]?
        /// Specifies the progress of the operation as a percentage.
        public let percentProgress: String?
        /// Specifies the latest time to which a database can be restored with point-in-time restore.
        public let latestRestorableTime: TimeStamp?
        /// Indicates the database engine version.
        public let engineVersion: String?
        /// If StorageEncrypted is true, the AWS KMS key identifier for the encrypted DB cluster.
        public let kmsKeyId: String?
        /// Specifies the port that the database engine is listening on.
        public let port: Int32?
        /// Specifies whether the DB cluster is encrypted.
        public let storageEncrypted: Bool?
        public let scalingConfigurationInfo: ScalingConfigurationInfo?
        /// Provides the list of option group memberships for this DB cluster.
        public let dBClusterOptionGroupMemberships: DBClusterOptionGroupMemberships?
        /// Indicates if the DB cluster has deletion protection enabled. The database can't be deleted when this value is set to true. 
        public let deletionProtection: Bool?
        /// Specifies information on the subnet group associated with the DB cluster, including the name, description, and subnets in the subnet group.
        public let dBSubnetGroup: String?
        /// Specifies the connection endpoint for the primary instance of the DB cluster.
        public let endpoint: String?
        /// Specifies the current state of this DB cluster.
        public let status: String?
        /// Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).
        public let clusterCreateTime: TimeStamp?
        /// The reader endpoint for the DB cluster. The reader endpoint for a DB cluster load-balances connections across the Aurora Replicas that are available in a DB cluster. As clients request new connections to the reader endpoint, Aurora distributes the connection requests among the Aurora Replicas in the DB cluster. This functionality can help balance your read workload across multiple Aurora Replicas in your DB cluster.  If a failover occurs, and the Aurora Replica that you are connected to is promoted to be the primary instance, your connection is dropped. To continue sending your read workload to other Aurora Replicas in the cluster, you can then reconnect to the reader endpoint.
        public let readerEndpoint: String?
        /// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
        public let hostedZoneId: String?
        /// The earliest time to which a DB cluster can be backtracked.
        public let earliestBacktrackTime: TimeStamp?
        /// Provides a list of the AWS Identity and Access Management (IAM) roles that are associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other AWS services on your behalf.
        public let associatedRoles: DBClusterRoles?
        /// For all database engines except Amazon Aurora, AllocatedStorage specifies the allocated storage size in gibibytes (GiB). For Aurora, AllocatedStorage always returns 1, because Aurora DB cluster storage size is not fixed, but instead automatically adjusts as needed.
        public let allocatedStorage: Int32?
        /// The AWS Region-unique, immutable identifier for the DB cluster. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB cluster is accessed.
        public let dbClusterResourceId: String?
        /// Specifies whether the DB cluster has instances in multiple Availability Zones.
        public let multiAZ: Bool?
        /// Identifies the clone group to which the DB cluster is associated.
        public let cloneGroupId: String?
        /// Contains one or more identifiers of the Read Replicas associated with this DB cluster.
        public let readReplicaIdentifiers: ReadReplicaIdentifierList?
        /// Contains the identifier of the source DB cluster if this DB cluster is a Read Replica.
        public let replicationSourceIdentifier: String?
        /// Provides the name of the database engine to be used for this DB cluster.
        public let engine: String?
        /// A list of log types that this DB cluster is configured to export to CloudWatch Logs. Log types vary by DB engine. For information about the log types for each DB engine, see Amazon RDS Database Log Files in the Amazon Aurora User Guide. 
        public let enabledCloudwatchLogsExports: [String]?
        /// If present, specifies the name of the character set that this cluster is associated with.
        public let characterSetName: String?
        /// The Amazon Resource Name (ARN) for the DB cluster.
        public let dBClusterArn: String?
        /// Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod. 
        public let preferredBackupWindow: String?
        /// Provides the list of instances that make up the DB cluster.
        public let dBClusterMembers: DBClusterMemberList?
        ///  HTTP endpoint functionality is in beta for Aurora Serverless and is subject to change.  Value that is true if the HTTP endpoint for an Aurora Serverless DB cluster is enabled and false otherwise. When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor. For more information about Aurora Serverless, see Using Amazon Aurora Serverless in the Amazon Aurora User Guide.
        public let httpEndpointEnabled: Bool?
        /// Contains the name of the initial database of this DB cluster that was provided at create time, if one was specified when the DB cluster was created. This same name is returned for the life of the DB cluster.
        public let databaseName: String?
        /// The earliest time to which a database can be restored with point-in-time restore.
        public let earliestRestorableTime: TimeStamp?
        /// Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        public let preferredMaintenanceWindow: String?
        /// The target backtrack window, in seconds. If this value is set to 0, backtracking is disabled for the DB cluster. Otherwise, backtracking is enabled.
        public let backtrackWindow: Int64?
        /// Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.
        public let dBClusterIdentifier: String?
        /// Specifies the name of the DB cluster parameter group for the DB cluster.
        public let dBClusterParameterGroup: String?
        /// The DB engine mode of the DB cluster, either provisioned, serverless, or parallelquery.
        public let engineMode: String?
        /// The number of change records stored for Backtrack.
        public let backtrackConsumedChangeRecords: Int64?

        public init(capacity: Int32? = nil, iAMDatabaseAuthenticationEnabled: Bool? = nil, availabilityZones: AvailabilityZones? = nil, vpcSecurityGroups: VpcSecurityGroupMembershipList? = nil, masterUsername: String? = nil, backupRetentionPeriod: Int32? = nil, customEndpoints: [String]? = nil, percentProgress: String? = nil, latestRestorableTime: TimeStamp? = nil, engineVersion: String? = nil, kmsKeyId: String? = nil, port: Int32? = nil, storageEncrypted: Bool? = nil, scalingConfigurationInfo: ScalingConfigurationInfo? = nil, dBClusterOptionGroupMemberships: DBClusterOptionGroupMemberships? = nil, deletionProtection: Bool? = nil, dBSubnetGroup: String? = nil, endpoint: String? = nil, status: String? = nil, clusterCreateTime: TimeStamp? = nil, readerEndpoint: String? = nil, hostedZoneId: String? = nil, earliestBacktrackTime: TimeStamp? = nil, associatedRoles: DBClusterRoles? = nil, allocatedStorage: Int32? = nil, dbClusterResourceId: String? = nil, multiAZ: Bool? = nil, cloneGroupId: String? = nil, readReplicaIdentifiers: ReadReplicaIdentifierList? = nil, replicationSourceIdentifier: String? = nil, engine: String? = nil, enabledCloudwatchLogsExports: [String]? = nil, characterSetName: String? = nil, dBClusterArn: String? = nil, preferredBackupWindow: String? = nil, dBClusterMembers: DBClusterMemberList? = nil, httpEndpointEnabled: Bool? = nil, databaseName: String? = nil, earliestRestorableTime: TimeStamp? = nil, preferredMaintenanceWindow: String? = nil, backtrackWindow: Int64? = nil, dBClusterIdentifier: String? = nil, dBClusterParameterGroup: String? = nil, engineMode: String? = nil, backtrackConsumedChangeRecords: Int64? = nil) {
            self.capacity = capacity
            self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
            self.availabilityZones = availabilityZones
            self.vpcSecurityGroups = vpcSecurityGroups
            self.masterUsername = masterUsername
            self.backupRetentionPeriod = backupRetentionPeriod
            self.customEndpoints = customEndpoints
            self.percentProgress = percentProgress
            self.latestRestorableTime = latestRestorableTime
            self.engineVersion = engineVersion
            self.kmsKeyId = kmsKeyId
            self.port = port
            self.storageEncrypted = storageEncrypted
            self.scalingConfigurationInfo = scalingConfigurationInfo
            self.dBClusterOptionGroupMemberships = dBClusterOptionGroupMemberships
            self.deletionProtection = deletionProtection
            self.dBSubnetGroup = dBSubnetGroup
            self.endpoint = endpoint
            self.status = status
            self.clusterCreateTime = clusterCreateTime
            self.readerEndpoint = readerEndpoint
            self.hostedZoneId = hostedZoneId
            self.earliestBacktrackTime = earliestBacktrackTime
            self.associatedRoles = associatedRoles
            self.allocatedStorage = allocatedStorage
            self.dbClusterResourceId = dbClusterResourceId
            self.multiAZ = multiAZ
            self.cloneGroupId = cloneGroupId
            self.readReplicaIdentifiers = readReplicaIdentifiers
            self.replicationSourceIdentifier = replicationSourceIdentifier
            self.engine = engine
            self.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports
            self.characterSetName = characterSetName
            self.dBClusterArn = dBClusterArn
            self.preferredBackupWindow = preferredBackupWindow
            self.dBClusterMembers = dBClusterMembers
            self.httpEndpointEnabled = httpEndpointEnabled
            self.databaseName = databaseName
            self.earliestRestorableTime = earliestRestorableTime
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.backtrackWindow = backtrackWindow
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterParameterGroup = dBClusterParameterGroup
            self.engineMode = engineMode
            self.backtrackConsumedChangeRecords = backtrackConsumedChangeRecords
        }

        private enum CodingKeys: String, CodingKey {
            case capacity = "Capacity"
            case iAMDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
            case availabilityZones = "AvailabilityZones"
            case vpcSecurityGroups = "VpcSecurityGroups"
            case masterUsername = "MasterUsername"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case customEndpoints = "CustomEndpoints"
            case percentProgress = "PercentProgress"
            case latestRestorableTime = "LatestRestorableTime"
            case engineVersion = "EngineVersion"
            case kmsKeyId = "KmsKeyId"
            case port = "Port"
            case storageEncrypted = "StorageEncrypted"
            case scalingConfigurationInfo = "ScalingConfigurationInfo"
            case dBClusterOptionGroupMemberships = "DBClusterOptionGroupMemberships"
            case deletionProtection = "DeletionProtection"
            case dBSubnetGroup = "DBSubnetGroup"
            case endpoint = "Endpoint"
            case status = "Status"
            case clusterCreateTime = "ClusterCreateTime"
            case readerEndpoint = "ReaderEndpoint"
            case hostedZoneId = "HostedZoneId"
            case earliestBacktrackTime = "EarliestBacktrackTime"
            case associatedRoles = "AssociatedRoles"
            case allocatedStorage = "AllocatedStorage"
            case dbClusterResourceId = "DbClusterResourceId"
            case multiAZ = "MultiAZ"
            case cloneGroupId = "CloneGroupId"
            case readReplicaIdentifiers = "ReadReplicaIdentifiers"
            case replicationSourceIdentifier = "ReplicationSourceIdentifier"
            case engine = "Engine"
            case enabledCloudwatchLogsExports = "EnabledCloudwatchLogsExports"
            case characterSetName = "CharacterSetName"
            case dBClusterArn = "DBClusterArn"
            case preferredBackupWindow = "PreferredBackupWindow"
            case dBClusterMembers = "DBClusterMembers"
            case httpEndpointEnabled = "HttpEndpointEnabled"
            case databaseName = "DatabaseName"
            case earliestRestorableTime = "EarliestRestorableTime"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case backtrackWindow = "BacktrackWindow"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBClusterParameterGroup = "DBClusterParameterGroup"
            case engineMode = "EngineMode"
            case backtrackConsumedChangeRecords = "BacktrackConsumedChangeRecords"
        }
    }

    public struct ModifyDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "ApplyImmediately", required: false, type: .boolean), 
            AWSShapeMember(label: "DBClusterParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "MasterUserPassword", required: false, type: .string), 
            AWSShapeMember(label: "PreferredBackupWindow", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "BacktrackWindow", required: false, type: .long), 
            AWSShapeMember(label: "EnableHttpEndpoint", required: false, type: .boolean), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "CloudwatchLogsExportConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "DeletionProtection", required: false, type: .boolean), 
            AWSShapeMember(label: "NewDBClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "ScalingConfiguration", required: false, type: .structure)
        ]
        /// The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true. For a list of valid engine versions, see CreateDBCluster, or call DescribeDBEngineVersions.
        public let engineVersion: String?
        /// A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the DB cluster. If this parameter is set to false, changes to the DB cluster are applied during the next maintenance window. The ApplyImmediately parameter only affects the EnableIAMDatabaseAuthentication, MasterUserPassword, and NewDBClusterIdentifier values. If you set the ApplyImmediately parameter value to false, then changes to the EnableIAMDatabaseAuthentication, MasterUserPassword, and NewDBClusterIdentifier values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the ApplyImmediately parameter. Default: false 
        public let applyImmediately: Bool?
        /// The name of the DB cluster parameter group to use for the DB cluster.
        public let dBClusterParameterGroupName: String?
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see  Adjusting the Preferred DB Cluster Maintenance Window in the Amazon Aurora User Guide.  Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// The number of days for which automated backups are retained. You must specify a minimum value of 1. Default: 1 Constraints:   Must be a value from 1 to 35  
        public let backupRetentionPeriod: Int32?
        /// The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@". Constraints: Must contain from 8 to 41 characters.
        public let masterUserPassword: String?
        /// The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter.  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see  Adjusting the Preferred DB Cluster Maintenance Window in the Amazon Aurora User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.  
        public let preferredBackupWindow: String?
        /// A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.  Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.
        public let optionGroupName: String?
        /// The target backtrack window, in seconds. To disable backtracking, set this value to 0. Default: 0 Constraints:   If specified, this value must be set to a number from 0 to 259,200 (72 hours).  
        public let backtrackWindow: Int64?
        ///  HTTP endpoint functionality is in beta for Aurora Serverless and is subject to change.  A value that indicates whether to enable the HTTP endpoint for an Aurora Serverless DB cluster. By default, the HTTP endpoint is disabled. When enabled, the HTTP endpoint provides a connectionless web service API for running SQL queries on the Aurora Serverless DB cluster. You can also query your database from inside the RDS console with the query editor. For more information about Aurora Serverless, see Using Amazon Aurora Serverless in the Amazon Aurora User Guide.
        public let enableHttpEndpoint: Bool?
        /// The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive. Constraints:   Must match the identifier of an existing DBCluster.  
        public let dBClusterIdentifier: String
        /// The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB cluster.
        public let cloudwatchLogsExportConfiguration: CloudwatchLogsExportConfiguration?
        /// The port number on which the DB cluster accepts connections. Constraints: Value must be 1150-65535  Default: The same port as the original DB cluster.
        public let port: Int32?
        /// A list of VPC security groups that the DB cluster will belong to.
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// Indicates if the DB cluster has deletion protection enabled. The database can't be deleted when this value is set to true. 
        public let deletionProtection: Bool?
        /// The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens   The first character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: my-cluster2 
        public let newDBClusterIdentifier: String?
        /// The scaling properties of the DB cluster. You can only modify scaling properties for DB clusters in serverless DB engine mode.
        public let scalingConfiguration: ScalingConfiguration?

        public init(engineVersion: String? = nil, applyImmediately: Bool? = nil, dBClusterParameterGroupName: String? = nil, preferredMaintenanceWindow: String? = nil, enableIAMDatabaseAuthentication: Bool? = nil, backupRetentionPeriod: Int32? = nil, masterUserPassword: String? = nil, preferredBackupWindow: String? = nil, optionGroupName: String? = nil, backtrackWindow: Int64? = nil, enableHttpEndpoint: Bool? = nil, dBClusterIdentifier: String, cloudwatchLogsExportConfiguration: CloudwatchLogsExportConfiguration? = nil, port: Int32? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, deletionProtection: Bool? = nil, newDBClusterIdentifier: String? = nil, scalingConfiguration: ScalingConfiguration? = nil) {
            self.engineVersion = engineVersion
            self.applyImmediately = applyImmediately
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.backupRetentionPeriod = backupRetentionPeriod
            self.masterUserPassword = masterUserPassword
            self.preferredBackupWindow = preferredBackupWindow
            self.optionGroupName = optionGroupName
            self.backtrackWindow = backtrackWindow
            self.enableHttpEndpoint = enableHttpEndpoint
            self.dBClusterIdentifier = dBClusterIdentifier
            self.cloudwatchLogsExportConfiguration = cloudwatchLogsExportConfiguration
            self.port = port
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.deletionProtection = deletionProtection
            self.newDBClusterIdentifier = newDBClusterIdentifier
            self.scalingConfiguration = scalingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case engineVersion = "EngineVersion"
            case applyImmediately = "ApplyImmediately"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case masterUserPassword = "MasterUserPassword"
            case preferredBackupWindow = "PreferredBackupWindow"
            case optionGroupName = "OptionGroupName"
            case backtrackWindow = "BacktrackWindow"
            case enableHttpEndpoint = "EnableHttpEndpoint"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case cloudwatchLogsExportConfiguration = "CloudwatchLogsExportConfiguration"
            case port = "Port"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case deletionProtection = "DeletionProtection"
            case newDBClusterIdentifier = "NewDBClusterIdentifier"
            case scalingConfiguration = "ScalingConfiguration"
        }
    }

    public struct DBSecurityGroups: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSecurityGroup", required: false, type: .list)
        ]
        public let dBSecurityGroup: [DBSecurityGroup]?

        public init(dBSecurityGroup: [DBSecurityGroup]? = nil) {
            self.dBSecurityGroup = dBSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroup = "DBSecurityGroup"
        }
    }

    public struct OrderableDBInstanceOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .structure), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "SupportedEngineModes", required: false, type: .list), 
            AWSShapeMember(label: "MultiAZCapable", required: false, type: .boolean), 
            AWSShapeMember(label: "SupportsEnhancedMonitoring", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxStorageSize", required: false, type: .integer), 
            AWSShapeMember(label: "SupportsPerformanceInsights", required: false, type: .boolean), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "AvailableProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "MaxIopsPerGib", required: false, type: .double), 
            AWSShapeMember(label: "SupportsStorageEncryption", required: false, type: .boolean), 
            AWSShapeMember(label: "SupportsIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "MinIopsPerGib", required: false, type: .double), 
            AWSShapeMember(label: "MinIopsPerDbInstance", required: false, type: .integer), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "ReadReplicaCapable", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxIopsPerDbInstance", required: false, type: .integer), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "SupportsIops", required: false, type: .boolean), 
            AWSShapeMember(label: "MinStorageSize", required: false, type: .integer), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "Vpc", required: false, type: .boolean)
        ]
        /// A list of Availability Zones for a DB instance.
        public let availabilityZones: AvailabilityZoneList?
        /// The engine version of a DB instance.
        public let engineVersion: String?
        /// A list of the supported DB engine modes.
        public let supportedEngineModes: [String]?
        /// Indicates whether a DB instance is Multi-AZ capable.
        public let multiAZCapable: Bool?
        /// Indicates whether a DB instance supports Enhanced Monitoring at intervals from 1 to 60 seconds.
        public let supportsEnhancedMonitoring: Bool?
        /// Maximum storage size for a DB instance.
        public let maxStorageSize: Int32?
        /// True if a DB instance supports Performance Insights, otherwise false.
        public let supportsPerformanceInsights: Bool?
        /// The DB instance class for a DB instance.
        public let dBInstanceClass: String?
        /// A list of the available processor features for the DB instance class of a DB instance.
        public let availableProcessorFeatures: AvailableProcessorFeatureList?
        /// Maximum provisioned IOPS per GiB for a DB instance.
        public let maxIopsPerGib: Double?
        /// Indicates whether a DB instance supports encrypted storage.
        public let supportsStorageEncryption: Bool?
        /// Indicates whether a DB instance supports IAM database authentication.
        public let supportsIAMDatabaseAuthentication: Bool?
        /// Minimum provisioned IOPS per GiB for a DB instance.
        public let minIopsPerGib: Double?
        /// Minimum total provisioned IOPS for a DB instance.
        public let minIopsPerDbInstance: Int32?
        /// The engine type of a DB instance.
        public let engine: String?
        /// Indicates whether a DB instance can have a Read Replica.
        public let readReplicaCapable: Bool?
        /// Maximum total provisioned IOPS for a DB instance.
        public let maxIopsPerDbInstance: Int32?
        /// Indicates the storage type for a DB instance.
        public let storageType: String?
        /// Indicates whether a DB instance supports provisioned IOPS.
        public let supportsIops: Bool?
        /// Minimum storage size for a DB instance.
        public let minStorageSize: Int32?
        /// The license model for a DB instance.
        public let licenseModel: String?
        /// Indicates whether a DB instance is in a VPC.
        public let vpc: Bool?

        public init(availabilityZones: AvailabilityZoneList? = nil, engineVersion: String? = nil, supportedEngineModes: [String]? = nil, multiAZCapable: Bool? = nil, supportsEnhancedMonitoring: Bool? = nil, maxStorageSize: Int32? = nil, supportsPerformanceInsights: Bool? = nil, dBInstanceClass: String? = nil, availableProcessorFeatures: AvailableProcessorFeatureList? = nil, maxIopsPerGib: Double? = nil, supportsStorageEncryption: Bool? = nil, supportsIAMDatabaseAuthentication: Bool? = nil, minIopsPerGib: Double? = nil, minIopsPerDbInstance: Int32? = nil, engine: String? = nil, readReplicaCapable: Bool? = nil, maxIopsPerDbInstance: Int32? = nil, storageType: String? = nil, supportsIops: Bool? = nil, minStorageSize: Int32? = nil, licenseModel: String? = nil, vpc: Bool? = nil) {
            self.availabilityZones = availabilityZones
            self.engineVersion = engineVersion
            self.supportedEngineModes = supportedEngineModes
            self.multiAZCapable = multiAZCapable
            self.supportsEnhancedMonitoring = supportsEnhancedMonitoring
            self.maxStorageSize = maxStorageSize
            self.supportsPerformanceInsights = supportsPerformanceInsights
            self.dBInstanceClass = dBInstanceClass
            self.availableProcessorFeatures = availableProcessorFeatures
            self.maxIopsPerGib = maxIopsPerGib
            self.supportsStorageEncryption = supportsStorageEncryption
            self.supportsIAMDatabaseAuthentication = supportsIAMDatabaseAuthentication
            self.minIopsPerGib = minIopsPerGib
            self.minIopsPerDbInstance = minIopsPerDbInstance
            self.engine = engine
            self.readReplicaCapable = readReplicaCapable
            self.maxIopsPerDbInstance = maxIopsPerDbInstance
            self.storageType = storageType
            self.supportsIops = supportsIops
            self.minStorageSize = minStorageSize
            self.licenseModel = licenseModel
            self.vpc = vpc
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case engineVersion = "EngineVersion"
            case supportedEngineModes = "SupportedEngineModes"
            case multiAZCapable = "MultiAZCapable"
            case supportsEnhancedMonitoring = "SupportsEnhancedMonitoring"
            case maxStorageSize = "MaxStorageSize"
            case supportsPerformanceInsights = "SupportsPerformanceInsights"
            case dBInstanceClass = "DBInstanceClass"
            case availableProcessorFeatures = "AvailableProcessorFeatures"
            case maxIopsPerGib = "MaxIopsPerGib"
            case supportsStorageEncryption = "SupportsStorageEncryption"
            case supportsIAMDatabaseAuthentication = "SupportsIAMDatabaseAuthentication"
            case minIopsPerGib = "MinIopsPerGib"
            case minIopsPerDbInstance = "MinIopsPerDbInstance"
            case engine = "Engine"
            case readReplicaCapable = "ReadReplicaCapable"
            case maxIopsPerDbInstance = "MaxIopsPerDbInstance"
            case storageType = "StorageType"
            case supportsIops = "SupportsIops"
            case minStorageSize = "MinStorageSize"
            case licenseModel = "LicenseModel"
            case vpc = "Vpc"
        }
    }

    public struct DescribeDBClusterParametersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterParameterGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Source", required: false, type: .string)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous DescribeDBClusterParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The name of a specific DB cluster parameter group to return parameter details for. Constraints:   If supplied, must match the name of an existing DBClusterParameterGroup.  
        public let dBClusterParameterGroupName: String
        ///  A value that indicates to return only parameters for a specific source. Parameter sources can be engine, service, or customer. 
        public let source: String?

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, marker: String? = nil, dBClusterParameterGroupName: String, source: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case source = "Source"
        }
    }

    public struct CopyOptionGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceOptionGroupIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "TargetOptionGroupDescription", required: true, type: .string), 
            AWSShapeMember(label: "TargetOptionGroupIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// The identifier or ARN for the source option group. For information about creating an ARN, see  Constructing an ARN for Amazon RDS in the Amazon RDS User Guide.  Constraints:   Must specify a valid option group.   If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example my-option-group, or a valid ARN.   If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example arn:aws:rds:us-west-2:123456789012:og:special-options.  
        public let sourceOptionGroupIdentifier: String
        /// The description for the copied option group.
        public let targetOptionGroupDescription: String
        /// The identifier for the copied option group. Constraints:   Can't be null, empty, or blank   Must contain from 1 to 255 letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: my-option-group 
        public let targetOptionGroupIdentifier: String
        public let tags: TagList?

        public init(sourceOptionGroupIdentifier: String, targetOptionGroupDescription: String, targetOptionGroupIdentifier: String, tags: TagList? = nil) {
            self.sourceOptionGroupIdentifier = sourceOptionGroupIdentifier
            self.targetOptionGroupDescription = targetOptionGroupDescription
            self.targetOptionGroupIdentifier = targetOptionGroupIdentifier
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case sourceOptionGroupIdentifier = "SourceOptionGroupIdentifier"
            case targetOptionGroupDescription = "TargetOptionGroupDescription"
            case targetOptionGroupIdentifier = "TargetOptionGroupIdentifier"
            case tags = "Tags"
        }
    }

    public struct FilterList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: false, type: .list)
        ]
        public let filter: [Filter]?

        public init(filter: [Filter]? = nil) {
            self.filter = filter
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
        }
    }

    public struct OptionsDependedOn: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionName", required: false, type: .list)
        ]
        public let optionName: [String]?

        public init(optionName: [String]? = nil) {
            self.optionName = optionName
        }

        private enum CodingKeys: String, CodingKey {
            case optionName = "OptionName"
        }
    }

    public struct PendingMaintenanceActions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourcePendingMaintenanceActions", required: false, type: .list)
        ]
        public let resourcePendingMaintenanceActions: [ResourcePendingMaintenanceActions]?

        public init(resourcePendingMaintenanceActions: [ResourcePendingMaintenanceActions]? = nil) {
            self.resourcePendingMaintenanceActions = resourcePendingMaintenanceActions
        }

        private enum CodingKeys: String, CodingKey {
            case resourcePendingMaintenanceActions = "ResourcePendingMaintenanceActions"
        }
    }

    public struct DeleteDBInstanceAutomatedBackupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstanceAutomatedBackup", required: false, type: .structure)
        ]
        public let dBInstanceAutomatedBackup: DBInstanceAutomatedBackup?

        public init(dBInstanceAutomatedBackup: DBInstanceAutomatedBackup? = nil) {
            self.dBInstanceAutomatedBackup = dBInstanceAutomatedBackup
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceAutomatedBackup = "DBInstanceAutomatedBackup"
        }
    }

    public struct DeleteEventSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string)
        ]
        /// The name of the RDS event notification subscription you want to delete.
        public let subscriptionName: String

        public init(subscriptionName: String) {
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct DescribeAccountAttributesMessage: AWSShape {

    }

    public struct RebootDBInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct Filter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// One or more filter values. Filter values are case-sensitive.
        public let values: FilterValueList
        /// The name of the filter. Filter names are case-sensitive.
        public let name: String

        public init(values: FilterValueList, name: String) {
            self.values = values
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
            case name = "Name"
        }
    }

    public struct ResetDBParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroupName", required: true, type: .string), 
            AWSShapeMember(label: "ResetAllParameters", required: false, type: .boolean), 
            AWSShapeMember(label: "Parameters", required: false, type: .structure)
        ]
        /// The name of the DB parameter group. Constraints:   Must match the name of an existing DBParameterGroup.  
        public let dBParameterGroupName: String
        ///  Specifies whether (true) or not (false) to reset all parameters in the DB parameter group to default values.  Default: true 
        public let resetAllParameters: Bool?
        /// To reset the entire DB parameter group, specify the DBParameterGroup name and ResetAllParameters parameters. To reset specific parameters, provide a list of the following: ParameterName and ApplyMethod. A maximum of 20 parameters can be modified in a single request.  MySQL  Valid Values (for Apply method): immediate | pending-reboot  You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when DB instance reboots.  MariaDB  Valid Values (for Apply method): immediate | pending-reboot  You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when DB instance reboots.  Oracle  Valid Values (for Apply method): pending-reboot 
        public let parameters: ParametersList?

        public init(dBParameterGroupName: String, resetAllParameters: Bool? = nil, parameters: ParametersList? = nil) {
            self.dBParameterGroupName = dBParameterGroupName
            self.resetAllParameters = resetAllParameters
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
            case resetAllParameters = "ResetAllParameters"
            case parameters = "Parameters"
        }
    }

    public struct OptionGroupOptionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroupOption", required: false, type: .list)
        ]
        public let optionGroupOption: [OptionGroupOption]?

        public init(optionGroupOption: [OptionGroupOption]? = nil) {
            self.optionGroupOption = optionGroupOption
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroupOption = "OptionGroupOption"
        }
    }

    public struct DBClusterEndpointMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterEndpoints", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Contains the details of the endpoints associated with the cluster and matching any filter conditions.
        public let dBClusterEndpoints: DBClusterEndpointList?
        ///  An optional pagination token provided by a previous DescribeDBClusterEndpoints request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(dBClusterEndpoints: DBClusterEndpointList? = nil, marker: String? = nil) {
            self.dBClusterEndpoints = dBClusterEndpoints
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterEndpoints = "DBClusterEndpoints"
            case marker = "Marker"
        }
    }

    public struct DBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Contains a list of DB clusters for the user.
        public let dBClusters: DBClusterList?
        /// A pagination token that can be used in a subsequent DescribeDBClusters request.
        public let marker: String?

        public init(dBClusters: DBClusterList? = nil, marker: String? = nil) {
            self.dBClusters = dBClusters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusters = "DBClusters"
            case marker = "Marker"
        }
    }

    public struct ModifyOptionGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionsToInclude", required: false, type: .structure), 
            AWSShapeMember(label: "OptionsToRemove", required: false, type: .list), 
            AWSShapeMember(label: "OptionGroupName", required: true, type: .string), 
            AWSShapeMember(label: "ApplyImmediately", required: false, type: .boolean)
        ]
        /// Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
        public let optionsToInclude: OptionConfigurationList?
        /// Options in this list are removed from the option group.
        public let optionsToRemove: [String]?
        /// The name of the option group to be modified. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance
        public let optionGroupName: String
        /// Indicates whether the changes should be applied immediately, or during the next maintenance window for each instance associated with the option group.
        public let applyImmediately: Bool?

        public init(optionsToInclude: OptionConfigurationList? = nil, optionsToRemove: [String]? = nil, optionGroupName: String, applyImmediately: Bool? = nil) {
            self.optionsToInclude = optionsToInclude
            self.optionsToRemove = optionsToRemove
            self.optionGroupName = optionGroupName
            self.applyImmediately = applyImmediately
        }

        private enum CodingKeys: String, CodingKey {
            case optionsToInclude = "OptionsToInclude"
            case optionsToRemove = "OptionsToRemove"
            case optionGroupName = "OptionGroupName"
            case applyImmediately = "ApplyImmediately"
        }
    }

    public struct DBClusterParameterGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterParameterGroups", required: false, type: .structure)
        ]
        ///  An optional pagination token provided by a previous DescribeDBClusterParameterGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// A list of DB cluster parameter groups.
        public let dBClusterParameterGroups: DBClusterParameterGroupList?

        public init(marker: String? = nil, dBClusterParameterGroups: DBClusterParameterGroupList? = nil) {
            self.marker = marker
            self.dBClusterParameterGroups = dBClusterParameterGroups
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case dBClusterParameterGroups = "DBClusterParameterGroups"
        }
    }

    public struct StartDBClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .structure)
        ]
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct DBClusterSnapshotAttributesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshotAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "DBClusterSnapshotIdentifier", required: false, type: .string)
        ]
        /// The list of attributes and values for the manual DB cluster snapshot.
        public let dBClusterSnapshotAttributes: DBClusterSnapshotAttributeList?
        /// The identifier of the manual DB cluster snapshot that the attributes apply to.
        public let dBClusterSnapshotIdentifier: String?

        public init(dBClusterSnapshotAttributes: DBClusterSnapshotAttributeList? = nil, dBClusterSnapshotIdentifier: String? = nil) {
            self.dBClusterSnapshotAttributes = dBClusterSnapshotAttributes
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotAttributes = "DBClusterSnapshotAttributes"
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
        }
    }

    public struct DeleteDBInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "DeleteAutomatedBackups", required: false, type: .boolean), 
            AWSShapeMember(label: "FinalDBSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SkipFinalSnapshot", required: false, type: .boolean)
        ]
        /// The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive. Constraints:   Must match the name of an existing DB instance.  
        public let dBInstanceIdentifier: String
        /// A value that indicates whether to remove automated backups immediately after the DB instance is deleted. This parameter isn't case-sensitive. This parameter defaults to true.
        public let deleteAutomatedBackups: Bool?
        ///  The DBSnapshotIdentifier of the new DB snapshot created when SkipFinalSnapshot is set to false.   Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.  Constraints:   Must be 1 to 255 letters or numbers.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Can't be specified when deleting a Read Replica.  
        public let finalDBSnapshotIdentifier: String?
        ///  A value that indicates whether a final DB snapshot is created before the DB instance is deleted. If true is specified, no DB snapshot is created. If false is specified, a DB snapshot is created before the DB instance is deleted.  When a DB instance is in a failure state and has a status of failed, incompatible-restore, or incompatible-network, you can only delete it when the SkipFinalSnapshot parameter is set to true. Specify true when deleting a Read Replica.  The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is false.  Default: false 
        public let skipFinalSnapshot: Bool?

        public init(dBInstanceIdentifier: String, deleteAutomatedBackups: Bool? = nil, finalDBSnapshotIdentifier: String? = nil, skipFinalSnapshot: Bool? = nil) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.deleteAutomatedBackups = deleteAutomatedBackups
            self.finalDBSnapshotIdentifier = finalDBSnapshotIdentifier
            self.skipFinalSnapshot = skipFinalSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case deleteAutomatedBackups = "DeleteAutomatedBackups"
            case finalDBSnapshotIdentifier = "FinalDBSnapshotIdentifier"
            case skipFinalSnapshot = "SkipFinalSnapshot"
        }
    }

    public struct PendingMaintenanceActionDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PendingMaintenanceAction", required: false, type: .list)
        ]
        public let pendingMaintenanceAction: [PendingMaintenanceAction]?

        public init(pendingMaintenanceAction: [PendingMaintenanceAction]? = nil) {
            self.pendingMaintenanceAction = pendingMaintenanceAction
        }

        private enum CodingKeys: String, CodingKey {
            case pendingMaintenanceAction = "PendingMaintenanceAction"
        }
    }

    public struct DBClusterParameterGroupDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Provides a list of parameters for the DB cluster parameter group.
        public let parameters: ParametersList?
        ///  An optional pagination token provided by a previous DescribeDBClusterParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords . 
        public let marker: String?

        public init(parameters: ParametersList? = nil, marker: String? = nil) {
            self.parameters = parameters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case marker = "Marker"
        }
    }

    public struct GlobalClusterMemberList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GlobalClusterMember", required: false, type: .list)
        ]
        public let globalClusterMember: [GlobalClusterMember]?

        public init(globalClusterMember: [GlobalClusterMember]? = nil) {
            self.globalClusterMember = globalClusterMember
        }

        private enum CodingKeys: String, CodingKey {
            case globalClusterMember = "GlobalClusterMember"
        }
    }

    public struct StopDBInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct ReservedDBInstancesOfferingMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedDBInstancesOfferings", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A list of reserved DB instance offerings.
        public let reservedDBInstancesOfferings: ReservedDBInstancesOfferingList?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(reservedDBInstancesOfferings: ReservedDBInstancesOfferingList? = nil, marker: String? = nil) {
            self.reservedDBInstancesOfferings = reservedDBInstancesOfferings
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case reservedDBInstancesOfferings = "ReservedDBInstancesOfferings"
            case marker = "Marker"
        }
    }

    public struct DeleteGlobalClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GlobalClusterIdentifier", required: true, type: .string)
        ]
        ///  The cluster identifier of the global database cluster being deleted. 
        public let globalClusterIdentifier: String

        public init(globalClusterIdentifier: String) {
            self.globalClusterIdentifier = globalClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case globalClusterIdentifier = "GlobalClusterIdentifier"
        }
    }

    public struct ModifyDBSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSubnetGroupName", required: true, type: .string), 
            AWSShapeMember(label: "SubnetIds", required: true, type: .structure), 
            AWSShapeMember(label: "DBSubnetGroupDescription", required: false, type: .string)
        ]
        /// The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.  Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup 
        public let dBSubnetGroupName: String
        /// The EC2 subnet IDs for the DB subnet group.
        public let subnetIds: SubnetIdentifierList
        /// The description for the DB subnet group.
        public let dBSubnetGroupDescription: String?

        public init(dBSubnetGroupName: String, subnetIds: SubnetIdentifierList, dBSubnetGroupDescription: String? = nil) {
            self.dBSubnetGroupName = dBSubnetGroupName
            self.subnetIds = subnetIds
            self.dBSubnetGroupDescription = dBSubnetGroupDescription
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroupName = "DBSubnetGroupName"
            case subnetIds = "SubnetIds"
            case dBSubnetGroupDescription = "DBSubnetGroupDescription"
        }
    }

    public struct GlobalCluster: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "StorageEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "GlobalClusterArn", required: false, type: .string), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "GlobalClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DeletionProtection", required: false, type: .boolean), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "GlobalClusterResourceId", required: false, type: .string), 
            AWSShapeMember(label: "GlobalClusterMembers", required: false, type: .structure)
        ]
        /// Specifies the current state of this global database cluster.
        public let status: String?
        ///  The storage encryption setting for the global database cluster. 
        public let storageEncrypted: Bool?
        /// The Amazon Resource Name (ARN) for the global database cluster.
        public let globalClusterArn: String?
        ///  The Aurora database engine used by the global database cluster. 
        public let engine: String?
        ///  The default database name within the new global database cluster. 
        public let databaseName: String?
        ///  Contains a user-supplied global database cluster identifier. This identifier is the unique key that identifies a global database cluster. 
        public let globalClusterIdentifier: String?
        ///  The deletion protection setting for the new global database cluster. 
        public let deletionProtection: Bool?
        /// Indicates the database engine version.
        public let engineVersion: String?
        ///  The AWS Region-unique, immutable identifier for the global database cluster. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB cluster is accessed. 
        public let globalClusterResourceId: String?
        ///  The list of cluster IDs for secondary clusters within the global database cluster. Currently limited to 1 item. 
        public let globalClusterMembers: GlobalClusterMemberList?

        public init(status: String? = nil, storageEncrypted: Bool? = nil, globalClusterArn: String? = nil, engine: String? = nil, databaseName: String? = nil, globalClusterIdentifier: String? = nil, deletionProtection: Bool? = nil, engineVersion: String? = nil, globalClusterResourceId: String? = nil, globalClusterMembers: GlobalClusterMemberList? = nil) {
            self.status = status
            self.storageEncrypted = storageEncrypted
            self.globalClusterArn = globalClusterArn
            self.engine = engine
            self.databaseName = databaseName
            self.globalClusterIdentifier = globalClusterIdentifier
            self.deletionProtection = deletionProtection
            self.engineVersion = engineVersion
            self.globalClusterResourceId = globalClusterResourceId
            self.globalClusterMembers = globalClusterMembers
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case storageEncrypted = "StorageEncrypted"
            case globalClusterArn = "GlobalClusterArn"
            case engine = "Engine"
            case databaseName = "DatabaseName"
            case globalClusterIdentifier = "GlobalClusterIdentifier"
            case deletionProtection = "DeletionProtection"
            case engineVersion = "EngineVersion"
            case globalClusterResourceId = "GlobalClusterResourceId"
            case globalClusterMembers = "GlobalClusterMembers"
        }
    }

    public struct DBSecurityGroupMembership: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "DBSecurityGroupName", required: false, type: .string)
        ]
        /// The status of the DB security group.
        public let status: String?
        /// The name of the DB security group.
        public let dBSecurityGroupName: String?

        public init(status: String? = nil, dBSecurityGroupName: String? = nil) {
            self.status = status
            self.dBSecurityGroupName = dBSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case dBSecurityGroupName = "DBSecurityGroupName"
        }
    }

    public struct DBClusterParameterGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterParameterGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroupFamily", required: false, type: .string)
        ]
        /// Provides the name of the DB cluster parameter group.
        public let dBClusterParameterGroupName: String?
        /// Provides the customer-specified description for this DB cluster parameter group.
        public let description: String?
        /// The Amazon Resource Name (ARN) for the DB cluster parameter group.
        public let dBClusterParameterGroupArn: String?
        /// Provides the name of the DB parameter group family that this DB cluster parameter group is compatible with.
        public let dBParameterGroupFamily: String?

        public init(dBClusterParameterGroupName: String? = nil, description: String? = nil, dBClusterParameterGroupArn: String? = nil, dBParameterGroupFamily: String? = nil) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.description = description
            self.dBClusterParameterGroupArn = dBClusterParameterGroupArn
            self.dBParameterGroupFamily = dBParameterGroupFamily
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case description = "Description"
            case dBClusterParameterGroupArn = "DBClusterParameterGroupArn"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
        }
    }

    public struct CloudwatchLogsExportConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisableLogTypes", required: false, type: .list), 
            AWSShapeMember(label: "EnableLogTypes", required: false, type: .list)
        ]
        /// The list of log types to disable.
        public let disableLogTypes: [String]?
        /// The list of log types to enable.
        public let enableLogTypes: [String]?

        public init(disableLogTypes: [String]? = nil, enableLogTypes: [String]? = nil) {
            self.disableLogTypes = disableLogTypes
            self.enableLogTypes = enableLogTypes
        }

        private enum CodingKeys: String, CodingKey {
            case disableLogTypes = "DisableLogTypes"
            case enableLogTypes = "EnableLogTypes"
        }
    }

    public struct SubnetList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subnet", required: false, type: .list)
        ]
        public let subnet: [Subnet]?

        public init(subnet: [Subnet]? = nil) {
            self.subnet = subnet
        }

        private enum CodingKeys: String, CodingKey {
            case subnet = "Subnet"
        }
    }

    public struct AvailabilityZones: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .list)
        ]
        public let availabilityZone: [String]?

        public init(availabilityZone: [String]? = nil) {
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
        }
    }

    public struct EventCategoriesMap: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "EventCategories", required: false, type: .structure)
        ]
        /// The source type that the returned categories belong to
        public let sourceType: String?
        /// The event categories for the specified source type
        public let eventCategories: EventCategoriesList?

        public init(sourceType: String? = nil, eventCategories: EventCategoriesList? = nil) {
            self.sourceType = sourceType
            self.eventCategories = eventCategories
        }

        private enum CodingKeys: String, CodingKey {
            case sourceType = "SourceType"
            case eventCategories = "EventCategories"
        }
    }

    public struct OptionGroupOptionVersionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionVersion", required: false, type: .list)
        ]
        public let optionVersion: [OptionVersion]?

        public init(optionVersion: [OptionVersion]? = nil) {
            self.optionVersion = optionVersion
        }

        private enum CodingKeys: String, CodingKey {
            case optionVersion = "OptionVersion"
        }
    }

    public struct DescribeEngineDefaultClusterParametersResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EngineDefaults", required: false, type: .structure)
        ]
        public let engineDefaults: EngineDefaults?

        public init(engineDefaults: EngineDefaults? = nil) {
            self.engineDefaults = engineDefaults
        }

        private enum CodingKeys: String, CodingKey {
            case engineDefaults = "EngineDefaults"
        }
    }

    public struct ModifyDBSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshot", required: false, type: .structure)
        ]
        public let dBSnapshot: DBSnapshot?

        public init(dBSnapshot: DBSnapshot? = nil) {
            self.dBSnapshot = dBSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshot = "DBSnapshot"
        }
    }

    public struct ReadReplicaDBClusterIdentifierList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReadReplicaDBClusterIdentifier", required: false, type: .list)
        ]
        public let readReplicaDBClusterIdentifier: [String]?

        public init(readReplicaDBClusterIdentifier: [String]? = nil) {
            self.readReplicaDBClusterIdentifier = readReplicaDBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case readReplicaDBClusterIdentifier = "ReadReplicaDBClusterIdentifier"
        }
    }

    public struct DomainMembership: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IAMRoleName", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "FQDN", required: false, type: .string), 
            AWSShapeMember(label: "Domain", required: false, type: .string)
        ]
        /// The name of the IAM role to be used when making API calls to the Directory Service.
        public let iAMRoleName: String?
        /// The status of the DB instance's Active Directory Domain membership, such as joined, pending-join, failed etc).
        public let status: String?
        /// The fully qualified domain name of the Active Directory Domain.
        public let fqdn: String?
        /// The identifier of the Active Directory Domain.
        public let domain: String?

        public init(iAMRoleName: String? = nil, status: String? = nil, fqdn: String? = nil, domain: String? = nil) {
            self.iAMRoleName = iAMRoleName
            self.status = status
            self.fqdn = fqdn
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case iAMRoleName = "IAMRoleName"
            case status = "Status"
            case fqdn = "FQDN"
            case domain = "Domain"
        }
    }

    public struct DBSnapshotAttributesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "DBSnapshotIdentifier", required: false, type: .string)
        ]
        /// The list of attributes and values for the manual DB snapshot.
        public let dBSnapshotAttributes: DBSnapshotAttributeList?
        /// The identifier of the manual DB snapshot that the attributes apply to.
        public let dBSnapshotIdentifier: String?

        public init(dBSnapshotAttributes: DBSnapshotAttributeList? = nil, dBSnapshotIdentifier: String? = nil) {
            self.dBSnapshotAttributes = dBSnapshotAttributes
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotAttributes = "DBSnapshotAttributes"
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
        }
    }

    public struct ReservedDBInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrencyCode", required: false, type: .string), 
            AWSShapeMember(label: "ReservedDBInstancesOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "ReservedDBInstanceId", required: false, type: .string), 
            AWSShapeMember(label: "OfferingType", required: false, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "UsagePrice", required: false, type: .double), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "FixedPrice", required: false, type: .double), 
            AWSShapeMember(label: "State", required: false, type: .string), 
            AWSShapeMember(label: "RecurringCharges", required: false, type: .structure), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "DBInstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "ProductDescription", required: false, type: .string), 
            AWSShapeMember(label: "ReservedDBInstanceArn", required: false, type: .string)
        ]
        /// The currency code for the reserved DB instance.
        public let currencyCode: String?
        /// The offering identifier.
        public let reservedDBInstancesOfferingId: String?
        /// The unique identifier for the reservation.
        public let reservedDBInstanceId: String?
        /// The offering type of this reserved DB instance.
        public let offeringType: String?
        /// Indicates if the reservation applies to Multi-AZ deployments.
        public let multiAZ: Bool?
        /// The DB instance class for the reserved DB instance.
        public let dBInstanceClass: String?
        /// The hourly price charged for this reserved DB instance.
        public let usagePrice: Double?
        /// The time the reservation started.
        public let startTime: TimeStamp?
        /// The fixed price charged for this reserved DB instance.
        public let fixedPrice: Double?
        /// The state of the reserved DB instance.
        public let state: String?
        /// The recurring price charged to run this reserved DB instance.
        public let recurringCharges: RecurringChargeList?
        /// The duration of the reservation in seconds.
        public let duration: Int32?
        /// The number of reserved DB instances.
        public let dBInstanceCount: Int32?
        /// The description of the reserved DB instance.
        public let productDescription: String?
        /// The Amazon Resource Name (ARN) for the reserved DB instance.
        public let reservedDBInstanceArn: String?

        public init(currencyCode: String? = nil, reservedDBInstancesOfferingId: String? = nil, reservedDBInstanceId: String? = nil, offeringType: String? = nil, multiAZ: Bool? = nil, dBInstanceClass: String? = nil, usagePrice: Double? = nil, startTime: TimeStamp? = nil, fixedPrice: Double? = nil, state: String? = nil, recurringCharges: RecurringChargeList? = nil, duration: Int32? = nil, dBInstanceCount: Int32? = nil, productDescription: String? = nil, reservedDBInstanceArn: String? = nil) {
            self.currencyCode = currencyCode
            self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
            self.reservedDBInstanceId = reservedDBInstanceId
            self.offeringType = offeringType
            self.multiAZ = multiAZ
            self.dBInstanceClass = dBInstanceClass
            self.usagePrice = usagePrice
            self.startTime = startTime
            self.fixedPrice = fixedPrice
            self.state = state
            self.recurringCharges = recurringCharges
            self.duration = duration
            self.dBInstanceCount = dBInstanceCount
            self.productDescription = productDescription
            self.reservedDBInstanceArn = reservedDBInstanceArn
        }

        private enum CodingKeys: String, CodingKey {
            case currencyCode = "CurrencyCode"
            case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
            case reservedDBInstanceId = "ReservedDBInstanceId"
            case offeringType = "OfferingType"
            case multiAZ = "MultiAZ"
            case dBInstanceClass = "DBInstanceClass"
            case usagePrice = "UsagePrice"
            case startTime = "StartTime"
            case fixedPrice = "FixedPrice"
            case state = "State"
            case recurringCharges = "RecurringCharges"
            case duration = "Duration"
            case dBInstanceCount = "DBInstanceCount"
            case productDescription = "ProductDescription"
            case reservedDBInstanceArn = "ReservedDBInstanceArn"
        }
    }

    public struct DeleteDBSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshot", required: false, type: .structure)
        ]
        public let dBSnapshot: DBSnapshot?

        public init(dBSnapshot: DBSnapshot? = nil) {
            self.dBSnapshot = dBSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshot = "DBSnapshot"
        }
    }

    public struct CharacterSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CharacterSetName", required: false, type: .string), 
            AWSShapeMember(label: "CharacterSetDescription", required: false, type: .string)
        ]
        /// The name of the character set.
        public let characterSetName: String?
        /// The description of the character set.
        public let characterSetDescription: String?

        public init(characterSetName: String? = nil, characterSetDescription: String? = nil) {
            self.characterSetName = characterSetName
            self.characterSetDescription = characterSetDescription
        }

        private enum CodingKeys: String, CodingKey {
            case characterSetName = "CharacterSetName"
            case characterSetDescription = "CharacterSetDescription"
        }
    }

    public struct BacktrackDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BacktrackTo", required: true, type: .timestamp), 
            AWSShapeMember(label: "UseEarliestTimeOnPointInTimeUnavailable", required: false, type: .boolean), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Force", required: false, type: .boolean)
        ]
        /// The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the ISO8601 Wikipedia page.   If the specified time is not a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.  Constraints:   Must contain a valid ISO 8601 timestamp.   Can't contain a timestamp set in the future.   Example: 2017-07-08T18:00Z 
        public let backtrackTo: TimeStamp
        /// If BacktrackTo is set to a timestamp earlier than the earliest backtrack time, this value backtracks the DB cluster to the earliest possible backtrack time. Otherwise, an error occurs.
        public let useEarliestTimeOnPointInTimeUnavailable: Bool?
        /// The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example: my-cluster1 
        public let dBClusterIdentifier: String
        /// A value that, if specified, forces the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
        public let force: Bool?

        public init(backtrackTo: TimeStamp, useEarliestTimeOnPointInTimeUnavailable: Bool? = nil, dBClusterIdentifier: String, force: Bool? = nil) {
            self.backtrackTo = backtrackTo
            self.useEarliestTimeOnPointInTimeUnavailable = useEarliestTimeOnPointInTimeUnavailable
            self.dBClusterIdentifier = dBClusterIdentifier
            self.force = force
        }

        private enum CodingKeys: String, CodingKey {
            case backtrackTo = "BacktrackTo"
            case useEarliestTimeOnPointInTimeUnavailable = "UseEarliestTimeOnPointInTimeUnavailable"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case force = "Force"
        }
    }

    public struct RestoreDBInstanceToPointInTimeMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetDBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "EnableCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "SourceDbiResourceId", required: false, type: .string), 
            AWSShapeMember(label: "DomainIAMRoleName", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "UseDefaultProcessorFeatures", required: false, type: .boolean), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "DeletionProtection", required: false, type: .boolean), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "TdeCredentialArn", required: false, type: .string), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "DBParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "DBName", required: false, type: .string), 
            AWSShapeMember(label: "CopyTagsToSnapshot", required: false, type: .boolean), 
            AWSShapeMember(label: "TdeCredentialPassword", required: false, type: .string), 
            AWSShapeMember(label: "RestoreTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SourceDBInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "UseLatestRestorableTime", required: false, type: .boolean), 
            AWSShapeMember(label: "Domain", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "ProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "Iops", required: false, type: .integer)
        ]
        /// The name of the new DB instance to be created. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens  
        public let targetDBInstanceIdentifier: String
        /// The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon RDS User Guide.
        public let enableCloudwatchLogsExports: [String]?
        /// The resource ID of the source DB instance from which to restore.
        public let sourceDbiResourceId: String?
        /// Specify the name of the IAM role to be used when making API calls to the Directory Service.
        public let domainIAMRoleName: String?
        /// The name of the option group to be used for the restored DB instance. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance
        public let optionGroupName: String?
        /// The port number on which the database accepts connections. Constraints: Value must be 1150-65535  Default: The same port as the original DB instance.
        public let port: Int32?
        /// A value that specifies that the DB instance class of the DB instance uses its default processor features.
        public let useDefaultProcessorFeatures: Bool?
        /// The compute and memory capacity of the Amazon RDS DB instance, for example, db.m4.large. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class in the Amazon RDS User Guide.  Default: The same DBInstanceClass as the original DB instance.
        public let dBInstanceClass: String?
        /// Indicates if the DB instance should have deletion protection enabled. The database can't be deleted when this value is set to true. The default is false. For more information, see  Deleting a DB Instance. 
        public let deletionProtection: Bool?
        /// The EC2 Availability Zone that the DB instance is created in. Default: A random, system-chosen Availability Zone. Constraint: You can't specify the AvailabilityZone parameter if the MultiAZ parameter is set to true. Example: us-east-1a 
        public let availabilityZone: String?
        /// License model information for the restored DB instance. Default: Same as source.  Valid values: license-included | bring-your-own-license | general-public-license 
        public let licenseModel: String?
        /// Specifies the storage type to be associated with the DB instance.  Valid values: standard | gp2 | io1   If you specify io1, you must also include a value for the Iops parameter.   Default: io1 if the Iops parameter is specified, otherwise standard 
        public let storageType: String?
        /// The ARN from the key store with which to associate the instance for TDE encryption.
        public let tdeCredentialArn: String?
        /// The DB subnet group name to use for the new instance. Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup 
        public let dBSubnetGroupName: String?
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. You can enable IAM database authentication for the following database engines   For MySQL 5.6, minor version 5.6.34 or higher   For MySQL 5.7, minor version 5.7.16 or higher   Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// Specifies if the DB instance is a Multi-AZ deployment. Constraint: You can't specify the AvailabilityZone parameter if the MultiAZ parameter is set to true.
        public let multiAZ: Bool?
        /// The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used. Constraints:   If supplied, must match the name of an existing DBParameterGroup.   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.  
        public let dBParameterGroupName: String?
        /// The database name for the restored DB instance.  This parameter is not used for the MySQL or MariaDB engines. 
        public let dBName: String?
        /// True to copy all tags from the restored DB instance to snapshots of the DB instance, and otherwise false. The default is false.
        public let copyTagsToSnapshot: Bool?
        /// The password for the given ARN from the key store in order to access the device.
        public let tdeCredentialPassword: String?
        /// The date and time to restore from. Valid Values: Value must be a time in Universal Coordinated Time (UTC) format Constraints:   Must be before the latest restorable time for the DB instance   Can't be specified if UseLatestRestorableTime parameter is true   Example: 2009-09-07T23:45:00Z 
        public let restoreTime: TimeStamp?
        /// The identifier of the source DB instance from which to restore. Constraints:   Must match the identifier of an existing DB instance.  
        public let sourceDBInstanceIdentifier: String?
        /// The database engine to use for the new instance. Default: The same as source Constraint: Must be compatible with the engine of the source Valid Values:    mariadb     mysql     oracle-ee     oracle-se2     oracle-se1     oracle-se     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web   
        public let engine: String?
        /// Specifies the accessibility options for the DB instance. A value of true specifies an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. A value of false specifies an internal instance with a DNS name that resolves to a private IP address. For more information, see CreateDBInstance.
        public let publiclyAccessible: Bool?
        public let tags: TagList?
        ///  Specifies whether (true) or not (false) the DB instance is restored from the latest backup time.  Default: false  Constraints: Can't be specified if RestoreTime parameter is provided.
        public let useLatestRestorableTime: Bool?
        /// Specify the Active Directory Domain to restore the instance in.
        public let domain: String?
        ///  A list of EC2 VPC security groups to associate with this DB instance.   Default: The default EC2 VPC security group for the DB subnet group's VPC. 
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window.
        public let autoMinorVersionUpgrade: Bool?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        public let processorFeatures: ProcessorFeatureList?
        /// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. Constraints: Must be an integer greater than 1000.  SQL Server  Setting the IOPS value for the SQL Server database engine is not supported.
        public let iops: Int32?

        public init(targetDBInstanceIdentifier: String, enableCloudwatchLogsExports: [String]? = nil, sourceDbiResourceId: String? = nil, domainIAMRoleName: String? = nil, optionGroupName: String? = nil, port: Int32? = nil, useDefaultProcessorFeatures: Bool? = nil, dBInstanceClass: String? = nil, deletionProtection: Bool? = nil, availabilityZone: String? = nil, licenseModel: String? = nil, storageType: String? = nil, tdeCredentialArn: String? = nil, dBSubnetGroupName: String? = nil, enableIAMDatabaseAuthentication: Bool? = nil, multiAZ: Bool? = nil, dBParameterGroupName: String? = nil, dBName: String? = nil, copyTagsToSnapshot: Bool? = nil, tdeCredentialPassword: String? = nil, restoreTime: TimeStamp? = nil, sourceDBInstanceIdentifier: String? = nil, engine: String? = nil, publiclyAccessible: Bool? = nil, tags: TagList? = nil, useLatestRestorableTime: Bool? = nil, domain: String? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, autoMinorVersionUpgrade: Bool? = nil, processorFeatures: ProcessorFeatureList? = nil, iops: Int32? = nil) {
            self.targetDBInstanceIdentifier = targetDBInstanceIdentifier
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.sourceDbiResourceId = sourceDbiResourceId
            self.domainIAMRoleName = domainIAMRoleName
            self.optionGroupName = optionGroupName
            self.port = port
            self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
            self.dBInstanceClass = dBInstanceClass
            self.deletionProtection = deletionProtection
            self.availabilityZone = availabilityZone
            self.licenseModel = licenseModel
            self.storageType = storageType
            self.tdeCredentialArn = tdeCredentialArn
            self.dBSubnetGroupName = dBSubnetGroupName
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.multiAZ = multiAZ
            self.dBParameterGroupName = dBParameterGroupName
            self.dBName = dBName
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.tdeCredentialPassword = tdeCredentialPassword
            self.restoreTime = restoreTime
            self.sourceDBInstanceIdentifier = sourceDBInstanceIdentifier
            self.engine = engine
            self.publiclyAccessible = publiclyAccessible
            self.tags = tags
            self.useLatestRestorableTime = useLatestRestorableTime
            self.domain = domain
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.processorFeatures = processorFeatures
            self.iops = iops
        }

        private enum CodingKeys: String, CodingKey {
            case targetDBInstanceIdentifier = "TargetDBInstanceIdentifier"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case sourceDbiResourceId = "SourceDbiResourceId"
            case domainIAMRoleName = "DomainIAMRoleName"
            case optionGroupName = "OptionGroupName"
            case port = "Port"
            case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
            case dBInstanceClass = "DBInstanceClass"
            case deletionProtection = "DeletionProtection"
            case availabilityZone = "AvailabilityZone"
            case licenseModel = "LicenseModel"
            case storageType = "StorageType"
            case tdeCredentialArn = "TdeCredentialArn"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case multiAZ = "MultiAZ"
            case dBParameterGroupName = "DBParameterGroupName"
            case dBName = "DBName"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case tdeCredentialPassword = "TdeCredentialPassword"
            case restoreTime = "RestoreTime"
            case sourceDBInstanceIdentifier = "SourceDBInstanceIdentifier"
            case engine = "Engine"
            case publiclyAccessible = "PubliclyAccessible"
            case tags = "Tags"
            case useLatestRestorableTime = "UseLatestRestorableTime"
            case domain = "Domain"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case processorFeatures = "ProcessorFeatures"
            case iops = "Iops"
        }
    }

    public struct DeleteOptionGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroupName", required: true, type: .string)
        ]
        /// The name of the option group to be deleted.  You can't delete default option groups. 
        public let optionGroupName: String

        public init(optionGroupName: String) {
            self.optionGroupName = optionGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroupName = "OptionGroupName"
        }
    }

    public struct DBParameterGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroupFamily", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroupArn", required: false, type: .string)
        ]
        /// Provides the name of the DB parameter group.
        public let dBParameterGroupName: String?
        /// Provides the customer-specified description for this DB parameter group.
        public let description: String?
        /// Provides the name of the DB parameter group family that this DB parameter group is compatible with.
        public let dBParameterGroupFamily: String?
        /// The Amazon Resource Name (ARN) for the DB parameter group.
        public let dBParameterGroupArn: String?

        public init(dBParameterGroupName: String? = nil, description: String? = nil, dBParameterGroupFamily: String? = nil, dBParameterGroupArn: String? = nil) {
            self.dBParameterGroupName = dBParameterGroupName
            self.description = description
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.dBParameterGroupArn = dBParameterGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
            case description = "Description"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case dBParameterGroupArn = "DBParameterGroupArn"
        }
    }

    public struct DBInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstances", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  A list of DBInstance instances. 
        public let dBInstances: DBInstanceList?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords . 
        public let marker: String?

        public init(dBInstances: DBInstanceList? = nil, marker: String? = nil) {
            self.dBInstances = dBInstances
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstances = "DBInstances"
            case marker = "Marker"
        }
    }

    public struct DescribeEventSubscriptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionName", required: false, type: .string)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords . 
        public let marker: String?
        /// The name of the RDS event notification subscription you want to describe.
        public let subscriptionName: String?

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, marker: String? = nil, subscriptionName: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct ModifyDBParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Parameters", required: true, type: .structure)
        ]
        /// The name of the DB parameter group. Constraints:   If supplied, must match the name of an existing DBParameterGroup.  
        public let dBParameterGroupName: String
        /// An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request. Valid Values (for the application method): immediate | pending-reboot   You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover. 
        public let parameters: ParametersList

        public init(dBParameterGroupName: String, parameters: ParametersList) {
            self.dBParameterGroupName = dBParameterGroupName
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
            case parameters = "Parameters"
        }
    }

    public struct DescribeDBEngineVersionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroupFamily", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ListSupportedTimezones", required: false, type: .boolean), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "ListSupportedCharacterSets", required: false, type: .boolean), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "DefaultOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// The name of a specific DB parameter group family to return details for. Constraints:   If supplied, must match an existing DBParameterGroupFamily.  
        public let dBParameterGroupFamily: String?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// If this parameter is specified and the requested engine supports the TimeZone parameter for CreateDBInstance, the response includes a list of supported time zones for each engine version. 
        public let listSupportedTimezones: Bool?
        /// The database engine to return.
        public let engine: String?
        /// If this parameter is specified and the requested engine supports the CharacterSetName parameter for CreateDBInstance, the response includes a list of supported character sets for each engine version. 
        public let listSupportedCharacterSets: Bool?
        /// The database engine version to return. Example: 5.1.49 
        public let engineVersion: String?
        /// Indicates that only the default version of the specified engine or engine and major version combination is returned.
        public let defaultOnly: Bool?
        ///  The maximum number of records to include in the response. If more than the MaxRecords value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(dBParameterGroupFamily: String? = nil, filters: FilterList? = nil, marker: String? = nil, listSupportedTimezones: Bool? = nil, engine: String? = nil, listSupportedCharacterSets: Bool? = nil, engineVersion: String? = nil, defaultOnly: Bool? = nil, maxRecords: Int32? = nil) {
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.filters = filters
            self.marker = marker
            self.listSupportedTimezones = listSupportedTimezones
            self.engine = engine
            self.listSupportedCharacterSets = listSupportedCharacterSets
            self.engineVersion = engineVersion
            self.defaultOnly = defaultOnly
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case filters = "Filters"
            case marker = "Marker"
            case listSupportedTimezones = "ListSupportedTimezones"
            case engine = "Engine"
            case listSupportedCharacterSets = "ListSupportedCharacterSets"
            case engineVersion = "EngineVersion"
            case defaultOnly = "DefaultOnly"
            case maxRecords = "MaxRecords"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// A key is the required name of the tag. The string value can be from 1 to 128 Unicode characters in length and can't be prefixed with "aws:" or "rds:". The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public let key: String?
        /// A value is the optional value of the tag. The string value can be from 1 to 256 Unicode characters in length and can't be prefixed with "aws:" or "rds:". The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct AuthorizeDBSecurityGroupIngressMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EC2SecurityGroupName", required: false, type: .string), 
            AWSShapeMember(label: "DBSecurityGroupName", required: true, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupId", required: false, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupOwnerId", required: false, type: .string), 
            AWSShapeMember(label: "CIDRIP", required: false, type: .string)
        ]
        ///  Name of the EC2 security group to authorize. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided. 
        public let eC2SecurityGroupName: String?
        /// The name of the DB security group to add authorization to.
        public let dBSecurityGroupName: String
        ///  Id of the EC2 security group to authorize. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided. 
        public let eC2SecurityGroupId: String?
        ///  AWS account number of the owner of the EC2 security group specified in the EC2SecurityGroupName parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided. 
        public let eC2SecurityGroupOwnerId: String?
        /// The IP range to authorize.
        public let cidrip: String?

        public init(eC2SecurityGroupName: String? = nil, dBSecurityGroupName: String, eC2SecurityGroupId: String? = nil, eC2SecurityGroupOwnerId: String? = nil, cidrip: String? = nil) {
            self.eC2SecurityGroupName = eC2SecurityGroupName
            self.dBSecurityGroupName = dBSecurityGroupName
            self.eC2SecurityGroupId = eC2SecurityGroupId
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.cidrip = cidrip
        }

        private enum CodingKeys: String, CodingKey {
            case eC2SecurityGroupName = "EC2SecurityGroupName"
            case dBSecurityGroupName = "DBSecurityGroupName"
            case eC2SecurityGroupId = "EC2SecurityGroupId"
            case eC2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
            case cidrip = "CIDRIP"
        }
    }

    public struct EventList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Event", required: false, type: .list)
        ]
        public let event: [Event]?

        public init(event: [Event]? = nil) {
            self.event = event
        }

        private enum CodingKeys: String, CodingKey {
            case event = "Event"
        }
    }

    public struct DeleteDBClusterParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterParameterGroupName", required: true, type: .string)
        ]
        /// The name of the DB cluster parameter group. Constraints:   Must be the name of an existing DB cluster parameter group.   You can't delete a default DB cluster parameter group.   Can't be associated with any DB clusters.  
        public let dBClusterParameterGroupName: String

        public init(dBClusterParameterGroupName: String) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
        }
    }

    public struct OptionGroupMembership: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string)
        ]
        /// The status of the DB instance's option group membership. Valid values are: in-sync, pending-apply, pending-removal, pending-maintenance-apply, pending-maintenance-removal, applying, removing, and failed. 
        public let status: String?
        /// The name of the option group that the instance belongs to.
        public let optionGroupName: String?

        public init(status: String? = nil, optionGroupName: String? = nil) {
            self.status = status
            self.optionGroupName = optionGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case optionGroupName = "OptionGroupName"
        }
    }

    public struct DBSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshots", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  A list of DBSnapshot instances. 
        public let dBSnapshots: DBSnapshotList?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(dBSnapshots: DBSnapshotList? = nil, marker: String? = nil) {
            self.dBSnapshots = dBSnapshots
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshots = "DBSnapshots"
            case marker = "Marker"
        }
    }

    public struct ModifyDBSubnetGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSubnetGroup", required: false, type: .structure)
        ]
        public let dBSubnetGroup: DBSubnetGroup?

        public init(dBSubnetGroup: DBSubnetGroup? = nil) {
            self.dBSubnetGroup = dBSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroup = "DBSubnetGroup"
        }
    }

    public struct DBClusterSnapshotAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeValues", required: false, type: .structure), 
            AWSShapeMember(label: "AttributeName", required: false, type: .string)
        ]
        /// The value(s) for the manual DB cluster snapshot attribute. If the AttributeName field is set to restore, then this element returns a list of IDs of the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If a value of all is in the list, then the manual DB cluster snapshot is public and available for any AWS account to copy or restore.
        public let attributeValues: AttributeValueList?
        /// The name of the manual DB cluster snapshot attribute. The attribute named restore refers to the list of AWS accounts that have permission to copy or restore the manual DB cluster snapshot. For more information, see the ModifyDBClusterSnapshotAttribute API action.
        public let attributeName: String?

        public init(attributeValues: AttributeValueList? = nil, attributeName: String? = nil) {
            self.attributeValues = attributeValues
            self.attributeName = attributeName
        }

        private enum CodingKeys: String, CodingKey {
            case attributeValues = "AttributeValues"
            case attributeName = "AttributeName"
        }
    }

    public struct DeleteDBSecurityGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSecurityGroupName", required: true, type: .string)
        ]
        /// The name of the DB security group to delete.  You can't delete the default DB security group.  Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Must not be "Default"  
        public let dBSecurityGroupName: String

        public init(dBSecurityGroupName: String) {
            self.dBSecurityGroupName = dBSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroupName = "DBSecurityGroupName"
        }
    }

    public struct DBInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBName", required: false, type: .string), 
            AWSShapeMember(label: "CopyTagsToSnapshot", required: false, type: .boolean), 
            AWSShapeMember(label: "ListenerEndpoint", required: false, type: .structure), 
            AWSShapeMember(label: "DbiResourceId", required: false, type: .string), 
            AWSShapeMember(label: "StatusInfos", required: false, type: .structure), 
            AWSShapeMember(label: "ReadReplicaDBClusterIdentifiers", required: false, type: .structure), 
            AWSShapeMember(label: "DBSecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "ProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DomainMemberships", required: false, type: .structure), 
            AWSShapeMember(label: "DBInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "InstanceCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "PerformanceInsightsKMSKeyId", required: false, type: .string), 
            AWSShapeMember(label: "PendingModifiedValues", required: false, type: .structure), 
            AWSShapeMember(label: "Timezone", required: false, type: .string), 
            AWSShapeMember(label: "CACertificateIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "CharacterSetName", required: false, type: .string), 
            AWSShapeMember(label: "StorageEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "PerformanceInsightsEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "MonitoringInterval", required: false, type: .integer), 
            AWSShapeMember(label: "DBSubnetGroup", required: false, type: .structure), 
            AWSShapeMember(label: "TdeCredentialArn", required: false, type: .string), 
            AWSShapeMember(label: "SecondaryAvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "ReadReplicaDBInstanceIdentifiers", required: false, type: .structure), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "IAMDatabaseAuthenticationEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "EnabledCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "DBClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DbInstancePort", required: false, type: .integer), 
            AWSShapeMember(label: "OptionGroupMemberships", required: false, type: .structure), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroups", required: false, type: .structure), 
            AWSShapeMember(label: "DBInstanceStatus", required: false, type: .string), 
            AWSShapeMember(label: "PerformanceInsightsRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "PreferredBackupWindow", required: false, type: .string), 
            AWSShapeMember(label: "ReadReplicaSourceDBInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "MonitoringRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "LatestRestorableTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "MasterUsername", required: false, type: .string), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "PromotionTier", required: false, type: .integer), 
            AWSShapeMember(label: "DeletionProtection", required: false, type: .boolean), 
            AWSShapeMember(label: "Endpoint", required: false, type: .structure), 
            AWSShapeMember(label: "EnhancedMonitoringResourceArn", required: false, type: .string)
        ]
        /// The meaning of this parameter differs according to the database engine you use. For example, this value returns MySQL, MariaDB, or PostgreSQL information when returning values from CreateDBInstanceReadReplica since Read Replicas are only supported for these engines.  MySQL, MariaDB, SQL Server, PostgreSQL  Contains the name of the initial database of this instance that was provided at create time, if one was specified when the DB instance was created. This same name is returned for the life of the DB instance. Type: String  Oracle  Contains the Oracle System ID (SID) of the created DB instance. Not shown when the returned parameters do not apply to an Oracle DB instance.
        public let dBName: String?
        /// Specifies whether tags are copied from the DB instance to snapshots of the DB instance.
        public let copyTagsToSnapshot: Bool?
        /// Specifies the listener connection endpoint for SQL Server Always On.
        public let listenerEndpoint: Endpoint?
        /// The AWS Region-unique, immutable identifier for the DB instance. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB instance is accessed.
        public let dbiResourceId: String?
        /// The status of a Read Replica. If the instance is not a Read Replica, this is blank.
        public let statusInfos: DBInstanceStatusInfoList?
        /// Contains one or more identifiers of Aurora DB clusters to which the RDS DB instance is replicated as a Read Replica. For example, when you create an Aurora Read Replica of an RDS MySQL DB instance, the Aurora MySQL DB cluster for the Aurora Read Replica is shown. This output does not contain information about cross region Aurora Read Replicas.
        public let readReplicaDBClusterIdentifiers: ReadReplicaDBClusterIdentifierList?
        ///  Provides List of DB security group elements containing only DBSecurityGroup.Name and DBSecurityGroup.Status subelements. 
        public let dBSecurityGroups: DBSecurityGroupMembershipList?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        public let processorFeatures: ProcessorFeatureList?
        /// Contains a user-supplied database identifier. This identifier is the unique key that identifies a DB instance.
        public let dBInstanceIdentifier: String?
        /// The Active Directory Domain membership records associated with the DB instance.
        public let domainMemberships: DomainMembershipList?
        /// The Amazon Resource Name (ARN) for the DB instance.
        public let dBInstanceArn: String?
        /// Provides the date and time the DB instance was created.
        public let instanceCreateTime: TimeStamp?
        /// Contains the name of the compute and memory capacity class of the DB instance.
        public let dBInstanceClass: String?
        /// The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
        public let performanceInsightsKMSKeyId: String?
        /// Specifies that changes to the DB instance are pending. This element is only included when changes are pending. Specific changes are identified by subelements.
        public let pendingModifiedValues: PendingModifiedValues?
        /// The time zone of the DB instance. In most cases, the Timezone element is empty. Timezone content appears only for Microsoft SQL Server DB instances that were created with a time zone specified. 
        public let timezone: String?
        /// The identifier of the CA certificate for this DB instance.
        public let cACertificateIdentifier: String?
        /// If present, specifies the name of the character set that this instance is associated with.
        public let characterSetName: String?
        /// Specifies whether the DB instance is encrypted.
        public let storageEncrypted: Bool?
        /// True if Performance Insights is enabled for the DB instance, and otherwise false.
        public let performanceInsightsEnabled: Bool?
        /// Specifies the storage type associated with DB instance.
        public let storageType: String?
        /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.
        public let monitoringInterval: Int32?
        /// Specifies information on the subnet group associated with the DB instance, including the name, description, and subnets in the subnet group.
        public let dBSubnetGroup: DBSubnetGroup?
        /// The ARN from the key store with which the instance is associated for TDE encryption.
        public let tdeCredentialArn: String?
        /// If present, specifies the name of the secondary Availability Zone for a DB instance with multi-AZ support.
        public let secondaryAvailabilityZone: String?
        /// Indicates that minor version patches are applied automatically.
        public let autoMinorVersionUpgrade: Bool?
        /// Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        public let preferredMaintenanceWindow: String?
        /// Specifies the number of days for which automatic DB snapshots are retained.
        public let backupRetentionPeriod: Int32?
        /// Contains one or more identifiers of the Read Replicas associated with this DB instance.
        public let readReplicaDBInstanceIdentifiers: ReadReplicaDBInstanceIdentifierList?
        /// Indicates the database engine version.
        public let engineVersion: String?
        /// Specifies the allocated storage size specified in gibibytes.
        public let allocatedStorage: Int32?
        /// True if mapping of AWS Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false. IAM database authentication can be enabled for the following database engines   For MySQL 5.6, minor version 5.6.34 or higher   For MySQL 5.7, minor version 5.7.16 or higher   Aurora 5.6 or higher. To enable IAM database authentication for Aurora, see DBCluster Type.  
        public let iAMDatabaseAuthenticationEnabled: Bool?
        /// Provides the name of the database engine to be used for this DB instance.
        public let engine: String?
        /// A list of log types that this DB instance is configured to export to CloudWatch Logs. Log types vary by DB engine. For information about the log types for each DB engine, see Amazon RDS Database Log Files in the Amazon RDS User Guide. 
        public let enabledCloudwatchLogsExports: [String]?
        /// Specifies the accessibility options for the DB instance. A value of true specifies an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. A value of false specifies an internal instance with a DNS name that resolves to a private IP address.
        public let publiclyAccessible: Bool?
        /// If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of.
        public let dBClusterIdentifier: String?
        /// Specifies the port that the DB instance listens on. If the DB instance is part of a DB cluster, this can be a different port than the DB cluster port.
        public let dbInstancePort: Int32?
        /// Provides the list of option group memberships for this DB instance.
        public let optionGroupMemberships: OptionGroupMembershipList?
        /// Specifies the name of the Availability Zone the DB instance is located in.
        public let availabilityZone: String?
        /// Provides the list of DB parameter groups applied to this DB instance.
        public let dBParameterGroups: DBParameterGroupStatusList?
        /// Specifies the current state of this database.
        public let dBInstanceStatus: String?
        /// The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
        public let performanceInsightsRetentionPeriod: Int32?
        ///  Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod. 
        public let preferredBackupWindow: String?
        /// Contains the identifier of the source DB instance if this DB instance is a Read Replica.
        public let readReplicaSourceDBInstanceIdentifier: String?
        /// Provides a list of VPC security group elements that the DB instance belongs to.
        public let vpcSecurityGroups: VpcSecurityGroupMembershipList?
        /// The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.
        public let monitoringRoleArn: String?
        ///  If StorageEncrypted is true, the AWS KMS key identifier for the encrypted DB instance. 
        public let kmsKeyId: String?
        /// Specifies the latest time to which a database can be restored with point-in-time restore.
        public let latestRestorableTime: TimeStamp?
        /// Contains the master username for the DB instance.
        public let masterUsername: String?
        /// Specifies the Provisioned IOPS (I/O operations per second) value.
        public let iops: Int32?
        /// License model information for this DB instance.
        public let licenseModel: String?
        /// Specifies if the DB instance is a Multi-AZ deployment.
        public let multiAZ: Bool?
        /// A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see  Fault Tolerance for an Aurora DB Cluster in the Amazon Aurora User Guide. 
        public let promotionTier: Int32?
        /// Indicates if the DB instance has deletion protection enabled. The database can't be deleted when this value is set to true. For more information, see  Deleting a DB Instance. 
        public let deletionProtection: Bool?
        /// Specifies the connection endpoint.
        public let endpoint: Endpoint?
        /// The Amazon Resource Name (ARN) of the Amazon CloudWatch Logs log stream that receives the Enhanced Monitoring metrics data for the DB instance.
        public let enhancedMonitoringResourceArn: String?

        public init(dBName: String? = nil, copyTagsToSnapshot: Bool? = nil, listenerEndpoint: Endpoint? = nil, dbiResourceId: String? = nil, statusInfos: DBInstanceStatusInfoList? = nil, readReplicaDBClusterIdentifiers: ReadReplicaDBClusterIdentifierList? = nil, dBSecurityGroups: DBSecurityGroupMembershipList? = nil, processorFeatures: ProcessorFeatureList? = nil, dBInstanceIdentifier: String? = nil, domainMemberships: DomainMembershipList? = nil, dBInstanceArn: String? = nil, instanceCreateTime: TimeStamp? = nil, dBInstanceClass: String? = nil, performanceInsightsKMSKeyId: String? = nil, pendingModifiedValues: PendingModifiedValues? = nil, timezone: String? = nil, cACertificateIdentifier: String? = nil, characterSetName: String? = nil, storageEncrypted: Bool? = nil, performanceInsightsEnabled: Bool? = nil, storageType: String? = nil, monitoringInterval: Int32? = nil, dBSubnetGroup: DBSubnetGroup? = nil, tdeCredentialArn: String? = nil, secondaryAvailabilityZone: String? = nil, autoMinorVersionUpgrade: Bool? = nil, preferredMaintenanceWindow: String? = nil, backupRetentionPeriod: Int32? = nil, readReplicaDBInstanceIdentifiers: ReadReplicaDBInstanceIdentifierList? = nil, engineVersion: String? = nil, allocatedStorage: Int32? = nil, iAMDatabaseAuthenticationEnabled: Bool? = nil, engine: String? = nil, enabledCloudwatchLogsExports: [String]? = nil, publiclyAccessible: Bool? = nil, dBClusterIdentifier: String? = nil, dbInstancePort: Int32? = nil, optionGroupMemberships: OptionGroupMembershipList? = nil, availabilityZone: String? = nil, dBParameterGroups: DBParameterGroupStatusList? = nil, dBInstanceStatus: String? = nil, performanceInsightsRetentionPeriod: Int32? = nil, preferredBackupWindow: String? = nil, readReplicaSourceDBInstanceIdentifier: String? = nil, vpcSecurityGroups: VpcSecurityGroupMembershipList? = nil, monitoringRoleArn: String? = nil, kmsKeyId: String? = nil, latestRestorableTime: TimeStamp? = nil, masterUsername: String? = nil, iops: Int32? = nil, licenseModel: String? = nil, multiAZ: Bool? = nil, promotionTier: Int32? = nil, deletionProtection: Bool? = nil, endpoint: Endpoint? = nil, enhancedMonitoringResourceArn: String? = nil) {
            self.dBName = dBName
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.listenerEndpoint = listenerEndpoint
            self.dbiResourceId = dbiResourceId
            self.statusInfos = statusInfos
            self.readReplicaDBClusterIdentifiers = readReplicaDBClusterIdentifiers
            self.dBSecurityGroups = dBSecurityGroups
            self.processorFeatures = processorFeatures
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.domainMemberships = domainMemberships
            self.dBInstanceArn = dBInstanceArn
            self.instanceCreateTime = instanceCreateTime
            self.dBInstanceClass = dBInstanceClass
            self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
            self.pendingModifiedValues = pendingModifiedValues
            self.timezone = timezone
            self.cACertificateIdentifier = cACertificateIdentifier
            self.characterSetName = characterSetName
            self.storageEncrypted = storageEncrypted
            self.performanceInsightsEnabled = performanceInsightsEnabled
            self.storageType = storageType
            self.monitoringInterval = monitoringInterval
            self.dBSubnetGroup = dBSubnetGroup
            self.tdeCredentialArn = tdeCredentialArn
            self.secondaryAvailabilityZone = secondaryAvailabilityZone
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.backupRetentionPeriod = backupRetentionPeriod
            self.readReplicaDBInstanceIdentifiers = readReplicaDBInstanceIdentifiers
            self.engineVersion = engineVersion
            self.allocatedStorage = allocatedStorage
            self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
            self.engine = engine
            self.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports
            self.publiclyAccessible = publiclyAccessible
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dbInstancePort = dbInstancePort
            self.optionGroupMemberships = optionGroupMemberships
            self.availabilityZone = availabilityZone
            self.dBParameterGroups = dBParameterGroups
            self.dBInstanceStatus = dBInstanceStatus
            self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
            self.preferredBackupWindow = preferredBackupWindow
            self.readReplicaSourceDBInstanceIdentifier = readReplicaSourceDBInstanceIdentifier
            self.vpcSecurityGroups = vpcSecurityGroups
            self.monitoringRoleArn = monitoringRoleArn
            self.kmsKeyId = kmsKeyId
            self.latestRestorableTime = latestRestorableTime
            self.masterUsername = masterUsername
            self.iops = iops
            self.licenseModel = licenseModel
            self.multiAZ = multiAZ
            self.promotionTier = promotionTier
            self.deletionProtection = deletionProtection
            self.endpoint = endpoint
            self.enhancedMonitoringResourceArn = enhancedMonitoringResourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case dBName = "DBName"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case listenerEndpoint = "ListenerEndpoint"
            case dbiResourceId = "DbiResourceId"
            case statusInfos = "StatusInfos"
            case readReplicaDBClusterIdentifiers = "ReadReplicaDBClusterIdentifiers"
            case dBSecurityGroups = "DBSecurityGroups"
            case processorFeatures = "ProcessorFeatures"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case domainMemberships = "DomainMemberships"
            case dBInstanceArn = "DBInstanceArn"
            case instanceCreateTime = "InstanceCreateTime"
            case dBInstanceClass = "DBInstanceClass"
            case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
            case pendingModifiedValues = "PendingModifiedValues"
            case timezone = "Timezone"
            case cACertificateIdentifier = "CACertificateIdentifier"
            case characterSetName = "CharacterSetName"
            case storageEncrypted = "StorageEncrypted"
            case performanceInsightsEnabled = "PerformanceInsightsEnabled"
            case storageType = "StorageType"
            case monitoringInterval = "MonitoringInterval"
            case dBSubnetGroup = "DBSubnetGroup"
            case tdeCredentialArn = "TdeCredentialArn"
            case secondaryAvailabilityZone = "SecondaryAvailabilityZone"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case readReplicaDBInstanceIdentifiers = "ReadReplicaDBInstanceIdentifiers"
            case engineVersion = "EngineVersion"
            case allocatedStorage = "AllocatedStorage"
            case iAMDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
            case engine = "Engine"
            case enabledCloudwatchLogsExports = "EnabledCloudwatchLogsExports"
            case publiclyAccessible = "PubliclyAccessible"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dbInstancePort = "DbInstancePort"
            case optionGroupMemberships = "OptionGroupMemberships"
            case availabilityZone = "AvailabilityZone"
            case dBParameterGroups = "DBParameterGroups"
            case dBInstanceStatus = "DBInstanceStatus"
            case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
            case preferredBackupWindow = "PreferredBackupWindow"
            case readReplicaSourceDBInstanceIdentifier = "ReadReplicaSourceDBInstanceIdentifier"
            case vpcSecurityGroups = "VpcSecurityGroups"
            case monitoringRoleArn = "MonitoringRoleArn"
            case kmsKeyId = "KmsKeyId"
            case latestRestorableTime = "LatestRestorableTime"
            case masterUsername = "MasterUsername"
            case iops = "Iops"
            case licenseModel = "LicenseModel"
            case multiAZ = "MultiAZ"
            case promotionTier = "PromotionTier"
            case deletionProtection = "DeletionProtection"
            case endpoint = "Endpoint"
            case enhancedMonitoringResourceArn = "EnhancedMonitoringResourceArn"
        }
    }

    public struct ReservedDBInstancesOfferingList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedDBInstancesOffering", required: false, type: .list)
        ]
        public let reservedDBInstancesOffering: [ReservedDBInstancesOffering]?

        public init(reservedDBInstancesOffering: [ReservedDBInstancesOffering]? = nil) {
            self.reservedDBInstancesOffering = reservedDBInstancesOffering
        }

        private enum CodingKeys: String, CodingKey {
            case reservedDBInstancesOffering = "ReservedDBInstancesOffering"
        }
    }

    public struct IPRangeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IPRange", required: false, type: .list)
        ]
        public let iPRange: [IPRange]?

        public init(iPRange: [IPRange]? = nil) {
            self.iPRange = iPRange
        }

        private enum CodingKeys: String, CodingKey {
            case iPRange = "IPRange"
        }
    }

    public struct DeleteDBSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotIdentifier", required: true, type: .string)
        ]
        /// The DB snapshot identifier. Constraints: Must be the name of an existing DB snapshot in the available state.
        public let dBSnapshotIdentifier: String

        public init(dBSnapshotIdentifier: String) {
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
        }
    }

    public struct RestoreDBClusterFromS3Result: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .structure)
        ]
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct DescribeOptionGroupOptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "EngineName", required: true, type: .string), 
            AWSShapeMember(label: "MajorEngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A required parameter. Options available for the given engine name are described.
        public let engineName: String
        /// If specified, filters the results to include only options for the specified major engine version.
        public let majorEngineVersion: String?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, engineName: String, majorEngineVersion: String? = nil, marker: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.engineName = engineName
            self.majorEngineVersion = majorEngineVersion
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case engineName = "EngineName"
            case majorEngineVersion = "MajorEngineVersion"
            case marker = "Marker"
        }
    }

    public struct DBClusterCapacityInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "SecondsBeforeTimeout", required: false, type: .integer), 
            AWSShapeMember(label: "TimeoutAction", required: false, type: .string), 
            AWSShapeMember(label: "PendingCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "DBClusterIdentifier", required: false, type: .string)
        ]
        /// The current capacity of the DB cluster.
        public let currentCapacity: Int32?
        /// The number of seconds before a call to ModifyCurrentDBClusterCapacity times out.
        public let secondsBeforeTimeout: Int32?
        /// The timeout action of a call to ModifyCurrentDBClusterCapacity, either ForceApplyCapacityChange or RollbackCapacityChange.
        public let timeoutAction: String?
        /// A value that specifies the capacity that the DB cluster scales to next.
        public let pendingCapacity: Int32?
        /// A user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster. 
        public let dBClusterIdentifier: String?

        public init(currentCapacity: Int32? = nil, secondsBeforeTimeout: Int32? = nil, timeoutAction: String? = nil, pendingCapacity: Int32? = nil, dBClusterIdentifier: String? = nil) {
            self.currentCapacity = currentCapacity
            self.secondsBeforeTimeout = secondsBeforeTimeout
            self.timeoutAction = timeoutAction
            self.pendingCapacity = pendingCapacity
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case currentCapacity = "CurrentCapacity"
            case secondsBeforeTimeout = "SecondsBeforeTimeout"
            case timeoutAction = "TimeoutAction"
            case pendingCapacity = "PendingCapacity"
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct RestoreDBInstanceFromDBSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnableCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "DomainIAMRoleName", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "UseDefaultProcessorFeatures", required: false, type: .boolean), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "DeletionProtection", required: false, type: .boolean), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "DBSnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "TdeCredentialArn", required: false, type: .string), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "DBParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "CopyTagsToSnapshot", required: false, type: .boolean), 
            AWSShapeMember(label: "TdeCredentialPassword", required: false, type: .string), 
            AWSShapeMember(label: "DBName", required: false, type: .string), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "Domain", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "ProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "Iops", required: false, type: .integer)
        ]
        /// The list of logs that the restored DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon Aurora User Guide.
        public let enableCloudwatchLogsExports: [String]?
        /// Specify the name of the IAM role to be used when making API calls to the Directory Service.
        public let domainIAMRoleName: String?
        /// The name of the option group to be used for the restored DB instance. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance
        public let optionGroupName: String?
        /// The port number on which the database accepts connections. Default: The same port as the original DB instance Constraints: Value must be 1150-65535 
        public let port: Int32?
        /// A value that specifies that the DB instance class of the DB instance uses its default processor features.
        public let useDefaultProcessorFeatures: Bool?
        /// The compute and memory capacity of the Amazon RDS DB instance, for example, db.m4.large. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class in the Amazon RDS User Guide.  Default: The same DBInstanceClass as the original DB instance.
        public let dBInstanceClass: String?
        /// Indicates if the DB instance should have deletion protection enabled. The database can't be deleted when this value is set to true. The default is false. For more information, see  Deleting a DB Instance. 
        public let deletionProtection: Bool?
        /// The EC2 Availability Zone that the DB instance is created in. Default: A random, system-chosen Availability Zone. Constraint: You can't specify the AvailabilityZone parameter if the MultiAZ parameter is set to true. Example: us-east-1a 
        public let availabilityZone: String?
        /// License model information for the restored DB instance. Default: Same as source.  Valid values: license-included | bring-your-own-license | general-public-license 
        public let licenseModel: String?
        /// The identifier for the DB snapshot to restore from. Constraints:   Must match the identifier of an existing DBSnapshot.   If you are restoring from a shared manual DB snapshot, the DBSnapshotIdentifier must be the ARN of the shared DB snapshot.  
        public let dBSnapshotIdentifier: String
        /// Specifies the storage type to be associated with the DB instance.  Valid values: standard | gp2 | io1   If you specify io1, you must also include a value for the Iops parameter.   Default: io1 if the Iops parameter is specified, otherwise standard 
        public let storageType: String?
        /// The ARN from the key store with which to associate the instance for TDE encryption.
        public let tdeCredentialArn: String?
        /// The DB subnet group name to use for the new instance. Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup 
        public let dBSubnetGroupName: String?
        /// Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive. Constraints:   Must contain from 1 to 63 numbers, letters, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: my-snapshot-id 
        public let dBInstanceIdentifier: String
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. You can enable IAM database authentication for the following database engines   For MySQL 5.6, minor version 5.6.34 or higher   For MySQL 5.7, minor version 5.7.16 or higher   Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// Specifies if the DB instance is a Multi-AZ deployment. Constraint: You can't specify the AvailabilityZone parameter if the MultiAZ parameter is set to true.
        public let multiAZ: Bool?
        /// The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used. Constraints:   If supplied, must match the name of an existing DBParameterGroup.   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.  
        public let dBParameterGroupName: String?
        /// True to copy all tags from the restored DB instance to snapshots of the DB instance, and otherwise false. The default is false.
        public let copyTagsToSnapshot: Bool?
        /// The password for the given ARN from the key store in order to access the device.
        public let tdeCredentialPassword: String?
        /// The database name for the restored DB instance.  This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines. 
        public let dBName: String?
        /// The database engine to use for the new instance. Default: The same as source Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot. Valid Values:    mariadb     mysql     oracle-ee     oracle-se2     oracle-se1     oracle-se     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web   
        public let engine: String?
        /// Specifies the accessibility options for the DB instance. A value of true specifies an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. A value of false specifies an internal instance with a DNS name that resolves to a private IP address. For more information, see CreateDBInstance.
        public let publiclyAccessible: Bool?
        public let tags: TagList?
        /// Specify the Active Directory Domain to restore the instance in.
        public let domain: String?
        ///  A list of EC2 VPC security groups to associate with this DB instance.   Default: The default EC2 VPC security group for the DB subnet group's VPC. 
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window.
        public let autoMinorVersionUpgrade: Bool?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        public let processorFeatures: ProcessorFeatureList?
        /// Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts.  The provisioned IOPS value must follow the requirements for your database engine. For more information, see Amazon RDS Provisioned IOPS Storage to Improve Performance in the Amazon RDS User Guide.  Constraints: Must be an integer greater than 1000.
        public let iops: Int32?

        public init(enableCloudwatchLogsExports: [String]? = nil, domainIAMRoleName: String? = nil, optionGroupName: String? = nil, port: Int32? = nil, useDefaultProcessorFeatures: Bool? = nil, dBInstanceClass: String? = nil, deletionProtection: Bool? = nil, availabilityZone: String? = nil, licenseModel: String? = nil, dBSnapshotIdentifier: String, storageType: String? = nil, tdeCredentialArn: String? = nil, dBSubnetGroupName: String? = nil, dBInstanceIdentifier: String, enableIAMDatabaseAuthentication: Bool? = nil, multiAZ: Bool? = nil, dBParameterGroupName: String? = nil, copyTagsToSnapshot: Bool? = nil, tdeCredentialPassword: String? = nil, dBName: String? = nil, engine: String? = nil, publiclyAccessible: Bool? = nil, tags: TagList? = nil, domain: String? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, autoMinorVersionUpgrade: Bool? = nil, processorFeatures: ProcessorFeatureList? = nil, iops: Int32? = nil) {
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.domainIAMRoleName = domainIAMRoleName
            self.optionGroupName = optionGroupName
            self.port = port
            self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
            self.dBInstanceClass = dBInstanceClass
            self.deletionProtection = deletionProtection
            self.availabilityZone = availabilityZone
            self.licenseModel = licenseModel
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.storageType = storageType
            self.tdeCredentialArn = tdeCredentialArn
            self.dBSubnetGroupName = dBSubnetGroupName
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.multiAZ = multiAZ
            self.dBParameterGroupName = dBParameterGroupName
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.tdeCredentialPassword = tdeCredentialPassword
            self.dBName = dBName
            self.engine = engine
            self.publiclyAccessible = publiclyAccessible
            self.tags = tags
            self.domain = domain
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.processorFeatures = processorFeatures
            self.iops = iops
        }

        private enum CodingKeys: String, CodingKey {
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case domainIAMRoleName = "DomainIAMRoleName"
            case optionGroupName = "OptionGroupName"
            case port = "Port"
            case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
            case dBInstanceClass = "DBInstanceClass"
            case deletionProtection = "DeletionProtection"
            case availabilityZone = "AvailabilityZone"
            case licenseModel = "LicenseModel"
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case storageType = "StorageType"
            case tdeCredentialArn = "TdeCredentialArn"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case multiAZ = "MultiAZ"
            case dBParameterGroupName = "DBParameterGroupName"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case tdeCredentialPassword = "TdeCredentialPassword"
            case dBName = "DBName"
            case engine = "Engine"
            case publiclyAccessible = "PubliclyAccessible"
            case tags = "Tags"
            case domain = "Domain"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case processorFeatures = "ProcessorFeatures"
            case iops = "Iops"
        }
    }

    public struct DBClusterSnapshotAttributeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshotAttribute", required: false, type: .list)
        ]
        public let dBClusterSnapshotAttribute: [DBClusterSnapshotAttribute]?

        public init(dBClusterSnapshotAttribute: [DBClusterSnapshotAttribute]? = nil) {
            self.dBClusterSnapshotAttribute = dBClusterSnapshotAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotAttribute = "DBClusterSnapshotAttribute"
        }
    }

    public struct RemoveSourceIdentifierFromSubscriptionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .structure)
        ]
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct DescribeDBSecurityGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBSecurityGroupName", required: false, type: .string)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous DescribeDBSecurityGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The name of the DB security group to return details for.
        public let dBSecurityGroupName: String?

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, marker: String? = nil, dBSecurityGroupName: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
            self.dBSecurityGroupName = dBSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case dBSecurityGroupName = "DBSecurityGroupName"
        }
    }

    public struct DBInstanceAutomatedBackupList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstanceAutomatedBackup", required: false, type: .list)
        ]
        public let dBInstanceAutomatedBackup: [DBInstanceAutomatedBackup]?

        public init(dBInstanceAutomatedBackup: [DBInstanceAutomatedBackup]? = nil) {
            self.dBInstanceAutomatedBackup = dBInstanceAutomatedBackup
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceAutomatedBackup = "DBInstanceAutomatedBackup"
        }
    }

    public struct AuthorizeDBSecurityGroupIngressResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSecurityGroup", required: false, type: .structure)
        ]
        public let dBSecurityGroup: DBSecurityGroup?

        public init(dBSecurityGroup: DBSecurityGroup? = nil) {
            self.dBSecurityGroup = dBSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroup = "DBSecurityGroup"
        }
    }

    public struct DBInstanceStatusInfoList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstanceStatusInfo", required: false, type: .list)
        ]
        public let dBInstanceStatusInfo: [DBInstanceStatusInfo]?

        public init(dBInstanceStatusInfo: [DBInstanceStatusInfo]? = nil) {
            self.dBInstanceStatusInfo = dBInstanceStatusInfo
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceStatusInfo = "DBInstanceStatusInfo"
        }
    }

    public struct CreateDBSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "DBSnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string)
        ]
        public let tags: TagList?
        /// The identifier for the DB snapshot. Constraints:   Can't be null, empty, or blank   Must contain from 1 to 255 letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: my-snapshot-id 
        public let dBSnapshotIdentifier: String
        /// The identifier of the DB instance that you want to create the snapshot of. Constraints:   Must match the identifier of an existing DBInstance.  
        public let dBInstanceIdentifier: String

        public init(tags: TagList? = nil, dBSnapshotIdentifier: String, dBInstanceIdentifier: String) {
            self.tags = tags
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.dBInstanceIdentifier = dBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
        }
    }

    public struct DeleteDBClusterSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshot", required: false, type: .structure)
        ]
        public let dBClusterSnapshot: DBClusterSnapshot?

        public init(dBClusterSnapshot: DBClusterSnapshot? = nil) {
            self.dBClusterSnapshot = dBClusterSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshot = "DBClusterSnapshot"
        }
    }

    public struct StartDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string)
        ]
        /// The DB cluster identifier of the Amazon Aurora DB cluster to be started. This parameter is stored as a lowercase string.
        public let dBClusterIdentifier: String

        public init(dBClusterIdentifier: String) {
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct DescribeSourceRegionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "RegionName", required: false, type: .string)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// An optional pagination token provided by a previous DescribeSourceRegions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The source AWS Region name. For example, us-east-1. Constraints:   Must specify a valid AWS Region name.  
        public let regionName: String?

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, marker: String? = nil, regionName: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
            self.regionName = regionName
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case regionName = "RegionName"
        }
    }

    public struct CreateDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnableCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "MasterUserPassword", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .structure), 
            AWSShapeMember(label: "MasterUsername", required: false, type: .string), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "StorageEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "DeletionProtection", required: false, type: .boolean), 
            AWSShapeMember(label: "DBClusterParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "PreSignedUrl", required: false, type: .string), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "ReplicationSourceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Engine", required: true, type: .string), 
            AWSShapeMember(label: "ScalingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "CharacterSetName", required: false, type: .string), 
            AWSShapeMember(label: "PreferredBackupWindow", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "GlobalClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "BacktrackWindow", required: false, type: .long), 
            AWSShapeMember(label: "EngineMode", required: false, type: .string)
        ]
        /// The list of log types that need to be enabled for exporting to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon Aurora User Guide.
        public let enableCloudwatchLogsExports: [String]?
        /// The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@". Constraints: Must contain from 8 to 41 characters.
        public let masterUserPassword: String?
        /// A list of EC2 Availability Zones that instances in the DB cluster can be created in. For information on AWS Regions and Availability Zones, see Choosing the Regions and Availability Zones in the Amazon Aurora User Guide. 
        public let availabilityZones: AvailabilityZones?
        /// The name of the master user for the DB cluster. Constraints:   Must be 1 to 16 letters or numbers.   First character must be a letter.   Can't be a reserved word for the chosen database engine.  
        public let masterUsername: String?
        /// The number of days for which automated backups are retained. You must specify a minimum value of 1. Default: 1 Constraints:   Must be a value from 1 to 35  
        public let backupRetentionPeriod: Int32?
        /// Specifies whether the DB cluster is encrypted.
        public let storageEncrypted: Bool?
        /// The version number of the database engine to use.  Aurora MySQL  Example: 5.6.10a, 5.7.12   Aurora PostgreSQL  Example: 9.6.3 
        public let engineVersion: String?
        /// The AWS KMS key identifier for an encrypted DB cluster. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key. If an encryption key is not specified in KmsKeyId:   If ReplicationSourceIdentifier identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key.    If the StorageEncrypted parameter is true and ReplicationSourceIdentifier is not specified, then Amazon RDS will use your default encryption key.   AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set KmsKeyId to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.
        public let kmsKeyId: String?
        /// A value that indicates that the DB cluster should be associated with the specified option group. Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.
        public let optionGroupName: String?
        /// The port number on which the instances in the DB cluster accept connections.  Default: 3306 if engine is set as aurora or 5432 if set to aurora-postgresql. 
        public let port: Int32?
        /// Indicates if the DB cluster should have deletion protection enabled. The database can't be deleted when this value is set to true. The default is false. 
        public let deletionProtection: Bool?
        ///  The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, default.aurora5.6 is used.  Constraints:   If supplied, must match the name of an existing DB cluster parameter group.  
        public let dBClusterParameterGroupName: String?
        /// A URL that contains a Signature Version 4 signed request for the CreateDBCluster action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify PreSignedUrl when you are performing cross-region replication from an encrypted DB cluster. The pre-signed URL must be a valid request for the CreateDBCluster API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied. The pre-signed URL request must contain the following parameter values:    KmsKeyId - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the CreateDBCluster action that is called in the destination AWS Region, and the action contained in the pre-signed URL.    DestinationRegion - The name of the AWS Region that Aurora Read Replica will be created in.    ReplicationSourceIdentifier - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your ReplicationSourceIdentifier would look like Example: arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1.   To learn how to generate a Signature Version 4 signed request, see  Authenticating Requests: Using Query Parameters (AWS Signature Version 4) and  Signature Version 4 Signing Process.
        public let preSignedUrl: String?
        /// A DB subnet group to associate with this DB cluster. Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup 
        public let dBSubnetGroupName: String?
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
        public let replicationSourceIdentifier: String?
        /// The name of the database engine to be used for this DB cluster. Valid Values: aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora), and aurora-postgresql 
        public let engine: String
        /// For DB clusters in serverless DB engine mode, the scaling properties of the DB cluster.
        public let scalingConfiguration: ScalingConfiguration?
        public let tags: TagList?
        /// A value that indicates that the DB cluster should be associated with the specified CharacterSet.
        public let characterSetName: String?
        /// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see  Adjusting the Preferred DB Cluster Maintenance Window in the Amazon Aurora User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.  
        public let preferredBackupWindow: String?
        /// The DB cluster identifier. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example: my-cluster1 
        public let dBClusterIdentifier: String
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see  Adjusting the Preferred DB Cluster Maintenance Window in the Amazon Aurora User Guide.  Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// A list of EC2 VPC security groups to associate with this DB cluster.
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
        public let databaseName: String?
        ///  The global cluster ID of an Aurora cluster that becomes the primary cluster in the new global database cluster. 
        public let globalClusterIdentifier: String?
        /// The target backtrack window, in seconds. To disable backtracking, set this value to 0.  Default: 0 Constraints:   If specified, this value must be set to a number from 0 to 259,200 (72 hours).  
        public let backtrackWindow: Int64?
        /// The DB engine mode of the DB cluster, either provisioned, serverless, parallelquery, or global.
        public let engineMode: String?

        public init(enableCloudwatchLogsExports: [String]? = nil, masterUserPassword: String? = nil, availabilityZones: AvailabilityZones? = nil, masterUsername: String? = nil, backupRetentionPeriod: Int32? = nil, storageEncrypted: Bool? = nil, engineVersion: String? = nil, kmsKeyId: String? = nil, optionGroupName: String? = nil, port: Int32? = nil, deletionProtection: Bool? = nil, dBClusterParameterGroupName: String? = nil, preSignedUrl: String? = nil, dBSubnetGroupName: String? = nil, enableIAMDatabaseAuthentication: Bool? = nil, replicationSourceIdentifier: String? = nil, engine: String, scalingConfiguration: ScalingConfiguration? = nil, tags: TagList? = nil, characterSetName: String? = nil, preferredBackupWindow: String? = nil, dBClusterIdentifier: String, preferredMaintenanceWindow: String? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, databaseName: String? = nil, globalClusterIdentifier: String? = nil, backtrackWindow: Int64? = nil, engineMode: String? = nil) {
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.masterUserPassword = masterUserPassword
            self.availabilityZones = availabilityZones
            self.masterUsername = masterUsername
            self.backupRetentionPeriod = backupRetentionPeriod
            self.storageEncrypted = storageEncrypted
            self.engineVersion = engineVersion
            self.kmsKeyId = kmsKeyId
            self.optionGroupName = optionGroupName
            self.port = port
            self.deletionProtection = deletionProtection
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.preSignedUrl = preSignedUrl
            self.dBSubnetGroupName = dBSubnetGroupName
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.replicationSourceIdentifier = replicationSourceIdentifier
            self.engine = engine
            self.scalingConfiguration = scalingConfiguration
            self.tags = tags
            self.characterSetName = characterSetName
            self.preferredBackupWindow = preferredBackupWindow
            self.dBClusterIdentifier = dBClusterIdentifier
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.databaseName = databaseName
            self.globalClusterIdentifier = globalClusterIdentifier
            self.backtrackWindow = backtrackWindow
            self.engineMode = engineMode
        }

        private enum CodingKeys: String, CodingKey {
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case masterUserPassword = "MasterUserPassword"
            case availabilityZones = "AvailabilityZones"
            case masterUsername = "MasterUsername"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case storageEncrypted = "StorageEncrypted"
            case engineVersion = "EngineVersion"
            case kmsKeyId = "KmsKeyId"
            case optionGroupName = "OptionGroupName"
            case port = "Port"
            case deletionProtection = "DeletionProtection"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case preSignedUrl = "PreSignedUrl"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case replicationSourceIdentifier = "ReplicationSourceIdentifier"
            case engine = "Engine"
            case scalingConfiguration = "ScalingConfiguration"
            case tags = "Tags"
            case characterSetName = "CharacterSetName"
            case preferredBackupWindow = "PreferredBackupWindow"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case databaseName = "DatabaseName"
            case globalClusterIdentifier = "GlobalClusterIdentifier"
            case backtrackWindow = "BacktrackWindow"
            case engineMode = "EngineMode"
        }
    }

    public struct DBClusterRole: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FeatureName", required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string)
        ]
        public let featureName: String?
        /// The Amazon Resource Name (ARN) of the IAM role that is associated with the DB cluster.
        public let roleArn: String?
        /// Describes the state of association between the IAM role and the DB cluster. The Status property returns one of the following values:    ACTIVE - the IAM role ARN is associated with the DB cluster and can be used to access other AWS services on your behalf.    PENDING - the IAM role ARN is being associated with the DB cluster.    INVALID - the IAM role ARN is associated with the DB cluster, but the DB cluster is unable to assume the IAM role in order to access other AWS services on your behalf.  
        public let status: String?

        public init(featureName: String? = nil, roleArn: String? = nil, status: String? = nil) {
            self.featureName = featureName
            self.roleArn = roleArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case featureName = "FeatureName"
            case roleArn = "RoleArn"
            case status = "Status"
        }
    }

    public struct CopyDBSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshot", required: false, type: .structure)
        ]
        public let dBSnapshot: DBSnapshot?

        public init(dBSnapshot: DBSnapshot? = nil) {
            self.dBSnapshot = dBSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshot = "DBSnapshot"
        }
    }

    public struct DescribeDBLogFilesList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DescribeDBLogFilesDetails", required: false, type: .list)
        ]
        public let describeDBLogFilesDetails: [DescribeDBLogFilesDetails]?

        public init(describeDBLogFilesDetails: [DescribeDBLogFilesDetails]? = nil) {
            self.describeDBLogFilesDetails = describeDBLogFilesDetails
        }

        private enum CodingKeys: String, CodingKey {
            case describeDBLogFilesDetails = "DescribeDBLogFilesDetails"
        }
    }

    public struct OrderableDBInstanceOptionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrderableDBInstanceOption", required: false, type: .list)
        ]
        public let orderableDBInstanceOption: [OrderableDBInstanceOption]?

        public init(orderableDBInstanceOption: [OrderableDBInstanceOption]? = nil) {
            self.orderableDBInstanceOption = orderableDBInstanceOption
        }

        private enum CodingKeys: String, CodingKey {
            case orderableDBInstanceOption = "OrderableDBInstanceOption"
        }
    }

    public struct DBSnapshot: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IAMDatabaseAuthenticationEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "InstanceCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "MasterUsername", required: false, type: .string), 
            AWSShapeMember(label: "PercentProgress", required: false, type: .integer), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "Timezone", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "SnapshotCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "DBSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "TdeCredentialArn", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotType", required: false, type: .string), 
            AWSShapeMember(label: "DbiResourceId", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SourceRegion", required: false, type: .string), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "SourceDBSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "ProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "DBSnapshotArn", required: false, type: .string)
        ]
        /// True if mapping of AWS Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.
        public let iAMDatabaseAuthenticationEnabled: Bool?
        /// Specifies the time when the snapshot was taken, in Universal Coordinated Time (UTC).
        public let instanceCreateTime: TimeStamp?
        /// Provides the VPC ID associated with the DB snapshot.
        public let vpcId: String?
        /// Provides the master username for the DB snapshot.
        public let masterUsername: String?
        /// The percentage of the estimated data that has been transferred.
        public let percentProgress: Int32?
        /// Specifies the version of the database engine.
        public let engineVersion: String?
        ///  If Encrypted is true, the AWS KMS key identifier for the encrypted DB snapshot. 
        public let kmsKeyId: String?
        /// Provides the option group name for the DB snapshot.
        public let optionGroupName: String?
        /// Specifies the port that the database engine was listening on at the time of the snapshot.
        public let port: Int32?
        /// The time zone of the DB snapshot. In most cases, the Timezone element is empty. Timezone content appears only for snapshots taken from Microsoft SQL Server DB instances that were created with a time zone specified. 
        public let timezone: String?
        /// Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
        public let availabilityZone: String?
        /// Specifies whether the DB snapshot is encrypted.
        public let encrypted: Bool?
        /// Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).
        public let snapshotCreateTime: TimeStamp?
        /// Specifies the status of this DB snapshot.
        public let status: String?
        /// License model information for the restored DB instance.
        public let licenseModel: String?
        /// Specifies the identifier for the DB snapshot.
        public let dBSnapshotIdentifier: String?
        /// Specifies the storage type associated with DB snapshot.
        public let storageType: String?
        /// The ARN from the key store with which to associate the instance for TDE encryption.
        public let tdeCredentialArn: String?
        /// Provides the type of the DB snapshot.
        public let snapshotType: String?
        /// The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
        public let dbiResourceId: String?
        /// Specifies the DB instance identifier of the DB instance this DB snapshot was created from.
        public let dBInstanceIdentifier: String?
        /// The AWS Region that the DB snapshot was created in or copied from.
        public let sourceRegion: String?
        /// Specifies the allocated storage size in gibibytes (GiB).
        public let allocatedStorage: Int32?
        /// Specifies the name of the database engine.
        public let engine: String?
        /// The DB snapshot Amazon Resource Name (ARN) that the DB snapshot was copied from. It only has value in case of cross-customer or cross-region copy.
        public let sourceDBSnapshotIdentifier: String?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance when the DB snapshot was created.
        public let processorFeatures: ProcessorFeatureList?
        /// Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
        public let iops: Int32?
        /// The Amazon Resource Name (ARN) for the DB snapshot.
        public let dBSnapshotArn: String?

        public init(iAMDatabaseAuthenticationEnabled: Bool? = nil, instanceCreateTime: TimeStamp? = nil, vpcId: String? = nil, masterUsername: String? = nil, percentProgress: Int32? = nil, engineVersion: String? = nil, kmsKeyId: String? = nil, optionGroupName: String? = nil, port: Int32? = nil, timezone: String? = nil, availabilityZone: String? = nil, encrypted: Bool? = nil, snapshotCreateTime: TimeStamp? = nil, status: String? = nil, licenseModel: String? = nil, dBSnapshotIdentifier: String? = nil, storageType: String? = nil, tdeCredentialArn: String? = nil, snapshotType: String? = nil, dbiResourceId: String? = nil, dBInstanceIdentifier: String? = nil, sourceRegion: String? = nil, allocatedStorage: Int32? = nil, engine: String? = nil, sourceDBSnapshotIdentifier: String? = nil, processorFeatures: ProcessorFeatureList? = nil, iops: Int32? = nil, dBSnapshotArn: String? = nil) {
            self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
            self.instanceCreateTime = instanceCreateTime
            self.vpcId = vpcId
            self.masterUsername = masterUsername
            self.percentProgress = percentProgress
            self.engineVersion = engineVersion
            self.kmsKeyId = kmsKeyId
            self.optionGroupName = optionGroupName
            self.port = port
            self.timezone = timezone
            self.availabilityZone = availabilityZone
            self.encrypted = encrypted
            self.snapshotCreateTime = snapshotCreateTime
            self.status = status
            self.licenseModel = licenseModel
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.storageType = storageType
            self.tdeCredentialArn = tdeCredentialArn
            self.snapshotType = snapshotType
            self.dbiResourceId = dbiResourceId
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.sourceRegion = sourceRegion
            self.allocatedStorage = allocatedStorage
            self.engine = engine
            self.sourceDBSnapshotIdentifier = sourceDBSnapshotIdentifier
            self.processorFeatures = processorFeatures
            self.iops = iops
            self.dBSnapshotArn = dBSnapshotArn
        }

        private enum CodingKeys: String, CodingKey {
            case iAMDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
            case instanceCreateTime = "InstanceCreateTime"
            case vpcId = "VpcId"
            case masterUsername = "MasterUsername"
            case percentProgress = "PercentProgress"
            case engineVersion = "EngineVersion"
            case kmsKeyId = "KmsKeyId"
            case optionGroupName = "OptionGroupName"
            case port = "Port"
            case timezone = "Timezone"
            case availabilityZone = "AvailabilityZone"
            case encrypted = "Encrypted"
            case snapshotCreateTime = "SnapshotCreateTime"
            case status = "Status"
            case licenseModel = "LicenseModel"
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case storageType = "StorageType"
            case tdeCredentialArn = "TdeCredentialArn"
            case snapshotType = "SnapshotType"
            case dbiResourceId = "DbiResourceId"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case sourceRegion = "SourceRegion"
            case allocatedStorage = "AllocatedStorage"
            case engine = "Engine"
            case sourceDBSnapshotIdentifier = "SourceDBSnapshotIdentifier"
            case processorFeatures = "ProcessorFeatures"
            case iops = "Iops"
            case dBSnapshotArn = "DBSnapshotArn"
        }
    }

    public struct DescribeEventCategoriesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .structure)
        ]
        /// The type of source that is generating the events. Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot
        public let sourceType: String?
        /// This parameter is not currently supported.
        public let filters: FilterList?

        public init(sourceType: String? = nil, filters: FilterList? = nil) {
            self.sourceType = sourceType
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case sourceType = "SourceType"
            case filters = "Filters"
        }
    }

    public struct ResetDBClusterParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .structure), 
            AWSShapeMember(label: "ResetAllParameters", required: false, type: .boolean), 
            AWSShapeMember(label: "DBClusterParameterGroupName", required: true, type: .string)
        ]
        /// A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the ResetAllParameters parameter is set to true.
        public let parameters: ParametersList?
        /// A value that is set to true to reset all parameters in the DB cluster parameter group to their default values, and false otherwise. You can't use this parameter if there is a list of parameter names specified for the Parameters parameter.
        public let resetAllParameters: Bool?
        /// The name of the DB cluster parameter group to reset.
        public let dBClusterParameterGroupName: String

        public init(parameters: ParametersList? = nil, resetAllParameters: Bool? = nil, dBClusterParameterGroupName: String) {
            self.parameters = parameters
            self.resetAllParameters = resetAllParameters
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case resetAllParameters = "ResetAllParameters"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
        }
    }

    public struct OptionSettingConfigurationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionSetting", required: false, type: .list)
        ]
        public let optionSetting: [OptionSetting]?

        public init(optionSetting: [OptionSetting]? = nil) {
            self.optionSetting = optionSetting
        }

        private enum CodingKeys: String, CodingKey {
            case optionSetting = "OptionSetting"
        }
    }

    public struct RestoreDBClusterToPointInTimeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .structure)
        ]
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct DBEngineVersionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBEngineVersion", required: false, type: .list)
        ]
        public let dBEngineVersion: [DBEngineVersion]?

        public init(dBEngineVersion: [DBEngineVersion]? = nil) {
            self.dBEngineVersion = dBEngineVersion
        }

        private enum CodingKeys: String, CodingKey {
            case dBEngineVersion = "DBEngineVersion"
        }
    }

    public struct DeleteDBSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSubnetGroupName", required: true, type: .string)
        ]
        /// The name of the database subnet group to delete.  You can't delete the default subnet group.  Constraints: Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup 
        public let dBSubnetGroupName: String

        public init(dBSubnetGroupName: String) {
            self.dBSubnetGroupName = dBSubnetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroupName = "DBSubnetGroupName"
        }
    }

    public struct IPRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "CIDRIP", required: false, type: .string)
        ]
        /// Specifies the status of the IP range. Status can be "authorizing", "authorized", "revoking", and "revoked".
        public let status: String?
        /// Specifies the IP range.
        public let cidrip: String?

        public init(status: String? = nil, cidrip: String? = nil) {
            self.status = status
            self.cidrip = cidrip
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case cidrip = "CIDRIP"
        }
    }

    public struct FailoverDBClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .structure)
        ]
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct CreateDBInstanceReadReplicaMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnableCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "PerformanceInsightsKMSKeyId", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "UseDefaultProcessorFeatures", required: false, type: .boolean), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "DeletionProtection", required: false, type: .boolean), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "PreSignedUrl", required: false, type: .string), 
            AWSShapeMember(label: "EnablePerformanceInsights", required: false, type: .boolean), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "CopyTagsToSnapshot", required: false, type: .boolean), 
            AWSShapeMember(label: "MonitoringInterval", required: false, type: .integer), 
            AWSShapeMember(label: "SourceDBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "MonitoringRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "PerformanceInsightsRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "ProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "Iops", required: false, type: .integer)
        ]
        /// The list of logs that the new DB instance is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs  in the Amazon RDS User Guide.
        public let enableCloudwatchLogsExports: [String]?
        /// The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
        public let performanceInsightsKMSKeyId: String?
        /// The option group the DB instance is associated with. If omitted, the default option group for the engine specified is used.
        public let optionGroupName: String?
        /// The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.  If you specify this parameter when you create a Read Replica from an unencrypted DB instance, the Read Replica is encrypted.  If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance.  If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. 
        public let kmsKeyId: String?
        /// A value that specifies that the DB instance class of the DB instance uses its default processor features.
        public let useDefaultProcessorFeatures: Bool?
        /// The port number that the DB instance uses for connections. Default: Inherits from the source DB instance Valid Values: 1150-65535 
        public let port: Int32?
        /// The compute and memory capacity of the Read Replica, for example, db.m4.large. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class in the Amazon RDS User Guide.  Default: Inherits from the source DB instance.
        public let dBInstanceClass: String?
        /// Indicates if the DB instance should have deletion protection enabled. The database can't be deleted when this value is set to true. The default is false. For more information, see  Deleting a DB Instance. 
        public let deletionProtection: Bool?
        /// The Amazon EC2 Availability Zone that the Read Replica is created in. Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.  Example: us-east-1d 
        public let availabilityZone: String?
        /// Specifies the storage type to be associated with the Read Replica.  Valid values: standard | gp2 | io1   If you specify io1, you must also include a value for the Iops parameter.   Default: io1 if the Iops parameter is specified, otherwise standard 
        public let storageType: String?
        /// The URL that contains a Signature Version 4 signed request for the CreateDBInstanceReadReplica API action in the source AWS Region that contains the source DB instance.  You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the --source-region option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI.  The presigned URL must be a valid request for the CreateDBInstanceReadReplica API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values:     DestinationRegion - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the CreateDBInstanceReadReplica action is called that contains this presigned URL.  For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the CreateDBInstanceReadReplica action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the CreateDBInstanceReadReplica action in the us-west-2 AWS Region. For this example, the DestinationRegion in the presigned URL must be set to the us-east-1 AWS Region.     KmsKeyId - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the CreateDBInstanceReadReplica action that is called in the destination AWS Region, and the action contained in the presigned URL.     SourceDBInstanceIdentifier - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your SourceDBInstanceIdentifier looks like the following example: arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115.    To learn how to generate a Signature Version 4 signed request, see Authenticating Requests: Using Query Parameters (AWS Signature Version 4) and Signature Version 4 Signing Process. 
        public let preSignedUrl: String?
        /// True to enable Performance Insights for the read replica, and otherwise false.  For more information, see Using Amazon Performance Insights in the Amazon RDS User Guide. 
        public let enablePerformanceInsights: Bool?
        /// Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC. Constraints:   Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.   If supplied, must match the name of an existing DBSubnetGroup.   The specified DB subnet group must be in the same AWS Region in which the operation is running.   All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;   Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.   Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.     Example: mySubnetgroup 
        public let dBSubnetGroupName: String?
        /// The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
        public let dBInstanceIdentifier: String
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. You can enable IAM database authentication for the following database engines   For MySQL 5.6, minor version 5.6.34 or higher   For MySQL 5.7, minor version 5.7.16 or higher   Aurora MySQL 5.6 or higher   Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// Specifies whether the Read Replica is in a Multi-AZ deployment.  You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. 
        public let multiAZ: Bool?
        /// True to copy all tags from the Read Replica to snapshots of the Read Replica, and otherwise false. The default is false.
        public let copyTagsToSnapshot: Bool?
        /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. If MonitoringRoleArn is specified, then you must also set MonitoringInterval to a value other than 0. Valid Values: 0, 1, 5, 10, 15, 30, 60 
        public let monitoringInterval: Int32?
        /// The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas. Constraints:   Must be the identifier of an existing MySQL, MariaDB, or PostgreSQL DB instance.   Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6 or later.   Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).   The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.   If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.   If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to  Constructing an ARN for Amazon RDS in the Amazon RDS User Guide.  
        public let sourceDBInstanceIdentifier: String
        /// Specifies the accessibility options for the DB instance. A value of true specifies an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. A value of false specifies an internal instance with a DNS name that resolves to a private IP address. For more information, see CreateDBInstance.
        public let publiclyAccessible: Bool?
        public let tags: TagList?
        /// The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, go to To create an IAM role for Amazon RDS Enhanced Monitoring in the Amazon RDS User Guide. If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn value.
        public let monitoringRoleArn: String?
        /// The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
        public let performanceInsightsRetentionPeriod: Int32?
        ///  A list of EC2 VPC security groups to associate with the Read Replica.   Default: The default EC2 VPC security group for the DB subnet group's VPC. 
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// Indicates that minor engine upgrades are applied automatically to the Read Replica during the maintenance window. Default: Inherits from the source DB instance
        public let autoMinorVersionUpgrade: Bool?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        public let processorFeatures: ProcessorFeatureList?
        /// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
        public let iops: Int32?

        public init(enableCloudwatchLogsExports: [String]? = nil, performanceInsightsKMSKeyId: String? = nil, optionGroupName: String? = nil, kmsKeyId: String? = nil, useDefaultProcessorFeatures: Bool? = nil, port: Int32? = nil, dBInstanceClass: String? = nil, deletionProtection: Bool? = nil, availabilityZone: String? = nil, storageType: String? = nil, preSignedUrl: String? = nil, enablePerformanceInsights: Bool? = nil, dBSubnetGroupName: String? = nil, dBInstanceIdentifier: String, enableIAMDatabaseAuthentication: Bool? = nil, multiAZ: Bool? = nil, copyTagsToSnapshot: Bool? = nil, monitoringInterval: Int32? = nil, sourceDBInstanceIdentifier: String, publiclyAccessible: Bool? = nil, tags: TagList? = nil, monitoringRoleArn: String? = nil, performanceInsightsRetentionPeriod: Int32? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, autoMinorVersionUpgrade: Bool? = nil, processorFeatures: ProcessorFeatureList? = nil, iops: Int32? = nil) {
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
            self.optionGroupName = optionGroupName
            self.kmsKeyId = kmsKeyId
            self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
            self.port = port
            self.dBInstanceClass = dBInstanceClass
            self.deletionProtection = deletionProtection
            self.availabilityZone = availabilityZone
            self.storageType = storageType
            self.preSignedUrl = preSignedUrl
            self.enablePerformanceInsights = enablePerformanceInsights
            self.dBSubnetGroupName = dBSubnetGroupName
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.multiAZ = multiAZ
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.monitoringInterval = monitoringInterval
            self.sourceDBInstanceIdentifier = sourceDBInstanceIdentifier
            self.publiclyAccessible = publiclyAccessible
            self.tags = tags
            self.monitoringRoleArn = monitoringRoleArn
            self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.processorFeatures = processorFeatures
            self.iops = iops
        }

        private enum CodingKeys: String, CodingKey {
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
            case optionGroupName = "OptionGroupName"
            case kmsKeyId = "KmsKeyId"
            case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
            case port = "Port"
            case dBInstanceClass = "DBInstanceClass"
            case deletionProtection = "DeletionProtection"
            case availabilityZone = "AvailabilityZone"
            case storageType = "StorageType"
            case preSignedUrl = "PreSignedUrl"
            case enablePerformanceInsights = "EnablePerformanceInsights"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case multiAZ = "MultiAZ"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case monitoringInterval = "MonitoringInterval"
            case sourceDBInstanceIdentifier = "SourceDBInstanceIdentifier"
            case publiclyAccessible = "PubliclyAccessible"
            case tags = "Tags"
            case monitoringRoleArn = "MonitoringRoleArn"
            case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case processorFeatures = "ProcessorFeatures"
            case iops = "Iops"
        }
    }

    public struct RestoreDBClusterToPointInTimeMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "RestoreToTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SourceDBClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "DBClusterParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "UseLatestRestorableTime", required: false, type: .boolean), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "EnableCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "BacktrackWindow", required: false, type: .long), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "RestoreType", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "DeletionProtection", required: false, type: .boolean), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key. You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the KmsKeyId parameter. If you don't specify a value for the KmsKeyId parameter, then the following occurs:   If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.   If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.   If DBClusterIdentifier refers to a DB cluster that is not encrypted, then the restore request is rejected.
        public let kmsKeyId: String?
        /// The date and time to restore the DB cluster to. Valid Values: Value must be a time in Universal Coordinated Time (UTC) format Constraints:   Must be before the latest restorable time for the DB instance   Must be specified if UseLatestRestorableTime parameter is not provided   Can't be specified if UseLatestRestorableTime parameter is true   Can't be specified if RestoreType parameter is copy-on-write    Example: 2015-03-07T23:45:00Z 
        public let restoreToTime: TimeStamp?
        /// The identifier of the source DB cluster from which to restore. Constraints:   Must match the identifier of an existing DBCluster.  
        public let sourceDBClusterIdentifier: String
        /// The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used. Constraints:   If supplied, must match the name of an existing DB cluster parameter group.   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.  
        public let dBClusterParameterGroupName: String?
        /// A value that is set to true to restore the DB cluster to the latest restorable backup time, and false otherwise.  Default: false  Constraints: Can't be specified if RestoreToTime parameter is provided.
        public let useLatestRestorableTime: Bool?
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// The DB subnet group name to use for the new DB cluster. Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup 
        public let dBSubnetGroupName: String?
        /// The name of the option group for the new DB cluster.
        public let optionGroupName: String?
        /// The list of logs that the restored DB cluster is to export to CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs in the Amazon Aurora User Guide.
        public let enableCloudwatchLogsExports: [String]?
        /// The target backtrack window, in seconds. To disable backtracking, set this value to 0. Default: 0 Constraints:   If specified, this value must be set to a number from 0 to 259,200 (72 hours).  
        public let backtrackWindow: Int64?
        /// The name of the new DB cluster to be created. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens  
        public let dBClusterIdentifier: String
        /// The type of restore to be performed. You can specify one of the following values:    full-copy - The new DB cluster is restored as a full copy of the source DB cluster.    copy-on-write - The new DB cluster is restored as a clone of the source DB cluster.   Constraints: You can't specify copy-on-write if the engine version of the source DB cluster is earlier than 1.11. If you don't specify a RestoreType value, then the new DB cluster is restored as a full copy of the source DB cluster.
        public let restoreType: String?
        /// The port number on which the new DB cluster accepts connections. Constraints: A value from 1150-65535.  Default: The default port for the engine.
        public let port: Int32?
        /// A list of VPC security groups that the new DB cluster belongs to.
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// Indicates if the DB cluster should have deletion protection enabled. The database can't be deleted when this value is set to true. The default is false. 
        public let deletionProtection: Bool?
        public let tags: TagList?

        public init(kmsKeyId: String? = nil, restoreToTime: TimeStamp? = nil, sourceDBClusterIdentifier: String, dBClusterParameterGroupName: String? = nil, useLatestRestorableTime: Bool? = nil, enableIAMDatabaseAuthentication: Bool? = nil, dBSubnetGroupName: String? = nil, optionGroupName: String? = nil, enableCloudwatchLogsExports: [String]? = nil, backtrackWindow: Int64? = nil, dBClusterIdentifier: String, restoreType: String? = nil, port: Int32? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, deletionProtection: Bool? = nil, tags: TagList? = nil) {
            self.kmsKeyId = kmsKeyId
            self.restoreToTime = restoreToTime
            self.sourceDBClusterIdentifier = sourceDBClusterIdentifier
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.useLatestRestorableTime = useLatestRestorableTime
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.dBSubnetGroupName = dBSubnetGroupName
            self.optionGroupName = optionGroupName
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.backtrackWindow = backtrackWindow
            self.dBClusterIdentifier = dBClusterIdentifier
            self.restoreType = restoreType
            self.port = port
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.deletionProtection = deletionProtection
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case restoreToTime = "RestoreToTime"
            case sourceDBClusterIdentifier = "SourceDBClusterIdentifier"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case useLatestRestorableTime = "UseLatestRestorableTime"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case optionGroupName = "OptionGroupName"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case backtrackWindow = "BacktrackWindow"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case restoreType = "RestoreType"
            case port = "Port"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case deletionProtection = "DeletionProtection"
            case tags = "Tags"
        }
    }

    public struct DBClusterOptionGroupMemberships: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterOptionGroup", required: false, type: .list)
        ]
        public let dBClusterOptionGroup: [DBClusterOptionGroupStatus]?

        public init(dBClusterOptionGroup: [DBClusterOptionGroupStatus]? = nil) {
            self.dBClusterOptionGroup = dBClusterOptionGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterOptionGroup = "DBClusterOptionGroup"
        }
    }

    public struct DescribeDBParametersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "DBParameterGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Source", required: false, type: .string)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// The name of a specific DB parameter group to return details for. Constraints:   If supplied, must match the name of an existing DBParameterGroup.  
        public let dBParameterGroupName: String
        ///  An optional pagination token provided by a previous DescribeDBParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The parameter types to return. Default: All parameter types returned Valid Values: user | system | engine-default 
        public let source: String?

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, dBParameterGroupName: String, marker: String? = nil, source: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.dBParameterGroupName = dBParameterGroupName
            self.marker = marker
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case dBParameterGroupName = "DBParameterGroupName"
            case marker = "Marker"
            case source = "Source"
        }
    }

    public struct DescribeDBInstancesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A filter that specifies one or more DB instances to describe. Supported filters:    db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.    db-instance-id - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.  
        public let filters: FilterList?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive. Constraints:   If supplied, must match the identifier of an existing DBInstance.  
        public let dBInstanceIdentifier: String?
        ///  An optional pagination token provided by a previous DescribeDBInstances request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, dBInstanceIdentifier: String? = nil, marker: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case marker = "Marker"
        }
    }

    public struct ProcessorFeatureList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProcessorFeature", required: false, type: .list)
        ]
        public let processorFeature: [ProcessorFeature]?

        public init(processorFeature: [ProcessorFeature]? = nil) {
            self.processorFeature = processorFeature
        }

        private enum CodingKeys: String, CodingKey {
            case processorFeature = "ProcessorFeature"
        }
    }

    public struct OptionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionVersion", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "OptionSettings", required: false, type: .structure), 
            AWSShapeMember(label: "VpcSecurityGroupMemberships", required: false, type: .structure), 
            AWSShapeMember(label: "DBSecurityGroupMemberships", required: false, type: .structure), 
            AWSShapeMember(label: "OptionName", required: true, type: .string)
        ]
        /// The version for the option.
        public let optionVersion: String?
        /// The optional port for the option.
        public let port: Int32?
        /// The option settings to include in an option group.
        public let optionSettings: OptionSettingsList?
        /// A list of VpcSecurityGroupMemebrship name strings used for this option.
        public let vpcSecurityGroupMemberships: VpcSecurityGroupIdList?
        /// A list of DBSecurityGroupMemebrship name strings used for this option.
        public let dBSecurityGroupMemberships: DBSecurityGroupNameList?
        /// The configuration of options to include in a group.
        public let optionName: String

        public init(optionVersion: String? = nil, port: Int32? = nil, optionSettings: OptionSettingsList? = nil, vpcSecurityGroupMemberships: VpcSecurityGroupIdList? = nil, dBSecurityGroupMemberships: DBSecurityGroupNameList? = nil, optionName: String) {
            self.optionVersion = optionVersion
            self.port = port
            self.optionSettings = optionSettings
            self.vpcSecurityGroupMemberships = vpcSecurityGroupMemberships
            self.dBSecurityGroupMemberships = dBSecurityGroupMemberships
            self.optionName = optionName
        }

        private enum CodingKeys: String, CodingKey {
            case optionVersion = "OptionVersion"
            case port = "Port"
            case optionSettings = "OptionSettings"
            case vpcSecurityGroupMemberships = "VpcSecurityGroupMemberships"
            case dBSecurityGroupMemberships = "DBSecurityGroupMemberships"
            case optionName = "OptionName"
        }
    }

    public struct RemoveTagsFromResourceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceName", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see  Constructing an ARN for Amazon RDS in the Amazon RDS User Guide. 
        public let resourceName: String
        /// The tag key (name) of the tag to be removed.
        public let tagKeys: [String]

        public init(resourceName: String, tagKeys: [String]) {
            self.resourceName = resourceName
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceName = "ResourceName"
            case tagKeys = "TagKeys"
        }
    }

    public struct DescribeDBSnapshotAttributesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotAttributesResult", required: false, type: .structure)
        ]
        public let dBSnapshotAttributesResult: DBSnapshotAttributesResult?

        public init(dBSnapshotAttributesResult: DBSnapshotAttributesResult? = nil) {
            self.dBSnapshotAttributesResult = dBSnapshotAttributesResult
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotAttributesResult = "DBSnapshotAttributesResult"
        }
    }

    public struct PendingCloudwatchLogsExports: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogTypesToEnable", required: false, type: .list), 
            AWSShapeMember(label: "LogTypesToDisable", required: false, type: .list)
        ]
        /// Log types that are in the process of being deactivated. After they are deactivated, these log types aren't exported to CloudWatch Logs.
        public let logTypesToEnable: [String]?
        /// Log types that are in the process of being enabled. After they are enabled, these log types are exported to CloudWatch Logs.
        public let logTypesToDisable: [String]?

        public init(logTypesToEnable: [String]? = nil, logTypesToDisable: [String]? = nil) {
            self.logTypesToEnable = logTypesToEnable
            self.logTypesToDisable = logTypesToDisable
        }

        private enum CodingKeys: String, CodingKey {
            case logTypesToEnable = "LogTypesToEnable"
            case logTypesToDisable = "LogTypesToDisable"
        }
    }

    public struct DescribePendingMaintenanceActionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "ResourceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A filter that specifies one or more resources to return pending maintenance actions for. Supported filters:    db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.    db-instance-id - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.  
        public let filters: FilterList?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// The ARN of a resource to return pending maintenance actions for.
        public let resourceIdentifier: String?
        ///  An optional pagination token provided by a previous DescribePendingMaintenanceActions request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by MaxRecords. 
        public let marker: String?

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, resourceIdentifier: String? = nil, marker: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.resourceIdentifier = resourceIdentifier
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case resourceIdentifier = "ResourceIdentifier"
            case marker = "Marker"
        }
    }

    public struct DeleteDBClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .structure)
        ]
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct RecurringCharge: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecurringChargeAmount", required: false, type: .double), 
            AWSShapeMember(label: "RecurringChargeFrequency", required: false, type: .string)
        ]
        /// The amount of the recurring charge.
        public let recurringChargeAmount: Double?
        /// The frequency of the recurring charge.
        public let recurringChargeFrequency: String?

        public init(recurringChargeAmount: Double? = nil, recurringChargeFrequency: String? = nil) {
            self.recurringChargeAmount = recurringChargeAmount
            self.recurringChargeFrequency = recurringChargeFrequency
        }

        private enum CodingKeys: String, CodingKey {
            case recurringChargeAmount = "RecurringChargeAmount"
            case recurringChargeFrequency = "RecurringChargeFrequency"
        }
    }

    public struct DBClusterSnapshot: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .structure), 
            AWSShapeMember(label: "SourceDBClusterSnapshotArn", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "MasterUsername", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "PercentProgress", required: false, type: .integer), 
            AWSShapeMember(label: "ClusterCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SnapshotType", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterSnapshotArn", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "IAMDatabaseAuthenticationEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "StorageEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "Status", required: false, type: .string)
        ]
        /// Provides the list of EC2 Availability Zones that instances in the DB cluster snapshot can be restored in.
        public let availabilityZones: AvailabilityZones?
        /// If the DB cluster snapshot was copied from a source DB cluster snapshot, the Amazon Resource Name (ARN) for the source DB cluster snapshot, otherwise, a null value.
        public let sourceDBClusterSnapshotArn: String?
        /// If StorageEncrypted is true, the AWS KMS key identifier for the encrypted DB cluster snapshot.
        public let kmsKeyId: String?
        /// Provides the version of the database engine for this DB cluster snapshot.
        public let engineVersion: String?
        /// Provides the VPC ID associated with the DB cluster snapshot.
        public let vpcId: String?
        /// Specifies the identifier for the DB cluster snapshot.
        public let dBClusterSnapshotIdentifier: String?
        /// Provides the master username for the DB cluster snapshot.
        public let masterUsername: String?
        /// Specifies the DB cluster identifier of the DB cluster that this DB cluster snapshot was created from.
        public let dBClusterIdentifier: String?
        /// Specifies the percentage of the estimated data that has been transferred.
        public let percentProgress: Int32?
        /// Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).
        public let clusterCreateTime: TimeStamp?
        /// Specifies the allocated storage size in gibibytes (GiB).
        public let allocatedStorage: Int32?
        /// Specifies the name of the database engine.
        public let engine: String?
        /// Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).
        public let snapshotCreateTime: TimeStamp?
        /// Provides the type of the DB cluster snapshot.
        public let snapshotType: String?
        /// The Amazon Resource Name (ARN) for the DB cluster snapshot.
        public let dBClusterSnapshotArn: String?
        /// Specifies the port that the DB cluster was listening on at the time of the snapshot.
        public let port: Int32?
        /// True if mapping of AWS Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.
        public let iAMDatabaseAuthenticationEnabled: Bool?
        /// Provides the license model information for this DB cluster snapshot.
        public let licenseModel: String?
        /// Specifies whether the DB cluster snapshot is encrypted.
        public let storageEncrypted: Bool?
        /// Specifies the status of this DB cluster snapshot.
        public let status: String?

        public init(availabilityZones: AvailabilityZones? = nil, sourceDBClusterSnapshotArn: String? = nil, kmsKeyId: String? = nil, engineVersion: String? = nil, vpcId: String? = nil, dBClusterSnapshotIdentifier: String? = nil, masterUsername: String? = nil, dBClusterIdentifier: String? = nil, percentProgress: Int32? = nil, clusterCreateTime: TimeStamp? = nil, allocatedStorage: Int32? = nil, engine: String? = nil, snapshotCreateTime: TimeStamp? = nil, snapshotType: String? = nil, dBClusterSnapshotArn: String? = nil, port: Int32? = nil, iAMDatabaseAuthenticationEnabled: Bool? = nil, licenseModel: String? = nil, storageEncrypted: Bool? = nil, status: String? = nil) {
            self.availabilityZones = availabilityZones
            self.sourceDBClusterSnapshotArn = sourceDBClusterSnapshotArn
            self.kmsKeyId = kmsKeyId
            self.engineVersion = engineVersion
            self.vpcId = vpcId
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
            self.masterUsername = masterUsername
            self.dBClusterIdentifier = dBClusterIdentifier
            self.percentProgress = percentProgress
            self.clusterCreateTime = clusterCreateTime
            self.allocatedStorage = allocatedStorage
            self.engine = engine
            self.snapshotCreateTime = snapshotCreateTime
            self.snapshotType = snapshotType
            self.dBClusterSnapshotArn = dBClusterSnapshotArn
            self.port = port
            self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
            self.licenseModel = licenseModel
            self.storageEncrypted = storageEncrypted
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case sourceDBClusterSnapshotArn = "SourceDBClusterSnapshotArn"
            case kmsKeyId = "KmsKeyId"
            case engineVersion = "EngineVersion"
            case vpcId = "VpcId"
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
            case masterUsername = "MasterUsername"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case percentProgress = "PercentProgress"
            case clusterCreateTime = "ClusterCreateTime"
            case allocatedStorage = "AllocatedStorage"
            case engine = "Engine"
            case snapshotCreateTime = "SnapshotCreateTime"
            case snapshotType = "SnapshotType"
            case dBClusterSnapshotArn = "DBClusterSnapshotArn"
            case port = "Port"
            case iAMDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
            case licenseModel = "LicenseModel"
            case storageEncrypted = "StorageEncrypted"
            case status = "Status"
        }
    }

    public struct CreateEventSubscriptionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .structure)
        ]
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct DBClusterParameterGroupList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterParameterGroup", required: false, type: .list)
        ]
        public let dBClusterParameterGroup: [DBClusterParameterGroup]?

        public init(dBClusterParameterGroup: [DBClusterParameterGroup]? = nil) {
            self.dBClusterParameterGroup = dBClusterParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroup = "DBClusterParameterGroup"
        }
    }

    public struct FailoverDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetDBInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string)
        ]
        /// The name of the instance to promote to the primary instance. You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, mydbcluster-replica1.
        public let targetDBInstanceIdentifier: String?
        /// A DB cluster identifier to force a failover for. This parameter is not case-sensitive. Constraints:   Must match the identifier of an existing DBCluster.  
        public let dBClusterIdentifier: String

        public init(targetDBInstanceIdentifier: String? = nil, dBClusterIdentifier: String) {
            self.targetDBInstanceIdentifier = targetDBInstanceIdentifier
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case targetDBInstanceIdentifier = "TargetDBInstanceIdentifier"
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct CopyDBClusterSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetDBClusterSnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "CopyTags", required: false, type: .boolean), 
            AWSShapeMember(label: "SourceDBClusterSnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "PreSignedUrl", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example: my-cluster-snapshot2 
        public let targetDBClusterSnapshotIdentifier: String
        /// True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
        public let copyTags: Bool?
        /// The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive. You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another. Constraints:   Must specify a valid system snapshot in the "available" state.   If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.   If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to  Copying Snapshots Across AWS Regions in the Amazon Aurora User Guide.    Example: my-cluster-snapshot1 
        public let sourceDBClusterSnapshotIdentifier: String
        /// The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.  If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for KmsKeyId to encrypt the copy with a new KMS encryption key. If you don't specify a value for KmsKeyId, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.  If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for KmsKeyId.  To copy an encrypted DB cluster snapshot to another AWS Region, you must set KmsKeyId to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. If you copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.
        public let kmsKeyId: String?
        /// The URL that contains a Signature Version 4 signed request for the CopyDBClusterSnapshot API action in the AWS Region that contains the source DB cluster snapshot to copy. The PreSignedUrl parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. The pre-signed URL must be a valid request for the CopyDBSClusterSnapshot API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:    KmsKeyId - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the CopyDBClusterSnapshot action that is called in the destination AWS Region, and the action contained in the pre-signed URL.    DestinationRegion - The name of the AWS Region that the DB cluster snapshot will be created in.    SourceDBClusterSnapshotIdentifier - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your SourceDBClusterSnapshotIdentifier looks like the following example: arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115.   To learn how to generate a Signature Version 4 signed request, see  Authenticating Requests: Using Query Parameters (AWS Signature Version 4) and  Signature Version 4 Signing Process.
        public let preSignedUrl: String?
        public let tags: TagList?

        public init(targetDBClusterSnapshotIdentifier: String, copyTags: Bool? = nil, sourceDBClusterSnapshotIdentifier: String, kmsKeyId: String? = nil, preSignedUrl: String? = nil, tags: TagList? = nil) {
            self.targetDBClusterSnapshotIdentifier = targetDBClusterSnapshotIdentifier
            self.copyTags = copyTags
            self.sourceDBClusterSnapshotIdentifier = sourceDBClusterSnapshotIdentifier
            self.kmsKeyId = kmsKeyId
            self.preSignedUrl = preSignedUrl
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case targetDBClusterSnapshotIdentifier = "TargetDBClusterSnapshotIdentifier"
            case copyTags = "CopyTags"
            case sourceDBClusterSnapshotIdentifier = "SourceDBClusterSnapshotIdentifier"
            case kmsKeyId = "KmsKeyId"
            case preSignedUrl = "PreSignedUrl"
            case tags = "Tags"
        }
    }

    public struct DescribeDBSubnetGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The name of the DB subnet group to return details for.
        public let dBSubnetGroupName: String?

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, marker: String? = nil, dBSubnetGroupName: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
            self.dBSubnetGroupName = dBSubnetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case dBSubnetGroupName = "DBSubnetGroupName"
        }
    }

    public struct MinimumEngineVersionPerAllowedValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedValue", required: false, type: .string), 
            AWSShapeMember(label: "MinimumEngineVersion", required: false, type: .string)
        ]
        /// The allowed value for an option setting.
        public let allowedValue: String?
        /// The minimum DB engine version required for the allowed value.
        public let minimumEngineVersion: String?

        public init(allowedValue: String? = nil, minimumEngineVersion: String? = nil) {
            self.allowedValue = allowedValue
            self.minimumEngineVersion = minimumEngineVersion
        }

        private enum CodingKeys: String, CodingKey {
            case allowedValue = "AllowedValue"
            case minimumEngineVersion = "MinimumEngineVersion"
        }
    }

    public struct OptionGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowsVpcAndNonVpcInstanceMemberships", required: false, type: .boolean), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "MajorEngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "EngineName", required: false, type: .string), 
            AWSShapeMember(label: "Options", required: false, type: .structure), 
            AWSShapeMember(label: "OptionGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupDescription", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string)
        ]
        /// Indicates whether this option group can be applied to both VPC and non-VPC instances. The value true indicates the option group can be applied to both VPC and non-VPC instances. 
        public let allowsVpcAndNonVpcInstanceMemberships: Bool?
        /// If AllowsVpcAndNonVpcInstanceMemberships is false, this field is blank. If AllowsVpcAndNonVpcInstanceMemberships is true and this field is blank, then this option group can be applied to both VPC and non-VPC instances. If this field contains a value, then this option group can only be applied to instances that are in the VPC indicated by this field. 
        public let vpcId: String?
        /// Indicates the major engine version associated with this option group.
        public let majorEngineVersion: String?
        /// Indicates the name of the engine that this option group can be applied to.
        public let engineName: String?
        /// Indicates what options are available in the option group.
        public let options: OptionsList?
        /// The Amazon Resource Name (ARN) for the option group.
        public let optionGroupArn: String?
        /// Provides a description of the option group.
        public let optionGroupDescription: String?
        /// Specifies the name of the option group.
        public let optionGroupName: String?

        public init(allowsVpcAndNonVpcInstanceMemberships: Bool? = nil, vpcId: String? = nil, majorEngineVersion: String? = nil, engineName: String? = nil, options: OptionsList? = nil, optionGroupArn: String? = nil, optionGroupDescription: String? = nil, optionGroupName: String? = nil) {
            self.allowsVpcAndNonVpcInstanceMemberships = allowsVpcAndNonVpcInstanceMemberships
            self.vpcId = vpcId
            self.majorEngineVersion = majorEngineVersion
            self.engineName = engineName
            self.options = options
            self.optionGroupArn = optionGroupArn
            self.optionGroupDescription = optionGroupDescription
            self.optionGroupName = optionGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case allowsVpcAndNonVpcInstanceMemberships = "AllowsVpcAndNonVpcInstanceMemberships"
            case vpcId = "VpcId"
            case majorEngineVersion = "MajorEngineVersion"
            case engineName = "EngineName"
            case options = "Options"
            case optionGroupArn = "OptionGroupArn"
            case optionGroupDescription = "OptionGroupDescription"
            case optionGroupName = "OptionGroupName"
        }
    }

    public struct CreateDBInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct EventCategoriesMapList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategoriesMap", required: false, type: .list)
        ]
        public let eventCategoriesMap: [EventCategoriesMap]?

        public init(eventCategoriesMap: [EventCategoriesMap]? = nil) {
            self.eventCategoriesMap = eventCategoriesMap
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategoriesMap = "EventCategoriesMap"
        }
    }

    public struct DeleteDBInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct RestoreDBInstanceFromS3Result: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct StartDBInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string)
        ]
        ///  The user-supplied instance identifier. 
        public let dBInstanceIdentifier: String

        public init(dBInstanceIdentifier: String) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
        }
    }

    public struct DescribeDBSnapshotsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DbiResourceId", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "IncludeShared", required: false, type: .boolean), 
            AWSShapeMember(label: "IncludePublic", required: false, type: .boolean), 
            AWSShapeMember(label: "SnapshotType", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// A specific DB resource ID to describe.
        public let dbiResourceId: String?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  An optional pagination token provided by a previous DescribeDBSnapshots request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        ///  A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with DBInstanceIdentifier. This value is stored as a lowercase string.  Constraints:   If supplied, must match the identifier of an existing DBSnapshot.   If this identifier is for an automated snapshot, the SnapshotType parameter must also be specified.  
        public let dBSnapshotIdentifier: String?
        /// True to include shared manual DB snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is false. You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the ModifyDBSnapshotAttribute API action.
        public let includeShared: Bool?
        /// True to include manual DB snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is false. You can share a manual DB snapshot as public by using the ModifyDBSnapshotAttribute API.
        public let includePublic: Bool?
        /// The type of snapshots to be returned. You can specify one of the following values:    automated - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.    manual - Return all DB snapshots that have been taken by my AWS account.    shared - Return all manual DB snapshots that have been shared to my AWS account.    public - Return all DB snapshots that have been marked as public.   If you don't specify a SnapshotType value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by setting the IncludeShared parameter to true. You can include public snapshots with these results by setting the IncludePublic parameter to true. The IncludeShared and IncludePublic parameters don't apply for SnapshotType values of manual or automated. The IncludePublic parameter doesn't apply when SnapshotType is set to shared. The IncludeShared parameter doesn't apply when SnapshotType is set to public.
        public let snapshotType: String?
        /// The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with DBSnapshotIdentifier. This parameter is not case-sensitive.  Constraints:   If supplied, must match the identifier of an existing DBInstance.  
        public let dBInstanceIdentifier: String?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(dbiResourceId: String? = nil, filters: FilterList? = nil, marker: String? = nil, dBSnapshotIdentifier: String? = nil, includeShared: Bool? = nil, includePublic: Bool? = nil, snapshotType: String? = nil, dBInstanceIdentifier: String? = nil, maxRecords: Int32? = nil) {
            self.dbiResourceId = dbiResourceId
            self.filters = filters
            self.marker = marker
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.includeShared = includeShared
            self.includePublic = includePublic
            self.snapshotType = snapshotType
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dbiResourceId = "DbiResourceId"
            case filters = "Filters"
            case marker = "Marker"
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case includeShared = "IncludeShared"
            case includePublic = "IncludePublic"
            case snapshotType = "SnapshotType"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DBClusterRoles: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterRole", required: false, type: .list)
        ]
        public let dBClusterRole: [DBClusterRole]?

        public init(dBClusterRole: [DBClusterRole]? = nil) {
            self.dBClusterRole = dBClusterRole
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterRole = "DBClusterRole"
        }
    }

    public struct Timezone: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TimezoneName", required: false, type: .string)
        ]
        /// The name of the time zone.
        public let timezoneName: String?

        public init(timezoneName: String? = nil) {
            self.timezoneName = timezoneName
        }

        private enum CodingKeys: String, CodingKey {
            case timezoneName = "TimezoneName"
        }
    }

    public struct DescribeDBClusterBacktracksMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "BacktrackIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string)
        ]
        /// A filter that specifies one or more DB clusters to describe. Supported filters include the following:    db-cluster-backtrack-id - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.    db-cluster-backtrack-status - Accepts any of the following backtrack status values:    applying     completed     failed     pending    The results list includes information about only the backtracks identified by these values. For more information about backtrack status values, see DBClusterBacktrack.  
        public let filters: FilterList?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous DescribeDBClusterBacktracks request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// If specified, this value is the backtrack identifier of the backtrack to be described. Constraints:   Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see A Universally Unique Identifier (UUID) URN Namespace.   Example: 123e4567-e89b-12d3-a456-426655440000 
        public let backtrackIdentifier: String?
        /// The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example: my-cluster1 
        public let dBClusterIdentifier: String

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, marker: String? = nil, backtrackIdentifier: String? = nil, dBClusterIdentifier: String) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
            self.backtrackIdentifier = backtrackIdentifier
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case backtrackIdentifier = "BacktrackIdentifier"
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct VpcSecurityGroupMembershipList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcSecurityGroupMembership", required: false, type: .list)
        ]
        public let vpcSecurityGroupMembership: [VpcSecurityGroupMembership]?

        public init(vpcSecurityGroupMembership: [VpcSecurityGroupMembership]? = nil) {
            self.vpcSecurityGroupMembership = vpcSecurityGroupMembership
        }

        private enum CodingKeys: String, CodingKey {
            case vpcSecurityGroupMembership = "VpcSecurityGroupMembership"
        }
    }

    public struct DBClusterOptionGroupStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterOptionGroupName", required: false, type: .string)
        ]
        /// Specifies the status of the DB cluster option group.
        public let status: String?
        /// Specifies the name of the DB cluster option group.
        public let dBClusterOptionGroupName: String?

        public init(status: String? = nil, dBClusterOptionGroupName: String? = nil) {
            self.status = status
            self.dBClusterOptionGroupName = dBClusterOptionGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case dBClusterOptionGroupName = "DBClusterOptionGroupName"
        }
    }

    public struct DBInstanceAutomatedBackup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "IAMDatabaseAuthenticationEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "MasterUsername", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "RestoreWindow", required: false, type: .structure), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "DbiResourceId", required: false, type: .string), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "Timezone", required: false, type: .string), 
            AWSShapeMember(label: "InstanceCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "Region", required: false, type: .string), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "TdeCredentialArn", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string)
        ]
        /// The Availability Zone that the automated backup was created in. For information on AWS Regions and Availability Zones, see Regions and Availability Zones.
        public let availabilityZone: String?
        /// The version of the database engine for the automated backup.
        public let engineVersion: String?
        /// The AWS KMS key ID for an automated backup. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key. 
        public let kmsKeyId: String?
        /// The customer id of the instance that is/was associated with the automated backup. 
        public let dBInstanceIdentifier: String?
        /// Provides the VPC ID associated with the DB instance
        public let vpcId: String?
        /// True if mapping of AWS Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.
        public let iAMDatabaseAuthenticationEnabled: Bool?
        /// The license model of an automated backup.
        public let masterUsername: String?
        /// The Amazon Resource Name (ARN) for the automated backup.
        public let dBInstanceArn: String?
        /// Earliest and latest time an instance can be restored to.
        public let restoreWindow: RestoreWindow?
        /// The option group the automated backup is associated with. If omitted, the default option group for the engine specified is used.
        public let optionGroupName: String?
        /// The identifier for the source DB instance, which can't be changed and which is unique to an AWS Region.
        public let dbiResourceId: String?
        /// Specifies whether the automated backup is encrypted.
        public let encrypted: Bool?
        /// The time zone of the automated backup. In most cases, the Timezone element is empty. Timezone content appears only for Microsoft SQL Server DB instances that were created with a time zone specified.
        public let timezone: String?
        /// Provides the date and time that the DB instance was created. 
        public let instanceCreateTime: TimeStamp?
        /// Specifies the allocated storage size in gibibytes (GiB).
        public let allocatedStorage: Int32?
        /// The AWS Region associated with the automated backup.
        public let region: String?
        /// The name of the database engine for this automated backup.
        public let engine: String?
        /// The IOPS (I/O operations per second) value for the automated backup. 
        public let iops: Int32?
        /// Specifies the storage type associated with the automated backup.
        public let storageType: String?
        /// The port number that the automated backup used for connections. Default: Inherits from the source DB instance Valid Values: 1150-65535 
        public let port: Int32?
        /// The ARN from the key store with which the automated backup is associated for TDE encryption.
        public let tdeCredentialArn: String?
        /// Provides a list of status information for an automated backup:    active - automated backups for current instances    retained - automated backups for deleted instances    creating - automated backups that are waiting for the first automated snapshot to be available.  
        public let status: String?
        /// License model information for the automated backup.
        public let licenseModel: String?

        public init(availabilityZone: String? = nil, engineVersion: String? = nil, kmsKeyId: String? = nil, dBInstanceIdentifier: String? = nil, vpcId: String? = nil, iAMDatabaseAuthenticationEnabled: Bool? = nil, masterUsername: String? = nil, dBInstanceArn: String? = nil, restoreWindow: RestoreWindow? = nil, optionGroupName: String? = nil, dbiResourceId: String? = nil, encrypted: Bool? = nil, timezone: String? = nil, instanceCreateTime: TimeStamp? = nil, allocatedStorage: Int32? = nil, region: String? = nil, engine: String? = nil, iops: Int32? = nil, storageType: String? = nil, port: Int32? = nil, tdeCredentialArn: String? = nil, status: String? = nil, licenseModel: String? = nil) {
            self.availabilityZone = availabilityZone
            self.engineVersion = engineVersion
            self.kmsKeyId = kmsKeyId
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.vpcId = vpcId
            self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
            self.masterUsername = masterUsername
            self.dBInstanceArn = dBInstanceArn
            self.restoreWindow = restoreWindow
            self.optionGroupName = optionGroupName
            self.dbiResourceId = dbiResourceId
            self.encrypted = encrypted
            self.timezone = timezone
            self.instanceCreateTime = instanceCreateTime
            self.allocatedStorage = allocatedStorage
            self.region = region
            self.engine = engine
            self.iops = iops
            self.storageType = storageType
            self.port = port
            self.tdeCredentialArn = tdeCredentialArn
            self.status = status
            self.licenseModel = licenseModel
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case engineVersion = "EngineVersion"
            case kmsKeyId = "KmsKeyId"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case vpcId = "VpcId"
            case iAMDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
            case masterUsername = "MasterUsername"
            case dBInstanceArn = "DBInstanceArn"
            case restoreWindow = "RestoreWindow"
            case optionGroupName = "OptionGroupName"
            case dbiResourceId = "DbiResourceId"
            case encrypted = "Encrypted"
            case timezone = "Timezone"
            case instanceCreateTime = "InstanceCreateTime"
            case allocatedStorage = "AllocatedStorage"
            case region = "Region"
            case engine = "Engine"
            case iops = "Iops"
            case storageType = "StorageType"
            case port = "Port"
            case tdeCredentialArn = "TdeCredentialArn"
            case status = "Status"
            case licenseModel = "LicenseModel"
        }
    }

    public struct Option: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionName", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "OptionDescription", required: false, type: .string), 
            AWSShapeMember(label: "OptionSettings", required: false, type: .structure), 
            AWSShapeMember(label: "DBSecurityGroupMemberships", required: false, type: .structure), 
            AWSShapeMember(label: "Persistent", required: false, type: .boolean), 
            AWSShapeMember(label: "VpcSecurityGroupMemberships", required: false, type: .structure), 
            AWSShapeMember(label: "OptionVersion", required: false, type: .string), 
            AWSShapeMember(label: "Permanent", required: false, type: .boolean)
        ]
        /// The name of the option.
        public let optionName: String?
        /// If required, the port configured for this option to use.
        public let port: Int32?
        /// The description of the option.
        public let optionDescription: String?
        /// The option settings for this option.
        public let optionSettings: OptionSettingConfigurationList?
        /// If the option requires access to a port, then this DB security group allows access to the port.
        public let dBSecurityGroupMemberships: DBSecurityGroupMembershipList?
        /// Indicate if this option is persistent.
        public let persistent: Bool?
        /// If the option requires access to a port, then this VPC security group allows access to the port.
        public let vpcSecurityGroupMemberships: VpcSecurityGroupMembershipList?
        /// The version of the option.
        public let optionVersion: String?
        /// Indicate if this option is permanent.
        public let permanent: Bool?

        public init(optionName: String? = nil, port: Int32? = nil, optionDescription: String? = nil, optionSettings: OptionSettingConfigurationList? = nil, dBSecurityGroupMemberships: DBSecurityGroupMembershipList? = nil, persistent: Bool? = nil, vpcSecurityGroupMemberships: VpcSecurityGroupMembershipList? = nil, optionVersion: String? = nil, permanent: Bool? = nil) {
            self.optionName = optionName
            self.port = port
            self.optionDescription = optionDescription
            self.optionSettings = optionSettings
            self.dBSecurityGroupMemberships = dBSecurityGroupMemberships
            self.persistent = persistent
            self.vpcSecurityGroupMemberships = vpcSecurityGroupMemberships
            self.optionVersion = optionVersion
            self.permanent = permanent
        }

        private enum CodingKeys: String, CodingKey {
            case optionName = "OptionName"
            case port = "Port"
            case optionDescription = "OptionDescription"
            case optionSettings = "OptionSettings"
            case dBSecurityGroupMemberships = "DBSecurityGroupMemberships"
            case persistent = "Persistent"
            case vpcSecurityGroupMemberships = "VpcSecurityGroupMemberships"
            case optionVersion = "OptionVersion"
            case permanent = "Permanent"
        }
    }

    public struct EventsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  A list of Event instances. 
        public let events: EventList?
        ///  An optional pagination token provided by a previous Events request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords . 
        public let marker: String?

        public init(events: EventList? = nil, marker: String? = nil) {
            self.events = events
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Events"
            case marker = "Marker"
        }
    }

    public struct DBClusterBacktrackList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterBacktrack", required: false, type: .list)
        ]
        public let dBClusterBacktrack: [DBClusterBacktrack]?

        public init(dBClusterBacktrack: [DBClusterBacktrack]? = nil) {
            self.dBClusterBacktrack = dBClusterBacktrack
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterBacktrack = "DBClusterBacktrack"
        }
    }

    public struct ModifyDBClusterSnapshotAttributeMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "ValuesToRemove", required: false, type: .structure), 
            AWSShapeMember(label: "AttributeName", required: true, type: .string), 
            AWSShapeMember(label: "ValuesToAdd", required: false, type: .structure)
        ]
        /// The identifier for the DB cluster snapshot to modify the attributes for.
        public let dBClusterSnapshotIdentifier: String
        /// A list of DB cluster snapshot attributes to remove from the attribute specified by AttributeName. To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or all to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify all, an AWS account whose account ID is explicitly added to the restore attribute can still copy or restore a manual DB cluster snapshot.
        public let valuesToRemove: AttributeValueList?
        /// The name of the DB cluster snapshot attribute to modify. To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to restore.
        public let attributeName: String
        /// A list of DB cluster snapshot attributes to add to the attribute specified by AttributeName. To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or all to make the manual DB cluster snapshot restorable by any AWS account. Do not add the all value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.
        public let valuesToAdd: AttributeValueList?

        public init(dBClusterSnapshotIdentifier: String, valuesToRemove: AttributeValueList? = nil, attributeName: String, valuesToAdd: AttributeValueList? = nil) {
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
            self.valuesToRemove = valuesToRemove
            self.attributeName = attributeName
            self.valuesToAdd = valuesToAdd
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
            case valuesToRemove = "ValuesToRemove"
            case attributeName = "AttributeName"
            case valuesToAdd = "ValuesToAdd"
        }
    }

    public struct ModifyDBInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MasterUserPassword", required: false, type: .string), 
            AWSShapeMember(label: "PerformanceInsightsKMSKeyId", required: false, type: .string), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "DomainIAMRoleName", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "UseDefaultProcessorFeatures", required: false, type: .boolean), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "ApplyImmediately", required: false, type: .boolean), 
            AWSShapeMember(label: "AllowMajorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "DeletionProtection", required: false, type: .boolean), 
            AWSShapeMember(label: "PromotionTier", required: false, type: .integer), 
            AWSShapeMember(label: "DBSecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "TdeCredentialArn", required: false, type: .string), 
            AWSShapeMember(label: "CACertificateIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "EnablePerformanceInsights", required: false, type: .boolean), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "CopyTagsToSnapshot", required: false, type: .boolean), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "TdeCredentialPassword", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "MonitoringInterval", required: false, type: .integer), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "Domain", required: false, type: .string), 
            AWSShapeMember(label: "MonitoringRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "PreferredBackupWindow", required: false, type: .string), 
            AWSShapeMember(label: "PerformanceInsightsRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "CloudwatchLogsExportConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "ProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "NewDBInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBPortNumber", required: false, type: .integer)
        ]
        /// The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".  Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the MasterUserPassword element exists in the PendingModifiedValues element of the operation response.   Amazon Aurora  Not applicable. The password for the master user is managed by the DB cluster. For more information, see ModifyDBCluster.  Default: Uses existing setting  MariaDB  Constraints: Must contain from 8 to 41 characters.  Microsoft SQL Server  Constraints: Must contain from 8 to 128 characters.  MySQL  Constraints: Must contain from 8 to 41 characters.  Oracle  Constraints: Must contain from 8 to 30 characters.  PostgreSQL  Constraints: Must contain from 8 to 128 characters.  Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked.  
        public let masterUserPassword: String?
        /// The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
        public let performanceInsightsKMSKeyId: String?
        /// The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups. Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the ApplyImmediately parameter is set to true for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.  Amazon Aurora  Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see ModifyDBCluster. Default: Uses existing setting Constraints:   Must be a value from 0 to 35   Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6 or later   Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5   Can't be set to 0 if the DB instance is a source to Read Replicas  
        public let backupRetentionPeriod: Int32?
        /// The name of the IAM role to use when making API calls to the Directory Service.
        public let domainIAMRoleName: String?
        ///  The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true for this request.  For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family. For information about valid engine versions, see CreateDBInstance, or call DescribeDBEngineVersions.
        public let engineVersion: String?
        ///  Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.  Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance
        public let optionGroupName: String?
        /// A value that specifies that the DB instance class of the DB instance uses its default processor features.
        public let useDefaultProcessorFeatures: Bool?
        /// The new compute and memory capacity of the DB instance, for example, db.m4.large. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class in the Amazon RDS User Guide.  If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless ApplyImmediately is specified as true for this request.  Default: Uses existing setting
        public let dBInstanceClass: String?
        /// Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the DB instance.   If this parameter is set to false, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to RebootDBInstance, or the next failure reboot. Review the table of parameters in Modifying a DB Instance and Using the Apply Immediately Parameter in the Amazon RDS User Guide. to see the impact that setting ApplyImmediately to true or false has for each modified parameter and to determine when the changes are applied.  Default: false 
        public let applyImmediately: Bool?
        /// Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.
        public let allowMajorVersionUpgrade: Bool?
        /// Indicates if the DB instance has deletion protection enabled. The database can't be deleted when this value is set to true. For more information, see  Deleting a DB Instance. 
        public let deletionProtection: Bool?
        /// A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see  Fault Tolerance for an Aurora DB Cluster in the Amazon Aurora User Guide.  Default: 1 Valid Values: 0 - 15
        public let promotionTier: Int32?
        /// A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible. Constraints:   If supplied, must match existing DBSecurityGroups.  
        public let dBSecurityGroups: DBSecurityGroupNameList?
        /// The license model for the DB instance. Valid values: license-included | bring-your-own-license | general-public-license 
        public let licenseModel: String?
        /// Specifies the storage type to be associated with the DB instance.  If you specify Provisioned IOPS (io1), you must also include a value for the Iops parameter.  If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance.   Valid values: standard | gp2 | io1  Default: io1 if the Iops parameter is specified, otherwise standard 
        public let storageType: String?
        /// The ARN from the key store with which to associate the instance for TDE encryption.
        public let tdeCredentialArn: String?
        /// Indicates the certificate that needs to be associated with the instance.
        public let cACertificateIdentifier: String?
        /// True to enable Performance Insights for the DB instance, and otherwise false. For more information, see Using Amazon Performance Insights in the Amazon Relational Database Service User Guide. 
        public let enablePerformanceInsights: Bool?
        /// The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see Updating the VPC for a DB Instance in the Amazon RDS User Guide.  Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify true for the ApplyImmediately parameter.  Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetGroup 
        public let dBSubnetGroupName: String?
        /// The DB instance identifier. This value is stored as a lowercase string. Constraints:   Must match the identifier of an existing DBInstance.  
        public let dBInstanceIdentifier: String
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. You can enable IAM database authentication for the following database engines  Amazon Aurora  Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see ModifyDBCluster.  MySQL    For MySQL 5.6, minor version 5.6.34 or higher   For MySQL 5.7, minor version 5.7.16 or higher   Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true for this request. 
        public let multiAZ: Bool?
        /// True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
        public let copyTagsToSnapshot: Bool?
        /// The new amount of storage (in gibibytes) to allocate for the DB instance.  For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value.  For the valid values for allocated storage for each engine, see CreateDBInstance. 
        public let allocatedStorage: Int32?
        /// The password for the given ARN from the key store in order to access the device.
        public let tdeCredentialPassword: String?
        /// The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window. Default: Uses existing setting Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.
        public let dBParameterGroupName: String?
        /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. If MonitoringRoleArn is specified, then you must also set MonitoringInterval to a value other than 0. Valid Values: 0, 1, 5, 10, 15, 30, 60 
        public let monitoringInterval: Int32?
        /// Boolean value that indicates if the DB instance has a publicly resolvable DNS name. Set to True to make the DB instance Internet-facing with a publicly resolvable DNS name, which resolves to a public IP address. Set to False to make the DB instance internal with a DNS name that resolves to a private IP address.   PubliclyAccessible only applies to DB instances in a VPC. The DB instance must be part of a public subnet and PubliclyAccessible must be true in order for it to be publicly accessible.  Changes to the PubliclyAccessible parameter are applied immediately regardless of the value of the ApplyImmediately parameter. Default: false
        public let publiclyAccessible: Bool?
        /// The Active Directory Domain to move the instance to. Specify none to remove the instance from its current domain. The domain must be created prior to this operation. Currently only a Microsoft SQL Server instance can be created in a Active Directory Domain. 
        public let domain: String?
        /// The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, go to To create an IAM role for Amazon RDS Enhanced Monitoring in the Amazon RDS User Guide.  If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn value.
        public let monitoringRoleArn: String?
        ///  The daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.   Amazon Aurora  Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see ModifyDBCluster. Constraints:   Must be in the format hh24:mi-hh24:mi   Must be in Universal Time Coordinated (UTC)   Must not conflict with the preferred maintenance window   Must be at least 30 minutes  
        public let preferredBackupWindow: String?
        /// The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
        public let performanceInsightsRetentionPeriod: Int32?
        /// The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied. Default: Uses existing setting Format: ddd:hh24:mi-ddd:hh24:mi Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Must be at least 30 minutes
        public let preferredMaintenanceWindow: String?
        /// A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.  Amazon Aurora  Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see ModifyDBCluster. Constraints:   If supplied, must match existing VpcSecurityGroupIds.  
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance.
        public let cloudwatchLogsExportConfiguration: CloudwatchLogsExportConfiguration?
        ///  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to true during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
        public let autoMinorVersionUpgrade: Bool?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        public let processorFeatures: ProcessorFeatureList?
        /// The new Provisioned IOPS (I/O operations per second) value for the RDS instance.  Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect.  If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance.  Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value.  Default: Uses existing setting
        public let iops: Int32?
        ///  The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set Apply Immediately to true, or will occur during the next maintenance window if Apply Immediately to false. This value is stored as a lowercase string.  Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   The first character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.   Example: mydbinstance 
        public let newDBInstanceIdentifier: String?
        /// The port number on which the database accepts connections. The value of the DBPortNumber parameter must not match any of the port values specified for options in the option group for the DB instance. Your database will restart when you change the DBPortNumber value regardless of the value of the ApplyImmediately parameter.  MySQL   Default: 3306   Valid Values: 1150-65535   MariaDB   Default: 3306   Valid Values: 1150-65535   PostgreSQL   Default: 5432   Valid Values: 1150-65535  Type: Integer  Oracle   Default: 1521   Valid Values: 1150-65535   SQL Server   Default: 1433   Valid Values: 1150-65535 except for 1434, 3389, 47001, 49152, and 49152 through 49156.   Amazon Aurora   Default: 3306   Valid Values: 1150-65535 
        public let dBPortNumber: Int32?

        public init(masterUserPassword: String? = nil, performanceInsightsKMSKeyId: String? = nil, backupRetentionPeriod: Int32? = nil, domainIAMRoleName: String? = nil, engineVersion: String? = nil, optionGroupName: String? = nil, useDefaultProcessorFeatures: Bool? = nil, dBInstanceClass: String? = nil, applyImmediately: Bool? = nil, allowMajorVersionUpgrade: Bool? = nil, deletionProtection: Bool? = nil, promotionTier: Int32? = nil, dBSecurityGroups: DBSecurityGroupNameList? = nil, licenseModel: String? = nil, storageType: String? = nil, tdeCredentialArn: String? = nil, cACertificateIdentifier: String? = nil, enablePerformanceInsights: Bool? = nil, dBSubnetGroupName: String? = nil, dBInstanceIdentifier: String, enableIAMDatabaseAuthentication: Bool? = nil, multiAZ: Bool? = nil, copyTagsToSnapshot: Bool? = nil, allocatedStorage: Int32? = nil, tdeCredentialPassword: String? = nil, dBParameterGroupName: String? = nil, monitoringInterval: Int32? = nil, publiclyAccessible: Bool? = nil, domain: String? = nil, monitoringRoleArn: String? = nil, preferredBackupWindow: String? = nil, performanceInsightsRetentionPeriod: Int32? = nil, preferredMaintenanceWindow: String? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, cloudwatchLogsExportConfiguration: CloudwatchLogsExportConfiguration? = nil, autoMinorVersionUpgrade: Bool? = nil, processorFeatures: ProcessorFeatureList? = nil, iops: Int32? = nil, newDBInstanceIdentifier: String? = nil, dBPortNumber: Int32? = nil) {
            self.masterUserPassword = masterUserPassword
            self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
            self.backupRetentionPeriod = backupRetentionPeriod
            self.domainIAMRoleName = domainIAMRoleName
            self.engineVersion = engineVersion
            self.optionGroupName = optionGroupName
            self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
            self.dBInstanceClass = dBInstanceClass
            self.applyImmediately = applyImmediately
            self.allowMajorVersionUpgrade = allowMajorVersionUpgrade
            self.deletionProtection = deletionProtection
            self.promotionTier = promotionTier
            self.dBSecurityGroups = dBSecurityGroups
            self.licenseModel = licenseModel
            self.storageType = storageType
            self.tdeCredentialArn = tdeCredentialArn
            self.cACertificateIdentifier = cACertificateIdentifier
            self.enablePerformanceInsights = enablePerformanceInsights
            self.dBSubnetGroupName = dBSubnetGroupName
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.multiAZ = multiAZ
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.allocatedStorage = allocatedStorage
            self.tdeCredentialPassword = tdeCredentialPassword
            self.dBParameterGroupName = dBParameterGroupName
            self.monitoringInterval = monitoringInterval
            self.publiclyAccessible = publiclyAccessible
            self.domain = domain
            self.monitoringRoleArn = monitoringRoleArn
            self.preferredBackupWindow = preferredBackupWindow
            self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.cloudwatchLogsExportConfiguration = cloudwatchLogsExportConfiguration
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.processorFeatures = processorFeatures
            self.iops = iops
            self.newDBInstanceIdentifier = newDBInstanceIdentifier
            self.dBPortNumber = dBPortNumber
        }

        private enum CodingKeys: String, CodingKey {
            case masterUserPassword = "MasterUserPassword"
            case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case domainIAMRoleName = "DomainIAMRoleName"
            case engineVersion = "EngineVersion"
            case optionGroupName = "OptionGroupName"
            case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
            case dBInstanceClass = "DBInstanceClass"
            case applyImmediately = "ApplyImmediately"
            case allowMajorVersionUpgrade = "AllowMajorVersionUpgrade"
            case deletionProtection = "DeletionProtection"
            case promotionTier = "PromotionTier"
            case dBSecurityGroups = "DBSecurityGroups"
            case licenseModel = "LicenseModel"
            case storageType = "StorageType"
            case tdeCredentialArn = "TdeCredentialArn"
            case cACertificateIdentifier = "CACertificateIdentifier"
            case enablePerformanceInsights = "EnablePerformanceInsights"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case multiAZ = "MultiAZ"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case allocatedStorage = "AllocatedStorage"
            case tdeCredentialPassword = "TdeCredentialPassword"
            case dBParameterGroupName = "DBParameterGroupName"
            case monitoringInterval = "MonitoringInterval"
            case publiclyAccessible = "PubliclyAccessible"
            case domain = "Domain"
            case monitoringRoleArn = "MonitoringRoleArn"
            case preferredBackupWindow = "PreferredBackupWindow"
            case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case cloudwatchLogsExportConfiguration = "CloudwatchLogsExportConfiguration"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case processorFeatures = "ProcessorFeatures"
            case iops = "Iops"
            case newDBInstanceIdentifier = "NewDBInstanceIdentifier"
            case dBPortNumber = "DBPortNumber"
        }
    }

    public struct PendingModifiedValues: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "MasterUserPassword", required: false, type: .string), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "CACertificateIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "ProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "PendingCloudwatchLogsExports", required: false, type: .structure), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string)
        ]
        /// Indicates the database engine version.
        public let engineVersion: String?
        ///  Contains the new DBInstanceIdentifier for the DB instance that will be applied or is currently being applied. 
        public let dBInstanceIdentifier: String?
        /// Indicates that the Single-AZ DB instance is to change to a Multi-AZ deployment.
        public let multiAZ: Bool?
        /// Contains the pending or currently-in-progress change of the master credentials for the DB instance.
        public let masterUserPassword: String?
        /// The new DB subnet group for the DB instance. 
        public let dBSubnetGroupName: String?
        /// Specifies the pending number of days for which automated backups are retained.
        public let backupRetentionPeriod: Int32?
        /// Specifies the identifier of the CA certificate for the DB instance.
        public let cACertificateIdentifier: String?
        ///  Contains the new DBInstanceClass for the DB instance that will be applied or is currently being applied. 
        public let dBInstanceClass: String?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        public let processorFeatures: ProcessorFeatureList?
        ///  Contains the new AllocatedStorage size for the DB instance that will be applied or is currently being applied. 
        public let allocatedStorage: Int32?
        public let pendingCloudwatchLogsExports: PendingCloudwatchLogsExports?
        /// Specifies the new Provisioned IOPS value for the DB instance that will be applied or is currently being applied.
        public let iops: Int32?
        /// Specifies the storage type to be associated with the DB instance.
        public let storageType: String?
        /// Specifies the pending port for the DB instance.
        public let port: Int32?
        /// The license model for the DB instance. Valid values: license-included | bring-your-own-license | general-public-license 
        public let licenseModel: String?

        public init(engineVersion: String? = nil, dBInstanceIdentifier: String? = nil, multiAZ: Bool? = nil, masterUserPassword: String? = nil, dBSubnetGroupName: String? = nil, backupRetentionPeriod: Int32? = nil, cACertificateIdentifier: String? = nil, dBInstanceClass: String? = nil, processorFeatures: ProcessorFeatureList? = nil, allocatedStorage: Int32? = nil, pendingCloudwatchLogsExports: PendingCloudwatchLogsExports? = nil, iops: Int32? = nil, storageType: String? = nil, port: Int32? = nil, licenseModel: String? = nil) {
            self.engineVersion = engineVersion
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.multiAZ = multiAZ
            self.masterUserPassword = masterUserPassword
            self.dBSubnetGroupName = dBSubnetGroupName
            self.backupRetentionPeriod = backupRetentionPeriod
            self.cACertificateIdentifier = cACertificateIdentifier
            self.dBInstanceClass = dBInstanceClass
            self.processorFeatures = processorFeatures
            self.allocatedStorage = allocatedStorage
            self.pendingCloudwatchLogsExports = pendingCloudwatchLogsExports
            self.iops = iops
            self.storageType = storageType
            self.port = port
            self.licenseModel = licenseModel
        }

        private enum CodingKeys: String, CodingKey {
            case engineVersion = "EngineVersion"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case multiAZ = "MultiAZ"
            case masterUserPassword = "MasterUserPassword"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case cACertificateIdentifier = "CACertificateIdentifier"
            case dBInstanceClass = "DBInstanceClass"
            case processorFeatures = "ProcessorFeatures"
            case allocatedStorage = "AllocatedStorage"
            case pendingCloudwatchLogsExports = "PendingCloudwatchLogsExports"
            case iops = "Iops"
            case storageType = "StorageType"
            case port = "Port"
            case licenseModel = "LicenseModel"
        }
    }

    public struct DescribeGlobalClustersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "GlobalClusterIdentifier", required: false, type: .string)
        ]
        /// A filter that specifies one or more global DB clusters to describe. Supported filters:    db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.  
        public let filters: FilterList?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous DescribeGlobalClusters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        ///  The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive.  Constraints:   If supplied, must match an existing DBClusterIdentifier.  
        public let globalClusterIdentifier: String?

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, marker: String? = nil, globalClusterIdentifier: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
            self.globalClusterIdentifier = globalClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case globalClusterIdentifier = "GlobalClusterIdentifier"
        }
    }

    public struct GlobalClusterList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GlobalClusterMember", required: false, type: .list)
        ]
        public let globalClusterMember: [GlobalCluster]?

        public init(globalClusterMember: [GlobalCluster]? = nil) {
            self.globalClusterMember = globalClusterMember
        }

        private enum CodingKeys: String, CodingKey {
            case globalClusterMember = "GlobalClusterMember"
        }
    }

    public struct SourceRegionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceRegions", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A list of SourceRegion instances that contains each source AWS Region that the current AWS Region can get a Read Replica or a DB snapshot from.
        public let sourceRegions: SourceRegionList?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(sourceRegions: SourceRegionList? = nil, marker: String? = nil) {
            self.sourceRegions = sourceRegions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case sourceRegions = "SourceRegions"
            case marker = "Marker"
        }
    }

    public struct CreateDBClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .structure)
        ]
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct DescribeEventsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategories", required: false, type: .structure), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "SourceType", required: false, type: .enum), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SourceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// A list of event categories that trigger notifications for a event notification subscription.
        public let eventCategories: EventCategoriesList?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The event source to retrieve events for. If no value is specified, all events are returned.
        public let sourceType: SourceType?
        ///  The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.  Example: 2009-07-08T18:00Z
        public let endTime: TimeStamp?
        /// The identifier of the event source for which events are returned. If not specified, then all sources are included in the response. Constraints:   If SourceIdentifier is supplied, SourceType must also be provided.   If the source type is DBInstance, then a DBInstanceIdentifier must be supplied.   If the source type is DBSecurityGroup, a DBSecurityGroupName must be supplied.   If the source type is DBParameterGroup, a DBParameterGroupName must be supplied.   If the source type is DBSnapshot, a DBSnapshotIdentifier must be supplied.   Can't end with a hyphen or contain two consecutive hyphens.  
        public let sourceIdentifier: String?
        ///  The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.  Example: 2009-07-08T18:00Z
        public let startTime: TimeStamp?
        /// The number of minutes to retrieve events for. Default: 60
        public let duration: Int32?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(eventCategories: EventCategoriesList? = nil, filters: FilterList? = nil, marker: String? = nil, sourceType: SourceType? = nil, endTime: TimeStamp? = nil, sourceIdentifier: String? = nil, startTime: TimeStamp? = nil, duration: Int32? = nil, maxRecords: Int32? = nil) {
            self.eventCategories = eventCategories
            self.filters = filters
            self.marker = marker
            self.sourceType = sourceType
            self.endTime = endTime
            self.sourceIdentifier = sourceIdentifier
            self.startTime = startTime
            self.duration = duration
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategories = "EventCategories"
            case filters = "Filters"
            case marker = "Marker"
            case sourceType = "SourceType"
            case endTime = "EndTime"
            case sourceIdentifier = "SourceIdentifier"
            case startTime = "StartTime"
            case duration = "Duration"
            case maxRecords = "MaxRecords"
        }
    }

    public struct ModifyDBSnapshotAttributeMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ValuesToRemove", required: false, type: .structure), 
            AWSShapeMember(label: "AttributeName", required: true, type: .string), 
            AWSShapeMember(label: "ValuesToAdd", required: false, type: .structure), 
            AWSShapeMember(label: "DBSnapshotIdentifier", required: true, type: .string)
        ]
        /// A list of DB snapshot attributes to remove from the attribute specified by AttributeName. To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or all to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify all, an AWS account whose account ID is explicitly added to the restore attribute can still copy or restore the manual DB snapshot.
        public let valuesToRemove: AttributeValueList?
        /// The name of the DB snapshot attribute to modify. To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to restore.
        public let attributeName: String
        /// A list of DB snapshot attributes to add to the attribute specified by AttributeName. To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or all to make the manual DB snapshot restorable by any AWS account. Do not add the all value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.
        public let valuesToAdd: AttributeValueList?
        /// The identifier for the DB snapshot to modify the attributes for.
        public let dBSnapshotIdentifier: String

        public init(valuesToRemove: AttributeValueList? = nil, attributeName: String, valuesToAdd: AttributeValueList? = nil, dBSnapshotIdentifier: String) {
            self.valuesToRemove = valuesToRemove
            self.attributeName = attributeName
            self.valuesToAdd = valuesToAdd
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case valuesToRemove = "ValuesToRemove"
            case attributeName = "AttributeName"
            case valuesToAdd = "ValuesToAdd"
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
        }
    }

    public struct RestoreDBInstanceFromDBSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct SourceRegionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceRegion", required: false, type: .list)
        ]
        public let sourceRegion: [SourceRegion]?

        public init(sourceRegion: [SourceRegion]? = nil) {
            self.sourceRegion = sourceRegion
        }

        private enum CodingKeys: String, CodingKey {
            case sourceRegion = "SourceRegion"
        }
    }

    public struct DBSnapshotList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshot", required: false, type: .list)
        ]
        public let dBSnapshot: [DBSnapshot]?

        public init(dBSnapshot: [DBSnapshot]? = nil) {
            self.dBSnapshot = dBSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshot = "DBSnapshot"
        }
    }

    public struct ScalingConfigurationInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoPause", required: false, type: .boolean), 
            AWSShapeMember(label: "SecondsUntilAutoPause", required: false, type: .integer), 
            AWSShapeMember(label: "MaxCapacity", required: false, type: .integer), 
            AWSShapeMember(label: "MinCapacity", required: false, type: .integer)
        ]
        /// A value that indicates whether automatic pause is allowed for the Aurora DB cluster in serverless DB engine mode. 
        public let autoPause: Bool?
        /// The remaining amount of time, in seconds, before the Aurora DB cluster in serverless mode is paused. A DB cluster can be paused only when it's idle (it has no connections).
        public let secondsUntilAutoPause: Int32?
        /// The maximum capacity for an Aurora DB cluster in serverless DB engine mode.
        public let maxCapacity: Int32?
        /// The maximum capacity for the Aurora DB cluster in serverless DB engine mode.
        public let minCapacity: Int32?

        public init(autoPause: Bool? = nil, secondsUntilAutoPause: Int32? = nil, maxCapacity: Int32? = nil, minCapacity: Int32? = nil) {
            self.autoPause = autoPause
            self.secondsUntilAutoPause = secondsUntilAutoPause
            self.maxCapacity = maxCapacity
            self.minCapacity = minCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case autoPause = "AutoPause"
            case secondsUntilAutoPause = "SecondsUntilAutoPause"
            case maxCapacity = "MaxCapacity"
            case minCapacity = "MinCapacity"
        }
    }

    public struct DescribeDBClusterParameterGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterParameterGroupName", required: false, type: .string)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        ///  An optional pagination token provided by a previous DescribeDBClusterParameterGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The name of a specific DB cluster parameter group to return details for. Constraints:   If supplied, must match the name of an existing DBClusterParameterGroup.  
        public let dBClusterParameterGroupName: String?

        public init(filters: FilterList? = nil, maxRecords: Int32? = nil, marker: String? = nil, dBClusterParameterGroupName: String? = nil) {
            self.filters = filters
            self.maxRecords = maxRecords
            self.marker = marker
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case maxRecords = "MaxRecords"
            case marker = "Marker"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
        }
    }

    public struct ReadReplicaIdentifierList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReadReplicaIdentifier", required: false, type: .list)
        ]
        public let readReplicaIdentifier: [String]?

        public init(readReplicaIdentifier: [String]? = nil) {
            self.readReplicaIdentifier = readReplicaIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case readReplicaIdentifier = "ReadReplicaIdentifier"
        }
    }

    public struct AvailableProcessorFeature: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultValue", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AllowedValues", required: false, type: .string)
        ]
        /// The default value for the processor feature of the DB instance class.
        public let defaultValue: String?
        /// The name of the processor feature. Valid names are coreCount and threadsPerCore.
        public let name: String?
        /// The allowed values for the processor feature of the DB instance class.
        public let allowedValues: String?

        public init(defaultValue: String? = nil, name: String? = nil, allowedValues: String? = nil) {
            self.defaultValue = defaultValue
            self.name = name
            self.allowedValues = allowedValues
        }

        private enum CodingKeys: String, CodingKey {
            case defaultValue = "DefaultValue"
            case name = "Name"
            case allowedValues = "AllowedValues"
        }
    }

    public struct DBParameterGroupStatusList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroup", required: false, type: .list)
        ]
        public let dBParameterGroup: [DBParameterGroupStatus]?

        public init(dBParameterGroup: [DBParameterGroupStatus]? = nil) {
            self.dBParameterGroup = dBParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroup = "DBParameterGroup"
        }
    }

    public struct EC2SecurityGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupName", required: false, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupId", required: false, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupOwnerId", required: false, type: .string)
        ]
        /// Provides the status of the EC2 security group. Status can be "authorizing", "authorized", "revoking", and "revoked".
        public let status: String?
        /// Specifies the name of the EC2 security group.
        public let eC2SecurityGroupName: String?
        /// Specifies the id of the EC2 security group.
        public let eC2SecurityGroupId: String?
        ///  Specifies the AWS ID of the owner of the EC2 security group specified in the EC2SecurityGroupName field. 
        public let eC2SecurityGroupOwnerId: String?

        public init(status: String? = nil, eC2SecurityGroupName: String? = nil, eC2SecurityGroupId: String? = nil, eC2SecurityGroupOwnerId: String? = nil) {
            self.status = status
            self.eC2SecurityGroupName = eC2SecurityGroupName
            self.eC2SecurityGroupId = eC2SecurityGroupId
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case eC2SecurityGroupName = "EC2SecurityGroupName"
            case eC2SecurityGroupId = "EC2SecurityGroupId"
            case eC2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
        }
    }

    public struct CreateDBClusterParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterParameterGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: true, type: .string), 
            AWSShapeMember(label: "DBParameterGroupFamily", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// The name of the DB cluster parameter group. Constraints:   Must match the name of an existing DB cluster parameter group.    This value is stored as a lowercase string. 
        public let dBClusterParameterGroupName: String
        /// The description for the DB cluster parameter group.
        public let description: String
        /// The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.  Aurora MySQL  Example: aurora5.6, aurora-mysql5.7   Aurora PostgreSQL  Example: aurora-postgresql9.6 
        public let dBParameterGroupFamily: String
        public let tags: TagList?

        public init(dBClusterParameterGroupName: String, description: String, dBParameterGroupFamily: String, tags: TagList? = nil) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.description = description
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case description = "Description"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case tags = "Tags"
        }
    }

    public struct ModifyDBClusterSnapshotAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshotAttributesResult", required: false, type: .structure)
        ]
        public let dBClusterSnapshotAttributesResult: DBClusterSnapshotAttributesResult?

        public init(dBClusterSnapshotAttributesResult: DBClusterSnapshotAttributesResult? = nil) {
            self.dBClusterSnapshotAttributesResult = dBClusterSnapshotAttributesResult
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotAttributesResult = "DBClusterSnapshotAttributesResult"
        }
    }

    public struct DBClusterMember: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsClusterWriter", required: false, type: .boolean), 
            AWSShapeMember(label: "PromotionTier", required: false, type: .integer), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterParameterGroupStatus", required: false, type: .string)
        ]
        /// Value that is true if the cluster member is the primary instance for the DB cluster and false otherwise.
        public let isClusterWriter: Bool?
        /// A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see  Fault Tolerance for an Aurora DB Cluster in the Amazon Aurora User Guide. 
        public let promotionTier: Int32?
        /// Specifies the instance identifier for this member of the DB cluster.
        public let dBInstanceIdentifier: String?
        /// Specifies the status of the DB cluster parameter group for this member of the DB cluster.
        public let dBClusterParameterGroupStatus: String?

        public init(isClusterWriter: Bool? = nil, promotionTier: Int32? = nil, dBInstanceIdentifier: String? = nil, dBClusterParameterGroupStatus: String? = nil) {
            self.isClusterWriter = isClusterWriter
            self.promotionTier = promotionTier
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dBClusterParameterGroupStatus = dBClusterParameterGroupStatus
        }

        private enum CodingKeys: String, CodingKey {
            case isClusterWriter = "IsClusterWriter"
            case promotionTier = "PromotionTier"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dBClusterParameterGroupStatus = "DBClusterParameterGroupStatus"
        }
    }

    public struct DBClusterBacktrack: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BacktrackRequestCreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "BacktrackTo", required: false, type: .timestamp), 
            AWSShapeMember(label: "BacktrackedFrom", required: false, type: .timestamp), 
            AWSShapeMember(label: "BacktrackIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: false, type: .string)
        ]
        /// The timestamp of the time at which the backtrack was requested.
        public let backtrackRequestCreationTime: TimeStamp?
        /// The status of the backtrack. This property returns one of the following values:    applying - The backtrack is currently being applied to or rolled back from the DB cluster.    completed - The backtrack has successfully been applied to or rolled back from the DB cluster.    failed - An error occurred while the backtrack was applied to or rolled back from the DB cluster.    pending - The backtrack is currently pending application to or rollback from the DB cluster.  
        public let status: String?
        /// The timestamp of the time to which the DB cluster was backtracked.
        public let backtrackTo: TimeStamp?
        /// The timestamp of the time from which the DB cluster was backtracked.
        public let backtrackedFrom: TimeStamp?
        /// Contains the backtrack identifier.
        public let backtrackIdentifier: String?
        /// Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.
        public let dBClusterIdentifier: String?

        public init(backtrackRequestCreationTime: TimeStamp? = nil, status: String? = nil, backtrackTo: TimeStamp? = nil, backtrackedFrom: TimeStamp? = nil, backtrackIdentifier: String? = nil, dBClusterIdentifier: String? = nil) {
            self.backtrackRequestCreationTime = backtrackRequestCreationTime
            self.status = status
            self.backtrackTo = backtrackTo
            self.backtrackedFrom = backtrackedFrom
            self.backtrackIdentifier = backtrackIdentifier
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case backtrackRequestCreationTime = "BacktrackRequestCreationTime"
            case status = "Status"
            case backtrackTo = "BacktrackTo"
            case backtrackedFrom = "BacktrackedFrom"
            case backtrackIdentifier = "BacktrackIdentifier"
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct ModifyDBClusterEndpointMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StaticMembers", required: false, type: .list), 
            AWSShapeMember(label: "EndpointType", required: false, type: .string), 
            AWSShapeMember(label: "ExcludedMembers", required: false, type: .list), 
            AWSShapeMember(label: "DBClusterEndpointIdentifier", required: true, type: .string)
        ]
        /// List of DB instance identifiers that are part of the custom endpoint group.
        public let staticMembers: [String]?
        /// The type of the endpoint. One of: READER, ANY. 
        public let endpointType: String?
        /// List of DB instance identifiers that aren't part of the custom endpoint group. All other eligible instances are reachable through the custom endpoint. Only relevant if the list of static members is empty.
        public let excludedMembers: [String]?
        /// The identifier of the endpoint to modify. This parameter is stored as a lowercase string.
        public let dBClusterEndpointIdentifier: String

        public init(staticMembers: [String]? = nil, endpointType: String? = nil, excludedMembers: [String]? = nil, dBClusterEndpointIdentifier: String) {
            self.staticMembers = staticMembers
            self.endpointType = endpointType
            self.excludedMembers = excludedMembers
            self.dBClusterEndpointIdentifier = dBClusterEndpointIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case staticMembers = "StaticMembers"
            case endpointType = "EndpointType"
            case excludedMembers = "ExcludedMembers"
            case dBClusterEndpointIdentifier = "DBClusterEndpointIdentifier"
        }
    }

    public struct EventSubscriptionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .list)
        ]
        public let eventSubscription: [EventSubscription]?

        public init(eventSubscription: [EventSubscription]? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct DescribeValidDBInstanceModificationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ValidDBInstanceModificationsMessage", required: false, type: .structure)
        ]
        public let validDBInstanceModificationsMessage: ValidDBInstanceModificationsMessage?

        public init(validDBInstanceModificationsMessage: ValidDBInstanceModificationsMessage? = nil) {
            self.validDBInstanceModificationsMessage = validDBInstanceModificationsMessage
        }

        private enum CodingKeys: String, CodingKey {
            case validDBInstanceModificationsMessage = "ValidDBInstanceModificationsMessage"
        }
    }

    public struct RestoreWindow: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LatestTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EarliestTime", required: false, type: .timestamp)
        ]
        /// The latest time you can restore an instance to.
        public let latestTime: TimeStamp?
        /// The earliest time you can restore an instance to.
        public let earliestTime: TimeStamp?

        public init(latestTime: TimeStamp? = nil, earliestTime: TimeStamp? = nil) {
            self.latestTime = latestTime
            self.earliestTime = earliestTime
        }

        private enum CodingKeys: String, CodingKey {
            case latestTime = "LatestTime"
            case earliestTime = "EarliestTime"
        }
    }

    public struct CreateDBClusterParameterGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterParameterGroup", required: false, type: .structure)
        ]
        public let dBClusterParameterGroup: DBClusterParameterGroup?

        public init(dBClusterParameterGroup: DBClusterParameterGroup? = nil) {
            self.dBClusterParameterGroup = dBClusterParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroup = "DBClusterParameterGroup"
        }
    }

    public struct AccountQuotaList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountQuota", required: false, type: .list)
        ]
        public let accountQuota: [AccountQuota]?

        public init(accountQuota: [AccountQuota]? = nil) {
            self.accountQuota = accountQuota
        }

        private enum CodingKeys: String, CodingKey {
            case accountQuota = "AccountQuota"
        }
    }

    public struct CreateDBSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIds", required: true, type: .structure), 
            AWSShapeMember(label: "DBSubnetGroupName", required: true, type: .string), 
            AWSShapeMember(label: "DBSubnetGroupDescription", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// The EC2 Subnet IDs for the DB subnet group.
        public let subnetIds: SubnetIdentifierList
        /// The name for the DB subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default. Example: mySubnetgroup 
        public let dBSubnetGroupName: String
        /// The description for the DB subnet group.
        public let dBSubnetGroupDescription: String
        public let tags: TagList?

        public init(subnetIds: SubnetIdentifierList, dBSubnetGroupName: String, dBSubnetGroupDescription: String, tags: TagList? = nil) {
            self.subnetIds = subnetIds
            self.dBSubnetGroupName = dBSubnetGroupName
            self.dBSubnetGroupDescription = dBSubnetGroupDescription
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIds = "SubnetIds"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case dBSubnetGroupDescription = "DBSubnetGroupDescription"
            case tags = "Tags"
        }
    }

    public struct ApplyPendingMaintenanceActionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptInType", required: true, type: .string), 
            AWSShapeMember(label: "ApplyAction", required: true, type: .string), 
            AWSShapeMember(label: "ResourceIdentifier", required: true, type: .string)
        ]
        /// A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type immediate can't be undone. Valid values:    immediate - Apply the maintenance action immediately.    next-maintenance - Apply the maintenance action during the next maintenance window for the resource.    undo-opt-in - Cancel any existing next-maintenance opt-in requests.  
        public let optInType: String
        /// The pending maintenance action to apply to this resource. Valid values: system-update, db-upgrade 
        public let applyAction: String
        /// The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see  Constructing an RDS Amazon Resource Name (ARN).
        public let resourceIdentifier: String

        public init(optInType: String, applyAction: String, resourceIdentifier: String) {
            self.optInType = optInType
            self.applyAction = applyAction
            self.resourceIdentifier = resourceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case optInType = "OptInType"
            case applyAction = "ApplyAction"
            case resourceIdentifier = "ResourceIdentifier"
        }
    }

    public struct EC2SecurityGroupList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EC2SecurityGroup", required: false, type: .list)
        ]
        public let eC2SecurityGroup: [EC2SecurityGroup]?

        public init(eC2SecurityGroup: [EC2SecurityGroup]? = nil) {
            self.eC2SecurityGroup = eC2SecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case eC2SecurityGroup = "EC2SecurityGroup"
        }
    }

    public struct RangeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Range", required: false, type: .list)
        ]
        public let range: [Range]?

        public init(range: [Range]? = nil) {
            self.range = range
        }

        private enum CodingKeys: String, CodingKey {
            case range = "Range"
        }
    }

    public struct DBInstanceStatusInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Normal", required: false, type: .boolean), 
            AWSShapeMember(label: "StatusType", required: false, type: .string)
        ]
        /// Status of the DB instance. For a StatusType of read replica, the values can be replicating, replication stop point set, replication stop point reached, error, stopped, or terminated.
        public let status: String?
        /// Details of the error if there is an error for the instance. If the instance is not in an error state, this value is blank.
        public let message: String?
        /// Boolean value that is true if the instance is operating normally, or false if the instance is in an error state.
        public let normal: Bool?
        /// This value is currently "read replication."
        public let statusType: String?

        public init(status: String? = nil, message: String? = nil, normal: Bool? = nil, statusType: String? = nil) {
            self.status = status
            self.message = message
            self.normal = normal
            self.statusType = statusType
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case message = "Message"
            case normal = "Normal"
            case statusType = "StatusType"
        }
    }

    public struct DBSnapshotAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeValues", required: false, type: .structure), 
            AWSShapeMember(label: "AttributeName", required: false, type: .string)
        ]
        /// The value or values for the manual DB snapshot attribute. If the AttributeName field is set to restore, then this element returns a list of IDs of the AWS accounts that are authorized to copy or restore the manual DB snapshot. If a value of all is in the list, then the manual DB snapshot is public and available for any AWS account to copy or restore.
        public let attributeValues: AttributeValueList?
        /// The name of the manual DB snapshot attribute. The attribute named restore refers to the list of AWS accounts that have permission to copy or restore the manual DB cluster snapshot. For more information, see the ModifyDBSnapshotAttribute API action.
        public let attributeName: String?

        public init(attributeValues: AttributeValueList? = nil, attributeName: String? = nil) {
            self.attributeValues = attributeValues
            self.attributeName = attributeName
        }

        private enum CodingKeys: String, CodingKey {
            case attributeValues = "AttributeValues"
            case attributeName = "AttributeName"
        }
    }

    public struct ValidDBInstanceModificationsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Storage", required: false, type: .structure), 
            AWSShapeMember(label: "ValidProcessorFeatures", required: false, type: .structure)
        ]
        /// Valid storage options for your DB instance. 
        public let storage: ValidStorageOptionsList?
        /// Valid processor features for your DB instance. 
        public let validProcessorFeatures: AvailableProcessorFeatureList?

        public init(storage: ValidStorageOptionsList? = nil, validProcessorFeatures: AvailableProcessorFeatureList? = nil) {
            self.storage = storage
            self.validProcessorFeatures = validProcessorFeatures
        }

        private enum CodingKeys: String, CodingKey {
            case storage = "Storage"
            case validProcessorFeatures = "ValidProcessorFeatures"
        }
    }

    public struct RestoreDBClusterFromSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EngineMode", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .structure), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "EnableCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "BacktrackWindow", required: false, type: .long), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Engine", required: true, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "ScalingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "DeletionProtection", required: false, type: .boolean)
        ]
        /// The DB engine mode of the DB cluster, either provisioned, serverless, or parallelquery.
        public let engineMode: String?
        /// Provides the list of Amazon EC2 Availability Zones that instances in the restored DB cluster can be created in.
        public let availabilityZones: AvailabilityZones?
        /// The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key. If you don't specify a value for the KmsKeyId parameter, then the following occurs:   If the DB snapshot or DB cluster snapshot in SnapshotIdentifier is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.   If the DB snapshot or DB cluster snapshot in SnapshotIdentifier is not encrypted, then the restored DB cluster is not encrypted.  
        public let kmsKeyId: String?
        /// The version of the database engine to use for the new DB cluster.
        public let engineVersion: String?
        /// The database name for the restored DB cluster.
        public let databaseName: String?
        /// The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, the default DB cluster parameter group for the specified engine is used. Constraints:   If supplied, must match the name of an existing default DB cluster parameter group.   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter.   Can't end with a hyphen or contain two consecutive hyphens.  
        public let dBClusterParameterGroupName: String?
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// The name of the DB subnet group to use for the new DB cluster. Constraints: If supplied, must match the name of an existing DB subnet group. Example: mySubnetgroup 
        public let dBSubnetGroupName: String?
        /// The identifier for the DB snapshot or DB cluster snapshot to restore from. You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot. Constraints:   Must match the identifier of an existing Snapshot.  
        public let snapshotIdentifier: String
        /// The name of the option group to use for the restored DB cluster.
        public let optionGroupName: String?
        /// The list of logs that the restored DB cluster is to export to Amazon CloudWatch Logs. The values in the list depend on the DB engine being used. For more information, see Publishing Database Logs to Amazon CloudWatch Logs  in the Amazon Aurora User Guide.
        public let enableCloudwatchLogsExports: [String]?
        /// The target backtrack window, in seconds. To disable backtracking, set this value to 0. Default: 0 Constraints:   If specified, this value must be set to a number from 0 to 259,200 (72 hours).  
        public let backtrackWindow: Int64?
        /// The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens   First character must be a letter   Can't end with a hyphen or contain two consecutive hyphens   Example: my-snapshot-id 
        public let dBClusterIdentifier: String
        /// The database engine to use for the new DB cluster. Default: The same as source Constraint: Must be compatible with the engine of the source
        public let engine: String
        /// The port number on which the new DB cluster accepts connections. Constraints: This value must be 1150-65535  Default: The same port as the original DB cluster.
        public let port: Int32?
        /// A list of VPC security groups that the new DB cluster will belong to.
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// The tags to be assigned to the restored DB cluster.
        public let tags: TagList?
        /// For DB clusters in serverless DB engine mode, the scaling properties of the DB cluster.
        public let scalingConfiguration: ScalingConfiguration?
        /// Indicates if the DB cluster should have deletion protection enabled. The database can't be deleted when this value is set to true. The default is false. 
        public let deletionProtection: Bool?

        public init(engineMode: String? = nil, availabilityZones: AvailabilityZones? = nil, kmsKeyId: String? = nil, engineVersion: String? = nil, databaseName: String? = nil, dBClusterParameterGroupName: String? = nil, enableIAMDatabaseAuthentication: Bool? = nil, dBSubnetGroupName: String? = nil, snapshotIdentifier: String, optionGroupName: String? = nil, enableCloudwatchLogsExports: [String]? = nil, backtrackWindow: Int64? = nil, dBClusterIdentifier: String, engine: String, port: Int32? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, tags: TagList? = nil, scalingConfiguration: ScalingConfiguration? = nil, deletionProtection: Bool? = nil) {
            self.engineMode = engineMode
            self.availabilityZones = availabilityZones
            self.kmsKeyId = kmsKeyId
            self.engineVersion = engineVersion
            self.databaseName = databaseName
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.dBSubnetGroupName = dBSubnetGroupName
            self.snapshotIdentifier = snapshotIdentifier
            self.optionGroupName = optionGroupName
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.backtrackWindow = backtrackWindow
            self.dBClusterIdentifier = dBClusterIdentifier
            self.engine = engine
            self.port = port
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.tags = tags
            self.scalingConfiguration = scalingConfiguration
            self.deletionProtection = deletionProtection
        }

        private enum CodingKeys: String, CodingKey {
            case engineMode = "EngineMode"
            case availabilityZones = "AvailabilityZones"
            case kmsKeyId = "KmsKeyId"
            case engineVersion = "EngineVersion"
            case databaseName = "DatabaseName"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case snapshotIdentifier = "SnapshotIdentifier"
            case optionGroupName = "OptionGroupName"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case backtrackWindow = "BacktrackWindow"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case engine = "Engine"
            case port = "Port"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case tags = "Tags"
            case scalingConfiguration = "ScalingConfiguration"
            case deletionProtection = "DeletionProtection"
        }
    }

    public struct FilterValueList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .list)
        ]
        public let value: [String]?

        public init(value: [String]? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct CreateDBSubnetGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSubnetGroup", required: false, type: .structure)
        ]
        public let dBSubnetGroup: DBSubnetGroup?

        public init(dBSubnetGroup: DBSubnetGroup? = nil) {
            self.dBSubnetGroup = dBSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroup = "DBSubnetGroup"
        }
    }

    public struct DBInstanceList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .list)
        ]
        public let dBInstance: [DBInstance]?

        public init(dBInstance: [DBInstance]? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct ParametersList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameter", required: false, type: .list)
        ]
        public let parameter: [Parameter]?

        public init(parameter: [Parameter]? = nil) {
            self.parameter = parameter
        }

        private enum CodingKeys: String, CodingKey {
            case parameter = "Parameter"
        }
    }

    public struct PromoteReadReplicaDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string)
        ]
        /// The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive.  Constraints:   Must match the identifier of an existing DBCluster Read Replica.   Example: my-cluster-replica1 
        public let dBClusterIdentifier: String

        public init(dBClusterIdentifier: String) {
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct DeleteDBClusterSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshotIdentifier", required: true, type: .string)
        ]
        /// The identifier of the DB cluster snapshot to delete. Constraints: Must be the name of an existing DB cluster snapshot in the available state.
        public let dBClusterSnapshotIdentifier: String

        public init(dBClusterSnapshotIdentifier: String) {
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
        }
    }

    public struct OptionGroupOptionSettingsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroupOptionSetting", required: false, type: .list)
        ]
        public let optionGroupOptionSetting: [OptionGroupOptionSetting]?

        public init(optionGroupOptionSetting: [OptionGroupOptionSetting]? = nil) {
            self.optionGroupOptionSetting = optionGroupOptionSetting
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroupOptionSetting = "OptionGroupOptionSetting"
        }
    }

    public struct OptionSettingsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionSetting", required: false, type: .list)
        ]
        public let optionSetting: [OptionSetting]?

        public init(optionSetting: [OptionSetting]? = nil) {
            self.optionSetting = optionSetting
        }

        private enum CodingKeys: String, CodingKey {
            case optionSetting = "OptionSetting"
        }
    }

    public struct DescribeDBClusterSnapshotAttributesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshotAttributesResult", required: false, type: .structure)
        ]
        public let dBClusterSnapshotAttributesResult: DBClusterSnapshotAttributesResult?

        public init(dBClusterSnapshotAttributesResult: DBClusterSnapshotAttributesResult? = nil) {
            self.dBClusterSnapshotAttributesResult = dBClusterSnapshotAttributesResult
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotAttributesResult = "DBClusterSnapshotAttributesResult"
        }
    }

    public struct DescribeValidDBInstanceModificationsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string)
        ]
        /// The customer identifier or the ARN of your DB instance. 
        public let dBInstanceIdentifier: String

        public init(dBInstanceIdentifier: String) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
        }
    }

    public struct CreateDBSecurityGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSecurityGroup", required: false, type: .structure)
        ]
        public let dBSecurityGroup: DBSecurityGroup?

        public init(dBSecurityGroup: DBSecurityGroup? = nil) {
            self.dBSecurityGroup = dBSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroup = "DBSecurityGroup"
        }
    }

    public struct ReadReplicaDBInstanceIdentifierList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReadReplicaDBInstanceIdentifier", required: false, type: .list)
        ]
        public let readReplicaDBInstanceIdentifier: [String]?

        public init(readReplicaDBInstanceIdentifier: [String]? = nil) {
            self.readReplicaDBInstanceIdentifier = readReplicaDBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case readReplicaDBInstanceIdentifier = "ReadReplicaDBInstanceIdentifier"
        }
    }

    public struct DBClusterList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .list)
        ]
        public let dBCluster: [DBCluster]?

        public init(dBCluster: [DBCluster]? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct GlobalClustersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GlobalClusters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  The list of global clusters returned by this request. 
        public let globalClusters: GlobalClusterList?
        ///  An optional pagination token provided by a previous DescribeGlobalClusters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(globalClusters: GlobalClusterList? = nil, marker: String? = nil) {
            self.globalClusters = globalClusters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case globalClusters = "GlobalClusters"
            case marker = "Marker"
        }
    }

    public struct OptionsConflictsWith: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionConflictName", required: false, type: .list)
        ]
        public let optionConflictName: [String]?

        public init(optionConflictName: [String]? = nil) {
            self.optionConflictName = optionConflictName
        }

        private enum CodingKeys: String, CodingKey {
            case optionConflictName = "OptionConflictName"
        }
    }

    public struct ModifyDBClusterParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: true, type: .structure), 
            AWSShapeMember(label: "DBClusterParameterGroupName", required: true, type: .string)
        ]
        /// A list of parameters in the DB cluster parameter group to modify.
        public let parameters: ParametersList
        /// The name of the DB cluster parameter group to modify.
        public let dBClusterParameterGroupName: String

        public init(parameters: ParametersList, dBClusterParameterGroupName: String) {
            self.parameters = parameters
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
        }
    }

    public struct DBSubnetGroups: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSubnetGroup", required: false, type: .list)
        ]
        public let dBSubnetGroup: [DBSubnetGroup]?

        public init(dBSubnetGroup: [DBSubnetGroup]? = nil) {
            self.dBSubnetGroup = dBSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroup = "DBSubnetGroup"
        }
    }

    public struct OptionGroupOptionSetting: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplyType", required: false, type: .string), 
            AWSShapeMember(label: "IsRequired", required: false, type: .boolean), 
            AWSShapeMember(label: "AllowedValues", required: false, type: .string), 
            AWSShapeMember(label: "DefaultValue", required: false, type: .string), 
            AWSShapeMember(label: "IsModifiable", required: false, type: .boolean), 
            AWSShapeMember(label: "MinimumEngineVersionPerAllowedValue", required: false, type: .structure), 
            AWSShapeMember(label: "SettingDescription", required: false, type: .string), 
            AWSShapeMember(label: "SettingName", required: false, type: .string)
        ]
        /// The DB engine specific parameter type for the option group option.
        public let applyType: String?
        /// Boolean value where true indicates that a value must be specified for this option setting of the option group option.
        public let isRequired: Bool?
        /// Indicates the acceptable values for the option group option.
        public let allowedValues: String?
        /// The default value for the option group option.
        public let defaultValue: String?
        /// Boolean value where true indicates that this option group option can be changed from the default value.
        public let isModifiable: Bool?
        /// The minimum DB engine version required for the corresponding allowed value for this option setting.
        public let minimumEngineVersionPerAllowedValue: MinimumEngineVersionPerAllowedValueList?
        /// The description of the option group option.
        public let settingDescription: String?
        /// The name of the option group option.
        public let settingName: String?

        public init(applyType: String? = nil, isRequired: Bool? = nil, allowedValues: String? = nil, defaultValue: String? = nil, isModifiable: Bool? = nil, minimumEngineVersionPerAllowedValue: MinimumEngineVersionPerAllowedValueList? = nil, settingDescription: String? = nil, settingName: String? = nil) {
            self.applyType = applyType
            self.isRequired = isRequired
            self.allowedValues = allowedValues
            self.defaultValue = defaultValue
            self.isModifiable = isModifiable
            self.minimumEngineVersionPerAllowedValue = minimumEngineVersionPerAllowedValue
            self.settingDescription = settingDescription
            self.settingName = settingName
        }

        private enum CodingKeys: String, CodingKey {
            case applyType = "ApplyType"
            case isRequired = "IsRequired"
            case allowedValues = "AllowedValues"
            case defaultValue = "DefaultValue"
            case isModifiable = "IsModifiable"
            case minimumEngineVersionPerAllowedValue = "MinimumEngineVersionPerAllowedValue"
            case settingDescription = "SettingDescription"
            case settingName = "SettingName"
        }
    }

}