// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension RDS {

    public struct DescribeDBLogFilesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileSize", required: false, type: .long), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "FilenameContains", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "FileLastWritten", required: false, type: .long), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// Filters the available log files for files larger than the specified size.
        public let fileSize: Int64?
        /// The pagination token provided in the previous request. If this parameter is specified the response includes only records beyond the marker, up to MaxRecords.
        public let marker: String?
        /// The customer-assigned name of the DB instance that contains the log files you want to list. Constraints:   Must match the identifier of an existing DBInstance.  
        public let dBInstanceIdentifier: String
        /// Filters the available log files for log file names that contain the specified string.
        public let filenameContains: String?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        /// Filters the available log files for files written since the specified date, in POSIX timestamp format with milliseconds.
        public let fileLastWritten: Int64?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
        public let maxRecords: Int32?

        public init(fileSize: Int64? = nil, marker: String? = nil, dBInstanceIdentifier: String, filenameContains: String? = nil, filters: FilterList? = nil, fileLastWritten: Int64? = nil, maxRecords: Int32? = nil) {
            self.fileSize = fileSize
            self.marker = marker
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.filenameContains = filenameContains
            self.filters = filters
            self.fileLastWritten = fileLastWritten
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case fileSize = "FileSize"
            case marker = "Marker"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case filenameContains = "FilenameContains"
            case filters = "Filters"
            case fileLastWritten = "FileLastWritten"
            case maxRecords = "MaxRecords"
        }
    }

    public struct OptionGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowsVpcAndNonVpcInstanceMemberships", required: false, type: .boolean), 
            AWSShapeMember(label: "OptionGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupDescription", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "MajorEngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "Options", required: false, type: .structure), 
            AWSShapeMember(label: "EngineName", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string)
        ]
        /// Indicates whether this option group can be applied to both VPC and non-VPC instances. The value true indicates the option group can be applied to both VPC and non-VPC instances. 
        public let allowsVpcAndNonVpcInstanceMemberships: Bool?
        /// The Amazon Resource Name (ARN) for the option group.
        public let optionGroupArn: String?
        /// Provides a description of the option group.
        public let optionGroupDescription: String?
        /// If AllowsVpcAndNonVpcInstanceMemberships is false, this field is blank. If AllowsVpcAndNonVpcInstanceMemberships is true and this field is blank, then this option group can be applied to both VPC and non-VPC instances. If this field contains a value, then this option group can only be applied to instances that are in the VPC indicated by this field. 
        public let vpcId: String?
        /// Indicates the major engine version associated with this option group.
        public let majorEngineVersion: String?
        /// Indicates what options are available in the option group.
        public let options: OptionsList?
        /// Indicates the name of the engine that this option group can be applied to.
        public let engineName: String?
        /// Specifies the name of the option group.
        public let optionGroupName: String?

        public init(allowsVpcAndNonVpcInstanceMemberships: Bool? = nil, optionGroupArn: String? = nil, optionGroupDescription: String? = nil, vpcId: String? = nil, majorEngineVersion: String? = nil, options: OptionsList? = nil, engineName: String? = nil, optionGroupName: String? = nil) {
            self.allowsVpcAndNonVpcInstanceMemberships = allowsVpcAndNonVpcInstanceMemberships
            self.optionGroupArn = optionGroupArn
            self.optionGroupDescription = optionGroupDescription
            self.vpcId = vpcId
            self.majorEngineVersion = majorEngineVersion
            self.options = options
            self.engineName = engineName
            self.optionGroupName = optionGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case allowsVpcAndNonVpcInstanceMemberships = "AllowsVpcAndNonVpcInstanceMemberships"
            case optionGroupArn = "OptionGroupArn"
            case optionGroupDescription = "OptionGroupDescription"
            case vpcId = "VpcId"
            case majorEngineVersion = "MajorEngineVersion"
            case options = "Options"
            case engineName = "EngineName"
            case optionGroupName = "OptionGroupName"
        }
    }

    public struct DBClusterRole: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string)
        ]
        /// Describes the state of association between the IAM role and the DB cluster. The Status property returns one of the following values:    ACTIVE - the IAM role ARN is associated with the DB cluster and can be used to access other AWS services on your behalf.    PENDING - the IAM role ARN is being associated with the DB cluster.    INVALID - the IAM role ARN is associated with the DB cluster, but the DB cluster is unable to assume the IAM role in order to access other AWS services on your behalf.  
        public let status: String?
        /// The Amazon Resource Name (ARN) of the IAM role that is associated with the DB cluster.
        public let roleArn: String?

        public init(status: String? = nil, roleArn: String? = nil) {
            self.status = status
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case roleArn = "RoleArn"
        }
    }

    public struct DBParameterGroupList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroup", required: false, type: .list)
        ]
        public let dBParameterGroup: [DBParameterGroup]?

        public init(dBParameterGroup: [DBParameterGroup]? = nil) {
            self.dBParameterGroup = dBParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroup = "DBParameterGroup"
        }
    }

    public struct DBClusterSnapshot: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceDBClusterSnapshotArn", required: false, type: .string), 
            AWSShapeMember(label: "StorageEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "ClusterCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "IAMDatabaseAuthenticationEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "SnapshotCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "PercentProgress", required: false, type: .integer), 
            AWSShapeMember(label: "DBClusterSnapshotArn", required: false, type: .string), 
            AWSShapeMember(label: "MasterUsername", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "DBClusterSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotType", required: false, type: .string), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string)
        ]
        /// If the DB cluster snapshot was copied from a source DB cluster snapshot, the Amazon Resource Name (ARN) for the source DB cluster snapshot, otherwise, a null value.
        public let sourceDBClusterSnapshotArn: String?
        /// Specifies whether the DB cluster snapshot is encrypted.
        public let storageEncrypted: Bool?
        /// If StorageEncrypted is true, the AWS KMS key identifier for the encrypted DB cluster snapshot.
        public let kmsKeyId: String?
        /// Provides the list of EC2 Availability Zones that instances in the DB cluster snapshot can be restored in.
        public let availabilityZones: AvailabilityZones?
        /// Provides the VPC ID associated with the DB cluster snapshot.
        public let vpcId: String?
        /// Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).
        public let clusterCreateTime: TimeStamp?
        /// True if mapping of AWS Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.
        public let iAMDatabaseAuthenticationEnabled: Bool?
        /// Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).
        public let snapshotCreateTime: TimeStamp?
        /// Specifies the percentage of the estimated data that has been transferred.
        public let percentProgress: Int32?
        /// The Amazon Resource Name (ARN) for the DB cluster snapshot.
        public let dBClusterSnapshotArn: String?
        /// Provides the master username for the DB cluster snapshot.
        public let masterUsername: String?
        /// Specifies the DB cluster identifier of the DB cluster that this DB cluster snapshot was created from.
        public let dBClusterIdentifier: String?
        /// Specifies the name of the database engine.
        public let engine: String?
        /// Provides the version of the database engine for this DB cluster snapshot.
        public let engineVersion: String?
        /// Specifies the status of this DB cluster snapshot.
        public let status: String?
        /// Specifies the allocated storage size in gibibytes (GiB).
        public let allocatedStorage: Int32?
        /// Specifies the port that the DB cluster was listening on at the time of the snapshot.
        public let port: Int32?
        /// Specifies the identifier for the DB cluster snapshot.
        public let dBClusterSnapshotIdentifier: String?
        /// Provides the type of the DB cluster snapshot.
        public let snapshotType: String?
        /// Provides the license model information for this DB cluster snapshot.
        public let licenseModel: String?

        public init(sourceDBClusterSnapshotArn: String? = nil, storageEncrypted: Bool? = nil, kmsKeyId: String? = nil, availabilityZones: AvailabilityZones? = nil, vpcId: String? = nil, clusterCreateTime: TimeStamp? = nil, iAMDatabaseAuthenticationEnabled: Bool? = nil, snapshotCreateTime: TimeStamp? = nil, percentProgress: Int32? = nil, dBClusterSnapshotArn: String? = nil, masterUsername: String? = nil, dBClusterIdentifier: String? = nil, engine: String? = nil, engineVersion: String? = nil, status: String? = nil, allocatedStorage: Int32? = nil, port: Int32? = nil, dBClusterSnapshotIdentifier: String? = nil, snapshotType: String? = nil, licenseModel: String? = nil) {
            self.sourceDBClusterSnapshotArn = sourceDBClusterSnapshotArn
            self.storageEncrypted = storageEncrypted
            self.kmsKeyId = kmsKeyId
            self.availabilityZones = availabilityZones
            self.vpcId = vpcId
            self.clusterCreateTime = clusterCreateTime
            self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
            self.snapshotCreateTime = snapshotCreateTime
            self.percentProgress = percentProgress
            self.dBClusterSnapshotArn = dBClusterSnapshotArn
            self.masterUsername = masterUsername
            self.dBClusterIdentifier = dBClusterIdentifier
            self.engine = engine
            self.engineVersion = engineVersion
            self.status = status
            self.allocatedStorage = allocatedStorage
            self.port = port
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
            self.snapshotType = snapshotType
            self.licenseModel = licenseModel
        }

        private enum CodingKeys: String, CodingKey {
            case sourceDBClusterSnapshotArn = "SourceDBClusterSnapshotArn"
            case storageEncrypted = "StorageEncrypted"
            case kmsKeyId = "KmsKeyId"
            case availabilityZones = "AvailabilityZones"
            case vpcId = "VpcId"
            case clusterCreateTime = "ClusterCreateTime"
            case iAMDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
            case snapshotCreateTime = "SnapshotCreateTime"
            case percentProgress = "PercentProgress"
            case dBClusterSnapshotArn = "DBClusterSnapshotArn"
            case masterUsername = "MasterUsername"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case engine = "Engine"
            case engineVersion = "EngineVersion"
            case status = "Status"
            case allocatedStorage = "AllocatedStorage"
            case port = "Port"
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
            case snapshotType = "SnapshotType"
            case licenseModel = "LicenseModel"
        }
    }

    public struct DBSnapshotAttributesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBSnapshotAttributes", required: false, type: .structure)
        ]
        /// The identifier of the manual DB snapshot that the attributes apply to.
        public let dBSnapshotIdentifier: String?
        /// The list of attributes and values for the manual DB snapshot.
        public let dBSnapshotAttributes: DBSnapshotAttributeList?

        public init(dBSnapshotIdentifier: String? = nil, dBSnapshotAttributes: DBSnapshotAttributeList? = nil) {
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.dBSnapshotAttributes = dBSnapshotAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case dBSnapshotAttributes = "DBSnapshotAttributes"
        }
    }

    public struct DescribeDBSnapshotAttributesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotIdentifier", required: true, type: .string)
        ]
        /// The identifier for the DB snapshot to describe the attributes for.
        public let dBSnapshotIdentifier: String

        public init(dBSnapshotIdentifier: String) {
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
        }
    }

    public struct DeleteDBParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroupName", required: true, type: .string)
        ]
        /// The name of the DB parameter group. Constraints:   Must be the name of an existing DB parameter group   You can't delete a default DB parameter group   Cannot be associated with any DB instances  
        public let dBParameterGroupName: String

        public init(dBParameterGroupName: String) {
            self.dBParameterGroupName = dBParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
        }
    }

    public struct FailoverDBClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .structure)
        ]
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct Certificate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Thumbprint", required: false, type: .string), 
            AWSShapeMember(label: "ValidFrom", required: false, type: .timestamp), 
            AWSShapeMember(label: "ValidTill", required: false, type: .timestamp), 
            AWSShapeMember(label: "CertificateIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "CertificateType", required: false, type: .string)
        ]
        /// The thumbprint of the certificate.
        public let thumbprint: String?
        /// The starting date from which the certificate is valid.
        public let validFrom: TimeStamp?
        /// The final date that the certificate continues to be valid.
        public let validTill: TimeStamp?
        /// The unique key that identifies a certificate.
        public let certificateIdentifier: String?
        /// The Amazon Resource Name (ARN) for the certificate.
        public let certificateArn: String?
        /// The type of the certificate.
        public let certificateType: String?

        public init(thumbprint: String? = nil, validFrom: TimeStamp? = nil, validTill: TimeStamp? = nil, certificateIdentifier: String? = nil, certificateArn: String? = nil, certificateType: String? = nil) {
            self.thumbprint = thumbprint
            self.validFrom = validFrom
            self.validTill = validTill
            self.certificateIdentifier = certificateIdentifier
            self.certificateArn = certificateArn
            self.certificateType = certificateType
        }

        private enum CodingKeys: String, CodingKey {
            case thumbprint = "Thumbprint"
            case validFrom = "ValidFrom"
            case validTill = "ValidTill"
            case certificateIdentifier = "CertificateIdentifier"
            case certificateArn = "CertificateArn"
            case certificateType = "CertificateType"
        }
    }

    public struct EventList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Event", required: false, type: .list)
        ]
        public let event: [Event]?

        public init(event: [Event]? = nil) {
            self.event = event
        }

        private enum CodingKeys: String, CodingKey {
            case event = "Event"
        }
    }

    public struct ModifyDBSnapshotAttributeMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "ValuesToAdd", required: false, type: .structure), 
            AWSShapeMember(label: "AttributeName", required: true, type: .string), 
            AWSShapeMember(label: "ValuesToRemove", required: false, type: .structure)
        ]
        /// The identifier for the DB snapshot to modify the attributes for.
        public let dBSnapshotIdentifier: String
        /// A list of DB snapshot attributes to add to the attribute specified by AttributeName. To authorize other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account IDs, or all to make the manual DB snapshot restorable by any AWS account. Do not add the all value for any manual DB snapshots that contain private information that you don't want available to all AWS accounts.
        public let valuesToAdd: AttributeValueList?
        /// The name of the DB snapshot attribute to modify. To manage authorization for other AWS accounts to copy or restore a manual DB snapshot, set this value to restore.
        public let attributeName: String
        /// A list of DB snapshot attributes to remove from the attribute specified by AttributeName. To remove authorization for other AWS accounts to copy or restore a manual snapshot, set this list to include one or more AWS account identifiers, or all to remove authorization for any AWS account to copy or restore the DB snapshot. If you specify all, an AWS account whose account ID is explicitly added to the restore attribute can still copy or restore the manual DB snapshot.
        public let valuesToRemove: AttributeValueList?

        public init(dBSnapshotIdentifier: String, valuesToAdd: AttributeValueList? = nil, attributeName: String, valuesToRemove: AttributeValueList? = nil) {
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.valuesToAdd = valuesToAdd
            self.attributeName = attributeName
            self.valuesToRemove = valuesToRemove
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case valuesToAdd = "ValuesToAdd"
            case attributeName = "AttributeName"
            case valuesToRemove = "ValuesToRemove"
        }
    }

    public struct DBClusterSnapshotAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: false, type: .string), 
            AWSShapeMember(label: "AttributeValues", required: false, type: .structure)
        ]
        /// The name of the manual DB cluster snapshot attribute. The attribute named restore refers to the list of AWS accounts that have permission to copy or restore the manual DB cluster snapshot. For more information, see the ModifyDBClusterSnapshotAttribute API action.
        public let attributeName: String?
        /// The value(s) for the manual DB cluster snapshot attribute. If the AttributeName field is set to restore, then this element returns a list of IDs of the AWS accounts that are authorized to copy or restore the manual DB cluster snapshot. If a value of all is in the list, then the manual DB cluster snapshot is public and available for any AWS account to copy or restore.
        public let attributeValues: AttributeValueList?

        public init(attributeName: String? = nil, attributeValues: AttributeValueList? = nil) {
            self.attributeName = attributeName
            self.attributeValues = attributeValues
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case attributeValues = "AttributeValues"
        }
    }

    public struct ModifyEventSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnsTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "EventCategories", required: false, type: .structure), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
        public let snsTopicArn: String?
        /// The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned. Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot
        public let sourceType: String?
        ///  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the Events topic in the Amazon RDS User Guide or by using the DescribeEventCategories action. 
        public let eventCategories: EventCategoriesList?
        ///  A Boolean value; set to true to activate the subscription. 
        public let enabled: Bool?
        /// The name of the RDS event notification subscription.
        public let subscriptionName: String

        public init(snsTopicArn: String? = nil, sourceType: String? = nil, eventCategories: EventCategoriesList? = nil, enabled: Bool? = nil, subscriptionName: String) {
            self.snsTopicArn = snsTopicArn
            self.sourceType = sourceType
            self.eventCategories = eventCategories
            self.enabled = enabled
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case snsTopicArn = "SnsTopicArn"
            case sourceType = "SourceType"
            case eventCategories = "EventCategories"
            case enabled = "Enabled"
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct EventCategoriesList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategory", required: false, type: .list)
        ]
        public let eventCategory: [String]?

        public init(eventCategory: [String]? = nil) {
            self.eventCategory = eventCategory
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategory = "EventCategory"
        }
    }

    public struct FailoverDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "TargetDBInstanceIdentifier", required: false, type: .string)
        ]
        /// A DB cluster identifier to force a failover for. This parameter is not case-sensitive. Constraints:   Must match the identifier of an existing DBCluster.  
        public let dBClusterIdentifier: String?
        /// The name of the instance to promote to the primary instance. You must specify the instance identifier for an Aurora Replica in the DB cluster. For example, mydbcluster-replica1.
        public let targetDBInstanceIdentifier: String?

        public init(dBClusterIdentifier: String? = nil, targetDBInstanceIdentifier: String? = nil) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.targetDBInstanceIdentifier = targetDBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case targetDBInstanceIdentifier = "TargetDBInstanceIdentifier"
        }
    }

    public struct DescribeEngineDefaultClusterParametersResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EngineDefaults", required: false, type: .structure)
        ]
        public let engineDefaults: EngineDefaults?

        public init(engineDefaults: EngineDefaults? = nil) {
            self.engineDefaults = engineDefaults
        }

        private enum CodingKeys: String, CodingKey {
            case engineDefaults = "EngineDefaults"
        }
    }

    public struct DBClusterSnapshotAttributeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshotAttribute", required: false, type: .list)
        ]
        public let dBClusterSnapshotAttribute: [DBClusterSnapshotAttribute]?

        public init(dBClusterSnapshotAttribute: [DBClusterSnapshotAttribute]? = nil) {
            self.dBClusterSnapshotAttribute = dBClusterSnapshotAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotAttribute = "DBClusterSnapshotAttribute"
        }
    }

    public struct RestoreDBInstanceToPointInTimeMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UseDefaultProcessorFeatures", required: false, type: .boolean), 
            AWSShapeMember(label: "CopyTagsToSnapshot", required: false, type: .boolean), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "RestoreTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DBName", required: false, type: .string), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "EnableCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "DomainIAMRoleName", required: false, type: .string), 
            AWSShapeMember(label: "UseLatestRestorableTime", required: false, type: .boolean), 
            AWSShapeMember(label: "SourceDBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "TdeCredentialArn", required: false, type: .string), 
            AWSShapeMember(label: "TdeCredentialPassword", required: false, type: .string), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "TargetDBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "Domain", required: false, type: .string), 
            AWSShapeMember(label: "ProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string)
        ]
        /// A value that specifies that the DB instance class of the DB instance uses its default processor features.
        public let useDefaultProcessorFeatures: Bool?
        /// True to copy all tags from the restored DB instance to snapshots of the DB instance, and otherwise false. The default is false.
        public let copyTagsToSnapshot: Bool?
        /// Specifies if the DB instance is a Multi-AZ deployment. Constraint: You can't specify the AvailabilityZone parameter if the MultiAZ parameter is set to true.
        public let multiAZ: Bool?
        /// The date and time to restore from. Valid Values: Value must be a time in Universal Coordinated Time (UTC) format Constraints:   Must be before the latest restorable time for the DB instance   Cannot be specified if UseLatestRestorableTime parameter is true   Example: 2009-09-07T23:45:00Z 
        public let restoreTime: TimeStamp?
        /// The database name for the restored DB instance.  This parameter is not used for the MySQL or MariaDB engines. 
        public let dBName: String?
        /// The DB subnet group name to use for the new instance. Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup 
        public let dBSubnetGroupName: String?
        /// The compute and memory capacity of the Amazon RDS DB instance, for example, db.m4.large. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class in the Amazon RDS User Guide.  Default: The same DBInstanceClass as the original DB instance.
        public let dBInstanceClass: String?
        /// The list of logs that the restored DB instance is to export to CloudWatch Logs.
        public let enableCloudwatchLogsExports: [String]?
        /// The database engine to use for the new instance. Default: The same as source Constraint: Must be compatible with the engine of the source Valid Values:    mariadb     mysql     oracle-ee     oracle-se2     oracle-se1     oracle-se     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web   
        public let engine: String?
        /// Specify the name of the IAM role to be used when making API calls to the Directory Service.
        public let domainIAMRoleName: String?
        ///  Specifies whether (true) or not (false) the DB instance is restored from the latest backup time.  Default: false  Constraints: Cannot be specified if RestoreTime parameter is provided.
        public let useLatestRestorableTime: Bool?
        /// The identifier of the source DB instance from which to restore. Constraints:   Must match the identifier of an existing DB instance.  
        public let sourceDBInstanceIdentifier: String
        /// The ARN from the key store with which to associate the instance for TDE encryption.
        public let tdeCredentialArn: String?
        /// The password for the given ARN from the key store in order to access the device.
        public let tdeCredentialPassword: String?
        /// License model information for the restored DB instance. Default: Same as source.  Valid values: license-included | bring-your-own-license | general-public-license 
        public let licenseModel: String?
        /// The name of the new DB instance to be created. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens  
        public let targetDBInstanceIdentifier: String
        /// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. Constraints: Must be an integer greater than 1000.  SQL Server  Setting the IOPS value for the SQL Server database engine is not supported.
        public let iops: Int32?
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. You can enable IAM database authentication for the following database engines   For MySQL 5.6, minor version 5.6.34 or higher   For MySQL 5.7, minor version 5.7.16 or higher   Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// Specifies the accessibility options for the DB instance. A value of true specifies an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. A value of false specifies an internal instance with a DNS name that resolves to a private IP address. Default: The default behavior varies depending on whether a VPC has been requested or not. The following list shows the default behavior in each case.    Default VPC:true    VPC:false   If no DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance is publicly accessible. If a specific DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance is private.
        public let publiclyAccessible: Bool?
        /// Specifies the storage type to be associated with the DB instance.  Valid values: standard | gp2 | io1   If you specify io1, you must also include a value for the Iops parameter.   Default: io1 if the Iops parameter is specified, otherwise standard 
        public let storageType: String?
        /// Specify the Active Directory Domain to restore the instance in.
        public let domain: String?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        public let processorFeatures: ProcessorFeatureList?
        public let tags: TagList?
        /// Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window.
        public let autoMinorVersionUpgrade: Bool?
        /// The EC2 Availability Zone that the DB instance is created in. Default: A random, system-chosen Availability Zone. Constraint: You can't specify the AvailabilityZone parameter if the MultiAZ parameter is set to true. Example: us-east-1a 
        public let availabilityZone: String?
        /// The port number on which the database accepts connections. Constraints: Value must be 1150-65535  Default: The same port as the original DB instance.
        public let port: Int32?
        /// The name of the option group to be used for the restored DB instance. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance
        public let optionGroupName: String?

        public init(useDefaultProcessorFeatures: Bool? = nil, copyTagsToSnapshot: Bool? = nil, multiAZ: Bool? = nil, restoreTime: TimeStamp? = nil, dBName: String? = nil, dBSubnetGroupName: String? = nil, dBInstanceClass: String? = nil, enableCloudwatchLogsExports: [String]? = nil, engine: String? = nil, domainIAMRoleName: String? = nil, useLatestRestorableTime: Bool? = nil, sourceDBInstanceIdentifier: String, tdeCredentialArn: String? = nil, tdeCredentialPassword: String? = nil, licenseModel: String? = nil, targetDBInstanceIdentifier: String, iops: Int32? = nil, enableIAMDatabaseAuthentication: Bool? = nil, publiclyAccessible: Bool? = nil, storageType: String? = nil, domain: String? = nil, processorFeatures: ProcessorFeatureList? = nil, tags: TagList? = nil, autoMinorVersionUpgrade: Bool? = nil, availabilityZone: String? = nil, port: Int32? = nil, optionGroupName: String? = nil) {
            self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.multiAZ = multiAZ
            self.restoreTime = restoreTime
            self.dBName = dBName
            self.dBSubnetGroupName = dBSubnetGroupName
            self.dBInstanceClass = dBInstanceClass
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.engine = engine
            self.domainIAMRoleName = domainIAMRoleName
            self.useLatestRestorableTime = useLatestRestorableTime
            self.sourceDBInstanceIdentifier = sourceDBInstanceIdentifier
            self.tdeCredentialArn = tdeCredentialArn
            self.tdeCredentialPassword = tdeCredentialPassword
            self.licenseModel = licenseModel
            self.targetDBInstanceIdentifier = targetDBInstanceIdentifier
            self.iops = iops
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.publiclyAccessible = publiclyAccessible
            self.storageType = storageType
            self.domain = domain
            self.processorFeatures = processorFeatures
            self.tags = tags
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.availabilityZone = availabilityZone
            self.port = port
            self.optionGroupName = optionGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case multiAZ = "MultiAZ"
            case restoreTime = "RestoreTime"
            case dBName = "DBName"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case dBInstanceClass = "DBInstanceClass"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case engine = "Engine"
            case domainIAMRoleName = "DomainIAMRoleName"
            case useLatestRestorableTime = "UseLatestRestorableTime"
            case sourceDBInstanceIdentifier = "SourceDBInstanceIdentifier"
            case tdeCredentialArn = "TdeCredentialArn"
            case tdeCredentialPassword = "TdeCredentialPassword"
            case licenseModel = "LicenseModel"
            case targetDBInstanceIdentifier = "TargetDBInstanceIdentifier"
            case iops = "Iops"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case publiclyAccessible = "PubliclyAccessible"
            case storageType = "StorageType"
            case domain = "Domain"
            case processorFeatures = "ProcessorFeatures"
            case tags = "Tags"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case availabilityZone = "AvailabilityZone"
            case port = "Port"
            case optionGroupName = "OptionGroupName"
        }
    }

    public struct ReservedDBInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "ReservedDBInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "State", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "RecurringCharges", required: false, type: .structure), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "ProductDescription", required: false, type: .string), 
            AWSShapeMember(label: "ReservedDBInstancesOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", required: false, type: .string), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "OfferingType", required: false, type: .string), 
            AWSShapeMember(label: "ReservedDBInstanceId", required: false, type: .string), 
            AWSShapeMember(label: "UsagePrice", required: false, type: .double), 
            AWSShapeMember(label: "FixedPrice", required: false, type: .double)
        ]
        /// The DB instance class for the reserved DB instance.
        public let dBInstanceClass: String?
        /// The Amazon Resource Name (ARN) for the reserved DB instance.
        public let reservedDBInstanceArn: String?
        /// The time the reservation started.
        public let startTime: TimeStamp?
        /// The state of the reserved DB instance.
        public let state: String?
        /// The number of reserved DB instances.
        public let dBInstanceCount: Int32?
        /// The recurring price charged to run this reserved DB instance.
        public let recurringCharges: RecurringChargeList?
        /// Indicates if the reservation applies to Multi-AZ deployments.
        public let multiAZ: Bool?
        /// The description of the reserved DB instance.
        public let productDescription: String?
        /// The offering identifier.
        public let reservedDBInstancesOfferingId: String?
        /// The currency code for the reserved DB instance.
        public let currencyCode: String?
        /// The duration of the reservation in seconds.
        public let duration: Int32?
        /// The offering type of this reserved DB instance.
        public let offeringType: String?
        /// The unique identifier for the reservation.
        public let reservedDBInstanceId: String?
        /// The hourly price charged for this reserved DB instance.
        public let usagePrice: Double?
        /// The fixed price charged for this reserved DB instance.
        public let fixedPrice: Double?

        public init(dBInstanceClass: String? = nil, reservedDBInstanceArn: String? = nil, startTime: TimeStamp? = nil, state: String? = nil, dBInstanceCount: Int32? = nil, recurringCharges: RecurringChargeList? = nil, multiAZ: Bool? = nil, productDescription: String? = nil, reservedDBInstancesOfferingId: String? = nil, currencyCode: String? = nil, duration: Int32? = nil, offeringType: String? = nil, reservedDBInstanceId: String? = nil, usagePrice: Double? = nil, fixedPrice: Double? = nil) {
            self.dBInstanceClass = dBInstanceClass
            self.reservedDBInstanceArn = reservedDBInstanceArn
            self.startTime = startTime
            self.state = state
            self.dBInstanceCount = dBInstanceCount
            self.recurringCharges = recurringCharges
            self.multiAZ = multiAZ
            self.productDescription = productDescription
            self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
            self.currencyCode = currencyCode
            self.duration = duration
            self.offeringType = offeringType
            self.reservedDBInstanceId = reservedDBInstanceId
            self.usagePrice = usagePrice
            self.fixedPrice = fixedPrice
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceClass = "DBInstanceClass"
            case reservedDBInstanceArn = "ReservedDBInstanceArn"
            case startTime = "StartTime"
            case state = "State"
            case dBInstanceCount = "DBInstanceCount"
            case recurringCharges = "RecurringCharges"
            case multiAZ = "MultiAZ"
            case productDescription = "ProductDescription"
            case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
            case currencyCode = "CurrencyCode"
            case duration = "Duration"
            case offeringType = "OfferingType"
            case reservedDBInstanceId = "ReservedDBInstanceId"
            case usagePrice = "UsagePrice"
            case fixedPrice = "FixedPrice"
        }
    }

    public struct DBClusterSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshots", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Provides a list of DB cluster snapshots for the user.
        public let dBClusterSnapshots: DBClusterSnapshotList?
        ///  An optional pagination token provided by a previous DescribeDBClusterSnapshots request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(dBClusterSnapshots: DBClusterSnapshotList? = nil, marker: String? = nil) {
            self.dBClusterSnapshots = dBClusterSnapshots
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshots = "DBClusterSnapshots"
            case marker = "Marker"
        }
    }

    public struct ModifyDBInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct AddTagsToResourceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .structure), 
            AWSShapeMember(label: "ResourceName", required: true, type: .string)
        ]
        /// The tags to be assigned to the Amazon RDS resource.
        public let tags: TagList
        /// The Amazon RDS resource that the tags are added to. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see  Constructing an RDS Amazon Resource Name (ARN).
        public let resourceName: String

        public init(tags: TagList, resourceName: String) {
            self.tags = tags
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case resourceName = "ResourceName"
        }
    }

    public struct DBParameterGroupNameMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroupName", required: false, type: .string)
        ]
        /// Provides the name of the DB parameter group.
        public let dBParameterGroupName: String?

        public init(dBParameterGroupName: String? = nil) {
            self.dBParameterGroupName = dBParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
        }
    }

    public struct AccountQuotaList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountQuota", required: false, type: .list)
        ]
        public let accountQuota: [AccountQuota]?

        public init(accountQuota: [AccountQuota]? = nil) {
            self.accountQuota = accountQuota
        }

        private enum CodingKeys: String, CodingKey {
            case accountQuota = "AccountQuota"
        }
    }

    public struct CopyDBClusterParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetDBClusterParameterGroupIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "SourceDBClusterParameterGroupIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "TargetDBClusterParameterGroupDescription", required: true, type: .string)
        ]
        /// The identifier for the copied DB cluster parameter group. Constraints:   Cannot be null, empty, or blank   Must contain from 1 to 255 letters, numbers, or hyphens   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens   Example: my-cluster-param-group1 
        public let targetDBClusterParameterGroupIdentifier: String
        public let tags: TagList?
        /// The identifier or Amazon Resource Name (ARN) for the source DB cluster parameter group. For information about creating an ARN, see  Constructing an RDS Amazon Resource Name (ARN).  Constraints:   Must specify a valid DB cluster parameter group.   If the source DB cluster parameter group is in the same AWS Region as the copy, specify a valid DB parameter group identifier, for example my-db-cluster-param-group, or a valid ARN.   If the source DB parameter group is in a different AWS Region than the copy, specify a valid DB cluster parameter group ARN, for example arn:aws:rds:us-east-1:123456789012:cluster-pg:custom-cluster-group1.  
        public let sourceDBClusterParameterGroupIdentifier: String
        /// A description for the copied DB cluster parameter group.
        public let targetDBClusterParameterGroupDescription: String

        public init(targetDBClusterParameterGroupIdentifier: String, tags: TagList? = nil, sourceDBClusterParameterGroupIdentifier: String, targetDBClusterParameterGroupDescription: String) {
            self.targetDBClusterParameterGroupIdentifier = targetDBClusterParameterGroupIdentifier
            self.tags = tags
            self.sourceDBClusterParameterGroupIdentifier = sourceDBClusterParameterGroupIdentifier
            self.targetDBClusterParameterGroupDescription = targetDBClusterParameterGroupDescription
        }

        private enum CodingKeys: String, CodingKey {
            case targetDBClusterParameterGroupIdentifier = "TargetDBClusterParameterGroupIdentifier"
            case tags = "Tags"
            case sourceDBClusterParameterGroupIdentifier = "SourceDBClusterParameterGroupIdentifier"
            case targetDBClusterParameterGroupDescription = "TargetDBClusterParameterGroupDescription"
        }
    }

    public struct DescribePendingMaintenanceActionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ResourceIdentifier", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A filter that specifies one or more resources to return pending maintenance actions for. Supported filters:    db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include pending maintenance actions for the DB clusters identified by these ARNs.    db-instance-id - Accepts DB instance identifiers and DB instance ARNs. The results list will only include pending maintenance actions for the DB instances identified by these ARNs.  
        public let filters: FilterList?
        ///  An optional pagination token provided by a previous DescribePendingMaintenanceActions request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by MaxRecords. 
        public let marker: String?
        /// The ARN of a resource to return pending maintenance actions for.
        public let resourceIdentifier: String?

        public init(maxRecords: Int32? = nil, filters: FilterList? = nil, marker: String? = nil, resourceIdentifier: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.marker = marker
            self.resourceIdentifier = resourceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case marker = "Marker"
            case resourceIdentifier = "ResourceIdentifier"
        }
    }

    public struct CreateDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "ReplicationSourceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "MasterUsername", required: false, type: .string), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "EnableCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "Engine", required: true, type: .string), 
            AWSShapeMember(label: "BacktrackWindow", required: false, type: .long), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "MasterUserPassword", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "PreSignedUrl", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "PreferredBackupWindow", required: false, type: .string), 
            AWSShapeMember(label: "CharacterSetName", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure)
        ]
        /// Specifies whether the DB cluster is encrypted.
        public let storageEncrypted: Bool?
        /// The AWS KMS key identifier for an encrypted DB cluster. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key. If an encryption key is not specified in KmsKeyId:   If ReplicationSourceIdentifier identifies an encrypted source, then Amazon RDS will use the encryption key used to encrypt the source. Otherwise, Amazon RDS will use your default encryption key.    If the StorageEncrypted parameter is true and ReplicationSourceIdentifier is not specified, then Amazon RDS will use your default encryption key.   AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. If you create a Read Replica of an encrypted DB cluster in another AWS Region, you must set KmsKeyId to a KMS key ID that is valid in the destination AWS Region. This key is used to encrypt the Read Replica in that AWS Region.
        public let kmsKeyId: String?
        /// The name for your database of up to 64 alpha-numeric characters. If you do not provide a name, Amazon RDS will not create a database in the DB cluster you are creating.
        public let databaseName: String?
        /// A list of EC2 Availability Zones that instances in the DB cluster can be created in. For information on AWS Regions and Availability Zones, see Regions and Availability Zones. 
        public let availabilityZones: AvailabilityZones?
        public let tags: TagList?
        /// The Amazon Resource Name (ARN) of the source DB instance or DB cluster if this DB cluster is created as a Read Replica.
        public let replicationSourceIdentifier: String?
        ///  The name of the DB cluster parameter group to associate with this DB cluster. If this argument is omitted, default.aurora5.6 is used.  Constraints:   If supplied, must match the name of an existing DBClusterParameterGroup.  
        public let dBClusterParameterGroupName: String?
        /// The name of the master user for the DB cluster. Constraints:   Must be 1 to 16 letters or numbers.   First character must be a letter.   Cannot be a reserved word for the chosen database engine.  
        public let masterUsername: String?
        /// The number of days for which automated backups are retained. You must specify a minimum value of 1. Default: 1 Constraints:   Must be a value from 1 to 35  
        public let backupRetentionPeriod: Int32?
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// The DB cluster identifier. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: my-cluster1 
        public let dBClusterIdentifier: String
        /// The list of log types that need to be enabled for exporting to CloudWatch Logs.
        public let enableCloudwatchLogsExports: [String]?
        /// The name of the database engine to be used for this DB cluster. Valid Values: aurora (for MySQL 5.6-compatible Aurora), aurora-mysql (for MySQL 5.7-compatible Aurora), and aurora-postgresql 
        public let engine: String
        /// The target backtrack window, in seconds. To disable backtracking, set this value to 0.  Default: 0 Constraints:   If specified, this value must be set to a number from 0 to 259,200 (72 hours).  
        public let backtrackWindow: Int64?
        /// A DB subnet group to associate with this DB cluster. Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup 
        public let dBSubnetGroupName: String?
        /// The version number of the database engine to use.  Aurora MySQL  Example: 5.6.10a, 5.7.12   Aurora PostgreSQL  Example: 9.6.3 
        public let engineVersion: String?
        /// The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@". Constraints: Must contain from 8 to 41 characters.
        public let masterUserPassword: String?
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see  Adjusting the Preferred Maintenance Window in the Amazon RDS User Guide.  Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// A value that indicates that the DB cluster should be associated with the specified option group. Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.
        public let optionGroupName: String?
        /// A URL that contains a Signature Version 4 signed request for the CreateDBCluster action to be called in the source AWS Region where the DB cluster is replicated from. You only need to specify PreSignedUrl when you are performing cross-region replication from an encrypted DB cluster. The pre-signed URL must be a valid request for the CreateDBCluster API action that can be executed in the source AWS Region that contains the encrypted DB cluster to be copied. The pre-signed URL request must contain the following parameter values:    KmsKeyId - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster in the destination AWS Region. This should refer to the same KMS key for both the CreateDBCluster action that is called in the destination AWS Region, and the action contained in the pre-signed URL.    DestinationRegion - The name of the AWS Region that Aurora Read Replica will be created in.    ReplicationSourceIdentifier - The DB cluster identifier for the encrypted DB cluster to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster from the us-west-2 AWS Region, then your ReplicationSourceIdentifier would look like Example: arn:aws:rds:us-west-2:123456789012:cluster:aurora-cluster1.   To learn how to generate a Signature Version 4 signed request, see  Authenticating Requests: Using Query Parameters (AWS Signature Version 4) and  Signature Version 4 Signing Process.
        public let preSignedUrl: String?
        /// The port number on which the instances in the DB cluster accept connections.  Default: 3306 if engine is set as aurora or 5432 if set to aurora-postgresql. 
        public let port: Int32?
        /// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see  Adjusting the Preferred Maintenance Window in the Amazon RDS User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.  
        public let preferredBackupWindow: String?
        /// A value that indicates that the DB cluster should be associated with the specified CharacterSet.
        public let characterSetName: String?
        /// A list of EC2 VPC security groups to associate with this DB cluster.
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?

        public init(storageEncrypted: Bool? = nil, kmsKeyId: String? = nil, databaseName: String? = nil, availabilityZones: AvailabilityZones? = nil, tags: TagList? = nil, replicationSourceIdentifier: String? = nil, dBClusterParameterGroupName: String? = nil, masterUsername: String? = nil, backupRetentionPeriod: Int32? = nil, enableIAMDatabaseAuthentication: Bool? = nil, dBClusterIdentifier: String, enableCloudwatchLogsExports: [String]? = nil, engine: String, backtrackWindow: Int64? = nil, dBSubnetGroupName: String? = nil, engineVersion: String? = nil, masterUserPassword: String? = nil, preferredMaintenanceWindow: String? = nil, optionGroupName: String? = nil, preSignedUrl: String? = nil, port: Int32? = nil, preferredBackupWindow: String? = nil, characterSetName: String? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil) {
            self.storageEncrypted = storageEncrypted
            self.kmsKeyId = kmsKeyId
            self.databaseName = databaseName
            self.availabilityZones = availabilityZones
            self.tags = tags
            self.replicationSourceIdentifier = replicationSourceIdentifier
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.masterUsername = masterUsername
            self.backupRetentionPeriod = backupRetentionPeriod
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.dBClusterIdentifier = dBClusterIdentifier
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.engine = engine
            self.backtrackWindow = backtrackWindow
            self.dBSubnetGroupName = dBSubnetGroupName
            self.engineVersion = engineVersion
            self.masterUserPassword = masterUserPassword
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.optionGroupName = optionGroupName
            self.preSignedUrl = preSignedUrl
            self.port = port
            self.preferredBackupWindow = preferredBackupWindow
            self.characterSetName = characterSetName
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case storageEncrypted = "StorageEncrypted"
            case kmsKeyId = "KmsKeyId"
            case databaseName = "DatabaseName"
            case availabilityZones = "AvailabilityZones"
            case tags = "Tags"
            case replicationSourceIdentifier = "ReplicationSourceIdentifier"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case masterUsername = "MasterUsername"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case engine = "Engine"
            case backtrackWindow = "BacktrackWindow"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case engineVersion = "EngineVersion"
            case masterUserPassword = "MasterUserPassword"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case optionGroupName = "OptionGroupName"
            case preSignedUrl = "PreSignedUrl"
            case port = "Port"
            case preferredBackupWindow = "PreferredBackupWindow"
            case characterSetName = "CharacterSetName"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct DescribeEngineDefaultParametersResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EngineDefaults", required: false, type: .structure)
        ]
        public let engineDefaults: EngineDefaults?

        public init(engineDefaults: EngineDefaults? = nil) {
            self.engineDefaults = engineDefaults
        }

        private enum CodingKeys: String, CodingKey {
            case engineDefaults = "EngineDefaults"
        }
    }

    public struct AuthorizeDBSecurityGroupIngressMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CIDRIP", required: false, type: .string), 
            AWSShapeMember(label: "DBSecurityGroupName", required: true, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupId", required: false, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupOwnerId", required: false, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupName", required: false, type: .string)
        ]
        /// The IP range to authorize.
        public let cidrip: String?
        /// The name of the DB security group to add authorization to.
        public let dBSecurityGroupName: String
        ///  Id of the EC2 security group to authorize. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided. 
        public let eC2SecurityGroupId: String?
        ///  AWS account number of the owner of the EC2 security group specified in the EC2SecurityGroupName parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided. 
        public let eC2SecurityGroupOwnerId: String?
        ///  Name of the EC2 security group to authorize. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided. 
        public let eC2SecurityGroupName: String?

        public init(cidrip: String? = nil, dBSecurityGroupName: String, eC2SecurityGroupId: String? = nil, eC2SecurityGroupOwnerId: String? = nil, eC2SecurityGroupName: String? = nil) {
            self.cidrip = cidrip
            self.dBSecurityGroupName = dBSecurityGroupName
            self.eC2SecurityGroupId = eC2SecurityGroupId
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.eC2SecurityGroupName = eC2SecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case cidrip = "CIDRIP"
            case dBSecurityGroupName = "DBSecurityGroupName"
            case eC2SecurityGroupId = "EC2SecurityGroupId"
            case eC2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
            case eC2SecurityGroupName = "EC2SecurityGroupName"
        }
    }

    public struct DBClusterOptionGroupMemberships: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterOptionGroup", required: false, type: .list)
        ]
        public let dBClusterOptionGroup: [DBClusterOptionGroupStatus]?

        public init(dBClusterOptionGroup: [DBClusterOptionGroupStatus]? = nil) {
            self.dBClusterOptionGroup = dBClusterOptionGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterOptionGroup = "DBClusterOptionGroup"
        }
    }

    public struct CreateDBInstanceReadReplicaMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "MonitoringRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "PerformanceInsightsKMSKeyId", required: false, type: .string), 
            AWSShapeMember(label: "MonitoringInterval", required: false, type: .integer), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "EnableCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "PreSignedUrl", required: false, type: .string), 
            AWSShapeMember(label: "SourceDBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "PerformanceInsightsRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "ProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "EnablePerformanceInsights", required: false, type: .boolean), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "CopyTagsToSnapshot", required: false, type: .boolean), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "UseDefaultProcessorFeatures", required: false, type: .boolean), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean)
        ]
        /// The Amazon EC2 Availability Zone that the Read Replica is created in. Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.  Example: us-east-1d 
        public let availabilityZone: String?
        /// The port number that the DB instance uses for connections. Default: Inherits from the source DB instance Valid Values: 1150-65535 
        public let port: Int32?
        /// Specifies whether the Read Replica is in a Multi-AZ deployment.  You can create a Read Replica as a Multi-AZ DB instance. RDS creates a standby of your replica in another Availability Zone for failover support for the replica. Creating your Read Replica as a Multi-AZ DB instance is independent of whether the source database is a Multi-AZ DB instance. 
        public let multiAZ: Bool?
        /// The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, go to To create an IAM role for Amazon RDS Enhanced Monitoring. If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn value.
        public let monitoringRoleArn: String?
        /// The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
        public let performanceInsightsKMSKeyId: String?
        /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the Read Replica. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. If MonitoringRoleArn is specified, then you must also set MonitoringInterval to a value other than 0. Valid Values: 0, 1, 5, 10, 15, 30, 60 
        public let monitoringInterval: Int32?
        /// Specifies a DB subnet group for the DB instance. The new DB instance is created in the VPC associated with the DB subnet group. If no DB subnet group is specified, then the new DB instance is not created in a VPC. Constraints:   Can only be specified if the source DB instance identifier specifies a DB instance in another AWS Region.   If supplied, must match the name of an existing DBSubnetGroup.   The specified DB subnet group must be in the same AWS Region in which the operation is running.   All Read Replicas in one AWS Region that are created from the same source DB instance must either:&gt;   Specify DB subnet groups from the same VPC. All these Read Replicas are created in the same VPC.   Not specify a DB subnet group. All these Read Replicas are created outside of any VPC.     Example: mySubnetgroup 
        public let dBSubnetGroupName: String?
        /// The DB instance identifier of the Read Replica. This identifier is the unique key that identifies a DB instance. This parameter is stored as a lowercase string.
        public let dBInstanceIdentifier: String
        /// The AWS KMS key ID for an encrypted Read Replica. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.  If you specify this parameter when you create a Read Replica from an unencrypted DB instance, the Read Replica is encrypted.  If you create an encrypted Read Replica in the same AWS Region as the source DB instance, then you do not have to specify a value for this parameter. The Read Replica is encrypted with the same KMS key as the source DB instance.  If you create an encrypted Read Replica in a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. 
        public let kmsKeyId: String?
        /// The compute and memory capacity of the Read Replica, for example, db.m4.large. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class in the Amazon RDS User Guide.  Default: Inherits from the source DB instance.
        public let dBInstanceClass: String?
        /// The list of logs that the new DB instance is to export to CloudWatch Logs.
        public let enableCloudwatchLogsExports: [String]?
        /// The URL that contains a Signature Version 4 signed request for the CreateDBInstanceReadReplica API action in the source AWS Region that contains the source DB instance.  You must specify this parameter when you create an encrypted Read Replica from another AWS Region by using the Amazon RDS API. You can specify the --source-region option instead of this parameter when you create an encrypted Read Replica from another AWS Region by using the AWS CLI.  The presigned URL must be a valid request for the CreateDBInstanceReadReplica API action that can be executed in the source AWS Region that contains the encrypted source DB instance. The presigned URL request must contain the following parameter values:     DestinationRegion - The AWS Region that the encrypted Read Replica is created in. This AWS Region is the same one where the CreateDBInstanceReadReplica action is called that contains this presigned URL.  For example, if you create an encrypted DB instance in the us-west-1 AWS Region, from a source DB instance in the us-east-2 AWS Region, then you call the CreateDBInstanceReadReplica action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the CreateDBInstanceReadReplica action in the us-west-2 AWS Region. For this example, the DestinationRegion in the presigned URL must be set to the us-east-1 AWS Region.     KmsKeyId - The AWS KMS key identifier for the key to use to encrypt the Read Replica in the destination AWS Region. This is the same identifier for both the CreateDBInstanceReadReplica action that is called in the destination AWS Region, and the action contained in the presigned URL.     SourceDBInstanceIdentifier - The DB instance identifier for the encrypted DB instance to be replicated. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are creating an encrypted Read Replica from a DB instance in the us-west-2 AWS Region, then your SourceDBInstanceIdentifier looks like the following example: arn:aws:rds:us-west-2:123456789012:instance:mysql-instance1-20161115.    To learn how to generate a Signature Version 4 signed request, see Authenticating Requests: Using Query Parameters (AWS Signature Version 4) and Signature Version 4 Signing Process. 
        public let preSignedUrl: String?
        /// The identifier of the DB instance that will act as the source for the Read Replica. Each DB instance can have up to five Read Replicas. Constraints:   Must be the identifier of an existing MySQL, MariaDB, or PostgreSQL DB instance.   Can specify a DB instance that is a MySQL Read Replica only if the source is running MySQL 5.6.   Can specify a DB instance that is a PostgreSQL DB instance only if the source is running PostgreSQL 9.3.5 or later (9.4.7 and higher for cross-region replication).   The specified DB instance must have automatic backups enabled, its backup retention period must be greater than 0.   If the source DB instance is in the same AWS Region as the Read Replica, specify a valid DB instance identifier.   If the source DB instance is in a different AWS Region than the Read Replica, specify a valid DB instance ARN. For more information, go to  Constructing a Amazon RDS Amazon Resource Name (ARN).  
        public let sourceDBInstanceIdentifier: String
        /// The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
        public let performanceInsightsRetentionPeriod: Int32?
        /// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance.
        public let iops: Int32?
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. You can enable IAM database authentication for the following database engines   For MySQL 5.6, minor version 5.6.34 or higher   For MySQL 5.7, minor version 5.7.16 or higher   Aurora 5.6 or higher.   Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// Specifies the accessibility options for the DB instance. A value of true specifies an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. A value of false specifies an internal instance with a DNS name that resolves to a private IP address. Default: The default behavior varies depending on whether a VPC has been requested or not. The following list shows the default behavior in each case.    Default VPC:true    VPC:false   If no DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance is publicly accessible. If a specific DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance is private.
        public let publiclyAccessible: Bool?
        /// Specifies the storage type to be associated with the Read Replica.  Valid values: standard | gp2 | io1   If you specify io1, you must also include a value for the Iops parameter.   Default: io1 if the Iops parameter is specified, otherwise standard 
        public let storageType: String?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        public let processorFeatures: ProcessorFeatureList?
        /// True to enable Performance Insights for the read replica, and otherwise false.  For more information, see Using Amazon Performance Insights in the Amazon Relational Database Service User Guide. 
        public let enablePerformanceInsights: Bool?
        public let tags: TagList?
        /// True to copy all tags from the Read Replica to snapshots of the Read Replica, and otherwise false. The default is false.
        public let copyTagsToSnapshot: Bool?
        /// The option group the DB instance is associated with. If omitted, the default option group for the engine specified is used.
        public let optionGroupName: String?
        /// A value that specifies that the DB instance class of the DB instance uses its default processor features.
        public let useDefaultProcessorFeatures: Bool?
        /// Indicates that minor engine upgrades are applied automatically to the Read Replica during the maintenance window. Default: Inherits from the source DB instance
        public let autoMinorVersionUpgrade: Bool?

        public init(availabilityZone: String? = nil, port: Int32? = nil, multiAZ: Bool? = nil, monitoringRoleArn: String? = nil, performanceInsightsKMSKeyId: String? = nil, monitoringInterval: Int32? = nil, dBSubnetGroupName: String? = nil, dBInstanceIdentifier: String, kmsKeyId: String? = nil, dBInstanceClass: String? = nil, enableCloudwatchLogsExports: [String]? = nil, preSignedUrl: String? = nil, sourceDBInstanceIdentifier: String, performanceInsightsRetentionPeriod: Int32? = nil, iops: Int32? = nil, enableIAMDatabaseAuthentication: Bool? = nil, publiclyAccessible: Bool? = nil, storageType: String? = nil, processorFeatures: ProcessorFeatureList? = nil, enablePerformanceInsights: Bool? = nil, tags: TagList? = nil, copyTagsToSnapshot: Bool? = nil, optionGroupName: String? = nil, useDefaultProcessorFeatures: Bool? = nil, autoMinorVersionUpgrade: Bool? = nil) {
            self.availabilityZone = availabilityZone
            self.port = port
            self.multiAZ = multiAZ
            self.monitoringRoleArn = monitoringRoleArn
            self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
            self.monitoringInterval = monitoringInterval
            self.dBSubnetGroupName = dBSubnetGroupName
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.kmsKeyId = kmsKeyId
            self.dBInstanceClass = dBInstanceClass
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.preSignedUrl = preSignedUrl
            self.sourceDBInstanceIdentifier = sourceDBInstanceIdentifier
            self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
            self.iops = iops
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.publiclyAccessible = publiclyAccessible
            self.storageType = storageType
            self.processorFeatures = processorFeatures
            self.enablePerformanceInsights = enablePerformanceInsights
            self.tags = tags
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.optionGroupName = optionGroupName
            self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case port = "Port"
            case multiAZ = "MultiAZ"
            case monitoringRoleArn = "MonitoringRoleArn"
            case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
            case monitoringInterval = "MonitoringInterval"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case kmsKeyId = "KmsKeyId"
            case dBInstanceClass = "DBInstanceClass"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case preSignedUrl = "PreSignedUrl"
            case sourceDBInstanceIdentifier = "SourceDBInstanceIdentifier"
            case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
            case iops = "Iops"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case publiclyAccessible = "PubliclyAccessible"
            case storageType = "StorageType"
            case processorFeatures = "ProcessorFeatures"
            case enablePerformanceInsights = "EnablePerformanceInsights"
            case tags = "Tags"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case optionGroupName = "OptionGroupName"
            case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        }
    }

    public struct ModifyDBClusterParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: true, type: .structure), 
            AWSShapeMember(label: "DBClusterParameterGroupName", required: true, type: .string)
        ]
        /// A list of parameters in the DB cluster parameter group to modify.
        public let parameters: ParametersList
        /// The name of the DB cluster parameter group to modify.
        public let dBClusterParameterGroupName: String

        public init(parameters: ParametersList, dBClusterParameterGroupName: String) {
            self.parameters = parameters
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
        }
    }

    public struct AddRoleToDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", required: true, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the IAM role to associate with the Aurora DB cluster, for example arn:aws:iam::123456789012:role/AuroraAccessRole.
        public let roleArn: String
        /// The name of the DB cluster to associate the IAM role with.
        public let dBClusterIdentifier: String

        public init(roleArn: String, dBClusterIdentifier: String) {
            self.roleArn = roleArn
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct CharacterSet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CharacterSetDescription", required: false, type: .string), 
            AWSShapeMember(label: "CharacterSetName", required: false, type: .string)
        ]
        /// The description of the character set.
        public let characterSetDescription: String?
        /// The name of the character set.
        public let characterSetName: String?

        public init(characterSetDescription: String? = nil, characterSetName: String? = nil) {
            self.characterSetDescription = characterSetDescription
            self.characterSetName = characterSetName
        }

        private enum CodingKeys: String, CodingKey {
            case characterSetDescription = "CharacterSetDescription"
            case characterSetName = "CharacterSetName"
        }
    }

    public struct DBInstanceStatusInfoList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstanceStatusInfo", required: false, type: .list)
        ]
        public let dBInstanceStatusInfo: [DBInstanceStatusInfo]?

        public init(dBInstanceStatusInfo: [DBInstanceStatusInfo]? = nil) {
            self.dBInstanceStatusInfo = dBInstanceStatusInfo
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceStatusInfo = "DBInstanceStatusInfo"
        }
    }

    public struct DBClusterOptionGroupStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterOptionGroupName", required: false, type: .string)
        ]
        /// Specifies the status of the DB cluster option group.
        public let status: String?
        /// Specifies the name of the DB cluster option group.
        public let dBClusterOptionGroupName: String?

        public init(status: String? = nil, dBClusterOptionGroupName: String? = nil) {
            self.status = status
            self.dBClusterOptionGroupName = dBClusterOptionGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case dBClusterOptionGroupName = "DBClusterOptionGroupName"
        }
    }

    public struct ApplyPendingMaintenanceActionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourcePendingMaintenanceActions", required: false, type: .structure)
        ]
        public let resourcePendingMaintenanceActions: ResourcePendingMaintenanceActions?

        public init(resourcePendingMaintenanceActions: ResourcePendingMaintenanceActions? = nil) {
            self.resourcePendingMaintenanceActions = resourcePendingMaintenanceActions
        }

        private enum CodingKeys: String, CodingKey {
            case resourcePendingMaintenanceActions = "ResourcePendingMaintenanceActions"
        }
    }

    public struct DownloadDBLogFilePortionDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogFileData", required: false, type: .string), 
            AWSShapeMember(label: "AdditionalDataPending", required: false, type: .boolean), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Entries from the specified log file.
        public let logFileData: String?
        /// Boolean value that if true, indicates there is more data to be downloaded.
        public let additionalDataPending: Bool?
        /// A pagination token that can be used in a subsequent DownloadDBLogFilePortion request.
        public let marker: String?

        public init(logFileData: String? = nil, additionalDataPending: Bool? = nil, marker: String? = nil) {
            self.logFileData = logFileData
            self.additionalDataPending = additionalDataPending
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case logFileData = "LogFileData"
            case additionalDataPending = "AdditionalDataPending"
            case marker = "Marker"
        }
    }

    public struct RemoveSourceIdentifierFromSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string), 
            AWSShapeMember(label: "SourceIdentifier", required: true, type: .string)
        ]
        /// The name of the RDS event notification subscription you want to remove a source identifier from.
        public let subscriptionName: String
        ///  The source identifier to be removed from the subscription, such as the DB instance identifier for a DB instance or the name of a security group. 
        public let sourceIdentifier: String

        public init(subscriptionName: String, sourceIdentifier: String) {
            self.subscriptionName = subscriptionName
            self.sourceIdentifier = sourceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionName = "SubscriptionName"
            case sourceIdentifier = "SourceIdentifier"
        }
    }

    public struct Filter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// One or more filter values. Filter values are case-sensitive.
        public let values: FilterValueList
        /// The name of the filter. Filter names are case-sensitive.
        public let name: String

        public init(values: FilterValueList, name: String) {
            self.values = values
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
            case name = "Name"
        }
    }

    public struct DBClusterMemberList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterMember", required: false, type: .list)
        ]
        public let dBClusterMember: [DBClusterMember]?

        public init(dBClusterMember: [DBClusterMember]? = nil) {
            self.dBClusterMember = dBClusterMember
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterMember = "DBClusterMember"
        }
    }

    public struct CreateDBSecurityGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSecurityGroup", required: false, type: .structure)
        ]
        public let dBSecurityGroup: DBSecurityGroup?

        public init(dBSecurityGroup: DBSecurityGroup? = nil) {
            self.dBSecurityGroup = dBSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroup = "DBSecurityGroup"
        }
    }

    public enum ApplyMethod: String, CustomStringConvertible, Codable {
        case immediate = "immediate"
        case pendingReboot = "pending-reboot"
        public var description: String { return self.rawValue }
    }

    public struct OptionSetting: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "IsCollection", required: false, type: .boolean), 
            AWSShapeMember(label: "IsModifiable", required: false, type: .boolean), 
            AWSShapeMember(label: "DefaultValue", required: false, type: .string), 
            AWSShapeMember(label: "ApplyType", required: false, type: .string), 
            AWSShapeMember(label: "AllowedValues", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DataType", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The current value of the option setting.
        public let value: String?
        /// Indicates if the option setting is part of a collection.
        public let isCollection: Bool?
        /// A Boolean value that, when true, indicates the option setting can be modified from the default.
        public let isModifiable: Bool?
        /// The default value of the option setting.
        public let defaultValue: String?
        /// The DB engine specific parameter type.
        public let applyType: String?
        /// The allowed values of the option setting.
        public let allowedValues: String?
        /// The name of the option that has settings that you can set.
        public let name: String?
        /// The data type of the option setting.
        public let dataType: String?
        /// The description of the option setting.
        public let description: String?

        public init(value: String? = nil, isCollection: Bool? = nil, isModifiable: Bool? = nil, defaultValue: String? = nil, applyType: String? = nil, allowedValues: String? = nil, name: String? = nil, dataType: String? = nil, description: String? = nil) {
            self.value = value
            self.isCollection = isCollection
            self.isModifiable = isModifiable
            self.defaultValue = defaultValue
            self.applyType = applyType
            self.allowedValues = allowedValues
            self.name = name
            self.dataType = dataType
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case isCollection = "IsCollection"
            case isModifiable = "IsModifiable"
            case defaultValue = "DefaultValue"
            case applyType = "ApplyType"
            case allowedValues = "AllowedValues"
            case name = "Name"
            case dataType = "DataType"
            case description = "Description"
        }
    }

    public struct AccountAttributesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountQuotas", required: false, type: .structure)
        ]
        /// A list of AccountQuota objects. Within this list, each quota has a name, a count of usage toward the quota maximum, and a maximum value for the quota.
        public let accountQuotas: AccountQuotaList?

        public init(accountQuotas: AccountQuotaList? = nil) {
            self.accountQuotas = accountQuotas
        }

        private enum CodingKeys: String, CodingKey {
            case accountQuotas = "AccountQuotas"
        }
    }

    public struct DBSnapshotList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshot", required: false, type: .list)
        ]
        public let dBSnapshot: [DBSnapshot]?

        public init(dBSnapshot: [DBSnapshot]? = nil) {
            self.dBSnapshot = dBSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshot = "DBSnapshot"
        }
    }

    public struct DeleteDBInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct EventSubscriptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "EventSubscriptionsList", required: false, type: .structure)
        ]
        ///  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// A list of EventSubscriptions data types.
        public let eventSubscriptionsList: EventSubscriptionsList?

        public init(marker: String? = nil, eventSubscriptionsList: EventSubscriptionsList? = nil) {
            self.marker = marker
            self.eventSubscriptionsList = eventSubscriptionsList
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case eventSubscriptionsList = "EventSubscriptionsList"
        }
    }

    public struct RevokeDBSecurityGroupIngressResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSecurityGroup", required: false, type: .structure)
        ]
        public let dBSecurityGroup: DBSecurityGroup?

        public init(dBSecurityGroup: DBSecurityGroup? = nil) {
            self.dBSecurityGroup = dBSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroup = "DBSecurityGroup"
        }
    }

    public struct CreateDBInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MasterUserPassword", required: false, type: .string), 
            AWSShapeMember(label: "MonitoringRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "PerformanceInsightsKMSKeyId", required: false, type: .string), 
            AWSShapeMember(label: "MonitoringInterval", required: false, type: .integer), 
            AWSShapeMember(label: "DBName", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceClass", required: true, type: .string), 
            AWSShapeMember(label: "EnableCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "Engine", required: true, type: .string), 
            AWSShapeMember(label: "DBSecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "DomainIAMRoleName", required: false, type: .string), 
            AWSShapeMember(label: "TdeCredentialArn", required: false, type: .string), 
            AWSShapeMember(label: "Timezone", required: false, type: .string), 
            AWSShapeMember(label: "TdeCredentialPassword", required: false, type: .string), 
            AWSShapeMember(label: "PerformanceInsightsRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "PreferredBackupWindow", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "CharacterSetName", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "StorageEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "Domain", required: false, type: .string), 
            AWSShapeMember(label: "MasterUsername", required: false, type: .string), 
            AWSShapeMember(label: "ProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "EnablePerformanceInsights", required: false, type: .boolean), 
            AWSShapeMember(label: "PromotionTier", required: false, type: .integer), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "CopyTagsToSnapshot", required: false, type: .boolean), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string)
        ]
        /// The password for the master user. The password can include any printable ASCII character except "/", """, or "@".  Amazon Aurora  Not applicable. The password for the master user is managed by the DB cluster. For more information, see CreateDBCluster.  MariaDB  Constraints: Must contain from 8 to 41 characters.  Microsoft SQL Server  Constraints: Must contain from 8 to 128 characters.  MySQL  Constraints: Must contain from 8 to 41 characters.  Oracle  Constraints: Must contain from 8 to 30 characters.  PostgreSQL  Constraints: Must contain from 8 to 128 characters.
        public let masterUserPassword: String?
        /// The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, go to Setting Up and Enabling Enhanced Monitoring. If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn value.
        public let monitoringRoleArn: String?
        /// Specifies if the DB instance is a Multi-AZ deployment. You can't set the AvailabilityZone parameter if the MultiAZ parameter is set to true.
        public let multiAZ: Bool?
        /// The port number on which the database accepts connections.  MySQL   Default: 3306   Valid Values: 1150-65535  Type: Integer  MariaDB   Default: 3306   Valid Values: 1150-65535  Type: Integer  PostgreSQL   Default: 5432   Valid Values: 1150-65535  Type: Integer  Oracle   Default: 1521   Valid Values: 1150-65535   SQL Server   Default: 1433   Valid Values: 1150-65535 except for 1434, 3389, 47001, 49152, and 49152 through 49156.   Amazon Aurora   Default: 3306   Valid Values: 1150-65535  Type: Integer
        public let port: Int32?
        /// The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
        public let performanceInsightsKMSKeyId: String?
        /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. If MonitoringRoleArn is specified, then you must also set MonitoringInterval to a value other than 0. Valid Values: 0, 1, 5, 10, 15, 30, 60 
        public let monitoringInterval: Int32?
        /// The meaning of this parameter differs according to the database engine you use. Type: String  MySQL  The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance. Constraints:   Must contain 1 to 64 letters or numbers.   Cannot be a word reserved by the specified database engine    MariaDB  The name of the database to create when the DB instance is created. If this parameter is not specified, no database is created in the DB instance. Constraints:   Must contain 1 to 64 letters or numbers.   Cannot be a word reserved by the specified database engine    PostgreSQL  The name of the database to create when the DB instance is created. If this parameter is not specified, the default "postgres" database is created in the DB instance. Constraints:   Must contain 1 to 63 letters, numbers, or underscores.   Must begin with a letter or an underscore. Subsequent characters can be letters, underscores, or digits (0-9).   Cannot be a word reserved by the specified database engine    Oracle  The Oracle System ID (SID) of the created DB instance. If you specify null, the default value ORCL is used. You can't specify the string NULL, or any other reserved word, for DBName.  Default: ORCL  Constraints:   Cannot be longer than 8 characters    SQL Server  Not applicable. Must be null.  Amazon Aurora  The name of the database to create when the primary instance of the DB cluster is created. If this parameter is not specified, no database is created in the DB instance. Constraints:   Must contain 1 to 64 letters or numbers.   Cannot be a word reserved by the specified database engine  
        public let dBName: String?
        /// The version number of the database engine to use. For a list of valid engine versions, call DescribeDBEngineVersions. The following are the database engines and links to information about the major and minor versions that are available with Amazon RDS. Not every database engine is available for every AWS Region.  Amazon Aurora  Not applicable. The version number of the database engine to be used by the DB instance is managed by the DB cluster. For more information, see CreateDBCluster.  MariaDB  See MariaDB on Amazon RDS Versions in the Amazon RDS User Guide.   Microsoft SQL Server  See Version and Feature Support on Amazon RDS in the Amazon RDS User Guide.   MySQL  See MySQL on Amazon RDS Versions in the Amazon RDS User Guide.   Oracle  See Oracle Database Engine Release Notes in the Amazon RDS User Guide.   PostgreSQL  See Supported PostgreSQL Database Versions in the Amazon RDS User Guide. 
        public let engineVersion: String?
        /// The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups.  Amazon Aurora  Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see CreateDBCluster. Default: 1 Constraints:   Must be a value from 0 to 35   Cannot be set to 0 if the DB instance is a source to Read Replicas  
        public let backupRetentionPeriod: Int32?
        /// A DB subnet group to associate with this DB instance. If there is no DB subnet group, then it is a non-VPC DB instance.
        public let dBSubnetGroupName: String?
        /// The DB instance identifier. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: mydbinstance 
        public let dBInstanceIdentifier: String
        /// The AWS KMS key identifier for an encrypted DB instance. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.  Amazon Aurora  Not applicable. The KMS key identifier is managed by the DB cluster. For more information, see CreateDBCluster. If the StorageEncrypted parameter is true, and you do not specify a value for the KmsKeyId parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.
        public let kmsKeyId: String?
        /// The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see Amazon RDS Maintenance Window.   Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week.  Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// The compute and memory capacity of the DB instance, for example, db.m4.large. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class in the Amazon RDS User Guide. 
        public let dBInstanceClass: String
        /// The list of log types that need to be enabled for exporting to CloudWatch Logs.
        public let enableCloudwatchLogsExports: [String]?
        /// The name of the database engine to be used for this instance.  Not every database engine is available for every AWS Region.  Valid Values:     aurora (for MySQL 5.6-compatible Aurora)    aurora-mysql (for MySQL 5.7-compatible Aurora)    aurora-postgresql     mariadb     mysql     oracle-ee     oracle-se2     oracle-se1     oracle-se     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web   
        public let engine: String
        /// A list of DB security groups to associate with this DB instance. Default: The default DB security group for the database engine.
        public let dBSecurityGroups: DBSecurityGroupNameList?
        /// Specify the name of the IAM role to be used when making API calls to the Directory Service.
        public let domainIAMRoleName: String?
        /// The ARN from the key store with which to associate the instance for TDE encryption.
        public let tdeCredentialArn: String?
        /// The time zone of the DB instance. The time zone parameter is currently supported only by Microsoft SQL Server. 
        public let timezone: String?
        /// The password for the given ARN from the key store in order to access the device.
        public let tdeCredentialPassword: String?
        /// The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
        public let performanceInsightsRetentionPeriod: Int32?
        /// License model information for this DB instance.  Valid values: license-included | bring-your-own-license | general-public-license 
        public let licenseModel: String?
        /// The identifier of the DB cluster that the instance will belong to. For information on creating a DB cluster, see CreateDBCluster. Type: String
        public let dBClusterIdentifier: String?
        /// The amount of Provisioned IOPS (input/output operations per second) to be initially allocated for the DB instance. For information about valid Iops values, see see Amazon RDS Provisioned IOPS Storage to Improve Performance.  Constraints: Must be a multiple between 1 and 50 of the storage amount for the DB instance. Must also be an integer multiple of 1000. For example, if the size of your DB instance is 500 GiB, then your Iops value can be 2000, 3000, 4000, or 5000. 
        public let iops: Int32?
        ///  The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter. For more information, see The Backup Window.   Amazon Aurora  Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see CreateDBCluster.  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see  Adjusting the Preferred DB Instance Maintenance Window.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.  
        public let preferredBackupWindow: String?
        /// The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default DBParameterGroup for the specified engine is used. Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens  
        public let dBParameterGroupName: String?
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.  You can enable IAM database authentication for the following database engines:  Amazon Aurora  Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see CreateDBCluster.  MySQL    For MySQL 5.6, minor version 5.6.34 or higher   For MySQL 5.7, minor version 5.7.16 or higher   Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// For supported engines, indicates that the DB instance should be associated with the specified CharacterSet.  Amazon Aurora  Not applicable. The character set is managed by the DB cluster. For more information, see CreateDBCluster.
        public let characterSetName: String?
        /// A list of EC2 VPC security groups to associate with this DB instance.  Amazon Aurora  Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see CreateDBCluster. Default: The default EC2 VPC security group for the DB subnet group's VPC.
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// Specifies the accessibility options for the DB instance. A value of true specifies an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. A value of false specifies an internal instance with a DNS name that resolves to a private IP address. Default: The default behavior varies depending on whether a VPC has been requested or not. The following list shows the default behavior in each case.    Default VPC: true    VPC: false   If no DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance is publicly accessible. If a specific DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance is private.
        public let publiclyAccessible: Bool?
        /// Specifies the storage type to be associated with the DB instance.  Valid values: standard | gp2 | io1   If you specify io1, you must also include a value for the Iops parameter.   Default: io1 if the Iops parameter is specified, otherwise standard 
        public let storageType: String?
        /// The amount of storage (in gibibytes) to allocate for the DB instance. Type: Integer  Amazon Aurora  Not applicable. Aurora cluster volumes automatically grow as the amount of data in your database increases, though you are only charged for the space that you use in an Aurora cluster volume.  MySQL  Constraints to the amount of storage for each storage type are the following:    General Purpose (SSD) storage (gp2): Must be an integer from 20 to 16384.   Provisioned IOPS storage (io1): Must be an integer from 100 to 16384.   Magnetic storage (standard): Must be an integer from 5 to 3072.    MariaDB  Constraints to the amount of storage for each storage type are the following:    General Purpose (SSD) storage (gp2): Must be an integer from 20 to 16384.   Provisioned IOPS storage (io1): Must be an integer from 100 to 16384.   Magnetic storage (standard): Must be an integer from 5 to 3072.    PostgreSQL  Constraints to the amount of storage for each storage type are the following:    General Purpose (SSD) storage (gp2): Must be an integer from 20 to 16384.   Provisioned IOPS storage (io1): Must be an integer from 100 to 16384.   Magnetic storage (standard): Must be an integer from 5 to 3072.    Oracle  Constraints to the amount of storage for each storage type are the following:    General Purpose (SSD) storage (gp2): Must be an integer from 20 to 16384.   Provisioned IOPS storage (io1): Must be an integer from 100 to 16384.   Magnetic storage (standard): Must be an integer from 10 to 3072.    SQL Server  Constraints to the amount of storage for each storage type are the following:    General Purpose (SSD) storage (gp2):   Enterprise and Standard editions: Must be an integer from 200 to 16384.   Web and Express editions: Must be an integer from 20 to 16384.     Provisioned IOPS storage (io1):   Enterprise and Standard editions: Must be an integer from 200 to 16384.   Web and Express editions: Must be an integer from 100 to 16384.     Magnetic storage (standard):   Enterprise and Standard editions: Must be an integer from 200 to 1024.   Web and Express editions: Must be an integer from 20 to 1024.    
        public let allocatedStorage: Int32?
        /// Specifies whether the DB instance is encrypted.  Amazon Aurora  Not applicable. The encryption for DB instances is managed by the DB cluster. For more information, see CreateDBCluster. Default: false
        public let storageEncrypted: Bool?
        /// Specify the Active Directory Domain to create the instance in.
        public let domain: String?
        /// The name for the master user.  Amazon Aurora  Not applicable. The name for the master user is managed by the DB cluster. For more information, see CreateDBCluster.   MariaDB  Constraints:   Required for MariaDB.   Must be 1 to 16 letters or numbers.   Cannot be a reserved word for the chosen database engine.    Microsoft SQL Server  Constraints:   Required for SQL Server.   Must be 1 to 128 letters or numbers.   The first character must be a letter.   Cannot be a reserved word for the chosen database engine.    MySQL  Constraints:   Required for MySQL.   Must be 1 to 16 letters or numbers.   First character must be a letter.   Cannot be a reserved word for the chosen database engine.    Oracle  Constraints:   Required for Oracle.   Must be 1 to 30 letters or numbers.   First character must be a letter.   Cannot be a reserved word for the chosen database engine.    PostgreSQL  Constraints:   Required for PostgreSQL.   Must be 1 to 63 letters or numbers.   First character must be a letter.   Cannot be a reserved word for the chosen database engine.  
        public let masterUsername: String?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        public let processorFeatures: ProcessorFeatureList?
        /// True to enable Performance Insights for the DB instance, and otherwise false.  For more information, see Using Amazon Performance Insights in the Amazon Relational Database Service User Guide. 
        public let enablePerformanceInsights: Bool?
        /// A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see  Fault Tolerance for an Aurora DB Cluster.  Default: 1 Valid Values: 0 - 15
        public let promotionTier: Int32?
        public let tags: TagList?
        /// True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
        public let copyTagsToSnapshot: Bool?
        /// Indicates that minor engine upgrades are applied automatically to the DB instance during the maintenance window. Default: true 
        public let autoMinorVersionUpgrade: Bool?
        /// Indicates that the DB instance should be associated with the specified option group. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance
        public let optionGroupName: String?
        ///  The EC2 Availability Zone that the DB instance is created in. For information on AWS Regions and Availability Zones, see Regions and Availability Zones.  Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.  Example: us-east-1d   Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to true. The specified Availability Zone must be in the same AWS Region as the current endpoint. 
        public let availabilityZone: String?

        public init(masterUserPassword: String? = nil, monitoringRoleArn: String? = nil, multiAZ: Bool? = nil, port: Int32? = nil, performanceInsightsKMSKeyId: String? = nil, monitoringInterval: Int32? = nil, dBName: String? = nil, engineVersion: String? = nil, backupRetentionPeriod: Int32? = nil, dBSubnetGroupName: String? = nil, dBInstanceIdentifier: String, kmsKeyId: String? = nil, preferredMaintenanceWindow: String? = nil, dBInstanceClass: String, enableCloudwatchLogsExports: [String]? = nil, engine: String, dBSecurityGroups: DBSecurityGroupNameList? = nil, domainIAMRoleName: String? = nil, tdeCredentialArn: String? = nil, timezone: String? = nil, tdeCredentialPassword: String? = nil, performanceInsightsRetentionPeriod: Int32? = nil, licenseModel: String? = nil, dBClusterIdentifier: String? = nil, iops: Int32? = nil, preferredBackupWindow: String? = nil, dBParameterGroupName: String? = nil, enableIAMDatabaseAuthentication: Bool? = nil, characterSetName: String? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, publiclyAccessible: Bool? = nil, storageType: String? = nil, allocatedStorage: Int32? = nil, storageEncrypted: Bool? = nil, domain: String? = nil, masterUsername: String? = nil, processorFeatures: ProcessorFeatureList? = nil, enablePerformanceInsights: Bool? = nil, promotionTier: Int32? = nil, tags: TagList? = nil, copyTagsToSnapshot: Bool? = nil, autoMinorVersionUpgrade: Bool? = nil, optionGroupName: String? = nil, availabilityZone: String? = nil) {
            self.masterUserPassword = masterUserPassword
            self.monitoringRoleArn = monitoringRoleArn
            self.multiAZ = multiAZ
            self.port = port
            self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
            self.monitoringInterval = monitoringInterval
            self.dBName = dBName
            self.engineVersion = engineVersion
            self.backupRetentionPeriod = backupRetentionPeriod
            self.dBSubnetGroupName = dBSubnetGroupName
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.kmsKeyId = kmsKeyId
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.dBInstanceClass = dBInstanceClass
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.engine = engine
            self.dBSecurityGroups = dBSecurityGroups
            self.domainIAMRoleName = domainIAMRoleName
            self.tdeCredentialArn = tdeCredentialArn
            self.timezone = timezone
            self.tdeCredentialPassword = tdeCredentialPassword
            self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
            self.licenseModel = licenseModel
            self.dBClusterIdentifier = dBClusterIdentifier
            self.iops = iops
            self.preferredBackupWindow = preferredBackupWindow
            self.dBParameterGroupName = dBParameterGroupName
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.characterSetName = characterSetName
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.publiclyAccessible = publiclyAccessible
            self.storageType = storageType
            self.allocatedStorage = allocatedStorage
            self.storageEncrypted = storageEncrypted
            self.domain = domain
            self.masterUsername = masterUsername
            self.processorFeatures = processorFeatures
            self.enablePerformanceInsights = enablePerformanceInsights
            self.promotionTier = promotionTier
            self.tags = tags
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.optionGroupName = optionGroupName
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case masterUserPassword = "MasterUserPassword"
            case monitoringRoleArn = "MonitoringRoleArn"
            case multiAZ = "MultiAZ"
            case port = "Port"
            case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
            case monitoringInterval = "MonitoringInterval"
            case dBName = "DBName"
            case engineVersion = "EngineVersion"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case kmsKeyId = "KmsKeyId"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case dBInstanceClass = "DBInstanceClass"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case engine = "Engine"
            case dBSecurityGroups = "DBSecurityGroups"
            case domainIAMRoleName = "DomainIAMRoleName"
            case tdeCredentialArn = "TdeCredentialArn"
            case timezone = "Timezone"
            case tdeCredentialPassword = "TdeCredentialPassword"
            case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
            case licenseModel = "LicenseModel"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case iops = "Iops"
            case preferredBackupWindow = "PreferredBackupWindow"
            case dBParameterGroupName = "DBParameterGroupName"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case characterSetName = "CharacterSetName"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case publiclyAccessible = "PubliclyAccessible"
            case storageType = "StorageType"
            case allocatedStorage = "AllocatedStorage"
            case storageEncrypted = "StorageEncrypted"
            case domain = "Domain"
            case masterUsername = "MasterUsername"
            case processorFeatures = "ProcessorFeatures"
            case enablePerformanceInsights = "EnablePerformanceInsights"
            case promotionTier = "PromotionTier"
            case tags = "Tags"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case optionGroupName = "OptionGroupName"
            case availabilityZone = "AvailabilityZone"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// A key is the required name of the tag. The string value can be from 1 to 128 Unicode characters in length and can't be prefixed with "aws:" or "rds:". The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public let key: String?
        /// A value is the optional value of the tag. The string value can be from 1 to 256 Unicode characters in length and can't be prefixed with "aws:" or "rds:". The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct DBSecurityGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSecurityGroupDescription", required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", required: false, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "DBSecurityGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "DBSecurityGroupName", required: false, type: .string), 
            AWSShapeMember(label: "IPRanges", required: false, type: .structure)
        ]
        /// Provides the description of the DB security group.
        public let dBSecurityGroupDescription: String?
        /// Provides the AWS ID of the owner of a specific DB security group.
        public let ownerId: String?
        ///  Contains a list of EC2SecurityGroup elements. 
        public let eC2SecurityGroups: EC2SecurityGroupList?
        /// Provides the VpcId of the DB security group.
        public let vpcId: String?
        /// The Amazon Resource Name (ARN) for the DB security group.
        public let dBSecurityGroupArn: String?
        /// Specifies the name of the DB security group.
        public let dBSecurityGroupName: String?
        ///  Contains a list of IPRange elements. 
        public let iPRanges: IPRangeList?

        public init(dBSecurityGroupDescription: String? = nil, ownerId: String? = nil, eC2SecurityGroups: EC2SecurityGroupList? = nil, vpcId: String? = nil, dBSecurityGroupArn: String? = nil, dBSecurityGroupName: String? = nil, iPRanges: IPRangeList? = nil) {
            self.dBSecurityGroupDescription = dBSecurityGroupDescription
            self.ownerId = ownerId
            self.eC2SecurityGroups = eC2SecurityGroups
            self.vpcId = vpcId
            self.dBSecurityGroupArn = dBSecurityGroupArn
            self.dBSecurityGroupName = dBSecurityGroupName
            self.iPRanges = iPRanges
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroupDescription = "DBSecurityGroupDescription"
            case ownerId = "OwnerId"
            case eC2SecurityGroups = "EC2SecurityGroups"
            case vpcId = "VpcId"
            case dBSecurityGroupArn = "DBSecurityGroupArn"
            case dBSecurityGroupName = "DBSecurityGroupName"
            case iPRanges = "IPRanges"
        }
    }

    public struct CreateDBSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// The identifier for the DB snapshot. Constraints:   Cannot be null, empty, or blank   Must contain from 1 to 255 letters, numbers, or hyphens   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens   Example: my-snapshot-id 
        public let dBSnapshotIdentifier: String
        /// The identifier of the DB instance that you want to create the snapshot of. Constraints:   Must match the identifier of an existing DBInstance.  
        public let dBInstanceIdentifier: String
        public let tags: TagList?

        public init(dBSnapshotIdentifier: String, dBInstanceIdentifier: String, tags: TagList? = nil) {
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case tags = "Tags"
        }
    }

    public struct RecurringChargeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecurringCharge", required: false, type: .list)
        ]
        public let recurringCharge: [RecurringCharge]?

        public init(recurringCharge: [RecurringCharge]? = nil) {
            self.recurringCharge = recurringCharge
        }

        private enum CodingKeys: String, CodingKey {
            case recurringCharge = "RecurringCharge"
        }
    }

    public struct DescribeDBClustersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: false, type: .string)
        ]
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A filter that specifies one or more DB clusters to describe. Supported filters:    db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB clusters identified by these ARNs.  
        public let filters: FilterList?
        /// An optional pagination token provided by a previous DescribeDBClusters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The user-supplied DB cluster identifier. If this parameter is specified, information from only the specific DB cluster is returned. This parameter isn't case-sensitive. Constraints:   If supplied, must match an existing DBClusterIdentifier.  
        public let dBClusterIdentifier: String?

        public init(maxRecords: Int32? = nil, filters: FilterList? = nil, marker: String? = nil, dBClusterIdentifier: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.marker = marker
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case marker = "Marker"
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct DeleteDBSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotIdentifier", required: true, type: .string)
        ]
        /// The DBSnapshot identifier. Constraints: Must be the name of an existing DB snapshot in the available state.
        public let dBSnapshotIdentifier: String

        public init(dBSnapshotIdentifier: String) {
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
        }
    }

    public struct PromoteReadReplicaDBClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .structure)
        ]
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct DBEngineVersionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBEngineVersions", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  A list of DBEngineVersion elements. 
        public let dBEngineVersions: DBEngineVersionList?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(dBEngineVersions: DBEngineVersionList? = nil, marker: String? = nil) {
            self.dBEngineVersions = dBEngineVersions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBEngineVersions = "DBEngineVersions"
            case marker = "Marker"
        }
    }

    public struct SourceIdsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceId", required: false, type: .list)
        ]
        public let sourceId: [String]?

        public init(sourceId: [String]? = nil) {
            self.sourceId = sourceId
        }

        private enum CodingKeys: String, CodingKey {
            case sourceId = "SourceId"
        }
    }

    public struct OrderableDBInstanceOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SupportsPerformanceInsights", required: false, type: .boolean), 
            AWSShapeMember(label: "MultiAZCapable", required: false, type: .boolean), 
            AWSShapeMember(label: "MinIopsPerGib", required: false, type: .double), 
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .structure), 
            AWSShapeMember(label: "Vpc", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxIopsPerGib", required: false, type: .double), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "MaxIopsPerDbInstance", required: false, type: .integer), 
            AWSShapeMember(label: "SupportsStorageEncryption", required: false, type: .boolean), 
            AWSShapeMember(label: "SupportsEnhancedMonitoring", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxStorageSize", required: false, type: .integer), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "MinStorageSize", required: false, type: .integer), 
            AWSShapeMember(label: "MinIopsPerDbInstance", required: false, type: .integer), 
            AWSShapeMember(label: "SupportsIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "ReadReplicaCapable", required: false, type: .boolean), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "AvailableProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "SupportsIops", required: false, type: .boolean), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string)
        ]
        /// True if a DB instance supports Performance Insights, otherwise false.
        public let supportsPerformanceInsights: Bool?
        /// Indicates whether a DB instance is Multi-AZ capable.
        public let multiAZCapable: Bool?
        /// Minimum provisioned IOPS per GiB for a DB instance.
        public let minIopsPerGib: Double?
        /// A list of Availability Zones for a DB instance.
        public let availabilityZones: AvailabilityZoneList?
        /// Indicates whether a DB instance is in a VPC.
        public let vpc: Bool?
        /// Maximum provisioned IOPS per GiB for a DB instance.
        public let maxIopsPerGib: Double?
        /// Indicates the storage type for a DB instance.
        public let storageType: String?
        /// The engine type of a DB instance.
        public let engine: String?
        /// Maximum total provisioned IOPS for a DB instance.
        public let maxIopsPerDbInstance: Int32?
        /// Indicates whether a DB instance supports encrypted storage.
        public let supportsStorageEncryption: Bool?
        /// Indicates whether a DB instance supports Enhanced Monitoring at intervals from 1 to 60 seconds.
        public let supportsEnhancedMonitoring: Bool?
        /// Maximum storage size for a DB instance.
        public let maxStorageSize: Int32?
        /// The engine version of a DB instance.
        public let engineVersion: String?
        /// Minimum storage size for a DB instance.
        public let minStorageSize: Int32?
        /// Minimum total provisioned IOPS for a DB instance.
        public let minIopsPerDbInstance: Int32?
        /// Indicates whether a DB instance supports IAM database authentication.
        public let supportsIAMDatabaseAuthentication: Bool?
        /// Indicates whether a DB instance can have a Read Replica.
        public let readReplicaCapable: Bool?
        /// The license model for a DB instance.
        public let licenseModel: String?
        /// A list of the available processor features for the DB instance class of a DB instance.
        public let availableProcessorFeatures: AvailableProcessorFeatureList?
        /// Indicates whether a DB instance supports provisioned IOPS.
        public let supportsIops: Bool?
        /// The DB instance class for a DB instance.
        public let dBInstanceClass: String?

        public init(supportsPerformanceInsights: Bool? = nil, multiAZCapable: Bool? = nil, minIopsPerGib: Double? = nil, availabilityZones: AvailabilityZoneList? = nil, vpc: Bool? = nil, maxIopsPerGib: Double? = nil, storageType: String? = nil, engine: String? = nil, maxIopsPerDbInstance: Int32? = nil, supportsStorageEncryption: Bool? = nil, supportsEnhancedMonitoring: Bool? = nil, maxStorageSize: Int32? = nil, engineVersion: String? = nil, minStorageSize: Int32? = nil, minIopsPerDbInstance: Int32? = nil, supportsIAMDatabaseAuthentication: Bool? = nil, readReplicaCapable: Bool? = nil, licenseModel: String? = nil, availableProcessorFeatures: AvailableProcessorFeatureList? = nil, supportsIops: Bool? = nil, dBInstanceClass: String? = nil) {
            self.supportsPerformanceInsights = supportsPerformanceInsights
            self.multiAZCapable = multiAZCapable
            self.minIopsPerGib = minIopsPerGib
            self.availabilityZones = availabilityZones
            self.vpc = vpc
            self.maxIopsPerGib = maxIopsPerGib
            self.storageType = storageType
            self.engine = engine
            self.maxIopsPerDbInstance = maxIopsPerDbInstance
            self.supportsStorageEncryption = supportsStorageEncryption
            self.supportsEnhancedMonitoring = supportsEnhancedMonitoring
            self.maxStorageSize = maxStorageSize
            self.engineVersion = engineVersion
            self.minStorageSize = minStorageSize
            self.minIopsPerDbInstance = minIopsPerDbInstance
            self.supportsIAMDatabaseAuthentication = supportsIAMDatabaseAuthentication
            self.readReplicaCapable = readReplicaCapable
            self.licenseModel = licenseModel
            self.availableProcessorFeatures = availableProcessorFeatures
            self.supportsIops = supportsIops
            self.dBInstanceClass = dBInstanceClass
        }

        private enum CodingKeys: String, CodingKey {
            case supportsPerformanceInsights = "SupportsPerformanceInsights"
            case multiAZCapable = "MultiAZCapable"
            case minIopsPerGib = "MinIopsPerGib"
            case availabilityZones = "AvailabilityZones"
            case vpc = "Vpc"
            case maxIopsPerGib = "MaxIopsPerGib"
            case storageType = "StorageType"
            case engine = "Engine"
            case maxIopsPerDbInstance = "MaxIopsPerDbInstance"
            case supportsStorageEncryption = "SupportsStorageEncryption"
            case supportsEnhancedMonitoring = "SupportsEnhancedMonitoring"
            case maxStorageSize = "MaxStorageSize"
            case engineVersion = "EngineVersion"
            case minStorageSize = "MinStorageSize"
            case minIopsPerDbInstance = "MinIopsPerDbInstance"
            case supportsIAMDatabaseAuthentication = "SupportsIAMDatabaseAuthentication"
            case readReplicaCapable = "ReadReplicaCapable"
            case licenseModel = "LicenseModel"
            case availableProcessorFeatures = "AvailableProcessorFeatures"
            case supportsIops = "SupportsIops"
            case dBInstanceClass = "DBInstanceClass"
        }
    }

    public struct DescribeDBClusterParameterGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterParameterGroupName", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  An optional pagination token provided by a previous DescribeDBClusterParameterGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The name of a specific DB cluster parameter group to return details for. Constraints:   If supplied, must match the name of an existing DBClusterParameterGroup.  
        public let dBClusterParameterGroupName: String?

        public init(maxRecords: Int32? = nil, filters: FilterList? = nil, marker: String? = nil, dBClusterParameterGroupName: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.marker = marker
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case marker = "Marker"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
        }
    }

    public struct StartDBInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string)
        ]
        ///  The user-supplied instance identifier. 
        public let dBInstanceIdentifier: String

        public init(dBInstanceIdentifier: String) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
        }
    }

    public struct ProcessorFeatureList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProcessorFeature", required: false, type: .list)
        ]
        public let processorFeature: [ProcessorFeature]?

        public init(processorFeature: [ProcessorFeature]? = nil) {
            self.processorFeature = processorFeature
        }

        private enum CodingKeys: String, CodingKey {
            case processorFeature = "ProcessorFeature"
        }
    }

    public struct BacktrackDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "UseEarliestTimeOnPointInTimeUnavailable", required: false, type: .boolean), 
            AWSShapeMember(label: "Force", required: false, type: .boolean), 
            AWSShapeMember(label: "BacktrackTo", required: true, type: .timestamp)
        ]
        /// The DB cluster identifier of the DB cluster to be backtracked. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: my-cluster1 
        public let dBClusterIdentifier: String
        /// If BacktrackTo is set to a timestamp earlier than the earliest backtrack time, this value backtracks the DB cluster to the earliest possible backtrack time. Otherwise, an error occurs.
        public let useEarliestTimeOnPointInTimeUnavailable: Bool?
        /// A value that, if specified, forces the DB cluster to backtrack when binary logging is enabled. Otherwise, an error occurs when binary logging is enabled.
        public let force: Bool?
        /// The timestamp of the time to backtrack the DB cluster to, specified in ISO 8601 format. For more information about ISO 8601, see the ISO8601 Wikipedia page.   If the specified time is not a consistent time for the DB cluster, Aurora automatically chooses the nearest possible consistent time for the DB cluster.  Constraints:   Must contain a valid ISO 8601 timestamp.   Cannot contain a timestamp set in the future.   Example: 2017-07-08T18:00Z 
        public let backtrackTo: TimeStamp

        public init(dBClusterIdentifier: String, useEarliestTimeOnPointInTimeUnavailable: Bool? = nil, force: Bool? = nil, backtrackTo: TimeStamp) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.useEarliestTimeOnPointInTimeUnavailable = useEarliestTimeOnPointInTimeUnavailable
            self.force = force
            self.backtrackTo = backtrackTo
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case useEarliestTimeOnPointInTimeUnavailable = "UseEarliestTimeOnPointInTimeUnavailable"
            case force = "Force"
            case backtrackTo = "BacktrackTo"
        }
    }

    public struct CreateDBClusterSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "DBClusterSnapshotIdentifier", required: true, type: .string)
        ]
        /// The tags to be assigned to the DB cluster snapshot.
        public let tags: TagList?
        /// The identifier of the DB cluster to create a snapshot for. This parameter is not case-sensitive. Constraints:   Must match the identifier of an existing DBCluster.   Example: my-cluster1 
        public let dBClusterIdentifier: String
        /// The identifier of the DB cluster snapshot. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: my-cluster1-snapshot1 
        public let dBClusterSnapshotIdentifier: String

        public init(tags: TagList? = nil, dBClusterIdentifier: String, dBClusterSnapshotIdentifier: String) {
            self.tags = tags
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
        }
    }

    public struct OrderableDBInstanceOptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrderableDBInstanceOptions", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// An OrderableDBInstanceOption structure containing information about orderable options for the DB instance.
        public let orderableDBInstanceOptions: OrderableDBInstanceOptionsList?
        ///  An optional pagination token provided by a previous OrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords . 
        public let marker: String?

        public init(orderableDBInstanceOptions: OrderableDBInstanceOptionsList? = nil, marker: String? = nil) {
            self.orderableDBInstanceOptions = orderableDBInstanceOptions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case orderableDBInstanceOptions = "OrderableDBInstanceOptions"
            case marker = "Marker"
        }
    }

    public struct DescribeReservedDBInstancesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Duration", required: false, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "ReservedDBInstancesOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "OfferingType", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "ReservedDBInstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "ProductDescription", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// The duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration. Valid Values: 1 | 3 | 31536000 | 94608000 
        public let duration: String?
        /// The Multi-AZ filter value. Specify this parameter to show only those reservations matching the specified Multi-AZ parameter.
        public let multiAZ: Bool?
        /// The DB instance class filter value. Specify this parameter to show only those reservations matching the specified DB instances class.
        public let dBInstanceClass: String?
        /// The offering identifier filter value. Specify this parameter to show only purchased reservations matching the specified offering identifier.
        public let reservedDBInstancesOfferingId: String?
        /// The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type. Valid Values: "Partial Upfront" | "All Upfront" | "No Upfront"  
        public let offeringType: String?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The reserved DB instance identifier filter value. Specify this parameter to show only the reservation that matches the specified reservation ID.
        public let reservedDBInstanceId: String?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        /// The product description filter value. Specify this parameter to show only those reservations matching the specified product description.
        public let productDescription: String?
        ///  The maximum number of records to include in the response. If more than the MaxRecords value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(duration: String? = nil, multiAZ: Bool? = nil, dBInstanceClass: String? = nil, reservedDBInstancesOfferingId: String? = nil, offeringType: String? = nil, marker: String? = nil, reservedDBInstanceId: String? = nil, filters: FilterList? = nil, productDescription: String? = nil, maxRecords: Int32? = nil) {
            self.duration = duration
            self.multiAZ = multiAZ
            self.dBInstanceClass = dBInstanceClass
            self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
            self.offeringType = offeringType
            self.marker = marker
            self.reservedDBInstanceId = reservedDBInstanceId
            self.filters = filters
            self.productDescription = productDescription
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case duration = "Duration"
            case multiAZ = "MultiAZ"
            case dBInstanceClass = "DBInstanceClass"
            case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
            case offeringType = "OfferingType"
            case marker = "Marker"
            case reservedDBInstanceId = "ReservedDBInstanceId"
            case filters = "Filters"
            case productDescription = "ProductDescription"
            case maxRecords = "MaxRecords"
        }
    }

    public struct RebootDBInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "ForceFailover", required: false, type: .boolean)
        ]
        /// The DB instance identifier. This parameter is stored as a lowercase string. Constraints:   Must match the identifier of an existing DBInstance.  
        public let dBInstanceIdentifier: String
        ///  When true, the reboot is conducted through a MultiAZ failover.  Constraint: You can't specify true if the instance is not configured for MultiAZ.
        public let forceFailover: Bool?

        public init(dBInstanceIdentifier: String, forceFailover: Bool? = nil) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.forceFailover = forceFailover
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case forceFailover = "ForceFailover"
        }
    }

    public struct DeleteEventSubscriptionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .structure)
        ]
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct DescribeValidDBInstanceModificationsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string)
        ]
        /// The customer identifier or the ARN of your DB instance. 
        public let dBInstanceIdentifier: String

        public init(dBInstanceIdentifier: String) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
        }
    }

    public struct DBSecurityGroupMembership: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "DBSecurityGroupName", required: false, type: .string)
        ]
        /// The status of the DB security group.
        public let status: String?
        /// The name of the DB security group.
        public let dBSecurityGroupName: String?

        public init(status: String? = nil, dBSecurityGroupName: String? = nil) {
            self.status = status
            self.dBSecurityGroupName = dBSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case dBSecurityGroupName = "DBSecurityGroupName"
        }
    }

    public struct ModifyDBInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MasterUserPassword", required: false, type: .string), 
            AWSShapeMember(label: "MonitoringRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "ApplyImmediately", required: false, type: .boolean), 
            AWSShapeMember(label: "AllowMajorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "PerformanceInsightsKMSKeyId", required: false, type: .string), 
            AWSShapeMember(label: "NewDBInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "UseDefaultProcessorFeatures", required: false, type: .boolean), 
            AWSShapeMember(label: "MonitoringInterval", required: false, type: .integer), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "CACertificateIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "CloudwatchLogsExportConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "DBSecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "DomainIAMRoleName", required: false, type: .string), 
            AWSShapeMember(label: "TdeCredentialArn", required: false, type: .string), 
            AWSShapeMember(label: "TdeCredentialPassword", required: false, type: .string), 
            AWSShapeMember(label: "PerformanceInsightsRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "PreferredBackupWindow", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "Domain", required: false, type: .string), 
            AWSShapeMember(label: "ProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "EnablePerformanceInsights", required: false, type: .boolean), 
            AWSShapeMember(label: "PromotionTier", required: false, type: .integer), 
            AWSShapeMember(label: "DBPortNumber", required: false, type: .integer), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "CopyTagsToSnapshot", required: false, type: .boolean)
        ]
        /// The new password for the master user. The password can include any printable ASCII character except "/", """, or "@".  Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the MasterUserPassword element exists in the PendingModifiedValues element of the operation response.   Amazon Aurora  Not applicable. The password for the master user is managed by the DB cluster. For more information, see ModifyDBCluster.  Default: Uses existing setting  MariaDB  Constraints: Must contain from 8 to 41 characters.  Microsoft SQL Server  Constraints: Must contain from 8 to 128 characters.  MySQL  Constraints: Must contain from 8 to 41 characters.  Oracle  Constraints: Must contain from 8 to 30 characters.  PostgreSQL  Constraints: Must contain from 8 to 128 characters.  Amazon RDS API actions never return the password, so this action provides a way to regain access to a primary instance user if the password is lost. This includes restoring privileges that might have been accidentally revoked.  
        public let masterUserPassword: String?
        /// The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, go to To create an IAM role for Amazon RDS Enhanced Monitoring. If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn value.
        public let monitoringRoleArn: String?
        /// Specifies if the DB instance is a Multi-AZ deployment. Changing this parameter doesn't result in an outage and the change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true for this request. 
        public let multiAZ: Bool?
        /// Specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the DB instance.   If this parameter is set to false, changes to the DB instance are applied during the next maintenance window. Some parameter changes can cause an outage and are applied on the next call to RebootDBInstance, or the next failure reboot. Review the table of parameters in Modifying a DB Instance and Using the Apply Immediately Parameter to see the impact that setting ApplyImmediately to true or false has for each modified parameter and to determine when the changes are applied.  Default: false 
        public let applyImmediately: Bool?
        /// Indicates that major version upgrades are allowed. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible. Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the DB instance's current version.
        public let allowMajorVersionUpgrade: Bool?
        /// The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
        public let performanceInsightsKMSKeyId: String?
        ///  The new DB instance identifier for the DB instance when renaming a DB instance. When you change the DB instance identifier, an instance reboot will occur immediately if you set Apply Immediately to true, or will occur during the next maintenance window if Apply Immediately to false. This value is stored as a lowercase string.  Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   The first character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: mydbinstance 
        public let newDBInstanceIdentifier: String?
        /// A value that specifies that the DB instance class of the DB instance uses its default processor features.
        public let useDefaultProcessorFeatures: Bool?
        /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0. The default is 0. If MonitoringRoleArn is specified, then you must also set MonitoringInterval to a value other than 0. Valid Values: 0, 1, 5, 10, 15, 30, 60 
        public let monitoringInterval: Int32?
        /// The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups. Changing this parameter can result in an outage if you change from 0 to a non-zero value or from a non-zero value to 0. These changes are applied during the next maintenance window unless the ApplyImmediately parameter is set to true for this request. If you change the parameter from one non-zero value to another non-zero value, the change is asynchronously applied as soon as possible.  Amazon Aurora  Not applicable. The retention period for automated backups is managed by the DB cluster. For more information, see ModifyDBCluster. Default: Uses existing setting Constraints:   Must be a value from 0 to 35   Can be specified for a MySQL Read Replica only if the source is running MySQL 5.6   Can be specified for a PostgreSQL Read Replica only if the source is running PostgreSQL 9.3.5   Cannot be set to 0 if the DB instance is a source to Read Replicas  
        public let backupRetentionPeriod: Int32?
        /// The new DB subnet group for the DB instance. You can use this parameter to move your DB instance to a different VPC. If your DB instance is not in a VPC, you can also use this parameter to move your DB instance into a VPC. For more information, see Updating the VPC for a DB Instance.  Changing the subnet group causes an outage during the change. The change is applied during the next maintenance window, unless you specify true for the ApplyImmediately parameter.  Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetGroup 
        public let dBSubnetGroupName: String?
        /// Indicates the certificate that needs to be associated with the instance.
        public let cACertificateIdentifier: String?
        ///  The version number of the database engine to upgrade to. Changing this parameter results in an outage and the change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true for this request.  For major version upgrades, if a nondefault DB parameter group is currently in use, a new DB parameter group in the DB parameter group family for the new engine version must be specified. The new DB parameter group can be the default for that DB parameter group family. For information about valid engine versions, see CreateDBInstance, or call DescribeDBEngineVersions.
        public let engineVersion: String?
        /// The DB instance identifier. This value is stored as a lowercase string. Constraints:   Must match the identifier of an existing DBInstance.  
        public let dBInstanceIdentifier: String
        /// The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB instance.
        public let cloudwatchLogsExportConfiguration: CloudwatchLogsExportConfiguration?
        /// The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter doesn't result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If there are pending actions that cause a reboot, and the maintenance window is changed to include the current time, then changing this parameter will cause a reboot of the DB instance. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied. Default: Uses existing setting Format: ddd:hh24:mi-ddd:hh24:mi Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Must be at least 30 minutes
        public let preferredMaintenanceWindow: String?
        /// The new compute and memory capacity of the DB instance, for example, db.m4.large. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class in the Amazon RDS User Guide.  If you modify the DB instance class, an outage occurs during the change. The change is applied during the next maintenance window, unless ApplyImmediately is specified as true for this request.  Default: Uses existing setting
        public let dBInstanceClass: String?
        /// A list of DB security groups to authorize on this DB instance. Changing this setting doesn't result in an outage and the change is asynchronously applied as soon as possible. Constraints:   If supplied, must match existing DBSecurityGroups.  
        public let dBSecurityGroups: DBSecurityGroupNameList?
        /// The name of the IAM role to use when making API calls to the Directory Service.
        public let domainIAMRoleName: String?
        /// The ARN from the key store with which to associate the instance for TDE encryption.
        public let tdeCredentialArn: String?
        /// The password for the given ARN from the key store in order to access the device.
        public let tdeCredentialPassword: String?
        /// The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
        public let performanceInsightsRetentionPeriod: Int32?
        /// The license model for the DB instance. Valid values: license-included | bring-your-own-license | general-public-license 
        public let licenseModel: String?
        /// The new Provisioned IOPS (I/O operations per second) value for the RDS instance.  Changing this setting doesn't result in an outage and the change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true for this request. If you are migrating from Provisioned IOPS to standard storage, set this value to 0. The DB instance will require a reboot for the change in storage type to take effect.  If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance.  Constraints: For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value.  Default: Uses existing setting
        public let iops: Int32?
        ///  The daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod parameter. Changing this parameter doesn't result in an outage and the change is asynchronously applied as soon as possible.   Amazon Aurora  Not applicable. The daily time range for creating automated backups is managed by the DB cluster. For more information, see ModifyDBCluster. Constraints:   Must be in the format hh24:mi-hh24:mi   Must be in Universal Time Coordinated (UTC)   Must not conflict with the preferred maintenance window   Must be at least 30 minutes  
        public let preferredBackupWindow: String?
        /// The name of the DB parameter group to apply to the DB instance. Changing this setting doesn't result in an outage. The parameter group name itself is changed immediately, but the actual parameter changes are not applied until you reboot the instance without failover. The db instance will NOT be rebooted automatically and the parameter changes will NOT be applied during the next maintenance window. Default: Uses existing setting Constraints: The DB parameter group must be in the same DB parameter group family as this DB instance.
        public let dBParameterGroupName: String?
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. You can enable IAM database authentication for the following database engines  Amazon Aurora  Not applicable. Mapping AWS IAM accounts to database accounts is managed by the DB cluster. For more information, see ModifyDBCluster.  MySQL    For MySQL 5.6, minor version 5.6.34 or higher   For MySQL 5.7, minor version 5.7.16 or higher   Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// A list of EC2 VPC security groups to authorize on this DB instance. This change is asynchronously applied as soon as possible.  Amazon Aurora  Not applicable. The associated list of EC2 VPC security groups is managed by the DB cluster. For more information, see ModifyDBCluster. Constraints:   If supplied, must match existing VpcSecurityGroupIds.  
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// Boolean value that indicates if the DB instance has a publicly resolvable DNS name. Set to True to make the DB instance Internet-facing with a publicly resolvable DNS name, which resolves to a public IP address. Set to False to make the DB instance internal with a DNS name that resolves to a private IP address.   PubliclyAccessible only applies to DB instances in a VPC. The DB instance must be part of a public subnet and PubliclyAccessible must be true in order for it to be publicly accessible.  Changes to the PubliclyAccessible parameter are applied immediately regardless of the value of the ApplyImmediately parameter. Default: false
        public let publiclyAccessible: Bool?
        /// Specifies the storage type to be associated with the DB instance.  If you specify Provisioned IOPS (io1), you must also include a value for the Iops parameter.  If you choose to migrate your DB instance from using standard storage to using Provisioned IOPS, or from using Provisioned IOPS to using standard storage, the process can take time. The duration of the migration depends on several factors such as database load, storage size, storage type (standard or Provisioned IOPS), amount of IOPS provisioned (if any), and the number of prior scale storage operations. Typical migration times are under 24 hours, but the process can take up to several days in some cases. During the migration, the DB instance is available for use, but might experience performance degradation. While the migration takes place, nightly backups for the instance are suspended. No other Amazon RDS operations can take place for the instance, including modifying the instance, rebooting the instance, deleting the instance, creating a Read Replica for the instance, and creating a DB snapshot of the instance.   Valid values: standard | gp2 | io1  Default: io1 if the Iops parameter is specified, otherwise standard 
        public let storageType: String?
        /// The new amount of storage (in gibibytes) to allocate for the DB instance.  For MariaDB, MySQL, Oracle, and PostgreSQL, the value supplied must be at least 10% greater than the current value. Values that are not at least 10% greater than the existing value are rounded up so that they are 10% greater than the current value.  For the valid values for allocated storage for each engine, see CreateDBInstance. 
        public let allocatedStorage: Int32?
        /// The Active Directory Domain to move the instance to. Specify none to remove the instance from its current domain. The domain must be created prior to this operation. Currently only a Microsoft SQL Server instance can be created in a Active Directory Domain. 
        public let domain: String?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        public let processorFeatures: ProcessorFeatureList?
        /// True to enable Performance Insights for the DB instance, and otherwise false. For more information, see Using Amazon Performance Insights in the Amazon Relational Database Service User Guide. 
        public let enablePerformanceInsights: Bool?
        /// A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see  Fault Tolerance for an Aurora DB Cluster.  Default: 1 Valid Values: 0 - 15
        public let promotionTier: Int32?
        /// The port number on which the database accepts connections. The value of the DBPortNumber parameter must not match any of the port values specified for options in the option group for the DB instance. Your database will restart when you change the DBPortNumber value regardless of the value of the ApplyImmediately parameter.  MySQL   Default: 3306   Valid Values: 1150-65535   MariaDB   Default: 3306   Valid Values: 1150-65535   PostgreSQL   Default: 5432   Valid Values: 1150-65535  Type: Integer  Oracle   Default: 1521   Valid Values: 1150-65535   SQL Server   Default: 1433   Valid Values: 1150-65535 except for 1434, 3389, 47001, 49152, and 49152 through 49156.   Amazon Aurora   Default: 3306   Valid Values: 1150-65535 
        public let dBPortNumber: Int32?
        ///  Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window. Changing this parameter doesn't result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to true during the maintenance window, and a newer minor version is available, and RDS has enabled auto patching for that engine version. 
        public let autoMinorVersionUpgrade: Bool?
        ///  Indicates that the DB instance should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case and the change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.  Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance
        public let optionGroupName: String?
        /// True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false. The default is false.
        public let copyTagsToSnapshot: Bool?

        public init(masterUserPassword: String? = nil, monitoringRoleArn: String? = nil, multiAZ: Bool? = nil, applyImmediately: Bool? = nil, allowMajorVersionUpgrade: Bool? = nil, performanceInsightsKMSKeyId: String? = nil, newDBInstanceIdentifier: String? = nil, useDefaultProcessorFeatures: Bool? = nil, monitoringInterval: Int32? = nil, backupRetentionPeriod: Int32? = nil, dBSubnetGroupName: String? = nil, cACertificateIdentifier: String? = nil, engineVersion: String? = nil, dBInstanceIdentifier: String, cloudwatchLogsExportConfiguration: CloudwatchLogsExportConfiguration? = nil, preferredMaintenanceWindow: String? = nil, dBInstanceClass: String? = nil, dBSecurityGroups: DBSecurityGroupNameList? = nil, domainIAMRoleName: String? = nil, tdeCredentialArn: String? = nil, tdeCredentialPassword: String? = nil, performanceInsightsRetentionPeriod: Int32? = nil, licenseModel: String? = nil, iops: Int32? = nil, preferredBackupWindow: String? = nil, dBParameterGroupName: String? = nil, enableIAMDatabaseAuthentication: Bool? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, publiclyAccessible: Bool? = nil, storageType: String? = nil, allocatedStorage: Int32? = nil, domain: String? = nil, processorFeatures: ProcessorFeatureList? = nil, enablePerformanceInsights: Bool? = nil, promotionTier: Int32? = nil, dBPortNumber: Int32? = nil, autoMinorVersionUpgrade: Bool? = nil, optionGroupName: String? = nil, copyTagsToSnapshot: Bool? = nil) {
            self.masterUserPassword = masterUserPassword
            self.monitoringRoleArn = monitoringRoleArn
            self.multiAZ = multiAZ
            self.applyImmediately = applyImmediately
            self.allowMajorVersionUpgrade = allowMajorVersionUpgrade
            self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
            self.newDBInstanceIdentifier = newDBInstanceIdentifier
            self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
            self.monitoringInterval = monitoringInterval
            self.backupRetentionPeriod = backupRetentionPeriod
            self.dBSubnetGroupName = dBSubnetGroupName
            self.cACertificateIdentifier = cACertificateIdentifier
            self.engineVersion = engineVersion
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.cloudwatchLogsExportConfiguration = cloudwatchLogsExportConfiguration
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.dBInstanceClass = dBInstanceClass
            self.dBSecurityGroups = dBSecurityGroups
            self.domainIAMRoleName = domainIAMRoleName
            self.tdeCredentialArn = tdeCredentialArn
            self.tdeCredentialPassword = tdeCredentialPassword
            self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
            self.licenseModel = licenseModel
            self.iops = iops
            self.preferredBackupWindow = preferredBackupWindow
            self.dBParameterGroupName = dBParameterGroupName
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.publiclyAccessible = publiclyAccessible
            self.storageType = storageType
            self.allocatedStorage = allocatedStorage
            self.domain = domain
            self.processorFeatures = processorFeatures
            self.enablePerformanceInsights = enablePerformanceInsights
            self.promotionTier = promotionTier
            self.dBPortNumber = dBPortNumber
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.optionGroupName = optionGroupName
            self.copyTagsToSnapshot = copyTagsToSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case masterUserPassword = "MasterUserPassword"
            case monitoringRoleArn = "MonitoringRoleArn"
            case multiAZ = "MultiAZ"
            case applyImmediately = "ApplyImmediately"
            case allowMajorVersionUpgrade = "AllowMajorVersionUpgrade"
            case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
            case newDBInstanceIdentifier = "NewDBInstanceIdentifier"
            case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
            case monitoringInterval = "MonitoringInterval"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case cACertificateIdentifier = "CACertificateIdentifier"
            case engineVersion = "EngineVersion"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case cloudwatchLogsExportConfiguration = "CloudwatchLogsExportConfiguration"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case dBInstanceClass = "DBInstanceClass"
            case dBSecurityGroups = "DBSecurityGroups"
            case domainIAMRoleName = "DomainIAMRoleName"
            case tdeCredentialArn = "TdeCredentialArn"
            case tdeCredentialPassword = "TdeCredentialPassword"
            case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
            case licenseModel = "LicenseModel"
            case iops = "Iops"
            case preferredBackupWindow = "PreferredBackupWindow"
            case dBParameterGroupName = "DBParameterGroupName"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case publiclyAccessible = "PubliclyAccessible"
            case storageType = "StorageType"
            case allocatedStorage = "AllocatedStorage"
            case domain = "Domain"
            case processorFeatures = "ProcessorFeatures"
            case enablePerformanceInsights = "EnablePerformanceInsights"
            case promotionTier = "PromotionTier"
            case dBPortNumber = "DBPortNumber"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case optionGroupName = "OptionGroupName"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
        }
    }

    public struct FilterValueList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .list)
        ]
        public let value: [String]?

        public init(value: [String]? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct SourceRegion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RegionName", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "Endpoint", required: false, type: .string)
        ]
        /// The name of the source AWS Region.
        public let regionName: String?
        /// The status of the source AWS Region.
        public let status: String?
        /// The endpoint for the source AWS Region endpoint.
        public let endpoint: String?

        public init(regionName: String? = nil, status: String? = nil, endpoint: String? = nil) {
            self.regionName = regionName
            self.status = status
            self.endpoint = endpoint
        }

        private enum CodingKeys: String, CodingKey {
            case regionName = "RegionName"
            case status = "Status"
            case endpoint = "Endpoint"
        }
    }

    public struct DBInstanceStatusInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Normal", required: false, type: .boolean), 
            AWSShapeMember(label: "StatusType", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string)
        ]
        /// Details of the error if there is an error for the instance. If the instance is not in an error state, this value is blank.
        public let message: String?
        /// Boolean value that is true if the instance is operating normally, or false if the instance is in an error state.
        public let normal: Bool?
        /// This value is currently "read replication."
        public let statusType: String?
        /// Status of the DB instance. For a StatusType of read replica, the values can be replicating, error, stopped, or terminated.
        public let status: String?

        public init(message: String? = nil, normal: Bool? = nil, statusType: String? = nil, status: String? = nil) {
            self.message = message
            self.normal = normal
            self.statusType = statusType
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case normal = "Normal"
            case statusType = "StatusType"
            case status = "Status"
        }
    }

    public struct Option: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "OptionDescription", required: false, type: .string), 
            AWSShapeMember(label: "OptionVersion", required: false, type: .string), 
            AWSShapeMember(label: "DBSecurityGroupMemberships", required: false, type: .structure), 
            AWSShapeMember(label: "VpcSecurityGroupMemberships", required: false, type: .structure), 
            AWSShapeMember(label: "Permanent", required: false, type: .boolean), 
            AWSShapeMember(label: "OptionSettings", required: false, type: .structure), 
            AWSShapeMember(label: "Persistent", required: false, type: .boolean), 
            AWSShapeMember(label: "OptionName", required: false, type: .string)
        ]
        /// If required, the port configured for this option to use.
        public let port: Int32?
        /// The description of the option.
        public let optionDescription: String?
        /// The version of the option.
        public let optionVersion: String?
        /// If the option requires access to a port, then this DB security group allows access to the port.
        public let dBSecurityGroupMemberships: DBSecurityGroupMembershipList?
        /// If the option requires access to a port, then this VPC security group allows access to the port.
        public let vpcSecurityGroupMemberships: VpcSecurityGroupMembershipList?
        /// Indicate if this option is permanent.
        public let permanent: Bool?
        /// The option settings for this option.
        public let optionSettings: OptionSettingConfigurationList?
        /// Indicate if this option is persistent.
        public let persistent: Bool?
        /// The name of the option.
        public let optionName: String?

        public init(port: Int32? = nil, optionDescription: String? = nil, optionVersion: String? = nil, dBSecurityGroupMemberships: DBSecurityGroupMembershipList? = nil, vpcSecurityGroupMemberships: VpcSecurityGroupMembershipList? = nil, permanent: Bool? = nil, optionSettings: OptionSettingConfigurationList? = nil, persistent: Bool? = nil, optionName: String? = nil) {
            self.port = port
            self.optionDescription = optionDescription
            self.optionVersion = optionVersion
            self.dBSecurityGroupMemberships = dBSecurityGroupMemberships
            self.vpcSecurityGroupMemberships = vpcSecurityGroupMemberships
            self.permanent = permanent
            self.optionSettings = optionSettings
            self.persistent = persistent
            self.optionName = optionName
        }

        private enum CodingKeys: String, CodingKey {
            case port = "Port"
            case optionDescription = "OptionDescription"
            case optionVersion = "OptionVersion"
            case dBSecurityGroupMemberships = "DBSecurityGroupMemberships"
            case vpcSecurityGroupMemberships = "VpcSecurityGroupMemberships"
            case permanent = "Permanent"
            case optionSettings = "OptionSettings"
            case persistent = "Persistent"
            case optionName = "OptionName"
        }
    }

    public struct ModifyDBParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: true, type: .structure), 
            AWSShapeMember(label: "DBParameterGroupName", required: true, type: .string)
        ]
        /// An array of parameter names, values, and the apply method for the parameter update. At least one parameter name, value, and apply method must be supplied; subsequent arguments are optional. A maximum of 20 parameters can be modified in a single request. Valid Values (for the application method): immediate | pending-reboot   You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when you reboot the DB instance without failover. 
        public let parameters: ParametersList
        /// The name of the DB parameter group. Constraints:   If supplied, must match the name of an existing DBParameterGroup.  
        public let dBParameterGroupName: String

        public init(parameters: ParametersList, dBParameterGroupName: String) {
            self.parameters = parameters
            self.dBParameterGroupName = dBParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case dBParameterGroupName = "DBParameterGroupName"
        }
    }

    public struct DescribeDBClusterBacktracksMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "BacktrackIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string)
        ]
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A filter that specifies one or more DB clusters to describe. Supported filters include the following:    db-cluster-backtrack-id - Accepts backtrack identifiers. The results list includes information about only the backtracks identified by these identifiers.    db-cluster-backtrack-status - Accepts any of the following backtrack status values:    applying     completed     failed     pending    The results list includes information about only the backtracks identified by these values. For more information about backtrack status values, see DBClusterBacktrack.  
        public let filters: FilterList?
        /// If specified, this value is the backtrack identifier of the backtrack to be described. Constraints:   Must contain a valid universally unique identifier (UUID). For more information about UUIDs, see A Universally Unique Identifier (UUID) URN Namespace.   Example: 123e4567-e89b-12d3-a456-426655440000 
        public let backtrackIdentifier: String?
        ///  An optional pagination token provided by a previous DescribeDBClusterBacktracks request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The DB cluster identifier of the DB cluster to be described. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: my-cluster1 
        public let dBClusterIdentifier: String

        public init(maxRecords: Int32? = nil, filters: FilterList? = nil, backtrackIdentifier: String? = nil, marker: String? = nil, dBClusterIdentifier: String) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.backtrackIdentifier = backtrackIdentifier
            self.marker = marker
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case backtrackIdentifier = "BacktrackIdentifier"
            case marker = "Marker"
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct DoubleRangeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DoubleRange", required: false, type: .list)
        ]
        public let doubleRange: [DoubleRange]?

        public init(doubleRange: [DoubleRange]? = nil) {
            self.doubleRange = doubleRange
        }

        private enum CodingKeys: String, CodingKey {
            case doubleRange = "DoubleRange"
        }
    }

    public struct DBSecurityGroups: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSecurityGroup", required: false, type: .list)
        ]
        public let dBSecurityGroup: [DBSecurityGroup]?

        public init(dBSecurityGroup: [DBSecurityGroup]? = nil) {
            self.dBSecurityGroup = dBSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroup = "DBSecurityGroup"
        }
    }

    public struct DeleteDBInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FinalDBSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "SkipFinalSnapshot", required: false, type: .boolean)
        ]
        ///  The DBSnapshotIdentifier of the new DBSnapshot created when SkipFinalSnapshot is set to false.   Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.  Constraints:   Must be 1 to 255 letters or numbers.   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens   Cannot be specified when deleting a Read Replica.  
        public let finalDBSnapshotIdentifier: String?
        /// The DB instance identifier for the DB instance to be deleted. This parameter isn't case-sensitive. Constraints:   Must match the name of an existing DB instance.  
        public let dBInstanceIdentifier: String
        ///  Determines whether a final DB snapshot is created before the DB instance is deleted. If true is specified, no DBSnapshot is created. If false is specified, a DB snapshot is created before the DB instance is deleted.  Note that when a DB instance is in a failure state and has a status of 'failed', 'incompatible-restore', or 'incompatible-network', it can only be deleted when the SkipFinalSnapshot parameter is set to "true". Specify true when deleting a Read Replica.  The FinalDBSnapshotIdentifier parameter must be specified if SkipFinalSnapshot is false.  Default: false 
        public let skipFinalSnapshot: Bool?

        public init(finalDBSnapshotIdentifier: String? = nil, dBInstanceIdentifier: String, skipFinalSnapshot: Bool? = nil) {
            self.finalDBSnapshotIdentifier = finalDBSnapshotIdentifier
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.skipFinalSnapshot = skipFinalSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case finalDBSnapshotIdentifier = "FinalDBSnapshotIdentifier"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case skipFinalSnapshot = "SkipFinalSnapshot"
        }
    }

    public struct DBClusterSnapshotAttributesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterSnapshotAttributes", required: false, type: .structure)
        ]
        /// The identifier of the manual DB cluster snapshot that the attributes apply to.
        public let dBClusterSnapshotIdentifier: String?
        /// The list of attributes and values for the manual DB cluster snapshot.
        public let dBClusterSnapshotAttributes: DBClusterSnapshotAttributeList?

        public init(dBClusterSnapshotIdentifier: String? = nil, dBClusterSnapshotAttributes: DBClusterSnapshotAttributeList? = nil) {
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
            self.dBClusterSnapshotAttributes = dBClusterSnapshotAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
            case dBClusterSnapshotAttributes = "DBClusterSnapshotAttributes"
        }
    }

    public struct DBClusterSnapshotList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshot", required: false, type: .list)
        ]
        public let dBClusterSnapshot: [DBClusterSnapshot]?

        public init(dBClusterSnapshot: [DBClusterSnapshot]? = nil) {
            self.dBClusterSnapshot = dBClusterSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshot = "DBClusterSnapshot"
        }
    }

    public struct DBClusterBacktrackMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterBacktracks", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Contains a list of backtracks for the user.
        public let dBClusterBacktracks: DBClusterBacktrackList?
        /// A pagination token that can be used in a subsequent DescribeDBClusterBacktracks request.
        public let marker: String?

        public init(dBClusterBacktracks: DBClusterBacktrackList? = nil, marker: String? = nil) {
            self.dBClusterBacktracks = dBClusterBacktracks
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterBacktracks = "DBClusterBacktracks"
            case marker = "Marker"
        }
    }

    public struct CreateDBClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .structure)
        ]
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct CopyDBClusterSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshot", required: false, type: .structure)
        ]
        public let dBClusterSnapshot: DBClusterSnapshot?

        public init(dBClusterSnapshot: DBClusterSnapshot? = nil) {
            self.dBClusterSnapshot = dBClusterSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshot = "DBClusterSnapshot"
        }
    }

    public struct DescribeDBLogFilesList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DescribeDBLogFilesDetails", required: false, type: .list)
        ]
        public let describeDBLogFilesDetails: [DescribeDBLogFilesDetails]?

        public init(describeDBLogFilesDetails: [DescribeDBLogFilesDetails]? = nil) {
            self.describeDBLogFilesDetails = describeDBLogFilesDetails
        }

        private enum CodingKeys: String, CodingKey {
            case describeDBLogFilesDetails = "DescribeDBLogFilesDetails"
        }
    }

    public struct DBEngineVersionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBEngineVersion", required: false, type: .list)
        ]
        public let dBEngineVersion: [DBEngineVersion]?

        public init(dBEngineVersion: [DBEngineVersion]? = nil) {
            self.dBEngineVersion = dBEngineVersion
        }

        private enum CodingKeys: String, CodingKey {
            case dBEngineVersion = "DBEngineVersion"
        }
    }

    public struct DBSnapshot: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotArn", required: false, type: .string), 
            AWSShapeMember(label: "SourceDBSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "DBSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "TdeCredentialArn", required: false, type: .string), 
            AWSShapeMember(label: "Timezone", required: false, type: .string), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "SourceRegion", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotType", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "PercentProgress", required: false, type: .integer), 
            AWSShapeMember(label: "IAMDatabaseAuthenticationEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "MasterUsername", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) for the DB snapshot.
        public let dBSnapshotArn: String?
        /// The DB snapshot Amazon Resource Name (ARN) that the DB snapshot was copied from. It only has value in case of cross-customer or cross-region copy.
        public let sourceDBSnapshotIdentifier: String?
        /// Specifies the DB instance identifier of the DB instance this DB snapshot was created from.
        public let dBInstanceIdentifier: String?
        ///  If Encrypted is true, the AWS KMS key identifier for the encrypted DB snapshot. 
        public let kmsKeyId: String?
        /// Specifies the identifier for the DB snapshot.
        public let dBSnapshotIdentifier: String?
        /// Specifies the name of the database engine.
        public let engine: String?
        /// The ARN from the key store with which to associate the instance for TDE encryption.
        public let tdeCredentialArn: String?
        /// The time zone of the DB snapshot. In most cases, the Timezone element is empty. Timezone content appears only for snapshots taken from Microsoft SQL Server DB instances that were created with a time zone specified. 
        public let timezone: String?
        /// License model information for the restored DB instance.
        public let licenseModel: String?
        /// Provides the time when the snapshot was taken, in Universal Coordinated Time (UTC).
        public let snapshotCreateTime: TimeStamp?
        /// Specifies the Provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.
        public let iops: Int32?
        /// The AWS Region that the DB snapshot was created in or copied from.
        public let sourceRegion: String?
        /// Provides the type of the DB snapshot.
        public let snapshotType: String?
        /// Specifies the status of this DB snapshot.
        public let status: String?
        /// Specifies whether the DB snapshot is encrypted.
        public let encrypted: Bool?
        /// The percentage of the estimated data that has been transferred.
        public let percentProgress: Int32?
        /// True if mapping of AWS Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.
        public let iAMDatabaseAuthenticationEnabled: Bool?
        /// Specifies the storage type associated with DB snapshot.
        public let storageType: String?
        /// Specifies the allocated storage size in gibibytes (GiB).
        public let allocatedStorage: Int32?
        /// Specifies the time when the snapshot was taken, in Universal Coordinated Time (UTC).
        public let instanceCreateTime: TimeStamp?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance when the DB snapshot was created.
        public let processorFeatures: ProcessorFeatureList?
        /// Provides the master username for the DB snapshot.
        public let masterUsername: String?
        /// Provides the VPC ID associated with the DB snapshot.
        public let vpcId: String?
        /// Specifies the port that the database engine was listening on at the time of the snapshot.
        public let port: Int32?
        /// Provides the option group name for the DB snapshot.
        public let optionGroupName: String?
        /// Specifies the name of the Availability Zone the DB instance was located in at the time of the DB snapshot.
        public let availabilityZone: String?
        /// Specifies the version of the database engine.
        public let engineVersion: String?

        public init(dBSnapshotArn: String? = nil, sourceDBSnapshotIdentifier: String? = nil, dBInstanceIdentifier: String? = nil, kmsKeyId: String? = nil, dBSnapshotIdentifier: String? = nil, engine: String? = nil, tdeCredentialArn: String? = nil, timezone: String? = nil, licenseModel: String? = nil, snapshotCreateTime: TimeStamp? = nil, iops: Int32? = nil, sourceRegion: String? = nil, snapshotType: String? = nil, status: String? = nil, encrypted: Bool? = nil, percentProgress: Int32? = nil, iAMDatabaseAuthenticationEnabled: Bool? = nil, storageType: String? = nil, allocatedStorage: Int32? = nil, instanceCreateTime: TimeStamp? = nil, processorFeatures: ProcessorFeatureList? = nil, masterUsername: String? = nil, vpcId: String? = nil, port: Int32? = nil, optionGroupName: String? = nil, availabilityZone: String? = nil, engineVersion: String? = nil) {
            self.dBSnapshotArn = dBSnapshotArn
            self.sourceDBSnapshotIdentifier = sourceDBSnapshotIdentifier
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.kmsKeyId = kmsKeyId
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.engine = engine
            self.tdeCredentialArn = tdeCredentialArn
            self.timezone = timezone
            self.licenseModel = licenseModel
            self.snapshotCreateTime = snapshotCreateTime
            self.iops = iops
            self.sourceRegion = sourceRegion
            self.snapshotType = snapshotType
            self.status = status
            self.encrypted = encrypted
            self.percentProgress = percentProgress
            self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
            self.storageType = storageType
            self.allocatedStorage = allocatedStorage
            self.instanceCreateTime = instanceCreateTime
            self.processorFeatures = processorFeatures
            self.masterUsername = masterUsername
            self.vpcId = vpcId
            self.port = port
            self.optionGroupName = optionGroupName
            self.availabilityZone = availabilityZone
            self.engineVersion = engineVersion
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotArn = "DBSnapshotArn"
            case sourceDBSnapshotIdentifier = "SourceDBSnapshotIdentifier"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case kmsKeyId = "KmsKeyId"
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case engine = "Engine"
            case tdeCredentialArn = "TdeCredentialArn"
            case timezone = "Timezone"
            case licenseModel = "LicenseModel"
            case snapshotCreateTime = "SnapshotCreateTime"
            case iops = "Iops"
            case sourceRegion = "SourceRegion"
            case snapshotType = "SnapshotType"
            case status = "Status"
            case encrypted = "Encrypted"
            case percentProgress = "PercentProgress"
            case iAMDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
            case storageType = "StorageType"
            case allocatedStorage = "AllocatedStorage"
            case instanceCreateTime = "InstanceCreateTime"
            case processorFeatures = "ProcessorFeatures"
            case masterUsername = "MasterUsername"
            case vpcId = "VpcId"
            case port = "Port"
            case optionGroupName = "OptionGroupName"
            case availabilityZone = "AvailabilityZone"
            case engineVersion = "EngineVersion"
        }
    }

    public struct OptionGroupOptionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroupOption", required: false, type: .list)
        ]
        public let optionGroupOption: [OptionGroupOption]?

        public init(optionGroupOption: [OptionGroupOption]? = nil) {
            self.optionGroupOption = optionGroupOption
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroupOption = "OptionGroupOption"
        }
    }

    public struct IPRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CIDRIP", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string)
        ]
        /// Specifies the IP range.
        public let cidrip: String?
        /// Specifies the status of the IP range. Status can be "authorizing", "authorized", "revoking", and "revoked".
        public let status: String?

        public init(cidrip: String? = nil, status: String? = nil) {
            self.cidrip = cidrip
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case cidrip = "CIDRIP"
            case status = "Status"
        }
    }

    public struct ListTagsForResourceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "ResourceName", required: true, type: .string)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        /// The Amazon RDS resource with tags to be listed. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see  Constructing an RDS Amazon Resource Name (ARN).
        public let resourceName: String

        public init(filters: FilterList? = nil, resourceName: String) {
            self.filters = filters
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case resourceName = "ResourceName"
        }
    }

    public struct ProcessorFeature: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The name of the processor feature. Valid names are coreCount and threadsPerCore.
        public let name: String?
        /// The value of a processor feature name.
        public let value: String?

        public init(name: String? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct TagListMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagList", required: false, type: .structure)
        ]
        /// List of tags returned by the ListTagsForResource operation.
        public let tagList: TagList?

        public init(tagList: TagList? = nil) {
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case tagList = "TagList"
        }
    }

    public struct OptionsDependedOn: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionName", required: false, type: .list)
        ]
        public let optionName: [String]?

        public init(optionName: [String]? = nil) {
            self.optionName = optionName
        }

        private enum CodingKeys: String, CodingKey {
            case optionName = "OptionName"
        }
    }

    public struct ModifyEventSubscriptionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .structure)
        ]
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct DBSecurityGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBSecurityGroups", required: false, type: .structure)
        ]
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        ///  A list of DBSecurityGroup instances. 
        public let dBSecurityGroups: DBSecurityGroups?

        public init(marker: String? = nil, dBSecurityGroups: DBSecurityGroups? = nil) {
            self.marker = marker
            self.dBSecurityGroups = dBSecurityGroups
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case dBSecurityGroups = "DBSecurityGroups"
        }
    }

    public struct DeleteDBSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSubnetGroupName", required: true, type: .string)
        ]
        /// The name of the database subnet group to delete.  You can't delete the default subnet group.  Constraints: Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup 
        public let dBSubnetGroupName: String

        public init(dBSubnetGroupName: String) {
            self.dBSubnetGroupName = dBSubnetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroupName = "DBSubnetGroupName"
        }
    }

    public struct PromoteReadReplicaMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "PreferredBackupWindow", required: false, type: .string), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer)
        ]
        /// The DB instance identifier. This value is stored as a lowercase string. Constraints:   Must match the identifier of an existing Read Replica DB instance.   Example: mydbinstance 
        public let dBInstanceIdentifier: String
        ///  The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter.   The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see  Adjusting the Preferred Maintenance Window in the Amazon RDS User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.  
        public let preferredBackupWindow: String?
        /// The number of days to retain automated backups. Setting this parameter to a positive number enables backups. Setting this parameter to 0 disables automated backups. Default: 1 Constraints:   Must be a value from 0 to 8  
        public let backupRetentionPeriod: Int32?

        public init(dBInstanceIdentifier: String, preferredBackupWindow: String? = nil, backupRetentionPeriod: Int32? = nil) {
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.preferredBackupWindow = preferredBackupWindow
            self.backupRetentionPeriod = backupRetentionPeriod
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case preferredBackupWindow = "PreferredBackupWindow"
            case backupRetentionPeriod = "BackupRetentionPeriod"
        }
    }

    public struct OptionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Option", required: false, type: .list)
        ]
        public let option: [Option]?

        public init(option: [Option]? = nil) {
            self.option = option
        }

        private enum CodingKeys: String, CodingKey {
            case option = "Option"
        }
    }

    public struct Range: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "To", required: false, type: .integer), 
            AWSShapeMember(label: "From", required: false, type: .integer), 
            AWSShapeMember(label: "Step", required: false, type: .integer)
        ]
        /// The maximum value in the range.
        public let to: Int32?
        /// The minimum value in the range.
        public let from: Int32?
        /// The step value for the range. For example, if you have a range of 5,000 to 10,000, with a step value of 1,000, the valid values start at 5,000 and step up by 1,000. Even though 7,500 is within the range, it isn't a valid value for the range. The valid values are 5,000, 6,000, 7,000, 8,000... 
        public let step: Int32?

        public init(to: Int32? = nil, from: Int32? = nil, step: Int32? = nil) {
            self.to = to
            self.from = from
            self.step = step
        }

        private enum CodingKeys: String, CodingKey {
            case to = "To"
            case from = "From"
            case step = "Step"
        }
    }

    public struct RevokeDBSecurityGroupIngressMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CIDRIP", required: false, type: .string), 
            AWSShapeMember(label: "DBSecurityGroupName", required: true, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupId", required: false, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupOwnerId", required: false, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupName", required: false, type: .string)
        ]
        ///  The IP range to revoke access from. Must be a valid CIDR range. If CIDRIP is specified, EC2SecurityGroupName, EC2SecurityGroupId and EC2SecurityGroupOwnerId can't be provided. 
        public let cidrip: String?
        /// The name of the DB security group to revoke ingress from.
        public let dBSecurityGroupName: String
        ///  The id of the EC2 security group to revoke access from. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided. 
        public let eC2SecurityGroupId: String?
        ///  The AWS Account Number of the owner of the EC2 security group specified in the EC2SecurityGroupName parameter. The AWS Access Key ID is not an acceptable value. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided. 
        public let eC2SecurityGroupOwnerId: String?
        ///  The name of the EC2 security group to revoke access from. For VPC DB security groups, EC2SecurityGroupId must be provided. Otherwise, EC2SecurityGroupOwnerId and either EC2SecurityGroupName or EC2SecurityGroupId must be provided. 
        public let eC2SecurityGroupName: String?

        public init(cidrip: String? = nil, dBSecurityGroupName: String, eC2SecurityGroupId: String? = nil, eC2SecurityGroupOwnerId: String? = nil, eC2SecurityGroupName: String? = nil) {
            self.cidrip = cidrip
            self.dBSecurityGroupName = dBSecurityGroupName
            self.eC2SecurityGroupId = eC2SecurityGroupId
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.eC2SecurityGroupName = eC2SecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case cidrip = "CIDRIP"
            case dBSecurityGroupName = "DBSecurityGroupName"
            case eC2SecurityGroupId = "EC2SecurityGroupId"
            case eC2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
            case eC2SecurityGroupName = "EC2SecurityGroupName"
        }
    }

    public struct VpcSecurityGroupMembership: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupId", required: false, type: .string)
        ]
        /// The status of the VPC security group.
        public let status: String?
        /// The name of the VPC security group.
        public let vpcSecurityGroupId: String?

        public init(status: String? = nil, vpcSecurityGroupId: String? = nil) {
            self.status = status
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case vpcSecurityGroupId = "VpcSecurityGroupId"
        }
    }

    public struct RestoreDBClusterFromSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "EnableCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "SnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Engine", required: true, type: .string), 
            AWSShapeMember(label: "BacktrackWindow", required: false, type: .long), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure)
        ]
        /// The AWS KMS key identifier to use when restoring an encrypted DB cluster from a DB snapshot or DB cluster snapshot. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key. If you do not specify a value for the KmsKeyId parameter, then the following will occur:   If the DB snapshot or DB cluster snapshot in SnapshotIdentifier is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the DB snapshot or DB cluster snapshot.   If the DB snapshot or DB cluster snapshot in SnapshotIdentifier is not encrypted, then the restored DB cluster is not encrypted.  
        public let kmsKeyId: String?
        /// The database name for the restored DB cluster.
        public let databaseName: String?
        /// Provides the list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
        public let availabilityZones: AvailabilityZones?
        /// The tags to be assigned to the restored DB cluster.
        public let tags: TagList?
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// The name of the DB cluster to create from the DB snapshot or DB cluster snapshot. This parameter isn't case-sensitive. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens   Example: my-snapshot-id 
        public let dBClusterIdentifier: String
        /// The list of logs that the restored DB cluster is to export to CloudWatch Logs.
        public let enableCloudwatchLogsExports: [String]?
        /// The identifier for the DB snapshot or DB cluster snapshot to restore from. You can use either the name or the Amazon Resource Name (ARN) to specify a DB cluster snapshot. However, you can use only the ARN to specify a DB snapshot. Constraints:   Must match the identifier of an existing Snapshot.  
        public let snapshotIdentifier: String
        /// The database engine to use for the new DB cluster. Default: The same as source Constraint: Must be compatible with the engine of the source
        public let engine: String
        /// The target backtrack window, in seconds. To disable backtracking, set this value to 0. Default: 0 Constraints:   If specified, this value must be set to a number from 0 to 259,200 (72 hours).  
        public let backtrackWindow: Int64?
        /// The name of the DB subnet group to use for the new DB cluster. Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup 
        public let dBSubnetGroupName: String?
        /// The version of the database engine to use for the new DB cluster.
        public let engineVersion: String?
        /// The name of the option group to use for the restored DB cluster.
        public let optionGroupName: String?
        /// The port number on which the new DB cluster accepts connections. Constraints: Value must be 1150-65535  Default: The same port as the original DB cluster.
        public let port: Int32?
        /// A list of VPC security groups that the new DB cluster will belong to.
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?

        public init(kmsKeyId: String? = nil, databaseName: String? = nil, availabilityZones: AvailabilityZones? = nil, tags: TagList? = nil, enableIAMDatabaseAuthentication: Bool? = nil, dBClusterIdentifier: String, enableCloudwatchLogsExports: [String]? = nil, snapshotIdentifier: String, engine: String, backtrackWindow: Int64? = nil, dBSubnetGroupName: String? = nil, engineVersion: String? = nil, optionGroupName: String? = nil, port: Int32? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil) {
            self.kmsKeyId = kmsKeyId
            self.databaseName = databaseName
            self.availabilityZones = availabilityZones
            self.tags = tags
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.dBClusterIdentifier = dBClusterIdentifier
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.snapshotIdentifier = snapshotIdentifier
            self.engine = engine
            self.backtrackWindow = backtrackWindow
            self.dBSubnetGroupName = dBSubnetGroupName
            self.engineVersion = engineVersion
            self.optionGroupName = optionGroupName
            self.port = port
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case databaseName = "DatabaseName"
            case availabilityZones = "AvailabilityZones"
            case tags = "Tags"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case snapshotIdentifier = "SnapshotIdentifier"
            case engine = "Engine"
            case backtrackWindow = "BacktrackWindow"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case engineVersion = "EngineVersion"
            case optionGroupName = "OptionGroupName"
            case port = "Port"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct DBSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshots", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  A list of DBSnapshot instances. 
        public let dBSnapshots: DBSnapshotList?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(dBSnapshots: DBSnapshotList? = nil, marker: String? = nil) {
            self.dBSnapshots = dBSnapshots
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshots = "DBSnapshots"
            case marker = "Marker"
        }
    }

    public struct ValidStorageOptionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ValidStorageOptions", required: false, type: .list)
        ]
        public let validStorageOptions: [ValidStorageOptions]?

        public init(validStorageOptions: [ValidStorageOptions]? = nil) {
            self.validStorageOptions = validStorageOptions
        }

        private enum CodingKeys: String, CodingKey {
            case validStorageOptions = "ValidStorageOptions"
        }
    }

    public struct DeleteDBSecurityGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSecurityGroupName", required: true, type: .string)
        ]
        /// The name of the DB security group to delete.  You can't delete the default DB security group.  Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens   Must not be "Default"  
        public let dBSecurityGroupName: String

        public init(dBSecurityGroupName: String) {
            self.dBSecurityGroupName = dBSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroupName = "DBSecurityGroupName"
        }
    }

    public struct ReadReplicaDBClusterIdentifierList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReadReplicaDBClusterIdentifier", required: false, type: .list)
        ]
        public let readReplicaDBClusterIdentifier: [String]?

        public init(readReplicaDBClusterIdentifier: [String]? = nil) {
            self.readReplicaDBClusterIdentifier = readReplicaDBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case readReplicaDBClusterIdentifier = "ReadReplicaDBClusterIdentifier"
        }
    }

    public struct EventCategoriesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategoriesMapList", required: false, type: .structure)
        ]
        /// A list of EventCategoriesMap data types.
        public let eventCategoriesMapList: EventCategoriesMapList?

        public init(eventCategoriesMapList: EventCategoriesMapList? = nil) {
            self.eventCategoriesMapList = eventCategoriesMapList
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategoriesMapList = "EventCategoriesMapList"
        }
    }

    public struct CreateDBSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "DBSubnetGroupDescription", required: true, type: .string), 
            AWSShapeMember(label: "SubnetIds", required: true, type: .structure), 
            AWSShapeMember(label: "DBSubnetGroupName", required: true, type: .string)
        ]
        public let tags: TagList?
        /// The description for the DB subnet group.
        public let dBSubnetGroupDescription: String
        /// The EC2 Subnet IDs for the DB subnet group.
        public let subnetIds: SubnetIdentifierList
        /// The name for the DB subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 letters, numbers, periods, underscores, spaces, or hyphens. Must not be default. Example: mySubnetgroup 
        public let dBSubnetGroupName: String

        public init(tags: TagList? = nil, dBSubnetGroupDescription: String, subnetIds: SubnetIdentifierList, dBSubnetGroupName: String) {
            self.tags = tags
            self.dBSubnetGroupDescription = dBSubnetGroupDescription
            self.subnetIds = subnetIds
            self.dBSubnetGroupName = dBSubnetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case dBSubnetGroupDescription = "DBSubnetGroupDescription"
            case subnetIds = "SubnetIds"
            case dBSubnetGroupName = "DBSubnetGroupName"
        }
    }

    public struct DBClusterParameterGroupNameMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterParameterGroupName", required: false, type: .string)
        ]
        /// The name of the DB cluster parameter group. Constraints:   Must be 1 to 255 letters or numbers.   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens    This value is stored as a lowercase string. 
        public let dBClusterParameterGroupName: String?

        public init(dBClusterParameterGroupName: String? = nil) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
        }
    }

    public struct DBParameterGroupDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  A list of Parameter values. 
        public let parameters: ParametersList?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(parameters: ParametersList? = nil, marker: String? = nil) {
            self.parameters = parameters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case marker = "Marker"
        }
    }

    public struct CopyOptionGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroup", required: false, type: .structure)
        ]
        public let optionGroup: OptionGroup?

        public init(optionGroup: OptionGroup? = nil) {
            self.optionGroup = optionGroup
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroup = "OptionGroup"
        }
    }

    public struct DBCluster: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnabledCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "DBClusterArn", required: false, type: .string), 
            AWSShapeMember(label: "BacktrackWindow", required: false, type: .long), 
            AWSShapeMember(label: "ReplicationSourceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterOptionGroupMemberships", required: false, type: .structure), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "AssociatedRoles", required: false, type: .structure), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "ReadReplicaIdentifiers", required: false, type: .structure), 
            AWSShapeMember(label: "DbClusterResourceId", required: false, type: .string), 
            AWSShapeMember(label: "DBSubnetGroup", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterMembers", required: false, type: .structure), 
            AWSShapeMember(label: "BacktrackConsumedChangeRecords", required: false, type: .long), 
            AWSShapeMember(label: "ReaderEndpoint", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "EarliestBacktrackTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "PreferredBackupWindow", required: false, type: .string), 
            AWSShapeMember(label: "CloneGroupId", required: false, type: .string), 
            AWSShapeMember(label: "CharacterSetName", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .structure), 
            AWSShapeMember(label: "PercentProgress", required: false, type: .string), 
            AWSShapeMember(label: "LatestRestorableTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "IAMDatabaseAuthenticationEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "StorageEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "ClusterCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EarliestRestorableTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "MasterUsername", required: false, type: .string), 
            AWSShapeMember(label: "HostedZoneId", required: false, type: .string), 
            AWSShapeMember(label: "Endpoint", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "DBClusterParameterGroup", required: false, type: .string)
        ]
        /// A list of log types that this DB cluster is configured to export to CloudWatch Logs.
        public let enabledCloudwatchLogsExports: [String]?
        /// Indicates the database engine version.
        public let engineVersion: String?
        /// Specifies whether the DB cluster has instances in multiple Availability Zones.
        public let multiAZ: Bool?
        /// The Amazon Resource Name (ARN) for the DB cluster.
        public let dBClusterArn: String?
        /// The target backtrack window, in seconds. If this value is set to 0, backtracking is disabled for the DB cluster. Otherwise, backtracking is enabled.
        public let backtrackWindow: Int64?
        /// Contains the identifier of the source DB cluster if this DB cluster is a Read Replica.
        public let replicationSourceIdentifier: String?
        /// Provides the list of option group memberships for this DB cluster.
        public let dBClusterOptionGroupMemberships: DBClusterOptionGroupMemberships?
        /// Specifies the number of days for which automatic DB snapshots are retained.
        public let backupRetentionPeriod: Int32?
        /// If StorageEncrypted is true, the AWS KMS key identifier for the encrypted DB cluster.
        public let kmsKeyId: String?
        /// Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        public let preferredMaintenanceWindow: String?
        /// Provides a list of the AWS Identity and Access Management (IAM) roles that are associated with the DB cluster. IAM roles that are associated with a DB cluster grant permission for the DB cluster to access other AWS services on your behalf.
        public let associatedRoles: DBClusterRoles?
        /// Provides the name of the database engine to be used for this DB cluster.
        public let engine: String?
        /// Contains one or more identifiers of the Read Replicas associated with this DB cluster.
        public let readReplicaIdentifiers: ReadReplicaIdentifierList?
        /// The AWS Region-unique, immutable identifier for the DB cluster. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB cluster is accessed.
        public let dbClusterResourceId: String?
        /// Specifies information on the subnet group associated with the DB cluster, including the name, description, and subnets in the subnet group.
        public let dBSubnetGroup: String?
        /// Provides the list of instances that make up the DB cluster.
        public let dBClusterMembers: DBClusterMemberList?
        /// The number of change records stored for Backtrack.
        public let backtrackConsumedChangeRecords: Int64?
        /// The reader endpoint for the DB cluster. The reader endpoint for a DB cluster load-balances connections across the Aurora Replicas that are available in a DB cluster. As clients request new connections to the reader endpoint, Aurora distributes the connection requests among the Aurora Replicas in the DB cluster. This functionality can help balance your read workload across multiple Aurora Replicas in your DB cluster.  If a failover occurs, and the Aurora Replica that you are connected to is promoted to be the primary instance, your connection is dropped. To continue sending your read workload to other Aurora Replicas in the cluster, you can then reconnect to the reader endpoint.
        public let readerEndpoint: String?
        /// Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.
        public let dBClusterIdentifier: String?
        /// The earliest time to which a DB cluster can be backtracked.
        public let earliestBacktrackTime: TimeStamp?
        /// Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod. 
        public let preferredBackupWindow: String?
        /// Identifies the clone group to which the DB cluster is associated.
        public let cloneGroupId: String?
        /// If present, specifies the name of the character set that this cluster is associated with.
        public let characterSetName: String?
        /// Specifies the current state of this DB cluster.
        public let status: String?
        /// Provides the list of EC2 Availability Zones that instances in the DB cluster can be created in.
        public let availabilityZones: AvailabilityZones?
        /// Specifies the progress of the operation as a percentage.
        public let percentProgress: String?
        /// Specifies the latest time to which a database can be restored with point-in-time restore.
        public let latestRestorableTime: TimeStamp?
        /// True if mapping of AWS Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false.
        public let iAMDatabaseAuthenticationEnabled: Bool?
        /// For all database engines except Amazon Aurora, AllocatedStorage specifies the allocated storage size in gibibytes (GiB). For Aurora, AllocatedStorage always returns 1, because Aurora DB cluster storage size is not fixed, but instead automatically adjusts as needed.
        public let allocatedStorage: Int32?
        /// Specifies whether the DB cluster is encrypted.
        public let storageEncrypted: Bool?
        /// Specifies the time when the DB cluster was created, in Universal Coordinated Time (UTC).
        public let clusterCreateTime: TimeStamp?
        /// The earliest time to which a database can be restored with point-in-time restore.
        public let earliestRestorableTime: TimeStamp?
        /// Contains the master username for the DB cluster.
        public let masterUsername: String?
        /// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
        public let hostedZoneId: String?
        /// Specifies the connection endpoint for the primary instance of the DB cluster.
        public let endpoint: String?
        /// Specifies the port that the database engine is listening on.
        public let port: Int32?
        /// Contains the name of the initial database of this DB cluster that was provided at create time, if one was specified when the DB cluster was created. This same name is returned for the life of the DB cluster.
        public let databaseName: String?
        /// Provides a list of VPC security groups that the DB cluster belongs to.
        public let vpcSecurityGroups: VpcSecurityGroupMembershipList?
        /// Specifies the name of the DB cluster parameter group for the DB cluster.
        public let dBClusterParameterGroup: String?

        public init(enabledCloudwatchLogsExports: [String]? = nil, engineVersion: String? = nil, multiAZ: Bool? = nil, dBClusterArn: String? = nil, backtrackWindow: Int64? = nil, replicationSourceIdentifier: String? = nil, dBClusterOptionGroupMemberships: DBClusterOptionGroupMemberships? = nil, backupRetentionPeriod: Int32? = nil, kmsKeyId: String? = nil, preferredMaintenanceWindow: String? = nil, associatedRoles: DBClusterRoles? = nil, engine: String? = nil, readReplicaIdentifiers: ReadReplicaIdentifierList? = nil, dbClusterResourceId: String? = nil, dBSubnetGroup: String? = nil, dBClusterMembers: DBClusterMemberList? = nil, backtrackConsumedChangeRecords: Int64? = nil, readerEndpoint: String? = nil, dBClusterIdentifier: String? = nil, earliestBacktrackTime: TimeStamp? = nil, preferredBackupWindow: String? = nil, cloneGroupId: String? = nil, characterSetName: String? = nil, status: String? = nil, availabilityZones: AvailabilityZones? = nil, percentProgress: String? = nil, latestRestorableTime: TimeStamp? = nil, iAMDatabaseAuthenticationEnabled: Bool? = nil, allocatedStorage: Int32? = nil, storageEncrypted: Bool? = nil, clusterCreateTime: TimeStamp? = nil, earliestRestorableTime: TimeStamp? = nil, masterUsername: String? = nil, hostedZoneId: String? = nil, endpoint: String? = nil, port: Int32? = nil, databaseName: String? = nil, vpcSecurityGroups: VpcSecurityGroupMembershipList? = nil, dBClusterParameterGroup: String? = nil) {
            self.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports
            self.engineVersion = engineVersion
            self.multiAZ = multiAZ
            self.dBClusterArn = dBClusterArn
            self.backtrackWindow = backtrackWindow
            self.replicationSourceIdentifier = replicationSourceIdentifier
            self.dBClusterOptionGroupMemberships = dBClusterOptionGroupMemberships
            self.backupRetentionPeriod = backupRetentionPeriod
            self.kmsKeyId = kmsKeyId
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.associatedRoles = associatedRoles
            self.engine = engine
            self.readReplicaIdentifiers = readReplicaIdentifiers
            self.dbClusterResourceId = dbClusterResourceId
            self.dBSubnetGroup = dBSubnetGroup
            self.dBClusterMembers = dBClusterMembers
            self.backtrackConsumedChangeRecords = backtrackConsumedChangeRecords
            self.readerEndpoint = readerEndpoint
            self.dBClusterIdentifier = dBClusterIdentifier
            self.earliestBacktrackTime = earliestBacktrackTime
            self.preferredBackupWindow = preferredBackupWindow
            self.cloneGroupId = cloneGroupId
            self.characterSetName = characterSetName
            self.status = status
            self.availabilityZones = availabilityZones
            self.percentProgress = percentProgress
            self.latestRestorableTime = latestRestorableTime
            self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
            self.allocatedStorage = allocatedStorage
            self.storageEncrypted = storageEncrypted
            self.clusterCreateTime = clusterCreateTime
            self.earliestRestorableTime = earliestRestorableTime
            self.masterUsername = masterUsername
            self.hostedZoneId = hostedZoneId
            self.endpoint = endpoint
            self.port = port
            self.databaseName = databaseName
            self.vpcSecurityGroups = vpcSecurityGroups
            self.dBClusterParameterGroup = dBClusterParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case enabledCloudwatchLogsExports = "EnabledCloudwatchLogsExports"
            case engineVersion = "EngineVersion"
            case multiAZ = "MultiAZ"
            case dBClusterArn = "DBClusterArn"
            case backtrackWindow = "BacktrackWindow"
            case replicationSourceIdentifier = "ReplicationSourceIdentifier"
            case dBClusterOptionGroupMemberships = "DBClusterOptionGroupMemberships"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case kmsKeyId = "KmsKeyId"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case associatedRoles = "AssociatedRoles"
            case engine = "Engine"
            case readReplicaIdentifiers = "ReadReplicaIdentifiers"
            case dbClusterResourceId = "DbClusterResourceId"
            case dBSubnetGroup = "DBSubnetGroup"
            case dBClusterMembers = "DBClusterMembers"
            case backtrackConsumedChangeRecords = "BacktrackConsumedChangeRecords"
            case readerEndpoint = "ReaderEndpoint"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case earliestBacktrackTime = "EarliestBacktrackTime"
            case preferredBackupWindow = "PreferredBackupWindow"
            case cloneGroupId = "CloneGroupId"
            case characterSetName = "CharacterSetName"
            case status = "Status"
            case availabilityZones = "AvailabilityZones"
            case percentProgress = "PercentProgress"
            case latestRestorableTime = "LatestRestorableTime"
            case iAMDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
            case allocatedStorage = "AllocatedStorage"
            case storageEncrypted = "StorageEncrypted"
            case clusterCreateTime = "ClusterCreateTime"
            case earliestRestorableTime = "EarliestRestorableTime"
            case masterUsername = "MasterUsername"
            case hostedZoneId = "HostedZoneId"
            case endpoint = "Endpoint"
            case port = "Port"
            case databaseName = "DatabaseName"
            case vpcSecurityGroups = "VpcSecurityGroups"
            case dBClusterParameterGroup = "DBClusterParameterGroup"
        }
    }

    public struct PendingMaintenanceActionDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PendingMaintenanceAction", required: false, type: .list)
        ]
        public let pendingMaintenanceAction: [PendingMaintenanceAction]?

        public init(pendingMaintenanceAction: [PendingMaintenanceAction]? = nil) {
            self.pendingMaintenanceAction = pendingMaintenanceAction
        }

        private enum CodingKeys: String, CodingKey {
            case pendingMaintenanceAction = "PendingMaintenanceAction"
        }
    }

    public struct RestoreDBInstanceFromDBSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct CreateDBSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshot", required: false, type: .structure)
        ]
        public let dBSnapshot: DBSnapshot?

        public init(dBSnapshot: DBSnapshot? = nil) {
            self.dBSnapshot = dBSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshot = "DBSnapshot"
        }
    }

    public struct DeleteDBClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .structure)
        ]
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct CreateDBInstanceReadReplicaResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct DoubleRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "To", required: false, type: .double), 
            AWSShapeMember(label: "From", required: false, type: .double)
        ]
        /// The maximum value in the range.
        public let to: Double?
        /// The minimum value in the range.
        public let from: Double?

        public init(to: Double? = nil, from: Double? = nil) {
            self.to = to
            self.from = from
        }

        private enum CodingKeys: String, CodingKey {
            case to = "To"
            case from = "From"
        }
    }

    public struct AvailabilityZones: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .list)
        ]
        public let availabilityZone: [String]?

        public init(availabilityZone: [String]? = nil) {
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
        }
    }

    public struct DescribeDBLogFilesDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastWritten", required: false, type: .long), 
            AWSShapeMember(label: "Size", required: false, type: .long), 
            AWSShapeMember(label: "LogFileName", required: false, type: .string)
        ]
        /// A POSIX timestamp when the last log entry was written.
        public let lastWritten: Int64?
        /// The size, in bytes, of the log file for the specified DB instance.
        public let size: Int64?
        /// The name of the log file for the specified DB instance.
        public let logFileName: String?

        public init(lastWritten: Int64? = nil, size: Int64? = nil, logFileName: String? = nil) {
            self.lastWritten = lastWritten
            self.size = size
            self.logFileName = logFileName
        }

        private enum CodingKeys: String, CodingKey {
            case lastWritten = "LastWritten"
            case size = "Size"
            case logFileName = "LogFileName"
        }
    }

    public struct AddSourceIdentifierToSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string), 
            AWSShapeMember(label: "SourceIdentifier", required: true, type: .string)
        ]
        /// The name of the RDS event notification subscription you want to add a source identifier to.
        public let subscriptionName: String
        /// The identifier of the event source to be added. Constraints:   If the source type is a DB instance, then a DBInstanceIdentifier must be supplied.   If the source type is a DB security group, a DBSecurityGroupName must be supplied.   If the source type is a DB parameter group, a DBParameterGroupName must be supplied.   If the source type is a DB snapshot, a DBSnapshotIdentifier must be supplied.  
        public let sourceIdentifier: String

        public init(subscriptionName: String, sourceIdentifier: String) {
            self.subscriptionName = subscriptionName
            self.sourceIdentifier = sourceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionName = "SubscriptionName"
            case sourceIdentifier = "SourceIdentifier"
        }
    }

    public struct OptionGroupOptionVersionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionVersion", required: false, type: .list)
        ]
        public let optionVersion: [OptionVersion]?

        public init(optionVersion: [OptionVersion]? = nil) {
            self.optionVersion = optionVersion
        }

        private enum CodingKeys: String, CodingKey {
            case optionVersion = "OptionVersion"
        }
    }

    public struct RestoreDBClusterFromS3Result: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .structure)
        ]
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct DBParameterGroupStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "ParameterApplyStatus", required: false, type: .string)
        ]
        /// The name of the DP parameter group.
        public let dBParameterGroupName: String?
        /// The status of parameter updates.
        public let parameterApplyStatus: String?

        public init(dBParameterGroupName: String? = nil, parameterApplyStatus: String? = nil) {
            self.dBParameterGroupName = dBParameterGroupName
            self.parameterApplyStatus = parameterApplyStatus
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
            case parameterApplyStatus = "ParameterApplyStatus"
        }
    }

    public struct RestoreDBInstanceFromS3Result: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct AttributeValueList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeValue", required: false, type: .list)
        ]
        public let attributeValue: [String]?

        public init(attributeValue: [String]? = nil) {
            self.attributeValue = attributeValue
        }

        private enum CodingKeys: String, CodingKey {
            case attributeValue = "AttributeValue"
        }
    }

    public struct DBInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PerformanceInsightsEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "CACertificateIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "MonitoringInterval", required: false, type: .integer), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "PerformanceInsightsKMSKeyId", required: false, type: .string), 
            AWSShapeMember(label: "IAMDatabaseAuthenticationEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "DBName", required: false, type: .string), 
            AWSShapeMember(label: "PreferredBackupWindow", required: false, type: .string), 
            AWSShapeMember(label: "StatusInfos", required: false, type: .structure), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "ReadReplicaDBClusterIdentifiers", required: false, type: .structure), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "InstanceCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SecondaryAvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "DBClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "LatestRestorableTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "DBSubnetGroup", required: false, type: .structure), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "DBParameterGroups", required: false, type: .structure), 
            AWSShapeMember(label: "PromotionTier", required: false, type: .integer), 
            AWSShapeMember(label: "ProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "DBInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "DomainMemberships", required: false, type: .structure), 
            AWSShapeMember(label: "CharacterSetName", required: false, type: .string), 
            AWSShapeMember(label: "PendingModifiedValues", required: false, type: .structure), 
            AWSShapeMember(label: "CopyTagsToSnapshot", required: false, type: .boolean), 
            AWSShapeMember(label: "Timezone", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "ReadReplicaSourceDBInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "PerformanceInsightsRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceStatus", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "StorageEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "MasterUsername", required: false, type: .string), 
            AWSShapeMember(label: "DbInstancePort", required: false, type: .integer), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "EnhancedMonitoringResourceArn", required: false, type: .string), 
            AWSShapeMember(label: "MonitoringRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "ReadReplicaDBInstanceIdentifiers", required: false, type: .structure), 
            AWSShapeMember(label: "EnabledCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "OptionGroupMemberships", required: false, type: .structure), 
            AWSShapeMember(label: "Endpoint", required: false, type: .structure), 
            AWSShapeMember(label: "DbiResourceId", required: false, type: .string), 
            AWSShapeMember(label: "DBSecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "TdeCredentialArn", required: false, type: .string)
        ]
        /// True if Performance Insights is enabled for the DB instance, and otherwise false.
        public let performanceInsightsEnabled: Bool?
        /// The identifier of the CA certificate for this DB instance.
        public let cACertificateIdentifier: String?
        /// Specifies if the DB instance is a Multi-AZ deployment.
        public let multiAZ: Bool?
        /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance.
        public let monitoringInterval: Int32?
        /// Specifies the Provisioned IOPS (I/O operations per second) value.
        public let iops: Int32?
        /// The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.
        public let performanceInsightsKMSKeyId: String?
        /// True if mapping of AWS Identity and Access Management (IAM) accounts to database accounts is enabled, and otherwise false. IAM database authentication can be enabled for the following database engines   For MySQL 5.6, minor version 5.6.34 or higher   For MySQL 5.7, minor version 5.7.16 or higher   Aurora 5.6 or higher. To enable IAM database authentication for Aurora, see DBCluster Type.  
        public let iAMDatabaseAuthenticationEnabled: Bool?
        /// The meaning of this parameter differs according to the database engine you use. For example, this value returns MySQL, MariaDB, or PostgreSQL information when returning values from CreateDBInstanceReadReplica since Read Replicas are only supported for these engines.  MySQL, MariaDB, SQL Server, PostgreSQL  Contains the name of the initial database of this instance that was provided at create time, if one was specified when the DB instance was created. This same name is returned for the life of the DB instance. Type: String  Oracle  Contains the Oracle System ID (SID) of the created DB instance. Not shown when the returned parameters do not apply to an Oracle DB instance.
        public let dBName: String?
        ///  Specifies the daily time range during which automated backups are created if automated backups are enabled, as determined by the BackupRetentionPeriod. 
        public let preferredBackupWindow: String?
        /// The status of a Read Replica. If the instance is not a Read Replica, this is blank.
        public let statusInfos: DBInstanceStatusInfoList?
        /// Specifies the weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).
        public let preferredMaintenanceWindow: String?
        /// Contains one or more identifiers of Aurora DB clusters that are Read Replicas of this DB instance.
        public let readReplicaDBClusterIdentifiers: ReadReplicaDBClusterIdentifierList?
        /// Contains the name of the compute and memory capacity class of the DB instance.
        public let dBInstanceClass: String?
        /// Provides the date and time the DB instance was created.
        public let instanceCreateTime: TimeStamp?
        /// If present, specifies the name of the secondary Availability Zone for a DB instance with multi-AZ support.
        public let secondaryAvailabilityZone: String?
        /// Provides a list of VPC security group elements that the DB instance belongs to.
        public let vpcSecurityGroups: VpcSecurityGroupMembershipList?
        /// Specifies the number of days for which automatic DB snapshots are retained.
        public let backupRetentionPeriod: Int32?
        /// If the DB instance is a member of a DB cluster, contains the name of the DB cluster that the DB instance is a member of.
        public let dBClusterIdentifier: String?
        /// Specifies the latest time to which a database can be restored with point-in-time restore.
        public let latestRestorableTime: TimeStamp?
        /// Provides the name of the database engine to be used for this DB instance.
        public let engine: String?
        /// Specifies information on the subnet group associated with the DB instance, including the name, description, and subnets in the subnet group.
        public let dBSubnetGroup: DBSubnetGroup?
        /// Specifies the allocated storage size specified in gibibytes.
        public let allocatedStorage: Int32?
        /// Provides the list of DB parameter groups applied to this DB instance.
        public let dBParameterGroups: DBParameterGroupStatusList?
        /// A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see  Fault Tolerance for an Aurora DB Cluster. 
        public let promotionTier: Int32?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        public let processorFeatures: ProcessorFeatureList?
        /// The Amazon Resource Name (ARN) for the DB instance.
        public let dBInstanceArn: String?
        /// License model information for this DB instance.
        public let licenseModel: String?
        ///  If StorageEncrypted is true, the AWS KMS key identifier for the encrypted DB instance. 
        public let kmsKeyId: String?
        /// The Active Directory Domain membership records associated with the DB instance.
        public let domainMemberships: DomainMembershipList?
        /// If present, specifies the name of the character set that this instance is associated with.
        public let characterSetName: String?
        /// Specifies that changes to the DB instance are pending. This element is only included when changes are pending. Specific changes are identified by subelements.
        public let pendingModifiedValues: PendingModifiedValues?
        /// Specifies whether tags are copied from the DB instance to snapshots of the DB instance.
        public let copyTagsToSnapshot: Bool?
        /// The time zone of the DB instance. In most cases, the Timezone element is empty. Timezone content appears only for Microsoft SQL Server DB instances that were created with a time zone specified. 
        public let timezone: String?
        /// Indicates the database engine version.
        public let engineVersion: String?
        /// Contains the identifier of the source DB instance if this DB instance is a Read Replica.
        public let readReplicaSourceDBInstanceIdentifier: String?
        /// Specifies the accessibility options for the DB instance. A value of true specifies an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. A value of false specifies an internal instance with a DNS name that resolves to a private IP address. Default: The default behavior varies depending on whether a VPC has been requested or not. The following list shows the default behavior in each case.    Default VPC:true    VPC:false   If no DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance is publicly accessible. If a specific DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance is private.
        public let publiclyAccessible: Bool?
        /// Indicates that minor version patches are applied automatically.
        public let autoMinorVersionUpgrade: Bool?
        /// The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
        public let performanceInsightsRetentionPeriod: Int32?
        /// Contains a user-supplied database identifier. This identifier is the unique key that identifies a DB instance.
        public let dBInstanceIdentifier: String?
        /// Specifies the current state of this database.
        public let dBInstanceStatus: String?
        /// Specifies the name of the Availability Zone the DB instance is located in.
        public let availabilityZone: String?
        /// Specifies whether the DB instance is encrypted.
        public let storageEncrypted: Bool?
        /// Contains the master username for the DB instance.
        public let masterUsername: String?
        /// Specifies the port that the DB instance listens on. If the DB instance is part of a DB cluster, this can be a different port than the DB cluster port.
        public let dbInstancePort: Int32?
        /// Specifies the storage type associated with DB instance.
        public let storageType: String?
        /// The Amazon Resource Name (ARN) of the Amazon CloudWatch Logs log stream that receives the Enhanced Monitoring metrics data for the DB instance.
        public let enhancedMonitoringResourceArn: String?
        /// The ARN for the IAM role that permits RDS to send Enhanced Monitoring metrics to Amazon CloudWatch Logs.
        public let monitoringRoleArn: String?
        /// Contains one or more identifiers of the Read Replicas associated with this DB instance.
        public let readReplicaDBInstanceIdentifiers: ReadReplicaDBInstanceIdentifierList?
        /// A list of log types that this DB instance is configured to export to CloudWatch Logs.
        public let enabledCloudwatchLogsExports: [String]?
        /// Provides the list of option group memberships for this DB instance.
        public let optionGroupMemberships: OptionGroupMembershipList?
        /// Specifies the connection endpoint.
        public let endpoint: Endpoint?
        /// The AWS Region-unique, immutable identifier for the DB instance. This identifier is found in AWS CloudTrail log entries whenever the AWS KMS key for the DB instance is accessed.
        public let dbiResourceId: String?
        ///  Provides List of DB security group elements containing only DBSecurityGroup.Name and DBSecurityGroup.Status subelements. 
        public let dBSecurityGroups: DBSecurityGroupMembershipList?
        /// The ARN from the key store with which the instance is associated for TDE encryption.
        public let tdeCredentialArn: String?

        public init(performanceInsightsEnabled: Bool? = nil, cACertificateIdentifier: String? = nil, multiAZ: Bool? = nil, monitoringInterval: Int32? = nil, iops: Int32? = nil, performanceInsightsKMSKeyId: String? = nil, iAMDatabaseAuthenticationEnabled: Bool? = nil, dBName: String? = nil, preferredBackupWindow: String? = nil, statusInfos: DBInstanceStatusInfoList? = nil, preferredMaintenanceWindow: String? = nil, readReplicaDBClusterIdentifiers: ReadReplicaDBClusterIdentifierList? = nil, dBInstanceClass: String? = nil, instanceCreateTime: TimeStamp? = nil, secondaryAvailabilityZone: String? = nil, vpcSecurityGroups: VpcSecurityGroupMembershipList? = nil, backupRetentionPeriod: Int32? = nil, dBClusterIdentifier: String? = nil, latestRestorableTime: TimeStamp? = nil, engine: String? = nil, dBSubnetGroup: DBSubnetGroup? = nil, allocatedStorage: Int32? = nil, dBParameterGroups: DBParameterGroupStatusList? = nil, promotionTier: Int32? = nil, processorFeatures: ProcessorFeatureList? = nil, dBInstanceArn: String? = nil, licenseModel: String? = nil, kmsKeyId: String? = nil, domainMemberships: DomainMembershipList? = nil, characterSetName: String? = nil, pendingModifiedValues: PendingModifiedValues? = nil, copyTagsToSnapshot: Bool? = nil, timezone: String? = nil, engineVersion: String? = nil, readReplicaSourceDBInstanceIdentifier: String? = nil, publiclyAccessible: Bool? = nil, autoMinorVersionUpgrade: Bool? = nil, performanceInsightsRetentionPeriod: Int32? = nil, dBInstanceIdentifier: String? = nil, dBInstanceStatus: String? = nil, availabilityZone: String? = nil, storageEncrypted: Bool? = nil, masterUsername: String? = nil, dbInstancePort: Int32? = nil, storageType: String? = nil, enhancedMonitoringResourceArn: String? = nil, monitoringRoleArn: String? = nil, readReplicaDBInstanceIdentifiers: ReadReplicaDBInstanceIdentifierList? = nil, enabledCloudwatchLogsExports: [String]? = nil, optionGroupMemberships: OptionGroupMembershipList? = nil, endpoint: Endpoint? = nil, dbiResourceId: String? = nil, dBSecurityGroups: DBSecurityGroupMembershipList? = nil, tdeCredentialArn: String? = nil) {
            self.performanceInsightsEnabled = performanceInsightsEnabled
            self.cACertificateIdentifier = cACertificateIdentifier
            self.multiAZ = multiAZ
            self.monitoringInterval = monitoringInterval
            self.iops = iops
            self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
            self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
            self.dBName = dBName
            self.preferredBackupWindow = preferredBackupWindow
            self.statusInfos = statusInfos
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.readReplicaDBClusterIdentifiers = readReplicaDBClusterIdentifiers
            self.dBInstanceClass = dBInstanceClass
            self.instanceCreateTime = instanceCreateTime
            self.secondaryAvailabilityZone = secondaryAvailabilityZone
            self.vpcSecurityGroups = vpcSecurityGroups
            self.backupRetentionPeriod = backupRetentionPeriod
            self.dBClusterIdentifier = dBClusterIdentifier
            self.latestRestorableTime = latestRestorableTime
            self.engine = engine
            self.dBSubnetGroup = dBSubnetGroup
            self.allocatedStorage = allocatedStorage
            self.dBParameterGroups = dBParameterGroups
            self.promotionTier = promotionTier
            self.processorFeatures = processorFeatures
            self.dBInstanceArn = dBInstanceArn
            self.licenseModel = licenseModel
            self.kmsKeyId = kmsKeyId
            self.domainMemberships = domainMemberships
            self.characterSetName = characterSetName
            self.pendingModifiedValues = pendingModifiedValues
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.timezone = timezone
            self.engineVersion = engineVersion
            self.readReplicaSourceDBInstanceIdentifier = readReplicaSourceDBInstanceIdentifier
            self.publiclyAccessible = publiclyAccessible
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dBInstanceStatus = dBInstanceStatus
            self.availabilityZone = availabilityZone
            self.storageEncrypted = storageEncrypted
            self.masterUsername = masterUsername
            self.dbInstancePort = dbInstancePort
            self.storageType = storageType
            self.enhancedMonitoringResourceArn = enhancedMonitoringResourceArn
            self.monitoringRoleArn = monitoringRoleArn
            self.readReplicaDBInstanceIdentifiers = readReplicaDBInstanceIdentifiers
            self.enabledCloudwatchLogsExports = enabledCloudwatchLogsExports
            self.optionGroupMemberships = optionGroupMemberships
            self.endpoint = endpoint
            self.dbiResourceId = dbiResourceId
            self.dBSecurityGroups = dBSecurityGroups
            self.tdeCredentialArn = tdeCredentialArn
        }

        private enum CodingKeys: String, CodingKey {
            case performanceInsightsEnabled = "PerformanceInsightsEnabled"
            case cACertificateIdentifier = "CACertificateIdentifier"
            case multiAZ = "MultiAZ"
            case monitoringInterval = "MonitoringInterval"
            case iops = "Iops"
            case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
            case iAMDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
            case dBName = "DBName"
            case preferredBackupWindow = "PreferredBackupWindow"
            case statusInfos = "StatusInfos"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case readReplicaDBClusterIdentifiers = "ReadReplicaDBClusterIdentifiers"
            case dBInstanceClass = "DBInstanceClass"
            case instanceCreateTime = "InstanceCreateTime"
            case secondaryAvailabilityZone = "SecondaryAvailabilityZone"
            case vpcSecurityGroups = "VpcSecurityGroups"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case latestRestorableTime = "LatestRestorableTime"
            case engine = "Engine"
            case dBSubnetGroup = "DBSubnetGroup"
            case allocatedStorage = "AllocatedStorage"
            case dBParameterGroups = "DBParameterGroups"
            case promotionTier = "PromotionTier"
            case processorFeatures = "ProcessorFeatures"
            case dBInstanceArn = "DBInstanceArn"
            case licenseModel = "LicenseModel"
            case kmsKeyId = "KmsKeyId"
            case domainMemberships = "DomainMemberships"
            case characterSetName = "CharacterSetName"
            case pendingModifiedValues = "PendingModifiedValues"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case timezone = "Timezone"
            case engineVersion = "EngineVersion"
            case readReplicaSourceDBInstanceIdentifier = "ReadReplicaSourceDBInstanceIdentifier"
            case publiclyAccessible = "PubliclyAccessible"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dBInstanceStatus = "DBInstanceStatus"
            case availabilityZone = "AvailabilityZone"
            case storageEncrypted = "StorageEncrypted"
            case masterUsername = "MasterUsername"
            case dbInstancePort = "DbInstancePort"
            case storageType = "StorageType"
            case enhancedMonitoringResourceArn = "EnhancedMonitoringResourceArn"
            case monitoringRoleArn = "MonitoringRoleArn"
            case readReplicaDBInstanceIdentifiers = "ReadReplicaDBInstanceIdentifiers"
            case enabledCloudwatchLogsExports = "EnabledCloudwatchLogsExports"
            case optionGroupMemberships = "OptionGroupMemberships"
            case endpoint = "Endpoint"
            case dbiResourceId = "DbiResourceId"
            case dBSecurityGroups = "DBSecurityGroups"
            case tdeCredentialArn = "TdeCredentialArn"
        }
    }

    public struct OptionGroupOptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroupOptions", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        public let optionGroupOptions: OptionGroupOptionsList?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(optionGroupOptions: OptionGroupOptionsList? = nil, marker: String? = nil) {
            self.optionGroupOptions = optionGroupOptions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroupOptions = "OptionGroupOptions"
            case marker = "Marker"
        }
    }

    public struct Endpoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Address", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "HostedZoneId", required: false, type: .string)
        ]
        /// Specifies the DNS address of the DB instance.
        public let address: String?
        /// Specifies the port that the database engine is listening on.
        public let port: Int32?
        /// Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.
        public let hostedZoneId: String?

        public init(address: String? = nil, port: Int32? = nil, hostedZoneId: String? = nil) {
            self.address = address
            self.port = port
            self.hostedZoneId = hostedZoneId
        }

        private enum CodingKeys: String, CodingKey {
            case address = "Address"
            case port = "Port"
            case hostedZoneId = "HostedZoneId"
        }
    }

    public struct DBParameterGroupStatusList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroup", required: false, type: .list)
        ]
        public let dBParameterGroup: [DBParameterGroupStatus]?

        public init(dBParameterGroup: [DBParameterGroupStatus]? = nil) {
            self.dBParameterGroup = dBParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroup = "DBParameterGroup"
        }
    }

    public struct DeleteDBClusterSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshotIdentifier", required: true, type: .string)
        ]
        /// The identifier of the DB cluster snapshot to delete. Constraints: Must be the name of an existing DB cluster snapshot in the available state.
        public let dBClusterSnapshotIdentifier: String

        public init(dBClusterSnapshotIdentifier: String) {
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
        }
    }

    public struct CreateDBSubnetGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSubnetGroup", required: false, type: .structure)
        ]
        public let dBSubnetGroup: DBSubnetGroup?

        public init(dBSubnetGroup: DBSubnetGroup? = nil) {
            self.dBSubnetGroup = dBSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroup = "DBSubnetGroup"
        }
    }

    public struct DescribeDBSnapshotsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IncludeShared", required: false, type: .boolean), 
            AWSShapeMember(label: "SnapshotType", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "IncludePublic", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// True to include shared manual DB snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is false. You can give an AWS account permission to restore a manual DB snapshot from another AWS account by using the ModifyDBSnapshotAttribute API action.
        public let includeShared: Bool?
        /// The type of snapshots to be returned. You can specify one of the following values:    automated - Return all DB snapshots that have been automatically taken by Amazon RDS for my AWS account.    manual - Return all DB snapshots that have been taken by my AWS account.    shared - Return all manual DB snapshots that have been shared to my AWS account.    public - Return all DB snapshots that have been marked as public.   If you don't specify a SnapshotType value, then both automated and manual snapshots are returned. Shared and public DB snapshots are not included in the returned results by default. You can include shared snapshots with these results by setting the IncludeShared parameter to true. You can include public snapshots with these results by setting the IncludePublic parameter to true. The IncludeShared and IncludePublic parameters don't apply for SnapshotType values of manual or automated. The IncludePublic parameter doesn't apply when SnapshotType is set to shared. The IncludeShared parameter doesn't apply when SnapshotType is set to public.
        public let snapshotType: String?
        ///  An optional pagination token provided by a previous DescribeDBSnapshots request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        ///  A specific DB snapshot identifier to describe. This parameter can't be used in conjunction with DBInstanceIdentifier. This value is stored as a lowercase string.  Constraints:   If supplied, must match the identifier of an existing DBSnapshot.   If this identifier is for an automated snapshot, the SnapshotType parameter must also be specified.  
        public let dBSnapshotIdentifier: String?
        /// The ID of the DB instance to retrieve the list of DB snapshots for. This parameter can't be used in conjunction with DBSnapshotIdentifier. This parameter is not case-sensitive.  Constraints:   If supplied, must match the identifier of an existing DBInstance.  
        public let dBInstanceIdentifier: String?
        /// True to include manual DB snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is false. You can share a manual DB snapshot as public by using the ModifyDBSnapshotAttribute API.
        public let includePublic: Bool?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(includeShared: Bool? = nil, snapshotType: String? = nil, marker: String? = nil, dBSnapshotIdentifier: String? = nil, dBInstanceIdentifier: String? = nil, includePublic: Bool? = nil, filters: FilterList? = nil, maxRecords: Int32? = nil) {
            self.includeShared = includeShared
            self.snapshotType = snapshotType
            self.marker = marker
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.includePublic = includePublic
            self.filters = filters
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case includeShared = "IncludeShared"
            case snapshotType = "SnapshotType"
            case marker = "Marker"
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case includePublic = "IncludePublic"
            case filters = "Filters"
            case maxRecords = "MaxRecords"
        }
    }

    public struct ReservedDBInstancesOfferingList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedDBInstancesOffering", required: false, type: .list)
        ]
        public let reservedDBInstancesOffering: [ReservedDBInstancesOffering]?

        public init(reservedDBInstancesOffering: [ReservedDBInstancesOffering]? = nil) {
            self.reservedDBInstancesOffering = reservedDBInstancesOffering
        }

        private enum CodingKeys: String, CodingKey {
            case reservedDBInstancesOffering = "ReservedDBInstancesOffering"
        }
    }

    public struct DBClusterParameterGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroupFamily", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterParameterGroupArn", required: false, type: .string)
        ]
        /// Provides the name of the DB parameter group family that this DB cluster parameter group is compatible with.
        public let dBParameterGroupFamily: String?
        /// Provides the name of the DB cluster parameter group.
        public let dBClusterParameterGroupName: String?
        /// Provides the customer-specified description for this DB cluster parameter group.
        public let description: String?
        /// The Amazon Resource Name (ARN) for the DB cluster parameter group.
        public let dBClusterParameterGroupArn: String?

        public init(dBParameterGroupFamily: String? = nil, dBClusterParameterGroupName: String? = nil, description: String? = nil, dBClusterParameterGroupArn: String? = nil) {
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.description = description
            self.dBClusterParameterGroupArn = dBClusterParameterGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case description = "Description"
            case dBClusterParameterGroupArn = "DBClusterParameterGroupArn"
        }
    }

    public struct DescribeDBLogFilesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DescribeDBLogFiles", required: false, type: .structure)
        ]
        /// A pagination token that can be used in a subsequent DescribeDBLogFiles request.
        public let marker: String?
        /// The DB log files returned.
        public let describeDBLogFiles: DescribeDBLogFilesList?

        public init(marker: String? = nil, describeDBLogFiles: DescribeDBLogFilesList? = nil) {
            self.marker = marker
            self.describeDBLogFiles = describeDBLogFiles
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case describeDBLogFiles = "DescribeDBLogFiles"
        }
    }

    public struct ResetDBParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResetAllParameters", required: false, type: .boolean), 
            AWSShapeMember(label: "Parameters", required: false, type: .structure), 
            AWSShapeMember(label: "DBParameterGroupName", required: true, type: .string)
        ]
        ///  Specifies whether (true) or not (false) to reset all parameters in the DB parameter group to default values.  Default: true 
        public let resetAllParameters: Bool?
        /// To reset the entire DB parameter group, specify the DBParameterGroup name and ResetAllParameters parameters. To reset specific parameters, provide a list of the following: ParameterName and ApplyMethod. A maximum of 20 parameters can be modified in a single request.  MySQL  Valid Values (for Apply method): immediate | pending-reboot  You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when DB instance reboots.  MariaDB  Valid Values (for Apply method): immediate | pending-reboot  You can use the immediate value with dynamic parameters only. You can use the pending-reboot value for both dynamic and static parameters, and changes are applied when DB instance reboots.  Oracle  Valid Values (for Apply method): pending-reboot 
        public let parameters: ParametersList?
        /// The name of the DB parameter group. Constraints:   Must match the name of an existing DBParameterGroup.  
        public let dBParameterGroupName: String

        public init(resetAllParameters: Bool? = nil, parameters: ParametersList? = nil, dBParameterGroupName: String) {
            self.resetAllParameters = resetAllParameters
            self.parameters = parameters
            self.dBParameterGroupName = dBParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case resetAllParameters = "ResetAllParameters"
            case parameters = "Parameters"
            case dBParameterGroupName = "DBParameterGroupName"
        }
    }

    public struct ResourcePendingMaintenanceActions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "PendingMaintenanceActionDetails", required: false, type: .structure)
        ]
        /// The ARN of the resource that has pending maintenance actions.
        public let resourceIdentifier: String?
        /// A list that provides details about the pending maintenance actions for the resource.
        public let pendingMaintenanceActionDetails: PendingMaintenanceActionDetails?

        public init(resourceIdentifier: String? = nil, pendingMaintenanceActionDetails: PendingMaintenanceActionDetails? = nil) {
            self.resourceIdentifier = resourceIdentifier
            self.pendingMaintenanceActionDetails = pendingMaintenanceActionDetails
        }

        private enum CodingKeys: String, CodingKey {
            case resourceIdentifier = "ResourceIdentifier"
            case pendingMaintenanceActionDetails = "PendingMaintenanceActionDetails"
        }
    }

    public struct DescribeDBParametersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "DBParameterGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Source", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        /// The name of a specific DB parameter group to return details for. Constraints:   If supplied, must match the name of an existing DBParameterGroup.  
        public let dBParameterGroupName: String
        ///  An optional pagination token provided by a previous DescribeDBParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The parameter types to return. Default: All parameter types returned Valid Values: user | system | engine-default 
        public let source: String?

        public init(maxRecords: Int32? = nil, filters: FilterList? = nil, dBParameterGroupName: String, marker: String? = nil, source: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.dBParameterGroupName = dBParameterGroupName
            self.marker = marker
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case dBParameterGroupName = "DBParameterGroupName"
            case marker = "Marker"
            case source = "Source"
        }
    }

    public struct StopDBInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string)
        ]
        ///  The user-supplied instance identifier of the DB Snapshot created immediately before the DB instance is stopped. 
        public let dBSnapshotIdentifier: String?
        ///  The user-supplied instance identifier. 
        public let dBInstanceIdentifier: String

        public init(dBSnapshotIdentifier: String? = nil, dBInstanceIdentifier: String) {
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.dBInstanceIdentifier = dBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
        }
    }

    public struct AvailabilityZone: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the Availability Zone.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct AuthorizeDBSecurityGroupIngressResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSecurityGroup", required: false, type: .structure)
        ]
        public let dBSecurityGroup: DBSecurityGroup?

        public init(dBSecurityGroup: DBSecurityGroup? = nil) {
            self.dBSecurityGroup = dBSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroup = "DBSecurityGroup"
        }
    }

    public struct PurchaseReservedDBInstancesOfferingMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedDBInstancesOfferingId", required: true, type: .string), 
            AWSShapeMember(label: "ReservedDBInstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "DBInstanceCount", required: false, type: .integer)
        ]
        /// The ID of the Reserved DB instance offering to purchase. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706
        public let reservedDBInstancesOfferingId: String
        /// Customer-specified identifier to track this reservation. Example: myreservationID
        public let reservedDBInstanceId: String?
        public let tags: TagList?
        /// The number of instances to reserve. Default: 1 
        public let dBInstanceCount: Int32?

        public init(reservedDBInstancesOfferingId: String, reservedDBInstanceId: String? = nil, tags: TagList? = nil, dBInstanceCount: Int32? = nil) {
            self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
            self.reservedDBInstanceId = reservedDBInstanceId
            self.tags = tags
            self.dBInstanceCount = dBInstanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
            case reservedDBInstanceId = "ReservedDBInstanceId"
            case tags = "Tags"
            case dBInstanceCount = "DBInstanceCount"
        }
    }

    public struct DescribeEngineDefaultParametersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroupFamily", required: true, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  An optional pagination token provided by a previous DescribeEngineDefaultParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The name of the DB parameter group family.
        public let dBParameterGroupFamily: String

        public init(maxRecords: Int32? = nil, filters: FilterList? = nil, marker: String? = nil, dBParameterGroupFamily: String) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.marker = marker
            self.dBParameterGroupFamily = dBParameterGroupFamily
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case marker = "Marker"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
        }
    }

    public struct DescribeDBInstancesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A filter that specifies one or more DB instances to describe. Supported filters:    db-cluster-id - Accepts DB cluster identifiers and DB cluster Amazon Resource Names (ARNs). The results list will only include information about the DB instances associated with the DB clusters identified by these ARNs.    db-instance-id - Accepts DB instance identifiers and DB instance Amazon Resource Names (ARNs). The results list will only include information about the DB instances identified by these ARNs.  
        public let filters: FilterList?
        ///  An optional pagination token provided by a previous DescribeDBInstances request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The user-supplied instance identifier. If this parameter is specified, information from only the specific DB instance is returned. This parameter isn't case-sensitive. Constraints:   If supplied, must match the identifier of an existing DBInstance.  
        public let dBInstanceIdentifier: String?

        public init(maxRecords: Int32? = nil, filters: FilterList? = nil, marker: String? = nil, dBInstanceIdentifier: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.marker = marker
            self.dBInstanceIdentifier = dBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case marker = "Marker"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
        }
    }

    public struct DescribeDBSubnetGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  An optional pagination token provided by a previous DescribeDBSubnetGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The name of the DB subnet group to return details for.
        public let dBSubnetGroupName: String?

        public init(maxRecords: Int32? = nil, filters: FilterList? = nil, marker: String? = nil, dBSubnetGroupName: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.marker = marker
            self.dBSubnetGroupName = dBSubnetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case marker = "Marker"
            case dBSubnetGroupName = "DBSubnetGroupName"
        }
    }

    public struct EventSubscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "EventCategoriesList", required: false, type: .structure), 
            AWSShapeMember(label: "EventSubscriptionArn", required: false, type: .string), 
            AWSShapeMember(label: "SourceIdsList", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionCreationTime", required: false, type: .string), 
            AWSShapeMember(label: "CustomerAwsId", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "SnsTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "CustSubscriptionId", required: false, type: .string)
        ]
        /// The source type for the RDS event notification subscription.
        public let sourceType: String?
        /// A list of event categories for the RDS event notification subscription.
        public let eventCategoriesList: EventCategoriesList?
        /// The Amazon Resource Name (ARN) for the event subscription.
        public let eventSubscriptionArn: String?
        /// A list of source IDs for the RDS event notification subscription.
        public let sourceIdsList: SourceIdsList?
        /// The status of the RDS event notification subscription. Constraints: Can be one of the following: creating | modifying | deleting | active | no-permission | topic-not-exist The status "no-permission" indicates that RDS no longer has permission to post to the SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.
        public let status: String?
        /// The time the RDS event notification subscription was created.
        public let subscriptionCreationTime: String?
        /// The AWS customer account associated with the RDS event notification subscription.
        public let customerAwsId: String?
        /// A Boolean value indicating if the subscription is enabled. True indicates the subscription is enabled.
        public let enabled: Bool?
        /// The topic ARN of the RDS event notification subscription.
        public let snsTopicArn: String?
        /// The RDS event notification subscription Id.
        public let custSubscriptionId: String?

        public init(sourceType: String? = nil, eventCategoriesList: EventCategoriesList? = nil, eventSubscriptionArn: String? = nil, sourceIdsList: SourceIdsList? = nil, status: String? = nil, subscriptionCreationTime: String? = nil, customerAwsId: String? = nil, enabled: Bool? = nil, snsTopicArn: String? = nil, custSubscriptionId: String? = nil) {
            self.sourceType = sourceType
            self.eventCategoriesList = eventCategoriesList
            self.eventSubscriptionArn = eventSubscriptionArn
            self.sourceIdsList = sourceIdsList
            self.status = status
            self.subscriptionCreationTime = subscriptionCreationTime
            self.customerAwsId = customerAwsId
            self.enabled = enabled
            self.snsTopicArn = snsTopicArn
            self.custSubscriptionId = custSubscriptionId
        }

        private enum CodingKeys: String, CodingKey {
            case sourceType = "SourceType"
            case eventCategoriesList = "EventCategoriesList"
            case eventSubscriptionArn = "EventSubscriptionArn"
            case sourceIdsList = "SourceIdsList"
            case status = "Status"
            case subscriptionCreationTime = "SubscriptionCreationTime"
            case customerAwsId = "CustomerAwsId"
            case enabled = "Enabled"
            case snsTopicArn = "SnsTopicArn"
            case custSubscriptionId = "CustSubscriptionId"
        }
    }

    public struct ValidDBInstanceModificationsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Storage", required: false, type: .structure), 
            AWSShapeMember(label: "ValidProcessorFeatures", required: false, type: .structure)
        ]
        /// Valid storage options for your DB instance. 
        public let storage: ValidStorageOptionsList?
        /// Valid processor features for your DB instance. 
        public let validProcessorFeatures: AvailableProcessorFeatureList?

        public init(storage: ValidStorageOptionsList? = nil, validProcessorFeatures: AvailableProcessorFeatureList? = nil) {
            self.storage = storage
            self.validProcessorFeatures = validProcessorFeatures
        }

        private enum CodingKeys: String, CodingKey {
            case storage = "Storage"
            case validProcessorFeatures = "ValidProcessorFeatures"
        }
    }

    public struct DeleteDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FinalDBSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SkipFinalSnapshot", required: false, type: .boolean), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string)
        ]
        ///  The DB cluster snapshot identifier of the new DB cluster snapshot created when SkipFinalSnapshot is set to false.    Specifying this parameter and also setting the SkipFinalShapshot parameter to true results in an error.   Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens  
        public let finalDBSnapshotIdentifier: String?
        ///  Determines whether a final DB cluster snapshot is created before the DB cluster is deleted. If true is specified, no DB cluster snapshot is created. If false is specified, a DB cluster snapshot is created before the DB cluster is deleted.   You must specify a FinalDBSnapshotIdentifier parameter if SkipFinalSnapshot is false.  Default: false 
        public let skipFinalSnapshot: Bool?
        /// The DB cluster identifier for the DB cluster to be deleted. This parameter isn't case-sensitive. Constraints:   Must match an existing DBClusterIdentifier.  
        public let dBClusterIdentifier: String

        public init(finalDBSnapshotIdentifier: String? = nil, skipFinalSnapshot: Bool? = nil, dBClusterIdentifier: String) {
            self.finalDBSnapshotIdentifier = finalDBSnapshotIdentifier
            self.skipFinalSnapshot = skipFinalSnapshot
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case finalDBSnapshotIdentifier = "FinalDBSnapshotIdentifier"
            case skipFinalSnapshot = "SkipFinalSnapshot"
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct OptionGroupOptionSettingsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroupOptionSetting", required: false, type: .list)
        ]
        public let optionGroupOptionSetting: [OptionGroupOptionSetting]?

        public init(optionGroupOptionSetting: [OptionGroupOptionSetting]? = nil) {
            self.optionGroupOptionSetting = optionGroupOptionSetting
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroupOptionSetting = "OptionGroupOptionSetting"
        }
    }

    public struct RestoreDBClusterFromSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .structure)
        ]
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct DescribeEventCategoriesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "SourceType", required: false, type: .string)
        ]
        /// This parameter is not currently supported.
        public let filters: FilterList?
        /// The type of source that is generating the events. Valid values: db-instance | db-parameter-group | db-security-group | db-snapshot
        public let sourceType: String?

        public init(filters: FilterList? = nil, sourceType: String? = nil) {
            self.filters = filters
            self.sourceType = sourceType
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case sourceType = "SourceType"
        }
    }

    public struct SupportedCharacterSetsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CharacterSet", required: false, type: .list)
        ]
        public let characterSet: [CharacterSet]?

        public init(characterSet: [CharacterSet]? = nil) {
            self.characterSet = characterSet
        }

        private enum CodingKeys: String, CodingKey {
            case characterSet = "CharacterSet"
        }
    }

    public struct DescribeReservedDBInstancesOfferingsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Duration", required: false, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "ReservedDBInstancesOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "OfferingType", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "ProductDescription", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// Duration filter value, specified in years or seconds. Specify this parameter to show only reservations for this duration. Valid Values: 1 | 3 | 31536000 | 94608000 
        public let duration: String?
        /// The Multi-AZ filter value. Specify this parameter to show only the available offerings matching the specified Multi-AZ parameter.
        public let multiAZ: Bool?
        /// The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
        public let dBInstanceClass: String?
        /// The offering identifier filter value. Specify this parameter to show only the available offering that matches the specified reservation identifier. Example: 438012d3-4052-4cc7-b2e3-8d3372e0e706 
        public let reservedDBInstancesOfferingId: String?
        /// The offering type filter value. Specify this parameter to show only the available offerings matching the specified offering type. Valid Values: "Partial Upfront" | "All Upfront" | "No Upfront"  
        public let offeringType: String?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        /// Product description filter value. Specify this parameter to show only the available offerings that contain the specified product description.  The results show offerings that partially match the filter value. 
        public let productDescription: String?
        ///  The maximum number of records to include in the response. If more than the MaxRecords value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(duration: String? = nil, multiAZ: Bool? = nil, dBInstanceClass: String? = nil, reservedDBInstancesOfferingId: String? = nil, offeringType: String? = nil, marker: String? = nil, filters: FilterList? = nil, productDescription: String? = nil, maxRecords: Int32? = nil) {
            self.duration = duration
            self.multiAZ = multiAZ
            self.dBInstanceClass = dBInstanceClass
            self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
            self.offeringType = offeringType
            self.marker = marker
            self.filters = filters
            self.productDescription = productDescription
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case duration = "Duration"
            case multiAZ = "MultiAZ"
            case dBInstanceClass = "DBInstanceClass"
            case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
            case offeringType = "OfferingType"
            case marker = "Marker"
            case filters = "Filters"
            case productDescription = "ProductDescription"
            case maxRecords = "MaxRecords"
        }
    }

    public struct CopyDBSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshot", required: false, type: .structure)
        ]
        public let dBSnapshot: DBSnapshot?

        public init(dBSnapshot: DBSnapshot? = nil) {
            self.dBSnapshot = dBSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshot = "DBSnapshot"
        }
    }

    public struct DescribeValidDBInstanceModificationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ValidDBInstanceModificationsMessage", required: false, type: .structure)
        ]
        public let validDBInstanceModificationsMessage: ValidDBInstanceModificationsMessage?

        public init(validDBInstanceModificationsMessage: ValidDBInstanceModificationsMessage? = nil) {
            self.validDBInstanceModificationsMessage = validDBInstanceModificationsMessage
        }

        private enum CodingKeys: String, CodingKey {
            case validDBInstanceModificationsMessage = "ValidDBInstanceModificationsMessage"
        }
    }

    public struct CreateEventSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceType", required: false, type: .string), 
            AWSShapeMember(label: "EventCategories", required: false, type: .structure), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string), 
            AWSShapeMember(label: "SnsTopicArn", required: true, type: .string), 
            AWSShapeMember(label: "SourceIds", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// The type of source that is generating the events. For example, if you want to be notified of events generated by a DB instance, you would set this parameter to db-instance. if this value is not specified, all events are returned. Valid values: db-instance | db-cluster | db-parameter-group | db-security-group | db-snapshot | db-cluster-snapshot 
        public let sourceType: String?
        ///  A list of event categories for a SourceType that you want to subscribe to. You can see a list of the categories for a given SourceType in the Events topic in the Amazon RDS User Guide or by using the DescribeEventCategories action. 
        public let eventCategories: EventCategoriesList?
        ///  A Boolean value; set to true to activate the subscription, set to false to create the subscription but not active it. 
        public let enabled: Bool?
        /// The name of the subscription. Constraints: The name must be less than 255 characters.
        public let subscriptionName: String
        /// The Amazon Resource Name (ARN) of the SNS topic created for event notification. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
        public let snsTopicArn: String
        /// The list of identifiers of the event sources for which events are returned. If not specified, then all sources are included in the response. An identifier must begin with a letter and must contain only ASCII letters, digits, and hyphens; it can't end with a hyphen or contain two consecutive hyphens. Constraints:   If SourceIds are supplied, SourceType must also be provided.   If the source type is a DB instance, then a DBInstanceIdentifier must be supplied.   If the source type is a DB security group, a DBSecurityGroupName must be supplied.   If the source type is a DB parameter group, a DBParameterGroupName must be supplied.   If the source type is a DB snapshot, a DBSnapshotIdentifier must be supplied.  
        public let sourceIds: SourceIdsList?
        public let tags: TagList?

        public init(sourceType: String? = nil, eventCategories: EventCategoriesList? = nil, enabled: Bool? = nil, subscriptionName: String, snsTopicArn: String, sourceIds: SourceIdsList? = nil, tags: TagList? = nil) {
            self.sourceType = sourceType
            self.eventCategories = eventCategories
            self.enabled = enabled
            self.subscriptionName = subscriptionName
            self.snsTopicArn = snsTopicArn
            self.sourceIds = sourceIds
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case sourceType = "SourceType"
            case eventCategories = "EventCategories"
            case enabled = "Enabled"
            case subscriptionName = "SubscriptionName"
            case snsTopicArn = "SnsTopicArn"
            case sourceIds = "SourceIds"
            case tags = "Tags"
        }
    }

    public struct DeleteDBClusterParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterParameterGroupName", required: true, type: .string)
        ]
        /// The name of the DB cluster parameter group. Constraints:   Must be the name of an existing DB cluster parameter group.   You can't delete a default DB cluster parameter group.   Cannot be associated with any DB clusters.  
        public let dBClusterParameterGroupName: String

        public init(dBClusterParameterGroupName: String) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
        }
    }

    public struct ModifyDBSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshot", required: false, type: .structure)
        ]
        public let dBSnapshot: DBSnapshot?

        public init(dBSnapshot: DBSnapshot? = nil) {
            self.dBSnapshot = dBSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshot = "DBSnapshot"
        }
    }

    public struct RemoveRoleFromDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", required: true, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the IAM role to disassociate from the Aurora DB cluster, for example arn:aws:iam::123456789012:role/AuroraAccessRole.
        public let roleArn: String
        /// The name of the DB cluster to disassociate the IAM role from.
        public let dBClusterIdentifier: String

        public init(roleArn: String, dBClusterIdentifier: String) {
            self.roleArn = roleArn
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct CreateOptionGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EngineName", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "MajorEngineVersion", required: true, type: .string), 
            AWSShapeMember(label: "OptionGroupDescription", required: true, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: true, type: .string)
        ]
        /// Specifies the name of the engine that this option group should be associated with.
        public let engineName: String
        public let tags: TagList?
        /// Specifies the major version of the engine that this option group should be associated with.
        public let majorEngineVersion: String
        /// The description of the option group.
        public let optionGroupDescription: String
        /// Specifies the name of the option group to be created. Constraints:   Must be 1 to 255 letters, numbers, or hyphens   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens   Example: myoptiongroup 
        public let optionGroupName: String

        public init(engineName: String, tags: TagList? = nil, majorEngineVersion: String, optionGroupDescription: String, optionGroupName: String) {
            self.engineName = engineName
            self.tags = tags
            self.majorEngineVersion = majorEngineVersion
            self.optionGroupDescription = optionGroupDescription
            self.optionGroupName = optionGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case engineName = "EngineName"
            case tags = "Tags"
            case majorEngineVersion = "MajorEngineVersion"
            case optionGroupDescription = "OptionGroupDescription"
            case optionGroupName = "OptionGroupName"
        }
    }

    public enum SourceType: String, CustomStringConvertible, Codable {
        case dbInstance = "db-instance"
        case dbParameterGroup = "db-parameter-group"
        case dbSecurityGroup = "db-security-group"
        case dbSnapshot = "db-snapshot"
        case dbCluster = "db-cluster"
        case dbClusterSnapshot = "db-cluster-snapshot"
        public var description: String { return self.rawValue }
    }

    public struct DescribeDBClusterSnapshotsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IncludeShared", required: false, type: .boolean), 
            AWSShapeMember(label: "SnapshotType", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "IncludePublic", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "DBClusterSnapshotIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// True to include shared manual DB cluster snapshots from other AWS accounts that this AWS account has been given permission to copy or restore, and otherwise false. The default is false. You can give an AWS account permission to restore a manual DB cluster snapshot from another AWS account by the ModifyDBClusterSnapshotAttribute API action.
        public let includeShared: Bool?
        /// The type of DB cluster snapshots to be returned. You can specify one of the following values:    automated - Return all DB cluster snapshots that have been automatically taken by Amazon RDS for my AWS account.    manual - Return all DB cluster snapshots that have been taken by my AWS account.    shared - Return all manual DB cluster snapshots that have been shared to my AWS account.    public - Return all DB cluster snapshots that have been marked as public.   If you don't specify a SnapshotType value, then both automated and manual DB cluster snapshots are returned. You can include shared DB cluster snapshots with these results by setting the IncludeShared parameter to true. You can include public DB cluster snapshots with these results by setting the IncludePublic parameter to true. The IncludeShared and IncludePublic parameters don't apply for SnapshotType values of manual or automated. The IncludePublic parameter doesn't apply when SnapshotType is set to shared. The IncludeShared parameter doesn't apply when SnapshotType is set to public.
        public let snapshotType: String?
        /// The ID of the DB cluster to retrieve the list of DB cluster snapshots for. This parameter can't be used in conjunction with the DBClusterSnapshotIdentifier parameter. This parameter is not case-sensitive.  Constraints:   If supplied, must match the identifier of an existing DBCluster.  
        public let dBClusterIdentifier: String?
        /// An optional pagination token provided by a previous DescribeDBClusterSnapshots request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// True to include manual DB cluster snapshots that are public and can be copied or restored by any AWS account, and otherwise false. The default is false. The default is false. You can share a manual DB cluster snapshot as public by using the ModifyDBClusterSnapshotAttribute API action.
        public let includePublic: Bool?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        /// A specific DB cluster snapshot identifier to describe. This parameter can't be used in conjunction with the DBClusterIdentifier parameter. This value is stored as a lowercase string.  Constraints:   If supplied, must match the identifier of an existing DBClusterSnapshot.   If this identifier is for an automated snapshot, the SnapshotType parameter must also be specified.  
        public let dBClusterSnapshotIdentifier: String?
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(includeShared: Bool? = nil, snapshotType: String? = nil, dBClusterIdentifier: String? = nil, marker: String? = nil, includePublic: Bool? = nil, filters: FilterList? = nil, dBClusterSnapshotIdentifier: String? = nil, maxRecords: Int32? = nil) {
            self.includeShared = includeShared
            self.snapshotType = snapshotType
            self.dBClusterIdentifier = dBClusterIdentifier
            self.marker = marker
            self.includePublic = includePublic
            self.filters = filters
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case includeShared = "IncludeShared"
            case snapshotType = "SnapshotType"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case marker = "Marker"
            case includePublic = "IncludePublic"
            case filters = "Filters"
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
            case maxRecords = "MaxRecords"
        }
    }

    public struct DescribeSourceRegionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "RegionName", required: false, type: .string)
        ]
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        /// An optional pagination token provided by a previous DescribeSourceRegions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?
        /// The source AWS Region name. For example, us-east-1. Constraints:   Must specify a valid AWS Region name.  
        public let regionName: String?

        public init(maxRecords: Int32? = nil, filters: FilterList? = nil, marker: String? = nil, regionName: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.marker = marker
            self.regionName = regionName
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case marker = "Marker"
            case regionName = "RegionName"
        }
    }

    public struct DBParameterGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroupFamily", required: false, type: .string)
        ]
        /// Provides the name of the DB parameter group.
        public let dBParameterGroupName: String?
        /// The Amazon Resource Name (ARN) for the DB parameter group.
        public let dBParameterGroupArn: String?
        /// Provides the customer-specified description for this DB parameter group.
        public let description: String?
        /// Provides the name of the DB parameter group family that this DB parameter group is compatible with.
        public let dBParameterGroupFamily: String?

        public init(dBParameterGroupName: String? = nil, dBParameterGroupArn: String? = nil, description: String? = nil, dBParameterGroupFamily: String? = nil) {
            self.dBParameterGroupName = dBParameterGroupName
            self.dBParameterGroupArn = dBParameterGroupArn
            self.description = description
            self.dBParameterGroupFamily = dBParameterGroupFamily
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
            case dBParameterGroupArn = "DBParameterGroupArn"
            case description = "Description"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
        }
    }

    public struct DescribeDBClusterSnapshotAttributesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshotAttributesResult", required: false, type: .structure)
        ]
        public let dBClusterSnapshotAttributesResult: DBClusterSnapshotAttributesResult?

        public init(dBClusterSnapshotAttributesResult: DBClusterSnapshotAttributesResult? = nil) {
            self.dBClusterSnapshotAttributesResult = dBClusterSnapshotAttributesResult
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotAttributesResult = "DBClusterSnapshotAttributesResult"
        }
    }

    public struct AddSourceIdentifierToSubscriptionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .structure)
        ]
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct OptionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionName", required: true, type: .string), 
            AWSShapeMember(label: "OptionSettings", required: false, type: .structure), 
            AWSShapeMember(label: "VpcSecurityGroupMemberships", required: false, type: .structure), 
            AWSShapeMember(label: "DBSecurityGroupMemberships", required: false, type: .structure), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "OptionVersion", required: false, type: .string)
        ]
        /// The configuration of options to include in a group.
        public let optionName: String
        /// The option settings to include in an option group.
        public let optionSettings: OptionSettingsList?
        /// A list of VpcSecurityGroupMemebrship name strings used for this option.
        public let vpcSecurityGroupMemberships: VpcSecurityGroupIdList?
        /// A list of DBSecurityGroupMemebrship name strings used for this option.
        public let dBSecurityGroupMemberships: DBSecurityGroupNameList?
        /// The optional port for the option.
        public let port: Int32?
        /// The version for the option.
        public let optionVersion: String?

        public init(optionName: String, optionSettings: OptionSettingsList? = nil, vpcSecurityGroupMemberships: VpcSecurityGroupIdList? = nil, dBSecurityGroupMemberships: DBSecurityGroupNameList? = nil, port: Int32? = nil, optionVersion: String? = nil) {
            self.optionName = optionName
            self.optionSettings = optionSettings
            self.vpcSecurityGroupMemberships = vpcSecurityGroupMemberships
            self.dBSecurityGroupMemberships = dBSecurityGroupMemberships
            self.port = port
            self.optionVersion = optionVersion
        }

        private enum CodingKeys: String, CodingKey {
            case optionName = "OptionName"
            case optionSettings = "OptionSettings"
            case vpcSecurityGroupMemberships = "VpcSecurityGroupMemberships"
            case dBSecurityGroupMemberships = "DBSecurityGroupMemberships"
            case port = "Port"
            case optionVersion = "OptionVersion"
        }
    }

    public struct Event: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceType", required: false, type: .enum), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "SourceArn", required: false, type: .string), 
            AWSShapeMember(label: "Date", required: false, type: .timestamp), 
            AWSShapeMember(label: "EventCategories", required: false, type: .structure), 
            AWSShapeMember(label: "SourceIdentifier", required: false, type: .string)
        ]
        /// Specifies the source type for this event.
        public let sourceType: SourceType?
        /// Provides the text of this event.
        public let message: String?
        /// The Amazon Resource Name (ARN) for the event.
        public let sourceArn: String?
        /// Specifies the date and time of the event.
        public let date: TimeStamp?
        /// Specifies the category for the event.
        public let eventCategories: EventCategoriesList?
        /// Provides the identifier for the source of the event.
        public let sourceIdentifier: String?

        public init(sourceType: SourceType? = nil, message: String? = nil, sourceArn: String? = nil, date: TimeStamp? = nil, eventCategories: EventCategoriesList? = nil, sourceIdentifier: String? = nil) {
            self.sourceType = sourceType
            self.message = message
            self.sourceArn = sourceArn
            self.date = date
            self.eventCategories = eventCategories
            self.sourceIdentifier = sourceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case sourceType = "SourceType"
            case message = "Message"
            case sourceArn = "SourceArn"
            case date = "Date"
            case eventCategories = "EventCategories"
            case sourceIdentifier = "SourceIdentifier"
        }
    }

    public struct EventCategoriesMapList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategoriesMap", required: false, type: .list)
        ]
        public let eventCategoriesMap: [EventCategoriesMap]?

        public init(eventCategoriesMap: [EventCategoriesMap]? = nil) {
            self.eventCategoriesMap = eventCategoriesMap
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategoriesMap = "EventCategoriesMap"
        }
    }

    public struct DBClusterBacktrackList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterBacktrack", required: false, type: .list)
        ]
        public let dBClusterBacktrack: [DBClusterBacktrack]?

        public init(dBClusterBacktrack: [DBClusterBacktrack]? = nil) {
            self.dBClusterBacktrack = dBClusterBacktrack
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterBacktrack = "DBClusterBacktrack"
        }
    }

    public struct CopyDBParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceDBParameterGroupIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "TargetDBParameterGroupDescription", required: true, type: .string), 
            AWSShapeMember(label: "TargetDBParameterGroupIdentifier", required: true, type: .string)
        ]
        ///  The identifier or ARN for the source DB parameter group. For information about creating an ARN, see  Constructing an RDS Amazon Resource Name (ARN).  Constraints:   Must specify a valid DB parameter group.   Must specify a valid DB parameter group identifier, for example my-db-param-group, or a valid ARN.  
        public let sourceDBParameterGroupIdentifier: String
        public let tags: TagList?
        /// A description for the copied DB parameter group.
        public let targetDBParameterGroupDescription: String
        /// The identifier for the copied DB parameter group. Constraints:   Cannot be null, empty, or blank   Must contain from 1 to 255 letters, numbers, or hyphens   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens   Example: my-db-parameter-group 
        public let targetDBParameterGroupIdentifier: String

        public init(sourceDBParameterGroupIdentifier: String, tags: TagList? = nil, targetDBParameterGroupDescription: String, targetDBParameterGroupIdentifier: String) {
            self.sourceDBParameterGroupIdentifier = sourceDBParameterGroupIdentifier
            self.tags = tags
            self.targetDBParameterGroupDescription = targetDBParameterGroupDescription
            self.targetDBParameterGroupIdentifier = targetDBParameterGroupIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case sourceDBParameterGroupIdentifier = "SourceDBParameterGroupIdentifier"
            case tags = "Tags"
            case targetDBParameterGroupDescription = "TargetDBParameterGroupDescription"
            case targetDBParameterGroupIdentifier = "TargetDBParameterGroupIdentifier"
        }
    }

    public struct EventSubscriptionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .list)
        ]
        public let eventSubscription: [EventSubscription]?

        public init(eventSubscription: [EventSubscription]? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct RestoreDBClusterToPointInTimeMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "RestoreType", required: false, type: .string), 
            AWSShapeMember(label: "RestoreToTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "UseLatestRestorableTime", required: false, type: .boolean), 
            AWSShapeMember(label: "EnableCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "BacktrackWindow", required: false, type: .long), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "SourceDBClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure)
        ]
        /// The AWS KMS key identifier to use when restoring an encrypted DB cluster from an encrypted DB cluster. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are restoring a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KMS encryption key. You can restore to a new DB cluster and encrypt the new DB cluster with a KMS key that is different than the KMS key used to encrypt the source DB cluster. The new DB cluster is encrypted with the KMS key identified by the KmsKeyId parameter. If you do not specify a value for the KmsKeyId parameter, then the following will occur:   If the DB cluster is encrypted, then the restored DB cluster is encrypted using the KMS key that was used to encrypt the source DB cluster.   If the DB cluster is not encrypted, then the restored DB cluster is not encrypted.   If DBClusterIdentifier refers to a DB cluster that is not encrypted, then the restore request is rejected.
        public let kmsKeyId: String?
        /// The type of restore to be performed. You can specify one of the following values:    full-copy - The new DB cluster is restored as a full copy of the source DB cluster.    copy-on-write - The new DB cluster is restored as a clone of the source DB cluster.   Constraints: You can't specify copy-on-write if the engine version of the source DB cluster is earlier than 1.11. If you don't specify a RestoreType value, then the new DB cluster is restored as a full copy of the source DB cluster.
        public let restoreType: String?
        /// The date and time to restore the DB cluster to. Valid Values: Value must be a time in Universal Coordinated Time (UTC) format Constraints:   Must be before the latest restorable time for the DB instance   Must be specified if UseLatestRestorableTime parameter is not provided   Cannot be specified if UseLatestRestorableTime parameter is true   Cannot be specified if RestoreType parameter is copy-on-write    Example: 2015-03-07T23:45:00Z 
        public let restoreToTime: TimeStamp?
        public let tags: TagList?
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// The name of the new DB cluster to be created. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens  
        public let dBClusterIdentifier: String
        /// A value that is set to true to restore the DB cluster to the latest restorable backup time, and false otherwise.  Default: false  Constraints: Cannot be specified if RestoreToTime parameter is provided.
        public let useLatestRestorableTime: Bool?
        /// The list of logs that the restored DB cluster is to export to CloudWatch Logs.
        public let enableCloudwatchLogsExports: [String]?
        /// The target backtrack window, in seconds. To disable backtracking, set this value to 0. Default: 0 Constraints:   If specified, this value must be set to a number from 0 to 259,200 (72 hours).  
        public let backtrackWindow: Int64?
        /// The DB subnet group name to use for the new DB cluster. Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup 
        public let dBSubnetGroupName: String?
        /// The identifier of the source DB cluster from which to restore. Constraints:   Must match the identifier of an existing DBCluster.  
        public let sourceDBClusterIdentifier: String
        /// The name of the option group for the new DB cluster.
        public let optionGroupName: String?
        /// The port number on which the new DB cluster accepts connections. Constraints: A value from 1150-65535.  Default: The default port for the engine.
        public let port: Int32?
        /// A list of VPC security groups that the new DB cluster belongs to.
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?

        public init(kmsKeyId: String? = nil, restoreType: String? = nil, restoreToTime: TimeStamp? = nil, tags: TagList? = nil, enableIAMDatabaseAuthentication: Bool? = nil, dBClusterIdentifier: String, useLatestRestorableTime: Bool? = nil, enableCloudwatchLogsExports: [String]? = nil, backtrackWindow: Int64? = nil, dBSubnetGroupName: String? = nil, sourceDBClusterIdentifier: String, optionGroupName: String? = nil, port: Int32? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil) {
            self.kmsKeyId = kmsKeyId
            self.restoreType = restoreType
            self.restoreToTime = restoreToTime
            self.tags = tags
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.dBClusterIdentifier = dBClusterIdentifier
            self.useLatestRestorableTime = useLatestRestorableTime
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.backtrackWindow = backtrackWindow
            self.dBSubnetGroupName = dBSubnetGroupName
            self.sourceDBClusterIdentifier = sourceDBClusterIdentifier
            self.optionGroupName = optionGroupName
            self.port = port
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case kmsKeyId = "KmsKeyId"
            case restoreType = "RestoreType"
            case restoreToTime = "RestoreToTime"
            case tags = "Tags"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case useLatestRestorableTime = "UseLatestRestorableTime"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case backtrackWindow = "BacktrackWindow"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case sourceDBClusterIdentifier = "SourceDBClusterIdentifier"
            case optionGroupName = "OptionGroupName"
            case port = "Port"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct DomainMembershipList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainMembership", required: false, type: .list)
        ]
        public let domainMembership: [DomainMembership]?

        public init(domainMembership: [DomainMembership]? = nil) {
            self.domainMembership = domainMembership
        }

        private enum CodingKeys: String, CodingKey {
            case domainMembership = "DomainMembership"
        }
    }

    public struct SupportedTimezonesList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Timezone", required: false, type: .list)
        ]
        public let timezone: [Timezone]?

        public init(timezone: [Timezone]? = nil) {
            self.timezone = timezone
        }

        private enum CodingKeys: String, CodingKey {
            case timezone = "Timezone"
        }
    }

    public struct ParametersList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameter", required: false, type: .list)
        ]
        public let parameter: [Parameter]?

        public init(parameter: [Parameter]? = nil) {
            self.parameter = parameter
        }

        private enum CodingKeys: String, CodingKey {
            case parameter = "Parameter"
        }
    }

    public struct ReservedDBInstancesOffering: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "RecurringCharges", required: false, type: .structure), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "ReservedDBInstancesOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "OfferingType", required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", required: false, type: .string), 
            AWSShapeMember(label: "FixedPrice", required: false, type: .double), 
            AWSShapeMember(label: "UsagePrice", required: false, type: .double), 
            AWSShapeMember(label: "ProductDescription", required: false, type: .string)
        ]
        /// The duration of the offering in seconds.
        public let duration: Int32?
        /// The recurring price charged to run this reserved DB instance.
        public let recurringCharges: RecurringChargeList?
        /// Indicates if the offering applies to Multi-AZ deployments.
        public let multiAZ: Bool?
        /// The offering identifier.
        public let reservedDBInstancesOfferingId: String?
        /// The DB instance class for the reserved DB instance.
        public let dBInstanceClass: String?
        /// The offering type.
        public let offeringType: String?
        /// The currency code for the reserved DB instance offering.
        public let currencyCode: String?
        /// The fixed price charged for this offering.
        public let fixedPrice: Double?
        /// The hourly price charged for this offering.
        public let usagePrice: Double?
        /// The database engine used by the offering.
        public let productDescription: String?

        public init(duration: Int32? = nil, recurringCharges: RecurringChargeList? = nil, multiAZ: Bool? = nil, reservedDBInstancesOfferingId: String? = nil, dBInstanceClass: String? = nil, offeringType: String? = nil, currencyCode: String? = nil, fixedPrice: Double? = nil, usagePrice: Double? = nil, productDescription: String? = nil) {
            self.duration = duration
            self.recurringCharges = recurringCharges
            self.multiAZ = multiAZ
            self.reservedDBInstancesOfferingId = reservedDBInstancesOfferingId
            self.dBInstanceClass = dBInstanceClass
            self.offeringType = offeringType
            self.currencyCode = currencyCode
            self.fixedPrice = fixedPrice
            self.usagePrice = usagePrice
            self.productDescription = productDescription
        }

        private enum CodingKeys: String, CodingKey {
            case duration = "Duration"
            case recurringCharges = "RecurringCharges"
            case multiAZ = "MultiAZ"
            case reservedDBInstancesOfferingId = "ReservedDBInstancesOfferingId"
            case dBInstanceClass = "DBInstanceClass"
            case offeringType = "OfferingType"
            case currencyCode = "CurrencyCode"
            case fixedPrice = "FixedPrice"
            case usagePrice = "UsagePrice"
            case productDescription = "ProductDescription"
        }
    }

    public struct PendingMaintenanceActionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PendingMaintenanceActions", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A list of the pending maintenance actions for the resource.
        public let pendingMaintenanceActions: PendingMaintenanceActions?
        ///  An optional pagination token provided by a previous DescribePendingMaintenanceActions request. If this parameter is specified, the response includes only records beyond the marker, up to a number of records specified by MaxRecords. 
        public let marker: String?

        public init(pendingMaintenanceActions: PendingMaintenanceActions? = nil, marker: String? = nil) {
            self.pendingMaintenanceActions = pendingMaintenanceActions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case pendingMaintenanceActions = "PendingMaintenanceActions"
            case marker = "Marker"
        }
    }

    public struct DescribeOptionGroupOptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "EngineName", required: true, type: .string), 
            AWSShapeMember(label: "MajorEngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// A required parameter. Options available for the given engine name are described.
        public let engineName: String
        /// If specified, filters the results to include only options for the specified major engine version.
        public let majorEngineVersion: String?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords.
        public let marker: String?

        public init(maxRecords: Int32? = nil, engineName: String, majorEngineVersion: String? = nil, filters: FilterList? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.engineName = engineName
            self.majorEngineVersion = majorEngineVersion
            self.filters = filters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case engineName = "EngineName"
            case majorEngineVersion = "MajorEngineVersion"
            case filters = "Filters"
            case marker = "Marker"
        }
    }

    public struct DBClusterParameterGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterParameterGroups", required: false, type: .structure)
        ]
        ///  An optional pagination token provided by a previous DescribeDBClusterParameterGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// A list of DB cluster parameter groups.
        public let dBClusterParameterGroups: DBClusterParameterGroupList?

        public init(marker: String? = nil, dBClusterParameterGroups: DBClusterParameterGroupList? = nil) {
            self.marker = marker
            self.dBClusterParameterGroups = dBClusterParameterGroups
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case dBClusterParameterGroups = "DBClusterParameterGroups"
        }
    }

    public struct DBSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBSubnetGroups", required: false, type: .structure)
        ]
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        ///  A list of DBSubnetGroup instances. 
        public let dBSubnetGroups: DBSubnetGroups?

        public init(marker: String? = nil, dBSubnetGroups: DBSubnetGroups? = nil) {
            self.marker = marker
            self.dBSubnetGroups = dBSubnetGroups
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case dBSubnetGroups = "DBSubnetGroups"
        }
    }

    public struct DBClusterParameterGroupList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterParameterGroup", required: false, type: .list)
        ]
        public let dBClusterParameterGroup: [DBClusterParameterGroup]?

        public init(dBClusterParameterGroup: [DBClusterParameterGroup]? = nil) {
            self.dBClusterParameterGroup = dBClusterParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroup = "DBClusterParameterGroup"
        }
    }

    public struct DBClusterRoles: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterRole", required: false, type: .list)
        ]
        public let dBClusterRole: [DBClusterRole]?

        public init(dBClusterRole: [DBClusterRole]? = nil) {
            self.dBClusterRole = dBClusterRole
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterRole = "DBClusterRole"
        }
    }

    public struct ModifyDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplyImmediately", required: false, type: .boolean), 
            AWSShapeMember(label: "DBClusterParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "NewDBClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "BacktrackWindow", required: false, type: .long), 
            AWSShapeMember(label: "MasterUserPassword", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "PreferredBackupWindow", required: false, type: .string), 
            AWSShapeMember(label: "CloudwatchLogsExportConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure)
        ]
        /// A value that specifies whether the modifications in this request and any pending modifications are asynchronously applied as soon as possible, regardless of the PreferredMaintenanceWindow setting for the DB cluster. If this parameter is set to false, changes to the DB cluster are applied during the next maintenance window. The ApplyImmediately parameter only affects the NewDBClusterIdentifier and MasterUserPassword values. If you set the ApplyImmediately parameter value to false, then changes to the NewDBClusterIdentifier and MasterUserPassword values are applied during the next maintenance window. All other changes are applied immediately, regardless of the value of the ApplyImmediately parameter. Default: false 
        public let applyImmediately: Bool?
        /// The name of the DB cluster parameter group to use for the DB cluster.
        public let dBClusterParameterGroupName: String?
        /// The number of days for which automated backups are retained. You must specify a minimum value of 1. Default: 1 Constraints:   Must be a value from 1 to 35  
        public let backupRetentionPeriod: Int32?
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// The DB cluster identifier for the cluster being modified. This parameter is not case-sensitive. Constraints:   Must match the identifier of an existing DBCluster.  
        public let dBClusterIdentifier: String
        /// The new DB cluster identifier for the DB cluster when renaming a DB cluster. This value is stored as a lowercase string. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens   The first character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens   Example: my-cluster2 
        public let newDBClusterIdentifier: String?
        /// The target backtrack window, in seconds. To disable backtracking, set this value to 0. Default: 0 Constraints:   If specified, this value must be set to a number from 0 to 259,200 (72 hours).  
        public let backtrackWindow: Int64?
        /// The new password for the master database user. This password can contain any printable ASCII character except "/", """, or "@". Constraints: Must contain from 8 to 41 characters.
        public let masterUserPassword: String?
        /// The version number of the database engine to which you want to upgrade. Changing this parameter results in an outage. The change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true. For a list of valid engine versions, see CreateDBCluster, or call DescribeDBEngineVersions.
        public let engineVersion: String?
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see  Adjusting the Preferred Maintenance Window in the Amazon RDS User Guide.  Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// A value that indicates that the DB cluster should be associated with the specified option group. Changing this parameter doesn't result in an outage except in the following case, and the change is applied during the next maintenance window unless the ApplyImmediately parameter is set to true for this request. If the parameter change results in an option group that enables OEM, this change can cause a brief (sub-second) period during which new connections are rejected but existing connections are not interrupted.  Permanent options can't be removed from an option group. The option group can't be removed from a DB cluster once it is associated with a DB cluster.
        public let optionGroupName: String?
        /// The port number on which the DB cluster accepts connections. Constraints: Value must be 1150-65535  Default: The same port as the original DB cluster.
        public let port: Int32?
        /// The daily time range during which automated backups are created if automated backups are enabled, using the BackupRetentionPeriod parameter.  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see  Adjusting the Preferred Maintenance Window in the Amazon RDS User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.  
        public let preferredBackupWindow: String?
        /// The configuration setting for the log types to be enabled for export to CloudWatch Logs for a specific DB cluster.
        public let cloudwatchLogsExportConfiguration: CloudwatchLogsExportConfiguration?
        /// A list of VPC security groups that the DB cluster will belong to.
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?

        public init(applyImmediately: Bool? = nil, dBClusterParameterGroupName: String? = nil, backupRetentionPeriod: Int32? = nil, enableIAMDatabaseAuthentication: Bool? = nil, dBClusterIdentifier: String, newDBClusterIdentifier: String? = nil, backtrackWindow: Int64? = nil, masterUserPassword: String? = nil, engineVersion: String? = nil, preferredMaintenanceWindow: String? = nil, optionGroupName: String? = nil, port: Int32? = nil, preferredBackupWindow: String? = nil, cloudwatchLogsExportConfiguration: CloudwatchLogsExportConfiguration? = nil, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil) {
            self.applyImmediately = applyImmediately
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.backupRetentionPeriod = backupRetentionPeriod
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.dBClusterIdentifier = dBClusterIdentifier
            self.newDBClusterIdentifier = newDBClusterIdentifier
            self.backtrackWindow = backtrackWindow
            self.masterUserPassword = masterUserPassword
            self.engineVersion = engineVersion
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.optionGroupName = optionGroupName
            self.port = port
            self.preferredBackupWindow = preferredBackupWindow
            self.cloudwatchLogsExportConfiguration = cloudwatchLogsExportConfiguration
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case applyImmediately = "ApplyImmediately"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case newDBClusterIdentifier = "NewDBClusterIdentifier"
            case backtrackWindow = "BacktrackWindow"
            case masterUserPassword = "MasterUserPassword"
            case engineVersion = "EngineVersion"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case optionGroupName = "OptionGroupName"
            case port = "Port"
            case preferredBackupWindow = "PreferredBackupWindow"
            case cloudwatchLogsExportConfiguration = "CloudwatchLogsExportConfiguration"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
        }
    }

    public struct AvailableProcessorFeatureList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailableProcessorFeature", required: false, type: .list)
        ]
        public let availableProcessorFeature: [AvailableProcessorFeature]?

        public init(availableProcessorFeature: [AvailableProcessorFeature]? = nil) {
            self.availableProcessorFeature = availableProcessorFeature
        }

        private enum CodingKeys: String, CodingKey {
            case availableProcessorFeature = "AvailableProcessorFeature"
        }
    }

    public struct RestoreDBInstanceToPointInTimeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct ReservedDBInstancesOfferingMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedDBInstancesOfferings", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A list of reserved DB instance offerings.
        public let reservedDBInstancesOfferings: ReservedDBInstancesOfferingList?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(reservedDBInstancesOfferings: ReservedDBInstancesOfferingList? = nil, marker: String? = nil) {
            self.reservedDBInstancesOfferings = reservedDBInstancesOfferings
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case reservedDBInstancesOfferings = "ReservedDBInstancesOfferings"
            case marker = "Marker"
        }
    }

    public struct OptionConfigurationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionConfiguration", required: false, type: .list)
        ]
        public let optionConfiguration: [OptionConfiguration]?

        public init(optionConfiguration: [OptionConfiguration]? = nil) {
            self.optionConfiguration = optionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case optionConfiguration = "OptionConfiguration"
        }
    }

    public struct DeleteDBSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshot", required: false, type: .structure)
        ]
        public let dBSnapshot: DBSnapshot?

        public init(dBSnapshot: DBSnapshot? = nil) {
            self.dBSnapshot = dBSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshot = "DBSnapshot"
        }
    }

    public struct PendingCloudwatchLogsExports: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogTypesToDisable", required: false, type: .list), 
            AWSShapeMember(label: "LogTypesToEnable", required: false, type: .list)
        ]
        /// Log types that are in the process of being enabled. After they are enabled, these log types are exported to CloudWatch Logs.
        public let logTypesToDisable: [String]?
        /// Log types that are in the process of being deactivated. After they are deactivated, these log types aren't exported to CloudWatch Logs.
        public let logTypesToEnable: [String]?

        public init(logTypesToDisable: [String]? = nil, logTypesToEnable: [String]? = nil) {
            self.logTypesToDisable = logTypesToDisable
            self.logTypesToEnable = logTypesToEnable
        }

        private enum CodingKeys: String, CodingKey {
            case logTypesToDisable = "LogTypesToDisable"
            case logTypesToEnable = "LogTypesToEnable"
        }
    }

    public struct DescribeDBSecurityGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "DBSecurityGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        /// The name of the DB security group to return details for.
        public let dBSecurityGroupName: String?
        ///  An optional pagination token provided by a previous DescribeDBSecurityGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(maxRecords: Int32? = nil, filters: FilterList? = nil, dBSecurityGroupName: String? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.dBSecurityGroupName = dBSecurityGroupName
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case dBSecurityGroupName = "DBSecurityGroupName"
            case marker = "Marker"
        }
    }

    public struct EC2SecurityGroupList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EC2SecurityGroup", required: false, type: .list)
        ]
        public let eC2SecurityGroup: [EC2SecurityGroup]?

        public init(eC2SecurityGroup: [EC2SecurityGroup]? = nil) {
            self.eC2SecurityGroup = eC2SecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case eC2SecurityGroup = "EC2SecurityGroup"
        }
    }

    public struct AvailableProcessorFeature: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultValue", required: false, type: .string), 
            AWSShapeMember(label: "AllowedValues", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The default value for the processor feature of the DB instance class.
        public let defaultValue: String?
        /// The allowed values for the processor feature of the DB instance class.
        public let allowedValues: String?
        /// The name of the processor feature. Valid names are coreCount and threadsPerCore.
        public let name: String?

        public init(defaultValue: String? = nil, allowedValues: String? = nil, name: String? = nil) {
            self.defaultValue = defaultValue
            self.allowedValues = allowedValues
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case defaultValue = "DefaultValue"
            case allowedValues = "AllowedValues"
            case name = "Name"
        }
    }

    public struct DescribeEngineDefaultClusterParametersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroupFamily", required: true, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  An optional pagination token provided by a previous DescribeEngineDefaultClusterParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The name of the DB cluster parameter group family to return engine parameter information for.
        public let dBParameterGroupFamily: String

        public init(maxRecords: Int32? = nil, filters: FilterList? = nil, marker: String? = nil, dBParameterGroupFamily: String) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.marker = marker
            self.dBParameterGroupFamily = dBParameterGroupFamily
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case marker = "Marker"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
        }
    }

    public struct CreateOptionGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroup", required: false, type: .structure)
        ]
        public let optionGroup: OptionGroup?

        public init(optionGroup: OptionGroup? = nil) {
            self.optionGroup = optionGroup
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroup = "OptionGroup"
        }
    }

    public struct CreateDBClusterSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshot", required: false, type: .structure)
        ]
        public let dBClusterSnapshot: DBClusterSnapshot?

        public init(dBClusterSnapshot: DBClusterSnapshot? = nil) {
            self.dBClusterSnapshot = dBClusterSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshot = "DBClusterSnapshot"
        }
    }

    public struct ModifyDBSnapshotAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotAttributesResult", required: false, type: .structure)
        ]
        public let dBSnapshotAttributesResult: DBSnapshotAttributesResult?

        public init(dBSnapshotAttributesResult: DBSnapshotAttributesResult? = nil) {
            self.dBSnapshotAttributesResult = dBSnapshotAttributesResult
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotAttributesResult = "DBSnapshotAttributesResult"
        }
    }

    public struct ModifyDBClusterSnapshotAttributeMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "ValuesToAdd", required: false, type: .structure), 
            AWSShapeMember(label: "AttributeName", required: true, type: .string), 
            AWSShapeMember(label: "ValuesToRemove", required: false, type: .structure)
        ]
        /// The identifier for the DB cluster snapshot to modify the attributes for.
        public let dBClusterSnapshotIdentifier: String
        /// A list of DB cluster snapshot attributes to add to the attribute specified by AttributeName. To authorize other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account IDs, or all to make the manual DB cluster snapshot restorable by any AWS account. Do not add the all value for any manual DB cluster snapshots that contain private information that you don't want available to all AWS accounts.
        public let valuesToAdd: AttributeValueList?
        /// The name of the DB cluster snapshot attribute to modify. To manage authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this value to restore.
        public let attributeName: String
        /// A list of DB cluster snapshot attributes to remove from the attribute specified by AttributeName. To remove authorization for other AWS accounts to copy or restore a manual DB cluster snapshot, set this list to include one or more AWS account identifiers, or all to remove authorization for any AWS account to copy or restore the DB cluster snapshot. If you specify all, an AWS account whose account ID is explicitly added to the restore attribute can still copy or restore a manual DB cluster snapshot.
        public let valuesToRemove: AttributeValueList?

        public init(dBClusterSnapshotIdentifier: String, valuesToAdd: AttributeValueList? = nil, attributeName: String, valuesToRemove: AttributeValueList? = nil) {
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
            self.valuesToAdd = valuesToAdd
            self.attributeName = attributeName
            self.valuesToRemove = valuesToRemove
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
            case valuesToAdd = "ValuesToAdd"
            case attributeName = "AttributeName"
            case valuesToRemove = "ValuesToRemove"
        }
    }

    public struct DBSecurityGroupMembershipList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSecurityGroup", required: false, type: .list)
        ]
        public let dBSecurityGroup: [DBSecurityGroupMembership]?

        public init(dBSecurityGroup: [DBSecurityGroupMembership]? = nil) {
            self.dBSecurityGroup = dBSecurityGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroup = "DBSecurityGroup"
        }
    }

    public struct OptionGroups: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroupsList", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// List of option groups.
        public let optionGroupsList: OptionGroupsList?
        /// An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(optionGroupsList: OptionGroupsList? = nil, marker: String? = nil) {
            self.optionGroupsList = optionGroupsList
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroupsList = "OptionGroupsList"
            case marker = "Marker"
        }
    }

    public struct RangeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Range", required: false, type: .list)
        ]
        public let range: [Range]?

        public init(range: [Range]? = nil) {
            self.range = range
        }

        private enum CodingKeys: String, CodingKey {
            case range = "Range"
        }
    }

    public struct DBSnapshotAttributeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotAttribute", required: false, type: .list)
        ]
        public let dBSnapshotAttribute: [DBSnapshotAttribute]?

        public init(dBSnapshotAttribute: [DBSnapshotAttribute]? = nil) {
            self.dBSnapshotAttribute = dBSnapshotAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotAttribute = "DBSnapshotAttribute"
        }
    }

    public struct VpcSecurityGroupIdList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcSecurityGroupId", required: false, type: .list)
        ]
        public let vpcSecurityGroupId: [String]?

        public init(vpcSecurityGroupId: [String]? = nil) {
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case vpcSecurityGroupId = "VpcSecurityGroupId"
        }
    }

    public struct ValidUpgradeTargetList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpgradeTarget", required: false, type: .list)
        ]
        public let upgradeTarget: [UpgradeTarget]?

        public init(upgradeTarget: [UpgradeTarget]? = nil) {
            self.upgradeTarget = upgradeTarget
        }

        private enum CodingKeys: String, CodingKey {
            case upgradeTarget = "UpgradeTarget"
        }
    }

    public struct DBInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBInstances", required: false, type: .structure)
        ]
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords . 
        public let marker: String?
        ///  A list of DBInstance instances. 
        public let dBInstances: DBInstanceList?

        public init(marker: String? = nil, dBInstances: DBInstanceList? = nil) {
            self.marker = marker
            self.dBInstances = dBInstances
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case dBInstances = "DBInstances"
        }
    }

    public struct DescribeDBParameterGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "DBParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        /// The name of a specific DB parameter group to return details for. Constraints:   If supplied, must match the name of an existing DBClusterParameterGroup.  
        public let dBParameterGroupName: String?
        ///  An optional pagination token provided by a previous DescribeDBParameterGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(maxRecords: Int32? = nil, filters: FilterList? = nil, dBParameterGroupName: String? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.dBParameterGroupName = dBParameterGroupName
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case dBParameterGroupName = "DBParameterGroupName"
            case marker = "Marker"
        }
    }

    public struct ModifyOptionGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroup", required: false, type: .structure)
        ]
        public let optionGroup: OptionGroup?

        public init(optionGroup: OptionGroup? = nil) {
            self.optionGroup = optionGroup
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroup = "OptionGroup"
        }
    }

    public struct OptionGroupsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroup", required: false, type: .list)
        ]
        public let optionGroup: [OptionGroup]?

        public init(optionGroup: [OptionGroup]? = nil) {
            self.optionGroup = optionGroup
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroup = "OptionGroup"
        }
    }

    public struct DeleteEventSubscriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionName", required: true, type: .string)
        ]
        /// The name of the RDS event notification subscription you want to delete.
        public let subscriptionName: String

        public init(subscriptionName: String) {
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct DBSubnetGroups: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSubnetGroup", required: false, type: .list)
        ]
        public let dBSubnetGroup: [DBSubnetGroup]?

        public init(dBSubnetGroup: [DBSubnetGroup]? = nil) {
            self.dBSubnetGroup = dBSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroup = "DBSubnetGroup"
        }
    }

    public struct OptionVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "IsDefault", required: false, type: .boolean)
        ]
        /// The version of the option.
        public let version: String?
        /// True if the version is the default version of the option, and otherwise false.
        public let isDefault: Bool?

        public init(version: String? = nil, isDefault: Bool? = nil) {
            self.version = version
            self.isDefault = isDefault
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case isDefault = "IsDefault"
        }
    }

    public struct RestoreDBInstanceFromDBSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "CopyTagsToSnapshot", required: false, type: .boolean), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "DBName", required: false, type: .string), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "EnableCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "DBSnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "DomainIAMRoleName", required: false, type: .string), 
            AWSShapeMember(label: "TdeCredentialArn", required: false, type: .string), 
            AWSShapeMember(label: "TdeCredentialPassword", required: false, type: .string), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "Domain", required: false, type: .string), 
            AWSShapeMember(label: "ProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "UseDefaultProcessorFeatures", required: false, type: .boolean), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string)
        ]
        /// The port number on which the database accepts connections. Default: The same port as the original DB instance Constraints: Value must be 1150-65535 
        public let port: Int32?
        /// True to copy all tags from the restored DB instance to snapshots of the DB instance, and otherwise false. The default is false.
        public let copyTagsToSnapshot: Bool?
        /// Specifies if the DB instance is a Multi-AZ deployment. Constraint: You can't specify the AvailabilityZone parameter if the MultiAZ parameter is set to true.
        public let multiAZ: Bool?
        /// The database name for the restored DB instance.  This parameter doesn't apply to the MySQL, PostgreSQL, or MariaDB engines. 
        public let dBName: String?
        /// The DB subnet group name to use for the new instance. Constraints: If supplied, must match the name of an existing DBSubnetGroup. Example: mySubnetgroup 
        public let dBSubnetGroupName: String?
        /// Name of the DB instance to create from the DB snapshot. This parameter isn't case-sensitive. Constraints:   Must contain from 1 to 63 numbers, letters, or hyphens   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens   Example: my-snapshot-id 
        public let dBInstanceIdentifier: String
        /// The compute and memory capacity of the Amazon RDS DB instance, for example, db.m4.large. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class in the Amazon RDS User Guide.  Default: The same DBInstanceClass as the original DB instance.
        public let dBInstanceClass: String?
        /// The list of logs that the restored DB instance is to export to CloudWatch Logs.
        public let enableCloudwatchLogsExports: [String]?
        /// The database engine to use for the new instance. Default: The same as source Constraint: Must be compatible with the engine of the source. For example, you can restore a MariaDB 10.1 DB instance from a MySQL 5.6 snapshot. Valid Values:    mariadb     mysql     oracle-ee     oracle-se2     oracle-se1     oracle-se     postgres     sqlserver-ee     sqlserver-se     sqlserver-ex     sqlserver-web   
        public let engine: String?
        /// The identifier for the DB snapshot to restore from. Constraints:   Must match the identifier of an existing DBSnapshot.   If you are restoring from a shared manual DB snapshot, the DBSnapshotIdentifier must be the ARN of the shared DB snapshot.  
        public let dBSnapshotIdentifier: String
        /// Specify the name of the IAM role to be used when making API calls to the Directory Service.
        public let domainIAMRoleName: String?
        /// The ARN from the key store with which to associate the instance for TDE encryption.
        public let tdeCredentialArn: String?
        /// The password for the given ARN from the key store in order to access the device.
        public let tdeCredentialPassword: String?
        /// License model information for the restored DB instance. Default: Same as source.  Valid values: license-included | bring-your-own-license | general-public-license 
        public let licenseModel: String?
        /// Specifies the amount of provisioned IOPS for the DB instance, expressed in I/O operations per second. If this parameter is not specified, the IOPS value is taken from the backup. If this parameter is set to 0, the new instance is converted to a non-PIOPS instance. The conversion takes additional time, though your DB instance is available for connections before the conversion starts.  The provisioned IOPS value must follow the requirements for your database engine. For more information, see Amazon RDS Provisioned IOPS Storage to Improve Performance.  Constraints: Must be an integer greater than 1000.
        public let iops: Int32?
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. You can enable IAM database authentication for the following database engines   For MySQL 5.6, minor version 5.6.34 or higher   For MySQL 5.7, minor version 5.7.16 or higher   Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// Specifies the accessibility options for the DB instance. A value of true specifies an Internet-facing instance with a publicly resolvable DNS name, which resolves to a public IP address. A value of false specifies an internal instance with a DNS name that resolves to a private IP address. Default: The default behavior varies depending on whether a VPC has been requested or not. The following list shows the default behavior in each case.    Default VPC: true    VPC: false   If no DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance is publicly accessible. If a specific DB subnet group has been specified as part of the request and the PubliclyAccessible value has not been set, the DB instance is private.
        public let publiclyAccessible: Bool?
        /// Specifies the storage type to be associated with the DB instance.  Valid values: standard | gp2 | io1   If you specify io1, you must also include a value for the Iops parameter.   Default: io1 if the Iops parameter is specified, otherwise standard 
        public let storageType: String?
        /// Specify the Active Directory Domain to restore the instance in.
        public let domain: String?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        public let processorFeatures: ProcessorFeatureList?
        public let tags: TagList?
        /// Indicates that minor version upgrades are applied automatically to the DB instance during the maintenance window.
        public let autoMinorVersionUpgrade: Bool?
        /// The name of the option group to be used for the restored DB instance. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance
        public let optionGroupName: String?
        /// A value that specifies that the DB instance class of the DB instance uses its default processor features.
        public let useDefaultProcessorFeatures: Bool?
        /// The EC2 Availability Zone that the DB instance is created in. Default: A random, system-chosen Availability Zone. Constraint: You can't specify the AvailabilityZone parameter if the MultiAZ parameter is set to true. Example: us-east-1a 
        public let availabilityZone: String?

        public init(port: Int32? = nil, copyTagsToSnapshot: Bool? = nil, multiAZ: Bool? = nil, dBName: String? = nil, dBSubnetGroupName: String? = nil, dBInstanceIdentifier: String, dBInstanceClass: String? = nil, enableCloudwatchLogsExports: [String]? = nil, engine: String? = nil, dBSnapshotIdentifier: String, domainIAMRoleName: String? = nil, tdeCredentialArn: String? = nil, tdeCredentialPassword: String? = nil, licenseModel: String? = nil, iops: Int32? = nil, enableIAMDatabaseAuthentication: Bool? = nil, publiclyAccessible: Bool? = nil, storageType: String? = nil, domain: String? = nil, processorFeatures: ProcessorFeatureList? = nil, tags: TagList? = nil, autoMinorVersionUpgrade: Bool? = nil, optionGroupName: String? = nil, useDefaultProcessorFeatures: Bool? = nil, availabilityZone: String? = nil) {
            self.port = port
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.multiAZ = multiAZ
            self.dBName = dBName
            self.dBSubnetGroupName = dBSubnetGroupName
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dBInstanceClass = dBInstanceClass
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.engine = engine
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.domainIAMRoleName = domainIAMRoleName
            self.tdeCredentialArn = tdeCredentialArn
            self.tdeCredentialPassword = tdeCredentialPassword
            self.licenseModel = licenseModel
            self.iops = iops
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.publiclyAccessible = publiclyAccessible
            self.storageType = storageType
            self.domain = domain
            self.processorFeatures = processorFeatures
            self.tags = tags
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.optionGroupName = optionGroupName
            self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case port = "Port"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case multiAZ = "MultiAZ"
            case dBName = "DBName"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dBInstanceClass = "DBInstanceClass"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case engine = "Engine"
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case domainIAMRoleName = "DomainIAMRoleName"
            case tdeCredentialArn = "TdeCredentialArn"
            case tdeCredentialPassword = "TdeCredentialPassword"
            case licenseModel = "LicenseModel"
            case iops = "Iops"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case publiclyAccessible = "PubliclyAccessible"
            case storageType = "StorageType"
            case domain = "Domain"
            case processorFeatures = "ProcessorFeatures"
            case tags = "Tags"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case optionGroupName = "OptionGroupName"
            case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
            case availabilityZone = "AvailabilityZone"
        }
    }

    public struct RestoreDBClusterFromS3Message: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "MasterUserPassword", required: true, type: .string), 
            AWSShapeMember(label: "S3IngestionRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "BacktrackWindow", required: false, type: .long), 
            AWSShapeMember(label: "S3Prefix", required: false, type: .string), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "SourceEngineVersion", required: true, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "S3BucketName", required: true, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "EnableCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "Engine", required: true, type: .string), 
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "PreferredBackupWindow", required: false, type: .string), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "CharacterSetName", required: false, type: .string), 
            AWSShapeMember(label: "SourceEngine", required: true, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .structure), 
            AWSShapeMember(label: "StorageEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "MasterUsername", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string)
        ]
        /// The name of the DB cluster parameter group to associate with the restored DB cluster. If this argument is omitted, default.aurora5.6 is used.  Constraints:   If supplied, must match the name of an existing DBClusterParameterGroup.  
        public let dBClusterParameterGroupName: String?
        /// The password for the master database user. This password can contain any printable ASCII character except "/", """, or "@". Constraints: Must contain from 8 to 41 characters.
        public let masterUserPassword: String
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that authorizes Amazon RDS to access the Amazon S3 bucket on your behalf.
        public let s3IngestionRoleArn: String
        /// The target backtrack window, in seconds. To disable backtracking, set this value to 0. Default: 0 Constraints:   If specified, this value must be set to a number from 0 to 259,200 (72 hours).  
        public let backtrackWindow: Int64?
        /// The prefix for all of the file names that contain the data used to create the Amazon Aurora DB cluster. If you do not specify a SourceS3Prefix value, then the Amazon Aurora DB cluster is created by using all of the files in the Amazon S3 bucket.
        public let s3Prefix: String?
        /// The number of days for which automated backups of the restored DB cluster are retained. You must specify a minimum value of 1. Default: 1 Constraints:   Must be a value from 1 to 35  
        public let backupRetentionPeriod: Int32?
        /// A DB subnet group to associate with the restored DB cluster. Constraints: If supplied, must match the name of an existing DBSubnetGroup.  Example: mySubnetgroup 
        public let dBSubnetGroupName: String?
        /// The version of the database that the backup files were created from. MySQL version 5.5 and 5.6 are supported.  Example: 5.6.22 
        public let sourceEngineVersion: String
        /// The AWS KMS key identifier for an encrypted DB cluster. The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB cluster with the same AWS account that owns the KMS encryption key used to encrypt the new DB cluster, then you can use the KMS key alias instead of the ARN for the KM encryption key. If the StorageEncrypted parameter is true, and you do not specify a value for the KmsKeyId parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region.
        public let kmsKeyId: String?
        /// The name of the Amazon S3 bucket that contains the data used to create the Amazon Aurora DB cluster.
        public let s3BucketName: String
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC). Format: ddd:hh24:mi-ddd:hh24:mi  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region, occurring on a random day of the week. To see the time blocks available, see  Adjusting the Preferred Maintenance Window in the Amazon RDS User Guide.  Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun. Constraints: Minimum 30-minute window.
        public let preferredMaintenanceWindow: String?
        /// The list of logs that the restored DB cluster is to export to CloudWatch Logs.
        public let enableCloudwatchLogsExports: [String]?
        /// The name of the database engine to be used for the restored DB cluster. Valid Values: aurora, aurora-postgresql 
        public let engine: String
        /// The name of the DB cluster to create from the source data in the Amazon S3 bucket. This parameter is isn't case-sensitive. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: my-cluster1 
        public let dBClusterIdentifier: String
        /// The daily time range during which automated backups are created if automated backups are enabled using the BackupRetentionPeriod parameter.  The default is a 30-minute window selected at random from an 8-hour block of time for each AWS Region. To see the time blocks available, see  Adjusting the Preferred Maintenance Window in the Amazon RDS User Guide.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.  
        public let preferredBackupWindow: String?
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false. Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// A value that indicates that the restored DB cluster should be associated with the specified CharacterSet.
        public let characterSetName: String?
        /// The identifier for the database engine that was backed up to create the files stored in the Amazon S3 bucket.  Valid values: mysql 
        public let sourceEngine: String
        /// A list of EC2 VPC security groups to associate with the restored DB cluster.
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// A list of EC2 Availability Zones that instances in the restored DB cluster can be created in.
        public let availabilityZones: AvailabilityZones?
        /// Specifies whether the restored DB cluster is encrypted.
        public let storageEncrypted: Bool?
        /// The name of the master user for the restored DB cluster. Constraints:   Must be 1 to 16 letters or numbers.   First character must be a letter.   Cannot be a reserved word for the chosen database engine.  
        public let masterUsername: String
        public let tags: TagList?
        /// The port number on which the instances in the restored DB cluster accept connections.  Default: 3306 
        public let port: Int32?
        /// A value that indicates that the restored DB cluster should be associated with the specified option group. Permanent options can't be removed from an option group. An option group can't be removed from a DB cluster once it is associated with a DB cluster.
        public let optionGroupName: String?
        /// The database name for the restored DB cluster.
        public let databaseName: String?
        /// The version number of the database engine to use.  Aurora MySQL  Example: 5.6.10a   Aurora PostgreSQL  Example: 9.6.3 
        public let engineVersion: String?

        public init(dBClusterParameterGroupName: String? = nil, masterUserPassword: String, s3IngestionRoleArn: String, backtrackWindow: Int64? = nil, s3Prefix: String? = nil, backupRetentionPeriod: Int32? = nil, dBSubnetGroupName: String? = nil, sourceEngineVersion: String, kmsKeyId: String? = nil, s3BucketName: String, preferredMaintenanceWindow: String? = nil, enableCloudwatchLogsExports: [String]? = nil, engine: String, dBClusterIdentifier: String, preferredBackupWindow: String? = nil, enableIAMDatabaseAuthentication: Bool? = nil, characterSetName: String? = nil, sourceEngine: String, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, availabilityZones: AvailabilityZones? = nil, storageEncrypted: Bool? = nil, masterUsername: String, tags: TagList? = nil, port: Int32? = nil, optionGroupName: String? = nil, databaseName: String? = nil, engineVersion: String? = nil) {
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.masterUserPassword = masterUserPassword
            self.s3IngestionRoleArn = s3IngestionRoleArn
            self.backtrackWindow = backtrackWindow
            self.s3Prefix = s3Prefix
            self.backupRetentionPeriod = backupRetentionPeriod
            self.dBSubnetGroupName = dBSubnetGroupName
            self.sourceEngineVersion = sourceEngineVersion
            self.kmsKeyId = kmsKeyId
            self.s3BucketName = s3BucketName
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.engine = engine
            self.dBClusterIdentifier = dBClusterIdentifier
            self.preferredBackupWindow = preferredBackupWindow
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.characterSetName = characterSetName
            self.sourceEngine = sourceEngine
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.availabilityZones = availabilityZones
            self.storageEncrypted = storageEncrypted
            self.masterUsername = masterUsername
            self.tags = tags
            self.port = port
            self.optionGroupName = optionGroupName
            self.databaseName = databaseName
            self.engineVersion = engineVersion
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case masterUserPassword = "MasterUserPassword"
            case s3IngestionRoleArn = "S3IngestionRoleArn"
            case backtrackWindow = "BacktrackWindow"
            case s3Prefix = "S3Prefix"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case sourceEngineVersion = "SourceEngineVersion"
            case kmsKeyId = "KmsKeyId"
            case s3BucketName = "S3BucketName"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case engine = "Engine"
            case dBClusterIdentifier = "DBClusterIdentifier"
            case preferredBackupWindow = "PreferredBackupWindow"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case characterSetName = "CharacterSetName"
            case sourceEngine = "SourceEngine"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case availabilityZones = "AvailabilityZones"
            case storageEncrypted = "StorageEncrypted"
            case masterUsername = "MasterUsername"
            case tags = "Tags"
            case port = "Port"
            case optionGroupName = "OptionGroupName"
            case databaseName = "DatabaseName"
            case engineVersion = "EngineVersion"
        }
    }

    public struct Timezone: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TimezoneName", required: false, type: .string)
        ]
        /// The name of the time zone.
        public let timezoneName: String?

        public init(timezoneName: String? = nil) {
            self.timezoneName = timezoneName
        }

        private enum CodingKeys: String, CodingKey {
            case timezoneName = "TimezoneName"
        }
    }

    public struct RemoveTagsFromResourceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagKeys", required: true, type: .list), 
            AWSShapeMember(label: "ResourceName", required: true, type: .string)
        ]
        /// The tag key (name) of the tag to be removed.
        public let tagKeys: [String]
        /// The Amazon RDS resource that the tags are removed from. This value is an Amazon Resource Name (ARN). For information about creating an ARN, see  Constructing an RDS Amazon Resource Name (ARN).
        public let resourceName: String

        public init(tagKeys: [String], resourceName: String) {
            self.tagKeys = tagKeys
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeys = "TagKeys"
            case resourceName = "ResourceName"
        }
    }

    public struct OptionSettingConfigurationList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionSetting", required: false, type: .list)
        ]
        public let optionSetting: [OptionSetting]?

        public init(optionSetting: [OptionSetting]? = nil) {
            self.optionSetting = optionSetting
        }

        private enum CodingKeys: String, CodingKey {
            case optionSetting = "OptionSetting"
        }
    }

    public struct PendingMaintenanceAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "AutoAppliedAfterDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "OptInStatus", required: false, type: .string), 
            AWSShapeMember(label: "CurrentApplyDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ForcedApplyDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Action", required: false, type: .string)
        ]
        /// A description providing more detail about the maintenance action.
        public let description: String?
        /// The date of the maintenance window when the action is applied. The maintenance action is applied to the resource during its first maintenance window after this date. If this date is specified, any next-maintenance opt-in requests are ignored.
        public let autoAppliedAfterDate: TimeStamp?
        /// Indicates the type of opt-in request that has been received for the resource.
        public let optInStatus: String?
        /// The effective date when the pending maintenance action is applied to the resource. This date takes into account opt-in requests received from the ApplyPendingMaintenanceAction API, the AutoAppliedAfterDate, and the ForcedApplyDate. This value is blank if an opt-in request has not been received and nothing has been specified as AutoAppliedAfterDate or ForcedApplyDate.
        public let currentApplyDate: TimeStamp?
        /// The date when the maintenance action is automatically applied. The maintenance action is applied to the resource on this date regardless of the maintenance window for the resource. If this date is specified, any immediate opt-in requests are ignored.
        public let forcedApplyDate: TimeStamp?
        /// The type of pending maintenance action that is available for the resource.
        public let action: String?

        public init(description: String? = nil, autoAppliedAfterDate: TimeStamp? = nil, optInStatus: String? = nil, currentApplyDate: TimeStamp? = nil, forcedApplyDate: TimeStamp? = nil, action: String? = nil) {
            self.description = description
            self.autoAppliedAfterDate = autoAppliedAfterDate
            self.optInStatus = optInStatus
            self.currentApplyDate = currentApplyDate
            self.forcedApplyDate = forcedApplyDate
            self.action = action
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case autoAppliedAfterDate = "AutoAppliedAfterDate"
            case optInStatus = "OptInStatus"
            case currentApplyDate = "CurrentApplyDate"
            case forcedApplyDate = "ForcedApplyDate"
            case action = "Action"
        }
    }

    public struct CreateDBSecurityGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSecurityGroupDescription", required: true, type: .string), 
            AWSShapeMember(label: "DBSecurityGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// The description for the DB security group.
        public let dBSecurityGroupDescription: String
        /// The name for the DB security group. This value is stored as a lowercase string. Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens   Must not be "Default"   Example: mysecuritygroup 
        public let dBSecurityGroupName: String
        public let tags: TagList?

        public init(dBSecurityGroupDescription: String, dBSecurityGroupName: String, tags: TagList? = nil) {
            self.dBSecurityGroupDescription = dBSecurityGroupDescription
            self.dBSecurityGroupName = dBSecurityGroupName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroupDescription = "DBSecurityGroupDescription"
            case dBSecurityGroupName = "DBSecurityGroupName"
            case tags = "Tags"
        }
    }

    public struct EventsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  A list of Event instances. 
        public let events: EventList?
        ///  An optional pagination token provided by a previous Events request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords . 
        public let marker: String?

        public init(events: EventList? = nil, marker: String? = nil) {
            self.events = events
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Events"
            case marker = "Marker"
        }
    }

    public struct IPRangeList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IPRange", required: false, type: .list)
        ]
        public let iPRange: [IPRange]?

        public init(iPRange: [IPRange]? = nil) {
            self.iPRange = iPRange
        }

        private enum CodingKeys: String, CodingKey {
            case iPRange = "IPRange"
        }
    }

    public struct DeleteDBClusterSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshot", required: false, type: .structure)
        ]
        public let dBClusterSnapshot: DBClusterSnapshot?

        public init(dBClusterSnapshot: DBClusterSnapshot? = nil) {
            self.dBClusterSnapshot = dBClusterSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshot = "DBClusterSnapshot"
        }
    }

    public struct RecurringCharge: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecurringChargeFrequency", required: false, type: .string), 
            AWSShapeMember(label: "RecurringChargeAmount", required: false, type: .double)
        ]
        /// The frequency of the recurring charge.
        public let recurringChargeFrequency: String?
        /// The amount of the recurring charge.
        public let recurringChargeAmount: Double?

        public init(recurringChargeFrequency: String? = nil, recurringChargeAmount: Double? = nil) {
            self.recurringChargeFrequency = recurringChargeFrequency
            self.recurringChargeAmount = recurringChargeAmount
        }

        private enum CodingKeys: String, CodingKey {
            case recurringChargeFrequency = "RecurringChargeFrequency"
            case recurringChargeAmount = "RecurringChargeAmount"
        }
    }

    public struct OptionGroupMembership: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string)
        ]
        /// The name of the option group that the instance belongs to.
        public let optionGroupName: String?
        /// The status of the DB instance's option group membership. Valid values are: in-sync, pending-apply, pending-removal, pending-maintenance-apply, pending-maintenance-removal, applying, removing, and failed. 
        public let status: String?

        public init(optionGroupName: String? = nil, status: String? = nil) {
            self.optionGroupName = optionGroupName
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroupName = "OptionGroupName"
            case status = "Status"
        }
    }

    public struct OptionSettingsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionSetting", required: false, type: .list)
        ]
        public let optionSetting: [OptionSetting]?

        public init(optionSetting: [OptionSetting]? = nil) {
            self.optionSetting = optionSetting
        }

        private enum CodingKeys: String, CodingKey {
            case optionSetting = "OptionSetting"
        }
    }

    public struct DescribeDBSnapshotAttributesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotAttributesResult", required: false, type: .structure)
        ]
        public let dBSnapshotAttributesResult: DBSnapshotAttributesResult?

        public init(dBSnapshotAttributesResult: DBSnapshotAttributesResult? = nil) {
            self.dBSnapshotAttributesResult = dBSnapshotAttributesResult
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotAttributesResult = "DBSnapshotAttributesResult"
        }
    }

    public struct CreateDBClusterParameterGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterParameterGroup", required: false, type: .structure)
        ]
        public let dBClusterParameterGroup: DBClusterParameterGroup?

        public init(dBClusterParameterGroup: DBClusterParameterGroup? = nil) {
            self.dBClusterParameterGroup = dBClusterParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroup = "DBClusterParameterGroup"
        }
    }

    public struct OptionsConflictsWith: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionConflictName", required: false, type: .list)
        ]
        public let optionConflictName: [String]?

        public init(optionConflictName: [String]? = nil) {
            self.optionConflictName = optionConflictName
        }

        private enum CodingKeys: String, CodingKey {
            case optionConflictName = "OptionConflictName"
        }
    }

    public struct CopyDBSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetDBSnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "CopyTags", required: false, type: .boolean), 
            AWSShapeMember(label: "SourceDBSnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string), 
            AWSShapeMember(label: "PreSignedUrl", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure)
        ]
        /// The identifier for the copy of the snapshot.  Constraints:   Cannot be null, empty, or blank   Must contain from 1 to 255 letters, numbers, or hyphens   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens   Example: my-db-snapshot 
        public let targetDBSnapshotIdentifier: String
        /// True to copy all tags from the source DB snapshot to the target DB snapshot, and otherwise false. The default is false.
        public let copyTags: Bool?
        /// The identifier for the source DB snapshot. If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier. For example, you might specify rds:mysql-instance1-snapshot-20130805.  If the source snapshot is in a different AWS Region than the copy, specify a valid DB snapshot ARN. For example, you might specify arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805.  If you are copying from a shared manual DB snapshot, this parameter must be the Amazon Resource Name (ARN) of the shared DB snapshot.  If you are copying an encrypted snapshot this parameter must be in the ARN format for the source AWS Region, and must match the SourceDBSnapshotIdentifier in the PreSignedUrl parameter.  Constraints:   Must specify a valid system snapshot in the "available" state.   Example: rds:mydb-2012-04-02-00-01  Example: arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20130805 
        public let sourceDBSnapshotIdentifier: String
        /// The AWS KMS key ID for an encrypted DB snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.  If you copy an encrypted DB snapshot from your AWS account, you can specify a value for this parameter to encrypt the copy with a new KMS encryption key. If you don't specify a value for this parameter, then the copy of the DB snapshot is encrypted with the same KMS key as the source DB snapshot.  If you copy an encrypted DB snapshot that is shared from another AWS account, then you must specify a value for this parameter.  If you specify this parameter when you copy an unencrypted snapshot, the copy is encrypted.  If you copy an encrypted snapshot to a different AWS Region, then you must specify a KMS key for the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. 
        public let kmsKeyId: String?
        /// The name of an option group to associate with the copy of the snapshot. Specify this option if you are copying a snapshot from one AWS Region to another, and your DB instance uses a nondefault option group. If your source DB instance uses Transparent Data Encryption for Oracle or Microsoft SQL Server, you must specify this option when copying across AWS Regions. For more information, see Option Group Considerations. 
        public let optionGroupName: String?
        /// The URL that contains a Signature Version 4 signed request for the CopyDBSnapshot API action in the source AWS Region that contains the source DB snapshot to copy.  You must specify this parameter when you copy an encrypted DB snapshot from another AWS Region by using the Amazon RDS API. You can specify the --source-region option instead of this parameter when you copy an encrypted DB snapshot from another AWS Region by using the AWS CLI.  The presigned URL must be a valid request for the CopyDBSnapshot API action that can be executed in the source AWS Region that contains the encrypted DB snapshot to be copied. The presigned URL request must contain the following parameter values:     DestinationRegion - The AWS Region that the encrypted DB snapshot is copied to. This AWS Region is the same one where the CopyDBSnapshot action is called that contains this presigned URL.  For example, if you copy an encrypted DB snapshot from the us-west-2 AWS Region to the us-east-1 AWS Region, then you call the CopyDBSnapshot action in the us-east-1 AWS Region and provide a presigned URL that contains a call to the CopyDBSnapshot action in the us-west-2 AWS Region. For this example, the DestinationRegion in the presigned URL must be set to the us-east-1 AWS Region.     KmsKeyId - The AWS KMS key identifier for the key to use to encrypt the copy of the DB snapshot in the destination AWS Region. This is the same identifier for both the CopyDBSnapshot action that is called in the destination AWS Region, and the action contained in the presigned URL.     SourceDBSnapshotIdentifier - The DB snapshot identifier for the encrypted snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB snapshot from the us-west-2 AWS Region, then your SourceDBSnapshotIdentifier looks like the following example: arn:aws:rds:us-west-2:123456789012:snapshot:mysql-instance1-snapshot-20161115.    To learn how to generate a Signature Version 4 signed request, see Authenticating Requests: Using Query Parameters (AWS Signature Version 4) and Signature Version 4 Signing Process. 
        public let preSignedUrl: String?
        public let tags: TagList?

        public init(targetDBSnapshotIdentifier: String, copyTags: Bool? = nil, sourceDBSnapshotIdentifier: String, kmsKeyId: String? = nil, optionGroupName: String? = nil, preSignedUrl: String? = nil, tags: TagList? = nil) {
            self.targetDBSnapshotIdentifier = targetDBSnapshotIdentifier
            self.copyTags = copyTags
            self.sourceDBSnapshotIdentifier = sourceDBSnapshotIdentifier
            self.kmsKeyId = kmsKeyId
            self.optionGroupName = optionGroupName
            self.preSignedUrl = preSignedUrl
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case targetDBSnapshotIdentifier = "TargetDBSnapshotIdentifier"
            case copyTags = "CopyTags"
            case sourceDBSnapshotIdentifier = "SourceDBSnapshotIdentifier"
            case kmsKeyId = "KmsKeyId"
            case optionGroupName = "OptionGroupName"
            case preSignedUrl = "PreSignedUrl"
            case tags = "Tags"
        }
    }

    public struct ReservedDBInstanceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedDBInstances", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A list of reserved DB instances.
        public let reservedDBInstances: ReservedDBInstanceList?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(reservedDBInstances: ReservedDBInstanceList? = nil, marker: String? = nil) {
            self.reservedDBInstances = reservedDBInstances
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case reservedDBInstances = "ReservedDBInstances"
            case marker = "Marker"
        }
    }

    public struct RestoreDBInstanceFromS3Message: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MasterUserPassword", required: false, type: .string), 
            AWSShapeMember(label: "MonitoringRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "S3IngestionRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "PerformanceInsightsKMSKeyId", required: false, type: .string), 
            AWSShapeMember(label: "S3Prefix", required: false, type: .string), 
            AWSShapeMember(label: "DBName", required: false, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "UseDefaultProcessorFeatures", required: false, type: .boolean), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "SourceEngineVersion", required: true, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "S3BucketName", required: true, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "DBInstanceClass", required: true, type: .string), 
            AWSShapeMember(label: "EnableCloudwatchLogsExports", required: false, type: .list), 
            AWSShapeMember(label: "Engine", required: true, type: .string), 
            AWSShapeMember(label: "DBSecurityGroups", required: false, type: .structure), 
            AWSShapeMember(label: "PerformanceInsightsRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "PreferredBackupWindow", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "EnableIAMDatabaseAuthentication", required: false, type: .boolean), 
            AWSShapeMember(label: "SourceEngine", required: true, type: .string), 
            AWSShapeMember(label: "VpcSecurityGroupIds", required: false, type: .structure), 
            AWSShapeMember(label: "PubliclyAccessible", required: false, type: .boolean), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "StorageEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "MasterUsername", required: false, type: .string), 
            AWSShapeMember(label: "ProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "EnablePerformanceInsights", required: false, type: .boolean), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "CopyTagsToSnapshot", required: false, type: .boolean), 
            AWSShapeMember(label: "AutoMinorVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "MonitoringInterval", required: false, type: .integer), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string)
        ]
        /// The password for the master user. The password can include any printable ASCII character except "/", """, or "@".  Constraints: Must contain from 8 to 41 characters.
        public let masterUserPassword: String?
        /// The ARN for the IAM role that permits RDS to send enhanced monitoring metrics to Amazon CloudWatch Logs. For example, arn:aws:iam:123456789012:role/emaccess. For information on creating a monitoring role, see Setting Up and Enabling Enhanced Monitoring.  If MonitoringInterval is set to a value other than 0, then you must supply a MonitoringRoleArn value. 
        public let monitoringRoleArn: String?
        /// Specifies whether the DB instance is a Multi-AZ deployment. If MultiAZ is set to true, you can't set the AvailabilityZone parameter. 
        public let multiAZ: Bool?
        /// An AWS Identity and Access Management (IAM) role to allow Amazon RDS to access your Amazon S3 bucket. 
        public let s3IngestionRoleArn: String
        /// The AWS KMS key identifier for encryption of Performance Insights data. The KMS key ID is the Amazon Resource Name (ARN), the KMS key identifier, or the KMS key alias for the KMS encryption key. 
        public let performanceInsightsKMSKeyId: String?
        /// The prefix of your Amazon S3 bucket. 
        public let s3Prefix: String?
        /// The name of the database to create when the DB instance is created. Follow the naming rules specified in CreateDBInstance. 
        public let dBName: String?
        /// The Availability Zone that the DB instance is created in. For information about AWS Regions and Availability Zones, see Regions and Availability Zones.  Default: A random, system-chosen Availability Zone in the endpoint's AWS Region.   Example: us-east-1d  Constraint: The AvailabilityZone parameter can't be specified if the MultiAZ parameter is set to true. The specified Availability Zone must be in the same AWS Region as the current endpoint. 
        public let availabilityZone: String?
        /// A value that specifies that the DB instance class of the DB instance uses its default processor features.
        public let useDefaultProcessorFeatures: Bool?
        /// The number of days for which automated backups are retained. Setting this parameter to a positive number enables backups. For more information, see CreateDBInstance. 
        public let backupRetentionPeriod: Int32?
        /// A DB subnet group to associate with this DB instance.
        public let dBSubnetGroupName: String?
        /// The port number on which the database accepts connections.  Type: Integer  Valid Values: 1150-65535  Default: 3306 
        public let port: Int32?
        /// The version number of the database engine to use. Choose the latest minor version of your database engine. For information about engine versions, see CreateDBInstance, or call DescribeDBEngineVersions. 
        public let engineVersion: String?
        /// The engine version of your source database.  Valid Values: 5.6 
        public let sourceEngineVersion: String
        /// The AWS KMS key identifier for an encrypted DB instance.  The KMS key identifier is the Amazon Resource Name (ARN) for the KMS encryption key. If you are creating a DB instance with the same AWS account that owns the KMS encryption key used to encrypt the new DB instance, then you can use the KMS key alias instead of the ARN for the KM encryption key.  If the StorageEncrypted parameter is true, and you do not specify a value for the KmsKeyId parameter, then Amazon RDS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS Region. 
        public let kmsKeyId: String?
        /// The name of your Amazon S3 bucket that contains your database backup file. 
        public let s3BucketName: String
        /// The time range each week during which system maintenance can occur, in Universal Coordinated Time (UTC). For more information, see Amazon RDS Maintenance Window.  Constraints:   Must be in the format ddd:hh24:mi-ddd:hh24:mi.   Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred backup window.   Must be at least 30 minutes.  
        public let preferredMaintenanceWindow: String?
        /// The DB instance identifier. This parameter is stored as a lowercase string.  Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: mydbinstance 
        public let dBInstanceIdentifier: String
        /// The compute and memory capacity of the DB instance, for example, db.m4.large. Not all DB instance classes are available in all AWS Regions, or for all database engines. For the full list of DB instance classes, and availability for your engine, see DB Instance Class in the Amazon RDS User Guide.  Importing from Amazon S3 is not supported on the db.t2.micro DB instance class. 
        public let dBInstanceClass: String
        /// The list of logs that the restored DB instance is to export to CloudWatch Logs.
        public let enableCloudwatchLogsExports: [String]?
        /// The name of the database engine to be used for this instance.  Valid Values: mysql 
        public let engine: String
        /// A list of DB security groups to associate with this DB instance. Default: The default DB security group for the database engine.
        public let dBSecurityGroups: DBSecurityGroupNameList?
        /// The amount of time, in days, to retain Performance Insights data. Valid values are 7 or 731 (2 years). 
        public let performanceInsightsRetentionPeriod: Int32?
        /// The license model for this DB instance. Use general-public-license. 
        public let licenseModel: String?
        /// The amount of Provisioned IOPS (input/output operations per second) to allocate initially for the DB instance. For information about valid Iops values, see see Amazon RDS Provisioned IOPS Storage to Improve Performance. 
        public let iops: Int32?
        /// The time range each day during which automated backups are created if automated backups are enabled. For more information, see The Backup Window.  Constraints:   Must be in the format hh24:mi-hh24:mi.   Must be in Universal Coordinated Time (UTC).   Must not conflict with the preferred maintenance window.   Must be at least 30 minutes.  
        public let preferredBackupWindow: String?
        /// The name of the DB parameter group to associate with this DB instance. If this argument is omitted, the default parameter group for the specified engine is used. 
        public let dBParameterGroupName: String?
        /// True to enable mapping of AWS Identity and Access Management (IAM) accounts to database accounts, and otherwise false.  Default: false 
        public let enableIAMDatabaseAuthentication: Bool?
        /// The name of the engine of your source database.  Valid Values: mysql 
        public let sourceEngine: String
        /// A list of VPC security groups to associate with this DB instance. 
        public let vpcSecurityGroupIds: VpcSecurityGroupIdList?
        /// Specifies whether the DB instance is publicly accessible or not. For more information, see CreateDBInstance. 
        public let publiclyAccessible: Bool?
        /// Specifies the storage type to be associated with the DB instance.  Valid values: standard | gp2 | io1  If you specify io1, you must also include a value for the Iops parameter.  Default: io1 if the Iops parameter is specified; otherwise standard 
        public let storageType: String?
        /// The amount of storage (in gigabytes) to allocate initially for the DB instance. Follow the allocation rules specified in CreateDBInstance.   Be sure to allocate enough memory for your new DB instance so that the restore operation can succeed. You can also allocate additional memory for future growth.  
        public let allocatedStorage: Int32?
        /// Specifies whether the new DB instance is encrypted or not. 
        public let storageEncrypted: Bool?
        /// The name for the master user.  Constraints:    Must be 1 to 16 letters or numbers.   First character must be a letter.   Cannot be a reserved word for the chosen database engine.  
        public let masterUsername: String?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        public let processorFeatures: ProcessorFeatureList?
        /// True to enable Performance Insights for the DB instance, and otherwise false.  For more information, see Using Amazon Performance Insights in the Amazon Relational Database Service User Guide. 
        public let enablePerformanceInsights: Bool?
        /// A list of tags to associate with this DB instance. For more information, see Tagging Amazon RDS Resources. 
        public let tags: TagList?
        /// True to copy all tags from the DB instance to snapshots of the DB instance, and otherwise false.  Default: false. 
        public let copyTagsToSnapshot: Bool?
        /// True to indicate that minor engine upgrades are applied automatically to the DB instance during the maintenance window, and otherwise false.  Default: true 
        public let autoMinorVersionUpgrade: Bool?
        /// The interval, in seconds, between points when Enhanced Monitoring metrics are collected for the DB instance. To disable collecting Enhanced Monitoring metrics, specify 0.  If MonitoringRoleArn is specified, then you must also set MonitoringInterval to a value other than 0.  Valid Values: 0, 1, 5, 10, 15, 30, 60  Default: 0 
        public let monitoringInterval: Int32?
        /// The name of the option group to associate with this DB instance. If this argument is omitted, the default option group for the specified engine is used. 
        public let optionGroupName: String?

        public init(masterUserPassword: String? = nil, monitoringRoleArn: String? = nil, multiAZ: Bool? = nil, s3IngestionRoleArn: String, performanceInsightsKMSKeyId: String? = nil, s3Prefix: String? = nil, dBName: String? = nil, availabilityZone: String? = nil, useDefaultProcessorFeatures: Bool? = nil, backupRetentionPeriod: Int32? = nil, dBSubnetGroupName: String? = nil, port: Int32? = nil, engineVersion: String? = nil, sourceEngineVersion: String, kmsKeyId: String? = nil, s3BucketName: String, preferredMaintenanceWindow: String? = nil, dBInstanceIdentifier: String, dBInstanceClass: String, enableCloudwatchLogsExports: [String]? = nil, engine: String, dBSecurityGroups: DBSecurityGroupNameList? = nil, performanceInsightsRetentionPeriod: Int32? = nil, licenseModel: String? = nil, iops: Int32? = nil, preferredBackupWindow: String? = nil, dBParameterGroupName: String? = nil, enableIAMDatabaseAuthentication: Bool? = nil, sourceEngine: String, vpcSecurityGroupIds: VpcSecurityGroupIdList? = nil, publiclyAccessible: Bool? = nil, storageType: String? = nil, allocatedStorage: Int32? = nil, storageEncrypted: Bool? = nil, masterUsername: String? = nil, processorFeatures: ProcessorFeatureList? = nil, enablePerformanceInsights: Bool? = nil, tags: TagList? = nil, copyTagsToSnapshot: Bool? = nil, autoMinorVersionUpgrade: Bool? = nil, monitoringInterval: Int32? = nil, optionGroupName: String? = nil) {
            self.masterUserPassword = masterUserPassword
            self.monitoringRoleArn = monitoringRoleArn
            self.multiAZ = multiAZ
            self.s3IngestionRoleArn = s3IngestionRoleArn
            self.performanceInsightsKMSKeyId = performanceInsightsKMSKeyId
            self.s3Prefix = s3Prefix
            self.dBName = dBName
            self.availabilityZone = availabilityZone
            self.useDefaultProcessorFeatures = useDefaultProcessorFeatures
            self.backupRetentionPeriod = backupRetentionPeriod
            self.dBSubnetGroupName = dBSubnetGroupName
            self.port = port
            self.engineVersion = engineVersion
            self.sourceEngineVersion = sourceEngineVersion
            self.kmsKeyId = kmsKeyId
            self.s3BucketName = s3BucketName
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dBInstanceClass = dBInstanceClass
            self.enableCloudwatchLogsExports = enableCloudwatchLogsExports
            self.engine = engine
            self.dBSecurityGroups = dBSecurityGroups
            self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
            self.licenseModel = licenseModel
            self.iops = iops
            self.preferredBackupWindow = preferredBackupWindow
            self.dBParameterGroupName = dBParameterGroupName
            self.enableIAMDatabaseAuthentication = enableIAMDatabaseAuthentication
            self.sourceEngine = sourceEngine
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.publiclyAccessible = publiclyAccessible
            self.storageType = storageType
            self.allocatedStorage = allocatedStorage
            self.storageEncrypted = storageEncrypted
            self.masterUsername = masterUsername
            self.processorFeatures = processorFeatures
            self.enablePerformanceInsights = enablePerformanceInsights
            self.tags = tags
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.monitoringInterval = monitoringInterval
            self.optionGroupName = optionGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case masterUserPassword = "MasterUserPassword"
            case monitoringRoleArn = "MonitoringRoleArn"
            case multiAZ = "MultiAZ"
            case s3IngestionRoleArn = "S3IngestionRoleArn"
            case performanceInsightsKMSKeyId = "PerformanceInsightsKMSKeyId"
            case s3Prefix = "S3Prefix"
            case dBName = "DBName"
            case availabilityZone = "AvailabilityZone"
            case useDefaultProcessorFeatures = "UseDefaultProcessorFeatures"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case port = "Port"
            case engineVersion = "EngineVersion"
            case sourceEngineVersion = "SourceEngineVersion"
            case kmsKeyId = "KmsKeyId"
            case s3BucketName = "S3BucketName"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case dBInstanceClass = "DBInstanceClass"
            case enableCloudwatchLogsExports = "EnableCloudwatchLogsExports"
            case engine = "Engine"
            case dBSecurityGroups = "DBSecurityGroups"
            case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
            case licenseModel = "LicenseModel"
            case iops = "Iops"
            case preferredBackupWindow = "PreferredBackupWindow"
            case dBParameterGroupName = "DBParameterGroupName"
            case enableIAMDatabaseAuthentication = "EnableIAMDatabaseAuthentication"
            case sourceEngine = "SourceEngine"
            case vpcSecurityGroupIds = "VpcSecurityGroupIds"
            case publiclyAccessible = "PubliclyAccessible"
            case storageType = "StorageType"
            case allocatedStorage = "AllocatedStorage"
            case storageEncrypted = "StorageEncrypted"
            case masterUsername = "MasterUsername"
            case processorFeatures = "ProcessorFeatures"
            case enablePerformanceInsights = "EnablePerformanceInsights"
            case tags = "Tags"
            case copyTagsToSnapshot = "CopyTagsToSnapshot"
            case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
            case monitoringInterval = "MonitoringInterval"
            case optionGroupName = "OptionGroupName"
        }
    }

    public struct CloudwatchLogsExportConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisableLogTypes", required: false, type: .list), 
            AWSShapeMember(label: "EnableLogTypes", required: false, type: .list)
        ]
        /// The list of log types to disable.
        public let disableLogTypes: [String]?
        /// The list of log types to enable.
        public let enableLogTypes: [String]?

        public init(disableLogTypes: [String]? = nil, enableLogTypes: [String]? = nil) {
            self.disableLogTypes = disableLogTypes
            self.enableLogTypes = enableLogTypes
        }

        private enum CodingKeys: String, CodingKey {
            case disableLogTypes = "DisableLogTypes"
            case enableLogTypes = "EnableLogTypes"
        }
    }

    public struct DBParameterGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroups", required: false, type: .structure)
        ]
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        ///  A list of DBParameterGroup instances. 
        public let dBParameterGroups: DBParameterGroupList?

        public init(marker: String? = nil, dBParameterGroups: DBParameterGroupList? = nil) {
            self.marker = marker
            self.dBParameterGroups = dBParameterGroups
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case dBParameterGroups = "DBParameterGroups"
        }
    }

    public struct CopyOptionGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetOptionGroupIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "SourceOptionGroupIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "TargetOptionGroupDescription", required: true, type: .string)
        ]
        /// The identifier for the copied option group. Constraints:   Cannot be null, empty, or blank   Must contain from 1 to 255 letters, numbers, or hyphens   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens   Example: my-option-group 
        public let targetOptionGroupIdentifier: String
        public let tags: TagList?
        /// The identifier or ARN for the source option group. For information about creating an ARN, see  Constructing an RDS Amazon Resource Name (ARN).  Constraints:   Must specify a valid option group.   If the source option group is in the same AWS Region as the copy, specify a valid option group identifier, for example my-option-group, or a valid ARN.   If the source option group is in a different AWS Region than the copy, specify a valid option group ARN, for example arn:aws:rds:us-west-2:123456789012:og:special-options.  
        public let sourceOptionGroupIdentifier: String
        /// The description for the copied option group.
        public let targetOptionGroupDescription: String

        public init(targetOptionGroupIdentifier: String, tags: TagList? = nil, sourceOptionGroupIdentifier: String, targetOptionGroupDescription: String) {
            self.targetOptionGroupIdentifier = targetOptionGroupIdentifier
            self.tags = tags
            self.sourceOptionGroupIdentifier = sourceOptionGroupIdentifier
            self.targetOptionGroupDescription = targetOptionGroupDescription
        }

        private enum CodingKeys: String, CodingKey {
            case targetOptionGroupIdentifier = "TargetOptionGroupIdentifier"
            case tags = "Tags"
            case sourceOptionGroupIdentifier = "SourceOptionGroupIdentifier"
            case targetOptionGroupDescription = "TargetOptionGroupDescription"
        }
    }

    public struct ModifyDBSubnetGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSubnetGroupDescription", required: false, type: .string), 
            AWSShapeMember(label: "SubnetIds", required: true, type: .structure), 
            AWSShapeMember(label: "DBSubnetGroupName", required: true, type: .string)
        ]
        /// The description for the DB subnet group.
        public let dBSubnetGroupDescription: String?
        /// The EC2 subnet IDs for the DB subnet group.
        public let subnetIds: SubnetIdentifierList
        /// The name for the DB subnet group. This value is stored as a lowercase string. You can't modify the default subnet group.  Constraints: Must match the name of an existing DBSubnetGroup. Must not be default. Example: mySubnetgroup 
        public let dBSubnetGroupName: String

        public init(dBSubnetGroupDescription: String? = nil, subnetIds: SubnetIdentifierList, dBSubnetGroupName: String) {
            self.dBSubnetGroupDescription = dBSubnetGroupDescription
            self.subnetIds = subnetIds
            self.dBSubnetGroupName = dBSubnetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroupDescription = "DBSubnetGroupDescription"
            case subnetIds = "SubnetIds"
            case dBSubnetGroupName = "DBSubnetGroupName"
        }
    }

    public struct DBSubnetGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSubnetGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "DBSubnetGroupDescription", required: false, type: .string), 
            AWSShapeMember(label: "SubnetGroupStatus", required: false, type: .string), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Subnets", required: false, type: .structure)
        ]
        /// The Amazon Resource Name (ARN) for the DB subnet group.
        public let dBSubnetGroupArn: String?
        /// Provides the VpcId of the DB subnet group.
        public let vpcId: String?
        /// Provides the description of the DB subnet group.
        public let dBSubnetGroupDescription: String?
        /// Provides the status of the DB subnet group.
        public let subnetGroupStatus: String?
        /// The name of the DB subnet group.
        public let dBSubnetGroupName: String?
        ///  Contains a list of Subnet elements. 
        public let subnets: SubnetList?

        public init(dBSubnetGroupArn: String? = nil, vpcId: String? = nil, dBSubnetGroupDescription: String? = nil, subnetGroupStatus: String? = nil, dBSubnetGroupName: String? = nil, subnets: SubnetList? = nil) {
            self.dBSubnetGroupArn = dBSubnetGroupArn
            self.vpcId = vpcId
            self.dBSubnetGroupDescription = dBSubnetGroupDescription
            self.subnetGroupStatus = subnetGroupStatus
            self.dBSubnetGroupName = dBSubnetGroupName
            self.subnets = subnets
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroupArn = "DBSubnetGroupArn"
            case vpcId = "VpcId"
            case dBSubnetGroupDescription = "DBSubnetGroupDescription"
            case subnetGroupStatus = "SubnetGroupStatus"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case subnets = "Subnets"
        }
    }

    public struct UpgradeTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "IsMajorVersionUpgrade", required: false, type: .boolean)
        ]
        /// A value that indicates whether the target version is applied to any source DB instances that have AutoMinorVersionUpgrade set to true.
        public let autoUpgrade: Bool?
        /// The version number of the upgrade target database engine.
        public let engineVersion: String?
        /// The name of the upgrade target database engine.
        public let engine: String?
        /// The version of the database engine that a DB instance can be upgraded to.
        public let description: String?
        /// A value that indicates whether a database engine is upgraded to a major version.
        public let isMajorVersionUpgrade: Bool?

        public init(autoUpgrade: Bool? = nil, engineVersion: String? = nil, engine: String? = nil, description: String? = nil, isMajorVersionUpgrade: Bool? = nil) {
            self.autoUpgrade = autoUpgrade
            self.engineVersion = engineVersion
            self.engine = engine
            self.description = description
            self.isMajorVersionUpgrade = isMajorVersionUpgrade
        }

        private enum CodingKeys: String, CodingKey {
            case autoUpgrade = "AutoUpgrade"
            case engineVersion = "EngineVersion"
            case engine = "Engine"
            case description = "Description"
            case isMajorVersionUpgrade = "IsMajorVersionUpgrade"
        }
    }

    public struct CopyDBClusterSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetDBClusterSnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "CopyTags", required: false, type: .boolean), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "SourceDBClusterSnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "PreSignedUrl", required: false, type: .string)
        ]
        /// The identifier of the new DB cluster snapshot to create from the source DB cluster snapshot. This parameter is not case-sensitive. Constraints:   Must contain from 1 to 63 letters, numbers, or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: my-cluster-snapshot2 
        public let targetDBClusterSnapshotIdentifier: String
        /// True to copy all tags from the source DB cluster snapshot to the target DB cluster snapshot, and otherwise false. The default is false.
        public let copyTags: Bool?
        public let tags: TagList?
        /// The identifier of the DB cluster snapshot to copy. This parameter is not case-sensitive. You can't copy an encrypted, shared DB cluster snapshot from one AWS Region to another. Constraints:   Must specify a valid system snapshot in the "available" state.   If the source snapshot is in the same AWS Region as the copy, specify a valid DB snapshot identifier.   If the source snapshot is in a different AWS Region than the copy, specify a valid DB cluster snapshot ARN. For more information, go to  Copying a DB Snapshot or DB Cluster Snapshot.   Example: my-cluster-snapshot1 
        public let sourceDBClusterSnapshotIdentifier: String
        /// The AWS AWS KMS key ID for an encrypted DB cluster snapshot. The KMS key ID is the Amazon Resource Name (ARN), KMS key identifier, or the KMS key alias for the KMS encryption key.  If you copy an encrypted DB cluster snapshot from your AWS account, you can specify a value for KmsKeyId to encrypt the copy with a new KMS encryption key. If you don't specify a value for KmsKeyId, then the copy of the DB cluster snapshot is encrypted with the same KMS key as the source DB cluster snapshot.  If you copy an encrypted DB cluster snapshot that is shared from another AWS account, then you must specify a value for KmsKeyId.  To copy an encrypted DB cluster snapshot to another AWS Region, you must set KmsKeyId to the KMS key ID you want to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. KMS encryption keys are specific to the AWS Region that they are created in, and you can't use encryption keys from one AWS Region in another AWS Region. If you copy an unencrypted DB cluster snapshot and specify a value for the KmsKeyId parameter, an error is returned.
        public let kmsKeyId: String?
        /// The URL that contains a Signature Version 4 signed request for the CopyDBClusterSnapshot API action in the AWS Region that contains the source DB cluster snapshot to copy. The PreSignedUrl parameter must be used when copying an encrypted DB cluster snapshot from another AWS Region. The pre-signed URL must be a valid request for the CopyDBSClusterSnapshot API action that can be executed in the source AWS Region that contains the encrypted DB cluster snapshot to be copied. The pre-signed URL request must contain the following parameter values:    KmsKeyId - The AWS KMS key identifier for the key to use to encrypt the copy of the DB cluster snapshot in the destination AWS Region. This is the same identifier for both the CopyDBClusterSnapshot action that is called in the destination AWS Region, and the action contained in the pre-signed URL.    DestinationRegion - The name of the AWS Region that the DB cluster snapshot will be created in.    SourceDBClusterSnapshotIdentifier - The DB cluster snapshot identifier for the encrypted DB cluster snapshot to be copied. This identifier must be in the Amazon Resource Name (ARN) format for the source AWS Region. For example, if you are copying an encrypted DB cluster snapshot from the us-west-2 AWS Region, then your SourceDBClusterSnapshotIdentifier looks like the following example: arn:aws:rds:us-west-2:123456789012:cluster-snapshot:aurora-cluster1-snapshot-20161115.   To learn how to generate a Signature Version 4 signed request, see  Authenticating Requests: Using Query Parameters (AWS Signature Version 4) and  Signature Version 4 Signing Process.
        public let preSignedUrl: String?

        public init(targetDBClusterSnapshotIdentifier: String, copyTags: Bool? = nil, tags: TagList? = nil, sourceDBClusterSnapshotIdentifier: String, kmsKeyId: String? = nil, preSignedUrl: String? = nil) {
            self.targetDBClusterSnapshotIdentifier = targetDBClusterSnapshotIdentifier
            self.copyTags = copyTags
            self.tags = tags
            self.sourceDBClusterSnapshotIdentifier = sourceDBClusterSnapshotIdentifier
            self.kmsKeyId = kmsKeyId
            self.preSignedUrl = preSignedUrl
        }

        private enum CodingKeys: String, CodingKey {
            case targetDBClusterSnapshotIdentifier = "TargetDBClusterSnapshotIdentifier"
            case copyTags = "CopyTags"
            case tags = "Tags"
            case sourceDBClusterSnapshotIdentifier = "SourceDBClusterSnapshotIdentifier"
            case kmsKeyId = "KmsKeyId"
            case preSignedUrl = "PreSignedUrl"
        }
    }

    public struct DescribeCertificatesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "CertificateIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        /// The user-supplied certificate identifier. If this parameter is specified, information for only the identified certificate is returned. This parameter isn't case-sensitive. Constraints:   Must match an existing CertificateIdentifier.  
        public let certificateIdentifier: String?
        ///  An optional pagination token provided by a previous DescribeCertificates request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(maxRecords: Int32? = nil, filters: FilterList? = nil, certificateIdentifier: String? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.certificateIdentifier = certificateIdentifier
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case certificateIdentifier = "CertificateIdentifier"
            case marker = "Marker"
        }
    }

    public struct CreateDBInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct DBClusterParameterGroupDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Provides a list of parameters for the DB cluster parameter group.
        public let parameters: ParametersList?
        ///  An optional pagination token provided by a previous DescribeDBClusterParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords . 
        public let marker: String?

        public init(parameters: ParametersList? = nil, marker: String? = nil) {
            self.parameters = parameters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case marker = "Marker"
        }
    }

    public struct RebootDBInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct DescribeDBEngineVersionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroupFamily", required: false, type: .string), 
            AWSShapeMember(label: "ListSupportedTimezones", required: false, type: .boolean), 
            AWSShapeMember(label: "DefaultOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "ListSupportedCharacterSets", required: false, type: .boolean), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// The database engine to return.
        public let engine: String?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The name of a specific DB parameter group family to return details for. Constraints:   If supplied, must match an existing DBParameterGroupFamily.  
        public let dBParameterGroupFamily: String?
        /// If this parameter is specified and the requested engine supports the TimeZone parameter for CreateDBInstance, the response includes a list of supported time zones for each engine version. 
        public let listSupportedTimezones: Bool?
        /// Indicates that only the default version of the specified engine or engine and major version combination is returned.
        public let defaultOnly: Bool?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        /// If this parameter is specified and the requested engine supports the CharacterSetName parameter for CreateDBInstance, the response includes a list of supported character sets for each engine version. 
        public let listSupportedCharacterSets: Bool?
        /// The database engine version to return. Example: 5.1.49 
        public let engineVersion: String?
        ///  The maximum number of records to include in the response. If more than the MaxRecords value is available, a pagination token called a marker is included in the response so that the following results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(engine: String? = nil, marker: String? = nil, dBParameterGroupFamily: String? = nil, listSupportedTimezones: Bool? = nil, defaultOnly: Bool? = nil, filters: FilterList? = nil, listSupportedCharacterSets: Bool? = nil, engineVersion: String? = nil, maxRecords: Int32? = nil) {
            self.engine = engine
            self.marker = marker
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.listSupportedTimezones = listSupportedTimezones
            self.defaultOnly = defaultOnly
            self.filters = filters
            self.listSupportedCharacterSets = listSupportedCharacterSets
            self.engineVersion = engineVersion
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case engine = "Engine"
            case marker = "Marker"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case listSupportedTimezones = "ListSupportedTimezones"
            case defaultOnly = "DefaultOnly"
            case filters = "Filters"
            case listSupportedCharacterSets = "ListSupportedCharacterSets"
            case engineVersion = "EngineVersion"
            case maxRecords = "MaxRecords"
        }
    }

    public struct CopyDBClusterParameterGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterParameterGroup", required: false, type: .structure)
        ]
        public let dBClusterParameterGroup: DBClusterParameterGroup?

        public init(dBClusterParameterGroup: DBClusterParameterGroup? = nil) {
            self.dBClusterParameterGroup = dBClusterParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterParameterGroup = "DBClusterParameterGroup"
        }
    }

    public struct DescribeAccountAttributesMessage: AWSShape {

    }

    public struct DescribeOptionGroupsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "EngineName", required: false, type: .string), 
            AWSShapeMember(label: "MajorEngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        /// Filters the list of option groups to only include groups associated with a specific database engine.
        public let engineName: String?
        /// Filters the list of option groups to only include groups associated with a specific database engine version. If specified, then EngineName must also be specified.
        public let majorEngineVersion: String?
        ///  An optional pagination token provided by a previous DescribeOptionGroups request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The name of the option group to describe. Cannot be supplied together with EngineName or MajorEngineVersion.
        public let optionGroupName: String?

        public init(maxRecords: Int32? = nil, filters: FilterList? = nil, engineName: String? = nil, majorEngineVersion: String? = nil, marker: String? = nil, optionGroupName: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.engineName = engineName
            self.majorEngineVersion = majorEngineVersion
            self.marker = marker
            self.optionGroupName = optionGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case engineName = "EngineName"
            case majorEngineVersion = "MajorEngineVersion"
            case marker = "Marker"
            case optionGroupName = "OptionGroupName"
        }
    }

    public struct ReadReplicaIdentifierList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReadReplicaIdentifier", required: false, type: .list)
        ]
        public let readReplicaIdentifier: [String]?

        public init(readReplicaIdentifier: [String]? = nil) {
            self.readReplicaIdentifier = readReplicaIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case readReplicaIdentifier = "ReadReplicaIdentifier"
        }
    }

    public struct DownloadDBLogFilePortionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogFileName", required: true, type: .string), 
            AWSShapeMember(label: "NumberOfLines", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: true, type: .string)
        ]
        /// The name of the log file to be downloaded.
        public let logFileName: String
        /// The number of lines to download. If the number of lines specified results in a file over 1 MB in size, the file is truncated at 1 MB in size. If the NumberOfLines parameter is specified, then the block of lines returned can be from the beginning or the end of the log file, depending on the value of the Marker parameter.   If neither Marker or NumberOfLines are specified, the entire log file is returned up to a maximum of 10000 lines, starting with the most recent log entries first.   If NumberOfLines is specified and Marker is not specified, then the most recent lines from the end of the log file are returned.   If Marker is specified as "0", then the specified number of lines from the beginning of the log file are returned.   You can download the log file in blocks of lines by specifying the size of the block using the NumberOfLines parameter, and by specifying a value of "0" for the Marker parameter in your first request. Include the Marker value returned in the response as the Marker value for the next request, continuing until the AdditionalDataPending response element returns false.  
        public let numberOfLines: Int32?
        /// The pagination token provided in the previous request or "0". If the Marker parameter is specified the response includes only records beyond the marker until the end of the file or up to NumberOfLines.
        public let marker: String?
        /// The customer-assigned name of the DB instance that contains the log files you want to list. Constraints:   Must match the identifier of an existing DBInstance.  
        public let dBInstanceIdentifier: String

        public init(logFileName: String, numberOfLines: Int32? = nil, marker: String? = nil, dBInstanceIdentifier: String) {
            self.logFileName = logFileName
            self.numberOfLines = numberOfLines
            self.marker = marker
            self.dBInstanceIdentifier = dBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case logFileName = "LogFileName"
            case numberOfLines = "NumberOfLines"
            case marker = "Marker"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
        }
    }

    public struct CertificateList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificate", required: false, type: .list)
        ]
        public let certificate: [Certificate]?

        public init(certificate: [Certificate]? = nil) {
            self.certificate = certificate
        }

        private enum CodingKeys: String, CodingKey {
            case certificate = "Certificate"
        }
    }

    public struct ModifyDBClusterResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .structure)
        ]
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct DBSecurityGroupNameList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSecurityGroupName", required: false, type: .list)
        ]
        public let dBSecurityGroupName: [String]?

        public init(dBSecurityGroupName: [String]? = nil) {
            self.dBSecurityGroupName = dBSecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBSecurityGroupName = "DBSecurityGroupName"
        }
    }

    public struct RestoreDBClusterToPointInTimeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .structure)
        ]
        public let dBCluster: DBCluster?

        public init(dBCluster: DBCluster? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct ModifyDBClusterSnapshotAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshotAttributesResult", required: false, type: .structure)
        ]
        public let dBClusterSnapshotAttributesResult: DBClusterSnapshotAttributesResult?

        public init(dBClusterSnapshotAttributesResult: DBClusterSnapshotAttributesResult? = nil) {
            self.dBClusterSnapshotAttributesResult = dBClusterSnapshotAttributesResult
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotAttributesResult = "DBClusterSnapshotAttributesResult"
        }
    }

    public struct PromoteReadReplicaResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct DBClusterList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBCluster", required: false, type: .list)
        ]
        public let dBCluster: [DBCluster]?

        public init(dBCluster: [DBCluster]? = nil) {
            self.dBCluster = dBCluster
        }

        private enum CodingKeys: String, CodingKey {
            case dBCluster = "DBCluster"
        }
    }

    public struct SubnetIdentifierList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIdentifier", required: false, type: .list)
        ]
        public let subnetIdentifier: [String]?

        public init(subnetIdentifier: [String]? = nil) {
            self.subnetIdentifier = subnetIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIdentifier = "SubnetIdentifier"
        }
    }

    public struct CertificateMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificates", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The list of Certificate objects for the AWS account.
        public let certificates: CertificateList?
        ///  An optional pagination token provided by a previous DescribeCertificates request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords . 
        public let marker: String?

        public init(certificates: CertificateList? = nil, marker: String? = nil) {
            self.certificates = certificates
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "Certificates"
            case marker = "Marker"
        }
    }

    public struct Parameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterValue", required: false, type: .string), 
            AWSShapeMember(label: "DataType", required: false, type: .string), 
            AWSShapeMember(label: "Source", required: false, type: .string), 
            AWSShapeMember(label: "ApplyMethod", required: false, type: .enum), 
            AWSShapeMember(label: "IsModifiable", required: false, type: .boolean), 
            AWSShapeMember(label: "ParameterName", required: false, type: .string), 
            AWSShapeMember(label: "ApplyType", required: false, type: .string), 
            AWSShapeMember(label: "AllowedValues", required: false, type: .string), 
            AWSShapeMember(label: "MinimumEngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// Specifies the value of the parameter.
        public let parameterValue: String?
        /// Specifies the valid data type for the parameter.
        public let dataType: String?
        /// Indicates the source of the parameter value.
        public let source: String?
        /// Indicates when to apply parameter updates.
        public let applyMethod: ApplyMethod?
        ///  Indicates whether (true) or not (false) the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed. 
        public let isModifiable: Bool?
        /// Specifies the name of the parameter.
        public let parameterName: String?
        /// Specifies the engine specific parameters type.
        public let applyType: String?
        /// Specifies the valid range of values for the parameter.
        public let allowedValues: String?
        /// The earliest engine version to which the parameter can apply.
        public let minimumEngineVersion: String?
        /// Provides a description of the parameter.
        public let description: String?

        public init(parameterValue: String? = nil, dataType: String? = nil, source: String? = nil, applyMethod: ApplyMethod? = nil, isModifiable: Bool? = nil, parameterName: String? = nil, applyType: String? = nil, allowedValues: String? = nil, minimumEngineVersion: String? = nil, description: String? = nil) {
            self.parameterValue = parameterValue
            self.dataType = dataType
            self.source = source
            self.applyMethod = applyMethod
            self.isModifiable = isModifiable
            self.parameterName = parameterName
            self.applyType = applyType
            self.allowedValues = allowedValues
            self.minimumEngineVersion = minimumEngineVersion
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case parameterValue = "ParameterValue"
            case dataType = "DataType"
            case source = "Source"
            case applyMethod = "ApplyMethod"
            case isModifiable = "IsModifiable"
            case parameterName = "ParameterName"
            case applyType = "ApplyType"
            case allowedValues = "AllowedValues"
            case minimumEngineVersion = "MinimumEngineVersion"
            case description = "Description"
        }
    }

    public struct DBClusterMember: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsClusterWriter", required: false, type: .boolean), 
            AWSShapeMember(label: "DBClusterParameterGroupStatus", required: false, type: .string), 
            AWSShapeMember(label: "PromotionTier", required: false, type: .integer), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: false, type: .string)
        ]
        /// Value that is true if the cluster member is the primary instance for the DB cluster and false otherwise.
        public let isClusterWriter: Bool?
        /// Specifies the status of the DB cluster parameter group for this member of the DB cluster.
        public let dBClusterParameterGroupStatus: String?
        /// A value that specifies the order in which an Aurora Replica is promoted to the primary instance after a failure of the existing primary instance. For more information, see  Fault Tolerance for an Aurora DB Cluster. 
        public let promotionTier: Int32?
        /// Specifies the instance identifier for this member of the DB cluster.
        public let dBInstanceIdentifier: String?

        public init(isClusterWriter: Bool? = nil, dBClusterParameterGroupStatus: String? = nil, promotionTier: Int32? = nil, dBInstanceIdentifier: String? = nil) {
            self.isClusterWriter = isClusterWriter
            self.dBClusterParameterGroupStatus = dBClusterParameterGroupStatus
            self.promotionTier = promotionTier
            self.dBInstanceIdentifier = dBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case isClusterWriter = "IsClusterWriter"
            case dBClusterParameterGroupStatus = "DBClusterParameterGroupStatus"
            case promotionTier = "PromotionTier"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
        }
    }

    public struct CreateDBClusterParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "DBClusterParameterGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: true, type: .string), 
            AWSShapeMember(label: "DBParameterGroupFamily", required: true, type: .string)
        ]
        public let tags: TagList?
        /// The name of the DB cluster parameter group. Constraints:   Must match the name of an existing DBClusterParameterGroup.    This value is stored as a lowercase string. 
        public let dBClusterParameterGroupName: String
        /// The description for the DB cluster parameter group.
        public let description: String
        /// The DB cluster parameter group family name. A DB cluster parameter group can be associated with one and only one DB cluster parameter group family, and can be applied only to a DB cluster running a database engine and engine version compatible with that DB cluster parameter group family.  Aurora MySQL  Example: aurora5.6, aurora-mysql5.7   Aurora PostgreSQL  Example: aurora-postgresql9.6 
        public let dBParameterGroupFamily: String

        public init(tags: TagList? = nil, dBClusterParameterGroupName: String, description: String, dBParameterGroupFamily: String) {
            self.tags = tags
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.description = description
            self.dBParameterGroupFamily = dBParameterGroupFamily
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case description = "Description"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
        }
    }

    public struct DeleteOptionGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroupName", required: true, type: .string)
        ]
        /// The name of the option group to be deleted.  You can't delete default option groups. 
        public let optionGroupName: String

        public init(optionGroupName: String) {
            self.optionGroupName = optionGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroupName = "OptionGroupName"
        }
    }

    public struct DescribeDBClusterParametersMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBClusterParameterGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Source", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  An optional pagination token provided by a previous DescribeDBClusterParameters request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        /// The name of a specific DB cluster parameter group to return parameter details for. Constraints:   If supplied, must match the name of an existing DBClusterParameterGroup.  
        public let dBClusterParameterGroupName: String
        ///  A value that indicates to return only parameters for a specific source. Parameter sources can be engine, service, or customer. 
        public let source: String?

        public init(maxRecords: Int32? = nil, filters: FilterList? = nil, marker: String? = nil, dBClusterParameterGroupName: String, source: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.marker = marker
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case marker = "Marker"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
            case source = "Source"
        }
    }

    public struct CopyDBParameterGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroup", required: false, type: .structure)
        ]
        public let dBParameterGroup: DBParameterGroup?

        public init(dBParameterGroup: DBParameterGroup? = nil) {
            self.dBParameterGroup = dBParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroup = "DBParameterGroup"
        }
    }

    public struct DescribeOrderableDBInstanceOptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Vpc", required: false, type: .boolean), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "Engine", required: true, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// The DB instance class filter value. Specify this parameter to show only the available offerings matching the specified DB instance class.
        public let dBInstanceClass: String?
        ///  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords . 
        public let marker: String?
        /// The VPC filter value. Specify this parameter to show only the available VPC or non-VPC offerings.
        public let vpc: Bool?
        /// The license model filter value. Specify this parameter to show only the available offerings matching the specified license model.
        public let licenseModel: String?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        /// The engine version filter value. Specify this parameter to show only the available offerings matching the specified engine version.
        public let engineVersion: String?
        /// The name of the engine to retrieve DB instance options for.
        public let engine: String
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(dBInstanceClass: String? = nil, marker: String? = nil, vpc: Bool? = nil, licenseModel: String? = nil, filters: FilterList? = nil, engineVersion: String? = nil, engine: String, maxRecords: Int32? = nil) {
            self.dBInstanceClass = dBInstanceClass
            self.marker = marker
            self.vpc = vpc
            self.licenseModel = licenseModel
            self.filters = filters
            self.engineVersion = engineVersion
            self.engine = engine
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstanceClass = "DBInstanceClass"
            case marker = "Marker"
            case vpc = "Vpc"
            case licenseModel = "LicenseModel"
            case filters = "Filters"
            case engineVersion = "EngineVersion"
            case engine = "Engine"
            case maxRecords = "MaxRecords"
        }
    }

    public struct ModifyDBSnapshotMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSnapshotIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "OptionGroupName", required: false, type: .string)
        ]
        /// The identifier of the DB snapshot to modify.
        public let dBSnapshotIdentifier: String
        /// The engine version to upgrade the DB snapshot to.  The following are the database engines and engine versions that are available when you upgrade a DB snapshot.   MySQL     5.5.46 (supported for 5.1 DB snapshots)    Oracle     12.1.0.2.v8 (supported for 12.1.0.1 DB snapshots)    11.2.0.4.v12 (supported for 11.2.0.2 DB snapshots)    11.2.0.4.v11 (supported for 11.2.0.3 DB snapshots)  
        public let engineVersion: String?
        /// The option group to identify with the upgraded DB snapshot.  You can specify this parameter when you upgrade an Oracle DB snapshot. The same option group considerations apply when upgrading a DB snapshot as when upgrading a DB instance. For more information, see Option Group Considerations. 
        public let optionGroupName: String?

        public init(dBSnapshotIdentifier: String, engineVersion: String? = nil, optionGroupName: String? = nil) {
            self.dBSnapshotIdentifier = dBSnapshotIdentifier
            self.engineVersion = engineVersion
            self.optionGroupName = optionGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case dBSnapshotIdentifier = "DBSnapshotIdentifier"
            case engineVersion = "EngineVersion"
            case optionGroupName = "OptionGroupName"
        }
    }

    public struct FilterList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: false, type: .list)
        ]
        public let filter: [Filter]?

        public init(filter: [Filter]? = nil) {
            self.filter = filter
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
        }
    }

    public struct ReadReplicaDBInstanceIdentifierList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReadReplicaDBInstanceIdentifier", required: false, type: .list)
        ]
        public let readReplicaDBInstanceIdentifier: [String]?

        public init(readReplicaDBInstanceIdentifier: [String]? = nil) {
            self.readReplicaDBInstanceIdentifier = readReplicaDBInstanceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case readReplicaDBInstanceIdentifier = "ReadReplicaDBInstanceIdentifier"
        }
    }

    public struct AccountQuota: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountQuotaName", required: false, type: .string), 
            AWSShapeMember(label: "Used", required: false, type: .long), 
            AWSShapeMember(label: "Max", required: false, type: .long)
        ]
        /// The name of the Amazon RDS quota for this AWS account.
        public let accountQuotaName: String?
        /// The amount currently used toward the quota maximum.
        public let used: Int64?
        /// The maximum allowed value for the quota.
        public let max: Int64?

        public init(accountQuotaName: String? = nil, used: Int64? = nil, max: Int64? = nil) {
            self.accountQuotaName = accountQuotaName
            self.used = used
            self.max = max
        }

        private enum CodingKeys: String, CodingKey {
            case accountQuotaName = "AccountQuotaName"
            case used = "Used"
            case max = "Max"
        }
    }

    public struct CreateDBParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: true, type: .string), 
            AWSShapeMember(label: "DBParameterGroupFamily", required: true, type: .string)
        ]
        /// The name of the DB parameter group. Constraints:   Must be 1 to 255 letters, numbers, or hyphens.   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens    This value is stored as a lowercase string. 
        public let dBParameterGroupName: String
        public let tags: TagList?
        /// The description for the DB parameter group.
        public let description: String
        /// The DB parameter group family name. A DB parameter group can be associated with one and only one DB parameter group family, and can be applied only to a DB instance running a database engine and engine version compatible with that DB parameter group family. To list all of the available parameter group families, use the following command:  aws rds describe-db-engine-versions --query "DBEngineVersions[].DBParameterGroupFamily"   The output contains duplicates. 
        public let dBParameterGroupFamily: String

        public init(dBParameterGroupName: String, tags: TagList? = nil, description: String, dBParameterGroupFamily: String) {
            self.dBParameterGroupName = dBParameterGroupName
            self.tags = tags
            self.description = description
            self.dBParameterGroupFamily = dBParameterGroupFamily
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroupName = "DBParameterGroupName"
            case tags = "Tags"
            case description = "Description"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
        }
    }

    public struct ApplyPendingMaintenanceActionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceIdentifier", required: true, type: .string), 
            AWSShapeMember(label: "OptInType", required: true, type: .string), 
            AWSShapeMember(label: "ApplyAction", required: true, type: .string)
        ]
        /// The RDS Amazon Resource Name (ARN) of the resource that the pending maintenance action applies to. For information about creating an ARN, see  Constructing an RDS Amazon Resource Name (ARN).
        public let resourceIdentifier: String
        /// A value that specifies the type of opt-in request, or undoes an opt-in request. An opt-in request of type immediate can't be undone. Valid values:    immediate - Apply the maintenance action immediately.    next-maintenance - Apply the maintenance action during the next maintenance window for the resource.    undo-opt-in - Cancel any existing next-maintenance opt-in requests.  
        public let optInType: String
        /// The pending maintenance action to apply to this resource. Valid values: system-update, db-upgrade 
        public let applyAction: String

        public init(resourceIdentifier: String, optInType: String, applyAction: String) {
            self.resourceIdentifier = resourceIdentifier
            self.optInType = optInType
            self.applyAction = applyAction
        }

        private enum CodingKeys: String, CodingKey {
            case resourceIdentifier = "ResourceIdentifier"
            case optInType = "OptInType"
            case applyAction = "ApplyAction"
        }
    }

    public struct DescribeDBClusterSnapshotAttributesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterSnapshotIdentifier", required: true, type: .string)
        ]
        /// The identifier for the DB cluster snapshot to describe the attributes for.
        public let dBClusterSnapshotIdentifier: String

        public init(dBClusterSnapshotIdentifier: String) {
            self.dBClusterSnapshotIdentifier = dBClusterSnapshotIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterSnapshotIdentifier = "DBClusterSnapshotIdentifier"
        }
    }

    public struct ModifyOptionGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionsToRemove", required: false, type: .list), 
            AWSShapeMember(label: "OptionsToInclude", required: false, type: .structure), 
            AWSShapeMember(label: "ApplyImmediately", required: false, type: .boolean), 
            AWSShapeMember(label: "OptionGroupName", required: true, type: .string)
        ]
        /// Options in this list are removed from the option group.
        public let optionsToRemove: [String]?
        /// Options in this list are added to the option group or, if already present, the specified configuration is used to update the existing configuration.
        public let optionsToInclude: OptionConfigurationList?
        /// Indicates whether the changes should be applied immediately, or during the next maintenance window for each instance associated with the option group.
        public let applyImmediately: Bool?
        /// The name of the option group to be modified. Permanent options, such as the TDE option for Oracle Advanced Security TDE, can't be removed from an option group, and that option group can't be removed from a DB instance once it is associated with a DB instance
        public let optionGroupName: String

        public init(optionsToRemove: [String]? = nil, optionsToInclude: OptionConfigurationList? = nil, applyImmediately: Bool? = nil, optionGroupName: String) {
            self.optionsToRemove = optionsToRemove
            self.optionsToInclude = optionsToInclude
            self.applyImmediately = applyImmediately
            self.optionGroupName = optionGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case optionsToRemove = "OptionsToRemove"
            case optionsToInclude = "OptionsToInclude"
            case applyImmediately = "ApplyImmediately"
            case optionGroupName = "OptionGroupName"
        }
    }

    public struct SourceRegionList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceRegion", required: false, type: .list)
        ]
        public let sourceRegion: [SourceRegion]?

        public init(sourceRegion: [SourceRegion]? = nil) {
            self.sourceRegion = sourceRegion
        }

        private enum CodingKeys: String, CodingKey {
            case sourceRegion = "SourceRegion"
        }
    }

    public struct SourceRegionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceRegions", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// A list of SourceRegion instances that contains each source AWS Region that the current AWS Region can get a Read Replica or a DB snapshot from.
        public let sourceRegions: SourceRegionList?
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?

        public init(sourceRegions: SourceRegionList? = nil, marker: String? = nil) {
            self.sourceRegions = sourceRegions
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case sourceRegions = "SourceRegions"
            case marker = "Marker"
        }
    }

    public struct OptionGroupMembershipList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroupMembership", required: false, type: .list)
        ]
        public let optionGroupMembership: [OptionGroupMembership]?

        public init(optionGroupMembership: [OptionGroupMembership]? = nil) {
            self.optionGroupMembership = optionGroupMembership
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroupMembership = "OptionGroupMembership"
        }
    }

    public struct DBEngineVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Engine", required: false, type: .string), 
            AWSShapeMember(label: "DefaultCharacterSet", required: false, type: .structure), 
            AWSShapeMember(label: "SupportedTimezones", required: false, type: .structure), 
            AWSShapeMember(label: "DBParameterGroupFamily", required: false, type: .string), 
            AWSShapeMember(label: "SupportsLogExportsToCloudwatchLogs", required: false, type: .boolean), 
            AWSShapeMember(label: "DBEngineVersionDescription", required: false, type: .string), 
            AWSShapeMember(label: "ExportableLogTypes", required: false, type: .list), 
            AWSShapeMember(label: "SupportsReadReplica", required: false, type: .boolean), 
            AWSShapeMember(label: "SupportedCharacterSets", required: false, type: .structure), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "DBEngineDescription", required: false, type: .string), 
            AWSShapeMember(label: "ValidUpgradeTarget", required: false, type: .structure)
        ]
        /// The name of the database engine.
        public let engine: String?
        ///  The default character set for new instances of this engine version, if the CharacterSetName parameter of the CreateDBInstance API is not specified. 
        public let defaultCharacterSet: CharacterSet?
        /// A list of the time zones supported by this engine for the Timezone parameter of the CreateDBInstance action. 
        public let supportedTimezones: SupportedTimezonesList?
        /// The name of the DB parameter group family for the database engine.
        public let dBParameterGroupFamily: String?
        /// A value that indicates whether the engine version supports exporting the log types specified by ExportableLogTypes to CloudWatch Logs.
        public let supportsLogExportsToCloudwatchLogs: Bool?
        /// The description of the database engine version.
        public let dBEngineVersionDescription: String?
        /// The types of logs that the database engine has available for export to CloudWatch Logs.
        public let exportableLogTypes: [String]?
        /// Indicates whether the database engine version supports read replicas.
        public let supportsReadReplica: Bool?
        ///  A list of the character sets supported by this engine for the CharacterSetName parameter of the CreateDBInstance action. 
        public let supportedCharacterSets: SupportedCharacterSetsList?
        /// The version number of the database engine.
        public let engineVersion: String?
        /// The description of the database engine.
        public let dBEngineDescription: String?
        /// A list of engine versions that this database engine version can be upgraded to.
        public let validUpgradeTarget: ValidUpgradeTargetList?

        public init(engine: String? = nil, defaultCharacterSet: CharacterSet? = nil, supportedTimezones: SupportedTimezonesList? = nil, dBParameterGroupFamily: String? = nil, supportsLogExportsToCloudwatchLogs: Bool? = nil, dBEngineVersionDescription: String? = nil, exportableLogTypes: [String]? = nil, supportsReadReplica: Bool? = nil, supportedCharacterSets: SupportedCharacterSetsList? = nil, engineVersion: String? = nil, dBEngineDescription: String? = nil, validUpgradeTarget: ValidUpgradeTargetList? = nil) {
            self.engine = engine
            self.defaultCharacterSet = defaultCharacterSet
            self.supportedTimezones = supportedTimezones
            self.dBParameterGroupFamily = dBParameterGroupFamily
            self.supportsLogExportsToCloudwatchLogs = supportsLogExportsToCloudwatchLogs
            self.dBEngineVersionDescription = dBEngineVersionDescription
            self.exportableLogTypes = exportableLogTypes
            self.supportsReadReplica = supportsReadReplica
            self.supportedCharacterSets = supportedCharacterSets
            self.engineVersion = engineVersion
            self.dBEngineDescription = dBEngineDescription
            self.validUpgradeTarget = validUpgradeTarget
        }

        private enum CodingKeys: String, CodingKey {
            case engine = "Engine"
            case defaultCharacterSet = "DefaultCharacterSet"
            case supportedTimezones = "SupportedTimezones"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
            case supportsLogExportsToCloudwatchLogs = "SupportsLogExportsToCloudwatchLogs"
            case dBEngineVersionDescription = "DBEngineVersionDescription"
            case exportableLogTypes = "ExportableLogTypes"
            case supportsReadReplica = "SupportsReadReplica"
            case supportedCharacterSets = "SupportedCharacterSets"
            case engineVersion = "EngineVersion"
            case dBEngineDescription = "DBEngineDescription"
            case validUpgradeTarget = "ValidUpgradeTarget"
        }
    }

    public struct OptionGroupOptionSetting: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsModifiable", required: false, type: .boolean), 
            AWSShapeMember(label: "SettingName", required: false, type: .string), 
            AWSShapeMember(label: "DefaultValue", required: false, type: .string), 
            AWSShapeMember(label: "SettingDescription", required: false, type: .string), 
            AWSShapeMember(label: "AllowedValues", required: false, type: .string), 
            AWSShapeMember(label: "ApplyType", required: false, type: .string)
        ]
        /// Boolean value where true indicates that this option group option can be changed from the default value.
        public let isModifiable: Bool?
        /// The name of the option group option.
        public let settingName: String?
        /// The default value for the option group option.
        public let defaultValue: String?
        /// The description of the option group option.
        public let settingDescription: String?
        /// Indicates the acceptable values for the option group option.
        public let allowedValues: String?
        /// The DB engine specific parameter type for the option group option.
        public let applyType: String?

        public init(isModifiable: Bool? = nil, settingName: String? = nil, defaultValue: String? = nil, settingDescription: String? = nil, allowedValues: String? = nil, applyType: String? = nil) {
            self.isModifiable = isModifiable
            self.settingName = settingName
            self.defaultValue = defaultValue
            self.settingDescription = settingDescription
            self.allowedValues = allowedValues
            self.applyType = applyType
        }

        private enum CodingKeys: String, CodingKey {
            case isModifiable = "IsModifiable"
            case settingName = "SettingName"
            case defaultValue = "DefaultValue"
            case settingDescription = "SettingDescription"
            case allowedValues = "AllowedValues"
            case applyType = "ApplyType"
        }
    }

    public struct VpcSecurityGroupMembershipList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcSecurityGroupMembership", required: false, type: .list)
        ]
        public let vpcSecurityGroupMembership: [VpcSecurityGroupMembership]?

        public init(vpcSecurityGroupMembership: [VpcSecurityGroupMembership]? = nil) {
            self.vpcSecurityGroupMembership = vpcSecurityGroupMembership
        }

        private enum CodingKeys: String, CodingKey {
            case vpcSecurityGroupMembership = "VpcSecurityGroupMembership"
        }
    }

    public struct PendingMaintenanceActions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourcePendingMaintenanceActions", required: false, type: .list)
        ]
        public let resourcePendingMaintenanceActions: [ResourcePendingMaintenanceActions]?

        public init(resourcePendingMaintenanceActions: [ResourcePendingMaintenanceActions]? = nil) {
            self.resourcePendingMaintenanceActions = resourcePendingMaintenanceActions
        }

        private enum CodingKeys: String, CodingKey {
            case resourcePendingMaintenanceActions = "ResourcePendingMaintenanceActions"
        }
    }

    public struct DescribeEventsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "SourceType", required: false, type: .enum), 
            AWSShapeMember(label: "SourceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EventCategories", required: false, type: .structure), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        /// The number of minutes to retrieve events for. Default: 60
        public let duration: Int32?
        /// The event source to retrieve events for. If no value is specified, all events are returned.
        public let sourceType: SourceType?
        /// The identifier of the event source for which events are returned. If not specified, then all sources are included in the response. Constraints:   If SourceIdentifier is supplied, SourceType must also be provided.   If the source type is DBInstance, then a DBInstanceIdentifier must be supplied.   If the source type is DBSecurityGroup, a DBSecurityGroupName must be supplied.   If the source type is DBParameterGroup, a DBParameterGroupName must be supplied.   If the source type is DBSnapshot, a DBSnapshotIdentifier must be supplied.   Cannot end with a hyphen or contain two consecutive hyphens.  
        public let sourceIdentifier: String?
        ///  An optional pagination token provided by a previous DescribeEvents request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        public let marker: String?
        ///  The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.  Example: 2009-07-08T18:00Z
        public let startTime: TimeStamp?
        ///  The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.  Example: 2009-07-08T18:00Z
        public let endTime: TimeStamp?
        /// A list of event categories that trigger notifications for a event notification subscription.
        public let eventCategories: EventCategoriesList?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?

        public init(duration: Int32? = nil, sourceType: SourceType? = nil, sourceIdentifier: String? = nil, marker: String? = nil, startTime: TimeStamp? = nil, endTime: TimeStamp? = nil, eventCategories: EventCategoriesList? = nil, filters: FilterList? = nil, maxRecords: Int32? = nil) {
            self.duration = duration
            self.sourceType = sourceType
            self.sourceIdentifier = sourceIdentifier
            self.marker = marker
            self.startTime = startTime
            self.endTime = endTime
            self.eventCategories = eventCategories
            self.filters = filters
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case duration = "Duration"
            case sourceType = "SourceType"
            case sourceIdentifier = "SourceIdentifier"
            case marker = "Marker"
            case startTime = "StartTime"
            case endTime = "EndTime"
            case eventCategories = "EventCategories"
            case filters = "Filters"
            case maxRecords = "MaxRecords"
        }
    }

    public struct OptionGroupOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionGroupOptionVersions", required: false, type: .structure), 
            AWSShapeMember(label: "OptionGroupOptionSettings", required: false, type: .structure), 
            AWSShapeMember(label: "Permanent", required: false, type: .boolean), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DefaultPort", required: false, type: .integer), 
            AWSShapeMember(label: "OptionsDependedOn", required: false, type: .structure), 
            AWSShapeMember(label: "OptionsConflictsWith", required: false, type: .structure), 
            AWSShapeMember(label: "SupportsOptionVersionDowngrade", required: false, type: .boolean), 
            AWSShapeMember(label: "PortRequired", required: false, type: .boolean), 
            AWSShapeMember(label: "Persistent", required: false, type: .boolean), 
            AWSShapeMember(label: "VpcOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "MajorEngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "RequiresAutoMinorEngineVersionUpgrade", required: false, type: .boolean), 
            AWSShapeMember(label: "EngineName", required: false, type: .string), 
            AWSShapeMember(label: "MinimumRequiredMinorEngineVersion", required: false, type: .string)
        ]
        /// The versions that are available for the option.
        public let optionGroupOptionVersions: OptionGroupOptionVersionsList?
        /// The option settings that are available (and the default value) for each option in an option group.
        public let optionGroupOptionSettings: OptionGroupOptionSettingsList?
        /// Permanent options can never be removed from an option group. An option group containing a permanent option can't be removed from a DB instance.
        public let permanent: Bool?
        /// The name of the option.
        public let name: String?
        /// If the option requires a port, specifies the default port for the option.
        public let defaultPort: Int32?
        /// The options that are prerequisites for this option.
        public let optionsDependedOn: OptionsDependedOn?
        /// The options that conflict with this option.
        public let optionsConflictsWith: OptionsConflictsWith?
        /// If true, you can change the option to an earlier version of the option. This only applies to options that have different versions available. 
        public let supportsOptionVersionDowngrade: Bool?
        /// Specifies whether the option requires a port.
        public let portRequired: Bool?
        /// Persistent options can't be removed from an option group while DB instances are associated with the option group. If you disassociate all DB instances from the option group, your can remove the persistent option from the option group.
        public let persistent: Bool?
        /// If true, you can only use this option with a DB instance that is in a VPC. 
        public let vpcOnly: Bool?
        /// Indicates the major engine version that the option is available for.
        public let majorEngineVersion: String?
        /// The description of the option.
        public let description: String?
        /// If true, you must enable the Auto Minor Version Upgrade setting for your DB instance before you can use this option. You can enable Auto Minor Version Upgrade when you first create your DB instance, or by modifying your DB instance later. 
        public let requiresAutoMinorEngineVersionUpgrade: Bool?
        /// The name of the engine that this option can be applied to.
        public let engineName: String?
        /// The minimum required engine version for the option to be applied.
        public let minimumRequiredMinorEngineVersion: String?

        public init(optionGroupOptionVersions: OptionGroupOptionVersionsList? = nil, optionGroupOptionSettings: OptionGroupOptionSettingsList? = nil, permanent: Bool? = nil, name: String? = nil, defaultPort: Int32? = nil, optionsDependedOn: OptionsDependedOn? = nil, optionsConflictsWith: OptionsConflictsWith? = nil, supportsOptionVersionDowngrade: Bool? = nil, portRequired: Bool? = nil, persistent: Bool? = nil, vpcOnly: Bool? = nil, majorEngineVersion: String? = nil, description: String? = nil, requiresAutoMinorEngineVersionUpgrade: Bool? = nil, engineName: String? = nil, minimumRequiredMinorEngineVersion: String? = nil) {
            self.optionGroupOptionVersions = optionGroupOptionVersions
            self.optionGroupOptionSettings = optionGroupOptionSettings
            self.permanent = permanent
            self.name = name
            self.defaultPort = defaultPort
            self.optionsDependedOn = optionsDependedOn
            self.optionsConflictsWith = optionsConflictsWith
            self.supportsOptionVersionDowngrade = supportsOptionVersionDowngrade
            self.portRequired = portRequired
            self.persistent = persistent
            self.vpcOnly = vpcOnly
            self.majorEngineVersion = majorEngineVersion
            self.description = description
            self.requiresAutoMinorEngineVersionUpgrade = requiresAutoMinorEngineVersionUpgrade
            self.engineName = engineName
            self.minimumRequiredMinorEngineVersion = minimumRequiredMinorEngineVersion
        }

        private enum CodingKeys: String, CodingKey {
            case optionGroupOptionVersions = "OptionGroupOptionVersions"
            case optionGroupOptionSettings = "OptionGroupOptionSettings"
            case permanent = "Permanent"
            case name = "Name"
            case defaultPort = "DefaultPort"
            case optionsDependedOn = "OptionsDependedOn"
            case optionsConflictsWith = "OptionsConflictsWith"
            case supportsOptionVersionDowngrade = "SupportsOptionVersionDowngrade"
            case portRequired = "PortRequired"
            case persistent = "Persistent"
            case vpcOnly = "VpcOnly"
            case majorEngineVersion = "MajorEngineVersion"
            case description = "Description"
            case requiresAutoMinorEngineVersionUpgrade = "RequiresAutoMinorEngineVersionUpgrade"
            case engineName = "EngineName"
            case minimumRequiredMinorEngineVersion = "MinimumRequiredMinorEngineVersion"
        }
    }

    public struct StopDBInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct PendingModifiedValues: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CACertificateIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "MultiAZ", required: false, type: .boolean), 
            AWSShapeMember(label: "ProcessorFeatures", required: false, type: .structure), 
            AWSShapeMember(label: "BackupRetentionPeriod", required: false, type: .integer), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "DBSubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "EngineVersion", required: false, type: .string), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "PendingCloudwatchLogsExports", required: false, type: .structure), 
            AWSShapeMember(label: "MasterUserPassword", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "AllocatedStorage", required: false, type: .integer), 
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "LicenseModel", required: false, type: .string), 
            AWSShapeMember(label: "DBInstanceClass", required: false, type: .string)
        ]
        /// Specifies the identifier of the CA certificate for the DB instance.
        public let cACertificateIdentifier: String?
        /// Indicates that the Single-AZ DB instance is to change to a Multi-AZ deployment.
        public let multiAZ: Bool?
        /// The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.
        public let processorFeatures: ProcessorFeatureList?
        /// Specifies the pending number of days for which automated backups are retained.
        public let backupRetentionPeriod: Int32?
        /// Specifies the storage type to be associated with the DB instance.
        public let storageType: String?
        /// The new DB subnet group for the DB instance. 
        public let dBSubnetGroupName: String?
        /// Indicates the database engine version.
        public let engineVersion: String?
        /// Specifies the new Provisioned IOPS value for the DB instance that will be applied or is currently being applied.
        public let iops: Int32?
        public let pendingCloudwatchLogsExports: PendingCloudwatchLogsExports?
        /// Contains the pending or currently-in-progress change of the master credentials for the DB instance.
        public let masterUserPassword: String?
        ///  Contains the new DBInstanceIdentifier for the DB instance that will be applied or is currently being applied. 
        public let dBInstanceIdentifier: String?
        ///  Contains the new AllocatedStorage size for the DB instance that will be applied or is currently being applied. 
        public let allocatedStorage: Int32?
        /// Specifies the pending port for the DB instance.
        public let port: Int32?
        /// The license model for the DB instance. Valid values: license-included | bring-your-own-license | general-public-license 
        public let licenseModel: String?
        ///  Contains the new DBInstanceClass for the DB instance that will be applied or is currently being applied. 
        public let dBInstanceClass: String?

        public init(cACertificateIdentifier: String? = nil, multiAZ: Bool? = nil, processorFeatures: ProcessorFeatureList? = nil, backupRetentionPeriod: Int32? = nil, storageType: String? = nil, dBSubnetGroupName: String? = nil, engineVersion: String? = nil, iops: Int32? = nil, pendingCloudwatchLogsExports: PendingCloudwatchLogsExports? = nil, masterUserPassword: String? = nil, dBInstanceIdentifier: String? = nil, allocatedStorage: Int32? = nil, port: Int32? = nil, licenseModel: String? = nil, dBInstanceClass: String? = nil) {
            self.cACertificateIdentifier = cACertificateIdentifier
            self.multiAZ = multiAZ
            self.processorFeatures = processorFeatures
            self.backupRetentionPeriod = backupRetentionPeriod
            self.storageType = storageType
            self.dBSubnetGroupName = dBSubnetGroupName
            self.engineVersion = engineVersion
            self.iops = iops
            self.pendingCloudwatchLogsExports = pendingCloudwatchLogsExports
            self.masterUserPassword = masterUserPassword
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.allocatedStorage = allocatedStorage
            self.port = port
            self.licenseModel = licenseModel
            self.dBInstanceClass = dBInstanceClass
        }

        private enum CodingKeys: String, CodingKey {
            case cACertificateIdentifier = "CACertificateIdentifier"
            case multiAZ = "MultiAZ"
            case processorFeatures = "ProcessorFeatures"
            case backupRetentionPeriod = "BackupRetentionPeriod"
            case storageType = "StorageType"
            case dBSubnetGroupName = "DBSubnetGroupName"
            case engineVersion = "EngineVersion"
            case iops = "Iops"
            case pendingCloudwatchLogsExports = "PendingCloudwatchLogsExports"
            case masterUserPassword = "MasterUserPassword"
            case dBInstanceIdentifier = "DBInstanceIdentifier"
            case allocatedStorage = "AllocatedStorage"
            case port = "Port"
            case licenseModel = "LicenseModel"
            case dBInstanceClass = "DBInstanceClass"
        }
    }

    public struct PurchaseReservedDBInstancesOfferingResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedDBInstance", required: false, type: .structure)
        ]
        public let reservedDBInstance: ReservedDBInstance?

        public init(reservedDBInstance: ReservedDBInstance? = nil) {
            self.reservedDBInstance = reservedDBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case reservedDBInstance = "ReservedDBInstance"
        }
    }

    public struct DescribeEventSubscriptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionName", required: false, type: .string)
        ]
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        public let maxRecords: Int32?
        /// This parameter is not currently supported.
        public let filters: FilterList?
        ///  An optional pagination token provided by a previous DescribeOrderableDBInstanceOptions request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords . 
        public let marker: String?
        /// The name of the RDS event notification subscription you want to describe.
        public let subscriptionName: String?

        public init(maxRecords: Int32? = nil, filters: FilterList? = nil, marker: String? = nil, subscriptionName: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.marker = marker
            self.subscriptionName = subscriptionName
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case marker = "Marker"
            case subscriptionName = "SubscriptionName"
        }
    }

    public struct DBClusterBacktrack: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "BacktrackIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "BacktrackedFrom", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "BacktrackRequestCreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "BacktrackTo", required: false, type: .timestamp)
        ]
        /// Contains a user-supplied DB cluster identifier. This identifier is the unique key that identifies a DB cluster.
        public let dBClusterIdentifier: String?
        /// Contains the backtrack identifier.
        public let backtrackIdentifier: String?
        /// The timestamp of the time from which the DB cluster was backtracked.
        public let backtrackedFrom: TimeStamp?
        /// The status of the backtrack. This property returns one of the following values:    applying - The backtrack is currently being applied to or rolled back from the DB cluster.    completed - The backtrack has successfully been applied to or rolled back from the DB cluster.    failed - An error occurred while the backtrack was applied to or rolled back from the DB cluster.    pending - The backtrack is currently pending application to or rollback from the DB cluster.  
        public let status: String?
        /// The timestamp of the time at which the backtrack was requested.
        public let backtrackRequestCreationTime: TimeStamp?
        /// The timestamp of the time to which the DB cluster was backtracked.
        public let backtrackTo: TimeStamp?

        public init(dBClusterIdentifier: String? = nil, backtrackIdentifier: String? = nil, backtrackedFrom: TimeStamp? = nil, status: String? = nil, backtrackRequestCreationTime: TimeStamp? = nil, backtrackTo: TimeStamp? = nil) {
            self.dBClusterIdentifier = dBClusterIdentifier
            self.backtrackIdentifier = backtrackIdentifier
            self.backtrackedFrom = backtrackedFrom
            self.status = status
            self.backtrackRequestCreationTime = backtrackRequestCreationTime
            self.backtrackTo = backtrackTo
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
            case backtrackIdentifier = "BacktrackIdentifier"
            case backtrackedFrom = "BacktrackedFrom"
            case status = "Status"
            case backtrackRequestCreationTime = "BacktrackRequestCreationTime"
            case backtrackTo = "BacktrackTo"
        }
    }

    public struct EventCategoriesMap: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventCategories", required: false, type: .structure), 
            AWSShapeMember(label: "SourceType", required: false, type: .string)
        ]
        /// The event categories for the specified source type
        public let eventCategories: EventCategoriesList?
        /// The source type that the returned categories belong to
        public let sourceType: String?

        public init(eventCategories: EventCategoriesList? = nil, sourceType: String? = nil) {
            self.eventCategories = eventCategories
            self.sourceType = sourceType
        }

        private enum CodingKeys: String, CodingKey {
            case eventCategories = "EventCategories"
            case sourceType = "SourceType"
        }
    }

    public struct DomainMembership: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IAMRoleName", required: false, type: .string), 
            AWSShapeMember(label: "Domain", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "FQDN", required: false, type: .string)
        ]
        /// The name of the IAM role to be used when making API calls to the Directory Service.
        public let iAMRoleName: String?
        /// The identifier of the Active Directory Domain.
        public let domain: String?
        /// The status of the DB instance's Active Directory Domain membership, such as joined, pending-join, failed etc).
        public let status: String?
        /// The fully qualified domain name of the Active Directory Domain.
        public let fqdn: String?

        public init(iAMRoleName: String? = nil, domain: String? = nil, status: String? = nil, fqdn: String? = nil) {
            self.iAMRoleName = iAMRoleName
            self.domain = domain
            self.status = status
            self.fqdn = fqdn
        }

        private enum CodingKeys: String, CodingKey {
            case iAMRoleName = "IAMRoleName"
            case domain = "Domain"
            case status = "Status"
            case fqdn = "FQDN"
        }
    }

    public struct EC2SecurityGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EC2SecurityGroupId", required: false, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupOwnerId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "EC2SecurityGroupName", required: false, type: .string)
        ]
        /// Specifies the id of the EC2 security group.
        public let eC2SecurityGroupId: String?
        ///  Specifies the AWS ID of the owner of the EC2 security group specified in the EC2SecurityGroupName field. 
        public let eC2SecurityGroupOwnerId: String?
        /// Provides the status of the EC2 security group. Status can be "authorizing", "authorized", "revoking", and "revoked".
        public let status: String?
        /// Specifies the name of the EC2 security group.
        public let eC2SecurityGroupName: String?

        public init(eC2SecurityGroupId: String? = nil, eC2SecurityGroupOwnerId: String? = nil, status: String? = nil, eC2SecurityGroupName: String? = nil) {
            self.eC2SecurityGroupId = eC2SecurityGroupId
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.status = status
            self.eC2SecurityGroupName = eC2SecurityGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case eC2SecurityGroupId = "EC2SecurityGroupId"
            case eC2SecurityGroupOwnerId = "EC2SecurityGroupOwnerId"
            case status = "Status"
            case eC2SecurityGroupName = "EC2SecurityGroupName"
        }
    }

    public struct OrderableDBInstanceOptionsList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrderableDBInstanceOption", required: false, type: .list)
        ]
        public let orderableDBInstanceOption: [OrderableDBInstanceOption]?

        public init(orderableDBInstanceOption: [OrderableDBInstanceOption]? = nil) {
            self.orderableDBInstanceOption = orderableDBInstanceOption
        }

        private enum CodingKeys: String, CodingKey {
            case orderableDBInstanceOption = "OrderableDBInstanceOption"
        }
    }

    public struct ModifyDBSubnetGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBSubnetGroup", required: false, type: .structure)
        ]
        public let dBSubnetGroup: DBSubnetGroup?

        public init(dBSubnetGroup: DBSubnetGroup? = nil) {
            self.dBSubnetGroup = dBSubnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBSubnetGroup = "DBSubnetGroup"
        }
    }

    public struct PromoteReadReplicaDBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusterIdentifier", required: true, type: .string)
        ]
        /// The identifier of the DB cluster Read Replica to promote. This parameter is not case-sensitive.  Constraints:   Must match the identifier of an existing DBCluster Read Replica.   Example: my-cluster-replica1 
        public let dBClusterIdentifier: String

        public init(dBClusterIdentifier: String) {
            self.dBClusterIdentifier = dBClusterIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusterIdentifier = "DBClusterIdentifier"
        }
    }

    public struct StartDBInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .structure)
        ]
        public let dBInstance: DBInstance?

        public init(dBInstance: DBInstance? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct EngineDefaults: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "DBParameterGroupFamily", required: false, type: .string)
        ]
        /// Contains a list of engine default parameters.
        public let parameters: ParametersList?
        ///  An optional pagination token provided by a previous EngineDefaults request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords . 
        public let marker: String?
        /// Specifies the name of the DB parameter group family that the engine default parameters apply to.
        public let dBParameterGroupFamily: String?

        public init(parameters: ParametersList? = nil, marker: String? = nil, dBParameterGroupFamily: String? = nil) {
            self.parameters = parameters
            self.marker = marker
            self.dBParameterGroupFamily = dBParameterGroupFamily
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case marker = "Marker"
            case dBParameterGroupFamily = "DBParameterGroupFamily"
        }
    }

    public struct Subnet: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SubnetAvailabilityZone", required: false, type: .structure), 
            AWSShapeMember(label: "SubnetStatus", required: false, type: .string)
        ]
        /// Specifies the identifier of the subnet.
        public let subnetIdentifier: String?
        public let subnetAvailabilityZone: AvailabilityZone?
        /// Specifies the status of the subnet.
        public let subnetStatus: String?

        public init(subnetIdentifier: String? = nil, subnetAvailabilityZone: AvailabilityZone? = nil, subnetStatus: String? = nil) {
            self.subnetIdentifier = subnetIdentifier
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetStatus = subnetStatus
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIdentifier = "SubnetIdentifier"
            case subnetAvailabilityZone = "SubnetAvailabilityZone"
            case subnetStatus = "SubnetStatus"
        }
    }

    public struct CreateEventSubscriptionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .structure)
        ]
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct ValidStorageOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionedIops", required: false, type: .structure), 
            AWSShapeMember(label: "StorageSize", required: false, type: .structure), 
            AWSShapeMember(label: "StorageType", required: false, type: .string), 
            AWSShapeMember(label: "IopsToStorageRatio", required: false, type: .structure)
        ]
        /// The valid range of provisioned IOPS. For example, 1000-20000. 
        public let provisionedIops: RangeList?
        /// The valid range of storage in gibibytes. For example, 100 to 16384. 
        public let storageSize: RangeList?
        /// The valid storage types for your DB instance. For example, gp2, io1. 
        public let storageType: String?
        /// The valid range of Provisioned IOPS to gibibytes of storage multiplier. For example, 3-10, which means that provisioned IOPS can be between 3 and 10 times storage. 
        public let iopsToStorageRatio: DoubleRangeList?

        public init(provisionedIops: RangeList? = nil, storageSize: RangeList? = nil, storageType: String? = nil, iopsToStorageRatio: DoubleRangeList? = nil) {
            self.provisionedIops = provisionedIops
            self.storageSize = storageSize
            self.storageType = storageType
            self.iopsToStorageRatio = iopsToStorageRatio
        }

        private enum CodingKeys: String, CodingKey {
            case provisionedIops = "ProvisionedIops"
            case storageSize = "StorageSize"
            case storageType = "StorageType"
            case iopsToStorageRatio = "IopsToStorageRatio"
        }
    }

    public struct AvailabilityZoneList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .list)
        ]
        public let availabilityZone: [AvailabilityZone]?

        public init(availabilityZone: [AvailabilityZone]? = nil) {
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
        }
    }

    public struct SubnetList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subnet", required: false, type: .list)
        ]
        public let subnet: [Subnet]?

        public init(subnet: [Subnet]? = nil) {
            self.subnet = subnet
        }

        private enum CodingKeys: String, CodingKey {
            case subnet = "Subnet"
        }
    }

    public struct ReservedDBInstanceList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedDBInstance", required: false, type: .list)
        ]
        public let reservedDBInstance: [ReservedDBInstance]?

        public init(reservedDBInstance: [ReservedDBInstance]? = nil) {
            self.reservedDBInstance = reservedDBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case reservedDBInstance = "ReservedDBInstance"
        }
    }

    public struct TagList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tag", required: false, type: .list)
        ]
        public let tag: [Tag]?

        public init(tag: [Tag]? = nil) {
            self.tag = tag
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "Tag"
        }
    }

    public struct ResetDBClusterParameterGroupMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResetAllParameters", required: false, type: .boolean), 
            AWSShapeMember(label: "Parameters", required: false, type: .structure), 
            AWSShapeMember(label: "DBClusterParameterGroupName", required: true, type: .string)
        ]
        /// A value that is set to true to reset all parameters in the DB cluster parameter group to their default values, and false otherwise. You can't use this parameter if there is a list of parameter names specified for the Parameters parameter.
        public let resetAllParameters: Bool?
        /// A list of parameter names in the DB cluster parameter group to reset to the default values. You can't use this parameter if the ResetAllParameters parameter is set to true.
        public let parameters: ParametersList?
        /// The name of the DB cluster parameter group to reset.
        public let dBClusterParameterGroupName: String

        public init(resetAllParameters: Bool? = nil, parameters: ParametersList? = nil, dBClusterParameterGroupName: String) {
            self.resetAllParameters = resetAllParameters
            self.parameters = parameters
            self.dBClusterParameterGroupName = dBClusterParameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case resetAllParameters = "ResetAllParameters"
            case parameters = "Parameters"
            case dBClusterParameterGroupName = "DBClusterParameterGroupName"
        }
    }

    public struct DBInstanceList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBInstance", required: false, type: .list)
        ]
        public let dBInstance: [DBInstance]?

        public init(dBInstance: [DBInstance]? = nil) {
            self.dBInstance = dBInstance
        }

        private enum CodingKeys: String, CodingKey {
            case dBInstance = "DBInstance"
        }
    }

    public struct RemoveSourceIdentifierFromSubscriptionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventSubscription", required: false, type: .structure)
        ]
        public let eventSubscription: EventSubscription?

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

        private enum CodingKeys: String, CodingKey {
            case eventSubscription = "EventSubscription"
        }
    }

    public struct CreateDBParameterGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBParameterGroup", required: false, type: .structure)
        ]
        public let dBParameterGroup: DBParameterGroup?

        public init(dBParameterGroup: DBParameterGroup? = nil) {
            self.dBParameterGroup = dBParameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case dBParameterGroup = "DBParameterGroup"
        }
    }

    public struct DBSnapshotAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeName", required: false, type: .string), 
            AWSShapeMember(label: "AttributeValues", required: false, type: .structure)
        ]
        /// The name of the manual DB snapshot attribute. The attribute named restore refers to the list of AWS accounts that have permission to copy or restore the manual DB cluster snapshot. For more information, see the ModifyDBSnapshotAttribute API action.
        public let attributeName: String?
        /// The value or values for the manual DB snapshot attribute. If the AttributeName field is set to restore, then this element returns a list of IDs of the AWS accounts that are authorized to copy or restore the manual DB snapshot. If a value of all is in the list, then the manual DB snapshot is public and available for any AWS account to copy or restore.
        public let attributeValues: AttributeValueList?

        public init(attributeName: String? = nil, attributeValues: AttributeValueList? = nil) {
            self.attributeName = attributeName
            self.attributeValues = attributeValues
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "AttributeName"
            case attributeValues = "AttributeValues"
        }
    }

    public struct DBClusterMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DBClusters", required: false, type: .structure), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Contains a list of DB clusters for the user.
        public let dBClusters: DBClusterList?
        /// A pagination token that can be used in a subsequent DescribeDBClusters request.
        public let marker: String?

        public init(dBClusters: DBClusterList? = nil, marker: String? = nil) {
            self.dBClusters = dBClusters
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case dBClusters = "DBClusters"
            case marker = "Marker"
        }
    }

}