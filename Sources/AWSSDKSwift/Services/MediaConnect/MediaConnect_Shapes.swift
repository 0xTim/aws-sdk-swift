// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension MediaConnect {

    public struct AddFlowOutputsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "Outputs", location: .body(locationName: "outputs"), required: true, type: .list)
        ]
        public let flowArn: String
        /// A list of outputs that you want to add.
        public let outputs: [AddOutputRequest]

        public init(flowArn: String, outputs: [AddOutputRequest]) {
            self.flowArn = flowArn
            self.outputs = outputs
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case outputs = "outputs"
        }
    }

    public struct GrantEntitlementRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subscribers", location: .body(locationName: "subscribers"), required: true, type: .list), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Encryption", location: .body(locationName: "encryption"), required: false, type: .structure)
        ]
        /// The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flows using your content as the source.
        public let subscribers: [String]
        /// The name of the entitlement. This value must be unique within the current flow.
        public let name: String?
        /// A description of the entitlement. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the subscriber or end user.
        public let description: String?
        /// The type of encryption that will be used on the output that is associated with this entitlement.
        public let encryption: Encryption?

        public init(subscribers: [String], name: String? = nil, description: String? = nil, encryption: Encryption? = nil) {
            self.subscribers = subscribers
            self.name = name
            self.description = description
            self.encryption = encryption
        }

        private enum CodingKeys: String, CodingKey {
            case subscribers = "subscribers"
            case name = "name"
            case description = "description"
            case encryption = "encryption"
        }
    }

    public struct ListEntitlementsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Entitlements", location: .body(locationName: "entitlements"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// A list of entitlements that have been granted to you from other AWS accounts.
        public let entitlements: [ListedEntitlement]?
        /// The token that identifies which batch of results that you want to see. For example, you submit a ListEntitlements request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListEntitlements request a second time and specify the NextToken value.
        public let nextToken: String?

        public init(entitlements: [ListedEntitlement]? = nil, nextToken: String? = nil) {
            self.entitlements = entitlements
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case entitlements = "entitlements"
            case nextToken = "nextToken"
        }
    }

    public struct StartFlowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string)
        ]
        public let flowArn: String

        public init(flowArn: String) {
            self.flowArn = flowArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
        }
    }

    public struct UpdateFlowEntitlementResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "Entitlement", location: .body(locationName: "entitlement"), required: false, type: .structure)
        ]
        /// The ARN of the flow that this entitlement was granted on.
        public let flowArn: String?
        public let entitlement: Entitlement?

        public init(flowArn: String? = nil, entitlement: Entitlement? = nil) {
            self.flowArn = flowArn
            self.entitlement = entitlement
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case entitlement = "entitlement"
        }
    }

    public struct Flow: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Outputs", location: .body(locationName: "outputs"), required: true, type: .list), 
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: true, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: true, type: .enum), 
            AWSShapeMember(label: "Entitlements", location: .body(locationName: "entitlements"), required: true, type: .list), 
            AWSShapeMember(label: "EgressIp", location: .body(locationName: "egressIp"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "Source", location: .body(locationName: "source"), required: true, type: .structure)
        ]
        /// The outputs in this flow.
        public let outputs: [Output]
        /// The Amazon Resource Name (ARN), a unique identifier for any AWS resource, of the flow.
        public let flowArn: String
        /// The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS.
        public let availabilityZone: String
        /// The current status of the flow.
        public let status: Status
        /// The entitlements in this flow.
        public let entitlements: [Entitlement]
        /// The IP address from which video will be sent to output destinations.
        public let egressIp: String?
        /// A description of the flow. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
        public let description: String?
        /// The name of the flow.
        public let name: String
        public let source: Source

        public init(outputs: [Output], flowArn: String, availabilityZone: String, status: Status, entitlements: [Entitlement], egressIp: String? = nil, description: String? = nil, name: String, source: Source) {
            self.outputs = outputs
            self.flowArn = flowArn
            self.availabilityZone = availabilityZone
            self.status = status
            self.entitlements = entitlements
            self.egressIp = egressIp
            self.description = description
            self.name = name
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case outputs = "outputs"
            case flowArn = "flowArn"
            case availabilityZone = "availabilityZone"
            case status = "status"
            case entitlements = "entitlements"
            case egressIp = "egressIp"
            case description = "description"
            case name = "name"
            case source = "source"
        }
    }

    public enum Status: String, CustomStringConvertible, Codable {
        case standby = "STANDBY"
        case active = "ACTIVE"
        case updating = "UPDATING"
        case deleting = "DELETING"
        case starting = "STARTING"
        case stopping = "STOPPING"
        case error = "ERROR"
        public var description: String { return self.rawValue }
    }

    public enum SourceType: String, CustomStringConvertible, Codable {
        case owned = "OWNED"
        case entitled = "ENTITLED"
        public var description: String { return self.rawValue }
    }

    public struct UpdateEncryption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", location: .body(locationName: "roleArn"), required: false, type: .string), 
            AWSShapeMember(label: "KeyType", location: .body(locationName: "keyType"), required: false, type: .enum), 
            AWSShapeMember(label: "Algorithm", location: .body(locationName: "algorithm"), required: false, type: .enum), 
            AWSShapeMember(label: "SecretArn", location: .body(locationName: "secretArn"), required: false, type: .string)
        ]
        /// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
        public let roleArn: String?
        /// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
        public let keyType: KeyType?
        /// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
        public let algorithm: Algorithm?
        /// The ARN that was assigned to the secret that you created in AWS Secrets Manager to store the encryption key.
        public let secretArn: String?

        public init(roleArn: String? = nil, keyType: KeyType? = nil, algorithm: Algorithm? = nil, secretArn: String? = nil) {
            self.roleArn = roleArn
            self.keyType = keyType
            self.algorithm = algorithm
            self.secretArn = secretArn
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case keyType = "keyType"
            case algorithm = "algorithm"
            case secretArn = "secretArn"
        }
    }

    public struct AddOutputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: true, type: .enum), 
            AWSShapeMember(label: "Destination", location: .body(locationName: "destination"), required: true, type: .string), 
            AWSShapeMember(label: "Port", location: .body(locationName: "port"), required: true, type: .integer), 
            AWSShapeMember(label: "Encryption", location: .body(locationName: "encryption"), required: false, type: .structure), 
            AWSShapeMember(label: "SmoothingLatency", location: .body(locationName: "smoothingLatency"), required: false, type: .integer), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "MaxLatency", location: .body(locationName: "maxLatency"), required: false, type: .integer), 
            AWSShapeMember(label: "StreamId", location: .body(locationName: "streamId"), required: false, type: .string)
        ]
        /// The protocol to use for the output.
        public let `protocol`: Protocol
        /// The IP address from which video will be sent to output destinations.
        public let destination: String
        /// The port to use when content is distributed to this output.
        public let port: Int32
        /// The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
        public let encryption: Encryption?
        /// The smoothing latency in milliseconds for RTP and RTP-FEC streams.
        public let smoothingLatency: Int32?
        /// A description of the output. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the end user.
        public let description: String?
        /// The name of the output. This value must be unique within the current flow.
        public let name: String?
        /// The maximum latency in milliseconds for Zixi-based streams.
        public let maxLatency: Int32?
        /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
        public let streamId: String?

        public init(protocol: Protocol, destination: String, port: Int32, encryption: Encryption? = nil, smoothingLatency: Int32? = nil, description: String? = nil, name: String? = nil, maxLatency: Int32? = nil, streamId: String? = nil) {
            self.`protocol` = `protocol`
            self.destination = destination
            self.port = port
            self.encryption = encryption
            self.smoothingLatency = smoothingLatency
            self.description = description
            self.name = name
            self.maxLatency = maxLatency
            self.streamId = streamId
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "protocol"
            case destination = "destination"
            case port = "port"
            case encryption = "encryption"
            case smoothingLatency = "smoothingLatency"
            case description = "description"
            case name = "name"
            case maxLatency = "maxLatency"
            case streamId = "streamId"
        }
    }

    public struct Source: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceArn", location: .body(locationName: "sourceArn"), required: true, type: .string), 
            AWSShapeMember(label: "Decryption", location: .body(locationName: "decryption"), required: false, type: .structure), 
            AWSShapeMember(label: "IngestIp", location: .body(locationName: "ingestIp"), required: false, type: .string), 
            AWSShapeMember(label: "IngestPort", location: .body(locationName: "ingestPort"), required: false, type: .integer), 
            AWSShapeMember(label: "EntitlementArn", location: .body(locationName: "entitlementArn"), required: false, type: .string), 
            AWSShapeMember(label: "WhitelistCidr", location: .body(locationName: "whitelistCidr"), required: false, type: .string), 
            AWSShapeMember(label: "Transport", location: .body(locationName: "transport"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string)
        ]
        /// The ARN of the source.
        public let sourceArn: String
        /// The type of encryption that is used on the content ingested from this source.
        public let decryption: Encryption?
        /// The IP address that the flow will be listening on for incoming content.
        public let ingestIp: String?
        /// The port that the flow will be listening on for incoming content.
        public let ingestPort: Int32?
        /// The ARN of the entitlement that allows you to subscribe to content that comes from another AWS account. The entitlement is set by the content originator and the ARN is generated as part of the originator's flow.
        public let entitlementArn: String?
        /// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
        public let whitelistCidr: String?
        /// Attributes related to the transport stream that are used in the source.
        public let transport: Transport?
        /// The name of the source.
        public let name: String
        /// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
        public let description: String?

        public init(sourceArn: String, decryption: Encryption? = nil, ingestIp: String? = nil, ingestPort: Int32? = nil, entitlementArn: String? = nil, whitelistCidr: String? = nil, transport: Transport? = nil, name: String, description: String? = nil) {
            self.sourceArn = sourceArn
            self.decryption = decryption
            self.ingestIp = ingestIp
            self.ingestPort = ingestPort
            self.entitlementArn = entitlementArn
            self.whitelistCidr = whitelistCidr
            self.transport = transport
            self.name = name
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case sourceArn = "sourceArn"
            case decryption = "decryption"
            case ingestIp = "ingestIp"
            case ingestPort = "ingestPort"
            case entitlementArn = "entitlementArn"
            case whitelistCidr = "whitelistCidr"
            case transport = "transport"
            case name = "name"
            case description = "description"
        }
    }

    public struct ListFlowsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        public let maxResults: Int32?
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct SetSourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: false, type: .enum), 
            AWSShapeMember(label: "Decryption", location: .body(locationName: "decryption"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxBitrate", location: .body(locationName: "maxBitrate"), required: false, type: .integer), 
            AWSShapeMember(label: "EntitlementArn", location: .body(locationName: "entitlementArn"), required: false, type: .string), 
            AWSShapeMember(label: "IngestPort", location: .body(locationName: "ingestPort"), required: false, type: .integer), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "WhitelistCidr", location: .body(locationName: "whitelistCidr"), required: false, type: .string), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: false, type: .string), 
            AWSShapeMember(label: "StreamId", location: .body(locationName: "streamId"), required: false, type: .string), 
            AWSShapeMember(label: "MaxLatency", location: .body(locationName: "maxLatency"), required: false, type: .integer)
        ]
        /// The protocol that is used by the source.
        public let `protocol`: Protocol?
        /// The type of encryption that is used on the content ingested from this source.
        public let decryption: Encryption?
        /// The smoothing max bitrate for RTP and RTP-FEC streams.
        public let maxBitrate: Int32?
        /// The ARN of the entitlement that allows you to subscribe to this flow. The entitlement is set by the flow originator, and the ARN is generated as part of the originator's flow.
        public let entitlementArn: String?
        /// The port that the flow will be listening on for incoming content.
        public let ingestPort: Int32?
        /// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
        public let description: String?
        /// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
        public let whitelistCidr: String?
        /// The name of the source.
        public let name: String?
        /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
        public let streamId: String?
        /// The maximum latency in milliseconds for Zixi-based streams.
        public let maxLatency: Int32?

        public init(protocol: Protocol? = nil, decryption: Encryption? = nil, maxBitrate: Int32? = nil, entitlementArn: String? = nil, ingestPort: Int32? = nil, description: String? = nil, whitelistCidr: String? = nil, name: String? = nil, streamId: String? = nil, maxLatency: Int32? = nil) {
            self.`protocol` = `protocol`
            self.decryption = decryption
            self.maxBitrate = maxBitrate
            self.entitlementArn = entitlementArn
            self.ingestPort = ingestPort
            self.description = description
            self.whitelistCidr = whitelistCidr
            self.name = name
            self.streamId = streamId
            self.maxLatency = maxLatency
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "protocol"
            case decryption = "decryption"
            case maxBitrate = "maxBitrate"
            case entitlementArn = "entitlementArn"
            case ingestPort = "ingestPort"
            case description = "description"
            case whitelistCidr = "whitelistCidr"
            case name = "name"
            case streamId = "streamId"
            case maxLatency = "maxLatency"
        }
    }

    public struct RevokeFlowEntitlementResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "EntitlementArn", location: .body(locationName: "entitlementArn"), required: false, type: .string)
        ]
        /// The ARN of the flow that the entitlement was revoked from.
        public let flowArn: String?
        /// The ARN of the entitlement that was revoked.
        public let entitlementArn: String?

        public init(flowArn: String? = nil, entitlementArn: String? = nil) {
            self.flowArn = flowArn
            self.entitlementArn = entitlementArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case entitlementArn = "entitlementArn"
        }
    }

    public struct Transport: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxLatency", location: .body(locationName: "maxLatency"), required: false, type: .integer), 
            AWSShapeMember(label: "SmoothingLatency", location: .body(locationName: "smoothingLatency"), required: false, type: .integer), 
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: true, type: .enum), 
            AWSShapeMember(label: "StreamId", location: .body(locationName: "streamId"), required: false, type: .string), 
            AWSShapeMember(label: "MaxBitrate", location: .body(locationName: "maxBitrate"), required: false, type: .integer)
        ]
        /// The maximum latency in milliseconds for Zixi-based streams.
        public let maxLatency: Int32?
        /// The smoothing latency in milliseconds for RTP and RTP-FEC streams.
        public let smoothingLatency: Int32?
        /// The protocol that is used by the source or output.
        public let `protocol`: Protocol
        /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
        public let streamId: String?
        /// The smoothing max bitrate for RTP and RTP-FEC streams.
        public let maxBitrate: Int32?

        public init(maxLatency: Int32? = nil, smoothingLatency: Int32? = nil, protocol: Protocol, streamId: String? = nil, maxBitrate: Int32? = nil) {
            self.maxLatency = maxLatency
            self.smoothingLatency = smoothingLatency
            self.`protocol` = `protocol`
            self.streamId = streamId
            self.maxBitrate = maxBitrate
        }

        private enum CodingKeys: String, CodingKey {
            case maxLatency = "maxLatency"
            case smoothingLatency = "smoothingLatency"
            case `protocol` = "protocol"
            case streamId = "streamId"
            case maxBitrate = "maxBitrate"
        }
    }

    public struct UpdateFlowSourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: false, type: .enum), 
            AWSShapeMember(label: "Decryption", location: .body(locationName: "decryption"), required: false, type: .structure), 
            AWSShapeMember(label: "MaxBitrate", location: .body(locationName: "maxBitrate"), required: false, type: .integer), 
            AWSShapeMember(label: "EntitlementArn", location: .body(locationName: "entitlementArn"), required: false, type: .string), 
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "IngestPort", location: .body(locationName: "ingestPort"), required: false, type: .integer), 
            AWSShapeMember(label: "StreamId", location: .body(locationName: "streamId"), required: false, type: .string), 
            AWSShapeMember(label: "WhitelistCidr", location: .body(locationName: "whitelistCidr"), required: false, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "MaxLatency", location: .body(locationName: "maxLatency"), required: false, type: .integer), 
            AWSShapeMember(label: "SourceArn", location: .uri(locationName: "sourceArn"), required: true, type: .string)
        ]
        /// The protocol that is used by the source.
        public let `protocol`: Protocol?
        /// The type of encryption used on the content ingested from this source.
        public let decryption: UpdateEncryption?
        /// The smoothing max bitrate for RTP and RTP-FEC streams.
        public let maxBitrate: Int32?
        /// The ARN of the entitlement that allows you to subscribe to this flow. The entitlement is set by the flow originator, and the ARN is generated as part of the originator's flow.
        public let entitlementArn: String?
        public let flowArn: String
        /// The port that the flow will be listening on for incoming content.
        public let ingestPort: Int32?
        /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
        public let streamId: String?
        /// The range of IP addresses that should be allowed to contribute content to your source. These IP addresses should in the form of a Classless Inter-Domain Routing (CIDR) block; for example, 10.0.0.0/16.
        public let whitelistCidr: String?
        /// A description for the source. This value is not used or seen outside of the current AWS Elemental MediaConnect account.
        public let description: String?
        /// The maximum latency in milliseconds for Zixi-based streams.
        public let maxLatency: Int32?
        public let sourceArn: String

        public init(protocol: Protocol? = nil, decryption: UpdateEncryption? = nil, maxBitrate: Int32? = nil, entitlementArn: String? = nil, flowArn: String, ingestPort: Int32? = nil, streamId: String? = nil, whitelistCidr: String? = nil, description: String? = nil, maxLatency: Int32? = nil, sourceArn: String) {
            self.`protocol` = `protocol`
            self.decryption = decryption
            self.maxBitrate = maxBitrate
            self.entitlementArn = entitlementArn
            self.flowArn = flowArn
            self.ingestPort = ingestPort
            self.streamId = streamId
            self.whitelistCidr = whitelistCidr
            self.description = description
            self.maxLatency = maxLatency
            self.sourceArn = sourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "protocol"
            case decryption = "decryption"
            case maxBitrate = "maxBitrate"
            case entitlementArn = "entitlementArn"
            case flowArn = "flowArn"
            case ingestPort = "ingestPort"
            case streamId = "streamId"
            case whitelistCidr = "whitelistCidr"
            case description = "description"
            case maxLatency = "maxLatency"
            case sourceArn = "sourceArn"
        }
    }

    public struct RemoveFlowOutputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "OutputArn", location: .uri(locationName: "outputArn"), required: true, type: .string)
        ]
        public let flowArn: String
        public let outputArn: String

        public init(flowArn: String, outputArn: String) {
            self.flowArn = flowArn
            self.outputArn = outputArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case outputArn = "outputArn"
        }
    }

    public struct UpdateFlowSourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "Source", location: .body(locationName: "source"), required: false, type: .structure)
        ]
        /// The ARN of the flow that you want to update.
        public let flowArn: String?
        /// The settings for the source of the flow.
        public let source: Source?

        public init(flowArn: String? = nil, source: Source? = nil) {
            self.flowArn = flowArn
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case source = "source"
        }
    }

    public struct Encryption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", location: .body(locationName: "roleArn"), required: true, type: .string), 
            AWSShapeMember(label: "KeyType", location: .body(locationName: "keyType"), required: false, type: .enum), 
            AWSShapeMember(label: "Algorithm", location: .body(locationName: "algorithm"), required: true, type: .enum), 
            AWSShapeMember(label: "SecretArn", location: .body(locationName: "secretArn"), required: true, type: .string)
        ]
        /// The ARN of the role that you created during setup (when you set up AWS Elemental MediaConnect as a trusted entity).
        public let roleArn: String
        /// The type of key that is used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
        public let keyType: KeyType?
        /// The type of algorithm that is used for the encryption (such as aes128, aes192, or aes256).
        public let algorithm: Algorithm
        /// The ARN that was assigned to the secret that you created in AWS Secrets Manager to store the encryption key.
        public let secretArn: String

        public init(roleArn: String, keyType: KeyType? = nil, algorithm: Algorithm, secretArn: String) {
            self.roleArn = roleArn
            self.keyType = keyType
            self.algorithm = algorithm
            self.secretArn = secretArn
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case keyType = "keyType"
            case algorithm = "algorithm"
            case secretArn = "secretArn"
        }
    }

    public struct DescribeFlowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string)
        ]
        public let flowArn: String

        public init(flowArn: String) {
            self.flowArn = flowArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
        }
    }

    public struct RemoveFlowOutputResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "OutputArn", location: .body(locationName: "outputArn"), required: false, type: .string)
        ]
        /// The ARN of the flow that is associated with the output you removed.
        public let flowArn: String?
        /// The ARN of the output that was removed.
        public let outputArn: String?

        public init(flowArn: String? = nil, outputArn: String? = nil) {
            self.flowArn = flowArn
            self.outputArn = outputArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case outputArn = "outputArn"
        }
    }

    public struct UpdateFlowOutputResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "Output", location: .body(locationName: "output"), required: false, type: .structure)
        ]
        /// The ARN of the flow that is associated with the updated output.
        public let flowArn: String?
        public let output: Output?

        public init(flowArn: String? = nil, output: Output? = nil) {
            self.flowArn = flowArn
            self.output = output
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case output = "output"
        }
    }

    public enum `Protocol`: String, CustomStringConvertible, Codable {
        case zixiPush = "zixi-push"
        case rtpFec = "rtp-fec"
        case rtp = "rtp"
        public var description: String { return self.rawValue }
    }

    public struct GrantFlowEntitlementsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "Entitlements", location: .body(locationName: "entitlements"), required: false, type: .list)
        ]
        /// The ARN of the flow that these entitlements were granted to.
        public let flowArn: String?
        /// The entitlements that were just granted.
        public let entitlements: [Entitlement]?

        public init(flowArn: String? = nil, entitlements: [Entitlement]? = nil) {
            self.flowArn = flowArn
            self.entitlements = entitlements
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case entitlements = "entitlements"
        }
    }

    public struct ListFlowsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Flows", location: .body(locationName: "flows"), required: false, type: .list), 
            AWSShapeMember(label: "NextToken", location: .body(locationName: "nextToken"), required: false, type: .string)
        ]
        /// A list of flow summaries.
        public let flows: [ListedFlow]?
        /// The token that identifies which batch of results that you want to see. For example, you submit a ListFlows request with MaxResults set at 5. The service returns the first batch of results (up to 5) and a NextToken value. To see the next batch of results, you can submit the ListFlows request a second time and specify the NextToken value.
        public let nextToken: String?

        public init(flows: [ListedFlow]? = nil, nextToken: String? = nil) {
            self.flows = flows
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case flows = "flows"
            case nextToken = "nextToken"
        }
    }

    public struct RevokeFlowEntitlementRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "EntitlementArn", location: .uri(locationName: "entitlementArn"), required: true, type: .string)
        ]
        public let flowArn: String
        public let entitlementArn: String

        public init(flowArn: String, entitlementArn: String) {
            self.flowArn = flowArn
            self.entitlementArn = entitlementArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case entitlementArn = "entitlementArn"
        }
    }

    public enum KeyType: String, CustomStringConvertible, Codable {
        case staticKey = "static-key"
        public var description: String { return self.rawValue }
    }

    public struct UpdateFlowEntitlementRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Encryption", location: .body(locationName: "encryption"), required: false, type: .structure), 
            AWSShapeMember(label: "Subscribers", location: .body(locationName: "subscribers"), required: false, type: .list), 
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "EntitlementArn", location: .uri(locationName: "entitlementArn"), required: true, type: .string)
        ]
        /// The type of encryption that will be used on the output associated with this entitlement.
        public let encryption: UpdateEncryption?
        /// The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.
        public let subscribers: [String]?
        public let flowArn: String
        /// A description of the entitlement. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the subscriber or end user.
        public let description: String?
        public let entitlementArn: String

        public init(encryption: UpdateEncryption? = nil, subscribers: [String]? = nil, flowArn: String, description: String? = nil, entitlementArn: String) {
            self.encryption = encryption
            self.subscribers = subscribers
            self.flowArn = flowArn
            self.description = description
            self.entitlementArn = entitlementArn
        }

        private enum CodingKeys: String, CodingKey {
            case encryption = "encryption"
            case subscribers = "subscribers"
            case flowArn = "flowArn"
            case description = "description"
            case entitlementArn = "entitlementArn"
        }
    }

    public struct ListedEntitlement: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EntitlementArn", location: .body(locationName: "entitlementArn"), required: true, type: .string), 
            AWSShapeMember(label: "EntitlementName", location: .body(locationName: "entitlementName"), required: true, type: .string)
        ]
        /// The ARN of the entitlement.
        public let entitlementArn: String
        /// The name of the entitlement.
        public let entitlementName: String

        public init(entitlementArn: String, entitlementName: String) {
            self.entitlementArn = entitlementArn
            self.entitlementName = entitlementName
        }

        private enum CodingKeys: String, CodingKey {
            case entitlementArn = "entitlementArn"
            case entitlementName = "entitlementName"
        }
    }

    public struct UpdateFlowOutputRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Protocol", location: .body(locationName: "protocol"), required: false, type: .enum), 
            AWSShapeMember(label: "OutputArn", location: .uri(locationName: "outputArn"), required: true, type: .string), 
            AWSShapeMember(label: "Destination", location: .body(locationName: "destination"), required: false, type: .string), 
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "Port", location: .body(locationName: "port"), required: false, type: .integer), 
            AWSShapeMember(label: "Encryption", location: .body(locationName: "encryption"), required: false, type: .structure), 
            AWSShapeMember(label: "SmoothingLatency", location: .body(locationName: "smoothingLatency"), required: false, type: .integer), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "StreamId", location: .body(locationName: "streamId"), required: false, type: .string), 
            AWSShapeMember(label: "MaxLatency", location: .body(locationName: "maxLatency"), required: false, type: .integer)
        ]
        /// The protocol to use for the output.
        public let `protocol`: Protocol?
        public let outputArn: String
        /// The IP address where you want to send the output.
        public let destination: String?
        public let flowArn: String
        /// The port to use when content is distributed to this output.
        public let port: Int32?
        /// The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
        public let encryption: UpdateEncryption?
        /// The smoothing latency in milliseconds for RTP and RTP-FEC streams.
        public let smoothingLatency: Int32?
        /// A description of the output. This description appears only on the AWS Elemental MediaConnect console and will not be seen by the end user.
        public let description: String?
        /// The stream ID that you want to use for this transport. This parameter applies only to Zixi-based streams.
        public let streamId: String?
        /// The maximum latency in milliseconds for Zixi-based streams.
        public let maxLatency: Int32?

        public init(protocol: Protocol? = nil, outputArn: String, destination: String? = nil, flowArn: String, port: Int32? = nil, encryption: UpdateEncryption? = nil, smoothingLatency: Int32? = nil, description: String? = nil, streamId: String? = nil, maxLatency: Int32? = nil) {
            self.`protocol` = `protocol`
            self.outputArn = outputArn
            self.destination = destination
            self.flowArn = flowArn
            self.port = port
            self.encryption = encryption
            self.smoothingLatency = smoothingLatency
            self.description = description
            self.streamId = streamId
            self.maxLatency = maxLatency
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "protocol"
            case outputArn = "outputArn"
            case destination = "destination"
            case flowArn = "flowArn"
            case port = "port"
            case encryption = "encryption"
            case smoothingLatency = "smoothingLatency"
            case description = "description"
            case streamId = "streamId"
            case maxLatency = "maxLatency"
        }
    }

    public struct StartFlowResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        /// The ARN of the flow that you started.
        public let flowArn: String?
        /// The status of the flow when the StartFlow process begins.
        public let status: Status?

        public init(flowArn: String? = nil, status: Status? = nil) {
            self.flowArn = flowArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case status = "status"
        }
    }

    public struct DeleteFlowResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        /// The ARN of the flow that was deleted.
        public let flowArn: String?
        /// The status of the flow when the DeleteFlow process begins.
        public let status: Status?

        public init(flowArn: String? = nil, status: Status? = nil) {
            self.flowArn = flowArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case status = "status"
        }
    }

    public struct StopFlowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string)
        ]
        public let flowArn: String

        public init(flowArn: String) {
            self.flowArn = flowArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
        }
    }

    public enum Algorithm: String, CustomStringConvertible, Codable {
        case aes128 = "aes128"
        case aes192 = "aes192"
        case aes256 = "aes256"
        public var description: String { return self.rawValue }
    }

    public struct AddFlowOutputsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "Outputs", location: .body(locationName: "outputs"), required: false, type: .list)
        ]
        /// The ARN of the flow that these outputs were added to.
        public let flowArn: String?
        /// The details of the newly added outputs.
        public let outputs: [Output]?

        public init(flowArn: String? = nil, outputs: [Output]? = nil) {
            self.flowArn = flowArn
            self.outputs = outputs
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case outputs = "outputs"
        }
    }

    public struct Messages: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Errors", location: .body(locationName: "errors"), required: true, type: .list)
        ]
        /// A list of errors that might have been generated from processes on this flow.
        public let errors: [String]

        public init(errors: [String]) {
            self.errors = errors
        }

        private enum CodingKeys: String, CodingKey {
            case errors = "errors"
        }
    }

    public struct Output: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MediaLiveInputArn", location: .body(locationName: "mediaLiveInputArn"), required: false, type: .string), 
            AWSShapeMember(label: "OutputArn", location: .body(locationName: "outputArn"), required: true, type: .string), 
            AWSShapeMember(label: "Destination", location: .body(locationName: "destination"), required: false, type: .string), 
            AWSShapeMember(label: "EntitlementArn", location: .body(locationName: "entitlementArn"), required: false, type: .string), 
            AWSShapeMember(label: "Port", location: .body(locationName: "port"), required: false, type: .integer), 
            AWSShapeMember(label: "Encryption", location: .body(locationName: "encryption"), required: false, type: .structure), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "Transport", location: .body(locationName: "transport"), required: false, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string)
        ]
        /// The input ARN of the AWS Elemental MediaLive channel. This parameter is relevant only for outputs that were added by creating a MediaLive input.
        public let mediaLiveInputArn: String?
        /// The ARN of the output.
        public let outputArn: String
        /// The address where you want to send the output.
        public let destination: String?
        /// The ARN of the entitlement on the originator''s flow. This value is relevant only on entitled flows.
        public let entitlementArn: String?
        /// The port to use when content is distributed to this output.
        public let port: Int32?
        /// The type of key used for the encryption. If no keyType is provided, the service will use the default setting (static-key).
        public let encryption: Encryption?
        /// A description of the output.
        public let description: String?
        /// Attributes related to the transport stream that are used in the output.
        public let transport: Transport?
        /// The name of the output. This value must be unique within the current flow.
        public let name: String

        public init(mediaLiveInputArn: String? = nil, outputArn: String, destination: String? = nil, entitlementArn: String? = nil, port: Int32? = nil, encryption: Encryption? = nil, description: String? = nil, transport: Transport? = nil, name: String) {
            self.mediaLiveInputArn = mediaLiveInputArn
            self.outputArn = outputArn
            self.destination = destination
            self.entitlementArn = entitlementArn
            self.port = port
            self.encryption = encryption
            self.description = description
            self.transport = transport
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case mediaLiveInputArn = "mediaLiveInputArn"
            case outputArn = "outputArn"
            case destination = "destination"
            case entitlementArn = "entitlementArn"
            case port = "port"
            case encryption = "encryption"
            case description = "description"
            case transport = "transport"
            case name = "name"
        }
    }

    public struct CreateFlowResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Flow", location: .body(locationName: "flow"), required: false, type: .structure)
        ]
        public let flow: Flow?

        public init(flow: Flow? = nil) {
            self.flow = flow
        }

        private enum CodingKeys: String, CodingKey {
            case flow = "flow"
        }
    }

    public struct Entitlement: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Encryption", location: .body(locationName: "encryption"), required: false, type: .structure), 
            AWSShapeMember(label: "Subscribers", location: .body(locationName: "subscribers"), required: true, type: .list), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: false, type: .string), 
            AWSShapeMember(label: "EntitlementArn", location: .body(locationName: "entitlementArn"), required: true, type: .string)
        ]
        /// The type of encryption that will be used on the output that is associated with this entitlement.
        public let encryption: Encryption?
        /// The AWS account IDs that you want to share your content with. The receiving accounts (subscribers) will be allowed to create their own flow using your content as the source.
        public let subscribers: [String]
        /// The name of the entitlement.
        public let name: String
        /// A description of the entitlement.
        public let description: String?
        /// The ARN of the entitlement.
        public let entitlementArn: String

        public init(encryption: Encryption? = nil, subscribers: [String], name: String, description: String? = nil, entitlementArn: String) {
            self.encryption = encryption
            self.subscribers = subscribers
            self.name = name
            self.description = description
            self.entitlementArn = entitlementArn
        }

        private enum CodingKeys: String, CodingKey {
            case encryption = "encryption"
            case subscribers = "subscribers"
            case name = "name"
            case description = "description"
            case entitlementArn = "entitlementArn"
        }
    }

    public struct ListedFlow: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: true, type: .enum), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: true, type: .string), 
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "SourceType", location: .body(locationName: "sourceType"), required: true, type: .enum), 
            AWSShapeMember(label: "Description", location: .body(locationName: "description"), required: true, type: .string)
        ]
        /// The current status of the flow.
        public let status: Status
        /// The name of the flow.
        public let name: String
        /// The Availability Zone that the flow was created in.
        public let availabilityZone: String
        /// The ARN of the flow.
        public let flowArn: String
        /// The type of source. This value is either owned (originated somewhere other than an AWS Elemental MediaConnect flow owned by another AWS account) or entitled (originated at an AWS Elemental MediaConnect flow owned by another AWS account).
        public let sourceType: SourceType
        /// A description of the flow.
        public let description: String

        public init(status: Status, name: String, availabilityZone: String, flowArn: String, sourceType: SourceType, description: String) {
            self.status = status
            self.name = name
            self.availabilityZone = availabilityZone
            self.flowArn = flowArn
            self.sourceType = sourceType
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case name = "name"
            case availabilityZone = "availabilityZone"
            case flowArn = "flowArn"
            case sourceType = "sourceType"
            case description = "description"
        }
    }

    public struct GrantFlowEntitlementsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string), 
            AWSShapeMember(label: "Entitlements", location: .body(locationName: "entitlements"), required: true, type: .list)
        ]
        public let flowArn: String
        /// The list of entitlements that you want to grant.
        public let entitlements: [GrantEntitlementRequest]

        public init(flowArn: String, entitlements: [GrantEntitlementRequest]) {
            self.flowArn = flowArn
            self.entitlements = entitlements
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case entitlements = "entitlements"
        }
    }

    public struct DescribeFlowResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Flow", location: .body(locationName: "flow"), required: false, type: .structure), 
            AWSShapeMember(label: "Messages", location: .body(locationName: "messages"), required: false, type: .structure)
        ]
        public let flow: Flow?
        public let messages: Messages?

        public init(flow: Flow? = nil, messages: Messages? = nil) {
            self.flow = flow
            self.messages = messages
        }

        private enum CodingKeys: String, CodingKey {
            case flow = "flow"
            case messages = "messages"
        }
    }

    public struct ListEntitlementsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        public let maxResults: Int32?
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteFlowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .uri(locationName: "flowArn"), required: true, type: .string)
        ]
        public let flowArn: String

        public init(flowArn: String) {
            self.flowArn = flowArn
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
        }
    }

    public struct CreateFlowRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Outputs", location: .body(locationName: "outputs"), required: false, type: .list), 
            AWSShapeMember(label: "Source", location: .body(locationName: "source"), required: true, type: .structure), 
            AWSShapeMember(label: "Name", location: .body(locationName: "name"), required: true, type: .string), 
            AWSShapeMember(label: "AvailabilityZone", location: .body(locationName: "availabilityZone"), required: false, type: .string), 
            AWSShapeMember(label: "Entitlements", location: .body(locationName: "entitlements"), required: false, type: .list)
        ]
        /// The outputs that you want to add to this flow.
        public let outputs: [AddOutputRequest]?
        public let source: SetSourceRequest
        /// The name of the flow.
        public let name: String
        /// The Availability Zone that you want to create the flow in. These options are limited to the Availability Zones within the current AWS Region.
        public let availabilityZone: String?
        /// The entitlements that you want to grant on a flow.
        public let entitlements: [GrantEntitlementRequest]?

        public init(outputs: [AddOutputRequest]? = nil, source: SetSourceRequest, name: String, availabilityZone: String? = nil, entitlements: [GrantEntitlementRequest]? = nil) {
            self.outputs = outputs
            self.source = source
            self.name = name
            self.availabilityZone = availabilityZone
            self.entitlements = entitlements
        }

        private enum CodingKeys: String, CodingKey {
            case outputs = "outputs"
            case source = "source"
            case name = "name"
            case availabilityZone = "availabilityZone"
            case entitlements = "entitlements"
        }
    }

    public struct StopFlowResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FlowArn", location: .body(locationName: "flowArn"), required: false, type: .string), 
            AWSShapeMember(label: "Status", location: .body(locationName: "status"), required: false, type: .enum)
        ]
        /// The ARN of the flow that you stopped.
        public let flowArn: String?
        /// The status of the flow when the StopFlow process begins.
        public let status: Status?

        public init(flowArn: String? = nil, status: Status? = nil) {
            self.flowArn = flowArn
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case flowArn = "flowArn"
            case status = "status"
        }
    }

    public struct ResponseError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: true, type: .string)
        ]
        /// The error message returned by AWS Elemental MediaConnect.
        public let message: String

        public init(message: String) {
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
        }
    }

}