// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Firehose {

    public struct StartDeliveryStreamEncryptionOutput: AWSShape {

    }

    public struct UntagDeliveryStreamInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagKeys", required: true, type: .list), 
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string)
        ]
        /// A list of tag keys. Each corresponding tag is removed from the delivery stream.
        public let tagKeys: [String]
        /// The name of the delivery stream.
        public let deliveryStreamName: String

        public init(tagKeys: [String], deliveryStreamName: String) {
            self.tagKeys = tagKeys
            self.deliveryStreamName = deliveryStreamName
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeys = "TagKeys"
            case deliveryStreamName = "DeliveryStreamName"
        }
    }

    public struct HiveJsonSerDe: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TimestampFormats", required: false, type: .list)
        ]
        /// Indicates how you want Kinesis Data Firehose to parse the date and time stamps that may be present in your input data JSON. To specify these format strings, follow the pattern syntax of JodaTime's DateTimeFormat format strings. For more information, see Class DateTimeFormat. You can also use the special value millis to parse time stamps in epoch milliseconds. If you don't specify a format, Kinesis Data Firehose uses java.sql.Timestamp::valueOf by default.
        public let timestampFormats: [String]?

        public init(timestampFormats: [String]? = nil) {
            self.timestampFormats = timestampFormats
        }

        private enum CodingKeys: String, CodingKey {
            case timestampFormats = "TimestampFormats"
        }
    }

    public struct SchemaConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "Region", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "DatabaseName", required: false, type: .string), 
            AWSShapeMember(label: "CatalogId", required: false, type: .string), 
            AWSShapeMember(label: "TableName", required: false, type: .string)
        ]
        /// Specifies the table version for the output data schema. If you don't specify this version ID, or if you set it to LATEST, Kinesis Data Firehose uses the most recent version. This means that any updates to the table are automatically picked up.
        public let versionId: String?
        /// If you don't specify an AWS Region, the default is the current Region.
        public let region: String?
        /// The role that Kinesis Data Firehose can use to access AWS Glue. This role must be in the same account you use for Kinesis Data Firehose. Cross-account roles aren't allowed.
        public let roleARN: String?
        /// Specifies the name of the AWS Glue database that contains the schema for the output data.
        public let databaseName: String?
        /// The ID of the AWS Glue Data Catalog. If you don't supply this, the AWS account ID is used by default.
        public let catalogId: String?
        /// Specifies the AWS Glue table that contains the column information that constitutes your data schema.
        public let tableName: String?

        public init(versionId: String? = nil, region: String? = nil, roleARN: String? = nil, databaseName: String? = nil, catalogId: String? = nil, tableName: String? = nil) {
            self.versionId = versionId
            self.region = region
            self.roleARN = roleARN
            self.databaseName = databaseName
            self.catalogId = catalogId
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "VersionId"
            case region = "Region"
            case roleARN = "RoleARN"
            case databaseName = "DatabaseName"
            case catalogId = "CatalogId"
            case tableName = "TableName"
        }
    }

    public struct StartDeliveryStreamEncryptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string)
        ]
        /// The name of the delivery stream for which you want to enable server-side encryption (SSE).
        public let deliveryStreamName: String

        public init(deliveryStreamName: String) {
            self.deliveryStreamName = deliveryStreamName
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStreamName = "DeliveryStreamName"
        }
    }

    public struct SplunkDestinationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HECToken", required: false, type: .string), 
            AWSShapeMember(label: "HECAcknowledgmentTimeoutInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "S3Update", required: false, type: .structure), 
            AWSShapeMember(label: "HECEndpointType", required: false, type: .enum), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum), 
            AWSShapeMember(label: "RetryOptions", required: false, type: .structure), 
            AWSShapeMember(label: "HECEndpoint", required: false, type: .string)
        ]
        /// A GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
        public let hECToken: String?
        /// The amount of time that Kinesis Data Firehose waits to receive an acknowledgment from Splunk after it sends data. At the end of the timeout period, Kinesis Data Firehose either tries to send the data again or considers it an error, based on your retry settings.
        public let hECAcknowledgmentTimeoutInSeconds: Int32?
        /// Your update to the configuration of the backup Amazon S3 location.
        public let s3Update: S3DestinationUpdate?
        /// This type can be either "Raw" or "Event."
        public let hECEndpointType: HECEndpointType?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// Defines how documents should be delivered to Amazon S3. When set to FailedDocumentsOnly, Kinesis Data Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to AllDocuments, Kinesis Data Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. Default value is FailedDocumentsOnly. 
        public let s3BackupMode: SplunkS3BackupMode?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver data to Splunk or if it doesn't receive an acknowledgment of receipt from Splunk.
        public let retryOptions: SplunkRetryOptions?
        /// The HTTP Event Collector (HEC) endpoint to which Kinesis Data Firehose sends your data.
        public let hECEndpoint: String?

        public init(hECToken: String? = nil, hECAcknowledgmentTimeoutInSeconds: Int32? = nil, s3Update: S3DestinationUpdate? = nil, hECEndpointType: HECEndpointType? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, processingConfiguration: ProcessingConfiguration? = nil, s3BackupMode: SplunkS3BackupMode? = nil, retryOptions: SplunkRetryOptions? = nil, hECEndpoint: String? = nil) {
            self.hECToken = hECToken
            self.hECAcknowledgmentTimeoutInSeconds = hECAcknowledgmentTimeoutInSeconds
            self.s3Update = s3Update
            self.hECEndpointType = hECEndpointType
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.processingConfiguration = processingConfiguration
            self.s3BackupMode = s3BackupMode
            self.retryOptions = retryOptions
            self.hECEndpoint = hECEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case hECToken = "HECToken"
            case hECAcknowledgmentTimeoutInSeconds = "HECAcknowledgmentTimeoutInSeconds"
            case s3Update = "S3Update"
            case hECEndpointType = "HECEndpointType"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case processingConfiguration = "ProcessingConfiguration"
            case s3BackupMode = "S3BackupMode"
            case retryOptions = "RetryOptions"
            case hECEndpoint = "HECEndpoint"
        }
    }

    public struct KinesisStreamSourceDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "KinesisStreamARN", required: false, type: .string), 
            AWSShapeMember(label: "DeliveryStartTimestamp", required: false, type: .timestamp)
        ]
        /// The ARN of the role used by the source Kinesis data stream. For more information, see AWS Identity and Access Management (IAM) ARN Format.
        public let roleARN: String?
        /// The Amazon Resource Name (ARN) of the source Kinesis data stream. For more information, see Amazon Kinesis Data Streams ARN Format.
        public let kinesisStreamARN: String?
        /// Kinesis Data Firehose starts retrieving records from the Kinesis data stream starting with this time stamp.
        public let deliveryStartTimestamp: TimeStamp?

        public init(roleARN: String? = nil, kinesisStreamARN: String? = nil, deliveryStartTimestamp: TimeStamp? = nil) {
            self.roleARN = roleARN
            self.kinesisStreamARN = kinesisStreamARN
            self.deliveryStartTimestamp = deliveryStartTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case kinesisStreamARN = "KinesisStreamARN"
            case deliveryStartTimestamp = "DeliveryStartTimestamp"
        }
    }

    public struct ElasticsearchBufferingHints: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SizeInMBs", required: false, type: .integer), 
            AWSShapeMember(label: "IntervalInSeconds", required: false, type: .integer)
        ]
        /// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5. We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec, the value should be 10 MB or higher.
        public let sizeInMBs: Int32?
        /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
        public let intervalInSeconds: Int32?

        public init(sizeInMBs: Int32? = nil, intervalInSeconds: Int32? = nil) {
            self.sizeInMBs = sizeInMBs
            self.intervalInSeconds = intervalInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInMBs = "SizeInMBs"
            case intervalInSeconds = "IntervalInSeconds"
        }
    }

    public struct Processor: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .list), 
            AWSShapeMember(label: "Type", required: true, type: .enum)
        ]
        /// The processor parameters.
        public let parameters: [ProcessorParameter]?
        /// The type of processor.
        public let `type`: ProcessorType

        public init(parameters: [ProcessorParameter]? = nil, type: ProcessorType) {
            self.parameters = parameters
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case `type` = "Type"
        }
    }

    public struct PutRecordBatchOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailedPutCount", required: true, type: .integer), 
            AWSShapeMember(label: "RequestResponses", required: true, type: .list), 
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean)
        ]
        /// The number of records that might have failed processing. This number might be greater than 0 even if the PutRecordBatch call succeeds. Check FailedPutCount to determine whether there are records that you need to resend.
        public let failedPutCount: Int32
        /// The results array. For each record, the index of the response element is the same as the index used in the request array.
        public let requestResponses: [PutRecordBatchResponseEntry]
        /// Indicates whether server-side encryption (SSE) was enabled during this operation.
        public let encrypted: Bool?

        public init(failedPutCount: Int32, requestResponses: [PutRecordBatchResponseEntry], encrypted: Bool? = nil) {
            self.failedPutCount = failedPutCount
            self.requestResponses = requestResponses
            self.encrypted = encrypted
        }

        private enum CodingKeys: String, CodingKey {
            case failedPutCount = "FailedPutCount"
            case requestResponses = "RequestResponses"
            case encrypted = "Encrypted"
        }
    }

    public enum SplunkS3BackupMode: String, CustomStringConvertible, Codable {
        case failedeventsonly = "FailedEventsOnly"
        case allevents = "AllEvents"
        public var description: String { return self.rawValue }
    }

    public struct S3DestinationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EncryptionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CompressionFormat", required: false, type: .enum), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "BufferingHints", required: false, type: .structure)
        ]
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public let encryptionConfiguration: EncryptionConfiguration?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED. The compression formats SNAPPY or ZIP cannot be specified for Amazon Redshift destinations because they are not supported by the Amazon Redshift COPY operation that reads from the S3 bucket.
        public let compressionFormat: CompressionFormat?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can specify an extra prefix to be added in front of the time format prefix. If the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see Amazon S3 Object Name Format in the Amazon Kinesis Data Firehose Developer Guide.
        public let prefix: String?
        /// The Amazon Resource Name (ARN) of the AWS credentials. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let roleARN: String
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The ARN of the S3 bucket. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let bucketARN: String
        /// The buffering option. If no value is specified, BufferingHints object default values are used.
        public let bufferingHints: BufferingHints?

        public init(encryptionConfiguration: EncryptionConfiguration? = nil, compressionFormat: CompressionFormat? = nil, prefix: String? = nil, roleARN: String, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, bucketARN: String, bufferingHints: BufferingHints? = nil) {
            self.encryptionConfiguration = encryptionConfiguration
            self.compressionFormat = compressionFormat
            self.prefix = prefix
            self.roleARN = roleARN
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.bucketARN = bucketARN
            self.bufferingHints = bufferingHints
        }

        private enum CodingKeys: String, CodingKey {
            case encryptionConfiguration = "EncryptionConfiguration"
            case compressionFormat = "CompressionFormat"
            case prefix = "Prefix"
            case roleARN = "RoleARN"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case bucketARN = "BucketARN"
            case bufferingHints = "BufferingHints"
        }
    }

    public struct Record: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Data", required: true, type: .blob)
        ]
        /// The data blob, which is base64-encoded when the blob is serialized. The maximum size of the data blob, before base64-encoding, is 1,000 KiB.
        public let data: Data

        public init(data: Data) {
            self.data = data
        }

        private enum CodingKeys: String, CodingKey {
            case data = "Data"
        }
    }

    public struct OutputFormatConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Serializer", required: false, type: .structure)
        ]
        /// Specifies which serializer to use. You can choose either the ORC SerDe or the Parquet SerDe. If both are non-null, the server rejects the request.
        public let serializer: Serializer?

        public init(serializer: Serializer? = nil) {
            self.serializer = serializer
        }

        private enum CodingKeys: String, CodingKey {
            case serializer = "Serializer"
        }
    }

    public struct ElasticsearchDestinationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "TypeName", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "S3Update", required: false, type: .structure), 
            AWSShapeMember(label: "IndexName", required: false, type: .string), 
            AWSShapeMember(label: "BufferingHints", required: false, type: .structure), 
            AWSShapeMember(label: "IndexRotationPeriod", required: false, type: .enum), 
            AWSShapeMember(label: "RetryOptions", required: false, type: .structure), 
            AWSShapeMember(label: "DomainARN", required: false, type: .string)
        ]
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The Elasticsearch type name. For Elasticsearch 6.x, there can be only one type per index. If you try to specify a new type for an existing index that already has another type, Kinesis Data Firehose returns an error during runtime.
        public let typeName: String?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The Amazon Resource Name (ARN) of the IAM role to be assumed by Kinesis Data Firehose for calling the Amazon ES Configuration API and for indexing documents. For more information, see Grant Kinesis Data Firehose Access to an Amazon S3 Destination and Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let roleARN: String?
        /// The Amazon S3 destination.
        public let s3Update: S3DestinationUpdate?
        /// The Elasticsearch index name.
        public let indexName: String?
        /// The buffering options. If no value is specified, ElasticsearchBufferingHints object default values are used. 
        public let bufferingHints: ElasticsearchBufferingHints?
        /// The Elasticsearch index rotation period. Index rotation appends a time stamp to IndexName to facilitate the expiration of old data. For more information, see Index Rotation for the Amazon ES Destination. Default value is OneDay.
        public let indexRotationPeriod: ElasticsearchIndexRotationPeriod?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon ES. The default value is 300 (5 minutes).
        public let retryOptions: ElasticsearchRetryOptions?
        /// The ARN of the Amazon ES domain. The IAM role must have permissions for DescribeElasticsearchDomain, DescribeElasticsearchDomains, and DescribeElasticsearchDomainConfig after assuming the IAM role specified in RoleARN. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let domainARN: String?

        public init(processingConfiguration: ProcessingConfiguration? = nil, typeName: String? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, roleARN: String? = nil, s3Update: S3DestinationUpdate? = nil, indexName: String? = nil, bufferingHints: ElasticsearchBufferingHints? = nil, indexRotationPeriod: ElasticsearchIndexRotationPeriod? = nil, retryOptions: ElasticsearchRetryOptions? = nil, domainARN: String? = nil) {
            self.processingConfiguration = processingConfiguration
            self.typeName = typeName
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.roleARN = roleARN
            self.s3Update = s3Update
            self.indexName = indexName
            self.bufferingHints = bufferingHints
            self.indexRotationPeriod = indexRotationPeriod
            self.retryOptions = retryOptions
            self.domainARN = domainARN
        }

        private enum CodingKeys: String, CodingKey {
            case processingConfiguration = "ProcessingConfiguration"
            case typeName = "TypeName"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case roleARN = "RoleARN"
            case s3Update = "S3Update"
            case indexName = "IndexName"
            case bufferingHints = "BufferingHints"
            case indexRotationPeriod = "IndexRotationPeriod"
            case retryOptions = "RetryOptions"
            case domainARN = "DomainARN"
        }
    }

    public enum OrcFormatVersion: String, CustomStringConvertible, Codable {
        case v011 = "V0_11"
        case v012 = "V0_12"
        public var description: String { return self.rawValue }
    }

    public struct ProcessingConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Processors", required: false, type: .list)
        ]
        /// Enables or disables data processing.
        public let enabled: Bool?
        /// The data processors.
        public let processors: [Processor]?

        public init(enabled: Bool? = nil, processors: [Processor]? = nil) {
            self.enabled = enabled
            self.processors = processors
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case processors = "Processors"
        }
    }

    public struct DeleteDeliveryStreamInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string)
        ]
        /// The name of the delivery stream.
        public let deliveryStreamName: String

        public init(deliveryStreamName: String) {
            self.deliveryStreamName = deliveryStreamName
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStreamName = "DeliveryStreamName"
        }
    }

    public struct CloudWatchLoggingOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogGroupName", required: false, type: .string), 
            AWSShapeMember(label: "LogStreamName", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// The CloudWatch group name for logging. This value is required if CloudWatch logging is enabled.
        public let logGroupName: String?
        /// The CloudWatch log stream name for logging. This value is required if CloudWatch logging is enabled.
        public let logStreamName: String?
        /// Enables or disables CloudWatch logging.
        public let enabled: Bool?

        public init(logGroupName: String? = nil, logStreamName: String? = nil, enabled: Bool? = nil) {
            self.logGroupName = logGroupName
            self.logStreamName = logStreamName
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case logGroupName = "LogGroupName"
            case logStreamName = "LogStreamName"
            case enabled = "Enabled"
        }
    }

    public struct ExtendedS3DestinationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "S3BackupDescription", required: false, type: .structure), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "CompressionFormat", required: true, type: .enum), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "BufferingHints", required: true, type: .structure), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum), 
            AWSShapeMember(label: "EncryptionConfiguration", required: true, type: .structure), 
            AWSShapeMember(label: "DataFormatConversionConfiguration", required: false, type: .structure)
        ]
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The configuration for backup in Amazon S3.
        public let s3BackupDescription: S3DestinationDescription?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The Amazon Resource Name (ARN) of the AWS credentials. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let roleARN: String
        /// The compression format. If no value is specified, the default is UNCOMPRESSED.
        public let compressionFormat: CompressionFormat
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can specify an extra prefix to be added in front of the time format prefix. If the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see Amazon S3 Object Name Format in the Amazon Kinesis Data Firehose Developer Guide.
        public let prefix: String?
        /// The ARN of the S3 bucket. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let bucketARN: String
        /// The buffering option.
        public let bufferingHints: BufferingHints
        /// The Amazon S3 backup mode.
        public let s3BackupMode: S3BackupMode?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public let encryptionConfiguration: EncryptionConfiguration
        /// The serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3.
        public let dataFormatConversionConfiguration: DataFormatConversionConfiguration?

        public init(processingConfiguration: ProcessingConfiguration? = nil, s3BackupDescription: S3DestinationDescription? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, roleARN: String, compressionFormat: CompressionFormat, prefix: String? = nil, bucketARN: String, bufferingHints: BufferingHints, s3BackupMode: S3BackupMode? = nil, encryptionConfiguration: EncryptionConfiguration, dataFormatConversionConfiguration: DataFormatConversionConfiguration? = nil) {
            self.processingConfiguration = processingConfiguration
            self.s3BackupDescription = s3BackupDescription
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.roleARN = roleARN
            self.compressionFormat = compressionFormat
            self.prefix = prefix
            self.bucketARN = bucketARN
            self.bufferingHints = bufferingHints
            self.s3BackupMode = s3BackupMode
            self.encryptionConfiguration = encryptionConfiguration
            self.dataFormatConversionConfiguration = dataFormatConversionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case processingConfiguration = "ProcessingConfiguration"
            case s3BackupDescription = "S3BackupDescription"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case roleARN = "RoleARN"
            case compressionFormat = "CompressionFormat"
            case prefix = "Prefix"
            case bucketARN = "BucketARN"
            case bufferingHints = "BufferingHints"
            case s3BackupMode = "S3BackupMode"
            case encryptionConfiguration = "EncryptionConfiguration"
            case dataFormatConversionConfiguration = "DataFormatConversionConfiguration"
        }
    }

    public enum OrcCompression: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case zlib = "ZLIB"
        case snappy = "SNAPPY"
        public var description: String { return self.rawValue }
    }

    public enum S3BackupMode: String, CustomStringConvertible, Codable {
        case disabled = "Disabled"
        case enabled = "Enabled"
        public var description: String { return self.rawValue }
    }

    public struct OrcSerDe: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockSizeBytes", required: false, type: .integer), 
            AWSShapeMember(label: "Compression", required: false, type: .enum), 
            AWSShapeMember(label: "PaddingTolerance", required: false, type: .double), 
            AWSShapeMember(label: "BloomFilterFalsePositiveProbability", required: false, type: .double), 
            AWSShapeMember(label: "EnablePadding", required: false, type: .boolean), 
            AWSShapeMember(label: "RowIndexStride", required: false, type: .integer), 
            AWSShapeMember(label: "BloomFilterColumns", required: false, type: .list), 
            AWSShapeMember(label: "DictionaryKeyThreshold", required: false, type: .double), 
            AWSShapeMember(label: "FormatVersion", required: false, type: .enum), 
            AWSShapeMember(label: "StripeSizeBytes", required: false, type: .integer)
        ]
        /// The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
        public let blockSizeBytes: Int32?
        /// The compression code to use over data blocks. The default is SNAPPY.
        public let compression: OrcCompression?
        /// A number between 0 and 1 that defines the tolerance for block padding as a decimal fraction of stripe size. The default value is 0.05, which means 5 percent of stripe size. For the default values of 64 MiB ORC stripes and 256 MiB HDFS blocks, the default block padding tolerance of 5 percent reserves a maximum of 3.2 MiB for padding within the 256 MiB block. In such a case, if the available size within the block is more than 3.2 MiB, a new, smaller stripe is inserted to fit within that space. This ensures that no stripe crosses block boundaries and causes remote reads within a node-local task. Kinesis Data Firehose ignores this parameter when OrcSerDe$EnablePadding is false.
        public let paddingTolerance: Double?
        /// The Bloom filter false positive probability (FPP). The lower the FPP, the bigger the Bloom filter. The default value is 0.05, the minimum is 0, and the maximum is 1.
        public let bloomFilterFalsePositiveProbability: Double?
        /// Set this to true to indicate that you want stripes to be padded to the HDFS block boundaries. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is false.
        public let enablePadding: Bool?
        /// The number of rows between index entries. The default is 10,000 and the minimum is 1,000.
        public let rowIndexStride: Int32?
        /// The column names for which you want Kinesis Data Firehose to create bloom filters. The default is null.
        public let bloomFilterColumns: [String]?
        /// Represents the fraction of the total number of non-null rows. To turn off dictionary encoding, set this fraction to a number that is less than the number of distinct keys in a dictionary. To always use dictionary encoding, set this threshold to 1.
        public let dictionaryKeyThreshold: Double?
        /// The version of the file to write. The possible values are V0_11 and V0_12. The default is V0_12.
        public let formatVersion: OrcFormatVersion?
        /// The number of bytes in each stripe. The default is 64 MiB and the minimum is 8 MiB.
        public let stripeSizeBytes: Int32?

        public init(blockSizeBytes: Int32? = nil, compression: OrcCompression? = nil, paddingTolerance: Double? = nil, bloomFilterFalsePositiveProbability: Double? = nil, enablePadding: Bool? = nil, rowIndexStride: Int32? = nil, bloomFilterColumns: [String]? = nil, dictionaryKeyThreshold: Double? = nil, formatVersion: OrcFormatVersion? = nil, stripeSizeBytes: Int32? = nil) {
            self.blockSizeBytes = blockSizeBytes
            self.compression = compression
            self.paddingTolerance = paddingTolerance
            self.bloomFilterFalsePositiveProbability = bloomFilterFalsePositiveProbability
            self.enablePadding = enablePadding
            self.rowIndexStride = rowIndexStride
            self.bloomFilterColumns = bloomFilterColumns
            self.dictionaryKeyThreshold = dictionaryKeyThreshold
            self.formatVersion = formatVersion
            self.stripeSizeBytes = stripeSizeBytes
        }

        private enum CodingKeys: String, CodingKey {
            case blockSizeBytes = "BlockSizeBytes"
            case compression = "Compression"
            case paddingTolerance = "PaddingTolerance"
            case bloomFilterFalsePositiveProbability = "BloomFilterFalsePositiveProbability"
            case enablePadding = "EnablePadding"
            case rowIndexStride = "RowIndexStride"
            case bloomFilterColumns = "BloomFilterColumns"
            case dictionaryKeyThreshold = "DictionaryKeyThreshold"
            case formatVersion = "FormatVersion"
            case stripeSizeBytes = "StripeSizeBytes"
        }
    }

    public struct KinesisStreamSourceConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "KinesisStreamARN", required: true, type: .string)
        ]
        /// The ARN of the role that provides access to the source Kinesis data stream. For more information, see AWS Identity and Access Management (IAM) ARN Format.
        public let roleARN: String
        /// The ARN of the source Kinesis data stream. For more information, see Amazon Kinesis Data Streams ARN Format.
        public let kinesisStreamARN: String

        public init(roleARN: String, kinesisStreamARN: String) {
            self.roleARN = roleARN
            self.kinesisStreamARN = kinesisStreamARN
        }

        private enum CodingKeys: String, CodingKey {
            case roleARN = "RoleARN"
            case kinesisStreamARN = "KinesisStreamARN"
        }
    }

    public struct ListTagsForDeliveryStreamOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .list), 
            AWSShapeMember(label: "HasMoreTags", required: true, type: .boolean)
        ]
        /// A list of tags associated with DeliveryStreamName, starting with the first tag after ExclusiveStartTagKey and up to the specified Limit.
        public let tags: [Tag]
        /// If this is true in the response, more tags are available. To list the remaining tags, set ExclusiveStartTagKey to the key of the last tag returned and call ListTagsForDeliveryStream again.
        public let hasMoreTags: Bool

        public init(tags: [Tag], hasMoreTags: Bool) {
            self.tags = tags
            self.hasMoreTags = hasMoreTags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case hasMoreTags = "HasMoreTags"
        }
    }

    public enum ParquetCompression: String, CustomStringConvertible, Codable {
        case uncompressed = "UNCOMPRESSED"
        case gzip = "GZIP"
        case snappy = "SNAPPY"
        public var description: String { return self.rawValue }
    }

    public struct StopDeliveryStreamEncryptionOutput: AWSShape {

    }

    public struct DataFormatConversionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InputFormatConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "OutputFormatConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "SchemaConfiguration", required: false, type: .structure)
        ]
        /// Specifies the deserializer that you want Kinesis Data Firehose to use to convert the format of your data from JSON.
        public let inputFormatConfiguration: InputFormatConfiguration?
        /// Specifies the serializer that you want Kinesis Data Firehose to use to convert the format of your data to the Parquet or ORC format.
        public let outputFormatConfiguration: OutputFormatConfiguration?
        /// Defaults to true. Set it to false if you want to disable format conversion while preserving the configuration details.
        public let enabled: Bool?
        /// Specifies the AWS Glue Data Catalog table that contains the column information.
        public let schemaConfiguration: SchemaConfiguration?

        public init(inputFormatConfiguration: InputFormatConfiguration? = nil, outputFormatConfiguration: OutputFormatConfiguration? = nil, enabled: Bool? = nil, schemaConfiguration: SchemaConfiguration? = nil) {
            self.inputFormatConfiguration = inputFormatConfiguration
            self.outputFormatConfiguration = outputFormatConfiguration
            self.enabled = enabled
            self.schemaConfiguration = schemaConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case inputFormatConfiguration = "InputFormatConfiguration"
            case outputFormatConfiguration = "OutputFormatConfiguration"
            case enabled = "Enabled"
            case schemaConfiguration = "SchemaConfiguration"
        }
    }

    public struct ListDeliveryStreamsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HasMoreDeliveryStreams", required: true, type: .boolean), 
            AWSShapeMember(label: "DeliveryStreamNames", required: true, type: .list)
        ]
        /// Indicates whether there are more delivery streams available to list.
        public let hasMoreDeliveryStreams: Bool
        /// The names of the delivery streams.
        public let deliveryStreamNames: [String]

        public init(hasMoreDeliveryStreams: Bool, deliveryStreamNames: [String]) {
            self.hasMoreDeliveryStreams = hasMoreDeliveryStreams
            self.deliveryStreamNames = deliveryStreamNames
        }

        private enum CodingKeys: String, CodingKey {
            case hasMoreDeliveryStreams = "HasMoreDeliveryStreams"
            case deliveryStreamNames = "DeliveryStreamNames"
        }
    }

    public struct TagDeliveryStreamInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .list), 
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string)
        ]
        /// A set of key-value pairs to use to create the tags.
        public let tags: [Tag]
        /// The name of the delivery stream to which you want to add the tags.
        public let deliveryStreamName: String

        public init(tags: [Tag], deliveryStreamName: String) {
            self.tags = tags
            self.deliveryStreamName = deliveryStreamName
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case deliveryStreamName = "DeliveryStreamName"
        }
    }

    public enum RedshiftS3BackupMode: String, CustomStringConvertible, Codable {
        case disabled = "Disabled"
        case enabled = "Enabled"
        public var description: String { return self.rawValue }
    }

    public struct UpdateDestinationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ElasticsearchDestinationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "CurrentDeliveryStreamVersionId", required: true, type: .string), 
            AWSShapeMember(label: "S3DestinationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "RedshiftDestinationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "DestinationId", required: true, type: .string), 
            AWSShapeMember(label: "SplunkDestinationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ExtendedS3DestinationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string)
        ]
        /// Describes an update for a destination in Amazon ES.
        public let elasticsearchDestinationUpdate: ElasticsearchDestinationUpdate?
        /// Obtain this value from the VersionId result of DeliveryStreamDescription. This value is required, and helps the service perform conditional operations. For example, if there is an interleaving update and this value is null, then the update destination fails. After the update is successful, the VersionId value is updated. The service then performs a merge of the old configuration with the new configuration.
        public let currentDeliveryStreamVersionId: String
        /// [Deprecated] Describes an update for a destination in Amazon S3.
        public let s3DestinationUpdate: S3DestinationUpdate?
        /// Describes an update for a destination in Amazon Redshift.
        public let redshiftDestinationUpdate: RedshiftDestinationUpdate?
        /// The ID of the destination.
        public let destinationId: String
        /// Describes an update for a destination in Splunk.
        public let splunkDestinationUpdate: SplunkDestinationUpdate?
        /// Describes an update for a destination in Amazon S3.
        public let extendedS3DestinationUpdate: ExtendedS3DestinationUpdate?
        /// The name of the delivery stream.
        public let deliveryStreamName: String

        public init(elasticsearchDestinationUpdate: ElasticsearchDestinationUpdate? = nil, currentDeliveryStreamVersionId: String, s3DestinationUpdate: S3DestinationUpdate? = nil, redshiftDestinationUpdate: RedshiftDestinationUpdate? = nil, destinationId: String, splunkDestinationUpdate: SplunkDestinationUpdate? = nil, extendedS3DestinationUpdate: ExtendedS3DestinationUpdate? = nil, deliveryStreamName: String) {
            self.elasticsearchDestinationUpdate = elasticsearchDestinationUpdate
            self.currentDeliveryStreamVersionId = currentDeliveryStreamVersionId
            self.s3DestinationUpdate = s3DestinationUpdate
            self.redshiftDestinationUpdate = redshiftDestinationUpdate
            self.destinationId = destinationId
            self.splunkDestinationUpdate = splunkDestinationUpdate
            self.extendedS3DestinationUpdate = extendedS3DestinationUpdate
            self.deliveryStreamName = deliveryStreamName
        }

        private enum CodingKeys: String, CodingKey {
            case elasticsearchDestinationUpdate = "ElasticsearchDestinationUpdate"
            case currentDeliveryStreamVersionId = "CurrentDeliveryStreamVersionId"
            case s3DestinationUpdate = "S3DestinationUpdate"
            case redshiftDestinationUpdate = "RedshiftDestinationUpdate"
            case destinationId = "DestinationId"
            case splunkDestinationUpdate = "SplunkDestinationUpdate"
            case extendedS3DestinationUpdate = "ExtendedS3DestinationUpdate"
            case deliveryStreamName = "DeliveryStreamName"
        }
    }

    public struct InputFormatConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Deserializer", required: false, type: .structure)
        ]
        /// Specifies which deserializer to use. You can choose either the Apache Hive JSON SerDe or the OpenX JSON SerDe. If both are non-null, the server rejects the request.
        public let deserializer: Deserializer?

        public init(deserializer: Deserializer? = nil) {
            self.deserializer = deserializer
        }

        private enum CodingKeys: String, CodingKey {
            case deserializer = "Deserializer"
        }
    }

    public struct CreateDeliveryStreamInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3DestinationConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisStreamSourceConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "DeliveryStreamType", required: false, type: .enum), 
            AWSShapeMember(label: "ElasticsearchDestinationConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SplunkDestinationConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "RedshiftDestinationConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ExtendedS3DestinationConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string)
        ]
        /// [Deprecated] The destination in Amazon S3. You can specify only one destination.
        public let s3DestinationConfiguration: S3DestinationConfiguration?
        /// When a Kinesis data stream is used as the source for the delivery stream, a KinesisStreamSourceConfiguration containing the Kinesis data stream Amazon Resource Name (ARN) and the role ARN for the source stream.
        public let kinesisStreamSourceConfiguration: KinesisStreamSourceConfiguration?
        /// The delivery stream type. This parameter can be one of the following values:    DirectPut: Provider applications access the delivery stream directly.    KinesisStreamAsSource: The delivery stream uses a Kinesis data stream as a source.  
        public let deliveryStreamType: DeliveryStreamType?
        /// The destination in Amazon ES. You can specify only one destination.
        public let elasticsearchDestinationConfiguration: ElasticsearchDestinationConfiguration?
        /// The destination in Splunk. You can specify only one destination.
        public let splunkDestinationConfiguration: SplunkDestinationConfiguration?
        /// The destination in Amazon Redshift. You can specify only one destination.
        public let redshiftDestinationConfiguration: RedshiftDestinationConfiguration?
        /// A set of tags to assign to the delivery stream. A tag is a key-value pair that you can define and assign to AWS resources. Tags are metadata. For example, you can add friendly names and descriptions or other types of information that can help you distinguish the delivery stream. For more information about tags, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide. You can specify up to 50 tags when creating a delivery stream.
        public let tags: [Tag]?
        /// The destination in Amazon S3. You can specify only one destination.
        public let extendedS3DestinationConfiguration: ExtendedS3DestinationConfiguration?
        /// The name of the delivery stream. This name must be unique per AWS account in the same AWS Region. If the delivery streams are in different accounts or different Regions, you can have multiple delivery streams with the same name.
        public let deliveryStreamName: String

        public init(s3DestinationConfiguration: S3DestinationConfiguration? = nil, kinesisStreamSourceConfiguration: KinesisStreamSourceConfiguration? = nil, deliveryStreamType: DeliveryStreamType? = nil, elasticsearchDestinationConfiguration: ElasticsearchDestinationConfiguration? = nil, splunkDestinationConfiguration: SplunkDestinationConfiguration? = nil, redshiftDestinationConfiguration: RedshiftDestinationConfiguration? = nil, tags: [Tag]? = nil, extendedS3DestinationConfiguration: ExtendedS3DestinationConfiguration? = nil, deliveryStreamName: String) {
            self.s3DestinationConfiguration = s3DestinationConfiguration
            self.kinesisStreamSourceConfiguration = kinesisStreamSourceConfiguration
            self.deliveryStreamType = deliveryStreamType
            self.elasticsearchDestinationConfiguration = elasticsearchDestinationConfiguration
            self.splunkDestinationConfiguration = splunkDestinationConfiguration
            self.redshiftDestinationConfiguration = redshiftDestinationConfiguration
            self.tags = tags
            self.extendedS3DestinationConfiguration = extendedS3DestinationConfiguration
            self.deliveryStreamName = deliveryStreamName
        }

        private enum CodingKeys: String, CodingKey {
            case s3DestinationConfiguration = "S3DestinationConfiguration"
            case kinesisStreamSourceConfiguration = "KinesisStreamSourceConfiguration"
            case deliveryStreamType = "DeliveryStreamType"
            case elasticsearchDestinationConfiguration = "ElasticsearchDestinationConfiguration"
            case splunkDestinationConfiguration = "SplunkDestinationConfiguration"
            case redshiftDestinationConfiguration = "RedshiftDestinationConfiguration"
            case tags = "Tags"
            case extendedS3DestinationConfiguration = "ExtendedS3DestinationConfiguration"
            case deliveryStreamName = "DeliveryStreamName"
        }
    }

    public struct CopyCommand: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CopyOptions", required: false, type: .string), 
            AWSShapeMember(label: "DataTableName", required: true, type: .string), 
            AWSShapeMember(label: "DataTableColumns", required: false, type: .string)
        ]
        /// Optional parameters to use with the Amazon Redshift COPY command. For more information, see the "Optional Parameters" section of Amazon Redshift COPY command. Some possible examples that would apply to Kinesis Data Firehose are as follows:  delimiter '\t' lzop; - fields are delimited with "\t" (TAB character) and compressed using lzop.  delimiter '|' - fields are delimited with "|" (this is the default delimiter).  delimiter '|' escape - the delimiter should be escaped.  fixedwidth 'venueid:3,venuename:25,venuecity:12,venuestate:2,venueseats:6' - fields are fixed width in the source, with each width specified after every column in the table.  JSON 's3://mybucket/jsonpaths.txt' - data is in JSON format, and the path specified is the format of the data. For more examples, see Amazon Redshift COPY command examples.
        public let copyOptions: String?
        /// The name of the target table. The table must already exist in the database.
        public let dataTableName: String
        /// A comma-separated list of column names.
        public let dataTableColumns: String?

        public init(copyOptions: String? = nil, dataTableName: String, dataTableColumns: String? = nil) {
            self.copyOptions = copyOptions
            self.dataTableName = dataTableName
            self.dataTableColumns = dataTableColumns
        }

        private enum CodingKeys: String, CodingKey {
            case copyOptions = "CopyOptions"
            case dataTableName = "DataTableName"
            case dataTableColumns = "DataTableColumns"
        }
    }

    public enum NoEncryptionConfig: String, CustomStringConvertible, Codable {
        case noencryption = "NoEncryption"
        public var description: String { return self.rawValue }
    }

    public struct ParquetSerDe: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxPaddingBytes", required: false, type: .integer), 
            AWSShapeMember(label: "WriterVersion", required: false, type: .enum), 
            AWSShapeMember(label: "PageSizeBytes", required: false, type: .integer), 
            AWSShapeMember(label: "Compression", required: false, type: .enum), 
            AWSShapeMember(label: "EnableDictionaryCompression", required: false, type: .boolean), 
            AWSShapeMember(label: "BlockSizeBytes", required: false, type: .integer)
        ]
        /// The maximum amount of padding to apply. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 0.
        public let maxPaddingBytes: Int32?
        /// Indicates the version of row format to output. The possible values are V1 and V2. The default is V1.
        public let writerVersion: ParquetWriterVersion?
        /// The Parquet page size. Column chunks are divided into pages. A page is conceptually an indivisible unit (in terms of compression and encoding). The minimum value is 64 KiB and the default is 1 MiB.
        public let pageSizeBytes: Int32?
        /// The compression code to use over data blocks. The possible values are UNCOMPRESSED, SNAPPY, and GZIP, with the default being SNAPPY. Use SNAPPY for higher decompression speed. Use GZIP if the compression ration is more important than speed.
        public let compression: ParquetCompression?
        /// Indicates whether to enable dictionary compression.
        public let enableDictionaryCompression: Bool?
        /// The Hadoop Distributed File System (HDFS) block size. This is useful if you intend to copy the data from Amazon S3 to HDFS before querying. The default is 256 MiB and the minimum is 64 MiB. Kinesis Data Firehose uses this value for padding calculations.
        public let blockSizeBytes: Int32?

        public init(maxPaddingBytes: Int32? = nil, writerVersion: ParquetWriterVersion? = nil, pageSizeBytes: Int32? = nil, compression: ParquetCompression? = nil, enableDictionaryCompression: Bool? = nil, blockSizeBytes: Int32? = nil) {
            self.maxPaddingBytes = maxPaddingBytes
            self.writerVersion = writerVersion
            self.pageSizeBytes = pageSizeBytes
            self.compression = compression
            self.enableDictionaryCompression = enableDictionaryCompression
            self.blockSizeBytes = blockSizeBytes
        }

        private enum CodingKeys: String, CodingKey {
            case maxPaddingBytes = "MaxPaddingBytes"
            case writerVersion = "WriterVersion"
            case pageSizeBytes = "PageSizeBytes"
            case compression = "Compression"
            case enableDictionaryCompression = "EnableDictionaryCompression"
            case blockSizeBytes = "BlockSizeBytes"
        }
    }

    public enum ProcessorType: String, CustomStringConvertible, Codable {
        case lambda = "Lambda"
        public var description: String { return self.rawValue }
    }

    public struct PutRecordInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Record", required: true, type: .structure), 
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string)
        ]
        /// The record.
        public let record: Record
        /// The name of the delivery stream.
        public let deliveryStreamName: String

        public init(record: Record, deliveryStreamName: String) {
            self.record = record
            self.deliveryStreamName = deliveryStreamName
        }

        private enum CodingKeys: String, CodingKey {
            case record = "Record"
            case deliveryStreamName = "DeliveryStreamName"
        }
    }

    public struct PutRecordOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "RecordId", required: true, type: .string)
        ]
        /// Indicates whether server-side encryption (SSE) was enabled during this operation.
        public let encrypted: Bool?
        /// The ID of the record.
        public let recordId: String

        public init(encrypted: Bool? = nil, recordId: String) {
            self.encrypted = encrypted
            self.recordId = recordId
        }

        private enum CodingKeys: String, CodingKey {
            case encrypted = "Encrypted"
            case recordId = "RecordId"
        }
    }

    public enum CompressionFormat: String, CustomStringConvertible, Codable {
        case uncompressed = "UNCOMPRESSED"
        case gzip = "GZIP"
        case zip = "ZIP"
        case snappy = "Snappy"
        public var description: String { return self.rawValue }
    }

    public struct SourceDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KinesisStreamSourceDescription", required: false, type: .structure)
        ]
        /// The KinesisStreamSourceDescription value for the source Kinesis data stream.
        public let kinesisStreamSourceDescription: KinesisStreamSourceDescription?

        public init(kinesisStreamSourceDescription: KinesisStreamSourceDescription? = nil) {
            self.kinesisStreamSourceDescription = kinesisStreamSourceDescription
        }

        private enum CodingKeys: String, CodingKey {
            case kinesisStreamSourceDescription = "KinesisStreamSourceDescription"
        }
    }

    public enum ProcessorParameterName: String, CustomStringConvertible, Codable {
        case lambdaarn = "LambdaArn"
        case numberofretries = "NumberOfRetries"
        case rolearn = "RoleArn"
        case buffersizeinmbs = "BufferSizeInMBs"
        case bufferintervalinseconds = "BufferIntervalInSeconds"
        public var description: String { return self.rawValue }
    }

    public struct UpdateDestinationOutput: AWSShape {

    }

    public struct S3DestinationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EncryptionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CompressionFormat", required: false, type: .enum), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "BucketARN", required: false, type: .string), 
            AWSShapeMember(label: "BufferingHints", required: false, type: .structure)
        ]
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public let encryptionConfiguration: EncryptionConfiguration?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED. The compression formats SNAPPY or ZIP cannot be specified for Amazon Redshift destinations because they are not supported by the Amazon Redshift COPY operation that reads from the S3 bucket.
        public let compressionFormat: CompressionFormat?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can specify an extra prefix to be added in front of the time format prefix. If the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see Amazon S3 Object Name Format in the Amazon Kinesis Data Firehose Developer Guide.
        public let prefix: String?
        /// The Amazon Resource Name (ARN) of the AWS credentials. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let roleARN: String?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The ARN of the S3 bucket. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let bucketARN: String?
        /// The buffering option. If no value is specified, BufferingHints object default values are used.
        public let bufferingHints: BufferingHints?

        public init(encryptionConfiguration: EncryptionConfiguration? = nil, compressionFormat: CompressionFormat? = nil, prefix: String? = nil, roleARN: String? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, bucketARN: String? = nil, bufferingHints: BufferingHints? = nil) {
            self.encryptionConfiguration = encryptionConfiguration
            self.compressionFormat = compressionFormat
            self.prefix = prefix
            self.roleARN = roleARN
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.bucketARN = bucketARN
            self.bufferingHints = bufferingHints
        }

        private enum CodingKeys: String, CodingKey {
            case encryptionConfiguration = "EncryptionConfiguration"
            case compressionFormat = "CompressionFormat"
            case prefix = "Prefix"
            case roleARN = "RoleARN"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case bucketARN = "BucketARN"
            case bufferingHints = "BufferingHints"
        }
    }

    public struct DeliveryStreamDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "DeliveryStreamType", required: true, type: .enum), 
            AWSShapeMember(label: "VersionId", required: true, type: .string), 
            AWSShapeMember(label: "DeliveryStreamStatus", required: true, type: .enum), 
            AWSShapeMember(label: "DeliveryStreamEncryptionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "HasMoreDestinations", required: true, type: .boolean), 
            AWSShapeMember(label: "Destinations", required: true, type: .list), 
            AWSShapeMember(label: "DeliveryStreamARN", required: true, type: .string), 
            AWSShapeMember(label: "LastUpdateTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string), 
            AWSShapeMember(label: "Source", required: false, type: .structure)
        ]
        /// The date and time that the delivery stream was created.
        public let createTimestamp: TimeStamp?
        /// The delivery stream type. This can be one of the following values:    DirectPut: Provider applications access the delivery stream directly.    KinesisStreamAsSource: The delivery stream uses a Kinesis data stream as a source.  
        public let deliveryStreamType: DeliveryStreamType
        /// Each time the destination is updated for a delivery stream, the version ID is changed, and the current version ID is required when updating the destination. This is so that the service knows it is applying the changes to the correct version of the delivery stream.
        public let versionId: String
        /// The status of the delivery stream.
        public let deliveryStreamStatus: DeliveryStreamStatus
        /// Indicates the server-side encryption (SSE) status for the delivery stream.
        public let deliveryStreamEncryptionConfiguration: DeliveryStreamEncryptionConfiguration?
        /// Indicates whether there are more destinations available to list.
        public let hasMoreDestinations: Bool
        /// The destinations.
        public let destinations: [DestinationDescription]
        /// The Amazon Resource Name (ARN) of the delivery stream. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let deliveryStreamARN: String
        /// The date and time that the delivery stream was last updated.
        public let lastUpdateTimestamp: TimeStamp?
        /// The name of the delivery stream.
        public let deliveryStreamName: String
        /// If the DeliveryStreamType parameter is KinesisStreamAsSource, a SourceDescription object describing the source Kinesis data stream.
        public let source: SourceDescription?

        public init(createTimestamp: TimeStamp? = nil, deliveryStreamType: DeliveryStreamType, versionId: String, deliveryStreamStatus: DeliveryStreamStatus, deliveryStreamEncryptionConfiguration: DeliveryStreamEncryptionConfiguration? = nil, hasMoreDestinations: Bool, destinations: [DestinationDescription], deliveryStreamARN: String, lastUpdateTimestamp: TimeStamp? = nil, deliveryStreamName: String, source: SourceDescription? = nil) {
            self.createTimestamp = createTimestamp
            self.deliveryStreamType = deliveryStreamType
            self.versionId = versionId
            self.deliveryStreamStatus = deliveryStreamStatus
            self.deliveryStreamEncryptionConfiguration = deliveryStreamEncryptionConfiguration
            self.hasMoreDestinations = hasMoreDestinations
            self.destinations = destinations
            self.deliveryStreamARN = deliveryStreamARN
            self.lastUpdateTimestamp = lastUpdateTimestamp
            self.deliveryStreamName = deliveryStreamName
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case createTimestamp = "CreateTimestamp"
            case deliveryStreamType = "DeliveryStreamType"
            case versionId = "VersionId"
            case deliveryStreamStatus = "DeliveryStreamStatus"
            case deliveryStreamEncryptionConfiguration = "DeliveryStreamEncryptionConfiguration"
            case hasMoreDestinations = "HasMoreDestinations"
            case destinations = "Destinations"
            case deliveryStreamARN = "DeliveryStreamARN"
            case lastUpdateTimestamp = "LastUpdateTimestamp"
            case deliveryStreamName = "DeliveryStreamName"
            case source = "Source"
        }
    }

    public enum DeliveryStreamEncryptionStatus: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case enabling = "ENABLING"
        case disabled = "DISABLED"
        case disabling = "DISABLING"
        public var description: String { return self.rawValue }
    }

    public struct KMSEncryptionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AWSKMSKeyARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the encryption key. Must belong to the same AWS Region as the destination Amazon S3 bucket. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let aWSKMSKeyARN: String

        public init(aWSKMSKeyARN: String) {
            self.aWSKMSKeyARN = aWSKMSKeyARN
        }

        private enum CodingKeys: String, CodingKey {
            case aWSKMSKeyARN = "AWSKMSKeyARN"
        }
    }

    public struct SplunkDestinationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HECToken", required: true, type: .string), 
            AWSShapeMember(label: "HECAcknowledgmentTimeoutInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "HECEndpointType", required: true, type: .enum), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "S3Configuration", required: true, type: .structure), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum), 
            AWSShapeMember(label: "RetryOptions", required: false, type: .structure), 
            AWSShapeMember(label: "HECEndpoint", required: true, type: .string)
        ]
        /// This is a GUID that you obtain from your Splunk cluster when you create a new HEC endpoint.
        public let hECToken: String
        /// The amount of time that Kinesis Data Firehose waits to receive an acknowledgment from Splunk after it sends it data. At the end of the timeout period, Kinesis Data Firehose either tries to send the data again or considers it an error, based on your retry settings.
        public let hECAcknowledgmentTimeoutInSeconds: Int32?
        /// This type can be either "Raw" or "Event."
        public let hECEndpointType: HECEndpointType
        /// The Amazon CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The configuration for the backup Amazon S3 location.
        public let s3Configuration: S3DestinationConfiguration
        /// Defines how documents should be delivered to Amazon S3. When set to FailedDocumentsOnly, Kinesis Data Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to AllDocuments, Kinesis Data Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. Default value is FailedDocumentsOnly. 
        public let s3BackupMode: SplunkS3BackupMode?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver data to Splunk, or if it doesn't receive an acknowledgment of receipt from Splunk.
        public let retryOptions: SplunkRetryOptions?
        /// The HTTP Event Collector (HEC) endpoint to which Kinesis Data Firehose sends your data.
        public let hECEndpoint: String

        public init(hECToken: String, hECAcknowledgmentTimeoutInSeconds: Int32? = nil, hECEndpointType: HECEndpointType, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, processingConfiguration: ProcessingConfiguration? = nil, s3Configuration: S3DestinationConfiguration, s3BackupMode: SplunkS3BackupMode? = nil, retryOptions: SplunkRetryOptions? = nil, hECEndpoint: String) {
            self.hECToken = hECToken
            self.hECAcknowledgmentTimeoutInSeconds = hECAcknowledgmentTimeoutInSeconds
            self.hECEndpointType = hECEndpointType
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.processingConfiguration = processingConfiguration
            self.s3Configuration = s3Configuration
            self.s3BackupMode = s3BackupMode
            self.retryOptions = retryOptions
            self.hECEndpoint = hECEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case hECToken = "HECToken"
            case hECAcknowledgmentTimeoutInSeconds = "HECAcknowledgmentTimeoutInSeconds"
            case hECEndpointType = "HECEndpointType"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case processingConfiguration = "ProcessingConfiguration"
            case s3Configuration = "S3Configuration"
            case s3BackupMode = "S3BackupMode"
            case retryOptions = "RetryOptions"
            case hECEndpoint = "HECEndpoint"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// A unique identifier for the tag. Maximum length: 128 characters. Valid characters: Unicode letters, digits, white space, _ . / = + - % @
        public let key: String
        /// An optional string, which you can use to describe or define the tag. Maximum length: 256 characters. Valid characters: Unicode letters, digits, white space, _ . / = + - % @
        public let value: String?

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct OpenXJsonSerDe: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConvertDotsInJsonKeysToUnderscores", required: false, type: .boolean), 
            AWSShapeMember(label: "ColumnToJsonKeyMappings", required: false, type: .map), 
            AWSShapeMember(label: "CaseInsensitive", required: false, type: .boolean)
        ]
        /// When set to true, specifies that the names of the keys include dots and that you want Kinesis Data Firehose to replace them with underscores. This is useful because Apache Hive does not allow dots in column names. For example, if the JSON contains a key whose name is "a.b", you can define the column name to be "a_b" when using this option. The default is false.
        public let convertDotsInJsonKeysToUnderscores: Bool?
        /// Maps column names to JSON keys that aren't identical to the column names. This is useful when the JSON contains keys that are Hive keywords. For example, timestamp is a Hive keyword. If you have a JSON key named timestamp, set this parameter to {"ts": "timestamp"} to map this key to a column named ts.
        public let columnToJsonKeyMappings: [String: String]?
        /// When set to true, which is the default, Kinesis Data Firehose converts JSON keys to lowercase before deserializing them.
        public let caseInsensitive: Bool?

        public init(convertDotsInJsonKeysToUnderscores: Bool? = nil, columnToJsonKeyMappings: [String: String]? = nil, caseInsensitive: Bool? = nil) {
            self.convertDotsInJsonKeysToUnderscores = convertDotsInJsonKeysToUnderscores
            self.columnToJsonKeyMappings = columnToJsonKeyMappings
            self.caseInsensitive = caseInsensitive
        }

        private enum CodingKeys: String, CodingKey {
            case convertDotsInJsonKeysToUnderscores = "ConvertDotsInJsonKeysToUnderscores"
            case columnToJsonKeyMappings = "ColumnToJsonKeyMappings"
            case caseInsensitive = "CaseInsensitive"
        }
    }

    public struct SplunkDestinationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HECToken", required: false, type: .string), 
            AWSShapeMember(label: "HECAcknowledgmentTimeoutInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "HECEndpointType", required: false, type: .enum), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "S3DestinationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum), 
            AWSShapeMember(label: "RetryOptions", required: false, type: .structure), 
            AWSShapeMember(label: "HECEndpoint", required: false, type: .string)
        ]
        /// A GUID you obtain from your Splunk cluster when you create a new HEC endpoint.
        public let hECToken: String?
        /// The amount of time that Kinesis Data Firehose waits to receive an acknowledgment from Splunk after it sends it data. At the end of the timeout period, Kinesis Data Firehose either tries to send the data again or considers it an error, based on your retry settings.
        public let hECAcknowledgmentTimeoutInSeconds: Int32?
        /// This type can be either "Raw" or "Event."
        public let hECEndpointType: HECEndpointType?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The Amazon S3 destination.&gt;
        public let s3DestinationDescription: S3DestinationDescription?
        /// Defines how documents should be delivered to Amazon S3. When set to FailedDocumentsOnly, Kinesis Data Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to AllDocuments, Kinesis Data Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. Default value is FailedDocumentsOnly. 
        public let s3BackupMode: SplunkS3BackupMode?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver data to Splunk or if it doesn't receive an acknowledgment of receipt from Splunk.
        public let retryOptions: SplunkRetryOptions?
        /// The HTTP Event Collector (HEC) endpoint to which Kinesis Data Firehose sends your data.
        public let hECEndpoint: String?

        public init(hECToken: String? = nil, hECAcknowledgmentTimeoutInSeconds: Int32? = nil, hECEndpointType: HECEndpointType? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, processingConfiguration: ProcessingConfiguration? = nil, s3DestinationDescription: S3DestinationDescription? = nil, s3BackupMode: SplunkS3BackupMode? = nil, retryOptions: SplunkRetryOptions? = nil, hECEndpoint: String? = nil) {
            self.hECToken = hECToken
            self.hECAcknowledgmentTimeoutInSeconds = hECAcknowledgmentTimeoutInSeconds
            self.hECEndpointType = hECEndpointType
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.processingConfiguration = processingConfiguration
            self.s3DestinationDescription = s3DestinationDescription
            self.s3BackupMode = s3BackupMode
            self.retryOptions = retryOptions
            self.hECEndpoint = hECEndpoint
        }

        private enum CodingKeys: String, CodingKey {
            case hECToken = "HECToken"
            case hECAcknowledgmentTimeoutInSeconds = "HECAcknowledgmentTimeoutInSeconds"
            case hECEndpointType = "HECEndpointType"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case processingConfiguration = "ProcessingConfiguration"
            case s3DestinationDescription = "S3DestinationDescription"
            case s3BackupMode = "S3BackupMode"
            case retryOptions = "RetryOptions"
            case hECEndpoint = "HECEndpoint"
        }
    }

    public struct StopDeliveryStreamEncryptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string)
        ]
        /// The name of the delivery stream for which you want to disable server-side encryption (SSE).
        public let deliveryStreamName: String

        public init(deliveryStreamName: String) {
            self.deliveryStreamName = deliveryStreamName
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStreamName = "DeliveryStreamName"
        }
    }

    public struct EncryptionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KMSEncryptionConfig", required: false, type: .structure), 
            AWSShapeMember(label: "NoEncryptionConfig", required: false, type: .enum)
        ]
        /// The encryption key.
        public let kMSEncryptionConfig: KMSEncryptionConfig?
        /// Specifically override existing encryption information to ensure that no encryption is used.
        public let noEncryptionConfig: NoEncryptionConfig?

        public init(kMSEncryptionConfig: KMSEncryptionConfig? = nil, noEncryptionConfig: NoEncryptionConfig? = nil) {
            self.kMSEncryptionConfig = kMSEncryptionConfig
            self.noEncryptionConfig = noEncryptionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case kMSEncryptionConfig = "KMSEncryptionConfig"
            case noEncryptionConfig = "NoEncryptionConfig"
        }
    }

    public struct ListDeliveryStreamsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "DeliveryStreamType", required: false, type: .enum), 
            AWSShapeMember(label: "ExclusiveStartDeliveryStreamName", required: false, type: .string)
        ]
        /// The maximum number of delivery streams to list. The default value is 10.
        public let limit: Int32?
        /// The delivery stream type. This can be one of the following values:    DirectPut: Provider applications access the delivery stream directly.    KinesisStreamAsSource: The delivery stream uses a Kinesis data stream as a source.   This parameter is optional. If this parameter is omitted, delivery streams of all types are returned.
        public let deliveryStreamType: DeliveryStreamType?
        /// The list of delivery streams returned by this call to ListDeliveryStreams will start with the delivery stream whose name comes alphabetically immediately after the name you specify in ExclusiveStartDeliveryStreamName.
        public let exclusiveStartDeliveryStreamName: String?

        public init(limit: Int32? = nil, deliveryStreamType: DeliveryStreamType? = nil, exclusiveStartDeliveryStreamName: String? = nil) {
            self.limit = limit
            self.deliveryStreamType = deliveryStreamType
            self.exclusiveStartDeliveryStreamName = exclusiveStartDeliveryStreamName
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case deliveryStreamType = "DeliveryStreamType"
            case exclusiveStartDeliveryStreamName = "ExclusiveStartDeliveryStreamName"
        }
    }

    public struct DeliveryStreamEncryptionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// For a full description of the different values of this status, see StartDeliveryStreamEncryption and StopDeliveryStreamEncryption.
        public let status: DeliveryStreamEncryptionStatus?

        public init(status: DeliveryStreamEncryptionStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct ProcessorParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterValue", required: true, type: .string), 
            AWSShapeMember(label: "ParameterName", required: true, type: .enum)
        ]
        /// The parameter value.
        public let parameterValue: String
        /// The name of the parameter.
        public let parameterName: ProcessorParameterName

        public init(parameterValue: String, parameterName: ProcessorParameterName) {
            self.parameterValue = parameterValue
            self.parameterName = parameterName
        }

        private enum CodingKeys: String, CodingKey {
            case parameterValue = "ParameterValue"
            case parameterName = "ParameterName"
        }
    }

    public struct DescribeDeliveryStreamInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "ExclusiveStartDestinationId", required: false, type: .string)
        ]
        /// The name of the delivery stream.
        public let deliveryStreamName: String
        /// The limit on the number of destinations to return. You can have one destination per delivery stream.
        public let limit: Int32?
        /// The ID of the destination to start returning the destination information. Kinesis Data Firehose supports one destination per delivery stream.
        public let exclusiveStartDestinationId: String?

        public init(deliveryStreamName: String, limit: Int32? = nil, exclusiveStartDestinationId: String? = nil) {
            self.deliveryStreamName = deliveryStreamName
            self.limit = limit
            self.exclusiveStartDestinationId = exclusiveStartDestinationId
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStreamName = "DeliveryStreamName"
            case limit = "Limit"
            case exclusiveStartDestinationId = "ExclusiveStartDestinationId"
        }
    }

    public struct ElasticsearchDestinationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "TypeName", required: true, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "IndexName", required: true, type: .string), 
            AWSShapeMember(label: "BufferingHints", required: false, type: .structure), 
            AWSShapeMember(label: "IndexRotationPeriod", required: false, type: .enum), 
            AWSShapeMember(label: "S3Configuration", required: true, type: .structure), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum), 
            AWSShapeMember(label: "DomainARN", required: true, type: .string), 
            AWSShapeMember(label: "RetryOptions", required: false, type: .structure)
        ]
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The Elasticsearch type name. For Elasticsearch 6.x, there can be only one type per index. If you try to specify a new type for an existing index that already has another type, Kinesis Data Firehose returns an error during run time.
        public let typeName: String
        /// The Amazon CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The Amazon Resource Name (ARN) of the IAM role to be assumed by Kinesis Data Firehose for calling the Amazon ES Configuration API and for indexing documents. For more information, see Grant Kinesis Data Firehose Access to an Amazon S3 Destination and Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let roleARN: String
        /// The Elasticsearch index name.
        public let indexName: String
        /// The buffering options. If no value is specified, the default values for ElasticsearchBufferingHints are used.
        public let bufferingHints: ElasticsearchBufferingHints?
        /// The Elasticsearch index rotation period. Index rotation appends a time stamp to the IndexName to facilitate the expiration of old data. For more information, see Index Rotation for the Amazon ES Destination. The default value is OneDay.
        public let indexRotationPeriod: ElasticsearchIndexRotationPeriod?
        /// The configuration for the backup Amazon S3 location.
        public let s3Configuration: S3DestinationConfiguration
        /// Defines how documents should be delivered to Amazon S3. When it is set to FailedDocumentsOnly, Kinesis Data Firehose writes any documents that could not be indexed to the configured Amazon S3 destination, with elasticsearch-failed/ appended to the key prefix. When set to AllDocuments, Kinesis Data Firehose delivers all incoming records to Amazon S3, and also writes failed documents with elasticsearch-failed/ appended to the prefix. For more information, see Amazon S3 Backup for the Amazon ES Destination. Default value is FailedDocumentsOnly.
        public let s3BackupMode: ElasticsearchS3BackupMode?
        /// The ARN of the Amazon ES domain. The IAM role must have permissions for DescribeElasticsearchDomain, DescribeElasticsearchDomains, and DescribeElasticsearchDomainConfig after assuming the role specified in RoleARN. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let domainARN: String
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon ES. The default value is 300 (5 minutes).
        public let retryOptions: ElasticsearchRetryOptions?

        public init(processingConfiguration: ProcessingConfiguration? = nil, typeName: String, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, roleARN: String, indexName: String, bufferingHints: ElasticsearchBufferingHints? = nil, indexRotationPeriod: ElasticsearchIndexRotationPeriod? = nil, s3Configuration: S3DestinationConfiguration, s3BackupMode: ElasticsearchS3BackupMode? = nil, domainARN: String, retryOptions: ElasticsearchRetryOptions? = nil) {
            self.processingConfiguration = processingConfiguration
            self.typeName = typeName
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.roleARN = roleARN
            self.indexName = indexName
            self.bufferingHints = bufferingHints
            self.indexRotationPeriod = indexRotationPeriod
            self.s3Configuration = s3Configuration
            self.s3BackupMode = s3BackupMode
            self.domainARN = domainARN
            self.retryOptions = retryOptions
        }

        private enum CodingKeys: String, CodingKey {
            case processingConfiguration = "ProcessingConfiguration"
            case typeName = "TypeName"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case roleARN = "RoleARN"
            case indexName = "IndexName"
            case bufferingHints = "BufferingHints"
            case indexRotationPeriod = "IndexRotationPeriod"
            case s3Configuration = "S3Configuration"
            case s3BackupMode = "S3BackupMode"
            case domainARN = "DomainARN"
            case retryOptions = "RetryOptions"
        }
    }

    public enum HECEndpointType: String, CustomStringConvertible, Codable {
        case raw = "Raw"
        case event = "Event"
        public var description: String { return self.rawValue }
    }

    public struct ExtendedS3DestinationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3BackupConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "EncryptionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "CompressionFormat", required: false, type: .enum), 
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "BufferingHints", required: false, type: .structure), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum), 
            AWSShapeMember(label: "DataFormatConversionConfiguration", required: false, type: .structure)
        ]
        /// The configuration for backup in Amazon S3.
        public let s3BackupConfiguration: S3DestinationConfiguration?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public let encryptionConfiguration: EncryptionConfiguration?
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can specify an extra prefix to be added in front of the time format prefix. If the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see Amazon S3 Object Name Format in the Amazon Kinesis Data Firehose Developer Guide.
        public let prefix: String?
        /// The Amazon Resource Name (ARN) of the AWS credentials. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let roleARN: String
        /// The compression format. If no value is specified, the default is UNCOMPRESSED.
        public let compressionFormat: CompressionFormat?
        /// The ARN of the S3 bucket. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let bucketARN: String
        /// The buffering option.
        public let bufferingHints: BufferingHints?
        /// The Amazon S3 backup mode.
        public let s3BackupMode: S3BackupMode?
        /// The serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3.
        public let dataFormatConversionConfiguration: DataFormatConversionConfiguration?

        public init(s3BackupConfiguration: S3DestinationConfiguration? = nil, encryptionConfiguration: EncryptionConfiguration? = nil, processingConfiguration: ProcessingConfiguration? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, prefix: String? = nil, roleARN: String, compressionFormat: CompressionFormat? = nil, bucketARN: String, bufferingHints: BufferingHints? = nil, s3BackupMode: S3BackupMode? = nil, dataFormatConversionConfiguration: DataFormatConversionConfiguration? = nil) {
            self.s3BackupConfiguration = s3BackupConfiguration
            self.encryptionConfiguration = encryptionConfiguration
            self.processingConfiguration = processingConfiguration
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.prefix = prefix
            self.roleARN = roleARN
            self.compressionFormat = compressionFormat
            self.bucketARN = bucketARN
            self.bufferingHints = bufferingHints
            self.s3BackupMode = s3BackupMode
            self.dataFormatConversionConfiguration = dataFormatConversionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case s3BackupConfiguration = "S3BackupConfiguration"
            case encryptionConfiguration = "EncryptionConfiguration"
            case processingConfiguration = "ProcessingConfiguration"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case prefix = "Prefix"
            case roleARN = "RoleARN"
            case compressionFormat = "CompressionFormat"
            case bucketARN = "BucketARN"
            case bufferingHints = "BufferingHints"
            case s3BackupMode = "S3BackupMode"
            case dataFormatConversionConfiguration = "DataFormatConversionConfiguration"
        }
    }

    public struct RedshiftDestinationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "S3BackupDescription", required: false, type: .structure), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "ClusterJDBCURL", required: true, type: .string), 
            AWSShapeMember(label: "S3DestinationDescription", required: true, type: .structure), 
            AWSShapeMember(label: "CopyCommand", required: true, type: .structure), 
            AWSShapeMember(label: "RetryOptions", required: false, type: .structure), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum)
        ]
        /// The name of the user.
        public let username: String
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The configuration for backup in Amazon S3.
        public let s3BackupDescription: S3DestinationDescription?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The Amazon Resource Name (ARN) of the AWS credentials. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let roleARN: String
        /// The database connection string.
        public let clusterJDBCURL: String
        /// The Amazon S3 destination.
        public let s3DestinationDescription: S3DestinationDescription
        /// The COPY command.
        public let copyCommand: CopyCommand
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
        public let retryOptions: RedshiftRetryOptions?
        /// The Amazon S3 backup mode.
        public let s3BackupMode: RedshiftS3BackupMode?

        public init(username: String, processingConfiguration: ProcessingConfiguration? = nil, s3BackupDescription: S3DestinationDescription? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, roleARN: String, clusterJDBCURL: String, s3DestinationDescription: S3DestinationDescription, copyCommand: CopyCommand, retryOptions: RedshiftRetryOptions? = nil, s3BackupMode: RedshiftS3BackupMode? = nil) {
            self.username = username
            self.processingConfiguration = processingConfiguration
            self.s3BackupDescription = s3BackupDescription
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.roleARN = roleARN
            self.clusterJDBCURL = clusterJDBCURL
            self.s3DestinationDescription = s3DestinationDescription
            self.copyCommand = copyCommand
            self.retryOptions = retryOptions
            self.s3BackupMode = s3BackupMode
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case processingConfiguration = "ProcessingConfiguration"
            case s3BackupDescription = "S3BackupDescription"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case roleARN = "RoleARN"
            case clusterJDBCURL = "ClusterJDBCURL"
            case s3DestinationDescription = "S3DestinationDescription"
            case copyCommand = "CopyCommand"
            case retryOptions = "RetryOptions"
            case s3BackupMode = "S3BackupMode"
        }
    }

    public struct ElasticsearchDestinationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "TypeName", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "IndexName", required: false, type: .string), 
            AWSShapeMember(label: "S3DestinationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "BufferingHints", required: false, type: .structure), 
            AWSShapeMember(label: "IndexRotationPeriod", required: false, type: .enum), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum), 
            AWSShapeMember(label: "RetryOptions", required: false, type: .structure), 
            AWSShapeMember(label: "DomainARN", required: false, type: .string)
        ]
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The Elasticsearch type name.
        public let typeName: String?
        /// The Amazon CloudWatch logging options.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The Amazon Resource Name (ARN) of the AWS credentials. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let roleARN: String?
        /// The Elasticsearch index name.
        public let indexName: String?
        /// The Amazon S3 destination.
        public let s3DestinationDescription: S3DestinationDescription?
        /// The buffering options.
        public let bufferingHints: ElasticsearchBufferingHints?
        /// The Elasticsearch index rotation period
        public let indexRotationPeriod: ElasticsearchIndexRotationPeriod?
        /// The Amazon S3 backup mode.
        public let s3BackupMode: ElasticsearchS3BackupMode?
        /// The Amazon ES retry options.
        public let retryOptions: ElasticsearchRetryOptions?
        /// The ARN of the Amazon ES domain. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let domainARN: String?

        public init(processingConfiguration: ProcessingConfiguration? = nil, typeName: String? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, roleARN: String? = nil, indexName: String? = nil, s3DestinationDescription: S3DestinationDescription? = nil, bufferingHints: ElasticsearchBufferingHints? = nil, indexRotationPeriod: ElasticsearchIndexRotationPeriod? = nil, s3BackupMode: ElasticsearchS3BackupMode? = nil, retryOptions: ElasticsearchRetryOptions? = nil, domainARN: String? = nil) {
            self.processingConfiguration = processingConfiguration
            self.typeName = typeName
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.roleARN = roleARN
            self.indexName = indexName
            self.s3DestinationDescription = s3DestinationDescription
            self.bufferingHints = bufferingHints
            self.indexRotationPeriod = indexRotationPeriod
            self.s3BackupMode = s3BackupMode
            self.retryOptions = retryOptions
            self.domainARN = domainARN
        }

        private enum CodingKeys: String, CodingKey {
            case processingConfiguration = "ProcessingConfiguration"
            case typeName = "TypeName"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case roleARN = "RoleARN"
            case indexName = "IndexName"
            case s3DestinationDescription = "S3DestinationDescription"
            case bufferingHints = "BufferingHints"
            case indexRotationPeriod = "IndexRotationPeriod"
            case s3BackupMode = "S3BackupMode"
            case retryOptions = "RetryOptions"
            case domainARN = "DomainARN"
        }
    }

    public struct TagDeliveryStreamOutput: AWSShape {

    }

    public struct ExtendedS3DestinationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3BackupUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "EncryptionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "CompressionFormat", required: false, type: .enum), 
            AWSShapeMember(label: "BucketARN", required: false, type: .string), 
            AWSShapeMember(label: "BufferingHints", required: false, type: .structure), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum), 
            AWSShapeMember(label: "DataFormatConversionConfiguration", required: false, type: .structure)
        ]
        /// The Amazon S3 destination for backup.
        public let s3BackupUpdate: S3DestinationUpdate?
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public let encryptionConfiguration: EncryptionConfiguration?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can specify an extra prefix to be added in front of the time format prefix. If the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see Amazon S3 Object Name Format in the Amazon Kinesis Data Firehose Developer Guide.
        public let prefix: String?
        /// The Amazon Resource Name (ARN) of the AWS credentials. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let roleARN: String?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED. 
        public let compressionFormat: CompressionFormat?
        /// The ARN of the S3 bucket. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let bucketARN: String?
        /// The buffering option.
        public let bufferingHints: BufferingHints?
        /// Enables or disables Amazon S3 backup mode.
        public let s3BackupMode: S3BackupMode?
        /// The serializer, deserializer, and schema for converting data from the JSON format to the Parquet or ORC format before writing it to Amazon S3.
        public let dataFormatConversionConfiguration: DataFormatConversionConfiguration?

        public init(s3BackupUpdate: S3DestinationUpdate? = nil, processingConfiguration: ProcessingConfiguration? = nil, encryptionConfiguration: EncryptionConfiguration? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, prefix: String? = nil, roleARN: String? = nil, compressionFormat: CompressionFormat? = nil, bucketARN: String? = nil, bufferingHints: BufferingHints? = nil, s3BackupMode: S3BackupMode? = nil, dataFormatConversionConfiguration: DataFormatConversionConfiguration? = nil) {
            self.s3BackupUpdate = s3BackupUpdate
            self.processingConfiguration = processingConfiguration
            self.encryptionConfiguration = encryptionConfiguration
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.prefix = prefix
            self.roleARN = roleARN
            self.compressionFormat = compressionFormat
            self.bucketARN = bucketARN
            self.bufferingHints = bufferingHints
            self.s3BackupMode = s3BackupMode
            self.dataFormatConversionConfiguration = dataFormatConversionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case s3BackupUpdate = "S3BackupUpdate"
            case processingConfiguration = "ProcessingConfiguration"
            case encryptionConfiguration = "EncryptionConfiguration"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case prefix = "Prefix"
            case roleARN = "RoleARN"
            case compressionFormat = "CompressionFormat"
            case bucketARN = "BucketARN"
            case bufferingHints = "BufferingHints"
            case s3BackupMode = "S3BackupMode"
            case dataFormatConversionConfiguration = "DataFormatConversionConfiguration"
        }
    }

    public struct DescribeDeliveryStreamOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeliveryStreamDescription", required: true, type: .structure)
        ]
        /// Information about the delivery stream.
        public let deliveryStreamDescription: DeliveryStreamDescription

        public init(deliveryStreamDescription: DeliveryStreamDescription) {
            self.deliveryStreamDescription = deliveryStreamDescription
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStreamDescription = "DeliveryStreamDescription"
        }
    }

    public struct UntagDeliveryStreamOutput: AWSShape {

    }

    public enum ElasticsearchIndexRotationPeriod: String, CustomStringConvertible, Codable {
        case norotation = "NoRotation"
        case onehour = "OneHour"
        case oneday = "OneDay"
        case oneweek = "OneWeek"
        case onemonth = "OneMonth"
        public var description: String { return self.rawValue }
    }

    public enum ParquetWriterVersion: String, CustomStringConvertible, Codable {
        case v1 = "V1"
        case v2 = "V2"
        public var description: String { return self.rawValue }
    }

    public struct SplunkRetryOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DurationInSeconds", required: false, type: .integer)
        ]
        /// The total amount of time that Kinesis Data Firehose spends on retries. This duration starts after the initial attempt to send data to Splunk fails. It doesn't include the periods during which Kinesis Data Firehose waits for acknowledgment from Splunk after each attempt.
        public let durationInSeconds: Int32?

        public init(durationInSeconds: Int32? = nil) {
            self.durationInSeconds = durationInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case durationInSeconds = "DurationInSeconds"
        }
    }

    public struct RedshiftDestinationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "S3BackupUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "Password", required: false, type: .string), 
            AWSShapeMember(label: "S3Update", required: false, type: .structure), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "ClusterJDBCURL", required: false, type: .string), 
            AWSShapeMember(label: "CopyCommand", required: false, type: .structure), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "RetryOptions", required: false, type: .structure), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum)
        ]
        /// The name of the user.
        public let username: String?
        /// The Amazon S3 destination for backup.
        public let s3BackupUpdate: S3DestinationUpdate?
        /// The user password.
        public let password: String?
        /// The Amazon S3 destination. The compression formats SNAPPY or ZIP cannot be specified in RedshiftDestinationUpdate.S3Update because the Amazon Redshift COPY operation that reads from the S3 bucket doesn't support these compression formats.
        public let s3Update: S3DestinationUpdate?
        /// The Amazon CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The Amazon Resource Name (ARN) of the AWS credentials. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let roleARN: String?
        /// The database connection string.
        public let clusterJDBCURL: String?
        /// The COPY command.
        public let copyCommand: CopyCommand?
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
        public let retryOptions: RedshiftRetryOptions?
        /// The Amazon S3 backup mode.
        public let s3BackupMode: RedshiftS3BackupMode?

        public init(username: String? = nil, s3BackupUpdate: S3DestinationUpdate? = nil, password: String? = nil, s3Update: S3DestinationUpdate? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, roleARN: String? = nil, clusterJDBCURL: String? = nil, copyCommand: CopyCommand? = nil, processingConfiguration: ProcessingConfiguration? = nil, retryOptions: RedshiftRetryOptions? = nil, s3BackupMode: RedshiftS3BackupMode? = nil) {
            self.username = username
            self.s3BackupUpdate = s3BackupUpdate
            self.password = password
            self.s3Update = s3Update
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.roleARN = roleARN
            self.clusterJDBCURL = clusterJDBCURL
            self.copyCommand = copyCommand
            self.processingConfiguration = processingConfiguration
            self.retryOptions = retryOptions
            self.s3BackupMode = s3BackupMode
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case s3BackupUpdate = "S3BackupUpdate"
            case password = "Password"
            case s3Update = "S3Update"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case roleARN = "RoleARN"
            case clusterJDBCURL = "ClusterJDBCURL"
            case copyCommand = "CopyCommand"
            case processingConfiguration = "ProcessingConfiguration"
            case retryOptions = "RetryOptions"
            case s3BackupMode = "S3BackupMode"
        }
    }

    public struct DeleteDeliveryStreamOutput: AWSShape {

    }

    public enum DeliveryStreamType: String, CustomStringConvertible, Codable {
        case directput = "DirectPut"
        case kinesisstreamassource = "KinesisStreamAsSource"
        public var description: String { return self.rawValue }
    }

    public struct Serializer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrcSerDe", required: false, type: .structure), 
            AWSShapeMember(label: "ParquetSerDe", required: false, type: .structure)
        ]
        /// A serializer to use for converting data to the ORC format before storing it in Amazon S3. For more information, see Apache ORC.
        public let orcSerDe: OrcSerDe?
        /// A serializer to use for converting data to the Parquet format before storing it in Amazon S3. For more information, see Apache Parquet.
        public let parquetSerDe: ParquetSerDe?

        public init(orcSerDe: OrcSerDe? = nil, parquetSerDe: ParquetSerDe? = nil) {
            self.orcSerDe = orcSerDe
            self.parquetSerDe = parquetSerDe
        }

        private enum CodingKeys: String, CodingKey {
            case orcSerDe = "OrcSerDe"
            case parquetSerDe = "ParquetSerDe"
        }
    }

    public struct S3DestinationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EncryptionConfiguration", required: true, type: .structure), 
            AWSShapeMember(label: "CompressionFormat", required: true, type: .enum), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "BufferingHints", required: true, type: .structure)
        ]
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public let encryptionConfiguration: EncryptionConfiguration
        /// The compression format. If no value is specified, the default is UNCOMPRESSED.
        public let compressionFormat: CompressionFormat
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered Amazon S3 files. You can specify an extra prefix to be added in front of the time format prefix. If the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see Amazon S3 Object Name Format in the Amazon Kinesis Data Firehose Developer Guide.
        public let prefix: String?
        /// The Amazon Resource Name (ARN) of the AWS credentials. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let roleARN: String
        /// The Amazon CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The ARN of the S3 bucket. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let bucketARN: String
        /// The buffering option. If no value is specified, BufferingHints object default values are used.
        public let bufferingHints: BufferingHints

        public init(encryptionConfiguration: EncryptionConfiguration, compressionFormat: CompressionFormat, prefix: String? = nil, roleARN: String, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, bucketARN: String, bufferingHints: BufferingHints) {
            self.encryptionConfiguration = encryptionConfiguration
            self.compressionFormat = compressionFormat
            self.prefix = prefix
            self.roleARN = roleARN
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.bucketARN = bucketARN
            self.bufferingHints = bufferingHints
        }

        private enum CodingKeys: String, CodingKey {
            case encryptionConfiguration = "EncryptionConfiguration"
            case compressionFormat = "CompressionFormat"
            case prefix = "Prefix"
            case roleARN = "RoleARN"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case bucketARN = "BucketARN"
            case bufferingHints = "BufferingHints"
        }
    }

    public struct Deserializer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OpenXJsonSerDe", required: false, type: .structure), 
            AWSShapeMember(label: "HiveJsonSerDe", required: false, type: .structure)
        ]
        /// The OpenX SerDe. Used by Kinesis Data Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the native Hive / HCatalog JsonSerDe.
        public let openXJsonSerDe: OpenXJsonSerDe?
        /// The native Hive / HCatalog JsonSerDe. Used by Kinesis Data Firehose for deserializing data, which means converting it from the JSON format in preparation for serializing it to the Parquet or ORC format. This is one of two deserializers you can choose, depending on which one offers the functionality you need. The other option is the OpenX SerDe.
        public let hiveJsonSerDe: HiveJsonSerDe?

        public init(openXJsonSerDe: OpenXJsonSerDe? = nil, hiveJsonSerDe: HiveJsonSerDe? = nil) {
            self.openXJsonSerDe = openXJsonSerDe
            self.hiveJsonSerDe = hiveJsonSerDe
        }

        private enum CodingKeys: String, CodingKey {
            case openXJsonSerDe = "OpenXJsonSerDe"
            case hiveJsonSerDe = "HiveJsonSerDe"
        }
    }

    public struct PutRecordBatchInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Records", required: true, type: .list), 
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string)
        ]
        /// One or more records.
        public let records: [Record]
        /// The name of the delivery stream.
        public let deliveryStreamName: String

        public init(records: [Record], deliveryStreamName: String) {
            self.records = records
            self.deliveryStreamName = deliveryStreamName
        }

        private enum CodingKeys: String, CodingKey {
            case records = "Records"
            case deliveryStreamName = "DeliveryStreamName"
        }
    }

    public struct RedshiftDestinationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "S3BackupConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "ClusterJDBCURL", required: true, type: .string), 
            AWSShapeMember(label: "CopyCommand", required: true, type: .structure), 
            AWSShapeMember(label: "S3Configuration", required: true, type: .structure), 
            AWSShapeMember(label: "RetryOptions", required: false, type: .structure), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum)
        ]
        /// The name of the user.
        public let username: String
        /// The configuration for backup in Amazon S3.
        public let s3BackupConfiguration: S3DestinationConfiguration?
        /// The user password.
        public let password: String
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The Amazon Resource Name (ARN) of the AWS credentials. For more information, see Amazon Resource Names (ARNs) and AWS Service Namespaces.
        public let roleARN: String
        /// The database connection string.
        public let clusterJDBCURL: String
        /// The COPY command.
        public let copyCommand: CopyCommand
        /// The configuration for the intermediate Amazon S3 location from which Amazon Redshift obtains data. Restrictions are described in the topic for CreateDeliveryStream. The compression formats SNAPPY or ZIP cannot be specified in RedshiftDestinationConfiguration.S3Configuration because the Amazon Redshift COPY operation that reads from the S3 bucket doesn't support these compression formats.
        public let s3Configuration: S3DestinationConfiguration
        /// The retry behavior in case Kinesis Data Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
        public let retryOptions: RedshiftRetryOptions?
        /// The Amazon S3 backup mode.
        public let s3BackupMode: RedshiftS3BackupMode?

        public init(username: String, s3BackupConfiguration: S3DestinationConfiguration? = nil, password: String, processingConfiguration: ProcessingConfiguration? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, roleARN: String, clusterJDBCURL: String, copyCommand: CopyCommand, s3Configuration: S3DestinationConfiguration, retryOptions: RedshiftRetryOptions? = nil, s3BackupMode: RedshiftS3BackupMode? = nil) {
            self.username = username
            self.s3BackupConfiguration = s3BackupConfiguration
            self.password = password
            self.processingConfiguration = processingConfiguration
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.roleARN = roleARN
            self.clusterJDBCURL = clusterJDBCURL
            self.copyCommand = copyCommand
            self.s3Configuration = s3Configuration
            self.retryOptions = retryOptions
            self.s3BackupMode = s3BackupMode
        }

        private enum CodingKeys: String, CodingKey {
            case username = "Username"
            case s3BackupConfiguration = "S3BackupConfiguration"
            case password = "Password"
            case processingConfiguration = "ProcessingConfiguration"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case roleARN = "RoleARN"
            case clusterJDBCURL = "ClusterJDBCURL"
            case copyCommand = "CopyCommand"
            case s3Configuration = "S3Configuration"
            case retryOptions = "RetryOptions"
            case s3BackupMode = "S3BackupMode"
        }
    }

    public struct BufferingHints: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SizeInMBs", required: false, type: .integer), 
            AWSShapeMember(label: "IntervalInSeconds", required: false, type: .integer)
        ]
        /// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5. We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec, the value should be 10 MB or higher.
        public let sizeInMBs: Int32?
        /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
        public let intervalInSeconds: Int32?

        public init(sizeInMBs: Int32? = nil, intervalInSeconds: Int32? = nil) {
            self.sizeInMBs = sizeInMBs
            self.intervalInSeconds = intervalInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInMBs = "SizeInMBs"
            case intervalInSeconds = "IntervalInSeconds"
        }
    }

    public struct PutRecordBatchResponseEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "ErrorCode", required: false, type: .string), 
            AWSShapeMember(label: "RecordId", required: false, type: .string)
        ]
        /// The error message for an individual record result.
        public let errorMessage: String?
        /// The error code for an individual record result.
        public let errorCode: String?
        /// The ID of the record.
        public let recordId: String?

        public init(errorMessage: String? = nil, errorCode: String? = nil, recordId: String? = nil) {
            self.errorMessage = errorMessage
            self.errorCode = errorCode
            self.recordId = recordId
        }

        private enum CodingKeys: String, CodingKey {
            case errorMessage = "ErrorMessage"
            case errorCode = "ErrorCode"
            case recordId = "RecordId"
        }
    }

    public struct CreateDeliveryStreamOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeliveryStreamARN", required: false, type: .string)
        ]
        /// The ARN of the delivery stream.
        public let deliveryStreamARN: String?

        public init(deliveryStreamARN: String? = nil) {
            self.deliveryStreamARN = deliveryStreamARN
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStreamARN = "DeliveryStreamARN"
        }
    }

    public struct ElasticsearchRetryOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DurationInSeconds", required: false, type: .integer)
        ]
        /// After an initial failure to deliver to Amazon ES, the total amount of time during which Kinesis Data Firehose retries delivery (including the first attempt). After this time has elapsed, the failed documents are written to Amazon S3. Default value is 300 seconds (5 minutes). A value of 0 (zero) results in no retries.
        public let durationInSeconds: Int32?

        public init(durationInSeconds: Int32? = nil) {
            self.durationInSeconds = durationInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case durationInSeconds = "DurationInSeconds"
        }
    }

    public struct RedshiftRetryOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DurationInSeconds", required: false, type: .integer)
        ]
        /// The length of time during which Kinesis Data Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Kinesis Data Firehose does not retry if the value of DurationInSeconds is 0 (zero) or if the first delivery attempt takes longer than the current value.
        public let durationInSeconds: Int32?

        public init(durationInSeconds: Int32? = nil) {
            self.durationInSeconds = durationInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case durationInSeconds = "DurationInSeconds"
        }
    }

    public struct DestinationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExtendedS3DestinationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "ElasticsearchDestinationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "S3DestinationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "SplunkDestinationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "DestinationId", required: true, type: .string), 
            AWSShapeMember(label: "RedshiftDestinationDescription", required: false, type: .structure)
        ]
        /// The destination in Amazon S3.
        public let extendedS3DestinationDescription: ExtendedS3DestinationDescription?
        /// The destination in Amazon ES.
        public let elasticsearchDestinationDescription: ElasticsearchDestinationDescription?
        /// [Deprecated] The destination in Amazon S3.
        public let s3DestinationDescription: S3DestinationDescription?
        /// The destination in Splunk.
        public let splunkDestinationDescription: SplunkDestinationDescription?
        /// The ID of the destination.
        public let destinationId: String
        /// The destination in Amazon Redshift.
        public let redshiftDestinationDescription: RedshiftDestinationDescription?

        public init(extendedS3DestinationDescription: ExtendedS3DestinationDescription? = nil, elasticsearchDestinationDescription: ElasticsearchDestinationDescription? = nil, s3DestinationDescription: S3DestinationDescription? = nil, splunkDestinationDescription: SplunkDestinationDescription? = nil, destinationId: String, redshiftDestinationDescription: RedshiftDestinationDescription? = nil) {
            self.extendedS3DestinationDescription = extendedS3DestinationDescription
            self.elasticsearchDestinationDescription = elasticsearchDestinationDescription
            self.s3DestinationDescription = s3DestinationDescription
            self.splunkDestinationDescription = splunkDestinationDescription
            self.destinationId = destinationId
            self.redshiftDestinationDescription = redshiftDestinationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case extendedS3DestinationDescription = "ExtendedS3DestinationDescription"
            case elasticsearchDestinationDescription = "ElasticsearchDestinationDescription"
            case s3DestinationDescription = "S3DestinationDescription"
            case splunkDestinationDescription = "SplunkDestinationDescription"
            case destinationId = "DestinationId"
            case redshiftDestinationDescription = "RedshiftDestinationDescription"
        }
    }

    public enum ElasticsearchS3BackupMode: String, CustomStringConvertible, Codable {
        case faileddocumentsonly = "FailedDocumentsOnly"
        case alldocuments = "AllDocuments"
        public var description: String { return self.rawValue }
    }

    public enum DeliveryStreamStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case deleting = "DELETING"
        case active = "ACTIVE"
        public var description: String { return self.rawValue }
    }

    public struct ListTagsForDeliveryStreamInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "ExclusiveStartTagKey", required: false, type: .string), 
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string)
        ]
        /// The number of tags to return. If this number is less than the total number of tags associated with the delivery stream, HasMoreTags is set to true in the response. To list additional tags, set ExclusiveStartTagKey to the last key in the response. 
        public let limit: Int32?
        /// The key to use as the starting point for the list of tags. If you set this parameter, ListTagsForDeliveryStream gets all tags that occur after ExclusiveStartTagKey.
        public let exclusiveStartTagKey: String?
        /// The name of the delivery stream whose tags you want to list.
        public let deliveryStreamName: String

        public init(limit: Int32? = nil, exclusiveStartTagKey: String? = nil, deliveryStreamName: String) {
            self.limit = limit
            self.exclusiveStartTagKey = exclusiveStartTagKey
            self.deliveryStreamName = deliveryStreamName
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case exclusiveStartTagKey = "ExclusiveStartTagKey"
            case deliveryStreamName = "DeliveryStreamName"
        }
    }

}