// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Greengrass {

    public struct DeleteLoggerDefinitionResponse: AWSShape {

    }

    public struct ListSubscriptionDefinitionVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let subscriptionDefinitionId: String
        public let maxResults: String?

        public init(nextToken: String? = nil, subscriptionDefinitionId: String, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.subscriptionDefinitionId = subscriptionDefinitionId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case subscriptionDefinitionId = "SubscriptionDefinitionId"
            case maxResults = "MaxResults"
        }
    }

    public struct ListFunctionDefinitionVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?
        public let functionDefinitionId: String

        public init(nextToken: String? = nil, maxResults: String? = nil, functionDefinitionId: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.functionDefinitionId = functionDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case functionDefinitionId = "FunctionDefinitionId"
        }
    }

    public struct DisassociateRoleFromGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct GetDeviceDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "DeviceDefinitionVersionId", location: .uri(locationName: "DeviceDefinitionVersionId"), required: true, type: .string)
        ]
        public let deviceDefinitionId: String
        public let deviceDefinitionVersionId: String

        public init(deviceDefinitionId: String, deviceDefinitionVersionId: String) {
            self.deviceDefinitionId = deviceDefinitionId
            self.deviceDefinitionVersionId = deviceDefinitionVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceDefinitionId = "DeviceDefinitionId"
            case deviceDefinitionVersionId = "DeviceDefinitionVersionId"
        }
    }

    public struct CreateCoreDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let initialVersion: CoreDefinitionVersion?
        public let amznClientToken: String?
        public let name: String?

        public init(initialVersion: CoreDefinitionVersion? = nil, amznClientToken: String? = nil, name: String? = nil) {
            self.initialVersion = initialVersion
            self.amznClientToken = amznClientToken
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case initialVersion = "InitialVersion"
            case amznClientToken = "X-Amzn-Client-Token"
            case name = "Name"
        }
    }

    public struct LocalVolumeResourceData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationPath", required: false, type: .string), 
            AWSShapeMember(label: "GroupOwnerSetting", required: false, type: .structure), 
            AWSShapeMember(label: "SourcePath", required: false, type: .string)
        ]
        /// The absolute local path of the resource inside the lambda environment.
        public let destinationPath: String?
        /// Allows you to configure additional group privileges for the Lambda process. This field is optional.
        public let groupOwnerSetting: GroupOwnerSetting?
        /// The local absolute path of the volume resource on the host. The source path for a volume resource type cannot start with ''/sys''.
        public let sourcePath: String?

        public init(destinationPath: String? = nil, groupOwnerSetting: GroupOwnerSetting? = nil, sourcePath: String? = nil) {
            self.destinationPath = destinationPath
            self.groupOwnerSetting = groupOwnerSetting
            self.sourcePath = sourcePath
        }

        private enum CodingKeys: String, CodingKey {
            case destinationPath = "DestinationPath"
            case groupOwnerSetting = "GroupOwnerSetting"
            case sourcePath = "SourcePath"
        }
    }

    public struct GetAssociatedRoleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct UpdateCoreDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let coreDefinitionId: String
        public let name: String?

        public init(coreDefinitionId: String, name: String? = nil) {
            self.coreDefinitionId = coreDefinitionId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case coreDefinitionId = "CoreDefinitionId"
            case name = "Name"
        }
    }

    public struct GetGroupCertificateAuthorityRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateAuthorityId", location: .uri(locationName: "CertificateAuthorityId"), required: true, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let certificateAuthorityId: String
        public let groupId: String

        public init(certificateAuthorityId: String, groupId: String) {
            self.certificateAuthorityId = certificateAuthorityId
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateAuthorityId = "CertificateAuthorityId"
            case groupId = "GroupId"
        }
    }

    public struct GetCoreDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let arn: String?
        public let latestVersion: String?
        public let creationTimestamp: String?
        public let id: String?
        public let name: String?

        public init(lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, arn: String? = nil, latestVersion: String? = nil, creationTimestamp: String? = nil, id: String? = nil, name: String? = nil) {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.arn = arn
            self.latestVersion = latestVersion
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case arn = "Arn"
            case latestVersion = "LatestVersion"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case name = "Name"
        }
    }

    public struct ListResourceDefinitionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Definitions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let definitions: [DefinitionInformation]?

        public init(nextToken: String? = nil, definitions: [DefinitionInformation]? = nil) {
            self.nextToken = nextToken
            self.definitions = definitions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case definitions = "Definitions"
        }
    }

    public struct CreateGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let arn: String?
        public let latestVersion: String?
        public let creationTimestamp: String?
        public let id: String?
        public let name: String?

        public init(lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, arn: String? = nil, latestVersion: String? = nil, creationTimestamp: String? = nil, id: String? = nil, name: String? = nil) {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.arn = arn
            self.latestVersion = latestVersion
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case arn = "Arn"
            case latestVersion = "LatestVersion"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case name = "Name"
        }
    }

    public struct CreateDeviceDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let initialVersion: DeviceDefinitionVersion?
        public let amznClientToken: String?
        public let name: String?

        public init(initialVersion: DeviceDefinitionVersion? = nil, amznClientToken: String? = nil, name: String? = nil) {
            self.initialVersion = initialVersion
            self.amznClientToken = amznClientToken
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case initialVersion = "InitialVersion"
            case amznClientToken = "X-Amzn-Client-Token"
            case name = "Name"
        }
    }

    public struct SageMakerMachineLearningModelResourceData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationPath", required: false, type: .string), 
            AWSShapeMember(label: "SageMakerJobArn", required: false, type: .string)
        ]
        /// The absolute local path of the resource inside the Lambda environment.
        public let destinationPath: String?
        /// The ARN of the SageMaker training job that represents the source model.
        public let sageMakerJobArn: String?

        public init(destinationPath: String? = nil, sageMakerJobArn: String? = nil) {
            self.destinationPath = destinationPath
            self.sageMakerJobArn = sageMakerJobArn
        }

        private enum CodingKeys: String, CodingKey {
            case destinationPath = "DestinationPath"
            case sageMakerJobArn = "SageMakerJobArn"
        }
    }

    public struct ListLoggerDefinitionVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let loggerDefinitionId: String
        public let maxResults: String?

        public init(nextToken: String? = nil, loggerDefinitionId: String, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.loggerDefinitionId = loggerDefinitionId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case loggerDefinitionId = "LoggerDefinitionId"
            case maxResults = "MaxResults"
        }
    }

    public struct GetResourceDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceDefinitionId", location: .uri(locationName: "ResourceDefinitionId"), required: true, type: .string)
        ]
        public let resourceDefinitionId: String

        public init(resourceDefinitionId: String) {
            self.resourceDefinitionId = resourceDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceDefinitionId = "ResourceDefinitionId"
        }
    }

    public struct ListVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?
        /// Information about a version.
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct FunctionDefinitionVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Functions", required: false, type: .list)
        ]
        /// A list of Lambda functions in this function definition version.
        public let functions: [Function]?

        public init(functions: [Function]? = nil) {
            self.functions = functions
        }

        private enum CodingKeys: String, CodingKey {
            case functions = "Functions"
        }
    }

    public struct GroupInformation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the group was last updated.
        public let lastUpdatedTimestamp: String?
        /// The ARN of the latest version of the group.
        public let latestVersionArn: String?
        /// The ARN of the group.
        public let arn: String?
        /// The latest version of the group.
        public let latestVersion: String?
        /// The time, in milliseconds since the epoch, when the group was created.
        public let creationTimestamp: String?
        /// The ID of the group.
        public let id: String?
        /// The name of the group.
        public let name: String?

        public init(lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, arn: String? = nil, latestVersion: String? = nil, creationTimestamp: String? = nil, id: String? = nil, name: String? = nil) {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.arn = arn
            self.latestVersion = latestVersion
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case arn = "Arn"
            case latestVersion = "LatestVersion"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case name = "Name"
        }
    }

    public struct ListFunctionDefinitionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct ListDeviceDefinitionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct GetResourceDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the resource definition version was created.
        public let creationTimestamp: String?
        /// The version of the resource definition version.
        public let version: String?
        /// Information about the definition.
        public let definition: ResourceDefinitionVersion?
        /// The ID of the resource definition version.
        public let id: String?
        /// Arn of the resource definition version.
        public let arn: String?

        public init(creationTimestamp: String? = nil, version: String? = nil, definition: ResourceDefinitionVersion? = nil, id: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.version = version
            self.definition = definition
            self.id = id
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case version = "Version"
            case definition = "Definition"
            case id = "Id"
            case arn = "Arn"
        }
    }

    public struct UpdateDeviceDefinitionResponse: AWSShape {

    }

    public struct GetGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let arn: String?
        public let latestVersion: String?
        public let creationTimestamp: String?
        public let id: String?
        public let name: String?

        public init(lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, arn: String? = nil, latestVersion: String? = nil, creationTimestamp: String? = nil, id: String? = nil, name: String? = nil) {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.arn = arn
            self.latestVersion = latestVersion
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case arn = "Arn"
            case latestVersion = "LatestVersion"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case name = "Name"
        }
    }

    public struct UpdateFunctionDefinitionResponse: AWSShape {

    }

    public enum LoggerComponent: String, CustomStringConvertible, Codable {
        case greengrasssystem = "GreengrassSystem"
        case lambda = "Lambda"
        public var description: String { return self.rawValue }
    }

    public struct CreateLoggerDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Loggers", required: false, type: .list), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string)
        ]
        public let loggers: [Logger]?
        public let amznClientToken: String?
        public let loggerDefinitionId: String

        public init(loggers: [Logger]? = nil, amznClientToken: String? = nil, loggerDefinitionId: String) {
            self.loggers = loggers
            self.amznClientToken = amznClientToken
            self.loggerDefinitionId = loggerDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case loggers = "Loggers"
            case amznClientToken = "X-Amzn-Client-Token"
            case loggerDefinitionId = "LoggerDefinitionId"
        }
    }

    public struct Empty: AWSShape {

    }

    public struct UpdateSubscriptionDefinitionResponse: AWSShape {

    }

    public struct GroupVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "CoreDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LoggerDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "ResourceDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "FunctionDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "DeviceDefinitionVersionArn", required: false, type: .string)
        ]
        /// The ARN of the subscription definition version for this group.
        public let subscriptionDefinitionVersionArn: String?
        /// The ARN of the core definition version for this group.
        public let coreDefinitionVersionArn: String?
        /// The ARN of the logger definition version for this group.
        public let loggerDefinitionVersionArn: String?
        /// The resource definition version ARN for this group.
        public let resourceDefinitionVersionArn: String?
        /// The ARN of the function definition version for this group.
        public let functionDefinitionVersionArn: String?
        /// The ARN of the device definition version for this group.
        public let deviceDefinitionVersionArn: String?

        public init(subscriptionDefinitionVersionArn: String? = nil, coreDefinitionVersionArn: String? = nil, loggerDefinitionVersionArn: String? = nil, resourceDefinitionVersionArn: String? = nil, functionDefinitionVersionArn: String? = nil, deviceDefinitionVersionArn: String? = nil) {
            self.subscriptionDefinitionVersionArn = subscriptionDefinitionVersionArn
            self.coreDefinitionVersionArn = coreDefinitionVersionArn
            self.loggerDefinitionVersionArn = loggerDefinitionVersionArn
            self.resourceDefinitionVersionArn = resourceDefinitionVersionArn
            self.functionDefinitionVersionArn = functionDefinitionVersionArn
            self.deviceDefinitionVersionArn = deviceDefinitionVersionArn
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionDefinitionVersionArn = "SubscriptionDefinitionVersionArn"
            case coreDefinitionVersionArn = "CoreDefinitionVersionArn"
            case loggerDefinitionVersionArn = "LoggerDefinitionVersionArn"
            case resourceDefinitionVersionArn = "ResourceDefinitionVersionArn"
            case functionDefinitionVersionArn = "FunctionDefinitionVersionArn"
            case deviceDefinitionVersionArn = "DeviceDefinitionVersionArn"
        }
    }

    public struct UpdateConnectivityInfoRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectivityInfo", required: false, type: .list), 
            AWSShapeMember(label: "ThingName", location: .uri(locationName: "ThingName"), required: true, type: .string)
        ]
        /// A list of connectivity info.
        public let connectivityInfo: [ConnectivityInfo]?
        public let thingName: String

        public init(connectivityInfo: [ConnectivityInfo]? = nil, thingName: String) {
            self.connectivityInfo = connectivityInfo
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case connectivityInfo = "ConnectivityInfo"
            case thingName = "ThingName"
        }
    }

    public struct ListResourceDefinitionVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "ResourceDefinitionId", location: .uri(locationName: "ResourceDefinitionId"), required: true, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?
        public let resourceDefinitionId: String

        public init(nextToken: String? = nil, maxResults: String? = nil, resourceDefinitionId: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.resourceDefinitionId = resourceDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case resourceDefinitionId = "ResourceDefinitionId"
        }
    }

    public struct DeleteResourceDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceDefinitionId", location: .uri(locationName: "ResourceDefinitionId"), required: true, type: .string)
        ]
        public let resourceDefinitionId: String

        public init(resourceDefinitionId: String) {
            self.resourceDefinitionId = resourceDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceDefinitionId = "ResourceDefinitionId"
        }
    }

    public struct CreateDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "DeploymentType", required: false, type: .enum), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string), 
            AWSShapeMember(label: "GroupVersionId", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentId", required: false, type: .string)
        ]
        public let amznClientToken: String?
        /// The type of deployment. When used in ''CreateDeployment'', only ''NewDeployment'' and ''Redeployment'' are valid.
        public let deploymentType: DeploymentType?
        public let groupId: String
        /// The ID of the group version to be deployed.
        public let groupVersionId: String?
        /// The ID of the deployment if you wish to redeploy a previous deployment.
        public let deploymentId: String?

        public init(amznClientToken: String? = nil, deploymentType: DeploymentType? = nil, groupId: String, groupVersionId: String? = nil, deploymentId: String? = nil) {
            self.amznClientToken = amznClientToken
            self.deploymentType = deploymentType
            self.groupId = groupId
            self.groupVersionId = groupVersionId
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case deploymentType = "DeploymentType"
            case groupId = "GroupId"
            case groupVersionId = "GroupVersionId"
            case deploymentId = "DeploymentId"
        }
    }

    public struct DeleteGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct ListLoggerDefinitionVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct ListSubscriptionDefinitionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public enum UpdateAgentLogLevel: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case trace = "TRACE"
        case debug = "DEBUG"
        case verbose = "VERBOSE"
        case info = "INFO"
        case warn = "WARN"
        case error = "ERROR"
        case fatal = "FATAL"
        public var description: String { return self.rawValue }
    }

    public struct DeleteCoreDefinitionResponse: AWSShape {

    }

    public struct CreateFunctionDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "Functions", required: false, type: .list)
        ]
        public let amznClientToken: String?
        public let functionDefinitionId: String
        public let functions: [Function]?

        public init(amznClientToken: String? = nil, functionDefinitionId: String, functions: [Function]? = nil) {
            self.amznClientToken = amznClientToken
            self.functionDefinitionId = functionDefinitionId
            self.functions = functions
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case functionDefinitionId = "FunctionDefinitionId"
            case functions = "Functions"
        }
    }

    public struct DeleteCoreDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string)
        ]
        public let coreDefinitionId: String

        public init(coreDefinitionId: String) {
            self.coreDefinitionId = coreDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case coreDefinitionId = "CoreDefinitionId"
        }
    }

    public struct ListSubscriptionDefinitionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Definitions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let definitions: [DefinitionInformation]?

        public init(nextToken: String? = nil, definitions: [DefinitionInformation]? = nil) {
            self.nextToken = nextToken
            self.definitions = definitions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case definitions = "Definitions"
        }
    }

    public struct CreateGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let initialVersion: GroupVersion?
        public let amznClientToken: String?
        public let name: String?

        public init(initialVersion: GroupVersion? = nil, amznClientToken: String? = nil, name: String? = nil) {
            self.initialVersion = initialVersion
            self.amznClientToken = amznClientToken
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case initialVersion = "InitialVersion"
            case amznClientToken = "X-Amzn-Client-Token"
            case name = "Name"
        }
    }

    public struct Subscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subject", required: false, type: .string), 
            AWSShapeMember(label: "Target", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Source", required: false, type: .string)
        ]
        /// The subject of the message.
        public let subject: String?
        /// Where the message is sent to. Can be a thing ARN, a Lambda function ARN, 'cloud' (which represents the IoT cloud), or 'GGShadowService'.
        public let target: String?
        /// The id of the subscription.
        public let id: String?
        /// The source of the subscription. Can be a thing ARN, a Lambda function ARN, 'cloud' (which represents the IoT cloud), or 'GGShadowService'.
        public let source: String?

        public init(subject: String? = nil, target: String? = nil, id: String? = nil, source: String? = nil) {
            self.subject = subject
            self.target = target
            self.id = id
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case subject = "Subject"
            case target = "Target"
            case id = "Id"
            case source = "Source"
        }
    }

    public struct CreateSoftwareUpdateJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpdateTargets", required: false, type: .list), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "UpdateAgentLogLevel", required: false, type: .enum), 
            AWSShapeMember(label: "UpdateTargetsArchitecture", required: false, type: .enum), 
            AWSShapeMember(label: "SoftwareToUpdate", required: false, type: .enum), 
            AWSShapeMember(label: "UpdateTargetsOperatingSystem", required: false, type: .enum), 
            AWSShapeMember(label: "S3UrlSignerRole", required: false, type: .string)
        ]
        public let updateTargets: [String]?
        public let amznClientToken: String?
        public let updateAgentLogLevel: UpdateAgentLogLevel?
        public let updateTargetsArchitecture: UpdateTargetsArchitecture?
        public let softwareToUpdate: SoftwareToUpdate?
        public let updateTargetsOperatingSystem: UpdateTargetsOperatingSystem?
        public let s3UrlSignerRole: String?

        public init(updateTargets: [String]? = nil, amznClientToken: String? = nil, updateAgentLogLevel: UpdateAgentLogLevel? = nil, updateTargetsArchitecture: UpdateTargetsArchitecture? = nil, softwareToUpdate: SoftwareToUpdate? = nil, updateTargetsOperatingSystem: UpdateTargetsOperatingSystem? = nil, s3UrlSignerRole: String? = nil) {
            self.updateTargets = updateTargets
            self.amznClientToken = amznClientToken
            self.updateAgentLogLevel = updateAgentLogLevel
            self.updateTargetsArchitecture = updateTargetsArchitecture
            self.softwareToUpdate = softwareToUpdate
            self.updateTargetsOperatingSystem = updateTargetsOperatingSystem
            self.s3UrlSignerRole = s3UrlSignerRole
        }

        private enum CodingKeys: String, CodingKey {
            case updateTargets = "UpdateTargets"
            case amznClientToken = "X-Amzn-Client-Token"
            case updateAgentLogLevel = "UpdateAgentLogLevel"
            case updateTargetsArchitecture = "UpdateTargetsArchitecture"
            case softwareToUpdate = "SoftwareToUpdate"
            case updateTargetsOperatingSystem = "UpdateTargetsOperatingSystem"
            case s3UrlSignerRole = "S3UrlSignerRole"
        }
    }

    public struct GetConnectivityInfoRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ThingName", location: .uri(locationName: "ThingName"), required: true, type: .string)
        ]
        public let thingName: String

        public init(thingName: String) {
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "ThingName"
        }
    }

    public struct GroupCertificateAuthorityProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupCertificateAuthorityId", required: false, type: .string), 
            AWSShapeMember(label: "GroupCertificateAuthorityArn", required: false, type: .string)
        ]
        /// The ID of the certificate authority for the group.
        public let groupCertificateAuthorityId: String?
        /// The ARN of the certificate authority for the group.
        public let groupCertificateAuthorityArn: String?

        public init(groupCertificateAuthorityId: String? = nil, groupCertificateAuthorityArn: String? = nil) {
            self.groupCertificateAuthorityId = groupCertificateAuthorityId
            self.groupCertificateAuthorityArn = groupCertificateAuthorityArn
        }

        private enum CodingKeys: String, CodingKey {
            case groupCertificateAuthorityId = "GroupCertificateAuthorityId"
            case groupCertificateAuthorityArn = "GroupCertificateAuthorityArn"
        }
    }

    public struct GetFunctionDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the function definition version was created.
        public let creationTimestamp: String?
        /// The version of the function definition version.
        public let version: String?
        /// Information on the definition.
        public let definition: FunctionDefinitionVersion?
        /// The ID of the function definition version.
        public let id: String?
        /// The ARN of the function definition version.
        public let arn: String?

        public init(creationTimestamp: String? = nil, version: String? = nil, definition: FunctionDefinitionVersion? = nil, id: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.version = version
            self.definition = definition
            self.id = id
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case version = "Version"
            case definition = "Definition"
            case id = "Id"
            case arn = "Arn"
        }
    }

    public struct AssociateServiceRoleToAccountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociatedAt", required: false, type: .string)
        ]
        /// The time when the service role was associated with the account.
        public let associatedAt: String?

        public init(associatedAt: String? = nil) {
            self.associatedAt = associatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case associatedAt = "AssociatedAt"
        }
    }

    public struct DeleteResourceDefinitionResponse: AWSShape {

    }

    public struct CreateGroupCertificateAuthorityResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupCertificateAuthorityArn", required: false, type: .string)
        ]
        /// The ARN of the group certificate authority.
        public let groupCertificateAuthorityArn: String?

        public init(groupCertificateAuthorityArn: String? = nil) {
            self.groupCertificateAuthorityArn = groupCertificateAuthorityArn
        }

        private enum CodingKeys: String, CodingKey {
            case groupCertificateAuthorityArn = "GroupCertificateAuthorityArn"
        }
    }

    public struct Logger: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Space", required: false, type: .integer), 
            AWSShapeMember(label: "Level", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Component", required: false, type: .enum)
        ]
        /// The type of log output which will be used.
        public let `type`: LoggerType?
        /// The amount of file space, in KB, to use if the local file system is used for logging purposes.
        public let space: Int32?
        /// The level of the logs.
        public let level: LoggerLevel?
        /// The id of the logger.
        public let id: String?
        /// The component that will be subject to logging.
        public let component: LoggerComponent?

        public init(type: LoggerType? = nil, space: Int32? = nil, level: LoggerLevel? = nil, id: String? = nil, component: LoggerComponent? = nil) {
            self.`type` = `type`
            self.space = space
            self.level = level
            self.id = id
            self.component = component
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case space = "Space"
            case level = "Level"
            case id = "Id"
            case component = "Component"
        }
    }

    public struct GetDeviceDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string)
        ]
        public let deviceDefinitionId: String

        public init(deviceDefinitionId: String) {
            self.deviceDefinitionId = deviceDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceDefinitionId = "DeviceDefinitionId"
        }
    }

    public struct DeleteFunctionDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string)
        ]
        public let functionDefinitionId: String

        public init(functionDefinitionId: String) {
            self.functionDefinitionId = functionDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case functionDefinitionId = "FunctionDefinitionId"
        }
    }

    public struct UpdateSubscriptionDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let subscriptionDefinitionId: String
        public let name: String?

        public init(subscriptionDefinitionId: String, name: String? = nil) {
            self.subscriptionDefinitionId = subscriptionDefinitionId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionDefinitionId = "SubscriptionDefinitionId"
            case name = "Name"
        }
    }

    public struct UpdateGroupResponse: AWSShape {

    }

    public struct CreateDeviceDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Devices", required: false, type: .list), 
            AWSShapeMember(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string)
        ]
        public let amznClientToken: String?
        public let devices: [Device]?
        public let deviceDefinitionId: String

        public init(amznClientToken: String? = nil, devices: [Device]? = nil, deviceDefinitionId: String) {
            self.amznClientToken = amznClientToken
            self.devices = devices
            self.deviceDefinitionId = deviceDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case devices = "Devices"
            case deviceDefinitionId = "DeviceDefinitionId"
        }
    }

    public struct GetCoreDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string)
        ]
        public let coreDefinitionId: String

        public init(coreDefinitionId: String) {
            self.coreDefinitionId = coreDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case coreDefinitionId = "CoreDefinitionId"
        }
    }

    public struct GetDeploymentStatusResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeploymentType", required: false, type: .enum), 
            AWSShapeMember(label: "DeploymentStatus", required: false, type: .string), 
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "ErrorDetails", required: false, type: .list), 
            AWSShapeMember(label: "UpdatedAt", required: false, type: .string)
        ]
        /// The type of the deployment.
        public let deploymentType: DeploymentType?
        /// The status of the deployment.
        public let deploymentStatus: String?
        /// Error message
        public let errorMessage: String?
        /// Error details
        public let errorDetails: [ErrorDetail]?
        /// The time, in milliseconds since the epoch, when the deployment status was updated.
        public let updatedAt: String?

        public init(deploymentType: DeploymentType? = nil, deploymentStatus: String? = nil, errorMessage: String? = nil, errorDetails: [ErrorDetail]? = nil, updatedAt: String? = nil) {
            self.deploymentType = deploymentType
            self.deploymentStatus = deploymentStatus
            self.errorMessage = errorMessage
            self.errorDetails = errorDetails
            self.updatedAt = updatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentType = "DeploymentType"
            case deploymentStatus = "DeploymentStatus"
            case errorMessage = "ErrorMessage"
            case errorDetails = "ErrorDetails"
            case updatedAt = "UpdatedAt"
        }
    }

    public struct CreateGroupVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "ResourceDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "DeviceDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string), 
            AWSShapeMember(label: "LoggerDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "FunctionDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionDefinitionVersionArn", required: false, type: .string)
        ]
        public let coreDefinitionVersionArn: String?
        public let resourceDefinitionVersionArn: String?
        public let deviceDefinitionVersionArn: String?
        public let amznClientToken: String?
        public let groupId: String
        public let loggerDefinitionVersionArn: String?
        public let functionDefinitionVersionArn: String?
        public let subscriptionDefinitionVersionArn: String?

        public init(coreDefinitionVersionArn: String? = nil, resourceDefinitionVersionArn: String? = nil, deviceDefinitionVersionArn: String? = nil, amznClientToken: String? = nil, groupId: String, loggerDefinitionVersionArn: String? = nil, functionDefinitionVersionArn: String? = nil, subscriptionDefinitionVersionArn: String? = nil) {
            self.coreDefinitionVersionArn = coreDefinitionVersionArn
            self.resourceDefinitionVersionArn = resourceDefinitionVersionArn
            self.deviceDefinitionVersionArn = deviceDefinitionVersionArn
            self.amznClientToken = amznClientToken
            self.groupId = groupId
            self.loggerDefinitionVersionArn = loggerDefinitionVersionArn
            self.functionDefinitionVersionArn = functionDefinitionVersionArn
            self.subscriptionDefinitionVersionArn = subscriptionDefinitionVersionArn
        }

        private enum CodingKeys: String, CodingKey {
            case coreDefinitionVersionArn = "CoreDefinitionVersionArn"
            case resourceDefinitionVersionArn = "ResourceDefinitionVersionArn"
            case deviceDefinitionVersionArn = "DeviceDefinitionVersionArn"
            case amznClientToken = "X-Amzn-Client-Token"
            case groupId = "GroupId"
            case loggerDefinitionVersionArn = "LoggerDefinitionVersionArn"
            case functionDefinitionVersionArn = "FunctionDefinitionVersionArn"
            case subscriptionDefinitionVersionArn = "SubscriptionDefinitionVersionArn"
        }
    }

    public struct AssociateRoleToGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        /// The ARN of the role you wish to associate with this group.
        public let roleArn: String?
        public let groupId: String

        public init(roleArn: String? = nil, groupId: String) {
            self.roleArn = roleArn
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
            case groupId = "GroupId"
        }
    }

    public struct CreateResourceDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let initialVersion: ResourceDefinitionVersion?
        public let amznClientToken: String?
        public let name: String?

        public init(initialVersion: ResourceDefinitionVersion? = nil, amznClientToken: String? = nil, name: String? = nil) {
            self.initialVersion = initialVersion
            self.amznClientToken = amznClientToken
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case initialVersion = "InitialVersion"
            case amznClientToken = "X-Amzn-Client-Token"
            case name = "Name"
        }
    }

    public struct DeleteLoggerDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string)
        ]
        public let loggerDefinitionId: String

        public init(loggerDefinitionId: String) {
            self.loggerDefinitionId = loggerDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case loggerDefinitionId = "LoggerDefinitionId"
        }
    }

    public struct CreateGroupCertificateAuthorityRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let amznClientToken: String?
        public let groupId: String

        public init(amznClientToken: String? = nil, groupId: String) {
            self.amznClientToken = amznClientToken
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case groupId = "GroupId"
        }
    }

    public struct GetDeviceDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the device definition version was created.
        public let creationTimestamp: String?
        /// The version of the device definition version.
        public let version: String?
        /// Information about the device definition version.
        public let definition: DeviceDefinitionVersion?
        /// The ID of the device definition version.
        public let id: String?
        /// The ARN of the device definition version.
        public let arn: String?

        public init(creationTimestamp: String? = nil, version: String? = nil, definition: DeviceDefinitionVersion? = nil, id: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.version = version
            self.definition = definition
            self.id = id
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case version = "Version"
            case definition = "Definition"
            case id = "Id"
            case arn = "Arn"
        }
    }

    public struct ListDeviceDefinitionVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?
        public let deviceDefinitionId: String

        public init(nextToken: String? = nil, maxResults: String? = nil, deviceDefinitionId: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.deviceDefinitionId = deviceDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case deviceDefinitionId = "DeviceDefinitionId"
        }
    }

    public struct Core: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ThingArn", required: false, type: .string), 
            AWSShapeMember(label: "SyncShadow", required: false, type: .boolean), 
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The ARN of the thing which is the core.
        public let thingArn: String?
        /// If true, the core's local shadow is automatically synced with the cloud.
        public let syncShadow: Bool?
        /// The ARN of the certificate associated with the core.
        public let certificateArn: String?
        /// The ID of the core.
        public let id: String?

        public init(thingArn: String? = nil, syncShadow: Bool? = nil, certificateArn: String? = nil, id: String? = nil) {
            self.thingArn = thingArn
            self.syncShadow = syncShadow
            self.certificateArn = certificateArn
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case thingArn = "ThingArn"
            case syncShadow = "SyncShadow"
            case certificateArn = "CertificateArn"
            case id = "Id"
        }
    }

    public struct GetGroupCertificateConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeMember(label: "CertificateAuthorityExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", required: false, type: .string)
        ]
        public let certificateExpiryInMilliseconds: String?
        public let certificateAuthorityExpiryInMilliseconds: String?
        public let groupId: String?

        public init(certificateExpiryInMilliseconds: String? = nil, certificateAuthorityExpiryInMilliseconds: String? = nil, groupId: String? = nil) {
            self.certificateExpiryInMilliseconds = certificateExpiryInMilliseconds
            self.certificateAuthorityExpiryInMilliseconds = certificateAuthorityExpiryInMilliseconds
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateExpiryInMilliseconds = "CertificateExpiryInMilliseconds"
            case certificateAuthorityExpiryInMilliseconds = "CertificateAuthorityExpiryInMilliseconds"
            case groupId = "GroupId"
        }
    }

    public struct SubscriptionDefinitionVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subscriptions", required: false, type: .list)
        ]
        /// A list of subscriptions.
        public let subscriptions: [Subscription]?

        public init(subscriptions: [Subscription]? = nil) {
            self.subscriptions = subscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptions = "Subscriptions"
        }
    }

    public struct AssociateRoleToGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociatedAt", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the role ARN was associated with the group.
        public let associatedAt: String?

        public init(associatedAt: String? = nil) {
            self.associatedAt = associatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case associatedAt = "AssociatedAt"
        }
    }

    public struct CreateSubscriptionDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subscriptions", required: false, type: .list), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string)
        ]
        public let subscriptions: [Subscription]?
        public let amznClientToken: String?
        public let subscriptionDefinitionId: String

        public init(subscriptions: [Subscription]? = nil, amznClientToken: String? = nil, subscriptionDefinitionId: String) {
            self.subscriptions = subscriptions
            self.amznClientToken = amznClientToken
            self.subscriptionDefinitionId = subscriptionDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptions = "Subscriptions"
            case amznClientToken = "X-Amzn-Client-Token"
            case subscriptionDefinitionId = "SubscriptionDefinitionId"
        }
    }

    public struct CreateFunctionDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let version: String?
        public let id: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, version: String? = nil, id: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.version = version
            self.id = id
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case version = "Version"
            case id = "Id"
            case arn = "Arn"
        }
    }

    public struct UpdateLoggerDefinitionResponse: AWSShape {

    }

    public struct ResetDeploymentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Force", required: false, type: .boolean), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        /// If true, performs a best-effort only core reset.
        public let force: Bool?
        public let amznClientToken: String?
        public let groupId: String

        public init(force: Bool? = nil, amznClientToken: String? = nil, groupId: String) {
            self.force = force
            self.amznClientToken = amznClientToken
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case force = "Force"
            case amznClientToken = "X-Amzn-Client-Token"
            case groupId = "GroupId"
        }
    }

    public struct CreateLoggerDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let version: String?
        public let id: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, version: String? = nil, id: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.version = version
            self.id = id
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case version = "Version"
            case id = "Id"
            case arn = "Arn"
        }
    }

    public struct S3MachineLearningModelResourceData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Uri", required: false, type: .string), 
            AWSShapeMember(label: "DestinationPath", required: false, type: .string)
        ]
        /// The URI of the source model in an S3 bucket. The model package must be in tar.gz or .zip format.
        public let s3Uri: String?
        /// The absolute local path of the resource inside the Lambda environment.
        public let destinationPath: String?

        public init(s3Uri: String? = nil, destinationPath: String? = nil) {
            self.s3Uri = s3Uri
            self.destinationPath = destinationPath
        }

        private enum CodingKeys: String, CodingKey {
            case s3Uri = "S3Uri"
            case destinationPath = "DestinationPath"
        }
    }

    public struct GeneralError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "ErrorDetails", required: false, type: .list)
        ]
        /// A message containing information about the error.
        public let message: String?
        /// Details about the error.
        public let errorDetails: [ErrorDetail]?

        public init(message: String? = nil, errorDetails: [ErrorDetail]? = nil) {
            self.message = message
            self.errorDetails = errorDetails
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case errorDetails = "ErrorDetails"
        }
    }

    public struct AssociateServiceRoleToAccountRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", required: false, type: .string)
        ]
        /// The ARN of the service role you wish to associate with your account.
        public let roleArn: String?

        public init(roleArn: String? = nil) {
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
        }
    }

    public struct DeleteDeviceDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string)
        ]
        public let deviceDefinitionId: String

        public init(deviceDefinitionId: String) {
            self.deviceDefinitionId = deviceDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceDefinitionId = "DeviceDefinitionId"
        }
    }

    public struct CreateFunctionDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let initialVersion: FunctionDefinitionVersion?
        public let amznClientToken: String?
        public let name: String?

        public init(initialVersion: FunctionDefinitionVersion? = nil, amznClientToken: String? = nil, name: String? = nil) {
            self.initialVersion = initialVersion
            self.amznClientToken = amznClientToken
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case initialVersion = "InitialVersion"
            case amznClientToken = "X-Amzn-Client-Token"
            case name = "Name"
        }
    }

    public struct UpdateDeviceDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string)
        ]
        public let name: String?
        public let deviceDefinitionId: String

        public init(name: String? = nil, deviceDefinitionId: String) {
            self.name = name
            self.deviceDefinitionId = deviceDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case deviceDefinitionId = "DeviceDefinitionId"
        }
    }

    public struct GetResourceDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let arn: String?
        public let latestVersion: String?
        public let creationTimestamp: String?
        public let id: String?
        public let name: String?

        public init(lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, arn: String? = nil, latestVersion: String? = nil, creationTimestamp: String? = nil, id: String? = nil, name: String? = nil) {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.arn = arn
            self.latestVersion = latestVersion
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case arn = "Arn"
            case latestVersion = "LatestVersion"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case name = "Name"
        }
    }

    public struct ListCoreDefinitionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct GetFunctionDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string)
        ]
        public let functionDefinitionId: String

        public init(functionDefinitionId: String) {
            self.functionDefinitionId = functionDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case functionDefinitionId = "FunctionDefinitionId"
        }
    }

    public struct GetLoggerDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the logger definition version was created.
        public let creationTimestamp: String?
        /// The version of the logger definition version.
        public let version: String?
        /// Information about the logger definition version.
        public let definition: LoggerDefinitionVersion?
        /// The ID of the logger definition version.
        public let id: String?
        /// The ARN of the logger definition version.
        public let arn: String?

        public init(creationTimestamp: String? = nil, version: String? = nil, definition: LoggerDefinitionVersion? = nil, id: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.version = version
            self.definition = definition
            self.id = id
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case version = "Version"
            case definition = "Definition"
            case id = "Id"
            case arn = "Arn"
        }
    }

    public struct CreateDeviceDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let version: String?
        public let id: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, version: String? = nil, id: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.version = version
            self.id = id
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case version = "Version"
            case id = "Id"
            case arn = "Arn"
        }
    }

    public struct Resource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "ResourceDataContainer", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The resource ID, used to refer to a resource in the Lambda function configuration. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''. This must be unique within a Greengrass group.
        public let id: String?
        /// A container of data for all resource types.
        public let resourceDataContainer: ResourceDataContainer?
        /// The descriptive resource name, which is displayed on the Greengrass console. Max length 128 characters with pattern ''[a-zA-Z0-9:_-]+''. This must be unique within a Greengrass group.
        public let name: String?

        public init(id: String? = nil, resourceDataContainer: ResourceDataContainer? = nil, name: String? = nil) {
            self.id = id
            self.resourceDataContainer = resourceDataContainer
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case resourceDataContainer = "ResourceDataContainer"
            case name = "Name"
        }
    }

    public struct FunctionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExecArgs", required: false, type: .string), 
            AWSShapeMember(label: "Timeout", required: false, type: .integer), 
            AWSShapeMember(label: "Executable", required: false, type: .string), 
            AWSShapeMember(label: "Pinned", required: false, type: .boolean), 
            AWSShapeMember(label: "EncodingType", required: false, type: .enum), 
            AWSShapeMember(label: "MemorySize", required: false, type: .integer), 
            AWSShapeMember(label: "Environment", required: false, type: .structure)
        ]
        /// The execution arguments.
        public let execArgs: String?
        /// The allowed function execution time, after which Lambda should terminate the function. This timeout still applies to pinned lambdas for each request.
        public let timeout: Int32?
        /// The name of the function executable.
        public let executable: String?
        /// True if the function is pinned. Pinned means the function is long-lived and starts when the core starts.
        public let pinned: Bool?
        /// The expected encoding type of the input payload for the function. The default is ''json''.
        public let encodingType: EncodingType?
        /// The memory size, in KB, which the function requires.
        public let memorySize: Int32?
        /// The environment configuration of the function.
        public let environment: FunctionConfigurationEnvironment?

        public init(execArgs: String? = nil, timeout: Int32? = nil, executable: String? = nil, pinned: Bool? = nil, encodingType: EncodingType? = nil, memorySize: Int32? = nil, environment: FunctionConfigurationEnvironment? = nil) {
            self.execArgs = execArgs
            self.timeout = timeout
            self.executable = executable
            self.pinned = pinned
            self.encodingType = encodingType
            self.memorySize = memorySize
            self.environment = environment
        }

        private enum CodingKeys: String, CodingKey {
            case execArgs = "ExecArgs"
            case timeout = "Timeout"
            case executable = "Executable"
            case pinned = "Pinned"
            case encodingType = "EncodingType"
            case memorySize = "MemorySize"
            case environment = "Environment"
        }
    }

    public struct CreateResourceDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let version: String?
        public let id: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, version: String? = nil, id: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.version = version
            self.id = id
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case version = "Version"
            case id = "Id"
            case arn = "Arn"
        }
    }

    public struct ListGroupVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct CreateLoggerDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let arn: String?
        public let latestVersion: String?
        public let creationTimestamp: String?
        public let id: String?
        public let name: String?

        public init(lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, arn: String? = nil, latestVersion: String? = nil, creationTimestamp: String? = nil, id: String? = nil, name: String? = nil) {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.arn = arn
            self.latestVersion = latestVersion
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case arn = "Arn"
            case latestVersion = "LatestVersion"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case name = "Name"
        }
    }

    public struct GetFunctionDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FunctionDefinitionVersionId", location: .uri(locationName: "FunctionDefinitionVersionId"), required: true, type: .string), 
            AWSShapeMember(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string)
        ]
        public let functionDefinitionVersionId: String
        public let functionDefinitionId: String

        public init(functionDefinitionVersionId: String, functionDefinitionId: String) {
            self.functionDefinitionVersionId = functionDefinitionVersionId
            self.functionDefinitionId = functionDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case functionDefinitionVersionId = "FunctionDefinitionVersionId"
            case functionDefinitionId = "FunctionDefinitionId"
        }
    }

    public struct ListDeviceDefinitionVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct GetSubscriptionDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let arn: String?
        public let latestVersion: String?
        public let creationTimestamp: String?
        public let id: String?
        public let name: String?

        public init(lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, arn: String? = nil, latestVersion: String? = nil, creationTimestamp: String? = nil, id: String? = nil, name: String? = nil) {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.arn = arn
            self.latestVersion = latestVersion
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case arn = "Arn"
            case latestVersion = "LatestVersion"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case name = "Name"
        }
    }

    public struct ListFunctionDefinitionVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct GetLoggerDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "LoggerDefinitionVersionId", location: .uri(locationName: "LoggerDefinitionVersionId"), required: true, type: .string)
        ]
        public let loggerDefinitionId: String
        public let loggerDefinitionVersionId: String

        public init(loggerDefinitionId: String, loggerDefinitionVersionId: String) {
            self.loggerDefinitionId = loggerDefinitionId
            self.loggerDefinitionVersionId = loggerDefinitionVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case loggerDefinitionId = "LoggerDefinitionId"
            case loggerDefinitionVersionId = "LoggerDefinitionVersionId"
        }
    }

    public struct GetSubscriptionDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string)
        ]
        public let subscriptionDefinitionId: String

        public init(subscriptionDefinitionId: String) {
            self.subscriptionDefinitionId = subscriptionDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionDefinitionId = "SubscriptionDefinitionId"
        }
    }

    public struct ListCoreDefinitionVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?
        public let coreDefinitionId: String

        public init(nextToken: String? = nil, maxResults: String? = nil, coreDefinitionId: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.coreDefinitionId = coreDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case coreDefinitionId = "CoreDefinitionId"
        }
    }

    public struct CreateCoreDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Cores", required: false, type: .list)
        ]
        public let coreDefinitionId: String
        public let amznClientToken: String?
        public let cores: [Core]?

        public init(coreDefinitionId: String, amznClientToken: String? = nil, cores: [Core]? = nil) {
            self.coreDefinitionId = coreDefinitionId
            self.amznClientToken = amznClientToken
            self.cores = cores
        }

        private enum CodingKeys: String, CodingKey {
            case coreDefinitionId = "CoreDefinitionId"
            case amznClientToken = "X-Amzn-Client-Token"
            case cores = "Cores"
        }
    }

    public struct GetLoggerDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let arn: String?
        public let latestVersion: String?
        public let creationTimestamp: String?
        public let id: String?
        public let name: String?

        public init(lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, arn: String? = nil, latestVersion: String? = nil, creationTimestamp: String? = nil, id: String? = nil, name: String? = nil) {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.arn = arn
            self.latestVersion = latestVersion
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case arn = "Arn"
            case latestVersion = "LatestVersion"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case name = "Name"
        }
    }

    public struct CreateResourceDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceDefinitionId", location: .uri(locationName: "ResourceDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Resources", required: false, type: .list)
        ]
        public let resourceDefinitionId: String
        public let amznClientToken: String?
        public let resources: [Resource]?

        public init(resourceDefinitionId: String, amznClientToken: String? = nil, resources: [Resource]? = nil) {
            self.resourceDefinitionId = resourceDefinitionId
            self.amznClientToken = amznClientToken
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case resourceDefinitionId = "ResourceDefinitionId"
            case amznClientToken = "X-Amzn-Client-Token"
            case resources = "Resources"
        }
    }

    public struct GroupOwnerSetting: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupOwner", required: false, type: .string), 
            AWSShapeMember(label: "AutoAddGroupOwner", required: false, type: .boolean)
        ]
        /// The name of the Linux OS group whose privileges will be added to the Lambda process. This field is optional.
        public let groupOwner: String?
        /// If true, GreenGrass automatically adds the specified Linux OS group owner of the resource to the Lambda process privileges. Thus the Lambda process will have the file access permissions of the added Linux group.
        public let autoAddGroupOwner: Bool?

        public init(groupOwner: String? = nil, autoAddGroupOwner: Bool? = nil) {
            self.groupOwner = groupOwner
            self.autoAddGroupOwner = autoAddGroupOwner
        }

        private enum CodingKeys: String, CodingKey {
            case groupOwner = "GroupOwner"
            case autoAddGroupOwner = "AutoAddGroupOwner"
        }
    }

    public struct FunctionConfigurationEnvironment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceAccessPolicies", required: false, type: .list), 
            AWSShapeMember(label: "Variables", required: false, type: .map), 
            AWSShapeMember(label: "AccessSysfs", required: false, type: .boolean)
        ]
        /// A list of the resources, with their permissions, to which the Lambda function will be granted access. A Lambda function can have at most 10 resources.
        public let resourceAccessPolicies: [ResourceAccessPolicy]?
        /// Environment variables for the Lambda function's configuration.
        public let variables: [String: String]?
        /// If true, the Lambda function is allowed to access the host's /sys folder. Use this when the Lambda function needs to read device information from /sys.
        public let accessSysfs: Bool?

        public init(resourceAccessPolicies: [ResourceAccessPolicy]? = nil, variables: [String: String]? = nil, accessSysfs: Bool? = nil) {
            self.resourceAccessPolicies = resourceAccessPolicies
            self.variables = variables
            self.accessSysfs = accessSysfs
        }

        private enum CodingKeys: String, CodingKey {
            case resourceAccessPolicies = "ResourceAccessPolicies"
            case variables = "Variables"
            case accessSysfs = "AccessSysfs"
        }
    }

    public struct GetGroupVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the group version was created.
        public let creationTimestamp: String?
        /// The unique ID for the version of the group.
        public let version: String?
        /// Information about the group version definition.
        public let definition: GroupVersion?
        /// The ID of the group version.
        public let id: String?
        /// The ARN of the group version.
        public let arn: String?

        public init(creationTimestamp: String? = nil, version: String? = nil, definition: GroupVersion? = nil, id: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.version = version
            self.definition = definition
            self.id = id
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case version = "Version"
            case definition = "Definition"
            case id = "Id"
            case arn = "Arn"
        }
    }

    public struct ListDeviceDefinitionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Definitions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let definitions: [DefinitionInformation]?

        public init(nextToken: String? = nil, definitions: [DefinitionInformation]? = nil) {
            self.nextToken = nextToken
            self.definitions = definitions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case definitions = "Definitions"
        }
    }

    public struct LocalDeviceResourceData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupOwnerSetting", required: false, type: .structure), 
            AWSShapeMember(label: "SourcePath", required: false, type: .string)
        ]
        /// Group/owner related settings for local resources.
        public let groupOwnerSetting: GroupOwnerSetting?
        /// The local absolute path of the device resource. The source path for a device resource can refer only to a character device or block device under ''/dev''.
        public let sourcePath: String?

        public init(groupOwnerSetting: GroupOwnerSetting? = nil, sourcePath: String? = nil) {
            self.groupOwnerSetting = groupOwnerSetting
            self.sourcePath = sourcePath
        }

        private enum CodingKeys: String, CodingKey {
            case groupOwnerSetting = "GroupOwnerSetting"
            case sourcePath = "SourcePath"
        }
    }

    public struct ListDeploymentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?
        public let groupId: String

        public init(nextToken: String? = nil, maxResults: String? = nil, groupId: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case groupId = "GroupId"
        }
    }

    public struct ResourceDataContainer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SageMakerMachineLearningModelResourceData", required: false, type: .structure), 
            AWSShapeMember(label: "LocalVolumeResourceData", required: false, type: .structure), 
            AWSShapeMember(label: "LocalDeviceResourceData", required: false, type: .structure), 
            AWSShapeMember(label: "S3MachineLearningModelResourceData", required: false, type: .structure)
        ]
        /// Attributes that define an SageMaker machine learning resource.
        public let sageMakerMachineLearningModelResourceData: SageMakerMachineLearningModelResourceData?
        /// Attributes that define the local volume resource.
        public let localVolumeResourceData: LocalVolumeResourceData?
        /// Attributes that define the local device resource.
        public let localDeviceResourceData: LocalDeviceResourceData?
        /// Attributes that define an S3 machine learning resource.
        public let s3MachineLearningModelResourceData: S3MachineLearningModelResourceData?

        public init(sageMakerMachineLearningModelResourceData: SageMakerMachineLearningModelResourceData? = nil, localVolumeResourceData: LocalVolumeResourceData? = nil, localDeviceResourceData: LocalDeviceResourceData? = nil, s3MachineLearningModelResourceData: S3MachineLearningModelResourceData? = nil) {
            self.sageMakerMachineLearningModelResourceData = sageMakerMachineLearningModelResourceData
            self.localVolumeResourceData = localVolumeResourceData
            self.localDeviceResourceData = localDeviceResourceData
            self.s3MachineLearningModelResourceData = s3MachineLearningModelResourceData
        }

        private enum CodingKeys: String, CodingKey {
            case sageMakerMachineLearningModelResourceData = "SageMakerMachineLearningModelResourceData"
            case localVolumeResourceData = "LocalVolumeResourceData"
            case localDeviceResourceData = "LocalDeviceResourceData"
            case s3MachineLearningModelResourceData = "S3MachineLearningModelResourceData"
        }
    }

    public struct CreateCoreDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let arn: String?
        public let latestVersion: String?
        public let creationTimestamp: String?
        public let id: String?
        public let name: String?

        public init(lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, arn: String? = nil, latestVersion: String? = nil, creationTimestamp: String? = nil, id: String? = nil, name: String? = nil) {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.arn = arn
            self.latestVersion = latestVersion
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case arn = "Arn"
            case latestVersion = "LatestVersion"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case name = "Name"
        }
    }

    public struct ListGroupCertificateAuthoritiesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct UpdateResourceDefinitionResponse: AWSShape {

    }

    public struct ListFunctionDefinitionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Definitions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let definitions: [DefinitionInformation]?

        public init(nextToken: String? = nil, definitions: [DefinitionInformation]? = nil) {
            self.nextToken = nextToken
            self.definitions = definitions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case definitions = "Definitions"
        }
    }

    public struct ListGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Groups", required: false, type: .list)
        ]
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?
        /// Information about a group.
        public let groups: [GroupInformation]?

        public init(nextToken: String? = nil, groups: [GroupInformation]? = nil) {
            self.nextToken = nextToken
            self.groups = groups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case groups = "Groups"
        }
    }

    public struct UpdateFunctionDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let functionDefinitionId: String
        public let name: String?

        public init(functionDefinitionId: String, name: String? = nil) {
            self.functionDefinitionId = functionDefinitionId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case functionDefinitionId = "FunctionDefinitionId"
            case name = "Name"
        }
    }

    public struct ListResourceDefinitionVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct CreateResourceDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let arn: String?
        public let latestVersion: String?
        public let creationTimestamp: String?
        public let id: String?
        public let name: String?

        public init(lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, arn: String? = nil, latestVersion: String? = nil, creationTimestamp: String? = nil, id: String? = nil, name: String? = nil) {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.arn = arn
            self.latestVersion = latestVersion
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case arn = "Arn"
            case latestVersion = "LatestVersion"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case name = "Name"
        }
    }

    public enum UpdateTargetsArchitecture: String, CustomStringConvertible, Codable {
        case armv7l = "armv7l"
        case x8664 = "x86_64"
        case aarch64 = "aarch64"
        public var description: String { return self.rawValue }
    }

    public struct ListDefinitionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Definitions", required: false, type: .list)
        ]
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?
        /// Information about a definition.
        public let definitions: [DefinitionInformation]?

        public init(nextToken: String? = nil, definitions: [DefinitionInformation]? = nil) {
            self.nextToken = nextToken
            self.definitions = definitions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case definitions = "Definitions"
        }
    }

    public struct DeleteGroupResponse: AWSShape {

    }

    public struct CreateSubscriptionDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let arn: String?
        public let latestVersion: String?
        public let creationTimestamp: String?
        public let id: String?
        public let name: String?

        public init(lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, arn: String? = nil, latestVersion: String? = nil, creationTimestamp: String? = nil, id: String? = nil, name: String? = nil) {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.arn = arn
            self.latestVersion = latestVersion
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case arn = "Arn"
            case latestVersion = "LatestVersion"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case name = "Name"
        }
    }

    public struct CreateDeviceDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let arn: String?
        public let latestVersion: String?
        public let creationTimestamp: String?
        public let id: String?
        public let name: String?

        public init(lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, arn: String? = nil, latestVersion: String? = nil, creationTimestamp: String? = nil, id: String? = nil, name: String? = nil) {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.arn = arn
            self.latestVersion = latestVersion
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case arn = "Arn"
            case latestVersion = "LatestVersion"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case name = "Name"
        }
    }

    public struct VersionInformation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the version was created.
        public let creationTimestamp: String?
        /// The unique ID of the version.
        public let version: String?
        /// The ID of the version.
        public let id: String?
        /// The ARN of the version.
        public let arn: String?

        public init(creationTimestamp: String? = nil, version: String? = nil, id: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.version = version
            self.id = id
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case version = "Version"
            case id = "Id"
            case arn = "Arn"
        }
    }

    public struct GetGroupVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string), 
            AWSShapeMember(label: "GroupVersionId", location: .uri(locationName: "GroupVersionId"), required: true, type: .string)
        ]
        public let groupId: String
        public let groupVersionId: String

        public init(groupId: String, groupVersionId: String) {
            self.groupId = groupId
            self.groupVersionId = groupVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case groupVersionId = "GroupVersionId"
        }
    }

    public struct ResetDeploymentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeploymentId", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentArn", required: false, type: .string)
        ]
        /// The ID of the deployment.
        public let deploymentId: String?
        /// The ARN of the deployment.
        public let deploymentArn: String?

        public init(deploymentId: String? = nil, deploymentArn: String? = nil) {
            self.deploymentId = deploymentId
            self.deploymentArn = deploymentArn
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "DeploymentId"
            case deploymentArn = "DeploymentArn"
        }
    }

    public struct DisassociateServiceRoleFromAccountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisassociatedAt", required: false, type: .string)
        ]
        /// The time when the service role was disassociated from the account.
        public let disassociatedAt: String?

        public init(disassociatedAt: String? = nil) {
            self.disassociatedAt = disassociatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case disassociatedAt = "DisassociatedAt"
        }
    }

    public struct UpdateResourceDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ResourceDefinitionId", location: .uri(locationName: "ResourceDefinitionId"), required: true, type: .string)
        ]
        public let name: String?
        public let resourceDefinitionId: String

        public init(name: String? = nil, resourceDefinitionId: String) {
            self.name = name
            self.resourceDefinitionId = resourceDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case resourceDefinitionId = "ResourceDefinitionId"
        }
    }

    public struct DisassociateRoleFromGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisassociatedAt", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the role was disassociated from the group.
        public let disassociatedAt: String?

        public init(disassociatedAt: String? = nil) {
            self.disassociatedAt = disassociatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case disassociatedAt = "DisassociatedAt"
        }
    }

    public enum LoggerType: String, CustomStringConvertible, Codable {
        case filesystem = "FileSystem"
        case awscloudwatch = "AWSCloudWatch"
        public var description: String { return self.rawValue }
    }

    public struct ResourceAccessPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Permission", required: false, type: .enum), 
            AWSShapeMember(label: "ResourceId", required: false, type: .string)
        ]
        /// The permissions that the Lambda function has to the resource. Can be one of ''rw'' (read/write) or ''ro'' (read-only).
        public let permission: Permission?
        /// The ID of the resource. (This ID is assigned to the resource when you create the resource definiton.)
        public let resourceId: String?

        public init(permission: Permission? = nil, resourceId: String? = nil) {
            self.permission = permission
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case permission = "Permission"
            case resourceId = "ResourceId"
        }
    }

    public struct GetConnectivityInfoResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectivityInfo", required: false, type: .list)
        ]
        /// A message about the connectivity info request.
        public let message: String?
        /// Connectivity info list.
        public let connectivityInfo: [ConnectivityInfo]?

        public init(message: String? = nil, connectivityInfo: [ConnectivityInfo]? = nil) {
            self.message = message
            self.connectivityInfo = connectivityInfo
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
            case connectivityInfo = "ConnectivityInfo"
        }
    }

    public struct UpdateGroupCertificateConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        /// The amount of time remaining before the certificate expires, in milliseconds.
        public let certificateExpiryInMilliseconds: String?
        public let groupId: String

        public init(certificateExpiryInMilliseconds: String? = nil, groupId: String) {
            self.certificateExpiryInMilliseconds = certificateExpiryInMilliseconds
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateExpiryInMilliseconds = "CertificateExpiryInMilliseconds"
            case groupId = "GroupId"
        }
    }

    public enum DeploymentType: String, CustomStringConvertible, Codable {
        case newdeployment = "NewDeployment"
        case redeployment = "Redeployment"
        case resetdeployment = "ResetDeployment"
        case forceresetdeployment = "ForceResetDeployment"
        public var description: String { return self.rawValue }
    }

    public struct DisassociateServiceRoleFromAccountRequest: AWSShape {

    }

    public enum EncodingType: String, CustomStringConvertible, Codable {
        case binary = "binary"
        case json = "json"
        public var description: String { return self.rawValue }
    }

    public struct GetServiceRoleForAccountRequest: AWSShape {

    }

    public enum SoftwareToUpdate: String, CustomStringConvertible, Codable {
        case core = "core"
        case otaAgent = "ota_agent"
        public var description: String { return self.rawValue }
    }

    public struct GetSubscriptionDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the subscription definition version was created.
        public let creationTimestamp: String?
        /// The version of the subscription definition version.
        public let version: String?
        /// Information about the subscription definition version.
        public let definition: SubscriptionDefinitionVersion?
        /// The ID of the subscription definition version.
        public let id: String?
        /// The ARN of the subscription definition version.
        public let arn: String?

        public init(creationTimestamp: String? = nil, version: String? = nil, definition: SubscriptionDefinitionVersion? = nil, id: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.version = version
            self.definition = definition
            self.id = id
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case version = "Version"
            case definition = "Definition"
            case id = "Id"
            case arn = "Arn"
        }
    }

    public struct CreateGroupVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let version: String?
        public let id: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, version: String? = nil, id: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.version = version
            self.id = id
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case version = "Version"
            case id = "Id"
            case arn = "Arn"
        }
    }

    public struct ListGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct ListGroupVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?
        public let groupId: String

        public init(nextToken: String? = nil, maxResults: String? = nil, groupId: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case groupId = "GroupId"
        }
    }

    public struct DefinitionInformation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the definition was last updated.
        public let lastUpdatedTimestamp: String?
        /// The ARN of the latest version of the definition.
        public let latestVersionArn: String?
        /// The ARN of the definition.
        public let arn: String?
        /// The latest version of the definition.
        public let latestVersion: String?
        /// The time, in milliseconds since the epoch, when the definition was created.
        public let creationTimestamp: String?
        /// The ID of the definition.
        public let id: String?
        /// The name of the definition.
        public let name: String?

        public init(lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, arn: String? = nil, latestVersion: String? = nil, creationTimestamp: String? = nil, id: String? = nil, name: String? = nil) {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.arn = arn
            self.latestVersion = latestVersion
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case arn = "Arn"
            case latestVersion = "LatestVersion"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case name = "Name"
        }
    }

    public struct Function: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FunctionArn", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "FunctionConfiguration", required: false, type: .structure)
        ]
        /// The ARN of the Lambda function.
        public let functionArn: String?
        /// The ID of the Lambda function.
        public let id: String?
        /// The configuration of the Lambda function.
        public let functionConfiguration: FunctionConfiguration?

        public init(functionArn: String? = nil, id: String? = nil, functionConfiguration: FunctionConfiguration? = nil) {
            self.functionArn = functionArn
            self.id = id
            self.functionConfiguration = functionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case functionArn = "FunctionArn"
            case id = "Id"
            case functionConfiguration = "FunctionConfiguration"
        }
    }

    public struct ListLoggerDefinitionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DeleteDeviceDefinitionResponse: AWSShape {

    }

    public enum UpdateTargetsOperatingSystem: String, CustomStringConvertible, Codable {
        case ubuntu = "ubuntu"
        case raspbian = "raspbian"
        case amazonLinux = "amazon_linux"
        public var description: String { return self.rawValue }
    }

    public struct UpdateLoggerDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let loggerDefinitionId: String
        public let name: String?

        public init(loggerDefinitionId: String, name: String? = nil) {
            self.loggerDefinitionId = loggerDefinitionId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case loggerDefinitionId = "LoggerDefinitionId"
            case name = "Name"
        }
    }

    public struct ListResourceDefinitionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: String?

        public init(nextToken: String? = nil, maxResults: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct GetSubscriptionDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "SubscriptionDefinitionVersionId", location: .uri(locationName: "SubscriptionDefinitionVersionId"), required: true, type: .string)
        ]
        public let subscriptionDefinitionId: String
        public let subscriptionDefinitionVersionId: String

        public init(subscriptionDefinitionId: String, subscriptionDefinitionVersionId: String) {
            self.subscriptionDefinitionId = subscriptionDefinitionId
            self.subscriptionDefinitionVersionId = subscriptionDefinitionVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionDefinitionId = "SubscriptionDefinitionId"
            case subscriptionDefinitionVersionId = "SubscriptionDefinitionVersionId"
        }
    }

    public struct CoreDefinitionVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cores", required: false, type: .list)
        ]
        /// A list of cores in the core definition version.
        public let cores: [Core]?

        public init(cores: [Core]? = nil) {
            self.cores = cores
        }

        private enum CodingKeys: String, CodingKey {
            case cores = "Cores"
        }
    }

    public struct GroupCertificateConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeMember(label: "CertificateAuthorityExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", required: false, type: .string)
        ]
        /// The amount of time remaining before the certificate expires, in milliseconds.
        public let certificateExpiryInMilliseconds: String?
        /// The amount of time remaining before the certificate authority expires, in milliseconds.
        public let certificateAuthorityExpiryInMilliseconds: String?
        /// The ID of the group certificate configuration.
        public let groupId: String?

        public init(certificateExpiryInMilliseconds: String? = nil, certificateAuthorityExpiryInMilliseconds: String? = nil, groupId: String? = nil) {
            self.certificateExpiryInMilliseconds = certificateExpiryInMilliseconds
            self.certificateAuthorityExpiryInMilliseconds = certificateAuthorityExpiryInMilliseconds
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateExpiryInMilliseconds = "CertificateExpiryInMilliseconds"
            case certificateAuthorityExpiryInMilliseconds = "CertificateAuthorityExpiryInMilliseconds"
            case groupId = "GroupId"
        }
    }

    public struct GetDeviceDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let arn: String?
        public let latestVersion: String?
        public let creationTimestamp: String?
        public let id: String?
        public let name: String?

        public init(lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, arn: String? = nil, latestVersion: String? = nil, creationTimestamp: String? = nil, id: String? = nil, name: String? = nil) {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.arn = arn
            self.latestVersion = latestVersion
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case arn = "Arn"
            case latestVersion = "LatestVersion"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case name = "Name"
        }
    }

    public struct CreateSubscriptionDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let version: String?
        public let id: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, version: String? = nil, id: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.version = version
            self.id = id
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case version = "Version"
            case id = "Id"
            case arn = "Arn"
        }
    }

    public struct ErrorDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetailedErrorCode", required: false, type: .string), 
            AWSShapeMember(label: "DetailedErrorMessage", required: false, type: .string)
        ]
        /// A detailed error code.
        public let detailedErrorCode: String?
        /// A detailed error message.
        public let detailedErrorMessage: String?

        public init(detailedErrorCode: String? = nil, detailedErrorMessage: String? = nil) {
            self.detailedErrorCode = detailedErrorCode
            self.detailedErrorMessage = detailedErrorMessage
        }

        private enum CodingKeys: String, CodingKey {
            case detailedErrorCode = "DetailedErrorCode"
            case detailedErrorMessage = "DetailedErrorMessage"
        }
    }

    public struct GetFunctionDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let arn: String?
        public let latestVersion: String?
        public let creationTimestamp: String?
        public let id: String?
        public let name: String?

        public init(lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, arn: String? = nil, latestVersion: String? = nil, creationTimestamp: String? = nil, id: String? = nil, name: String? = nil) {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.arn = arn
            self.latestVersion = latestVersion
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case arn = "Arn"
            case latestVersion = "LatestVersion"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case name = "Name"
        }
    }

    public struct ListDeploymentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Deployments", required: false, type: .list)
        ]
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?
        /// A list of deployments for the requested groups.
        public let deployments: [Deployment]?

        public init(nextToken: String? = nil, deployments: [Deployment]? = nil) {
            self.nextToken = nextToken
            self.deployments = deployments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case deployments = "Deployments"
        }
    }

    public struct GetGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct GetServiceRoleForAccountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "AssociatedAt", required: false, type: .string)
        ]
        /// The ARN of the role which is associated with the account.
        public let roleArn: String?
        /// The time when the service role was associated with the account.
        public let associatedAt: String?

        public init(roleArn: String? = nil, associatedAt: String? = nil) {
            self.roleArn = roleArn
            self.associatedAt = associatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
            case associatedAt = "AssociatedAt"
        }
    }

    public struct ListGroupCertificateAuthoritiesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupCertificateAuthorities", required: false, type: .list)
        ]
        /// A list of certificate authorities associated with the group.
        public let groupCertificateAuthorities: [GroupCertificateAuthorityProperties]?

        public init(groupCertificateAuthorities: [GroupCertificateAuthorityProperties]? = nil) {
            self.groupCertificateAuthorities = groupCertificateAuthorities
        }

        private enum CodingKeys: String, CodingKey {
            case groupCertificateAuthorities = "GroupCertificateAuthorities"
        }
    }

    public struct DeleteSubscriptionDefinitionResponse: AWSShape {

    }

    public struct ConnectivityInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortNumber", required: false, type: .integer), 
            AWSShapeMember(label: "HostAddress", required: false, type: .string), 
            AWSShapeMember(label: "Metadata", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The port of the Greengrass core. Usually 8883.
        public let portNumber: Int32?
        /// The endpoint for the Greengrass core. Can be an IP address or DNS.
        public let hostAddress: String?
        /// Metadata for this endpoint.
        public let metadata: String?
        /// The ID of the connectivity information.
        public let id: String?

        public init(portNumber: Int32? = nil, hostAddress: String? = nil, metadata: String? = nil, id: String? = nil) {
            self.portNumber = portNumber
            self.hostAddress = hostAddress
            self.metadata = metadata
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case portNumber = "PortNumber"
            case hostAddress = "HostAddress"
            case metadata = "Metadata"
            case id = "Id"
        }
    }

    public struct GetAssociatedRoleResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "AssociatedAt", required: false, type: .string)
        ]
        /// The ARN of the role that is associated with the group.
        public let roleArn: String?
        /// The time when the role was associated with the group.
        public let associatedAt: String?

        public init(roleArn: String? = nil, associatedAt: String? = nil) {
            self.roleArn = roleArn
            self.associatedAt = associatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
            case associatedAt = "AssociatedAt"
        }
    }

    public struct DeleteFunctionDefinitionResponse: AWSShape {

    }

    public struct CreateSoftwareUpdateJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IotJobId", required: false, type: .string), 
            AWSShapeMember(label: "IotJobArn", required: false, type: .string)
        ]
        /// The IoT Job Id corresponding to this update.
        public let iotJobId: String?
        /// The IoT Job ARN corresponding to this update.
        public let iotJobArn: String?

        public init(iotJobId: String? = nil, iotJobArn: String? = nil) {
            self.iotJobId = iotJobId
            self.iotJobArn = iotJobArn
        }

        private enum CodingKeys: String, CodingKey {
            case iotJobId = "IotJobId"
            case iotJobArn = "IotJobArn"
        }
    }

    public struct ListCoreDefinitionVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct CreateFunctionDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let lastUpdatedTimestamp: String?
        public let latestVersionArn: String?
        public let arn: String?
        public let latestVersion: String?
        public let creationTimestamp: String?
        public let id: String?
        public let name: String?

        public init(lastUpdatedTimestamp: String? = nil, latestVersionArn: String? = nil, arn: String? = nil, latestVersion: String? = nil, creationTimestamp: String? = nil, id: String? = nil, name: String? = nil) {
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.latestVersionArn = latestVersionArn
            self.arn = arn
            self.latestVersion = latestVersion
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case latestVersionArn = "LatestVersionArn"
            case arn = "Arn"
            case latestVersion = "LatestVersion"
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case name = "Name"
        }
    }

    public struct GetCoreDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "CoreDefinitionVersionId", location: .uri(locationName: "CoreDefinitionVersionId"), required: true, type: .string)
        ]
        public let coreDefinitionId: String
        public let coreDefinitionVersionId: String

        public init(coreDefinitionId: String, coreDefinitionVersionId: String) {
            self.coreDefinitionId = coreDefinitionId
            self.coreDefinitionVersionId = coreDefinitionVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case coreDefinitionId = "CoreDefinitionId"
            case coreDefinitionVersionId = "CoreDefinitionVersionId"
        }
    }

    public struct LoggerDefinitionVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Loggers", required: false, type: .list)
        ]
        /// A list of loggers.
        public let loggers: [Logger]?

        public init(loggers: [Logger]? = nil) {
            self.loggers = loggers
        }

        private enum CodingKeys: String, CodingKey {
            case loggers = "Loggers"
        }
    }

    public struct GetCoreDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the core definition version was created.
        public let creationTimestamp: String?
        /// The version of the core definition version.
        public let version: String?
        /// Information about the core definition version.
        public let definition: CoreDefinitionVersion?
        /// The ID of the core definition version.
        public let id: String?
        /// The ARN of the core definition version.
        public let arn: String?

        public init(creationTimestamp: String? = nil, version: String? = nil, definition: CoreDefinitionVersion? = nil, id: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.version = version
            self.definition = definition
            self.id = id
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case version = "Version"
            case definition = "Definition"
            case id = "Id"
            case arn = "Arn"
        }
    }

    public struct CreateSubscriptionDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let initialVersion: SubscriptionDefinitionVersion?
        public let amznClientToken: String?
        public let name: String?

        public init(initialVersion: SubscriptionDefinitionVersion? = nil, amznClientToken: String? = nil, name: String? = nil) {
            self.initialVersion = initialVersion
            self.amznClientToken = amznClientToken
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case initialVersion = "InitialVersion"
            case amznClientToken = "X-Amzn-Client-Token"
            case name = "Name"
        }
    }

    public enum Permission: String, CustomStringConvertible, Codable {
        case ro = "ro"
        case rw = "rw"
        public var description: String { return self.rawValue }
    }

    public struct UpdateGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let name: String?
        public let groupId: String

        public init(name: String? = nil, groupId: String) {
            self.name = name
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case groupId = "GroupId"
        }
    }

    public struct DeleteSubscriptionDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string)
        ]
        public let subscriptionDefinitionId: String

        public init(subscriptionDefinitionId: String) {
            self.subscriptionDefinitionId = subscriptionDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionDefinitionId = "SubscriptionDefinitionId"
        }
    }

    public struct GetGroupCertificateConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct CreateLoggerDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let initialVersion: LoggerDefinitionVersion?
        public let amznClientToken: String?
        public let name: String?

        public init(initialVersion: LoggerDefinitionVersion? = nil, amznClientToken: String? = nil, name: String? = nil) {
            self.initialVersion = initialVersion
            self.amznClientToken = amznClientToken
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case initialVersion = "InitialVersion"
            case amznClientToken = "X-Amzn-Client-Token"
            case name = "Name"
        }
    }

    public struct GetDeploymentStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeploymentId", location: .uri(locationName: "DeploymentId"), required: true, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let deploymentId: String
        public let groupId: String

        public init(deploymentId: String, groupId: String) {
            self.deploymentId = deploymentId
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "DeploymentId"
            case groupId = "GroupId"
        }
    }

    public struct Device: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ThingArn", required: false, type: .string), 
            AWSShapeMember(label: "SyncShadow", required: false, type: .boolean), 
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The thing ARN of the device.
        public let thingArn: String?
        /// If true, the device's local shadow will be automatically synced with the cloud.
        public let syncShadow: Bool?
        /// The ARN of the certificate associated with the device.
        public let certificateArn: String?
        /// The ID of the device.
        public let id: String?

        public init(thingArn: String? = nil, syncShadow: Bool? = nil, certificateArn: String? = nil, id: String? = nil) {
            self.thingArn = thingArn
            self.syncShadow = syncShadow
            self.certificateArn = certificateArn
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case thingArn = "ThingArn"
            case syncShadow = "SyncShadow"
            case certificateArn = "CertificateArn"
            case id = "Id"
        }
    }

    public struct UpdateCoreDefinitionResponse: AWSShape {

    }

    public struct GetLoggerDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string)
        ]
        public let loggerDefinitionId: String

        public init(loggerDefinitionId: String) {
            self.loggerDefinitionId = loggerDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case loggerDefinitionId = "LoggerDefinitionId"
        }
    }

    public struct Deployment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeploymentType", required: false, type: .enum), 
            AWSShapeMember(label: "CreatedAt", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentArn", required: false, type: .string), 
            AWSShapeMember(label: "GroupArn", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentId", required: false, type: .string)
        ]
        /// The type of the deployment.
        public let deploymentType: DeploymentType?
        /// The time, in milliseconds since the epoch, when the deployment was created.
        public let createdAt: String?
        /// The ARN of the deployment.
        public let deploymentArn: String?
        /// The ARN of the group for this deployment.
        public let groupArn: String?
        /// The ID of the deployment.
        public let deploymentId: String?

        public init(deploymentType: DeploymentType? = nil, createdAt: String? = nil, deploymentArn: String? = nil, groupArn: String? = nil, deploymentId: String? = nil) {
            self.deploymentType = deploymentType
            self.createdAt = createdAt
            self.deploymentArn = deploymentArn
            self.groupArn = groupArn
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentType = "DeploymentType"
            case createdAt = "CreatedAt"
            case deploymentArn = "DeploymentArn"
            case groupArn = "GroupArn"
            case deploymentId = "DeploymentId"
        }
    }

    public struct ResourceDefinitionVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Resources", required: false, type: .list)
        ]
        /// A list of resources.
        public let resources: [Resource]?

        public init(resources: [Resource]? = nil) {
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case resources = "Resources"
        }
    }

    public struct ListSubscriptionDefinitionVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct GetGroupCertificateAuthorityResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PemEncodedCertificate", required: false, type: .string), 
            AWSShapeMember(label: "GroupCertificateAuthorityId", required: false, type: .string), 
            AWSShapeMember(label: "GroupCertificateAuthorityArn", required: false, type: .string)
        ]
        /// The PEM encoded certificate for the group.
        public let pemEncodedCertificate: String?
        /// The ID of the certificate authority for the group.
        public let groupCertificateAuthorityId: String?
        /// The ARN of the certificate authority for the group.
        public let groupCertificateAuthorityArn: String?

        public init(pemEncodedCertificate: String? = nil, groupCertificateAuthorityId: String? = nil, groupCertificateAuthorityArn: String? = nil) {
            self.pemEncodedCertificate = pemEncodedCertificate
            self.groupCertificateAuthorityId = groupCertificateAuthorityId
            self.groupCertificateAuthorityArn = groupCertificateAuthorityArn
        }

        private enum CodingKeys: String, CodingKey {
            case pemEncodedCertificate = "PemEncodedCertificate"
            case groupCertificateAuthorityId = "GroupCertificateAuthorityId"
            case groupCertificateAuthorityArn = "GroupCertificateAuthorityArn"
        }
    }

    public enum LoggerLevel: String, CustomStringConvertible, Codable {
        case debug = "DEBUG"
        case info = "INFO"
        case warn = "WARN"
        case error = "ERROR"
        case fatal = "FATAL"
        public var description: String { return self.rawValue }
    }

    public struct ListCoreDefinitionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Definitions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let definitions: [DefinitionInformation]?

        public init(nextToken: String? = nil, definitions: [DefinitionInformation]? = nil) {
            self.nextToken = nextToken
            self.definitions = definitions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case definitions = "Definitions"
        }
    }

    public struct UpdateConnectivityInfoResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        /// A message about the connectivity info update request.
        public let message: String?
        /// The new version of the connectivity info.
        public let version: String?

        public init(message: String? = nil, version: String? = nil) {
            self.message = message
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
            case version = "Version"
        }
    }

    public struct ListLoggerDefinitionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Definitions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let definitions: [DefinitionInformation]?

        public init(nextToken: String? = nil, definitions: [DefinitionInformation]? = nil) {
            self.nextToken = nextToken
            self.definitions = definitions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case definitions = "Definitions"
        }
    }

    public struct CreateCoreDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let version: String?
        public let id: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, version: String? = nil, id: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.version = version
            self.id = id
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case version = "Version"
            case id = "Id"
            case arn = "Arn"
        }
    }

    public struct DeviceDefinitionVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Devices", required: false, type: .list)
        ]
        /// A list of devices in the definition version.
        public let devices: [Device]?

        public init(devices: [Device]? = nil) {
            self.devices = devices
        }

        private enum CodingKeys: String, CodingKey {
            case devices = "Devices"
        }
    }

    public struct UpdateGroupCertificateConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeMember(label: "CertificateAuthorityExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", required: false, type: .string)
        ]
        public let certificateExpiryInMilliseconds: String?
        public let certificateAuthorityExpiryInMilliseconds: String?
        public let groupId: String?

        public init(certificateExpiryInMilliseconds: String? = nil, certificateAuthorityExpiryInMilliseconds: String? = nil, groupId: String? = nil) {
            self.certificateExpiryInMilliseconds = certificateExpiryInMilliseconds
            self.certificateAuthorityExpiryInMilliseconds = certificateAuthorityExpiryInMilliseconds
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateExpiryInMilliseconds = "CertificateExpiryInMilliseconds"
            case certificateAuthorityExpiryInMilliseconds = "CertificateAuthorityExpiryInMilliseconds"
            case groupId = "GroupId"
        }
    }

    public struct CreateDeploymentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeploymentId", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentArn", required: false, type: .string)
        ]
        /// The ID of the deployment.
        public let deploymentId: String?
        /// The ARN of the deployment.
        public let deploymentArn: String?

        public init(deploymentId: String? = nil, deploymentArn: String? = nil) {
            self.deploymentId = deploymentId
            self.deploymentArn = deploymentArn
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "DeploymentId"
            case deploymentArn = "DeploymentArn"
        }
    }

    public struct GetResourceDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceDefinitionId", location: .uri(locationName: "ResourceDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "ResourceDefinitionVersionId", location: .uri(locationName: "ResourceDefinitionVersionId"), required: true, type: .string)
        ]
        public let resourceDefinitionId: String
        public let resourceDefinitionVersionId: String

        public init(resourceDefinitionId: String, resourceDefinitionVersionId: String) {
            self.resourceDefinitionId = resourceDefinitionId
            self.resourceDefinitionVersionId = resourceDefinitionVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceDefinitionId = "ResourceDefinitionId"
            case resourceDefinitionVersionId = "ResourceDefinitionVersionId"
        }
    }

}