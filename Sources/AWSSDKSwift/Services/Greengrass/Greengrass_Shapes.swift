// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Greengrass {

    public struct ListResourceDefinitionVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceDefinitionId", location: .uri(locationName: "ResourceDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let resourceDefinitionId: String
        public let maxResults: String?
        public let nextToken: String?

        public init(resourceDefinitionId: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.resourceDefinitionId = resourceDefinitionId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceDefinitionId = "ResourceDefinitionId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct CreateResourceDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let latestVersion: String?
        public let latestVersionArn: String?
        public let lastUpdatedTimestamp: String?
        public let name: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, latestVersion: String? = nil, latestVersionArn: String? = nil, lastUpdatedTimestamp: String? = nil, name: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.latestVersion = latestVersion
            self.latestVersionArn = latestVersionArn
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case latestVersion = "LatestVersion"
            case latestVersionArn = "LatestVersionArn"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct UpdateResourceDefinitionResponse: AWSShape {

    }

    public struct GetGroupCertificateConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct CreateSubscriptionDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let arn: String?
        public let version: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, arn: String? = nil, version: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.arn = arn
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case arn = "Arn"
            case version = "Version"
        }
    }

    public struct GetDeploymentStatusResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeploymentStatus", required: false, type: .string), 
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "ErrorDetails", required: false, type: .list), 
            AWSShapeMember(label: "UpdatedAt", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentType", required: false, type: .enum)
        ]
        /// The status of the deployment: ''Pending'', ''InProgress'', ''Success'', or ''Failure''.
        public let deploymentStatus: String?
        /// Error message
        public let errorMessage: String?
        /// Error details
        public let errorDetails: [ErrorDetail]?
        /// The time, in milliseconds since the epoch, when the deployment status was updated.
        public let updatedAt: String?
        /// The type of the deployment.
        public let deploymentType: DeploymentType?

        public init(deploymentStatus: String? = nil, errorMessage: String? = nil, errorDetails: [ErrorDetail]? = nil, updatedAt: String? = nil, deploymentType: DeploymentType? = nil) {
            self.deploymentStatus = deploymentStatus
            self.errorMessage = errorMessage
            self.errorDetails = errorDetails
            self.updatedAt = updatedAt
            self.deploymentType = deploymentType
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentStatus = "DeploymentStatus"
            case errorMessage = "ErrorMessage"
            case errorDetails = "ErrorDetails"
            case updatedAt = "UpdatedAt"
            case deploymentType = "DeploymentType"
        }
    }

    public struct ListLoggerDefinitionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Definitions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let definitions: [DefinitionInformation]?
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case definitions = "Definitions"
            case nextToken = "NextToken"
        }
    }

    public struct ResourceDataContainer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3MachineLearningModelResourceData", required: false, type: .structure), 
            AWSShapeMember(label: "SecretsManagerSecretResourceData", required: false, type: .structure), 
            AWSShapeMember(label: "LocalDeviceResourceData", required: false, type: .structure), 
            AWSShapeMember(label: "LocalVolumeResourceData", required: false, type: .structure), 
            AWSShapeMember(label: "SageMakerMachineLearningModelResourceData", required: false, type: .structure)
        ]
        /// Attributes that define an Amazon S3 machine learning resource.
        public let s3MachineLearningModelResourceData: S3MachineLearningModelResourceData?
        /// Attributes that define a secret resource, which references a secret from AWS Secrets Manager.
        public let secretsManagerSecretResourceData: SecretsManagerSecretResourceData?
        /// Attributes that define the local device resource.
        public let localDeviceResourceData: LocalDeviceResourceData?
        /// Attributes that define the local volume resource.
        public let localVolumeResourceData: LocalVolumeResourceData?
        /// Attributes that define an Amazon SageMaker machine learning resource.
        public let sageMakerMachineLearningModelResourceData: SageMakerMachineLearningModelResourceData?

        public init(s3MachineLearningModelResourceData: S3MachineLearningModelResourceData? = nil, secretsManagerSecretResourceData: SecretsManagerSecretResourceData? = nil, localDeviceResourceData: LocalDeviceResourceData? = nil, localVolumeResourceData: LocalVolumeResourceData? = nil, sageMakerMachineLearningModelResourceData: SageMakerMachineLearningModelResourceData? = nil) {
            self.s3MachineLearningModelResourceData = s3MachineLearningModelResourceData
            self.secretsManagerSecretResourceData = secretsManagerSecretResourceData
            self.localDeviceResourceData = localDeviceResourceData
            self.localVolumeResourceData = localVolumeResourceData
            self.sageMakerMachineLearningModelResourceData = sageMakerMachineLearningModelResourceData
        }

        private enum CodingKeys: String, CodingKey {
            case s3MachineLearningModelResourceData = "S3MachineLearningModelResourceData"
            case secretsManagerSecretResourceData = "SecretsManagerSecretResourceData"
            case localDeviceResourceData = "LocalDeviceResourceData"
            case localVolumeResourceData = "LocalVolumeResourceData"
            case sageMakerMachineLearningModelResourceData = "SageMakerMachineLearningModelResourceData"
        }
    }

    public struct ListResourceDefinitionVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct GetGroupVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string), 
            AWSShapeMember(label: "GroupVersionId", location: .uri(locationName: "GroupVersionId"), required: true, type: .string)
        ]
        public let groupId: String
        public let groupVersionId: String

        public init(groupId: String, groupVersionId: String) {
            self.groupId = groupId
            self.groupVersionId = groupVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case groupVersionId = "GroupVersionId"
        }
    }

    public struct DeleteLoggerDefinitionResponse: AWSShape {

    }

    public struct GetSubscriptionDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "SubscriptionDefinitionVersionId", location: .uri(locationName: "SubscriptionDefinitionVersionId"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let subscriptionDefinitionId: String
        public let subscriptionDefinitionVersionId: String
        public let nextToken: String?

        public init(subscriptionDefinitionId: String, subscriptionDefinitionVersionId: String, nextToken: String? = nil) {
            self.subscriptionDefinitionId = subscriptionDefinitionId
            self.subscriptionDefinitionVersionId = subscriptionDefinitionVersionId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionDefinitionId = "SubscriptionDefinitionId"
            case subscriptionDefinitionVersionId = "SubscriptionDefinitionVersionId"
            case nextToken = "NextToken"
        }
    }

    public struct ListFunctionDefinitionVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string)
        ]
        public let maxResults: String?
        public let nextToken: String?
        public let functionDefinitionId: String

        public init(maxResults: String? = nil, nextToken: String? = nil, functionDefinitionId: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.functionDefinitionId = functionDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case functionDefinitionId = "FunctionDefinitionId"
        }
    }

    public struct Logger: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Component", required: false, type: .enum), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Space", required: false, type: .integer), 
            AWSShapeMember(label: "Level", required: false, type: .enum)
        ]
        /// The component that will be subject to logging.
        public let component: LoggerComponent?
        /// The type of log output which will be used.
        public let `type`: LoggerType?
        /// A descriptive or arbitrary ID for the logger. This value must be unique within the logger definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
        public let id: String?
        /// The amount of file space, in KB, to use if the local file system is used for logging purposes.
        public let space: Int32?
        /// The level of the logs.
        public let level: LoggerLevel?

        public init(component: LoggerComponent? = nil, type: LoggerType? = nil, id: String? = nil, space: Int32? = nil, level: LoggerLevel? = nil) {
            self.component = component
            self.`type` = `type`
            self.id = id
            self.space = space
            self.level = level
        }

        private enum CodingKeys: String, CodingKey {
            case component = "Component"
            case `type` = "Type"
            case id = "Id"
            case space = "Space"
            case level = "Level"
        }
    }

    public struct BulkDeploymentResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorDetails", required: false, type: .list), 
            AWSShapeMember(label: "CreatedAt", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentStatus", required: false, type: .string), 
            AWSShapeMember(label: "GroupArn", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentId", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentType", required: false, type: .enum), 
            AWSShapeMember(label: "DeploymentArn", required: false, type: .string), 
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string)
        ]
        /// Details about the error.
        public let errorDetails: [ErrorDetail]?
        /// The time, in ISO format, when the deployment was created.
        public let createdAt: String?
        /// The current status of the group deployment: ''Pending'', ''InProgress'', ''Success'', or ''Failure''.
        public let deploymentStatus: String?
        /// The ARN of the Greengrass group.
        public let groupArn: String?
        /// The ID of the group deployment.
        public let deploymentId: String?
        /// The type of the deployment.
        public let deploymentType: DeploymentType?
        /// The ARN of the group deployment.
        public let deploymentArn: String?
        /// The error message for a failed deployment
        public let errorMessage: String?

        public init(errorDetails: [ErrorDetail]? = nil, createdAt: String? = nil, deploymentStatus: String? = nil, groupArn: String? = nil, deploymentId: String? = nil, deploymentType: DeploymentType? = nil, deploymentArn: String? = nil, errorMessage: String? = nil) {
            self.errorDetails = errorDetails
            self.createdAt = createdAt
            self.deploymentStatus = deploymentStatus
            self.groupArn = groupArn
            self.deploymentId = deploymentId
            self.deploymentType = deploymentType
            self.deploymentArn = deploymentArn
            self.errorMessage = errorMessage
        }

        private enum CodingKeys: String, CodingKey {
            case errorDetails = "ErrorDetails"
            case createdAt = "CreatedAt"
            case deploymentStatus = "DeploymentStatus"
            case groupArn = "GroupArn"
            case deploymentId = "DeploymentId"
            case deploymentType = "DeploymentType"
            case deploymentArn = "DeploymentArn"
            case errorMessage = "ErrorMessage"
        }
    }

    public struct ListDefinitionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Definitions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about a definition.
        public let definitions: [DefinitionInformation]?
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case definitions = "Definitions"
            case nextToken = "NextToken"
        }
    }

    public struct GroupVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "ResourceDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "CoreDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "FunctionDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LoggerDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "ConnectorDefinitionVersionArn", required: false, type: .string)
        ]
        /// The ARN of the device definition version for this group.
        public let deviceDefinitionVersionArn: String?
        /// The ARN of the resource definition version for this group.
        public let resourceDefinitionVersionArn: String?
        /// The ARN of the core definition version for this group.
        public let coreDefinitionVersionArn: String?
        /// The ARN of the function definition version for this group.
        public let functionDefinitionVersionArn: String?
        /// The ARN of the subscription definition version for this group.
        public let subscriptionDefinitionVersionArn: String?
        /// The ARN of the logger definition version for this group.
        public let loggerDefinitionVersionArn: String?
        /// The ARN of the connector definition version for this group.
        public let connectorDefinitionVersionArn: String?

        public init(deviceDefinitionVersionArn: String? = nil, resourceDefinitionVersionArn: String? = nil, coreDefinitionVersionArn: String? = nil, functionDefinitionVersionArn: String? = nil, subscriptionDefinitionVersionArn: String? = nil, loggerDefinitionVersionArn: String? = nil, connectorDefinitionVersionArn: String? = nil) {
            self.deviceDefinitionVersionArn = deviceDefinitionVersionArn
            self.resourceDefinitionVersionArn = resourceDefinitionVersionArn
            self.coreDefinitionVersionArn = coreDefinitionVersionArn
            self.functionDefinitionVersionArn = functionDefinitionVersionArn
            self.subscriptionDefinitionVersionArn = subscriptionDefinitionVersionArn
            self.loggerDefinitionVersionArn = loggerDefinitionVersionArn
            self.connectorDefinitionVersionArn = connectorDefinitionVersionArn
        }

        private enum CodingKeys: String, CodingKey {
            case deviceDefinitionVersionArn = "DeviceDefinitionVersionArn"
            case resourceDefinitionVersionArn = "ResourceDefinitionVersionArn"
            case coreDefinitionVersionArn = "CoreDefinitionVersionArn"
            case functionDefinitionVersionArn = "FunctionDefinitionVersionArn"
            case subscriptionDefinitionVersionArn = "SubscriptionDefinitionVersionArn"
            case loggerDefinitionVersionArn = "LoggerDefinitionVersionArn"
            case connectorDefinitionVersionArn = "ConnectorDefinitionVersionArn"
        }
    }

    public struct GetGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct GetResourceDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the resource definition version was created.
        public let creationTimestamp: String?
        /// Information about the definition.
        public let definition: ResourceDefinitionVersion?
        /// The ID of the resource definition version.
        public let id: String?
        /// Arn of the resource definition version.
        public let arn: String?
        /// The version of the resource definition version.
        public let version: String?

        public init(creationTimestamp: String? = nil, definition: ResourceDefinitionVersion? = nil, id: String? = nil, arn: String? = nil, version: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
            self.arn = arn
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case definition = "Definition"
            case id = "Id"
            case arn = "Arn"
            case version = "Version"
        }
    }

    public struct GroupInformation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the group was created.
        public let creationTimestamp: String?
        /// The ID of the group.
        public let id: String?
        /// The latest version of the group.
        public let latestVersion: String?
        /// The ARN of the latest version of the group.
        public let latestVersionArn: String?
        /// The time, in milliseconds since the epoch, when the group was last updated.
        public let lastUpdatedTimestamp: String?
        /// The name of the group.
        public let name: String?
        /// The ARN of the group.
        public let arn: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, latestVersion: String? = nil, latestVersionArn: String? = nil, lastUpdatedTimestamp: String? = nil, name: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.latestVersion = latestVersion
            self.latestVersionArn = latestVersionArn
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case latestVersion = "LatestVersion"
            case latestVersionArn = "LatestVersionArn"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct GetDeviceDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let latestVersion: String?
        public let latestVersionArn: String?
        public let lastUpdatedTimestamp: String?
        public let name: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, latestVersion: String? = nil, latestVersionArn: String? = nil, lastUpdatedTimestamp: String? = nil, name: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.latestVersion = latestVersion
            self.latestVersionArn = latestVersionArn
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case latestVersion = "LatestVersion"
            case latestVersionArn = "LatestVersionArn"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct LocalDeviceResourceData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupOwnerSetting", required: false, type: .structure), 
            AWSShapeMember(label: "SourcePath", required: false, type: .string)
        ]
        /// Group/owner related settings for local resources.
        public let groupOwnerSetting: GroupOwnerSetting?
        /// The local absolute path of the device resource. The source path for a device resource can refer only to a character device or block device under ''/dev''.
        public let sourcePath: String?

        public init(groupOwnerSetting: GroupOwnerSetting? = nil, sourcePath: String? = nil) {
            self.groupOwnerSetting = groupOwnerSetting
            self.sourcePath = sourcePath
        }

        private enum CodingKeys: String, CodingKey {
            case groupOwnerSetting = "GroupOwnerSetting"
            case sourcePath = "SourcePath"
        }
    }

    public struct UpdateDeviceDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let deviceDefinitionId: String
        public let name: String?

        public init(deviceDefinitionId: String, name: String? = nil) {
            self.deviceDefinitionId = deviceDefinitionId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case deviceDefinitionId = "DeviceDefinitionId"
            case name = "Name"
        }
    }

    public struct ListResourceDefinitionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Definitions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let definitions: [DefinitionInformation]?
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case definitions = "Definitions"
            case nextToken = "NextToken"
        }
    }

    public struct ListGroupVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct UpdateDeviceDefinitionResponse: AWSShape {

    }

    public struct ListDeploymentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Deployments", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of deployments for the requested groups.
        public let deployments: [Deployment]?
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?

        public init(deployments: [Deployment]? = nil, nextToken: String? = nil) {
            self.deployments = deployments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case deployments = "Deployments"
            case nextToken = "NextToken"
        }
    }

    public struct GetConnectorDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the connector definition version was created.
        public let creationTimestamp: String?
        /// Information about the connector definition version.
        public let definition: ConnectorDefinitionVersion?
        /// The ID of the connector definition version.
        public let id: String?
        /// The ARN of the connector definition version.
        public let arn: String?
        /// The version of the connector definition version.
        public let version: String?
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?

        public init(creationTimestamp: String? = nil, definition: ConnectorDefinitionVersion? = nil, id: String? = nil, arn: String? = nil, version: String? = nil, nextToken: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
            self.arn = arn
            self.version = version
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case definition = "Definition"
            case id = "Id"
            case arn = "Arn"
            case version = "Version"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteResourceDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceDefinitionId", location: .uri(locationName: "ResourceDefinitionId"), required: true, type: .string)
        ]
        public let resourceDefinitionId: String

        public init(resourceDefinitionId: String) {
            self.resourceDefinitionId = resourceDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceDefinitionId = "ResourceDefinitionId"
        }
    }

    public struct GetServiceRoleForAccountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "AssociatedAt", required: false, type: .string)
        ]
        /// The ARN of the role which is associated with the account.
        public let roleArn: String?
        /// The time when the service role was associated with the account.
        public let associatedAt: String?

        public init(roleArn: String? = nil, associatedAt: String? = nil) {
            self.roleArn = roleArn
            self.associatedAt = associatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
            case associatedAt = "AssociatedAt"
        }
    }

    public struct CreateConnectorDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let latestVersion: String?
        public let latestVersionArn: String?
        public let lastUpdatedTimestamp: String?
        public let name: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, latestVersion: String? = nil, latestVersionArn: String? = nil, lastUpdatedTimestamp: String? = nil, name: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.latestVersion = latestVersion
            self.latestVersionArn = latestVersionArn
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case latestVersion = "LatestVersion"
            case latestVersionArn = "LatestVersionArn"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct DeleteFunctionDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string)
        ]
        public let functionDefinitionId: String

        public init(functionDefinitionId: String) {
            self.functionDefinitionId = functionDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case functionDefinitionId = "FunctionDefinitionId"
        }
    }

    public struct UpdateGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let groupId: String
        public let name: String?

        public init(groupId: String, name: String? = nil) {
            self.groupId = groupId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case name = "Name"
        }
    }

    public struct CreateResourceDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string)
        ]
        public let initialVersion: ResourceDefinitionVersion?
        public let name: String?
        public let amznClientToken: String?

        public init(initialVersion: ResourceDefinitionVersion? = nil, name: String? = nil, amznClientToken: String? = nil) {
            self.initialVersion = initialVersion
            self.name = name
            self.amznClientToken = amznClientToken
        }

        private enum CodingKeys: String, CodingKey {
            case initialVersion = "InitialVersion"
            case name = "Name"
            case amznClientToken = "X-Amzn-Client-Token"
        }
    }

    public struct CreateSoftwareUpdateJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IotJobArn", required: false, type: .string), 
            AWSShapeMember(label: "IotJobId", required: false, type: .string)
        ]
        /// The IoT Job ARN corresponding to this update.
        public let iotJobArn: String?
        /// The IoT Job Id corresponding to this update.
        public let iotJobId: String?

        public init(iotJobArn: String? = nil, iotJobId: String? = nil) {
            self.iotJobArn = iotJobArn
            self.iotJobId = iotJobId
        }

        private enum CodingKeys: String, CodingKey {
            case iotJobArn = "IotJobArn"
            case iotJobId = "IotJobId"
        }
    }

    public struct ListResourceDefinitionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let maxResults: String?
        public let nextToken: String?

        public init(maxResults: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct CreateLoggerDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string)
        ]
        public let initialVersion: LoggerDefinitionVersion?
        public let name: String?
        public let amznClientToken: String?

        public init(initialVersion: LoggerDefinitionVersion? = nil, name: String? = nil, amznClientToken: String? = nil) {
            self.initialVersion = initialVersion
            self.name = name
            self.amznClientToken = amznClientToken
        }

        private enum CodingKeys: String, CodingKey {
            case initialVersion = "InitialVersion"
            case name = "Name"
            case amznClientToken = "X-Amzn-Client-Token"
        }
    }

    public struct CreateDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "DeploymentType", required: false, type: .enum), 
            AWSShapeMember(label: "DeploymentId", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string), 
            AWSShapeMember(label: "GroupVersionId", required: false, type: .string)
        ]
        public let amznClientToken: String?
        /// The type of deployment. When used in ''CreateDeployment'', only ''NewDeployment'' and ''Redeployment'' are valid.
        public let deploymentType: DeploymentType?
        /// The ID of the deployment if you wish to redeploy a previous deployment.
        public let deploymentId: String?
        public let groupId: String
        /// The ID of the group version to be deployed.
        public let groupVersionId: String?

        public init(amznClientToken: String? = nil, deploymentType: DeploymentType? = nil, deploymentId: String? = nil, groupId: String, groupVersionId: String? = nil) {
            self.amznClientToken = amznClientToken
            self.deploymentType = deploymentType
            self.deploymentId = deploymentId
            self.groupId = groupId
            self.groupVersionId = groupVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case deploymentType = "DeploymentType"
            case deploymentId = "DeploymentId"
            case groupId = "GroupId"
            case groupVersionId = "GroupVersionId"
        }
    }

    public struct ListLoggerDefinitionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let maxResults: String?
        public let nextToken: String?

        public init(maxResults: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListCoreDefinitionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Definitions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let definitions: [DefinitionInformation]?
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case definitions = "Definitions"
            case nextToken = "NextToken"
        }
    }

    public struct GroupOwnerSetting: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoAddGroupOwner", required: false, type: .boolean), 
            AWSShapeMember(label: "GroupOwner", required: false, type: .string)
        ]
        /// If true, AWS IoT Greengrass automatically adds the specified Linux OS group owner of the resource to the Lambda process privileges. Thus the Lambda process will have the file access permissions of the added Linux group.
        public let autoAddGroupOwner: Bool?
        /// The name of the Linux OS group whose privileges will be added to the Lambda process. This field is optional.
        public let groupOwner: String?

        public init(autoAddGroupOwner: Bool? = nil, groupOwner: String? = nil) {
            self.autoAddGroupOwner = autoAddGroupOwner
            self.groupOwner = groupOwner
        }

        private enum CodingKeys: String, CodingKey {
            case autoAddGroupOwner = "AutoAddGroupOwner"
            case groupOwner = "GroupOwner"
        }
    }

    public struct FunctionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExecArgs", required: false, type: .string), 
            AWSShapeMember(label: "MemorySize", required: false, type: .integer), 
            AWSShapeMember(label: "Pinned", required: false, type: .boolean), 
            AWSShapeMember(label: "Timeout", required: false, type: .integer), 
            AWSShapeMember(label: "EncodingType", required: false, type: .enum), 
            AWSShapeMember(label: "Executable", required: false, type: .string), 
            AWSShapeMember(label: "Environment", required: false, type: .structure)
        ]
        /// The execution arguments.
        public let execArgs: String?
        /// The memory size, in KB, which the function requires. This setting is not applicable and should be cleared when you run the Lambda function without containerization.
        public let memorySize: Int32?
        /// True if the function is pinned. Pinned means the function is long-lived and starts when the core starts.
        public let pinned: Bool?
        /// The allowed function execution time, after which Lambda should terminate the function. This timeout still applies to pinned Lambda functions for each request.
        public let timeout: Int32?
        /// The expected encoding type of the input payload for the function. The default is ''json''.
        public let encodingType: EncodingType?
        /// The name of the function executable.
        public let executable: String?
        /// The environment configuration of the function.
        public let environment: FunctionConfigurationEnvironment?

        public init(execArgs: String? = nil, memorySize: Int32? = nil, pinned: Bool? = nil, timeout: Int32? = nil, encodingType: EncodingType? = nil, executable: String? = nil, environment: FunctionConfigurationEnvironment? = nil) {
            self.execArgs = execArgs
            self.memorySize = memorySize
            self.pinned = pinned
            self.timeout = timeout
            self.encodingType = encodingType
            self.executable = executable
            self.environment = environment
        }

        private enum CodingKeys: String, CodingKey {
            case execArgs = "ExecArgs"
            case memorySize = "MemorySize"
            case pinned = "Pinned"
            case timeout = "Timeout"
            case encodingType = "EncodingType"
            case executable = "Executable"
            case environment = "Environment"
        }
    }

    public struct LocalVolumeResourceData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupOwnerSetting", required: false, type: .structure), 
            AWSShapeMember(label: "SourcePath", required: false, type: .string), 
            AWSShapeMember(label: "DestinationPath", required: false, type: .string)
        ]
        /// Allows you to configure additional group privileges for the Lambda process. This field is optional.
        public let groupOwnerSetting: GroupOwnerSetting?
        /// The local absolute path of the volume resource on the host. The source path for a volume resource type cannot start with ''/sys''.
        public let sourcePath: String?
        /// The absolute local path of the resource inside the Lambda environment.
        public let destinationPath: String?

        public init(groupOwnerSetting: GroupOwnerSetting? = nil, sourcePath: String? = nil, destinationPath: String? = nil) {
            self.groupOwnerSetting = groupOwnerSetting
            self.sourcePath = sourcePath
            self.destinationPath = destinationPath
        }

        private enum CodingKeys: String, CodingKey {
            case groupOwnerSetting = "GroupOwnerSetting"
            case sourcePath = "SourcePath"
            case destinationPath = "DestinationPath"
        }
    }

    public struct ListGroupVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let maxResults: String?
        public let groupId: String
        public let nextToken: String?

        public init(maxResults: String? = nil, groupId: String, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.groupId = groupId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case groupId = "GroupId"
            case nextToken = "NextToken"
        }
    }

    public struct UpdateResourceDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceDefinitionId", location: .uri(locationName: "ResourceDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let resourceDefinitionId: String
        public let name: String?

        public init(resourceDefinitionId: String, name: String? = nil) {
            self.resourceDefinitionId = resourceDefinitionId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case resourceDefinitionId = "ResourceDefinitionId"
            case name = "Name"
        }
    }

    public struct CreateGroupCertificateAuthorityResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupCertificateAuthorityArn", required: false, type: .string)
        ]
        /// The ARN of the group certificate authority.
        public let groupCertificateAuthorityArn: String?

        public init(groupCertificateAuthorityArn: String? = nil) {
            self.groupCertificateAuthorityArn = groupCertificateAuthorityArn
        }

        private enum CodingKeys: String, CodingKey {
            case groupCertificateAuthorityArn = "GroupCertificateAuthorityArn"
        }
    }

    public struct CreateLoggerDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let latestVersion: String?
        public let latestVersionArn: String?
        public let lastUpdatedTimestamp: String?
        public let name: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, latestVersion: String? = nil, latestVersionArn: String? = nil, lastUpdatedTimestamp: String? = nil, name: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.latestVersion = latestVersion
            self.latestVersionArn = latestVersionArn
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case latestVersion = "LatestVersion"
            case latestVersionArn = "LatestVersionArn"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct SageMakerMachineLearningModelResourceData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SageMakerJobArn", required: false, type: .string), 
            AWSShapeMember(label: "DestinationPath", required: false, type: .string)
        ]
        /// The ARN of the Amazon SageMaker training job that represents the source model.
        public let sageMakerJobArn: String?
        /// The absolute local path of the resource inside the Lambda environment.
        public let destinationPath: String?

        public init(sageMakerJobArn: String? = nil, destinationPath: String? = nil) {
            self.sageMakerJobArn = sageMakerJobArn
            self.destinationPath = destinationPath
        }

        private enum CodingKeys: String, CodingKey {
            case sageMakerJobArn = "SageMakerJobArn"
            case destinationPath = "DestinationPath"
        }
    }

    public struct CreateFunctionDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let arn: String?
        public let version: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, arn: String? = nil, version: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.arn = arn
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case arn = "Arn"
            case version = "Version"
        }
    }

    public struct ListConnectorDefinitionVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectorDefinitionId", location: .uri(locationName: "ConnectorDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let connectorDefinitionId: String
        public let maxResults: String?
        public let nextToken: String?

        public init(connectorDefinitionId: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.connectorDefinitionId = connectorDefinitionId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case connectorDefinitionId = "ConnectorDefinitionId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?
        /// Information about a version.
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct UpdateGroupResponse: AWSShape {

    }

    public struct ListSubscriptionDefinitionVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let maxResults: String?
        public let subscriptionDefinitionId: String
        public let nextToken: String?

        public init(maxResults: String? = nil, subscriptionDefinitionId: String, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.subscriptionDefinitionId = subscriptionDefinitionId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case subscriptionDefinitionId = "SubscriptionDefinitionId"
            case nextToken = "NextToken"
        }
    }

    public struct ListFunctionDefinitionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Definitions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let definitions: [DefinitionInformation]?
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case definitions = "Definitions"
            case nextToken = "NextToken"
        }
    }

    public struct ListCoreDefinitionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let maxResults: String?
        public let nextToken: String?

        public init(maxResults: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListCoreDefinitionVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct UpdateConnectivityInfoResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        /// A message about the connectivity info update request.
        public let message: String?
        /// The new version of the connectivity info.
        public let version: String?

        public init(message: String? = nil, version: String? = nil) {
            self.message = message
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
            case version = "Version"
        }
    }

    public struct ListGroupCertificateAuthoritiesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupCertificateAuthorities", required: false, type: .list)
        ]
        /// A list of certificate authorities associated with the group.
        public let groupCertificateAuthorities: [GroupCertificateAuthorityProperties]?

        public init(groupCertificateAuthorities: [GroupCertificateAuthorityProperties]? = nil) {
            self.groupCertificateAuthorities = groupCertificateAuthorities
        }

        private enum CodingKeys: String, CodingKey {
            case groupCertificateAuthorities = "GroupCertificateAuthorities"
        }
    }

    public struct CreateGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let latestVersion: String?
        public let latestVersionArn: String?
        public let lastUpdatedTimestamp: String?
        public let name: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, latestVersion: String? = nil, latestVersionArn: String? = nil, lastUpdatedTimestamp: String? = nil, name: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.latestVersion = latestVersion
            self.latestVersionArn = latestVersionArn
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case latestVersion = "LatestVersion"
            case latestVersionArn = "LatestVersionArn"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct GetDeviceDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the device definition version was created.
        public let creationTimestamp: String?
        /// Information about the device definition version.
        public let definition: DeviceDefinitionVersion?
        /// The ID of the device definition version.
        public let id: String?
        /// The ARN of the device definition version.
        public let arn: String?
        /// The version of the device definition version.
        public let version: String?
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?

        public init(creationTimestamp: String? = nil, definition: DeviceDefinitionVersion? = nil, id: String? = nil, arn: String? = nil, version: String? = nil, nextToken: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
            self.arn = arn
            self.version = version
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case definition = "Definition"
            case id = "Id"
            case arn = "Arn"
            case version = "Version"
            case nextToken = "NextToken"
        }
    }

    public struct AssociateRoleToGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        /// The ARN of the role you wish to associate with this group.
        public let roleArn: String?
        public let groupId: String

        public init(roleArn: String? = nil, groupId: String) {
            self.roleArn = roleArn
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
            case groupId = "GroupId"
        }
    }

    public struct FunctionRunAsConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Gid", required: false, type: .integer), 
            AWSShapeMember(label: "Uid", required: false, type: .integer)
        ]
        /// The Group ID whose permissions are used to run a Lambda function.
        public let gid: Int32?
        /// The User ID whose permissions are used to run a Lambda function.
        public let uid: Int32?

        public init(gid: Int32? = nil, uid: Int32? = nil) {
            self.gid = gid
            self.uid = uid
        }

        private enum CodingKeys: String, CodingKey {
            case gid = "Gid"
            case uid = "Uid"
        }
    }

    public struct GetResourceDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceDefinitionId", location: .uri(locationName: "ResourceDefinitionId"), required: true, type: .string)
        ]
        public let resourceDefinitionId: String

        public init(resourceDefinitionId: String) {
            self.resourceDefinitionId = resourceDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceDefinitionId = "ResourceDefinitionId"
        }
    }

    public struct FunctionDefinitionVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Functions", required: false, type: .list)
        ]
        /// Default configuration that will apply to all Lambda functions in this function definition version
        public let defaultConfig: FunctionDefaultConfig?
        /// A list of Lambda functions in this function definition version.
        public let functions: [Function]?

        public init(defaultConfig: FunctionDefaultConfig? = nil, functions: [Function]? = nil) {
            self.defaultConfig = defaultConfig
            self.functions = functions
        }

        private enum CodingKeys: String, CodingKey {
            case defaultConfig = "DefaultConfig"
            case functions = "Functions"
        }
    }

    public struct CoreDefinitionVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cores", required: false, type: .list)
        ]
        /// A list of cores in the core definition version.
        public let cores: [Core]?

        public init(cores: [Core]? = nil) {
            self.cores = cores
        }

        private enum CodingKeys: String, CodingKey {
            case cores = "Cores"
        }
    }

    public struct GetGroupCertificateConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", required: false, type: .string), 
            AWSShapeMember(label: "CertificateAuthorityExpiryInMilliseconds", required: false, type: .string)
        ]
        public let certificateExpiryInMilliseconds: String?
        public let groupId: String?
        public let certificateAuthorityExpiryInMilliseconds: String?

        public init(certificateExpiryInMilliseconds: String? = nil, groupId: String? = nil, certificateAuthorityExpiryInMilliseconds: String? = nil) {
            self.certificateExpiryInMilliseconds = certificateExpiryInMilliseconds
            self.groupId = groupId
            self.certificateAuthorityExpiryInMilliseconds = certificateAuthorityExpiryInMilliseconds
        }

        private enum CodingKeys: String, CodingKey {
            case certificateExpiryInMilliseconds = "CertificateExpiryInMilliseconds"
            case groupId = "GroupId"
            case certificateAuthorityExpiryInMilliseconds = "CertificateAuthorityExpiryInMilliseconds"
        }
    }

    public struct ListDeviceDefinitionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let maxResults: String?
        public let nextToken: String?

        public init(maxResults: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetCoreDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "CoreDefinitionVersionId", location: .uri(locationName: "CoreDefinitionVersionId"), required: true, type: .string)
        ]
        public let coreDefinitionId: String
        public let coreDefinitionVersionId: String

        public init(coreDefinitionId: String, coreDefinitionVersionId: String) {
            self.coreDefinitionId = coreDefinitionId
            self.coreDefinitionVersionId = coreDefinitionVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case coreDefinitionId = "CoreDefinitionId"
            case coreDefinitionVersionId = "CoreDefinitionVersionId"
        }
    }

    public struct Core: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "ThingArn", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "SyncShadow", required: false, type: .boolean)
        ]
        /// The ARN of the certificate associated with the core.
        public let certificateArn: String?
        /// The ARN of the thing which is the core.
        public let thingArn: String?
        /// A descriptive or arbitrary ID for the core. This value must be unique within the core definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
        public let id: String?
        /// If true, the core's local shadow is automatically synced with the cloud.
        public let syncShadow: Bool?

        public init(certificateArn: String? = nil, thingArn: String? = nil, id: String? = nil, syncShadow: Bool? = nil) {
            self.certificateArn = certificateArn
            self.thingArn = thingArn
            self.id = id
            self.syncShadow = syncShadow
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
            case thingArn = "ThingArn"
            case id = "Id"
            case syncShadow = "SyncShadow"
        }
    }

    public struct UpdateSubscriptionDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let subscriptionDefinitionId: String
        public let name: String?

        public init(subscriptionDefinitionId: String, name: String? = nil) {
            self.subscriptionDefinitionId = subscriptionDefinitionId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionDefinitionId = "SubscriptionDefinitionId"
            case name = "Name"
        }
    }

    public struct ListGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Groups", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about a group.
        public let groups: [GroupInformation]?
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?

        public init(groups: [GroupInformation]? = nil, nextToken: String? = nil) {
            self.groups = groups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "Groups"
            case nextToken = "NextToken"
        }
    }

    public struct DisassociateServiceRoleFromAccountRequest: AWSShape {

    }

    public struct GetGroupCertificateAuthorityRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateAuthorityId", location: .uri(locationName: "CertificateAuthorityId"), required: true, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let certificateAuthorityId: String
        public let groupId: String

        public init(certificateAuthorityId: String, groupId: String) {
            self.certificateAuthorityId = certificateAuthorityId
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateAuthorityId = "CertificateAuthorityId"
            case groupId = "GroupId"
        }
    }

    public struct ListConnectorDefinitionVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public enum FunctionIsolationMode: String, CustomStringConvertible, Codable {
        case greengrasscontainer = "GreengrassContainer"
        case nocontainer = "NoContainer"
        public var description: String { return self.rawValue }
    }

    public struct ListGroupCertificateAuthoritiesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct FunctionDefaultExecutionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsolationMode", required: false, type: .enum)
        ]
        public let isolationMode: FunctionIsolationMode?

        public init(isolationMode: FunctionIsolationMode? = nil) {
            self.isolationMode = isolationMode
        }

        private enum CodingKeys: String, CodingKey {
            case isolationMode = "IsolationMode"
        }
    }

    public struct ListDeploymentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let maxResults: String?
        public let groupId: String
        public let nextToken: String?

        public init(maxResults: String? = nil, groupId: String, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.groupId = groupId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case groupId = "GroupId"
            case nextToken = "NextToken"
        }
    }

    public struct CreateDeviceDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string)
        ]
        public let initialVersion: DeviceDefinitionVersion?
        public let name: String?
        public let amznClientToken: String?

        public init(initialVersion: DeviceDefinitionVersion? = nil, name: String? = nil, amznClientToken: String? = nil) {
            self.initialVersion = initialVersion
            self.name = name
            self.amznClientToken = amznClientToken
        }

        private enum CodingKeys: String, CodingKey {
            case initialVersion = "InitialVersion"
            case name = "Name"
            case amznClientToken = "X-Amzn-Client-Token"
        }
    }

    public struct DeleteConnectorDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectorDefinitionId", location: .uri(locationName: "ConnectorDefinitionId"), required: true, type: .string)
        ]
        public let connectorDefinitionId: String

        public init(connectorDefinitionId: String) {
            self.connectorDefinitionId = connectorDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case connectorDefinitionId = "ConnectorDefinitionId"
        }
    }

    public enum EncodingType: String, CustomStringConvertible, Codable {
        case binary = "binary"
        case json = "json"
        public var description: String { return self.rawValue }
    }

    public struct CreateResourceDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let arn: String?
        public let version: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, arn: String? = nil, version: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.arn = arn
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case arn = "Arn"
            case version = "Version"
        }
    }

    public struct CreateFunctionDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "DefaultConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Functions", required: false, type: .list)
        ]
        public let amznClientToken: String?
        public let functionDefinitionId: String
        public let defaultConfig: FunctionDefaultConfig?
        public let functions: [Function]?

        public init(amznClientToken: String? = nil, functionDefinitionId: String, defaultConfig: FunctionDefaultConfig? = nil, functions: [Function]? = nil) {
            self.amznClientToken = amznClientToken
            self.functionDefinitionId = functionDefinitionId
            self.defaultConfig = defaultConfig
            self.functions = functions
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case functionDefinitionId = "FunctionDefinitionId"
            case defaultConfig = "DefaultConfig"
            case functions = "Functions"
        }
    }

    public enum DeploymentType: String, CustomStringConvertible, Codable {
        case newdeployment = "NewDeployment"
        case redeployment = "Redeployment"
        case resetdeployment = "ResetDeployment"
        case forceresetdeployment = "ForceResetDeployment"
        public var description: String { return self.rawValue }
    }

    public struct GetAssociatedRoleResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "AssociatedAt", required: false, type: .string)
        ]
        /// The ARN of the role that is associated with the group.
        public let roleArn: String?
        /// The time when the role was associated with the group.
        public let associatedAt: String?

        public init(roleArn: String? = nil, associatedAt: String? = nil) {
            self.roleArn = roleArn
            self.associatedAt = associatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
            case associatedAt = "AssociatedAt"
        }
    }

    public struct GetDeviceDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "DeviceDefinitionVersionId", location: .uri(locationName: "DeviceDefinitionVersionId"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let deviceDefinitionId: String
        public let deviceDefinitionVersionId: String
        public let nextToken: String?

        public init(deviceDefinitionId: String, deviceDefinitionVersionId: String, nextToken: String? = nil) {
            self.deviceDefinitionId = deviceDefinitionId
            self.deviceDefinitionVersionId = deviceDefinitionVersionId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case deviceDefinitionId = "DeviceDefinitionId"
            case deviceDefinitionVersionId = "DeviceDefinitionVersionId"
            case nextToken = "NextToken"
        }
    }

    public struct GetGroupCertificateAuthorityResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupCertificateAuthorityId", required: false, type: .string), 
            AWSShapeMember(label: "PemEncodedCertificate", required: false, type: .string), 
            AWSShapeMember(label: "GroupCertificateAuthorityArn", required: false, type: .string)
        ]
        /// The ID of the certificate authority for the group.
        public let groupCertificateAuthorityId: String?
        /// The PEM encoded certificate for the group.
        public let pemEncodedCertificate: String?
        /// The ARN of the certificate authority for the group.
        public let groupCertificateAuthorityArn: String?

        public init(groupCertificateAuthorityId: String? = nil, pemEncodedCertificate: String? = nil, groupCertificateAuthorityArn: String? = nil) {
            self.groupCertificateAuthorityId = groupCertificateAuthorityId
            self.pemEncodedCertificate = pemEncodedCertificate
            self.groupCertificateAuthorityArn = groupCertificateAuthorityArn
        }

        private enum CodingKeys: String, CodingKey {
            case groupCertificateAuthorityId = "GroupCertificateAuthorityId"
            case pemEncodedCertificate = "PemEncodedCertificate"
            case groupCertificateAuthorityArn = "GroupCertificateAuthorityArn"
        }
    }

    public struct GetAssociatedRoleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public enum LoggerType: String, CustomStringConvertible, Codable {
        case filesystem = "FileSystem"
        case awscloudwatch = "AWSCloudWatch"
        public var description: String { return self.rawValue }
    }

    public struct BulkDeploymentMetrics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordsProcessed", required: false, type: .integer), 
            AWSShapeMember(label: "RetryAttempts", required: false, type: .integer), 
            AWSShapeMember(label: "InvalidInputRecords", required: false, type: .integer)
        ]
        /// The total number of group records from the input file that have been processed so far, or attempted.
        public let recordsProcessed: Int32?
        /// The total number of deployment attempts that returned a retryable error. For example, a retry is triggered if the attempt to deploy a group returns a throttling error. ''StartBulkDeployment'' retries a group deployment up to five times.
        public let retryAttempts: Int32?
        /// The total number of records that returned a non-retryable error. For example, this can occur if a group record from the input file uses an invalid format or specifies a nonexistent group version, or if the execution role doesn't grant permission to deploy a group or group version.
        public let invalidInputRecords: Int32?

        public init(recordsProcessed: Int32? = nil, retryAttempts: Int32? = nil, invalidInputRecords: Int32? = nil) {
            self.recordsProcessed = recordsProcessed
            self.retryAttempts = retryAttempts
            self.invalidInputRecords = invalidInputRecords
        }

        private enum CodingKeys: String, CodingKey {
            case recordsProcessed = "RecordsProcessed"
            case retryAttempts = "RetryAttempts"
            case invalidInputRecords = "InvalidInputRecords"
        }
    }

    public struct DeleteLoggerDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string)
        ]
        public let loggerDefinitionId: String

        public init(loggerDefinitionId: String) {
            self.loggerDefinitionId = loggerDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case loggerDefinitionId = "LoggerDefinitionId"
        }
    }

    public struct UpdateFunctionDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string)
        ]
        public let name: String?
        public let functionDefinitionId: String

        public init(name: String? = nil, functionDefinitionId: String) {
            self.name = name
            self.functionDefinitionId = functionDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case functionDefinitionId = "FunctionDefinitionId"
        }
    }

    public struct StartBulkDeploymentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BulkDeploymentArn", required: false, type: .string), 
            AWSShapeMember(label: "BulkDeploymentId", required: false, type: .string)
        ]
        /// The ARN of the bulk deployment.
        public let bulkDeploymentArn: String?
        /// The ID of the bulk deployment.
        public let bulkDeploymentId: String?

        public init(bulkDeploymentArn: String? = nil, bulkDeploymentId: String? = nil) {
            self.bulkDeploymentArn = bulkDeploymentArn
            self.bulkDeploymentId = bulkDeploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case bulkDeploymentArn = "BulkDeploymentArn"
            case bulkDeploymentId = "BulkDeploymentId"
        }
    }

    public struct ListBulkDeploymentDetailedReportsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "BulkDeploymentId", location: .uri(locationName: "BulkDeploymentId"), required: true, type: .string)
        ]
        public let maxResults: String?
        public let nextToken: String?
        public let bulkDeploymentId: String

        public init(maxResults: String? = nil, nextToken: String? = nil, bulkDeploymentId: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.bulkDeploymentId = bulkDeploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case bulkDeploymentId = "BulkDeploymentId"
        }
    }

    public struct SecretsManagerSecretResourceData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdditionalStagingLabelsToDownload", required: false, type: .list), 
            AWSShapeMember(label: "ARN", required: false, type: .string)
        ]
        /// Optional. The staging labels whose values you want to make available on the core, in addition to ''AWSCURRENT''.
        public let additionalStagingLabelsToDownload: [String]?
        /// The ARN of the Secrets Manager secret to make available on the core. The value of the secret's latest version (represented by the ''AWSCURRENT'' staging label) is included by default.
        public let arn: String?

        public init(additionalStagingLabelsToDownload: [String]? = nil, arn: String? = nil) {
            self.additionalStagingLabelsToDownload = additionalStagingLabelsToDownload
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case additionalStagingLabelsToDownload = "AdditionalStagingLabelsToDownload"
            case arn = "ARN"
        }
    }

    public struct DeleteResourceDefinitionResponse: AWSShape {

    }

    public struct CreateLoggerDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let arn: String?
        public let version: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, arn: String? = nil, version: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.arn = arn
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case arn = "Arn"
            case version = "Version"
        }
    }

    public struct GetConnectorDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let latestVersion: String?
        public let latestVersionArn: String?
        public let lastUpdatedTimestamp: String?
        public let name: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, latestVersion: String? = nil, latestVersionArn: String? = nil, lastUpdatedTimestamp: String? = nil, name: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.latestVersion = latestVersion
            self.latestVersionArn = latestVersionArn
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case latestVersion = "LatestVersion"
            case latestVersionArn = "LatestVersionArn"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct GetLoggerDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let latestVersion: String?
        public let latestVersionArn: String?
        public let lastUpdatedTimestamp: String?
        public let name: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, latestVersion: String? = nil, latestVersionArn: String? = nil, lastUpdatedTimestamp: String? = nil, name: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.latestVersion = latestVersion
            self.latestVersionArn = latestVersionArn
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case latestVersion = "LatestVersion"
            case latestVersionArn = "LatestVersionArn"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct Device: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateArn", required: false, type: .string), 
            AWSShapeMember(label: "ThingArn", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "SyncShadow", required: false, type: .boolean)
        ]
        /// The ARN of the certificate associated with the device.
        public let certificateArn: String?
        /// The thing ARN of the device.
        public let thingArn: String?
        /// A descriptive or arbitrary ID for the device. This value must be unique within the device definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
        public let id: String?
        /// If true, the device's local shadow will be automatically synced with the cloud.
        public let syncShadow: Bool?

        public init(certificateArn: String? = nil, thingArn: String? = nil, id: String? = nil, syncShadow: Bool? = nil) {
            self.certificateArn = certificateArn
            self.thingArn = thingArn
            self.id = id
            self.syncShadow = syncShadow
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "CertificateArn"
            case thingArn = "ThingArn"
            case id = "Id"
            case syncShadow = "SyncShadow"
        }
    }

    public struct ListFunctionDefinitionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let maxResults: String?
        public let nextToken: String?

        public init(maxResults: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteCoreDefinitionResponse: AWSShape {

    }

    public struct S3MachineLearningModelResourceData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Uri", required: false, type: .string), 
            AWSShapeMember(label: "DestinationPath", required: false, type: .string)
        ]
        /// The URI of the source model in an S3 bucket. The model package must be in tar.gz or .zip format.
        public let s3Uri: String?
        /// The absolute local path of the resource inside the Lambda environment.
        public let destinationPath: String?

        public init(s3Uri: String? = nil, destinationPath: String? = nil) {
            self.s3Uri = s3Uri
            self.destinationPath = destinationPath
        }

        private enum CodingKeys: String, CodingKey {
            case s3Uri = "S3Uri"
            case destinationPath = "DestinationPath"
        }
    }

    public struct GetResourceDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceDefinitionId", location: .uri(locationName: "ResourceDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "ResourceDefinitionVersionId", location: .uri(locationName: "ResourceDefinitionVersionId"), required: true, type: .string)
        ]
        public let resourceDefinitionId: String
        public let resourceDefinitionVersionId: String

        public init(resourceDefinitionId: String, resourceDefinitionVersionId: String) {
            self.resourceDefinitionId = resourceDefinitionId
            self.resourceDefinitionVersionId = resourceDefinitionVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceDefinitionId = "ResourceDefinitionId"
            case resourceDefinitionVersionId = "ResourceDefinitionVersionId"
        }
    }

    public struct CreateDeploymentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeploymentId", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentArn", required: false, type: .string)
        ]
        /// The ID of the deployment.
        public let deploymentId: String?
        /// The ARN of the deployment.
        public let deploymentArn: String?

        public init(deploymentId: String? = nil, deploymentArn: String? = nil) {
            self.deploymentId = deploymentId
            self.deploymentArn = deploymentArn
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "DeploymentId"
            case deploymentArn = "DeploymentArn"
        }
    }

    public struct GetDeploymentStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeploymentId", location: .uri(locationName: "DeploymentId"), required: true, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let deploymentId: String
        public let groupId: String

        public init(deploymentId: String, groupId: String) {
            self.deploymentId = deploymentId
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "DeploymentId"
            case groupId = "GroupId"
        }
    }

    public struct Resource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceDataContainer", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// A container of data for all resource types.
        public let resourceDataContainer: ResourceDataContainer?
        /// The resource ID, used to refer to a resource in the Lambda function configuration. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''. This must be unique within a Greengrass group.
        public let id: String?
        /// The descriptive resource name, which is displayed on the AWS IoT Greengrass console. Max length 128 characters with pattern ''[a-zA-Z0-9:_-]+''. This must be unique within a Greengrass group.
        public let name: String?

        public init(resourceDataContainer: ResourceDataContainer? = nil, id: String? = nil, name: String? = nil) {
            self.resourceDataContainer = resourceDataContainer
            self.id = id
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case resourceDataContainer = "ResourceDataContainer"
            case id = "Id"
            case name = "Name"
        }
    }

    public struct ResetDeploymentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Force", required: false, type: .boolean), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string)
        ]
        /// If true, performs a best-effort only core reset.
        public let force: Bool?
        public let groupId: String
        public let amznClientToken: String?

        public init(force: Bool? = nil, groupId: String, amznClientToken: String? = nil) {
            self.force = force
            self.groupId = groupId
            self.amznClientToken = amznClientToken
        }

        private enum CodingKeys: String, CodingKey {
            case force = "Force"
            case groupId = "GroupId"
            case amznClientToken = "X-Amzn-Client-Token"
        }
    }

    public struct CreateFunctionDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string)
        ]
        public let initialVersion: FunctionDefinitionVersion?
        public let name: String?
        public let amznClientToken: String?

        public init(initialVersion: FunctionDefinitionVersion? = nil, name: String? = nil, amznClientToken: String? = nil) {
            self.initialVersion = initialVersion
            self.name = name
            self.amznClientToken = amznClientToken
        }

        private enum CodingKeys: String, CodingKey {
            case initialVersion = "InitialVersion"
            case name = "Name"
            case amznClientToken = "X-Amzn-Client-Token"
        }
    }

    public struct CreateCoreDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cores", required: false, type: .list), 
            AWSShapeMember(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string)
        ]
        public let cores: [Core]?
        public let coreDefinitionId: String
        public let amznClientToken: String?

        public init(cores: [Core]? = nil, coreDefinitionId: String, amznClientToken: String? = nil) {
            self.cores = cores
            self.coreDefinitionId = coreDefinitionId
            self.amznClientToken = amznClientToken
        }

        private enum CodingKeys: String, CodingKey {
            case cores = "Cores"
            case coreDefinitionId = "CoreDefinitionId"
            case amznClientToken = "X-Amzn-Client-Token"
        }
    }

    public struct CreateConnectorDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let arn: String?
        public let version: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, arn: String? = nil, version: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.arn = arn
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case arn = "Arn"
            case version = "Version"
        }
    }

    public struct CreateGroupVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string), 
            AWSShapeMember(label: "ResourceDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "CoreDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "FunctionDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LoggerDefinitionVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectorDefinitionVersionArn", required: false, type: .string)
        ]
        public let deviceDefinitionVersionArn: String?
        public let groupId: String
        public let resourceDefinitionVersionArn: String?
        public let coreDefinitionVersionArn: String?
        public let functionDefinitionVersionArn: String?
        public let subscriptionDefinitionVersionArn: String?
        public let loggerDefinitionVersionArn: String?
        public let amznClientToken: String?
        public let connectorDefinitionVersionArn: String?

        public init(deviceDefinitionVersionArn: String? = nil, groupId: String, resourceDefinitionVersionArn: String? = nil, coreDefinitionVersionArn: String? = nil, functionDefinitionVersionArn: String? = nil, subscriptionDefinitionVersionArn: String? = nil, loggerDefinitionVersionArn: String? = nil, amznClientToken: String? = nil, connectorDefinitionVersionArn: String? = nil) {
            self.deviceDefinitionVersionArn = deviceDefinitionVersionArn
            self.groupId = groupId
            self.resourceDefinitionVersionArn = resourceDefinitionVersionArn
            self.coreDefinitionVersionArn = coreDefinitionVersionArn
            self.functionDefinitionVersionArn = functionDefinitionVersionArn
            self.subscriptionDefinitionVersionArn = subscriptionDefinitionVersionArn
            self.loggerDefinitionVersionArn = loggerDefinitionVersionArn
            self.amznClientToken = amznClientToken
            self.connectorDefinitionVersionArn = connectorDefinitionVersionArn
        }

        private enum CodingKeys: String, CodingKey {
            case deviceDefinitionVersionArn = "DeviceDefinitionVersionArn"
            case groupId = "GroupId"
            case resourceDefinitionVersionArn = "ResourceDefinitionVersionArn"
            case coreDefinitionVersionArn = "CoreDefinitionVersionArn"
            case functionDefinitionVersionArn = "FunctionDefinitionVersionArn"
            case subscriptionDefinitionVersionArn = "SubscriptionDefinitionVersionArn"
            case loggerDefinitionVersionArn = "LoggerDefinitionVersionArn"
            case amznClientToken = "X-Amzn-Client-Token"
            case connectorDefinitionVersionArn = "ConnectorDefinitionVersionArn"
        }
    }

    public enum UpdateTargetsArchitecture: String, CustomStringConvertible, Codable {
        case armv7l = "armv7l"
        case x8664 = "x86_64"
        case aarch64 = "aarch64"
        public var description: String { return self.rawValue }
    }

    public struct DisassociateRoleFromGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisassociatedAt", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the role was disassociated from the group.
        public let disassociatedAt: String?

        public init(disassociatedAt: String? = nil) {
            self.disassociatedAt = disassociatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case disassociatedAt = "DisassociatedAt"
        }
    }

    public struct CreateSubscriptionDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let latestVersion: String?
        public let latestVersionArn: String?
        public let lastUpdatedTimestamp: String?
        public let name: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, latestVersion: String? = nil, latestVersionArn: String? = nil, lastUpdatedTimestamp: String? = nil, name: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.latestVersion = latestVersion
            self.latestVersionArn = latestVersionArn
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case latestVersion = "LatestVersion"
            case latestVersionArn = "LatestVersionArn"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct ListFunctionDefinitionVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct DefinitionInformation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the definition was created.
        public let creationTimestamp: String?
        /// The ID of the definition.
        public let id: String?
        /// The latest version of the definition.
        public let latestVersion: String?
        /// The ARN of the latest version of the definition.
        public let latestVersionArn: String?
        /// The time, in milliseconds since the epoch, when the definition was last updated.
        public let lastUpdatedTimestamp: String?
        /// The name of the definition.
        public let name: String?
        /// The ARN of the definition.
        public let arn: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, latestVersion: String? = nil, latestVersionArn: String? = nil, lastUpdatedTimestamp: String? = nil, name: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.latestVersion = latestVersion
            self.latestVersionArn = latestVersionArn
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case latestVersion = "LatestVersion"
            case latestVersionArn = "LatestVersionArn"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct GetConnectorDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectorDefinitionId", location: .uri(locationName: "ConnectorDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectorDefinitionVersionId", location: .uri(locationName: "ConnectorDefinitionVersionId"), required: true, type: .string)
        ]
        public let connectorDefinitionId: String
        public let nextToken: String?
        public let connectorDefinitionVersionId: String

        public init(connectorDefinitionId: String, nextToken: String? = nil, connectorDefinitionVersionId: String) {
            self.connectorDefinitionId = connectorDefinitionId
            self.nextToken = nextToken
            self.connectorDefinitionVersionId = connectorDefinitionVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case connectorDefinitionId = "ConnectorDefinitionId"
            case nextToken = "NextToken"
            case connectorDefinitionVersionId = "ConnectorDefinitionVersionId"
        }
    }

    public struct ListConnectorDefinitionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Definitions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let definitions: [DefinitionInformation]?
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case definitions = "Definitions"
            case nextToken = "NextToken"
        }
    }

    public struct ConnectivityInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HostAddress", required: false, type: .string), 
            AWSShapeMember(label: "Metadata", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "PortNumber", required: false, type: .integer)
        ]
        /// The endpoint for the Greengrass core. Can be an IP address or DNS.
        public let hostAddress: String?
        /// Metadata for this endpoint.
        public let metadata: String?
        /// The ID of the connectivity information.
        public let id: String?
        /// The port of the Greengrass core. Usually 8883.
        public let portNumber: Int32?

        public init(hostAddress: String? = nil, metadata: String? = nil, id: String? = nil, portNumber: Int32? = nil) {
            self.hostAddress = hostAddress
            self.metadata = metadata
            self.id = id
            self.portNumber = portNumber
        }

        private enum CodingKeys: String, CodingKey {
            case hostAddress = "HostAddress"
            case metadata = "Metadata"
            case id = "Id"
            case portNumber = "PortNumber"
        }
    }

    public struct StopBulkDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BulkDeploymentId", location: .uri(locationName: "BulkDeploymentId"), required: true, type: .string)
        ]
        public let bulkDeploymentId: String

        public init(bulkDeploymentId: String) {
            self.bulkDeploymentId = bulkDeploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case bulkDeploymentId = "BulkDeploymentId"
        }
    }

    public struct Function: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FunctionArn", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "FunctionConfiguration", required: false, type: .structure)
        ]
        /// The ARN of the Lambda function.
        public let functionArn: String?
        /// A descriptive or arbitrary ID for the function. This value must be unique within the function definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
        public let id: String?
        /// The configuration of the Lambda function.
        public let functionConfiguration: FunctionConfiguration?

        public init(functionArn: String? = nil, id: String? = nil, functionConfiguration: FunctionConfiguration? = nil) {
            self.functionArn = functionArn
            self.id = id
            self.functionConfiguration = functionConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case functionArn = "FunctionArn"
            case id = "Id"
            case functionConfiguration = "FunctionConfiguration"
        }
    }

    public struct GetCoreDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string)
        ]
        public let coreDefinitionId: String

        public init(coreDefinitionId: String) {
            self.coreDefinitionId = coreDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case coreDefinitionId = "CoreDefinitionId"
        }
    }

    public struct FunctionDefaultConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Execution", required: false, type: .structure)
        ]
        public let execution: FunctionDefaultExecutionConfig?

        public init(execution: FunctionDefaultExecutionConfig? = nil) {
            self.execution = execution
        }

        private enum CodingKeys: String, CodingKey {
            case execution = "Execution"
        }
    }

    public struct GetCoreDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let latestVersion: String?
        public let latestVersionArn: String?
        public let lastUpdatedTimestamp: String?
        public let name: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, latestVersion: String? = nil, latestVersionArn: String? = nil, lastUpdatedTimestamp: String? = nil, name: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.latestVersion = latestVersion
            self.latestVersionArn = latestVersionArn
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case latestVersion = "LatestVersion"
            case latestVersionArn = "LatestVersionArn"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct UpdateLoggerDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string)
        ]
        public let name: String?
        public let loggerDefinitionId: String

        public init(name: String? = nil, loggerDefinitionId: String) {
            self.name = name
            self.loggerDefinitionId = loggerDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case loggerDefinitionId = "LoggerDefinitionId"
        }
    }

    public struct GetLoggerDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "LoggerDefinitionVersionId", location: .uri(locationName: "LoggerDefinitionVersionId"), required: true, type: .string)
        ]
        public let loggerDefinitionId: String
        public let nextToken: String?
        public let loggerDefinitionVersionId: String

        public init(loggerDefinitionId: String, nextToken: String? = nil, loggerDefinitionVersionId: String) {
            self.loggerDefinitionId = loggerDefinitionId
            self.nextToken = nextToken
            self.loggerDefinitionVersionId = loggerDefinitionVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case loggerDefinitionId = "LoggerDefinitionId"
            case nextToken = "NextToken"
            case loggerDefinitionVersionId = "LoggerDefinitionVersionId"
        }
    }

    public struct CreateSubscriptionDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "Subscriptions", required: false, type: .list)
        ]
        public let amznClientToken: String?
        public let subscriptionDefinitionId: String
        public let subscriptions: [Subscription]?

        public init(amznClientToken: String? = nil, subscriptionDefinitionId: String, subscriptions: [Subscription]? = nil) {
            self.amznClientToken = amznClientToken
            self.subscriptionDefinitionId = subscriptionDefinitionId
            self.subscriptions = subscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case subscriptionDefinitionId = "SubscriptionDefinitionId"
            case subscriptions = "Subscriptions"
        }
    }

    public struct UpdateGroupCertificateConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", required: false, type: .string), 
            AWSShapeMember(label: "CertificateAuthorityExpiryInMilliseconds", required: false, type: .string)
        ]
        public let certificateExpiryInMilliseconds: String?
        public let groupId: String?
        public let certificateAuthorityExpiryInMilliseconds: String?

        public init(certificateExpiryInMilliseconds: String? = nil, groupId: String? = nil, certificateAuthorityExpiryInMilliseconds: String? = nil) {
            self.certificateExpiryInMilliseconds = certificateExpiryInMilliseconds
            self.groupId = groupId
            self.certificateAuthorityExpiryInMilliseconds = certificateAuthorityExpiryInMilliseconds
        }

        private enum CodingKeys: String, CodingKey {
            case certificateExpiryInMilliseconds = "CertificateExpiryInMilliseconds"
            case groupId = "GroupId"
            case certificateAuthorityExpiryInMilliseconds = "CertificateAuthorityExpiryInMilliseconds"
        }
    }

    public enum UpdateTargetsOperatingSystem: String, CustomStringConvertible, Codable {
        case ubuntu = "ubuntu"
        case raspbian = "raspbian"
        case amazonLinux = "amazon_linux"
        public var description: String { return self.rawValue }
    }

    public struct ListGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let maxResults: String?
        public let nextToken: String?

        public init(maxResults: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetServiceRoleForAccountRequest: AWSShape {

    }

    public struct UpdateCoreDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let coreDefinitionId: String
        public let name: String?

        public init(coreDefinitionId: String, name: String? = nil) {
            self.coreDefinitionId = coreDefinitionId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case coreDefinitionId = "CoreDefinitionId"
            case name = "Name"
        }
    }

    public struct GetResourceDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let latestVersion: String?
        public let latestVersionArn: String?
        public let lastUpdatedTimestamp: String?
        public let name: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, latestVersion: String? = nil, latestVersionArn: String? = nil, lastUpdatedTimestamp: String? = nil, name: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.latestVersion = latestVersion
            self.latestVersionArn = latestVersionArn
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case latestVersion = "LatestVersion"
            case latestVersionArn = "LatestVersionArn"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct UpdateConnectorDefinitionResponse: AWSShape {

    }

    public struct DeviceDefinitionVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Devices", required: false, type: .list)
        ]
        /// A list of devices in the definition version.
        public let devices: [Device]?

        public init(devices: [Device]? = nil) {
            self.devices = devices
        }

        private enum CodingKeys: String, CodingKey {
            case devices = "Devices"
        }
    }

    public struct DeleteSubscriptionDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string)
        ]
        public let subscriptionDefinitionId: String

        public init(subscriptionDefinitionId: String) {
            self.subscriptionDefinitionId = subscriptionDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionDefinitionId = "SubscriptionDefinitionId"
        }
    }

    public struct DeleteDeviceDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string)
        ]
        public let deviceDefinitionId: String

        public init(deviceDefinitionId: String) {
            self.deviceDefinitionId = deviceDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceDefinitionId = "DeviceDefinitionId"
        }
    }

    public struct DeleteGroupResponse: AWSShape {

    }

    public struct StopBulkDeploymentResponse: AWSShape {

    }

    public enum LoggerLevel: String, CustomStringConvertible, Codable {
        case debug = "DEBUG"
        case info = "INFO"
        case warn = "WARN"
        case error = "ERROR"
        case fatal = "FATAL"
        public var description: String { return self.rawValue }
    }

    public struct FunctionExecutionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsolationMode", required: false, type: .enum), 
            AWSShapeMember(label: "RunAs", required: false, type: .structure)
        ]
        public let isolationMode: FunctionIsolationMode?
        public let runAs: FunctionRunAsConfig?

        public init(isolationMode: FunctionIsolationMode? = nil, runAs: FunctionRunAsConfig? = nil) {
            self.isolationMode = isolationMode
            self.runAs = runAs
        }

        private enum CodingKeys: String, CodingKey {
            case isolationMode = "IsolationMode"
            case runAs = "RunAs"
        }
    }

    public struct CreateDeviceDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let latestVersion: String?
        public let latestVersionArn: String?
        public let lastUpdatedTimestamp: String?
        public let name: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, latestVersion: String? = nil, latestVersionArn: String? = nil, lastUpdatedTimestamp: String? = nil, name: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.latestVersion = latestVersion
            self.latestVersionArn = latestVersionArn
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case latestVersion = "LatestVersion"
            case latestVersionArn = "LatestVersionArn"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct Deployment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedAt", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentType", required: false, type: .enum), 
            AWSShapeMember(label: "GroupArn", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentId", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentArn", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the deployment was created.
        public let createdAt: String?
        /// The type of the deployment.
        public let deploymentType: DeploymentType?
        /// The ARN of the group for this deployment.
        public let groupArn: String?
        /// The ID of the deployment.
        public let deploymentId: String?
        /// The ARN of the deployment.
        public let deploymentArn: String?

        public init(createdAt: String? = nil, deploymentType: DeploymentType? = nil, groupArn: String? = nil, deploymentId: String? = nil, deploymentArn: String? = nil) {
            self.createdAt = createdAt
            self.deploymentType = deploymentType
            self.groupArn = groupArn
            self.deploymentId = deploymentId
            self.deploymentArn = deploymentArn
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "CreatedAt"
            case deploymentType = "DeploymentType"
            case groupArn = "GroupArn"
            case deploymentId = "DeploymentId"
            case deploymentArn = "DeploymentArn"
        }
    }

    public struct CreateConnectorDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string)
        ]
        public let initialVersion: ConnectorDefinitionVersion?
        public let name: String?
        public let amznClientToken: String?

        public init(initialVersion: ConnectorDefinitionVersion? = nil, name: String? = nil, amznClientToken: String? = nil) {
            self.initialVersion = initialVersion
            self.name = name
            self.amznClientToken = amznClientToken
        }

        private enum CodingKeys: String, CodingKey {
            case initialVersion = "InitialVersion"
            case name = "Name"
            case amznClientToken = "X-Amzn-Client-Token"
        }
    }

    public struct CreateGroupCertificateAuthorityRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string)
        ]
        public let groupId: String
        public let amznClientToken: String?

        public init(groupId: String, amznClientToken: String? = nil) {
            self.groupId = groupId
            self.amznClientToken = amznClientToken
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case amznClientToken = "X-Amzn-Client-Token"
        }
    }

    public struct GetGroupVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the group version was created.
        public let creationTimestamp: String?
        /// Information about the group version definition.
        public let definition: GroupVersion?
        /// The ID of the group version.
        public let id: String?
        /// The ARN of the group version.
        public let arn: String?
        /// The unique ID for the version of the group.
        public let version: String?

        public init(creationTimestamp: String? = nil, definition: GroupVersion? = nil, id: String? = nil, arn: String? = nil, version: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
            self.arn = arn
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case definition = "Definition"
            case id = "Id"
            case arn = "Arn"
            case version = "Version"
        }
    }

    public enum SoftwareToUpdate: String, CustomStringConvertible, Codable {
        case core = "core"
        case otaAgent = "ota_agent"
        public var description: String { return self.rawValue }
    }

    public struct GetBulkDeploymentStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BulkDeploymentId", location: .uri(locationName: "BulkDeploymentId"), required: true, type: .string)
        ]
        public let bulkDeploymentId: String

        public init(bulkDeploymentId: String) {
            self.bulkDeploymentId = bulkDeploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case bulkDeploymentId = "BulkDeploymentId"
        }
    }

    public struct CreateFunctionDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let latestVersion: String?
        public let latestVersionArn: String?
        public let lastUpdatedTimestamp: String?
        public let name: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, latestVersion: String? = nil, latestVersionArn: String? = nil, lastUpdatedTimestamp: String? = nil, name: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.latestVersion = latestVersion
            self.latestVersionArn = latestVersionArn
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case latestVersion = "LatestVersion"
            case latestVersionArn = "LatestVersionArn"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct UpdateCoreDefinitionResponse: AWSShape {

    }

    public struct AssociateServiceRoleToAccountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociatedAt", required: false, type: .string)
        ]
        /// The time when the service role was associated with the account.
        public let associatedAt: String?

        public init(associatedAt: String? = nil) {
            self.associatedAt = associatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case associatedAt = "AssociatedAt"
        }
    }

    public struct GetFunctionDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string)
        ]
        public let functionDefinitionId: String

        public init(functionDefinitionId: String) {
            self.functionDefinitionId = functionDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case functionDefinitionId = "FunctionDefinitionId"
        }
    }

    public struct ListLoggerDefinitionVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string)
        ]
        public let maxResults: String?
        public let nextToken: String?
        public let loggerDefinitionId: String

        public init(maxResults: String? = nil, nextToken: String? = nil, loggerDefinitionId: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.loggerDefinitionId = loggerDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case loggerDefinitionId = "LoggerDefinitionId"
        }
    }

    public struct DeleteDeviceDefinitionResponse: AWSShape {

    }

    public struct CreateSoftwareUpdateJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpdateTargetsOperatingSystem", required: false, type: .enum), 
            AWSShapeMember(label: "UpdateAgentLogLevel", required: false, type: .enum), 
            AWSShapeMember(label: "SoftwareToUpdate", required: false, type: .enum), 
            AWSShapeMember(label: "S3UrlSignerRole", required: false, type: .string), 
            AWSShapeMember(label: "UpdateTargetsArchitecture", required: false, type: .enum), 
            AWSShapeMember(label: "UpdateTargets", required: false, type: .list), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string)
        ]
        public let updateTargetsOperatingSystem: UpdateTargetsOperatingSystem?
        public let updateAgentLogLevel: UpdateAgentLogLevel?
        public let softwareToUpdate: SoftwareToUpdate?
        public let s3UrlSignerRole: String?
        public let updateTargetsArchitecture: UpdateTargetsArchitecture?
        public let updateTargets: [String]?
        public let amznClientToken: String?

        public init(updateTargetsOperatingSystem: UpdateTargetsOperatingSystem? = nil, updateAgentLogLevel: UpdateAgentLogLevel? = nil, softwareToUpdate: SoftwareToUpdate? = nil, s3UrlSignerRole: String? = nil, updateTargetsArchitecture: UpdateTargetsArchitecture? = nil, updateTargets: [String]? = nil, amznClientToken: String? = nil) {
            self.updateTargetsOperatingSystem = updateTargetsOperatingSystem
            self.updateAgentLogLevel = updateAgentLogLevel
            self.softwareToUpdate = softwareToUpdate
            self.s3UrlSignerRole = s3UrlSignerRole
            self.updateTargetsArchitecture = updateTargetsArchitecture
            self.updateTargets = updateTargets
            self.amznClientToken = amznClientToken
        }

        private enum CodingKeys: String, CodingKey {
            case updateTargetsOperatingSystem = "UpdateTargetsOperatingSystem"
            case updateAgentLogLevel = "UpdateAgentLogLevel"
            case softwareToUpdate = "SoftwareToUpdate"
            case s3UrlSignerRole = "S3UrlSignerRole"
            case updateTargetsArchitecture = "UpdateTargetsArchitecture"
            case updateTargets = "UpdateTargets"
            case amznClientToken = "X-Amzn-Client-Token"
        }
    }

    public struct ListLoggerDefinitionVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct AssociateServiceRoleToAccountRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", required: false, type: .string)
        ]
        /// The ARN of the service role you wish to associate with your account.
        public let roleArn: String?

        public init(roleArn: String? = nil) {
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
        }
    }

    public struct BulkDeployment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BulkDeploymentArn", required: false, type: .string), 
            AWSShapeMember(label: "CreatedAt", required: false, type: .string), 
            AWSShapeMember(label: "BulkDeploymentId", required: false, type: .string)
        ]
        /// The ARN of the bulk deployment.
        public let bulkDeploymentArn: String?
        /// The time, in ISO format, when the deployment was created.
        public let createdAt: String?
        /// The ID of the bulk deployment.
        public let bulkDeploymentId: String?

        public init(bulkDeploymentArn: String? = nil, createdAt: String? = nil, bulkDeploymentId: String? = nil) {
            self.bulkDeploymentArn = bulkDeploymentArn
            self.createdAt = createdAt
            self.bulkDeploymentId = bulkDeploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case bulkDeploymentArn = "BulkDeploymentArn"
            case createdAt = "CreatedAt"
            case bulkDeploymentId = "BulkDeploymentId"
        }
    }

    public struct FunctionConfigurationEnvironment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Variables", required: false, type: .map), 
            AWSShapeMember(label: "ResourceAccessPolicies", required: false, type: .list), 
            AWSShapeMember(label: "AccessSysfs", required: false, type: .boolean), 
            AWSShapeMember(label: "Execution", required: false, type: .structure)
        ]
        /// Environment variables for the Lambda function's configuration.
        public let variables: [String: String]?
        /// A list of the resources, with their permissions, to which the Lambda function will be granted access. A Lambda function can have at most 10 resources. ResourceAccessPolicies apply only when you run the Lambda function in a Greengrass container.
        public let resourceAccessPolicies: [ResourceAccessPolicy]?
        /// If true, the Lambda function is allowed to access the host's /sys folder. Use this when the Lambda function needs to read device information from /sys. This setting applies only when you run the Lambda function in a Greengrass container.
        public let accessSysfs: Bool?
        /// Configuration related to executing the Lambda function
        public let execution: FunctionExecutionConfig?

        public init(variables: [String: String]? = nil, resourceAccessPolicies: [ResourceAccessPolicy]? = nil, accessSysfs: Bool? = nil, execution: FunctionExecutionConfig? = nil) {
            self.variables = variables
            self.resourceAccessPolicies = resourceAccessPolicies
            self.accessSysfs = accessSysfs
            self.execution = execution
        }

        private enum CodingKeys: String, CodingKey {
            case variables = "Variables"
            case resourceAccessPolicies = "ResourceAccessPolicies"
            case accessSysfs = "AccessSysfs"
            case execution = "Execution"
        }
    }

    public struct GetDeviceDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string)
        ]
        public let deviceDefinitionId: String

        public init(deviceDefinitionId: String) {
            self.deviceDefinitionId = deviceDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceDefinitionId = "DeviceDefinitionId"
        }
    }

    public struct GetGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let latestVersion: String?
        public let latestVersionArn: String?
        public let lastUpdatedTimestamp: String?
        public let name: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, latestVersion: String? = nil, latestVersionArn: String? = nil, lastUpdatedTimestamp: String? = nil, name: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.latestVersion = latestVersion
            self.latestVersionArn = latestVersionArn
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case latestVersion = "LatestVersion"
            case latestVersionArn = "LatestVersionArn"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct ListDeviceDefinitionVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct UpdateFunctionDefinitionResponse: AWSShape {

    }

    public struct GetSubscriptionDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the subscription definition version was created.
        public let creationTimestamp: String?
        /// Information about the subscription definition version.
        public let definition: SubscriptionDefinitionVersion?
        /// The ID of the subscription definition version.
        public let id: String?
        /// The ARN of the subscription definition version.
        public let arn: String?
        /// The version of the subscription definition version.
        public let version: String?
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?

        public init(creationTimestamp: String? = nil, definition: SubscriptionDefinitionVersion? = nil, id: String? = nil, arn: String? = nil, version: String? = nil, nextToken: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
            self.arn = arn
            self.version = version
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case definition = "Definition"
            case id = "Id"
            case arn = "Arn"
            case version = "Version"
            case nextToken = "NextToken"
        }
    }

    public struct ListDeviceDefinitionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Definitions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let definitions: [DefinitionInformation]?
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case definitions = "Definitions"
            case nextToken = "NextToken"
        }
    }

    public struct ConnectorDefinitionVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Connectors", required: false, type: .list)
        ]
        /// A list of references to connectors in this version, with their corresponding configuration settings.
        public let connectors: [Connector]?

        public init(connectors: [Connector]? = nil) {
            self.connectors = connectors
        }

        private enum CodingKeys: String, CodingKey {
            case connectors = "Connectors"
        }
    }

    public struct CreateGroupVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let arn: String?
        public let version: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, arn: String? = nil, version: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.arn = arn
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case arn = "Arn"
            case version = "Version"
        }
    }

    public struct CreateConnectorDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectorDefinitionId", location: .uri(locationName: "ConnectorDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Connectors", required: false, type: .list)
        ]
        public let connectorDefinitionId: String
        public let amznClientToken: String?
        public let connectors: [Connector]?

        public init(connectorDefinitionId: String, amznClientToken: String? = nil, connectors: [Connector]? = nil) {
            self.connectorDefinitionId = connectorDefinitionId
            self.amznClientToken = amznClientToken
            self.connectors = connectors
        }

        private enum CodingKeys: String, CodingKey {
            case connectorDefinitionId = "ConnectorDefinitionId"
            case amznClientToken = "X-Amzn-Client-Token"
            case connectors = "Connectors"
        }
    }

    public struct CreateResourceDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceDefinitionId", location: .uri(locationName: "ResourceDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Resources", required: false, type: .list)
        ]
        public let resourceDefinitionId: String
        public let amznClientToken: String?
        public let resources: [Resource]?

        public init(resourceDefinitionId: String, amznClientToken: String? = nil, resources: [Resource]? = nil) {
            self.resourceDefinitionId = resourceDefinitionId
            self.amznClientToken = amznClientToken
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case resourceDefinitionId = "ResourceDefinitionId"
            case amznClientToken = "X-Amzn-Client-Token"
            case resources = "Resources"
        }
    }

    public struct ListCoreDefinitionVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let maxResults: String?
        public let coreDefinitionId: String
        public let nextToken: String?

        public init(maxResults: String? = nil, coreDefinitionId: String, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.coreDefinitionId = coreDefinitionId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case coreDefinitionId = "CoreDefinitionId"
            case nextToken = "NextToken"
        }
    }

    public struct CreateCoreDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let arn: String?
        public let version: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, arn: String? = nil, version: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.arn = arn
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case arn = "Arn"
            case version = "Version"
        }
    }

    public struct DeleteSubscriptionDefinitionResponse: AWSShape {

    }

    public struct UpdateConnectivityInfoRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ThingName", location: .uri(locationName: "ThingName"), required: true, type: .string), 
            AWSShapeMember(label: "ConnectivityInfo", required: false, type: .list)
        ]
        public let thingName: String
        /// A list of connectivity info.
        public let connectivityInfo: [ConnectivityInfo]?

        public init(thingName: String, connectivityInfo: [ConnectivityInfo]? = nil) {
            self.thingName = thingName
            self.connectivityInfo = connectivityInfo
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "ThingName"
            case connectivityInfo = "ConnectivityInfo"
        }
    }

    public struct DeleteFunctionDefinitionResponse: AWSShape {

    }

    public struct DeleteGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct GetBulkDeploymentStatusResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedAt", required: false, type: .string), 
            AWSShapeMember(label: "BulkDeploymentStatus", required: false, type: .enum), 
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "ErrorDetails", required: false, type: .list), 
            AWSShapeMember(label: "BulkDeploymentMetrics", required: false, type: .structure)
        ]
        /// The time, in ISO format, when the deployment was created.
        public let createdAt: String?
        /// The status of the bulk deployment.
        public let bulkDeploymentStatus: BulkDeploymentStatus?
        /// Error message
        public let errorMessage: String?
        /// Error details
        public let errorDetails: [ErrorDetail]?
        /// Relevant metrics on input records processed during bulk deployment.
        public let bulkDeploymentMetrics: BulkDeploymentMetrics?

        public init(createdAt: String? = nil, bulkDeploymentStatus: BulkDeploymentStatus? = nil, errorMessage: String? = nil, errorDetails: [ErrorDetail]? = nil, bulkDeploymentMetrics: BulkDeploymentMetrics? = nil) {
            self.createdAt = createdAt
            self.bulkDeploymentStatus = bulkDeploymentStatus
            self.errorMessage = errorMessage
            self.errorDetails = errorDetails
            self.bulkDeploymentMetrics = bulkDeploymentMetrics
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "CreatedAt"
            case bulkDeploymentStatus = "BulkDeploymentStatus"
            case errorMessage = "ErrorMessage"
            case errorDetails = "ErrorDetails"
            case bulkDeploymentMetrics = "BulkDeploymentMetrics"
        }
    }

    public struct CreateGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string)
        ]
        public let initialVersion: GroupVersion?
        public let name: String?
        public let amznClientToken: String?

        public init(initialVersion: GroupVersion? = nil, name: String? = nil, amznClientToken: String? = nil) {
            self.initialVersion = initialVersion
            self.name = name
            self.amznClientToken = amznClientToken
        }

        private enum CodingKeys: String, CodingKey {
            case initialVersion = "InitialVersion"
            case name = "Name"
            case amznClientToken = "X-Amzn-Client-Token"
        }
    }

    public struct DisassociateServiceRoleFromAccountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisassociatedAt", required: false, type: .string)
        ]
        /// The time when the service role was disassociated from the account.
        public let disassociatedAt: String?

        public init(disassociatedAt: String? = nil) {
            self.disassociatedAt = disassociatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case disassociatedAt = "DisassociatedAt"
        }
    }

    public struct VersionInformation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the version was created.
        public let creationTimestamp: String?
        /// The ID of the version.
        public let id: String?
        /// The ARN of the version.
        public let arn: String?
        /// The unique ID of the version.
        public let version: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, arn: String? = nil, version: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.arn = arn
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case arn = "Arn"
            case version = "Version"
        }
    }

    public struct GetFunctionDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let latestVersion: String?
        public let latestVersionArn: String?
        public let lastUpdatedTimestamp: String?
        public let name: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, latestVersion: String? = nil, latestVersionArn: String? = nil, lastUpdatedTimestamp: String? = nil, name: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.latestVersion = latestVersion
            self.latestVersionArn = latestVersionArn
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case latestVersion = "LatestVersion"
            case latestVersionArn = "LatestVersionArn"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct GetConnectivityInfoRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ThingName", location: .uri(locationName: "ThingName"), required: true, type: .string)
        ]
        public let thingName: String

        public init(thingName: String) {
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "ThingName"
        }
    }

    public struct LoggerDefinitionVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Loggers", required: false, type: .list)
        ]
        /// A list of loggers.
        public let loggers: [Logger]?

        public init(loggers: [Logger]? = nil) {
            self.loggers = loggers
        }

        private enum CodingKeys: String, CodingKey {
            case loggers = "Loggers"
        }
    }

    public struct GetSubscriptionDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let latestVersion: String?
        public let latestVersionArn: String?
        public let lastUpdatedTimestamp: String?
        public let name: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, latestVersion: String? = nil, latestVersionArn: String? = nil, lastUpdatedTimestamp: String? = nil, name: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.latestVersion = latestVersion
            self.latestVersionArn = latestVersionArn
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case latestVersion = "LatestVersion"
            case latestVersionArn = "LatestVersionArn"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct Connector: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .map), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "ConnectorArn", required: false, type: .string)
        ]
        /// The parameters or configuration that the connector uses.
        public let parameters: [String: String]?
        /// A descriptive or arbitrary ID for the connector. This value must be unique within the connector definition version. Max length is 128 characters with pattern [a-zA-Z0-9:_-]+.
        public let id: String?
        /// The ARN of the connector.
        public let connectorArn: String?

        public init(parameters: [String: String]? = nil, id: String? = nil, connectorArn: String? = nil) {
            self.parameters = parameters
            self.id = id
            self.connectorArn = connectorArn
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case id = "Id"
            case connectorArn = "ConnectorArn"
        }
    }

    public struct ListSubscriptionDefinitionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Definitions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let definitions: [DefinitionInformation]?
        public let nextToken: String?

        public init(definitions: [DefinitionInformation]? = nil, nextToken: String? = nil) {
            self.definitions = definitions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case definitions = "Definitions"
            case nextToken = "NextToken"
        }
    }

    public struct ListBulkDeploymentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BulkDeployments", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of bulk deployments.
        public let bulkDeployments: [BulkDeployment]?
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?

        public init(bulkDeployments: [BulkDeployment]? = nil, nextToken: String? = nil) {
            self.bulkDeployments = bulkDeployments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case bulkDeployments = "BulkDeployments"
            case nextToken = "NextToken"
        }
    }

    public struct CreateDeviceDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let arn: String?
        public let version: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, arn: String? = nil, version: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.arn = arn
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case arn = "Arn"
            case version = "Version"
        }
    }

    public enum LoggerComponent: String, CustomStringConvertible, Codable {
        case greengrasssystem = "GreengrassSystem"
        case lambda = "Lambda"
        public var description: String { return self.rawValue }
    }

    public struct CreateCoreDefinitionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersion", required: false, type: .string), 
            AWSShapeMember(label: "LatestVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string)
        ]
        public let creationTimestamp: String?
        public let id: String?
        public let latestVersion: String?
        public let latestVersionArn: String?
        public let lastUpdatedTimestamp: String?
        public let name: String?
        public let arn: String?

        public init(creationTimestamp: String? = nil, id: String? = nil, latestVersion: String? = nil, latestVersionArn: String? = nil, lastUpdatedTimestamp: String? = nil, name: String? = nil, arn: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.id = id
            self.latestVersion = latestVersion
            self.latestVersionArn = latestVersionArn
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case id = "Id"
            case latestVersion = "LatestVersion"
            case latestVersionArn = "LatestVersionArn"
            case lastUpdatedTimestamp = "LastUpdatedTimestamp"
            case name = "Name"
            case arn = "Arn"
        }
    }

    public struct GetCoreDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the core definition version was created.
        public let creationTimestamp: String?
        /// Information about the core definition version.
        public let definition: CoreDefinitionVersion?
        /// The ID of the core definition version.
        public let id: String?
        /// The ARN of the core definition version.
        public let arn: String?
        /// The version of the core definition version.
        public let version: String?
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?

        public init(creationTimestamp: String? = nil, definition: CoreDefinitionVersion? = nil, id: String? = nil, arn: String? = nil, version: String? = nil, nextToken: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
            self.arn = arn
            self.version = version
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case definition = "Definition"
            case id = "Id"
            case arn = "Arn"
            case version = "Version"
            case nextToken = "NextToken"
        }
    }

    public struct AssociateRoleToGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AssociatedAt", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the role ARN was associated with the group.
        public let associatedAt: String?

        public init(associatedAt: String? = nil) {
            self.associatedAt = associatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case associatedAt = "AssociatedAt"
        }
    }

    public struct DeleteConnectorDefinitionResponse: AWSShape {

    }

    public struct ResetDeploymentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeploymentId", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentArn", required: false, type: .string)
        ]
        /// The ID of the deployment.
        public let deploymentId: String?
        /// The ARN of the deployment.
        public let deploymentArn: String?

        public init(deploymentId: String? = nil, deploymentArn: String? = nil) {
            self.deploymentId = deploymentId
            self.deploymentArn = deploymentArn
        }

        private enum CodingKeys: String, CodingKey {
            case deploymentId = "DeploymentId"
            case deploymentArn = "DeploymentArn"
        }
    }

    public struct GetFunctionDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the function definition version was created.
        public let creationTimestamp: String?
        /// Information on the definition.
        public let definition: FunctionDefinitionVersion?
        /// The ID of the function definition version.
        public let id: String?
        /// The ARN of the function definition version.
        public let arn: String?
        /// The version of the function definition version.
        public let version: String?
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?

        public init(creationTimestamp: String? = nil, definition: FunctionDefinitionVersion? = nil, id: String? = nil, arn: String? = nil, version: String? = nil, nextToken: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
            self.arn = arn
            self.version = version
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case definition = "Definition"
            case id = "Id"
            case arn = "Arn"
            case version = "Version"
            case nextToken = "NextToken"
        }
    }

    public struct UpdateConnectorDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectorDefinitionId", location: .uri(locationName: "ConnectorDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        public let connectorDefinitionId: String
        public let name: String?

        public init(connectorDefinitionId: String, name: String? = nil) {
            self.connectorDefinitionId = connectorDefinitionId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case connectorDefinitionId = "ConnectorDefinitionId"
            case name = "Name"
        }
    }

    public struct CreateSubscriptionDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string)
        ]
        public let initialVersion: SubscriptionDefinitionVersion?
        public let name: String?
        public let amznClientToken: String?

        public init(initialVersion: SubscriptionDefinitionVersion? = nil, name: String? = nil, amznClientToken: String? = nil) {
            self.initialVersion = initialVersion
            self.name = name
            self.amznClientToken = amznClientToken
        }

        private enum CodingKeys: String, CodingKey {
            case initialVersion = "InitialVersion"
            case name = "Name"
            case amznClientToken = "X-Amzn-Client-Token"
        }
    }

    public struct ErrorDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DetailedErrorCode", required: false, type: .string), 
            AWSShapeMember(label: "DetailedErrorMessage", required: false, type: .string)
        ]
        /// A detailed error code.
        public let detailedErrorCode: String?
        /// A detailed error message.
        public let detailedErrorMessage: String?

        public init(detailedErrorCode: String? = nil, detailedErrorMessage: String? = nil) {
            self.detailedErrorCode = detailedErrorCode
            self.detailedErrorMessage = detailedErrorMessage
        }

        private enum CodingKeys: String, CodingKey {
            case detailedErrorCode = "DetailedErrorCode"
            case detailedErrorMessage = "DetailedErrorMessage"
        }
    }

    public struct UpdateLoggerDefinitionResponse: AWSShape {

    }

    public struct GeneralError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "ErrorDetails", required: false, type: .list)
        ]
        /// A message containing information about the error.
        public let message: String?
        /// Details about the error.
        public let errorDetails: [ErrorDetail]?

        public init(message: String? = nil, errorDetails: [ErrorDetail]? = nil) {
            self.message = message
            self.errorDetails = errorDetails
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case errorDetails = "ErrorDetails"
        }
    }

    public struct DeleteCoreDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CoreDefinitionId", location: .uri(locationName: "CoreDefinitionId"), required: true, type: .string)
        ]
        public let coreDefinitionId: String

        public init(coreDefinitionId: String) {
            self.coreDefinitionId = coreDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case coreDefinitionId = "CoreDefinitionId"
        }
    }

    public struct ListSubscriptionDefinitionVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list)
        ]
        public let nextToken: String?
        public let versions: [VersionInformation]?

        public init(nextToken: String? = nil, versions: [VersionInformation]? = nil) {
            self.nextToken = nextToken
            self.versions = versions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case versions = "Versions"
        }
    }

    public struct UpdateSubscriptionDefinitionResponse: AWSShape {

    }

    public struct GroupCertificateConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CertificateExpiryInMilliseconds", required: false, type: .string), 
            AWSShapeMember(label: "GroupId", required: false, type: .string), 
            AWSShapeMember(label: "CertificateAuthorityExpiryInMilliseconds", required: false, type: .string)
        ]
        /// The amount of time remaining before the certificate expires, in milliseconds.
        public let certificateExpiryInMilliseconds: String?
        /// The ID of the group certificate configuration.
        public let groupId: String?
        /// The amount of time remaining before the certificate authority expires, in milliseconds.
        public let certificateAuthorityExpiryInMilliseconds: String?

        public init(certificateExpiryInMilliseconds: String? = nil, groupId: String? = nil, certificateAuthorityExpiryInMilliseconds: String? = nil) {
            self.certificateExpiryInMilliseconds = certificateExpiryInMilliseconds
            self.groupId = groupId
            self.certificateAuthorityExpiryInMilliseconds = certificateAuthorityExpiryInMilliseconds
        }

        private enum CodingKeys: String, CodingKey {
            case certificateExpiryInMilliseconds = "CertificateExpiryInMilliseconds"
            case groupId = "GroupId"
            case certificateAuthorityExpiryInMilliseconds = "CertificateAuthorityExpiryInMilliseconds"
        }
    }

    public struct DisassociateRoleFromGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string)
        ]
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public enum BulkDeploymentStatus: String, CustomStringConvertible, Codable {
        case initializing = "Initializing"
        case running = "Running"
        case completed = "Completed"
        case stopping = "Stopping"
        case stopped = "Stopped"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct Subscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Target", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Subject", required: false, type: .string), 
            AWSShapeMember(label: "Source", required: false, type: .string)
        ]
        /// Where the message is sent to. Can be a thing ARN, a Lambda function ARN, a connector ARN, 'cloud' (which represents the AWS IoT cloud), or 'GGShadowService'.
        public let target: String?
        /// A descriptive or arbitrary ID for the subscription. This value must be unique within the subscription definition version. Max length is 128 characters with pattern ''[a-zA-Z0-9:_-]+''.
        public let id: String?
        /// The subject of the message.
        public let subject: String?
        /// The source of the subscription. Can be a thing ARN, a Lambda function ARN, a connector ARN, 'cloud' (which represents the AWS IoT cloud), or 'GGShadowService'.
        public let source: String?

        public init(target: String? = nil, id: String? = nil, subject: String? = nil, source: String? = nil) {
            self.target = target
            self.id = id
            self.subject = subject
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case target = "Target"
            case id = "Id"
            case subject = "Subject"
            case source = "Source"
        }
    }

    public struct GetSubscriptionDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubscriptionDefinitionId", location: .uri(locationName: "SubscriptionDefinitionId"), required: true, type: .string)
        ]
        public let subscriptionDefinitionId: String

        public init(subscriptionDefinitionId: String) {
            self.subscriptionDefinitionId = subscriptionDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptionDefinitionId = "SubscriptionDefinitionId"
        }
    }

    public struct ListConnectorDefinitionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let maxResults: String?
        public let nextToken: String?

        public init(maxResults: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListDeviceDefinitionVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let deviceDefinitionId: String
        public let maxResults: String?
        public let nextToken: String?

        public init(deviceDefinitionId: String, maxResults: String? = nil, nextToken: String? = nil) {
            self.deviceDefinitionId = deviceDefinitionId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case deviceDefinitionId = "DeviceDefinitionId"
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ListBulkDeploymentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let maxResults: String?
        public let nextToken: String?

        public init(maxResults: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct ResourceAccessPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: false, type: .string), 
            AWSShapeMember(label: "Permission", required: false, type: .enum)
        ]
        /// The ID of the resource. (This ID is assigned to the resource when you create the resource definiton.)
        public let resourceId: String?
        /// The permissions that the Lambda function has to the resource. Can be one of ''rw'' (read/write) or ''ro'' (read-only).
        public let permission: Permission?

        public init(resourceId: String? = nil, permission: Permission? = nil) {
            self.resourceId = resourceId
            self.permission = permission
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case permission = "Permission"
        }
    }

    public struct CreateCoreDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitialVersion", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string)
        ]
        public let initialVersion: CoreDefinitionVersion?
        public let name: String?
        public let amznClientToken: String?

        public init(initialVersion: CoreDefinitionVersion? = nil, name: String? = nil, amznClientToken: String? = nil) {
            self.initialVersion = initialVersion
            self.name = name
            self.amznClientToken = amznClientToken
        }

        private enum CodingKeys: String, CodingKey {
            case initialVersion = "InitialVersion"
            case name = "Name"
            case amznClientToken = "X-Amzn-Client-Token"
        }
    }

    public struct GetConnectivityInfoResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", location: .body(locationName: "message"), required: false, type: .string), 
            AWSShapeMember(label: "ConnectivityInfo", required: false, type: .list)
        ]
        /// A message about the connectivity info request.
        public let message: String?
        /// Connectivity info list.
        public let connectivityInfo: [ConnectivityInfo]?

        public init(message: String? = nil, connectivityInfo: [ConnectivityInfo]? = nil) {
            self.message = message
            self.connectivityInfo = connectivityInfo
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
            case connectivityInfo = "ConnectivityInfo"
        }
    }

    public struct GroupCertificateAuthorityProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupCertificateAuthorityId", required: false, type: .string), 
            AWSShapeMember(label: "GroupCertificateAuthorityArn", required: false, type: .string)
        ]
        /// The ID of the certificate authority for the group.
        public let groupCertificateAuthorityId: String?
        /// The ARN of the certificate authority for the group.
        public let groupCertificateAuthorityArn: String?

        public init(groupCertificateAuthorityId: String? = nil, groupCertificateAuthorityArn: String? = nil) {
            self.groupCertificateAuthorityId = groupCertificateAuthorityId
            self.groupCertificateAuthorityArn = groupCertificateAuthorityArn
        }

        private enum CodingKeys: String, CodingKey {
            case groupCertificateAuthorityId = "GroupCertificateAuthorityId"
            case groupCertificateAuthorityArn = "GroupCertificateAuthorityArn"
        }
    }

    public struct ListBulkDeploymentDetailedReportsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Deployments", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of the individual group deployments in the bulk deployment operation.
        public let deployments: [BulkDeploymentResult]?
        /// The token for the next set of results, or ''null'' if there are no additional results.
        public let nextToken: String?

        public init(deployments: [BulkDeploymentResult]? = nil, nextToken: String? = nil) {
            self.deployments = deployments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case deployments = "Deployments"
            case nextToken = "NextToken"
        }
    }

    public struct StartBulkDeploymentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExecutionRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "InputFileUri", required: false, type: .string)
        ]
        /// The ARN of the execution role to associate with the bulk deployment operation. This IAM role must allow the ''greengrass:CreateDeployment'' action for all group versions that are listed in the input file. This IAM role must have access to the S3 bucket containing the input file.
        public let executionRoleArn: String?
        public let amznClientToken: String?
        /// The URI of the input file contained in the S3 bucket. The execution role must have ''getObject'' permissions on this bucket to access the input file. The input file is a JSON-serialized, line delimited file with UTF-8 encoding that provides a list of group and version IDs and the deployment type. This file must be less than 100 MB. Currently, AWS IoT Greengrass supports only ''NewDeployment'' deployment types.
        public let inputFileUri: String?

        public init(executionRoleArn: String? = nil, amznClientToken: String? = nil, inputFileUri: String? = nil) {
            self.executionRoleArn = executionRoleArn
            self.amznClientToken = amznClientToken
            self.inputFileUri = inputFileUri
        }

        private enum CodingKeys: String, CodingKey {
            case executionRoleArn = "ExecutionRoleArn"
            case amznClientToken = "X-Amzn-Client-Token"
            case inputFileUri = "InputFileUri"
        }
    }

    public struct GetFunctionDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FunctionDefinitionVersionId", location: .uri(locationName: "FunctionDefinitionVersionId"), required: true, type: .string), 
            AWSShapeMember(label: "FunctionDefinitionId", location: .uri(locationName: "FunctionDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let functionDefinitionVersionId: String
        public let functionDefinitionId: String
        public let nextToken: String?

        public init(functionDefinitionVersionId: String, functionDefinitionId: String, nextToken: String? = nil) {
            self.functionDefinitionVersionId = functionDefinitionVersionId
            self.functionDefinitionId = functionDefinitionId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case functionDefinitionVersionId = "FunctionDefinitionVersionId"
            case functionDefinitionId = "FunctionDefinitionId"
            case nextToken = "NextToken"
        }
    }

    public struct CreateLoggerDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Loggers", required: false, type: .list), 
            AWSShapeMember(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string)
        ]
        public let amznClientToken: String?
        public let loggers: [Logger]?
        public let loggerDefinitionId: String

        public init(amznClientToken: String? = nil, loggers: [Logger]? = nil, loggerDefinitionId: String) {
            self.amznClientToken = amznClientToken
            self.loggers = loggers
            self.loggerDefinitionId = loggerDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case amznClientToken = "X-Amzn-Client-Token"
            case loggers = "Loggers"
            case loggerDefinitionId = "LoggerDefinitionId"
        }
    }

    public struct UpdateGroupCertificateConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", location: .uri(locationName: "GroupId"), required: true, type: .string), 
            AWSShapeMember(label: "CertificateExpiryInMilliseconds", required: false, type: .string)
        ]
        public let groupId: String
        /// The amount of time remaining before the certificate expires, in milliseconds.
        public let certificateExpiryInMilliseconds: String?

        public init(groupId: String, certificateExpiryInMilliseconds: String? = nil) {
            self.groupId = groupId
            self.certificateExpiryInMilliseconds = certificateExpiryInMilliseconds
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case certificateExpiryInMilliseconds = "CertificateExpiryInMilliseconds"
        }
    }

    public struct ResourceDefinitionVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Resources", required: false, type: .list)
        ]
        /// A list of resources.
        public let resources: [Resource]?

        public init(resources: [Resource]? = nil) {
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case resources = "Resources"
        }
    }

    public struct ListSubscriptionDefinitionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        public let maxResults: String?
        public let nextToken: String?

        public init(maxResults: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct GetLoggerDefinitionVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreationTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the logger definition version was created.
        public let creationTimestamp: String?
        /// Information about the logger definition version.
        public let definition: LoggerDefinitionVersion?
        /// The ID of the logger definition version.
        public let id: String?
        /// The ARN of the logger definition version.
        public let arn: String?
        /// The version of the logger definition version.
        public let version: String?

        public init(creationTimestamp: String? = nil, definition: LoggerDefinitionVersion? = nil, id: String? = nil, arn: String? = nil, version: String? = nil) {
            self.creationTimestamp = creationTimestamp
            self.definition = definition
            self.id = id
            self.arn = arn
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case creationTimestamp = "CreationTimestamp"
            case definition = "Definition"
            case id = "Id"
            case arn = "Arn"
            case version = "Version"
        }
    }

    public struct Empty: AWSShape {

    }

    public struct GetLoggerDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoggerDefinitionId", location: .uri(locationName: "LoggerDefinitionId"), required: true, type: .string)
        ]
        public let loggerDefinitionId: String

        public init(loggerDefinitionId: String) {
            self.loggerDefinitionId = loggerDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case loggerDefinitionId = "LoggerDefinitionId"
        }
    }

    public enum Permission: String, CustomStringConvertible, Codable {
        case ro = "ro"
        case rw = "rw"
        public var description: String { return self.rawValue }
    }

    public struct GetConnectorDefinitionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectorDefinitionId", location: .uri(locationName: "ConnectorDefinitionId"), required: true, type: .string)
        ]
        public let connectorDefinitionId: String

        public init(connectorDefinitionId: String) {
            self.connectorDefinitionId = connectorDefinitionId
        }

        private enum CodingKeys: String, CodingKey {
            case connectorDefinitionId = "ConnectorDefinitionId"
        }
    }

    public struct SubscriptionDefinitionVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Subscriptions", required: false, type: .list)
        ]
        /// A list of subscriptions.
        public let subscriptions: [Subscription]?

        public init(subscriptions: [Subscription]? = nil) {
            self.subscriptions = subscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptions = "Subscriptions"
        }
    }

    public struct CreateDeviceDefinitionVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceDefinitionId", location: .uri(locationName: "DeviceDefinitionId"), required: true, type: .string), 
            AWSShapeMember(label: "AmznClientToken", location: .header(locationName: "X-Amzn-Client-Token"), required: false, type: .string), 
            AWSShapeMember(label: "Devices", required: false, type: .list)
        ]
        public let deviceDefinitionId: String
        public let amznClientToken: String?
        public let devices: [Device]?

        public init(deviceDefinitionId: String, amznClientToken: String? = nil, devices: [Device]? = nil) {
            self.deviceDefinitionId = deviceDefinitionId
            self.amznClientToken = amznClientToken
            self.devices = devices
        }

        private enum CodingKeys: String, CodingKey {
            case deviceDefinitionId = "DeviceDefinitionId"
            case amznClientToken = "X-Amzn-Client-Token"
            case devices = "Devices"
        }
    }

    public enum UpdateAgentLogLevel: String, CustomStringConvertible, Codable {
        case none = "NONE"
        case trace = "TRACE"
        case debug = "DEBUG"
        case verbose = "VERBOSE"
        case info = "INFO"
        case warn = "WARN"
        case error = "ERROR"
        case fatal = "FATAL"
        public var description: String { return self.rawValue }
    }

}