// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import AWSSDKSwiftCore

/// Error enum for Kms
public enum KmsError: AWSErrorType {
    case malformedPolicyDocumentException(message: String?)
    case dependencyTimeoutException(message: String?)
    case invalidArnException(message: String?)
    case unsupportedOperationException(message: String?)
    case kMSInternalException(message: String?)
    case limitExceededException(message: String?)
    case tagException(message: String?)
    case invalidGrantTokenException(message: String?)
    case invalidGrantIdException(message: String?)
    case notFoundException(message: String?)
    case kMSInvalidStateException(message: String?)
    case invalidMarkerException(message: String?)
    case disabledException(message: String?)
    case keyUnavailableException(message: String?)
    case invalidKeyUsageException(message: String?)
    case invalidCiphertextException(message: String?)
    case alreadyExistsException(message: String?)
    case invalidAliasNameException(message: String?)
    case incorrectKeyMaterialException(message: String?)
    case expiredImportTokenException(message: String?)
    case invalidImportTokenException(message: String?)
}

extension KmsError {
    public init?(errorCode: String, message: String?){
        var errorCode = errorCode
        if let index = errorCode.index(of: "#") {
            errorCode = String(errorCode[errorCode.index(index, offsetBy: 1)...])
        }
        switch errorCode {
        case "MalformedPolicyDocumentException":
            self = .malformedPolicyDocumentException(message: message)
        case "DependencyTimeoutException":
            self = .dependencyTimeoutException(message: message)
        case "InvalidArnException":
            self = .invalidArnException(message: message)
        case "UnsupportedOperationException":
            self = .unsupportedOperationException(message: message)
        case "KMSInternalException":
            self = .kMSInternalException(message: message)
        case "LimitExceededException":
            self = .limitExceededException(message: message)
        case "TagException":
            self = .tagException(message: message)
        case "InvalidGrantTokenException":
            self = .invalidGrantTokenException(message: message)
        case "InvalidGrantIdException":
            self = .invalidGrantIdException(message: message)
        case "NotFoundException":
            self = .notFoundException(message: message)
        case "KMSInvalidStateException":
            self = .kMSInvalidStateException(message: message)
        case "InvalidMarkerException":
            self = .invalidMarkerException(message: message)
        case "DisabledException":
            self = .disabledException(message: message)
        case "KeyUnavailableException":
            self = .keyUnavailableException(message: message)
        case "InvalidKeyUsageException":
            self = .invalidKeyUsageException(message: message)
        case "InvalidCiphertextException":
            self = .invalidCiphertextException(message: message)
        case "AlreadyExistsException":
            self = .alreadyExistsException(message: message)
        case "InvalidAliasNameException":
            self = .invalidAliasNameException(message: message)
        case "IncorrectKeyMaterialException":
            self = .incorrectKeyMaterialException(message: message)
        case "ExpiredImportTokenException":
            self = .expiredImportTokenException(message: message)
        case "InvalidImportTokenException":
            self = .invalidImportTokenException(message: message)
        default:
            return nil
        }
    }
}