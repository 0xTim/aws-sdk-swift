// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Entitlementmarketplace {

    public enum GetEntitlementFilterName: String, CustomStringConvertible, Codable {
        case customer_identifier = "CUSTOMER_IDENTIFIER"
        case dimension = "DIMENSION"
        public var description: String { return self.rawValue }
    }

    public struct EntitlementValue: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IntegerValue", required: false, type: .integer), 
            AWSShapeMember(label: "StringValue", required: false, type: .string), 
            AWSShapeMember(label: "DoubleValue", required: false, type: .double), 
            AWSShapeMember(label: "BooleanValue", required: false, type: .boolean)
        ]
        /// The IntegerValue field will be populated with an integer value when the entitlement is an integer type. Otherwise, the field will not be set.
        public let integerValue: Int32?
        /// The StringValue field will be populated with a string value when the entitlement is a string type. Otherwise, the field will not be set.
        public let stringValue: String?
        /// The DoubleValue field will be populated with a double value when the entitlement is a double type. Otherwise, the field will not be set.
        public let doubleValue: Double?
        /// The BooleanValue field will be populated with a boolean value when the entitlement is a boolean type. Otherwise, the field will not be set.
        public let booleanValue: Bool?

        public init(integerValue: Int32? = nil, stringValue: String? = nil, doubleValue: Double? = nil, booleanValue: Bool? = nil) {
            self.integerValue = integerValue
            self.stringValue = stringValue
            self.doubleValue = doubleValue
            self.booleanValue = booleanValue
        }

        private enum CodingKeys: String, CodingKey {
            case integerValue = "IntegerValue"
            case stringValue = "StringValue"
            case doubleValue = "DoubleValue"
            case booleanValue = "BooleanValue"
        }
    }

    public struct GetEntitlementsResult: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Entitlements", required: false, type: .list)
        ]
        /// For paginated results, use NextToken in subsequent calls to GetEntitlements. If the result contains an empty set of entitlements, NextToken might still be present and should be used.
        public let nextToken: String?
        /// The set of entitlements found through the GetEntitlements operation. If the result contains an empty set of entitlements, NextToken might still be present and should be used.
        public let entitlements: [Entitlement]?

        public init(nextToken: String? = nil, entitlements: [Entitlement]? = nil) {
            self.nextToken = nextToken
            self.entitlements = entitlements
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case entitlements = "Entitlements"
        }
    }

    public struct Entitlement: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "Dimension", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .structure), 
            AWSShapeMember(label: "ProductCode", required: false, type: .string), 
            AWSShapeMember(label: "ExpirationDate", required: false, type: .timestamp)
        ]
        /// The customer identifier is a handle to each unique customer in an application. Customer identifiers are obtained through the ResolveCustomer operation in AWS Marketplace Metering Service.
        public let customerIdentifier: String?
        /// The dimension for which the given entitlement applies. Dimensions represent categories of capacity in a product and are specified when the product is listed in AWS Marketplace.
        public let dimension: String?
        /// The EntitlementValue represents the amount of capacity that the customer is entitled to for the product.
        public let value: EntitlementValue?
        /// The product code for which the given entitlement applies. Product codes are provided by AWS Marketplace when the product listing is created.
        public let productCode: String?
        /// The expiration date represents the minimum date through which this entitlement is expected to remain valid. For contractual products listed on AWS Marketplace, the expiration date is the date at which the customer will renew or cancel their contract. Customers who are opting to renew their contract will still have entitlements with an expiration date.
        public let expirationDate: Double?

        public init(customerIdentifier: String? = nil, dimension: String? = nil, value: EntitlementValue? = nil, productCode: String? = nil, expirationDate: Double? = nil) {
            self.customerIdentifier = customerIdentifier
            self.dimension = dimension
            self.value = value
            self.productCode = productCode
            self.expirationDate = expirationDate
        }

        private enum CodingKeys: String, CodingKey {
            case customerIdentifier = "CustomerIdentifier"
            case dimension = "Dimension"
            case value = "Value"
            case productCode = "ProductCode"
            case expirationDate = "ExpirationDate"
        }
    }

    public struct GetEntitlementsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: false, type: .map), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ProductCode", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Filter is used to return entitlements for a specific customer or for a specific dimension. Filters are described as keys mapped to a lists of values. Filtered requests are unioned for each value in the value list, and then intersected for each filter key.
        public let filter: [GetEntitlementFilterName: [String]]?
        /// For paginated calls to GetEntitlements, pass the NextToken from the previous GetEntitlementsResult.
        public let nextToken: String?
        /// Product code is used to uniquely identify a product in AWS Marketplace. The product code will be provided by AWS Marketplace when the product listing is created.
        public let productCode: String
        /// The maximum number of items to retrieve from the GetEntitlements operation. For pagination, use the NextToken field in subsequent calls to GetEntitlements.
        public let maxResults: Int32?

        public init(filter: [GetEntitlementFilterName: [String]]? = nil, nextToken: String? = nil, productCode: String, maxResults: Int32? = nil) {
            self.filter = filter
            self.nextToken = nextToken
            self.productCode = productCode
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case nextToken = "NextToken"
            case productCode = "ProductCode"
            case maxResults = "MaxResults"
        }
    }

}