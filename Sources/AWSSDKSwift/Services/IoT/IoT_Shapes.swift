// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension IoT {

    public struct ListAuditTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskType", location: .querystring(locationName: "taskType"), required: false, type: .enum), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "taskStatus", location: .querystring(locationName: "taskStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "startTime", location: .querystring(locationName: "startTime"), required: true, type: .timestamp), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "endTime", location: .querystring(locationName: "endTime"), required: true, type: .timestamp)
        ]
        /// A filter to limit the output to the specified type of audit: can be one of "ON_DEMAND_AUDIT_TASK" or "SCHEDULED__AUDIT_TASK".
        public let taskType: AuditTaskType?
        /// The maximum number of results to return at one time. The default is 25.
        public let maxResults: Int32?
        /// A filter to limit the output to audits with the specified completion status: can be one of "IN_PROGRESS", "COMPLETED", "FAILED" or "CANCELED".
        public let taskStatus: AuditTaskStatus?
        /// The beginning of the time period. Note that audit information is retained for a limited time (180 days). Requesting a start time prior to what is retained results in an "InvalidRequestException".
        public let startTime: TimeStamp
        /// The token for the next set of results.
        public let nextToken: String?
        /// The end of the time period.
        public let endTime: TimeStamp

        public init(taskType: AuditTaskType? = nil, maxResults: Int32? = nil, taskStatus: AuditTaskStatus? = nil, startTime: TimeStamp, nextToken: String? = nil, endTime: TimeStamp) {
            self.taskType = taskType
            self.maxResults = maxResults
            self.taskStatus = taskStatus
            self.startTime = startTime
            self.nextToken = nextToken
            self.endTime = endTime
        }

        private enum CodingKeys: String, CodingKey {
            case taskType = "taskType"
            case maxResults = "maxResults"
            case taskStatus = "taskStatus"
            case startTime = "startTime"
            case nextToken = "nextToken"
            case endTime = "endTime"
        }
    }

    public struct ListCertificatesByCAResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificates", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The device certificates signed by the specified CA certificate.
        public let certificates: [Certificate]?
        /// The marker for the next set of results, or null if there are no additional results.
        public let nextMarker: String?

        public init(certificates: [Certificate]? = nil, nextMarker: String? = nil) {
            self.certificates = certificates
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "certificates"
            case nextMarker = "nextMarker"
        }
    }

    public struct DeleteAccountAuditConfigurationResponse: AWSShape {

    }

    public struct KeyPair: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrivateKey", required: false, type: .string), 
            AWSShapeMember(label: "PublicKey", required: false, type: .string)
        ]
        /// The private key.
        public let privateKey: String?
        /// The public key.
        public let publicKey: String?

        public init(privateKey: String? = nil, publicKey: String? = nil) {
            self.privateKey = privateKey
            self.publicKey = publicKey
        }

        private enum CodingKeys: String, CodingKey {
            case privateKey = "PrivateKey"
            case publicKey = "PublicKey"
        }
    }

    public struct DeleteTopicRuleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ruleName", location: .uri(locationName: "ruleName"), required: true, type: .string)
        ]
        /// The name of the rule.
        public let ruleName: String

        public init(ruleName: String) {
            self.ruleName = ruleName
        }

        private enum CodingKeys: String, CodingKey {
            case ruleName = "ruleName"
        }
    }

    public struct UpdateThingGroupsForThingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupsToRemove", required: false, type: .list), 
            AWSShapeMember(label: "overrideDynamicGroups", required: false, type: .boolean), 
            AWSShapeMember(label: "thingGroupsToAdd", required: false, type: .list), 
            AWSShapeMember(label: "thingName", required: false, type: .string)
        ]
        /// The groups from which the thing will be removed.
        public let thingGroupsToRemove: [String]?
        /// Override dynamic thing groups with static thing groups when 10-group limit is reached. If a thing belongs to 10 thing groups, and one or more of those groups are dynamic thing groups, adding a thing to a static group removes the thing from the last dynamic group.
        public let overrideDynamicGroups: Bool?
        /// The groups to which the thing will be added.
        public let thingGroupsToAdd: [String]?
        /// The thing whose group memberships will be updated.
        public let thingName: String?

        public init(thingGroupsToRemove: [String]? = nil, overrideDynamicGroups: Bool? = nil, thingGroupsToAdd: [String]? = nil, thingName: String? = nil) {
            self.thingGroupsToRemove = thingGroupsToRemove
            self.overrideDynamicGroups = overrideDynamicGroups
            self.thingGroupsToAdd = thingGroupsToAdd
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupsToRemove = "thingGroupsToRemove"
            case overrideDynamicGroups = "overrideDynamicGroups"
            case thingGroupsToAdd = "thingGroupsToAdd"
            case thingName = "thingName"
        }
    }

    public struct IotEventsAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "inputName", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "messageId", required: false, type: .string)
        ]
        /// The name of the AWS IoT Events input.
        public let inputName: String
        /// The ARN of the role that grants AWS IoT permission to send an input to an AWS IoT Events detector. ("Action":"iotevents:BatchPutMessage").
        public let roleArn: String
        /// [Optional] Use this to ensure that only one input (message) with a given messageId will be processed by an AWS IoT Events detector.
        public let messageId: String?

        public init(inputName: String, roleArn: String, messageId: String? = nil) {
            self.inputName = inputName
            self.roleArn = roleArn
            self.messageId = messageId
        }

        private enum CodingKeys: String, CodingKey {
            case inputName = "inputName"
            case roleArn = "roleArn"
            case messageId = "messageId"
        }
    }

    public struct AddThingToBillingGroupResponse: AWSShape {

    }

    public struct DescribeAuditTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "auditDetails", required: false, type: .map), 
            AWSShapeMember(label: "taskStatus", required: false, type: .enum), 
            AWSShapeMember(label: "taskStatistics", required: false, type: .structure), 
            AWSShapeMember(label: "scheduledAuditName", required: false, type: .string), 
            AWSShapeMember(label: "taskType", required: false, type: .enum)
        ]
        /// The time the audit started.
        public let taskStartTime: TimeStamp?
        /// Detailed information about each check performed during this audit.
        public let auditDetails: [String: AuditCheckDetails]?
        /// The status of the audit: one of "IN_PROGRESS", "COMPLETED", "FAILED", or "CANCELED".
        public let taskStatus: AuditTaskStatus?
        /// Statistical information about the audit.
        public let taskStatistics: TaskStatistics?
        /// The name of the scheduled audit (only if the audit was a scheduled audit).
        public let scheduledAuditName: String?
        /// The type of audit: "ON_DEMAND_AUDIT_TASK" or "SCHEDULED_AUDIT_TASK".
        public let taskType: AuditTaskType?

        public init(taskStartTime: TimeStamp? = nil, auditDetails: [String: AuditCheckDetails]? = nil, taskStatus: AuditTaskStatus? = nil, taskStatistics: TaskStatistics? = nil, scheduledAuditName: String? = nil, taskType: AuditTaskType? = nil) {
            self.taskStartTime = taskStartTime
            self.auditDetails = auditDetails
            self.taskStatus = taskStatus
            self.taskStatistics = taskStatistics
            self.scheduledAuditName = scheduledAuditName
            self.taskType = taskType
        }

        private enum CodingKeys: String, CodingKey {
            case taskStartTime = "taskStartTime"
            case auditDetails = "auditDetails"
            case taskStatus = "taskStatus"
            case taskStatistics = "taskStatistics"
            case scheduledAuditName = "scheduledAuditName"
            case taskType = "taskType"
        }
    }

    public struct CACertificate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "certificateArn", required: false, type: .string)
        ]
        /// The ID of the CA certificate.
        public let certificateId: String?
        /// The status of the CA certificate. The status value REGISTER_INACTIVE is deprecated and should not be used.
        public let status: CACertificateStatus?
        /// The date the CA certificate was created.
        public let creationDate: TimeStamp?
        /// The ARN of the CA certificate.
        public let certificateArn: String?

        public init(certificateId: String? = nil, status: CACertificateStatus? = nil, creationDate: TimeStamp? = nil, certificateArn: String? = nil) {
            self.certificateId = certificateId
            self.status = status
            self.creationDate = creationDate
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "certificateId"
            case status = "status"
            case creationDate = "creationDate"
            case certificateArn = "certificateArn"
        }
    }

    public struct RoleAliasDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleAlias", required: false, type: .string), 
            AWSShapeMember(label: "owner", required: false, type: .string), 
            AWSShapeMember(label: "credentialDurationSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "roleAliasArn", required: false, type: .string)
        ]
        /// The role alias.
        public let roleAlias: String?
        /// The role alias owner.
        public let owner: String?
        /// The number of seconds for which the credential is valid.
        public let credentialDurationSeconds: Int32?
        /// The UNIX timestamp of when the role alias was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The role ARN.
        public let roleArn: String?
        /// The UNIX timestamp of when the role alias was created.
        public let creationDate: TimeStamp?
        /// The ARN of the role alias.
        public let roleAliasArn: String?

        public init(roleAlias: String? = nil, owner: String? = nil, credentialDurationSeconds: Int32? = nil, lastModifiedDate: TimeStamp? = nil, roleArn: String? = nil, creationDate: TimeStamp? = nil, roleAliasArn: String? = nil) {
            self.roleAlias = roleAlias
            self.owner = owner
            self.credentialDurationSeconds = credentialDurationSeconds
            self.lastModifiedDate = lastModifiedDate
            self.roleArn = roleArn
            self.creationDate = creationDate
            self.roleAliasArn = roleAliasArn
        }

        private enum CodingKeys: String, CodingKey {
            case roleAlias = "roleAlias"
            case owner = "owner"
            case credentialDurationSeconds = "credentialDurationSeconds"
            case lastModifiedDate = "lastModifiedDate"
            case roleArn = "roleArn"
            case creationDate = "creationDate"
            case roleAliasArn = "roleAliasArn"
        }
    }

    public enum AuditCheckRunStatus: String, CustomStringConvertible, Codable {
        case inProgress = "IN_PROGRESS"
        case waitingForDataCollection = "WAITING_FOR_DATA_COLLECTION"
        case canceled = "CANCELED"
        case completedCompliant = "COMPLETED_COMPLIANT"
        case completedNonCompliant = "COMPLETED_NON_COMPLIANT"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct RemoveThingFromBillingGroupResponse: AWSShape {

    }

    public struct ListThingsInBillingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "things", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of things in the billing group.
        public let things: [String]?
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(things: [String]? = nil, nextToken: String? = nil) {
            self.things = things
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case things = "things"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteJobExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "executionNumber", location: .uri(locationName: "executionNumber"), required: true, type: .long), 
            AWSShapeMember(label: "force", location: .querystring(locationName: "force"), required: false, type: .boolean), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string), 
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string)
        ]
        /// The ID of the job execution to be deleted. The executionNumber refers to the execution of a particular job on a particular device. Note that once a job execution is deleted, the executionNumber may be reused by IoT, so be sure you get and use the correct value here.
        public let executionNumber: Int64
        /// (Optional) When true, you can delete a job execution which is "IN_PROGRESS". Otherwise, you can only delete a job execution which is in a terminal state ("SUCCEEDED", "FAILED", "REJECTED", "REMOVED" or "CANCELED") or an exception will occur. The default is false.  Deleting a job execution which is "IN_PROGRESS", will cause the device to be unable to access job information or update the job execution status. Use caution and ensure that the device is able to recover to a valid state. 
        public let force: Bool?
        /// The name of the thing whose job execution will be deleted.
        public let thingName: String
        /// The ID of the job whose execution on a particular device will be deleted.
        public let jobId: String

        public init(executionNumber: Int64, force: Bool? = nil, thingName: String, jobId: String) {
            self.executionNumber = executionNumber
            self.force = force
            self.thingName = thingName
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case executionNumber = "executionNumber"
            case force = "force"
            case thingName = "thingName"
            case jobId = "jobId"
        }
    }

    public struct S3Location: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "key", required: false, type: .string), 
            AWSShapeMember(label: "bucket", required: false, type: .string)
        ]
        /// The S3 bucket version.
        public let version: String?
        /// The S3 key.
        public let key: String?
        /// The S3 bucket.
        public let bucket: String?

        public init(version: String? = nil, key: String? = nil, bucket: String? = nil) {
            self.version = version
            self.key = key
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case version = "version"
            case key = "key"
            case bucket = "bucket"
        }
    }

    public struct TopicRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "sql", required: false, type: .string), 
            AWSShapeMember(label: "awsIotSqlVersion", required: false, type: .string), 
            AWSShapeMember(label: "ruleName", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "errorAction", required: false, type: .structure), 
            AWSShapeMember(label: "ruleDisabled", required: false, type: .boolean), 
            AWSShapeMember(label: "actions", required: false, type: .list)
        ]
        /// The SQL statement used to query the topic. When using a SQL query with multiple lines, be sure to escape the newline characters.
        public let sql: String?
        /// The version of the SQL rules engine to use when evaluating the rule.
        public let awsIotSqlVersion: String?
        /// The name of the rule.
        public let ruleName: String?
        /// The description of the rule.
        public let description: String?
        /// The date and time the rule was created.
        public let createdAt: TimeStamp?
        /// The action to perform when an error occurs.
        public let errorAction: Action?
        /// Specifies whether the rule is disabled.
        public let ruleDisabled: Bool?
        /// The actions associated with the rule.
        public let actions: [Action]?

        public init(sql: String? = nil, awsIotSqlVersion: String? = nil, ruleName: String? = nil, description: String? = nil, createdAt: TimeStamp? = nil, errorAction: Action? = nil, ruleDisabled: Bool? = nil, actions: [Action]? = nil) {
            self.sql = sql
            self.awsIotSqlVersion = awsIotSqlVersion
            self.ruleName = ruleName
            self.description = description
            self.createdAt = createdAt
            self.errorAction = errorAction
            self.ruleDisabled = ruleDisabled
            self.actions = actions
        }

        private enum CodingKeys: String, CodingKey {
            case sql = "sql"
            case awsIotSqlVersion = "awsIotSqlVersion"
            case ruleName = "ruleName"
            case description = "description"
            case createdAt = "createdAt"
            case errorAction = "errorAction"
            case ruleDisabled = "ruleDisabled"
            case actions = "actions"
        }
    }

    public struct ListSecurityProfilesForTargetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileTargetMappings", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of security profiles and their associated targets.
        public let securityProfileTargetMappings: [SecurityProfileTargetMapping]?
        /// A token that can be used to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(securityProfileTargetMappings: [SecurityProfileTargetMapping]? = nil, nextToken: String? = nil) {
            self.securityProfileTargetMappings = securityProfileTargetMappings
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileTargetMappings = "securityProfileTargetMappings"
            case nextToken = "nextToken"
        }
    }

    public struct AbortCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failureType", required: true, type: .enum), 
            AWSShapeMember(label: "thresholdPercentage", required: true, type: .double), 
            AWSShapeMember(label: "action", required: true, type: .enum), 
            AWSShapeMember(label: "minNumberOfExecutedThings", required: true, type: .integer)
        ]
        /// The type of job execution failure to define a rule to initiate a job abort.
        public let failureType: JobExecutionFailureType
        /// The threshold as a percentage of the total number of executed things that will initiate a job abort. AWS IoT supports up to two digits after the decimal (for example, 10.9 and 10.99, but not 10.999).
        public let thresholdPercentage: Double
        /// The type of abort action to initiate a job abort.
        public let action: AbortAction
        /// Minimum number of executed things before evaluating an abort rule.
        public let minNumberOfExecutedThings: Int32

        public init(failureType: JobExecutionFailureType, thresholdPercentage: Double, action: AbortAction, minNumberOfExecutedThings: Int32) {
            self.failureType = failureType
            self.thresholdPercentage = thresholdPercentage
            self.action = action
            self.minNumberOfExecutedThings = minNumberOfExecutedThings
        }

        private enum CodingKeys: String, CodingKey {
            case failureType = "failureType"
            case thresholdPercentage = "thresholdPercentage"
            case action = "action"
            case minNumberOfExecutedThings = "minNumberOfExecutedThings"
        }
    }

    public struct GroupNameAndArn: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "groupName", required: false, type: .string), 
            AWSShapeMember(label: "groupArn", required: false, type: .string)
        ]
        /// The group name.
        public let groupName: String?
        /// The group ARN.
        public let groupArn: String?

        public init(groupName: String? = nil, groupArn: String? = nil) {
            self.groupName = groupName
            self.groupArn = groupArn
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "groupName"
            case groupArn = "groupArn"
        }
    }

    public struct GetJobDocumentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "document", required: false, type: .string)
        ]
        /// The job document content.
        public let document: String?

        public init(document: String? = nil) {
            self.document = document
        }

        private enum CodingKeys: String, CodingKey {
            case document = "document"
        }
    }

    public struct DescribeThingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingId", required: false, type: .string), 
            AWSShapeMember(label: "thingArn", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .long), 
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "thingTypeName", required: false, type: .string), 
            AWSShapeMember(label: "billingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "defaultClientId", required: false, type: .string), 
            AWSShapeMember(label: "attributes", required: false, type: .map)
        ]
        /// The ID of the thing to describe.
        public let thingId: String?
        /// The ARN of the thing to describe.
        public let thingArn: String?
        /// The current version of the thing record in the registry.  To avoid unintentional changes to the information in the registry, you can pass the version information in the expectedVersion parameter of the UpdateThing and DeleteThing calls. 
        public let version: Int64?
        /// The name of the thing.
        public let thingName: String?
        /// The thing type name.
        public let thingTypeName: String?
        /// The name of the billing group the thing belongs to.
        public let billingGroupName: String?
        /// The default client ID.
        public let defaultClientId: String?
        /// The thing attributes.
        public let attributes: [String: String]?

        public init(thingId: String? = nil, thingArn: String? = nil, version: Int64? = nil, thingName: String? = nil, thingTypeName: String? = nil, billingGroupName: String? = nil, defaultClientId: String? = nil, attributes: [String: String]? = nil) {
            self.thingId = thingId
            self.thingArn = thingArn
            self.version = version
            self.thingName = thingName
            self.thingTypeName = thingTypeName
            self.billingGroupName = billingGroupName
            self.defaultClientId = defaultClientId
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case thingId = "thingId"
            case thingArn = "thingArn"
            case version = "version"
            case thingName = "thingName"
            case thingTypeName = "thingTypeName"
            case billingGroupName = "billingGroupName"
            case defaultClientId = "defaultClientId"
            case attributes = "attributes"
        }
    }

    public struct CreateAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerFunctionArn", required: true, type: .string), 
            AWSShapeMember(label: "tokenKeyName", required: true, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "tokenSigningPublicKeys", required: true, type: .map), 
            AWSShapeMember(label: "authorizerName", location: .uri(locationName: "authorizerName"), required: true, type: .string)
        ]
        /// The ARN of the authorizer's Lambda function.
        public let authorizerFunctionArn: String
        /// The name of the token key used to extract the token from the HTTP headers.
        public let tokenKeyName: String
        /// The status of the create authorizer request.
        public let status: AuthorizerStatus?
        /// The public keys used to verify the digital signature returned by your custom authentication service.
        public let tokenSigningPublicKeys: [String: String]
        /// The authorizer name.
        public let authorizerName: String

        public init(authorizerFunctionArn: String, tokenKeyName: String, status: AuthorizerStatus? = nil, tokenSigningPublicKeys: [String: String], authorizerName: String) {
            self.authorizerFunctionArn = authorizerFunctionArn
            self.tokenKeyName = tokenKeyName
            self.status = status
            self.tokenSigningPublicKeys = tokenSigningPublicKeys
            self.authorizerName = authorizerName
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerFunctionArn = "authorizerFunctionArn"
            case tokenKeyName = "tokenKeyName"
            case status = "status"
            case tokenSigningPublicKeys = "tokenSigningPublicKeys"
            case authorizerName = "authorizerName"
        }
    }

    public struct ListActiveViolationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "thingName", location: .querystring(locationName: "thingName"), required: false, type: .string), 
            AWSShapeMember(label: "securityProfileName", location: .querystring(locationName: "securityProfileName"), required: false, type: .string)
        ]
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The name of the thing whose active violations are listed.
        public let thingName: String?
        /// The name of the Device Defender security profile for which violations are listed.
        public let securityProfileName: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, thingName: String? = nil, securityProfileName: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.thingName = thingName
            self.securityProfileName = securityProfileName
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case thingName = "thingName"
            case securityProfileName = "securityProfileName"
        }
    }

    public struct ListThingTypesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingTypes", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The thing types.
        public let thingTypes: [ThingTypeDefinition]?
        /// The token for the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(thingTypes: [ThingTypeDefinition]? = nil, nextToken: String? = nil) {
            self.thingTypes = thingTypes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case thingTypes = "thingTypes"
            case nextToken = "nextToken"
        }
    }

    public struct ListThingsInThingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "things", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The things in the specified thing group.
        public let things: [String]?
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(things: [String]? = nil, nextToken: String? = nil) {
            self.things = things
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case things = "things"
            case nextToken = "nextToken"
        }
    }

    public struct ListSecurityProfilesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct Denied: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "explicitDeny", required: false, type: .structure), 
            AWSShapeMember(label: "implicitDeny", required: false, type: .structure)
        ]
        /// Information that explicitly denies the authorization. 
        public let explicitDeny: ExplicitDeny?
        /// Information that implicitly denies the authorization. When a policy doesn't explicitly deny or allow an action on a resource it is considered an implicit deny.
        public let implicitDeny: ImplicitDeny?

        public init(explicitDeny: ExplicitDeny? = nil, implicitDeny: ImplicitDeny? = nil) {
            self.explicitDeny = explicitDeny
            self.implicitDeny = implicitDeny
        }

        private enum CodingKeys: String, CodingKey {
            case explicitDeny = "explicitDeny"
            case implicitDeny = "implicitDeny"
        }
    }

    public struct DeprecateThingTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingTypeName", location: .uri(locationName: "thingTypeName"), required: true, type: .string), 
            AWSShapeMember(label: "undoDeprecate", required: false, type: .boolean)
        ]
        /// The name of the thing type to deprecate.
        public let thingTypeName: String
        /// Whether to undeprecate a deprecated thing type. If true, the thing type will not be deprecated anymore and you can associate it with things.
        public let undoDeprecate: Bool?

        public init(thingTypeName: String, undoDeprecate: Bool? = nil) {
            self.thingTypeName = thingTypeName
            self.undoDeprecate = undoDeprecate
        }

        private enum CodingKeys: String, CodingKey {
            case thingTypeName = "thingTypeName"
            case undoDeprecate = "undoDeprecate"
        }
    }

    public struct DeleteV2LoggingLevelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "targetName", location: .querystring(locationName: "targetName"), required: true, type: .string), 
            AWSShapeMember(label: "targetType", location: .querystring(locationName: "targetType"), required: true, type: .enum)
        ]
        /// The name of the resource for which you are configuring logging.
        public let targetName: String
        /// The type of resource for which you are configuring logging. Must be THING_Group.
        public let targetType: LogTargetType

        public init(targetName: String, targetType: LogTargetType) {
            self.targetName = targetName
            self.targetType = targetType
        }

        private enum CodingKeys: String, CodingKey {
            case targetName = "targetName"
            case targetType = "targetType"
        }
    }

    public struct ListPrincipalThingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "principal", location: .header(locationName: "x-amzn-principal"), required: true, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The principal.
        public let principal: String
        /// The maximum number of results to return in this operation.
        public let maxResults: Int32?
        /// The token to retrieve the next set of results.
        public let nextToken: String?

        public init(principal: String, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.principal = principal
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case principal = "x-amzn-principal"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct JobProcessDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "numberOfFailedThings", required: false, type: .integer), 
            AWSShapeMember(label: "numberOfCanceledThings", required: false, type: .integer), 
            AWSShapeMember(label: "numberOfTimedOutThings", required: false, type: .integer), 
            AWSShapeMember(label: "numberOfQueuedThings", required: false, type: .integer), 
            AWSShapeMember(label: "numberOfRemovedThings", required: false, type: .integer), 
            AWSShapeMember(label: "processingTargets", required: false, type: .list), 
            AWSShapeMember(label: "numberOfSucceededThings", required: false, type: .integer), 
            AWSShapeMember(label: "numberOfInProgressThings", required: false, type: .integer), 
            AWSShapeMember(label: "numberOfRejectedThings", required: false, type: .integer)
        ]
        /// The number of things that failed executing the job.
        public let numberOfFailedThings: Int32?
        /// The number of things that cancelled the job.
        public let numberOfCanceledThings: Int32?
        /// The number of things whose job execution status is TIMED_OUT.
        public let numberOfTimedOutThings: Int32?
        /// The number of things that are awaiting execution of the job.
        public let numberOfQueuedThings: Int32?
        /// The number of things that are no longer scheduled to execute the job because they have been deleted or have been removed from the group that was a target of the job.
        public let numberOfRemovedThings: Int32?
        /// The target devices to which the job execution is being rolled out. This value will be null after the job execution has finished rolling out to all the target devices.
        public let processingTargets: [String]?
        /// The number of things which successfully completed the job.
        public let numberOfSucceededThings: Int32?
        /// The number of things currently executing the job.
        public let numberOfInProgressThings: Int32?
        /// The number of things that rejected the job.
        public let numberOfRejectedThings: Int32?

        public init(numberOfFailedThings: Int32? = nil, numberOfCanceledThings: Int32? = nil, numberOfTimedOutThings: Int32? = nil, numberOfQueuedThings: Int32? = nil, numberOfRemovedThings: Int32? = nil, processingTargets: [String]? = nil, numberOfSucceededThings: Int32? = nil, numberOfInProgressThings: Int32? = nil, numberOfRejectedThings: Int32? = nil) {
            self.numberOfFailedThings = numberOfFailedThings
            self.numberOfCanceledThings = numberOfCanceledThings
            self.numberOfTimedOutThings = numberOfTimedOutThings
            self.numberOfQueuedThings = numberOfQueuedThings
            self.numberOfRemovedThings = numberOfRemovedThings
            self.processingTargets = processingTargets
            self.numberOfSucceededThings = numberOfSucceededThings
            self.numberOfInProgressThings = numberOfInProgressThings
            self.numberOfRejectedThings = numberOfRejectedThings
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfFailedThings = "numberOfFailedThings"
            case numberOfCanceledThings = "numberOfCanceledThings"
            case numberOfTimedOutThings = "numberOfTimedOutThings"
            case numberOfQueuedThings = "numberOfQueuedThings"
            case numberOfRemovedThings = "numberOfRemovedThings"
            case processingTargets = "processingTargets"
            case numberOfSucceededThings = "numberOfSucceededThings"
            case numberOfInProgressThings = "numberOfInProgressThings"
            case numberOfRejectedThings = "numberOfRejectedThings"
        }
    }

    public struct ListOTAUpdatesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "otaUpdates", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of OTA update jobs.
        public let otaUpdates: [OTAUpdateSummary]?
        /// A token to use to get the next set of results.
        public let nextToken: String?

        public init(otaUpdates: [OTAUpdateSummary]? = nil, nextToken: String? = nil) {
            self.otaUpdates = otaUpdates
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case otaUpdates = "otaUpdates"
            case nextToken = "nextToken"
        }
    }

    public struct SetDefaultAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerName", required: true, type: .string)
        ]
        /// The authorizer name.
        public let authorizerName: String

        public init(authorizerName: String) {
            self.authorizerName = authorizerName
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerName = "authorizerName"
        }
    }

    public struct GetOTAUpdateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "otaUpdateInfo", required: false, type: .structure)
        ]
        /// The OTA update info.
        public let otaUpdateInfo: OTAUpdateInfo?

        public init(otaUpdateInfo: OTAUpdateInfo? = nil) {
            self.otaUpdateInfo = otaUpdateInfo
        }

        private enum CodingKeys: String, CodingKey {
            case otaUpdateInfo = "otaUpdateInfo"
        }
    }

    public struct CreateBillingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "billingGroupProperties", required: false, type: .structure), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "billingGroupName", location: .uri(locationName: "billingGroupName"), required: true, type: .string)
        ]
        /// The properties of the billing group.
        public let billingGroupProperties: BillingGroupProperties?
        /// Metadata which can be used to manage the billing group.
        public let tags: [Tag]?
        /// The name you wish to give to the billing group.
        public let billingGroupName: String

        public init(billingGroupProperties: BillingGroupProperties? = nil, tags: [Tag]? = nil, billingGroupName: String) {
            self.billingGroupProperties = billingGroupProperties
            self.tags = tags
            self.billingGroupName = billingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case billingGroupProperties = "billingGroupProperties"
            case tags = "tags"
            case billingGroupName = "billingGroupName"
        }
    }

    public struct CreateKeysAndCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "setAsActive", location: .querystring(locationName: "setAsActive"), required: false, type: .boolean)
        ]
        /// Specifies whether the certificate is active.
        public let setAsActive: Bool?

        public init(setAsActive: Bool? = nil) {
            self.setAsActive = setAsActive
        }

        private enum CodingKeys: String, CodingKey {
            case setAsActive = "setAsActive"
        }
    }

    public struct UpdateRoleAliasResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleAlias", required: false, type: .string), 
            AWSShapeMember(label: "roleAliasArn", required: false, type: .string)
        ]
        /// The role alias.
        public let roleAlias: String?
        /// The role alias ARN.
        public let roleAliasArn: String?

        public init(roleAlias: String? = nil, roleAliasArn: String? = nil) {
            self.roleAlias = roleAlias
            self.roleAliasArn = roleAliasArn
        }

        private enum CodingKeys: String, CodingKey {
            case roleAlias = "roleAlias"
            case roleAliasArn = "roleAliasArn"
        }
    }

    public struct AwsJobExecutionsRolloutConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maximumPerMinute", required: false, type: .integer)
        ]
        /// The maximum number of OTA update job executions started per minute.
        public let maximumPerMinute: Int32?

        public init(maximumPerMinute: Int32? = nil) {
            self.maximumPerMinute = maximumPerMinute
        }

        private enum CodingKeys: String, CodingKey {
            case maximumPerMinute = "maximumPerMinute"
        }
    }

    public struct ListStreamsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// A token used to get the next set of results.
        public let nextToken: String?
        /// Set to true to return the list of streams in ascending order.
        public let ascendingOrder: Bool?
        /// The maximum number of results to return at a time.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, ascendingOrder: Bool? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.ascendingOrder = ascendingOrder
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case ascendingOrder = "isAscendingOrder"
            case maxResults = "maxResults"
        }
    }

    public struct ListJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobs", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of jobs.
        public let jobs: [JobSummary]?
        /// The token for the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(jobs: [JobSummary]? = nil, nextToken: String? = nil) {
            self.jobs = jobs
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case jobs = "jobs"
            case nextToken = "nextToken"
        }
    }

    public struct UpdateDynamicThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "queryString", required: false, type: .string), 
            AWSShapeMember(label: "indexName", required: false, type: .string), 
            AWSShapeMember(label: "expectedVersion", required: false, type: .long), 
            AWSShapeMember(label: "queryVersion", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupProperties", required: true, type: .structure), 
            AWSShapeMember(label: "thingGroupName", location: .uri(locationName: "thingGroupName"), required: true, type: .string)
        ]
        /// The dynamic thing group search query string to update.
        public let queryString: String?
        /// The dynamic thing group index to update.  Currently one index is supported: 'AWS_Things'. 
        public let indexName: String?
        /// The expected version of the dynamic thing group to update.
        public let expectedVersion: Int64?
        /// The dynamic thing group query version to update.  Currently one query version is supported: "2017-09-30". If not specified, the query version defaults to this value. 
        public let queryVersion: String?
        /// The dynamic thing group properties to update.
        public let thingGroupProperties: ThingGroupProperties
        /// The name of the dynamic thing group to update.
        public let thingGroupName: String

        public init(queryString: String? = nil, indexName: String? = nil, expectedVersion: Int64? = nil, queryVersion: String? = nil, thingGroupProperties: ThingGroupProperties, thingGroupName: String) {
            self.queryString = queryString
            self.indexName = indexName
            self.expectedVersion = expectedVersion
            self.queryVersion = queryVersion
            self.thingGroupProperties = thingGroupProperties
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case queryString = "queryString"
            case indexName = "indexName"
            case expectedVersion = "expectedVersion"
            case queryVersion = "queryVersion"
            case thingGroupProperties = "thingGroupProperties"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct DescribeEndpointResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "endpointAddress", required: false, type: .string)
        ]
        /// The endpoint. The format of the endpoint is as follows: identifier.iot.region.amazonaws.com.
        public let endpointAddress: String?

        public init(endpointAddress: String? = nil) {
            self.endpointAddress = endpointAddress
        }

        private enum CodingKeys: String, CodingKey {
            case endpointAddress = "endpointAddress"
        }
    }

    public struct JobExecution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "approximateSecondsBeforeTimedOut", required: false, type: .long), 
            AWSShapeMember(label: "startedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "statusDetails", required: false, type: .structure), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "forceCanceled", required: false, type: .boolean), 
            AWSShapeMember(label: "versionNumber", required: false, type: .long), 
            AWSShapeMember(label: "jobId", required: false, type: .string), 
            AWSShapeMember(label: "executionNumber", required: false, type: .long), 
            AWSShapeMember(label: "queuedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "thingArn", required: false, type: .string)
        ]
        /// The estimated number of seconds that remain before the job execution status will be changed to TIMED_OUT. The timeout interval can be anywhere between 1 minute and 7 days (1 to 10080 minutes). The actual job execution timeout can occur up to 60 seconds later than the estimated duration. This value will not be included if the job execution has reached a terminal status.
        public let approximateSecondsBeforeTimedOut: Int64?
        /// The time, in milliseconds since the epoch, when the job execution started.
        public let startedAt: TimeStamp?
        /// A collection of name/value pairs that describe the status of the job execution.
        public let statusDetails: JobExecutionStatusDetails?
        /// The time, in milliseconds since the epoch, when the job execution was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The status of the job execution (IN_PROGRESS, QUEUED, FAILED, SUCCEEDED, TIMED_OUT, CANCELED, or REJECTED).
        public let status: JobExecutionStatus?
        /// Will be true if the job execution was canceled with the optional force parameter set to true.
        public let forceCanceled: Bool?
        /// The version of the job execution. Job execution versions are incremented each time they are updated by a device.
        public let versionNumber: Int64?
        /// The unique identifier you assigned to the job when it was created.
        public let jobId: String?
        /// A string (consisting of the digits "0" through "9") which identifies this particular job execution on this particular device. It can be used in commands which return or update job execution information. 
        public let executionNumber: Int64?
        /// The time, in milliseconds since the epoch, when the job execution was queued.
        public let queuedAt: TimeStamp?
        /// The ARN of the thing on which the job execution is running.
        public let thingArn: String?

        public init(approximateSecondsBeforeTimedOut: Int64? = nil, startedAt: TimeStamp? = nil, statusDetails: JobExecutionStatusDetails? = nil, lastUpdatedAt: TimeStamp? = nil, status: JobExecutionStatus? = nil, forceCanceled: Bool? = nil, versionNumber: Int64? = nil, jobId: String? = nil, executionNumber: Int64? = nil, queuedAt: TimeStamp? = nil, thingArn: String? = nil) {
            self.approximateSecondsBeforeTimedOut = approximateSecondsBeforeTimedOut
            self.startedAt = startedAt
            self.statusDetails = statusDetails
            self.lastUpdatedAt = lastUpdatedAt
            self.status = status
            self.forceCanceled = forceCanceled
            self.versionNumber = versionNumber
            self.jobId = jobId
            self.executionNumber = executionNumber
            self.queuedAt = queuedAt
            self.thingArn = thingArn
        }

        private enum CodingKeys: String, CodingKey {
            case approximateSecondsBeforeTimedOut = "approximateSecondsBeforeTimedOut"
            case startedAt = "startedAt"
            case statusDetails = "statusDetails"
            case lastUpdatedAt = "lastUpdatedAt"
            case status = "status"
            case forceCanceled = "forceCanceled"
            case versionNumber = "versionNumber"
            case jobId = "jobId"
            case executionNumber = "executionNumber"
            case queuedAt = "queuedAt"
            case thingArn = "thingArn"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "tagKeys", required: true, type: .list)
        ]
        /// The ARN of the resource.
        public let resourceArn: String
        /// A list of the keys of the tags to be removed from the resource.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tagKeys = "tagKeys"
        }
    }

    public struct DeleteScheduledAuditRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "scheduledAuditName", location: .uri(locationName: "scheduledAuditName"), required: true, type: .string)
        ]
        /// The name of the scheduled audit you want to delete.
        public let scheduledAuditName: String

        public init(scheduledAuditName: String) {
            self.scheduledAuditName = scheduledAuditName
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledAuditName = "scheduledAuditName"
        }
    }

    public struct DeleteThingResponse: AWSShape {

    }

    public struct DescribeJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "job", required: false, type: .structure), 
            AWSShapeMember(label: "documentSource", required: false, type: .string)
        ]
        /// Information about the job.
        public let job: Job?
        /// An S3 link to the job document.
        public let documentSource: String?

        public init(job: Job? = nil, documentSource: String? = nil) {
            self.job = job
            self.documentSource = documentSource
        }

        private enum CodingKeys: String, CodingKey {
            case job = "job"
            case documentSource = "documentSource"
        }
    }

    public struct ListTargetsForPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string), 
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer)
        ]
        /// The policy name.
        public let policyName: String
        /// A marker used to get the next set of results.
        public let marker: String?
        /// The maximum number of results to return at one time.
        public let pageSize: Int32?

        public init(policyName: String, marker: String? = nil, pageSize: Int32? = nil) {
            self.policyName = policyName
            self.marker = marker
            self.pageSize = pageSize
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case marker = "marker"
            case pageSize = "pageSize"
        }
    }

    public struct KinesisAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "partitionKey", required: false, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "streamName", required: true, type: .string)
        ]
        /// The partition key.
        public let partitionKey: String?
        /// The ARN of the IAM role that grants access to the Amazon Kinesis stream.
        public let roleArn: String
        /// The name of the Amazon Kinesis stream.
        public let streamName: String

        public init(partitionKey: String? = nil, roleArn: String, streamName: String) {
            self.partitionKey = partitionKey
            self.roleArn = roleArn
            self.streamName = streamName
        }

        private enum CodingKeys: String, CodingKey {
            case partitionKey = "partitionKey"
            case roleArn = "roleArn"
            case streamName = "streamName"
        }
    }

    public struct TopicRuleListItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "ruleDisabled", required: false, type: .boolean), 
            AWSShapeMember(label: "topicPattern", required: false, type: .string), 
            AWSShapeMember(label: "ruleArn", required: false, type: .string), 
            AWSShapeMember(label: "ruleName", required: false, type: .string)
        ]
        /// The date and time the rule was created.
        public let createdAt: TimeStamp?
        /// Specifies whether the rule is disabled.
        public let ruleDisabled: Bool?
        /// The pattern for the topic names that apply.
        public let topicPattern: String?
        /// The rule ARN.
        public let ruleArn: String?
        /// The name of the rule.
        public let ruleName: String?

        public init(createdAt: TimeStamp? = nil, ruleDisabled: Bool? = nil, topicPattern: String? = nil, ruleArn: String? = nil, ruleName: String? = nil) {
            self.createdAt = createdAt
            self.ruleDisabled = ruleDisabled
            self.topicPattern = topicPattern
            self.ruleArn = ruleArn
            self.ruleName = ruleName
        }

        private enum CodingKeys: String, CodingKey {
            case createdAt = "createdAt"
            case ruleDisabled = "ruleDisabled"
            case topicPattern = "topicPattern"
            case ruleArn = "ruleArn"
            case ruleName = "ruleName"
        }
    }

    public struct AuthInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "actionType", required: false, type: .enum), 
            AWSShapeMember(label: "resources", required: false, type: .list)
        ]
        /// The type of action for which the principal is being authorized.
        public let actionType: ActionType?
        /// The resources for which the principal is being authorized to perform the specified action.
        public let resources: [String]?

        public init(actionType: ActionType? = nil, resources: [String]? = nil) {
            self.actionType = actionType
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case actionType = "actionType"
            case resources = "resources"
        }
    }

    public struct SecurityProfileTargetMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "target", required: false, type: .structure), 
            AWSShapeMember(label: "securityProfileIdentifier", required: false, type: .structure)
        ]
        /// Information about the target (thing group) associated with the security profile.
        public let target: SecurityProfileTarget?
        /// Information that identifies the security profile.
        public let securityProfileIdentifier: SecurityProfileIdentifier?

        public init(target: SecurityProfileTarget? = nil, securityProfileIdentifier: SecurityProfileIdentifier? = nil) {
            self.target = target
            self.securityProfileIdentifier = securityProfileIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case target = "target"
            case securityProfileIdentifier = "securityProfileIdentifier"
        }
    }

    public struct DeleteCACertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "caCertificateId"), required: true, type: .string)
        ]
        /// The ID of the certificate to delete. (The last part of the certificate ARN contains the certificate ID.)
        public let certificateId: String

        public init(certificateId: String) {
            self.certificateId = certificateId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "caCertificateId"
        }
    }

    public struct AuthorizerDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerArn", required: false, type: .string), 
            AWSShapeMember(label: "tokenSigningPublicKeys", required: false, type: .map), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "authorizerName", required: false, type: .string), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "tokenKeyName", required: false, type: .string), 
            AWSShapeMember(label: "authorizerFunctionArn", required: false, type: .string)
        ]
        /// The authorizer ARN.
        public let authorizerArn: String?
        /// The public keys used to validate the token signature returned by your custom authentication service.
        public let tokenSigningPublicKeys: [String: String]?
        /// The status of the authorizer.
        public let status: AuthorizerStatus?
        /// The authorizer name.
        public let authorizerName: String?
        /// The UNIX timestamp of when the authorizer was last updated.
        public let lastModifiedDate: TimeStamp?
        /// The UNIX timestamp of when the authorizer was created.
        public let creationDate: TimeStamp?
        /// The key used to extract the token from the HTTP headers.
        public let tokenKeyName: String?
        /// The authorizer's Lambda function ARN.
        public let authorizerFunctionArn: String?

        public init(authorizerArn: String? = nil, tokenSigningPublicKeys: [String: String]? = nil, status: AuthorizerStatus? = nil, authorizerName: String? = nil, lastModifiedDate: TimeStamp? = nil, creationDate: TimeStamp? = nil, tokenKeyName: String? = nil, authorizerFunctionArn: String? = nil) {
            self.authorizerArn = authorizerArn
            self.tokenSigningPublicKeys = tokenSigningPublicKeys
            self.status = status
            self.authorizerName = authorizerName
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.tokenKeyName = tokenKeyName
            self.authorizerFunctionArn = authorizerFunctionArn
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerArn = "authorizerArn"
            case tokenSigningPublicKeys = "tokenSigningPublicKeys"
            case status = "status"
            case authorizerName = "authorizerName"
            case lastModifiedDate = "lastModifiedDate"
            case creationDate = "creationDate"
            case tokenKeyName = "tokenKeyName"
            case authorizerFunctionArn = "authorizerFunctionArn"
        }
    }

    public struct GetTopicRuleResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ruleArn", required: false, type: .string), 
            AWSShapeMember(label: "rule", required: false, type: .structure)
        ]
        /// The rule ARN.
        public let ruleArn: String?
        /// The rule.
        public let rule: TopicRule?

        public init(ruleArn: String? = nil, rule: TopicRule? = nil) {
            self.ruleArn = ruleArn
            self.rule = rule
        }

        private enum CodingKeys: String, CodingKey {
            case ruleArn = "ruleArn"
            case rule = "rule"
        }
    }

    public struct ListThingsInThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "recursive", location: .querystring(locationName: "recursive"), required: false, type: .boolean), 
            AWSShapeMember(label: "thingGroupName", location: .uri(locationName: "thingGroupName"), required: true, type: .string)
        ]
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// When true, list things in this thing group and in all child groups as well.
        public let recursive: Bool?
        /// The thing group name.
        public let thingGroupName: String

        public init(maxResults: Int32? = nil, nextToken: String? = nil, recursive: Bool? = nil, thingGroupName: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.recursive = recursive
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case recursive = "recursive"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct UpdateThingGroupsForThingResponse: AWSShape {

    }

    public struct SigningProfileParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "platform", required: false, type: .string), 
            AWSShapeMember(label: "certificatePathOnDevice", required: false, type: .string), 
            AWSShapeMember(label: "certificateArn", required: false, type: .string)
        ]
        /// The hardware platform of your device.
        public let platform: String?
        /// The location of the code-signing certificate on your device.
        public let certificatePathOnDevice: String?
        /// Certificate ARN.
        public let certificateArn: String?

        public init(platform: String? = nil, certificatePathOnDevice: String? = nil, certificateArn: String? = nil) {
            self.platform = platform
            self.certificatePathOnDevice = certificatePathOnDevice
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case platform = "platform"
            case certificatePathOnDevice = "certificatePathOnDevice"
            case certificateArn = "certificateArn"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The tag's key.
        public let key: String?
        /// The tag's value.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct ErrorInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "code", required: false, type: .string), 
            AWSShapeMember(label: "message", required: false, type: .string)
        ]
        /// The error code.
        public let code: String?
        /// The error message.
        public let message: String?

        public init(code: String? = nil, message: String? = nil) {
            self.code = code
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case code = "code"
            case message = "message"
        }
    }

    public struct DeleteAccountAuditConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deleteScheduledAudits", location: .querystring(locationName: "deleteScheduledAudits"), required: false, type: .boolean)
        ]
        /// If true, all scheduled audits are deleted.
        public let deleteScheduledAudits: Bool?

        public init(deleteScheduledAudits: Bool? = nil) {
            self.deleteScheduledAudits = deleteScheduledAudits
        }

        private enum CodingKeys: String, CodingKey {
            case deleteScheduledAudits = "deleteScheduledAudits"
        }
    }

    public struct DeleteAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerName", location: .uri(locationName: "authorizerName"), required: true, type: .string)
        ]
        /// The name of the authorizer to delete.
        public let authorizerName: String

        public init(authorizerName: String) {
            self.authorizerName = authorizerName
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerName = "authorizerName"
        }
    }

    public struct GetEffectivePoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "effectivePolicies", required: false, type: .list)
        ]
        /// The effective policies.
        public let effectivePolicies: [EffectivePolicy]?

        public init(effectivePolicies: [EffectivePolicy]? = nil) {
            self.effectivePolicies = effectivePolicies
        }

        private enum CodingKeys: String, CodingKey {
            case effectivePolicies = "effectivePolicies"
        }
    }

    public struct CreateRoleAliasRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleAlias", location: .uri(locationName: "roleAlias"), required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "credentialDurationSeconds", required: false, type: .integer)
        ]
        /// The role alias that points to a role ARN. This allows you to change the role without having to update the device.
        public let roleAlias: String
        /// The role ARN.
        public let roleArn: String
        /// How long (in seconds) the credentials will be valid.
        public let credentialDurationSeconds: Int32?

        public init(roleAlias: String, roleArn: String, credentialDurationSeconds: Int32? = nil) {
            self.roleAlias = roleAlias
            self.roleArn = roleArn
            self.credentialDurationSeconds = credentialDurationSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case roleAlias = "roleAlias"
            case roleArn = "roleArn"
            case credentialDurationSeconds = "credentialDurationSeconds"
        }
    }

    public struct DeleteOTAUpdateResponse: AWSShape {

    }

    public struct ListPolicyVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyVersions", required: false, type: .list)
        ]
        /// The policy versions.
        public let policyVersions: [PolicyVersion]?

        public init(policyVersions: [PolicyVersion]? = nil) {
            self.policyVersions = policyVersions
        }

        private enum CodingKeys: String, CodingKey {
            case policyVersions = "policyVersions"
        }
    }

    public enum DynamicGroupStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case building = "BUILDING"
        case rebuilding = "REBUILDING"
        public var description: String { return self.rawValue }
    }

    public struct SetV2LoggingOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "defaultLogLevel", required: false, type: .enum), 
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "disableAllLogs", required: false, type: .boolean)
        ]
        /// The default logging level.
        public let defaultLogLevel: LogLevel?
        /// The ARN of the role that allows IoT to write to Cloudwatch logs.
        public let roleArn: String?
        /// If true all logs are disabled. The default is false.
        public let disableAllLogs: Bool?

        public init(defaultLogLevel: LogLevel? = nil, roleArn: String? = nil, disableAllLogs: Bool? = nil) {
            self.defaultLogLevel = defaultLogLevel
            self.roleArn = roleArn
            self.disableAllLogs = disableAllLogs
        }

        private enum CodingKeys: String, CodingKey {
            case defaultLogLevel = "defaultLogLevel"
            case roleArn = "roleArn"
            case disableAllLogs = "disableAllLogs"
        }
    }

    public struct ListPolicyPrincipalsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextMarker", required: false, type: .string), 
            AWSShapeMember(label: "principals", required: false, type: .list)
        ]
        /// The marker for the next set of results, or null if there are no additional results.
        public let nextMarker: String?
        /// The descriptions of the principals.
        public let principals: [String]?

        public init(nextMarker: String? = nil, principals: [String]? = nil) {
            self.nextMarker = nextMarker
            self.principals = principals
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "nextMarker"
            case principals = "principals"
        }
    }

    public struct JobExecutionStatusDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detailsMap", required: false, type: .map)
        ]
        /// The job execution status.
        public let detailsMap: [String: String]?

        public init(detailsMap: [String: String]? = nil) {
            self.detailsMap = detailsMap
        }

        private enum CodingKeys: String, CodingKey {
            case detailsMap = "detailsMap"
        }
    }

    public struct JobExecutionSummaryForJob: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobExecutionSummary", required: false, type: .structure), 
            AWSShapeMember(label: "thingArn", required: false, type: .string)
        ]
        /// Contains a subset of information about a job execution.
        public let jobExecutionSummary: JobExecutionSummary?
        /// The ARN of the thing on which the job execution is running.
        public let thingArn: String?

        public init(jobExecutionSummary: JobExecutionSummary? = nil, thingArn: String? = nil) {
            self.jobExecutionSummary = jobExecutionSummary
            self.thingArn = thingArn
        }

        private enum CodingKeys: String, CodingKey {
            case jobExecutionSummary = "jobExecutionSummary"
            case thingArn = "thingArn"
        }
    }

    public struct DescribeJobExecutionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "execution", required: false, type: .structure)
        ]
        /// Information about the job execution.
        public let execution: JobExecution?

        public init(execution: JobExecution? = nil) {
            self.execution = execution
        }

        private enum CodingKeys: String, CodingKey {
            case execution = "execution"
        }
    }

    public struct ExplicitDeny: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policies", required: false, type: .list)
        ]
        /// The policies that denied the authorization.
        public let policies: [Policy]?

        public init(policies: [Policy]? = nil) {
            self.policies = policies
        }

        private enum CodingKeys: String, CodingKey {
            case policies = "policies"
        }
    }

    public struct UpdateThingResponse: AWSShape {

    }

    public struct GetJobDocumentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string)
        ]
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
        }
    }

    public struct GetRegistrationCodeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "registrationCode", required: false, type: .string)
        ]
        /// The CA certificate registration code.
        public let registrationCode: String?

        public init(registrationCode: String? = nil) {
            self.registrationCode = registrationCode
        }

        private enum CodingKeys: String, CodingKey {
            case registrationCode = "registrationCode"
        }
    }

    public struct DescribeBillingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "billingGroupId", required: false, type: .string), 
            AWSShapeMember(label: "billingGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .long), 
            AWSShapeMember(label: "billingGroupProperties", required: false, type: .structure), 
            AWSShapeMember(label: "billingGroupMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "billingGroupName", required: false, type: .string)
        ]
        /// The ID of the billing group.
        public let billingGroupId: String?
        /// The ARN of the billing group.
        public let billingGroupArn: String?
        /// The version of the billing group.
        public let version: Int64?
        /// The properties of the billing group.
        public let billingGroupProperties: BillingGroupProperties?
        /// Additional information about the billing group.
        public let billingGroupMetadata: BillingGroupMetadata?
        /// The name of the billing group.
        public let billingGroupName: String?

        public init(billingGroupId: String? = nil, billingGroupArn: String? = nil, version: Int64? = nil, billingGroupProperties: BillingGroupProperties? = nil, billingGroupMetadata: BillingGroupMetadata? = nil, billingGroupName: String? = nil) {
            self.billingGroupId = billingGroupId
            self.billingGroupArn = billingGroupArn
            self.version = version
            self.billingGroupProperties = billingGroupProperties
            self.billingGroupMetadata = billingGroupMetadata
            self.billingGroupName = billingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case billingGroupId = "billingGroupId"
            case billingGroupArn = "billingGroupArn"
            case version = "version"
            case billingGroupProperties = "billingGroupProperties"
            case billingGroupMetadata = "billingGroupMetadata"
            case billingGroupName = "billingGroupName"
        }
    }

    public struct ListThingGroupsForThingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroups", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The thing groups.
        public let thingGroups: [GroupNameAndArn]?
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(thingGroups: [GroupNameAndArn]? = nil, nextToken: String? = nil) {
            self.thingGroups = thingGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroups = "thingGroups"
            case nextToken = "nextToken"
        }
    }

    public struct SetV2LoggingLevelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logTarget", required: true, type: .structure), 
            AWSShapeMember(label: "logLevel", required: true, type: .enum)
        ]
        /// The log target.
        public let logTarget: LogTarget
        /// The log level.
        public let logLevel: LogLevel

        public init(logTarget: LogTarget, logLevel: LogLevel) {
            self.logTarget = logTarget
            self.logLevel = logLevel
        }

        private enum CodingKeys: String, CodingKey {
            case logTarget = "logTarget"
            case logLevel = "logLevel"
        }
    }

    public enum DynamoKeyType: String, CustomStringConvertible, Codable {
        case string = "STRING"
        case number = "NUMBER"
        public var description: String { return self.rawValue }
    }

    public struct ListThingRegistrationTasksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskIds", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of bulk thing provisioning task IDs.
        public let taskIds: [String]?
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(taskIds: [String]? = nil, nextToken: String? = nil) {
            self.taskIds = taskIds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case taskIds = "taskIds"
            case nextToken = "nextToken"
        }
    }

    public struct Policy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyArn", required: false, type: .string), 
            AWSShapeMember(label: "policyName", required: false, type: .string)
        ]
        /// The policy ARN.
        public let policyArn: String?
        /// The policy name.
        public let policyName: String?

        public init(policyArn: String? = nil, policyName: String? = nil) {
            self.policyArn = policyArn
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case policyArn = "policyArn"
            case policyName = "policyName"
        }
    }

    public struct RejectCertificateTransferRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rejectReason", required: false, type: .string), 
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "certificateId"), required: true, type: .string)
        ]
        /// The reason the certificate transfer was rejected.
        public let rejectReason: String?
        /// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
        public let certificateId: String

        public init(rejectReason: String? = nil, certificateId: String) {
            self.rejectReason = rejectReason
            self.certificateId = certificateId
        }

        private enum CodingKeys: String, CodingKey {
            case rejectReason = "rejectReason"
            case certificateId = "certificateId"
        }
    }

    public struct GetPolicyVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyArn", required: false, type: .string), 
            AWSShapeMember(label: "policyVersionId", required: false, type: .string), 
            AWSShapeMember(label: "policyDocument", required: false, type: .string), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "isDefaultVersion", required: false, type: .boolean), 
            AWSShapeMember(label: "generationId", required: false, type: .string), 
            AWSShapeMember(label: "policyName", required: false, type: .string)
        ]
        /// The policy ARN.
        public let policyArn: String?
        /// The policy version ID.
        public let policyVersionId: String?
        /// The JSON document that describes the policy.
        public let policyDocument: String?
        /// The date the policy version was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The date the policy version was created.
        public let creationDate: TimeStamp?
        /// Specifies whether the policy version is the default.
        public let isDefaultVersion: Bool?
        /// The generation ID of the policy version.
        public let generationId: String?
        /// The policy name.
        public let policyName: String?

        public init(policyArn: String? = nil, policyVersionId: String? = nil, policyDocument: String? = nil, lastModifiedDate: TimeStamp? = nil, creationDate: TimeStamp? = nil, isDefaultVersion: Bool? = nil, generationId: String? = nil, policyName: String? = nil) {
            self.policyArn = policyArn
            self.policyVersionId = policyVersionId
            self.policyDocument = policyDocument
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.isDefaultVersion = isDefaultVersion
            self.generationId = generationId
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case policyArn = "policyArn"
            case policyVersionId = "policyVersionId"
            case policyDocument = "policyDocument"
            case lastModifiedDate = "lastModifiedDate"
            case creationDate = "creationDate"
            case isDefaultVersion = "isDefaultVersion"
            case generationId = "generationId"
            case policyName = "policyName"
        }
    }

    public struct UpdateStreamResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "streamVersion", required: false, type: .integer), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "streamArn", required: false, type: .string), 
            AWSShapeMember(label: "streamId", required: false, type: .string)
        ]
        /// The stream version.
        public let streamVersion: Int32?
        /// A description of the stream.
        public let description: String?
        /// The stream ARN.
        public let streamArn: String?
        /// The stream ID.
        public let streamId: String?

        public init(streamVersion: Int32? = nil, description: String? = nil, streamArn: String? = nil, streamId: String? = nil) {
            self.streamVersion = streamVersion
            self.description = description
            self.streamArn = streamArn
            self.streamId = streamId
        }

        private enum CodingKeys: String, CodingKey {
            case streamVersion = "streamVersion"
            case description = "description"
            case streamArn = "streamArn"
            case streamId = "streamId"
        }
    }

    public struct ListPolicyPrincipalsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer), 
            AWSShapeMember(label: "policyName", location: .header(locationName: "x-amzn-iot-policy"), required: true, type: .string), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean), 
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string)
        ]
        /// The result page size.
        public let pageSize: Int32?
        /// The policy name.
        public let policyName: String
        /// Specifies the order for results. If true, the results are returned in ascending creation order.
        public let ascendingOrder: Bool?
        /// The marker for the next set of results.
        public let marker: String?

        public init(pageSize: Int32? = nil, policyName: String, ascendingOrder: Bool? = nil, marker: String? = nil) {
            self.pageSize = pageSize
            self.policyName = policyName
            self.ascendingOrder = ascendingOrder
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "pageSize"
            case policyName = "x-amzn-iot-policy"
            case ascendingOrder = "isAscendingOrder"
            case marker = "marker"
        }
    }

    public struct ListAuthorizersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizers", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The authorizers.
        public let authorizers: [AuthorizerSummary]?
        /// A marker used to get the next set of results.
        public let nextMarker: String?

        public init(authorizers: [AuthorizerSummary]? = nil, nextMarker: String? = nil) {
            self.authorizers = authorizers
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case authorizers = "authorizers"
            case nextMarker = "nextMarker"
        }
    }

    public struct ListThingPrincipalsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// The name of the thing.
        public let thingName: String

        public init(thingName: String) {
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
        }
    }

    public struct UpdateScheduledAuditResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "scheduledAuditArn", required: false, type: .string)
        ]
        /// The ARN of the scheduled audit.
        public let scheduledAuditArn: String?

        public init(scheduledAuditArn: String? = nil) {
            self.scheduledAuditArn = scheduledAuditArn
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledAuditArn = "scheduledAuditArn"
        }
    }

    public struct DescribeThingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupId", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupProperties", required: false, type: .structure), 
            AWSShapeMember(label: "thingGroupMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "indexName", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "queryVersion", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .long), 
            AWSShapeMember(label: "thingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "queryString", required: false, type: .string)
        ]
        /// The thing group ID.
        public let thingGroupId: String?
        /// The thing group properties.
        public let thingGroupProperties: ThingGroupProperties?
        /// Thing group metadata.
        public let thingGroupMetadata: ThingGroupMetadata?
        /// The dynamic thing group index name.
        public let indexName: String?
        /// The dynamic thing group status.
        public let status: DynamicGroupStatus?
        /// The dynamic thing group query version.
        public let queryVersion: String?
        /// The thing group ARN.
        public let thingGroupArn: String?
        /// The version of the thing group.
        public let version: Int64?
        /// The name of the thing group.
        public let thingGroupName: String?
        /// The dynamic thing group search query string.
        public let queryString: String?

        public init(thingGroupId: String? = nil, thingGroupProperties: ThingGroupProperties? = nil, thingGroupMetadata: ThingGroupMetadata? = nil, indexName: String? = nil, status: DynamicGroupStatus? = nil, queryVersion: String? = nil, thingGroupArn: String? = nil, version: Int64? = nil, thingGroupName: String? = nil, queryString: String? = nil) {
            self.thingGroupId = thingGroupId
            self.thingGroupProperties = thingGroupProperties
            self.thingGroupMetadata = thingGroupMetadata
            self.indexName = indexName
            self.status = status
            self.queryVersion = queryVersion
            self.thingGroupArn = thingGroupArn
            self.version = version
            self.thingGroupName = thingGroupName
            self.queryString = queryString
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupId = "thingGroupId"
            case thingGroupProperties = "thingGroupProperties"
            case thingGroupMetadata = "thingGroupMetadata"
            case indexName = "indexName"
            case status = "status"
            case queryVersion = "queryVersion"
            case thingGroupArn = "thingGroupArn"
            case version = "version"
            case thingGroupName = "thingGroupName"
            case queryString = "queryString"
        }
    }

    public struct LogTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "targetName", required: false, type: .string), 
            AWSShapeMember(label: "targetType", required: true, type: .enum)
        ]
        /// The target name.
        public let targetName: String?
        /// The target type.
        public let targetType: LogTargetType

        public init(targetName: String? = nil, targetType: LogTargetType) {
            self.targetName = targetName
            self.targetType = targetType
        }

        private enum CodingKeys: String, CodingKey {
            case targetName = "targetName"
            case targetType = "targetType"
        }
    }

    public struct ListThingGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroups", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The thing groups.
        public let thingGroups: [GroupNameAndArn]?
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(thingGroups: [GroupNameAndArn]? = nil, nextToken: String? = nil) {
            self.thingGroups = thingGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroups = "thingGroups"
            case nextToken = "nextToken"
        }
    }

    public struct CertificateValidity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "notAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "notBefore", required: false, type: .timestamp)
        ]
        /// The certificate is not valid after this date.
        public let notAfter: TimeStamp?
        /// The certificate is not valid before this date.
        public let notBefore: TimeStamp?

        public init(notAfter: TimeStamp? = nil, notBefore: TimeStamp? = nil) {
            self.notAfter = notAfter
            self.notBefore = notBefore
        }

        private enum CodingKeys: String, CodingKey {
            case notAfter = "notAfter"
            case notBefore = "notBefore"
        }
    }

    public struct SetLoggingOptionsRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "loggingOptionsPayload"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loggingOptionsPayload", required: true, type: .structure)
        ]
        /// The logging options payload.
        public let loggingOptionsPayload: LoggingOptionsPayload

        public init(loggingOptionsPayload: LoggingOptionsPayload) {
            self.loggingOptionsPayload = loggingOptionsPayload
        }

        private enum CodingKeys: String, CodingKey {
            case loggingOptionsPayload = "loggingOptionsPayload"
        }
    }

    public struct CodeSigningSignature: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "inlineDocument", required: false, type: .blob)
        ]
        /// A base64 encoded binary representation of the code signing signature.
        public let inlineDocument: Data?

        public init(inlineDocument: Data? = nil) {
            self.inlineDocument = inlineDocument
        }

        private enum CodingKeys: String, CodingKey {
            case inlineDocument = "inlineDocument"
        }
    }

    public struct RepublishAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "topic", required: true, type: .string)
        ]
        /// The ARN of the IAM role that grants access.
        public let roleArn: String
        /// The name of the MQTT topic.
        public let topic: String

        public init(roleArn: String, topic: String) {
            self.roleArn = roleArn
            self.topic = topic
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case topic = "topic"
        }
    }

    public struct SecurityProfileTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: true, type: .string)
        ]
        /// The ARN of the security profile.
        public let arn: String

        public init(arn: String) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
        }
    }

    public struct TaskStatistics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "waitingForDataCollectionChecks", required: false, type: .integer), 
            AWSShapeMember(label: "nonCompliantChecks", required: false, type: .integer), 
            AWSShapeMember(label: "inProgressChecks", required: false, type: .integer), 
            AWSShapeMember(label: "canceledChecks", required: false, type: .integer), 
            AWSShapeMember(label: "totalChecks", required: false, type: .integer), 
            AWSShapeMember(label: "compliantChecks", required: false, type: .integer), 
            AWSShapeMember(label: "failedChecks", required: false, type: .integer)
        ]
        /// The number of checks waiting for data collection.
        public let waitingForDataCollectionChecks: Int32?
        /// The number of checks that found non-compliant resources.
        public let nonCompliantChecks: Int32?
        /// The number of checks in progress.
        public let inProgressChecks: Int32?
        /// The number of checks that did not run because the audit was canceled.
        public let canceledChecks: Int32?
        /// The number of checks in this audit.
        public let totalChecks: Int32?
        /// The number of checks that found compliant resources.
        public let compliantChecks: Int32?
        /// The number of checks 
        public let failedChecks: Int32?

        public init(waitingForDataCollectionChecks: Int32? = nil, nonCompliantChecks: Int32? = nil, inProgressChecks: Int32? = nil, canceledChecks: Int32? = nil, totalChecks: Int32? = nil, compliantChecks: Int32? = nil, failedChecks: Int32? = nil) {
            self.waitingForDataCollectionChecks = waitingForDataCollectionChecks
            self.nonCompliantChecks = nonCompliantChecks
            self.inProgressChecks = inProgressChecks
            self.canceledChecks = canceledChecks
            self.totalChecks = totalChecks
            self.compliantChecks = compliantChecks
            self.failedChecks = failedChecks
        }

        private enum CodingKeys: String, CodingKey {
            case waitingForDataCollectionChecks = "waitingForDataCollectionChecks"
            case nonCompliantChecks = "nonCompliantChecks"
            case inProgressChecks = "inProgressChecks"
            case canceledChecks = "canceledChecks"
            case totalChecks = "totalChecks"
            case compliantChecks = "compliantChecks"
            case failedChecks = "failedChecks"
        }
    }

    public struct Stream: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fileId", required: false, type: .integer), 
            AWSShapeMember(label: "streamId", required: false, type: .string)
        ]
        /// The ID of a file associated with a stream.
        public let fileId: Int32?
        /// The stream ID.
        public let streamId: String?

        public init(fileId: Int32? = nil, streamId: String? = nil) {
            self.fileId = fileId
            self.streamId = streamId
        }

        private enum CodingKeys: String, CodingKey {
            case fileId = "fileId"
            case streamId = "streamId"
        }
    }

    public struct ListViolationEventsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileName", location: .querystring(locationName: "securityProfileName"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "startTime", location: .querystring(locationName: "startTime"), required: true, type: .timestamp), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "thingName", location: .querystring(locationName: "thingName"), required: false, type: .string), 
            AWSShapeMember(label: "endTime", location: .querystring(locationName: "endTime"), required: true, type: .timestamp)
        ]
        /// A filter to limit results to those alerts generated by the specified security profile.
        public let securityProfileName: String?
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// The start time for the alerts to be listed.
        public let startTime: TimeStamp
        /// The token for the next set of results.
        public let nextToken: String?
        /// A filter to limit results to those alerts caused by the specified thing.
        public let thingName: String?
        /// The end time for the alerts to be listed.
        public let endTime: TimeStamp

        public init(securityProfileName: String? = nil, maxResults: Int32? = nil, startTime: TimeStamp, nextToken: String? = nil, thingName: String? = nil, endTime: TimeStamp) {
            self.securityProfileName = securityProfileName
            self.maxResults = maxResults
            self.startTime = startTime
            self.nextToken = nextToken
            self.thingName = thingName
            self.endTime = endTime
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileName = "securityProfileName"
            case maxResults = "maxResults"
            case startTime = "startTime"
            case nextToken = "nextToken"
            case thingName = "thingName"
            case endTime = "endTime"
        }
    }

    public struct ThingTypeProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "searchableAttributes", required: false, type: .list), 
            AWSShapeMember(label: "thingTypeDescription", required: false, type: .string)
        ]
        /// A list of searchable thing attribute names.
        public let searchableAttributes: [String]?
        /// The description of the thing type.
        public let thingTypeDescription: String?

        public init(searchableAttributes: [String]? = nil, thingTypeDescription: String? = nil) {
            self.searchableAttributes = searchableAttributes
            self.thingTypeDescription = thingTypeDescription
        }

        private enum CodingKeys: String, CodingKey {
            case searchableAttributes = "searchableAttributes"
            case thingTypeDescription = "thingTypeDescription"
        }
    }

    public enum AbortAction: String, CustomStringConvertible, Codable {
        case cancel = "CANCEL"
        public var description: String { return self.rawValue }
    }

    public struct RelatedResource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceIdentifier", required: false, type: .structure), 
            AWSShapeMember(label: "additionalInfo", required: false, type: .map), 
            AWSShapeMember(label: "resourceType", required: false, type: .enum)
        ]
        /// Information identifying the resource.
        public let resourceIdentifier: ResourceIdentifier?
        /// Additional information about the resource.
        public let additionalInfo: [String: String]?
        /// The type of resource.
        public let resourceType: ResourceType?

        public init(resourceIdentifier: ResourceIdentifier? = nil, additionalInfo: [String: String]? = nil, resourceType: ResourceType? = nil) {
            self.resourceIdentifier = resourceIdentifier
            self.additionalInfo = additionalInfo
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case resourceIdentifier = "resourceIdentifier"
            case additionalInfo = "additionalInfo"
            case resourceType = "resourceType"
        }
    }

    public struct ListAuthorizersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer), 
            AWSShapeMember(label: "status", location: .querystring(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean), 
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string)
        ]
        /// The maximum number of results to return at one time.
        public let pageSize: Int32?
        /// The status of the list authorizers request.
        public let status: AuthorizerStatus?
        /// Return the list of authorizers in ascending alphabetical order.
        public let ascendingOrder: Bool?
        /// A marker used to get the next set of results.
        public let marker: String?

        public init(pageSize: Int32? = nil, status: AuthorizerStatus? = nil, ascendingOrder: Bool? = nil, marker: String? = nil) {
            self.pageSize = pageSize
            self.status = status
            self.ascendingOrder = ascendingOrder
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "pageSize"
            case status = "status"
            case ascendingOrder = "isAscendingOrder"
            case marker = "marker"
        }
    }

    public struct ListTopicRulesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "topic", location: .querystring(locationName: "topic"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "ruleDisabled", location: .querystring(locationName: "ruleDisabled"), required: false, type: .boolean), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The topic.
        public let topic: String?
        /// The maximum number of results to return.
        public let maxResults: Int32?
        /// Specifies whether the rule is disabled.
        public let ruleDisabled: Bool?
        /// A token used to retrieve the next value.
        public let nextToken: String?

        public init(topic: String? = nil, maxResults: Int32? = nil, ruleDisabled: Bool? = nil, nextToken: String? = nil) {
            self.topic = topic
            self.maxResults = maxResults
            self.ruleDisabled = ruleDisabled
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case topic = "topic"
            case maxResults = "maxResults"
            case ruleDisabled = "ruleDisabled"
            case nextToken = "nextToken"
        }
    }

    public struct CreatePolicyVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string), 
            AWSShapeMember(label: "policyDocument", required: true, type: .string), 
            AWSShapeMember(label: "setAsDefault", location: .querystring(locationName: "setAsDefault"), required: false, type: .boolean)
        ]
        /// The policy name.
        public let policyName: String
        /// The JSON document that describes the policy. Minimum length of 1. Maximum length of 2048, excluding whitespace.
        public let policyDocument: String
        /// Specifies whether the policy version is set as the default. When this parameter is true, the new policy version becomes the operative version (that is, the version that is in effect for the certificates to which the policy is attached).
        public let setAsDefault: Bool?

        public init(policyName: String, policyDocument: String, setAsDefault: Bool? = nil) {
            self.policyName = policyName
            self.policyDocument = policyDocument
            self.setAsDefault = setAsDefault
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case policyDocument = "policyDocument"
            case setAsDefault = "setAsDefault"
        }
    }

    public struct CreateStreamResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "streamVersion", required: false, type: .integer), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "streamArn", required: false, type: .string), 
            AWSShapeMember(label: "streamId", required: false, type: .string)
        ]
        /// The version of the stream.
        public let streamVersion: Int32?
        /// A description of the stream.
        public let description: String?
        /// The stream ARN.
        public let streamArn: String?
        /// The stream ID.
        public let streamId: String?

        public init(streamVersion: Int32? = nil, description: String? = nil, streamArn: String? = nil, streamId: String? = nil) {
            self.streamVersion = streamVersion
            self.description = description
            self.streamArn = streamArn
            self.streamId = streamId
        }

        private enum CodingKeys: String, CodingKey {
            case streamVersion = "streamVersion"
            case description = "description"
            case streamArn = "streamArn"
            case streamId = "streamId"
        }
    }

    public struct GetTopicRuleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ruleName", location: .uri(locationName: "ruleName"), required: true, type: .string)
        ]
        /// The name of the rule.
        public let ruleName: String

        public init(ruleName: String) {
            self.ruleName = ruleName
        }

        private enum CodingKeys: String, CodingKey {
            case ruleName = "ruleName"
        }
    }

    public struct CreateOTAUpdateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "targetSelection", required: false, type: .enum), 
            AWSShapeMember(label: "targets", required: true, type: .list), 
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "additionalParameters", required: false, type: .map), 
            AWSShapeMember(label: "files", required: true, type: .list), 
            AWSShapeMember(label: "awsJobExecutionsRolloutConfig", required: false, type: .structure), 
            AWSShapeMember(label: "otaUpdateId", location: .uri(locationName: "otaUpdateId"), required: true, type: .string)
        ]
        /// Specifies whether the update will continue to run (CONTINUOUS), or will be complete after all the things specified as targets have completed the update (SNAPSHOT). If continuous, the update may also be run on a thing when a change is detected in a target. For example, an update will run on a thing when the thing is added to a target group, even after the update was completed by all things originally in the group. Valid values: CONTINUOUS | SNAPSHOT.
        public let targetSelection: TargetSelection?
        /// The targeted devices to receive OTA updates.
        public let targets: [String]
        /// The IAM role that allows access to the AWS IoT Jobs service.
        public let roleArn: String
        /// The description of the OTA update.
        public let description: String?
        /// A list of additional OTA update parameters which are name-value pairs.
        public let additionalParameters: [String: String]?
        /// The files to be streamed by the OTA update.
        public let files: [OTAUpdateFile]
        /// Configuration for the rollout of OTA updates.
        public let awsJobExecutionsRolloutConfig: AwsJobExecutionsRolloutConfig?
        /// The ID of the OTA update to be created.
        public let otaUpdateId: String

        public init(targetSelection: TargetSelection? = nil, targets: [String], roleArn: String, description: String? = nil, additionalParameters: [String: String]? = nil, files: [OTAUpdateFile], awsJobExecutionsRolloutConfig: AwsJobExecutionsRolloutConfig? = nil, otaUpdateId: String) {
            self.targetSelection = targetSelection
            self.targets = targets
            self.roleArn = roleArn
            self.description = description
            self.additionalParameters = additionalParameters
            self.files = files
            self.awsJobExecutionsRolloutConfig = awsJobExecutionsRolloutConfig
            self.otaUpdateId = otaUpdateId
        }

        private enum CodingKeys: String, CodingKey {
            case targetSelection = "targetSelection"
            case targets = "targets"
            case roleArn = "roleArn"
            case description = "description"
            case additionalParameters = "additionalParameters"
            case files = "files"
            case awsJobExecutionsRolloutConfig = "awsJobExecutionsRolloutConfig"
            case otaUpdateId = "otaUpdateId"
        }
    }

    public struct TopicRulePayload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "actions", required: true, type: .list), 
            AWSShapeMember(label: "ruleDisabled", required: false, type: .boolean), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "sql", required: true, type: .string), 
            AWSShapeMember(label: "awsIotSqlVersion", required: false, type: .string), 
            AWSShapeMember(label: "errorAction", required: false, type: .structure)
        ]
        /// The actions associated with the rule.
        public let actions: [Action]
        /// Specifies whether the rule is disabled.
        public let ruleDisabled: Bool?
        /// The description of the rule.
        public let description: String?
        /// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference in the AWS IoT Developer Guide.
        public let sql: String
        /// The version of the SQL rules engine to use when evaluating the rule.
        public let awsIotSqlVersion: String?
        /// The action to take when an error occurs.
        public let errorAction: Action?

        public init(actions: [Action], ruleDisabled: Bool? = nil, description: String? = nil, sql: String, awsIotSqlVersion: String? = nil, errorAction: Action? = nil) {
            self.actions = actions
            self.ruleDisabled = ruleDisabled
            self.description = description
            self.sql = sql
            self.awsIotSqlVersion = awsIotSqlVersion
            self.errorAction = errorAction
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "actions"
            case ruleDisabled = "ruleDisabled"
            case description = "description"
            case sql = "sql"
            case awsIotSqlVersion = "awsIotSqlVersion"
            case errorAction = "errorAction"
        }
    }

    public struct GetLoggingOptionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logLevel", required: false, type: .enum), 
            AWSShapeMember(label: "roleArn", required: false, type: .string)
        ]
        /// The logging level.
        public let logLevel: LogLevel?
        /// The ARN of the IAM role that grants access.
        public let roleArn: String?

        public init(logLevel: LogLevel? = nil, roleArn: String? = nil) {
            self.logLevel = logLevel
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case logLevel = "logLevel"
            case roleArn = "roleArn"
        }
    }

    public struct CreateDynamicThingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "queryString", required: false, type: .string), 
            AWSShapeMember(label: "indexName", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupId", required: false, type: .string), 
            AWSShapeMember(label: "queryVersion", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupName", required: false, type: .string)
        ]
        /// The dynamic thing group search query string.
        public let queryString: String?
        /// The dynamic thing group index name.
        public let indexName: String?
        /// The dynamic thing group ARN.
        public let thingGroupArn: String?
        /// The dynamic thing group ID.
        public let thingGroupId: String?
        /// The dynamic thing group query version.
        public let queryVersion: String?
        /// The dynamic thing group name.
        public let thingGroupName: String?

        public init(queryString: String? = nil, indexName: String? = nil, thingGroupArn: String? = nil, thingGroupId: String? = nil, queryVersion: String? = nil, thingGroupName: String? = nil) {
            self.queryString = queryString
            self.indexName = indexName
            self.thingGroupArn = thingGroupArn
            self.thingGroupId = thingGroupId
            self.queryVersion = queryVersion
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case queryString = "queryString"
            case indexName = "indexName"
            case thingGroupArn = "thingGroupArn"
            case thingGroupId = "thingGroupId"
            case queryVersion = "queryVersion"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct DeleteSecurityProfileResponse: AWSShape {

    }

    public struct ListThingTypesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingTypeName", location: .querystring(locationName: "thingTypeName"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The name of the thing type.
        public let thingTypeName: String?
        /// The maximum number of results to return in this operation.
        public let maxResults: Int32?
        /// The token to retrieve the next set of results.
        public let nextToken: String?

        public init(thingTypeName: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.thingTypeName = thingTypeName
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case thingTypeName = "thingTypeName"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct StopThingRegistrationTaskResponse: AWSShape {

    }

    public enum AuthorizerStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
        public var description: String { return self.rawValue }
    }

    public struct OTAUpdateInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "awsIotJobArn", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "awsJobExecutionsRolloutConfig", required: false, type: .structure), 
            AWSShapeMember(label: "otaUpdateFiles", required: false, type: .list), 
            AWSShapeMember(label: "targetSelection", required: false, type: .enum), 
            AWSShapeMember(label: "targets", required: false, type: .list), 
            AWSShapeMember(label: "additionalParameters", required: false, type: .map), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "otaUpdateArn", required: false, type: .string), 
            AWSShapeMember(label: "otaUpdateId", required: false, type: .string), 
            AWSShapeMember(label: "errorInfo", required: false, type: .structure), 
            AWSShapeMember(label: "awsIotJobId", required: false, type: .string), 
            AWSShapeMember(label: "otaUpdateStatus", required: false, type: .enum)
        ]
        /// The AWS IoT job ARN associated with the OTA update.
        public let awsIotJobArn: String?
        /// A description of the OTA update.
        public let description: String?
        /// The date when the OTA update was last updated.
        public let lastModifiedDate: TimeStamp?
        /// Configuration for the rollout of OTA updates.
        public let awsJobExecutionsRolloutConfig: AwsJobExecutionsRolloutConfig?
        /// A list of files associated with the OTA update.
        public let otaUpdateFiles: [OTAUpdateFile]?
        /// Specifies whether the OTA update will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the OTA update (SNAPSHOT). If continuous, the OTA update may also be run on a thing when a change is detected in a target. For example, an OTA update will run on a thing when the thing is added to a target group, even after the OTA update was completed by all things originally in the group. 
        public let targetSelection: TargetSelection?
        /// The targets of the OTA update.
        public let targets: [String]?
        /// A collection of name/value pairs
        public let additionalParameters: [String: String]?
        /// The date when the OTA update was created.
        public let creationDate: TimeStamp?
        /// The OTA update ARN.
        public let otaUpdateArn: String?
        /// The OTA update ID.
        public let otaUpdateId: String?
        /// Error information associated with the OTA update.
        public let errorInfo: ErrorInfo?
        /// The AWS IoT job ID associated with the OTA update.
        public let awsIotJobId: String?
        /// The status of the OTA update.
        public let otaUpdateStatus: OTAUpdateStatus?

        public init(awsIotJobArn: String? = nil, description: String? = nil, lastModifiedDate: TimeStamp? = nil, awsJobExecutionsRolloutConfig: AwsJobExecutionsRolloutConfig? = nil, otaUpdateFiles: [OTAUpdateFile]? = nil, targetSelection: TargetSelection? = nil, targets: [String]? = nil, additionalParameters: [String: String]? = nil, creationDate: TimeStamp? = nil, otaUpdateArn: String? = nil, otaUpdateId: String? = nil, errorInfo: ErrorInfo? = nil, awsIotJobId: String? = nil, otaUpdateStatus: OTAUpdateStatus? = nil) {
            self.awsIotJobArn = awsIotJobArn
            self.description = description
            self.lastModifiedDate = lastModifiedDate
            self.awsJobExecutionsRolloutConfig = awsJobExecutionsRolloutConfig
            self.otaUpdateFiles = otaUpdateFiles
            self.targetSelection = targetSelection
            self.targets = targets
            self.additionalParameters = additionalParameters
            self.creationDate = creationDate
            self.otaUpdateArn = otaUpdateArn
            self.otaUpdateId = otaUpdateId
            self.errorInfo = errorInfo
            self.awsIotJobId = awsIotJobId
            self.otaUpdateStatus = otaUpdateStatus
        }

        private enum CodingKeys: String, CodingKey {
            case awsIotJobArn = "awsIotJobArn"
            case description = "description"
            case lastModifiedDate = "lastModifiedDate"
            case awsJobExecutionsRolloutConfig = "awsJobExecutionsRolloutConfig"
            case otaUpdateFiles = "otaUpdateFiles"
            case targetSelection = "targetSelection"
            case targets = "targets"
            case additionalParameters = "additionalParameters"
            case creationDate = "creationDate"
            case otaUpdateArn = "otaUpdateArn"
            case otaUpdateId = "otaUpdateId"
            case errorInfo = "errorInfo"
            case awsIotJobId = "awsIotJobId"
            case otaUpdateStatus = "otaUpdateStatus"
        }
    }

    public struct ThingAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingTypeName", required: false, type: .string), 
            AWSShapeMember(label: "attributes", required: false, type: .map), 
            AWSShapeMember(label: "thingArn", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .long), 
            AWSShapeMember(label: "thingName", required: false, type: .string)
        ]
        /// The name of the thing type, if the thing has been associated with a type.
        public let thingTypeName: String?
        /// A list of thing attributes which are name-value pairs.
        public let attributes: [String: String]?
        /// The thing ARN.
        public let thingArn: String?
        /// The version of the thing record in the registry.
        public let version: Int64?
        /// The name of the thing.
        public let thingName: String?

        public init(thingTypeName: String? = nil, attributes: [String: String]? = nil, thingArn: String? = nil, version: Int64? = nil, thingName: String? = nil) {
            self.thingTypeName = thingTypeName
            self.attributes = attributes
            self.thingArn = thingArn
            self.version = version
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case thingTypeName = "thingTypeName"
            case attributes = "attributes"
            case thingArn = "thingArn"
            case version = "version"
            case thingName = "thingName"
        }
    }

    public struct CreatePolicyVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyArn", required: false, type: .string), 
            AWSShapeMember(label: "policyVersionId", required: false, type: .string), 
            AWSShapeMember(label: "isDefaultVersion", required: false, type: .boolean), 
            AWSShapeMember(label: "policyDocument", required: false, type: .string)
        ]
        /// The policy ARN.
        public let policyArn: String?
        /// The policy version ID.
        public let policyVersionId: String?
        /// Specifies whether the policy version is the default.
        public let isDefaultVersion: Bool?
        /// The JSON document that describes the policy.
        public let policyDocument: String?

        public init(policyArn: String? = nil, policyVersionId: String? = nil, isDefaultVersion: Bool? = nil, policyDocument: String? = nil) {
            self.policyArn = policyArn
            self.policyVersionId = policyVersionId
            self.isDefaultVersion = isDefaultVersion
            self.policyDocument = policyDocument
        }

        private enum CodingKeys: String, CodingKey {
            case policyArn = "policyArn"
            case policyVersionId = "policyVersionId"
            case isDefaultVersion = "isDefaultVersion"
            case policyDocument = "policyDocument"
        }
    }

    public struct CustomCodeSigning: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateChain", required: false, type: .structure), 
            AWSShapeMember(label: "signature", required: false, type: .structure), 
            AWSShapeMember(label: "hashAlgorithm", required: false, type: .string), 
            AWSShapeMember(label: "signatureAlgorithm", required: false, type: .string)
        ]
        /// The certificate chain.
        public let certificateChain: CodeSigningCertificateChain?
        /// The signature for the file.
        public let signature: CodeSigningSignature?
        /// The hash algorithm used to code sign the file.
        public let hashAlgorithm: String?
        /// The signature algorithm used to code sign the file.
        public let signatureAlgorithm: String?

        public init(certificateChain: CodeSigningCertificateChain? = nil, signature: CodeSigningSignature? = nil, hashAlgorithm: String? = nil, signatureAlgorithm: String? = nil) {
            self.certificateChain = certificateChain
            self.signature = signature
            self.hashAlgorithm = hashAlgorithm
            self.signatureAlgorithm = signatureAlgorithm
        }

        private enum CodingKeys: String, CodingKey {
            case certificateChain = "certificateChain"
            case signature = "signature"
            case hashAlgorithm = "hashAlgorithm"
            case signatureAlgorithm = "signatureAlgorithm"
        }
    }

    public struct CreateJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobId", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "jobArn", required: false, type: .string)
        ]
        /// The unique identifier you assigned to this job.
        public let jobId: String?
        /// The job description.
        public let description: String?
        /// The job ARN.
        public let jobArn: String?

        public init(jobId: String? = nil, description: String? = nil, jobArn: String? = nil) {
            self.jobId = jobId
            self.description = description
            self.jobArn = jobArn
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
            case description = "description"
            case jobArn = "jobArn"
        }
    }

    public struct AttachPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string), 
            AWSShapeMember(label: "target", required: true, type: .string)
        ]
        /// The name of the policy to attach.
        public let policyName: String
        /// The identity to which the policy is attached.
        public let target: String

        public init(policyName: String, target: String) {
            self.policyName = policyName
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case target = "target"
        }
    }

    public struct StartOnDemandAuditTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "targetCheckNames", required: true, type: .list)
        ]
        /// Which checks are performed during the audit. The checks you specify must be enabled for your account or an exception occurs. Use DescribeAccountAuditConfiguration to see the list of all checks including those that are enabled or UpdateAccountAuditConfiguration to select which checks are enabled.
        public let targetCheckNames: [String]

        public init(targetCheckNames: [String]) {
            self.targetCheckNames = targetCheckNames
        }

        private enum CodingKeys: String, CodingKey {
            case targetCheckNames = "targetCheckNames"
        }
    }

    public struct CreateCertificateFromCsrResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateArn", required: false, type: .string), 
            AWSShapeMember(label: "certificateId", required: false, type: .string), 
            AWSShapeMember(label: "certificatePem", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the certificate. You can use the ARN as a principal for policy operations.
        public let certificateArn: String?
        /// The ID of the certificate. Certificate management operations only take a certificateId.
        public let certificateId: String?
        /// The certificate data, in PEM format.
        public let certificatePem: String?

        public init(certificateArn: String? = nil, certificateId: String? = nil, certificatePem: String? = nil) {
            self.certificateArn = certificateArn
            self.certificateId = certificateId
            self.certificatePem = certificatePem
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "certificateArn"
            case certificateId = "certificateId"
            case certificatePem = "certificatePem"
        }
    }

    public enum AuditTaskType: String, CustomStringConvertible, Codable {
        case onDemandAuditTask = "ON_DEMAND_AUDIT_TASK"
        case scheduledAuditTask = "SCHEDULED_AUDIT_TASK"
        public var description: String { return self.rawValue }
    }

    public struct ListV2LoggingLevelsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logTargetConfigurations", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The logging configuration for a target.
        public let logTargetConfigurations: [LogTargetConfiguration]?
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(logTargetConfigurations: [LogTargetConfiguration]? = nil, nextToken: String? = nil) {
            self.logTargetConfigurations = logTargetConfigurations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case logTargetConfigurations = "logTargetConfigurations"
            case nextToken = "nextToken"
        }
    }

    public enum ReportType: String, CustomStringConvertible, Codable {
        case errors = "ERRORS"
        case results = "RESULTS"
        public var description: String { return self.rawValue }
    }

    public struct ListSecurityProfilesForTargetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "securityProfileTargetArn", location: .querystring(locationName: "securityProfileTargetArn"), required: true, type: .string), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "recursive", location: .querystring(locationName: "recursive"), required: false, type: .boolean)
        ]
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// The ARN of the target (thing group) whose attached security profiles you want to get.
        public let securityProfileTargetArn: String
        /// The token for the next set of results.
        public let nextToken: String?
        /// If true, return child groups as well.
        public let recursive: Bool?

        public init(maxResults: Int32? = nil, securityProfileTargetArn: String, nextToken: String? = nil, recursive: Bool? = nil) {
            self.maxResults = maxResults
            self.securityProfileTargetArn = securityProfileTargetArn
            self.nextToken = nextToken
            self.recursive = recursive
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case securityProfileTargetArn = "securityProfileTargetArn"
            case nextToken = "nextToken"
            case recursive = "recursive"
        }
    }

    public struct ListScheduledAuditsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "scheduledAudits", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The list of scheduled audits.
        public let scheduledAudits: [ScheduledAuditMetadata]?
        /// A token that can be used to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(scheduledAudits: [ScheduledAuditMetadata]? = nil, nextToken: String? = nil) {
            self.scheduledAudits = scheduledAudits
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledAudits = "scheduledAudits"
            case nextToken = "nextToken"
        }
    }

    public struct RemoveThingFromBillingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "billingGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "thingArn", required: false, type: .string), 
            AWSShapeMember(label: "billingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "thingName", required: false, type: .string)
        ]
        /// The ARN of the billing group.
        public let billingGroupArn: String?
        /// The ARN of the thing to be removed from the billing group.
        public let thingArn: String?
        /// The name of the billing group.
        public let billingGroupName: String?
        /// The name of the thing to be removed from the billing group.
        public let thingName: String?

        public init(billingGroupArn: String? = nil, thingArn: String? = nil, billingGroupName: String? = nil, thingName: String? = nil) {
            self.billingGroupArn = billingGroupArn
            self.thingArn = thingArn
            self.billingGroupName = billingGroupName
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case billingGroupArn = "billingGroupArn"
            case thingArn = "thingArn"
            case billingGroupName = "billingGroupName"
            case thingName = "thingName"
        }
    }

    public struct PresignedUrlConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "expiresInSec", required: false, type: .long), 
            AWSShapeMember(label: "roleArn", required: false, type: .string)
        ]
        /// How long (in seconds) pre-signed URLs are valid. Valid values are 60 - 3600, the default value is 3600 seconds. Pre-signed URLs are generated when Jobs receives an MQTT request for the job document.
        public let expiresInSec: Int64?
        /// The ARN of an IAM role that grants grants permission to download files from the S3 bucket where the job data/updates are stored. The role must also grant permission for IoT to download the files.
        public let roleArn: String?

        public init(expiresInSec: Int64? = nil, roleArn: String? = nil) {
            self.expiresInSec = expiresInSec
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case expiresInSec = "expiresInSec"
            case roleArn = "roleArn"
        }
    }

    public struct ListOutgoingCertificatesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextMarker", required: false, type: .string), 
            AWSShapeMember(label: "outgoingCertificates", required: false, type: .list)
        ]
        /// The marker for the next set of results.
        public let nextMarker: String?
        /// The certificates that are being transferred but not yet accepted.
        public let outgoingCertificates: [OutgoingCertificate]?

        public init(nextMarker: String? = nil, outgoingCertificates: [OutgoingCertificate]? = nil) {
            self.nextMarker = nextMarker
            self.outgoingCertificates = outgoingCertificates
        }

        private enum CodingKeys: String, CodingKey {
            case nextMarker = "nextMarker"
            case outgoingCertificates = "outgoingCertificates"
        }
    }

    public struct GetEffectivePoliciesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "principal", required: false, type: .string), 
            AWSShapeMember(label: "thingName", location: .querystring(locationName: "thingName"), required: false, type: .string), 
            AWSShapeMember(label: "cognitoIdentityPoolId", required: false, type: .string)
        ]
        /// The principal.
        public let principal: String?
        /// The thing name.
        public let thingName: String?
        /// The Cognito identity pool ID.
        public let cognitoIdentityPoolId: String?

        public init(principal: String? = nil, thingName: String? = nil, cognitoIdentityPoolId: String? = nil) {
            self.principal = principal
            self.thingName = thingName
            self.cognitoIdentityPoolId = cognitoIdentityPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case principal = "principal"
            case thingName = "thingName"
            case cognitoIdentityPoolId = "cognitoIdentityPoolId"
        }
    }

    public struct RegisterCertificateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", required: false, type: .string), 
            AWSShapeMember(label: "certificateArn", required: false, type: .string)
        ]
        /// The certificate identifier.
        public let certificateId: String?
        /// The certificate ARN.
        public let certificateArn: String?

        public init(certificateId: String? = nil, certificateArn: String? = nil) {
            self.certificateId = certificateId
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "certificateId"
            case certificateArn = "certificateArn"
        }
    }

    public struct UpdateThingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingTypeName", required: false, type: .string), 
            AWSShapeMember(label: "removeThingType", required: false, type: .boolean), 
            AWSShapeMember(label: "attributePayload", required: false, type: .structure), 
            AWSShapeMember(label: "expectedVersion", required: false, type: .long), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// The name of the thing type.
        public let thingTypeName: String?
        /// Remove a thing type association. If true, the association is removed.
        public let removeThingType: Bool?
        /// A list of thing attributes, a JSON string containing name-value pairs. For example:  {\"attributes\":{\"name1\":\"value2\"}}  This data is used to add new attributes or update existing attributes.
        public let attributePayload: AttributePayload?
        /// The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the UpdateThing request is rejected with a VersionConflictException.
        public let expectedVersion: Int64?
        /// The name of the thing to update.
        public let thingName: String

        public init(thingTypeName: String? = nil, removeThingType: Bool? = nil, attributePayload: AttributePayload? = nil, expectedVersion: Int64? = nil, thingName: String) {
            self.thingTypeName = thingTypeName
            self.removeThingType = removeThingType
            self.attributePayload = attributePayload
            self.expectedVersion = expectedVersion
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case thingTypeName = "thingTypeName"
            case removeThingType = "removeThingType"
            case attributePayload = "attributePayload"
            case expectedVersion = "expectedVersion"
            case thingName = "thingName"
        }
    }

    public struct DeleteThingGroupResponse: AWSShape {

    }

    public struct ThingGroupProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupDescription", required: false, type: .string), 
            AWSShapeMember(label: "attributePayload", required: false, type: .structure)
        ]
        /// The thing group description.
        public let thingGroupDescription: String?
        /// The thing group attributes in JSON format.
        public let attributePayload: AttributePayload?

        public init(thingGroupDescription: String? = nil, attributePayload: AttributePayload? = nil) {
            self.thingGroupDescription = thingGroupDescription
            self.attributePayload = attributePayload
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupDescription = "thingGroupDescription"
            case attributePayload = "attributePayload"
        }
    }

    public struct ThingGroupMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rootToParentThingGroups", required: false, type: .list), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "parentGroupName", required: false, type: .string)
        ]
        /// The root parent thing group.
        public let rootToParentThingGroups: [GroupNameAndArn]?
        /// The UNIX timestamp of when the thing group was created.
        public let creationDate: TimeStamp?
        /// The parent thing group name.
        public let parentGroupName: String?

        public init(rootToParentThingGroups: [GroupNameAndArn]? = nil, creationDate: TimeStamp? = nil, parentGroupName: String? = nil) {
            self.rootToParentThingGroups = rootToParentThingGroups
            self.creationDate = creationDate
            self.parentGroupName = parentGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case rootToParentThingGroups = "rootToParentThingGroups"
            case creationDate = "creationDate"
            case parentGroupName = "parentGroupName"
        }
    }

    public struct LogTargetConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logTarget", required: false, type: .structure), 
            AWSShapeMember(label: "logLevel", required: false, type: .enum)
        ]
        /// A log target
        public let logTarget: LogTarget?
        /// The logging level.
        public let logLevel: LogLevel?

        public init(logTarget: LogTarget? = nil, logLevel: LogLevel? = nil) {
            self.logTarget = logTarget
            self.logLevel = logLevel
        }

        private enum CodingKeys: String, CodingKey {
            case logTarget = "logTarget"
            case logLevel = "logLevel"
        }
    }

    public struct TestInvokeAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tokenSignature", required: true, type: .string), 
            AWSShapeMember(label: "token", required: true, type: .string), 
            AWSShapeMember(label: "authorizerName", location: .uri(locationName: "authorizerName"), required: true, type: .string)
        ]
        /// The signature made with the token and your custom authentication service's private key.
        public let tokenSignature: String
        /// The token returned by your custom authentication service.
        public let token: String
        /// The custom authorizer name.
        public let authorizerName: String

        public init(tokenSignature: String, token: String, authorizerName: String) {
            self.tokenSignature = tokenSignature
            self.token = token
            self.authorizerName = authorizerName
        }

        private enum CodingKeys: String, CodingKey {
            case tokenSignature = "tokenSignature"
            case token = "token"
            case authorizerName = "authorizerName"
        }
    }

    public struct OTAUpdateSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "otaUpdateArn", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "otaUpdateId", required: false, type: .string)
        ]
        /// The OTA update ARN.
        public let otaUpdateArn: String?
        /// The date when the OTA update was created.
        public let creationDate: TimeStamp?
        /// The OTA update ID.
        public let otaUpdateId: String?

        public init(otaUpdateArn: String? = nil, creationDate: TimeStamp? = nil, otaUpdateId: String? = nil) {
            self.otaUpdateArn = otaUpdateArn
            self.creationDate = creationDate
            self.otaUpdateId = otaUpdateId
        }

        private enum CodingKeys: String, CodingKey {
            case otaUpdateArn = "otaUpdateArn"
            case creationDate = "creationDate"
            case otaUpdateId = "otaUpdateId"
        }
    }

    public struct UpdateThingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "version", required: false, type: .long)
        ]
        /// The version of the updated thing group.
        public let version: Int64?

        public init(version: Int64? = nil) {
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case version = "version"
        }
    }

    public struct ListOutgoingCertificatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean), 
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer)
        ]
        /// The marker for the next set of results.
        public let marker: String?
        /// Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.
        public let ascendingOrder: Bool?
        /// The result page size.
        public let pageSize: Int32?

        public init(marker: String? = nil, ascendingOrder: Bool? = nil, pageSize: Int32? = nil) {
            self.marker = marker
            self.ascendingOrder = ascendingOrder
            self.pageSize = pageSize
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "marker"
            case ascendingOrder = "isAscendingOrder"
            case pageSize = "pageSize"
        }
    }

    public enum ComparisonOperator: String, CustomStringConvertible, Codable {
        case lessThan = "less-than"
        case lessThanEquals = "less-than-equals"
        case greaterThan = "greater-than"
        case greaterThanEquals = "greater-than-equals"
        case inCidrSet = "in-cidr-set"
        case notInCidrSet = "not-in-cidr-set"
        case inPortSet = "in-port-set"
        case notInPortSet = "not-in-port-set"
        public var description: String { return self.rawValue }
    }

    public struct SetDefaultPolicyVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string), 
            AWSShapeMember(label: "policyVersionId", location: .uri(locationName: "policyVersionId"), required: true, type: .string)
        ]
        /// The policy name.
        public let policyName: String
        /// The policy version ID.
        public let policyVersionId: String

        public init(policyName: String, policyVersionId: String) {
            self.policyName = policyName
            self.policyVersionId = policyVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case policyVersionId = "policyVersionId"
        }
    }

    public struct ThingTypeMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deprecated", required: false, type: .boolean), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "deprecationDate", required: false, type: .timestamp)
        ]
        /// Whether the thing type is deprecated. If true, no new things could be associated with this type.
        public let deprecated: Bool?
        /// The date and time when the thing type was created.
        public let creationDate: TimeStamp?
        /// The date and time when the thing type was deprecated.
        public let deprecationDate: TimeStamp?

        public init(deprecated: Bool? = nil, creationDate: TimeStamp? = nil, deprecationDate: TimeStamp? = nil) {
            self.deprecated = deprecated
            self.creationDate = creationDate
            self.deprecationDate = deprecationDate
        }

        private enum CodingKeys: String, CodingKey {
            case deprecated = "deprecated"
            case creationDate = "creationDate"
            case deprecationDate = "deprecationDate"
        }
    }

    public struct DeletePolicyVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string), 
            AWSShapeMember(label: "policyVersionId", location: .uri(locationName: "policyVersionId"), required: true, type: .string)
        ]
        /// The name of the policy.
        public let policyName: String
        /// The policy version ID.
        public let policyVersionId: String

        public init(policyName: String, policyVersionId: String) {
            self.policyName = policyName
            self.policyVersionId = policyVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case policyVersionId = "policyVersionId"
        }
    }

    public struct AttachThingPrincipalRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "principal", location: .header(locationName: "x-amzn-principal"), required: true, type: .string), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// The principal, such as a certificate or other credential.
        public let principal: String
        /// The name of the thing.
        public let thingName: String

        public init(principal: String, thingName: String) {
            self.principal = principal
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case principal = "x-amzn-principal"
            case thingName = "thingName"
        }
    }

    public struct ListThingRegistrationTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", location: .querystring(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The status of the bulk thing provisioning task.
        public let status: Status?
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// The token to retrieve the next set of results.
        public let nextToken: String?

        public init(status: Status? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.status = status
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public enum AlertTargetType: String, CustomStringConvertible, Codable {
        case sns = "SNS"
        public var description: String { return self.rawValue }
    }

    public struct DescribeScheduledAuditRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "scheduledAuditName", location: .uri(locationName: "scheduledAuditName"), required: true, type: .string)
        ]
        /// The name of the scheduled audit whose information you want to get.
        public let scheduledAuditName: String

        public init(scheduledAuditName: String) {
            self.scheduledAuditName = scheduledAuditName
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledAuditName = "scheduledAuditName"
        }
    }

    public struct DescribeBillingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "billingGroupName", location: .uri(locationName: "billingGroupName"), required: true, type: .string)
        ]
        /// The name of the billing group.
        public let billingGroupName: String

        public init(billingGroupName: String) {
            self.billingGroupName = billingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case billingGroupName = "billingGroupName"
        }
    }

    public struct DynamoDBAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "payloadField", required: false, type: .string), 
            AWSShapeMember(label: "rangeKeyType", required: false, type: .enum), 
            AWSShapeMember(label: "hashKeyField", required: true, type: .string), 
            AWSShapeMember(label: "rangeKeyValue", required: false, type: .string), 
            AWSShapeMember(label: "tableName", required: true, type: .string), 
            AWSShapeMember(label: "hashKeyType", required: false, type: .enum), 
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "operation", required: false, type: .string), 
            AWSShapeMember(label: "hashKeyValue", required: true, type: .string), 
            AWSShapeMember(label: "rangeKeyField", required: false, type: .string)
        ]
        /// The action payload. This name can be customized.
        public let payloadField: String?
        /// The range key type. Valid values are "STRING" or "NUMBER"
        public let rangeKeyType: DynamoKeyType?
        /// The hash key name.
        public let hashKeyField: String
        /// The range key value.
        public let rangeKeyValue: String?
        /// The name of the DynamoDB table.
        public let tableName: String
        /// The hash key type. Valid values are "STRING" or "NUMBER"
        public let hashKeyType: DynamoKeyType?
        /// The ARN of the IAM role that grants access to the DynamoDB table.
        public let roleArn: String
        /// The type of operation to be performed. This follows the substitution template, so it can be ${operation}, but the substitution must result in one of the following: INSERT, UPDATE, or DELETE.
        public let operation: String?
        /// The hash key value.
        public let hashKeyValue: String
        /// The range key name.
        public let rangeKeyField: String?

        public init(payloadField: String? = nil, rangeKeyType: DynamoKeyType? = nil, hashKeyField: String, rangeKeyValue: String? = nil, tableName: String, hashKeyType: DynamoKeyType? = nil, roleArn: String, operation: String? = nil, hashKeyValue: String, rangeKeyField: String? = nil) {
            self.payloadField = payloadField
            self.rangeKeyType = rangeKeyType
            self.hashKeyField = hashKeyField
            self.rangeKeyValue = rangeKeyValue
            self.tableName = tableName
            self.hashKeyType = hashKeyType
            self.roleArn = roleArn
            self.operation = operation
            self.hashKeyValue = hashKeyValue
            self.rangeKeyField = rangeKeyField
        }

        private enum CodingKeys: String, CodingKey {
            case payloadField = "payloadField"
            case rangeKeyType = "rangeKeyType"
            case hashKeyField = "hashKeyField"
            case rangeKeyValue = "rangeKeyValue"
            case tableName = "tableName"
            case hashKeyType = "hashKeyType"
            case roleArn = "roleArn"
            case operation = "operation"
            case hashKeyValue = "hashKeyValue"
            case rangeKeyField = "rangeKeyField"
        }
    }

    public struct CloudwatchAlarmAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stateValue", required: true, type: .string), 
            AWSShapeMember(label: "stateReason", required: true, type: .string), 
            AWSShapeMember(label: "alarmName", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
        public let stateValue: String
        /// The reason for the alarm change.
        public let stateReason: String
        /// The CloudWatch alarm name.
        public let alarmName: String
        /// The IAM role that allows access to the CloudWatch alarm.
        public let roleArn: String

        public init(stateValue: String, stateReason: String, alarmName: String, roleArn: String) {
            self.stateValue = stateValue
            self.stateReason = stateReason
            self.alarmName = alarmName
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case stateValue = "stateValue"
            case stateReason = "stateReason"
            case alarmName = "alarmName"
            case roleArn = "roleArn"
        }
    }

    public struct ListThingGroupsForThingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The thing name.
        public let thingName: String
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// The token to retrieve the next set of results.
        public let nextToken: String?

        public init(thingName: String, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.thingName = thingName
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct CreateStreamRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "streamId", location: .uri(locationName: "streamId"), required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "files", required: true, type: .list), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// The stream ID.
        public let streamId: String
        /// A description of the stream.
        public let description: String?
        /// The files to stream.
        public let files: [StreamFile]
        /// An IAM role that allows the IoT service principal assumes to access your S3 files.
        public let roleArn: String

        public init(streamId: String, description: String? = nil, files: [StreamFile], roleArn: String) {
            self.streamId = streamId
            self.description = description
            self.files = files
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case streamId = "streamId"
            case description = "description"
            case files = "files"
            case roleArn = "roleArn"
        }
    }

    public struct ThingConnectivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connected", required: false, type: .boolean), 
            AWSShapeMember(label: "timestamp", required: false, type: .long)
        ]
        /// True if the thing is connected to the AWS IoT service, false if it is not connected.
        public let connected: Bool?
        /// The epoch time (in milliseconds) when the thing last connected or disconnected. Note that if the thing has been disconnected for more than a few weeks, the time value can be missing.
        public let timestamp: Int64?

        public init(connected: Bool? = nil, timestamp: Int64? = nil) {
            self.connected = connected
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case connected = "connected"
            case timestamp = "timestamp"
        }
    }

    public struct StartOnDemandAuditTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskId", required: false, type: .string)
        ]
        /// The ID of the on-demand audit you started.
        public let taskId: String?

        public init(taskId: String? = nil) {
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case taskId = "taskId"
        }
    }

    public struct SnsAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "targetArn", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "messageFormat", required: false, type: .enum)
        ]
        /// The ARN of the SNS topic.
        public let targetArn: String
        /// The ARN of the IAM role that grants access.
        public let roleArn: String
        /// (Optional) The message format of the message to publish. Accepted values are "JSON" and "RAW". The default value of the attribute is "RAW". SNS uses this setting to determine if the payload should be parsed and relevant platform-specific bits of the payload should be extracted. To read more about SNS message formats, see http://docs.aws.amazon.com/sns/latest/dg/json-formats.html refer to their official documentation.
        public let messageFormat: MessageFormat?

        public init(targetArn: String, roleArn: String, messageFormat: MessageFormat? = nil) {
            self.targetArn = targetArn
            self.roleArn = roleArn
            self.messageFormat = messageFormat
        }

        private enum CodingKeys: String, CodingKey {
            case targetArn = "targetArn"
            case roleArn = "roleArn"
            case messageFormat = "messageFormat"
        }
    }

    public struct DescribeAccountAuditConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "auditCheckConfigurations", required: false, type: .map), 
            AWSShapeMember(label: "auditNotificationTargetConfigurations", required: false, type: .map), 
            AWSShapeMember(label: "roleArn", required: false, type: .string)
        ]
        /// Which audit checks are enabled and disabled for this account.
        public let auditCheckConfigurations: [String: AuditCheckConfiguration]?
        /// Information about the targets to which audit notifications are sent for this account.
        public let auditNotificationTargetConfigurations: [AuditNotificationType: AuditNotificationTarget]?
        /// The ARN of the role that grants permission to AWS IoT to access information about your devices, policies, certificates and other items as necessary when performing an audit. On the first call to UpdateAccountAuditConfiguration this parameter is required.
        public let roleArn: String?

        public init(auditCheckConfigurations: [String: AuditCheckConfiguration]? = nil, auditNotificationTargetConfigurations: [AuditNotificationType: AuditNotificationTarget]? = nil, roleArn: String? = nil) {
            self.auditCheckConfigurations = auditCheckConfigurations
            self.auditNotificationTargetConfigurations = auditNotificationTargetConfigurations
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case auditCheckConfigurations = "auditCheckConfigurations"
            case auditNotificationTargetConfigurations = "auditNotificationTargetConfigurations"
            case roleArn = "roleArn"
        }
    }

    public struct TransferData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "transferDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "transferMessage", required: false, type: .string), 
            AWSShapeMember(label: "acceptDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "rejectDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "rejectReason", required: false, type: .string)
        ]
        /// The date the transfer took place.
        public let transferDate: TimeStamp?
        /// The transfer message.
        public let transferMessage: String?
        /// The date the transfer was accepted.
        public let acceptDate: TimeStamp?
        /// The date the transfer was rejected.
        public let rejectDate: TimeStamp?
        /// The reason why the transfer was rejected.
        public let rejectReason: String?

        public init(transferDate: TimeStamp? = nil, transferMessage: String? = nil, acceptDate: TimeStamp? = nil, rejectDate: TimeStamp? = nil, rejectReason: String? = nil) {
            self.transferDate = transferDate
            self.transferMessage = transferMessage
            self.acceptDate = acceptDate
            self.rejectDate = rejectDate
            self.rejectReason = rejectReason
        }

        private enum CodingKeys: String, CodingKey {
            case transferDate = "transferDate"
            case transferMessage = "transferMessage"
            case acceptDate = "acceptDate"
            case rejectDate = "rejectDate"
            case rejectReason = "rejectReason"
        }
    }

    public struct DescribeSecurityProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileName", location: .uri(locationName: "securityProfileName"), required: true, type: .string)
        ]
        /// The name of the security profile whose information you want to get.
        public let securityProfileName: String

        public init(securityProfileName: String) {
            self.securityProfileName = securityProfileName
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileName = "securityProfileName"
        }
    }

    public struct EffectivePolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyArn", required: false, type: .string), 
            AWSShapeMember(label: "policyName", required: false, type: .string), 
            AWSShapeMember(label: "policyDocument", required: false, type: .string)
        ]
        /// The policy ARN.
        public let policyArn: String?
        /// The policy name.
        public let policyName: String?
        /// The IAM policy document.
        public let policyDocument: String?

        public init(policyArn: String? = nil, policyName: String? = nil, policyDocument: String? = nil) {
            self.policyArn = policyArn
            self.policyName = policyName
            self.policyDocument = policyDocument
        }

        private enum CodingKeys: String, CodingKey {
            case policyArn = "policyArn"
            case policyName = "policyName"
            case policyDocument = "policyDocument"
        }
    }

    public struct ViolationEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "violationId", required: false, type: .string), 
            AWSShapeMember(label: "behavior", required: false, type: .structure), 
            AWSShapeMember(label: "violationEventType", required: false, type: .enum), 
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "securityProfileName", required: false, type: .string), 
            AWSShapeMember(label: "violationEventTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "metricValue", required: false, type: .structure)
        ]
        /// The ID of the violation event.
        public let violationId: String?
        /// The behavior which was violated.
        public let behavior: Behavior?
        /// The type of violation event.
        public let violationEventType: ViolationEventType?
        /// The name of the thing responsible for the violation event.
        public let thingName: String?
        /// The name of the security profile whose behavior was violated.
        public let securityProfileName: String?
        /// The time the violation event occurred.
        public let violationEventTime: TimeStamp?
        /// The value of the metric (the measurement).
        public let metricValue: MetricValue?

        public init(violationId: String? = nil, behavior: Behavior? = nil, violationEventType: ViolationEventType? = nil, thingName: String? = nil, securityProfileName: String? = nil, violationEventTime: TimeStamp? = nil, metricValue: MetricValue? = nil) {
            self.violationId = violationId
            self.behavior = behavior
            self.violationEventType = violationEventType
            self.thingName = thingName
            self.securityProfileName = securityProfileName
            self.violationEventTime = violationEventTime
            self.metricValue = metricValue
        }

        private enum CodingKeys: String, CodingKey {
            case violationId = "violationId"
            case behavior = "behavior"
            case violationEventType = "violationEventType"
            case thingName = "thingName"
            case securityProfileName = "securityProfileName"
            case violationEventTime = "violationEventTime"
            case metricValue = "metricValue"
        }
    }

    public struct UpdateIndexingConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingIndexingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "thingGroupIndexingConfiguration", required: false, type: .structure)
        ]
        /// Thing indexing configuration.
        public let thingIndexingConfiguration: ThingIndexingConfiguration?
        /// Thing group indexing configuration.
        public let thingGroupIndexingConfiguration: ThingGroupIndexingConfiguration?

        public init(thingIndexingConfiguration: ThingIndexingConfiguration? = nil, thingGroupIndexingConfiguration: ThingGroupIndexingConfiguration? = nil) {
            self.thingIndexingConfiguration = thingIndexingConfiguration
            self.thingGroupIndexingConfiguration = thingGroupIndexingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case thingIndexingConfiguration = "thingIndexingConfiguration"
            case thingGroupIndexingConfiguration = "thingGroupIndexingConfiguration"
        }
    }

    public struct AddThingToBillingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "billingGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "thingArn", required: false, type: .string), 
            AWSShapeMember(label: "billingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "thingName", required: false, type: .string)
        ]
        /// The ARN of the billing group.
        public let billingGroupArn: String?
        /// The ARN of the thing to be added to the billing group.
        public let thingArn: String?
        /// The name of the billing group.
        public let billingGroupName: String?
        /// The name of the thing to be added to the billing group.
        public let thingName: String?

        public init(billingGroupArn: String? = nil, thingArn: String? = nil, billingGroupName: String? = nil, thingName: String? = nil) {
            self.billingGroupArn = billingGroupArn
            self.thingArn = thingArn
            self.billingGroupName = billingGroupName
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case billingGroupArn = "billingGroupArn"
            case thingArn = "thingArn"
            case billingGroupName = "billingGroupName"
            case thingName = "thingName"
        }
    }

    public struct CreateBillingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "billingGroupId", required: false, type: .string), 
            AWSShapeMember(label: "billingGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "billingGroupName", required: false, type: .string)
        ]
        /// The ID of the billing group.
        public let billingGroupId: String?
        /// The ARN of the billing group.
        public let billingGroupArn: String?
        /// The name you gave to the billing group.
        public let billingGroupName: String?

        public init(billingGroupId: String? = nil, billingGroupArn: String? = nil, billingGroupName: String? = nil) {
            self.billingGroupId = billingGroupId
            self.billingGroupArn = billingGroupArn
            self.billingGroupName = billingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case billingGroupId = "billingGroupId"
            case billingGroupArn = "billingGroupArn"
            case billingGroupName = "billingGroupName"
        }
    }

    public struct OutgoingCertificate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "transferDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "transferMessage", required: false, type: .string), 
            AWSShapeMember(label: "transferredTo", required: false, type: .string), 
            AWSShapeMember(label: "certificateId", required: false, type: .string), 
            AWSShapeMember(label: "certificateArn", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp)
        ]
        /// The date the transfer was initiated.
        public let transferDate: TimeStamp?
        /// The transfer message.
        public let transferMessage: String?
        /// The AWS account to which the transfer was made.
        public let transferredTo: String?
        /// The certificate ID.
        public let certificateId: String?
        /// The certificate ARN.
        public let certificateArn: String?
        /// The certificate creation date.
        public let creationDate: TimeStamp?

        public init(transferDate: TimeStamp? = nil, transferMessage: String? = nil, transferredTo: String? = nil, certificateId: String? = nil, certificateArn: String? = nil, creationDate: TimeStamp? = nil) {
            self.transferDate = transferDate
            self.transferMessage = transferMessage
            self.transferredTo = transferredTo
            self.certificateId = certificateId
            self.certificateArn = certificateArn
            self.creationDate = creationDate
        }

        private enum CodingKeys: String, CodingKey {
            case transferDate = "transferDate"
            case transferMessage = "transferMessage"
            case transferredTo = "transferredTo"
            case certificateId = "certificateId"
            case certificateArn = "certificateArn"
            case creationDate = "creationDate"
        }
    }

    public struct DeleteJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "force", location: .querystring(locationName: "force"), required: false, type: .boolean)
        ]
        /// The ID of the job to be deleted. After a job deletion is completed, you may reuse this jobId when you create a new job. However, this is not recommended, and you must ensure that your devices are not using the jobId to refer to the deleted job.
        public let jobId: String
        /// (Optional) When true, you can delete a job which is "IN_PROGRESS". Otherwise, you can only delete a job which is in a terminal state ("COMPLETED" or "CANCELED") or an exception will occur. The default is false.  Deleting a job which is "IN_PROGRESS", will cause a device which is executing the job to be unable to access job information or update the job execution status. Use caution and ensure that each device executing a job which is deleted is able to recover to a valid state. 
        public let force: Bool?

        public init(jobId: String, force: Bool? = nil) {
            self.jobId = jobId
            self.force = force
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
            case force = "force"
        }
    }

    public struct DeleteRegistrationCodeResponse: AWSShape {

    }

    public struct ListThingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingTypeName", location: .querystring(locationName: "thingTypeName"), required: false, type: .string), 
            AWSShapeMember(label: "attributeName", location: .querystring(locationName: "attributeName"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "attributeValue", location: .querystring(locationName: "attributeValue"), required: false, type: .string)
        ]
        /// The name of the thing type used to search for things.
        public let thingTypeName: String?
        /// The attribute name used to search for things.
        public let attributeName: String?
        /// The maximum number of results to return in this operation.
        public let maxResults: Int32?
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// The attribute value used to search for things.
        public let attributeValue: String?

        public init(thingTypeName: String? = nil, attributeName: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil, attributeValue: String? = nil) {
            self.thingTypeName = thingTypeName
            self.attributeName = attributeName
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.attributeValue = attributeValue
        }

        private enum CodingKeys: String, CodingKey {
            case thingTypeName = "thingTypeName"
            case attributeName = "attributeName"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case attributeValue = "attributeValue"
        }
    }

    public struct JobSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupId", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "targetSelection", required: false, type: .enum), 
            AWSShapeMember(label: "jobId", required: false, type: .string), 
            AWSShapeMember(label: "completedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "jobArn", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp)
        ]
        /// The ID of the thing group.
        public let thingGroupId: String?
        /// The time, in milliseconds since the epoch, when the job was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The job summary status.
        public let status: JobStatus?
        /// Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group.
        public let targetSelection: TargetSelection?
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String?
        /// The time, in milliseconds since the epoch, when the job completed.
        public let completedAt: TimeStamp?
        /// The job ARN.
        public let jobArn: String?
        /// The time, in milliseconds since the epoch, when the job was created.
        public let createdAt: TimeStamp?

        public init(thingGroupId: String? = nil, lastUpdatedAt: TimeStamp? = nil, status: JobStatus? = nil, targetSelection: TargetSelection? = nil, jobId: String? = nil, completedAt: TimeStamp? = nil, jobArn: String? = nil, createdAt: TimeStamp? = nil) {
            self.thingGroupId = thingGroupId
            self.lastUpdatedAt = lastUpdatedAt
            self.status = status
            self.targetSelection = targetSelection
            self.jobId = jobId
            self.completedAt = completedAt
            self.jobArn = jobArn
            self.createdAt = createdAt
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupId = "thingGroupId"
            case lastUpdatedAt = "lastUpdatedAt"
            case status = "status"
            case targetSelection = "targetSelection"
            case jobId = "jobId"
            case completedAt = "completedAt"
            case jobArn = "jobArn"
            case createdAt = "createdAt"
        }
    }

    public struct RegisterCACertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "caCertificate", required: true, type: .string), 
            AWSShapeMember(label: "verificationCertificate", required: true, type: .string), 
            AWSShapeMember(label: "allowAutoRegistration", location: .querystring(locationName: "allowAutoRegistration"), required: false, type: .boolean), 
            AWSShapeMember(label: "setAsActive", location: .querystring(locationName: "setAsActive"), required: false, type: .boolean), 
            AWSShapeMember(label: "registrationConfig", required: false, type: .structure)
        ]
        /// The CA certificate.
        public let caCertificate: String
        /// The private key verification certificate.
        public let verificationCertificate: String
        /// Allows this CA certificate to be used for auto registration of device certificates.
        public let allowAutoRegistration: Bool?
        /// A boolean value that specifies if the CA certificate is set to active.
        public let setAsActive: Bool?
        /// Information about the registration configuration.
        public let registrationConfig: RegistrationConfig?

        public init(caCertificate: String, verificationCertificate: String, allowAutoRegistration: Bool? = nil, setAsActive: Bool? = nil, registrationConfig: RegistrationConfig? = nil) {
            self.caCertificate = caCertificate
            self.verificationCertificate = verificationCertificate
            self.allowAutoRegistration = allowAutoRegistration
            self.setAsActive = setAsActive
            self.registrationConfig = registrationConfig
        }

        private enum CodingKeys: String, CodingKey {
            case caCertificate = "caCertificate"
            case verificationCertificate = "verificationCertificate"
            case allowAutoRegistration = "allowAutoRegistration"
            case setAsActive = "setAsActive"
            case registrationConfig = "registrationConfig"
        }
    }

    public struct ListCertificatesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificates", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The descriptions of the certificates.
        public let certificates: [Certificate]?
        /// The marker for the next set of results, or null if there are no additional results.
        public let nextMarker: String?

        public init(certificates: [Certificate]? = nil, nextMarker: String? = nil) {
            self.certificates = certificates
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "certificates"
            case nextMarker = "nextMarker"
        }
    }

    public struct CodeSigningCertificateChain: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "inlineDocument", required: false, type: .string), 
            AWSShapeMember(label: "certificateName", required: false, type: .string)
        ]
        /// A base64 encoded binary representation of the code signing certificate chain.
        public let inlineDocument: String?
        /// The name of the certificate.
        public let certificateName: String?

        public init(inlineDocument: String? = nil, certificateName: String? = nil) {
            self.inlineDocument = inlineDocument
            self.certificateName = certificateName
        }

        private enum CodingKeys: String, CodingKey {
            case inlineDocument = "inlineDocument"
            case certificateName = "certificateName"
        }
    }

    public struct RegisterThingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "templateBody", required: true, type: .string), 
            AWSShapeMember(label: "parameters", required: false, type: .map)
        ]
        /// The provisioning template. See Programmatic Provisioning for more information.
        public let templateBody: String
        /// The parameters for provisioning a thing. See Programmatic Provisioning for more information.
        public let parameters: [String: String]?

        public init(templateBody: String, parameters: [String: String]? = nil) {
            self.templateBody = templateBody
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case templateBody = "templateBody"
            case parameters = "parameters"
        }
    }

    public struct ListBillingGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "namePrefixFilter", location: .querystring(locationName: "namePrefixFilter"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// Limit the results to billing groups whose names have the given prefix.
        public let namePrefixFilter: String?
        /// The maximum number of results to return per request.
        public let maxResults: Int32?
        /// The token to retrieve the next set of results.
        public let nextToken: String?

        public init(namePrefixFilter: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.namePrefixFilter = namePrefixFilter
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case namePrefixFilter = "namePrefixFilter"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .list)
        ]
        /// The ARN of the resource.
        public let resourceArn: String
        /// The new or modified tags for the resource.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct ElasticsearchAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "endpoint", required: true, type: .string), 
            AWSShapeMember(label: "type", required: true, type: .string), 
            AWSShapeMember(label: "index", required: true, type: .string), 
            AWSShapeMember(label: "id", required: true, type: .string)
        ]
        /// The IAM role ARN that has access to Elasticsearch.
        public let roleArn: String
        /// The endpoint of your Elasticsearch domain.
        public let endpoint: String
        /// The type of document you are storing.
        public let `type`: String
        /// The Elasticsearch index where you want to store your data.
        public let index: String
        /// The unique identifier for the document you are storing.
        public let id: String

        public init(roleArn: String, endpoint: String, type: String, index: String, id: String) {
            self.roleArn = roleArn
            self.endpoint = endpoint
            self.`type` = `type`
            self.index = index
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case endpoint = "endpoint"
            case `type` = "type"
            case index = "index"
            case id = "id"
        }
    }

    public struct DescribeCACertificateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "registrationConfig", required: false, type: .structure), 
            AWSShapeMember(label: "certificateDescription", required: false, type: .structure)
        ]
        /// Information about the registration configuration.
        public let registrationConfig: RegistrationConfig?
        /// The CA certificate description.
        public let certificateDescription: CACertificateDescription?

        public init(registrationConfig: RegistrationConfig? = nil, certificateDescription: CACertificateDescription? = nil) {
            self.registrationConfig = registrationConfig
            self.certificateDescription = certificateDescription
        }

        private enum CodingKeys: String, CodingKey {
            case registrationConfig = "registrationConfig"
            case certificateDescription = "certificateDescription"
        }
    }

    public struct ThingIndexingConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingIndexingMode", required: true, type: .enum), 
            AWSShapeMember(label: "thingConnectivityIndexingMode", required: false, type: .enum)
        ]
        /// Thing indexing mode. Valid values are:   REGISTRY – Your thing index will contain only registry data.   REGISTRY_AND_SHADOW - Your thing index will contain registry and shadow data.   OFF - Thing indexing is disabled.  
        public let thingIndexingMode: ThingIndexingMode
        /// Thing connectivity indexing mode. Valid values are:    STATUS – Your thing index will contain connectivity status. In order to enable thing connectivity indexing, thingIndexMode must not be set to OFF.   OFF - Thing connectivity status indexing is disabled.  
        public let thingConnectivityIndexingMode: ThingConnectivityIndexingMode?

        public init(thingIndexingMode: ThingIndexingMode, thingConnectivityIndexingMode: ThingConnectivityIndexingMode? = nil) {
            self.thingIndexingMode = thingIndexingMode
            self.thingConnectivityIndexingMode = thingConnectivityIndexingMode
        }

        private enum CodingKeys: String, CodingKey {
            case thingIndexingMode = "thingIndexingMode"
            case thingConnectivityIndexingMode = "thingConnectivityIndexingMode"
        }
    }

    public struct DescribeThingRegistrationTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskId", location: .uri(locationName: "taskId"), required: true, type: .string)
        ]
        /// The task ID.
        public let taskId: String

        public init(taskId: String) {
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case taskId = "taskId"
        }
    }

    public struct SalesforceAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "url", required: true, type: .string), 
            AWSShapeMember(label: "token", required: true, type: .string)
        ]
        /// The URL exposed by the Salesforce IoT Cloud Input Stream. The URL is available from the Salesforce IoT Cloud platform after creation of the Input Stream.
        public let url: String
        /// The token used to authenticate access to the Salesforce IoT Cloud Input Stream. The token is available from the Salesforce IoT Cloud platform after creation of the Input Stream.
        public let token: String

        public init(url: String, token: String) {
            self.url = url
            self.token = token
        }

        private enum CodingKeys: String, CodingKey {
            case url = "url"
            case token = "token"
        }
    }

    public struct ClearDefaultAuthorizerResponse: AWSShape {

    }

    public struct DescribeEventConfigurationsRequest: AWSShape {

    }

    public struct DescribeCACertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "caCertificateId"), required: true, type: .string)
        ]
        /// The CA certificate identifier.
        public let certificateId: String

        public init(certificateId: String) {
            self.certificateId = certificateId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "caCertificateId"
        }
    }

    public struct UpdateEventConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "eventConfigurations", required: false, type: .map)
        ]
        /// The new event configuration values.
        public let eventConfigurations: [EventType: Configuration]?

        public init(eventConfigurations: [EventType: Configuration]? = nil) {
            self.eventConfigurations = eventConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case eventConfigurations = "eventConfigurations"
        }
    }

    public struct ListStreamsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "streams", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of streams.
        public let streams: [StreamSummary]?
        /// A token used to get the next set of results.
        public let nextToken: String?

        public init(streams: [StreamSummary]? = nil, nextToken: String? = nil) {
            self.streams = streams
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case streams = "streams"
            case nextToken = "nextToken"
        }
    }

    public struct AttachSecurityProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileName", location: .uri(locationName: "securityProfileName"), required: true, type: .string), 
            AWSShapeMember(label: "securityProfileTargetArn", location: .querystring(locationName: "securityProfileTargetArn"), required: true, type: .string)
        ]
        /// The security profile that is attached.
        public let securityProfileName: String
        /// The ARN of the target (thing group) to which the security profile is attached.
        public let securityProfileTargetArn: String

        public init(securityProfileName: String, securityProfileTargetArn: String) {
            self.securityProfileName = securityProfileName
            self.securityProfileTargetArn = securityProfileTargetArn
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileName = "securityProfileName"
            case securityProfileTargetArn = "securityProfileTargetArn"
        }
    }

    public struct AuthorizerSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerName", required: false, type: .string), 
            AWSShapeMember(label: "authorizerArn", required: false, type: .string)
        ]
        /// The authorizer name.
        public let authorizerName: String?
        /// The authorizer ARN.
        public let authorizerArn: String?

        public init(authorizerName: String? = nil, authorizerArn: String? = nil) {
            self.authorizerName = authorizerName
            self.authorizerArn = authorizerArn
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerName = "authorizerName"
            case authorizerArn = "authorizerArn"
        }
    }

    public struct GetV2LoggingOptionsRequest: AWSShape {

    }

    public struct CreateSecurityProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileDescription", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "behaviors", required: true, type: .list), 
            AWSShapeMember(label: "alertTargets", required: false, type: .map), 
            AWSShapeMember(label: "securityProfileName", location: .uri(locationName: "securityProfileName"), required: true, type: .string)
        ]
        /// A description of the security profile.
        public let securityProfileDescription: String?
        /// Metadata which can be used to manage the security profile.
        public let tags: [Tag]?
        /// Specifies the behaviors that, when violated by a device (thing), cause an alert.
        public let behaviors: [Behavior]
        /// Specifies the destinations to which alerts are sent. (Alerts are always sent to the console.) Alerts are generated when a device (thing) violates a behavior.
        public let alertTargets: [AlertTargetType: AlertTarget]?
        /// The name you are giving to the security profile.
        public let securityProfileName: String

        public init(securityProfileDescription: String? = nil, tags: [Tag]? = nil, behaviors: [Behavior], alertTargets: [AlertTargetType: AlertTarget]? = nil, securityProfileName: String) {
            self.securityProfileDescription = securityProfileDescription
            self.tags = tags
            self.behaviors = behaviors
            self.alertTargets = alertTargets
            self.securityProfileName = securityProfileName
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileDescription = "securityProfileDescription"
            case tags = "tags"
            case behaviors = "behaviors"
            case alertTargets = "alertTargets"
            case securityProfileName = "securityProfileName"
        }
    }

    public struct DeleteOTAUpdateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "forceDeleteAWSJob", location: .querystring(locationName: "forceDeleteAWSJob"), required: false, type: .boolean), 
            AWSShapeMember(label: "deleteStream", location: .querystring(locationName: "deleteStream"), required: false, type: .boolean), 
            AWSShapeMember(label: "otaUpdateId", location: .uri(locationName: "otaUpdateId"), required: true, type: .string)
        ]
        /// Specifies if the AWS Job associated with the OTA update should be deleted with the OTA update is deleted.
        public let forceDeleteAWSJob: Bool?
        /// Specifies if the stream associated with an OTA update should be deleted when the OTA update is deleted.
        public let deleteStream: Bool?
        /// The OTA update ID to delete.
        public let otaUpdateId: String

        public init(forceDeleteAWSJob: Bool? = nil, deleteStream: Bool? = nil, otaUpdateId: String) {
            self.forceDeleteAWSJob = forceDeleteAWSJob
            self.deleteStream = deleteStream
            self.otaUpdateId = otaUpdateId
        }

        private enum CodingKeys: String, CodingKey {
            case forceDeleteAWSJob = "forceDeleteAWSJob"
            case deleteStream = "deleteStream"
            case otaUpdateId = "otaUpdateId"
        }
    }

    public enum AuditFrequency: String, CustomStringConvertible, Codable {
        case daily = "DAILY"
        case weekly = "WEEKLY"
        case biweekly = "BIWEEKLY"
        case monthly = "MONTHLY"
        public var description: String { return self.rawValue }
    }

    public struct DescribeThingTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingTypeName", location: .uri(locationName: "thingTypeName"), required: true, type: .string)
        ]
        /// The name of the thing type.
        public let thingTypeName: String

        public init(thingTypeName: String) {
            self.thingTypeName = thingTypeName
        }

        private enum CodingKeys: String, CodingKey {
            case thingTypeName = "thingTypeName"
        }
    }

    public struct DeletePolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string)
        ]
        /// The name of the policy to delete.
        public let policyName: String

        public init(policyName: String) {
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
        }
    }

    public struct AlertTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "alertTargetArn", required: true, type: .string)
        ]
        /// The ARN of the role that grants permission to send alerts to the notification target.
        public let roleArn: String
        /// The ARN of the notification target to which alerts are sent.
        public let alertTargetArn: String

        public init(roleArn: String, alertTargetArn: String) {
            self.roleArn = roleArn
            self.alertTargetArn = alertTargetArn
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case alertTargetArn = "alertTargetArn"
        }
    }

    public struct UpdateSecurityProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileDescription", required: false, type: .string), 
            AWSShapeMember(label: "behaviors", required: false, type: .list), 
            AWSShapeMember(label: "alertTargets", required: false, type: .map), 
            AWSShapeMember(label: "expectedVersion", location: .querystring(locationName: "expectedVersion"), required: false, type: .long), 
            AWSShapeMember(label: "securityProfileName", location: .uri(locationName: "securityProfileName"), required: true, type: .string)
        ]
        /// A description of the security profile.
        public let securityProfileDescription: String?
        /// Specifies the behaviors that, when violated by a device (thing), cause an alert.
        public let behaviors: [Behavior]?
        /// Where the alerts are sent. (Alerts are always sent to the console.)
        public let alertTargets: [AlertTargetType: AlertTarget]?
        /// The expected version of the security profile. A new version is generated whenever the security profile is updated. If you specify a value that is different than the actual version, a VersionConflictException is thrown.
        public let expectedVersion: Int64?
        /// The name of the security profile you want to update.
        public let securityProfileName: String

        public init(securityProfileDescription: String? = nil, behaviors: [Behavior]? = nil, alertTargets: [AlertTargetType: AlertTarget]? = nil, expectedVersion: Int64? = nil, securityProfileName: String) {
            self.securityProfileDescription = securityProfileDescription
            self.behaviors = behaviors
            self.alertTargets = alertTargets
            self.expectedVersion = expectedVersion
            self.securityProfileName = securityProfileName
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileDescription = "securityProfileDescription"
            case behaviors = "behaviors"
            case alertTargets = "alertTargets"
            case expectedVersion = "expectedVersion"
            case securityProfileName = "securityProfileName"
        }
    }

    public struct ListJobExecutionsForJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "status", location: .querystring(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string)
        ]
        /// The maximum number of results to be returned per request.
        public let maxResults: Int32?
        /// The status of the job.
        public let status: JobExecutionStatus?
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String

        public init(maxResults: Int32? = nil, status: JobExecutionStatus? = nil, nextToken: String? = nil, jobId: String) {
            self.maxResults = maxResults
            self.status = status
            self.nextToken = nextToken
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case status = "status"
            case nextToken = "nextToken"
            case jobId = "jobId"
        }
    }

    public struct RemoveThingFromThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "thingArn", required: false, type: .string), 
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupName", required: false, type: .string)
        ]
        /// The group ARN.
        public let thingGroupArn: String?
        /// The ARN of the thing to remove from the group.
        public let thingArn: String?
        /// The name of the thing to remove from the group.
        public let thingName: String?
        /// The group name.
        public let thingGroupName: String?

        public init(thingGroupArn: String? = nil, thingArn: String? = nil, thingName: String? = nil, thingGroupName: String? = nil) {
            self.thingGroupArn = thingGroupArn
            self.thingArn = thingArn
            self.thingName = thingName
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupArn = "thingGroupArn"
            case thingArn = "thingArn"
            case thingName = "thingName"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct ListViolationEventsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "violationEvents", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The security profile violation alerts issued for this account during the given time frame, potentially filtered by security profile, behavior violated, or thing (device) violating.
        public let violationEvents: [ViolationEvent]?
        /// A token that can be used to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(violationEvents: [ViolationEvent]? = nil, nextToken: String? = nil) {
            self.violationEvents = violationEvents
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case violationEvents = "violationEvents"
            case nextToken = "nextToken"
        }
    }

    public enum LogTargetType: String, CustomStringConvertible, Codable {
        case `default` = "DEFAULT"
        case thingGroup = "THING_GROUP"
        public var description: String { return self.rawValue }
    }

    public struct ListTargetsForPolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "targets", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The policy targets.
        public let targets: [String]?
        /// A marker used to get the next set of results.
        public let nextMarker: String?

        public init(targets: [String]? = nil, nextMarker: String? = nil) {
            self.targets = targets
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case targets = "targets"
            case nextMarker = "nextMarker"
        }
    }

    public struct UpdateThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupName", location: .uri(locationName: "thingGroupName"), required: true, type: .string), 
            AWSShapeMember(label: "expectedVersion", required: false, type: .long), 
            AWSShapeMember(label: "thingGroupProperties", required: true, type: .structure)
        ]
        /// The thing group to update.
        public let thingGroupName: String
        /// The expected version of the thing group. If this does not match the version of the thing group being updated, the update will fail.
        public let expectedVersion: Int64?
        /// The thing group properties.
        public let thingGroupProperties: ThingGroupProperties

        public init(thingGroupName: String, expectedVersion: Int64? = nil, thingGroupProperties: ThingGroupProperties) {
            self.thingGroupName = thingGroupName
            self.expectedVersion = expectedVersion
            self.thingGroupProperties = thingGroupProperties
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupName = "thingGroupName"
            case expectedVersion = "expectedVersion"
            case thingGroupProperties = "thingGroupProperties"
        }
    }

    public struct ListPolicyVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string)
        ]
        /// The policy name.
        public let policyName: String

        public init(policyName: String) {
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
        }
    }

    public struct RegistrationConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "templateBody", required: false, type: .string)
        ]
        /// The ARN of the role.
        public let roleArn: String?
        /// The template body.
        public let templateBody: String?

        public init(roleArn: String? = nil, templateBody: String? = nil) {
            self.roleArn = roleArn
            self.templateBody = templateBody
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case templateBody = "templateBody"
        }
    }

    public enum CACertificateStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
        public var description: String { return self.rawValue }
    }

    public struct StartThingRegistrationTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskId", required: false, type: .string)
        ]
        /// The bulk thing provisioning task ID.
        public let taskId: String?

        public init(taskId: String? = nil) {
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case taskId = "taskId"
        }
    }

    public struct ListThingsInBillingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "billingGroupName", location: .uri(locationName: "billingGroupName"), required: true, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The name of the billing group.
        public let billingGroupName: String
        /// The maximum number of results to return per request.
        public let maxResults: Int32?
        /// The token to retrieve the next set of results.
        public let nextToken: String?

        public init(billingGroupName: String, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.billingGroupName = billingGroupName
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case billingGroupName = "billingGroupName"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeCertificateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateDescription", required: false, type: .structure)
        ]
        /// The description of the certificate.
        public let certificateDescription: CertificateDescription?

        public init(certificateDescription: CertificateDescription? = nil) {
            self.certificateDescription = certificateDescription
        }

        private enum CodingKeys: String, CodingKey {
            case certificateDescription = "certificateDescription"
        }
    }

    public struct DeleteDynamicThingGroupResponse: AWSShape {

    }

    public struct GetIndexingConfigurationRequest: AWSShape {

    }

    public struct CancelAuditTaskResponse: AWSShape {

    }

    public struct GetPolicyVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string), 
            AWSShapeMember(label: "policyVersionId", location: .uri(locationName: "policyVersionId"), required: true, type: .string)
        ]
        /// The name of the policy.
        public let policyName: String
        /// The policy version ID.
        public let policyVersionId: String

        public init(policyName: String, policyVersionId: String) {
            self.policyName = policyName
            self.policyVersionId = policyVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case policyVersionId = "policyVersionId"
        }
    }

    public struct CreateDynamicThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "queryString", required: true, type: .string), 
            AWSShapeMember(label: "indexName", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "queryVersion", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupProperties", required: false, type: .structure), 
            AWSShapeMember(label: "thingGroupName", location: .uri(locationName: "thingGroupName"), required: true, type: .string)
        ]
        /// The dynamic thing group search query string. See Query Syntax for information about query string syntax.
        public let queryString: String
        /// The dynamic thing group index name.  Currently one index is supported: "AWS_Things". 
        public let indexName: String?
        /// Metadata which can be used to manage the dynamic thing group.
        public let tags: [Tag]?
        /// The dynamic thing group query version.  Currently one query version is supported: "2017-09-30". If not specified, the query version defaults to this value. 
        public let queryVersion: String?
        /// The dynamic thing group properties.
        public let thingGroupProperties: ThingGroupProperties?
        /// The dynamic thing group name to create.
        public let thingGroupName: String

        public init(queryString: String, indexName: String? = nil, tags: [Tag]? = nil, queryVersion: String? = nil, thingGroupProperties: ThingGroupProperties? = nil, thingGroupName: String) {
            self.queryString = queryString
            self.indexName = indexName
            self.tags = tags
            self.queryVersion = queryVersion
            self.thingGroupProperties = thingGroupProperties
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case queryString = "queryString"
            case indexName = "indexName"
            case tags = "tags"
            case queryVersion = "queryVersion"
            case thingGroupProperties = "thingGroupProperties"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct BehaviorCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "comparisonOperator", required: false, type: .enum), 
            AWSShapeMember(label: "value", required: false, type: .structure), 
            AWSShapeMember(label: "durationSeconds", required: false, type: .integer)
        ]
        /// The operator that relates the thing measured (metric) to the criteria (value).
        public let comparisonOperator: ComparisonOperator?
        /// The value to be compared with the metric.
        public let value: MetricValue?
        /// Use this to specify the period of time over which the behavior is evaluated, for those criteria which have a time dimension (for example, NUM_MESSAGES_SENT).
        public let durationSeconds: Int32?

        public init(comparisonOperator: ComparisonOperator? = nil, value: MetricValue? = nil, durationSeconds: Int32? = nil) {
            self.comparisonOperator = comparisonOperator
            self.value = value
            self.durationSeconds = durationSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case comparisonOperator = "comparisonOperator"
            case value = "value"
            case durationSeconds = "durationSeconds"
        }
    }

    public struct ClearDefaultAuthorizerRequest: AWSShape {

    }

    public struct UpdateBillingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "version", required: false, type: .long)
        ]
        /// The latest version of the billing group.
        public let version: Int64?

        public init(version: Int64? = nil) {
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case version = "version"
        }
    }

    public struct DynamoDBv2Action: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "putItem", required: false, type: .structure), 
            AWSShapeMember(label: "roleArn", required: false, type: .string)
        ]
        /// Specifies the DynamoDB table to which the message data will be written. For example:  { "dynamoDBv2": { "roleArn": "aws:iam:12341251:my-role" "putItem": { "tableName": "my-table" } } }  Each attribute in the message payload will be written to a separate column in the DynamoDB database.
        public let putItem: PutItemInput?
        /// The ARN of the IAM role that grants access to the DynamoDB table.
        public let roleArn: String?

        public init(putItem: PutItemInput? = nil, roleArn: String? = nil) {
            self.putItem = putItem
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case putItem = "putItem"
            case roleArn = "roleArn"
        }
    }

    public struct DescribeAuditTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskId", location: .uri(locationName: "taskId"), required: true, type: .string)
        ]
        /// The ID of the audit whose information you want to get.
        public let taskId: String

        public init(taskId: String) {
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case taskId = "taskId"
        }
    }

    public struct ListTopicRulesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rules", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The rules.
        public let rules: [TopicRuleListItem]?
        /// A token used to retrieve the next value.
        public let nextToken: String?

        public init(rules: [TopicRuleListItem]? = nil, nextToken: String? = nil) {
            self.rules = rules
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case rules = "rules"
            case nextToken = "nextToken"
        }
    }

    public struct CodeSigning: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "customCodeSigning", required: false, type: .structure), 
            AWSShapeMember(label: "awsSignerJobId", required: false, type: .string), 
            AWSShapeMember(label: "startSigningJobParameter", required: false, type: .structure)
        ]
        /// A custom method for code signing a file.
        public let customCodeSigning: CustomCodeSigning?
        /// The ID of the AWSSignerJob which was created to sign the file.
        public let awsSignerJobId: String?
        /// Describes the code-signing job.
        public let startSigningJobParameter: StartSigningJobParameter?

        public init(customCodeSigning: CustomCodeSigning? = nil, awsSignerJobId: String? = nil, startSigningJobParameter: StartSigningJobParameter? = nil) {
            self.customCodeSigning = customCodeSigning
            self.awsSignerJobId = awsSignerJobId
            self.startSigningJobParameter = startSigningJobParameter
        }

        private enum CodingKeys: String, CodingKey {
            case customCodeSigning = "customCodeSigning"
            case awsSignerJobId = "awsSignerJobId"
            case startSigningJobParameter = "startSigningJobParameter"
        }
    }

    public struct DescribeThingTypeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingTypeName", required: false, type: .string), 
            AWSShapeMember(label: "thingTypeProperties", required: false, type: .structure), 
            AWSShapeMember(label: "thingTypeMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "thingTypeId", required: false, type: .string), 
            AWSShapeMember(label: "thingTypeArn", required: false, type: .string)
        ]
        /// The name of the thing type.
        public let thingTypeName: String?
        /// The ThingTypeProperties contains information about the thing type including description, and a list of searchable thing attribute names.
        public let thingTypeProperties: ThingTypeProperties?
        /// The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when it was deprecated.
        public let thingTypeMetadata: ThingTypeMetadata?
        /// The thing type ID.
        public let thingTypeId: String?
        /// The thing type ARN.
        public let thingTypeArn: String?

        public init(thingTypeName: String? = nil, thingTypeProperties: ThingTypeProperties? = nil, thingTypeMetadata: ThingTypeMetadata? = nil, thingTypeId: String? = nil, thingTypeArn: String? = nil) {
            self.thingTypeName = thingTypeName
            self.thingTypeProperties = thingTypeProperties
            self.thingTypeMetadata = thingTypeMetadata
            self.thingTypeId = thingTypeId
            self.thingTypeArn = thingTypeArn
        }

        private enum CodingKeys: String, CodingKey {
            case thingTypeName = "thingTypeName"
            case thingTypeProperties = "thingTypeProperties"
            case thingTypeMetadata = "thingTypeMetadata"
            case thingTypeId = "thingTypeId"
            case thingTypeArn = "thingTypeArn"
        }
    }

    public struct EnableTopicRuleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ruleName", location: .uri(locationName: "ruleName"), required: true, type: .string)
        ]
        /// The name of the topic rule to enable.
        public let ruleName: String

        public init(ruleName: String) {
            self.ruleName = ruleName
        }

        private enum CodingKeys: String, CodingKey {
            case ruleName = "ruleName"
        }
    }

    public struct DeleteRegistrationCodeRequest: AWSShape {

    }

    public struct CreateScheduledAuditRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "targetCheckNames", required: true, type: .list), 
            AWSShapeMember(label: "dayOfMonth", required: false, type: .string), 
            AWSShapeMember(label: "frequency", required: true, type: .enum), 
            AWSShapeMember(label: "scheduledAuditName", location: .uri(locationName: "scheduledAuditName"), required: true, type: .string), 
            AWSShapeMember(label: "dayOfWeek", required: false, type: .enum)
        ]
        /// Which checks are performed during the scheduled audit. Checks must be enabled for your account. (Use DescribeAccountAuditConfiguration to see the list of all checks including those that are enabled or UpdateAccountAuditConfiguration to select which checks are enabled.)
        public let targetCheckNames: [String]
        /// The day of the month on which the scheduled audit takes place. Can be "1" through "31" or "LAST". This field is required if the "frequency" parameter is set to "MONTHLY". If days 29-31 are specified, and the month does not have that many days, the audit takes place on the "LAST" day of the month.
        public let dayOfMonth: String?
        /// How often the scheduled audit takes place. Can be one of "DAILY", "WEEKLY", "BIWEEKLY" or "MONTHLY". The actual start time of each audit is determined by the system.
        public let frequency: AuditFrequency
        /// The name you want to give to the scheduled audit. (Max. 128 chars)
        public let scheduledAuditName: String
        /// The day of the week on which the scheduled audit takes place. Can be one of "SUN", "MON", "TUE", "WED", "THU", "FRI" or "SAT". This field is required if the "frequency" parameter is set to "WEEKLY" or "BIWEEKLY".
        public let dayOfWeek: DayOfWeek?

        public init(targetCheckNames: [String], dayOfMonth: String? = nil, frequency: AuditFrequency, scheduledAuditName: String, dayOfWeek: DayOfWeek? = nil) {
            self.targetCheckNames = targetCheckNames
            self.dayOfMonth = dayOfMonth
            self.frequency = frequency
            self.scheduledAuditName = scheduledAuditName
            self.dayOfWeek = dayOfWeek
        }

        private enum CodingKeys: String, CodingKey {
            case targetCheckNames = "targetCheckNames"
            case dayOfMonth = "dayOfMonth"
            case frequency = "frequency"
            case scheduledAuditName = "scheduledAuditName"
            case dayOfWeek = "dayOfWeek"
        }
    }

    public struct ListJobExecutionsForJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "executionSummaries", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of job execution summaries.
        public let executionSummaries: [JobExecutionSummaryForJob]?
        /// The token for the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(executionSummaries: [JobExecutionSummaryForJob]? = nil, nextToken: String? = nil) {
            self.executionSummaries = executionSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case executionSummaries = "executionSummaries"
            case nextToken = "nextToken"
        }
    }

    public enum ThingIndexingMode: String, CustomStringConvertible, Codable {
        case off = "OFF"
        case registry = "REGISTRY"
        case registryAndShadow = "REGISTRY_AND_SHADOW"
        public var description: String { return self.rawValue }
    }

    public struct UpdateStreamRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "streamId", location: .uri(locationName: "streamId"), required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "files", required: false, type: .list), 
            AWSShapeMember(label: "roleArn", required: false, type: .string)
        ]
        /// The stream ID.
        public let streamId: String
        /// The description of the stream.
        public let description: String?
        /// The files associated with the stream.
        public let files: [StreamFile]?
        /// An IAM role that allows the IoT service principal assumes to access your S3 files.
        public let roleArn: String?

        public init(streamId: String, description: String? = nil, files: [StreamFile]? = nil, roleArn: String? = nil) {
            self.streamId = streamId
            self.description = description
            self.files = files
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case streamId = "streamId"
            case description = "description"
            case files = "files"
            case roleArn = "roleArn"
        }
    }

    public struct RegisterCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "caCertificatePem", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "certificatePem", required: true, type: .string), 
            AWSShapeMember(label: "setAsActive", location: .querystring(locationName: "setAsActive"), required: false, type: .boolean)
        ]
        /// The CA certificate used to sign the device certificate being registered.
        public let caCertificatePem: String?
        /// The status of the register certificate request.
        public let status: CertificateStatus?
        /// The certificate data, in PEM format.
        public let certificatePem: String
        /// A boolean value that specifies if the CA certificate is set to active.
        public let setAsActive: Bool?

        public init(caCertificatePem: String? = nil, status: CertificateStatus? = nil, certificatePem: String, setAsActive: Bool? = nil) {
            self.caCertificatePem = caCertificatePem
            self.status = status
            self.certificatePem = certificatePem
            self.setAsActive = setAsActive
        }

        private enum CodingKeys: String, CodingKey {
            case caCertificatePem = "caCertificatePem"
            case status = "status"
            case certificatePem = "certificatePem"
            case setAsActive = "setAsActive"
        }
    }

    public struct PolicyVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "versionId", required: false, type: .string), 
            AWSShapeMember(label: "isDefaultVersion", required: false, type: .boolean), 
            AWSShapeMember(label: "createDate", required: false, type: .timestamp)
        ]
        /// The policy version ID.
        public let versionId: String?
        /// Specifies whether the policy version is the default.
        public let isDefaultVersion: Bool?
        /// The date and time the policy was created.
        public let createDate: TimeStamp?

        public init(versionId: String? = nil, isDefaultVersion: Bool? = nil, createDate: TimeStamp? = nil) {
            self.versionId = versionId
            self.isDefaultVersion = isDefaultVersion
            self.createDate = createDate
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "versionId"
            case isDefaultVersion = "isDefaultVersion"
            case createDate = "createDate"
        }
    }

    public struct ListBillingGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "billingGroups", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The list of billing groups.
        public let billingGroups: [GroupNameAndArn]?
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(billingGroups: [GroupNameAndArn]? = nil, nextToken: String? = nil) {
            self.billingGroups = billingGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case billingGroups = "billingGroups"
            case nextToken = "nextToken"
        }
    }

    public enum AuditFindingSeverity: String, CustomStringConvertible, Codable {
        case critical = "CRITICAL"
        case high = "HIGH"
        case medium = "MEDIUM"
        case low = "LOW"
        public var description: String { return self.rawValue }
    }

    public struct AuditCheckDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "checkCompliant", required: false, type: .boolean), 
            AWSShapeMember(label: "totalResourcesCount", required: false, type: .long), 
            AWSShapeMember(label: "errorCode", required: false, type: .string), 
            AWSShapeMember(label: "message", required: false, type: .string), 
            AWSShapeMember(label: "nonCompliantResourcesCount", required: false, type: .long), 
            AWSShapeMember(label: "checkRunStatus", required: false, type: .enum)
        ]
        /// True if the check completed and found all resources compliant.
        public let checkCompliant: Bool?
        /// The number of resources on which the check was performed.
        public let totalResourcesCount: Int64?
        /// The code of any error encountered when performing this check during this audit. One of "INSUFFICIENT_PERMISSIONS", or "AUDIT_CHECK_DISABLED".
        public let errorCode: String?
        /// The message associated with any error encountered when performing this check during this audit.
        public let message: String?
        /// The number of resources that the check found non-compliant.
        public let nonCompliantResourcesCount: Int64?
        /// The completion status of this check, one of "IN_PROGRESS", "WAITING_FOR_DATA_COLLECTION", "CANCELED", "COMPLETED_COMPLIANT", "COMPLETED_NON_COMPLIANT", or "FAILED".
        public let checkRunStatus: AuditCheckRunStatus?

        public init(checkCompliant: Bool? = nil, totalResourcesCount: Int64? = nil, errorCode: String? = nil, message: String? = nil, nonCompliantResourcesCount: Int64? = nil, checkRunStatus: AuditCheckRunStatus? = nil) {
            self.checkCompliant = checkCompliant
            self.totalResourcesCount = totalResourcesCount
            self.errorCode = errorCode
            self.message = message
            self.nonCompliantResourcesCount = nonCompliantResourcesCount
            self.checkRunStatus = checkRunStatus
        }

        private enum CodingKeys: String, CodingKey {
            case checkCompliant = "checkCompliant"
            case totalResourcesCount = "totalResourcesCount"
            case errorCode = "errorCode"
            case message = "message"
            case nonCompliantResourcesCount = "nonCompliantResourcesCount"
            case checkRunStatus = "checkRunStatus"
        }
    }

    public struct Certificate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "certificateArn", required: false, type: .string)
        ]
        /// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
        public let certificateId: String?
        /// The status of the certificate. The status value REGISTER_INACTIVE is deprecated and should not be used.
        public let status: CertificateStatus?
        /// The date and time the certificate was created.
        public let creationDate: TimeStamp?
        /// The ARN of the certificate.
        public let certificateArn: String?

        public init(certificateId: String? = nil, status: CertificateStatus? = nil, creationDate: TimeStamp? = nil, certificateArn: String? = nil) {
            self.certificateId = certificateId
            self.status = status
            self.creationDate = creationDate
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "certificateId"
            case status = "status"
            case creationDate = "creationDate"
            case certificateArn = "certificateArn"
        }
    }

    public struct DetachPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string), 
            AWSShapeMember(label: "target", required: true, type: .string)
        ]
        /// The policy to detach.
        public let policyName: String
        /// The target from which the policy will be detached.
        public let target: String

        public init(policyName: String, target: String) {
            self.policyName = policyName
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case target = "target"
        }
    }

    public struct TransferCertificateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "transferredCertificateArn", required: false, type: .string)
        ]
        /// The ARN of the certificate.
        public let transferredCertificateArn: String?

        public init(transferredCertificateArn: String? = nil) {
            self.transferredCertificateArn = transferredCertificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case transferredCertificateArn = "transferredCertificateArn"
        }
    }

    public struct StreamFile: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fileId", required: false, type: .integer), 
            AWSShapeMember(label: "s3Location", required: false, type: .structure)
        ]
        /// The file ID.
        public let fileId: Int32?
        /// The location of the file in S3.
        public let s3Location: S3Location?

        public init(fileId: Int32? = nil, s3Location: S3Location? = nil) {
            self.fileId = fileId
            self.s3Location = s3Location
        }

        private enum CodingKeys: String, CodingKey {
            case fileId = "fileId"
            case s3Location = "s3Location"
        }
    }

    public struct DescribeScheduledAuditResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dayOfWeek", required: false, type: .enum), 
            AWSShapeMember(label: "targetCheckNames", required: false, type: .list), 
            AWSShapeMember(label: "dayOfMonth", required: false, type: .string), 
            AWSShapeMember(label: "scheduledAuditArn", required: false, type: .string), 
            AWSShapeMember(label: "scheduledAuditName", required: false, type: .string), 
            AWSShapeMember(label: "frequency", required: false, type: .enum)
        ]
        /// The day of the week on which the scheduled audit takes place. One of "SUN", "MON", "TUE", "WED", "THU", "FRI" or "SAT".
        public let dayOfWeek: DayOfWeek?
        /// Which checks are performed during the scheduled audit. (Note that checks must be enabled for your account. (Use DescribeAccountAuditConfiguration to see the list of all checks including those that are enabled or UpdateAccountAuditConfiguration to select which checks are enabled.)
        public let targetCheckNames: [String]?
        /// The day of the month on which the scheduled audit takes place. Will be "1" through "31" or "LAST". If days 29-31 are specified, and the month does not have that many days, the audit takes place on the "LAST" day of the month.
        public let dayOfMonth: String?
        /// The ARN of the scheduled audit.
        public let scheduledAuditArn: String?
        /// The name of the scheduled audit.
        public let scheduledAuditName: String?
        /// How often the scheduled audit takes place. One of "DAILY", "WEEKLY", "BIWEEKLY" or "MONTHLY". The actual start time of each audit is determined by the system.
        public let frequency: AuditFrequency?

        public init(dayOfWeek: DayOfWeek? = nil, targetCheckNames: [String]? = nil, dayOfMonth: String? = nil, scheduledAuditArn: String? = nil, scheduledAuditName: String? = nil, frequency: AuditFrequency? = nil) {
            self.dayOfWeek = dayOfWeek
            self.targetCheckNames = targetCheckNames
            self.dayOfMonth = dayOfMonth
            self.scheduledAuditArn = scheduledAuditArn
            self.scheduledAuditName = scheduledAuditName
            self.frequency = frequency
        }

        private enum CodingKeys: String, CodingKey {
            case dayOfWeek = "dayOfWeek"
            case targetCheckNames = "targetCheckNames"
            case dayOfMonth = "dayOfMonth"
            case scheduledAuditArn = "scheduledAuditArn"
            case scheduledAuditName = "scheduledAuditName"
            case frequency = "frequency"
        }
    }

    public struct ThingGroupIndexingConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupIndexingMode", required: true, type: .enum)
        ]
        /// Thing group indexing mode.
        public let thingGroupIndexingMode: ThingGroupIndexingMode

        public init(thingGroupIndexingMode: ThingGroupIndexingMode) {
            self.thingGroupIndexingMode = thingGroupIndexingMode
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupIndexingMode = "thingGroupIndexingMode"
        }
    }

    public struct SearchIndexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "queryString", required: true, type: .string), 
            AWSShapeMember(label: "indexName", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "queryVersion", required: false, type: .string)
        ]
        /// The search query string.
        public let queryString: String
        /// The search index name.
        public let indexName: String?
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The query version.
        public let queryVersion: String?

        public init(queryString: String, indexName: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil, queryVersion: String? = nil) {
            self.queryString = queryString
            self.indexName = indexName
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.queryVersion = queryVersion
        }

        private enum CodingKeys: String, CodingKey {
            case queryString = "queryString"
            case indexName = "indexName"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case queryVersion = "queryVersion"
        }
    }

    public struct AuditFinding: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "reasonForNonCompliance", required: false, type: .string), 
            AWSShapeMember(label: "checkName", required: false, type: .string), 
            AWSShapeMember(label: "findingTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "severity", required: false, type: .enum), 
            AWSShapeMember(label: "relatedResources", required: false, type: .list), 
            AWSShapeMember(label: "taskId", required: false, type: .string), 
            AWSShapeMember(label: "reasonForNonComplianceCode", required: false, type: .string), 
            AWSShapeMember(label: "taskStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "nonCompliantResource", required: false, type: .structure)
        ]
        /// The reason the resource was non-compliant.
        public let reasonForNonCompliance: String?
        /// The audit check that generated this result.
        public let checkName: String?
        /// The time the result (finding) was discovered.
        public let findingTime: TimeStamp?
        /// The severity of the result (finding).
        public let severity: AuditFindingSeverity?
        /// The list of related resources.
        public let relatedResources: [RelatedResource]?
        /// The ID of the audit that generated this result (finding)
        public let taskId: String?
        /// A code which indicates the reason that the resource was non-compliant.
        public let reasonForNonComplianceCode: String?
        /// The time the audit started.
        public let taskStartTime: TimeStamp?
        /// The resource that was found to be non-compliant with the audit check.
        public let nonCompliantResource: NonCompliantResource?

        public init(reasonForNonCompliance: String? = nil, checkName: String? = nil, findingTime: TimeStamp? = nil, severity: AuditFindingSeverity? = nil, relatedResources: [RelatedResource]? = nil, taskId: String? = nil, reasonForNonComplianceCode: String? = nil, taskStartTime: TimeStamp? = nil, nonCompliantResource: NonCompliantResource? = nil) {
            self.reasonForNonCompliance = reasonForNonCompliance
            self.checkName = checkName
            self.findingTime = findingTime
            self.severity = severity
            self.relatedResources = relatedResources
            self.taskId = taskId
            self.reasonForNonComplianceCode = reasonForNonComplianceCode
            self.taskStartTime = taskStartTime
            self.nonCompliantResource = nonCompliantResource
        }

        private enum CodingKeys: String, CodingKey {
            case reasonForNonCompliance = "reasonForNonCompliance"
            case checkName = "checkName"
            case findingTime = "findingTime"
            case severity = "severity"
            case relatedResources = "relatedResources"
            case taskId = "taskId"
            case reasonForNonComplianceCode = "reasonForNonComplianceCode"
            case taskStartTime = "taskStartTime"
            case nonCompliantResource = "nonCompliantResource"
        }
    }

    public struct DescribeJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string)
        ]
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
        }
    }

    public struct DescribeCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "certificateId"), required: true, type: .string)
        ]
        /// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
        public let certificateId: String

        public init(certificateId: String) {
            self.certificateId = certificateId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "certificateId"
        }
    }

    public struct CreateKeysAndCertificateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "keyPair", required: false, type: .structure), 
            AWSShapeMember(label: "certificateId", required: false, type: .string), 
            AWSShapeMember(label: "certificatePem", required: false, type: .string), 
            AWSShapeMember(label: "certificateArn", required: false, type: .string)
        ]
        /// The generated key pair.
        public let keyPair: KeyPair?
        /// The ID of the certificate. AWS IoT issues a default subject name for the certificate (for example, AWS IoT Certificate).
        public let certificateId: String?
        /// The certificate data, in PEM format.
        public let certificatePem: String?
        /// The ARN of the certificate.
        public let certificateArn: String?

        public init(keyPair: KeyPair? = nil, certificateId: String? = nil, certificatePem: String? = nil, certificateArn: String? = nil) {
            self.keyPair = keyPair
            self.certificateId = certificateId
            self.certificatePem = certificatePem
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case keyPair = "keyPair"
            case certificateId = "certificateId"
            case certificatePem = "certificatePem"
            case certificateArn = "certificateArn"
        }
    }

    public struct DescribeDefaultAuthorizerRequest: AWSShape {

    }

    public struct ImplicitDeny: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policies", required: false, type: .list)
        ]
        /// Policies that don't contain a matching allow or deny statement for the specified action on the specified resource. 
        public let policies: [Policy]?

        public init(policies: [Policy]? = nil) {
            self.policies = policies
        }

        private enum CodingKeys: String, CodingKey {
            case policies = "policies"
        }
    }

    public struct ListAttachedPoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policies", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The policies.
        public let policies: [Policy]?
        /// The token to retrieve the next set of results, or ``null`` if there are no more results.
        public let nextMarker: String?

        public init(policies: [Policy]? = nil, nextMarker: String? = nil) {
            self.policies = policies
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case policies = "policies"
            case nextMarker = "nextMarker"
        }
    }

    public struct CancelJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "comment", required: false, type: .string), 
            AWSShapeMember(label: "reasonCode", required: false, type: .string), 
            AWSShapeMember(label: "force", location: .querystring(locationName: "force"), required: false, type: .boolean), 
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string)
        ]
        /// An optional comment string describing why the job was canceled.
        public let comment: String?
        /// (Optional)A reason code string that explains why the job was canceled.
        public let reasonCode: String?
        /// (Optional) If true job executions with status "IN_PROGRESS" and "QUEUED" are canceled, otherwise only job executions with status "QUEUED" are canceled. The default is false. Canceling a job which is "IN_PROGRESS", will cause a device which is executing the job to be unable to update the job execution status. Use caution and ensure that each device executing a job which is canceled is able to recover to a valid state.
        public let force: Bool?
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String

        public init(comment: String? = nil, reasonCode: String? = nil, force: Bool? = nil, jobId: String) {
            self.comment = comment
            self.reasonCode = reasonCode
            self.force = force
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case comment = "comment"
            case reasonCode = "reasonCode"
            case force = "force"
            case jobId = "jobId"
        }
    }

    public struct ListAuditTasksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tasks", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The audits that were performed during the specified time period.
        public let tasks: [AuditTaskMetadata]?
        /// A token that can be used to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(tasks: [AuditTaskMetadata]? = nil, nextToken: String? = nil) {
            self.tasks = tasks
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case tasks = "tasks"
            case nextToken = "nextToken"
        }
    }

    public struct ListCACertificatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean), 
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer)
        ]
        /// The marker for the next set of results.
        public let marker: String?
        /// Determines the order of the results.
        public let ascendingOrder: Bool?
        /// The result page size.
        public let pageSize: Int32?

        public init(marker: String? = nil, ascendingOrder: Bool? = nil, pageSize: Int32? = nil) {
            self.marker = marker
            self.ascendingOrder = ascendingOrder
            self.pageSize = pageSize
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "marker"
            case ascendingOrder = "isAscendingOrder"
            case pageSize = "pageSize"
        }
    }

    public struct DetachThingPrincipalRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "principal", location: .header(locationName: "x-amzn-principal"), required: true, type: .string), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// If the principal is a certificate, this value must be ARN of the certificate. If the principal is an Amazon Cognito identity, this value must be the ID of the Amazon Cognito identity.
        public let principal: String
        /// The name of the thing.
        public let thingName: String

        public init(principal: String, thingName: String) {
            self.principal = principal
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case principal = "x-amzn-principal"
            case thingName = "thingName"
        }
    }

    public struct DeleteCACertificateResponse: AWSShape {

    }

    public struct DisableTopicRuleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ruleName", location: .uri(locationName: "ruleName"), required: true, type: .string)
        ]
        /// The name of the rule to disable.
        public let ruleName: String

        public init(ruleName: String) {
            self.ruleName = ruleName
        }

        private enum CodingKeys: String, CodingKey {
            case ruleName = "ruleName"
        }
    }

    public struct AttributePayload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "merge", required: false, type: .boolean), 
            AWSShapeMember(label: "attributes", required: false, type: .map)
        ]
        /// Specifies whether the list of attributes provided in the AttributePayload is merged with the attributes stored in the registry, instead of overwriting them. To remove an attribute, call UpdateThing with an empty attribute value.  The merge attribute is only valid when calling UpdateThing. 
        public let merge: Bool?
        /// A JSON string containing up to three key-value pair in JSON format. For example:  {\"attributes\":{\"string1\":\"string2\"}} 
        public let attributes: [String: String]?

        public init(merge: Bool? = nil, attributes: [String: String]? = nil) {
            self.merge = merge
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case merge = "merge"
            case attributes = "attributes"
        }
    }

    public struct ListOTAUpdatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "otaUpdateStatus", location: .querystring(locationName: "otaUpdateStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The OTA update job status.
        public let otaUpdateStatus: OTAUpdateStatus?
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// A token used to retrieve the next set of results.
        public let nextToken: String?

        public init(otaUpdateStatus: OTAUpdateStatus? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.otaUpdateStatus = otaUpdateStatus
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case otaUpdateStatus = "otaUpdateStatus"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct CertificateDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateArn", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "generationId", required: false, type: .string), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "customerVersion", required: false, type: .integer), 
            AWSShapeMember(label: "certificatePem", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "caCertificateId", required: false, type: .string), 
            AWSShapeMember(label: "previousOwnedBy", required: false, type: .string), 
            AWSShapeMember(label: "certificateId", required: false, type: .string), 
            AWSShapeMember(label: "transferData", required: false, type: .structure), 
            AWSShapeMember(label: "ownedBy", required: false, type: .string), 
            AWSShapeMember(label: "validity", required: false, type: .structure)
        ]
        /// The ARN of the certificate.
        public let certificateArn: String?
        /// The status of the certificate.
        public let status: CertificateStatus?
        /// The generation ID of the certificate.
        public let generationId: String?
        /// The date and time the certificate was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The customer version of the certificate.
        public let customerVersion: Int32?
        /// The certificate data, in PEM format.
        public let certificatePem: String?
        /// The date and time the certificate was created.
        public let creationDate: TimeStamp?
        /// The certificate ID of the CA certificate used to sign this certificate.
        public let caCertificateId: String?
        /// The ID of the AWS account of the previous owner of the certificate.
        public let previousOwnedBy: String?
        /// The ID of the certificate.
        public let certificateId: String?
        /// The transfer data.
        public let transferData: TransferData?
        /// The ID of the AWS account that owns the certificate.
        public let ownedBy: String?
        /// When the certificate is valid.
        public let validity: CertificateValidity?

        public init(certificateArn: String? = nil, status: CertificateStatus? = nil, generationId: String? = nil, lastModifiedDate: TimeStamp? = nil, customerVersion: Int32? = nil, certificatePem: String? = nil, creationDate: TimeStamp? = nil, caCertificateId: String? = nil, previousOwnedBy: String? = nil, certificateId: String? = nil, transferData: TransferData? = nil, ownedBy: String? = nil, validity: CertificateValidity? = nil) {
            self.certificateArn = certificateArn
            self.status = status
            self.generationId = generationId
            self.lastModifiedDate = lastModifiedDate
            self.customerVersion = customerVersion
            self.certificatePem = certificatePem
            self.creationDate = creationDate
            self.caCertificateId = caCertificateId
            self.previousOwnedBy = previousOwnedBy
            self.certificateId = certificateId
            self.transferData = transferData
            self.ownedBy = ownedBy
            self.validity = validity
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "certificateArn"
            case status = "status"
            case generationId = "generationId"
            case lastModifiedDate = "lastModifiedDate"
            case customerVersion = "customerVersion"
            case certificatePem = "certificatePem"
            case creationDate = "creationDate"
            case caCertificateId = "caCertificateId"
            case previousOwnedBy = "previousOwnedBy"
            case certificateId = "certificateId"
            case transferData = "transferData"
            case ownedBy = "ownedBy"
            case validity = "validity"
        }
    }

    public struct AuditTaskMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskId", required: false, type: .string), 
            AWSShapeMember(label: "taskType", required: false, type: .enum), 
            AWSShapeMember(label: "taskStatus", required: false, type: .enum)
        ]
        /// The ID of this audit.
        public let taskId: String?
        /// The type of this audit: one of "ON_DEMAND_AUDIT_TASK" or "SCHEDULED_AUDIT_TASK".
        public let taskType: AuditTaskType?
        /// The status of this audit: one of "IN_PROGRESS", "COMPLETED", "FAILED" or "CANCELED".
        public let taskStatus: AuditTaskStatus?

        public init(taskId: String? = nil, taskType: AuditTaskType? = nil, taskStatus: AuditTaskStatus? = nil) {
            self.taskId = taskId
            self.taskType = taskType
            self.taskStatus = taskStatus
        }

        private enum CodingKeys: String, CodingKey {
            case taskId = "taskId"
            case taskType = "taskType"
            case taskStatus = "taskStatus"
        }
    }

    public struct ListSecurityProfilesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileIdentifiers", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of security profile identifiers (names and ARNs).
        public let securityProfileIdentifiers: [SecurityProfileIdentifier]?
        /// A token that can be used to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(securityProfileIdentifiers: [SecurityProfileIdentifier]? = nil, nextToken: String? = nil) {
            self.securityProfileIdentifiers = securityProfileIdentifiers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileIdentifiers = "securityProfileIdentifiers"
            case nextToken = "nextToken"
        }
    }

    public enum DayOfWeek: String, CustomStringConvertible, Codable {
        case sun = "SUN"
        case mon = "MON"
        case tue = "TUE"
        case wed = "WED"
        case thu = "THU"
        case fri = "FRI"
        case sat = "SAT"
        public var description: String { return self.rawValue }
    }

    public struct ListPoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policies", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The descriptions of the policies.
        public let policies: [Policy]?
        /// The marker for the next set of results, or null if there are no additional results.
        public let nextMarker: String?

        public init(policies: [Policy]? = nil, nextMarker: String? = nil) {
            self.policies = policies
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case policies = "policies"
            case nextMarker = "nextMarker"
        }
    }

    public struct DescribeAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerName", location: .uri(locationName: "authorizerName"), required: true, type: .string)
        ]
        /// The name of the authorizer to describe.
        public let authorizerName: String

        public init(authorizerName: String) {
            self.authorizerName = authorizerName
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerName = "authorizerName"
        }
    }

    public struct ListAuditFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "findings", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The findings (results) of the audit.
        public let findings: [AuditFinding]?
        /// A token that can be used to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(findings: [AuditFinding]? = nil, nextToken: String? = nil) {
            self.findings = findings
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case findings = "findings"
            case nextToken = "nextToken"
        }
    }

    public enum AuditNotificationType: String, CustomStringConvertible, Codable {
        case sns = "SNS"
        public var description: String { return self.rawValue }
    }

    public struct UpdateAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerName", required: false, type: .string), 
            AWSShapeMember(label: "authorizerArn", required: false, type: .string)
        ]
        /// The authorizer name.
        public let authorizerName: String?
        /// The authorizer ARN.
        public let authorizerArn: String?

        public init(authorizerName: String? = nil, authorizerArn: String? = nil) {
            self.authorizerName = authorizerName
            self.authorizerArn = authorizerArn
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerName = "authorizerName"
            case authorizerArn = "authorizerArn"
        }
    }

    public struct ListPoliciesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean), 
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer)
        ]
        /// The marker for the next set of results.
        public let marker: String?
        /// Specifies the order for results. If true, the results are returned in ascending creation order.
        public let ascendingOrder: Bool?
        /// The result page size.
        public let pageSize: Int32?

        public init(marker: String? = nil, ascendingOrder: Bool? = nil, pageSize: Int32? = nil) {
            self.marker = marker
            self.ascendingOrder = ascendingOrder
            self.pageSize = pageSize
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "marker"
            case ascendingOrder = "isAscendingOrder"
            case pageSize = "pageSize"
        }
    }

    public struct DetachSecurityProfileResponse: AWSShape {

    }

    public struct Allowed: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policies", required: false, type: .list)
        ]
        /// A list of policies that allowed the authentication.
        public let policies: [Policy]?

        public init(policies: [Policy]? = nil) {
            self.policies = policies
        }

        private enum CodingKeys: String, CodingKey {
            case policies = "policies"
        }
    }

    public struct CreateThingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupId", required: false, type: .string)
        ]
        /// The thing group name.
        public let thingGroupName: String?
        /// The thing group ARN.
        public let thingGroupArn: String?
        /// The thing group ID.
        public let thingGroupId: String?

        public init(thingGroupName: String? = nil, thingGroupArn: String? = nil, thingGroupId: String? = nil) {
            self.thingGroupName = thingGroupName
            self.thingGroupArn = thingGroupArn
            self.thingGroupId = thingGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupName = "thingGroupName"
            case thingGroupArn = "thingGroupArn"
            case thingGroupId = "thingGroupId"
        }
    }

    public struct CreateThingTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingTypeName", location: .uri(locationName: "thingTypeName"), required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "thingTypeProperties", required: false, type: .structure)
        ]
        /// The name of the thing type.
        public let thingTypeName: String
        /// Metadata which can be used to manage the thing type.
        public let tags: [Tag]?
        /// The ThingTypeProperties for the thing type to create. It contains information about the new thing type including a description, and a list of searchable thing attribute names.
        public let thingTypeProperties: ThingTypeProperties?

        public init(thingTypeName: String, tags: [Tag]? = nil, thingTypeProperties: ThingTypeProperties? = nil) {
            self.thingTypeName = thingTypeName
            self.tags = tags
            self.thingTypeProperties = thingTypeProperties
        }

        private enum CodingKeys: String, CodingKey {
            case thingTypeName = "thingTypeName"
            case tags = "tags"
            case thingTypeProperties = "thingTypeProperties"
        }
    }

    public struct ListV2LoggingLevelsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "targetType", location: .querystring(locationName: "targetType"), required: false, type: .enum)
        ]
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// The type of resource for which you are configuring logging. Must be THING_Group.
        public let targetType: LogTargetType?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, targetType: LogTargetType? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.targetType = targetType
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case targetType = "targetType"
        }
    }

    public struct CloudwatchMetricAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "metricTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "metricName", required: true, type: .string), 
            AWSShapeMember(label: "metricNamespace", required: true, type: .string), 
            AWSShapeMember(label: "metricUnit", required: true, type: .string), 
            AWSShapeMember(label: "metricValue", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// An optional Unix timestamp.
        public let metricTimestamp: String?
        /// The CloudWatch metric name.
        public let metricName: String
        /// The CloudWatch metric namespace name.
        public let metricNamespace: String
        /// The metric unit supported by CloudWatch.
        public let metricUnit: String
        /// The CloudWatch metric value.
        public let metricValue: String
        /// The IAM role that allows access to the CloudWatch metric.
        public let roleArn: String

        public init(metricTimestamp: String? = nil, metricName: String, metricNamespace: String, metricUnit: String, metricValue: String, roleArn: String) {
            self.metricTimestamp = metricTimestamp
            self.metricName = metricName
            self.metricNamespace = metricNamespace
            self.metricUnit = metricUnit
            self.metricValue = metricValue
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case metricTimestamp = "metricTimestamp"
            case metricName = "metricName"
            case metricNamespace = "metricNamespace"
            case metricUnit = "metricUnit"
            case metricValue = "metricValue"
            case roleArn = "roleArn"
        }
    }

    public struct AcceptCertificateTransferRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "setAsActive", location: .querystring(locationName: "setAsActive"), required: false, type: .boolean), 
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "certificateId"), required: true, type: .string)
        ]
        /// Specifies whether the certificate is active.
        public let setAsActive: Bool?
        /// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
        public let certificateId: String

        public init(setAsActive: Bool? = nil, certificateId: String) {
            self.setAsActive = setAsActive
            self.certificateId = certificateId
        }

        private enum CodingKeys: String, CodingKey {
            case setAsActive = "setAsActive"
            case certificateId = "certificateId"
        }
    }

    public enum AuditTaskStatus: String, CustomStringConvertible, Codable {
        case inProgress = "IN_PROGRESS"
        case completed = "COMPLETED"
        case failed = "FAILED"
        case canceled = "CANCELED"
        public var description: String { return self.rawValue }
    }

    public struct UpdateAccountAuditConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "auditCheckConfigurations", required: false, type: .map), 
            AWSShapeMember(label: "auditNotificationTargetConfigurations", required: false, type: .map), 
            AWSShapeMember(label: "roleArn", required: false, type: .string)
        ]
        /// Specifies which audit checks are enabled and disabled for this account. Use DescribeAccountAuditConfiguration to see the list of all checks including those that are currently enabled. Note that some data collection may begin immediately when certain checks are enabled. When a check is disabled, any data collected so far in relation to the check is deleted. You cannot disable a check if it is used by any scheduled audit. You must first delete the check from the scheduled audit or delete the scheduled audit itself. On the first call to UpdateAccountAuditConfiguration this parameter is required and must specify at least one enabled check.
        public let auditCheckConfigurations: [String: AuditCheckConfiguration]?
        /// Information about the targets to which audit notifications are sent.
        public let auditNotificationTargetConfigurations: [AuditNotificationType: AuditNotificationTarget]?
        /// The ARN of the role that grants permission to AWS IoT to access information about your devices, policies, certificates and other items as necessary when performing an audit.
        public let roleArn: String?

        public init(auditCheckConfigurations: [String: AuditCheckConfiguration]? = nil, auditNotificationTargetConfigurations: [AuditNotificationType: AuditNotificationTarget]? = nil, roleArn: String? = nil) {
            self.auditCheckConfigurations = auditCheckConfigurations
            self.auditNotificationTargetConfigurations = auditNotificationTargetConfigurations
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case auditCheckConfigurations = "auditCheckConfigurations"
            case auditNotificationTargetConfigurations = "auditNotificationTargetConfigurations"
            case roleArn = "roleArn"
        }
    }

    public struct ListPrincipalPoliciesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer), 
            AWSShapeMember(label: "principal", location: .header(locationName: "x-amzn-iot-principal"), required: true, type: .string), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean), 
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string)
        ]
        /// The result page size.
        public let pageSize: Int32?
        /// The principal.
        public let principal: String
        /// Specifies the order for results. If true, results are returned in ascending creation order.
        public let ascendingOrder: Bool?
        /// The marker for the next set of results.
        public let marker: String?

        public init(pageSize: Int32? = nil, principal: String, ascendingOrder: Bool? = nil, marker: String? = nil) {
            self.pageSize = pageSize
            self.principal = principal
            self.ascendingOrder = ascendingOrder
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "pageSize"
            case principal = "x-amzn-iot-principal"
            case ascendingOrder = "isAscendingOrder"
            case marker = "marker"
        }
    }

    public struct ListThingPrincipalsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "principals", required: false, type: .list)
        ]
        /// The principals associated with the thing.
        public let principals: [String]?

        public init(principals: [String]? = nil) {
            self.principals = principals
        }

        private enum CodingKeys: String, CodingKey {
            case principals = "principals"
        }
    }

    public struct ListScheduledAuditsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The maximum number of results to return at one time. The default is 25.
        public let maxResults: Int32?
        /// The token for the next set of results.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeDefaultAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerDescription", required: false, type: .structure)
        ]
        /// The default authorizer's description.
        public let authorizerDescription: AuthorizerDescription?

        public init(authorizerDescription: AuthorizerDescription? = nil) {
            self.authorizerDescription = authorizerDescription
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerDescription = "authorizerDescription"
        }
    }

    public struct UpdateScheduledAuditRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "targetCheckNames", required: false, type: .list), 
            AWSShapeMember(label: "dayOfMonth", required: false, type: .string), 
            AWSShapeMember(label: "frequency", required: false, type: .enum), 
            AWSShapeMember(label: "scheduledAuditName", location: .uri(locationName: "scheduledAuditName"), required: true, type: .string), 
            AWSShapeMember(label: "dayOfWeek", required: false, type: .enum)
        ]
        /// Which checks are performed during the scheduled audit. Checks must be enabled for your account. (Use DescribeAccountAuditConfiguration to see the list of all checks including those that are enabled or UpdateAccountAuditConfiguration to select which checks are enabled.)
        public let targetCheckNames: [String]?
        /// The day of the month on which the scheduled audit takes place. Can be "1" through "31" or "LAST". This field is required if the "frequency" parameter is set to "MONTHLY". If days 29-31 are specified, and the month does not have that many days, the audit takes place on the "LAST" day of the month.
        public let dayOfMonth: String?
        /// How often the scheduled audit takes place. Can be one of "DAILY", "WEEKLY", "BIWEEKLY" or "MONTHLY". The actual start time of each audit is determined by the system.
        public let frequency: AuditFrequency?
        /// The name of the scheduled audit. (Max. 128 chars)
        public let scheduledAuditName: String
        /// The day of the week on which the scheduled audit takes place. Can be one of "SUN", "MON", "TUE", "WED", "THU", "FRI" or "SAT". This field is required if the "frequency" parameter is set to "WEEKLY" or "BIWEEKLY".
        public let dayOfWeek: DayOfWeek?

        public init(targetCheckNames: [String]? = nil, dayOfMonth: String? = nil, frequency: AuditFrequency? = nil, scheduledAuditName: String, dayOfWeek: DayOfWeek? = nil) {
            self.targetCheckNames = targetCheckNames
            self.dayOfMonth = dayOfMonth
            self.frequency = frequency
            self.scheduledAuditName = scheduledAuditName
            self.dayOfWeek = dayOfWeek
        }

        private enum CodingKeys: String, CodingKey {
            case targetCheckNames = "targetCheckNames"
            case dayOfMonth = "dayOfMonth"
            case frequency = "frequency"
            case scheduledAuditName = "scheduledAuditName"
            case dayOfWeek = "dayOfWeek"
        }
    }

    public struct DescribeThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupName", location: .uri(locationName: "thingGroupName"), required: true, type: .string)
        ]
        /// The name of the thing group.
        public let thingGroupName: String

        public init(thingGroupName: String) {
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupName = "thingGroupName"
        }
    }

    public struct ListCertificatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean), 
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer)
        ]
        /// The marker for the next set of results.
        public let marker: String?
        /// Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.
        public let ascendingOrder: Bool?
        /// The result page size.
        public let pageSize: Int32?

        public init(marker: String? = nil, ascendingOrder: Bool? = nil, pageSize: Int32? = nil) {
            self.marker = marker
            self.ascendingOrder = ascendingOrder
            self.pageSize = pageSize
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "marker"
            case ascendingOrder = "isAscendingOrder"
            case pageSize = "pageSize"
        }
    }

    public struct ThingDocument: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingId", required: false, type: .string), 
            AWSShapeMember(label: "connectivity", required: false, type: .structure), 
            AWSShapeMember(label: "thingGroupNames", required: false, type: .list), 
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "shadow", required: false, type: .string), 
            AWSShapeMember(label: "thingTypeName", required: false, type: .string), 
            AWSShapeMember(label: "attributes", required: false, type: .map)
        ]
        /// The thing ID.
        public let thingId: String?
        /// Indicates whether or not the thing is connected to the AWS IoT service.
        public let connectivity: ThingConnectivity?
        /// Thing group names.
        public let thingGroupNames: [String]?
        /// The thing name.
        public let thingName: String?
        /// The shadow.
        public let shadow: String?
        /// The thing type name.
        public let thingTypeName: String?
        /// The attributes.
        public let attributes: [String: String]?

        public init(thingId: String? = nil, connectivity: ThingConnectivity? = nil, thingGroupNames: [String]? = nil, thingName: String? = nil, shadow: String? = nil, thingTypeName: String? = nil, attributes: [String: String]? = nil) {
            self.thingId = thingId
            self.connectivity = connectivity
            self.thingGroupNames = thingGroupNames
            self.thingName = thingName
            self.shadow = shadow
            self.thingTypeName = thingTypeName
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case thingId = "thingId"
            case connectivity = "connectivity"
            case thingGroupNames = "thingGroupNames"
            case thingName = "thingName"
            case shadow = "shadow"
            case thingTypeName = "thingTypeName"
            case attributes = "attributes"
        }
    }

    public struct DescribeRoleAliasRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleAlias", location: .uri(locationName: "roleAlias"), required: true, type: .string)
        ]
        /// The role alias to describe.
        public let roleAlias: String

        public init(roleAlias: String) {
            self.roleAlias = roleAlias
        }

        private enum CodingKeys: String, CodingKey {
            case roleAlias = "roleAlias"
        }
    }

    public struct GetPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string)
        ]
        /// The name of the policy.
        public let policyName: String

        public init(policyName: String) {
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
        }
    }

    public struct AuditCheckConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "enabled", required: false, type: .boolean)
        ]
        /// True if this audit check is enabled for this account.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
        }
    }

    public struct DeleteThingTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingTypeName", location: .uri(locationName: "thingTypeName"), required: true, type: .string)
        ]
        /// The name of the thing type.
        public let thingTypeName: String

        public init(thingTypeName: String) {
            self.thingTypeName = thingTypeName
        }

        private enum CodingKeys: String, CodingKey {
            case thingTypeName = "thingTypeName"
        }
    }

    public struct CreateJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "timeoutConfig", required: false, type: .structure), 
            AWSShapeMember(label: "document", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "targetSelection", required: false, type: .enum), 
            AWSShapeMember(label: "targets", required: true, type: .list), 
            AWSShapeMember(label: "documentSource", required: false, type: .string), 
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "jobExecutionsRolloutConfig", required: false, type: .structure), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "abortConfig", required: false, type: .structure), 
            AWSShapeMember(label: "presignedUrlConfig", required: false, type: .structure)
        ]
        /// Specifies the amount of time each device has to finish its execution of the job. The timer is started when the job execution status is set to IN_PROGRESS. If the job execution status is not set to another terminal state before the time expires, it will be automatically set to TIMED_OUT.
        public let timeoutConfig: TimeoutConfig?
        /// The job document.  If the job document resides in an S3 bucket, you must use a placeholder link when specifying the document. The placeholder link is of the following form:  ${aws:iot:s3-presigned-url:https://s3.amazonaws.com/bucket/key}  where bucket is your bucket name and key is the object in the bucket to which you are linking. 
        public let document: String?
        /// Metadata which can be used to manage the job.
        public let tags: [Tag]?
        /// Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group.
        public let targetSelection: TargetSelection?
        /// A list of things and thing groups to which the job should be sent.
        public let targets: [String]
        /// An S3 link to the job document.
        public let documentSource: String?
        /// A job identifier which must be unique for your AWS account. We recommend using a UUID. Alpha-numeric characters, "-" and "_" are valid for use here.
        public let jobId: String
        /// Allows you to create a staged rollout of the job.
        public let jobExecutionsRolloutConfig: JobExecutionsRolloutConfig?
        /// A short text description of the job.
        public let description: String?
        /// Allows you to create criteria to abort a job.
        public let abortConfig: AbortConfig?
        /// Configuration information for pre-signed S3 URLs.
        public let presignedUrlConfig: PresignedUrlConfig?

        public init(timeoutConfig: TimeoutConfig? = nil, document: String? = nil, tags: [Tag]? = nil, targetSelection: TargetSelection? = nil, targets: [String], documentSource: String? = nil, jobId: String, jobExecutionsRolloutConfig: JobExecutionsRolloutConfig? = nil, description: String? = nil, abortConfig: AbortConfig? = nil, presignedUrlConfig: PresignedUrlConfig? = nil) {
            self.timeoutConfig = timeoutConfig
            self.document = document
            self.tags = tags
            self.targetSelection = targetSelection
            self.targets = targets
            self.documentSource = documentSource
            self.jobId = jobId
            self.jobExecutionsRolloutConfig = jobExecutionsRolloutConfig
            self.description = description
            self.abortConfig = abortConfig
            self.presignedUrlConfig = presignedUrlConfig
        }

        private enum CodingKeys: String, CodingKey {
            case timeoutConfig = "timeoutConfig"
            case document = "document"
            case tags = "tags"
            case targetSelection = "targetSelection"
            case targets = "targets"
            case documentSource = "documentSource"
            case jobId = "jobId"
            case jobExecutionsRolloutConfig = "jobExecutionsRolloutConfig"
            case description = "description"
            case abortConfig = "abortConfig"
            case presignedUrlConfig = "presignedUrlConfig"
        }
    }

    public enum AuthDecision: String, CustomStringConvertible, Codable {
        case allowed = "ALLOWED"
        case explicitDeny = "EXPLICIT_DENY"
        case implicitDeny = "IMPLICIT_DENY"
        public var description: String { return self.rawValue }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", location: .querystring(locationName: "resourceArn"), required: true, type: .string), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The ARN of the resource.
        public let resourceArn: String
        /// The token to retrieve the next set of results.
        public let nextToken: String?

        public init(resourceArn: String, nextToken: String? = nil) {
            self.resourceArn = resourceArn
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case nextToken = "nextToken"
        }
    }

    public struct GetRegistrationCodeRequest: AWSShape {

    }

    public enum IndexStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case building = "BUILDING"
        case rebuilding = "REBUILDING"
        public var description: String { return self.rawValue }
    }

    public struct UpdateRoleAliasRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleAlias", location: .uri(locationName: "roleAlias"), required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "credentialDurationSeconds", required: false, type: .integer)
        ]
        /// The role alias to update.
        public let roleAlias: String
        /// The role ARN.
        public let roleArn: String?
        /// The number of seconds the credential will be valid.
        public let credentialDurationSeconds: Int32?

        public init(roleAlias: String, roleArn: String? = nil, credentialDurationSeconds: Int32? = nil) {
            self.roleAlias = roleAlias
            self.roleArn = roleArn
            self.credentialDurationSeconds = credentialDurationSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case roleAlias = "roleAlias"
            case roleArn = "roleArn"
            case credentialDurationSeconds = "credentialDurationSeconds"
        }
    }

    public struct ListJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "targetSelection", location: .querystring(locationName: "targetSelection"), required: false, type: .enum), 
            AWSShapeMember(label: "status", location: .querystring(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "thingGroupId", location: .querystring(locationName: "thingGroupId"), required: false, type: .string), 
            AWSShapeMember(label: "thingGroupName", location: .querystring(locationName: "thingGroupName"), required: false, type: .string)
        ]
        /// The maximum number of results to return per request.
        public let maxResults: Int32?
        /// Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group. 
        public let targetSelection: TargetSelection?
        /// An optional filter that lets you search for jobs that have the specified status.
        public let status: JobStatus?
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// A filter that limits the returned jobs to those for the specified group.
        public let thingGroupId: String?
        /// A filter that limits the returned jobs to those for the specified group.
        public let thingGroupName: String?

        public init(maxResults: Int32? = nil, targetSelection: TargetSelection? = nil, status: JobStatus? = nil, nextToken: String? = nil, thingGroupId: String? = nil, thingGroupName: String? = nil) {
            self.maxResults = maxResults
            self.targetSelection = targetSelection
            self.status = status
            self.nextToken = nextToken
            self.thingGroupId = thingGroupId
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case targetSelection = "targetSelection"
            case status = "status"
            case nextToken = "nextToken"
            case thingGroupId = "thingGroupId"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct RegisterThingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArns", required: false, type: .map), 
            AWSShapeMember(label: "certificatePem", required: false, type: .string)
        ]
        /// ARNs for the generated resources.
        public let resourceArns: [String: String]?
        /// .
        public let certificatePem: String?

        public init(resourceArns: [String: String]? = nil, certificatePem: String? = nil) {
            self.resourceArns = resourceArns
            self.certificatePem = certificatePem
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArns = "resourceArns"
            case certificatePem = "certificatePem"
        }
    }

    public enum ActionType: String, CustomStringConvertible, Codable {
        case publish = "PUBLISH"
        case subscribe = "SUBSCRIBE"
        case receive = "RECEIVE"
        case connect = "CONNECT"
        public var description: String { return self.rawValue }
    }

    public struct ExponentialRolloutRate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "baseRatePerMinute", required: true, type: .integer), 
            AWSShapeMember(label: "rateIncreaseCriteria", required: true, type: .structure), 
            AWSShapeMember(label: "incrementFactor", required: true, type: .double)
        ]
        /// The minimum number of things that will be notified of a pending job, per minute at the start of job rollout. This parameter allows you to define the initial rate of rollout.
        public let baseRatePerMinute: Int32
        /// The criteria to initiate the increase in rate of rollout for a job. AWS IoT supports up to one digit after the decimal (for example, 1.5, but not 1.55).
        public let rateIncreaseCriteria: RateIncreaseCriteria
        /// The exponential factor to increase the rate of rollout for a job.
        public let incrementFactor: Double

        public init(baseRatePerMinute: Int32, rateIncreaseCriteria: RateIncreaseCriteria, incrementFactor: Double) {
            self.baseRatePerMinute = baseRatePerMinute
            self.rateIncreaseCriteria = rateIncreaseCriteria
            self.incrementFactor = incrementFactor
        }

        private enum CodingKeys: String, CodingKey {
            case baseRatePerMinute = "baseRatePerMinute"
            case rateIncreaseCriteria = "rateIncreaseCriteria"
            case incrementFactor = "incrementFactor"
        }
    }

    public struct DescribeThingRegistrationTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "percentageProgress", required: false, type: .integer), 
            AWSShapeMember(label: "inputFileKey", required: false, type: .string), 
            AWSShapeMember(label: "failureCount", required: false, type: .integer), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "successCount", required: false, type: .integer), 
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "templateBody", required: false, type: .string), 
            AWSShapeMember(label: "inputFileBucket", required: false, type: .string), 
            AWSShapeMember(label: "taskId", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "message", required: false, type: .string)
        ]
        /// The progress of the bulk provisioning task expressed as a percentage.
        public let percentageProgress: Int32?
        /// The input file key.
        public let inputFileKey: String?
        /// The number of things that failed to be provisioned.
        public let failureCount: Int32?
        /// The date when the task was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The status of the bulk thing provisioning task.
        public let status: Status?
        /// The number of things successfully provisioned.
        public let successCount: Int32?
        /// The role ARN that grants access to the input file bucket.
        public let roleArn: String?
        /// The task's template.
        public let templateBody: String?
        /// The S3 bucket that contains the input file.
        public let inputFileBucket: String?
        /// The task ID.
        public let taskId: String?
        /// The task creation date.
        public let creationDate: TimeStamp?
        /// The message.
        public let message: String?

        public init(percentageProgress: Int32? = nil, inputFileKey: String? = nil, failureCount: Int32? = nil, lastModifiedDate: TimeStamp? = nil, status: Status? = nil, successCount: Int32? = nil, roleArn: String? = nil, templateBody: String? = nil, inputFileBucket: String? = nil, taskId: String? = nil, creationDate: TimeStamp? = nil, message: String? = nil) {
            self.percentageProgress = percentageProgress
            self.inputFileKey = inputFileKey
            self.failureCount = failureCount
            self.lastModifiedDate = lastModifiedDate
            self.status = status
            self.successCount = successCount
            self.roleArn = roleArn
            self.templateBody = templateBody
            self.inputFileBucket = inputFileBucket
            self.taskId = taskId
            self.creationDate = creationDate
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case percentageProgress = "percentageProgress"
            case inputFileKey = "inputFileKey"
            case failureCount = "failureCount"
            case lastModifiedDate = "lastModifiedDate"
            case status = "status"
            case successCount = "successCount"
            case roleArn = "roleArn"
            case templateBody = "templateBody"
            case inputFileBucket = "inputFileBucket"
            case taskId = "taskId"
            case creationDate = "creationDate"
            case message = "message"
        }
    }

    public struct ListIndicesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct S3Destination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "prefix", required: false, type: .string), 
            AWSShapeMember(label: "bucket", required: false, type: .string)
        ]
        /// The S3 prefix.
        public let prefix: String?
        /// The S3 bucket that contains the updated firmware.
        public let bucket: String?

        public init(prefix: String? = nil, bucket: String? = nil) {
            self.prefix = prefix
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case prefix = "prefix"
            case bucket = "bucket"
        }
    }

    public struct ListIndicesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "indexNames", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The index names.
        public let indexNames: [String]?
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(indexNames: [String]? = nil, nextToken: String? = nil) {
            self.indexNames = indexNames
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case indexNames = "indexNames"
            case nextToken = "nextToken"
        }
    }

    public struct AttachSecurityProfileResponse: AWSShape {

    }

    public struct DescribeSecurityProfileResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileDescription", required: false, type: .string), 
            AWSShapeMember(label: "securityProfileArn", required: false, type: .string), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "version", required: false, type: .long), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "behaviors", required: false, type: .list), 
            AWSShapeMember(label: "securityProfileName", required: false, type: .string), 
            AWSShapeMember(label: "alertTargets", required: false, type: .map)
        ]
        /// A description of the security profile (associated with the security profile when it was created or updated).
        public let securityProfileDescription: String?
        /// The ARN of the security profile.
        public let securityProfileArn: String?
        /// The time the security profile was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The version of the security profile. A new version is generated whenever the security profile is updated.
        public let version: Int64?
        /// The time the security profile was created.
        public let creationDate: TimeStamp?
        /// Specifies the behaviors that, when violated by a device (thing), cause an alert.
        public let behaviors: [Behavior]?
        /// The name of the security profile.
        public let securityProfileName: String?
        /// Where the alerts are sent. (Alerts are always sent to the console.)
        public let alertTargets: [AlertTargetType: AlertTarget]?

        public init(securityProfileDescription: String? = nil, securityProfileArn: String? = nil, lastModifiedDate: TimeStamp? = nil, version: Int64? = nil, creationDate: TimeStamp? = nil, behaviors: [Behavior]? = nil, securityProfileName: String? = nil, alertTargets: [AlertTargetType: AlertTarget]? = nil) {
            self.securityProfileDescription = securityProfileDescription
            self.securityProfileArn = securityProfileArn
            self.lastModifiedDate = lastModifiedDate
            self.version = version
            self.creationDate = creationDate
            self.behaviors = behaviors
            self.securityProfileName = securityProfileName
            self.alertTargets = alertTargets
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileDescription = "securityProfileDescription"
            case securityProfileArn = "securityProfileArn"
            case lastModifiedDate = "lastModifiedDate"
            case version = "version"
            case creationDate = "creationDate"
            case behaviors = "behaviors"
            case securityProfileName = "securityProfileName"
            case alertTargets = "alertTargets"
        }
    }

    public enum ThingGroupIndexingMode: String, CustomStringConvertible, Codable {
        case off = "OFF"
        case on = "ON"
        public var description: String { return self.rawValue }
    }

    public struct ListRoleAliasesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean), 
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer)
        ]
        /// A marker used to get the next set of results.
        public let marker: String?
        /// Return the list of role aliases in ascending alphabetical order.
        public let ascendingOrder: Bool?
        /// The maximum number of results to return at one time.
        public let pageSize: Int32?

        public init(marker: String? = nil, ascendingOrder: Bool? = nil, pageSize: Int32? = nil) {
            self.marker = marker
            self.ascendingOrder = ascendingOrder
            self.pageSize = pageSize
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "marker"
            case ascendingOrder = "isAscendingOrder"
            case pageSize = "pageSize"
        }
    }

    public struct CancelJobExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "force", location: .querystring(locationName: "force"), required: false, type: .boolean), 
            AWSShapeMember(label: "statusDetails", required: false, type: .map), 
            AWSShapeMember(label: "expectedVersion", required: false, type: .long), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// The ID of the job to be canceled.
        public let jobId: String
        /// (Optional) If true the job execution will be canceled if it has status IN_PROGRESS or QUEUED, otherwise the job execution will be canceled only if it has status QUEUED. If you attempt to cancel a job execution that is IN_PROGRESS, and you do not set force to true, then an InvalidStateTransitionException will be thrown. The default is false. Canceling a job execution which is "IN_PROGRESS", will cause the device to be unable to update the job execution status. Use caution and ensure that the device is able to recover to a valid state.
        public let force: Bool?
        /// A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged. You can specify at most 10 name/value pairs.
        public let statusDetails: [String: String]?
        /// (Optional) The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)
        public let expectedVersion: Int64?
        /// The name of the thing whose execution of the job will be canceled.
        public let thingName: String

        public init(jobId: String, force: Bool? = nil, statusDetails: [String: String]? = nil, expectedVersion: Int64? = nil, thingName: String) {
            self.jobId = jobId
            self.force = force
            self.statusDetails = statusDetails
            self.expectedVersion = expectedVersion
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
            case force = "force"
            case statusDetails = "statusDetails"
            case expectedVersion = "expectedVersion"
            case thingName = "thingName"
        }
    }

    public struct TransferCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "transferMessage", required: false, type: .string), 
            AWSShapeMember(label: "targetAwsAccount", location: .querystring(locationName: "targetAwsAccount"), required: true, type: .string), 
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "certificateId"), required: true, type: .string)
        ]
        /// The transfer message.
        public let transferMessage: String?
        /// The AWS account.
        public let targetAwsAccount: String
        /// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
        public let certificateId: String

        public init(transferMessage: String? = nil, targetAwsAccount: String, certificateId: String) {
            self.transferMessage = transferMessage
            self.targetAwsAccount = targetAwsAccount
            self.certificateId = certificateId
        }

        private enum CodingKeys: String, CodingKey {
            case transferMessage = "transferMessage"
            case targetAwsAccount = "targetAwsAccount"
            case certificateId = "certificateId"
        }
    }

    public struct JobExecutionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "startedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "executionNumber", required: false, type: .long), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "queuedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp)
        ]
        /// The time, in milliseconds since the epoch, when the job execution started.
        public let startedAt: TimeStamp?
        /// A string (consisting of the digits "0" through "9") which identifies this particular job execution on this particular device. It can be used later in commands which return or update job execution information.
        public let executionNumber: Int64?
        /// The status of the job execution.
        public let status: JobExecutionStatus?
        /// The time, in milliseconds since the epoch, when the job execution was queued.
        public let queuedAt: TimeStamp?
        /// The time, in milliseconds since the epoch, when the job execution was last updated.
        public let lastUpdatedAt: TimeStamp?

        public init(startedAt: TimeStamp? = nil, executionNumber: Int64? = nil, status: JobExecutionStatus? = nil, queuedAt: TimeStamp? = nil, lastUpdatedAt: TimeStamp? = nil) {
            self.startedAt = startedAt
            self.executionNumber = executionNumber
            self.status = status
            self.queuedAt = queuedAt
            self.lastUpdatedAt = lastUpdatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case startedAt = "startedAt"
            case executionNumber = "executionNumber"
            case status = "status"
            case queuedAt = "queuedAt"
            case lastUpdatedAt = "lastUpdatedAt"
        }
    }

    public struct ThingGroupDocument: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributes", required: false, type: .map), 
            AWSShapeMember(label: "thingGroupDescription", required: false, type: .string), 
            AWSShapeMember(label: "parentGroupNames", required: false, type: .list), 
            AWSShapeMember(label: "thingGroupId", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupName", required: false, type: .string)
        ]
        /// The thing group attributes.
        public let attributes: [String: String]?
        /// The thing group description.
        public let thingGroupDescription: String?
        /// Parent group names.
        public let parentGroupNames: [String]?
        /// The thing group ID.
        public let thingGroupId: String?
        /// The thing group name.
        public let thingGroupName: String?

        public init(attributes: [String: String]? = nil, thingGroupDescription: String? = nil, parentGroupNames: [String]? = nil, thingGroupId: String? = nil, thingGroupName: String? = nil) {
            self.attributes = attributes
            self.thingGroupDescription = thingGroupDescription
            self.parentGroupNames = parentGroupNames
            self.thingGroupId = thingGroupId
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
            case thingGroupDescription = "thingGroupDescription"
            case parentGroupNames = "parentGroupNames"
            case thingGroupId = "thingGroupId"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct StartThingRegistrationTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "inputFileKey", required: true, type: .string), 
            AWSShapeMember(label: "inputFileBucket", required: true, type: .string), 
            AWSShapeMember(label: "templateBody", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// The name of input file within the S3 bucket. This file contains a newline delimited JSON file. Each line contains the parameter values to provision one device (thing).
        public let inputFileKey: String
        /// The S3 bucket that contains the input file.
        public let inputFileBucket: String
        /// The provisioning template.
        public let templateBody: String
        /// The IAM role ARN that grants permission the input file.
        public let roleArn: String

        public init(inputFileKey: String, inputFileBucket: String, templateBody: String, roleArn: String) {
            self.inputFileKey = inputFileKey
            self.inputFileBucket = inputFileBucket
            self.templateBody = templateBody
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case inputFileKey = "inputFileKey"
            case inputFileBucket = "inputFileBucket"
            case templateBody = "templateBody"
            case roleArn = "roleArn"
        }
    }

    public struct CancelJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobId", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "jobArn", required: false, type: .string)
        ]
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String?
        /// A short text description of the job.
        public let description: String?
        /// The job ARN.
        public let jobArn: String?

        public init(jobId: String? = nil, description: String? = nil, jobArn: String? = nil) {
            self.jobId = jobId
            self.description = description
            self.jobArn = jobArn
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
            case description = "description"
            case jobArn = "jobArn"
        }
    }

    public struct DetachThingPrincipalResponse: AWSShape {

    }

    public struct UpdateAccountAuditConfigurationResponse: AWSShape {

    }

    public enum OTAUpdateStatus: String, CustomStringConvertible, Codable {
        case createPending = "CREATE_PENDING"
        case createInProgress = "CREATE_IN_PROGRESS"
        case createComplete = "CREATE_COMPLETE"
        case createFailed = "CREATE_FAILED"
        public var description: String { return self.rawValue }
    }

    public struct SearchIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "things", required: false, type: .list), 
            AWSShapeMember(label: "thingGroups", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The things that match the search query.
        public let things: [ThingDocument]?
        /// The thing groups that match the search query.
        public let thingGroups: [ThingGroupDocument]?
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(things: [ThingDocument]? = nil, thingGroups: [ThingGroupDocument]? = nil, nextToken: String? = nil) {
            self.things = things
            self.thingGroups = thingGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case things = "things"
            case thingGroups = "thingGroups"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "forceDelete", location: .querystring(locationName: "forceDelete"), required: false, type: .boolean), 
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "certificateId"), required: true, type: .string)
        ]
        /// Forces a certificate request to be deleted.
        public let forceDelete: Bool?
        /// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
        public let certificateId: String

        public init(forceDelete: Bool? = nil, certificateId: String) {
            self.forceDelete = forceDelete
            self.certificateId = certificateId
        }

        private enum CodingKeys: String, CodingKey {
            case forceDelete = "forceDelete"
            case certificateId = "certificateId"
        }
    }

    public struct CancelCertificateTransferRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "certificateId"), required: true, type: .string)
        ]
        /// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
        public let certificateId: String

        public init(certificateId: String) {
            self.certificateId = certificateId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "certificateId"
        }
    }

    public struct CreateCertificateFromCsrRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateSigningRequest", required: true, type: .string), 
            AWSShapeMember(label: "setAsActive", location: .querystring(locationName: "setAsActive"), required: false, type: .boolean)
        ]
        /// The certificate signing request (CSR).
        public let certificateSigningRequest: String
        /// Specifies whether the certificate is active.
        public let setAsActive: Bool?

        public init(certificateSigningRequest: String, setAsActive: Bool? = nil) {
            self.certificateSigningRequest = certificateSigningRequest
            self.setAsActive = setAsActive
        }

        private enum CodingKeys: String, CodingKey {
            case certificateSigningRequest = "certificateSigningRequest"
            case setAsActive = "setAsActive"
        }
    }

    public struct DescribeRoleAliasResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleAliasDescription", required: false, type: .structure)
        ]
        /// The role alias description.
        public let roleAliasDescription: RoleAliasDescription?

        public init(roleAliasDescription: RoleAliasDescription? = nil) {
            self.roleAliasDescription = roleAliasDescription
        }

        private enum CodingKeys: String, CodingKey {
            case roleAliasDescription = "roleAliasDescription"
        }
    }

    public struct UpdateBillingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "billingGroupProperties", required: true, type: .structure), 
            AWSShapeMember(label: "expectedVersion", required: false, type: .long), 
            AWSShapeMember(label: "billingGroupName", location: .uri(locationName: "billingGroupName"), required: true, type: .string)
        ]
        /// The properties of the billing group.
        public let billingGroupProperties: BillingGroupProperties
        /// The expected version of the billing group. If the version of the billing group does not match the expected version specified in the request, the UpdateBillingGroup request is rejected with a VersionConflictException.
        public let expectedVersion: Int64?
        /// The name of the billing group.
        public let billingGroupName: String

        public init(billingGroupProperties: BillingGroupProperties, expectedVersion: Int64? = nil, billingGroupName: String) {
            self.billingGroupProperties = billingGroupProperties
            self.expectedVersion = expectedVersion
            self.billingGroupName = billingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case billingGroupProperties = "billingGroupProperties"
            case expectedVersion = "expectedVersion"
            case billingGroupName = "billingGroupName"
        }
    }

    public struct DescribeEventConfigurationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "eventConfigurations", required: false, type: .map), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp)
        ]
        /// The date the event configurations were last modified.
        public let lastModifiedDate: TimeStamp?
        /// The event configurations.
        public let eventConfigurations: [EventType: Configuration]?
        /// The creation date of the event configuration.
        public let creationDate: TimeStamp?

        public init(lastModifiedDate: TimeStamp? = nil, eventConfigurations: [EventType: Configuration]? = nil, creationDate: TimeStamp? = nil) {
            self.lastModifiedDate = lastModifiedDate
            self.eventConfigurations = eventConfigurations
            self.creationDate = creationDate
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedDate = "lastModifiedDate"
            case eventConfigurations = "eventConfigurations"
            case creationDate = "creationDate"
        }
    }

    public struct CancelAuditTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskId", location: .uri(locationName: "taskId"), required: true, type: .string)
        ]
        /// The ID of the audit you want to cancel. You can only cancel an audit that is "IN_PROGRESS".
        public let taskId: String

        public init(taskId: String) {
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case taskId = "taskId"
        }
    }

    public struct IotAnalyticsAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "channelArn", required: false, type: .string), 
            AWSShapeMember(label: "channelName", required: false, type: .string), 
            AWSShapeMember(label: "roleArn", required: false, type: .string)
        ]
        /// (deprecated) The ARN of the IoT Analytics channel to which message data will be sent.
        public let channelArn: String?
        /// The name of the IoT Analytics channel to which message data will be sent.
        public let channelName: String?
        /// The ARN of the role which has a policy that grants IoT Analytics permission to send message data via IoT Analytics (iotanalytics:BatchPutMessage).
        public let roleArn: String?

        public init(channelArn: String? = nil, channelName: String? = nil, roleArn: String? = nil) {
            self.channelArn = channelArn
            self.channelName = channelName
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case channelArn = "channelArn"
            case channelName = "channelName"
            case roleArn = "roleArn"
        }
    }

    public struct DeleteBillingGroupResponse: AWSShape {

    }

    public struct ListTargetsForSecurityProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "securityProfileName", location: .uri(locationName: "securityProfileName"), required: true, type: .string)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// The security profile.
        public let securityProfileName: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, securityProfileName: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.securityProfileName = securityProfileName
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case securityProfileName = "securityProfileName"
        }
    }

    public enum JobExecutionFailureType: String, CustomStringConvertible, Codable {
        case failed = "FAILED"
        case rejected = "REJECTED"
        case timedOut = "TIMED_OUT"
        case all = "ALL"
        public var description: String { return self.rawValue }
    }

    public struct UpdateSecurityProfileResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileDescription", required: false, type: .string), 
            AWSShapeMember(label: "securityProfileArn", required: false, type: .string), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "version", required: false, type: .long), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "behaviors", required: false, type: .list), 
            AWSShapeMember(label: "securityProfileName", required: false, type: .string), 
            AWSShapeMember(label: "alertTargets", required: false, type: .map)
        ]
        /// The description of the security profile.
        public let securityProfileDescription: String?
        /// The ARN of the security profile that was updated.
        public let securityProfileArn: String?
        /// The time the security profile was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The updated version of the security profile.
        public let version: Int64?
        /// The time the security profile was created.
        public let creationDate: TimeStamp?
        /// Specifies the behaviors that, when violated by a device (thing), cause an alert.
        public let behaviors: [Behavior]?
        /// The name of the security profile that was updated.
        public let securityProfileName: String?
        /// Where the alerts are sent. (Alerts are always sent to the console.)
        public let alertTargets: [AlertTargetType: AlertTarget]?

        public init(securityProfileDescription: String? = nil, securityProfileArn: String? = nil, lastModifiedDate: TimeStamp? = nil, version: Int64? = nil, creationDate: TimeStamp? = nil, behaviors: [Behavior]? = nil, securityProfileName: String? = nil, alertTargets: [AlertTargetType: AlertTarget]? = nil) {
            self.securityProfileDescription = securityProfileDescription
            self.securityProfileArn = securityProfileArn
            self.lastModifiedDate = lastModifiedDate
            self.version = version
            self.creationDate = creationDate
            self.behaviors = behaviors
            self.securityProfileName = securityProfileName
            self.alertTargets = alertTargets
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileDescription = "securityProfileDescription"
            case securityProfileArn = "securityProfileArn"
            case lastModifiedDate = "lastModifiedDate"
            case version = "version"
            case creationDate = "creationDate"
            case behaviors = "behaviors"
            case securityProfileName = "securityProfileName"
            case alertTargets = "alertTargets"
        }
    }

    public struct AttachPrincipalPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "principal", location: .header(locationName: "x-amzn-iot-principal"), required: true, type: .string), 
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string)
        ]
        /// The principal, which can be a certificate ARN (as returned from the CreateCertificate operation) or an Amazon Cognito ID.
        public let principal: String
        /// The policy name.
        public let policyName: String

        public init(principal: String, policyName: String) {
            self.principal = principal
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case principal = "x-amzn-iot-principal"
            case policyName = "policyName"
        }
    }

    public struct TagResourceResponse: AWSShape {

    }

    public struct CreateSecurityProfileResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileName", required: false, type: .string), 
            AWSShapeMember(label: "securityProfileArn", required: false, type: .string)
        ]
        /// The name you gave to the security profile.
        public let securityProfileName: String?
        /// The ARN of the security profile.
        public let securityProfileArn: String?

        public init(securityProfileName: String? = nil, securityProfileArn: String? = nil) {
            self.securityProfileName = securityProfileName
            self.securityProfileArn = securityProfileArn
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileName = "securityProfileName"
            case securityProfileArn = "securityProfileArn"
        }
    }

    public struct DeleteDynamicThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupName", location: .uri(locationName: "thingGroupName"), required: true, type: .string), 
            AWSShapeMember(label: "expectedVersion", location: .querystring(locationName: "expectedVersion"), required: false, type: .long)
        ]
        /// The name of the dynamic thing group to delete.
        public let thingGroupName: String
        /// The expected version of the dynamic thing group to delete.
        public let expectedVersion: Int64?

        public init(thingGroupName: String, expectedVersion: Int64? = nil) {
            self.thingGroupName = thingGroupName
            self.expectedVersion = expectedVersion
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupName = "thingGroupName"
            case expectedVersion = "expectedVersion"
        }
    }

    public enum CertificateStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
        case revoked = "REVOKED"
        case pendingTransfer = "PENDING_TRANSFER"
        case registerInactive = "REGISTER_INACTIVE"
        case pendingActivation = "PENDING_ACTIVATION"
        public var description: String { return self.rawValue }
    }

    public struct GetIndexingConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingIndexingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "thingGroupIndexingConfiguration", required: false, type: .structure)
        ]
        /// Thing indexing configuration.
        public let thingIndexingConfiguration: ThingIndexingConfiguration?
        /// The index configuration.
        public let thingGroupIndexingConfiguration: ThingGroupIndexingConfiguration?

        public init(thingIndexingConfiguration: ThingIndexingConfiguration? = nil, thingGroupIndexingConfiguration: ThingGroupIndexingConfiguration? = nil) {
            self.thingIndexingConfiguration = thingIndexingConfiguration
            self.thingGroupIndexingConfiguration = thingGroupIndexingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case thingIndexingConfiguration = "thingIndexingConfiguration"
            case thingGroupIndexingConfiguration = "thingGroupIndexingConfiguration"
        }
    }

    public struct DescribeAccountAuditConfigurationRequest: AWSShape {

    }

    public struct DescribeEndpointRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "endpointType", location: .querystring(locationName: "endpointType"), required: false, type: .string)
        ]
        /// The endpoint type. Valid endpoint types include:    iot:Data - Returns a VeriSign signed data endpoint.      iot:Data-ATS - Returns an ATS signed data endpoint.      iot:CredentialProvider - Returns an AWS IoT credentials provider API endpoint.      iot:Jobs - Returns an AWS IoT device management Jobs API endpoint.  
        public let endpointType: String?

        public init(endpointType: String? = nil) {
            self.endpointType = endpointType
        }

        private enum CodingKeys: String, CodingKey {
            case endpointType = "endpointType"
        }
    }

    public struct GetPolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "defaultVersionId", required: false, type: .string), 
            AWSShapeMember(label: "policyArn", required: false, type: .string), 
            AWSShapeMember(label: "policyDocument", required: false, type: .string), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "generationId", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "policyName", required: false, type: .string)
        ]
        /// The default policy version ID.
        public let defaultVersionId: String?
        /// The policy ARN.
        public let policyArn: String?
        /// The JSON document that describes the policy.
        public let policyDocument: String?
        /// The date the policy was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The generation ID of the policy.
        public let generationId: String?
        /// The date the policy was created.
        public let creationDate: TimeStamp?
        /// The policy name.
        public let policyName: String?

        public init(defaultVersionId: String? = nil, policyArn: String? = nil, policyDocument: String? = nil, lastModifiedDate: TimeStamp? = nil, generationId: String? = nil, creationDate: TimeStamp? = nil, policyName: String? = nil) {
            self.defaultVersionId = defaultVersionId
            self.policyArn = policyArn
            self.policyDocument = policyDocument
            self.lastModifiedDate = lastModifiedDate
            self.generationId = generationId
            self.creationDate = creationDate
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case defaultVersionId = "defaultVersionId"
            case policyArn = "policyArn"
            case policyDocument = "policyDocument"
            case lastModifiedDate = "lastModifiedDate"
            case generationId = "generationId"
            case creationDate = "creationDate"
            case policyName = "policyName"
        }
    }

    public struct DetachSecurityProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileName", location: .uri(locationName: "securityProfileName"), required: true, type: .string), 
            AWSShapeMember(label: "securityProfileTargetArn", location: .querystring(locationName: "securityProfileTargetArn"), required: true, type: .string)
        ]
        /// The security profile that is detached.
        public let securityProfileName: String
        /// The ARN of the thing group from which the security profile is detached.
        public let securityProfileTargetArn: String

        public init(securityProfileName: String, securityProfileTargetArn: String) {
            self.securityProfileName = securityProfileName
            self.securityProfileTargetArn = securityProfileTargetArn
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileName = "securityProfileName"
            case securityProfileTargetArn = "securityProfileTargetArn"
        }
    }

    public enum AutoRegistrationStatus: String, CustomStringConvertible, Codable {
        case enable = "ENABLE"
        case disable = "DISABLE"
        public var description: String { return self.rawValue }
    }

    public struct UpdateCACertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "caCertificateId"), required: true, type: .string), 
            AWSShapeMember(label: "removeAutoRegistration", required: false, type: .boolean), 
            AWSShapeMember(label: "newAutoRegistrationStatus", location: .querystring(locationName: "newAutoRegistrationStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "newStatus", location: .querystring(locationName: "newStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "registrationConfig", required: false, type: .structure)
        ]
        /// The CA certificate identifier.
        public let certificateId: String
        /// If true, remove auto registration.
        public let removeAutoRegistration: Bool?
        /// The new value for the auto registration status. Valid values are: "ENABLE" or "DISABLE".
        public let newAutoRegistrationStatus: AutoRegistrationStatus?
        /// The updated status of the CA certificate.  Note: The status value REGISTER_INACTIVE is deprecated and should not be used.
        public let newStatus: CACertificateStatus?
        /// Information about the registration configuration.
        public let registrationConfig: RegistrationConfig?

        public init(certificateId: String, removeAutoRegistration: Bool? = nil, newAutoRegistrationStatus: AutoRegistrationStatus? = nil, newStatus: CACertificateStatus? = nil, registrationConfig: RegistrationConfig? = nil) {
            self.certificateId = certificateId
            self.removeAutoRegistration = removeAutoRegistration
            self.newAutoRegistrationStatus = newAutoRegistrationStatus
            self.newStatus = newStatus
            self.registrationConfig = registrationConfig
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "caCertificateId"
            case removeAutoRegistration = "removeAutoRegistration"
            case newAutoRegistrationStatus = "newAutoRegistrationStatus"
            case newStatus = "newStatus"
            case registrationConfig = "registrationConfig"
        }
    }

    public struct ListActiveViolationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "activeViolations", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The list of active violations.
        public let activeViolations: [ActiveViolation]?
        /// A token that can be used to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(activeViolations: [ActiveViolation]? = nil, nextToken: String? = nil) {
            self.activeViolations = activeViolations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case activeViolations = "activeViolations"
            case nextToken = "nextToken"
        }
    }

    public enum JobExecutionStatus: String, CustomStringConvertible, Codable {
        case queued = "QUEUED"
        case inProgress = "IN_PROGRESS"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        case timedOut = "TIMED_OUT"
        case rejected = "REJECTED"
        case removed = "REMOVED"
        case canceled = "CANCELED"
        public var description: String { return self.rawValue }
    }

    public struct AuditNotificationTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "targetArn", required: false, type: .string)
        ]
        /// True if notifications to the target are enabled.
        public let enabled: Bool?
        /// The ARN of the role that grants permission to send notifications to the target.
        public let roleArn: String?
        /// The ARN of the target (SNS topic) to which audit notifications are sent.
        public let targetArn: String?

        public init(enabled: Bool? = nil, roleArn: String? = nil, targetArn: String? = nil) {
            self.enabled = enabled
            self.roleArn = roleArn
            self.targetArn = targetArn
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
            case roleArn = "roleArn"
            case targetArn = "targetArn"
        }
    }

    public struct ListAuditFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "checkName", required: false, type: .string), 
            AWSShapeMember(label: "startTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "endTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "taskId", required: false, type: .string), 
            AWSShapeMember(label: "resourceIdentifier", required: false, type: .structure)
        ]
        /// The maximum number of results to return at one time. The default is 25.
        public let maxResults: Int32?
        /// A filter to limit results to the findings for the specified audit check.
        public let checkName: String?
        /// A filter to limit results to those found after the specified time. You must specify either the startTime and endTime or the taskId, but not both.
        public let startTime: TimeStamp?
        /// A filter to limit results to those found before the specified time. You must specify either the startTime and endTime or the taskId, but not both.
        public let endTime: TimeStamp?
        /// The token for the next set of results.
        public let nextToken: String?
        /// A filter to limit results to the audit with the specified ID. You must specify either the taskId or the startTime and endTime, but not both.
        public let taskId: String?
        /// Information identifying the non-compliant resource.
        public let resourceIdentifier: ResourceIdentifier?

        public init(maxResults: Int32? = nil, checkName: String? = nil, startTime: TimeStamp? = nil, endTime: TimeStamp? = nil, nextToken: String? = nil, taskId: String? = nil, resourceIdentifier: ResourceIdentifier? = nil) {
            self.maxResults = maxResults
            self.checkName = checkName
            self.startTime = startTime
            self.endTime = endTime
            self.nextToken = nextToken
            self.taskId = taskId
            self.resourceIdentifier = resourceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case checkName = "checkName"
            case startTime = "startTime"
            case endTime = "endTime"
            case nextToken = "nextToken"
            case taskId = "taskId"
            case resourceIdentifier = "resourceIdentifier"
        }
    }

    public struct AssociateTargetsWithJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "targets", required: true, type: .list), 
            AWSShapeMember(label: "comment", required: false, type: .string)
        ]
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String
        /// A list of thing group ARNs that define the targets of the job.
        public let targets: [String]
        /// An optional comment string describing why the job was associated with the targets.
        public let comment: String?

        public init(jobId: String, targets: [String], comment: String? = nil) {
            self.jobId = jobId
            self.targets = targets
            self.comment = comment
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
            case targets = "targets"
            case comment = "comment"
        }
    }

    public struct CreateThingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingTypeName", required: false, type: .string), 
            AWSShapeMember(label: "attributePayload", required: false, type: .structure), 
            AWSShapeMember(label: "billingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// The name of the thing type associated with the new thing.
        public let thingTypeName: String?
        /// The attribute payload, which consists of up to three name/value pairs in a JSON document. For example:  {\"attributes\":{\"string1\":\"string2\"}} 
        public let attributePayload: AttributePayload?
        /// The name of the billing group the thing will be added to.
        public let billingGroupName: String?
        /// The name of the thing to create.
        public let thingName: String

        public init(thingTypeName: String? = nil, attributePayload: AttributePayload? = nil, billingGroupName: String? = nil, thingName: String) {
            self.thingTypeName = thingTypeName
            self.attributePayload = attributePayload
            self.billingGroupName = billingGroupName
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case thingTypeName = "thingTypeName"
            case attributePayload = "attributePayload"
            case billingGroupName = "billingGroupName"
            case thingName = "thingName"
        }
    }

    public struct CreateThingTypeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingTypeName", required: false, type: .string), 
            AWSShapeMember(label: "thingTypeArn", required: false, type: .string), 
            AWSShapeMember(label: "thingTypeId", required: false, type: .string)
        ]
        /// The name of the thing type.
        public let thingTypeName: String?
        /// The Amazon Resource Name (ARN) of the thing type.
        public let thingTypeArn: String?
        /// The thing type ID.
        public let thingTypeId: String?

        public init(thingTypeName: String? = nil, thingTypeArn: String? = nil, thingTypeId: String? = nil) {
            self.thingTypeName = thingTypeName
            self.thingTypeArn = thingTypeArn
            self.thingTypeId = thingTypeId
        }

        private enum CodingKeys: String, CodingKey {
            case thingTypeName = "thingTypeName"
            case thingTypeArn = "thingTypeArn"
            case thingTypeId = "thingTypeId"
        }
    }

    public struct DescribeThingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// The name of the thing.
        public let thingName: String

        public init(thingName: String) {
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
        }
    }

    public struct GetLoggingOptionsRequest: AWSShape {

    }

    public struct DescribeAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerDescription", required: false, type: .structure)
        ]
        /// The authorizer description.
        public let authorizerDescription: AuthorizerDescription?

        public init(authorizerDescription: AuthorizerDescription? = nil) {
            self.authorizerDescription = authorizerDescription
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerDescription = "authorizerDescription"
        }
    }

    public struct StreamSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "streamVersion", required: false, type: .integer), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "streamArn", required: false, type: .string), 
            AWSShapeMember(label: "streamId", required: false, type: .string)
        ]
        /// The stream version.
        public let streamVersion: Int32?
        /// A description of the stream.
        public let description: String?
        /// The stream ARN.
        public let streamArn: String?
        /// The stream ID.
        public let streamId: String?

        public init(streamVersion: Int32? = nil, description: String? = nil, streamArn: String? = nil, streamId: String? = nil) {
            self.streamVersion = streamVersion
            self.description = description
            self.streamArn = streamArn
            self.streamId = streamId
        }

        private enum CodingKeys: String, CodingKey {
            case streamVersion = "streamVersion"
            case description = "description"
            case streamArn = "streamArn"
            case streamId = "streamId"
        }
    }

    public struct GetOTAUpdateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "otaUpdateId", location: .uri(locationName: "otaUpdateId"), required: true, type: .string)
        ]
        /// The OTA update ID.
        public let otaUpdateId: String

        public init(otaUpdateId: String) {
            self.otaUpdateId = otaUpdateId
        }

        private enum CodingKeys: String, CodingKey {
            case otaUpdateId = "otaUpdateId"
        }
    }

    public struct ReplaceTopicRuleRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "topicRulePayload"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "topicRulePayload", required: true, type: .structure), 
            AWSShapeMember(label: "ruleName", location: .uri(locationName: "ruleName"), required: true, type: .string)
        ]
        /// The rule payload.
        public let topicRulePayload: TopicRulePayload
        /// The name of the rule.
        public let ruleName: String

        public init(topicRulePayload: TopicRulePayload, ruleName: String) {
            self.topicRulePayload = topicRulePayload
            self.ruleName = ruleName
        }

        private enum CodingKeys: String, CodingKey {
            case topicRulePayload = "topicRulePayload"
            case ruleName = "ruleName"
        }
    }

    public struct RemoveThingFromThingGroupResponse: AWSShape {

    }

    public struct JobExecutionsRolloutConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "exponentialRate", required: false, type: .structure), 
            AWSShapeMember(label: "maximumPerMinute", required: false, type: .integer)
        ]
        /// The rate of increase for a job rollout. This parameter allows you to define an exponential rate for a job rollout.
        public let exponentialRate: ExponentialRolloutRate?
        /// The maximum number of things that will be notified of a pending job, per minute. This parameter allows you to create a staged rollout.
        public let maximumPerMinute: Int32?

        public init(exponentialRate: ExponentialRolloutRate? = nil, maximumPerMinute: Int32? = nil) {
            self.exponentialRate = exponentialRate
            self.maximumPerMinute = maximumPerMinute
        }

        private enum CodingKeys: String, CodingKey {
            case exponentialRate = "exponentialRate"
            case maximumPerMinute = "maximumPerMinute"
        }
    }

    public struct UpdateJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "jobExecutionsRolloutConfig", required: false, type: .structure), 
            AWSShapeMember(label: "abortConfig", required: false, type: .structure), 
            AWSShapeMember(label: "timeoutConfig", required: false, type: .structure), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "presignedUrlConfig", required: false, type: .structure)
        ]
        /// The ID of the job to be updated.
        public let jobId: String
        /// Allows you to create a staged rollout of the job.
        public let jobExecutionsRolloutConfig: JobExecutionsRolloutConfig?
        /// Allows you to create criteria to abort a job.
        public let abortConfig: AbortConfig?
        /// Specifies the amount of time each device has to finish its execution of the job. The timer is started when the job execution status is set to IN_PROGRESS. If the job execution status is not set to another terminal state before the time expires, it will be automatically set to TIMED_OUT. 
        public let timeoutConfig: TimeoutConfig?
        /// A short text description of the job.
        public let description: String?
        /// Configuration information for pre-signed S3 URLs.
        public let presignedUrlConfig: PresignedUrlConfig?

        public init(jobId: String, jobExecutionsRolloutConfig: JobExecutionsRolloutConfig? = nil, abortConfig: AbortConfig? = nil, timeoutConfig: TimeoutConfig? = nil, description: String? = nil, presignedUrlConfig: PresignedUrlConfig? = nil) {
            self.jobId = jobId
            self.jobExecutionsRolloutConfig = jobExecutionsRolloutConfig
            self.abortConfig = abortConfig
            self.timeoutConfig = timeoutConfig
            self.description = description
            self.presignedUrlConfig = presignedUrlConfig
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
            case jobExecutionsRolloutConfig = "jobExecutionsRolloutConfig"
            case abortConfig = "abortConfig"
            case timeoutConfig = "timeoutConfig"
            case description = "description"
            case presignedUrlConfig = "presignedUrlConfig"
        }
    }

    public struct TestAuthorizationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientId", location: .querystring(locationName: "clientId"), required: false, type: .string), 
            AWSShapeMember(label: "principal", required: false, type: .string), 
            AWSShapeMember(label: "cognitoIdentityPoolId", required: false, type: .string), 
            AWSShapeMember(label: "authInfos", required: true, type: .list), 
            AWSShapeMember(label: "policyNamesToAdd", required: false, type: .list), 
            AWSShapeMember(label: "policyNamesToSkip", required: false, type: .list)
        ]
        /// The MQTT client ID.
        public let clientId: String?
        /// The principal.
        public let principal: String?
        /// The Cognito identity pool ID.
        public let cognitoIdentityPoolId: String?
        /// A list of authorization info objects. Simulating authorization will create a response for each authInfo object in the list.
        public let authInfos: [AuthInfo]
        /// When testing custom authorization, the policies specified here are treated as if they are attached to the principal being authorized.
        public let policyNamesToAdd: [String]?
        /// When testing custom authorization, the policies specified here are treated as if they are not attached to the principal being authorized.
        public let policyNamesToSkip: [String]?

        public init(clientId: String? = nil, principal: String? = nil, cognitoIdentityPoolId: String? = nil, authInfos: [AuthInfo], policyNamesToAdd: [String]? = nil, policyNamesToSkip: [String]? = nil) {
            self.clientId = clientId
            self.principal = principal
            self.cognitoIdentityPoolId = cognitoIdentityPoolId
            self.authInfos = authInfos
            self.policyNamesToAdd = policyNamesToAdd
            self.policyNamesToSkip = policyNamesToSkip
        }

        private enum CodingKeys: String, CodingKey {
            case clientId = "clientId"
            case principal = "principal"
            case cognitoIdentityPoolId = "cognitoIdentityPoolId"
            case authInfos = "authInfos"
            case policyNamesToAdd = "policyNamesToAdd"
            case policyNamesToSkip = "policyNamesToSkip"
        }
    }

    public enum ViolationEventType: String, CustomStringConvertible, Codable {
        case inAlarm = "in-alarm"
        case alarmCleared = "alarm-cleared"
        case alarmInvalidated = "alarm-invalidated"
        public var description: String { return self.rawValue }
    }

    public struct AbortConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "criteriaList", required: true, type: .list)
        ]
        /// The list of abort criteria to define rules to abort the job.
        public let criteriaList: [AbortCriteria]

        public init(criteriaList: [AbortCriteria]) {
            self.criteriaList = criteriaList
        }

        private enum CodingKeys: String, CodingKey {
            case criteriaList = "criteriaList"
        }
    }

    public struct CreatePolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string), 
            AWSShapeMember(label: "policyDocument", required: true, type: .string)
        ]
        /// The policy name.
        public let policyName: String
        /// The JSON document that describes the policy. policyDocument must have a minimum length of 1, with a maximum length of 2048, excluding whitespace.
        public let policyDocument: String

        public init(policyName: String, policyDocument: String) {
            self.policyName = policyName
            self.policyDocument = policyDocument
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case policyDocument = "policyDocument"
        }
    }

    public struct CreateScheduledAuditResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "scheduledAuditArn", required: false, type: .string)
        ]
        /// The ARN of the scheduled audit.
        public let scheduledAuditArn: String?

        public init(scheduledAuditArn: String? = nil) {
            self.scheduledAuditArn = scheduledAuditArn
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledAuditArn = "scheduledAuditArn"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The list of tags assigned to the resource.
        public let tags: [Tag]?
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(tags: [Tag]? = nil, nextToken: String? = nil) {
            self.tags = tags
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case nextToken = "nextToken"
        }
    }

    public struct AddThingToThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "overrideDynamicGroups", required: false, type: .boolean), 
            AWSShapeMember(label: "thingGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "thingArn", required: false, type: .string), 
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupName", required: false, type: .string)
        ]
        /// Override dynamic thing groups with static thing groups when 10-group limit is reached. If a thing belongs to 10 thing groups, and one or more of those groups are dynamic thing groups, adding a thing to a static group removes the thing from the last dynamic group.
        public let overrideDynamicGroups: Bool?
        /// The ARN of the group to which you are adding a thing.
        public let thingGroupArn: String?
        /// The ARN of the thing to add to a group.
        public let thingArn: String?
        /// The name of the thing to add to a group.
        public let thingName: String?
        /// The name of the group to which you are adding a thing.
        public let thingGroupName: String?

        public init(overrideDynamicGroups: Bool? = nil, thingGroupArn: String? = nil, thingArn: String? = nil, thingName: String? = nil, thingGroupName: String? = nil) {
            self.overrideDynamicGroups = overrideDynamicGroups
            self.thingGroupArn = thingGroupArn
            self.thingArn = thingArn
            self.thingName = thingName
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case overrideDynamicGroups = "overrideDynamicGroups"
            case thingGroupArn = "thingGroupArn"
            case thingArn = "thingArn"
            case thingName = "thingName"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct DetachPrincipalPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "principal", location: .header(locationName: "x-amzn-iot-principal"), required: true, type: .string), 
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string)
        ]
        /// The principal. If the principal is a certificate, specify the certificate ARN. If the principal is an Amazon Cognito identity, specify the identity ID.
        public let principal: String
        /// The name of the policy to detach.
        public let policyName: String

        public init(principal: String, policyName: String) {
            self.principal = principal
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case principal = "x-amzn-iot-principal"
            case policyName = "policyName"
        }
    }

    public struct StreamInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "streamId", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "streamVersion", required: false, type: .integer), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "files", required: false, type: .list), 
            AWSShapeMember(label: "streamArn", required: false, type: .string)
        ]
        /// The stream ID.
        public let streamId: String?
        /// The date when the stream was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// An IAM role AWS IoT assumes to access your S3 files.
        public let roleArn: String?
        /// The stream version.
        public let streamVersion: Int32?
        /// The description of the stream.
        public let description: String?
        /// The date when the stream was created.
        public let createdAt: TimeStamp?
        /// The files to stream.
        public let files: [StreamFile]?
        /// The stream ARN.
        public let streamArn: String?

        public init(streamId: String? = nil, lastUpdatedAt: TimeStamp? = nil, roleArn: String? = nil, streamVersion: Int32? = nil, description: String? = nil, createdAt: TimeStamp? = nil, files: [StreamFile]? = nil, streamArn: String? = nil) {
            self.streamId = streamId
            self.lastUpdatedAt = lastUpdatedAt
            self.roleArn = roleArn
            self.streamVersion = streamVersion
            self.description = description
            self.createdAt = createdAt
            self.files = files
            self.streamArn = streamArn
        }

        private enum CodingKeys: String, CodingKey {
            case streamId = "streamId"
            case lastUpdatedAt = "lastUpdatedAt"
            case roleArn = "roleArn"
            case streamVersion = "streamVersion"
            case description = "description"
            case createdAt = "createdAt"
            case files = "files"
            case streamArn = "streamArn"
        }
    }

    public enum TargetSelection: String, CustomStringConvertible, Codable {
        case continuous = "CONTINUOUS"
        case snapshot = "SNAPSHOT"
        public var description: String { return self.rawValue }
    }

    public struct DescribeIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "indexStatus", required: false, type: .enum), 
            AWSShapeMember(label: "schema", required: false, type: .string), 
            AWSShapeMember(label: "indexName", required: false, type: .string)
        ]
        /// The index status.
        public let indexStatus: IndexStatus?
        /// Contains a value that specifies the type of indexing performed. Valid values are:   REGISTRY – Your thing index will contain only registry data.   REGISTRY_AND_SHADOW - Your thing index will contain registry data and shadow data.   REGISTRY_AND_CONNECTIVITY_STATUS - Your thing index will contain registry data and thing connectivity status data.   REGISTRY_AND_SHADOW_AND_CONNECTIVITY_STATUS - Your thing index will contain registry data, shadow data, and thing connectivity status data.  
        public let schema: String?
        /// The index name.
        public let indexName: String?

        public init(indexStatus: IndexStatus? = nil, schema: String? = nil, indexName: String? = nil) {
            self.indexStatus = indexStatus
            self.schema = schema
            self.indexName = indexName
        }

        private enum CodingKeys: String, CodingKey {
            case indexStatus = "indexStatus"
            case schema = "schema"
            case indexName = "indexName"
        }
    }

    public struct ListThingGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "parentGroup", location: .querystring(locationName: "parentGroup"), required: false, type: .string), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "recursive", location: .querystring(locationName: "recursive"), required: false, type: .boolean), 
            AWSShapeMember(label: "namePrefixFilter", location: .querystring(locationName: "namePrefixFilter"), required: false, type: .string)
        ]
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// A filter that limits the results to those with the specified parent group.
        public let parentGroup: String?
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// If true, return child groups as well.
        public let recursive: Bool?
        /// A filter that limits the results to those with the specified name prefix.
        public let namePrefixFilter: String?

        public init(maxResults: Int32? = nil, parentGroup: String? = nil, nextToken: String? = nil, recursive: Bool? = nil, namePrefixFilter: String? = nil) {
            self.maxResults = maxResults
            self.parentGroup = parentGroup
            self.nextToken = nextToken
            self.recursive = recursive
            self.namePrefixFilter = namePrefixFilter
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case parentGroup = "parentGroup"
            case nextToken = "nextToken"
            case recursive = "recursive"
            case namePrefixFilter = "namePrefixFilter"
        }
    }

    public struct ThingTypeDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingTypeName", required: false, type: .string), 
            AWSShapeMember(label: "thingTypeProperties", required: false, type: .structure), 
            AWSShapeMember(label: "thingTypeMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "thingTypeArn", required: false, type: .string)
        ]
        /// The name of the thing type.
        public let thingTypeName: String?
        /// The ThingTypeProperties for the thing type.
        public let thingTypeProperties: ThingTypeProperties?
        /// The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when it was deprecated.
        public let thingTypeMetadata: ThingTypeMetadata?
        /// The thing type ARN.
        public let thingTypeArn: String?

        public init(thingTypeName: String? = nil, thingTypeProperties: ThingTypeProperties? = nil, thingTypeMetadata: ThingTypeMetadata? = nil, thingTypeArn: String? = nil) {
            self.thingTypeName = thingTypeName
            self.thingTypeProperties = thingTypeProperties
            self.thingTypeMetadata = thingTypeMetadata
            self.thingTypeArn = thingTypeArn
        }

        private enum CodingKeys: String, CodingKey {
            case thingTypeName = "thingTypeName"
            case thingTypeProperties = "thingTypeProperties"
            case thingTypeMetadata = "thingTypeMetadata"
            case thingTypeArn = "thingTypeArn"
        }
    }

    public struct SetDefaultAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerName", required: false, type: .string), 
            AWSShapeMember(label: "authorizerArn", required: false, type: .string)
        ]
        /// The authorizer name.
        public let authorizerName: String?
        /// The authorizer ARN.
        public let authorizerArn: String?

        public init(authorizerName: String? = nil, authorizerArn: String? = nil) {
            self.authorizerName = authorizerName
            self.authorizerArn = authorizerArn
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerName = "authorizerName"
            case authorizerArn = "authorizerArn"
        }
    }

    public struct StartSigningJobParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "signingProfileParameter", required: false, type: .structure), 
            AWSShapeMember(label: "signingProfileName", required: false, type: .string), 
            AWSShapeMember(label: "destination", required: false, type: .structure)
        ]
        /// Describes the code-signing profile.
        public let signingProfileParameter: SigningProfileParameter?
        /// The code-signing profile name.
        public let signingProfileName: String?
        /// The location to write the code-signed file.
        public let destination: Destination?

        public init(signingProfileParameter: SigningProfileParameter? = nil, signingProfileName: String? = nil, destination: Destination? = nil) {
            self.signingProfileParameter = signingProfileParameter
            self.signingProfileName = signingProfileName
            self.destination = destination
        }

        private enum CodingKeys: String, CodingKey {
            case signingProfileParameter = "signingProfileParameter"
            case signingProfileName = "signingProfileName"
            case destination = "destination"
        }
    }

    public struct ValidateSecurityProfileBehaviorsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "valid", required: false, type: .boolean), 
            AWSShapeMember(label: "validationErrors", required: false, type: .list)
        ]
        /// True if the behaviors were valid.
        public let valid: Bool?
        /// The list of any errors found in the behaviors.
        public let validationErrors: [ValidationError]?

        public init(valid: Bool? = nil, validationErrors: [ValidationError]? = nil) {
            self.valid = valid
            self.validationErrors = validationErrors
        }

        private enum CodingKeys: String, CodingKey {
            case valid = "valid"
            case validationErrors = "validationErrors"
        }
    }

    public struct ValidationError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "errorMessage", required: false, type: .string)
        ]
        /// The description of an error found in the behaviors.
        public let errorMessage: String?

        public init(errorMessage: String? = nil) {
            self.errorMessage = errorMessage
        }

        private enum CodingKeys: String, CodingKey {
            case errorMessage = "errorMessage"
        }
    }

    public struct FirehoseAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deliveryStreamName", required: true, type: .string), 
            AWSShapeMember(label: "separator", required: false, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// The delivery stream name.
        public let deliveryStreamName: String
        /// A character separator that will be used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
        public let separator: String?
        /// The IAM role that grants access to the Amazon Kinesis Firehose stream.
        public let roleArn: String

        public init(deliveryStreamName: String, separator: String? = nil, roleArn: String) {
            self.deliveryStreamName = deliveryStreamName
            self.separator = separator
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStreamName = "deliveryStreamName"
            case separator = "separator"
            case roleArn = "roleArn"
        }
    }

    public struct UpdateCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "newStatus", location: .querystring(locationName: "newStatus"), required: true, type: .enum), 
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "certificateId"), required: true, type: .string)
        ]
        /// The new status.  Note: Setting the status to PENDING_TRANSFER will result in an exception being thrown. PENDING_TRANSFER is a status used internally by AWS IoT. It is not intended for developer use.  Note: The status value REGISTER_INACTIVE is deprecated and should not be used.
        public let newStatus: CertificateStatus
        /// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
        public let certificateId: String

        public init(newStatus: CertificateStatus, certificateId: String) {
            self.newStatus = newStatus
            self.certificateId = certificateId
        }

        private enum CodingKeys: String, CodingKey {
            case newStatus = "newStatus"
            case certificateId = "certificateId"
        }
    }

    public struct CreatePolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyArn", required: false, type: .string), 
            AWSShapeMember(label: "policyVersionId", required: false, type: .string), 
            AWSShapeMember(label: "policyDocument", required: false, type: .string), 
            AWSShapeMember(label: "policyName", required: false, type: .string)
        ]
        /// The policy ARN.
        public let policyArn: String?
        /// The policy version ID.
        public let policyVersionId: String?
        /// The JSON document that describes the policy.
        public let policyDocument: String?
        /// The policy name.
        public let policyName: String?

        public init(policyArn: String? = nil, policyVersionId: String? = nil, policyDocument: String? = nil, policyName: String? = nil) {
            self.policyArn = policyArn
            self.policyVersionId = policyVersionId
            self.policyDocument = policyDocument
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case policyArn = "policyArn"
            case policyVersionId = "policyVersionId"
            case policyDocument = "policyDocument"
            case policyName = "policyName"
        }
    }

    public enum CannedAccessControlList: String, CustomStringConvertible, Codable {
        case `private` = "private"
        case publicRead = "public-read"
        case publicReadWrite = "public-read-write"
        case awsExecRead = "aws-exec-read"
        case authenticatedRead = "authenticated-read"
        case bucketOwnerRead = "bucket-owner-read"
        case bucketOwnerFullControl = "bucket-owner-full-control"
        case logDeliveryWrite = "log-delivery-write"
        public var description: String { return self.rawValue }
    }

    public struct BillingGroupProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "billingGroupDescription", required: false, type: .string)
        ]
        /// The description of the billing group.
        public let billingGroupDescription: String?

        public init(billingGroupDescription: String? = nil) {
            self.billingGroupDescription = billingGroupDescription
        }

        private enum CodingKeys: String, CodingKey {
            case billingGroupDescription = "billingGroupDescription"
        }
    }

    public struct DeleteStreamResponse: AWSShape {

    }

    public struct UpdateEventConfigurationsResponse: AWSShape {

    }

    public struct ListJobExecutionsForThingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "status", location: .querystring(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// The maximum number of results to be returned per request.
        public let maxResults: Int32?
        /// An optional filter that lets you search for jobs that have the specified status.
        public let status: JobExecutionStatus?
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// The thing name.
        public let thingName: String

        public init(maxResults: Int32? = nil, status: JobExecutionStatus? = nil, nextToken: String? = nil, thingName: String) {
            self.maxResults = maxResults
            self.status = status
            self.nextToken = nextToken
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case status = "status"
            case nextToken = "nextToken"
            case thingName = "thingName"
        }
    }

    public struct UntagResourceResponse: AWSShape {

    }

    public struct ScheduledAuditMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dayOfWeek", required: false, type: .enum), 
            AWSShapeMember(label: "scheduledAuditArn", required: false, type: .string), 
            AWSShapeMember(label: "frequency", required: false, type: .enum), 
            AWSShapeMember(label: "dayOfMonth", required: false, type: .string), 
            AWSShapeMember(label: "scheduledAuditName", required: false, type: .string)
        ]
        /// The day of the week on which the scheduled audit is run (if the frequency is "WEEKLY" or "BIWEEKLY").
        public let dayOfWeek: DayOfWeek?
        /// The ARN of the scheduled audit.
        public let scheduledAuditArn: String?
        /// How often the scheduled audit takes place.
        public let frequency: AuditFrequency?
        /// The day of the month on which the scheduled audit is run (if the frequency is "MONTHLY"). If days 29-31 are specified, and the month does not have that many days, the audit takes place on the "LAST" day of the month.
        public let dayOfMonth: String?
        /// The name of the scheduled audit.
        public let scheduledAuditName: String?

        public init(dayOfWeek: DayOfWeek? = nil, scheduledAuditArn: String? = nil, frequency: AuditFrequency? = nil, dayOfMonth: String? = nil, scheduledAuditName: String? = nil) {
            self.dayOfWeek = dayOfWeek
            self.scheduledAuditArn = scheduledAuditArn
            self.frequency = frequency
            self.dayOfMonth = dayOfMonth
            self.scheduledAuditName = scheduledAuditName
        }

        private enum CodingKeys: String, CodingKey {
            case dayOfWeek = "dayOfWeek"
            case scheduledAuditArn = "scheduledAuditArn"
            case frequency = "frequency"
            case dayOfMonth = "dayOfMonth"
            case scheduledAuditName = "scheduledAuditName"
        }
    }

    public struct AttachThingPrincipalResponse: AWSShape {

    }

    public struct DeleteThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupName", location: .uri(locationName: "thingGroupName"), required: true, type: .string), 
            AWSShapeMember(label: "expectedVersion", location: .querystring(locationName: "expectedVersion"), required: false, type: .long)
        ]
        /// The name of the thing group to delete.
        public let thingGroupName: String
        /// The expected version of the thing group to delete.
        public let expectedVersion: Int64?

        public init(thingGroupName: String, expectedVersion: Int64? = nil) {
            self.thingGroupName = thingGroupName
            self.expectedVersion = expectedVersion
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupName = "thingGroupName"
            case expectedVersion = "expectedVersion"
        }
    }

    public struct S3Action: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .string), 
            AWSShapeMember(label: "cannedAcl", required: false, type: .enum), 
            AWSShapeMember(label: "bucketName", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// The object key.
        public let key: String
        /// The Amazon S3 canned ACL that controls access to the object identified by the object key. For more information, see S3 canned ACLs.
        public let cannedAcl: CannedAccessControlList?
        /// The Amazon S3 bucket.
        public let bucketName: String
        /// The ARN of the IAM role that grants access.
        public let roleArn: String

        public init(key: String, cannedAcl: CannedAccessControlList? = nil, bucketName: String, roleArn: String) {
            self.key = key
            self.cannedAcl = cannedAcl
            self.bucketName = bucketName
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case cannedAcl = "cannedAcl"
            case bucketName = "bucketName"
            case roleArn = "roleArn"
        }
    }

    public enum JobStatus: String, CustomStringConvertible, Codable {
        case inProgress = "IN_PROGRESS"
        case canceled = "CANCELED"
        case completed = "COMPLETED"
        case deletionInProgress = "DELETION_IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public enum LogLevel: String, CustomStringConvertible, Codable {
        case debug = "DEBUG"
        case info = "INFO"
        case error = "ERROR"
        case warn = "WARN"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public struct ActiveViolation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "violationId", required: false, type: .string), 
            AWSShapeMember(label: "lastViolationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "behavior", required: false, type: .structure), 
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "lastViolationValue", required: false, type: .structure), 
            AWSShapeMember(label: "securityProfileName", required: false, type: .string), 
            AWSShapeMember(label: "violationStartTime", required: false, type: .timestamp)
        ]
        /// The ID of the active violation.
        public let violationId: String?
        /// The time the most recent violation occurred.
        public let lastViolationTime: TimeStamp?
        /// The behavior which is being violated.
        public let behavior: Behavior?
        /// The name of the thing responsible for the active violation.
        public let thingName: String?
        /// The value of the metric (the measurement) which caused the most recent violation.
        public let lastViolationValue: MetricValue?
        /// The security profile whose behavior is in violation.
        public let securityProfileName: String?
        /// The time the violation started.
        public let violationStartTime: TimeStamp?

        public init(violationId: String? = nil, lastViolationTime: TimeStamp? = nil, behavior: Behavior? = nil, thingName: String? = nil, lastViolationValue: MetricValue? = nil, securityProfileName: String? = nil, violationStartTime: TimeStamp? = nil) {
            self.violationId = violationId
            self.lastViolationTime = lastViolationTime
            self.behavior = behavior
            self.thingName = thingName
            self.lastViolationValue = lastViolationValue
            self.securityProfileName = securityProfileName
            self.violationStartTime = violationStartTime
        }

        private enum CodingKeys: String, CodingKey {
            case violationId = "violationId"
            case lastViolationTime = "lastViolationTime"
            case behavior = "behavior"
            case thingName = "thingName"
            case lastViolationValue = "lastViolationValue"
            case securityProfileName = "securityProfileName"
            case violationStartTime = "violationStartTime"
        }
    }

    public enum Status: String, CustomStringConvertible, Codable {
        case inprogress = "InProgress"
        case completed = "Completed"
        case failed = "Failed"
        case cancelled = "Cancelled"
        case cancelling = "Cancelling"
        public var description: String { return self.rawValue }
    }

    public struct ListThingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "things", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The things.
        public let things: [ThingAttribute]?
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(things: [ThingAttribute]? = nil, nextToken: String? = nil) {
            self.things = things
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case things = "things"
            case nextToken = "nextToken"
        }
    }

    public struct ListTargetsForSecurityProfileResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileTargets", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The thing groups to which the security profile is attached.
        public let securityProfileTargets: [SecurityProfileTarget]?
        /// A token that can be used to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(securityProfileTargets: [SecurityProfileTarget]? = nil, nextToken: String? = nil) {
            self.securityProfileTargets = securityProfileTargets
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileTargets = "securityProfileTargets"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeStreamRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "streamId", location: .uri(locationName: "streamId"), required: true, type: .string)
        ]
        /// The stream ID.
        public let streamId: String

        public init(streamId: String) {
            self.streamId = streamId
        }

        private enum CodingKeys: String, CodingKey {
            case streamId = "streamId"
        }
    }

    public struct CreateOTAUpdateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "awsIotJobArn", required: false, type: .string), 
            AWSShapeMember(label: "otaUpdateId", required: false, type: .string), 
            AWSShapeMember(label: "awsIotJobId", required: false, type: .string), 
            AWSShapeMember(label: "otaUpdateStatus", required: false, type: .enum), 
            AWSShapeMember(label: "otaUpdateArn", required: false, type: .string)
        ]
        /// The AWS IoT job ARN associated with the OTA update.
        public let awsIotJobArn: String?
        /// The OTA update ID.
        public let otaUpdateId: String?
        /// The AWS IoT job ID associated with the OTA update.
        public let awsIotJobId: String?
        /// The OTA update status.
        public let otaUpdateStatus: OTAUpdateStatus?
        /// The OTA update ARN.
        public let otaUpdateArn: String?

        public init(awsIotJobArn: String? = nil, otaUpdateId: String? = nil, awsIotJobId: String? = nil, otaUpdateStatus: OTAUpdateStatus? = nil, otaUpdateArn: String? = nil) {
            self.awsIotJobArn = awsIotJobArn
            self.otaUpdateId = otaUpdateId
            self.awsIotJobId = awsIotJobId
            self.otaUpdateStatus = otaUpdateStatus
            self.otaUpdateArn = otaUpdateArn
        }

        private enum CodingKeys: String, CodingKey {
            case awsIotJobArn = "awsIotJobArn"
            case otaUpdateId = "otaUpdateId"
            case awsIotJobId = "awsIotJobId"
            case otaUpdateStatus = "otaUpdateStatus"
            case otaUpdateArn = "otaUpdateArn"
        }
    }

    public struct AddThingToThingGroupResponse: AWSShape {

    }

    public struct FileLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stream", required: false, type: .structure), 
            AWSShapeMember(label: "s3Location", required: false, type: .structure)
        ]
        /// The stream that contains the OTA update.
        public let stream: Stream?
        /// The location of the updated firmware in S3.
        public let s3Location: S3Location?

        public init(stream: Stream? = nil, s3Location: S3Location? = nil) {
            self.stream = stream
            self.s3Location = s3Location
        }

        private enum CodingKeys: String, CodingKey {
            case stream = "stream"
            case s3Location = "s3Location"
        }
    }

    public struct ListAttachedPoliciesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "target", location: .uri(locationName: "target"), required: true, type: .string), 
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer), 
            AWSShapeMember(label: "recursive", location: .querystring(locationName: "recursive"), required: false, type: .boolean), 
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string)
        ]
        /// The group for which the policies will be listed.
        public let target: String
        /// The maximum number of results to be returned per request.
        public let pageSize: Int32?
        /// When true, recursively list attached policies.
        public let recursive: Bool?
        /// The token to retrieve the next set of results.
        public let marker: String?

        public init(target: String, pageSize: Int32? = nil, recursive: Bool? = nil, marker: String? = nil) {
            self.target = target
            self.pageSize = pageSize
            self.recursive = recursive
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case target = "target"
            case pageSize = "pageSize"
            case recursive = "recursive"
            case marker = "marker"
        }
    }

    public enum MessageFormat: String, CustomStringConvertible, Codable {
        case raw = "RAW"
        case json = "JSON"
        public var description: String { return self.rawValue }
    }

    public struct ListCACertificatesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificates", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The CA certificates registered in your AWS account.
        public let certificates: [CACertificate]?
        /// The current position within the list of CA certificates.
        public let nextMarker: String?

        public init(certificates: [CACertificate]? = nil, nextMarker: String? = nil) {
            self.certificates = certificates
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "certificates"
            case nextMarker = "nextMarker"
        }
    }

    public struct SecurityProfileIdentifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: true, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The ARN of the security profile.
        public let arn: String
        /// The name you have given to the security profile.
        public let name: String

        public init(arn: String, name: String) {
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case name = "name"
        }
    }

    public struct BillingGroupMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp)
        ]
        /// The date the billing group was created.
        public let creationDate: TimeStamp?

        public init(creationDate: TimeStamp? = nil) {
            self.creationDate = creationDate
        }

        private enum CodingKeys: String, CodingKey {
            case creationDate = "creationDate"
        }
    }

    public struct AuthResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "allowed", required: false, type: .structure), 
            AWSShapeMember(label: "denied", required: false, type: .structure), 
            AWSShapeMember(label: "authInfo", required: false, type: .structure), 
            AWSShapeMember(label: "authDecision", required: false, type: .enum), 
            AWSShapeMember(label: "missingContextValues", required: false, type: .list)
        ]
        /// The policies and statements that allowed the specified action.
        public let allowed: Allowed?
        /// The policies and statements that denied the specified action.
        public let denied: Denied?
        /// Authorization information.
        public let authInfo: AuthInfo?
        /// The final authorization decision of this scenario. Multiple statements are taken into account when determining the authorization decision. An explicit deny statement can override multiple allow statements.
        public let authDecision: AuthDecision?
        /// Contains any missing context values found while evaluating policy.
        public let missingContextValues: [String]?

        public init(allowed: Allowed? = nil, denied: Denied? = nil, authInfo: AuthInfo? = nil, authDecision: AuthDecision? = nil, missingContextValues: [String]? = nil) {
            self.allowed = allowed
            self.denied = denied
            self.authInfo = authInfo
            self.authDecision = authDecision
            self.missingContextValues = missingContextValues
        }

        private enum CodingKeys: String, CodingKey {
            case allowed = "allowed"
            case denied = "denied"
            case authInfo = "authInfo"
            case authDecision = "authDecision"
            case missingContextValues = "missingContextValues"
        }
    }

    public struct CreateThingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "thingId", required: false, type: .string), 
            AWSShapeMember(label: "thingArn", required: false, type: .string)
        ]
        /// The name of the new thing.
        public let thingName: String?
        /// The thing ID.
        public let thingId: String?
        /// The ARN of the new thing.
        public let thingArn: String?

        public init(thingName: String? = nil, thingId: String? = nil, thingArn: String? = nil) {
            self.thingName = thingName
            self.thingId = thingId
            self.thingArn = thingArn
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
            case thingId = "thingId"
            case thingArn = "thingArn"
        }
    }

    public struct ListThingRegistrationTaskReportsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskId", location: .uri(locationName: "taskId"), required: true, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "reportType", location: .querystring(locationName: "reportType"), required: true, type: .enum), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string)
        ]
        /// The id of the task.
        public let taskId: String
        /// The maximum number of results to return per request.
        public let maxResults: Int32?
        /// The type of task report.
        public let reportType: ReportType
        /// The token to retrieve the next set of results.
        public let nextToken: String?

        public init(taskId: String, maxResults: Int32? = nil, reportType: ReportType, nextToken: String? = nil) {
            self.taskId = taskId
            self.maxResults = maxResults
            self.reportType = reportType
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case taskId = "taskId"
            case maxResults = "maxResults"
            case reportType = "reportType"
            case nextToken = "nextToken"
        }
    }

    public struct CreateRoleAliasResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleAlias", required: false, type: .string), 
            AWSShapeMember(label: "roleAliasArn", required: false, type: .string)
        ]
        /// The role alias.
        public let roleAlias: String?
        /// The role alias ARN.
        public let roleAliasArn: String?

        public init(roleAlias: String? = nil, roleAliasArn: String? = nil) {
            self.roleAlias = roleAlias
            self.roleAliasArn = roleAliasArn
        }

        private enum CodingKeys: String, CodingKey {
            case roleAlias = "roleAlias"
            case roleAliasArn = "roleAliasArn"
        }
    }

    public struct Destination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "s3Destination", required: false, type: .structure)
        ]
        /// Describes the location in S3 of the updated firmware.
        public let s3Destination: S3Destination?

        public init(s3Destination: S3Destination? = nil) {
            self.s3Destination = s3Destination
        }

        private enum CodingKeys: String, CodingKey {
            case s3Destination = "s3Destination"
        }
    }

    public struct TimeoutConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "inProgressTimeoutInMinutes", required: false, type: .long)
        ]
        /// Specifies the amount of time, in minutes, this device has to finish execution of this job. The timeout interval can be anywhere between 1 minute and 7 days (1 to 10080 minutes). The in progress timer can't be updated and will apply to all job executions for the job. Whenever a job execution remains in the IN_PROGRESS status for longer than this interval, the job execution will fail and switch to the terminal TIMED_OUT status.
        public let inProgressTimeoutInMinutes: Int64?

        public init(inProgressTimeoutInMinutes: Int64? = nil) {
            self.inProgressTimeoutInMinutes = inProgressTimeoutInMinutes
        }

        private enum CodingKeys: String, CodingKey {
            case inProgressTimeoutInMinutes = "inProgressTimeoutInMinutes"
        }
    }

    public struct OTAUpdateFile: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fileVersion", required: false, type: .string), 
            AWSShapeMember(label: "codeSigning", required: false, type: .structure), 
            AWSShapeMember(label: "attributes", required: false, type: .map), 
            AWSShapeMember(label: "fileLocation", required: false, type: .structure), 
            AWSShapeMember(label: "fileName", required: false, type: .string)
        ]
        /// The file version.
        public let fileVersion: String?
        /// The code signing method of the file.
        public let codeSigning: CodeSigning?
        /// A list of name/attribute pairs.
        public let attributes: [String: String]?
        /// The location of the updated firmware.
        public let fileLocation: FileLocation?
        /// The name of the file.
        public let fileName: String?

        public init(fileVersion: String? = nil, codeSigning: CodeSigning? = nil, attributes: [String: String]? = nil, fileLocation: FileLocation? = nil, fileName: String? = nil) {
            self.fileVersion = fileVersion
            self.codeSigning = codeSigning
            self.attributes = attributes
            self.fileLocation = fileLocation
            self.fileName = fileName
        }

        private enum CodingKeys: String, CodingKey {
            case fileVersion = "fileVersion"
            case codeSigning = "codeSigning"
            case attributes = "attributes"
            case fileLocation = "fileLocation"
            case fileName = "fileName"
        }
    }

    public struct DescribeStreamResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "streamInfo", required: false, type: .structure)
        ]
        /// Information about the stream.
        public let streamInfo: StreamInfo?

        public init(streamInfo: StreamInfo? = nil) {
            self.streamInfo = streamInfo
        }

        private enum CodingKeys: String, CodingKey {
            case streamInfo = "streamInfo"
        }
    }

    public struct ListThingRegistrationTaskReportsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceLinks", required: false, type: .list), 
            AWSShapeMember(label: "reportType", required: false, type: .enum), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// Links to the task resources.
        public let resourceLinks: [String]?
        /// The type of task report.
        public let reportType: ReportType?
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(resourceLinks: [String]? = nil, reportType: ReportType? = nil, nextToken: String? = nil) {
            self.resourceLinks = resourceLinks
            self.reportType = reportType
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceLinks = "resourceLinks"
            case reportType = "reportType"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteScheduledAuditResponse: AWSShape {

    }

    public struct Configuration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// True to enable the configuration.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct DeleteThingTypeResponse: AWSShape {

    }

    public enum ThingConnectivityIndexingMode: String, CustomStringConvertible, Codable {
        case off = "OFF"
        case status = "STATUS"
        public var description: String { return self.rawValue }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case deviceCertificate = "DEVICE_CERTIFICATE"
        case caCertificate = "CA_CERTIFICATE"
        case iotPolicy = "IOT_POLICY"
        case cognitoIdentityPool = "COGNITO_IDENTITY_POOL"
        case clientId = "CLIENT_ID"
        case accountSettings = "ACCOUNT_SETTINGS"
        public var description: String { return self.rawValue }
    }

    public struct ListPrincipalThingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "things", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The things.
        public let things: [String]?
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(things: [String]? = nil, nextToken: String? = nil) {
            self.things = things
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case things = "things"
            case nextToken = "nextToken"
        }
    }

    public struct CreateAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerName", required: false, type: .string), 
            AWSShapeMember(label: "authorizerArn", required: false, type: .string)
        ]
        /// The authorizer's name.
        public let authorizerName: String?
        /// The authorizer ARN.
        public let authorizerArn: String?

        public init(authorizerName: String? = nil, authorizerArn: String? = nil) {
            self.authorizerName = authorizerName
            self.authorizerArn = authorizerArn
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerName = "authorizerName"
            case authorizerArn = "authorizerArn"
        }
    }

    public struct UpdateAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerFunctionArn", required: false, type: .string), 
            AWSShapeMember(label: "tokenKeyName", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "tokenSigningPublicKeys", required: false, type: .map), 
            AWSShapeMember(label: "authorizerName", location: .uri(locationName: "authorizerName"), required: true, type: .string)
        ]
        /// The ARN of the authorizer's Lambda function.
        public let authorizerFunctionArn: String?
        /// The key used to extract the token from the HTTP headers. 
        public let tokenKeyName: String?
        /// The status of the update authorizer request.
        public let status: AuthorizerStatus?
        /// The public keys used to verify the token signature.
        public let tokenSigningPublicKeys: [String: String]?
        /// The authorizer name.
        public let authorizerName: String

        public init(authorizerFunctionArn: String? = nil, tokenKeyName: String? = nil, status: AuthorizerStatus? = nil, tokenSigningPublicKeys: [String: String]? = nil, authorizerName: String) {
            self.authorizerFunctionArn = authorizerFunctionArn
            self.tokenKeyName = tokenKeyName
            self.status = status
            self.tokenSigningPublicKeys = tokenSigningPublicKeys
            self.authorizerName = authorizerName
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerFunctionArn = "authorizerFunctionArn"
            case tokenKeyName = "tokenKeyName"
            case status = "status"
            case tokenSigningPublicKeys = "tokenSigningPublicKeys"
            case authorizerName = "authorizerName"
        }
    }

    public struct DescribeJobExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string), 
            AWSShapeMember(label: "executionNumber", location: .querystring(locationName: "executionNumber"), required: false, type: .long)
        ]
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String
        /// The name of the thing on which the job execution is running.
        public let thingName: String
        /// A string (consisting of the digits "0" through "9" which is used to specify a particular job execution on a particular device.
        public let executionNumber: Int64?

        public init(jobId: String, thingName: String, executionNumber: Int64? = nil) {
            self.jobId = jobId
            self.thingName = thingName
            self.executionNumber = executionNumber
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
            case thingName = "thingName"
            case executionNumber = "executionNumber"
        }
    }

    public struct LambdaAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "functionArn", required: true, type: .string)
        ]
        /// The ARN of the Lambda function.
        public let functionArn: String

        public init(functionArn: String) {
            self.functionArn = functionArn
        }

        private enum CodingKeys: String, CodingKey {
            case functionArn = "functionArn"
        }
    }

    public struct DeleteSecurityProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileName", location: .uri(locationName: "securityProfileName"), required: true, type: .string), 
            AWSShapeMember(label: "expectedVersion", location: .querystring(locationName: "expectedVersion"), required: false, type: .long)
        ]
        /// The name of the security profile to be deleted.
        public let securityProfileName: String
        /// The expected version of the security profile. A new version is generated whenever the security profile is updated. If you specify a value that is different than the actual version, a VersionConflictException is thrown.
        public let expectedVersion: Int64?

        public init(securityProfileName: String, expectedVersion: Int64? = nil) {
            self.securityProfileName = securityProfileName
            self.expectedVersion = expectedVersion
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileName = "securityProfileName"
            case expectedVersion = "expectedVersion"
        }
    }

    public struct DeleteBillingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "billingGroupName", location: .uri(locationName: "billingGroupName"), required: true, type: .string), 
            AWSShapeMember(label: "expectedVersion", location: .querystring(locationName: "expectedVersion"), required: false, type: .long)
        ]
        /// The name of the billing group.
        public let billingGroupName: String
        /// The expected version of the billing group. If the version of the billing group does not match the expected version specified in the request, the DeleteBillingGroup request is rejected with a VersionConflictException.
        public let expectedVersion: Int64?

        public init(billingGroupName: String, expectedVersion: Int64? = nil) {
            self.billingGroupName = billingGroupName
            self.expectedVersion = expectedVersion
        }

        private enum CodingKeys: String, CodingKey {
            case billingGroupName = "billingGroupName"
            case expectedVersion = "expectedVersion"
        }
    }

    public struct StepFunctionsAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "executionNamePrefix", required: false, type: .string), 
            AWSShapeMember(label: "stateMachineName", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// (Optional) A name will be given to the state machine execution consisting of this prefix followed by a UUID. Step Functions automatically creates a unique name for each state machine execution if one is not provided.
        public let executionNamePrefix: String?
        /// The name of the Step Functions state machine whose execution will be started.
        public let stateMachineName: String
        /// The ARN of the role that grants IoT permission to start execution of a state machine ("Action":"states:StartExecution").
        public let roleArn: String

        public init(executionNamePrefix: String? = nil, stateMachineName: String, roleArn: String) {
            self.executionNamePrefix = executionNamePrefix
            self.stateMachineName = stateMachineName
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case executionNamePrefix = "executionNamePrefix"
            case stateMachineName = "stateMachineName"
            case roleArn = "roleArn"
        }
    }

    public struct CreateThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "parentGroupName", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupProperties", required: false, type: .structure), 
            AWSShapeMember(label: "thingGroupName", location: .uri(locationName: "thingGroupName"), required: true, type: .string)
        ]
        /// Metadata which can be used to manage the thing group.
        public let tags: [Tag]?
        /// The name of the parent thing group.
        public let parentGroupName: String?
        /// The thing group properties.
        public let thingGroupProperties: ThingGroupProperties?
        /// The thing group name to create.
        public let thingGroupName: String

        public init(tags: [Tag]? = nil, parentGroupName: String? = nil, thingGroupProperties: ThingGroupProperties? = nil, thingGroupName: String) {
            self.tags = tags
            self.parentGroupName = parentGroupName
            self.thingGroupProperties = thingGroupProperties
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case parentGroupName = "parentGroupName"
            case thingGroupProperties = "thingGroupProperties"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct ListRoleAliasesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleAliases", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The role aliases.
        public let roleAliases: [String]?
        /// A marker used to get the next set of results.
        public let nextMarker: String?

        public init(roleAliases: [String]? = nil, nextMarker: String? = nil) {
            self.roleAliases = roleAliases
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case roleAliases = "roleAliases"
            case nextMarker = "nextMarker"
        }
    }

    public enum EventType: String, CustomStringConvertible, Codable {
        case thing = "THING"
        case thingGroup = "THING_GROUP"
        case thingType = "THING_TYPE"
        case thingGroupMembership = "THING_GROUP_MEMBERSHIP"
        case thingGroupHierarchy = "THING_GROUP_HIERARCHY"
        case thingTypeAssociation = "THING_TYPE_ASSOCIATION"
        case job = "JOB"
        case jobExecution = "JOB_EXECUTION"
        case policy = "POLICY"
        case certificate = "CERTIFICATE"
        case caCertificate = "CA_CERTIFICATE"
        public var description: String { return self.rawValue }
    }

    public struct DeleteAuthorizerResponse: AWSShape {

    }

    public struct AssociateTargetsWithJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobId", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "jobArn", required: false, type: .string)
        ]
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String?
        /// A short text description of the job.
        public let description: String?
        /// An ARN identifying the job.
        public let jobArn: String?

        public init(jobId: String? = nil, description: String? = nil, jobArn: String? = nil) {
            self.jobId = jobId
            self.description = description
            self.jobArn = jobArn
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
            case description = "description"
            case jobArn = "jobArn"
        }
    }

    public struct DeprecateThingTypeResponse: AWSShape {

    }

    public struct UpdateDynamicThingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "version", required: false, type: .long)
        ]
        /// The dynamic thing group version.
        public let version: Int64?

        public init(version: Int64? = nil) {
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case version = "version"
        }
    }

    public struct ListPrincipalPoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policies", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The policies.
        public let policies: [Policy]?
        /// The marker for the next set of results, or null if there are no additional results.
        public let nextMarker: String?

        public init(policies: [Policy]? = nil, nextMarker: String? = nil) {
            self.policies = policies
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case policies = "policies"
            case nextMarker = "nextMarker"
        }
    }

    public struct ListCertificatesByCARequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "caCertificateId", location: .uri(locationName: "caCertificateId"), required: true, type: .string), 
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean), 
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string)
        ]
        /// The ID of the CA certificate. This operation will list all registered device certificate that were signed by this CA certificate.
        public let caCertificateId: String
        /// The result page size.
        public let pageSize: Int32?
        /// Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.
        public let ascendingOrder: Bool?
        /// The marker for the next set of results.
        public let marker: String?

        public init(caCertificateId: String, pageSize: Int32? = nil, ascendingOrder: Bool? = nil, marker: String? = nil) {
            self.caCertificateId = caCertificateId
            self.pageSize = pageSize
            self.ascendingOrder = ascendingOrder
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case caCertificateId = "caCertificateId"
            case pageSize = "pageSize"
            case ascendingOrder = "isAscendingOrder"
            case marker = "marker"
        }
    }

    public struct LoggingOptionsPayload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logLevel", required: false, type: .enum), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// The log level.
        public let logLevel: LogLevel?
        /// The ARN of the IAM role that grants access.
        public let roleArn: String

        public init(logLevel: LogLevel? = nil, roleArn: String) {
            self.logLevel = logLevel
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case logLevel = "logLevel"
            case roleArn = "roleArn"
        }
    }

    public struct DeleteRoleAliasResponse: AWSShape {

    }

    public struct TestAuthorizationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authResults", required: false, type: .list)
        ]
        /// The authentication results.
        public let authResults: [AuthResult]?

        public init(authResults: [AuthResult]? = nil) {
            self.authResults = authResults
        }

        private enum CodingKeys: String, CodingKey {
            case authResults = "authResults"
        }
    }

    public struct PutItemInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tableName", required: true, type: .string)
        ]
        /// The table where the message data will be written
        public let tableName: String

        public init(tableName: String) {
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case tableName = "tableName"
        }
    }

    public struct UpdateIndexingConfigurationResponse: AWSShape {

    }

    public struct ResourceIdentifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deviceCertificateId", required: false, type: .string), 
            AWSShapeMember(label: "cognitoIdentityPoolId", required: false, type: .string), 
            AWSShapeMember(label: "policyVersionIdentifier", required: false, type: .structure), 
            AWSShapeMember(label: "clientId", required: false, type: .string), 
            AWSShapeMember(label: "account", required: false, type: .string), 
            AWSShapeMember(label: "caCertificateId", required: false, type: .string)
        ]
        /// The ID of the certificate attached to the resource.
        public let deviceCertificateId: String?
        /// The ID of the Cognito Identity Pool.
        public let cognitoIdentityPoolId: String?
        /// The version of the policy associated with the resource.
        public let policyVersionIdentifier: PolicyVersionIdentifier?
        /// The client ID.
        public let clientId: String?
        /// The account with which the resource is associated.
        public let account: String?
        /// The ID of the CA certificate used to authorize the certificate.
        public let caCertificateId: String?

        public init(deviceCertificateId: String? = nil, cognitoIdentityPoolId: String? = nil, policyVersionIdentifier: PolicyVersionIdentifier? = nil, clientId: String? = nil, account: String? = nil, caCertificateId: String? = nil) {
            self.deviceCertificateId = deviceCertificateId
            self.cognitoIdentityPoolId = cognitoIdentityPoolId
            self.policyVersionIdentifier = policyVersionIdentifier
            self.clientId = clientId
            self.account = account
            self.caCertificateId = caCertificateId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceCertificateId = "deviceCertificateId"
            case cognitoIdentityPoolId = "cognitoIdentityPoolId"
            case policyVersionIdentifier = "policyVersionIdentifier"
            case clientId = "clientId"
            case account = "account"
            case caCertificateId = "caCertificateId"
        }
    }

    public struct CACertificateDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", required: false, type: .string), 
            AWSShapeMember(label: "customerVersion", required: false, type: .integer), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "autoRegistrationStatus", required: false, type: .enum), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "certificatePem", required: false, type: .string), 
            AWSShapeMember(label: "generationId", required: false, type: .string), 
            AWSShapeMember(label: "ownedBy", required: false, type: .string), 
            AWSShapeMember(label: "certificateArn", required: false, type: .string), 
            AWSShapeMember(label: "validity", required: false, type: .structure)
        ]
        /// The CA certificate ID.
        public let certificateId: String?
        /// The customer version of the CA certificate.
        public let customerVersion: Int32?
        /// The date the CA certificate was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The status of a CA certificate.
        public let status: CACertificateStatus?
        /// Whether the CA certificate configured for auto registration of device certificates. Valid values are "ENABLE" and "DISABLE"
        public let autoRegistrationStatus: AutoRegistrationStatus?
        /// The date the CA certificate was created.
        public let creationDate: TimeStamp?
        /// The CA certificate data, in PEM format.
        public let certificatePem: String?
        /// The generation ID of the CA certificate.
        public let generationId: String?
        /// The owner of the CA certificate.
        public let ownedBy: String?
        /// The CA certificate ARN.
        public let certificateArn: String?
        /// When the CA certificate is valid.
        public let validity: CertificateValidity?

        public init(certificateId: String? = nil, customerVersion: Int32? = nil, lastModifiedDate: TimeStamp? = nil, status: CACertificateStatus? = nil, autoRegistrationStatus: AutoRegistrationStatus? = nil, creationDate: TimeStamp? = nil, certificatePem: String? = nil, generationId: String? = nil, ownedBy: String? = nil, certificateArn: String? = nil, validity: CertificateValidity? = nil) {
            self.certificateId = certificateId
            self.customerVersion = customerVersion
            self.lastModifiedDate = lastModifiedDate
            self.status = status
            self.autoRegistrationStatus = autoRegistrationStatus
            self.creationDate = creationDate
            self.certificatePem = certificatePem
            self.generationId = generationId
            self.ownedBy = ownedBy
            self.certificateArn = certificateArn
            self.validity = validity
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "certificateId"
            case customerVersion = "customerVersion"
            case lastModifiedDate = "lastModifiedDate"
            case status = "status"
            case autoRegistrationStatus = "autoRegistrationStatus"
            case creationDate = "creationDate"
            case certificatePem = "certificatePem"
            case generationId = "generationId"
            case ownedBy = "ownedBy"
            case certificateArn = "certificateArn"
            case validity = "validity"
        }
    }

    public struct DeleteStreamRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "streamId", location: .uri(locationName: "streamId"), required: true, type: .string)
        ]
        /// The stream ID.
        public let streamId: String

        public init(streamId: String) {
            self.streamId = streamId
        }

        private enum CodingKeys: String, CodingKey {
            case streamId = "streamId"
        }
    }

    public struct GetV2LoggingOptionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "defaultLogLevel", required: false, type: .enum), 
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "disableAllLogs", required: false, type: .boolean)
        ]
        /// The default log level.
        public let defaultLogLevel: LogLevel?
        /// The IAM role ARN AWS IoT uses to write to your CloudWatch logs.
        public let roleArn: String?
        /// Disables all logs.
        public let disableAllLogs: Bool?

        public init(defaultLogLevel: LogLevel? = nil, roleArn: String? = nil, disableAllLogs: Bool? = nil) {
            self.defaultLogLevel = defaultLogLevel
            self.roleArn = roleArn
            self.disableAllLogs = disableAllLogs
        }

        private enum CodingKeys: String, CodingKey {
            case defaultLogLevel = "defaultLogLevel"
            case roleArn = "roleArn"
            case disableAllLogs = "disableAllLogs"
        }
    }

    public struct DeleteRoleAliasRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleAlias", location: .uri(locationName: "roleAlias"), required: true, type: .string)
        ]
        /// The role alias to delete.
        public let roleAlias: String

        public init(roleAlias: String) {
            self.roleAlias = roleAlias
        }

        private enum CodingKeys: String, CodingKey {
            case roleAlias = "roleAlias"
        }
    }

    public struct JobExecutionSummaryForThing: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobId", required: false, type: .string), 
            AWSShapeMember(label: "jobExecutionSummary", required: false, type: .structure)
        ]
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String?
        /// Contains a subset of information about a job execution.
        public let jobExecutionSummary: JobExecutionSummary?

        public init(jobId: String? = nil, jobExecutionSummary: JobExecutionSummary? = nil) {
            self.jobId = jobId
            self.jobExecutionSummary = jobExecutionSummary
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
            case jobExecutionSummary = "jobExecutionSummary"
        }
    }

    public struct Job: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "timeoutConfig", required: false, type: .structure), 
            AWSShapeMember(label: "jobId", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "completedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "presignedUrlConfig", required: false, type: .structure), 
            AWSShapeMember(label: "targetSelection", required: false, type: .enum), 
            AWSShapeMember(label: "forceCanceled", required: false, type: .boolean), 
            AWSShapeMember(label: "targets", required: false, type: .list), 
            AWSShapeMember(label: "abortConfig", required: false, type: .structure), 
            AWSShapeMember(label: "jobArn", required: false, type: .string), 
            AWSShapeMember(label: "jobProcessDetails", required: false, type: .structure), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "reasonCode", required: false, type: .string), 
            AWSShapeMember(label: "jobExecutionsRolloutConfig", required: false, type: .structure), 
            AWSShapeMember(label: "comment", required: false, type: .string)
        ]
        /// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to IN_PROGRESS. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to TIMED_OUT.
        public let timeoutConfig: TimeoutConfig?
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String?
        /// The status of the job, one of IN_PROGRESS, CANCELED, DELETION_IN_PROGRESS or COMPLETED. 
        public let status: JobStatus?
        /// A short text description of the job.
        public let description: String?
        /// The time, in milliseconds since the epoch, when the job was completed.
        public let completedAt: TimeStamp?
        /// The time, in milliseconds since the epoch, when the job was created.
        public let createdAt: TimeStamp?
        /// Configuration for pre-signed S3 URLs.
        public let presignedUrlConfig: PresignedUrlConfig?
        /// Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a device when the thing representing the device is added to a target group, even after the job was completed by all things originally in the group. 
        public let targetSelection: TargetSelection?
        /// Will be true if the job was canceled with the optional force parameter set to true.
        public let forceCanceled: Bool?
        /// A list of IoT things and thing groups to which the job should be sent.
        public let targets: [String]?
        /// Configuration for criteria to abort the job.
        public let abortConfig: AbortConfig?
        /// An ARN identifying the job with format "arn:aws:iot:region:account:job/jobId".
        public let jobArn: String?
        /// Details about the job process.
        public let jobProcessDetails: JobProcessDetails?
        /// The time, in milliseconds since the epoch, when the job was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// If the job was updated, provides the reason code for the update.
        public let reasonCode: String?
        /// Allows you to create a staged rollout of a job.
        public let jobExecutionsRolloutConfig: JobExecutionsRolloutConfig?
        /// If the job was updated, describes the reason for the update.
        public let comment: String?

        public init(timeoutConfig: TimeoutConfig? = nil, jobId: String? = nil, status: JobStatus? = nil, description: String? = nil, completedAt: TimeStamp? = nil, createdAt: TimeStamp? = nil, presignedUrlConfig: PresignedUrlConfig? = nil, targetSelection: TargetSelection? = nil, forceCanceled: Bool? = nil, targets: [String]? = nil, abortConfig: AbortConfig? = nil, jobArn: String? = nil, jobProcessDetails: JobProcessDetails? = nil, lastUpdatedAt: TimeStamp? = nil, reasonCode: String? = nil, jobExecutionsRolloutConfig: JobExecutionsRolloutConfig? = nil, comment: String? = nil) {
            self.timeoutConfig = timeoutConfig
            self.jobId = jobId
            self.status = status
            self.description = description
            self.completedAt = completedAt
            self.createdAt = createdAt
            self.presignedUrlConfig = presignedUrlConfig
            self.targetSelection = targetSelection
            self.forceCanceled = forceCanceled
            self.targets = targets
            self.abortConfig = abortConfig
            self.jobArn = jobArn
            self.jobProcessDetails = jobProcessDetails
            self.lastUpdatedAt = lastUpdatedAt
            self.reasonCode = reasonCode
            self.jobExecutionsRolloutConfig = jobExecutionsRolloutConfig
            self.comment = comment
        }

        private enum CodingKeys: String, CodingKey {
            case timeoutConfig = "timeoutConfig"
            case jobId = "jobId"
            case status = "status"
            case description = "description"
            case completedAt = "completedAt"
            case createdAt = "createdAt"
            case presignedUrlConfig = "presignedUrlConfig"
            case targetSelection = "targetSelection"
            case forceCanceled = "forceCanceled"
            case targets = "targets"
            case abortConfig = "abortConfig"
            case jobArn = "jobArn"
            case jobProcessDetails = "jobProcessDetails"
            case lastUpdatedAt = "lastUpdatedAt"
            case reasonCode = "reasonCode"
            case jobExecutionsRolloutConfig = "jobExecutionsRolloutConfig"
            case comment = "comment"
        }
    }

    public struct NonCompliantResource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceIdentifier", required: false, type: .structure), 
            AWSShapeMember(label: "additionalInfo", required: false, type: .map), 
            AWSShapeMember(label: "resourceType", required: false, type: .enum)
        ]
        /// Information identifying the non-compliant resource.
        public let resourceIdentifier: ResourceIdentifier?
        /// Additional information about the non-compliant resource.
        public let additionalInfo: [String: String]?
        /// The type of the non-compliant resource.
        public let resourceType: ResourceType?

        public init(resourceIdentifier: ResourceIdentifier? = nil, additionalInfo: [String: String]? = nil, resourceType: ResourceType? = nil) {
            self.resourceIdentifier = resourceIdentifier
            self.additionalInfo = additionalInfo
            self.resourceType = resourceType
        }

        private enum CodingKeys: String, CodingKey {
            case resourceIdentifier = "resourceIdentifier"
            case additionalInfo = "additionalInfo"
            case resourceType = "resourceType"
        }
    }

    public struct ListJobExecutionsForThingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "executionSummaries", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of job execution summaries.
        public let executionSummaries: [JobExecutionSummaryForThing]?
        /// The token for the next set of results, or null if there are no additional results.
        public let nextToken: String?

        public init(executionSummaries: [JobExecutionSummaryForThing]? = nil, nextToken: String? = nil) {
            self.executionSummaries = executionSummaries
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case executionSummaries = "executionSummaries"
            case nextToken = "nextToken"
        }
    }

    public struct MetricValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "count", required: false, type: .long), 
            AWSShapeMember(label: "cidrs", required: false, type: .list), 
            AWSShapeMember(label: "ports", required: false, type: .list)
        ]
        /// If the comparisonOperator calls for a numeric value, use this to specify that numeric value to be compared with the metric.
        public let count: Int64?
        /// If the comparisonOperator calls for a set of CIDRs, use this to specify that set to be compared with the metric.
        public let cidrs: [String]?
        /// If the comparisonOperator calls for a set of ports, use this to specify that set to be compared with the metric.
        public let ports: [Int32]?

        public init(count: Int64? = nil, cidrs: [String]? = nil, ports: [Int32]? = nil) {
            self.count = count
            self.cidrs = cidrs
            self.ports = ports
        }

        private enum CodingKeys: String, CodingKey {
            case count = "count"
            case cidrs = "cidrs"
            case ports = "ports"
        }
    }

    public struct DescribeIndexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "indexName", location: .uri(locationName: "indexName"), required: true, type: .string)
        ]
        /// The index name.
        public let indexName: String

        public init(indexName: String) {
            self.indexName = indexName
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "indexName"
        }
    }

    public struct TestInvokeAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "disconnectAfterInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "principalId", required: false, type: .string), 
            AWSShapeMember(label: "policyDocuments", required: false, type: .list), 
            AWSShapeMember(label: "refreshAfterInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "isAuthenticated", required: false, type: .boolean)
        ]
        /// The number of seconds after which the connection is terminated.
        public let disconnectAfterInSeconds: Int32?
        /// The principal ID.
        public let principalId: String?
        /// IAM policy documents.
        public let policyDocuments: [String]?
        /// The number of seconds after which the temporary credentials are refreshed.
        public let refreshAfterInSeconds: Int32?
        /// True if the token is authenticated, otherwise false.
        public let isAuthenticated: Bool?

        public init(disconnectAfterInSeconds: Int32? = nil, principalId: String? = nil, policyDocuments: [String]? = nil, refreshAfterInSeconds: Int32? = nil, isAuthenticated: Bool? = nil) {
            self.disconnectAfterInSeconds = disconnectAfterInSeconds
            self.principalId = principalId
            self.policyDocuments = policyDocuments
            self.refreshAfterInSeconds = refreshAfterInSeconds
            self.isAuthenticated = isAuthenticated
        }

        private enum CodingKeys: String, CodingKey {
            case disconnectAfterInSeconds = "disconnectAfterInSeconds"
            case principalId = "principalId"
            case policyDocuments = "policyDocuments"
            case refreshAfterInSeconds = "refreshAfterInSeconds"
            case isAuthenticated = "isAuthenticated"
        }
    }

    public struct PolicyVersionIdentifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", required: false, type: .string), 
            AWSShapeMember(label: "policyVersionId", required: false, type: .string)
        ]
        /// The name of the policy.
        public let policyName: String?
        /// The ID of the version of the policy associated with the resource.
        public let policyVersionId: String?

        public init(policyName: String? = nil, policyVersionId: String? = nil) {
            self.policyName = policyName
            self.policyVersionId = policyVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case policyVersionId = "policyVersionId"
        }
    }

    public struct DeleteThingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string), 
            AWSShapeMember(label: "expectedVersion", location: .querystring(locationName: "expectedVersion"), required: false, type: .long)
        ]
        /// The name of the thing to delete.
        public let thingName: String
        /// The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the DeleteThing request is rejected with a VersionConflictException.
        public let expectedVersion: Int64?

        public init(thingName: String, expectedVersion: Int64? = nil) {
            self.thingName = thingName
            self.expectedVersion = expectedVersion
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
            case expectedVersion = "expectedVersion"
        }
    }

    public struct StopThingRegistrationTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskId", location: .uri(locationName: "taskId"), required: true, type: .string)
        ]
        /// The bulk thing provisioning task ID.
        public let taskId: String

        public init(taskId: String) {
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case taskId = "taskId"
        }
    }

    public struct SqsAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "useBase64", required: false, type: .boolean), 
            AWSShapeMember(label: "queueUrl", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// Specifies whether to use Base64 encoding.
        public let useBase64: Bool?
        /// The URL of the Amazon SQS queue.
        public let queueUrl: String
        /// The ARN of the IAM role that grants access.
        public let roleArn: String

        public init(useBase64: Bool? = nil, queueUrl: String, roleArn: String) {
            self.useBase64 = useBase64
            self.queueUrl = queueUrl
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case useBase64 = "useBase64"
            case queueUrl = "queueUrl"
            case roleArn = "roleArn"
        }
    }

    public struct Behavior: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "metric", required: false, type: .string), 
            AWSShapeMember(label: "criteria", required: false, type: .structure), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// What is measured by the behavior.
        public let metric: String?
        /// The criteria that determine if a device is behaving normally in regard to the metric.
        public let criteria: BehaviorCriteria?
        /// The name you have given to the behavior.
        public let name: String

        public init(metric: String? = nil, criteria: BehaviorCriteria? = nil, name: String) {
            self.metric = metric
            self.criteria = criteria
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case metric = "metric"
            case criteria = "criteria"
            case name = "name"
        }
    }

    public struct RateIncreaseCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "numberOfSucceededThings", required: false, type: .integer), 
            AWSShapeMember(label: "numberOfNotifiedThings", required: false, type: .integer)
        ]
        /// The threshold for number of succeeded things that will initiate the increase in rate of rollout.
        public let numberOfSucceededThings: Int32?
        /// The threshold for number of notified things that will initiate the increase in rate of rollout.
        public let numberOfNotifiedThings: Int32?

        public init(numberOfSucceededThings: Int32? = nil, numberOfNotifiedThings: Int32? = nil) {
            self.numberOfSucceededThings = numberOfSucceededThings
            self.numberOfNotifiedThings = numberOfNotifiedThings
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfSucceededThings = "numberOfSucceededThings"
            case numberOfNotifiedThings = "numberOfNotifiedThings"
        }
    }

    public struct CreateTopicRuleRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "topicRulePayload"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "topicRulePayload", required: true, type: .structure), 
            AWSShapeMember(label: "ruleName", location: .uri(locationName: "ruleName"), required: true, type: .string)
        ]
        /// The rule payload.
        public let topicRulePayload: TopicRulePayload
        /// The name of the rule.
        public let ruleName: String

        public init(topicRulePayload: TopicRulePayload, ruleName: String) {
            self.topicRulePayload = topicRulePayload
            self.ruleName = ruleName
        }

        private enum CodingKeys: String, CodingKey {
            case topicRulePayload = "topicRulePayload"
            case ruleName = "ruleName"
        }
    }

    public struct ValidateSecurityProfileBehaviorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "behaviors", required: true, type: .list)
        ]
        /// Specifies the behaviors that, when violated by a device (thing), cause an alert.
        public let behaviors: [Behavior]

        public init(behaviors: [Behavior]) {
            self.behaviors = behaviors
        }

        private enum CodingKeys: String, CodingKey {
            case behaviors = "behaviors"
        }
    }

    public struct Action: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cloudwatchAlarm", required: false, type: .structure), 
            AWSShapeMember(label: "lambda", required: false, type: .structure), 
            AWSShapeMember(label: "dynamoDBv2", required: false, type: .structure), 
            AWSShapeMember(label: "sqs", required: false, type: .structure), 
            AWSShapeMember(label: "firehose", required: false, type: .structure), 
            AWSShapeMember(label: "cloudwatchMetric", required: false, type: .structure), 
            AWSShapeMember(label: "iotAnalytics", required: false, type: .structure), 
            AWSShapeMember(label: "iotEvents", required: false, type: .structure), 
            AWSShapeMember(label: "elasticsearch", required: false, type: .structure), 
            AWSShapeMember(label: "dynamoDB", required: false, type: .structure), 
            AWSShapeMember(label: "salesforce", required: false, type: .structure), 
            AWSShapeMember(label: "republish", required: false, type: .structure), 
            AWSShapeMember(label: "kinesis", required: false, type: .structure), 
            AWSShapeMember(label: "stepFunctions", required: false, type: .structure), 
            AWSShapeMember(label: "s3", required: false, type: .structure), 
            AWSShapeMember(label: "sns", required: false, type: .structure)
        ]
        /// Change the state of a CloudWatch alarm.
        public let cloudwatchAlarm: CloudwatchAlarmAction?
        /// Invoke a Lambda function.
        public let lambda: LambdaAction?
        /// Write to a DynamoDB table. This is a new version of the DynamoDB action. It allows you to write each attribute in an MQTT message payload into a separate DynamoDB column.
        public let dynamoDBv2: DynamoDBv2Action?
        /// Publish to an Amazon SQS queue.
        public let sqs: SqsAction?
        /// Write to an Amazon Kinesis Firehose stream.
        public let firehose: FirehoseAction?
        /// Capture a CloudWatch metric.
        public let cloudwatchMetric: CloudwatchMetricAction?
        /// Sends message data to an AWS IoT Analytics channel.
        public let iotAnalytics: IotAnalyticsAction?
        /// Sends an input to an AWS IoT Events detector.
        public let iotEvents: IotEventsAction?
        /// Write data to an Amazon Elasticsearch Service domain.
        public let elasticsearch: ElasticsearchAction?
        /// Write to a DynamoDB table.
        public let dynamoDB: DynamoDBAction?
        /// Send a message to a Salesforce IoT Cloud Input Stream.
        public let salesforce: SalesforceAction?
        /// Publish to another MQTT topic.
        public let republish: RepublishAction?
        /// Write data to an Amazon Kinesis stream.
        public let kinesis: KinesisAction?
        /// Starts execution of a Step Functions state machine.
        public let stepFunctions: StepFunctionsAction?
        /// Write to an Amazon S3 bucket.
        public let s3: S3Action?
        /// Publish to an Amazon SNS topic.
        public let sns: SnsAction?

        public init(cloudwatchAlarm: CloudwatchAlarmAction? = nil, lambda: LambdaAction? = nil, dynamoDBv2: DynamoDBv2Action? = nil, sqs: SqsAction? = nil, firehose: FirehoseAction? = nil, cloudwatchMetric: CloudwatchMetricAction? = nil, iotAnalytics: IotAnalyticsAction? = nil, iotEvents: IotEventsAction? = nil, elasticsearch: ElasticsearchAction? = nil, dynamoDB: DynamoDBAction? = nil, salesforce: SalesforceAction? = nil, republish: RepublishAction? = nil, kinesis: KinesisAction? = nil, stepFunctions: StepFunctionsAction? = nil, s3: S3Action? = nil, sns: SnsAction? = nil) {
            self.cloudwatchAlarm = cloudwatchAlarm
            self.lambda = lambda
            self.dynamoDBv2 = dynamoDBv2
            self.sqs = sqs
            self.firehose = firehose
            self.cloudwatchMetric = cloudwatchMetric
            self.iotAnalytics = iotAnalytics
            self.iotEvents = iotEvents
            self.elasticsearch = elasticsearch
            self.dynamoDB = dynamoDB
            self.salesforce = salesforce
            self.republish = republish
            self.kinesis = kinesis
            self.stepFunctions = stepFunctions
            self.s3 = s3
            self.sns = sns
        }

        private enum CodingKeys: String, CodingKey {
            case cloudwatchAlarm = "cloudwatchAlarm"
            case lambda = "lambda"
            case dynamoDBv2 = "dynamoDBv2"
            case sqs = "sqs"
            case firehose = "firehose"
            case cloudwatchMetric = "cloudwatchMetric"
            case iotAnalytics = "iotAnalytics"
            case iotEvents = "iotEvents"
            case elasticsearch = "elasticsearch"
            case dynamoDB = "dynamoDB"
            case salesforce = "salesforce"
            case republish = "republish"
            case kinesis = "kinesis"
            case stepFunctions = "stepFunctions"
            case s3 = "s3"
            case sns = "sns"
        }
    }

    public struct RegisterCACertificateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", required: false, type: .string), 
            AWSShapeMember(label: "certificateArn", required: false, type: .string)
        ]
        /// The CA certificate identifier.
        public let certificateId: String?
        /// The CA certificate ARN.
        public let certificateArn: String?

        public init(certificateId: String? = nil, certificateArn: String? = nil) {
            self.certificateId = certificateId
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "certificateId"
            case certificateArn = "certificateArn"
        }
    }

}