// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension IoT {

    public struct AuditFinding: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "severity", required: false, type: .enum), 
            AWSShapeMember(label: "reasonForNonCompliance", required: false, type: .string), 
            AWSShapeMember(label: "reasonForNonComplianceCode", required: false, type: .string), 
            AWSShapeMember(label: "relatedResources", required: false, type: .list), 
            AWSShapeMember(label: "findingTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "taskStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "nonCompliantResource", required: false, type: .structure), 
            AWSShapeMember(label: "checkName", required: false, type: .string), 
            AWSShapeMember(label: "taskId", required: false, type: .string)
        ]
        /// The severity of the result (finding).
        public let severity: AuditFindingSeverity?
        /// The reason the resource was non-compliant.
        public let reasonForNonCompliance: String?
        /// A code which indicates the reason that the resource was non-compliant.
        public let reasonForNonComplianceCode: String?
        /// The list of related resources.
        public let relatedResources: [RelatedResource]?
        /// The time the result (finding) was discovered.
        public let findingTime: TimeStamp?
        /// The time the audit started.
        public let taskStartTime: TimeStamp?
        /// The resource that was found to be non-compliant with the audit check.
        public let nonCompliantResource: NonCompliantResource?
        /// The audit check that generated this result.
        public let checkName: String?
        /// The ID of the audit that generated this result (finding)
        public let taskId: String?

        public init(severity: AuditFindingSeverity? = nil, reasonForNonCompliance: String? = nil, reasonForNonComplianceCode: String? = nil, relatedResources: [RelatedResource]? = nil, findingTime: TimeStamp? = nil, taskStartTime: TimeStamp? = nil, nonCompliantResource: NonCompliantResource? = nil, checkName: String? = nil, taskId: String? = nil) {
            self.severity = severity
            self.reasonForNonCompliance = reasonForNonCompliance
            self.reasonForNonComplianceCode = reasonForNonComplianceCode
            self.relatedResources = relatedResources
            self.findingTime = findingTime
            self.taskStartTime = taskStartTime
            self.nonCompliantResource = nonCompliantResource
            self.checkName = checkName
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case severity = "severity"
            case reasonForNonCompliance = "reasonForNonCompliance"
            case reasonForNonComplianceCode = "reasonForNonComplianceCode"
            case relatedResources = "relatedResources"
            case findingTime = "findingTime"
            case taskStartTime = "taskStartTime"
            case nonCompliantResource = "nonCompliantResource"
            case checkName = "checkName"
            case taskId = "taskId"
        }
    }

    public struct DescribeBillingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "billingGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .long), 
            AWSShapeMember(label: "billingGroupId", required: false, type: .string), 
            AWSShapeMember(label: "billingGroupProperties", required: false, type: .structure), 
            AWSShapeMember(label: "billingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "billingGroupMetadata", required: false, type: .structure)
        ]
        /// The ARN of the billing group.
        public let billingGroupArn: String?
        /// The version of the billing group.
        public let version: Int64?
        /// The ID of the billing group.
        public let billingGroupId: String?
        /// The properties of the billing group.
        public let billingGroupProperties: BillingGroupProperties?
        /// The name of the billing group.
        public let billingGroupName: String?
        /// Additional information about the billing group.
        public let billingGroupMetadata: BillingGroupMetadata?

        public init(billingGroupArn: String? = nil, version: Int64? = nil, billingGroupId: String? = nil, billingGroupProperties: BillingGroupProperties? = nil, billingGroupName: String? = nil, billingGroupMetadata: BillingGroupMetadata? = nil) {
            self.billingGroupArn = billingGroupArn
            self.version = version
            self.billingGroupId = billingGroupId
            self.billingGroupProperties = billingGroupProperties
            self.billingGroupName = billingGroupName
            self.billingGroupMetadata = billingGroupMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case billingGroupArn = "billingGroupArn"
            case version = "version"
            case billingGroupId = "billingGroupId"
            case billingGroupProperties = "billingGroupProperties"
            case billingGroupName = "billingGroupName"
            case billingGroupMetadata = "billingGroupMetadata"
        }
    }

    public struct RepublishAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "topic", required: true, type: .string)
        ]
        /// The ARN of the IAM role that grants access.
        public let roleArn: String
        /// The name of the MQTT topic.
        public let topic: String

        public init(roleArn: String, topic: String) {
            self.roleArn = roleArn
            self.topic = topic
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case topic = "topic"
        }
    }

    public struct TransferCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "certificateId"), required: true, type: .string), 
            AWSShapeMember(label: "transferMessage", required: false, type: .string), 
            AWSShapeMember(label: "targetAwsAccount", location: .querystring(locationName: "targetAwsAccount"), required: true, type: .string)
        ]
        /// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
        public let certificateId: String
        /// The transfer message.
        public let transferMessage: String?
        /// The AWS account.
        public let targetAwsAccount: String

        public init(certificateId: String, transferMessage: String? = nil, targetAwsAccount: String) {
            self.certificateId = certificateId
            self.transferMessage = transferMessage
            self.targetAwsAccount = targetAwsAccount
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "certificateId"
            case transferMessage = "transferMessage"
            case targetAwsAccount = "targetAwsAccount"
        }
    }

    public struct ExplicitDeny: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policies", required: false, type: .list)
        ]
        /// The policies that denied the authorization.
        public let policies: [Policy]?

        public init(policies: [Policy]? = nil) {
            self.policies = policies
        }

        private enum CodingKeys: String, CodingKey {
            case policies = "policies"
        }
    }

    public struct RegisterThingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificatePem", required: false, type: .string), 
            AWSShapeMember(label: "resourceArns", required: false, type: .map)
        ]
        /// .
        public let certificatePem: String?
        /// ARNs for the generated resources.
        public let resourceArns: [String: String]?

        public init(certificatePem: String? = nil, resourceArns: [String: String]? = nil) {
            self.certificatePem = certificatePem
            self.resourceArns = resourceArns
        }

        private enum CodingKeys: String, CodingKey {
            case certificatePem = "certificatePem"
            case resourceArns = "resourceArns"
        }
    }

    public struct SecurityProfileTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: true, type: .string)
        ]
        /// The ARN of the security profile.
        public let arn: String

        public init(arn: String) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
        }
    }

    public enum AuditFrequency: String, CustomStringConvertible, Codable {
        case daily = "DAILY"
        case weekly = "WEEKLY"
        case biweekly = "BIWEEKLY"
        case monthly = "MONTHLY"
        public var description: String { return self.rawValue }
    }

    public struct DeleteAccountAuditConfigurationResponse: AWSShape {

    }

    public struct ListThingGroupsForThingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// The thing name.
        public let thingName: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, thingName: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case thingName = "thingName"
        }
    }

    public struct JobSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupId", required: false, type: .string), 
            AWSShapeMember(label: "jobArn", required: false, type: .string), 
            AWSShapeMember(label: "completedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "jobId", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "targetSelection", required: false, type: .enum), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]
        /// The ID of the thing group.
        public let thingGroupId: String?
        /// The job ARN.
        public let jobArn: String?
        /// The time, in milliseconds since the epoch, when the job completed.
        public let completedAt: TimeStamp?
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String?
        /// The time, in milliseconds since the epoch, when the job was created.
        public let createdAt: TimeStamp?
        /// Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group.
        public let targetSelection: TargetSelection?
        /// The time, in milliseconds since the epoch, when the job was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The job summary status.
        public let status: JobStatus?

        public init(thingGroupId: String? = nil, jobArn: String? = nil, completedAt: TimeStamp? = nil, jobId: String? = nil, createdAt: TimeStamp? = nil, targetSelection: TargetSelection? = nil, lastUpdatedAt: TimeStamp? = nil, status: JobStatus? = nil) {
            self.thingGroupId = thingGroupId
            self.jobArn = jobArn
            self.completedAt = completedAt
            self.jobId = jobId
            self.createdAt = createdAt
            self.targetSelection = targetSelection
            self.lastUpdatedAt = lastUpdatedAt
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupId = "thingGroupId"
            case jobArn = "jobArn"
            case completedAt = "completedAt"
            case jobId = "jobId"
            case createdAt = "createdAt"
            case targetSelection = "targetSelection"
            case lastUpdatedAt = "lastUpdatedAt"
            case status = "status"
        }
    }

    public struct StartOnDemandAuditTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskId", required: false, type: .string)
        ]
        /// The ID of the on-demand audit you started.
        public let taskId: String?

        public init(taskId: String? = nil) {
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case taskId = "taskId"
        }
    }

    public enum IndexStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case building = "BUILDING"
        case rebuilding = "REBUILDING"
        public var description: String { return self.rawValue }
    }

    public struct GetRegistrationCodeRequest: AWSShape {

    }

    public struct OutgoingCertificate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateArn", required: false, type: .string), 
            AWSShapeMember(label: "transferMessage", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "certificateId", required: false, type: .string), 
            AWSShapeMember(label: "transferredTo", required: false, type: .string), 
            AWSShapeMember(label: "transferDate", required: false, type: .timestamp)
        ]
        /// The certificate ARN.
        public let certificateArn: String?
        /// The transfer message.
        public let transferMessage: String?
        /// The certificate creation date.
        public let creationDate: TimeStamp?
        /// The certificate ID.
        public let certificateId: String?
        /// The AWS account to which the transfer was made.
        public let transferredTo: String?
        /// The date the transfer was initiated.
        public let transferDate: TimeStamp?

        public init(certificateArn: String? = nil, transferMessage: String? = nil, creationDate: TimeStamp? = nil, certificateId: String? = nil, transferredTo: String? = nil, transferDate: TimeStamp? = nil) {
            self.certificateArn = certificateArn
            self.transferMessage = transferMessage
            self.creationDate = creationDate
            self.certificateId = certificateId
            self.transferredTo = transferredTo
            self.transferDate = transferDate
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "certificateArn"
            case transferMessage = "transferMessage"
            case creationDate = "creationDate"
            case certificateId = "certificateId"
            case transferredTo = "transferredTo"
            case transferDate = "transferDate"
        }
    }

    public struct SetLoggingOptionsRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "loggingOptionsPayload"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loggingOptionsPayload", required: true, type: .structure)
        ]
        /// The logging options payload.
        public let loggingOptionsPayload: LoggingOptionsPayload

        public init(loggingOptionsPayload: LoggingOptionsPayload) {
            self.loggingOptionsPayload = loggingOptionsPayload
        }

        private enum CodingKeys: String, CodingKey {
            case loggingOptionsPayload = "loggingOptionsPayload"
        }
    }

    public struct DeleteRegistrationCodeResponse: AWSShape {

    }

    public struct ListViolationEventsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileName", location: .querystring(locationName: "securityProfileName"), required: false, type: .string), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "endTime", location: .querystring(locationName: "endTime"), required: true, type: .timestamp), 
            AWSShapeMember(label: "startTime", location: .querystring(locationName: "startTime"), required: true, type: .timestamp), 
            AWSShapeMember(label: "thingName", location: .querystring(locationName: "thingName"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// A filter to limit results to those alerts generated by the specified security profile.
        public let securityProfileName: String?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The end time for the alerts to be listed.
        public let endTime: TimeStamp
        /// The start time for the alerts to be listed.
        public let startTime: TimeStamp
        /// A filter to limit results to those alerts caused by the specified thing.
        public let thingName: String?
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?

        public init(securityProfileName: String? = nil, nextToken: String? = nil, endTime: TimeStamp, startTime: TimeStamp, thingName: String? = nil, maxResults: Int32? = nil) {
            self.securityProfileName = securityProfileName
            self.nextToken = nextToken
            self.endTime = endTime
            self.startTime = startTime
            self.thingName = thingName
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileName = "securityProfileName"
            case nextToken = "nextToken"
            case endTime = "endTime"
            case startTime = "startTime"
            case thingName = "thingName"
            case maxResults = "maxResults"
        }
    }

    public enum EventType: String, CustomStringConvertible, Codable {
        case thing = "THING"
        case thingGroup = "THING_GROUP"
        case thingType = "THING_TYPE"
        case thingGroupMembership = "THING_GROUP_MEMBERSHIP"
        case thingGroupHierarchy = "THING_GROUP_HIERARCHY"
        case thingTypeAssociation = "THING_TYPE_ASSOCIATION"
        case job = "JOB"
        case jobExecution = "JOB_EXECUTION"
        case policy = "POLICY"
        case certificate = "CERTIFICATE"
        case caCertificate = "CA_CERTIFICATE"
        public var description: String { return self.rawValue }
    }

    public struct DeleteSecurityProfileResponse: AWSShape {

    }

    public struct DescribeDefaultAuthorizerRequest: AWSShape {

    }

    public struct PolicyVersion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "versionId", required: false, type: .string), 
            AWSShapeMember(label: "isDefaultVersion", required: false, type: .boolean), 
            AWSShapeMember(label: "createDate", required: false, type: .timestamp)
        ]
        /// The policy version ID.
        public let versionId: String?
        /// Specifies whether the policy version is the default.
        public let isDefaultVersion: Bool?
        /// The date and time the policy was created.
        public let createDate: TimeStamp?

        public init(versionId: String? = nil, isDefaultVersion: Bool? = nil, createDate: TimeStamp? = nil) {
            self.versionId = versionId
            self.isDefaultVersion = isDefaultVersion
            self.createDate = createDate
        }

        private enum CodingKeys: String, CodingKey {
            case versionId = "versionId"
            case isDefaultVersion = "isDefaultVersion"
            case createDate = "createDate"
        }
    }

    public struct CreatePolicyVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string), 
            AWSShapeMember(label: "policyDocument", required: true, type: .string), 
            AWSShapeMember(label: "setAsDefault", location: .querystring(locationName: "setAsDefault"), required: false, type: .boolean)
        ]
        /// The policy name.
        public let policyName: String
        /// The JSON document that describes the policy. Minimum length of 1. Maximum length of 2048, excluding whitespace.
        public let policyDocument: String
        /// Specifies whether the policy version is set as the default. When this parameter is true, the new policy version becomes the operative version (that is, the version that is in effect for the certificates to which the policy is attached).
        public let setAsDefault: Bool?

        public init(policyName: String, policyDocument: String, setAsDefault: Bool? = nil) {
            self.policyName = policyName
            self.policyDocument = policyDocument
            self.setAsDefault = setAsDefault
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case policyDocument = "policyDocument"
            case setAsDefault = "setAsDefault"
        }
    }

    public struct RegisterCertificateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", required: false, type: .string), 
            AWSShapeMember(label: "certificateArn", required: false, type: .string)
        ]
        /// The certificate identifier.
        public let certificateId: String?
        /// The certificate ARN.
        public let certificateArn: String?

        public init(certificateId: String? = nil, certificateArn: String? = nil) {
            self.certificateId = certificateId
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "certificateId"
            case certificateArn = "certificateArn"
        }
    }

    public struct ErrorInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "message", required: false, type: .string), 
            AWSShapeMember(label: "code", required: false, type: .string)
        ]
        /// The error message.
        public let message: String?
        /// The error code.
        public let code: String?

        public init(message: String? = nil, code: String? = nil) {
            self.message = message
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case message = "message"
            case code = "code"
        }
    }

    public struct AttachThingPrincipalResponse: AWSShape {

    }

    public struct SnsAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "targetArn", required: true, type: .string), 
            AWSShapeMember(label: "messageFormat", required: false, type: .enum)
        ]
        /// The ARN of the IAM role that grants access.
        public let roleArn: String
        /// The ARN of the SNS topic.
        public let targetArn: String
        /// (Optional) The message format of the message to publish. Accepted values are "JSON" and "RAW". The default value of the attribute is "RAW". SNS uses this setting to determine if the payload should be parsed and relevant platform-specific bits of the payload should be extracted. To read more about SNS message formats, see http://docs.aws.amazon.com/sns/latest/dg/json-formats.html refer to their official documentation.
        public let messageFormat: MessageFormat?

        public init(roleArn: String, targetArn: String, messageFormat: MessageFormat? = nil) {
            self.roleArn = roleArn
            self.targetArn = targetArn
            self.messageFormat = messageFormat
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case targetArn = "targetArn"
            case messageFormat = "messageFormat"
        }
    }

    public struct CreateKeysAndCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "setAsActive", location: .querystring(locationName: "setAsActive"), required: false, type: .boolean)
        ]
        /// Specifies whether the certificate is active.
        public let setAsActive: Bool?

        public init(setAsActive: Bool? = nil) {
            self.setAsActive = setAsActive
        }

        private enum CodingKeys: String, CodingKey {
            case setAsActive = "setAsActive"
        }
    }

    public struct BehaviorCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "value", required: false, type: .structure), 
            AWSShapeMember(label: "comparisonOperator", required: false, type: .enum), 
            AWSShapeMember(label: "durationSeconds", required: false, type: .integer)
        ]
        /// The value to be compared with the metric.
        public let value: MetricValue?
        /// The operator that relates the thing measured (metric) to the criteria (value).
        public let comparisonOperator: ComparisonOperator?
        /// Use this to specify the period of time over which the behavior is evaluated, for those criteria which have a time dimension (for example, NUM_MESSAGES_SENT).
        public let durationSeconds: Int32?

        public init(value: MetricValue? = nil, comparisonOperator: ComparisonOperator? = nil, durationSeconds: Int32? = nil) {
            self.value = value
            self.comparisonOperator = comparisonOperator
            self.durationSeconds = durationSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case value = "value"
            case comparisonOperator = "comparisonOperator"
            case durationSeconds = "durationSeconds"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .list)
        ]
        /// The ARN of the resource.
        public let resourceArn: String
        /// The new or modified tags for the resource.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct DetachPrincipalPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string), 
            AWSShapeMember(label: "principal", location: .header(locationName: "x-amzn-iot-principal"), required: true, type: .string)
        ]
        /// The name of the policy to detach.
        public let policyName: String
        /// The principal. If the principal is a certificate, specify the certificate ARN. If the principal is an Amazon Cognito identity, specify the identity ID.
        public let principal: String

        public init(policyName: String, principal: String) {
            self.policyName = policyName
            self.principal = principal
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case principal = "x-amzn-iot-principal"
        }
    }

    public struct CreateCertificateFromCsrResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", required: false, type: .string), 
            AWSShapeMember(label: "certificatePem", required: false, type: .string), 
            AWSShapeMember(label: "certificateArn", required: false, type: .string)
        ]
        /// The ID of the certificate. Certificate management operations only take a certificateId.
        public let certificateId: String?
        /// The certificate data, in PEM format.
        public let certificatePem: String?
        /// The Amazon Resource Name (ARN) of the certificate. You can use the ARN as a principal for policy operations.
        public let certificateArn: String?

        public init(certificateId: String? = nil, certificatePem: String? = nil, certificateArn: String? = nil) {
            self.certificateId = certificateId
            self.certificatePem = certificatePem
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "certificateId"
            case certificatePem = "certificatePem"
            case certificateArn = "certificateArn"
        }
    }

    public struct ListRoleAliasesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer), 
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean)
        ]
        /// The maximum number of results to return at one time.
        public let pageSize: Int32?
        /// A marker used to get the next set of results.
        public let marker: String?
        /// Return the list of role aliases in ascending alphabetical order.
        public let ascendingOrder: Bool?

        public init(pageSize: Int32? = nil, marker: String? = nil, ascendingOrder: Bool? = nil) {
            self.pageSize = pageSize
            self.marker = marker
            self.ascendingOrder = ascendingOrder
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "pageSize"
            case marker = "marker"
            case ascendingOrder = "isAscendingOrder"
        }
    }

    public struct ListCACertificatesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificates", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The CA certificates registered in your AWS account.
        public let certificates: [CACertificate]?
        /// The current position within the list of CA certificates.
        public let nextMarker: String?

        public init(certificates: [CACertificate]? = nil, nextMarker: String? = nil) {
            self.certificates = certificates
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "certificates"
            case nextMarker = "nextMarker"
        }
    }

    public enum OTAUpdateStatus: String, CustomStringConvertible, Codable {
        case createPending = "CREATE_PENDING"
        case createInProgress = "CREATE_IN_PROGRESS"
        case createComplete = "CREATE_COMPLETE"
        case createFailed = "CREATE_FAILED"
        public var description: String { return self.rawValue }
    }

    public struct DeleteAuthorizerResponse: AWSShape {

    }

    public struct GetJobDocumentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string)
        ]
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
        }
    }

    public struct ListAuditTasksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "tasks", required: false, type: .list)
        ]
        /// A token that can be used to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The audits that were performed during the specified time period.
        public let tasks: [AuditTaskMetadata]?

        public init(nextToken: String? = nil, tasks: [AuditTaskMetadata]? = nil) {
            self.nextToken = nextToken
            self.tasks = tasks
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case tasks = "tasks"
        }
    }

    public struct CancelAuditTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskId", location: .uri(locationName: "taskId"), required: true, type: .string)
        ]
        /// The ID of the audit you want to cancel. You can only cancel an audit that is "IN_PROGRESS".
        public let taskId: String

        public init(taskId: String) {
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case taskId = "taskId"
        }
    }

    public struct CreateSecurityProfileResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileName", required: false, type: .string), 
            AWSShapeMember(label: "securityProfileArn", required: false, type: .string)
        ]
        /// The name you gave to the security profile.
        public let securityProfileName: String?
        /// The ARN of the security profile.
        public let securityProfileArn: String?

        public init(securityProfileName: String? = nil, securityProfileArn: String? = nil) {
            self.securityProfileName = securityProfileName
            self.securityProfileArn = securityProfileArn
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileName = "securityProfileName"
            case securityProfileArn = "securityProfileArn"
        }
    }

    public struct TestInvokeAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "refreshAfterInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "isAuthenticated", required: false, type: .boolean), 
            AWSShapeMember(label: "disconnectAfterInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "policyDocuments", required: false, type: .list), 
            AWSShapeMember(label: "principalId", required: false, type: .string)
        ]
        /// The number of seconds after which the temporary credentials are refreshed.
        public let refreshAfterInSeconds: Int32?
        /// True if the token is authenticated, otherwise false.
        public let isAuthenticated: Bool?
        /// The number of seconds after which the connection is terminated.
        public let disconnectAfterInSeconds: Int32?
        /// IAM policy documents.
        public let policyDocuments: [String]?
        /// The principal ID.
        public let principalId: String?

        public init(refreshAfterInSeconds: Int32? = nil, isAuthenticated: Bool? = nil, disconnectAfterInSeconds: Int32? = nil, policyDocuments: [String]? = nil, principalId: String? = nil) {
            self.refreshAfterInSeconds = refreshAfterInSeconds
            self.isAuthenticated = isAuthenticated
            self.disconnectAfterInSeconds = disconnectAfterInSeconds
            self.policyDocuments = policyDocuments
            self.principalId = principalId
        }

        private enum CodingKeys: String, CodingKey {
            case refreshAfterInSeconds = "refreshAfterInSeconds"
            case isAuthenticated = "isAuthenticated"
            case disconnectAfterInSeconds = "disconnectAfterInSeconds"
            case policyDocuments = "policyDocuments"
            case principalId = "principalId"
        }
    }

    public struct DescribeScheduledAuditRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "scheduledAuditName", location: .uri(locationName: "scheduledAuditName"), required: true, type: .string)
        ]
        /// The name of the scheduled audit whose information you want to get.
        public let scheduledAuditName: String

        public init(scheduledAuditName: String) {
            self.scheduledAuditName = scheduledAuditName
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledAuditName = "scheduledAuditName"
        }
    }

    public struct Policy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", required: false, type: .string), 
            AWSShapeMember(label: "policyArn", required: false, type: .string)
        ]
        /// The policy name.
        public let policyName: String?
        /// The policy ARN.
        public let policyArn: String?

        public init(policyName: String? = nil, policyArn: String? = nil) {
            self.policyName = policyName
            self.policyArn = policyArn
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case policyArn = "policyArn"
        }
    }

    public struct ListScheduledAuditsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return at one time. The default is 25.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct DetachPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string), 
            AWSShapeMember(label: "target", required: true, type: .string)
        ]
        /// The policy to detach.
        public let policyName: String
        /// The target from which the policy will be detached.
        public let target: String

        public init(policyName: String, target: String) {
            self.policyName = policyName
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case target = "target"
        }
    }

    public enum ComparisonOperator: String, CustomStringConvertible, Codable {
        case lessThan = "less-than"
        case lessThanEquals = "less-than-equals"
        case greaterThan = "greater-than"
        case greaterThanEquals = "greater-than-equals"
        case inCidrSet = "in-cidr-set"
        case notInCidrSet = "not-in-cidr-set"
        case inPortSet = "in-port-set"
        case notInPortSet = "not-in-port-set"
        public var description: String { return self.rawValue }
    }

    public struct DeleteThingTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingTypeName", location: .uri(locationName: "thingTypeName"), required: true, type: .string)
        ]
        /// The name of the thing type.
        public let thingTypeName: String

        public init(thingTypeName: String) {
            self.thingTypeName = thingTypeName
        }

        private enum CodingKeys: String, CodingKey {
            case thingTypeName = "thingTypeName"
        }
    }

    public enum ReportType: String, CustomStringConvertible, Codable {
        case errors = "ERRORS"
        case results = "RESULTS"
        public var description: String { return self.rawValue }
    }

    public struct DeleteScheduledAuditRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "scheduledAuditName", location: .uri(locationName: "scheduledAuditName"), required: true, type: .string)
        ]
        /// The name of the scheduled audit you want to delete.
        public let scheduledAuditName: String

        public init(scheduledAuditName: String) {
            self.scheduledAuditName = scheduledAuditName
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledAuditName = "scheduledAuditName"
        }
    }

    public struct CreateStreamResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "streamVersion", required: false, type: .integer), 
            AWSShapeMember(label: "streamId", required: false, type: .string), 
            AWSShapeMember(label: "streamArn", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// The version of the stream.
        public let streamVersion: Int32?
        /// The stream ID.
        public let streamId: String?
        /// The stream ARN.
        public let streamArn: String?
        /// A description of the stream.
        public let description: String?

        public init(streamVersion: Int32? = nil, streamId: String? = nil, streamArn: String? = nil, description: String? = nil) {
            self.streamVersion = streamVersion
            self.streamId = streamId
            self.streamArn = streamArn
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case streamVersion = "streamVersion"
            case streamId = "streamId"
            case streamArn = "streamArn"
            case description = "description"
        }
    }

    public struct DescribeIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "indexStatus", required: false, type: .enum), 
            AWSShapeMember(label: "indexName", required: false, type: .string), 
            AWSShapeMember(label: "schema", required: false, type: .string)
        ]
        /// The index status.
        public let indexStatus: IndexStatus?
        /// The index name.
        public let indexName: String?
        /// Contains a value that specifies the type of indexing performed. Valid values are:   REGISTRY – Your thing index will contain only registry data.   REGISTRY_AND_SHADOW - Your thing index will contain registry data and shadow data.   REGISTRY_AND_CONNECTIVITY_STATUS - Your thing index will contain registry data and thing connectivity status data.   REGISTRY_AND_SHADOW_AND_CONNECTIVITY_STATUS - Your thing index will contain registry data, shadow data, and thing connectivity status data.  
        public let schema: String?

        public init(indexStatus: IndexStatus? = nil, indexName: String? = nil, schema: String? = nil) {
            self.indexStatus = indexStatus
            self.indexName = indexName
            self.schema = schema
        }

        private enum CodingKeys: String, CodingKey {
            case indexStatus = "indexStatus"
            case indexName = "indexName"
            case schema = "schema"
        }
    }

    public struct ListAuthorizersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizers", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The authorizers.
        public let authorizers: [AuthorizerSummary]?
        /// A marker used to get the next set of results.
        public let nextMarker: String?

        public init(authorizers: [AuthorizerSummary]? = nil, nextMarker: String? = nil) {
            self.authorizers = authorizers
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case authorizers = "authorizers"
            case nextMarker = "nextMarker"
        }
    }

    public struct ListTargetsForPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string), 
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer)
        ]
        /// The policy name.
        public let policyName: String
        /// A marker used to get the next set of results.
        public let marker: String?
        /// The maximum number of results to return at one time.
        public let pageSize: Int32?

        public init(policyName: String, marker: String? = nil, pageSize: Int32? = nil) {
            self.policyName = policyName
            self.marker = marker
            self.pageSize = pageSize
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case marker = "marker"
            case pageSize = "pageSize"
        }
    }

    public struct ListPolicyPrincipalsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "principals", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The descriptions of the principals.
        public let principals: [String]?
        /// The marker for the next set of results, or null if there are no additional results.
        public let nextMarker: String?

        public init(principals: [String]? = nil, nextMarker: String? = nil) {
            self.principals = principals
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case principals = "principals"
            case nextMarker = "nextMarker"
        }
    }

    public struct DescribeJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "job", required: false, type: .structure), 
            AWSShapeMember(label: "documentSource", required: false, type: .string)
        ]
        /// Information about the job.
        public let job: Job?
        /// An S3 link to the job document.
        public let documentSource: String?

        public init(job: Job? = nil, documentSource: String? = nil) {
            self.job = job
            self.documentSource = documentSource
        }

        private enum CodingKeys: String, CodingKey {
            case job = "job"
            case documentSource = "documentSource"
        }
    }

    public enum DayOfWeek: String, CustomStringConvertible, Codable {
        case sun = "SUN"
        case mon = "MON"
        case tue = "TUE"
        case wed = "WED"
        case thu = "THU"
        case fri = "FRI"
        case sat = "SAT"
        public var description: String { return self.rawValue }
    }

    public struct DescribeCACertificateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateDescription", required: false, type: .structure), 
            AWSShapeMember(label: "registrationConfig", required: false, type: .structure)
        ]
        /// The CA certificate description.
        public let certificateDescription: CACertificateDescription?
        /// Information about the registration configuration.
        public let registrationConfig: RegistrationConfig?

        public init(certificateDescription: CACertificateDescription? = nil, registrationConfig: RegistrationConfig? = nil) {
            self.certificateDescription = certificateDescription
            self.registrationConfig = registrationConfig
        }

        private enum CodingKeys: String, CodingKey {
            case certificateDescription = "certificateDescription"
            case registrationConfig = "registrationConfig"
        }
    }

    public struct DescribeEndpointResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "endpointAddress", required: false, type: .string)
        ]
        /// The endpoint. The format of the endpoint is as follows: identifier.iot.region.amazonaws.com.
        public let endpointAddress: String?

        public init(endpointAddress: String? = nil) {
            self.endpointAddress = endpointAddress
        }

        private enum CodingKeys: String, CodingKey {
            case endpointAddress = "endpointAddress"
        }
    }

    public enum Status: String, CustomStringConvertible, Codable {
        case inprogress = "InProgress"
        case completed = "Completed"
        case failed = "Failed"
        case cancelled = "Cancelled"
        case cancelling = "Cancelling"
        public var description: String { return self.rawValue }
    }

    public struct GetEffectivePoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "effectivePolicies", required: false, type: .list)
        ]
        /// The effective policies.
        public let effectivePolicies: [EffectivePolicy]?

        public init(effectivePolicies: [EffectivePolicy]? = nil) {
            self.effectivePolicies = effectivePolicies
        }

        private enum CodingKeys: String, CodingKey {
            case effectivePolicies = "effectivePolicies"
        }
    }

    public struct ListJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupName", location: .querystring(locationName: "thingGroupName"), required: false, type: .string), 
            AWSShapeMember(label: "thingGroupId", location: .querystring(locationName: "thingGroupId"), required: false, type: .string), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "targetSelection", location: .querystring(locationName: "targetSelection"), required: false, type: .enum), 
            AWSShapeMember(label: "status", location: .querystring(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// A filter that limits the returned jobs to those for the specified group.
        public let thingGroupName: String?
        /// A filter that limits the returned jobs to those for the specified group.
        public let thingGroupId: String?
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group. 
        public let targetSelection: TargetSelection?
        /// An optional filter that lets you search for jobs that have the specified status.
        public let status: JobStatus?
        /// The maximum number of results to return per request.
        public let maxResults: Int32?

        public init(thingGroupName: String? = nil, thingGroupId: String? = nil, nextToken: String? = nil, targetSelection: TargetSelection? = nil, status: JobStatus? = nil, maxResults: Int32? = nil) {
            self.thingGroupName = thingGroupName
            self.thingGroupId = thingGroupId
            self.nextToken = nextToken
            self.targetSelection = targetSelection
            self.status = status
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupName = "thingGroupName"
            case thingGroupId = "thingGroupId"
            case nextToken = "nextToken"
            case targetSelection = "targetSelection"
            case status = "status"
            case maxResults = "maxResults"
        }
    }

    public struct DeleteOTAUpdateResponse: AWSShape {

    }

    public struct CustomCodeSigning: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateChain", required: false, type: .structure), 
            AWSShapeMember(label: "signature", required: false, type: .structure), 
            AWSShapeMember(label: "signatureAlgorithm", required: false, type: .string), 
            AWSShapeMember(label: "hashAlgorithm", required: false, type: .string)
        ]
        /// The certificate chain.
        public let certificateChain: CodeSigningCertificateChain?
        /// The signature for the file.
        public let signature: CodeSigningSignature?
        /// The signature algorithm used to code sign the file.
        public let signatureAlgorithm: String?
        /// The hash algorithm used to code sign the file.
        public let hashAlgorithm: String?

        public init(certificateChain: CodeSigningCertificateChain? = nil, signature: CodeSigningSignature? = nil, signatureAlgorithm: String? = nil, hashAlgorithm: String? = nil) {
            self.certificateChain = certificateChain
            self.signature = signature
            self.signatureAlgorithm = signatureAlgorithm
            self.hashAlgorithm = hashAlgorithm
        }

        private enum CodingKeys: String, CodingKey {
            case certificateChain = "certificateChain"
            case signature = "signature"
            case signatureAlgorithm = "signatureAlgorithm"
            case hashAlgorithm = "hashAlgorithm"
        }
    }

    public struct CACertificate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateArn", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "certificateId", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]
        /// The ARN of the CA certificate.
        public let certificateArn: String?
        /// The date the CA certificate was created.
        public let creationDate: TimeStamp?
        /// The ID of the CA certificate.
        public let certificateId: String?
        /// The status of the CA certificate. The status value REGISTER_INACTIVE is deprecated and should not be used.
        public let status: CACertificateStatus?

        public init(certificateArn: String? = nil, creationDate: TimeStamp? = nil, certificateId: String? = nil, status: CACertificateStatus? = nil) {
            self.certificateArn = certificateArn
            self.creationDate = creationDate
            self.certificateId = certificateId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "certificateArn"
            case creationDate = "creationDate"
            case certificateId = "certificateId"
            case status = "status"
        }
    }

    public struct DeleteThingTypeResponse: AWSShape {

    }

    public enum CertificateStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
        case revoked = "REVOKED"
        case pendingTransfer = "PENDING_TRANSFER"
        case registerInactive = "REGISTER_INACTIVE"
        case pendingActivation = "PENDING_ACTIVATION"
        public var description: String { return self.rawValue }
    }

    public struct ThingAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributes", required: false, type: .map), 
            AWSShapeMember(label: "version", required: false, type: .long), 
            AWSShapeMember(label: "thingTypeName", required: false, type: .string), 
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "thingArn", required: false, type: .string)
        ]
        /// A list of thing attributes which are name-value pairs.
        public let attributes: [String: String]?
        /// The version of the thing record in the registry.
        public let version: Int64?
        /// The name of the thing type, if the thing has been associated with a type.
        public let thingTypeName: String?
        /// The name of the thing.
        public let thingName: String?
        /// The thing ARN.
        public let thingArn: String?

        public init(attributes: [String: String]? = nil, version: Int64? = nil, thingTypeName: String? = nil, thingName: String? = nil, thingArn: String? = nil) {
            self.attributes = attributes
            self.version = version
            self.thingTypeName = thingTypeName
            self.thingName = thingName
            self.thingArn = thingArn
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
            case version = "version"
            case thingTypeName = "thingTypeName"
            case thingName = "thingName"
            case thingArn = "thingArn"
        }
    }

    public struct ListPoliciesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer), 
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean)
        ]
        /// The result page size.
        public let pageSize: Int32?
        /// The marker for the next set of results.
        public let marker: String?
        /// Specifies the order for results. If true, the results are returned in ascending creation order.
        public let ascendingOrder: Bool?

        public init(pageSize: Int32? = nil, marker: String? = nil, ascendingOrder: Bool? = nil) {
            self.pageSize = pageSize
            self.marker = marker
            self.ascendingOrder = ascendingOrder
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "pageSize"
            case marker = "marker"
            case ascendingOrder = "isAscendingOrder"
        }
    }

    public enum ThingIndexingMode: String, CustomStringConvertible, Codable {
        case off = "OFF"
        case registry = "REGISTRY"
        case registryAndShadow = "REGISTRY_AND_SHADOW"
        public var description: String { return self.rawValue }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "resourceArn", location: .querystring(locationName: "resourceArn"), required: true, type: .string)
        ]
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// The ARN of the resource.
        public let resourceArn: String

        public init(nextToken: String? = nil, resourceArn: String) {
            self.nextToken = nextToken
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case resourceArn = "resourceArn"
        }
    }

    public struct ListViolationEventsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "violationEvents", required: false, type: .list)
        ]
        /// A token that can be used to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The security profile violation alerts issued for this account during the given time frame, potentially filtered by security profile, behavior violated, or thing (device) violating.
        public let violationEvents: [ViolationEvent]?

        public init(nextToken: String? = nil, violationEvents: [ViolationEvent]? = nil) {
            self.nextToken = nextToken
            self.violationEvents = violationEvents
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case violationEvents = "violationEvents"
        }
    }

    public struct UpdateEventConfigurationsResponse: AWSShape {

    }

    public struct DeleteRegistrationCodeRequest: AWSShape {

    }

    public struct ListIndicesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct ListThingPrincipalsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// The name of the thing.
        public let thingName: String

        public init(thingName: String) {
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
        }
    }

    public struct DescribeThingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "version", required: false, type: .long), 
            AWSShapeMember(label: "defaultClientId", required: false, type: .string), 
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "thingTypeName", required: false, type: .string), 
            AWSShapeMember(label: "billingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "attributes", required: false, type: .map), 
            AWSShapeMember(label: "thingId", required: false, type: .string), 
            AWSShapeMember(label: "thingArn", required: false, type: .string)
        ]
        /// The current version of the thing record in the registry.  To avoid unintentional changes to the information in the registry, you can pass the version information in the expectedVersion parameter of the UpdateThing and DeleteThing calls. 
        public let version: Int64?
        /// The default client ID.
        public let defaultClientId: String?
        /// The name of the thing.
        public let thingName: String?
        /// The thing type name.
        public let thingTypeName: String?
        /// The name of the billing group the thing belongs to.
        public let billingGroupName: String?
        /// The thing attributes.
        public let attributes: [String: String]?
        /// The ID of the thing to describe.
        public let thingId: String?
        /// The ARN of the thing to describe.
        public let thingArn: String?

        public init(version: Int64? = nil, defaultClientId: String? = nil, thingName: String? = nil, thingTypeName: String? = nil, billingGroupName: String? = nil, attributes: [String: String]? = nil, thingId: String? = nil, thingArn: String? = nil) {
            self.version = version
            self.defaultClientId = defaultClientId
            self.thingName = thingName
            self.thingTypeName = thingTypeName
            self.billingGroupName = billingGroupName
            self.attributes = attributes
            self.thingId = thingId
            self.thingArn = thingArn
        }

        private enum CodingKeys: String, CodingKey {
            case version = "version"
            case defaultClientId = "defaultClientId"
            case thingName = "thingName"
            case thingTypeName = "thingTypeName"
            case billingGroupName = "billingGroupName"
            case attributes = "attributes"
            case thingId = "thingId"
            case thingArn = "thingArn"
        }
    }

    public enum ActionType: String, CustomStringConvertible, Codable {
        case publish = "PUBLISH"
        case subscribe = "SUBSCRIBE"
        case receive = "RECEIVE"
        case connect = "CONNECT"
        public var description: String { return self.rawValue }
    }

    public struct StepFunctionsAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "executionNamePrefix", required: false, type: .string), 
            AWSShapeMember(label: "stateMachineName", required: true, type: .string)
        ]
        /// The ARN of the role that grants IoT permission to start execution of a state machine ("Action":"states:StartExecution").
        public let roleArn: String
        /// (Optional) A name will be given to the state machine execution consisting of this prefix followed by a UUID. Step Functions automatically creates a unique name for each state machine execution if one is not provided.
        public let executionNamePrefix: String?
        /// The name of the Step Functions state machine whose execution will be started.
        public let stateMachineName: String

        public init(roleArn: String, executionNamePrefix: String? = nil, stateMachineName: String) {
            self.roleArn = roleArn
            self.executionNamePrefix = executionNamePrefix
            self.stateMachineName = stateMachineName
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case executionNamePrefix = "executionNamePrefix"
            case stateMachineName = "stateMachineName"
        }
    }

    public struct RegisterThingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "parameters", required: false, type: .map), 
            AWSShapeMember(label: "templateBody", required: true, type: .string)
        ]
        /// The parameters for provisioning a thing. See Programmatic Provisioning for more information.
        public let parameters: [String: String]?
        /// The provisioning template. See Programmatic Provisioning for more information.
        public let templateBody: String

        public init(parameters: [String: String]? = nil, templateBody: String) {
            self.parameters = parameters
            self.templateBody = templateBody
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "parameters"
            case templateBody = "templateBody"
        }
    }

    public struct ThingGroupProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupDescription", required: false, type: .string), 
            AWSShapeMember(label: "attributePayload", required: false, type: .structure)
        ]
        /// The thing group description.
        public let thingGroupDescription: String?
        /// The thing group attributes in JSON format.
        public let attributePayload: AttributePayload?

        public init(thingGroupDescription: String? = nil, attributePayload: AttributePayload? = nil) {
            self.thingGroupDescription = thingGroupDescription
            self.attributePayload = attributePayload
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupDescription = "thingGroupDescription"
            case attributePayload = "attributePayload"
        }
    }

    public struct LambdaAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "functionArn", required: true, type: .string)
        ]
        /// The ARN of the Lambda function.
        public let functionArn: String

        public init(functionArn: String) {
            self.functionArn = functionArn
        }

        private enum CodingKeys: String, CodingKey {
            case functionArn = "functionArn"
        }
    }

    public struct AbortConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "criteriaList", required: true, type: .list)
        ]
        /// The list of abort criteria to define rules to abort the job.
        public let criteriaList: [AbortCriteria]

        public init(criteriaList: [AbortCriteria]) {
            self.criteriaList = criteriaList
        }

        private enum CodingKeys: String, CodingKey {
            case criteriaList = "criteriaList"
        }
    }

    public enum AuditNotificationType: String, CustomStringConvertible, Codable {
        case sns = "SNS"
        public var description: String { return self.rawValue }
    }

    public struct CancelJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "force", location: .querystring(locationName: "force"), required: false, type: .boolean), 
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "comment", required: false, type: .string), 
            AWSShapeMember(label: "reasonCode", required: false, type: .string)
        ]
        /// (Optional) If true job executions with status "IN_PROGRESS" and "QUEUED" are canceled, otherwise only job executions with status "QUEUED" are canceled. The default is false. Canceling a job which is "IN_PROGRESS", will cause a device which is executing the job to be unable to update the job execution status. Use caution and ensure that each device executing a job which is canceled is able to recover to a valid state.
        public let force: Bool?
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String
        /// An optional comment string describing why the job was canceled.
        public let comment: String?
        /// (Optional)A reason code string that explains why the job was canceled.
        public let reasonCode: String?

        public init(force: Bool? = nil, jobId: String, comment: String? = nil, reasonCode: String? = nil) {
            self.force = force
            self.jobId = jobId
            self.comment = comment
            self.reasonCode = reasonCode
        }

        private enum CodingKeys: String, CodingKey {
            case force = "force"
            case jobId = "jobId"
            case comment = "comment"
            case reasonCode = "reasonCode"
        }
    }

    public struct ListCACertificatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer), 
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean)
        ]
        /// The result page size.
        public let pageSize: Int32?
        /// The marker for the next set of results.
        public let marker: String?
        /// Determines the order of the results.
        public let ascendingOrder: Bool?

        public init(pageSize: Int32? = nil, marker: String? = nil, ascendingOrder: Bool? = nil) {
            self.pageSize = pageSize
            self.marker = marker
            self.ascendingOrder = ascendingOrder
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "pageSize"
            case marker = "marker"
            case ascendingOrder = "isAscendingOrder"
        }
    }

    public struct JobExecutionsRolloutConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maximumPerMinute", required: false, type: .integer), 
            AWSShapeMember(label: "exponentialRate", required: false, type: .structure)
        ]
        /// The maximum number of things that will be notified of a pending job, per minute. This parameter allows you to create a staged rollout.
        public let maximumPerMinute: Int32?
        /// The rate of increase for a job rollout. This parameter allows you to define an exponential rate for a job rollout.
        public let exponentialRate: ExponentialRolloutRate?

        public init(maximumPerMinute: Int32? = nil, exponentialRate: ExponentialRolloutRate? = nil) {
            self.maximumPerMinute = maximumPerMinute
            self.exponentialRate = exponentialRate
        }

        private enum CodingKeys: String, CodingKey {
            case maximumPerMinute = "maximumPerMinute"
            case exponentialRate = "exponentialRate"
        }
    }

    public struct Action: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cloudwatchMetric", required: false, type: .structure), 
            AWSShapeMember(label: "firehose", required: false, type: .structure), 
            AWSShapeMember(label: "sqs", required: false, type: .structure), 
            AWSShapeMember(label: "dynamoDBv2", required: false, type: .structure), 
            AWSShapeMember(label: "cloudwatchAlarm", required: false, type: .structure), 
            AWSShapeMember(label: "sns", required: false, type: .structure), 
            AWSShapeMember(label: "lambda", required: false, type: .structure), 
            AWSShapeMember(label: "dynamoDB", required: false, type: .structure), 
            AWSShapeMember(label: "iotEvents", required: false, type: .structure), 
            AWSShapeMember(label: "kinesis", required: false, type: .structure), 
            AWSShapeMember(label: "republish", required: false, type: .structure), 
            AWSShapeMember(label: "s3", required: false, type: .structure), 
            AWSShapeMember(label: "elasticsearch", required: false, type: .structure), 
            AWSShapeMember(label: "stepFunctions", required: false, type: .structure), 
            AWSShapeMember(label: "salesforce", required: false, type: .structure), 
            AWSShapeMember(label: "iotAnalytics", required: false, type: .structure)
        ]
        /// Capture a CloudWatch metric.
        public let cloudwatchMetric: CloudwatchMetricAction?
        /// Write to an Amazon Kinesis Firehose stream.
        public let firehose: FirehoseAction?
        /// Publish to an Amazon SQS queue.
        public let sqs: SqsAction?
        /// Write to a DynamoDB table. This is a new version of the DynamoDB action. It allows you to write each attribute in an MQTT message payload into a separate DynamoDB column.
        public let dynamoDBv2: DynamoDBv2Action?
        /// Change the state of a CloudWatch alarm.
        public let cloudwatchAlarm: CloudwatchAlarmAction?
        /// Publish to an Amazon SNS topic.
        public let sns: SnsAction?
        /// Invoke a Lambda function.
        public let lambda: LambdaAction?
        /// Write to a DynamoDB table.
        public let dynamoDB: DynamoDBAction?
        /// Sends an input to an AWS IoT Events detector.
        public let iotEvents: IotEventsAction?
        /// Write data to an Amazon Kinesis stream.
        public let kinesis: KinesisAction?
        /// Publish to another MQTT topic.
        public let republish: RepublishAction?
        /// Write to an Amazon S3 bucket.
        public let s3: S3Action?
        /// Write data to an Amazon Elasticsearch Service domain.
        public let elasticsearch: ElasticsearchAction?
        /// Starts execution of a Step Functions state machine.
        public let stepFunctions: StepFunctionsAction?
        /// Send a message to a Salesforce IoT Cloud Input Stream.
        public let salesforce: SalesforceAction?
        /// Sends message data to an AWS IoT Analytics channel.
        public let iotAnalytics: IotAnalyticsAction?

        public init(cloudwatchMetric: CloudwatchMetricAction? = nil, firehose: FirehoseAction? = nil, sqs: SqsAction? = nil, dynamoDBv2: DynamoDBv2Action? = nil, cloudwatchAlarm: CloudwatchAlarmAction? = nil, sns: SnsAction? = nil, lambda: LambdaAction? = nil, dynamoDB: DynamoDBAction? = nil, iotEvents: IotEventsAction? = nil, kinesis: KinesisAction? = nil, republish: RepublishAction? = nil, s3: S3Action? = nil, elasticsearch: ElasticsearchAction? = nil, stepFunctions: StepFunctionsAction? = nil, salesforce: SalesforceAction? = nil, iotAnalytics: IotAnalyticsAction? = nil) {
            self.cloudwatchMetric = cloudwatchMetric
            self.firehose = firehose
            self.sqs = sqs
            self.dynamoDBv2 = dynamoDBv2
            self.cloudwatchAlarm = cloudwatchAlarm
            self.sns = sns
            self.lambda = lambda
            self.dynamoDB = dynamoDB
            self.iotEvents = iotEvents
            self.kinesis = kinesis
            self.republish = republish
            self.s3 = s3
            self.elasticsearch = elasticsearch
            self.stepFunctions = stepFunctions
            self.salesforce = salesforce
            self.iotAnalytics = iotAnalytics
        }

        private enum CodingKeys: String, CodingKey {
            case cloudwatchMetric = "cloudwatchMetric"
            case firehose = "firehose"
            case sqs = "sqs"
            case dynamoDBv2 = "dynamoDBv2"
            case cloudwatchAlarm = "cloudwatchAlarm"
            case sns = "sns"
            case lambda = "lambda"
            case dynamoDB = "dynamoDB"
            case iotEvents = "iotEvents"
            case kinesis = "kinesis"
            case republish = "republish"
            case s3 = "s3"
            case elasticsearch = "elasticsearch"
            case stepFunctions = "stepFunctions"
            case salesforce = "salesforce"
            case iotAnalytics = "iotAnalytics"
        }
    }

    public struct CreateRoleAliasRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "credentialDurationSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "roleAlias", location: .uri(locationName: "roleAlias"), required: true, type: .string)
        ]
        /// The role ARN.
        public let roleArn: String
        /// How long (in seconds) the credentials will be valid.
        public let credentialDurationSeconds: Int32?
        /// The role alias that points to a role ARN. This allows you to change the role without having to update the device.
        public let roleAlias: String

        public init(roleArn: String, credentialDurationSeconds: Int32? = nil, roleAlias: String) {
            self.roleArn = roleArn
            self.credentialDurationSeconds = credentialDurationSeconds
            self.roleAlias = roleAlias
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case credentialDurationSeconds = "credentialDurationSeconds"
            case roleAlias = "roleAlias"
        }
    }

    public struct DisableTopicRuleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ruleName", location: .uri(locationName: "ruleName"), required: true, type: .string)
        ]
        /// The name of the rule to disable.
        public let ruleName: String

        public init(ruleName: String) {
            self.ruleName = ruleName
        }

        private enum CodingKeys: String, CodingKey {
            case ruleName = "ruleName"
        }
    }

    public struct SecurityProfileTargetMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "target", required: false, type: .structure), 
            AWSShapeMember(label: "securityProfileIdentifier", required: false, type: .structure)
        ]
        /// Information about the target (thing group) associated with the security profile.
        public let target: SecurityProfileTarget?
        /// Information that identifies the security profile.
        public let securityProfileIdentifier: SecurityProfileIdentifier?

        public init(target: SecurityProfileTarget? = nil, securityProfileIdentifier: SecurityProfileIdentifier? = nil) {
            self.target = target
            self.securityProfileIdentifier = securityProfileIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case target = "target"
            case securityProfileIdentifier = "securityProfileIdentifier"
        }
    }

    public struct DeleteDynamicThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "expectedVersion", location: .querystring(locationName: "expectedVersion"), required: false, type: .long), 
            AWSShapeMember(label: "thingGroupName", location: .uri(locationName: "thingGroupName"), required: true, type: .string)
        ]
        /// The expected version of the dynamic thing group to delete.
        public let expectedVersion: Int64?
        /// The name of the dynamic thing group to delete.
        public let thingGroupName: String

        public init(expectedVersion: Int64? = nil, thingGroupName: String) {
            self.expectedVersion = expectedVersion
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case expectedVersion = "expectedVersion"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct DetachSecurityProfileResponse: AWSShape {

    }

    public enum AuditTaskStatus: String, CustomStringConvertible, Codable {
        case inProgress = "IN_PROGRESS"
        case completed = "COMPLETED"
        case failed = "FAILED"
        case canceled = "CANCELED"
        public var description: String { return self.rawValue }
    }

    public enum ThingGroupIndexingMode: String, CustomStringConvertible, Codable {
        case off = "OFF"
        case on = "ON"
        public var description: String { return self.rawValue }
    }

    public enum DynamicGroupStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case building = "BUILDING"
        case rebuilding = "REBUILDING"
        public var description: String { return self.rawValue }
    }

    public struct SetDefaultAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerArn", required: false, type: .string), 
            AWSShapeMember(label: "authorizerName", required: false, type: .string)
        ]
        /// The authorizer ARN.
        public let authorizerArn: String?
        /// The authorizer name.
        public let authorizerName: String?

        public init(authorizerArn: String? = nil, authorizerName: String? = nil) {
            self.authorizerArn = authorizerArn
            self.authorizerName = authorizerName
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerArn = "authorizerArn"
            case authorizerName = "authorizerName"
        }
    }

    public struct DeleteJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "force", location: .querystring(locationName: "force"), required: false, type: .boolean)
        ]
        /// The ID of the job to be deleted. After a job deletion is completed, you may reuse this jobId when you create a new job. However, this is not recommended, and you must ensure that your devices are not using the jobId to refer to the deleted job.
        public let jobId: String
        /// (Optional) When true, you can delete a job which is "IN_PROGRESS". Otherwise, you can only delete a job which is in a terminal state ("COMPLETED" or "CANCELED") or an exception will occur. The default is false.  Deleting a job which is "IN_PROGRESS", will cause a device which is executing the job to be unable to access job information or update the job execution status. Use caution and ensure that each device executing a job which is deleted is able to recover to a valid state. 
        public let force: Bool?

        public init(jobId: String, force: Bool? = nil) {
            self.jobId = jobId
            self.force = force
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
            case force = "force"
        }
    }

    public struct ListJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "jobs", required: false, type: .list)
        ]
        /// The token for the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// A list of jobs.
        public let jobs: [JobSummary]?

        public init(nextToken: String? = nil, jobs: [JobSummary]? = nil) {
            self.nextToken = nextToken
            self.jobs = jobs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case jobs = "jobs"
        }
    }

    public struct GetPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string)
        ]
        /// The name of the policy.
        public let policyName: String

        public init(policyName: String) {
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
        }
    }

    public struct GetTopicRuleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ruleName", location: .uri(locationName: "ruleName"), required: true, type: .string)
        ]
        /// The name of the rule.
        public let ruleName: String

        public init(ruleName: String) {
            self.ruleName = ruleName
        }

        private enum CodingKeys: String, CodingKey {
            case ruleName = "ruleName"
        }
    }

    public struct AddThingToThingGroupResponse: AWSShape {

    }

    public struct UpdateStreamRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "streamId", location: .uri(locationName: "streamId"), required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "files", required: false, type: .list), 
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// The stream ID.
        public let streamId: String
        /// An IAM role that allows the IoT service principal assumes to access your S3 files.
        public let roleArn: String?
        /// The files associated with the stream.
        public let files: [StreamFile]?
        /// The description of the stream.
        public let description: String?

        public init(streamId: String, roleArn: String? = nil, files: [StreamFile]? = nil, description: String? = nil) {
            self.streamId = streamId
            self.roleArn = roleArn
            self.files = files
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case streamId = "streamId"
            case roleArn = "roleArn"
            case files = "files"
            case description = "description"
        }
    }

    public struct SigningProfileParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "platform", required: false, type: .string), 
            AWSShapeMember(label: "certificatePathOnDevice", required: false, type: .string), 
            AWSShapeMember(label: "certificateArn", required: false, type: .string)
        ]
        /// The hardware platform of your device.
        public let platform: String?
        /// The location of the code-signing certificate on your device.
        public let certificatePathOnDevice: String?
        /// Certificate ARN.
        public let certificateArn: String?

        public init(platform: String? = nil, certificatePathOnDevice: String? = nil, certificateArn: String? = nil) {
            self.platform = platform
            self.certificatePathOnDevice = certificatePathOnDevice
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case platform = "platform"
            case certificatePathOnDevice = "certificatePathOnDevice"
            case certificateArn = "certificateArn"
        }
    }

    public struct CodeSigningSignature: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "inlineDocument", required: false, type: .blob)
        ]
        /// A base64 encoded binary representation of the code signing signature.
        public let inlineDocument: Data?

        public init(inlineDocument: Data? = nil) {
            self.inlineDocument = inlineDocument
        }

        private enum CodingKeys: String, CodingKey {
            case inlineDocument = "inlineDocument"
        }
    }

    public struct ListTargetsForSecurityProfileResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "securityProfileTargets", required: false, type: .list)
        ]
        /// A token that can be used to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The thing groups to which the security profile is attached.
        public let securityProfileTargets: [SecurityProfileTarget]?

        public init(nextToken: String? = nil, securityProfileTargets: [SecurityProfileTarget]? = nil) {
            self.nextToken = nextToken
            self.securityProfileTargets = securityProfileTargets
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case securityProfileTargets = "securityProfileTargets"
        }
    }

    public struct ListThingsInThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "recursive", location: .querystring(locationName: "recursive"), required: false, type: .boolean), 
            AWSShapeMember(label: "thingGroupName", location: .uri(locationName: "thingGroupName"), required: true, type: .string)
        ]
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// When true, list things in this thing group and in all child groups as well.
        public let recursive: Bool?
        /// The thing group name.
        public let thingGroupName: String

        public init(maxResults: Int32? = nil, nextToken: String? = nil, recursive: Bool? = nil, thingGroupName: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.recursive = recursive
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case recursive = "recursive"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct StartSigningJobParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "signingProfileParameter", required: false, type: .structure), 
            AWSShapeMember(label: "destination", required: false, type: .structure), 
            AWSShapeMember(label: "signingProfileName", required: false, type: .string)
        ]
        /// Describes the code-signing profile.
        public let signingProfileParameter: SigningProfileParameter?
        /// The location to write the code-signed file.
        public let destination: Destination?
        /// The code-signing profile name.
        public let signingProfileName: String?

        public init(signingProfileParameter: SigningProfileParameter? = nil, destination: Destination? = nil, signingProfileName: String? = nil) {
            self.signingProfileParameter = signingProfileParameter
            self.destination = destination
            self.signingProfileName = signingProfileName
        }

        private enum CodingKeys: String, CodingKey {
            case signingProfileParameter = "signingProfileParameter"
            case destination = "destination"
            case signingProfileName = "signingProfileName"
        }
    }

    public struct ListJobExecutionsForJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", location: .querystring(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The status of the job.
        public let status: JobExecutionStatus?
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String
        /// The maximum number of results to be returned per request.
        public let maxResults: Int32?

        public init(status: JobExecutionStatus? = nil, nextToken: String? = nil, jobId: String, maxResults: Int32? = nil) {
            self.status = status
            self.nextToken = nextToken
            self.jobId = jobId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case nextToken = "nextToken"
            case jobId = "jobId"
            case maxResults = "maxResults"
        }
    }

    public struct UpdateDynamicThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "indexName", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupProperties", required: true, type: .structure), 
            AWSShapeMember(label: "queryString", required: false, type: .string), 
            AWSShapeMember(label: "queryVersion", required: false, type: .string), 
            AWSShapeMember(label: "expectedVersion", required: false, type: .long), 
            AWSShapeMember(label: "thingGroupName", location: .uri(locationName: "thingGroupName"), required: true, type: .string)
        ]
        /// The dynamic thing group index to update.  Currently one index is supported: 'AWS_Things'. 
        public let indexName: String?
        /// The dynamic thing group properties to update.
        public let thingGroupProperties: ThingGroupProperties
        /// The dynamic thing group search query string to update.
        public let queryString: String?
        /// The dynamic thing group query version to update.  Currently one query version is supported: "2017-09-30". If not specified, the query version defaults to this value. 
        public let queryVersion: String?
        /// The expected version of the dynamic thing group to update.
        public let expectedVersion: Int64?
        /// The name of the dynamic thing group to update.
        public let thingGroupName: String

        public init(indexName: String? = nil, thingGroupProperties: ThingGroupProperties, queryString: String? = nil, queryVersion: String? = nil, expectedVersion: Int64? = nil, thingGroupName: String) {
            self.indexName = indexName
            self.thingGroupProperties = thingGroupProperties
            self.queryString = queryString
            self.queryVersion = queryVersion
            self.expectedVersion = expectedVersion
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "indexName"
            case thingGroupProperties = "thingGroupProperties"
            case queryString = "queryString"
            case queryVersion = "queryVersion"
            case expectedVersion = "expectedVersion"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct ListThingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "things", required: false, type: .list)
        ]
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The things.
        public let things: [ThingAttribute]?

        public init(nextToken: String? = nil, things: [ThingAttribute]? = nil) {
            self.nextToken = nextToken
            self.things = things
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case things = "things"
        }
    }

    public struct DetachThingPrincipalRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string), 
            AWSShapeMember(label: "principal", location: .header(locationName: "x-amzn-principal"), required: true, type: .string)
        ]
        /// The name of the thing.
        public let thingName: String
        /// If the principal is a certificate, this value must be ARN of the certificate. If the principal is an Amazon Cognito identity, this value must be the ID of the Amazon Cognito identity.
        public let principal: String

        public init(thingName: String, principal: String) {
            self.thingName = thingName
            self.principal = principal
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
            case principal = "x-amzn-principal"
        }
    }

    public struct DescribeAccountAuditConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "auditCheckConfigurations", required: false, type: .map), 
            AWSShapeMember(label: "auditNotificationTargetConfigurations", required: false, type: .map)
        ]
        /// The ARN of the role that grants permission to AWS IoT to access information about your devices, policies, certificates and other items as necessary when performing an audit. On the first call to UpdateAccountAuditConfiguration this parameter is required.
        public let roleArn: String?
        /// Which audit checks are enabled and disabled for this account.
        public let auditCheckConfigurations: [String: AuditCheckConfiguration]?
        /// Information about the targets to which audit notifications are sent for this account.
        public let auditNotificationTargetConfigurations: [AuditNotificationType: AuditNotificationTarget]?

        public init(roleArn: String? = nil, auditCheckConfigurations: [String: AuditCheckConfiguration]? = nil, auditNotificationTargetConfigurations: [AuditNotificationType: AuditNotificationTarget]? = nil) {
            self.roleArn = roleArn
            self.auditCheckConfigurations = auditCheckConfigurations
            self.auditNotificationTargetConfigurations = auditNotificationTargetConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case auditCheckConfigurations = "auditCheckConfigurations"
            case auditNotificationTargetConfigurations = "auditNotificationTargetConfigurations"
        }
    }

    public struct GetTopicRuleResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rule", required: false, type: .structure), 
            AWSShapeMember(label: "ruleArn", required: false, type: .string)
        ]
        /// The rule.
        public let rule: TopicRule?
        /// The rule ARN.
        public let ruleArn: String?

        public init(rule: TopicRule? = nil, ruleArn: String? = nil) {
            self.rule = rule
            self.ruleArn = ruleArn
        }

        private enum CodingKeys: String, CodingKey {
            case rule = "rule"
            case ruleArn = "ruleArn"
        }
    }

    public struct StartThingRegistrationTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskId", required: false, type: .string)
        ]
        /// The bulk thing provisioning task ID.
        public let taskId: String?

        public init(taskId: String? = nil) {
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case taskId = "taskId"
        }
    }

    public enum MessageFormat: String, CustomStringConvertible, Codable {
        case raw = "RAW"
        case json = "JSON"
        public var description: String { return self.rawValue }
    }

    public struct StreamSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "streamVersion", required: false, type: .integer), 
            AWSShapeMember(label: "streamId", required: false, type: .string), 
            AWSShapeMember(label: "streamArn", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// The stream version.
        public let streamVersion: Int32?
        /// The stream ID.
        public let streamId: String?
        /// The stream ARN.
        public let streamArn: String?
        /// A description of the stream.
        public let description: String?

        public init(streamVersion: Int32? = nil, streamId: String? = nil, streamArn: String? = nil, description: String? = nil) {
            self.streamVersion = streamVersion
            self.streamId = streamId
            self.streamArn = streamArn
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case streamVersion = "streamVersion"
            case streamId = "streamId"
            case streamArn = "streamArn"
            case description = "description"
        }
    }

    public struct UpdateScheduledAuditResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "scheduledAuditArn", required: false, type: .string)
        ]
        /// The ARN of the scheduled audit.
        public let scheduledAuditArn: String?

        public init(scheduledAuditArn: String? = nil) {
            self.scheduledAuditArn = scheduledAuditArn
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledAuditArn = "scheduledAuditArn"
        }
    }

    public struct ListStreamsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean)
        ]
        /// The maximum number of results to return at a time.
        public let maxResults: Int32?
        /// A token used to get the next set of results.
        public let nextToken: String?
        /// Set to true to return the list of streams in ascending order.
        public let ascendingOrder: Bool?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, ascendingOrder: Bool? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.ascendingOrder = ascendingOrder
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case ascendingOrder = "isAscendingOrder"
        }
    }

    public struct CloudwatchMetricAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "metricName", required: true, type: .string), 
            AWSShapeMember(label: "metricValue", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "metricUnit", required: true, type: .string), 
            AWSShapeMember(label: "metricTimestamp", required: false, type: .string), 
            AWSShapeMember(label: "metricNamespace", required: true, type: .string)
        ]
        /// The CloudWatch metric name.
        public let metricName: String
        /// The CloudWatch metric value.
        public let metricValue: String
        /// The IAM role that allows access to the CloudWatch metric.
        public let roleArn: String
        /// The metric unit supported by CloudWatch.
        public let metricUnit: String
        /// An optional Unix timestamp.
        public let metricTimestamp: String?
        /// The CloudWatch metric namespace name.
        public let metricNamespace: String

        public init(metricName: String, metricValue: String, roleArn: String, metricUnit: String, metricTimestamp: String? = nil, metricNamespace: String) {
            self.metricName = metricName
            self.metricValue = metricValue
            self.roleArn = roleArn
            self.metricUnit = metricUnit
            self.metricTimestamp = metricTimestamp
            self.metricNamespace = metricNamespace
        }

        private enum CodingKeys: String, CodingKey {
            case metricName = "metricName"
            case metricValue = "metricValue"
            case roleArn = "roleArn"
            case metricUnit = "metricUnit"
            case metricTimestamp = "metricTimestamp"
            case metricNamespace = "metricNamespace"
        }
    }

    public struct ListTargetsForPolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "targets", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The policy targets.
        public let targets: [String]?
        /// A marker used to get the next set of results.
        public let nextMarker: String?

        public init(targets: [String]? = nil, nextMarker: String? = nil) {
            self.targets = targets
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case targets = "targets"
            case nextMarker = "nextMarker"
        }
    }

    public struct DescribeThingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// The name of the thing.
        public let thingName: String

        public init(thingName: String) {
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
        }
    }

    public struct CreateRoleAliasResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleAliasArn", required: false, type: .string), 
            AWSShapeMember(label: "roleAlias", required: false, type: .string)
        ]
        /// The role alias ARN.
        public let roleAliasArn: String?
        /// The role alias.
        public let roleAlias: String?

        public init(roleAliasArn: String? = nil, roleAlias: String? = nil) {
            self.roleAliasArn = roleAliasArn
            self.roleAlias = roleAlias
        }

        private enum CodingKeys: String, CodingKey {
            case roleAliasArn = "roleAliasArn"
            case roleAlias = "roleAlias"
        }
    }

    public struct ListSecurityProfilesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct DeleteTopicRuleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ruleName", location: .uri(locationName: "ruleName"), required: true, type: .string)
        ]
        /// The name of the rule.
        public let ruleName: String

        public init(ruleName: String) {
            self.ruleName = ruleName
        }

        private enum CodingKeys: String, CodingKey {
            case ruleName = "ruleName"
        }
    }

    public struct CreatePolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string), 
            AWSShapeMember(label: "policyDocument", required: true, type: .string)
        ]
        /// The policy name.
        public let policyName: String
        /// The JSON document that describes the policy. policyDocument must have a minimum length of 1, with a maximum length of 2048, excluding whitespace.
        public let policyDocument: String

        public init(policyName: String, policyDocument: String) {
            self.policyName = policyName
            self.policyDocument = policyDocument
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case policyDocument = "policyDocument"
        }
    }

    public struct GetV2LoggingOptionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "defaultLogLevel", required: false, type: .enum), 
            AWSShapeMember(label: "disableAllLogs", required: false, type: .boolean)
        ]
        /// The IAM role ARN AWS IoT uses to write to your CloudWatch logs.
        public let roleArn: String?
        /// The default log level.
        public let defaultLogLevel: LogLevel?
        /// Disables all logs.
        public let disableAllLogs: Bool?

        public init(roleArn: String? = nil, defaultLogLevel: LogLevel? = nil, disableAllLogs: Bool? = nil) {
            self.roleArn = roleArn
            self.defaultLogLevel = defaultLogLevel
            self.disableAllLogs = disableAllLogs
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case defaultLogLevel = "defaultLogLevel"
            case disableAllLogs = "disableAllLogs"
        }
    }

    public struct ListPolicyVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyVersions", required: false, type: .list)
        ]
        /// The policy versions.
        public let policyVersions: [PolicyVersion]?

        public init(policyVersions: [PolicyVersion]? = nil) {
            self.policyVersions = policyVersions
        }

        private enum CodingKeys: String, CodingKey {
            case policyVersions = "policyVersions"
        }
    }

    public enum JobExecutionFailureType: String, CustomStringConvertible, Codable {
        case failed = "FAILED"
        case rejected = "REJECTED"
        case timedOut = "TIMED_OUT"
        case all = "ALL"
        public var description: String { return self.rawValue }
    }

    public struct JobExecutionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "executionNumber", required: false, type: .long), 
            AWSShapeMember(label: "startedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "queuedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]
        /// The time, in milliseconds since the epoch, when the job execution was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// A string (consisting of the digits "0" through "9") which identifies this particular job execution on this particular device. It can be used later in commands which return or update job execution information.
        public let executionNumber: Int64?
        /// The time, in milliseconds since the epoch, when the job execution started.
        public let startedAt: TimeStamp?
        /// The time, in milliseconds since the epoch, when the job execution was queued.
        public let queuedAt: TimeStamp?
        /// The status of the job execution.
        public let status: JobExecutionStatus?

        public init(lastUpdatedAt: TimeStamp? = nil, executionNumber: Int64? = nil, startedAt: TimeStamp? = nil, queuedAt: TimeStamp? = nil, status: JobExecutionStatus? = nil) {
            self.lastUpdatedAt = lastUpdatedAt
            self.executionNumber = executionNumber
            self.startedAt = startedAt
            self.queuedAt = queuedAt
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedAt = "lastUpdatedAt"
            case executionNumber = "executionNumber"
            case startedAt = "startedAt"
            case queuedAt = "queuedAt"
            case status = "status"
        }
    }

    public struct GetPolicyVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string), 
            AWSShapeMember(label: "policyVersionId", location: .uri(locationName: "policyVersionId"), required: true, type: .string)
        ]
        /// The name of the policy.
        public let policyName: String
        /// The policy version ID.
        public let policyVersionId: String

        public init(policyName: String, policyVersionId: String) {
            self.policyName = policyName
            self.policyVersionId = policyVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case policyVersionId = "policyVersionId"
        }
    }

    public struct ThingGroupIndexingConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupIndexingMode", required: true, type: .enum)
        ]
        /// Thing group indexing mode.
        public let thingGroupIndexingMode: ThingGroupIndexingMode

        public init(thingGroupIndexingMode: ThingGroupIndexingMode) {
            self.thingGroupIndexingMode = thingGroupIndexingMode
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupIndexingMode = "thingGroupIndexingMode"
        }
    }

    public struct ListIndicesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "indexNames", required: false, type: .list)
        ]
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The index names.
        public let indexNames: [String]?

        public init(nextToken: String? = nil, indexNames: [String]? = nil) {
            self.nextToken = nextToken
            self.indexNames = indexNames
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case indexNames = "indexNames"
        }
    }

    public struct ListThingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "attributeValue", location: .querystring(locationName: "attributeValue"), required: false, type: .string), 
            AWSShapeMember(label: "thingTypeName", location: .querystring(locationName: "thingTypeName"), required: false, type: .string), 
            AWSShapeMember(label: "attributeName", location: .querystring(locationName: "attributeName"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// The attribute value used to search for things.
        public let attributeValue: String?
        /// The name of the thing type used to search for things.
        public let thingTypeName: String?
        /// The attribute name used to search for things.
        public let attributeName: String?
        /// The maximum number of results to return in this operation.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, attributeValue: String? = nil, thingTypeName: String? = nil, attributeName: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.attributeValue = attributeValue
            self.thingTypeName = thingTypeName
            self.attributeName = attributeName
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case attributeValue = "attributeValue"
            case thingTypeName = "thingTypeName"
            case attributeName = "attributeName"
            case maxResults = "maxResults"
        }
    }

    public struct AuditCheckDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "checkCompliant", required: false, type: .boolean), 
            AWSShapeMember(label: "totalResourcesCount", required: false, type: .long), 
            AWSShapeMember(label: "message", required: false, type: .string), 
            AWSShapeMember(label: "checkRunStatus", required: false, type: .enum), 
            AWSShapeMember(label: "nonCompliantResourcesCount", required: false, type: .long), 
            AWSShapeMember(label: "errorCode", required: false, type: .string)
        ]
        /// True if the check completed and found all resources compliant.
        public let checkCompliant: Bool?
        /// The number of resources on which the check was performed.
        public let totalResourcesCount: Int64?
        /// The message associated with any error encountered when performing this check during this audit.
        public let message: String?
        /// The completion status of this check, one of "IN_PROGRESS", "WAITING_FOR_DATA_COLLECTION", "CANCELED", "COMPLETED_COMPLIANT", "COMPLETED_NON_COMPLIANT", or "FAILED".
        public let checkRunStatus: AuditCheckRunStatus?
        /// The number of resources that the check found non-compliant.
        public let nonCompliantResourcesCount: Int64?
        /// The code of any error encountered when performing this check during this audit. One of "INSUFFICIENT_PERMISSIONS", or "AUDIT_CHECK_DISABLED".
        public let errorCode: String?

        public init(checkCompliant: Bool? = nil, totalResourcesCount: Int64? = nil, message: String? = nil, checkRunStatus: AuditCheckRunStatus? = nil, nonCompliantResourcesCount: Int64? = nil, errorCode: String? = nil) {
            self.checkCompliant = checkCompliant
            self.totalResourcesCount = totalResourcesCount
            self.message = message
            self.checkRunStatus = checkRunStatus
            self.nonCompliantResourcesCount = nonCompliantResourcesCount
            self.errorCode = errorCode
        }

        private enum CodingKeys: String, CodingKey {
            case checkCompliant = "checkCompliant"
            case totalResourcesCount = "totalResourcesCount"
            case message = "message"
            case checkRunStatus = "checkRunStatus"
            case nonCompliantResourcesCount = "nonCompliantResourcesCount"
            case errorCode = "errorCode"
        }
    }

    public struct TransferData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "transferMessage", required: false, type: .string), 
            AWSShapeMember(label: "rejectReason", required: false, type: .string), 
            AWSShapeMember(label: "rejectDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "acceptDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "transferDate", required: false, type: .timestamp)
        ]
        /// The transfer message.
        public let transferMessage: String?
        /// The reason why the transfer was rejected.
        public let rejectReason: String?
        /// The date the transfer was rejected.
        public let rejectDate: TimeStamp?
        /// The date the transfer was accepted.
        public let acceptDate: TimeStamp?
        /// The date the transfer took place.
        public let transferDate: TimeStamp?

        public init(transferMessage: String? = nil, rejectReason: String? = nil, rejectDate: TimeStamp? = nil, acceptDate: TimeStamp? = nil, transferDate: TimeStamp? = nil) {
            self.transferMessage = transferMessage
            self.rejectReason = rejectReason
            self.rejectDate = rejectDate
            self.acceptDate = acceptDate
            self.transferDate = transferDate
        }

        private enum CodingKeys: String, CodingKey {
            case transferMessage = "transferMessage"
            case rejectReason = "rejectReason"
            case rejectDate = "rejectDate"
            case acceptDate = "acceptDate"
            case transferDate = "transferDate"
        }
    }

    public struct DescribeStreamRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "streamId", location: .uri(locationName: "streamId"), required: true, type: .string)
        ]
        /// The stream ID.
        public let streamId: String

        public init(streamId: String) {
            self.streamId = streamId
        }

        private enum CodingKeys: String, CodingKey {
            case streamId = "streamId"
        }
    }

    public struct DescribeThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupName", location: .uri(locationName: "thingGroupName"), required: true, type: .string)
        ]
        /// The name of the thing group.
        public let thingGroupName: String

        public init(thingGroupName: String) {
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupName = "thingGroupName"
        }
    }

    public struct SetDefaultAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerName", required: true, type: .string)
        ]
        /// The authorizer name.
        public let authorizerName: String

        public init(authorizerName: String) {
            self.authorizerName = authorizerName
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerName = "authorizerName"
        }
    }

    public struct AttachPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string), 
            AWSShapeMember(label: "target", required: true, type: .string)
        ]
        /// The name of the policy to attach.
        public let policyName: String
        /// The identity to which the policy is attached.
        public let target: String

        public init(policyName: String, target: String) {
            self.policyName = policyName
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case target = "target"
        }
    }

    public struct Job: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "timeoutConfig", required: false, type: .structure), 
            AWSShapeMember(label: "forceCanceled", required: false, type: .boolean), 
            AWSShapeMember(label: "presignedUrlConfig", required: false, type: .structure), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "reasonCode", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "jobArn", required: false, type: .string), 
            AWSShapeMember(label: "completedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "jobProcessDetails", required: false, type: .structure), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "jobExecutionsRolloutConfig", required: false, type: .structure), 
            AWSShapeMember(label: "abortConfig", required: false, type: .structure), 
            AWSShapeMember(label: "jobId", required: false, type: .string), 
            AWSShapeMember(label: "comment", required: false, type: .string), 
            AWSShapeMember(label: "targets", required: false, type: .list), 
            AWSShapeMember(label: "targetSelection", required: false, type: .enum)
        ]
        /// Specifies the amount of time each device has to finish its execution of the job. A timer is started when the job execution status is set to IN_PROGRESS. If the job execution status is not set to another terminal state before the timer expires, it will be automatically set to TIMED_OUT.
        public let timeoutConfig: TimeoutConfig?
        /// Will be true if the job was canceled with the optional force parameter set to true.
        public let forceCanceled: Bool?
        /// Configuration for pre-signed S3 URLs.
        public let presignedUrlConfig: PresignedUrlConfig?
        /// The status of the job, one of IN_PROGRESS, CANCELED, DELETION_IN_PROGRESS or COMPLETED. 
        public let status: JobStatus?
        /// If the job was updated, provides the reason code for the update.
        public let reasonCode: String?
        /// The time, in milliseconds since the epoch, when the job was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The time, in milliseconds since the epoch, when the job was created.
        public let createdAt: TimeStamp?
        /// An ARN identifying the job with format "arn:aws:iot:region:account:job/jobId".
        public let jobArn: String?
        /// The time, in milliseconds since the epoch, when the job was completed.
        public let completedAt: TimeStamp?
        /// Details about the job process.
        public let jobProcessDetails: JobProcessDetails?
        /// A short text description of the job.
        public let description: String?
        /// Allows you to create a staged rollout of a job.
        public let jobExecutionsRolloutConfig: JobExecutionsRolloutConfig?
        /// Configuration for criteria to abort the job.
        public let abortConfig: AbortConfig?
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String?
        /// If the job was updated, describes the reason for the update.
        public let comment: String?
        /// A list of IoT things and thing groups to which the job should be sent.
        public let targets: [String]?
        /// Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a device when the thing representing the device is added to a target group, even after the job was completed by all things originally in the group. 
        public let targetSelection: TargetSelection?

        public init(timeoutConfig: TimeoutConfig? = nil, forceCanceled: Bool? = nil, presignedUrlConfig: PresignedUrlConfig? = nil, status: JobStatus? = nil, reasonCode: String? = nil, lastUpdatedAt: TimeStamp? = nil, createdAt: TimeStamp? = nil, jobArn: String? = nil, completedAt: TimeStamp? = nil, jobProcessDetails: JobProcessDetails? = nil, description: String? = nil, jobExecutionsRolloutConfig: JobExecutionsRolloutConfig? = nil, abortConfig: AbortConfig? = nil, jobId: String? = nil, comment: String? = nil, targets: [String]? = nil, targetSelection: TargetSelection? = nil) {
            self.timeoutConfig = timeoutConfig
            self.forceCanceled = forceCanceled
            self.presignedUrlConfig = presignedUrlConfig
            self.status = status
            self.reasonCode = reasonCode
            self.lastUpdatedAt = lastUpdatedAt
            self.createdAt = createdAt
            self.jobArn = jobArn
            self.completedAt = completedAt
            self.jobProcessDetails = jobProcessDetails
            self.description = description
            self.jobExecutionsRolloutConfig = jobExecutionsRolloutConfig
            self.abortConfig = abortConfig
            self.jobId = jobId
            self.comment = comment
            self.targets = targets
            self.targetSelection = targetSelection
        }

        private enum CodingKeys: String, CodingKey {
            case timeoutConfig = "timeoutConfig"
            case forceCanceled = "forceCanceled"
            case presignedUrlConfig = "presignedUrlConfig"
            case status = "status"
            case reasonCode = "reasonCode"
            case lastUpdatedAt = "lastUpdatedAt"
            case createdAt = "createdAt"
            case jobArn = "jobArn"
            case completedAt = "completedAt"
            case jobProcessDetails = "jobProcessDetails"
            case description = "description"
            case jobExecutionsRolloutConfig = "jobExecutionsRolloutConfig"
            case abortConfig = "abortConfig"
            case jobId = "jobId"
            case comment = "comment"
            case targets = "targets"
            case targetSelection = "targetSelection"
        }
    }

    public enum LogLevel: String, CustomStringConvertible, Codable {
        case debug = "DEBUG"
        case info = "INFO"
        case error = "ERROR"
        case warn = "WARN"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public struct UpdateThingGroupsForThingResponse: AWSShape {

    }

    public struct DescribeCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "certificateId"), required: true, type: .string)
        ]
        /// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
        public let certificateId: String

        public init(certificateId: String) {
            self.certificateId = certificateId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "certificateId"
        }
    }

    public struct UpdateCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "certificateId"), required: true, type: .string), 
            AWSShapeMember(label: "newStatus", location: .querystring(locationName: "newStatus"), required: true, type: .enum)
        ]
        /// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
        public let certificateId: String
        /// The new status.  Note: Setting the status to PENDING_TRANSFER will result in an exception being thrown. PENDING_TRANSFER is a status used internally by AWS IoT. It is not intended for developer use.  Note: The status value REGISTER_INACTIVE is deprecated and should not be used.
        public let newStatus: CertificateStatus

        public init(certificateId: String, newStatus: CertificateStatus) {
            self.certificateId = certificateId
            self.newStatus = newStatus
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "certificateId"
            case newStatus = "newStatus"
        }
    }

    public struct ThingGroupMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "parentGroupName", required: false, type: .string), 
            AWSShapeMember(label: "rootToParentThingGroups", required: false, type: .list), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp)
        ]
        /// The parent thing group name.
        public let parentGroupName: String?
        /// The root parent thing group.
        public let rootToParentThingGroups: [GroupNameAndArn]?
        /// The UNIX timestamp of when the thing group was created.
        public let creationDate: TimeStamp?

        public init(parentGroupName: String? = nil, rootToParentThingGroups: [GroupNameAndArn]? = nil, creationDate: TimeStamp? = nil) {
            self.parentGroupName = parentGroupName
            self.rootToParentThingGroups = rootToParentThingGroups
            self.creationDate = creationDate
        }

        private enum CodingKeys: String, CodingKey {
            case parentGroupName = "parentGroupName"
            case rootToParentThingGroups = "rootToParentThingGroups"
            case creationDate = "creationDate"
        }
    }

    public struct ViolationEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "behavior", required: false, type: .structure), 
            AWSShapeMember(label: "violationEventTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "securityProfileName", required: false, type: .string), 
            AWSShapeMember(label: "violationId", required: false, type: .string), 
            AWSShapeMember(label: "metricValue", required: false, type: .structure), 
            AWSShapeMember(label: "violationEventType", required: false, type: .enum)
        ]
        /// The name of the thing responsible for the violation event.
        public let thingName: String?
        /// The behavior which was violated.
        public let behavior: Behavior?
        /// The time the violation event occurred.
        public let violationEventTime: TimeStamp?
        /// The name of the security profile whose behavior was violated.
        public let securityProfileName: String?
        /// The ID of the violation event.
        public let violationId: String?
        /// The value of the metric (the measurement).
        public let metricValue: MetricValue?
        /// The type of violation event.
        public let violationEventType: ViolationEventType?

        public init(thingName: String? = nil, behavior: Behavior? = nil, violationEventTime: TimeStamp? = nil, securityProfileName: String? = nil, violationId: String? = nil, metricValue: MetricValue? = nil, violationEventType: ViolationEventType? = nil) {
            self.thingName = thingName
            self.behavior = behavior
            self.violationEventTime = violationEventTime
            self.securityProfileName = securityProfileName
            self.violationId = violationId
            self.metricValue = metricValue
            self.violationEventType = violationEventType
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
            case behavior = "behavior"
            case violationEventTime = "violationEventTime"
            case securityProfileName = "securityProfileName"
            case violationId = "violationId"
            case metricValue = "metricValue"
            case violationEventType = "violationEventType"
        }
    }

    public struct DeleteRoleAliasRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleAlias", location: .uri(locationName: "roleAlias"), required: true, type: .string)
        ]
        /// The role alias to delete.
        public let roleAlias: String

        public init(roleAlias: String) {
            self.roleAlias = roleAlias
        }

        private enum CodingKeys: String, CodingKey {
            case roleAlias = "roleAlias"
        }
    }

    public enum CannedAccessControlList: String, CustomStringConvertible, Codable {
        case `private` = "private"
        case publicRead = "public-read"
        case publicReadWrite = "public-read-write"
        case awsExecRead = "aws-exec-read"
        case authenticatedRead = "authenticated-read"
        case bucketOwnerRead = "bucket-owner-read"
        case bucketOwnerFullControl = "bucket-owner-full-control"
        case logDeliveryWrite = "log-delivery-write"
        public var description: String { return self.rawValue }
    }

    public struct PolicyVersionIdentifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", required: false, type: .string), 
            AWSShapeMember(label: "policyVersionId", required: false, type: .string)
        ]
        /// The name of the policy.
        public let policyName: String?
        /// The ID of the version of the policy associated with the resource.
        public let policyVersionId: String?

        public init(policyName: String? = nil, policyVersionId: String? = nil) {
            self.policyName = policyName
            self.policyVersionId = policyVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case policyVersionId = "policyVersionId"
        }
    }

    public struct ValidateSecurityProfileBehaviorsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "valid", required: false, type: .boolean), 
            AWSShapeMember(label: "validationErrors", required: false, type: .list)
        ]
        /// True if the behaviors were valid.
        public let valid: Bool?
        /// The list of any errors found in the behaviors.
        public let validationErrors: [ValidationError]?

        public init(valid: Bool? = nil, validationErrors: [ValidationError]? = nil) {
            self.valid = valid
            self.validationErrors = validationErrors
        }

        private enum CodingKeys: String, CodingKey {
            case valid = "valid"
            case validationErrors = "validationErrors"
        }
    }

    public struct DescribeCACertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "caCertificateId"), required: true, type: .string)
        ]
        /// The CA certificate identifier.
        public let certificateId: String

        public init(certificateId: String) {
            self.certificateId = certificateId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "caCertificateId"
        }
    }

    public struct UpdateJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobExecutionsRolloutConfig", required: false, type: .structure), 
            AWSShapeMember(label: "abortConfig", required: false, type: .structure), 
            AWSShapeMember(label: "timeoutConfig", required: false, type: .structure), 
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "presignedUrlConfig", required: false, type: .structure)
        ]
        /// Allows you to create a staged rollout of the job.
        public let jobExecutionsRolloutConfig: JobExecutionsRolloutConfig?
        /// Allows you to create criteria to abort a job.
        public let abortConfig: AbortConfig?
        /// Specifies the amount of time each device has to finish its execution of the job. The timer is started when the job execution status is set to IN_PROGRESS. If the job execution status is not set to another terminal state before the time expires, it will be automatically set to TIMED_OUT. 
        public let timeoutConfig: TimeoutConfig?
        /// The ID of the job to be updated.
        public let jobId: String
        /// A short text description of the job.
        public let description: String?
        /// Configuration information for pre-signed S3 URLs.
        public let presignedUrlConfig: PresignedUrlConfig?

        public init(jobExecutionsRolloutConfig: JobExecutionsRolloutConfig? = nil, abortConfig: AbortConfig? = nil, timeoutConfig: TimeoutConfig? = nil, jobId: String, description: String? = nil, presignedUrlConfig: PresignedUrlConfig? = nil) {
            self.jobExecutionsRolloutConfig = jobExecutionsRolloutConfig
            self.abortConfig = abortConfig
            self.timeoutConfig = timeoutConfig
            self.jobId = jobId
            self.description = description
            self.presignedUrlConfig = presignedUrlConfig
        }

        private enum CodingKeys: String, CodingKey {
            case jobExecutionsRolloutConfig = "jobExecutionsRolloutConfig"
            case abortConfig = "abortConfig"
            case timeoutConfig = "timeoutConfig"
            case jobId = "jobId"
            case description = "description"
            case presignedUrlConfig = "presignedUrlConfig"
        }
    }

    public struct DeleteBillingGroupResponse: AWSShape {

    }

    public struct RemoveThingFromThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingArn", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupName", required: false, type: .string)
        ]
        /// The ARN of the thing to remove from the group.
        public let thingArn: String?
        /// The group ARN.
        public let thingGroupArn: String?
        /// The name of the thing to remove from the group.
        public let thingName: String?
        /// The group name.
        public let thingGroupName: String?

        public init(thingArn: String? = nil, thingGroupArn: String? = nil, thingName: String? = nil, thingGroupName: String? = nil) {
            self.thingArn = thingArn
            self.thingGroupArn = thingGroupArn
            self.thingName = thingName
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case thingArn = "thingArn"
            case thingGroupArn = "thingGroupArn"
            case thingName = "thingName"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct Stream: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fileId", required: false, type: .integer), 
            AWSShapeMember(label: "streamId", required: false, type: .string)
        ]
        /// The ID of a file associated with a stream.
        public let fileId: Int32?
        /// The stream ID.
        public let streamId: String?

        public init(fileId: Int32? = nil, streamId: String? = nil) {
            self.fileId = fileId
            self.streamId = streamId
        }

        private enum CodingKeys: String, CodingKey {
            case fileId = "fileId"
            case streamId = "streamId"
        }
    }

    public struct DescribeEventConfigurationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "eventConfigurations", required: false, type: .map)
        ]
        /// The date the event configurations were last modified.
        public let lastModifiedDate: TimeStamp?
        /// The creation date of the event configuration.
        public let creationDate: TimeStamp?
        /// The event configurations.
        public let eventConfigurations: [EventType: Configuration]?

        public init(lastModifiedDate: TimeStamp? = nil, creationDate: TimeStamp? = nil, eventConfigurations: [EventType: Configuration]? = nil) {
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.eventConfigurations = eventConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedDate = "lastModifiedDate"
            case creationDate = "creationDate"
            case eventConfigurations = "eventConfigurations"
        }
    }

    public struct ElasticsearchAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "endpoint", required: true, type: .string), 
            AWSShapeMember(label: "type", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "index", required: true, type: .string), 
            AWSShapeMember(label: "id", required: true, type: .string)
        ]
        /// The endpoint of your Elasticsearch domain.
        public let endpoint: String
        /// The type of document you are storing.
        public let `type`: String
        /// The IAM role ARN that has access to Elasticsearch.
        public let roleArn: String
        /// The Elasticsearch index where you want to store your data.
        public let index: String
        /// The unique identifier for the document you are storing.
        public let id: String

        public init(endpoint: String, type: String, roleArn: String, index: String, id: String) {
            self.endpoint = endpoint
            self.`type` = `type`
            self.roleArn = roleArn
            self.index = index
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case endpoint = "endpoint"
            case `type` = "type"
            case roleArn = "roleArn"
            case index = "index"
            case id = "id"
        }
    }

    public struct DeleteStreamRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "streamId", location: .uri(locationName: "streamId"), required: true, type: .string)
        ]
        /// The stream ID.
        public let streamId: String

        public init(streamId: String) {
            self.streamId = streamId
        }

        private enum CodingKeys: String, CodingKey {
            case streamId = "streamId"
        }
    }

    public struct AuthInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "actionType", required: false, type: .enum), 
            AWSShapeMember(label: "resources", required: false, type: .list)
        ]
        /// The type of action for which the principal is being authorized.
        public let actionType: ActionType?
        /// The resources for which the principal is being authorized to perform the specified action.
        public let resources: [String]?

        public init(actionType: ActionType? = nil, resources: [String]? = nil) {
            self.actionType = actionType
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case actionType = "actionType"
            case resources = "resources"
        }
    }

    public struct DeprecateThingTypeResponse: AWSShape {

    }

    public struct DeletePolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string)
        ]
        /// The name of the policy to delete.
        public let policyName: String

        public init(policyName: String) {
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
        }
    }

    public struct ThingGroupDocument: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "parentGroupNames", required: false, type: .list), 
            AWSShapeMember(label: "thingGroupDescription", required: false, type: .string), 
            AWSShapeMember(label: "attributes", required: false, type: .map), 
            AWSShapeMember(label: "thingGroupId", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupName", required: false, type: .string)
        ]
        /// Parent group names.
        public let parentGroupNames: [String]?
        /// The thing group description.
        public let thingGroupDescription: String?
        /// The thing group attributes.
        public let attributes: [String: String]?
        /// The thing group ID.
        public let thingGroupId: String?
        /// The thing group name.
        public let thingGroupName: String?

        public init(parentGroupNames: [String]? = nil, thingGroupDescription: String? = nil, attributes: [String: String]? = nil, thingGroupId: String? = nil, thingGroupName: String? = nil) {
            self.parentGroupNames = parentGroupNames
            self.thingGroupDescription = thingGroupDescription
            self.attributes = attributes
            self.thingGroupId = thingGroupId
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case parentGroupNames = "parentGroupNames"
            case thingGroupDescription = "thingGroupDescription"
            case attributes = "attributes"
            case thingGroupId = "thingGroupId"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct DescribeThingTypeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingTypeMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "thingTypeProperties", required: false, type: .structure), 
            AWSShapeMember(label: "thingTypeName", required: false, type: .string), 
            AWSShapeMember(label: "thingTypeId", required: false, type: .string), 
            AWSShapeMember(label: "thingTypeArn", required: false, type: .string)
        ]
        /// The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when it was deprecated.
        public let thingTypeMetadata: ThingTypeMetadata?
        /// The ThingTypeProperties contains information about the thing type including description, and a list of searchable thing attribute names.
        public let thingTypeProperties: ThingTypeProperties?
        /// The name of the thing type.
        public let thingTypeName: String?
        /// The thing type ID.
        public let thingTypeId: String?
        /// The thing type ARN.
        public let thingTypeArn: String?

        public init(thingTypeMetadata: ThingTypeMetadata? = nil, thingTypeProperties: ThingTypeProperties? = nil, thingTypeName: String? = nil, thingTypeId: String? = nil, thingTypeArn: String? = nil) {
            self.thingTypeMetadata = thingTypeMetadata
            self.thingTypeProperties = thingTypeProperties
            self.thingTypeName = thingTypeName
            self.thingTypeId = thingTypeId
            self.thingTypeArn = thingTypeArn
        }

        private enum CodingKeys: String, CodingKey {
            case thingTypeMetadata = "thingTypeMetadata"
            case thingTypeProperties = "thingTypeProperties"
            case thingTypeName = "thingTypeName"
            case thingTypeId = "thingTypeId"
            case thingTypeArn = "thingTypeArn"
        }
    }

    public struct CertificateDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateArn", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "ownedBy", required: false, type: .string), 
            AWSShapeMember(label: "certificateId", required: false, type: .string), 
            AWSShapeMember(label: "caCertificateId", required: false, type: .string), 
            AWSShapeMember(label: "validity", required: false, type: .structure), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "certificatePem", required: false, type: .string), 
            AWSShapeMember(label: "transferData", required: false, type: .structure), 
            AWSShapeMember(label: "generationId", required: false, type: .string), 
            AWSShapeMember(label: "customerVersion", required: false, type: .integer), 
            AWSShapeMember(label: "previousOwnedBy", required: false, type: .string)
        ]
        /// The ARN of the certificate.
        public let certificateArn: String?
        /// The status of the certificate.
        public let status: CertificateStatus?
        /// The ID of the AWS account that owns the certificate.
        public let ownedBy: String?
        /// The ID of the certificate.
        public let certificateId: String?
        /// The certificate ID of the CA certificate used to sign this certificate.
        public let caCertificateId: String?
        /// When the certificate is valid.
        public let validity: CertificateValidity?
        /// The date and time the certificate was created.
        public let creationDate: TimeStamp?
        /// The date and time the certificate was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The certificate data, in PEM format.
        public let certificatePem: String?
        /// The transfer data.
        public let transferData: TransferData?
        /// The generation ID of the certificate.
        public let generationId: String?
        /// The customer version of the certificate.
        public let customerVersion: Int32?
        /// The ID of the AWS account of the previous owner of the certificate.
        public let previousOwnedBy: String?

        public init(certificateArn: String? = nil, status: CertificateStatus? = nil, ownedBy: String? = nil, certificateId: String? = nil, caCertificateId: String? = nil, validity: CertificateValidity? = nil, creationDate: TimeStamp? = nil, lastModifiedDate: TimeStamp? = nil, certificatePem: String? = nil, transferData: TransferData? = nil, generationId: String? = nil, customerVersion: Int32? = nil, previousOwnedBy: String? = nil) {
            self.certificateArn = certificateArn
            self.status = status
            self.ownedBy = ownedBy
            self.certificateId = certificateId
            self.caCertificateId = caCertificateId
            self.validity = validity
            self.creationDate = creationDate
            self.lastModifiedDate = lastModifiedDate
            self.certificatePem = certificatePem
            self.transferData = transferData
            self.generationId = generationId
            self.customerVersion = customerVersion
            self.previousOwnedBy = previousOwnedBy
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "certificateArn"
            case status = "status"
            case ownedBy = "ownedBy"
            case certificateId = "certificateId"
            case caCertificateId = "caCertificateId"
            case validity = "validity"
            case creationDate = "creationDate"
            case lastModifiedDate = "lastModifiedDate"
            case certificatePem = "certificatePem"
            case transferData = "transferData"
            case generationId = "generationId"
            case customerVersion = "customerVersion"
            case previousOwnedBy = "previousOwnedBy"
        }
    }

    public struct SetV2LoggingOptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "defaultLogLevel", required: false, type: .enum), 
            AWSShapeMember(label: "disableAllLogs", required: false, type: .boolean)
        ]
        /// The ARN of the role that allows IoT to write to Cloudwatch logs.
        public let roleArn: String?
        /// The default logging level.
        public let defaultLogLevel: LogLevel?
        /// If true all logs are disabled. The default is false.
        public let disableAllLogs: Bool?

        public init(roleArn: String? = nil, defaultLogLevel: LogLevel? = nil, disableAllLogs: Bool? = nil) {
            self.roleArn = roleArn
            self.defaultLogLevel = defaultLogLevel
            self.disableAllLogs = disableAllLogs
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case defaultLogLevel = "defaultLogLevel"
            case disableAllLogs = "disableAllLogs"
        }
    }

    public struct ListActiveViolationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "activeViolations", required: false, type: .list)
        ]
        /// A token that can be used to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The list of active violations.
        public let activeViolations: [ActiveViolation]?

        public init(nextToken: String? = nil, activeViolations: [ActiveViolation]? = nil) {
            self.nextToken = nextToken
            self.activeViolations = activeViolations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case activeViolations = "activeViolations"
        }
    }

    public struct AssociateTargetsWithJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "targets", required: true, type: .list), 
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "comment", required: false, type: .string)
        ]
        /// A list of thing group ARNs that define the targets of the job.
        public let targets: [String]
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String
        /// An optional comment string describing why the job was associated with the targets.
        public let comment: String?

        public init(targets: [String], jobId: String, comment: String? = nil) {
            self.targets = targets
            self.jobId = jobId
            self.comment = comment
        }

        private enum CodingKeys: String, CodingKey {
            case targets = "targets"
            case jobId = "jobId"
            case comment = "comment"
        }
    }

    public struct LogTargetConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logTarget", required: false, type: .structure), 
            AWSShapeMember(label: "logLevel", required: false, type: .enum)
        ]
        /// A log target
        public let logTarget: LogTarget?
        /// The logging level.
        public let logLevel: LogLevel?

        public init(logTarget: LogTarget? = nil, logLevel: LogLevel? = nil) {
            self.logTarget = logTarget
            self.logLevel = logLevel
        }

        private enum CodingKeys: String, CodingKey {
            case logTarget = "logTarget"
            case logLevel = "logLevel"
        }
    }

    public enum JobExecutionStatus: String, CustomStringConvertible, Codable {
        case queued = "QUEUED"
        case inProgress = "IN_PROGRESS"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        case timedOut = "TIMED_OUT"
        case rejected = "REJECTED"
        case removed = "REMOVED"
        case canceled = "CANCELED"
        public var description: String { return self.rawValue }
    }

    public struct GetIndexingConfigurationRequest: AWSShape {

    }

    public struct RateIncreaseCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "numberOfNotifiedThings", required: false, type: .integer), 
            AWSShapeMember(label: "numberOfSucceededThings", required: false, type: .integer)
        ]
        /// The threshold for number of notified things that will initiate the increase in rate of rollout.
        public let numberOfNotifiedThings: Int32?
        /// The threshold for number of succeeded things that will initiate the increase in rate of rollout.
        public let numberOfSucceededThings: Int32?

        public init(numberOfNotifiedThings: Int32? = nil, numberOfSucceededThings: Int32? = nil) {
            self.numberOfNotifiedThings = numberOfNotifiedThings
            self.numberOfSucceededThings = numberOfSucceededThings
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfNotifiedThings = "numberOfNotifiedThings"
            case numberOfSucceededThings = "numberOfSucceededThings"
        }
    }

    public struct FirehoseAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "separator", required: false, type: .string), 
            AWSShapeMember(label: "deliveryStreamName", required: true, type: .string)
        ]
        /// The IAM role that grants access to the Amazon Kinesis Firehose stream.
        public let roleArn: String
        /// A character separator that will be used to separate records written to the Firehose stream. Valid values are: '\n' (newline), '\t' (tab), '\r\n' (Windows newline), ',' (comma).
        public let separator: String?
        /// The delivery stream name.
        public let deliveryStreamName: String

        public init(roleArn: String, separator: String? = nil, deliveryStreamName: String) {
            self.roleArn = roleArn
            self.separator = separator
            self.deliveryStreamName = deliveryStreamName
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case separator = "separator"
            case deliveryStreamName = "deliveryStreamName"
        }
    }

    public struct CreateTopicRuleRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "topicRulePayload"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "topicRulePayload", required: true, type: .structure), 
            AWSShapeMember(label: "ruleName", location: .uri(locationName: "ruleName"), required: true, type: .string)
        ]
        /// The rule payload.
        public let topicRulePayload: TopicRulePayload
        /// The name of the rule.
        public let ruleName: String

        public init(topicRulePayload: TopicRulePayload, ruleName: String) {
            self.topicRulePayload = topicRulePayload
            self.ruleName = ruleName
        }

        private enum CodingKeys: String, CodingKey {
            case topicRulePayload = "topicRulePayload"
            case ruleName = "ruleName"
        }
    }

    public struct ListV2LoggingLevelsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "targetType", location: .querystring(locationName: "targetType"), required: false, type: .enum)
        ]
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// The type of resource for which you are configuring logging. Must be THING_Group.
        public let targetType: LogTargetType?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, targetType: LogTargetType? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.targetType = targetType
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case targetType = "targetType"
        }
    }

    public struct UpdateBillingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "expectedVersion", required: false, type: .long), 
            AWSShapeMember(label: "billingGroupName", location: .uri(locationName: "billingGroupName"), required: true, type: .string), 
            AWSShapeMember(label: "billingGroupProperties", required: true, type: .structure)
        ]
        /// The expected version of the billing group. If the version of the billing group does not match the expected version specified in the request, the UpdateBillingGroup request is rejected with a VersionConflictException.
        public let expectedVersion: Int64?
        /// The name of the billing group.
        public let billingGroupName: String
        /// The properties of the billing group.
        public let billingGroupProperties: BillingGroupProperties

        public init(expectedVersion: Int64? = nil, billingGroupName: String, billingGroupProperties: BillingGroupProperties) {
            self.expectedVersion = expectedVersion
            self.billingGroupName = billingGroupName
            self.billingGroupProperties = billingGroupProperties
        }

        private enum CodingKeys: String, CodingKey {
            case expectedVersion = "expectedVersion"
            case billingGroupName = "billingGroupName"
            case billingGroupProperties = "billingGroupProperties"
        }
    }

    public struct CreateStreamRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "streamId", location: .uri(locationName: "streamId"), required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "files", required: true, type: .list), 
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// The stream ID.
        public let streamId: String
        /// An IAM role that allows the IoT service principal assumes to access your S3 files.
        public let roleArn: String
        /// The files to stream.
        public let files: [StreamFile]
        /// A description of the stream.
        public let description: String?

        public init(streamId: String, roleArn: String, files: [StreamFile], description: String? = nil) {
            self.streamId = streamId
            self.roleArn = roleArn
            self.files = files
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case streamId = "streamId"
            case roleArn = "roleArn"
            case files = "files"
            case description = "description"
        }
    }

    public struct ListRoleAliasesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleAliases", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The role aliases.
        public let roleAliases: [String]?
        /// A marker used to get the next set of results.
        public let nextMarker: String?

        public init(roleAliases: [String]? = nil, nextMarker: String? = nil) {
            self.roleAliases = roleAliases
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case roleAliases = "roleAliases"
            case nextMarker = "nextMarker"
        }
    }

    public struct Behavior: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "metric", required: false, type: .string), 
            AWSShapeMember(label: "criteria", required: false, type: .structure), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// What is measured by the behavior.
        public let metric: String?
        /// The criteria that determine if a device is behaving normally in regard to the metric.
        public let criteria: BehaviorCriteria?
        /// The name you have given to the behavior.
        public let name: String

        public init(metric: String? = nil, criteria: BehaviorCriteria? = nil, name: String) {
            self.metric = metric
            self.criteria = criteria
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case metric = "metric"
            case criteria = "criteria"
            case name = "name"
        }
    }

    public struct ValidateSecurityProfileBehaviorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "behaviors", required: true, type: .list)
        ]
        /// Specifies the behaviors that, when violated by a device (thing), cause an alert.
        public let behaviors: [Behavior]

        public init(behaviors: [Behavior]) {
            self.behaviors = behaviors
        }

        private enum CodingKeys: String, CodingKey {
            case behaviors = "behaviors"
        }
    }

    public struct CreateBillingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "billingGroupName", location: .uri(locationName: "billingGroupName"), required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "billingGroupProperties", required: false, type: .structure)
        ]
        /// The name you wish to give to the billing group.
        public let billingGroupName: String
        /// Metadata which can be used to manage the billing group.
        public let tags: [Tag]?
        /// The properties of the billing group.
        public let billingGroupProperties: BillingGroupProperties?

        public init(billingGroupName: String, tags: [Tag]? = nil, billingGroupProperties: BillingGroupProperties? = nil) {
            self.billingGroupName = billingGroupName
            self.tags = tags
            self.billingGroupProperties = billingGroupProperties
        }

        private enum CodingKeys: String, CodingKey {
            case billingGroupName = "billingGroupName"
            case tags = "tags"
            case billingGroupProperties = "billingGroupProperties"
        }
    }

    public struct RegisterCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificatePem", required: true, type: .string), 
            AWSShapeMember(label: "caCertificatePem", required: false, type: .string), 
            AWSShapeMember(label: "setAsActive", location: .querystring(locationName: "setAsActive"), required: false, type: .boolean), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]
        /// The certificate data, in PEM format.
        public let certificatePem: String
        /// The CA certificate used to sign the device certificate being registered.
        public let caCertificatePem: String?
        /// A boolean value that specifies if the CA certificate is set to active.
        public let setAsActive: Bool?
        /// The status of the register certificate request.
        public let status: CertificateStatus?

        public init(certificatePem: String, caCertificatePem: String? = nil, setAsActive: Bool? = nil, status: CertificateStatus? = nil) {
            self.certificatePem = certificatePem
            self.caCertificatePem = caCertificatePem
            self.setAsActive = setAsActive
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case certificatePem = "certificatePem"
            case caCertificatePem = "caCertificatePem"
            case setAsActive = "setAsActive"
            case status = "status"
        }
    }

    public struct DescribeBillingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "billingGroupName", location: .uri(locationName: "billingGroupName"), required: true, type: .string)
        ]
        /// The name of the billing group.
        public let billingGroupName: String

        public init(billingGroupName: String) {
            self.billingGroupName = billingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case billingGroupName = "billingGroupName"
        }
    }

    public struct DescribeThingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupId", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .long), 
            AWSShapeMember(label: "thingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "queryVersion", required: false, type: .string), 
            AWSShapeMember(label: "queryString", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupProperties", required: false, type: .structure), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "thingGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "indexName", required: false, type: .string)
        ]
        /// The thing group ID.
        public let thingGroupId: String?
        /// The version of the thing group.
        public let version: Int64?
        /// The name of the thing group.
        public let thingGroupName: String?
        /// The dynamic thing group query version.
        public let queryVersion: String?
        /// The dynamic thing group search query string.
        public let queryString: String?
        /// The thing group properties.
        public let thingGroupProperties: ThingGroupProperties?
        /// The dynamic thing group status.
        public let status: DynamicGroupStatus?
        /// The thing group ARN.
        public let thingGroupArn: String?
        /// Thing group metadata.
        public let thingGroupMetadata: ThingGroupMetadata?
        /// The dynamic thing group index name.
        public let indexName: String?

        public init(thingGroupId: String? = nil, version: Int64? = nil, thingGroupName: String? = nil, queryVersion: String? = nil, queryString: String? = nil, thingGroupProperties: ThingGroupProperties? = nil, status: DynamicGroupStatus? = nil, thingGroupArn: String? = nil, thingGroupMetadata: ThingGroupMetadata? = nil, indexName: String? = nil) {
            self.thingGroupId = thingGroupId
            self.version = version
            self.thingGroupName = thingGroupName
            self.queryVersion = queryVersion
            self.queryString = queryString
            self.thingGroupProperties = thingGroupProperties
            self.status = status
            self.thingGroupArn = thingGroupArn
            self.thingGroupMetadata = thingGroupMetadata
            self.indexName = indexName
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupId = "thingGroupId"
            case version = "version"
            case thingGroupName = "thingGroupName"
            case queryVersion = "queryVersion"
            case queryString = "queryString"
            case thingGroupProperties = "thingGroupProperties"
            case status = "status"
            case thingGroupArn = "thingGroupArn"
            case thingGroupMetadata = "thingGroupMetadata"
            case indexName = "indexName"
        }
    }

    public struct DescribeThingRegistrationTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failureCount", required: false, type: .integer), 
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "inputFileBucket", required: false, type: .string), 
            AWSShapeMember(label: "message", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "templateBody", required: false, type: .string), 
            AWSShapeMember(label: "percentageProgress", required: false, type: .integer), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "inputFileKey", required: false, type: .string), 
            AWSShapeMember(label: "successCount", required: false, type: .integer), 
            AWSShapeMember(label: "taskId", required: false, type: .string)
        ]
        /// The number of things that failed to be provisioned.
        public let failureCount: Int32?
        /// The role ARN that grants access to the input file bucket.
        public let roleArn: String?
        /// The S3 bucket that contains the input file.
        public let inputFileBucket: String?
        /// The message.
        public let message: String?
        /// The task creation date.
        public let creationDate: TimeStamp?
        /// The date when the task was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The task's template.
        public let templateBody: String?
        /// The progress of the bulk provisioning task expressed as a percentage.
        public let percentageProgress: Int32?
        /// The status of the bulk thing provisioning task.
        public let status: Status?
        /// The input file key.
        public let inputFileKey: String?
        /// The number of things successfully provisioned.
        public let successCount: Int32?
        /// The task ID.
        public let taskId: String?

        public init(failureCount: Int32? = nil, roleArn: String? = nil, inputFileBucket: String? = nil, message: String? = nil, creationDate: TimeStamp? = nil, lastModifiedDate: TimeStamp? = nil, templateBody: String? = nil, percentageProgress: Int32? = nil, status: Status? = nil, inputFileKey: String? = nil, successCount: Int32? = nil, taskId: String? = nil) {
            self.failureCount = failureCount
            self.roleArn = roleArn
            self.inputFileBucket = inputFileBucket
            self.message = message
            self.creationDate = creationDate
            self.lastModifiedDate = lastModifiedDate
            self.templateBody = templateBody
            self.percentageProgress = percentageProgress
            self.status = status
            self.inputFileKey = inputFileKey
            self.successCount = successCount
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case failureCount = "failureCount"
            case roleArn = "roleArn"
            case inputFileBucket = "inputFileBucket"
            case message = "message"
            case creationDate = "creationDate"
            case lastModifiedDate = "lastModifiedDate"
            case templateBody = "templateBody"
            case percentageProgress = "percentageProgress"
            case status = "status"
            case inputFileKey = "inputFileKey"
            case successCount = "successCount"
            case taskId = "taskId"
        }
    }

    public struct AttachSecurityProfileResponse: AWSShape {

    }

    public struct ListBillingGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "billingGroups", required: false, type: .list)
        ]
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The list of billing groups.
        public let billingGroups: [GroupNameAndArn]?

        public init(nextToken: String? = nil, billingGroups: [GroupNameAndArn]? = nil) {
            self.nextToken = nextToken
            self.billingGroups = billingGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case billingGroups = "billingGroups"
        }
    }

    public struct CreateDynamicThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupName", location: .uri(locationName: "thingGroupName"), required: true, type: .string), 
            AWSShapeMember(label: "indexName", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupProperties", required: false, type: .structure), 
            AWSShapeMember(label: "queryString", required: true, type: .string), 
            AWSShapeMember(label: "queryVersion", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]
        /// The dynamic thing group name to create.
        public let thingGroupName: String
        /// The dynamic thing group index name.  Currently one index is supported: "AWS_Things". 
        public let indexName: String?
        /// The dynamic thing group properties.
        public let thingGroupProperties: ThingGroupProperties?
        /// The dynamic thing group search query string. See Query Syntax for information about query string syntax.
        public let queryString: String
        /// The dynamic thing group query version.  Currently one query version is supported: "2017-09-30". If not specified, the query version defaults to this value. 
        public let queryVersion: String?
        /// Metadata which can be used to manage the dynamic thing group.
        public let tags: [Tag]?

        public init(thingGroupName: String, indexName: String? = nil, thingGroupProperties: ThingGroupProperties? = nil, queryString: String, queryVersion: String? = nil, tags: [Tag]? = nil) {
            self.thingGroupName = thingGroupName
            self.indexName = indexName
            self.thingGroupProperties = thingGroupProperties
            self.queryString = queryString
            self.queryVersion = queryVersion
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupName = "thingGroupName"
            case indexName = "indexName"
            case thingGroupProperties = "thingGroupProperties"
            case queryString = "queryString"
            case queryVersion = "queryVersion"
            case tags = "tags"
        }
    }

    public struct ListThingsInBillingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "billingGroupName", location: .uri(locationName: "billingGroupName"), required: true, type: .string)
        ]
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return per request.
        public let maxResults: Int32?
        /// The name of the billing group.
        public let billingGroupName: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, billingGroupName: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.billingGroupName = billingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case billingGroupName = "billingGroupName"
        }
    }

    public struct DeleteDynamicThingGroupResponse: AWSShape {

    }

    public struct DynamoDBAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "hashKeyField", required: true, type: .string), 
            AWSShapeMember(label: "tableName", required: true, type: .string), 
            AWSShapeMember(label: "rangeKeyType", required: false, type: .enum), 
            AWSShapeMember(label: "rangeKeyValue", required: false, type: .string), 
            AWSShapeMember(label: "hashKeyType", required: false, type: .enum), 
            AWSShapeMember(label: "hashKeyValue", required: true, type: .string), 
            AWSShapeMember(label: "rangeKeyField", required: false, type: .string), 
            AWSShapeMember(label: "payloadField", required: false, type: .string)
        ]
        /// The type of operation to be performed. This follows the substitution template, so it can be ${operation}, but the substitution must result in one of the following: INSERT, UPDATE, or DELETE.
        public let operation: String?
        /// The ARN of the IAM role that grants access to the DynamoDB table.
        public let roleArn: String
        /// The hash key name.
        public let hashKeyField: String
        /// The name of the DynamoDB table.
        public let tableName: String
        /// The range key type. Valid values are "STRING" or "NUMBER"
        public let rangeKeyType: DynamoKeyType?
        /// The range key value.
        public let rangeKeyValue: String?
        /// The hash key type. Valid values are "STRING" or "NUMBER"
        public let hashKeyType: DynamoKeyType?
        /// The hash key value.
        public let hashKeyValue: String
        /// The range key name.
        public let rangeKeyField: String?
        /// The action payload. This name can be customized.
        public let payloadField: String?

        public init(operation: String? = nil, roleArn: String, hashKeyField: String, tableName: String, rangeKeyType: DynamoKeyType? = nil, rangeKeyValue: String? = nil, hashKeyType: DynamoKeyType? = nil, hashKeyValue: String, rangeKeyField: String? = nil, payloadField: String? = nil) {
            self.operation = operation
            self.roleArn = roleArn
            self.hashKeyField = hashKeyField
            self.tableName = tableName
            self.rangeKeyType = rangeKeyType
            self.rangeKeyValue = rangeKeyValue
            self.hashKeyType = hashKeyType
            self.hashKeyValue = hashKeyValue
            self.rangeKeyField = rangeKeyField
            self.payloadField = payloadField
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
            case roleArn = "roleArn"
            case hashKeyField = "hashKeyField"
            case tableName = "tableName"
            case rangeKeyType = "rangeKeyType"
            case rangeKeyValue = "rangeKeyValue"
            case hashKeyType = "hashKeyType"
            case hashKeyValue = "hashKeyValue"
            case rangeKeyField = "rangeKeyField"
            case payloadField = "payloadField"
        }
    }

    public struct OTAUpdateFile: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "codeSigning", required: false, type: .structure), 
            AWSShapeMember(label: "fileName", required: false, type: .string), 
            AWSShapeMember(label: "attributes", required: false, type: .map), 
            AWSShapeMember(label: "fileVersion", required: false, type: .string), 
            AWSShapeMember(label: "fileLocation", required: false, type: .structure)
        ]
        /// The code signing method of the file.
        public let codeSigning: CodeSigning?
        /// The name of the file.
        public let fileName: String?
        /// A list of name/attribute pairs.
        public let attributes: [String: String]?
        /// The file version.
        public let fileVersion: String?
        /// The location of the updated firmware.
        public let fileLocation: FileLocation?

        public init(codeSigning: CodeSigning? = nil, fileName: String? = nil, attributes: [String: String]? = nil, fileVersion: String? = nil, fileLocation: FileLocation? = nil) {
            self.codeSigning = codeSigning
            self.fileName = fileName
            self.attributes = attributes
            self.fileVersion = fileVersion
            self.fileLocation = fileLocation
        }

        private enum CodingKeys: String, CodingKey {
            case codeSigning = "codeSigning"
            case fileName = "fileName"
            case attributes = "attributes"
            case fileVersion = "fileVersion"
            case fileLocation = "fileLocation"
        }
    }

    public struct TopicRulePayload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "actions", required: true, type: .list), 
            AWSShapeMember(label: "errorAction", required: false, type: .structure), 
            AWSShapeMember(label: "ruleDisabled", required: false, type: .boolean), 
            AWSShapeMember(label: "awsIotSqlVersion", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "sql", required: true, type: .string)
        ]
        /// The actions associated with the rule.
        public let actions: [Action]
        /// The action to take when an error occurs.
        public let errorAction: Action?
        /// Specifies whether the rule is disabled.
        public let ruleDisabled: Bool?
        /// The version of the SQL rules engine to use when evaluating the rule.
        public let awsIotSqlVersion: String?
        /// The description of the rule.
        public let description: String?
        /// The SQL statement used to query the topic. For more information, see AWS IoT SQL Reference in the AWS IoT Developer Guide.
        public let sql: String

        public init(actions: [Action], errorAction: Action? = nil, ruleDisabled: Bool? = nil, awsIotSqlVersion: String? = nil, description: String? = nil, sql: String) {
            self.actions = actions
            self.errorAction = errorAction
            self.ruleDisabled = ruleDisabled
            self.awsIotSqlVersion = awsIotSqlVersion
            self.description = description
            self.sql = sql
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "actions"
            case errorAction = "errorAction"
            case ruleDisabled = "ruleDisabled"
            case awsIotSqlVersion = "awsIotSqlVersion"
            case description = "description"
            case sql = "sql"
        }
    }

    public struct ListCertificatesByCAResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificates", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The device certificates signed by the specified CA certificate.
        public let certificates: [Certificate]?
        /// The marker for the next set of results, or null if there are no additional results.
        public let nextMarker: String?

        public init(certificates: [Certificate]? = nil, nextMarker: String? = nil) {
            self.certificates = certificates
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "certificates"
            case nextMarker = "nextMarker"
        }
    }

    public struct AuthorizerDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerName", required: false, type: .string), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "authorizerArn", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "tokenKeyName", required: false, type: .string), 
            AWSShapeMember(label: "tokenSigningPublicKeys", required: false, type: .map), 
            AWSShapeMember(label: "authorizerFunctionArn", required: false, type: .string)
        ]
        /// The authorizer name.
        public let authorizerName: String?
        /// The UNIX timestamp of when the authorizer was last updated.
        public let lastModifiedDate: TimeStamp?
        /// The UNIX timestamp of when the authorizer was created.
        public let creationDate: TimeStamp?
        /// The authorizer ARN.
        public let authorizerArn: String?
        /// The status of the authorizer.
        public let status: AuthorizerStatus?
        /// The key used to extract the token from the HTTP headers.
        public let tokenKeyName: String?
        /// The public keys used to validate the token signature returned by your custom authentication service.
        public let tokenSigningPublicKeys: [String: String]?
        /// The authorizer's Lambda function ARN.
        public let authorizerFunctionArn: String?

        public init(authorizerName: String? = nil, lastModifiedDate: TimeStamp? = nil, creationDate: TimeStamp? = nil, authorizerArn: String? = nil, status: AuthorizerStatus? = nil, tokenKeyName: String? = nil, tokenSigningPublicKeys: [String: String]? = nil, authorizerFunctionArn: String? = nil) {
            self.authorizerName = authorizerName
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.authorizerArn = authorizerArn
            self.status = status
            self.tokenKeyName = tokenKeyName
            self.tokenSigningPublicKeys = tokenSigningPublicKeys
            self.authorizerFunctionArn = authorizerFunctionArn
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerName = "authorizerName"
            case lastModifiedDate = "lastModifiedDate"
            case creationDate = "creationDate"
            case authorizerArn = "authorizerArn"
            case status = "status"
            case tokenKeyName = "tokenKeyName"
            case tokenSigningPublicKeys = "tokenSigningPublicKeys"
            case authorizerFunctionArn = "authorizerFunctionArn"
        }
    }

    public struct DescribeSecurityProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileName", location: .uri(locationName: "securityProfileName"), required: true, type: .string)
        ]
        /// The name of the security profile whose information you want to get.
        public let securityProfileName: String

        public init(securityProfileName: String) {
            self.securityProfileName = securityProfileName
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileName = "securityProfileName"
        }
    }

    public struct OTAUpdateSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "otaUpdateArn", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "otaUpdateId", required: false, type: .string)
        ]
        /// The OTA update ARN.
        public let otaUpdateArn: String?
        /// The date when the OTA update was created.
        public let creationDate: TimeStamp?
        /// The OTA update ID.
        public let otaUpdateId: String?

        public init(otaUpdateArn: String? = nil, creationDate: TimeStamp? = nil, otaUpdateId: String? = nil) {
            self.otaUpdateArn = otaUpdateArn
            self.creationDate = creationDate
            self.otaUpdateId = otaUpdateId
        }

        private enum CodingKeys: String, CodingKey {
            case otaUpdateArn = "otaUpdateArn"
            case creationDate = "creationDate"
            case otaUpdateId = "otaUpdateId"
        }
    }

    public struct DescribeEndpointRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "endpointType", location: .querystring(locationName: "endpointType"), required: false, type: .string)
        ]
        /// The endpoint type. Valid endpoint types include:    iot:Data - Returns a VeriSign signed data endpoint.      iot:Data-ATS - Returns an ATS signed data endpoint.      iot:CredentialProvider - Returns an AWS IoT credentials provider API endpoint.      iot:Jobs - Returns an AWS IoT device management Jobs API endpoint.  
        public let endpointType: String?

        public init(endpointType: String? = nil) {
            self.endpointType = endpointType
        }

        private enum CodingKeys: String, CodingKey {
            case endpointType = "endpointType"
        }
    }

    public struct DeletePolicyVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string), 
            AWSShapeMember(label: "policyVersionId", location: .uri(locationName: "policyVersionId"), required: true, type: .string)
        ]
        /// The name of the policy.
        public let policyName: String
        /// The policy version ID.
        public let policyVersionId: String

        public init(policyName: String, policyVersionId: String) {
            self.policyName = policyName
            self.policyVersionId = policyVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case policyVersionId = "policyVersionId"
        }
    }

    public struct ListThingRegistrationTasksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "taskIds", required: false, type: .list)
        ]
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// A list of bulk thing provisioning task IDs.
        public let taskIds: [String]?

        public init(nextToken: String? = nil, taskIds: [String]? = nil) {
            self.nextToken = nextToken
            self.taskIds = taskIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case taskIds = "taskIds"
        }
    }

    public struct ListPolicyPrincipalsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .header(locationName: "x-amzn-iot-policy"), required: true, type: .string), 
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean), 
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer)
        ]
        /// The policy name.
        public let policyName: String
        /// The marker for the next set of results.
        public let marker: String?
        /// Specifies the order for results. If true, the results are returned in ascending creation order.
        public let ascendingOrder: Bool?
        /// The result page size.
        public let pageSize: Int32?

        public init(policyName: String, marker: String? = nil, ascendingOrder: Bool? = nil, pageSize: Int32? = nil) {
            self.policyName = policyName
            self.marker = marker
            self.ascendingOrder = ascendingOrder
            self.pageSize = pageSize
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "x-amzn-iot-policy"
            case marker = "marker"
            case ascendingOrder = "isAscendingOrder"
            case pageSize = "pageSize"
        }
    }

    public struct SetDefaultPolicyVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string), 
            AWSShapeMember(label: "policyVersionId", location: .uri(locationName: "policyVersionId"), required: true, type: .string)
        ]
        /// The policy name.
        public let policyName: String
        /// The policy version ID.
        public let policyVersionId: String

        public init(policyName: String, policyVersionId: String) {
            self.policyName = policyName
            self.policyVersionId = policyVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case policyVersionId = "policyVersionId"
        }
    }

    public struct DynamoDBv2Action: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "putItem", required: false, type: .structure)
        ]
        /// The ARN of the IAM role that grants access to the DynamoDB table.
        public let roleArn: String?
        /// Specifies the DynamoDB table to which the message data will be written. For example:  { "dynamoDBv2": { "roleArn": "aws:iam:12341251:my-role" "putItem": { "tableName": "my-table" } } }  Each attribute in the message payload will be written to a separate column in the DynamoDB database.
        public let putItem: PutItemInput?

        public init(roleArn: String? = nil, putItem: PutItemInput? = nil) {
            self.roleArn = roleArn
            self.putItem = putItem
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case putItem = "putItem"
        }
    }

    public struct DeleteStreamResponse: AWSShape {

    }

    public struct UntagResourceResponse: AWSShape {

    }

    public enum LogTargetType: String, CustomStringConvertible, Codable {
        case `default` = "DEFAULT"
        case thingGroup = "THING_GROUP"
        public var description: String { return self.rawValue }
    }

    public struct ListV2LoggingLevelsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "logTargetConfigurations", required: false, type: .list)
        ]
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The logging configuration for a target.
        public let logTargetConfigurations: [LogTargetConfiguration]?

        public init(nextToken: String? = nil, logTargetConfigurations: [LogTargetConfiguration]? = nil) {
            self.nextToken = nextToken
            self.logTargetConfigurations = logTargetConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case logTargetConfigurations = "logTargetConfigurations"
        }
    }

    public struct StreamInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "streamId", required: false, type: .string), 
            AWSShapeMember(label: "streamVersion", required: false, type: .integer), 
            AWSShapeMember(label: "files", required: false, type: .list), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "streamArn", required: false, type: .string), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp)
        ]
        /// An IAM role AWS IoT assumes to access your S3 files.
        public let roleArn: String?
        /// The stream ID.
        public let streamId: String?
        /// The stream version.
        public let streamVersion: Int32?
        /// The files to stream.
        public let files: [StreamFile]?
        /// The description of the stream.
        public let description: String?
        /// The date when the stream was created.
        public let createdAt: TimeStamp?
        /// The stream ARN.
        public let streamArn: String?
        /// The date when the stream was last updated.
        public let lastUpdatedAt: TimeStamp?

        public init(roleArn: String? = nil, streamId: String? = nil, streamVersion: Int32? = nil, files: [StreamFile]? = nil, description: String? = nil, createdAt: TimeStamp? = nil, streamArn: String? = nil, lastUpdatedAt: TimeStamp? = nil) {
            self.roleArn = roleArn
            self.streamId = streamId
            self.streamVersion = streamVersion
            self.files = files
            self.description = description
            self.createdAt = createdAt
            self.streamArn = streamArn
            self.lastUpdatedAt = lastUpdatedAt
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case streamId = "streamId"
            case streamVersion = "streamVersion"
            case files = "files"
            case description = "description"
            case createdAt = "createdAt"
            case streamArn = "streamArn"
            case lastUpdatedAt = "lastUpdatedAt"
        }
    }

    public enum AbortAction: String, CustomStringConvertible, Codable {
        case cancel = "CANCEL"
        public var description: String { return self.rawValue }
    }

    public struct ListPrincipalThingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "principal", location: .header(locationName: "x-amzn-principal"), required: true, type: .string)
        ]
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return in this operation.
        public let maxResults: Int32?
        /// The principal.
        public let principal: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, principal: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.principal = principal
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case principal = "x-amzn-principal"
        }
    }

    public struct GetEffectivePoliciesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", location: .querystring(locationName: "thingName"), required: false, type: .string), 
            AWSShapeMember(label: "cognitoIdentityPoolId", required: false, type: .string), 
            AWSShapeMember(label: "principal", required: false, type: .string)
        ]
        /// The thing name.
        public let thingName: String?
        /// The Cognito identity pool ID.
        public let cognitoIdentityPoolId: String?
        /// The principal.
        public let principal: String?

        public init(thingName: String? = nil, cognitoIdentityPoolId: String? = nil, principal: String? = nil) {
            self.thingName = thingName
            self.cognitoIdentityPoolId = cognitoIdentityPoolId
            self.principal = principal
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
            case cognitoIdentityPoolId = "cognitoIdentityPoolId"
            case principal = "principal"
        }
    }

    public enum AutoRegistrationStatus: String, CustomStringConvertible, Codable {
        case enable = "ENABLE"
        case disable = "DISABLE"
        public var description: String { return self.rawValue }
    }

    public struct CancelCertificateTransferRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "certificateId"), required: true, type: .string)
        ]
        /// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
        public let certificateId: String

        public init(certificateId: String) {
            self.certificateId = certificateId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "certificateId"
        }
    }

    public struct CreateThingTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "thingTypeName", location: .uri(locationName: "thingTypeName"), required: true, type: .string), 
            AWSShapeMember(label: "thingTypeProperties", required: false, type: .structure)
        ]
        /// Metadata which can be used to manage the thing type.
        public let tags: [Tag]?
        /// The name of the thing type.
        public let thingTypeName: String
        /// The ThingTypeProperties for the thing type to create. It contains information about the new thing type including a description, and a list of searchable thing attribute names.
        public let thingTypeProperties: ThingTypeProperties?

        public init(tags: [Tag]? = nil, thingTypeName: String, thingTypeProperties: ThingTypeProperties? = nil) {
            self.tags = tags
            self.thingTypeName = thingTypeName
            self.thingTypeProperties = thingTypeProperties
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case thingTypeName = "thingTypeName"
            case thingTypeProperties = "thingTypeProperties"
        }
    }

    public struct ListOTAUpdatesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "otaUpdates", required: false, type: .list)
        ]
        /// A token to use to get the next set of results.
        public let nextToken: String?
        /// A list of OTA update jobs.
        public let otaUpdates: [OTAUpdateSummary]?

        public init(nextToken: String? = nil, otaUpdates: [OTAUpdateSummary]? = nil) {
            self.nextToken = nextToken
            self.otaUpdates = otaUpdates
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case otaUpdates = "otaUpdates"
        }
    }

    public enum AuthorizerStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
        public var description: String { return self.rawValue }
    }

    public struct StopThingRegistrationTaskResponse: AWSShape {

    }

    public struct ListAuditFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "findings", required: false, type: .list)
        ]
        /// A token that can be used to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The findings (results) of the audit.
        public let findings: [AuditFinding]?

        public init(nextToken: String? = nil, findings: [AuditFinding]? = nil) {
            self.nextToken = nextToken
            self.findings = findings
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case findings = "findings"
        }
    }

    public enum AuditCheckRunStatus: String, CustomStringConvertible, Codable {
        case inProgress = "IN_PROGRESS"
        case waitingForDataCollection = "WAITING_FOR_DATA_COLLECTION"
        case canceled = "CANCELED"
        case completedCompliant = "COMPLETED_COMPLIANT"
        case completedNonCompliant = "COMPLETED_NON_COMPLIANT"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum ViolationEventType: String, CustomStringConvertible, Codable {
        case inAlarm = "in-alarm"
        case alarmCleared = "alarm-cleared"
        case alarmInvalidated = "alarm-invalidated"
        public var description: String { return self.rawValue }
    }

    public struct ClearDefaultAuthorizerResponse: AWSShape {

    }

    public struct TopicRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "actions", required: false, type: .list), 
            AWSShapeMember(label: "ruleName", required: false, type: .string), 
            AWSShapeMember(label: "errorAction", required: false, type: .structure), 
            AWSShapeMember(label: "sql", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "awsIotSqlVersion", required: false, type: .string), 
            AWSShapeMember(label: "ruleDisabled", required: false, type: .boolean)
        ]
        /// The actions associated with the rule.
        public let actions: [Action]?
        /// The name of the rule.
        public let ruleName: String?
        /// The action to perform when an error occurs.
        public let errorAction: Action?
        /// The SQL statement used to query the topic. When using a SQL query with multiple lines, be sure to escape the newline characters.
        public let sql: String?
        /// The description of the rule.
        public let description: String?
        /// The date and time the rule was created.
        public let createdAt: TimeStamp?
        /// The version of the SQL rules engine to use when evaluating the rule.
        public let awsIotSqlVersion: String?
        /// Specifies whether the rule is disabled.
        public let ruleDisabled: Bool?

        public init(actions: [Action]? = nil, ruleName: String? = nil, errorAction: Action? = nil, sql: String? = nil, description: String? = nil, createdAt: TimeStamp? = nil, awsIotSqlVersion: String? = nil, ruleDisabled: Bool? = nil) {
            self.actions = actions
            self.ruleName = ruleName
            self.errorAction = errorAction
            self.sql = sql
            self.description = description
            self.createdAt = createdAt
            self.awsIotSqlVersion = awsIotSqlVersion
            self.ruleDisabled = ruleDisabled
        }

        private enum CodingKeys: String, CodingKey {
            case actions = "actions"
            case ruleName = "ruleName"
            case errorAction = "errorAction"
            case sql = "sql"
            case description = "description"
            case createdAt = "createdAt"
            case awsIotSqlVersion = "awsIotSqlVersion"
            case ruleDisabled = "ruleDisabled"
        }
    }

    public struct GroupNameAndArn: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "groupArn", required: false, type: .string), 
            AWSShapeMember(label: "groupName", required: false, type: .string)
        ]
        /// The group ARN.
        public let groupArn: String?
        /// The group name.
        public let groupName: String?

        public init(groupArn: String? = nil, groupName: String? = nil) {
            self.groupArn = groupArn
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case groupArn = "groupArn"
            case groupName = "groupName"
        }
    }

    public struct DeleteOTAUpdateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deleteStream", location: .querystring(locationName: "deleteStream"), required: false, type: .boolean), 
            AWSShapeMember(label: "forceDeleteAWSJob", location: .querystring(locationName: "forceDeleteAWSJob"), required: false, type: .boolean), 
            AWSShapeMember(label: "otaUpdateId", location: .uri(locationName: "otaUpdateId"), required: true, type: .string)
        ]
        /// Specifies if the stream associated with an OTA update should be deleted when the OTA update is deleted.
        public let deleteStream: Bool?
        /// Specifies if the AWS Job associated with the OTA update should be deleted with the OTA update is deleted.
        public let forceDeleteAWSJob: Bool?
        /// The OTA update ID to delete.
        public let otaUpdateId: String

        public init(deleteStream: Bool? = nil, forceDeleteAWSJob: Bool? = nil, otaUpdateId: String) {
            self.deleteStream = deleteStream
            self.forceDeleteAWSJob = forceDeleteAWSJob
            self.otaUpdateId = otaUpdateId
        }

        private enum CodingKeys: String, CodingKey {
            case deleteStream = "deleteStream"
            case forceDeleteAWSJob = "forceDeleteAWSJob"
            case otaUpdateId = "otaUpdateId"
        }
    }

    public struct ListThingTypesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "thingTypeName", location: .querystring(locationName: "thingTypeName"), required: false, type: .string)
        ]
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return in this operation.
        public let maxResults: Int32?
        /// The name of the thing type.
        public let thingTypeName: String?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, thingTypeName: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.thingTypeName = thingTypeName
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case thingTypeName = "thingTypeName"
        }
    }

    public struct ListCertificatesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificates", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The descriptions of the certificates.
        public let certificates: [Certificate]?
        /// The marker for the next set of results, or null if there are no additional results.
        public let nextMarker: String?

        public init(certificates: [Certificate]? = nil, nextMarker: String? = nil) {
            self.certificates = certificates
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case certificates = "certificates"
            case nextMarker = "nextMarker"
        }
    }

    public struct GetPolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", required: false, type: .string), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "policyDocument", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "generationId", required: false, type: .string), 
            AWSShapeMember(label: "defaultVersionId", required: false, type: .string), 
            AWSShapeMember(label: "policyArn", required: false, type: .string)
        ]
        /// The policy name.
        public let policyName: String?
        /// The date the policy was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The JSON document that describes the policy.
        public let policyDocument: String?
        /// The date the policy was created.
        public let creationDate: TimeStamp?
        /// The generation ID of the policy.
        public let generationId: String?
        /// The default policy version ID.
        public let defaultVersionId: String?
        /// The policy ARN.
        public let policyArn: String?

        public init(policyName: String? = nil, lastModifiedDate: TimeStamp? = nil, policyDocument: String? = nil, creationDate: TimeStamp? = nil, generationId: String? = nil, defaultVersionId: String? = nil, policyArn: String? = nil) {
            self.policyName = policyName
            self.lastModifiedDate = lastModifiedDate
            self.policyDocument = policyDocument
            self.creationDate = creationDate
            self.generationId = generationId
            self.defaultVersionId = defaultVersionId
            self.policyArn = policyArn
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case lastModifiedDate = "lastModifiedDate"
            case policyDocument = "policyDocument"
            case creationDate = "creationDate"
            case generationId = "generationId"
            case defaultVersionId = "defaultVersionId"
            case policyArn = "policyArn"
        }
    }

    public struct ThingTypeDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingTypeMetadata", required: false, type: .structure), 
            AWSShapeMember(label: "thingTypeProperties", required: false, type: .structure), 
            AWSShapeMember(label: "thingTypeName", required: false, type: .string), 
            AWSShapeMember(label: "thingTypeArn", required: false, type: .string)
        ]
        /// The ThingTypeMetadata contains additional information about the thing type including: creation date and time, a value indicating whether the thing type is deprecated, and a date and time when it was deprecated.
        public let thingTypeMetadata: ThingTypeMetadata?
        /// The ThingTypeProperties for the thing type.
        public let thingTypeProperties: ThingTypeProperties?
        /// The name of the thing type.
        public let thingTypeName: String?
        /// The thing type ARN.
        public let thingTypeArn: String?

        public init(thingTypeMetadata: ThingTypeMetadata? = nil, thingTypeProperties: ThingTypeProperties? = nil, thingTypeName: String? = nil, thingTypeArn: String? = nil) {
            self.thingTypeMetadata = thingTypeMetadata
            self.thingTypeProperties = thingTypeProperties
            self.thingTypeName = thingTypeName
            self.thingTypeArn = thingTypeArn
        }

        private enum CodingKeys: String, CodingKey {
            case thingTypeMetadata = "thingTypeMetadata"
            case thingTypeProperties = "thingTypeProperties"
            case thingTypeName = "thingTypeName"
            case thingTypeArn = "thingTypeArn"
        }
    }

    public struct ListSecurityProfilesForTargetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "securityProfileTargetMappings", required: false, type: .list)
        ]
        /// A token that can be used to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// A list of security profiles and their associated targets.
        public let securityProfileTargetMappings: [SecurityProfileTargetMapping]?

        public init(nextToken: String? = nil, securityProfileTargetMappings: [SecurityProfileTargetMapping]? = nil) {
            self.nextToken = nextToken
            self.securityProfileTargetMappings = securityProfileTargetMappings
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case securityProfileTargetMappings = "securityProfileTargetMappings"
        }
    }

    public struct CreateScheduledAuditResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "scheduledAuditArn", required: false, type: .string)
        ]
        /// The ARN of the scheduled audit.
        public let scheduledAuditArn: String?

        public init(scheduledAuditArn: String? = nil) {
            self.scheduledAuditArn = scheduledAuditArn
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledAuditArn = "scheduledAuditArn"
        }
    }

    public struct TopicRuleListItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ruleArn", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "ruleDisabled", required: false, type: .boolean), 
            AWSShapeMember(label: "topicPattern", required: false, type: .string), 
            AWSShapeMember(label: "ruleName", required: false, type: .string)
        ]
        /// The rule ARN.
        public let ruleArn: String?
        /// The date and time the rule was created.
        public let createdAt: TimeStamp?
        /// Specifies whether the rule is disabled.
        public let ruleDisabled: Bool?
        /// The pattern for the topic names that apply.
        public let topicPattern: String?
        /// The name of the rule.
        public let ruleName: String?

        public init(ruleArn: String? = nil, createdAt: TimeStamp? = nil, ruleDisabled: Bool? = nil, topicPattern: String? = nil, ruleName: String? = nil) {
            self.ruleArn = ruleArn
            self.createdAt = createdAt
            self.ruleDisabled = ruleDisabled
            self.topicPattern = topicPattern
            self.ruleName = ruleName
        }

        private enum CodingKeys: String, CodingKey {
            case ruleArn = "ruleArn"
            case createdAt = "createdAt"
            case ruleDisabled = "ruleDisabled"
            case topicPattern = "topicPattern"
            case ruleName = "ruleName"
        }
    }

    public struct CancelAuditTaskResponse: AWSShape {

    }

    public struct DescribeIndexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "indexName", location: .uri(locationName: "indexName"), required: true, type: .string)
        ]
        /// The index name.
        public let indexName: String

        public init(indexName: String) {
            self.indexName = indexName
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "indexName"
        }
    }

    public struct SecurityProfileIdentifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "arn", required: true, type: .string)
        ]
        /// The name you have given to the security profile.
        public let name: String
        /// The ARN of the security profile.
        public let arn: String

        public init(name: String, arn: String) {
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case arn = "arn"
        }
    }

    public struct BillingGroupMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp)
        ]
        /// The date the billing group was created.
        public let creationDate: TimeStamp?

        public init(creationDate: TimeStamp? = nil) {
            self.creationDate = creationDate
        }

        private enum CodingKeys: String, CodingKey {
            case creationDate = "creationDate"
        }
    }

    public struct UpdateAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "authorizerFunctionArn", required: false, type: .string), 
            AWSShapeMember(label: "authorizerName", location: .uri(locationName: "authorizerName"), required: true, type: .string), 
            AWSShapeMember(label: "tokenKeyName", required: false, type: .string), 
            AWSShapeMember(label: "tokenSigningPublicKeys", required: false, type: .map)
        ]
        /// The status of the update authorizer request.
        public let status: AuthorizerStatus?
        /// The ARN of the authorizer's Lambda function.
        public let authorizerFunctionArn: String?
        /// The authorizer name.
        public let authorizerName: String
        /// The key used to extract the token from the HTTP headers. 
        public let tokenKeyName: String?
        /// The public keys used to verify the token signature.
        public let tokenSigningPublicKeys: [String: String]?

        public init(status: AuthorizerStatus? = nil, authorizerFunctionArn: String? = nil, authorizerName: String, tokenKeyName: String? = nil, tokenSigningPublicKeys: [String: String]? = nil) {
            self.status = status
            self.authorizerFunctionArn = authorizerFunctionArn
            self.authorizerName = authorizerName
            self.tokenKeyName = tokenKeyName
            self.tokenSigningPublicKeys = tokenSigningPublicKeys
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case authorizerFunctionArn = "authorizerFunctionArn"
            case authorizerName = "authorizerName"
            case tokenKeyName = "tokenKeyName"
            case tokenSigningPublicKeys = "tokenSigningPublicKeys"
        }
    }

    public struct ListAuthorizersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean), 
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer), 
            AWSShapeMember(label: "status", location: .querystring(locationName: "status"), required: false, type: .enum)
        ]
        /// A marker used to get the next set of results.
        public let marker: String?
        /// Return the list of authorizers in ascending alphabetical order.
        public let ascendingOrder: Bool?
        /// The maximum number of results to return at one time.
        public let pageSize: Int32?
        /// The status of the list authorizers request.
        public let status: AuthorizerStatus?

        public init(marker: String? = nil, ascendingOrder: Bool? = nil, pageSize: Int32? = nil, status: AuthorizerStatus? = nil) {
            self.marker = marker
            self.ascendingOrder = ascendingOrder
            self.pageSize = pageSize
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "marker"
            case ascendingOrder = "isAscendingOrder"
            case pageSize = "pageSize"
            case status = "status"
        }
    }

    public struct CreateKeysAndCertificateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificatePem", required: false, type: .string), 
            AWSShapeMember(label: "certificateArn", required: false, type: .string), 
            AWSShapeMember(label: "keyPair", required: false, type: .structure), 
            AWSShapeMember(label: "certificateId", required: false, type: .string)
        ]
        /// The certificate data, in PEM format.
        public let certificatePem: String?
        /// The ARN of the certificate.
        public let certificateArn: String?
        /// The generated key pair.
        public let keyPair: KeyPair?
        /// The ID of the certificate. AWS IoT issues a default subject name for the certificate (for example, AWS IoT Certificate).
        public let certificateId: String?

        public init(certificatePem: String? = nil, certificateArn: String? = nil, keyPair: KeyPair? = nil, certificateId: String? = nil) {
            self.certificatePem = certificatePem
            self.certificateArn = certificateArn
            self.keyPair = keyPair
            self.certificateId = certificateId
        }

        private enum CodingKeys: String, CodingKey {
            case certificatePem = "certificatePem"
            case certificateArn = "certificateArn"
            case keyPair = "keyPair"
            case certificateId = "certificateId"
        }
    }

    public struct SqsAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "queueUrl", required: true, type: .string), 
            AWSShapeMember(label: "useBase64", required: false, type: .boolean)
        ]
        /// The ARN of the IAM role that grants access.
        public let roleArn: String
        /// The URL of the Amazon SQS queue.
        public let queueUrl: String
        /// Specifies whether to use Base64 encoding.
        public let useBase64: Bool?

        public init(roleArn: String, queueUrl: String, useBase64: Bool? = nil) {
            self.roleArn = roleArn
            self.queueUrl = queueUrl
            self.useBase64 = useBase64
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case queueUrl = "queueUrl"
            case useBase64 = "useBase64"
        }
    }

    public struct ListAuditFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskId", required: false, type: .string), 
            AWSShapeMember(label: "endTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "checkName", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "startTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "resourceIdentifier", required: false, type: .structure), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// A filter to limit results to the audit with the specified ID. You must specify either the taskId or the startTime and endTime, but not both.
        public let taskId: String?
        /// A filter to limit results to those found before the specified time. You must specify either the startTime and endTime or the taskId, but not both.
        public let endTime: TimeStamp?
        /// A filter to limit results to the findings for the specified audit check.
        public let checkName: String?
        /// The token for the next set of results.
        public let nextToken: String?
        /// A filter to limit results to those found after the specified time. You must specify either the startTime and endTime or the taskId, but not both.
        public let startTime: TimeStamp?
        /// Information identifying the non-compliant resource.
        public let resourceIdentifier: ResourceIdentifier?
        /// The maximum number of results to return at one time. The default is 25.
        public let maxResults: Int32?

        public init(taskId: String? = nil, endTime: TimeStamp? = nil, checkName: String? = nil, nextToken: String? = nil, startTime: TimeStamp? = nil, resourceIdentifier: ResourceIdentifier? = nil, maxResults: Int32? = nil) {
            self.taskId = taskId
            self.endTime = endTime
            self.checkName = checkName
            self.nextToken = nextToken
            self.startTime = startTime
            self.resourceIdentifier = resourceIdentifier
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case taskId = "taskId"
            case endTime = "endTime"
            case checkName = "checkName"
            case nextToken = "nextToken"
            case startTime = "startTime"
            case resourceIdentifier = "resourceIdentifier"
            case maxResults = "maxResults"
        }
    }

    public struct ThingIndexingConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingIndexingMode", required: true, type: .enum), 
            AWSShapeMember(label: "thingConnectivityIndexingMode", required: false, type: .enum)
        ]
        /// Thing indexing mode. Valid values are:   REGISTRY – Your thing index will contain only registry data.   REGISTRY_AND_SHADOW - Your thing index will contain registry and shadow data.   OFF - Thing indexing is disabled.  
        public let thingIndexingMode: ThingIndexingMode
        /// Thing connectivity indexing mode. Valid values are:    STATUS – Your thing index will contain connectivity status. In order to enable thing connectivity indexing, thingIndexMode must not be set to OFF.   OFF - Thing connectivity status indexing is disabled.  
        public let thingConnectivityIndexingMode: ThingConnectivityIndexingMode?

        public init(thingIndexingMode: ThingIndexingMode, thingConnectivityIndexingMode: ThingConnectivityIndexingMode? = nil) {
            self.thingIndexingMode = thingIndexingMode
            self.thingConnectivityIndexingMode = thingConnectivityIndexingMode
        }

        private enum CodingKeys: String, CodingKey {
            case thingIndexingMode = "thingIndexingMode"
            case thingConnectivityIndexingMode = "thingConnectivityIndexingMode"
        }
    }

    public struct ListThingGroupsForThingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "thingGroups", required: false, type: .list)
        ]
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The thing groups.
        public let thingGroups: [GroupNameAndArn]?

        public init(nextToken: String? = nil, thingGroups: [GroupNameAndArn]? = nil) {
            self.nextToken = nextToken
            self.thingGroups = thingGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case thingGroups = "thingGroups"
        }
    }

    public struct ListThingRegistrationTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "status", location: .querystring(locationName: "status"), required: false, type: .enum)
        ]
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// The status of the bulk thing provisioning task.
        public let status: Status?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, status: Status? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case status = "status"
        }
    }

    public struct DescribeScheduledAuditResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dayOfMonth", required: false, type: .string), 
            AWSShapeMember(label: "frequency", required: false, type: .enum), 
            AWSShapeMember(label: "scheduledAuditArn", required: false, type: .string), 
            AWSShapeMember(label: "scheduledAuditName", required: false, type: .string), 
            AWSShapeMember(label: "targetCheckNames", required: false, type: .list), 
            AWSShapeMember(label: "dayOfWeek", required: false, type: .enum)
        ]
        /// The day of the month on which the scheduled audit takes place. Will be "1" through "31" or "LAST". If days 29-31 are specified, and the month does not have that many days, the audit takes place on the "LAST" day of the month.
        public let dayOfMonth: String?
        /// How often the scheduled audit takes place. One of "DAILY", "WEEKLY", "BIWEEKLY" or "MONTHLY". The actual start time of each audit is determined by the system.
        public let frequency: AuditFrequency?
        /// The ARN of the scheduled audit.
        public let scheduledAuditArn: String?
        /// The name of the scheduled audit.
        public let scheduledAuditName: String?
        /// Which checks are performed during the scheduled audit. (Note that checks must be enabled for your account. (Use DescribeAccountAuditConfiguration to see the list of all checks including those that are enabled or UpdateAccountAuditConfiguration to select which checks are enabled.)
        public let targetCheckNames: [String]?
        /// The day of the week on which the scheduled audit takes place. One of "SUN", "MON", "TUE", "WED", "THU", "FRI" or "SAT".
        public let dayOfWeek: DayOfWeek?

        public init(dayOfMonth: String? = nil, frequency: AuditFrequency? = nil, scheduledAuditArn: String? = nil, scheduledAuditName: String? = nil, targetCheckNames: [String]? = nil, dayOfWeek: DayOfWeek? = nil) {
            self.dayOfMonth = dayOfMonth
            self.frequency = frequency
            self.scheduledAuditArn = scheduledAuditArn
            self.scheduledAuditName = scheduledAuditName
            self.targetCheckNames = targetCheckNames
            self.dayOfWeek = dayOfWeek
        }

        private enum CodingKeys: String, CodingKey {
            case dayOfMonth = "dayOfMonth"
            case frequency = "frequency"
            case scheduledAuditArn = "scheduledAuditArn"
            case scheduledAuditName = "scheduledAuditName"
            case targetCheckNames = "targetCheckNames"
            case dayOfWeek = "dayOfWeek"
        }
    }

    public struct AssociateTargetsWithJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobArn", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "jobId", required: false, type: .string)
        ]
        /// An ARN identifying the job.
        public let jobArn: String?
        /// A short text description of the job.
        public let description: String?
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String?

        public init(jobArn: String? = nil, description: String? = nil, jobId: String? = nil) {
            self.jobArn = jobArn
            self.description = description
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobArn = "jobArn"
            case description = "description"
            case jobId = "jobId"
        }
    }

    public struct CreateThingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "thingId", required: false, type: .string), 
            AWSShapeMember(label: "thingArn", required: false, type: .string)
        ]
        /// The name of the new thing.
        public let thingName: String?
        /// The thing ID.
        public let thingId: String?
        /// The ARN of the new thing.
        public let thingArn: String?

        public init(thingName: String? = nil, thingId: String? = nil, thingArn: String? = nil) {
            self.thingName = thingName
            self.thingId = thingId
            self.thingArn = thingArn
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
            case thingId = "thingId"
            case thingArn = "thingArn"
        }
    }

    public struct KeyPair: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrivateKey", required: false, type: .string), 
            AWSShapeMember(label: "PublicKey", required: false, type: .string)
        ]
        /// The private key.
        public let privateKey: String?
        /// The public key.
        public let publicKey: String?

        public init(privateKey: String? = nil, publicKey: String? = nil) {
            self.privateKey = privateKey
            self.publicKey = publicKey
        }

        private enum CodingKeys: String, CodingKey {
            case privateKey = "PrivateKey"
            case publicKey = "PublicKey"
        }
    }

    public struct GetOTAUpdateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "otaUpdateInfo", required: false, type: .structure)
        ]
        /// The OTA update info.
        public let otaUpdateInfo: OTAUpdateInfo?

        public init(otaUpdateInfo: OTAUpdateInfo? = nil) {
            self.otaUpdateInfo = otaUpdateInfo
        }

        private enum CodingKeys: String, CodingKey {
            case otaUpdateInfo = "otaUpdateInfo"
        }
    }

    public struct DescribeJobExecutionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "execution", required: false, type: .structure)
        ]
        /// Information about the job execution.
        public let execution: JobExecution?

        public init(execution: JobExecution? = nil) {
            self.execution = execution
        }

        private enum CodingKeys: String, CodingKey {
            case execution = "execution"
        }
    }

    public enum ThingConnectivityIndexingMode: String, CustomStringConvertible, Codable {
        case off = "OFF"
        case status = "STATUS"
        public var description: String { return self.rawValue }
    }

    public struct EffectivePolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", required: false, type: .string), 
            AWSShapeMember(label: "policyDocument", required: false, type: .string), 
            AWSShapeMember(label: "policyArn", required: false, type: .string)
        ]
        /// The policy name.
        public let policyName: String?
        /// The IAM policy document.
        public let policyDocument: String?
        /// The policy ARN.
        public let policyArn: String?

        public init(policyName: String? = nil, policyDocument: String? = nil, policyArn: String? = nil) {
            self.policyName = policyName
            self.policyDocument = policyDocument
            self.policyArn = policyArn
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case policyDocument = "policyDocument"
            case policyArn = "policyArn"
        }
    }

    public struct AttachSecurityProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileTargetArn", location: .querystring(locationName: "securityProfileTargetArn"), required: true, type: .string), 
            AWSShapeMember(label: "securityProfileName", location: .uri(locationName: "securityProfileName"), required: true, type: .string)
        ]
        /// The ARN of the target (thing group) to which the security profile is attached.
        public let securityProfileTargetArn: String
        /// The security profile that is attached.
        public let securityProfileName: String

        public init(securityProfileTargetArn: String, securityProfileName: String) {
            self.securityProfileTargetArn = securityProfileTargetArn
            self.securityProfileName = securityProfileName
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileTargetArn = "securityProfileTargetArn"
            case securityProfileName = "securityProfileName"
        }
    }

    public struct AttributePayload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "merge", required: false, type: .boolean), 
            AWSShapeMember(label: "attributes", required: false, type: .map)
        ]
        /// Specifies whether the list of attributes provided in the AttributePayload is merged with the attributes stored in the registry, instead of overwriting them. To remove an attribute, call UpdateThing with an empty attribute value.  The merge attribute is only valid when calling UpdateThing. 
        public let merge: Bool?
        /// A JSON string containing up to three key-value pair in JSON format. For example:  {\"attributes\":{\"string1\":\"string2\"}} 
        public let attributes: [String: String]?

        public init(merge: Bool? = nil, attributes: [String: String]? = nil) {
            self.merge = merge
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case merge = "merge"
            case attributes = "attributes"
        }
    }

    public struct IotAnalyticsAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "channelArn", required: false, type: .string), 
            AWSShapeMember(label: "channelName", required: false, type: .string)
        ]
        /// The ARN of the role which has a policy that grants IoT Analytics permission to send message data via IoT Analytics (iotanalytics:BatchPutMessage).
        public let roleArn: String?
        /// (deprecated) The ARN of the IoT Analytics channel to which message data will be sent.
        public let channelArn: String?
        /// The name of the IoT Analytics channel to which message data will be sent.
        public let channelName: String?

        public init(roleArn: String? = nil, channelArn: String? = nil, channelName: String? = nil) {
            self.roleArn = roleArn
            self.channelArn = channelArn
            self.channelName = channelName
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case channelArn = "channelArn"
            case channelName = "channelName"
        }
    }

    public struct SearchIndexResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "things", required: false, type: .list), 
            AWSShapeMember(label: "thingGroups", required: false, type: .list)
        ]
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The things that match the search query.
        public let things: [ThingDocument]?
        /// The thing groups that match the search query.
        public let thingGroups: [ThingGroupDocument]?

        public init(nextToken: String? = nil, things: [ThingDocument]? = nil, thingGroups: [ThingGroupDocument]? = nil) {
            self.nextToken = nextToken
            self.things = things
            self.thingGroups = thingGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case things = "things"
            case thingGroups = "thingGroups"
        }
    }

    public struct TagResourceResponse: AWSShape {

    }

    public struct FileLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "s3Location", required: false, type: .structure), 
            AWSShapeMember(label: "stream", required: false, type: .structure)
        ]
        /// The location of the updated firmware in S3.
        public let s3Location: S3Location?
        /// The stream that contains the OTA update.
        public let stream: Stream?

        public init(s3Location: S3Location? = nil, stream: Stream? = nil) {
            self.s3Location = s3Location
            self.stream = stream
        }

        private enum CodingKeys: String, CodingKey {
            case s3Location = "s3Location"
            case stream = "stream"
        }
    }

    public struct DetachThingPrincipalResponse: AWSShape {

    }

    public struct AuditCheckConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "enabled", required: false, type: .boolean)
        ]
        /// True if this audit check is enabled for this account.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "enabled"
        }
    }

    public struct AddThingToBillingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "thingArn", required: false, type: .string), 
            AWSShapeMember(label: "billingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "billingGroupArn", required: false, type: .string)
        ]
        /// The name of the thing to be added to the billing group.
        public let thingName: String?
        /// The ARN of the thing to be added to the billing group.
        public let thingArn: String?
        /// The name of the billing group.
        public let billingGroupName: String?
        /// The ARN of the billing group.
        public let billingGroupArn: String?

        public init(thingName: String? = nil, thingArn: String? = nil, billingGroupName: String? = nil, billingGroupArn: String? = nil) {
            self.thingName = thingName
            self.thingArn = thingArn
            self.billingGroupName = billingGroupName
            self.billingGroupArn = billingGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
            case thingArn = "thingArn"
            case billingGroupName = "billingGroupName"
            case billingGroupArn = "billingGroupArn"
        }
    }

    public struct CreatePolicyVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyArn", required: false, type: .string), 
            AWSShapeMember(label: "policyDocument", required: false, type: .string), 
            AWSShapeMember(label: "policyVersionId", required: false, type: .string), 
            AWSShapeMember(label: "isDefaultVersion", required: false, type: .boolean)
        ]
        /// The policy ARN.
        public let policyArn: String?
        /// The JSON document that describes the policy.
        public let policyDocument: String?
        /// The policy version ID.
        public let policyVersionId: String?
        /// Specifies whether the policy version is the default.
        public let isDefaultVersion: Bool?

        public init(policyArn: String? = nil, policyDocument: String? = nil, policyVersionId: String? = nil, isDefaultVersion: Bool? = nil) {
            self.policyArn = policyArn
            self.policyDocument = policyDocument
            self.policyVersionId = policyVersionId
            self.isDefaultVersion = isDefaultVersion
        }

        private enum CodingKeys: String, CodingKey {
            case policyArn = "policyArn"
            case policyDocument = "policyDocument"
            case policyVersionId = "policyVersionId"
            case isDefaultVersion = "isDefaultVersion"
        }
    }

    public struct DeleteSecurityProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "expectedVersion", location: .querystring(locationName: "expectedVersion"), required: false, type: .long), 
            AWSShapeMember(label: "securityProfileName", location: .uri(locationName: "securityProfileName"), required: true, type: .string)
        ]
        /// The expected version of the security profile. A new version is generated whenever the security profile is updated. If you specify a value that is different than the actual version, a VersionConflictException is thrown.
        public let expectedVersion: Int64?
        /// The name of the security profile to be deleted.
        public let securityProfileName: String

        public init(expectedVersion: Int64? = nil, securityProfileName: String) {
            self.expectedVersion = expectedVersion
            self.securityProfileName = securityProfileName
        }

        private enum CodingKeys: String, CodingKey {
            case expectedVersion = "expectedVersion"
            case securityProfileName = "securityProfileName"
        }
    }

    public struct ClearDefaultAuthorizerRequest: AWSShape {

    }

    public struct DeleteCACertificateResponse: AWSShape {

    }

    public struct OTAUpdateInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "awsIotJobId", required: false, type: .string), 
            AWSShapeMember(label: "awsJobExecutionsRolloutConfig", required: false, type: .structure), 
            AWSShapeMember(label: "additionalParameters", required: false, type: .map), 
            AWSShapeMember(label: "otaUpdateId", required: false, type: .string), 
            AWSShapeMember(label: "otaUpdateArn", required: false, type: .string), 
            AWSShapeMember(label: "errorInfo", required: false, type: .structure), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "otaUpdateStatus", required: false, type: .enum), 
            AWSShapeMember(label: "awsIotJobArn", required: false, type: .string), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "otaUpdateFiles", required: false, type: .list), 
            AWSShapeMember(label: "targets", required: false, type: .list), 
            AWSShapeMember(label: "targetSelection", required: false, type: .enum)
        ]
        /// The AWS IoT job ID associated with the OTA update.
        public let awsIotJobId: String?
        /// Configuration for the rollout of OTA updates.
        public let awsJobExecutionsRolloutConfig: AwsJobExecutionsRolloutConfig?
        /// A collection of name/value pairs
        public let additionalParameters: [String: String]?
        /// The OTA update ID.
        public let otaUpdateId: String?
        /// The OTA update ARN.
        public let otaUpdateArn: String?
        /// Error information associated with the OTA update.
        public let errorInfo: ErrorInfo?
        /// A description of the OTA update.
        public let description: String?
        /// The date when the OTA update was created.
        public let creationDate: TimeStamp?
        /// The status of the OTA update.
        public let otaUpdateStatus: OTAUpdateStatus?
        /// The AWS IoT job ARN associated with the OTA update.
        public let awsIotJobArn: String?
        /// The date when the OTA update was last updated.
        public let lastModifiedDate: TimeStamp?
        /// A list of files associated with the OTA update.
        public let otaUpdateFiles: [OTAUpdateFile]?
        /// The targets of the OTA update.
        public let targets: [String]?
        /// Specifies whether the OTA update will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the OTA update (SNAPSHOT). If continuous, the OTA update may also be run on a thing when a change is detected in a target. For example, an OTA update will run on a thing when the thing is added to a target group, even after the OTA update was completed by all things originally in the group. 
        public let targetSelection: TargetSelection?

        public init(awsIotJobId: String? = nil, awsJobExecutionsRolloutConfig: AwsJobExecutionsRolloutConfig? = nil, additionalParameters: [String: String]? = nil, otaUpdateId: String? = nil, otaUpdateArn: String? = nil, errorInfo: ErrorInfo? = nil, description: String? = nil, creationDate: TimeStamp? = nil, otaUpdateStatus: OTAUpdateStatus? = nil, awsIotJobArn: String? = nil, lastModifiedDate: TimeStamp? = nil, otaUpdateFiles: [OTAUpdateFile]? = nil, targets: [String]? = nil, targetSelection: TargetSelection? = nil) {
            self.awsIotJobId = awsIotJobId
            self.awsJobExecutionsRolloutConfig = awsJobExecutionsRolloutConfig
            self.additionalParameters = additionalParameters
            self.otaUpdateId = otaUpdateId
            self.otaUpdateArn = otaUpdateArn
            self.errorInfo = errorInfo
            self.description = description
            self.creationDate = creationDate
            self.otaUpdateStatus = otaUpdateStatus
            self.awsIotJobArn = awsIotJobArn
            self.lastModifiedDate = lastModifiedDate
            self.otaUpdateFiles = otaUpdateFiles
            self.targets = targets
            self.targetSelection = targetSelection
        }

        private enum CodingKeys: String, CodingKey {
            case awsIotJobId = "awsIotJobId"
            case awsJobExecutionsRolloutConfig = "awsJobExecutionsRolloutConfig"
            case additionalParameters = "additionalParameters"
            case otaUpdateId = "otaUpdateId"
            case otaUpdateArn = "otaUpdateArn"
            case errorInfo = "errorInfo"
            case description = "description"
            case creationDate = "creationDate"
            case otaUpdateStatus = "otaUpdateStatus"
            case awsIotJobArn = "awsIotJobArn"
            case lastModifiedDate = "lastModifiedDate"
            case otaUpdateFiles = "otaUpdateFiles"
            case targets = "targets"
            case targetSelection = "targetSelection"
        }
    }

    public struct S3Action: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .string), 
            AWSShapeMember(label: "cannedAcl", required: false, type: .enum), 
            AWSShapeMember(label: "bucketName", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// The object key.
        public let key: String
        /// The Amazon S3 canned ACL that controls access to the object identified by the object key. For more information, see S3 canned ACLs.
        public let cannedAcl: CannedAccessControlList?
        /// The Amazon S3 bucket.
        public let bucketName: String
        /// The ARN of the IAM role that grants access.
        public let roleArn: String

        public init(key: String, cannedAcl: CannedAccessControlList? = nil, bucketName: String, roleArn: String) {
            self.key = key
            self.cannedAcl = cannedAcl
            self.bucketName = bucketName
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case cannedAcl = "cannedAcl"
            case bucketName = "bucketName"
            case roleArn = "roleArn"
        }
    }

    public struct SalesforceAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "url", required: true, type: .string), 
            AWSShapeMember(label: "token", required: true, type: .string)
        ]
        /// The URL exposed by the Salesforce IoT Cloud Input Stream. The URL is available from the Salesforce IoT Cloud platform after creation of the Input Stream.
        public let url: String
        /// The token used to authenticate access to the Salesforce IoT Cloud Input Stream. The token is available from the Salesforce IoT Cloud platform after creation of the Input Stream.
        public let token: String

        public init(url: String, token: String) {
            self.url = url
            self.token = token
        }

        private enum CodingKeys: String, CodingKey {
            case url = "url"
            case token = "token"
        }
    }

    public struct RoleAliasDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "credentialDurationSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "roleAlias", required: false, type: .string), 
            AWSShapeMember(label: "owner", required: false, type: .string), 
            AWSShapeMember(label: "roleAliasArn", required: false, type: .string)
        ]
        /// The role ARN.
        public let roleArn: String?
        /// The number of seconds for which the credential is valid.
        public let credentialDurationSeconds: Int32?
        /// The UNIX timestamp of when the role alias was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The UNIX timestamp of when the role alias was created.
        public let creationDate: TimeStamp?
        /// The role alias.
        public let roleAlias: String?
        /// The role alias owner.
        public let owner: String?
        /// The ARN of the role alias.
        public let roleAliasArn: String?

        public init(roleArn: String? = nil, credentialDurationSeconds: Int32? = nil, lastModifiedDate: TimeStamp? = nil, creationDate: TimeStamp? = nil, roleAlias: String? = nil, owner: String? = nil, roleAliasArn: String? = nil) {
            self.roleArn = roleArn
            self.credentialDurationSeconds = credentialDurationSeconds
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.roleAlias = roleAlias
            self.owner = owner
            self.roleAliasArn = roleAliasArn
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case credentialDurationSeconds = "credentialDurationSeconds"
            case lastModifiedDate = "lastModifiedDate"
            case creationDate = "creationDate"
            case roleAlias = "roleAlias"
            case owner = "owner"
            case roleAliasArn = "roleAliasArn"
        }
    }

    public struct ListCertificatesByCARequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean), 
            AWSShapeMember(label: "caCertificateId", location: .uri(locationName: "caCertificateId"), required: true, type: .string), 
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer)
        ]
        /// The marker for the next set of results.
        public let marker: String?
        /// Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.
        public let ascendingOrder: Bool?
        /// The ID of the CA certificate. This operation will list all registered device certificate that were signed by this CA certificate.
        public let caCertificateId: String
        /// The result page size.
        public let pageSize: Int32?

        public init(marker: String? = nil, ascendingOrder: Bool? = nil, caCertificateId: String, pageSize: Int32? = nil) {
            self.marker = marker
            self.ascendingOrder = ascendingOrder
            self.caCertificateId = caCertificateId
            self.pageSize = pageSize
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "marker"
            case ascendingOrder = "isAscendingOrder"
            case caCertificateId = "caCertificateId"
            case pageSize = "pageSize"
        }
    }

    public struct ListThingPrincipalsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "principals", required: false, type: .list)
        ]
        /// The principals associated with the thing.
        public let principals: [String]?

        public init(principals: [String]? = nil) {
            self.principals = principals
        }

        private enum CodingKeys: String, CodingKey {
            case principals = "principals"
        }
    }

    public struct AwsJobExecutionsRolloutConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maximumPerMinute", required: false, type: .integer)
        ]
        /// The maximum number of OTA update job executions started per minute.
        public let maximumPerMinute: Int32?

        public init(maximumPerMinute: Int32? = nil) {
            self.maximumPerMinute = maximumPerMinute
        }

        private enum CodingKeys: String, CodingKey {
            case maximumPerMinute = "maximumPerMinute"
        }
    }

    public struct LoggingOptionsPayload: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "logLevel", required: false, type: .enum)
        ]
        /// The ARN of the IAM role that grants access.
        public let roleArn: String
        /// The log level.
        public let logLevel: LogLevel?

        public init(roleArn: String, logLevel: LogLevel? = nil) {
            self.roleArn = roleArn
            self.logLevel = logLevel
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case logLevel = "logLevel"
        }
    }

    public struct ListThingRegistrationTaskReportsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceLinks", required: false, type: .list), 
            AWSShapeMember(label: "reportType", required: false, type: .enum)
        ]
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// Links to the task resources.
        public let resourceLinks: [String]?
        /// The type of task report.
        public let reportType: ReportType?

        public init(nextToken: String? = nil, resourceLinks: [String]? = nil, reportType: ReportType? = nil) {
            self.nextToken = nextToken
            self.resourceLinks = resourceLinks
            self.reportType = reportType
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case resourceLinks = "resourceLinks"
            case reportType = "reportType"
        }
    }

    public struct DeprecateThingTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "undoDeprecate", required: false, type: .boolean), 
            AWSShapeMember(label: "thingTypeName", location: .uri(locationName: "thingTypeName"), required: true, type: .string)
        ]
        /// Whether to undeprecate a deprecated thing type. If true, the thing type will not be deprecated anymore and you can associate it with things.
        public let undoDeprecate: Bool?
        /// The name of the thing type to deprecate.
        public let thingTypeName: String

        public init(undoDeprecate: Bool? = nil, thingTypeName: String) {
            self.undoDeprecate = undoDeprecate
            self.thingTypeName = thingTypeName
        }

        private enum CodingKeys: String, CodingKey {
            case undoDeprecate = "undoDeprecate"
            case thingTypeName = "thingTypeName"
        }
    }

    public struct ListThingGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "thingGroups", required: false, type: .list)
        ]
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The thing groups.
        public let thingGroups: [GroupNameAndArn]?

        public init(nextToken: String? = nil, thingGroups: [GroupNameAndArn]? = nil) {
            self.nextToken = nextToken
            self.thingGroups = thingGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case thingGroups = "thingGroups"
        }
    }

    public struct DescribeStreamResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "streamInfo", required: false, type: .structure)
        ]
        /// Information about the stream.
        public let streamInfo: StreamInfo?

        public init(streamInfo: StreamInfo? = nil) {
            self.streamInfo = streamInfo
        }

        private enum CodingKeys: String, CodingKey {
            case streamInfo = "streamInfo"
        }
    }

    public struct CreateJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobArn", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "jobId", required: false, type: .string)
        ]
        /// The job ARN.
        public let jobArn: String?
        /// The job description.
        public let description: String?
        /// The unique identifier you assigned to this job.
        public let jobId: String?

        public init(jobArn: String? = nil, description: String? = nil, jobId: String? = nil) {
            self.jobArn = jobArn
            self.description = description
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobArn = "jobArn"
            case description = "description"
            case jobId = "jobId"
        }
    }

    public struct TransferCertificateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "transferredCertificateArn", required: false, type: .string)
        ]
        /// The ARN of the certificate.
        public let transferredCertificateArn: String?

        public init(transferredCertificateArn: String? = nil) {
            self.transferredCertificateArn = transferredCertificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case transferredCertificateArn = "transferredCertificateArn"
        }
    }

    public struct DescribeDefaultAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerDescription", required: false, type: .structure)
        ]
        /// The default authorizer's description.
        public let authorizerDescription: AuthorizerDescription?

        public init(authorizerDescription: AuthorizerDescription? = nil) {
            self.authorizerDescription = authorizerDescription
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerDescription = "authorizerDescription"
        }
    }

    public struct LogTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "targetType", required: true, type: .enum), 
            AWSShapeMember(label: "targetName", required: false, type: .string)
        ]
        /// The target type.
        public let targetType: LogTargetType
        /// The target name.
        public let targetName: String?

        public init(targetType: LogTargetType, targetName: String? = nil) {
            self.targetType = targetType
            self.targetName = targetName
        }

        private enum CodingKeys: String, CodingKey {
            case targetType = "targetType"
            case targetName = "targetName"
        }
    }

    public struct TaskStatistics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "totalChecks", required: false, type: .integer), 
            AWSShapeMember(label: "compliantChecks", required: false, type: .integer), 
            AWSShapeMember(label: "canceledChecks", required: false, type: .integer), 
            AWSShapeMember(label: "inProgressChecks", required: false, type: .integer), 
            AWSShapeMember(label: "waitingForDataCollectionChecks", required: false, type: .integer), 
            AWSShapeMember(label: "nonCompliantChecks", required: false, type: .integer), 
            AWSShapeMember(label: "failedChecks", required: false, type: .integer)
        ]
        /// The number of checks in this audit.
        public let totalChecks: Int32?
        /// The number of checks that found compliant resources.
        public let compliantChecks: Int32?
        /// The number of checks that did not run because the audit was canceled.
        public let canceledChecks: Int32?
        /// The number of checks in progress.
        public let inProgressChecks: Int32?
        /// The number of checks waiting for data collection.
        public let waitingForDataCollectionChecks: Int32?
        /// The number of checks that found non-compliant resources.
        public let nonCompliantChecks: Int32?
        /// The number of checks 
        public let failedChecks: Int32?

        public init(totalChecks: Int32? = nil, compliantChecks: Int32? = nil, canceledChecks: Int32? = nil, inProgressChecks: Int32? = nil, waitingForDataCollectionChecks: Int32? = nil, nonCompliantChecks: Int32? = nil, failedChecks: Int32? = nil) {
            self.totalChecks = totalChecks
            self.compliantChecks = compliantChecks
            self.canceledChecks = canceledChecks
            self.inProgressChecks = inProgressChecks
            self.waitingForDataCollectionChecks = waitingForDataCollectionChecks
            self.nonCompliantChecks = nonCompliantChecks
            self.failedChecks = failedChecks
        }

        private enum CodingKeys: String, CodingKey {
            case totalChecks = "totalChecks"
            case compliantChecks = "compliantChecks"
            case canceledChecks = "canceledChecks"
            case inProgressChecks = "inProgressChecks"
            case waitingForDataCollectionChecks = "waitingForDataCollectionChecks"
            case nonCompliantChecks = "nonCompliantChecks"
            case failedChecks = "failedChecks"
        }
    }

    public struct AuthResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "allowed", required: false, type: .structure), 
            AWSShapeMember(label: "authInfo", required: false, type: .structure), 
            AWSShapeMember(label: "authDecision", required: false, type: .enum), 
            AWSShapeMember(label: "denied", required: false, type: .structure), 
            AWSShapeMember(label: "missingContextValues", required: false, type: .list)
        ]
        /// The policies and statements that allowed the specified action.
        public let allowed: Allowed?
        /// Authorization information.
        public let authInfo: AuthInfo?
        /// The final authorization decision of this scenario. Multiple statements are taken into account when determining the authorization decision. An explicit deny statement can override multiple allow statements.
        public let authDecision: AuthDecision?
        /// The policies and statements that denied the specified action.
        public let denied: Denied?
        /// Contains any missing context values found while evaluating policy.
        public let missingContextValues: [String]?

        public init(allowed: Allowed? = nil, authInfo: AuthInfo? = nil, authDecision: AuthDecision? = nil, denied: Denied? = nil, missingContextValues: [String]? = nil) {
            self.allowed = allowed
            self.authInfo = authInfo
            self.authDecision = authDecision
            self.denied = denied
            self.missingContextValues = missingContextValues
        }

        private enum CodingKeys: String, CodingKey {
            case allowed = "allowed"
            case authInfo = "authInfo"
            case authDecision = "authDecision"
            case denied = "denied"
            case missingContextValues = "missingContextValues"
        }
    }

    public struct UpdateThingGroupsForThingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "overrideDynamicGroups", required: false, type: .boolean), 
            AWSShapeMember(label: "thingGroupsToAdd", required: false, type: .list), 
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupsToRemove", required: false, type: .list)
        ]
        /// Override dynamic thing groups with static thing groups when 10-group limit is reached. If a thing belongs to 10 thing groups, and one or more of those groups are dynamic thing groups, adding a thing to a static group removes the thing from the last dynamic group.
        public let overrideDynamicGroups: Bool?
        /// The groups to which the thing will be added.
        public let thingGroupsToAdd: [String]?
        /// The thing whose group memberships will be updated.
        public let thingName: String?
        /// The groups from which the thing will be removed.
        public let thingGroupsToRemove: [String]?

        public init(overrideDynamicGroups: Bool? = nil, thingGroupsToAdd: [String]? = nil, thingName: String? = nil, thingGroupsToRemove: [String]? = nil) {
            self.overrideDynamicGroups = overrideDynamicGroups
            self.thingGroupsToAdd = thingGroupsToAdd
            self.thingName = thingName
            self.thingGroupsToRemove = thingGroupsToRemove
        }

        private enum CodingKeys: String, CodingKey {
            case overrideDynamicGroups = "overrideDynamicGroups"
            case thingGroupsToAdd = "thingGroupsToAdd"
            case thingName = "thingName"
            case thingGroupsToRemove = "thingGroupsToRemove"
        }
    }

    public struct UpdateThingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "removeThingType", required: false, type: .boolean), 
            AWSShapeMember(label: "expectedVersion", required: false, type: .long), 
            AWSShapeMember(label: "thingTypeName", required: false, type: .string), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string), 
            AWSShapeMember(label: "attributePayload", required: false, type: .structure)
        ]
        /// Remove a thing type association. If true, the association is removed.
        public let removeThingType: Bool?
        /// The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the UpdateThing request is rejected with a VersionConflictException.
        public let expectedVersion: Int64?
        /// The name of the thing type.
        public let thingTypeName: String?
        /// The name of the thing to update.
        public let thingName: String
        /// A list of thing attributes, a JSON string containing name-value pairs. For example:  {\"attributes\":{\"name1\":\"value2\"}}  This data is used to add new attributes or update existing attributes.
        public let attributePayload: AttributePayload?

        public init(removeThingType: Bool? = nil, expectedVersion: Int64? = nil, thingTypeName: String? = nil, thingName: String, attributePayload: AttributePayload? = nil) {
            self.removeThingType = removeThingType
            self.expectedVersion = expectedVersion
            self.thingTypeName = thingTypeName
            self.thingName = thingName
            self.attributePayload = attributePayload
        }

        private enum CodingKeys: String, CodingKey {
            case removeThingType = "removeThingType"
            case expectedVersion = "expectedVersion"
            case thingTypeName = "thingTypeName"
            case thingName = "thingName"
            case attributePayload = "attributePayload"
        }
    }

    public struct DeleteCACertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "caCertificateId"), required: true, type: .string)
        ]
        /// The ID of the certificate to delete. (The last part of the certificate ARN contains the certificate ID.)
        public let certificateId: String

        public init(certificateId: String) {
            self.certificateId = certificateId
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "caCertificateId"
        }
    }

    public struct ActiveViolation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "violationStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "behavior", required: false, type: .structure), 
            AWSShapeMember(label: "lastViolationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "securityProfileName", required: false, type: .string), 
            AWSShapeMember(label: "violationId", required: false, type: .string), 
            AWSShapeMember(label: "lastViolationValue", required: false, type: .structure)
        ]
        /// The time the violation started.
        public let violationStartTime: TimeStamp?
        /// The behavior which is being violated.
        public let behavior: Behavior?
        /// The time the most recent violation occurred.
        public let lastViolationTime: TimeStamp?
        /// The name of the thing responsible for the active violation.
        public let thingName: String?
        /// The security profile whose behavior is in violation.
        public let securityProfileName: String?
        /// The ID of the active violation.
        public let violationId: String?
        /// The value of the metric (the measurement) which caused the most recent violation.
        public let lastViolationValue: MetricValue?

        public init(violationStartTime: TimeStamp? = nil, behavior: Behavior? = nil, lastViolationTime: TimeStamp? = nil, thingName: String? = nil, securityProfileName: String? = nil, violationId: String? = nil, lastViolationValue: MetricValue? = nil) {
            self.violationStartTime = violationStartTime
            self.behavior = behavior
            self.lastViolationTime = lastViolationTime
            self.thingName = thingName
            self.securityProfileName = securityProfileName
            self.violationId = violationId
            self.lastViolationValue = lastViolationValue
        }

        private enum CodingKeys: String, CodingKey {
            case violationStartTime = "violationStartTime"
            case behavior = "behavior"
            case lastViolationTime = "lastViolationTime"
            case thingName = "thingName"
            case securityProfileName = "securityProfileName"
            case violationId = "violationId"
            case lastViolationValue = "lastViolationValue"
        }
    }

    public struct EnableTopicRuleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ruleName", location: .uri(locationName: "ruleName"), required: true, type: .string)
        ]
        /// The name of the topic rule to enable.
        public let ruleName: String

        public init(ruleName: String) {
            self.ruleName = ruleName
        }

        private enum CodingKeys: String, CodingKey {
            case ruleName = "ruleName"
        }
    }

    public struct CreateAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "authorizerFunctionArn", required: true, type: .string), 
            AWSShapeMember(label: "authorizerName", location: .uri(locationName: "authorizerName"), required: true, type: .string), 
            AWSShapeMember(label: "tokenKeyName", required: true, type: .string), 
            AWSShapeMember(label: "tokenSigningPublicKeys", required: true, type: .map)
        ]
        /// The status of the create authorizer request.
        public let status: AuthorizerStatus?
        /// The ARN of the authorizer's Lambda function.
        public let authorizerFunctionArn: String
        /// The authorizer name.
        public let authorizerName: String
        /// The name of the token key used to extract the token from the HTTP headers.
        public let tokenKeyName: String
        /// The public keys used to verify the digital signature returned by your custom authentication service.
        public let tokenSigningPublicKeys: [String: String]

        public init(status: AuthorizerStatus? = nil, authorizerFunctionArn: String, authorizerName: String, tokenKeyName: String, tokenSigningPublicKeys: [String: String]) {
            self.status = status
            self.authorizerFunctionArn = authorizerFunctionArn
            self.authorizerName = authorizerName
            self.tokenKeyName = tokenKeyName
            self.tokenSigningPublicKeys = tokenSigningPublicKeys
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case authorizerFunctionArn = "authorizerFunctionArn"
            case authorizerName = "authorizerName"
            case tokenKeyName = "tokenKeyName"
            case tokenSigningPublicKeys = "tokenSigningPublicKeys"
        }
    }

    public struct ListPrincipalPoliciesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean), 
            AWSShapeMember(label: "principal", location: .header(locationName: "x-amzn-iot-principal"), required: true, type: .string), 
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer)
        ]
        /// The marker for the next set of results.
        public let marker: String?
        /// Specifies the order for results. If true, results are returned in ascending creation order.
        public let ascendingOrder: Bool?
        /// The principal.
        public let principal: String
        /// The result page size.
        public let pageSize: Int32?

        public init(marker: String? = nil, ascendingOrder: Bool? = nil, principal: String, pageSize: Int32? = nil) {
            self.marker = marker
            self.ascendingOrder = ascendingOrder
            self.principal = principal
            self.pageSize = pageSize
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "marker"
            case ascendingOrder = "isAscendingOrder"
            case principal = "x-amzn-iot-principal"
            case pageSize = "pageSize"
        }
    }

    public struct AttachPrincipalPolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string), 
            AWSShapeMember(label: "principal", location: .header(locationName: "x-amzn-iot-principal"), required: true, type: .string)
        ]
        /// The policy name.
        public let policyName: String
        /// The principal, which can be a certificate ARN (as returned from the CreateCertificate operation) or an Amazon Cognito ID.
        public let principal: String

        public init(policyName: String, principal: String) {
            self.policyName = policyName
            self.principal = principal
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case principal = "x-amzn-iot-principal"
        }
    }

    public struct ThingConnectivity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "timestamp", required: false, type: .long), 
            AWSShapeMember(label: "connected", required: false, type: .boolean)
        ]
        /// The epoch time (in milliseconds) when the thing last connected or disconnected. Note that if the thing has been disconnected for more than a few weeks, the time value can be missing.
        public let timestamp: Int64?
        /// True if the thing is connected to the AWS IoT service, false if it is not connected.
        public let connected: Bool?

        public init(timestamp: Int64? = nil, connected: Bool? = nil) {
            self.timestamp = timestamp
            self.connected = connected
        }

        private enum CodingKeys: String, CodingKey {
            case timestamp = "timestamp"
            case connected = "connected"
        }
    }

    public struct ThingDocument: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupNames", required: false, type: .list), 
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "thingTypeName", required: false, type: .string), 
            AWSShapeMember(label: "shadow", required: false, type: .string), 
            AWSShapeMember(label: "connectivity", required: false, type: .structure), 
            AWSShapeMember(label: "attributes", required: false, type: .map), 
            AWSShapeMember(label: "thingId", required: false, type: .string)
        ]
        /// Thing group names.
        public let thingGroupNames: [String]?
        /// The thing name.
        public let thingName: String?
        /// The thing type name.
        public let thingTypeName: String?
        /// The shadow.
        public let shadow: String?
        /// Indicates whether or not the thing is connected to the AWS IoT service.
        public let connectivity: ThingConnectivity?
        /// The attributes.
        public let attributes: [String: String]?
        /// The thing ID.
        public let thingId: String?

        public init(thingGroupNames: [String]? = nil, thingName: String? = nil, thingTypeName: String? = nil, shadow: String? = nil, connectivity: ThingConnectivity? = nil, attributes: [String: String]? = nil, thingId: String? = nil) {
            self.thingGroupNames = thingGroupNames
            self.thingName = thingName
            self.thingTypeName = thingTypeName
            self.shadow = shadow
            self.connectivity = connectivity
            self.attributes = attributes
            self.thingId = thingId
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupNames = "thingGroupNames"
            case thingName = "thingName"
            case thingTypeName = "thingTypeName"
            case shadow = "shadow"
            case connectivity = "connectivity"
            case attributes = "attributes"
            case thingId = "thingId"
        }
    }

    public enum AlertTargetType: String, CustomStringConvertible, Codable {
        case sns = "SNS"
        public var description: String { return self.rawValue }
    }

    public struct ListSecurityProfilesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "securityProfileIdentifiers", required: false, type: .list)
        ]
        /// A token that can be used to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// A list of security profile identifiers (names and ARNs).
        public let securityProfileIdentifiers: [SecurityProfileIdentifier]?

        public init(nextToken: String? = nil, securityProfileIdentifiers: [SecurityProfileIdentifier]? = nil) {
            self.nextToken = nextToken
            self.securityProfileIdentifiers = securityProfileIdentifiers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case securityProfileIdentifiers = "securityProfileIdentifiers"
        }
    }

    public struct CertificateValidity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "notBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "notAfter", required: false, type: .timestamp)
        ]
        /// The certificate is not valid before this date.
        public let notBefore: TimeStamp?
        /// The certificate is not valid after this date.
        public let notAfter: TimeStamp?

        public init(notBefore: TimeStamp? = nil, notAfter: TimeStamp? = nil) {
            self.notBefore = notBefore
            self.notAfter = notAfter
        }

        private enum CodingKeys: String, CodingKey {
            case notBefore = "notBefore"
            case notAfter = "notAfter"
        }
    }

    public struct UpdateRoleAliasRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "credentialDurationSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "roleAlias", location: .uri(locationName: "roleAlias"), required: true, type: .string)
        ]
        /// The role ARN.
        public let roleArn: String?
        /// The number of seconds the credential will be valid.
        public let credentialDurationSeconds: Int32?
        /// The role alias to update.
        public let roleAlias: String

        public init(roleArn: String? = nil, credentialDurationSeconds: Int32? = nil, roleAlias: String) {
            self.roleArn = roleArn
            self.credentialDurationSeconds = credentialDurationSeconds
            self.roleAlias = roleAlias
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case credentialDurationSeconds = "credentialDurationSeconds"
            case roleAlias = "roleAlias"
        }
    }

    public struct TestInvokeAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerName", location: .uri(locationName: "authorizerName"), required: true, type: .string), 
            AWSShapeMember(label: "tokenSignature", required: true, type: .string), 
            AWSShapeMember(label: "token", required: true, type: .string)
        ]
        /// The custom authorizer name.
        public let authorizerName: String
        /// The signature made with the token and your custom authentication service's private key.
        public let tokenSignature: String
        /// The token returned by your custom authentication service.
        public let token: String

        public init(authorizerName: String, tokenSignature: String, token: String) {
            self.authorizerName = authorizerName
            self.tokenSignature = tokenSignature
            self.token = token
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerName = "authorizerName"
            case tokenSignature = "tokenSignature"
            case token = "token"
        }
    }

    public struct ListJobExecutionsForThingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "executionSummaries", required: false, type: .list)
        ]
        /// The token for the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// A list of job execution summaries.
        public let executionSummaries: [JobExecutionSummaryForThing]?

        public init(nextToken: String? = nil, executionSummaries: [JobExecutionSummaryForThing]? = nil) {
            self.nextToken = nextToken
            self.executionSummaries = executionSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case executionSummaries = "executionSummaries"
        }
    }

    public struct GetRegistrationCodeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "registrationCode", required: false, type: .string)
        ]
        /// The CA certificate registration code.
        public let registrationCode: String?

        public init(registrationCode: String? = nil) {
            self.registrationCode = registrationCode
        }

        private enum CodingKeys: String, CodingKey {
            case registrationCode = "registrationCode"
        }
    }

    public struct ListJobExecutionsForThingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", location: .querystring(locationName: "status"), required: false, type: .enum), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// An optional filter that lets you search for jobs that have the specified status.
        public let status: JobExecutionStatus?
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// The thing name.
        public let thingName: String
        /// The maximum number of results to be returned per request.
        public let maxResults: Int32?

        public init(status: JobExecutionStatus? = nil, nextToken: String? = nil, thingName: String, maxResults: Int32? = nil) {
            self.status = status
            self.nextToken = nextToken
            self.thingName = thingName
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case nextToken = "nextToken"
            case thingName = "thingName"
            case maxResults = "maxResults"
        }
    }

    public struct ListPoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policies", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The descriptions of the policies.
        public let policies: [Policy]?
        /// The marker for the next set of results, or null if there are no additional results.
        public let nextMarker: String?

        public init(policies: [Policy]? = nil, nextMarker: String? = nil) {
            self.policies = policies
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case policies = "policies"
            case nextMarker = "nextMarker"
        }
    }

    public struct JobProcessDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "numberOfTimedOutThings", required: false, type: .integer), 
            AWSShapeMember(label: "numberOfCanceledThings", required: false, type: .integer), 
            AWSShapeMember(label: "numberOfQueuedThings", required: false, type: .integer), 
            AWSShapeMember(label: "processingTargets", required: false, type: .list), 
            AWSShapeMember(label: "numberOfSucceededThings", required: false, type: .integer), 
            AWSShapeMember(label: "numberOfRemovedThings", required: false, type: .integer), 
            AWSShapeMember(label: "numberOfInProgressThings", required: false, type: .integer), 
            AWSShapeMember(label: "numberOfFailedThings", required: false, type: .integer), 
            AWSShapeMember(label: "numberOfRejectedThings", required: false, type: .integer)
        ]
        /// The number of things whose job execution status is TIMED_OUT.
        public let numberOfTimedOutThings: Int32?
        /// The number of things that cancelled the job.
        public let numberOfCanceledThings: Int32?
        /// The number of things that are awaiting execution of the job.
        public let numberOfQueuedThings: Int32?
        /// The target devices to which the job execution is being rolled out. This value will be null after the job execution has finished rolling out to all the target devices.
        public let processingTargets: [String]?
        /// The number of things which successfully completed the job.
        public let numberOfSucceededThings: Int32?
        /// The number of things that are no longer scheduled to execute the job because they have been deleted or have been removed from the group that was a target of the job.
        public let numberOfRemovedThings: Int32?
        /// The number of things currently executing the job.
        public let numberOfInProgressThings: Int32?
        /// The number of things that failed executing the job.
        public let numberOfFailedThings: Int32?
        /// The number of things that rejected the job.
        public let numberOfRejectedThings: Int32?

        public init(numberOfTimedOutThings: Int32? = nil, numberOfCanceledThings: Int32? = nil, numberOfQueuedThings: Int32? = nil, processingTargets: [String]? = nil, numberOfSucceededThings: Int32? = nil, numberOfRemovedThings: Int32? = nil, numberOfInProgressThings: Int32? = nil, numberOfFailedThings: Int32? = nil, numberOfRejectedThings: Int32? = nil) {
            self.numberOfTimedOutThings = numberOfTimedOutThings
            self.numberOfCanceledThings = numberOfCanceledThings
            self.numberOfQueuedThings = numberOfQueuedThings
            self.processingTargets = processingTargets
            self.numberOfSucceededThings = numberOfSucceededThings
            self.numberOfRemovedThings = numberOfRemovedThings
            self.numberOfInProgressThings = numberOfInProgressThings
            self.numberOfFailedThings = numberOfFailedThings
            self.numberOfRejectedThings = numberOfRejectedThings
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfTimedOutThings = "numberOfTimedOutThings"
            case numberOfCanceledThings = "numberOfCanceledThings"
            case numberOfQueuedThings = "numberOfQueuedThings"
            case processingTargets = "processingTargets"
            case numberOfSucceededThings = "numberOfSucceededThings"
            case numberOfRemovedThings = "numberOfRemovedThings"
            case numberOfInProgressThings = "numberOfInProgressThings"
            case numberOfFailedThings = "numberOfFailedThings"
            case numberOfRejectedThings = "numberOfRejectedThings"
        }
    }

    public struct DescribeJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string)
        ]
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
        }
    }

    public struct CreateBillingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "billingGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "billingGroupId", required: false, type: .string), 
            AWSShapeMember(label: "billingGroupName", required: false, type: .string)
        ]
        /// The ARN of the billing group.
        public let billingGroupArn: String?
        /// The ID of the billing group.
        public let billingGroupId: String?
        /// The name you gave to the billing group.
        public let billingGroupName: String?

        public init(billingGroupArn: String? = nil, billingGroupId: String? = nil, billingGroupName: String? = nil) {
            self.billingGroupArn = billingGroupArn
            self.billingGroupId = billingGroupId
            self.billingGroupName = billingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case billingGroupArn = "billingGroupArn"
            case billingGroupId = "billingGroupId"
            case billingGroupName = "billingGroupName"
        }
    }

    public struct UpdateThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "expectedVersion", required: false, type: .long), 
            AWSShapeMember(label: "thingGroupProperties", required: true, type: .structure), 
            AWSShapeMember(label: "thingGroupName", location: .uri(locationName: "thingGroupName"), required: true, type: .string)
        ]
        /// The expected version of the thing group. If this does not match the version of the thing group being updated, the update will fail.
        public let expectedVersion: Int64?
        /// The thing group properties.
        public let thingGroupProperties: ThingGroupProperties
        /// The thing group to update.
        public let thingGroupName: String

        public init(expectedVersion: Int64? = nil, thingGroupProperties: ThingGroupProperties, thingGroupName: String) {
            self.expectedVersion = expectedVersion
            self.thingGroupProperties = thingGroupProperties
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case expectedVersion = "expectedVersion"
            case thingGroupProperties = "thingGroupProperties"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct ThingTypeMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deprecationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "deprecated", required: false, type: .boolean)
        ]
        /// The date and time when the thing type was deprecated.
        public let deprecationDate: TimeStamp?
        /// The date and time when the thing type was created.
        public let creationDate: TimeStamp?
        /// Whether the thing type is deprecated. If true, no new things could be associated with this type.
        public let deprecated: Bool?

        public init(deprecationDate: TimeStamp? = nil, creationDate: TimeStamp? = nil, deprecated: Bool? = nil) {
            self.deprecationDate = deprecationDate
            self.creationDate = creationDate
            self.deprecated = deprecated
        }

        private enum CodingKeys: String, CodingKey {
            case deprecationDate = "deprecationDate"
            case creationDate = "creationDate"
            case deprecated = "deprecated"
        }
    }

    public struct DescribeSecurityProfileResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileDescription", required: false, type: .string), 
            AWSShapeMember(label: "alertTargets", required: false, type: .map), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "securityProfileArn", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "securityProfileName", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .long), 
            AWSShapeMember(label: "behaviors", required: false, type: .list)
        ]
        /// A description of the security profile (associated with the security profile when it was created or updated).
        public let securityProfileDescription: String?
        /// Where the alerts are sent. (Alerts are always sent to the console.)
        public let alertTargets: [AlertTargetType: AlertTarget]?
        /// The time the security profile was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The ARN of the security profile.
        public let securityProfileArn: String?
        /// The time the security profile was created.
        public let creationDate: TimeStamp?
        /// The name of the security profile.
        public let securityProfileName: String?
        /// The version of the security profile. A new version is generated whenever the security profile is updated.
        public let version: Int64?
        /// Specifies the behaviors that, when violated by a device (thing), cause an alert.
        public let behaviors: [Behavior]?

        public init(securityProfileDescription: String? = nil, alertTargets: [AlertTargetType: AlertTarget]? = nil, lastModifiedDate: TimeStamp? = nil, securityProfileArn: String? = nil, creationDate: TimeStamp? = nil, securityProfileName: String? = nil, version: Int64? = nil, behaviors: [Behavior]? = nil) {
            self.securityProfileDescription = securityProfileDescription
            self.alertTargets = alertTargets
            self.lastModifiedDate = lastModifiedDate
            self.securityProfileArn = securityProfileArn
            self.creationDate = creationDate
            self.securityProfileName = securityProfileName
            self.version = version
            self.behaviors = behaviors
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileDescription = "securityProfileDescription"
            case alertTargets = "alertTargets"
            case lastModifiedDate = "lastModifiedDate"
            case securityProfileArn = "securityProfileArn"
            case creationDate = "creationDate"
            case securityProfileName = "securityProfileName"
            case version = "version"
            case behaviors = "behaviors"
        }
    }

    public struct ListAttachedPoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policies", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The policies.
        public let policies: [Policy]?
        /// The token to retrieve the next set of results, or ``null`` if there are no more results.
        public let nextMarker: String?

        public init(policies: [Policy]? = nil, nextMarker: String? = nil) {
            self.policies = policies
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case policies = "policies"
            case nextMarker = "nextMarker"
        }
    }

    public struct RegistrationConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "templateBody", required: false, type: .string)
        ]
        /// The ARN of the role.
        public let roleArn: String?
        /// The template body.
        public let templateBody: String?

        public init(roleArn: String? = nil, templateBody: String? = nil) {
            self.roleArn = roleArn
            self.templateBody = templateBody
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case templateBody = "templateBody"
        }
    }

    public struct Denied: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "explicitDeny", required: false, type: .structure), 
            AWSShapeMember(label: "implicitDeny", required: false, type: .structure)
        ]
        /// Information that explicitly denies the authorization. 
        public let explicitDeny: ExplicitDeny?
        /// Information that implicitly denies the authorization. When a policy doesn't explicitly deny or allow an action on a resource it is considered an implicit deny.
        public let implicitDeny: ImplicitDeny?

        public init(explicitDeny: ExplicitDeny? = nil, implicitDeny: ImplicitDeny? = nil) {
            self.explicitDeny = explicitDeny
            self.implicitDeny = implicitDeny
        }

        private enum CodingKeys: String, CodingKey {
            case explicitDeny = "explicitDeny"
            case implicitDeny = "implicitDeny"
        }
    }

    public struct DeleteCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "forceDelete", location: .querystring(locationName: "forceDelete"), required: false, type: .boolean), 
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "certificateId"), required: true, type: .string)
        ]
        /// Forces a certificate request to be deleted.
        public let forceDelete: Bool?
        /// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
        public let certificateId: String

        public init(forceDelete: Bool? = nil, certificateId: String) {
            self.forceDelete = forceDelete
            self.certificateId = certificateId
        }

        private enum CodingKeys: String, CodingKey {
            case forceDelete = "forceDelete"
            case certificateId = "certificateId"
        }
    }

    public struct RegisterCACertificateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", required: false, type: .string), 
            AWSShapeMember(label: "certificateArn", required: false, type: .string)
        ]
        /// The CA certificate identifier.
        public let certificateId: String?
        /// The CA certificate ARN.
        public let certificateArn: String?

        public init(certificateId: String? = nil, certificateArn: String? = nil) {
            self.certificateId = certificateId
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "certificateId"
            case certificateArn = "certificateArn"
        }
    }

    public struct RegisterCACertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "caCertificate", required: true, type: .string), 
            AWSShapeMember(label: "allowAutoRegistration", location: .querystring(locationName: "allowAutoRegistration"), required: false, type: .boolean), 
            AWSShapeMember(label: "setAsActive", location: .querystring(locationName: "setAsActive"), required: false, type: .boolean), 
            AWSShapeMember(label: "verificationCertificate", required: true, type: .string), 
            AWSShapeMember(label: "registrationConfig", required: false, type: .structure)
        ]
        /// The CA certificate.
        public let caCertificate: String
        /// Allows this CA certificate to be used for auto registration of device certificates.
        public let allowAutoRegistration: Bool?
        /// A boolean value that specifies if the CA certificate is set to active.
        public let setAsActive: Bool?
        /// The private key verification certificate.
        public let verificationCertificate: String
        /// Information about the registration configuration.
        public let registrationConfig: RegistrationConfig?

        public init(caCertificate: String, allowAutoRegistration: Bool? = nil, setAsActive: Bool? = nil, verificationCertificate: String, registrationConfig: RegistrationConfig? = nil) {
            self.caCertificate = caCertificate
            self.allowAutoRegistration = allowAutoRegistration
            self.setAsActive = setAsActive
            self.verificationCertificate = verificationCertificate
            self.registrationConfig = registrationConfig
        }

        private enum CodingKeys: String, CodingKey {
            case caCertificate = "caCertificate"
            case allowAutoRegistration = "allowAutoRegistration"
            case setAsActive = "setAsActive"
            case verificationCertificate = "verificationCertificate"
            case registrationConfig = "registrationConfig"
        }
    }

    public struct KinesisAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "streamName", required: true, type: .string), 
            AWSShapeMember(label: "partitionKey", required: false, type: .string)
        ]
        /// The ARN of the IAM role that grants access to the Amazon Kinesis stream.
        public let roleArn: String
        /// The name of the Amazon Kinesis stream.
        public let streamName: String
        /// The partition key.
        public let partitionKey: String?

        public init(roleArn: String, streamName: String, partitionKey: String? = nil) {
            self.roleArn = roleArn
            self.streamName = streamName
            self.partitionKey = partitionKey
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case streamName = "streamName"
            case partitionKey = "partitionKey"
        }
    }

    public struct PresignedUrlConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "expiresInSec", required: false, type: .long)
        ]
        /// The ARN of an IAM role that grants grants permission to download files from the S3 bucket where the job data/updates are stored. The role must also grant permission for IoT to download the files.
        public let roleArn: String?
        /// How long (in seconds) pre-signed URLs are valid. Valid values are 60 - 3600, the default value is 3600 seconds. Pre-signed URLs are generated when Jobs receives an MQTT request for the job document.
        public let expiresInSec: Int64?

        public init(roleArn: String? = nil, expiresInSec: Int64? = nil) {
            self.roleArn = roleArn
            self.expiresInSec = expiresInSec
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case expiresInSec = "expiresInSec"
        }
    }

    public struct ListThingsInThingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "things", required: false, type: .list)
        ]
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The things in the specified thing group.
        public let things: [String]?

        public init(nextToken: String? = nil, things: [String]? = nil) {
            self.nextToken = nextToken
            self.things = things
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case things = "things"
        }
    }

    public struct GetIndexingConfigurationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingIndexingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "thingGroupIndexingConfiguration", required: false, type: .structure)
        ]
        /// Thing indexing configuration.
        public let thingIndexingConfiguration: ThingIndexingConfiguration?
        /// The index configuration.
        public let thingGroupIndexingConfiguration: ThingGroupIndexingConfiguration?

        public init(thingIndexingConfiguration: ThingIndexingConfiguration? = nil, thingGroupIndexingConfiguration: ThingGroupIndexingConfiguration? = nil) {
            self.thingIndexingConfiguration = thingIndexingConfiguration
            self.thingGroupIndexingConfiguration = thingGroupIndexingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case thingIndexingConfiguration = "thingIndexingConfiguration"
            case thingGroupIndexingConfiguration = "thingGroupIndexingConfiguration"
        }
    }

    public struct DeleteThingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "expectedVersion", location: .querystring(locationName: "expectedVersion"), required: false, type: .long), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// The expected version of the thing record in the registry. If the version of the record in the registry does not match the expected version specified in the request, the DeleteThing request is rejected with a VersionConflictException.
        public let expectedVersion: Int64?
        /// The name of the thing to delete.
        public let thingName: String

        public init(expectedVersion: Int64? = nil, thingName: String) {
            self.expectedVersion = expectedVersion
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case expectedVersion = "expectedVersion"
            case thingName = "thingName"
        }
    }

    public struct DeleteJobExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "force", location: .querystring(locationName: "force"), required: false, type: .boolean), 
            AWSShapeMember(label: "executionNumber", location: .uri(locationName: "executionNumber"), required: true, type: .long), 
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// (Optional) When true, you can delete a job execution which is "IN_PROGRESS". Otherwise, you can only delete a job execution which is in a terminal state ("SUCCEEDED", "FAILED", "REJECTED", "REMOVED" or "CANCELED") or an exception will occur. The default is false.  Deleting a job execution which is "IN_PROGRESS", will cause the device to be unable to access job information or update the job execution status. Use caution and ensure that the device is able to recover to a valid state. 
        public let force: Bool?
        /// The ID of the job execution to be deleted. The executionNumber refers to the execution of a particular job on a particular device. Note that once a job execution is deleted, the executionNumber may be reused by IoT, so be sure you get and use the correct value here.
        public let executionNumber: Int64
        /// The ID of the job whose execution on a particular device will be deleted.
        public let jobId: String
        /// The name of the thing whose job execution will be deleted.
        public let thingName: String

        public init(force: Bool? = nil, executionNumber: Int64, jobId: String, thingName: String) {
            self.force = force
            self.executionNumber = executionNumber
            self.jobId = jobId
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case force = "force"
            case executionNumber = "executionNumber"
            case jobId = "jobId"
            case thingName = "thingName"
        }
    }

    public struct DescribeAccountAuditConfigurationRequest: AWSShape {

    }

    public struct S3Destination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "bucket", required: false, type: .string), 
            AWSShapeMember(label: "prefix", required: false, type: .string)
        ]
        /// The S3 bucket that contains the updated firmware.
        public let bucket: String?
        /// The S3 prefix.
        public let prefix: String?

        public init(bucket: String? = nil, prefix: String? = nil) {
            self.bucket = bucket
            self.prefix = prefix
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "bucket"
            case prefix = "prefix"
        }
    }

    public struct CreateThingTypeResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingTypeArn", required: false, type: .string), 
            AWSShapeMember(label: "thingTypeName", required: false, type: .string), 
            AWSShapeMember(label: "thingTypeId", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the thing type.
        public let thingTypeArn: String?
        /// The name of the thing type.
        public let thingTypeName: String?
        /// The thing type ID.
        public let thingTypeId: String?

        public init(thingTypeArn: String? = nil, thingTypeName: String? = nil, thingTypeId: String? = nil) {
            self.thingTypeArn = thingTypeArn
            self.thingTypeName = thingTypeName
            self.thingTypeId = thingTypeId
        }

        private enum CodingKeys: String, CodingKey {
            case thingTypeArn = "thingTypeArn"
            case thingTypeName = "thingTypeName"
            case thingTypeId = "thingTypeId"
        }
    }

    public struct TimeoutConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "inProgressTimeoutInMinutes", required: false, type: .long)
        ]
        /// Specifies the amount of time, in minutes, this device has to finish execution of this job. The timeout interval can be anywhere between 1 minute and 7 days (1 to 10080 minutes). The in progress timer can't be updated and will apply to all job executions for the job. Whenever a job execution remains in the IN_PROGRESS status for longer than this interval, the job execution will fail and switch to the terminal TIMED_OUT status.
        public let inProgressTimeoutInMinutes: Int64?

        public init(inProgressTimeoutInMinutes: Int64? = nil) {
            self.inProgressTimeoutInMinutes = inProgressTimeoutInMinutes
        }

        private enum CodingKeys: String, CodingKey {
            case inProgressTimeoutInMinutes = "inProgressTimeoutInMinutes"
        }
    }

    public enum CACertificateStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
        public var description: String { return self.rawValue }
    }

    public struct ListBillingGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "namePrefixFilter", location: .querystring(locationName: "namePrefixFilter"), required: false, type: .string)
        ]
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return per request.
        public let maxResults: Int32?
        /// Limit the results to billing groups whose names have the given prefix.
        public let namePrefixFilter: String?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, namePrefixFilter: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.namePrefixFilter = namePrefixFilter
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case namePrefixFilter = "namePrefixFilter"
        }
    }

    public struct ValidationError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "errorMessage", required: false, type: .string)
        ]
        /// The description of an error found in the behaviors.
        public let errorMessage: String?

        public init(errorMessage: String? = nil) {
            self.errorMessage = errorMessage
        }

        private enum CodingKeys: String, CodingKey {
            case errorMessage = "errorMessage"
        }
    }

    public struct S3Location: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "bucket", required: false, type: .string)
        ]
        /// The S3 key.
        public let key: String?
        /// The S3 bucket version.
        public let version: String?
        /// The S3 bucket.
        public let bucket: String?

        public init(key: String? = nil, version: String? = nil, bucket: String? = nil) {
            self.key = key
            self.version = version
            self.bucket = bucket
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case version = "version"
            case bucket = "bucket"
        }
    }

    public struct DeleteThingGroupResponse: AWSShape {

    }

    public struct RejectCertificateTransferRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "certificateId"), required: true, type: .string), 
            AWSShapeMember(label: "rejectReason", required: false, type: .string)
        ]
        /// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
        public let certificateId: String
        /// The reason the certificate transfer was rejected.
        public let rejectReason: String?

        public init(certificateId: String, rejectReason: String? = nil) {
            self.certificateId = certificateId
            self.rejectReason = rejectReason
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "certificateId"
            case rejectReason = "rejectReason"
        }
    }

    public struct PutItemInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tableName", required: true, type: .string)
        ]
        /// The table where the message data will be written
        public let tableName: String

        public init(tableName: String) {
            self.tableName = tableName
        }

        private enum CodingKeys: String, CodingKey {
            case tableName = "tableName"
        }
    }

    public struct StreamFile: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "fileId", required: false, type: .integer), 
            AWSShapeMember(label: "s3Location", required: false, type: .structure)
        ]
        /// The file ID.
        public let fileId: Int32?
        /// The location of the file in S3.
        public let s3Location: S3Location?

        public init(fileId: Int32? = nil, s3Location: S3Location? = nil) {
            self.fileId = fileId
            self.s3Location = s3Location
        }

        private enum CodingKeys: String, CodingKey {
            case fileId = "fileId"
            case s3Location = "s3Location"
        }
    }

    public struct StartOnDemandAuditTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "targetCheckNames", required: true, type: .list)
        ]
        /// Which checks are performed during the audit. The checks you specify must be enabled for your account or an exception occurs. Use DescribeAccountAuditConfiguration to see the list of all checks including those that are enabled or UpdateAccountAuditConfiguration to select which checks are enabled.
        public let targetCheckNames: [String]

        public init(targetCheckNames: [String]) {
            self.targetCheckNames = targetCheckNames
        }

        private enum CodingKeys: String, CodingKey {
            case targetCheckNames = "targetCheckNames"
        }
    }

    public struct GetOTAUpdateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "otaUpdateId", location: .uri(locationName: "otaUpdateId"), required: true, type: .string)
        ]
        /// The OTA update ID.
        public let otaUpdateId: String

        public init(otaUpdateId: String) {
            self.otaUpdateId = otaUpdateId
        }

        private enum CodingKeys: String, CodingKey {
            case otaUpdateId = "otaUpdateId"
        }
    }

    public struct AddThingToThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "overrideDynamicGroups", required: false, type: .boolean), 
            AWSShapeMember(label: "thingGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "thingArn", required: false, type: .string), 
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupName", required: false, type: .string)
        ]
        /// Override dynamic thing groups with static thing groups when 10-group limit is reached. If a thing belongs to 10 thing groups, and one or more of those groups are dynamic thing groups, adding a thing to a static group removes the thing from the last dynamic group.
        public let overrideDynamicGroups: Bool?
        /// The ARN of the group to which you are adding a thing.
        public let thingGroupArn: String?
        /// The ARN of the thing to add to a group.
        public let thingArn: String?
        /// The name of the thing to add to a group.
        public let thingName: String?
        /// The name of the group to which you are adding a thing.
        public let thingGroupName: String?

        public init(overrideDynamicGroups: Bool? = nil, thingGroupArn: String? = nil, thingArn: String? = nil, thingName: String? = nil, thingGroupName: String? = nil) {
            self.overrideDynamicGroups = overrideDynamicGroups
            self.thingGroupArn = thingGroupArn
            self.thingArn = thingArn
            self.thingName = thingName
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case overrideDynamicGroups = "overrideDynamicGroups"
            case thingGroupArn = "thingGroupArn"
            case thingArn = "thingArn"
            case thingName = "thingName"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct TestAuthorizationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyNamesToAdd", required: false, type: .list), 
            AWSShapeMember(label: "clientId", location: .querystring(locationName: "clientId"), required: false, type: .string), 
            AWSShapeMember(label: "cognitoIdentityPoolId", required: false, type: .string), 
            AWSShapeMember(label: "principal", required: false, type: .string), 
            AWSShapeMember(label: "authInfos", required: true, type: .list), 
            AWSShapeMember(label: "policyNamesToSkip", required: false, type: .list)
        ]
        /// When testing custom authorization, the policies specified here are treated as if they are attached to the principal being authorized.
        public let policyNamesToAdd: [String]?
        /// The MQTT client ID.
        public let clientId: String?
        /// The Cognito identity pool ID.
        public let cognitoIdentityPoolId: String?
        /// The principal.
        public let principal: String?
        /// A list of authorization info objects. Simulating authorization will create a response for each authInfo object in the list.
        public let authInfos: [AuthInfo]
        /// When testing custom authorization, the policies specified here are treated as if they are not attached to the principal being authorized.
        public let policyNamesToSkip: [String]?

        public init(policyNamesToAdd: [String]? = nil, clientId: String? = nil, cognitoIdentityPoolId: String? = nil, principal: String? = nil, authInfos: [AuthInfo], policyNamesToSkip: [String]? = nil) {
            self.policyNamesToAdd = policyNamesToAdd
            self.clientId = clientId
            self.cognitoIdentityPoolId = cognitoIdentityPoolId
            self.principal = principal
            self.authInfos = authInfos
            self.policyNamesToSkip = policyNamesToSkip
        }

        private enum CodingKeys: String, CodingKey {
            case policyNamesToAdd = "policyNamesToAdd"
            case clientId = "clientId"
            case cognitoIdentityPoolId = "cognitoIdentityPoolId"
            case principal = "principal"
            case authInfos = "authInfos"
            case policyNamesToSkip = "policyNamesToSkip"
        }
    }

    public struct GetLoggingOptionsRequest: AWSShape {

    }

    public struct DescribeAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerName", location: .uri(locationName: "authorizerName"), required: true, type: .string)
        ]
        /// The name of the authorizer to describe.
        public let authorizerName: String

        public init(authorizerName: String) {
            self.authorizerName = authorizerName
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerName = "authorizerName"
        }
    }

    public struct UpdateAccountAuditConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "auditCheckConfigurations", required: false, type: .map), 
            AWSShapeMember(label: "auditNotificationTargetConfigurations", required: false, type: .map)
        ]
        /// The ARN of the role that grants permission to AWS IoT to access information about your devices, policies, certificates and other items as necessary when performing an audit.
        public let roleArn: String?
        /// Specifies which audit checks are enabled and disabled for this account. Use DescribeAccountAuditConfiguration to see the list of all checks including those that are currently enabled. Note that some data collection may begin immediately when certain checks are enabled. When a check is disabled, any data collected so far in relation to the check is deleted. You cannot disable a check if it is used by any scheduled audit. You must first delete the check from the scheduled audit or delete the scheduled audit itself. On the first call to UpdateAccountAuditConfiguration this parameter is required and must specify at least one enabled check.
        public let auditCheckConfigurations: [String: AuditCheckConfiguration]?
        /// Information about the targets to which audit notifications are sent.
        public let auditNotificationTargetConfigurations: [AuditNotificationType: AuditNotificationTarget]?

        public init(roleArn: String? = nil, auditCheckConfigurations: [String: AuditCheckConfiguration]? = nil, auditNotificationTargetConfigurations: [AuditNotificationType: AuditNotificationTarget]? = nil) {
            self.roleArn = roleArn
            self.auditCheckConfigurations = auditCheckConfigurations
            self.auditNotificationTargetConfigurations = auditNotificationTargetConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case auditCheckConfigurations = "auditCheckConfigurations"
            case auditNotificationTargetConfigurations = "auditNotificationTargetConfigurations"
        }
    }

    public struct SearchIndexRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "queryString", required: true, type: .string), 
            AWSShapeMember(label: "queryVersion", required: false, type: .string), 
            AWSShapeMember(label: "indexName", required: false, type: .string)
        ]
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The search query string.
        public let queryString: String
        /// The query version.
        public let queryVersion: String?
        /// The search index name.
        public let indexName: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, queryString: String, queryVersion: String? = nil, indexName: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.queryString = queryString
            self.queryVersion = queryVersion
            self.indexName = indexName
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case queryString = "queryString"
            case queryVersion = "queryVersion"
            case indexName = "indexName"
        }
    }

    public struct ListOutgoingCertificatesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "outgoingCertificates", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The certificates that are being transferred but not yet accepted.
        public let outgoingCertificates: [OutgoingCertificate]?
        /// The marker for the next set of results.
        public let nextMarker: String?

        public init(outgoingCertificates: [OutgoingCertificate]? = nil, nextMarker: String? = nil) {
            self.outgoingCertificates = outgoingCertificates
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case outgoingCertificates = "outgoingCertificates"
            case nextMarker = "nextMarker"
        }
    }

    public struct Allowed: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policies", required: false, type: .list)
        ]
        /// A list of policies that allowed the authentication.
        public let policies: [Policy]?

        public init(policies: [Policy]? = nil) {
            self.policies = policies
        }

        private enum CodingKeys: String, CodingKey {
            case policies = "policies"
        }
    }

    public struct AcceptCertificateTransferRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "certificateId"), required: true, type: .string), 
            AWSShapeMember(label: "setAsActive", location: .querystring(locationName: "setAsActive"), required: false, type: .boolean)
        ]
        /// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
        public let certificateId: String
        /// Specifies whether the certificate is active.
        public let setAsActive: Bool?

        public init(certificateId: String, setAsActive: Bool? = nil) {
            self.certificateId = certificateId
            self.setAsActive = setAsActive
        }

        private enum CodingKeys: String, CodingKey {
            case certificateId = "certificateId"
            case setAsActive = "setAsActive"
        }
    }

    public struct UpdateSecurityProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "behaviors", required: false, type: .list), 
            AWSShapeMember(label: "alertTargets", required: false, type: .map), 
            AWSShapeMember(label: "securityProfileDescription", required: false, type: .string), 
            AWSShapeMember(label: "expectedVersion", location: .querystring(locationName: "expectedVersion"), required: false, type: .long), 
            AWSShapeMember(label: "securityProfileName", location: .uri(locationName: "securityProfileName"), required: true, type: .string)
        ]
        /// Specifies the behaviors that, when violated by a device (thing), cause an alert.
        public let behaviors: [Behavior]?
        /// Where the alerts are sent. (Alerts are always sent to the console.)
        public let alertTargets: [AlertTargetType: AlertTarget]?
        /// A description of the security profile.
        public let securityProfileDescription: String?
        /// The expected version of the security profile. A new version is generated whenever the security profile is updated. If you specify a value that is different than the actual version, a VersionConflictException is thrown.
        public let expectedVersion: Int64?
        /// The name of the security profile you want to update.
        public let securityProfileName: String

        public init(behaviors: [Behavior]? = nil, alertTargets: [AlertTargetType: AlertTarget]? = nil, securityProfileDescription: String? = nil, expectedVersion: Int64? = nil, securityProfileName: String) {
            self.behaviors = behaviors
            self.alertTargets = alertTargets
            self.securityProfileDescription = securityProfileDescription
            self.expectedVersion = expectedVersion
            self.securityProfileName = securityProfileName
        }

        private enum CodingKeys: String, CodingKey {
            case behaviors = "behaviors"
            case alertTargets = "alertTargets"
            case securityProfileDescription = "securityProfileDescription"
            case expectedVersion = "expectedVersion"
            case securityProfileName = "securityProfileName"
        }
    }

    public struct ListActiveViolationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "securityProfileName", location: .querystring(locationName: "securityProfileName"), required: false, type: .string), 
            AWSShapeMember(label: "thingName", location: .querystring(locationName: "thingName"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The name of the Device Defender security profile for which violations are listed.
        public let securityProfileName: String?
        /// The name of the thing whose active violations are listed.
        public let thingName: String?
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, securityProfileName: String? = nil, thingName: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.securityProfileName = securityProfileName
            self.thingName = thingName
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case securityProfileName = "securityProfileName"
            case thingName = "thingName"
            case maxResults = "maxResults"
        }
    }

    public struct ListThingTypesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "thingTypes", required: false, type: .list)
        ]
        /// The token for the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The thing types.
        public let thingTypes: [ThingTypeDefinition]?

        public init(nextToken: String? = nil, thingTypes: [ThingTypeDefinition]? = nil) {
            self.nextToken = nextToken
            self.thingTypes = thingTypes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case thingTypes = "thingTypes"
        }
    }

    public struct AttachThingPrincipalRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string), 
            AWSShapeMember(label: "principal", location: .header(locationName: "x-amzn-principal"), required: true, type: .string)
        ]
        /// The name of the thing.
        public let thingName: String
        /// The principal, such as a certificate or other credential.
        public let principal: String

        public init(thingName: String, principal: String) {
            self.thingName = thingName
            self.principal = principal
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
            case principal = "x-amzn-principal"
        }
    }

    public struct DetachSecurityProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileTargetArn", location: .querystring(locationName: "securityProfileTargetArn"), required: true, type: .string), 
            AWSShapeMember(label: "securityProfileName", location: .uri(locationName: "securityProfileName"), required: true, type: .string)
        ]
        /// The ARN of the thing group from which the security profile is detached.
        public let securityProfileTargetArn: String
        /// The security profile that is detached.
        public let securityProfileName: String

        public init(securityProfileTargetArn: String, securityProfileName: String) {
            self.securityProfileTargetArn = securityProfileTargetArn
            self.securityProfileName = securityProfileName
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileTargetArn = "securityProfileTargetArn"
            case securityProfileName = "securityProfileName"
        }
    }

    public struct NonCompliantResource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "additionalInfo", required: false, type: .map), 
            AWSShapeMember(label: "resourceIdentifier", required: false, type: .structure)
        ]
        /// The type of the non-compliant resource.
        public let resourceType: ResourceType?
        /// Additional information about the non-compliant resource.
        public let additionalInfo: [String: String]?
        /// Information identifying the non-compliant resource.
        public let resourceIdentifier: ResourceIdentifier?

        public init(resourceType: ResourceType? = nil, additionalInfo: [String: String]? = nil, resourceIdentifier: ResourceIdentifier? = nil) {
            self.resourceType = resourceType
            self.additionalInfo = additionalInfo
            self.resourceIdentifier = resourceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case additionalInfo = "additionalInfo"
            case resourceIdentifier = "resourceIdentifier"
        }
    }

    public struct ListOutgoingCertificatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer), 
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean)
        ]
        /// The result page size.
        public let pageSize: Int32?
        /// The marker for the next set of results.
        public let marker: String?
        /// Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.
        public let ascendingOrder: Bool?

        public init(pageSize: Int32? = nil, marker: String? = nil, ascendingOrder: Bool? = nil) {
            self.pageSize = pageSize
            self.marker = marker
            self.ascendingOrder = ascendingOrder
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "pageSize"
            case marker = "marker"
            case ascendingOrder = "isAscendingOrder"
        }
    }

    public struct ImplicitDeny: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policies", required: false, type: .list)
        ]
        /// Policies that don't contain a matching allow or deny statement for the specified action on the specified resource. 
        public let policies: [Policy]?

        public init(policies: [Policy]? = nil) {
            self.policies = policies
        }

        private enum CodingKeys: String, CodingKey {
            case policies = "policies"
        }
    }

    public struct UpdateAccountAuditConfigurationResponse: AWSShape {

    }

    public enum AuditFindingSeverity: String, CustomStringConvertible, Codable {
        case critical = "CRITICAL"
        case high = "HIGH"
        case medium = "MEDIUM"
        case low = "LOW"
        public var description: String { return self.rawValue }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case deviceCertificate = "DEVICE_CERTIFICATE"
        case caCertificate = "CA_CERTIFICATE"
        case iotPolicy = "IOT_POLICY"
        case cognitoIdentityPool = "COGNITO_IDENTITY_POOL"
        case clientId = "CLIENT_ID"
        case accountSettings = "ACCOUNT_SETTINGS"
        public var description: String { return self.rawValue }
    }

    public struct DescribeAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerDescription", required: false, type: .structure)
        ]
        /// The authorizer description.
        public let authorizerDescription: AuthorizerDescription?

        public init(authorizerDescription: AuthorizerDescription? = nil) {
            self.authorizerDescription = authorizerDescription
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerDescription = "authorizerDescription"
        }
    }

    public struct DescribeRoleAliasResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleAliasDescription", required: false, type: .structure)
        ]
        /// The role alias description.
        public let roleAliasDescription: RoleAliasDescription?

        public init(roleAliasDescription: RoleAliasDescription? = nil) {
            self.roleAliasDescription = roleAliasDescription
        }

        private enum CodingKeys: String, CodingKey {
            case roleAliasDescription = "roleAliasDescription"
        }
    }

    public struct ListAttachedPoliciesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "target", location: .uri(locationName: "target"), required: true, type: .string), 
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer), 
            AWSShapeMember(label: "recursive", location: .querystring(locationName: "recursive"), required: false, type: .boolean)
        ]
        /// The group for which the policies will be listed.
        public let target: String
        /// The token to retrieve the next set of results.
        public let marker: String?
        /// The maximum number of results to be returned per request.
        public let pageSize: Int32?
        /// When true, recursively list attached policies.
        public let recursive: Bool?

        public init(target: String, marker: String? = nil, pageSize: Int32? = nil, recursive: Bool? = nil) {
            self.target = target
            self.marker = marker
            self.pageSize = pageSize
            self.recursive = recursive
        }

        private enum CodingKeys: String, CodingKey {
            case target = "target"
            case marker = "marker"
            case pageSize = "pageSize"
            case recursive = "recursive"
        }
    }

    public struct StopThingRegistrationTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskId", location: .uri(locationName: "taskId"), required: true, type: .string)
        ]
        /// The bulk thing provisioning task ID.
        public let taskId: String

        public init(taskId: String) {
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case taskId = "taskId"
        }
    }

    public struct Configuration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// True to enable the configuration.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct IotEventsAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "messageId", required: false, type: .string), 
            AWSShapeMember(label: "inputName", required: true, type: .string)
        ]
        /// The ARN of the role that grants AWS IoT permission to send an input to an AWS IoT Events detector. ("Action":"iotevents:BatchPutMessage").
        public let roleArn: String
        /// [Optional] Use this to ensure that only one input (message) with a given messageId will be processed by an AWS IoT Events detector.
        public let messageId: String?
        /// The name of the AWS IoT Events input.
        public let inputName: String

        public init(roleArn: String, messageId: String? = nil, inputName: String) {
            self.roleArn = roleArn
            self.messageId = messageId
            self.inputName = inputName
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case messageId = "messageId"
            case inputName = "inputName"
        }
    }

    public struct GetJobDocumentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "document", required: false, type: .string)
        ]
        /// The job document content.
        public let document: String?

        public init(document: String? = nil) {
            self.document = document
        }

        private enum CodingKeys: String, CodingKey {
            case document = "document"
        }
    }

    public struct RemoveThingFromBillingGroupResponse: AWSShape {

    }

    public struct JobExecution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "queuedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "versionNumber", required: false, type: .long), 
            AWSShapeMember(label: "approximateSecondsBeforeTimedOut", required: false, type: .long), 
            AWSShapeMember(label: "jobId", required: false, type: .string), 
            AWSShapeMember(label: "startedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "forceCanceled", required: false, type: .boolean), 
            AWSShapeMember(label: "statusDetails", required: false, type: .structure), 
            AWSShapeMember(label: "lastUpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "executionNumber", required: false, type: .long), 
            AWSShapeMember(label: "thingArn", required: false, type: .string)
        ]
        /// The time, in milliseconds since the epoch, when the job execution was queued.
        public let queuedAt: TimeStamp?
        /// The version of the job execution. Job execution versions are incremented each time they are updated by a device.
        public let versionNumber: Int64?
        /// The estimated number of seconds that remain before the job execution status will be changed to TIMED_OUT. The timeout interval can be anywhere between 1 minute and 7 days (1 to 10080 minutes). The actual job execution timeout can occur up to 60 seconds later than the estimated duration. This value will not be included if the job execution has reached a terminal status.
        public let approximateSecondsBeforeTimedOut: Int64?
        /// The unique identifier you assigned to the job when it was created.
        public let jobId: String?
        /// The time, in milliseconds since the epoch, when the job execution started.
        public let startedAt: TimeStamp?
        /// Will be true if the job execution was canceled with the optional force parameter set to true.
        public let forceCanceled: Bool?
        /// A collection of name/value pairs that describe the status of the job execution.
        public let statusDetails: JobExecutionStatusDetails?
        /// The time, in milliseconds since the epoch, when the job execution was last updated.
        public let lastUpdatedAt: TimeStamp?
        /// The status of the job execution (IN_PROGRESS, QUEUED, FAILED, SUCCEEDED, TIMED_OUT, CANCELED, or REJECTED).
        public let status: JobExecutionStatus?
        /// A string (consisting of the digits "0" through "9") which identifies this particular job execution on this particular device. It can be used in commands which return or update job execution information. 
        public let executionNumber: Int64?
        /// The ARN of the thing on which the job execution is running.
        public let thingArn: String?

        public init(queuedAt: TimeStamp? = nil, versionNumber: Int64? = nil, approximateSecondsBeforeTimedOut: Int64? = nil, jobId: String? = nil, startedAt: TimeStamp? = nil, forceCanceled: Bool? = nil, statusDetails: JobExecutionStatusDetails? = nil, lastUpdatedAt: TimeStamp? = nil, status: JobExecutionStatus? = nil, executionNumber: Int64? = nil, thingArn: String? = nil) {
            self.queuedAt = queuedAt
            self.versionNumber = versionNumber
            self.approximateSecondsBeforeTimedOut = approximateSecondsBeforeTimedOut
            self.jobId = jobId
            self.startedAt = startedAt
            self.forceCanceled = forceCanceled
            self.statusDetails = statusDetails
            self.lastUpdatedAt = lastUpdatedAt
            self.status = status
            self.executionNumber = executionNumber
            self.thingArn = thingArn
        }

        private enum CodingKeys: String, CodingKey {
            case queuedAt = "queuedAt"
            case versionNumber = "versionNumber"
            case approximateSecondsBeforeTimedOut = "approximateSecondsBeforeTimedOut"
            case jobId = "jobId"
            case startedAt = "startedAt"
            case forceCanceled = "forceCanceled"
            case statusDetails = "statusDetails"
            case lastUpdatedAt = "lastUpdatedAt"
            case status = "status"
            case executionNumber = "executionNumber"
            case thingArn = "thingArn"
        }
    }

    public struct TestAuthorizationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authResults", required: false, type: .list)
        ]
        /// The authentication results.
        public let authResults: [AuthResult]?

        public init(authResults: [AuthResult]? = nil) {
            self.authResults = authResults
        }

        private enum CodingKeys: String, CodingKey {
            case authResults = "authResults"
        }
    }

    public struct ListAuditTasksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskType", location: .querystring(locationName: "taskType"), required: false, type: .enum), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "endTime", location: .querystring(locationName: "endTime"), required: true, type: .timestamp), 
            AWSShapeMember(label: "taskStatus", location: .querystring(locationName: "taskStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "startTime", location: .querystring(locationName: "startTime"), required: true, type: .timestamp), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// A filter to limit the output to the specified type of audit: can be one of "ON_DEMAND_AUDIT_TASK" or "SCHEDULED__AUDIT_TASK".
        public let taskType: AuditTaskType?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The end of the time period.
        public let endTime: TimeStamp
        /// A filter to limit the output to audits with the specified completion status: can be one of "IN_PROGRESS", "COMPLETED", "FAILED" or "CANCELED".
        public let taskStatus: AuditTaskStatus?
        /// The beginning of the time period. Note that audit information is retained for a limited time (180 days). Requesting a start time prior to what is retained results in an "InvalidRequestException".
        public let startTime: TimeStamp
        /// The maximum number of results to return at one time. The default is 25.
        public let maxResults: Int32?

        public init(taskType: AuditTaskType? = nil, nextToken: String? = nil, endTime: TimeStamp, taskStatus: AuditTaskStatus? = nil, startTime: TimeStamp, maxResults: Int32? = nil) {
            self.taskType = taskType
            self.nextToken = nextToken
            self.endTime = endTime
            self.taskStatus = taskStatus
            self.startTime = startTime
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case taskType = "taskType"
            case nextToken = "nextToken"
            case endTime = "endTime"
            case taskStatus = "taskStatus"
            case startTime = "startTime"
            case maxResults = "maxResults"
        }
    }

    public struct ExponentialRolloutRate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rateIncreaseCriteria", required: true, type: .structure), 
            AWSShapeMember(label: "baseRatePerMinute", required: true, type: .integer), 
            AWSShapeMember(label: "incrementFactor", required: true, type: .double)
        ]
        /// The criteria to initiate the increase in rate of rollout for a job. AWS IoT supports up to one digit after the decimal (for example, 1.5, but not 1.55).
        public let rateIncreaseCriteria: RateIncreaseCriteria
        /// The minimum number of things that will be notified of a pending job, per minute at the start of job rollout. This parameter allows you to define the initial rate of rollout.
        public let baseRatePerMinute: Int32
        /// The exponential factor to increase the rate of rollout for a job.
        public let incrementFactor: Double

        public init(rateIncreaseCriteria: RateIncreaseCriteria, baseRatePerMinute: Int32, incrementFactor: Double) {
            self.rateIncreaseCriteria = rateIncreaseCriteria
            self.baseRatePerMinute = baseRatePerMinute
            self.incrementFactor = incrementFactor
        }

        private enum CodingKeys: String, CodingKey {
            case rateIncreaseCriteria = "rateIncreaseCriteria"
            case baseRatePerMinute = "baseRatePerMinute"
            case incrementFactor = "incrementFactor"
        }
    }

    public struct JobExecutionStatusDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "detailsMap", required: false, type: .map)
        ]
        /// The job execution status.
        public let detailsMap: [String: String]?

        public init(detailsMap: [String: String]? = nil) {
            self.detailsMap = detailsMap
        }

        private enum CodingKeys: String, CodingKey {
            case detailsMap = "detailsMap"
        }
    }

    public struct ListOTAUpdatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "otaUpdateStatus", location: .querystring(locationName: "otaUpdateStatus"), required: false, type: .enum)
        ]
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// A token used to retrieve the next set of results.
        public let nextToken: String?
        /// The OTA update job status.
        public let otaUpdateStatus: OTAUpdateStatus?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, otaUpdateStatus: OTAUpdateStatus? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.otaUpdateStatus = otaUpdateStatus
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case otaUpdateStatus = "otaUpdateStatus"
        }
    }

    public struct UpdateCACertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "newAutoRegistrationStatus", location: .querystring(locationName: "newAutoRegistrationStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "newStatus", location: .querystring(locationName: "newStatus"), required: false, type: .enum), 
            AWSShapeMember(label: "removeAutoRegistration", required: false, type: .boolean), 
            AWSShapeMember(label: "certificateId", location: .uri(locationName: "caCertificateId"), required: true, type: .string), 
            AWSShapeMember(label: "registrationConfig", required: false, type: .structure)
        ]
        /// The new value for the auto registration status. Valid values are: "ENABLE" or "DISABLE".
        public let newAutoRegistrationStatus: AutoRegistrationStatus?
        /// The updated status of the CA certificate.  Note: The status value REGISTER_INACTIVE is deprecated and should not be used.
        public let newStatus: CACertificateStatus?
        /// If true, remove auto registration.
        public let removeAutoRegistration: Bool?
        /// The CA certificate identifier.
        public let certificateId: String
        /// Information about the registration configuration.
        public let registrationConfig: RegistrationConfig?

        public init(newAutoRegistrationStatus: AutoRegistrationStatus? = nil, newStatus: CACertificateStatus? = nil, removeAutoRegistration: Bool? = nil, certificateId: String, registrationConfig: RegistrationConfig? = nil) {
            self.newAutoRegistrationStatus = newAutoRegistrationStatus
            self.newStatus = newStatus
            self.removeAutoRegistration = removeAutoRegistration
            self.certificateId = certificateId
            self.registrationConfig = registrationConfig
        }

        private enum CodingKeys: String, CodingKey {
            case newAutoRegistrationStatus = "newAutoRegistrationStatus"
            case newStatus = "newStatus"
            case removeAutoRegistration = "removeAutoRegistration"
            case certificateId = "caCertificateId"
            case registrationConfig = "registrationConfig"
        }
    }

    public struct UpdateBillingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "version", required: false, type: .long)
        ]
        /// The latest version of the billing group.
        public let version: Int64?

        public init(version: Int64? = nil) {
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case version = "version"
        }
    }

    public struct CreateSecurityProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "behaviors", required: true, type: .list), 
            AWSShapeMember(label: "alertTargets", required: false, type: .map), 
            AWSShapeMember(label: "securityProfileDescription", required: false, type: .string), 
            AWSShapeMember(label: "securityProfileName", location: .uri(locationName: "securityProfileName"), required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]
        /// Specifies the behaviors that, when violated by a device (thing), cause an alert.
        public let behaviors: [Behavior]
        /// Specifies the destinations to which alerts are sent. (Alerts are always sent to the console.) Alerts are generated when a device (thing) violates a behavior.
        public let alertTargets: [AlertTargetType: AlertTarget]?
        /// A description of the security profile.
        public let securityProfileDescription: String?
        /// The name you are giving to the security profile.
        public let securityProfileName: String
        /// Metadata which can be used to manage the security profile.
        public let tags: [Tag]?

        public init(behaviors: [Behavior], alertTargets: [AlertTargetType: AlertTarget]? = nil, securityProfileDescription: String? = nil, securityProfileName: String, tags: [Tag]? = nil) {
            self.behaviors = behaviors
            self.alertTargets = alertTargets
            self.securityProfileDescription = securityProfileDescription
            self.securityProfileName = securityProfileName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case behaviors = "behaviors"
            case alertTargets = "alertTargets"
            case securityProfileDescription = "securityProfileDescription"
            case securityProfileName = "securityProfileName"
            case tags = "tags"
        }
    }

    public struct DeleteV2LoggingLevelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "targetType", location: .querystring(locationName: "targetType"), required: true, type: .enum), 
            AWSShapeMember(label: "targetName", location: .querystring(locationName: "targetName"), required: true, type: .string)
        ]
        /// The type of resource for which you are configuring logging. Must be THING_Group.
        public let targetType: LogTargetType
        /// The name of the resource for which you are configuring logging.
        public let targetName: String

        public init(targetType: LogTargetType, targetName: String) {
            self.targetType = targetType
            self.targetName = targetName
        }

        private enum CodingKeys: String, CodingKey {
            case targetType = "targetType"
            case targetName = "targetName"
        }
    }

    public struct SetV2LoggingLevelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "logTarget", required: true, type: .structure), 
            AWSShapeMember(label: "logLevel", required: true, type: .enum)
        ]
        /// The log target.
        public let logTarget: LogTarget
        /// The log level.
        public let logLevel: LogLevel

        public init(logTarget: LogTarget, logLevel: LogLevel) {
            self.logTarget = logTarget
            self.logLevel = logLevel
        }

        private enum CodingKeys: String, CodingKey {
            case logTarget = "logTarget"
            case logLevel = "logLevel"
        }
    }

    public struct CreateAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerArn", required: false, type: .string), 
            AWSShapeMember(label: "authorizerName", required: false, type: .string)
        ]
        /// The authorizer ARN.
        public let authorizerArn: String?
        /// The authorizer's name.
        public let authorizerName: String?

        public init(authorizerArn: String? = nil, authorizerName: String? = nil) {
            self.authorizerArn = authorizerArn
            self.authorizerName = authorizerName
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerArn = "authorizerArn"
            case authorizerName = "authorizerName"
        }
    }

    public struct CreateScheduledAuditRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dayOfMonth", required: false, type: .string), 
            AWSShapeMember(label: "scheduledAuditName", location: .uri(locationName: "scheduledAuditName"), required: true, type: .string), 
            AWSShapeMember(label: "frequency", required: true, type: .enum), 
            AWSShapeMember(label: "targetCheckNames", required: true, type: .list), 
            AWSShapeMember(label: "dayOfWeek", required: false, type: .enum)
        ]
        /// The day of the month on which the scheduled audit takes place. Can be "1" through "31" or "LAST". This field is required if the "frequency" parameter is set to "MONTHLY". If days 29-31 are specified, and the month does not have that many days, the audit takes place on the "LAST" day of the month.
        public let dayOfMonth: String?
        /// The name you want to give to the scheduled audit. (Max. 128 chars)
        public let scheduledAuditName: String
        /// How often the scheduled audit takes place. Can be one of "DAILY", "WEEKLY", "BIWEEKLY" or "MONTHLY". The actual start time of each audit is determined by the system.
        public let frequency: AuditFrequency
        /// Which checks are performed during the scheduled audit. Checks must be enabled for your account. (Use DescribeAccountAuditConfiguration to see the list of all checks including those that are enabled or UpdateAccountAuditConfiguration to select which checks are enabled.)
        public let targetCheckNames: [String]
        /// The day of the week on which the scheduled audit takes place. Can be one of "SUN", "MON", "TUE", "WED", "THU", "FRI" or "SAT". This field is required if the "frequency" parameter is set to "WEEKLY" or "BIWEEKLY".
        public let dayOfWeek: DayOfWeek?

        public init(dayOfMonth: String? = nil, scheduledAuditName: String, frequency: AuditFrequency, targetCheckNames: [String], dayOfWeek: DayOfWeek? = nil) {
            self.dayOfMonth = dayOfMonth
            self.scheduledAuditName = scheduledAuditName
            self.frequency = frequency
            self.targetCheckNames = targetCheckNames
            self.dayOfWeek = dayOfWeek
        }

        private enum CodingKeys: String, CodingKey {
            case dayOfMonth = "dayOfMonth"
            case scheduledAuditName = "scheduledAuditName"
            case frequency = "frequency"
            case targetCheckNames = "targetCheckNames"
            case dayOfWeek = "dayOfWeek"
        }
    }

    public struct DeleteBillingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "expectedVersion", location: .querystring(locationName: "expectedVersion"), required: false, type: .long), 
            AWSShapeMember(label: "billingGroupName", location: .uri(locationName: "billingGroupName"), required: true, type: .string)
        ]
        /// The expected version of the billing group. If the version of the billing group does not match the expected version specified in the request, the DeleteBillingGroup request is rejected with a VersionConflictException.
        public let expectedVersion: Int64?
        /// The name of the billing group.
        public let billingGroupName: String

        public init(expectedVersion: Int64? = nil, billingGroupName: String) {
            self.expectedVersion = expectedVersion
            self.billingGroupName = billingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case expectedVersion = "expectedVersion"
            case billingGroupName = "billingGroupName"
        }
    }

    public struct CreateCertificateFromCsrRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateSigningRequest", required: true, type: .string), 
            AWSShapeMember(label: "setAsActive", location: .querystring(locationName: "setAsActive"), required: false, type: .boolean)
        ]
        /// The certificate signing request (CSR).
        public let certificateSigningRequest: String
        /// Specifies whether the certificate is active.
        public let setAsActive: Bool?

        public init(certificateSigningRequest: String, setAsActive: Bool? = nil) {
            self.certificateSigningRequest = certificateSigningRequest
            self.setAsActive = setAsActive
        }

        private enum CodingKeys: String, CodingKey {
            case certificateSigningRequest = "certificateSigningRequest"
            case setAsActive = "setAsActive"
        }
    }

    public struct ListThingsInBillingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "things", required: false, type: .list)
        ]
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// A list of things in the billing group.
        public let things: [String]?

        public init(nextToken: String? = nil, things: [String]? = nil) {
            self.nextToken = nextToken
            self.things = things
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case things = "things"
        }
    }

    public struct JobExecutionSummaryForJob: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobExecutionSummary", required: false, type: .structure), 
            AWSShapeMember(label: "thingArn", required: false, type: .string)
        ]
        /// Contains a subset of information about a job execution.
        public let jobExecutionSummary: JobExecutionSummary?
        /// The ARN of the thing on which the job execution is running.
        public let thingArn: String?

        public init(jobExecutionSummary: JobExecutionSummary? = nil, thingArn: String? = nil) {
            self.jobExecutionSummary = jobExecutionSummary
            self.thingArn = thingArn
        }

        private enum CodingKeys: String, CodingKey {
            case jobExecutionSummary = "jobExecutionSummary"
            case thingArn = "thingArn"
        }
    }

    public struct DeleteScheduledAuditResponse: AWSShape {

    }

    public struct RemoveThingFromThingGroupResponse: AWSShape {

    }

    public struct ListPrincipalThingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "things", required: false, type: .list)
        ]
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The things.
        public let things: [String]?

        public init(nextToken: String? = nil, things: [String]? = nil) {
            self.nextToken = nextToken
            self.things = things
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case things = "things"
        }
    }

    public enum AuditTaskType: String, CustomStringConvertible, Codable {
        case onDemandAuditTask = "ON_DEMAND_AUDIT_TASK"
        case scheduledAuditTask = "SCHEDULED_AUDIT_TASK"
        public var description: String { return self.rawValue }
    }

    public struct DescribeThingRegistrationTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskId", location: .uri(locationName: "taskId"), required: true, type: .string)
        ]
        /// The task ID.
        public let taskId: String

        public init(taskId: String) {
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case taskId = "taskId"
        }
    }

    public struct ResourceIdentifier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deviceCertificateId", required: false, type: .string), 
            AWSShapeMember(label: "cognitoIdentityPoolId", required: false, type: .string), 
            AWSShapeMember(label: "policyVersionIdentifier", required: false, type: .structure), 
            AWSShapeMember(label: "account", required: false, type: .string), 
            AWSShapeMember(label: "caCertificateId", required: false, type: .string), 
            AWSShapeMember(label: "clientId", required: false, type: .string)
        ]
        /// The ID of the certificate attached to the resource.
        public let deviceCertificateId: String?
        /// The ID of the Cognito Identity Pool.
        public let cognitoIdentityPoolId: String?
        /// The version of the policy associated with the resource.
        public let policyVersionIdentifier: PolicyVersionIdentifier?
        /// The account with which the resource is associated.
        public let account: String?
        /// The ID of the CA certificate used to authorize the certificate.
        public let caCertificateId: String?
        /// The client ID.
        public let clientId: String?

        public init(deviceCertificateId: String? = nil, cognitoIdentityPoolId: String? = nil, policyVersionIdentifier: PolicyVersionIdentifier? = nil, account: String? = nil, caCertificateId: String? = nil, clientId: String? = nil) {
            self.deviceCertificateId = deviceCertificateId
            self.cognitoIdentityPoolId = cognitoIdentityPoolId
            self.policyVersionIdentifier = policyVersionIdentifier
            self.account = account
            self.caCertificateId = caCertificateId
            self.clientId = clientId
        }

        private enum CodingKeys: String, CodingKey {
            case deviceCertificateId = "deviceCertificateId"
            case cognitoIdentityPoolId = "cognitoIdentityPoolId"
            case policyVersionIdentifier = "policyVersionIdentifier"
            case account = "account"
            case caCertificateId = "caCertificateId"
            case clientId = "clientId"
        }
    }

    public struct AuditNotificationTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "targetArn", required: false, type: .string), 
            AWSShapeMember(label: "enabled", required: false, type: .boolean)
        ]
        /// The ARN of the role that grants permission to send notifications to the target.
        public let roleArn: String?
        /// The ARN of the target (SNS topic) to which audit notifications are sent.
        public let targetArn: String?
        /// True if notifications to the target are enabled.
        public let enabled: Bool?

        public init(roleArn: String? = nil, targetArn: String? = nil, enabled: Bool? = nil) {
            self.roleArn = roleArn
            self.targetArn = targetArn
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case targetArn = "targetArn"
            case enabled = "enabled"
        }
    }

    public struct UpdateIndexingConfigurationResponse: AWSShape {

    }

    public struct CreateOTAUpdateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "awsIotJobArn", required: false, type: .string), 
            AWSShapeMember(label: "otaUpdateArn", required: false, type: .string), 
            AWSShapeMember(label: "otaUpdateStatus", required: false, type: .enum), 
            AWSShapeMember(label: "awsIotJobId", required: false, type: .string), 
            AWSShapeMember(label: "otaUpdateId", required: false, type: .string)
        ]
        /// The AWS IoT job ARN associated with the OTA update.
        public let awsIotJobArn: String?
        /// The OTA update ARN.
        public let otaUpdateArn: String?
        /// The OTA update status.
        public let otaUpdateStatus: OTAUpdateStatus?
        /// The AWS IoT job ID associated with the OTA update.
        public let awsIotJobId: String?
        /// The OTA update ID.
        public let otaUpdateId: String?

        public init(awsIotJobArn: String? = nil, otaUpdateArn: String? = nil, otaUpdateStatus: OTAUpdateStatus? = nil, awsIotJobId: String? = nil, otaUpdateId: String? = nil) {
            self.awsIotJobArn = awsIotJobArn
            self.otaUpdateArn = otaUpdateArn
            self.otaUpdateStatus = otaUpdateStatus
            self.awsIotJobId = awsIotJobId
            self.otaUpdateId = otaUpdateId
        }

        private enum CodingKeys: String, CodingKey {
            case awsIotJobArn = "awsIotJobArn"
            case otaUpdateArn = "otaUpdateArn"
            case otaUpdateStatus = "otaUpdateStatus"
            case awsIotJobId = "awsIotJobId"
            case otaUpdateId = "otaUpdateId"
        }
    }

    public struct DescribeThingTypeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingTypeName", location: .uri(locationName: "thingTypeName"), required: true, type: .string)
        ]
        /// The name of the thing type.
        public let thingTypeName: String

        public init(thingTypeName: String) {
            self.thingTypeName = thingTypeName
        }

        private enum CodingKeys: String, CodingKey {
            case thingTypeName = "thingTypeName"
        }
    }

    public struct Certificate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateArn", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "certificateId", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum)
        ]
        /// The ARN of the certificate.
        public let certificateArn: String?
        /// The date and time the certificate was created.
        public let creationDate: TimeStamp?
        /// The ID of the certificate. (The last part of the certificate ARN contains the certificate ID.)
        public let certificateId: String?
        /// The status of the certificate. The status value REGISTER_INACTIVE is deprecated and should not be used.
        public let status: CertificateStatus?

        public init(certificateArn: String? = nil, creationDate: TimeStamp? = nil, certificateId: String? = nil, status: CertificateStatus? = nil) {
            self.certificateArn = certificateArn
            self.creationDate = creationDate
            self.certificateId = certificateId
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case certificateArn = "certificateArn"
            case creationDate = "creationDate"
            case certificateId = "certificateId"
            case status = "status"
        }
    }

    public enum TargetSelection: String, CustomStringConvertible, Codable {
        case continuous = "CONTINUOUS"
        case snapshot = "SNAPSHOT"
        public var description: String { return self.rawValue }
    }

    public enum DynamoKeyType: String, CustomStringConvertible, Codable {
        case string = "STRING"
        case number = "NUMBER"
        public var description: String { return self.rawValue }
    }

    public struct CancelJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobArn", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "jobId", required: false, type: .string)
        ]
        /// The job ARN.
        public let jobArn: String?
        /// A short text description of the job.
        public let description: String?
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String?

        public init(jobArn: String? = nil, description: String? = nil, jobId: String? = nil) {
            self.jobArn = jobArn
            self.description = description
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobArn = "jobArn"
            case description = "description"
            case jobId = "jobId"
        }
    }

    public struct GetPolicyVersionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", required: false, type: .string), 
            AWSShapeMember(label: "isDefaultVersion", required: false, type: .boolean), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "policyDocument", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "generationId", required: false, type: .string), 
            AWSShapeMember(label: "policyVersionId", required: false, type: .string), 
            AWSShapeMember(label: "policyArn", required: false, type: .string)
        ]
        /// The policy name.
        public let policyName: String?
        /// Specifies whether the policy version is the default.
        public let isDefaultVersion: Bool?
        /// The date the policy version was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The JSON document that describes the policy.
        public let policyDocument: String?
        /// The date the policy version was created.
        public let creationDate: TimeStamp?
        /// The generation ID of the policy version.
        public let generationId: String?
        /// The policy version ID.
        public let policyVersionId: String?
        /// The policy ARN.
        public let policyArn: String?

        public init(policyName: String? = nil, isDefaultVersion: Bool? = nil, lastModifiedDate: TimeStamp? = nil, policyDocument: String? = nil, creationDate: TimeStamp? = nil, generationId: String? = nil, policyVersionId: String? = nil, policyArn: String? = nil) {
            self.policyName = policyName
            self.isDefaultVersion = isDefaultVersion
            self.lastModifiedDate = lastModifiedDate
            self.policyDocument = policyDocument
            self.creationDate = creationDate
            self.generationId = generationId
            self.policyVersionId = policyVersionId
            self.policyArn = policyArn
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
            case isDefaultVersion = "isDefaultVersion"
            case lastModifiedDate = "lastModifiedDate"
            case policyDocument = "policyDocument"
            case creationDate = "creationDate"
            case generationId = "generationId"
            case policyVersionId = "policyVersionId"
            case policyArn = "policyArn"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The tag's key.
        public let key: String?
        /// The tag's value.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct DeleteThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "expectedVersion", location: .querystring(locationName: "expectedVersion"), required: false, type: .long), 
            AWSShapeMember(label: "thingGroupName", location: .uri(locationName: "thingGroupName"), required: true, type: .string)
        ]
        /// The expected version of the thing group to delete.
        public let expectedVersion: Int64?
        /// The name of the thing group to delete.
        public let thingGroupName: String

        public init(expectedVersion: Int64? = nil, thingGroupName: String) {
            self.expectedVersion = expectedVersion
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case expectedVersion = "expectedVersion"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct ListTopicRulesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "rules", required: false, type: .list)
        ]
        /// A token used to retrieve the next value.
        public let nextToken: String?
        /// The rules.
        public let rules: [TopicRuleListItem]?

        public init(nextToken: String? = nil, rules: [TopicRuleListItem]? = nil) {
            self.nextToken = nextToken
            self.rules = rules
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case rules = "rules"
        }
    }

    public struct DescribeAuditTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskId", location: .uri(locationName: "taskId"), required: true, type: .string)
        ]
        /// The ID of the audit whose information you want to get.
        public let taskId: String

        public init(taskId: String) {
            self.taskId = taskId
        }

        private enum CodingKeys: String, CodingKey {
            case taskId = "taskId"
        }
    }

    public struct UpdateScheduledAuditRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dayOfMonth", required: false, type: .string), 
            AWSShapeMember(label: "scheduledAuditName", location: .uri(locationName: "scheduledAuditName"), required: true, type: .string), 
            AWSShapeMember(label: "frequency", required: false, type: .enum), 
            AWSShapeMember(label: "targetCheckNames", required: false, type: .list), 
            AWSShapeMember(label: "dayOfWeek", required: false, type: .enum)
        ]
        /// The day of the month on which the scheduled audit takes place. Can be "1" through "31" or "LAST". This field is required if the "frequency" parameter is set to "MONTHLY". If days 29-31 are specified, and the month does not have that many days, the audit takes place on the "LAST" day of the month.
        public let dayOfMonth: String?
        /// The name of the scheduled audit. (Max. 128 chars)
        public let scheduledAuditName: String
        /// How often the scheduled audit takes place. Can be one of "DAILY", "WEEKLY", "BIWEEKLY" or "MONTHLY". The actual start time of each audit is determined by the system.
        public let frequency: AuditFrequency?
        /// Which checks are performed during the scheduled audit. Checks must be enabled for your account. (Use DescribeAccountAuditConfiguration to see the list of all checks including those that are enabled or UpdateAccountAuditConfiguration to select which checks are enabled.)
        public let targetCheckNames: [String]?
        /// The day of the week on which the scheduled audit takes place. Can be one of "SUN", "MON", "TUE", "WED", "THU", "FRI" or "SAT". This field is required if the "frequency" parameter is set to "WEEKLY" or "BIWEEKLY".
        public let dayOfWeek: DayOfWeek?

        public init(dayOfMonth: String? = nil, scheduledAuditName: String, frequency: AuditFrequency? = nil, targetCheckNames: [String]? = nil, dayOfWeek: DayOfWeek? = nil) {
            self.dayOfMonth = dayOfMonth
            self.scheduledAuditName = scheduledAuditName
            self.frequency = frequency
            self.targetCheckNames = targetCheckNames
            self.dayOfWeek = dayOfWeek
        }

        private enum CodingKeys: String, CodingKey {
            case dayOfMonth = "dayOfMonth"
            case scheduledAuditName = "scheduledAuditName"
            case frequency = "frequency"
            case targetCheckNames = "targetCheckNames"
            case dayOfWeek = "dayOfWeek"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]
        /// The token used to get the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The list of tags assigned to the resource.
        public let tags: [Tag]?

        public init(nextToken: String? = nil, tags: [Tag]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case tags = "tags"
        }
    }

    public struct DeleteThingResponse: AWSShape {

    }

    public struct DescribeEventConfigurationsRequest: AWSShape {

    }

    public struct DescribeCertificateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateDescription", required: false, type: .structure)
        ]
        /// The description of the certificate.
        public let certificateDescription: CertificateDescription?

        public init(certificateDescription: CertificateDescription? = nil) {
            self.certificateDescription = certificateDescription
        }

        private enum CodingKeys: String, CodingKey {
            case certificateDescription = "certificateDescription"
        }
    }

    public struct AuditTaskMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskType", required: false, type: .enum), 
            AWSShapeMember(label: "taskId", required: false, type: .string), 
            AWSShapeMember(label: "taskStatus", required: false, type: .enum)
        ]
        /// The type of this audit: one of "ON_DEMAND_AUDIT_TASK" or "SCHEDULED_AUDIT_TASK".
        public let taskType: AuditTaskType?
        /// The ID of this audit.
        public let taskId: String?
        /// The status of this audit: one of "IN_PROGRESS", "COMPLETED", "FAILED" or "CANCELED".
        public let taskStatus: AuditTaskStatus?

        public init(taskType: AuditTaskType? = nil, taskId: String? = nil, taskStatus: AuditTaskStatus? = nil) {
            self.taskType = taskType
            self.taskId = taskId
            self.taskStatus = taskStatus
        }

        private enum CodingKeys: String, CodingKey {
            case taskType = "taskType"
            case taskId = "taskId"
            case taskStatus = "taskStatus"
        }
    }

    public struct UpdateRoleAliasResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleAliasArn", required: false, type: .string), 
            AWSShapeMember(label: "roleAlias", required: false, type: .string)
        ]
        /// The role alias ARN.
        public let roleAliasArn: String?
        /// The role alias.
        public let roleAlias: String?

        public init(roleAliasArn: String? = nil, roleAlias: String? = nil) {
            self.roleAliasArn = roleAliasArn
            self.roleAlias = roleAlias
        }

        private enum CodingKeys: String, CodingKey {
            case roleAliasArn = "roleAliasArn"
            case roleAlias = "roleAlias"
        }
    }

    public struct CancelJobExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "force", location: .querystring(locationName: "force"), required: false, type: .boolean), 
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "expectedVersion", required: false, type: .long), 
            AWSShapeMember(label: "statusDetails", required: false, type: .map), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// (Optional) If true the job execution will be canceled if it has status IN_PROGRESS or QUEUED, otherwise the job execution will be canceled only if it has status QUEUED. If you attempt to cancel a job execution that is IN_PROGRESS, and you do not set force to true, then an InvalidStateTransitionException will be thrown. The default is false. Canceling a job execution which is "IN_PROGRESS", will cause the device to be unable to update the job execution status. Use caution and ensure that the device is able to recover to a valid state.
        public let force: Bool?
        /// The ID of the job to be canceled.
        public let jobId: String
        /// (Optional) The expected current version of the job execution. Each time you update the job execution, its version is incremented. If the version of the job execution stored in Jobs does not match, the update is rejected with a VersionMismatch error, and an ErrorResponse that contains the current job execution status data is returned. (This makes it unnecessary to perform a separate DescribeJobExecution request in order to obtain the job execution status data.)
        public let expectedVersion: Int64?
        /// A collection of name/value pairs that describe the status of the job execution. If not specified, the statusDetails are unchanged. You can specify at most 10 name/value pairs.
        public let statusDetails: [String: String]?
        /// The name of the thing whose execution of the job will be canceled.
        public let thingName: String

        public init(force: Bool? = nil, jobId: String, expectedVersion: Int64? = nil, statusDetails: [String: String]? = nil, thingName: String) {
            self.force = force
            self.jobId = jobId
            self.expectedVersion = expectedVersion
            self.statusDetails = statusDetails
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case force = "force"
            case jobId = "jobId"
            case expectedVersion = "expectedVersion"
            case statusDetails = "statusDetails"
            case thingName = "thingName"
        }
    }

    public struct BillingGroupProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "billingGroupDescription", required: false, type: .string)
        ]
        /// The description of the billing group.
        public let billingGroupDescription: String?

        public init(billingGroupDescription: String? = nil) {
            self.billingGroupDescription = billingGroupDescription
        }

        private enum CodingKeys: String, CodingKey {
            case billingGroupDescription = "billingGroupDescription"
        }
    }

    public struct UpdateDynamicThingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "version", required: false, type: .long)
        ]
        /// The dynamic thing group version.
        public let version: Int64?

        public init(version: Int64? = nil) {
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case version = "version"
        }
    }

    public struct UpdateEventConfigurationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "eventConfigurations", required: false, type: .map)
        ]
        /// The new event configuration values.
        public let eventConfigurations: [EventType: Configuration]?

        public init(eventConfigurations: [EventType: Configuration]? = nil) {
            self.eventConfigurations = eventConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case eventConfigurations = "eventConfigurations"
        }
    }

    public struct CreateJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "abortConfig", required: false, type: .structure), 
            AWSShapeMember(label: "document", required: false, type: .string), 
            AWSShapeMember(label: "timeoutConfig", required: false, type: .structure), 
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "presignedUrlConfig", required: false, type: .structure), 
            AWSShapeMember(label: "targetSelection", required: false, type: .enum), 
            AWSShapeMember(label: "jobExecutionsRolloutConfig", required: false, type: .structure), 
            AWSShapeMember(label: "documentSource", required: false, type: .string), 
            AWSShapeMember(label: "targets", required: true, type: .list)
        ]
        /// Allows you to create criteria to abort a job.
        public let abortConfig: AbortConfig?
        /// The job document.  If the job document resides in an S3 bucket, you must use a placeholder link when specifying the document. The placeholder link is of the following form:  ${aws:iot:s3-presigned-url:https://s3.amazonaws.com/bucket/key}  where bucket is your bucket name and key is the object in the bucket to which you are linking. 
        public let document: String?
        /// Specifies the amount of time each device has to finish its execution of the job. The timer is started when the job execution status is set to IN_PROGRESS. If the job execution status is not set to another terminal state before the time expires, it will be automatically set to TIMED_OUT.
        public let timeoutConfig: TimeoutConfig?
        /// Metadata which can be used to manage the job.
        public let tags: [Tag]?
        /// A job identifier which must be unique for your AWS account. We recommend using a UUID. Alpha-numeric characters, "-" and "_" are valid for use here.
        public let jobId: String
        /// A short text description of the job.
        public let description: String?
        /// Configuration information for pre-signed S3 URLs.
        public let presignedUrlConfig: PresignedUrlConfig?
        /// Specifies whether the job will continue to run (CONTINUOUS), or will be complete after all those things specified as targets have completed the job (SNAPSHOT). If continuous, the job may also be run on a thing when a change is detected in a target. For example, a job will run on a thing when the thing is added to a target group, even after the job was completed by all things originally in the group.
        public let targetSelection: TargetSelection?
        /// Allows you to create a staged rollout of the job.
        public let jobExecutionsRolloutConfig: JobExecutionsRolloutConfig?
        /// An S3 link to the job document.
        public let documentSource: String?
        /// A list of things and thing groups to which the job should be sent.
        public let targets: [String]

        public init(abortConfig: AbortConfig? = nil, document: String? = nil, timeoutConfig: TimeoutConfig? = nil, tags: [Tag]? = nil, jobId: String, description: String? = nil, presignedUrlConfig: PresignedUrlConfig? = nil, targetSelection: TargetSelection? = nil, jobExecutionsRolloutConfig: JobExecutionsRolloutConfig? = nil, documentSource: String? = nil, targets: [String]) {
            self.abortConfig = abortConfig
            self.document = document
            self.timeoutConfig = timeoutConfig
            self.tags = tags
            self.jobId = jobId
            self.description = description
            self.presignedUrlConfig = presignedUrlConfig
            self.targetSelection = targetSelection
            self.jobExecutionsRolloutConfig = jobExecutionsRolloutConfig
            self.documentSource = documentSource
            self.targets = targets
        }

        private enum CodingKeys: String, CodingKey {
            case abortConfig = "abortConfig"
            case document = "document"
            case timeoutConfig = "timeoutConfig"
            case tags = "tags"
            case jobId = "jobId"
            case description = "description"
            case presignedUrlConfig = "presignedUrlConfig"
            case targetSelection = "targetSelection"
            case jobExecutionsRolloutConfig = "jobExecutionsRolloutConfig"
            case documentSource = "documentSource"
            case targets = "targets"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tagKeys", required: true, type: .list), 
            AWSShapeMember(label: "resourceArn", required: true, type: .string)
        ]
        /// A list of the keys of the tags to be removed from the resource.
        public let tagKeys: [String]
        /// The ARN of the resource.
        public let resourceArn: String

        public init(tagKeys: [String], resourceArn: String) {
            self.tagKeys = tagKeys
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeys = "tagKeys"
            case resourceArn = "resourceArn"
        }
    }

    public struct ReplaceTopicRuleRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "topicRulePayload"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "topicRulePayload", required: true, type: .structure), 
            AWSShapeMember(label: "ruleName", location: .uri(locationName: "ruleName"), required: true, type: .string)
        ]
        /// The rule payload.
        public let topicRulePayload: TopicRulePayload
        /// The name of the rule.
        public let ruleName: String

        public init(topicRulePayload: TopicRulePayload, ruleName: String) {
            self.topicRulePayload = topicRulePayload
            self.ruleName = ruleName
        }

        private enum CodingKeys: String, CodingKey {
            case topicRulePayload = "topicRulePayload"
            case ruleName = "ruleName"
        }
    }

    public struct MetricValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cidrs", required: false, type: .list), 
            AWSShapeMember(label: "count", required: false, type: .long), 
            AWSShapeMember(label: "ports", required: false, type: .list)
        ]
        /// If the comparisonOperator calls for a set of CIDRs, use this to specify that set to be compared with the metric.
        public let cidrs: [String]?
        /// If the comparisonOperator calls for a numeric value, use this to specify that numeric value to be compared with the metric.
        public let count: Int64?
        /// If the comparisonOperator calls for a set of ports, use this to specify that set to be compared with the metric.
        public let ports: [Int32]?

        public init(cidrs: [String]? = nil, count: Int64? = nil, ports: [Int32]? = nil) {
            self.cidrs = cidrs
            self.count = count
            self.ports = ports
        }

        private enum CodingKeys: String, CodingKey {
            case cidrs = "cidrs"
            case count = "count"
            case ports = "ports"
        }
    }

    public struct AddThingToBillingGroupResponse: AWSShape {

    }

    public struct ListStreamsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "streams", required: false, type: .list)
        ]
        /// A token used to get the next set of results.
        public let nextToken: String?
        /// A list of streams.
        public let streams: [StreamSummary]?

        public init(nextToken: String? = nil, streams: [StreamSummary]? = nil) {
            self.nextToken = nextToken
            self.streams = streams
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case streams = "streams"
        }
    }

    public struct ListSecurityProfilesForTargetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileTargetArn", location: .querystring(locationName: "securityProfileTargetArn"), required: true, type: .string), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "recursive", location: .querystring(locationName: "recursive"), required: false, type: .boolean), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The ARN of the target (thing group) whose attached security profiles you want to get.
        public let securityProfileTargetArn: String
        /// The token for the next set of results.
        public let nextToken: String?
        /// If true, return child groups as well.
        public let recursive: Bool?
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?

        public init(securityProfileTargetArn: String, nextToken: String? = nil, recursive: Bool? = nil, maxResults: Int32? = nil) {
            self.securityProfileTargetArn = securityProfileTargetArn
            self.nextToken = nextToken
            self.recursive = recursive
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileTargetArn = "securityProfileTargetArn"
            case nextToken = "nextToken"
            case recursive = "recursive"
            case maxResults = "maxResults"
        }
    }

    public enum JobStatus: String, CustomStringConvertible, Codable {
        case inProgress = "IN_PROGRESS"
        case canceled = "CANCELED"
        case completed = "COMPLETED"
        case deletionInProgress = "DELETION_IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public struct ListThingRegistrationTaskReportsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "reportType", location: .querystring(locationName: "reportType"), required: true, type: .enum), 
            AWSShapeMember(label: "taskId", location: .uri(locationName: "taskId"), required: true, type: .string), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The type of task report.
        public let reportType: ReportType
        /// The id of the task.
        public let taskId: String
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return per request.
        public let maxResults: Int32?

        public init(reportType: ReportType, taskId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.reportType = reportType
            self.taskId = taskId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case reportType = "reportType"
            case taskId = "taskId"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct ListScheduledAuditsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "scheduledAudits", required: false, type: .list)
        ]
        /// A token that can be used to retrieve the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// The list of scheduled audits.
        public let scheduledAudits: [ScheduledAuditMetadata]?

        public init(nextToken: String? = nil, scheduledAudits: [ScheduledAuditMetadata]? = nil) {
            self.nextToken = nextToken
            self.scheduledAudits = scheduledAudits
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case scheduledAudits = "scheduledAudits"
        }
    }

    public struct UpdateThingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "version", required: false, type: .long)
        ]
        /// The version of the updated thing group.
        public let version: Int64?

        public init(version: Int64? = nil) {
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case version = "version"
        }
    }

    public struct DescribeRoleAliasRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleAlias", location: .uri(locationName: "roleAlias"), required: true, type: .string)
        ]
        /// The role alias to describe.
        public let roleAlias: String

        public init(roleAlias: String) {
            self.roleAlias = roleAlias
        }

        private enum CodingKeys: String, CodingKey {
            case roleAlias = "roleAlias"
        }
    }

    public struct DeleteAccountAuditConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "deleteScheduledAudits", location: .querystring(locationName: "deleteScheduledAudits"), required: false, type: .boolean)
        ]
        /// If true, all scheduled audits are deleted.
        public let deleteScheduledAudits: Bool?

        public init(deleteScheduledAudits: Bool? = nil) {
            self.deleteScheduledAudits = deleteScheduledAudits
        }

        private enum CodingKeys: String, CodingKey {
            case deleteScheduledAudits = "deleteScheduledAudits"
        }
    }

    public struct CodeSigning: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "customCodeSigning", required: false, type: .structure), 
            AWSShapeMember(label: "awsSignerJobId", required: false, type: .string), 
            AWSShapeMember(label: "startSigningJobParameter", required: false, type: .structure)
        ]
        /// A custom method for code signing a file.
        public let customCodeSigning: CustomCodeSigning?
        /// The ID of the AWSSignerJob which was created to sign the file.
        public let awsSignerJobId: String?
        /// Describes the code-signing job.
        public let startSigningJobParameter: StartSigningJobParameter?

        public init(customCodeSigning: CustomCodeSigning? = nil, awsSignerJobId: String? = nil, startSigningJobParameter: StartSigningJobParameter? = nil) {
            self.customCodeSigning = customCodeSigning
            self.awsSignerJobId = awsSignerJobId
            self.startSigningJobParameter = startSigningJobParameter
        }

        private enum CodingKeys: String, CodingKey {
            case customCodeSigning = "customCodeSigning"
            case awsSignerJobId = "awsSignerJobId"
            case startSigningJobParameter = "startSigningJobParameter"
        }
    }

    public struct ListCertificatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageSize", location: .querystring(locationName: "pageSize"), required: false, type: .integer), 
            AWSShapeMember(label: "marker", location: .querystring(locationName: "marker"), required: false, type: .string), 
            AWSShapeMember(label: "ascendingOrder", location: .querystring(locationName: "isAscendingOrder"), required: false, type: .boolean)
        ]
        /// The result page size.
        public let pageSize: Int32?
        /// The marker for the next set of results.
        public let marker: String?
        /// Specifies the order for results. If True, the results are returned in ascending order, based on the creation date.
        public let ascendingOrder: Bool?

        public init(pageSize: Int32? = nil, marker: String? = nil, ascendingOrder: Bool? = nil) {
            self.pageSize = pageSize
            self.marker = marker
            self.ascendingOrder = ascendingOrder
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "pageSize"
            case marker = "marker"
            case ascendingOrder = "isAscendingOrder"
        }
    }

    public struct DescribeJobExecutionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string), 
            AWSShapeMember(label: "executionNumber", location: .querystring(locationName: "executionNumber"), required: false, type: .long), 
            AWSShapeMember(label: "jobId", location: .uri(locationName: "jobId"), required: true, type: .string)
        ]
        /// The name of the thing on which the job execution is running.
        public let thingName: String
        /// A string (consisting of the digits "0" through "9" which is used to specify a particular job execution on a particular device.
        public let executionNumber: Int64?
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String

        public init(thingName: String, executionNumber: Int64? = nil, jobId: String) {
            self.thingName = thingName
            self.executionNumber = executionNumber
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
            case executionNumber = "executionNumber"
            case jobId = "jobId"
        }
    }

    public struct UpdateThingResponse: AWSShape {

    }

    public struct UpdateAuthorizerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerArn", required: false, type: .string), 
            AWSShapeMember(label: "authorizerName", required: false, type: .string)
        ]
        /// The authorizer ARN.
        public let authorizerArn: String?
        /// The authorizer name.
        public let authorizerName: String?

        public init(authorizerArn: String? = nil, authorizerName: String? = nil) {
            self.authorizerArn = authorizerArn
            self.authorizerName = authorizerName
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerArn = "authorizerArn"
            case authorizerName = "authorizerName"
        }
    }

    public struct CreateThingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupId", required: false, type: .string)
        ]
        /// The thing group name.
        public let thingGroupName: String?
        /// The thing group ARN.
        public let thingGroupArn: String?
        /// The thing group ID.
        public let thingGroupId: String?

        public init(thingGroupName: String? = nil, thingGroupArn: String? = nil, thingGroupId: String? = nil) {
            self.thingGroupName = thingGroupName
            self.thingGroupArn = thingGroupArn
            self.thingGroupId = thingGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case thingGroupName = "thingGroupName"
            case thingGroupArn = "thingGroupArn"
            case thingGroupId = "thingGroupId"
        }
    }

    public struct CreateOTAUpdateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "additionalParameters", required: false, type: .map), 
            AWSShapeMember(label: "files", required: true, type: .list), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "targetSelection", required: false, type: .enum), 
            AWSShapeMember(label: "otaUpdateId", location: .uri(locationName: "otaUpdateId"), required: true, type: .string), 
            AWSShapeMember(label: "awsJobExecutionsRolloutConfig", required: false, type: .structure), 
            AWSShapeMember(label: "targets", required: true, type: .list)
        ]
        /// The IAM role that allows access to the AWS IoT Jobs service.
        public let roleArn: String
        /// A list of additional OTA update parameters which are name-value pairs.
        public let additionalParameters: [String: String]?
        /// The files to be streamed by the OTA update.
        public let files: [OTAUpdateFile]
        /// The description of the OTA update.
        public let description: String?
        /// Specifies whether the update will continue to run (CONTINUOUS), or will be complete after all the things specified as targets have completed the update (SNAPSHOT). If continuous, the update may also be run on a thing when a change is detected in a target. For example, an update will run on a thing when the thing is added to a target group, even after the update was completed by all things originally in the group. Valid values: CONTINUOUS | SNAPSHOT.
        public let targetSelection: TargetSelection?
        /// The ID of the OTA update to be created.
        public let otaUpdateId: String
        /// Configuration for the rollout of OTA updates.
        public let awsJobExecutionsRolloutConfig: AwsJobExecutionsRolloutConfig?
        /// The targeted devices to receive OTA updates.
        public let targets: [String]

        public init(roleArn: String, additionalParameters: [String: String]? = nil, files: [OTAUpdateFile], description: String? = nil, targetSelection: TargetSelection? = nil, otaUpdateId: String, awsJobExecutionsRolloutConfig: AwsJobExecutionsRolloutConfig? = nil, targets: [String]) {
            self.roleArn = roleArn
            self.additionalParameters = additionalParameters
            self.files = files
            self.description = description
            self.targetSelection = targetSelection
            self.otaUpdateId = otaUpdateId
            self.awsJobExecutionsRolloutConfig = awsJobExecutionsRolloutConfig
            self.targets = targets
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case additionalParameters = "additionalParameters"
            case files = "files"
            case description = "description"
            case targetSelection = "targetSelection"
            case otaUpdateId = "otaUpdateId"
            case awsJobExecutionsRolloutConfig = "awsJobExecutionsRolloutConfig"
            case targets = "targets"
        }
    }

    public struct ListTopicRulesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "ruleDisabled", location: .querystring(locationName: "ruleDisabled"), required: false, type: .boolean), 
            AWSShapeMember(label: "topic", location: .querystring(locationName: "topic"), required: false, type: .string)
        ]
        /// The maximum number of results to return.
        public let maxResults: Int32?
        /// A token used to retrieve the next value.
        public let nextToken: String?
        /// Specifies whether the rule is disabled.
        public let ruleDisabled: Bool?
        /// The topic.
        public let topic: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, ruleDisabled: Bool? = nil, topic: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.ruleDisabled = ruleDisabled
            self.topic = topic
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case ruleDisabled = "ruleDisabled"
            case topic = "topic"
        }
    }

    public struct JobExecutionSummaryForThing: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "jobId", required: false, type: .string), 
            AWSShapeMember(label: "jobExecutionSummary", required: false, type: .structure)
        ]
        /// The unique identifier you assigned to this job when it was created.
        public let jobId: String?
        /// Contains a subset of information about a job execution.
        public let jobExecutionSummary: JobExecutionSummary?

        public init(jobId: String? = nil, jobExecutionSummary: JobExecutionSummary? = nil) {
            self.jobId = jobId
            self.jobExecutionSummary = jobExecutionSummary
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "jobId"
            case jobExecutionSummary = "jobExecutionSummary"
        }
    }

    public struct AlertTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "alertTargetArn", required: true, type: .string)
        ]
        /// The ARN of the role that grants permission to send alerts to the notification target.
        public let roleArn: String
        /// The ARN of the notification target to which alerts are sent.
        public let alertTargetArn: String

        public init(roleArn: String, alertTargetArn: String) {
            self.roleArn = roleArn
            self.alertTargetArn = alertTargetArn
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case alertTargetArn = "alertTargetArn"
        }
    }

    public struct StartThingRegistrationTaskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "templateBody", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "inputFileKey", required: true, type: .string), 
            AWSShapeMember(label: "inputFileBucket", required: true, type: .string)
        ]
        /// The provisioning template.
        public let templateBody: String
        /// The IAM role ARN that grants permission the input file.
        public let roleArn: String
        /// The name of input file within the S3 bucket. This file contains a newline delimited JSON file. Each line contains the parameter values to provision one device (thing).
        public let inputFileKey: String
        /// The S3 bucket that contains the input file.
        public let inputFileBucket: String

        public init(templateBody: String, roleArn: String, inputFileKey: String, inputFileBucket: String) {
            self.templateBody = templateBody
            self.roleArn = roleArn
            self.inputFileKey = inputFileKey
            self.inputFileBucket = inputFileBucket
        }

        private enum CodingKeys: String, CodingKey {
            case templateBody = "templateBody"
            case roleArn = "roleArn"
            case inputFileKey = "inputFileKey"
            case inputFileBucket = "inputFileBucket"
        }
    }

    public struct ListPrincipalPoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policies", required: false, type: .list), 
            AWSShapeMember(label: "nextMarker", required: false, type: .string)
        ]
        /// The policies.
        public let policies: [Policy]?
        /// The marker for the next set of results, or null if there are no additional results.
        public let nextMarker: String?

        public init(policies: [Policy]? = nil, nextMarker: String? = nil) {
            self.policies = policies
            self.nextMarker = nextMarker
        }

        private enum CodingKeys: String, CodingKey {
            case policies = "policies"
            case nextMarker = "nextMarker"
        }
    }

    public struct CreateDynamicThingGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "indexName", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupId", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "queryString", required: false, type: .string), 
            AWSShapeMember(label: "queryVersion", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupName", required: false, type: .string)
        ]
        /// The dynamic thing group index name.
        public let indexName: String?
        /// The dynamic thing group ID.
        public let thingGroupId: String?
        /// The dynamic thing group ARN.
        public let thingGroupArn: String?
        /// The dynamic thing group search query string.
        public let queryString: String?
        /// The dynamic thing group query version.
        public let queryVersion: String?
        /// The dynamic thing group name.
        public let thingGroupName: String?

        public init(indexName: String? = nil, thingGroupId: String? = nil, thingGroupArn: String? = nil, queryString: String? = nil, queryVersion: String? = nil, thingGroupName: String? = nil) {
            self.indexName = indexName
            self.thingGroupId = thingGroupId
            self.thingGroupArn = thingGroupArn
            self.queryString = queryString
            self.queryVersion = queryVersion
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case indexName = "indexName"
            case thingGroupId = "thingGroupId"
            case thingGroupArn = "thingGroupArn"
            case queryString = "queryString"
            case queryVersion = "queryVersion"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct RemoveThingFromBillingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingName", required: false, type: .string), 
            AWSShapeMember(label: "thingArn", required: false, type: .string), 
            AWSShapeMember(label: "billingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "billingGroupArn", required: false, type: .string)
        ]
        /// The name of the thing to be removed from the billing group.
        public let thingName: String?
        /// The ARN of the thing to be removed from the billing group.
        public let thingArn: String?
        /// The name of the billing group.
        public let billingGroupName: String?
        /// The ARN of the billing group.
        public let billingGroupArn: String?

        public init(thingName: String? = nil, thingArn: String? = nil, billingGroupName: String? = nil, billingGroupArn: String? = nil) {
            self.thingName = thingName
            self.thingArn = thingArn
            self.billingGroupName = billingGroupName
            self.billingGroupArn = billingGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case thingName = "thingName"
            case thingArn = "thingArn"
            case billingGroupName = "billingGroupName"
            case billingGroupArn = "billingGroupArn"
        }
    }

    public struct AbortCriteria: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thresholdPercentage", required: true, type: .double), 
            AWSShapeMember(label: "failureType", required: true, type: .enum), 
            AWSShapeMember(label: "minNumberOfExecutedThings", required: true, type: .integer), 
            AWSShapeMember(label: "action", required: true, type: .enum)
        ]
        /// The threshold as a percentage of the total number of executed things that will initiate a job abort. AWS IoT supports up to two digits after the decimal (for example, 10.9 and 10.99, but not 10.999).
        public let thresholdPercentage: Double
        /// The type of job execution failure to define a rule to initiate a job abort.
        public let failureType: JobExecutionFailureType
        /// Minimum number of executed things before evaluating an abort rule.
        public let minNumberOfExecutedThings: Int32
        /// The type of abort action to initiate a job abort.
        public let action: AbortAction

        public init(thresholdPercentage: Double, failureType: JobExecutionFailureType, minNumberOfExecutedThings: Int32, action: AbortAction) {
            self.thresholdPercentage = thresholdPercentage
            self.failureType = failureType
            self.minNumberOfExecutedThings = minNumberOfExecutedThings
            self.action = action
        }

        private enum CodingKeys: String, CodingKey {
            case thresholdPercentage = "thresholdPercentage"
            case failureType = "failureType"
            case minNumberOfExecutedThings = "minNumberOfExecutedThings"
            case action = "action"
        }
    }

    public struct UpdateStreamResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "streamVersion", required: false, type: .integer), 
            AWSShapeMember(label: "streamId", required: false, type: .string), 
            AWSShapeMember(label: "streamArn", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// The stream version.
        public let streamVersion: Int32?
        /// The stream ID.
        public let streamId: String?
        /// The stream ARN.
        public let streamArn: String?
        /// A description of the stream.
        public let description: String?

        public init(streamVersion: Int32? = nil, streamId: String? = nil, streamArn: String? = nil, description: String? = nil) {
            self.streamVersion = streamVersion
            self.streamId = streamId
            self.streamArn = streamArn
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case streamVersion = "streamVersion"
            case streamId = "streamId"
            case streamArn = "streamArn"
            case description = "description"
        }
    }

    public struct GetLoggingOptionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "logLevel", required: false, type: .enum)
        ]
        /// The ARN of the IAM role that grants access.
        public let roleArn: String?
        /// The logging level.
        public let logLevel: LogLevel?

        public init(roleArn: String? = nil, logLevel: LogLevel? = nil) {
            self.roleArn = roleArn
            self.logLevel = logLevel
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
            case logLevel = "logLevel"
        }
    }

    public struct ListThingGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "parentGroup", location: .querystring(locationName: "parentGroup"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "recursive", location: .querystring(locationName: "recursive"), required: false, type: .boolean), 
            AWSShapeMember(label: "namePrefixFilter", location: .querystring(locationName: "namePrefixFilter"), required: false, type: .string)
        ]
        /// A filter that limits the results to those with the specified parent group.
        public let parentGroup: String?
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// The token to retrieve the next set of results.
        public let nextToken: String?
        /// If true, return child groups as well.
        public let recursive: Bool?
        /// A filter that limits the results to those with the specified name prefix.
        public let namePrefixFilter: String?

        public init(parentGroup: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil, recursive: Bool? = nil, namePrefixFilter: String? = nil) {
            self.parentGroup = parentGroup
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.recursive = recursive
            self.namePrefixFilter = namePrefixFilter
        }

        private enum CodingKeys: String, CodingKey {
            case parentGroup = "parentGroup"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case recursive = "recursive"
            case namePrefixFilter = "namePrefixFilter"
        }
    }

    public struct CodeSigningCertificateChain: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateName", required: false, type: .string), 
            AWSShapeMember(label: "inlineDocument", required: false, type: .string)
        ]
        /// The name of the certificate.
        public let certificateName: String?
        /// A base64 encoded binary representation of the code signing certificate chain.
        public let inlineDocument: String?

        public init(certificateName: String? = nil, inlineDocument: String? = nil) {
            self.certificateName = certificateName
            self.inlineDocument = inlineDocument
        }

        private enum CodingKeys: String, CodingKey {
            case certificateName = "certificateName"
            case inlineDocument = "inlineDocument"
        }
    }

    public struct DeleteAuthorizerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerName", location: .uri(locationName: "authorizerName"), required: true, type: .string)
        ]
        /// The name of the authorizer to delete.
        public let authorizerName: String

        public init(authorizerName: String) {
            self.authorizerName = authorizerName
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerName = "authorizerName"
        }
    }

    public struct CreateThingGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .list), 
            AWSShapeMember(label: "parentGroupName", required: false, type: .string), 
            AWSShapeMember(label: "thingGroupProperties", required: false, type: .structure), 
            AWSShapeMember(label: "thingGroupName", location: .uri(locationName: "thingGroupName"), required: true, type: .string)
        ]
        /// Metadata which can be used to manage the thing group.
        public let tags: [Tag]?
        /// The name of the parent thing group.
        public let parentGroupName: String?
        /// The thing group properties.
        public let thingGroupProperties: ThingGroupProperties?
        /// The thing group name to create.
        public let thingGroupName: String

        public init(tags: [Tag]? = nil, parentGroupName: String? = nil, thingGroupProperties: ThingGroupProperties? = nil, thingGroupName: String) {
            self.tags = tags
            self.parentGroupName = parentGroupName
            self.thingGroupProperties = thingGroupProperties
            self.thingGroupName = thingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case parentGroupName = "parentGroupName"
            case thingGroupProperties = "thingGroupProperties"
            case thingGroupName = "thingGroupName"
        }
    }

    public struct GetV2LoggingOptionsRequest: AWSShape {

    }

    public struct ScheduledAuditMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dayOfMonth", required: false, type: .string), 
            AWSShapeMember(label: "scheduledAuditName", required: false, type: .string), 
            AWSShapeMember(label: "scheduledAuditArn", required: false, type: .string), 
            AWSShapeMember(label: "frequency", required: false, type: .enum), 
            AWSShapeMember(label: "dayOfWeek", required: false, type: .enum)
        ]
        /// The day of the month on which the scheduled audit is run (if the frequency is "MONTHLY"). If days 29-31 are specified, and the month does not have that many days, the audit takes place on the "LAST" day of the month.
        public let dayOfMonth: String?
        /// The name of the scheduled audit.
        public let scheduledAuditName: String?
        /// The ARN of the scheduled audit.
        public let scheduledAuditArn: String?
        /// How often the scheduled audit takes place.
        public let frequency: AuditFrequency?
        /// The day of the week on which the scheduled audit is run (if the frequency is "WEEKLY" or "BIWEEKLY").
        public let dayOfWeek: DayOfWeek?

        public init(dayOfMonth: String? = nil, scheduledAuditName: String? = nil, scheduledAuditArn: String? = nil, frequency: AuditFrequency? = nil, dayOfWeek: DayOfWeek? = nil) {
            self.dayOfMonth = dayOfMonth
            self.scheduledAuditName = scheduledAuditName
            self.scheduledAuditArn = scheduledAuditArn
            self.frequency = frequency
            self.dayOfWeek = dayOfWeek
        }

        private enum CodingKeys: String, CodingKey {
            case dayOfMonth = "dayOfMonth"
            case scheduledAuditName = "scheduledAuditName"
            case scheduledAuditArn = "scheduledAuditArn"
            case frequency = "frequency"
            case dayOfWeek = "dayOfWeek"
        }
    }

    public struct ListPolicyVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyName", location: .uri(locationName: "policyName"), required: true, type: .string)
        ]
        /// The policy name.
        public let policyName: String

        public init(policyName: String) {
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "policyName"
        }
    }

    public struct UpdateIndexingConfigurationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "thingIndexingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "thingGroupIndexingConfiguration", required: false, type: .structure)
        ]
        /// Thing indexing configuration.
        public let thingIndexingConfiguration: ThingIndexingConfiguration?
        /// Thing group indexing configuration.
        public let thingGroupIndexingConfiguration: ThingGroupIndexingConfiguration?

        public init(thingIndexingConfiguration: ThingIndexingConfiguration? = nil, thingGroupIndexingConfiguration: ThingGroupIndexingConfiguration? = nil) {
            self.thingIndexingConfiguration = thingIndexingConfiguration
            self.thingGroupIndexingConfiguration = thingGroupIndexingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case thingIndexingConfiguration = "thingIndexingConfiguration"
            case thingGroupIndexingConfiguration = "thingGroupIndexingConfiguration"
        }
    }

    public struct ThingTypeProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "searchableAttributes", required: false, type: .list), 
            AWSShapeMember(label: "thingTypeDescription", required: false, type: .string)
        ]
        /// A list of searchable thing attribute names.
        public let searchableAttributes: [String]?
        /// The description of the thing type.
        public let thingTypeDescription: String?

        public init(searchableAttributes: [String]? = nil, thingTypeDescription: String? = nil) {
            self.searchableAttributes = searchableAttributes
            self.thingTypeDescription = thingTypeDescription
        }

        private enum CodingKeys: String, CodingKey {
            case searchableAttributes = "searchableAttributes"
            case thingTypeDescription = "thingTypeDescription"
        }
    }

    public struct CreatePolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "policyArn", required: false, type: .string), 
            AWSShapeMember(label: "policyName", required: false, type: .string), 
            AWSShapeMember(label: "policyDocument", required: false, type: .string), 
            AWSShapeMember(label: "policyVersionId", required: false, type: .string)
        ]
        /// The policy ARN.
        public let policyArn: String?
        /// The policy name.
        public let policyName: String?
        /// The JSON document that describes the policy.
        public let policyDocument: String?
        /// The policy version ID.
        public let policyVersionId: String?

        public init(policyArn: String? = nil, policyName: String? = nil, policyDocument: String? = nil, policyVersionId: String? = nil) {
            self.policyArn = policyArn
            self.policyName = policyName
            self.policyDocument = policyDocument
            self.policyVersionId = policyVersionId
        }

        private enum CodingKeys: String, CodingKey {
            case policyArn = "policyArn"
            case policyName = "policyName"
            case policyDocument = "policyDocument"
            case policyVersionId = "policyVersionId"
        }
    }

    public struct CloudwatchAlarmAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stateValue", required: true, type: .string), 
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "alarmName", required: true, type: .string), 
            AWSShapeMember(label: "stateReason", required: true, type: .string)
        ]
        /// The value of the alarm state. Acceptable values are: OK, ALARM, INSUFFICIENT_DATA.
        public let stateValue: String
        /// The IAM role that allows access to the CloudWatch alarm.
        public let roleArn: String
        /// The CloudWatch alarm name.
        public let alarmName: String
        /// The reason for the alarm change.
        public let stateReason: String

        public init(stateValue: String, roleArn: String, alarmName: String, stateReason: String) {
            self.stateValue = stateValue
            self.roleArn = roleArn
            self.alarmName = alarmName
            self.stateReason = stateReason
        }

        private enum CodingKeys: String, CodingKey {
            case stateValue = "stateValue"
            case roleArn = "roleArn"
            case alarmName = "alarmName"
            case stateReason = "stateReason"
        }
    }

    public struct Destination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "s3Destination", required: false, type: .structure)
        ]
        /// Describes the location in S3 of the updated firmware.
        public let s3Destination: S3Destination?

        public init(s3Destination: S3Destination? = nil) {
            self.s3Destination = s3Destination
        }

        private enum CodingKeys: String, CodingKey {
            case s3Destination = "s3Destination"
        }
    }

    public struct CreateThingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributePayload", required: false, type: .structure), 
            AWSShapeMember(label: "thingTypeName", required: false, type: .string), 
            AWSShapeMember(label: "billingGroupName", required: false, type: .string), 
            AWSShapeMember(label: "thingName", location: .uri(locationName: "thingName"), required: true, type: .string)
        ]
        /// The attribute payload, which consists of up to three name/value pairs in a JSON document. For example:  {\"attributes\":{\"string1\":\"string2\"}} 
        public let attributePayload: AttributePayload?
        /// The name of the thing type associated with the new thing.
        public let thingTypeName: String?
        /// The name of the billing group the thing will be added to.
        public let billingGroupName: String?
        /// The name of the thing to create.
        public let thingName: String

        public init(attributePayload: AttributePayload? = nil, thingTypeName: String? = nil, billingGroupName: String? = nil, thingName: String) {
            self.attributePayload = attributePayload
            self.thingTypeName = thingTypeName
            self.billingGroupName = billingGroupName
            self.thingName = thingName
        }

        private enum CodingKeys: String, CodingKey {
            case attributePayload = "attributePayload"
            case thingTypeName = "thingTypeName"
            case billingGroupName = "billingGroupName"
            case thingName = "thingName"
        }
    }

    public struct ListJobExecutionsForJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "executionSummaries", required: false, type: .list)
        ]
        /// The token for the next set of results, or null if there are no additional results.
        public let nextToken: String?
        /// A list of job execution summaries.
        public let executionSummaries: [JobExecutionSummaryForJob]?

        public init(nextToken: String? = nil, executionSummaries: [JobExecutionSummaryForJob]? = nil) {
            self.nextToken = nextToken
            self.executionSummaries = executionSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case executionSummaries = "executionSummaries"
        }
    }

    public struct DeleteRoleAliasResponse: AWSShape {

    }

    public struct ListTargetsForSecurityProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "maxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "securityProfileName", location: .uri(locationName: "securityProfileName"), required: true, type: .string)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The maximum number of results to return at one time.
        public let maxResults: Int32?
        /// The security profile.
        public let securityProfileName: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, securityProfileName: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.securityProfileName = securityProfileName
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case securityProfileName = "securityProfileName"
        }
    }

    public struct CACertificateDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "validity", required: false, type: .structure), 
            AWSShapeMember(label: "certificateId", required: false, type: .string), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "generationId", required: false, type: .string), 
            AWSShapeMember(label: "customerVersion", required: false, type: .integer), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "autoRegistrationStatus", required: false, type: .enum), 
            AWSShapeMember(label: "certificatePem", required: false, type: .string), 
            AWSShapeMember(label: "ownedBy", required: false, type: .string), 
            AWSShapeMember(label: "certificateArn", required: false, type: .string)
        ]
        /// When the CA certificate is valid.
        public let validity: CertificateValidity?
        /// The CA certificate ID.
        public let certificateId: String?
        /// The date the CA certificate was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The date the CA certificate was created.
        public let creationDate: TimeStamp?
        /// The generation ID of the CA certificate.
        public let generationId: String?
        /// The customer version of the CA certificate.
        public let customerVersion: Int32?
        /// The status of a CA certificate.
        public let status: CACertificateStatus?
        /// Whether the CA certificate configured for auto registration of device certificates. Valid values are "ENABLE" and "DISABLE"
        public let autoRegistrationStatus: AutoRegistrationStatus?
        /// The CA certificate data, in PEM format.
        public let certificatePem: String?
        /// The owner of the CA certificate.
        public let ownedBy: String?
        /// The CA certificate ARN.
        public let certificateArn: String?

        public init(validity: CertificateValidity? = nil, certificateId: String? = nil, lastModifiedDate: TimeStamp? = nil, creationDate: TimeStamp? = nil, generationId: String? = nil, customerVersion: Int32? = nil, status: CACertificateStatus? = nil, autoRegistrationStatus: AutoRegistrationStatus? = nil, certificatePem: String? = nil, ownedBy: String? = nil, certificateArn: String? = nil) {
            self.validity = validity
            self.certificateId = certificateId
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.generationId = generationId
            self.customerVersion = customerVersion
            self.status = status
            self.autoRegistrationStatus = autoRegistrationStatus
            self.certificatePem = certificatePem
            self.ownedBy = ownedBy
            self.certificateArn = certificateArn
        }

        private enum CodingKeys: String, CodingKey {
            case validity = "validity"
            case certificateId = "certificateId"
            case lastModifiedDate = "lastModifiedDate"
            case creationDate = "creationDate"
            case generationId = "generationId"
            case customerVersion = "customerVersion"
            case status = "status"
            case autoRegistrationStatus = "autoRegistrationStatus"
            case certificatePem = "certificatePem"
            case ownedBy = "ownedBy"
            case certificateArn = "certificateArn"
        }
    }

    public enum AuthDecision: String, CustomStringConvertible, Codable {
        case allowed = "ALLOWED"
        case explicitDeny = "EXPLICIT_DENY"
        case implicitDeny = "IMPLICIT_DENY"
        public var description: String { return self.rawValue }
    }

    public struct UpdateSecurityProfileResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "securityProfileDescription", required: false, type: .string), 
            AWSShapeMember(label: "alertTargets", required: false, type: .map), 
            AWSShapeMember(label: "lastModifiedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "securityProfileArn", required: false, type: .string), 
            AWSShapeMember(label: "creationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "securityProfileName", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .long), 
            AWSShapeMember(label: "behaviors", required: false, type: .list)
        ]
        /// The description of the security profile.
        public let securityProfileDescription: String?
        /// Where the alerts are sent. (Alerts are always sent to the console.)
        public let alertTargets: [AlertTargetType: AlertTarget]?
        /// The time the security profile was last modified.
        public let lastModifiedDate: TimeStamp?
        /// The ARN of the security profile that was updated.
        public let securityProfileArn: String?
        /// The time the security profile was created.
        public let creationDate: TimeStamp?
        /// The name of the security profile that was updated.
        public let securityProfileName: String?
        /// The updated version of the security profile.
        public let version: Int64?
        /// Specifies the behaviors that, when violated by a device (thing), cause an alert.
        public let behaviors: [Behavior]?

        public init(securityProfileDescription: String? = nil, alertTargets: [AlertTargetType: AlertTarget]? = nil, lastModifiedDate: TimeStamp? = nil, securityProfileArn: String? = nil, creationDate: TimeStamp? = nil, securityProfileName: String? = nil, version: Int64? = nil, behaviors: [Behavior]? = nil) {
            self.securityProfileDescription = securityProfileDescription
            self.alertTargets = alertTargets
            self.lastModifiedDate = lastModifiedDate
            self.securityProfileArn = securityProfileArn
            self.creationDate = creationDate
            self.securityProfileName = securityProfileName
            self.version = version
            self.behaviors = behaviors
        }

        private enum CodingKeys: String, CodingKey {
            case securityProfileDescription = "securityProfileDescription"
            case alertTargets = "alertTargets"
            case lastModifiedDate = "lastModifiedDate"
            case securityProfileArn = "securityProfileArn"
            case creationDate = "creationDate"
            case securityProfileName = "securityProfileName"
            case version = "version"
            case behaviors = "behaviors"
        }
    }

    public struct RelatedResource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "additionalInfo", required: false, type: .map), 
            AWSShapeMember(label: "resourceIdentifier", required: false, type: .structure)
        ]
        /// The type of resource.
        public let resourceType: ResourceType?
        /// Additional information about the resource.
        public let additionalInfo: [String: String]?
        /// Information identifying the resource.
        public let resourceIdentifier: ResourceIdentifier?

        public init(resourceType: ResourceType? = nil, additionalInfo: [String: String]? = nil, resourceIdentifier: ResourceIdentifier? = nil) {
            self.resourceType = resourceType
            self.additionalInfo = additionalInfo
            self.resourceIdentifier = resourceIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case additionalInfo = "additionalInfo"
            case resourceIdentifier = "resourceIdentifier"
        }
    }

    public struct DescribeAuditTaskResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "auditDetails", required: false, type: .map), 
            AWSShapeMember(label: "scheduledAuditName", required: false, type: .string), 
            AWSShapeMember(label: "taskStatus", required: false, type: .enum), 
            AWSShapeMember(label: "taskStatistics", required: false, type: .structure), 
            AWSShapeMember(label: "taskStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "taskType", required: false, type: .enum)
        ]
        /// Detailed information about each check performed during this audit.
        public let auditDetails: [String: AuditCheckDetails]?
        /// The name of the scheduled audit (only if the audit was a scheduled audit).
        public let scheduledAuditName: String?
        /// The status of the audit: one of "IN_PROGRESS", "COMPLETED", "FAILED", or "CANCELED".
        public let taskStatus: AuditTaskStatus?
        /// Statistical information about the audit.
        public let taskStatistics: TaskStatistics?
        /// The time the audit started.
        public let taskStartTime: TimeStamp?
        /// The type of audit: "ON_DEMAND_AUDIT_TASK" or "SCHEDULED_AUDIT_TASK".
        public let taskType: AuditTaskType?

        public init(auditDetails: [String: AuditCheckDetails]? = nil, scheduledAuditName: String? = nil, taskStatus: AuditTaskStatus? = nil, taskStatistics: TaskStatistics? = nil, taskStartTime: TimeStamp? = nil, taskType: AuditTaskType? = nil) {
            self.auditDetails = auditDetails
            self.scheduledAuditName = scheduledAuditName
            self.taskStatus = taskStatus
            self.taskStatistics = taskStatistics
            self.taskStartTime = taskStartTime
            self.taskType = taskType
        }

        private enum CodingKeys: String, CodingKey {
            case auditDetails = "auditDetails"
            case scheduledAuditName = "scheduledAuditName"
            case taskStatus = "taskStatus"
            case taskStatistics = "taskStatistics"
            case taskStartTime = "taskStartTime"
            case taskType = "taskType"
        }
    }

    public struct AuthorizerSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "authorizerArn", required: false, type: .string), 
            AWSShapeMember(label: "authorizerName", required: false, type: .string)
        ]
        /// The authorizer ARN.
        public let authorizerArn: String?
        /// The authorizer name.
        public let authorizerName: String?

        public init(authorizerArn: String? = nil, authorizerName: String? = nil) {
            self.authorizerArn = authorizerArn
            self.authorizerName = authorizerName
        }

        private enum CodingKeys: String, CodingKey {
            case authorizerArn = "authorizerArn"
            case authorizerName = "authorizerName"
        }
    }

}