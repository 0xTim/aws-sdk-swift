// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension ElasticBeanstalk {

    public struct RebuildEnvironmentMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string)
        ]
        /// The name of the environment to rebuild.  Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentName: String?
        /// The ID of the environment to rebuild.  Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentId: String?

        public init(environmentName: String? = nil, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.environmentId = environmentId
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case environmentId = "EnvironmentId"
        }
    }

    public struct ApplicationResourceLifecycleDescriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "ResourceLifecycleConfig", required: false, type: .structure)
        ]
        /// The name of the application.
        public let applicationName: String?
        /// The lifecycle configuration.
        public let resourceLifecycleConfig: ApplicationResourceLifecycleConfig?

        public init(applicationName: String? = nil, resourceLifecycleConfig: ApplicationResourceLifecycleConfig? = nil) {
            self.applicationName = applicationName
            self.resourceLifecycleConfig = resourceLifecycleConfig
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case resourceLifecycleConfig = "ResourceLifecycleConfig"
        }
    }

    public struct EventDescriptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Events", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        ///  A list of EventDescription. 
        public let events: [EventDescription]?
        ///  If returned, this indicates that there are more results to obtain. Use this token in the next DescribeEvents call to get the next batch of events. 
        public let nextToken: String?

        public init(events: [EventDescription]? = nil, nextToken: String? = nil) {
            self.events = events
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case events = "Events"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeConfigurationSettingsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TemplateName", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string)
        ]
        /// The name of the configuration template to describe.  Conditional: You must specify either this parameter or an EnvironmentName, but not both. If you specify both, AWS Elastic Beanstalk returns an InvalidParameterCombination error. If you do not specify either, AWS Elastic Beanstalk returns a MissingRequiredParameter error. 
        public let templateName: String?
        /// The application for the environment or configuration template.
        public let applicationName: String
        /// The name of the environment to describe.  Condition: You must specify either this or a TemplateName, but not both. If you specify both, AWS Elastic Beanstalk returns an InvalidParameterCombination error. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentName: String?

        public init(templateName: String? = nil, applicationName: String, environmentName: String? = nil) {
            self.templateName = templateName
            self.applicationName = applicationName
            self.environmentName = environmentName
        }

        private enum CodingKeys: String, CodingKey {
            case templateName = "TemplateName"
            case applicationName = "ApplicationName"
            case environmentName = "EnvironmentName"
        }
    }

    public struct DescribeApplicationVersionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "VersionLabels", required: false, type: .list)
        ]
        /// For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request. If no NextToken is specified, the first page is retrieved.
        public let nextToken: String?
        /// For a paginated request. Specify a maximum number of application versions to include in each response. If no MaxRecords is specified, all available application versions are retrieved in a single response.
        public let maxRecords: Int32?
        /// Specify an application name to show only application versions for that application.
        public let applicationName: String?
        /// Specify a version label to show a specific application version.
        public let versionLabels: [String]?

        public init(nextToken: String? = nil, maxRecords: Int32? = nil, applicationName: String? = nil, versionLabels: [String]? = nil) {
            self.nextToken = nextToken
            self.maxRecords = maxRecords
            self.applicationName = applicationName
            self.versionLabels = versionLabels
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxRecords = "MaxRecords"
            case applicationName = "ApplicationName"
            case versionLabels = "VersionLabels"
        }
    }

    public struct ConfigurationOptionDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ValueOptions", required: false, type: .list), 
            AWSShapeMember(label: "UserDefined", required: false, type: .boolean), 
            AWSShapeMember(label: "DefaultValue", required: false, type: .string), 
            AWSShapeMember(label: "Regex", required: false, type: .structure), 
            AWSShapeMember(label: "ValueType", required: false, type: .enum), 
            AWSShapeMember(label: "MaxLength", required: false, type: .integer), 
            AWSShapeMember(label: "ChangeSeverity", required: false, type: .string), 
            AWSShapeMember(label: "MaxValue", required: false, type: .integer), 
            AWSShapeMember(label: "MinValue", required: false, type: .integer), 
            AWSShapeMember(label: "Namespace", required: false, type: .string)
        ]
        /// The name of the configuration option.
        public let name: String?
        /// If specified, values for the configuration option are selected from this list.
        public let valueOptions: [String]?
        /// An indication of whether the user defined this configuration option:    true : This configuration option was defined by the user. It is a valid choice for specifying if this as an Option to Remove when updating configuration settings.     false : This configuration was not defined by the user.    Constraint: You can remove only UserDefined options from a configuration.   Valid Values: true | false 
        public let userDefined: Bool?
        /// The default value for this configuration option.
        public let defaultValue: String?
        /// If specified, the configuration option must be a string value that satisfies this regular expression.
        public let regex: OptionRestrictionRegex?
        /// An indication of which type of values this option has and whether it is allowable to select one or more than one of the possible values:    Scalar : Values for this option are a single selection from the possible values, or an unformatted string, or numeric value governed by the MIN/MAX/Regex constraints.    List : Values for this option are multiple selections from the possible values.    Boolean : Values for this option are either true or false .    Json : Values for this option are a JSON representation of a ConfigDocument.  
        public let valueType: ConfigurationOptionValueType?
        /// If specified, the configuration option must be a string value no longer than this value.
        public let maxLength: Int32?
        /// An indication of which action is required if the value for this configuration option changes:    NoInterruption : There is no interruption to the environment or application availability.    RestartEnvironment : The environment is entirely restarted, all AWS resources are deleted and recreated, and the environment is unavailable during the process.    RestartApplicationServer : The environment is available the entire time. However, a short application outage occurs when the application servers on the running Amazon EC2 instances are restarted.  
        public let changeSeverity: String?
        /// If specified, the configuration option must be a numeric value less than this value.
        public let maxValue: Int32?
        /// If specified, the configuration option must be a numeric value greater than this value.
        public let minValue: Int32?
        /// A unique namespace identifying the option's associated AWS resource.
        public let namespace: String?

        public init(name: String? = nil, valueOptions: [String]? = nil, userDefined: Bool? = nil, defaultValue: String? = nil, regex: OptionRestrictionRegex? = nil, valueType: ConfigurationOptionValueType? = nil, maxLength: Int32? = nil, changeSeverity: String? = nil, maxValue: Int32? = nil, minValue: Int32? = nil, namespace: String? = nil) {
            self.name = name
            self.valueOptions = valueOptions
            self.userDefined = userDefined
            self.defaultValue = defaultValue
            self.regex = regex
            self.valueType = valueType
            self.maxLength = maxLength
            self.changeSeverity = changeSeverity
            self.maxValue = maxValue
            self.minValue = minValue
            self.namespace = namespace
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case valueOptions = "ValueOptions"
            case userDefined = "UserDefined"
            case defaultValue = "DefaultValue"
            case regex = "Regex"
            case valueType = "ValueType"
            case maxLength = "MaxLength"
            case changeSeverity = "ChangeSeverity"
            case maxValue = "MaxValue"
            case minValue = "MinValue"
            case namespace = "Namespace"
        }
    }

    public struct DeleteApplicationVersionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeleteSourceBundle", required: false, type: .boolean), 
            AWSShapeMember(label: "VersionLabel", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// Set to true to delete the source bundle from your storage bucket. Otherwise, the application version is deleted only from Elastic Beanstalk and the source bundle remains in Amazon S3.
        public let deleteSourceBundle: Bool?
        /// The label of the version to delete.
        public let versionLabel: String
        /// The name of the application to which the version belongs.
        public let applicationName: String

        public init(deleteSourceBundle: Bool? = nil, versionLabel: String, applicationName: String) {
            self.deleteSourceBundle = deleteSourceBundle
            self.versionLabel = versionLabel
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case deleteSourceBundle = "DeleteSourceBundle"
            case versionLabel = "VersionLabel"
            case applicationName = "ApplicationName"
        }
    }

    public struct ListPlatformVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of platform values returned in one call.
        public let maxRecords: Int32?
        /// List only the platforms where the platform member value relates to one of the supplied values.
        public let filters: [PlatformFilter]?
        /// The starting index into the remaining list of platforms. Use the NextToken value from a previous ListPlatformVersion call.
        public let nextToken: String?

        public init(maxRecords: Int32? = nil, filters: [PlatformFilter]? = nil, nextToken: String? = nil) {
            self.maxRecords = maxRecords
            self.filters = filters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case filters = "Filters"
            case nextToken = "NextToken"
        }
    }

    public struct DeletePlatformVersionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformSummary", required: false, type: .structure)
        ]
        /// Detailed information about the version of the custom platform.
        public let platformSummary: PlatformSummary?

        public init(platformSummary: PlatformSummary? = nil) {
            self.platformSummary = platformSummary
        }

        private enum CodingKeys: String, CodingKey {
            case platformSummary = "PlatformSummary"
        }
    }

    public enum ConfigurationDeploymentStatus: String, CustomStringConvertible, Codable {
        case deployed = "deployed"
        case pending = "pending"
        case failed = "failed"
        public var description: String { return self.rawValue }
    }

    public struct UpdateApplicationVersionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "VersionLabel", required: true, type: .string)
        ]
        /// A new description for this version.
        public let description: String?
        /// The name of the application associated with this version.  If no application is found with this name, UpdateApplication returns an InvalidParameterValue error.
        public let applicationName: String
        /// The name of the version to update. If no application version is found with this label, UpdateApplication returns an InvalidParameterValue error. 
        public let versionLabel: String

        public init(description: String? = nil, applicationName: String, versionLabel: String) {
            self.description = description
            self.applicationName = applicationName
            self.versionLabel = versionLabel
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case applicationName = "ApplicationName"
            case versionLabel = "VersionLabel"
        }
    }

    public enum EnvironmentHealth: String, CustomStringConvertible, Codable {
        case green = "Green"
        case yellow = "Yellow"
        case red = "Red"
        case grey = "Grey"
        public var description: String { return self.rawValue }
    }

    public struct CreateStorageLocationResultMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Bucket", required: false, type: .string)
        ]
        /// The name of the Amazon S3 bucket created.
        public let s3Bucket: String?

        public init(s3Bucket: String? = nil) {
            self.s3Bucket = s3Bucket
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "S3Bucket"
        }
    }

    public enum EnvironmentInfoType: String, CustomStringConvertible, Codable {
        case tail = "tail"
        case bundle = "bundle"
        public var description: String { return self.rawValue }
    }

    public struct DescribeInstancesHealthResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RefreshedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "InstanceHealthList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The date and time that the health information was retrieved.
        public let refreshedAt: TimeStamp?
        /// Detailed health information about each instance. The output differs slightly between Linux and Windows environments. There is a difference in the members that are supported under the &lt;CPUUtilization&gt; type.
        public let instanceHealthList: [SingleInstanceHealth]?
        /// Pagination token for the next page of results, if available.
        public let nextToken: String?

        public init(refreshedAt: TimeStamp? = nil, instanceHealthList: [SingleInstanceHealth]? = nil, nextToken: String? = nil) {
            self.refreshedAt = refreshedAt
            self.instanceHealthList = instanceHealthList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case refreshedAt = "RefreshedAt"
            case instanceHealthList = "InstanceHealthList"
            case nextToken = "NextToken"
        }
    }

    public struct Trigger: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the trigger.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct DescribeEnvironmentsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IncludedDeletedBackTo", required: false, type: .timestamp), 
            AWSShapeMember(label: "IncludeDeleted", required: false, type: .boolean), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentNames", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentIds", required: false, type: .list), 
            AWSShapeMember(label: "VersionLabel", required: false, type: .string), 
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer)
        ]
        ///  If specified when IncludeDeleted is set to true, then environments deleted after this date are displayed. 
        public let includedDeletedBackTo: TimeStamp?
        /// Indicates whether to include deleted environments:  true: Environments that have been deleted after IncludedDeletedBackTo are displayed.  false: Do not include deleted environments.
        public let includeDeleted: Bool?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application.
        public let applicationName: String?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified names.
        public let environmentNames: [String]?
        /// For a paginated request. Specify a token from a previous response page to retrieve the next response page. All other parameter values must be identical to the ones specified in the initial request. If no NextToken is specified, the first page is retrieved.
        public let nextToken: String?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that have the specified IDs.
        public let environmentIds: [String]?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those that are associated with this application version.
        public let versionLabel: String?
        /// For a paginated request. Specify a maximum number of environments to include in each response. If no MaxRecords is specified, all available environments are retrieved in a single response.
        public let maxRecords: Int32?

        public init(includedDeletedBackTo: TimeStamp? = nil, includeDeleted: Bool? = nil, applicationName: String? = nil, environmentNames: [String]? = nil, nextToken: String? = nil, environmentIds: [String]? = nil, versionLabel: String? = nil, maxRecords: Int32? = nil) {
            self.includedDeletedBackTo = includedDeletedBackTo
            self.includeDeleted = includeDeleted
            self.applicationName = applicationName
            self.environmentNames = environmentNames
            self.nextToken = nextToken
            self.environmentIds = environmentIds
            self.versionLabel = versionLabel
            self.maxRecords = maxRecords
        }

        private enum CodingKeys: String, CodingKey {
            case includedDeletedBackTo = "IncludedDeletedBackTo"
            case includeDeleted = "IncludeDeleted"
            case applicationName = "ApplicationName"
            case environmentNames = "EnvironmentNames"
            case nextToken = "NextToken"
            case environmentIds = "EnvironmentIds"
            case versionLabel = "VersionLabel"
            case maxRecords = "MaxRecords"
        }
    }

    public enum InstancesHealthAttribute: String, CustomStringConvertible, Codable {
        case healthstatus = "HealthStatus"
        case color = "Color"
        case causes = "Causes"
        case applicationmetrics = "ApplicationMetrics"
        case refreshedat = "RefreshedAt"
        case launchedat = "LaunchedAt"
        case system = "System"
        case deployment = "Deployment"
        case availabilityzone = "AvailabilityZone"
        case instancetype = "InstanceType"
        case all = "All"
        public var description: String { return self.rawValue }
    }

    public struct EnvironmentResourceDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Triggers", required: false, type: .list), 
            AWSShapeMember(label: "Queues", required: false, type: .list), 
            AWSShapeMember(label: "LoadBalancers", required: false, type: .list), 
            AWSShapeMember(label: "LaunchConfigurations", required: false, type: .list), 
            AWSShapeMember(label: "AutoScalingGroups", required: false, type: .list), 
            AWSShapeMember(label: "Instances", required: false, type: .list), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string)
        ]
        /// The AutoScaling triggers in use by this environment. 
        public let triggers: [Trigger]?
        /// The queues used by this environment.
        public let queues: [Queue]?
        /// The LoadBalancers in use by this environment.
        public let loadBalancers: [LoadBalancer]?
        /// The Auto Scaling launch configurations in use by this environment.
        public let launchConfigurations: [LaunchConfiguration]?
        ///  The AutoScalingGroups used by this environment. 
        public let autoScalingGroups: [AutoScalingGroup]?
        /// The Amazon EC2 instances used by this environment.
        public let instances: [Instance]?
        /// The name of the environment.
        public let environmentName: String?

        public init(triggers: [Trigger]? = nil, queues: [Queue]? = nil, loadBalancers: [LoadBalancer]? = nil, launchConfigurations: [LaunchConfiguration]? = nil, autoScalingGroups: [AutoScalingGroup]? = nil, instances: [Instance]? = nil, environmentName: String? = nil) {
            self.triggers = triggers
            self.queues = queues
            self.loadBalancers = loadBalancers
            self.launchConfigurations = launchConfigurations
            self.autoScalingGroups = autoScalingGroups
            self.instances = instances
            self.environmentName = environmentName
        }

        private enum CodingKeys: String, CodingKey {
            case triggers = "Triggers"
            case queues = "Queues"
            case loadBalancers = "LoadBalancers"
            case launchConfigurations = "LaunchConfigurations"
            case autoScalingGroups = "AutoScalingGroups"
            case instances = "Instances"
            case environmentName = "EnvironmentName"
        }
    }

    public struct DeletePlatformVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformArn", required: false, type: .string)
        ]
        /// The ARN of the version of the custom platform.
        public let platformArn: String?

        public init(platformArn: String? = nil) {
            self.platformArn = platformArn
        }

        private enum CodingKeys: String, CodingKey {
            case platformArn = "PlatformArn"
        }
    }

    public struct SourceConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TemplateName", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string)
        ]
        /// The name of the configuration template.
        public let templateName: String?
        /// The name of the application associated with the configuration.
        public let applicationName: String?

        public init(templateName: String? = nil, applicationName: String? = nil) {
            self.templateName = templateName
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case templateName = "TemplateName"
            case applicationName = "ApplicationName"
        }
    }

    public struct AutoScalingGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the AutoScalingGroup . 
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct ApplyEnvironmentManagedActionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "ActionType", required: false, type: .enum), 
            AWSShapeMember(label: "ActionDescription", required: false, type: .string), 
            AWSShapeMember(label: "ActionId", required: false, type: .string)
        ]
        /// The status of the managed action.
        public let status: String?
        /// The type of managed action.
        public let actionType: ActionType?
        /// A description of the managed action.
        public let actionDescription: String?
        /// The action ID of the managed action.
        public let actionId: String?

        public init(status: String? = nil, actionType: ActionType? = nil, actionDescription: String? = nil, actionId: String? = nil) {
            self.status = status
            self.actionType = actionType
            self.actionDescription = actionDescription
            self.actionId = actionId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case actionType = "ActionType"
            case actionDescription = "ActionDescription"
            case actionId = "ActionId"
        }
    }

    public struct Deployment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "VersionLabel", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentId", required: false, type: .long)
        ]
        /// The status of the deployment:    In Progress : The deployment is in progress.    Deployed : The deployment succeeded.    Failed : The deployment failed.  
        public let status: String?
        /// For in-progress deployments, the time that the deployment started. For completed deployments, the time that the deployment ended.
        public let deploymentTime: TimeStamp?
        /// The version label of the application version in the deployment.
        public let versionLabel: String?
        /// The ID of the deployment. This number increases by one each time that you deploy source code or change instance configuration settings.
        public let deploymentId: Int64?

        public init(status: String? = nil, deploymentTime: TimeStamp? = nil, versionLabel: String? = nil, deploymentId: Int64? = nil) {
            self.status = status
            self.deploymentTime = deploymentTime
            self.versionLabel = versionLabel
            self.deploymentId = deploymentId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case deploymentTime = "DeploymentTime"
            case versionLabel = "VersionLabel"
            case deploymentId = "DeploymentId"
        }
    }

    public struct TerminateEnvironmentMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "TerminateResources", required: false, type: .boolean), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string), 
            AWSShapeMember(label: "ForceTerminate", required: false, type: .boolean)
        ]
        /// The name of the environment to terminate.  Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentName: String?
        /// Indicates whether the associated AWS resources should shut down when the environment is terminated:    true: The specified environment as well as the associated AWS resources, such as Auto Scaling group and LoadBalancer, are terminated.    false: AWS Elastic Beanstalk resource management is removed from the environment, but the AWS resources continue to operate.    For more information, see the  AWS Elastic Beanstalk User Guide.    Default: true   Valid Values: true | false 
        public let terminateResources: Bool?
        /// The ID of the environment to terminate.  Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentId: String?
        /// Terminates the target environment even if another environment in the same group is dependent on it.
        public let forceTerminate: Bool?

        public init(environmentName: String? = nil, terminateResources: Bool? = nil, environmentId: String? = nil, forceTerminate: Bool? = nil) {
            self.environmentName = environmentName
            self.terminateResources = terminateResources
            self.environmentId = environmentId
            self.forceTerminate = forceTerminate
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case terminateResources = "TerminateResources"
            case environmentId = "EnvironmentId"
            case forceTerminate = "ForceTerminate"
        }
    }

    public struct ApplicationVersionDescriptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationVersions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// List of ApplicationVersionDescription objects sorted in order of creation.
        public let applicationVersions: [ApplicationVersionDescription]?
        /// In a paginated request, the token that you can pass in a subsequent request to get the next response page.
        public let nextToken: String?

        public init(applicationVersions: [ApplicationVersionDescription]? = nil, nextToken: String? = nil) {
            self.applicationVersions = applicationVersions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersions = "ApplicationVersions"
            case nextToken = "NextToken"
        }
    }

    public struct ApplicationResourceLifecycleConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceRole", required: false, type: .string), 
            AWSShapeMember(label: "VersionLifecycleConfig", required: false, type: .structure)
        ]
        /// The ARN of an IAM service role that Elastic Beanstalk has permission to assume. The ServiceRole property is required the first time that you provide a VersionLifecycleConfig for the application in one of the supporting calls (CreateApplication or UpdateApplicationResourceLifecycle). After you provide it once, in either one of the calls, Elastic Beanstalk persists the Service Role with the application, and you don't need to specify it again in subsequent UpdateApplicationResourceLifecycle calls. You can, however, specify it in subsequent calls to change the Service Role to another value.
        public let serviceRole: String?
        /// The application version lifecycle configuration.
        public let versionLifecycleConfig: ApplicationVersionLifecycleConfig?

        public init(serviceRole: String? = nil, versionLifecycleConfig: ApplicationVersionLifecycleConfig? = nil) {
            self.serviceRole = serviceRole
            self.versionLifecycleConfig = versionLifecycleConfig
        }

        private enum CodingKeys: String, CodingKey {
            case serviceRole = "ServiceRole"
            case versionLifecycleConfig = "VersionLifecycleConfig"
        }
    }

    public struct EventDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "Severity", required: false, type: .enum), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "TemplateName", required: false, type: .string), 
            AWSShapeMember(label: "RequestId", required: false, type: .string), 
            AWSShapeMember(label: "EventDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "VersionLabel", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]
        /// The name of the environment associated with this event.
        public let environmentName: String?
        /// The severity level of this event.
        public let severity: EventSeverity?
        /// The ARN of the platform.
        public let platformArn: String?
        /// The application associated with the event.
        public let applicationName: String?
        /// The name of the configuration associated with this event.
        public let templateName: String?
        /// The web service request ID for the activity of this event.
        public let requestId: String?
        /// The date when the event occurred.
        public let eventDate: TimeStamp?
        /// The release label for the application version associated with this event.
        public let versionLabel: String?
        /// The event message.
        public let message: String?

        public init(environmentName: String? = nil, severity: EventSeverity? = nil, platformArn: String? = nil, applicationName: String? = nil, templateName: String? = nil, requestId: String? = nil, eventDate: TimeStamp? = nil, versionLabel: String? = nil, message: String? = nil) {
            self.environmentName = environmentName
            self.severity = severity
            self.platformArn = platformArn
            self.applicationName = applicationName
            self.templateName = templateName
            self.requestId = requestId
            self.eventDate = eventDate
            self.versionLabel = versionLabel
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case severity = "Severity"
            case platformArn = "PlatformArn"
            case applicationName = "ApplicationName"
            case templateName = "TemplateName"
            case requestId = "RequestId"
            case eventDate = "EventDate"
            case versionLabel = "VersionLabel"
            case message = "Message"
        }
    }

    public enum SourceType: String, CustomStringConvertible, Codable {
        case git = "Git"
        case zip = "Zip"
        public var description: String { return self.rawValue }
    }

    public struct MaxCountRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeleteSourceFromS3", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxCount", required: false, type: .integer), 
            AWSShapeMember(label: "Enabled", required: true, type: .boolean)
        ]
        /// Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.
        public let deleteSourceFromS3: Bool?
        /// Specify the maximum number of application versions to retain.
        public let maxCount: Int32?
        /// Specify true to apply the rule, or false to disable it.
        public let enabled: Bool

        public init(deleteSourceFromS3: Bool? = nil, maxCount: Int32? = nil, enabled: Bool) {
            self.deleteSourceFromS3 = deleteSourceFromS3
            self.maxCount = maxCount
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case deleteSourceFromS3 = "DeleteSourceFromS3"
            case maxCount = "MaxCount"
            case enabled = "Enabled"
        }
    }

    public enum ActionStatus: String, CustomStringConvertible, Codable {
        case scheduled = "Scheduled"
        case pending = "Pending"
        case running = "Running"
        case unknown = "Unknown"
        public var description: String { return self.rawValue }
    }

    public struct StatusCodes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status5xx", required: false, type: .integer), 
            AWSShapeMember(label: "Status4xx", required: false, type: .integer), 
            AWSShapeMember(label: "Status2xx", required: false, type: .integer), 
            AWSShapeMember(label: "Status3xx", required: false, type: .integer)
        ]
        /// The percentage of requests over the last 10 seconds that resulted in a 5xx (500, 501, etc.) status code.
        public let status5xx: Int32?
        /// The percentage of requests over the last 10 seconds that resulted in a 4xx (400, 401, etc.) status code.
        public let status4xx: Int32?
        /// The percentage of requests over the last 10 seconds that resulted in a 2xx (200, 201, etc.) status code.
        public let status2xx: Int32?
        /// The percentage of requests over the last 10 seconds that resulted in a 3xx (300, 301, etc.) status code.
        public let status3xx: Int32?

        public init(status5xx: Int32? = nil, status4xx: Int32? = nil, status2xx: Int32? = nil, status3xx: Int32? = nil) {
            self.status5xx = status5xx
            self.status4xx = status4xx
            self.status2xx = status2xx
            self.status3xx = status3xx
        }

        private enum CodingKeys: String, CodingKey {
            case status5xx = "Status5xx"
            case status4xx = "Status4xx"
            case status2xx = "Status2xx"
            case status3xx = "Status3xx"
        }
    }

    public struct DeleteEnvironmentConfigurationMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "EnvironmentName", required: true, type: .string)
        ]
        /// The name of the application the environment is associated with.
        public let applicationName: String
        /// The name of the environment to delete the draft configuration from.
        public let environmentName: String

        public init(applicationName: String, environmentName: String) {
            self.applicationName = applicationName
            self.environmentName = environmentName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case environmentName = "EnvironmentName"
        }
    }

    public struct ApplicationVersionDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceBundle", required: false, type: .structure), 
            AWSShapeMember(label: "BuildArn", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ApplicationVersionArn", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "DateCreated", required: false, type: .timestamp), 
            AWSShapeMember(label: "SourceBuildInformation", required: false, type: .structure), 
            AWSShapeMember(label: "DateUpdated", required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "VersionLabel", required: false, type: .string)
        ]
        /// The storage location of the application version's source bundle in Amazon S3.
        public let sourceBundle: S3Location?
        /// Reference to the artifact from the AWS CodeBuild build.
        public let buildArn: String?
        /// The processing status of the application version. Reflects the state of the application version during its creation. Many of the values are only applicable if you specified True for the Process parameter of the CreateApplicationVersion action. The following list describes the possible values.    Unprocessed – Application version wasn't pre-processed or validated. Elastic Beanstalk will validate configuration files during deployment of the application version to an environment.    Processing – Elastic Beanstalk is currently processing the application version.    Building – Application version is currently undergoing an AWS CodeBuild build.    Processed – Elastic Beanstalk was successfully pre-processed and validated.    Failed – Either the AWS CodeBuild build failed or configuration files didn't pass validation. This application version isn't usable.  
        public let status: ApplicationVersionStatus?
        /// The Amazon Resource Name (ARN) of the application version.
        public let applicationVersionArn: String?
        /// The name of the application to which the application version belongs.
        public let applicationName: String?
        /// The creation date of the application version.
        public let dateCreated: TimeStamp?
        /// If the version's source code was retrieved from AWS CodeCommit, the location of the source code for the application version.
        public let sourceBuildInformation: SourceBuildInformation?
        /// The last modified date of the application version.
        public let dateUpdated: TimeStamp?
        /// The description of the application version.
        public let description: String?
        /// A unique identifier for the application version.
        public let versionLabel: String?

        public init(sourceBundle: S3Location? = nil, buildArn: String? = nil, status: ApplicationVersionStatus? = nil, applicationVersionArn: String? = nil, applicationName: String? = nil, dateCreated: TimeStamp? = nil, sourceBuildInformation: SourceBuildInformation? = nil, dateUpdated: TimeStamp? = nil, description: String? = nil, versionLabel: String? = nil) {
            self.sourceBundle = sourceBundle
            self.buildArn = buildArn
            self.status = status
            self.applicationVersionArn = applicationVersionArn
            self.applicationName = applicationName
            self.dateCreated = dateCreated
            self.sourceBuildInformation = sourceBuildInformation
            self.dateUpdated = dateUpdated
            self.description = description
            self.versionLabel = versionLabel
        }

        private enum CodingKeys: String, CodingKey {
            case sourceBundle = "SourceBundle"
            case buildArn = "BuildArn"
            case status = "Status"
            case applicationVersionArn = "ApplicationVersionArn"
            case applicationName = "ApplicationName"
            case dateCreated = "DateCreated"
            case sourceBuildInformation = "SourceBuildInformation"
            case dateUpdated = "DateUpdated"
            case description = "Description"
            case versionLabel = "VersionLabel"
        }
    }

    public struct OptionSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceName", required: false, type: .string), 
            AWSShapeMember(label: "Namespace", required: false, type: .string), 
            AWSShapeMember(label: "OptionName", required: false, type: .string)
        ]
        /// A unique resource name for a time-based scaling configuration option.
        public let resourceName: String?
        /// A unique namespace identifying the option's associated AWS resource.
        public let namespace: String?
        /// The name of the configuration option.
        public let optionName: String?

        public init(resourceName: String? = nil, namespace: String? = nil, optionName: String? = nil) {
            self.resourceName = resourceName
            self.namespace = namespace
            self.optionName = optionName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceName = "ResourceName"
            case namespace = "Namespace"
            case optionName = "OptionName"
        }
    }

    public struct DescribeEnvironmentHealthRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "AttributeNames", required: false, type: .list), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string)
        ]
        /// Specify the environment by name. You must specify either this or an EnvironmentName, or both.
        public let environmentName: String?
        /// Specify the response elements to return. To retrieve all attributes, set to All. If no attribute names are specified, returns the name of the environment.
        public let attributeNames: [EnvironmentHealthAttribute]?
        /// Specify the environment by ID. You must specify either this or an EnvironmentName, or both.
        public let environmentId: String?

        public init(environmentName: String? = nil, attributeNames: [EnvironmentHealthAttribute]? = nil, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.attributeNames = attributeNames
            self.environmentId = environmentId
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case attributeNames = "AttributeNames"
            case environmentId = "EnvironmentId"
        }
    }

    public struct DescribePlatformVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformArn", required: false, type: .string)
        ]
        /// The ARN of the version of the platform.
        public let platformArn: String?

        public init(platformArn: String? = nil) {
            self.platformArn = platformArn
        }

        private enum CodingKeys: String, CodingKey {
            case platformArn = "PlatformArn"
        }
    }

    public struct ListPlatformVersionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformSummaryList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Detailed information about the platforms.
        public let platformSummaryList: [PlatformSummary]?
        /// The starting index into the remaining list of platforms. if this value is not null, you can use it in a subsequent ListPlatformVersion call. 
        public let nextToken: String?

        public init(platformSummaryList: [PlatformSummary]? = nil, nextToken: String? = nil) {
            self.platformSummaryList = platformSummaryList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case platformSummaryList = "PlatformSummaryList"
            case nextToken = "NextToken"
        }
    }

    public struct PlatformFramework: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The version of the framework.
        public let version: String?
        /// The name of the framework.
        public let name: String?

        public init(version: String? = nil, name: String? = nil) {
            self.version = version
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case name = "Name"
        }
    }

    public struct CustomAmi: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageId", required: false, type: .string), 
            AWSShapeMember(label: "VirtualizationType", required: false, type: .string)
        ]
        /// THe ID of the image used to create the custom AMI.
        public let imageId: String?
        /// The type of virtualization used to create the custom AMI.
        public let virtualizationType: String?

        public init(imageId: String? = nil, virtualizationType: String? = nil) {
            self.imageId = imageId
            self.virtualizationType = virtualizationType
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "ImageId"
            case virtualizationType = "VirtualizationType"
        }
    }

    public struct CPUUtilization: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Idle", required: false, type: .double), 
            AWSShapeMember(label: "IOWait", required: false, type: .double), 
            AWSShapeMember(label: "IRQ", required: false, type: .double), 
            AWSShapeMember(label: "SoftIRQ", required: false, type: .double), 
            AWSShapeMember(label: "Nice", required: false, type: .double), 
            AWSShapeMember(label: "Privileged", required: false, type: .double), 
            AWSShapeMember(label: "User", required: false, type: .double), 
            AWSShapeMember(label: "System", required: false, type: .double)
        ]
        /// Percentage of time that the CPU has spent in the Idle state over the last 10 seconds.
        public let idle: Double?
        /// Available on Linux environments only. Percentage of time that the CPU has spent in the I/O Wait state over the last 10 seconds.
        public let iOWait: Double?
        /// Available on Linux environments only. Percentage of time that the CPU has spent in the IRQ state over the last 10 seconds.
        public let irq: Double?
        /// Available on Linux environments only. Percentage of time that the CPU has spent in the SoftIRQ state over the last 10 seconds.
        public let softIRQ: Double?
        /// Available on Linux environments only. Percentage of time that the CPU has spent in the Nice state over the last 10 seconds.
        public let nice: Double?
        /// Available on Windows environments only. Percentage of time that the CPU has spent in the Privileged state over the last 10 seconds.
        public let privileged: Double?
        /// Percentage of time that the CPU has spent in the User state over the last 10 seconds.
        public let user: Double?
        /// Available on Linux environments only. Percentage of time that the CPU has spent in the System state over the last 10 seconds.
        public let system: Double?

        public init(idle: Double? = nil, iOWait: Double? = nil, irq: Double? = nil, softIRQ: Double? = nil, nice: Double? = nil, privileged: Double? = nil, user: Double? = nil, system: Double? = nil) {
            self.idle = idle
            self.iOWait = iOWait
            self.irq = irq
            self.softIRQ = softIRQ
            self.nice = nice
            self.privileged = privileged
            self.user = user
            self.system = system
        }

        private enum CodingKeys: String, CodingKey {
            case idle = "Idle"
            case iOWait = "IOWait"
            case irq = "IRQ"
            case softIRQ = "SoftIRQ"
            case nice = "Nice"
            case privileged = "Privileged"
            case user = "User"
            case system = "System"
        }
    }

    public struct ResourceQuota: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Maximum", required: false, type: .integer)
        ]
        /// The maximum number of instances of this Elastic Beanstalk resource type that an AWS account can use.
        public let maximum: Int32?

        public init(maximum: Int32? = nil) {
            self.maximum = maximum
        }

        private enum CodingKeys: String, CodingKey {
            case maximum = "Maximum"
        }
    }

    public struct ApplyEnvironmentManagedActionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "ActionId", required: true, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string)
        ]
        /// The name of the target environment.
        public let environmentName: String?
        /// The action ID of the scheduled managed action to execute.
        public let actionId: String
        /// The environment ID of the target environment.
        public let environmentId: String?

        public init(environmentName: String? = nil, actionId: String, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.actionId = actionId
            self.environmentId = environmentId
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case actionId = "ActionId"
            case environmentId = "EnvironmentId"
        }
    }

    public struct CreatePlatformVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformName", required: true, type: .string), 
            AWSShapeMember(label: "OptionSettings", required: false, type: .list), 
            AWSShapeMember(label: "PlatformVersion", required: true, type: .string), 
            AWSShapeMember(label: "PlatformDefinitionBundle", required: true, type: .structure), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string)
        ]
        /// The name of your custom platform.
        public let platformName: String
        /// The configuration option settings to apply to the builder environment.
        public let optionSettings: [ConfigurationOptionSetting]?
        /// The number, such as 1.0.2, for the new platform version.
        public let platformVersion: String
        /// The location of the platform definition archive in Amazon S3.
        public let platformDefinitionBundle: S3Location
        /// The name of the builder environment.
        public let environmentName: String?

        public init(platformName: String, optionSettings: [ConfigurationOptionSetting]? = nil, platformVersion: String, platformDefinitionBundle: S3Location, environmentName: String? = nil) {
            self.platformName = platformName
            self.optionSettings = optionSettings
            self.platformVersion = platformVersion
            self.platformDefinitionBundle = platformDefinitionBundle
            self.environmentName = environmentName
        }

        private enum CodingKeys: String, CodingKey {
            case platformName = "PlatformName"
            case optionSettings = "OptionSettings"
            case platformVersion = "PlatformVersion"
            case platformDefinitionBundle = "PlatformDefinitionBundle"
            case environmentName = "EnvironmentName"
        }
    }

    public enum ConfigurationOptionValueType: String, CustomStringConvertible, Codable {
        case scalar = "Scalar"
        case list = "List"
        public var description: String { return self.rawValue }
    }

    public struct Instance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The ID of the Amazon EC2 instance.
        public let id: String?

        public init(id: String? = nil) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct Queue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "URL", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The URL of the queue.
        public let url: String?
        /// The name of the queue.
        public let name: String?

        public init(url: String? = nil, name: String? = nil) {
            self.url = url
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case url = "URL"
            case name = "Name"
        }
    }

    public struct CreateConfigurationTemplateMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string), 
            AWSShapeMember(label: "OptionSettings", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "TemplateName", required: true, type: .string), 
            AWSShapeMember(label: "SolutionStackName", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "SourceConfiguration", required: false, type: .structure)
        ]
        /// The ARN of the custom platform.
        public let platformArn: String?
        /// The ID of the environment used with this configuration template.
        public let environmentId: String?
        /// If specified, AWS Elastic Beanstalk sets the specified configuration option to the requested value. The new value overrides the value obtained from the solution stack or the source configuration template.
        public let optionSettings: [ConfigurationOptionSetting]?
        /// The name of the application to associate with this configuration template. If no application is found with this name, AWS Elastic Beanstalk returns an InvalidParameterValue error. 
        public let applicationName: String
        /// The name of the configuration template. Constraint: This name must be unique per application. Default: If a configuration template already exists with this name, AWS Elastic Beanstalk returns an InvalidParameterValue error. 
        public let templateName: String
        /// The name of the solution stack used by this configuration. The solution stack specifies the operating system, architecture, and application server for a configuration template. It determines the set of configuration options as well as the possible and default values.  Use ListAvailableSolutionStacks to obtain a list of available solution stacks.   A solution stack name or a source configuration parameter must be specified, otherwise AWS Elastic Beanstalk returns an InvalidParameterValue error.  If a solution stack name is not specified and the source configuration parameter is specified, AWS Elastic Beanstalk uses the same solution stack as the source configuration template.
        public let solutionStackName: String?
        /// Describes this configuration.
        public let description: String?
        /// If specified, AWS Elastic Beanstalk uses the configuration values from the specified configuration template to create a new configuration.  Values specified in the OptionSettings parameter of this call overrides any values obtained from the SourceConfiguration.   If no configuration template is found, returns an InvalidParameterValue error.   Constraint: If both the solution stack name parameter and the source configuration parameters are specified, the solution stack of the source configuration template must match the specified solution stack name or else AWS Elastic Beanstalk returns an InvalidParameterCombination error. 
        public let sourceConfiguration: SourceConfiguration?

        public init(platformArn: String? = nil, environmentId: String? = nil, optionSettings: [ConfigurationOptionSetting]? = nil, applicationName: String, templateName: String, solutionStackName: String? = nil, description: String? = nil, sourceConfiguration: SourceConfiguration? = nil) {
            self.platformArn = platformArn
            self.environmentId = environmentId
            self.optionSettings = optionSettings
            self.applicationName = applicationName
            self.templateName = templateName
            self.solutionStackName = solutionStackName
            self.description = description
            self.sourceConfiguration = sourceConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case platformArn = "PlatformArn"
            case environmentId = "EnvironmentId"
            case optionSettings = "OptionSettings"
            case applicationName = "ApplicationName"
            case templateName = "TemplateName"
            case solutionStackName = "SolutionStackName"
            case description = "Description"
            case sourceConfiguration = "SourceConfiguration"
        }
    }

    public enum ActionHistoryStatus: String, CustomStringConvertible, Codable {
        case completed = "Completed"
        case failed = "Failed"
        case unknown = "Unknown"
        public var description: String { return self.rawValue }
    }

    public struct DescribeConfigurationOptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "SolutionStackName", required: false, type: .string), 
            AWSShapeMember(label: "TemplateName", required: false, type: .string), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "Options", required: false, type: .list), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string)
        ]
        /// The name of the application associated with the configuration template or environment. Only needed if you want to describe the configuration options associated with either the configuration template or environment.
        public let applicationName: String?
        /// The name of the solution stack whose configuration options you want to describe.
        public let solutionStackName: String?
        /// The name of the configuration template whose configuration options you want to describe.
        public let templateName: String?
        /// The ARN of the custom platform.
        public let platformArn: String?
        /// If specified, restricts the descriptions to only the specified options.
        public let options: [OptionSpecification]?
        /// The name of the environment whose configuration options you want to describe.
        public let environmentName: String?

        public init(applicationName: String? = nil, solutionStackName: String? = nil, templateName: String? = nil, platformArn: String? = nil, options: [OptionSpecification]? = nil, environmentName: String? = nil) {
            self.applicationName = applicationName
            self.solutionStackName = solutionStackName
            self.templateName = templateName
            self.platformArn = platformArn
            self.options = options
            self.environmentName = environmentName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case solutionStackName = "SolutionStackName"
            case templateName = "TemplateName"
            case platformArn = "PlatformArn"
            case options = "Options"
            case environmentName = "EnvironmentName"
        }
    }

    public struct EnvironmentResourceDescriptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentResources", required: false, type: .structure)
        ]
        ///  A list of EnvironmentResourceDescription. 
        public let environmentResources: EnvironmentResourceDescription?

        public init(environmentResources: EnvironmentResourceDescription? = nil) {
            self.environmentResources = environmentResources
        }

        private enum CodingKeys: String, CodingKey {
            case environmentResources = "EnvironmentResources"
        }
    }

    public struct LoadBalancer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the LoadBalancer.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct DeleteApplicationMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "TerminateEnvByForce", required: false, type: .boolean)
        ]
        /// The name of the application to delete.
        public let applicationName: String
        /// When set to true, running environments will be terminated before deleting the application.
        public let terminateEnvByForce: Bool?

        public init(applicationName: String, terminateEnvByForce: Bool? = nil) {
            self.applicationName = applicationName
            self.terminateEnvByForce = terminateEnvByForce
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case terminateEnvByForce = "TerminateEnvByForce"
        }
    }

    public struct ApplicationDescriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Application", required: false, type: .structure)
        ]
        ///  The ApplicationDescription of the application. 
        public let application: ApplicationDescription?

        public init(application: ApplicationDescription? = nil) {
            self.application = application
        }

        private enum CodingKeys: String, CodingKey {
            case application = "Application"
        }
    }

    public struct DescribePlatformVersionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformDescription", required: false, type: .structure)
        ]
        /// Detailed information about the version of the platform.
        public let platformDescription: PlatformDescription?

        public init(platformDescription: PlatformDescription? = nil) {
            self.platformDescription = platformDescription
        }

        private enum CodingKeys: String, CodingKey {
            case platformDescription = "PlatformDescription"
        }
    }

    public struct PlatformSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "SupportedAddonList", required: false, type: .list), 
            AWSShapeMember(label: "SupportedTierList", required: false, type: .list), 
            AWSShapeMember(label: "PlatformOwner", required: false, type: .string), 
            AWSShapeMember(label: "PlatformStatus", required: false, type: .enum), 
            AWSShapeMember(label: "PlatformCategory", required: false, type: .string), 
            AWSShapeMember(label: "OperatingSystemName", required: false, type: .string), 
            AWSShapeMember(label: "OperatingSystemVersion", required: false, type: .string)
        ]
        /// The ARN of the platform.
        public let platformArn: String?
        /// The additions associated with the platform.
        public let supportedAddonList: [String]?
        /// The tiers in which the platform runs.
        public let supportedTierList: [String]?
        /// The AWS account ID of the person who created the platform.
        public let platformOwner: String?
        /// The status of the platform. You can create an environment from the platform once it is ready.
        public let platformStatus: PlatformStatus?
        /// The category of platform.
        public let platformCategory: String?
        /// The operating system used by the platform.
        public let operatingSystemName: String?
        /// The version of the operating system used by the platform.
        public let operatingSystemVersion: String?

        public init(platformArn: String? = nil, supportedAddonList: [String]? = nil, supportedTierList: [String]? = nil, platformOwner: String? = nil, platformStatus: PlatformStatus? = nil, platformCategory: String? = nil, operatingSystemName: String? = nil, operatingSystemVersion: String? = nil) {
            self.platformArn = platformArn
            self.supportedAddonList = supportedAddonList
            self.supportedTierList = supportedTierList
            self.platformOwner = platformOwner
            self.platformStatus = platformStatus
            self.platformCategory = platformCategory
            self.operatingSystemName = operatingSystemName
            self.operatingSystemVersion = operatingSystemVersion
        }

        private enum CodingKeys: String, CodingKey {
            case platformArn = "PlatformArn"
            case supportedAddonList = "SupportedAddonList"
            case supportedTierList = "SupportedTierList"
            case platformOwner = "PlatformOwner"
            case platformStatus = "PlatformStatus"
            case platformCategory = "PlatformCategory"
            case operatingSystemName = "OperatingSystemName"
            case operatingSystemVersion = "OperatingSystemVersion"
        }
    }

    public struct ConfigurationOptionsDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: false, type: .list), 
            AWSShapeMember(label: "SolutionStackName", required: false, type: .string), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string)
        ]
        ///  A list of ConfigurationOptionDescription. 
        public let options: [ConfigurationOptionDescription]?
        /// The name of the solution stack these configuration options belong to.
        public let solutionStackName: String?
        /// The ARN of the platform.
        public let platformArn: String?

        public init(options: [ConfigurationOptionDescription]? = nil, solutionStackName: String? = nil, platformArn: String? = nil) {
            self.options = options
            self.solutionStackName = solutionStackName
            self.platformArn = platformArn
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case solutionStackName = "SolutionStackName"
            case platformArn = "PlatformArn"
        }
    }

    public struct UpdateApplicationResourceLifecycleMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "ResourceLifecycleConfig", required: true, type: .structure)
        ]
        /// The name of the application.
        public let applicationName: String
        /// The lifecycle configuration.
        public let resourceLifecycleConfig: ApplicationResourceLifecycleConfig

        public init(applicationName: String, resourceLifecycleConfig: ApplicationResourceLifecycleConfig) {
            self.applicationName = applicationName
            self.resourceLifecycleConfig = resourceLifecycleConfig
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case resourceLifecycleConfig = "ResourceLifecycleConfig"
        }
    }

    public struct PlatformProgrammingLanguage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The version of the programming language.
        public let version: String?
        /// The name of the programming language.
        public let name: String?

        public init(version: String? = nil, name: String? = nil) {
            self.version = version
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case name = "Name"
        }
    }

    public struct UpdateConfigurationTemplateMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OptionsToRemove", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "OptionSettings", required: false, type: .list), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "TemplateName", required: true, type: .string)
        ]
        /// A list of configuration options to remove from the configuration set.  Constraint: You can remove only UserDefined configuration options. 
        public let optionsToRemove: [OptionSpecification]?
        /// The name of the application associated with the configuration template to update.  If no application is found with this name, UpdateConfigurationTemplate returns an InvalidParameterValue error. 
        public let applicationName: String
        /// A list of configuration option settings to update with the new specified option value.
        public let optionSettings: [ConfigurationOptionSetting]?
        /// A new description for the configuration.
        public let description: String?
        /// The name of the configuration template to update.  If no configuration template is found with this name, UpdateConfigurationTemplate returns an InvalidParameterValue error. 
        public let templateName: String

        public init(optionsToRemove: [OptionSpecification]? = nil, applicationName: String, optionSettings: [ConfigurationOptionSetting]? = nil, description: String? = nil, templateName: String) {
            self.optionsToRemove = optionsToRemove
            self.applicationName = applicationName
            self.optionSettings = optionSettings
            self.description = description
            self.templateName = templateName
        }

        private enum CodingKeys: String, CodingKey {
            case optionsToRemove = "OptionsToRemove"
            case applicationName = "ApplicationName"
            case optionSettings = "OptionSettings"
            case description = "Description"
            case templateName = "TemplateName"
        }
    }

    public enum ComputeType: String, CustomStringConvertible, Codable {
        case buildGeneral1Small = "BUILD_GENERAL1_SMALL"
        case buildGeneral1Medium = "BUILD_GENERAL1_MEDIUM"
        case buildGeneral1Large = "BUILD_GENERAL1_LARGE"
        public var description: String { return self.rawValue }
    }

    public struct ManagedActionHistoryItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailureDescription", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ExecutedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ActionType", required: false, type: .enum), 
            AWSShapeMember(label: "ActionId", required: false, type: .string), 
            AWSShapeMember(label: "FinishedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ActionDescription", required: false, type: .string), 
            AWSShapeMember(label: "FailureType", required: false, type: .enum)
        ]
        /// If the action failed, a description of the failure.
        public let failureDescription: String?
        /// The status of the action.
        public let status: ActionHistoryStatus?
        /// The date and time that the action started executing.
        public let executedTime: TimeStamp?
        /// The type of the managed action.
        public let actionType: ActionType?
        /// A unique identifier for the managed action.
        public let actionId: String?
        /// The date and time that the action finished executing.
        public let finishedTime: TimeStamp?
        /// A description of the managed action.
        public let actionDescription: String?
        /// If the action failed, the type of failure.
        public let failureType: FailureType?

        public init(failureDescription: String? = nil, status: ActionHistoryStatus? = nil, executedTime: TimeStamp? = nil, actionType: ActionType? = nil, actionId: String? = nil, finishedTime: TimeStamp? = nil, actionDescription: String? = nil, failureType: FailureType? = nil) {
            self.failureDescription = failureDescription
            self.status = status
            self.executedTime = executedTime
            self.actionType = actionType
            self.actionId = actionId
            self.finishedTime = finishedTime
            self.actionDescription = actionDescription
            self.failureType = failureType
        }

        private enum CodingKeys: String, CodingKey {
            case failureDescription = "FailureDescription"
            case status = "Status"
            case executedTime = "ExecutedTime"
            case actionType = "ActionType"
            case actionId = "ActionId"
            case finishedTime = "FinishedTime"
            case actionDescription = "ActionDescription"
            case failureType = "FailureType"
        }
    }

    public struct UpdateTagsForResourceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagsToAdd", required: false, type: .list), 
            AWSShapeMember(label: "TagsToRemove", required: false, type: .list), 
            AWSShapeMember(label: "ResourceArn", required: true, type: .string)
        ]
        /// A list of tags to add or update. If a key of an existing tag is added, the tag's value is updated.
        public let tagsToAdd: [Tag]?
        /// A list of tag keys to remove. If a tag key doesn't exist, it is silently ignored.
        public let tagsToRemove: [String]?
        /// The Amazon Resource Name (ARN) of the resouce to be updated. Must be the ARN of an Elastic Beanstalk environment.
        public let resourceArn: String

        public init(tagsToAdd: [Tag]? = nil, tagsToRemove: [String]? = nil, resourceArn: String) {
            self.tagsToAdd = tagsToAdd
            self.tagsToRemove = tagsToRemove
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case tagsToAdd = "TagsToAdd"
            case tagsToRemove = "TagsToRemove"
            case resourceArn = "ResourceArn"
        }
    }

    public struct ListTagsForResourceMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the resouce for which a tag list is requested. Must be the ARN of an Elastic Beanstalk environment.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
        }
    }

    public struct ManagedAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "WindowStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ActionType", required: false, type: .enum), 
            AWSShapeMember(label: "ActionDescription", required: false, type: .string), 
            AWSShapeMember(label: "ActionId", required: false, type: .string)
        ]
        /// The status of the managed action. If the action is Scheduled, you can apply it immediately with ApplyEnvironmentManagedAction.
        public let status: ActionStatus?
        /// The start time of the maintenance window in which the managed action will execute.
        public let windowStartTime: TimeStamp?
        /// The type of managed action.
        public let actionType: ActionType?
        /// A description of the managed action.
        public let actionDescription: String?
        /// A unique identifier for the managed action.
        public let actionId: String?

        public init(status: ActionStatus? = nil, windowStartTime: TimeStamp? = nil, actionType: ActionType? = nil, actionDescription: String? = nil, actionId: String? = nil) {
            self.status = status
            self.windowStartTime = windowStartTime
            self.actionType = actionType
            self.actionDescription = actionDescription
            self.actionId = actionId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case windowStartTime = "WindowStartTime"
            case actionType = "ActionType"
            case actionDescription = "ActionDescription"
            case actionId = "ActionId"
        }
    }

    public struct ComposeEnvironmentsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "VersionLabels", required: false, type: .list)
        ]
        /// The name of the application to which the specified source bundles belong.
        public let applicationName: String?
        /// The name of the group to which the target environments belong. Specify a group name only if the environment name defined in each target environment's manifest ends with a + (plus) character. See Environment Manifest (env.yaml) for details.
        public let groupName: String?
        /// A list of version labels, specifying one or more application source bundles that belong to the target application. Each source bundle must include an environment manifest that specifies the name of the environment and the name of the solution stack to use, and optionally can specify environment links to create.
        public let versionLabels: [String]?

        public init(applicationName: String? = nil, groupName: String? = nil, versionLabels: [String]? = nil) {
            self.applicationName = applicationName
            self.groupName = groupName
            self.versionLabels = versionLabels
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case groupName = "GroupName"
            case versionLabels = "VersionLabels"
        }
    }

    public struct DescribeEnvironmentHealthResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Causes", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationMetrics", required: false, type: .structure), 
            AWSShapeMember(label: "InstancesHealth", required: false, type: .structure), 
            AWSShapeMember(label: "RefreshedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "Color", required: false, type: .string), 
            AWSShapeMember(label: "HealthStatus", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string)
        ]
        /// The environment's operational status. Ready, Launching, Updating, Terminating, or Terminated.
        public let status: EnvironmentHealth?
        /// Descriptions of the data that contributed to the environment's current health status.
        public let causes: [String]?
        /// Application request metrics for the environment.
        public let applicationMetrics: ApplicationMetrics?
        /// Summary health information for the instances in the environment.
        public let instancesHealth: InstanceHealthSummary?
        /// The date and time that the health information was retrieved.
        public let refreshedAt: TimeStamp?
        /// The health color of the environment.
        public let color: String?
        /// The health status of the environment. For example, Ok.
        public let healthStatus: String?
        /// The environment's name.
        public let environmentName: String?

        public init(status: EnvironmentHealth? = nil, causes: [String]? = nil, applicationMetrics: ApplicationMetrics? = nil, instancesHealth: InstanceHealthSummary? = nil, refreshedAt: TimeStamp? = nil, color: String? = nil, healthStatus: String? = nil, environmentName: String? = nil) {
            self.status = status
            self.causes = causes
            self.applicationMetrics = applicationMetrics
            self.instancesHealth = instancesHealth
            self.refreshedAt = refreshedAt
            self.color = color
            self.healthStatus = healthStatus
            self.environmentName = environmentName
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case causes = "Causes"
            case applicationMetrics = "ApplicationMetrics"
            case instancesHealth = "InstancesHealth"
            case refreshedAt = "RefreshedAt"
            case color = "Color"
            case healthStatus = "HealthStatus"
            case environmentName = "EnvironmentName"
        }
    }

    public struct Listener: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Port", required: false, type: .integer), 
            AWSShapeMember(label: "Protocol", required: false, type: .string)
        ]
        /// The port that is used by the Listener.
        public let port: Int32?
        /// The protocol that is used by the Listener.
        public let `protocol`: String?

        public init(port: Int32? = nil, protocol: String? = nil) {
            self.port = port
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case port = "Port"
            case `protocol` = "Protocol"
        }
    }

    public struct ApplicationVersionDescriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationVersion", required: false, type: .structure)
        ]
        ///  The ApplicationVersionDescription of the application version. 
        public let applicationVersion: ApplicationVersionDescription?

        public init(applicationVersion: ApplicationVersionDescription? = nil) {
            self.applicationVersion = applicationVersion
        }

        private enum CodingKeys: String, CodingKey {
            case applicationVersion = "ApplicationVersion"
        }
    }

    public struct RetrieveEnvironmentInfoResultMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentInfo", required: false, type: .list)
        ]
        ///  The EnvironmentInfoDescription of the environment. 
        public let environmentInfo: [EnvironmentInfoDescription]?

        public init(environmentInfo: [EnvironmentInfoDescription]? = nil) {
            self.environmentInfo = environmentInfo
        }

        private enum CodingKeys: String, CodingKey {
            case environmentInfo = "EnvironmentInfo"
        }
    }

    public struct DescribeEnvironmentManagedActionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ManagedActions", required: false, type: .list)
        ]
        /// A list of upcoming and in-progress managed actions.
        public let managedActions: [ManagedAction]?

        public init(managedActions: [ManagedAction]? = nil) {
            self.managedActions = managedActions
        }

        private enum CodingKeys: String, CodingKey {
            case managedActions = "ManagedActions"
        }
    }

    public struct CreateEnvironmentMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tier", required: false, type: .structure), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "TemplateName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "OptionSettings", required: false, type: .list), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "SolutionStackName", required: false, type: .string), 
            AWSShapeMember(label: "OptionsToRemove", required: false, type: .list), 
            AWSShapeMember(label: "VersionLabel", required: false, type: .string), 
            AWSShapeMember(label: "CNAMEPrefix", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// This specifies the tier to use for creating this environment.
        public let tier: EnvironmentTier?
        /// The ARN of the platform.
        public let platformArn: String?
        /// The name of the application that contains the version to be deployed.  If no application is found with this name, CreateEnvironment returns an InvalidParameterValue error. 
        public let applicationName: String
        ///  The name of the configuration template to use in deployment. If no configuration template is found with this name, AWS Elastic Beanstalk returns an InvalidParameterValue error. 
        public let templateName: String?
        /// A unique name for the deployment environment. Used in the application URL. Constraint: Must be from 4 to 40 characters in length. The name can contain only letters, numbers, and hyphens. It cannot start or end with a hyphen. This name must be unique within a region in your account. If the specified name already exists in the region, AWS Elastic Beanstalk returns an InvalidParameterValue error.  Default: If the CNAME parameter is not specified, the environment name becomes part of the CNAME, and therefore part of the visible URL for your application.
        public let environmentName: String?
        /// The name of the group to which the target environment belongs. Specify a group name only if the environment's name is specified in an environment manifest and not with the environment name parameter. See Environment Manifest (env.yaml) for details.
        public let groupName: String?
        /// If specified, AWS Elastic Beanstalk sets the specified configuration options to the requested value in the configuration set for the new environment. These override the values obtained from the solution stack or the configuration template.
        public let optionSettings: [ConfigurationOptionSetting]?
        /// Describes this environment.
        public let description: String?
        /// This is an alternative to specifying a template name. If specified, AWS Elastic Beanstalk sets the configuration values to the default values associated with the specified solution stack. For a list of current solution stacks, see Elastic Beanstalk Supported Platforms.
        public let solutionStackName: String?
        /// A list of custom user-defined configuration options to remove from the configuration set for this new environment.
        public let optionsToRemove: [OptionSpecification]?
        /// The name of the application version to deploy.  If the specified application has no associated application versions, AWS Elastic Beanstalk UpdateEnvironment returns an InvalidParameterValue error.  Default: If not specified, AWS Elastic Beanstalk attempts to launch the sample application in the container.
        public let versionLabel: String?
        /// If specified, the environment attempts to use this value as the prefix for the CNAME. If not specified, the CNAME is generated automatically by appending a random alphanumeric string to the environment name.
        public let cNAMEPrefix: String?
        /// This specifies the tags applied to resources in the environment.
        public let tags: [Tag]?

        public init(tier: EnvironmentTier? = nil, platformArn: String? = nil, applicationName: String, templateName: String? = nil, environmentName: String? = nil, groupName: String? = nil, optionSettings: [ConfigurationOptionSetting]? = nil, description: String? = nil, solutionStackName: String? = nil, optionsToRemove: [OptionSpecification]? = nil, versionLabel: String? = nil, cNAMEPrefix: String? = nil, tags: [Tag]? = nil) {
            self.tier = tier
            self.platformArn = platformArn
            self.applicationName = applicationName
            self.templateName = templateName
            self.environmentName = environmentName
            self.groupName = groupName
            self.optionSettings = optionSettings
            self.description = description
            self.solutionStackName = solutionStackName
            self.optionsToRemove = optionsToRemove
            self.versionLabel = versionLabel
            self.cNAMEPrefix = cNAMEPrefix
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tier = "Tier"
            case platformArn = "PlatformArn"
            case applicationName = "ApplicationName"
            case templateName = "TemplateName"
            case environmentName = "EnvironmentName"
            case groupName = "GroupName"
            case optionSettings = "OptionSettings"
            case description = "Description"
            case solutionStackName = "SolutionStackName"
            case optionsToRemove = "OptionsToRemove"
            case versionLabel = "VersionLabel"
            case cNAMEPrefix = "CNAMEPrefix"
            case tags = "Tags"
        }
    }

    public struct CreateApplicationMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "ResourceLifecycleConfig", required: false, type: .structure)
        ]
        /// Describes the application.
        public let description: String?
        /// The name of the application. Constraint: This name must be unique within your account. If the specified name already exists, the action returns an InvalidParameterValue error.
        public let applicationName: String
        /// Specify an application resource lifecycle configuration to prevent your application from accumulating too many versions.
        public let resourceLifecycleConfig: ApplicationResourceLifecycleConfig?

        public init(description: String? = nil, applicationName: String, resourceLifecycleConfig: ApplicationResourceLifecycleConfig? = nil) {
            self.description = description
            self.applicationName = applicationName
            self.resourceLifecycleConfig = resourceLifecycleConfig
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case applicationName = "ApplicationName"
            case resourceLifecycleConfig = "ResourceLifecycleConfig"
        }
    }

    public enum ValidationSeverity: String, CustomStringConvertible, Codable {
        case error = "error"
        case warning = "warning"
        public var description: String { return self.rawValue }
    }

    public struct EnvironmentDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CNAME", required: false, type: .string), 
            AWSShapeMember(label: "HealthStatus", required: false, type: .enum), 
            AWSShapeMember(label: "Tier", required: false, type: .structure), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "DateCreated", required: false, type: .timestamp), 
            AWSShapeMember(label: "EnvironmentLinks", required: false, type: .list), 
            AWSShapeMember(label: "DateUpdated", required: false, type: .timestamp), 
            AWSShapeMember(label: "Health", required: false, type: .enum), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "TemplateName", required: false, type: .string), 
            AWSShapeMember(label: "Resources", required: false, type: .structure), 
            AWSShapeMember(label: "AbortableOperationInProgress", required: false, type: .boolean), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string), 
            AWSShapeMember(label: "EndpointURL", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "SolutionStackName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentArn", required: false, type: .string), 
            AWSShapeMember(label: "VersionLabel", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The URL to the CNAME for this environment.
        public let cname: String?
        /// Returns the health status of the application running in your environment. For more information, see Health Colors and Statuses.
        public let healthStatus: EnvironmentHealthStatus?
        /// Describes the current tier of this environment.
        public let tier: EnvironmentTier?
        /// The ARN of the platform.
        public let platformArn: String?
        /// The creation date for this environment.
        public let dateCreated: TimeStamp?
        /// A list of links to other environments in the same group.
        public let environmentLinks: [EnvironmentLink]?
        /// The last modified date for this environment.
        public let dateUpdated: TimeStamp?
        /// Describes the health status of the environment. AWS Elastic Beanstalk indicates the failure levels for a running environment:    Red: Indicates the environment is not responsive. Occurs when three or more consecutive failures occur for an environment.    Yellow: Indicates that something is wrong. Occurs when two consecutive failures occur for an environment.    Green: Indicates the environment is healthy and fully functional.    Grey: Default health for a new environment. The environment is not fully launched and health checks have not started or health checks are suspended during an UpdateEnvironment or RestartEnvironement request.    Default: Grey 
        public let health: EnvironmentHealth?
        /// The name of the application associated with this environment.
        public let applicationName: String?
        /// The name of the configuration template used to originally launch this environment.
        public let templateName: String?
        /// The description of the AWS resources used by this environment.
        public let resources: EnvironmentResourcesDescription?
        /// Indicates if there is an in-progress environment configuration update or application version deployment that you can cancel.  true: There is an update in progress.   false: There are no updates currently in progress. 
        public let abortableOperationInProgress: Bool?
        /// The name of this environment.
        public let environmentName: String?
        /// The ID of this environment.
        public let environmentId: String?
        /// For load-balanced, autoscaling environments, the URL to the LoadBalancer. For single-instance environments, the IP address of the instance.
        public let endpointURL: String?
        /// Describes this environment.
        public let description: String?
        ///  The name of the SolutionStack deployed with this environment. 
        public let solutionStackName: String?
        /// The environment's Amazon Resource Name (ARN), which can be used in other API requests that require an ARN.
        public let environmentArn: String?
        /// The application version deployed in this environment.
        public let versionLabel: String?
        /// The current operational status of the environment:    Launching: Environment is in the process of initial deployment.    Updating: Environment is in the process of updating its configuration settings or application version.    Ready: Environment is available to have an action performed on it, such as update or terminate.    Terminating: Environment is in the shut-down process.    Terminated: Environment is not running.  
        public let status: EnvironmentStatus?

        public init(cname: String? = nil, healthStatus: EnvironmentHealthStatus? = nil, tier: EnvironmentTier? = nil, platformArn: String? = nil, dateCreated: TimeStamp? = nil, environmentLinks: [EnvironmentLink]? = nil, dateUpdated: TimeStamp? = nil, health: EnvironmentHealth? = nil, applicationName: String? = nil, templateName: String? = nil, resources: EnvironmentResourcesDescription? = nil, abortableOperationInProgress: Bool? = nil, environmentName: String? = nil, environmentId: String? = nil, endpointURL: String? = nil, description: String? = nil, solutionStackName: String? = nil, environmentArn: String? = nil, versionLabel: String? = nil, status: EnvironmentStatus? = nil) {
            self.cname = cname
            self.healthStatus = healthStatus
            self.tier = tier
            self.platformArn = platformArn
            self.dateCreated = dateCreated
            self.environmentLinks = environmentLinks
            self.dateUpdated = dateUpdated
            self.health = health
            self.applicationName = applicationName
            self.templateName = templateName
            self.resources = resources
            self.abortableOperationInProgress = abortableOperationInProgress
            self.environmentName = environmentName
            self.environmentId = environmentId
            self.endpointURL = endpointURL
            self.description = description
            self.solutionStackName = solutionStackName
            self.environmentArn = environmentArn
            self.versionLabel = versionLabel
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case cname = "CNAME"
            case healthStatus = "HealthStatus"
            case tier = "Tier"
            case platformArn = "PlatformArn"
            case dateCreated = "DateCreated"
            case environmentLinks = "EnvironmentLinks"
            case dateUpdated = "DateUpdated"
            case health = "Health"
            case applicationName = "ApplicationName"
            case templateName = "TemplateName"
            case resources = "Resources"
            case abortableOperationInProgress = "AbortableOperationInProgress"
            case environmentName = "EnvironmentName"
            case environmentId = "EnvironmentId"
            case endpointURL = "EndpointURL"
            case description = "Description"
            case solutionStackName = "SolutionStackName"
            case environmentArn = "EnvironmentArn"
            case versionLabel = "VersionLabel"
            case status = "Status"
        }
    }

    public enum EventSeverity: String, CustomStringConvertible, Codable {
        case trace = "TRACE"
        case debug = "DEBUG"
        case info = "INFO"
        case warn = "WARN"
        case error = "ERROR"
        case fatal = "FATAL"
        public var description: String { return self.rawValue }
    }

    public struct ApplicationMetrics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Latency", required: false, type: .structure), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "StatusCodes", required: false, type: .structure), 
            AWSShapeMember(label: "RequestCount", required: false, type: .integer)
        ]
        /// Represents the average latency for the slowest X percent of requests over the last 10 seconds. Latencies are in seconds with one millisecond resolution.
        public let latency: Latency?
        /// The amount of time that the metrics cover (usually 10 seconds). For example, you might have 5 requests (request_count) within the most recent time slice of 10 seconds (duration).
        public let duration: Int32?
        /// Represents the percentage of requests over the last 10 seconds that resulted in each type of status code response.
        public let statusCodes: StatusCodes?
        /// Average number of requests handled by the web server per second over the last 10 seconds.
        public let requestCount: Int32?

        public init(latency: Latency? = nil, duration: Int32? = nil, statusCodes: StatusCodes? = nil, requestCount: Int32? = nil) {
            self.latency = latency
            self.duration = duration
            self.statusCodes = statusCodes
            self.requestCount = requestCount
        }

        private enum CodingKeys: String, CodingKey {
            case latency = "Latency"
            case duration = "Duration"
            case statusCodes = "StatusCodes"
            case requestCount = "RequestCount"
        }
    }

    public struct EnvironmentLink: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LinkName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string)
        ]
        /// The name of the link.
        public let linkName: String?
        /// The name of the linked environment (the dependency).
        public let environmentName: String?

        public init(linkName: String? = nil, environmentName: String? = nil) {
            self.linkName = linkName
            self.environmentName = environmentName
        }

        private enum CodingKeys: String, CodingKey {
            case linkName = "LinkName"
            case environmentName = "EnvironmentName"
        }
    }

    public struct DescribeApplicationsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationNames", required: false, type: .list)
        ]
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to only include those with the specified names.
        public let applicationNames: [String]?

        public init(applicationNames: [String]? = nil) {
            self.applicationNames = applicationNames
        }

        private enum CodingKeys: String, CodingKey {
            case applicationNames = "ApplicationNames"
        }
    }

    public struct OptionRestrictionRegex: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Pattern", required: false, type: .string), 
            AWSShapeMember(label: "Label", required: false, type: .string)
        ]
        /// The regular expression pattern that a string configuration option value with this restriction must match.
        public let pattern: String?
        /// A unique name representing this regular expression.
        public let label: String?

        public init(pattern: String? = nil, label: String? = nil) {
            self.pattern = pattern
            self.label = label
        }

        private enum CodingKeys: String, CodingKey {
            case pattern = "Pattern"
            case label = "Label"
        }
    }

    public struct BuildConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TimeoutInMinutes", required: false, type: .integer), 
            AWSShapeMember(label: "ComputeType", required: false, type: .enum), 
            AWSShapeMember(label: "ArtifactName", required: false, type: .string), 
            AWSShapeMember(label: "CodeBuildServiceRole", required: true, type: .string), 
            AWSShapeMember(label: "Image", required: true, type: .string)
        ]
        /// How long in minutes, from 5 to 480 (8 hours), for AWS CodeBuild to wait until timing out any related build that does not get marked as completed. The default is 60 minutes.
        public let timeoutInMinutes: Int32?
        /// Information about the compute resources the build project will use.    BUILD_GENERAL1_SMALL: Use up to 3 GB memory and 2 vCPUs for builds     BUILD_GENERAL1_MEDIUM: Use up to 7 GB memory and 4 vCPUs for builds     BUILD_GENERAL1_LARGE: Use up to 15 GB memory and 8 vCPUs for builds   
        public let computeType: ComputeType?
        /// The name of the artifact of the CodeBuild build. If provided, Elastic Beanstalk stores the build artifact in the S3 location S3-bucket/resources/application-name/codebuild/codebuild-version-label-artifact-name.zip. If not provided, Elastic Beanstalk stores the build artifact in the S3 location S3-bucket/resources/application-name/codebuild/codebuild-version-label.zip. 
        public let artifactName: String?
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that enables AWS CodeBuild to interact with dependent AWS services on behalf of the AWS account.
        public let codeBuildServiceRole: String
        /// The ID of the Docker image to use for this build project.
        public let image: String

        public init(timeoutInMinutes: Int32? = nil, computeType: ComputeType? = nil, artifactName: String? = nil, codeBuildServiceRole: String, image: String) {
            self.timeoutInMinutes = timeoutInMinutes
            self.computeType = computeType
            self.artifactName = artifactName
            self.codeBuildServiceRole = codeBuildServiceRole
            self.image = image
        }

        private enum CodingKeys: String, CodingKey {
            case timeoutInMinutes = "TimeoutInMinutes"
            case computeType = "ComputeType"
            case artifactName = "ArtifactName"
            case codeBuildServiceRole = "CodeBuildServiceRole"
            case image = "Image"
        }
    }

    public struct EnvironmentInfoDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ec2InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "InfoType", required: false, type: .enum), 
            AWSShapeMember(label: "SampleTimestamp", required: false, type: .timestamp)
        ]
        /// The Amazon EC2 Instance ID for this information.
        public let ec2InstanceId: String?
        /// The retrieved information.
        public let message: String?
        /// The type of information retrieved.
        public let infoType: EnvironmentInfoType?
        /// The time stamp when this information was retrieved.
        public let sampleTimestamp: TimeStamp?

        public init(ec2InstanceId: String? = nil, message: String? = nil, infoType: EnvironmentInfoType? = nil, sampleTimestamp: TimeStamp? = nil) {
            self.ec2InstanceId = ec2InstanceId
            self.message = message
            self.infoType = infoType
            self.sampleTimestamp = sampleTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case ec2InstanceId = "Ec2InstanceId"
            case message = "Message"
            case infoType = "InfoType"
            case sampleTimestamp = "SampleTimestamp"
        }
    }

    public struct AbortEnvironmentUpdateMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string)
        ]
        /// This specifies the name of the environment with the in-progress update that you want to cancel.
        public let environmentName: String?
        /// This specifies the ID of the environment with the in-progress update that you want to cancel.
        public let environmentId: String?

        public init(environmentName: String? = nil, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.environmentId = environmentId
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case environmentId = "EnvironmentId"
        }
    }

    public struct SystemStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CPUUtilization", required: false, type: .structure), 
            AWSShapeMember(label: "LoadAverage", required: false, type: .list)
        ]
        /// CPU utilization metrics for the instance.
        public let cPUUtilization: CPUUtilization?
        /// Load average in the last 1-minute, 5-minute, and 15-minute periods. For more information, see Operating System Metrics.
        public let loadAverage: [Double]?

        public init(cPUUtilization: CPUUtilization? = nil, loadAverage: [Double]? = nil) {
            self.cPUUtilization = cPUUtilization
            self.loadAverage = loadAverage
        }

        private enum CodingKeys: String, CodingKey {
            case cPUUtilization = "CPUUtilization"
            case loadAverage = "LoadAverage"
        }
    }

    public struct UpdateEnvironmentMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupName", required: false, type: .string), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string), 
            AWSShapeMember(label: "OptionSettings", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "TemplateName", required: false, type: .string), 
            AWSShapeMember(label: "OptionsToRemove", required: false, type: .list), 
            AWSShapeMember(label: "Tier", required: false, type: .structure), 
            AWSShapeMember(label: "SolutionStackName", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "VersionLabel", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string)
        ]
        /// The name of the group to which the target environment belongs. Specify a group name only if the environment's name is specified in an environment manifest and not with the environment name or environment ID parameters. See Environment Manifest (env.yaml) for details.
        public let groupName: String?
        /// The ARN of the platform, if used.
        public let platformArn: String?
        /// The ID of the environment to update. If no environment with this ID exists, AWS Elastic Beanstalk returns an InvalidParameterValue error. Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentId: String?
        /// If specified, AWS Elastic Beanstalk updates the configuration set associated with the running environment and sets the specified configuration options to the requested value.
        public let optionSettings: [ConfigurationOptionSetting]?
        /// The name of the application with which the environment is associated.
        public let applicationName: String?
        /// If this parameter is specified, AWS Elastic Beanstalk deploys this configuration template to the environment. If no such configuration template is found, AWS Elastic Beanstalk returns an InvalidParameterValue error. 
        public let templateName: String?
        /// A list of custom user-defined configuration options to remove from the configuration set for this environment.
        public let optionsToRemove: [OptionSpecification]?
        /// This specifies the tier to use to update the environment. Condition: At this time, if you change the tier version, name, or type, AWS Elastic Beanstalk returns InvalidParameterValue error. 
        public let tier: EnvironmentTier?
        /// This specifies the platform version that the environment will run after the environment is updated.
        public let solutionStackName: String?
        /// If this parameter is specified, AWS Elastic Beanstalk updates the description of this environment.
        public let description: String?
        /// If this parameter is specified, AWS Elastic Beanstalk deploys the named application version to the environment. If no such application version is found, returns an InvalidParameterValue error. 
        public let versionLabel: String?
        /// The name of the environment to update. If no environment with this name exists, AWS Elastic Beanstalk returns an InvalidParameterValue error.  Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentName: String?

        public init(groupName: String? = nil, platformArn: String? = nil, environmentId: String? = nil, optionSettings: [ConfigurationOptionSetting]? = nil, applicationName: String? = nil, templateName: String? = nil, optionsToRemove: [OptionSpecification]? = nil, tier: EnvironmentTier? = nil, solutionStackName: String? = nil, description: String? = nil, versionLabel: String? = nil, environmentName: String? = nil) {
            self.groupName = groupName
            self.platformArn = platformArn
            self.environmentId = environmentId
            self.optionSettings = optionSettings
            self.applicationName = applicationName
            self.templateName = templateName
            self.optionsToRemove = optionsToRemove
            self.tier = tier
            self.solutionStackName = solutionStackName
            self.description = description
            self.versionLabel = versionLabel
            self.environmentName = environmentName
        }

        private enum CodingKeys: String, CodingKey {
            case groupName = "GroupName"
            case platformArn = "PlatformArn"
            case environmentId = "EnvironmentId"
            case optionSettings = "OptionSettings"
            case applicationName = "ApplicationName"
            case templateName = "TemplateName"
            case optionsToRemove = "OptionsToRemove"
            case tier = "Tier"
            case solutionStackName = "SolutionStackName"
            case description = "Description"
            case versionLabel = "VersionLabel"
            case environmentName = "EnvironmentName"
        }
    }

    public struct SourceBuildInformation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceLocation", required: true, type: .string), 
            AWSShapeMember(label: "SourceType", required: true, type: .enum), 
            AWSShapeMember(label: "SourceRepository", required: true, type: .enum)
        ]
        /// The location of the source code, as a formatted string, depending on the value of SourceRepository    For CodeCommit, the format is the repository name and commit ID, separated by a forward slash. For example, my-git-repo/265cfa0cf6af46153527f55d6503ec030551f57a.   For S3, the format is the S3 bucket name and object key, separated by a forward slash. For example, my-s3-bucket/Folders/my-source-file.  
        public let sourceLocation: String
        /// The type of repository.    Git     Zip   
        public let sourceType: SourceType
        /// Location where the repository is stored.    CodeCommit     S3   
        public let sourceRepository: SourceRepository

        public init(sourceLocation: String, sourceType: SourceType, sourceRepository: SourceRepository) {
            self.sourceLocation = sourceLocation
            self.sourceType = sourceType
            self.sourceRepository = sourceRepository
        }

        private enum CodingKeys: String, CodingKey {
            case sourceLocation = "SourceLocation"
            case sourceType = "SourceType"
            case sourceRepository = "SourceRepository"
        }
    }

    public struct RestartAppServerMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string)
        ]
        /// The name of the environment to restart the server for.  Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentName: String?
        /// The ID of the environment to restart the server for.  Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentId: String?

        public init(environmentName: String? = nil, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.environmentId = environmentId
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case environmentId = "EnvironmentId"
        }
    }

    public struct CreateApplicationVersionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceBundle", required: false, type: .structure), 
            AWSShapeMember(label: "BuildConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Process", required: false, type: .boolean), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "SourceBuildInformation", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "VersionLabel", required: true, type: .string), 
            AWSShapeMember(label: "AutoCreateApplication", required: false, type: .boolean)
        ]
        /// The Amazon S3 bucket and key that identify the location of the source bundle for this version.  The Amazon S3 bucket must be in the same region as the environment.  Specify a source bundle in S3 or a commit in an AWS CodeCommit repository (with SourceBuildInformation), but not both. If neither SourceBundle nor SourceBuildInformation are provided, Elastic Beanstalk uses a sample application.
        public let sourceBundle: S3Location?
        /// Settings for an AWS CodeBuild build.
        public let buildConfiguration: BuildConfiguration?
        /// Pre-processes and validates the environment manifest (env.yaml) and configuration files (*.config files in the .ebextensions folder) in the source bundle. Validating configuration files can identify issues prior to deploying the application version to an environment. You must turn processing on for application versions that you create using AWS CodeBuild or AWS CodeCommit. For application versions built from a source bundle in Amazon S3, processing is optional.  The Process option validates Elastic Beanstalk configuration files. It doesn't validate your application's configuration files, like proxy server or Docker configuration. 
        public let process: Bool?
        ///  The name of the application. If no application is found with this name, and AutoCreateApplication is false, returns an InvalidParameterValue error. 
        public let applicationName: String
        /// Specify a commit in an AWS CodeCommit Git repository to use as the source code for the application version.
        public let sourceBuildInformation: SourceBuildInformation?
        /// Describes this version.
        public let description: String?
        /// A label identifying this version. Constraint: Must be unique per application. If an application version already exists with this label for the specified application, AWS Elastic Beanstalk returns an InvalidParameterValue error. 
        public let versionLabel: String
        /// Set to true to create an application with the specified name if it doesn't already exist.
        public let autoCreateApplication: Bool?

        public init(sourceBundle: S3Location? = nil, buildConfiguration: BuildConfiguration? = nil, process: Bool? = nil, applicationName: String, sourceBuildInformation: SourceBuildInformation? = nil, description: String? = nil, versionLabel: String, autoCreateApplication: Bool? = nil) {
            self.sourceBundle = sourceBundle
            self.buildConfiguration = buildConfiguration
            self.process = process
            self.applicationName = applicationName
            self.sourceBuildInformation = sourceBuildInformation
            self.description = description
            self.versionLabel = versionLabel
            self.autoCreateApplication = autoCreateApplication
        }

        private enum CodingKeys: String, CodingKey {
            case sourceBundle = "SourceBundle"
            case buildConfiguration = "BuildConfiguration"
            case process = "Process"
            case applicationName = "ApplicationName"
            case sourceBuildInformation = "SourceBuildInformation"
            case description = "Description"
            case versionLabel = "VersionLabel"
            case autoCreateApplication = "AutoCreateApplication"
        }
    }

    public struct ValidationMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "Severity", required: false, type: .enum), 
            AWSShapeMember(label: "Namespace", required: false, type: .string), 
            AWSShapeMember(label: "OptionName", required: false, type: .string)
        ]
        /// A message describing the error or warning.
        public let message: String?
        /// An indication of the severity of this message:    error: This message indicates that this is not a valid setting for an option.    warning: This message is providing information you should take into account.  
        public let severity: ValidationSeverity?
        /// The namespace to which the option belongs.
        public let namespace: String?
        /// The name of the option.
        public let optionName: String?

        public init(message: String? = nil, severity: ValidationSeverity? = nil, namespace: String? = nil, optionName: String? = nil) {
            self.message = message
            self.severity = severity
            self.namespace = namespace
            self.optionName = optionName
        }

        private enum CodingKeys: String, CodingKey {
            case message = "Message"
            case severity = "Severity"
            case namespace = "Namespace"
            case optionName = "OptionName"
        }
    }

    public struct EnvironmentResourcesDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancer", required: false, type: .structure)
        ]
        /// Describes the LoadBalancer.
        public let loadBalancer: LoadBalancerDescription?

        public init(loadBalancer: LoadBalancerDescription? = nil) {
            self.loadBalancer = loadBalancer
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancer = "LoadBalancer"
        }
    }

    public struct SwapEnvironmentCNAMEsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceEnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "DestinationEnvironmentId", required: false, type: .string), 
            AWSShapeMember(label: "SourceEnvironmentId", required: false, type: .string), 
            AWSShapeMember(label: "DestinationEnvironmentName", required: false, type: .string)
        ]
        /// The name of the source environment.  Condition: You must specify at least the SourceEnvironmentID or the SourceEnvironmentName. You may also specify both. If you specify the SourceEnvironmentName, you must specify the DestinationEnvironmentName. 
        public let sourceEnvironmentName: String?
        /// The ID of the destination environment.  Condition: You must specify at least the DestinationEnvironmentID or the DestinationEnvironmentName. You may also specify both. You must specify the SourceEnvironmentId with the DestinationEnvironmentId. 
        public let destinationEnvironmentId: String?
        /// The ID of the source environment.  Condition: You must specify at least the SourceEnvironmentID or the SourceEnvironmentName. You may also specify both. If you specify the SourceEnvironmentId, you must specify the DestinationEnvironmentId. 
        public let sourceEnvironmentId: String?
        /// The name of the destination environment.  Condition: You must specify at least the DestinationEnvironmentID or the DestinationEnvironmentName. You may also specify both. You must specify the SourceEnvironmentName with the DestinationEnvironmentName. 
        public let destinationEnvironmentName: String?

        public init(sourceEnvironmentName: String? = nil, destinationEnvironmentId: String? = nil, sourceEnvironmentId: String? = nil, destinationEnvironmentName: String? = nil) {
            self.sourceEnvironmentName = sourceEnvironmentName
            self.destinationEnvironmentId = destinationEnvironmentId
            self.sourceEnvironmentId = sourceEnvironmentId
            self.destinationEnvironmentName = destinationEnvironmentName
        }

        private enum CodingKeys: String, CodingKey {
            case sourceEnvironmentName = "SourceEnvironmentName"
            case destinationEnvironmentId = "DestinationEnvironmentId"
            case sourceEnvironmentId = "SourceEnvironmentId"
            case destinationEnvironmentName = "DestinationEnvironmentName"
        }
    }

    public struct CheckDNSAvailabilityMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CNAMEPrefix", required: true, type: .string)
        ]
        /// The prefix used when this CNAME is reserved.
        public let cNAMEPrefix: String

        public init(cNAMEPrefix: String) {
            self.cNAMEPrefix = cNAMEPrefix
        }

        private enum CodingKeys: String, CodingKey {
            case cNAMEPrefix = "CNAMEPrefix"
        }
    }

    public enum ActionType: String, CustomStringConvertible, Codable {
        case instancerefresh = "InstanceRefresh"
        case platformupdate = "PlatformUpdate"
        case unknown = "Unknown"
        public var description: String { return self.rawValue }
    }

    public struct ResourceTagsDescriptionMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceTags", required: false, type: .list), 
            AWSShapeMember(label: "ResourceArn", required: false, type: .string)
        ]
        /// A list of tag key-value pairs.
        public let resourceTags: [Tag]?
        /// The Amazon Resource Name (ARN) of the resouce for which a tag list was requested.
        public let resourceArn: String?

        public init(resourceTags: [Tag]? = nil, resourceArn: String? = nil) {
            self.resourceTags = resourceTags
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceTags = "ResourceTags"
            case resourceArn = "ResourceArn"
        }
    }

    public enum ApplicationVersionStatus: String, CustomStringConvertible, Codable {
        case processed = "Processed"
        case unprocessed = "Unprocessed"
        case failed = "Failed"
        case processing = "Processing"
        case building = "Building"
        public var description: String { return self.rawValue }
    }

    public struct PlatformDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformName", required: false, type: .string), 
            AWSShapeMember(label: "Frameworks", required: false, type: .list), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "DateCreated", required: false, type: .timestamp), 
            AWSShapeMember(label: "ProgrammingLanguages", required: false, type: .list), 
            AWSShapeMember(label: "CustomAmiList", required: false, type: .list), 
            AWSShapeMember(label: "PlatformStatus", required: false, type: .enum), 
            AWSShapeMember(label: "PlatformVersion", required: false, type: .string), 
            AWSShapeMember(label: "DateUpdated", required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "SolutionStackName", required: false, type: .string), 
            AWSShapeMember(label: "Maintainer", required: false, type: .string), 
            AWSShapeMember(label: "PlatformOwner", required: false, type: .string), 
            AWSShapeMember(label: "OperatingSystemVersion", required: false, type: .string), 
            AWSShapeMember(label: "PlatformCategory", required: false, type: .string), 
            AWSShapeMember(label: "SupportedTierList", required: false, type: .list), 
            AWSShapeMember(label: "OperatingSystemName", required: false, type: .string), 
            AWSShapeMember(label: "SupportedAddonList", required: false, type: .list)
        ]
        /// The name of the platform.
        public let platformName: String?
        /// The frameworks supported by the platform.
        public let frameworks: [PlatformFramework]?
        /// The ARN of the platform.
        public let platformArn: String?
        /// The date when the platform was created.
        public let dateCreated: TimeStamp?
        /// The programming languages supported by the platform.
        public let programmingLanguages: [PlatformProgrammingLanguage]?
        /// The custom AMIs supported by the platform.
        public let customAmiList: [CustomAmi]?
        /// The status of the platform.
        public let platformStatus: PlatformStatus?
        /// The version of the platform.
        public let platformVersion: String?
        /// The date when the platform was last updated.
        public let dateUpdated: TimeStamp?
        /// The description of the platform.
        public let description: String?
        /// The name of the solution stack used by the platform.
        public let solutionStackName: String?
        /// Information about the maintainer of the platform.
        public let maintainer: String?
        /// The AWS account ID of the person who created the platform.
        public let platformOwner: String?
        /// The version of the operating system used by the platform.
        public let operatingSystemVersion: String?
        /// The category of the platform.
        public let platformCategory: String?
        /// The tiers supported by the platform.
        public let supportedTierList: [String]?
        /// The operating system used by the platform.
        public let operatingSystemName: String?
        /// The additions supported by the platform.
        public let supportedAddonList: [String]?

        public init(platformName: String? = nil, frameworks: [PlatformFramework]? = nil, platformArn: String? = nil, dateCreated: TimeStamp? = nil, programmingLanguages: [PlatformProgrammingLanguage]? = nil, customAmiList: [CustomAmi]? = nil, platformStatus: PlatformStatus? = nil, platformVersion: String? = nil, dateUpdated: TimeStamp? = nil, description: String? = nil, solutionStackName: String? = nil, maintainer: String? = nil, platformOwner: String? = nil, operatingSystemVersion: String? = nil, platformCategory: String? = nil, supportedTierList: [String]? = nil, operatingSystemName: String? = nil, supportedAddonList: [String]? = nil) {
            self.platformName = platformName
            self.frameworks = frameworks
            self.platformArn = platformArn
            self.dateCreated = dateCreated
            self.programmingLanguages = programmingLanguages
            self.customAmiList = customAmiList
            self.platformStatus = platformStatus
            self.platformVersion = platformVersion
            self.dateUpdated = dateUpdated
            self.description = description
            self.solutionStackName = solutionStackName
            self.maintainer = maintainer
            self.platformOwner = platformOwner
            self.operatingSystemVersion = operatingSystemVersion
            self.platformCategory = platformCategory
            self.supportedTierList = supportedTierList
            self.operatingSystemName = operatingSystemName
            self.supportedAddonList = supportedAddonList
        }

        private enum CodingKeys: String, CodingKey {
            case platformName = "PlatformName"
            case frameworks = "Frameworks"
            case platformArn = "PlatformArn"
            case dateCreated = "DateCreated"
            case programmingLanguages = "ProgrammingLanguages"
            case customAmiList = "CustomAmiList"
            case platformStatus = "PlatformStatus"
            case platformVersion = "PlatformVersion"
            case dateUpdated = "DateUpdated"
            case description = "Description"
            case solutionStackName = "SolutionStackName"
            case maintainer = "Maintainer"
            case platformOwner = "PlatformOwner"
            case operatingSystemVersion = "OperatingSystemVersion"
            case platformCategory = "PlatformCategory"
            case supportedTierList = "SupportedTierList"
            case operatingSystemName = "OperatingSystemName"
            case supportedAddonList = "SupportedAddonList"
        }
    }

    public struct LaunchConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the launch configuration.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct ResourceQuotas: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationQuota", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationVersionQuota", required: false, type: .structure), 
            AWSShapeMember(label: "CustomPlatformQuota", required: false, type: .structure), 
            AWSShapeMember(label: "ConfigurationTemplateQuota", required: false, type: .structure), 
            AWSShapeMember(label: "EnvironmentQuota", required: false, type: .structure)
        ]
        /// The quota for applications in the AWS account.
        public let applicationQuota: ResourceQuota?
        /// The quota for application versions in the AWS account.
        public let applicationVersionQuota: ResourceQuota?
        /// The quota for custom platforms in the AWS account.
        public let customPlatformQuota: ResourceQuota?
        /// The quota for configuration templates in the AWS account.
        public let configurationTemplateQuota: ResourceQuota?
        /// The quota for environments in the AWS account.
        public let environmentQuota: ResourceQuota?

        public init(applicationQuota: ResourceQuota? = nil, applicationVersionQuota: ResourceQuota? = nil, customPlatformQuota: ResourceQuota? = nil, configurationTemplateQuota: ResourceQuota? = nil, environmentQuota: ResourceQuota? = nil) {
            self.applicationQuota = applicationQuota
            self.applicationVersionQuota = applicationVersionQuota
            self.customPlatformQuota = customPlatformQuota
            self.configurationTemplateQuota = configurationTemplateQuota
            self.environmentQuota = environmentQuota
        }

        private enum CodingKeys: String, CodingKey {
            case applicationQuota = "ApplicationQuota"
            case applicationVersionQuota = "ApplicationVersionQuota"
            case customPlatformQuota = "CustomPlatformQuota"
            case configurationTemplateQuota = "ConfigurationTemplateQuota"
            case environmentQuota = "EnvironmentQuota"
        }
    }

    public struct SolutionStackDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SolutionStackName", required: false, type: .string), 
            AWSShapeMember(label: "PermittedFileTypes", required: false, type: .list)
        ]
        /// The name of the solution stack.
        public let solutionStackName: String?
        /// The permitted file types allowed for a solution stack.
        public let permittedFileTypes: [String]?

        public init(solutionStackName: String? = nil, permittedFileTypes: [String]? = nil) {
            self.solutionStackName = solutionStackName
            self.permittedFileTypes = permittedFileTypes
        }

        private enum CodingKeys: String, CodingKey {
            case solutionStackName = "SolutionStackName"
            case permittedFileTypes = "PermittedFileTypes"
        }
    }

    public struct ApplicationVersionLifecycleConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxCountRule", required: false, type: .structure), 
            AWSShapeMember(label: "MaxAgeRule", required: false, type: .structure)
        ]
        /// Specify a max count rule to restrict the number of application versions that are retained for an application.
        public let maxCountRule: MaxCountRule?
        /// Specify a max age rule to restrict the length of time that application versions are retained for an application.
        public let maxAgeRule: MaxAgeRule?

        public init(maxCountRule: MaxCountRule? = nil, maxAgeRule: MaxAgeRule? = nil) {
            self.maxCountRule = maxCountRule
            self.maxAgeRule = maxAgeRule
        }

        private enum CodingKeys: String, CodingKey {
            case maxCountRule = "MaxCountRule"
            case maxAgeRule = "MaxAgeRule"
        }
    }

    public struct UpdateApplicationMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// A new description for the application. Default: If not specified, AWS Elastic Beanstalk does not update the description.
        public let description: String?
        /// The name of the application to update. If no such application is found, UpdateApplication returns an InvalidParameterValue error. 
        public let applicationName: String

        public init(description: String? = nil, applicationName: String) {
            self.description = description
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case applicationName = "ApplicationName"
        }
    }

    public struct S3Location: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Bucket", required: false, type: .string), 
            AWSShapeMember(label: "S3Key", required: false, type: .string)
        ]
        /// The Amazon S3 bucket where the data is located.
        public let s3Bucket: String?
        /// The Amazon S3 key where the data is located.
        public let s3Key: String?

        public init(s3Bucket: String? = nil, s3Key: String? = nil) {
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
        }

        private enum CodingKeys: String, CodingKey {
            case s3Bucket = "S3Bucket"
            case s3Key = "S3Key"
        }
    }

    public struct Builder: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ARN", required: false, type: .string)
        ]
        /// The ARN of the builder.
        public let arn: String?

        public init(arn: String? = nil) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
        }
    }

    public struct EnvironmentTier: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The type of this environment tier.
        public let `type`: String?
        /// The version of this environment tier. When you don't set a value to it, Elastic Beanstalk uses the latest compatible worker tier version.  This member is deprecated. Any specific version that you set may become out of date. We recommend leaving it unspecified. 
        public let version: String?
        /// The name of this environment tier.
        public let name: String?

        public init(type: String? = nil, version: String? = nil, name: String? = nil) {
            self.`type` = `type`
            self.version = version
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case version = "Version"
            case name = "Name"
        }
    }

    public struct ApplicationDescriptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Applications", required: false, type: .list)
        ]
        /// This parameter contains a list of ApplicationDescription.
        public let applications: [ApplicationDescription]?

        public init(applications: [ApplicationDescription]? = nil) {
            self.applications = applications
        }

        private enum CodingKeys: String, CodingKey {
            case applications = "Applications"
        }
    }

    public struct ValidateConfigurationSettingsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationName", required: true, type: .string), 
            AWSShapeMember(label: "OptionSettings", required: true, type: .list), 
            AWSShapeMember(label: "TemplateName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string)
        ]
        /// The name of the application that the configuration template or environment belongs to.
        public let applicationName: String
        /// A list of the options and desired values to evaluate.
        public let optionSettings: [ConfigurationOptionSetting]
        /// The name of the configuration template to validate the settings against. Condition: You cannot specify both this and an environment name.
        public let templateName: String?
        /// The name of the environment to validate the settings against. Condition: You cannot specify both this and a configuration template name.
        public let environmentName: String?

        public init(applicationName: String, optionSettings: [ConfigurationOptionSetting], templateName: String? = nil, environmentName: String? = nil) {
            self.applicationName = applicationName
            self.optionSettings = optionSettings
            self.templateName = templateName
            self.environmentName = environmentName
        }

        private enum CodingKeys: String, CodingKey {
            case applicationName = "ApplicationName"
            case optionSettings = "OptionSettings"
            case templateName = "TemplateName"
            case environmentName = "EnvironmentName"
        }
    }

    public enum EnvironmentStatus: String, CustomStringConvertible, Codable {
        case launching = "Launching"
        case updating = "Updating"
        case ready = "Ready"
        case terminating = "Terminating"
        case terminated = "Terminated"
        public var description: String { return self.rawValue }
    }

    public struct ConfigurationOptionSetting: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "ResourceName", required: false, type: .string), 
            AWSShapeMember(label: "Namespace", required: false, type: .string), 
            AWSShapeMember(label: "OptionName", required: false, type: .string)
        ]
        /// The current value for the configuration option.
        public let value: String?
        /// A unique resource name for a time-based scaling configuration option.
        public let resourceName: String?
        /// A unique namespace identifying the option's associated AWS resource.
        public let namespace: String?
        /// The name of the configuration option.
        public let optionName: String?

        public init(value: String? = nil, resourceName: String? = nil, namespace: String? = nil, optionName: String? = nil) {
            self.value = value
            self.resourceName = resourceName
            self.namespace = namespace
            self.optionName = optionName
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case resourceName = "ResourceName"
            case namespace = "Namespace"
            case optionName = "OptionName"
        }
    }

    public struct ApplicationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Versions", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationArn", required: false, type: .string), 
            AWSShapeMember(label: "ConfigurationTemplates", required: false, type: .list), 
            AWSShapeMember(label: "DateCreated", required: false, type: .timestamp), 
            AWSShapeMember(label: "DateUpdated", required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ResourceLifecycleConfig", required: false, type: .structure)
        ]
        /// The names of the versions for this application.
        public let versions: [String]?
        /// The name of the application.
        public let applicationName: String?
        /// The Amazon Resource Name (ARN) of the application.
        public let applicationArn: String?
        /// The names of the configuration templates associated with this application.
        public let configurationTemplates: [String]?
        /// The date when the application was created.
        public let dateCreated: TimeStamp?
        /// The date when the application was last modified.
        public let dateUpdated: TimeStamp?
        /// User-defined description of the application.
        public let description: String?
        /// The lifecycle settings for the application.
        public let resourceLifecycleConfig: ApplicationResourceLifecycleConfig?

        public init(versions: [String]? = nil, applicationName: String? = nil, applicationArn: String? = nil, configurationTemplates: [String]? = nil, dateCreated: TimeStamp? = nil, dateUpdated: TimeStamp? = nil, description: String? = nil, resourceLifecycleConfig: ApplicationResourceLifecycleConfig? = nil) {
            self.versions = versions
            self.applicationName = applicationName
            self.applicationArn = applicationArn
            self.configurationTemplates = configurationTemplates
            self.dateCreated = dateCreated
            self.dateUpdated = dateUpdated
            self.description = description
            self.resourceLifecycleConfig = resourceLifecycleConfig
        }

        private enum CodingKeys: String, CodingKey {
            case versions = "Versions"
            case applicationName = "ApplicationName"
            case applicationArn = "ApplicationArn"
            case configurationTemplates = "ConfigurationTemplates"
            case dateCreated = "DateCreated"
            case dateUpdated = "DateUpdated"
            case description = "Description"
            case resourceLifecycleConfig = "ResourceLifecycleConfig"
        }
    }

    public struct RequestEnvironmentInfoMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InfoType", required: true, type: .enum), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string)
        ]
        /// The type of information to request.
        public let infoType: EnvironmentInfoType
        /// The name of the environment of the requested data. If no such environment is found, RequestEnvironmentInfo returns an InvalidParameterValue error.  Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentName: String?
        /// The ID of the environment of the requested data. If no such environment is found, RequestEnvironmentInfo returns an InvalidParameterValue error.  Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentId: String?

        public init(infoType: EnvironmentInfoType, environmentName: String? = nil, environmentId: String? = nil) {
            self.infoType = infoType
            self.environmentName = environmentName
            self.environmentId = environmentId
        }

        private enum CodingKeys: String, CodingKey {
            case infoType = "InfoType"
            case environmentName = "EnvironmentName"
            case environmentId = "EnvironmentId"
        }
    }

    public struct DescribeEnvironmentResourcesMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string)
        ]
        /// The name of the environment to retrieve AWS resource usage data.  Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentName: String?
        /// The ID of the environment to retrieve AWS resource usage data.  Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentId: String?

        public init(environmentName: String? = nil, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.environmentId = environmentId
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case environmentId = "EnvironmentId"
        }
    }

    public struct ConfigurationSettingsValidationMessages: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Messages", required: false, type: .list)
        ]
        ///  A list of ValidationMessage. 
        public let messages: [ValidationMessage]?

        public init(messages: [ValidationMessage]? = nil) {
            self.messages = messages
        }

        private enum CodingKeys: String, CodingKey {
            case messages = "Messages"
        }
    }

    public enum EnvironmentHealthStatus: String, CustomStringConvertible, Codable {
        case nodata = "NoData"
        case unknown = "Unknown"
        case pending = "Pending"
        case ok = "Ok"
        case info = "Info"
        case warning = "Warning"
        case degraded = "Degraded"
        case severe = "Severe"
        case suspended = "Suspended"
        public var description: String { return self.rawValue }
    }

    public struct LoadBalancerDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Domain", required: false, type: .string), 
            AWSShapeMember(label: "LoadBalancerName", required: false, type: .string), 
            AWSShapeMember(label: "Listeners", required: false, type: .list)
        ]
        /// The domain name of the LoadBalancer.
        public let domain: String?
        /// The name of the LoadBalancer.
        public let loadBalancerName: String?
        /// A list of Listeners used by the LoadBalancer.
        public let listeners: [Listener]?

        public init(domain: String? = nil, loadBalancerName: String? = nil, listeners: [Listener]? = nil) {
            self.domain = domain
            self.loadBalancerName = loadBalancerName
            self.listeners = listeners
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "Domain"
            case loadBalancerName = "LoadBalancerName"
            case listeners = "Listeners"
        }
    }

    public struct ListAvailableSolutionStacksResultMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SolutionStacks", required: false, type: .list), 
            AWSShapeMember(label: "SolutionStackDetails", required: false, type: .list)
        ]
        /// A list of available solution stacks.
        public let solutionStacks: [String]?
        ///  A list of available solution stacks and their SolutionStackDescription. 
        public let solutionStackDetails: [SolutionStackDescription]?

        public init(solutionStacks: [String]? = nil, solutionStackDetails: [SolutionStackDescription]? = nil) {
            self.solutionStacks = solutionStacks
            self.solutionStackDetails = solutionStackDetails
        }

        private enum CodingKeys: String, CodingKey {
            case solutionStacks = "SolutionStacks"
            case solutionStackDetails = "SolutionStackDetails"
        }
    }

    public struct DescribeEventsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "TemplateName", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "RequestId", required: false, type: .string), 
            AWSShapeMember(label: "VersionLabel", required: false, type: .string), 
            AWSShapeMember(label: "Severity", required: false, type: .enum)
        ]
        /// Specifies the maximum number of events that can be returned, beginning with the most recent event.
        public let maxRecords: Int32?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment.
        public let environmentName: String?
        /// The ARN of the version of the custom platform.
        public let platformArn: String?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this environment.
        public let environmentId: String?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to include only those associated with this application.
        public let applicationName: String?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that are associated with this environment configuration.
        public let templateName: String?
        /// Pagination token. If specified, the events return the next batch of results.
        public let nextToken: String?
        ///  If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur up to, but not including, the EndTime. 
        public let endTime: TimeStamp?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those that occur on or after this time.
        public let startTime: TimeStamp?
        /// If specified, AWS Elastic Beanstalk restricts the described events to include only those associated with this request ID.
        public let requestId: String?
        /// If specified, AWS Elastic Beanstalk restricts the returned descriptions to those associated with this application version.
        public let versionLabel: String?
        /// If specified, limits the events returned from this call to include only those with the specified severity or higher.
        public let severity: EventSeverity?

        public init(maxRecords: Int32? = nil, environmentName: String? = nil, platformArn: String? = nil, environmentId: String? = nil, applicationName: String? = nil, templateName: String? = nil, nextToken: String? = nil, endTime: TimeStamp? = nil, startTime: TimeStamp? = nil, requestId: String? = nil, versionLabel: String? = nil, severity: EventSeverity? = nil) {
            self.maxRecords = maxRecords
            self.environmentName = environmentName
            self.platformArn = platformArn
            self.environmentId = environmentId
            self.applicationName = applicationName
            self.templateName = templateName
            self.nextToken = nextToken
            self.endTime = endTime
            self.startTime = startTime
            self.requestId = requestId
            self.versionLabel = versionLabel
            self.severity = severity
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case environmentName = "EnvironmentName"
            case platformArn = "PlatformArn"
            case environmentId = "EnvironmentId"
            case applicationName = "ApplicationName"
            case templateName = "TemplateName"
            case nextToken = "NextToken"
            case endTime = "EndTime"
            case startTime = "StartTime"
            case requestId = "RequestId"
            case versionLabel = "VersionLabel"
            case severity = "Severity"
        }
    }

    public struct DescribeEnvironmentManagedActionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string)
        ]
        /// The name of the target environment.
        public let environmentName: String?
        /// To show only actions with a particular status, specify a status.
        public let status: ActionStatus?
        /// The environment ID of the target environment.
        public let environmentId: String?

        public init(environmentName: String? = nil, status: ActionStatus? = nil, environmentId: String? = nil) {
            self.environmentName = environmentName
            self.status = status
            self.environmentId = environmentId
        }

        private enum CodingKeys: String, CodingKey {
            case environmentName = "EnvironmentName"
            case status = "Status"
            case environmentId = "EnvironmentId"
        }
    }

    public struct CreatePlatformVersionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformSummary", required: false, type: .structure), 
            AWSShapeMember(label: "Builder", required: false, type: .structure)
        ]
        /// Detailed information about the new version of the custom platform.
        public let platformSummary: PlatformSummary?
        /// The builder used to create the custom platform.
        public let builder: Builder?

        public init(platformSummary: PlatformSummary? = nil, builder: Builder? = nil) {
            self.platformSummary = platformSummary
            self.builder = builder
        }

        private enum CodingKeys: String, CodingKey {
            case platformSummary = "PlatformSummary"
            case builder = "Builder"
        }
    }

    public struct MaxAgeRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxAgeInDays", required: false, type: .integer), 
            AWSShapeMember(label: "DeleteSourceFromS3", required: false, type: .boolean), 
            AWSShapeMember(label: "Enabled", required: true, type: .boolean)
        ]
        /// Specify the number of days to retain an application versions.
        public let maxAgeInDays: Int32?
        /// Set to true to delete a version's source bundle from Amazon S3 when Elastic Beanstalk deletes the application version.
        public let deleteSourceFromS3: Bool?
        /// Specify true to apply the rule, or false to disable it.
        public let enabled: Bool

        public init(maxAgeInDays: Int32? = nil, deleteSourceFromS3: Bool? = nil, enabled: Bool) {
            self.maxAgeInDays = maxAgeInDays
            self.deleteSourceFromS3 = deleteSourceFromS3
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case maxAgeInDays = "MaxAgeInDays"
            case deleteSourceFromS3 = "DeleteSourceFromS3"
            case enabled = "Enabled"
        }
    }

    public struct DeleteConfigurationTemplateMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TemplateName", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationName", required: true, type: .string)
        ]
        /// The name of the configuration template to delete.
        public let templateName: String
        /// The name of the application to delete the configuration template from.
        public let applicationName: String

        public init(templateName: String, applicationName: String) {
            self.templateName = templateName
            self.applicationName = applicationName
        }

        private enum CodingKeys: String, CodingKey {
            case templateName = "TemplateName"
            case applicationName = "ApplicationName"
        }
    }

    public struct CheckDNSAvailabilityResultMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Available", required: false, type: .boolean), 
            AWSShapeMember(label: "FullyQualifiedCNAME", required: false, type: .string)
        ]
        /// Indicates if the specified CNAME is available:    true : The CNAME is available.    false : The CNAME is not available.  
        public let available: Bool?
        /// The fully qualified CNAME to reserve when CreateEnvironment is called with the provided prefix.
        public let fullyQualifiedCNAME: String?

        public init(available: Bool? = nil, fullyQualifiedCNAME: String? = nil) {
            self.available = available
            self.fullyQualifiedCNAME = fullyQualifiedCNAME
        }

        private enum CodingKeys: String, CodingKey {
            case available = "Available"
            case fullyQualifiedCNAME = "FullyQualifiedCNAME"
        }
    }

    public struct InstanceHealthSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Ok", required: false, type: .integer), 
            AWSShapeMember(label: "Degraded", required: false, type: .integer), 
            AWSShapeMember(label: "Warning", required: false, type: .integer), 
            AWSShapeMember(label: "NoData", required: false, type: .integer), 
            AWSShapeMember(label: "Severe", required: false, type: .integer), 
            AWSShapeMember(label: "Pending", required: false, type: .integer), 
            AWSShapeMember(label: "Unknown", required: false, type: .integer), 
            AWSShapeMember(label: "Info", required: false, type: .integer)
        ]
        ///  Green. An instance is passing health checks and the health agent is not reporting any problems.
        public let ok: Int32?
        ///  Red. The health agent is reporting a high number of request failures or other issues for an instance or environment.
        public let degraded: Int32?
        ///  Yellow. The health agent is reporting a moderate number of request failures or other issues for an instance or environment.
        public let warning: Int32?
        ///  Grey. AWS Elastic Beanstalk and the health agent are reporting no data on an instance.
        public let noData: Int32?
        ///  Red. The health agent is reporting a very high number of request failures or other issues for an instance or environment.
        public let severe: Int32?
        ///  Grey. An operation is in progress on an instance within the command timeout.
        public let pending: Int32?
        ///  Grey. AWS Elastic Beanstalk and the health agent are reporting an insufficient amount of data on an instance.
        public let unknown: Int32?
        ///  Green. An operation is in progress on an instance.
        public let info: Int32?

        public init(ok: Int32? = nil, degraded: Int32? = nil, warning: Int32? = nil, noData: Int32? = nil, severe: Int32? = nil, pending: Int32? = nil, unknown: Int32? = nil, info: Int32? = nil) {
            self.ok = ok
            self.degraded = degraded
            self.warning = warning
            self.noData = noData
            self.severe = severe
            self.pending = pending
            self.unknown = unknown
            self.info = info
        }

        private enum CodingKeys: String, CodingKey {
            case ok = "Ok"
            case degraded = "Degraded"
            case warning = "Warning"
            case noData = "NoData"
            case severe = "Severe"
            case pending = "Pending"
            case unknown = "Unknown"
            case info = "Info"
        }
    }

    public struct PlatformFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: false, type: .list), 
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "Operator", required: false, type: .string)
        ]
        /// The list of values applied to the custom platform attribute.
        public let values: [String]?
        /// The custom platform attribute to which the filter values are applied. Valid Values: PlatformName | PlatformVersion | PlatformStatus | PlatformOwner 
        public let `type`: String?
        /// The operator to apply to the Type with each of the Values.  Valid Values: = (equal to) | != (not equal to) | &lt; (less than) | &lt;= (less than or equal to) | &gt; (greater than) | &gt;= (greater than or equal to) | contains | begins_with | ends_with 
        public let `operator`: String?

        public init(values: [String]? = nil, type: String? = nil, operator: String? = nil) {
            self.values = values
            self.`type` = `type`
            self.`operator` = `operator`
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
            case `type` = "Type"
            case `operator` = "Operator"
        }
    }

    public struct SingleInstanceHealth: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "Causes", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationMetrics", required: false, type: .structure), 
            AWSShapeMember(label: "LaunchedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "Color", required: false, type: .string), 
            AWSShapeMember(label: "HealthStatus", required: false, type: .string), 
            AWSShapeMember(label: "InstanceType", required: false, type: .string), 
            AWSShapeMember(label: "System", required: false, type: .structure), 
            AWSShapeMember(label: "Deployment", required: false, type: .structure)
        ]
        /// The ID of the Amazon EC2 instance.
        public let instanceId: String?
        /// Represents the causes, which provide more information about the current health status.
        public let causes: [String]?
        /// Request metrics from your application.
        public let applicationMetrics: ApplicationMetrics?
        /// The time at which the EC2 instance was launched.
        public let launchedAt: TimeStamp?
        /// The availability zone in which the instance runs.
        public let availabilityZone: String?
        /// Represents the color indicator that gives you information about the health of the EC2 instance. For more information, see Health Colors and Statuses.
        public let color: String?
        /// Returns the health status of the specified instance. For more information, see Health Colors and Statuses.
        public let healthStatus: String?
        /// The instance's type.
        public let instanceType: String?
        /// Operating system metrics from the instance.
        public let system: SystemStatus?
        /// Information about the most recent deployment to an instance.
        public let deployment: Deployment?

        public init(instanceId: String? = nil, causes: [String]? = nil, applicationMetrics: ApplicationMetrics? = nil, launchedAt: TimeStamp? = nil, availabilityZone: String? = nil, color: String? = nil, healthStatus: String? = nil, instanceType: String? = nil, system: SystemStatus? = nil, deployment: Deployment? = nil) {
            self.instanceId = instanceId
            self.causes = causes
            self.applicationMetrics = applicationMetrics
            self.launchedAt = launchedAt
            self.availabilityZone = availabilityZone
            self.color = color
            self.healthStatus = healthStatus
            self.instanceType = instanceType
            self.system = system
            self.deployment = deployment
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case causes = "Causes"
            case applicationMetrics = "ApplicationMetrics"
            case launchedAt = "LaunchedAt"
            case availabilityZone = "AvailabilityZone"
            case color = "Color"
            case healthStatus = "HealthStatus"
            case instanceType = "InstanceType"
            case system = "System"
            case deployment = "Deployment"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The key of the tag.
        public let key: String?
        /// The value of the tag.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public enum FailureType: String, CustomStringConvertible, Codable {
        case updatecancelled = "UpdateCancelled"
        case cancellationfailed = "CancellationFailed"
        case rollbackfailed = "RollbackFailed"
        case rollbacksuccessful = "RollbackSuccessful"
        case internalfailure = "InternalFailure"
        case invalidenvironmentstate = "InvalidEnvironmentState"
        case permissionserror = "PermissionsError"
        public var description: String { return self.rawValue }
    }

    public struct DescribeEnvironmentManagedActionHistoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ManagedActionHistoryItems", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of completed and failed managed actions.
        public let managedActionHistoryItems: [ManagedActionHistoryItem]?
        /// A pagination token that you pass to DescribeEnvironmentManagedActionHistory to get the next page of results.
        public let nextToken: String?

        public init(managedActionHistoryItems: [ManagedActionHistoryItem]? = nil, nextToken: String? = nil) {
            self.managedActionHistoryItems = managedActionHistoryItems
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case managedActionHistoryItems = "ManagedActionHistoryItems"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeEnvironmentManagedActionHistoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxItems", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string)
        ]
        /// The maximum number of items to return for a single request.
        public let maxItems: Int32?
        /// The pagination token returned by a previous request.
        public let nextToken: String?
        /// The environment ID of the target environment.
        public let environmentId: String?
        /// The name of the target environment.
        public let environmentName: String?

        public init(maxItems: Int32? = nil, nextToken: String? = nil, environmentId: String? = nil, environmentName: String? = nil) {
            self.maxItems = maxItems
            self.nextToken = nextToken
            self.environmentId = environmentId
            self.environmentName = environmentName
        }

        private enum CodingKeys: String, CodingKey {
            case maxItems = "MaxItems"
            case nextToken = "NextToken"
            case environmentId = "EnvironmentId"
            case environmentName = "EnvironmentName"
        }
    }

    public struct Latency: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "P50", required: false, type: .double), 
            AWSShapeMember(label: "P75", required: false, type: .double), 
            AWSShapeMember(label: "P85", required: false, type: .double), 
            AWSShapeMember(label: "P99", required: false, type: .double), 
            AWSShapeMember(label: "P10", required: false, type: .double), 
            AWSShapeMember(label: "P90", required: false, type: .double), 
            AWSShapeMember(label: "P999", required: false, type: .double), 
            AWSShapeMember(label: "P95", required: false, type: .double)
        ]
        /// The average latency for the slowest 50 percent of requests over the last 10 seconds.
        public let p50: Double?
        /// The average latency for the slowest 25 percent of requests over the last 10 seconds.
        public let p75: Double?
        /// The average latency for the slowest 15 percent of requests over the last 10 seconds.
        public let p85: Double?
        /// The average latency for the slowest 1 percent of requests over the last 10 seconds.
        public let p99: Double?
        /// The average latency for the slowest 90 percent of requests over the last 10 seconds.
        public let p10: Double?
        /// The average latency for the slowest 10 percent of requests over the last 10 seconds.
        public let p90: Double?
        /// The average latency for the slowest 0.1 percent of requests over the last 10 seconds.
        public let p999: Double?
        /// The average latency for the slowest 5 percent of requests over the last 10 seconds.
        public let p95: Double?

        public init(p50: Double? = nil, p75: Double? = nil, p85: Double? = nil, p99: Double? = nil, p10: Double? = nil, p90: Double? = nil, p999: Double? = nil, p95: Double? = nil) {
            self.p50 = p50
            self.p75 = p75
            self.p85 = p85
            self.p99 = p99
            self.p10 = p10
            self.p90 = p90
            self.p999 = p999
            self.p95 = p95
        }

        private enum CodingKeys: String, CodingKey {
            case p50 = "P50"
            case p75 = "P75"
            case p85 = "P85"
            case p99 = "P99"
            case p10 = "P10"
            case p90 = "P90"
            case p999 = "P999"
            case p95 = "P95"
        }
    }

    public enum EnvironmentHealthAttribute: String, CustomStringConvertible, Codable {
        case status = "Status"
        case color = "Color"
        case causes = "Causes"
        case applicationmetrics = "ApplicationMetrics"
        case instanceshealth = "InstancesHealth"
        case all = "All"
        case healthstatus = "HealthStatus"
        case refreshedat = "RefreshedAt"
        public var description: String { return self.rawValue }
    }

    public enum PlatformStatus: String, CustomStringConvertible, Codable {
        case creating = "Creating"
        case failed = "Failed"
        case ready = "Ready"
        case deleting = "Deleting"
        case deleted = "Deleted"
        public var description: String { return self.rawValue }
    }

    public struct DescribeInstancesHealthRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AttributeNames", required: false, type: .list), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string)
        ]
        /// Specify the pagination token returned by a previous call.
        public let nextToken: String?
        /// Specifies the response elements you wish to receive. To retrieve all attributes, set to All. If no attribute names are specified, returns a list of instances.
        public let attributeNames: [InstancesHealthAttribute]?
        /// Specify the AWS Elastic Beanstalk environment by ID.
        public let environmentId: String?
        /// Specify the AWS Elastic Beanstalk environment by name.
        public let environmentName: String?

        public init(nextToken: String? = nil, attributeNames: [InstancesHealthAttribute]? = nil, environmentId: String? = nil, environmentName: String? = nil) {
            self.nextToken = nextToken
            self.attributeNames = attributeNames
            self.environmentId = environmentId
            self.environmentName = environmentName
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case attributeNames = "AttributeNames"
            case environmentId = "EnvironmentId"
            case environmentName = "EnvironmentName"
        }
    }

    public struct ConfigurationSettingsDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlatformArn", required: false, type: .string), 
            AWSShapeMember(label: "OptionSettings", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationName", required: false, type: .string), 
            AWSShapeMember(label: "DeploymentStatus", required: false, type: .enum), 
            AWSShapeMember(label: "TemplateName", required: false, type: .string), 
            AWSShapeMember(label: "DateUpdated", required: false, type: .timestamp), 
            AWSShapeMember(label: "DateCreated", required: false, type: .timestamp), 
            AWSShapeMember(label: "SolutionStackName", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string)
        ]
        /// The ARN of the platform.
        public let platformArn: String?
        /// A list of the configuration options and their values in this configuration set.
        public let optionSettings: [ConfigurationOptionSetting]?
        /// The name of the application associated with this configuration set.
        public let applicationName: String?
        ///  If this configuration set is associated with an environment, the DeploymentStatus parameter indicates the deployment status of this configuration set:     null: This configuration is not associated with a running environment.    pending: This is a draft configuration that is not deployed to the associated environment but is in the process of deploying.    deployed: This is the configuration that is currently deployed to the associated running environment.    failed: This is a draft configuration that failed to successfully deploy.  
        public let deploymentStatus: ConfigurationDeploymentStatus?
        ///  If not null, the name of the configuration template for this configuration set. 
        public let templateName: String?
        /// The date (in UTC time) when this configuration set was last modified.
        public let dateUpdated: TimeStamp?
        /// The date (in UTC time) when this configuration set was created.
        public let dateCreated: TimeStamp?
        /// The name of the solution stack this configuration set uses.
        public let solutionStackName: String?
        /// Describes this configuration set.
        public let description: String?
        ///  If not null, the name of the environment for this configuration set. 
        public let environmentName: String?

        public init(platformArn: String? = nil, optionSettings: [ConfigurationOptionSetting]? = nil, applicationName: String? = nil, deploymentStatus: ConfigurationDeploymentStatus? = nil, templateName: String? = nil, dateUpdated: TimeStamp? = nil, dateCreated: TimeStamp? = nil, solutionStackName: String? = nil, description: String? = nil, environmentName: String? = nil) {
            self.platformArn = platformArn
            self.optionSettings = optionSettings
            self.applicationName = applicationName
            self.deploymentStatus = deploymentStatus
            self.templateName = templateName
            self.dateUpdated = dateUpdated
            self.dateCreated = dateCreated
            self.solutionStackName = solutionStackName
            self.description = description
            self.environmentName = environmentName
        }

        private enum CodingKeys: String, CodingKey {
            case platformArn = "PlatformArn"
            case optionSettings = "OptionSettings"
            case applicationName = "ApplicationName"
            case deploymentStatus = "DeploymentStatus"
            case templateName = "TemplateName"
            case dateUpdated = "DateUpdated"
            case dateCreated = "DateCreated"
            case solutionStackName = "SolutionStackName"
            case description = "Description"
            case environmentName = "EnvironmentName"
        }
    }

    public struct RetrieveEnvironmentInfoMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InfoType", required: true, type: .enum), 
            AWSShapeMember(label: "EnvironmentName", required: false, type: .string), 
            AWSShapeMember(label: "EnvironmentId", required: false, type: .string)
        ]
        /// The type of information to retrieve.
        public let infoType: EnvironmentInfoType
        /// The name of the data's environment.  If no such environment is found, returns an InvalidParameterValue error.   Condition: You must specify either this or an EnvironmentId, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error. 
        public let environmentName: String?
        /// The ID of the data's environment. If no such environment is found, returns an InvalidParameterValue error. Condition: You must specify either this or an EnvironmentName, or both. If you do not specify either, AWS Elastic Beanstalk returns MissingRequiredParameter error.
        public let environmentId: String?

        public init(infoType: EnvironmentInfoType, environmentName: String? = nil, environmentId: String? = nil) {
            self.infoType = infoType
            self.environmentName = environmentName
            self.environmentId = environmentId
        }

        private enum CodingKeys: String, CodingKey {
            case infoType = "InfoType"
            case environmentName = "EnvironmentName"
            case environmentId = "EnvironmentId"
        }
    }

    public enum SourceRepository: String, CustomStringConvertible, Codable {
        case codecommit = "CodeCommit"
        case s3 = "S3"
        public var description: String { return self.rawValue }
    }

    public struct ConfigurationSettingsDescriptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConfigurationSettings", required: false, type: .list)
        ]
        ///  A list of ConfigurationSettingsDescription. 
        public let configurationSettings: [ConfigurationSettingsDescription]?

        public init(configurationSettings: [ConfigurationSettingsDescription]? = nil) {
            self.configurationSettings = configurationSettings
        }

        private enum CodingKeys: String, CodingKey {
            case configurationSettings = "ConfigurationSettings"
        }
    }

    public struct EnvironmentDescriptionsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Environments", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        ///  Returns an EnvironmentDescription list. 
        public let environments: [EnvironmentDescription]?
        /// In a paginated request, the token that you can pass in a subsequent request to get the next response page.
        public let nextToken: String?

        public init(environments: [EnvironmentDescription]? = nil, nextToken: String? = nil) {
            self.environments = environments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case environments = "Environments"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeAccountAttributesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceQuotas", required: false, type: .structure)
        ]
        /// The Elastic Beanstalk resource quotas associated with the calling AWS account.
        public let resourceQuotas: ResourceQuotas?

        public init(resourceQuotas: ResourceQuotas? = nil) {
            self.resourceQuotas = resourceQuotas
        }

        private enum CodingKeys: String, CodingKey {
            case resourceQuotas = "ResourceQuotas"
        }
    }

}