// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension AutoScalingPlans {

    public struct UpdateScalingPlanRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScalingInstructions", required: false, type: .list), 
            AWSShapeMember(label: "ScalingPlanName", required: true, type: .string), 
            AWSShapeMember(label: "ScalingPlanVersion", required: true, type: .long), 
            AWSShapeMember(label: "ApplicationSource", required: false, type: .structure)
        ]
        /// The scaling instructions.
        public let scalingInstructions: [ScalingInstruction]?
        /// The name of the scaling plan.
        public let scalingPlanName: String
        /// The version number.
        public let scalingPlanVersion: Int64
        /// A CloudFormation stack or set of tags.
        public let applicationSource: ApplicationSource?

        public init(scalingInstructions: [ScalingInstruction]? = nil, scalingPlanName: String, scalingPlanVersion: Int64, applicationSource: ApplicationSource? = nil) {
            self.scalingInstructions = scalingInstructions
            self.scalingPlanName = scalingPlanName
            self.scalingPlanVersion = scalingPlanVersion
            self.applicationSource = applicationSource
        }

        private enum CodingKeys: String, CodingKey {
            case scalingInstructions = "ScalingInstructions"
            case scalingPlanName = "ScalingPlanName"
            case scalingPlanVersion = "ScalingPlanVersion"
            case applicationSource = "ApplicationSource"
        }
    }

    public struct ApplicationSource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudFormationStackARN", required: false, type: .string), 
            AWSShapeMember(label: "TagFilters", required: false, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of a CloudFormation stack.
        public let cloudFormationStackARN: String?
        /// A set of tags (up to 50).
        public let tagFilters: [TagFilter]?

        public init(cloudFormationStackARN: String? = nil, tagFilters: [TagFilter]? = nil) {
            self.cloudFormationStackARN = cloudFormationStackARN
            self.tagFilters = tagFilters
        }

        private enum CodingKeys: String, CodingKey {
            case cloudFormationStackARN = "CloudFormationStackARN"
            case tagFilters = "TagFilters"
        }
    }

    public enum PolicyType: String, CustomStringConvertible, Codable {
        case targettrackingscaling = "TargetTrackingScaling"
        public var description: String { return self.rawValue }
    }

    public enum ScalableDimension: String, CustomStringConvertible, Codable {
        case autoscalingAutoscalinggroupDesiredcapacity = "autoscaling:autoScalingGroup:DesiredCapacity"
        case ecsServiceDesiredcount = "ecs:service:DesiredCount"
        case ec2SpotFleetRequestTargetcapacity = "ec2:spot-fleet-request:TargetCapacity"
        case rdsClusterReadreplicacount = "rds:cluster:ReadReplicaCount"
        case dynamodbTableReadcapacityunits = "dynamodb:table:ReadCapacityUnits"
        case dynamodbTableWritecapacityunits = "dynamodb:table:WriteCapacityUnits"
        case dynamodbIndexReadcapacityunits = "dynamodb:index:ReadCapacityUnits"
        case dynamodbIndexWritecapacityunits = "dynamodb:index:WriteCapacityUnits"
        public var description: String { return self.rawValue }
    }

    public struct TargetTrackingConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PredefinedScalingMetricSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "CustomizedScalingMetricSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "TargetValue", required: true, type: .double), 
            AWSShapeMember(label: "DisableScaleIn", required: false, type: .boolean), 
            AWSShapeMember(label: "ScaleOutCooldown", required: false, type: .integer), 
            AWSShapeMember(label: "ScaleInCooldown", required: false, type: .integer), 
            AWSShapeMember(label: "EstimatedInstanceWarmup", required: false, type: .integer)
        ]
        /// A predefined metric.
        public let predefinedScalingMetricSpecification: PredefinedScalingMetricSpecification?
        /// A customized metric.
        public let customizedScalingMetricSpecification: CustomizedScalingMetricSpecification?
        /// The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
        public let targetValue: Double
        /// Indicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking policy can remove capacity from the scalable resource. The default value is false.
        public let disableScaleIn: Bool?
        /// The amount of time, in seconds, after a scale out activity completes before another scale out activity can start. This value is not used if the scalable resource is an Auto Scaling group. While the cooldown period is in effect, the capacity that has been added by the previous scale out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. The intention is to continuously (but not excessively) scale out.
        public let scaleOutCooldown: Int32?
        /// The amount of time, in seconds, after a scale in activity completes before another scale in activity can start. This value is not used if the scalable resource is an Auto Scaling group. The cooldown period is used to block subsequent scale in requests until it has expired. The intention is to scale in conservatively to protect your application's availability. However, if another alarm triggers a scale out policy during the cooldown period after a scale-in, AWS Auto Scaling scales out your scalable target immediately.
        public let scaleInCooldown: Int32?
        /// The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This value is used only if the resource is an Auto Scaling group.
        public let estimatedInstanceWarmup: Int32?

        public init(predefinedScalingMetricSpecification: PredefinedScalingMetricSpecification? = nil, customizedScalingMetricSpecification: CustomizedScalingMetricSpecification? = nil, targetValue: Double, disableScaleIn: Bool? = nil, scaleOutCooldown: Int32? = nil, scaleInCooldown: Int32? = nil, estimatedInstanceWarmup: Int32? = nil) {
            self.predefinedScalingMetricSpecification = predefinedScalingMetricSpecification
            self.customizedScalingMetricSpecification = customizedScalingMetricSpecification
            self.targetValue = targetValue
            self.disableScaleIn = disableScaleIn
            self.scaleOutCooldown = scaleOutCooldown
            self.scaleInCooldown = scaleInCooldown
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
        }

        private enum CodingKeys: String, CodingKey {
            case predefinedScalingMetricSpecification = "PredefinedScalingMetricSpecification"
            case customizedScalingMetricSpecification = "CustomizedScalingMetricSpecification"
            case targetValue = "TargetValue"
            case disableScaleIn = "DisableScaleIn"
            case scaleOutCooldown = "ScaleOutCooldown"
            case scaleInCooldown = "ScaleInCooldown"
            case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
        }
    }

    public struct DescribeScalingPlanResourcesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScalingPlanName", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ScalingPlanVersion", required: true, type: .long)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The name of the scaling plan.
        public let scalingPlanName: String
        /// The maximum number of scalable resources to return. This value can be between 1 and 50. The default value is 50.
        public let maxResults: Int32?
        /// The version of the scaling plan.
        public let scalingPlanVersion: Int64

        public init(nextToken: String? = nil, scalingPlanName: String, maxResults: Int32? = nil, scalingPlanVersion: Int64) {
            self.nextToken = nextToken
            self.scalingPlanName = scalingPlanName
            self.maxResults = maxResults
            self.scalingPlanVersion = scalingPlanVersion
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scalingPlanName = "ScalingPlanName"
            case maxResults = "MaxResults"
            case scalingPlanVersion = "ScalingPlanVersion"
        }
    }

    public enum ScalingMetricType: String, CustomStringConvertible, Codable {
        case asgaveragecpuutilization = "ASGAverageCPUUtilization"
        case asgaveragenetworkin = "ASGAverageNetworkIn"
        case asgaveragenetworkout = "ASGAverageNetworkOut"
        case dynamodbreadcapacityutilization = "DynamoDBReadCapacityUtilization"
        case dynamodbwritecapacityutilization = "DynamoDBWriteCapacityUtilization"
        case ecsserviceaveragecpuutilization = "ECSServiceAverageCPUUtilization"
        case ecsserviceaveragememoryutilization = "ECSServiceAverageMemoryUtilization"
        case albrequestcountpertarget = "ALBRequestCountPerTarget"
        case rdsreaderaveragecpuutilization = "RDSReaderAverageCPUUtilization"
        case rdsreaderaveragedatabaseconnections = "RDSReaderAverageDatabaseConnections"
        case ec2spotfleetrequestaveragecpuutilization = "EC2SpotFleetRequestAverageCPUUtilization"
        case ec2spotfleetrequestaveragenetworkin = "EC2SpotFleetRequestAverageNetworkIn"
        case ec2spotfleetrequestaveragenetworkout = "EC2SpotFleetRequestAverageNetworkOut"
        public var description: String { return self.rawValue }
    }

    public struct DescribeScalingPlanResourcesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScalingPlanResources", required: false, type: .list)
        ]
        /// The token required to get the next set of results. This value is null if there are no more results to return.
        public let nextToken: String?
        /// Information about the scalable resources.
        public let scalingPlanResources: [ScalingPlanResource]?

        public init(nextToken: String? = nil, scalingPlanResources: [ScalingPlanResource]? = nil) {
            self.nextToken = nextToken
            self.scalingPlanResources = scalingPlanResources
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scalingPlanResources = "ScalingPlanResources"
        }
    }

    public struct PredefinedScalingMetricSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceLabel", required: false, type: .string), 
            AWSShapeMember(label: "PredefinedScalingMetricType", required: true, type: .enum)
        ]
        /// Identifies the resource associated with the metric type. You can't specify a resource label unless the metric type is ALBRequestCountPerTarget and there is a target group for an Application Load Balancer attached to the Auto Scaling group, Spot Fleet request, or ECS service. The format is app/&lt;load-balancer-name&gt;/&lt;load-balancer-id&gt;/targetgroup/&lt;target-group-name&gt;/&lt;target-group-id&gt;, where:   app/&lt;load-balancer-name&gt;/&lt;load-balancer-id&gt; is the final portion of the load balancer ARN   targetgroup/&lt;target-group-name&gt;/&lt;target-group-id&gt; is the final portion of the target group ARN.  
        public let resourceLabel: String?
        /// The metric type. The ALBRequestCountPerTarget metric type applies only to Auto Scaling groups, Sport Fleet requests, and ECS services.
        public let predefinedScalingMetricType: ScalingMetricType

        public init(resourceLabel: String? = nil, predefinedScalingMetricType: ScalingMetricType) {
            self.resourceLabel = resourceLabel
            self.predefinedScalingMetricType = predefinedScalingMetricType
        }

        private enum CodingKeys: String, CodingKey {
            case resourceLabel = "ResourceLabel"
            case predefinedScalingMetricType = "PredefinedScalingMetricType"
        }
    }

    public struct DeleteScalingPlanResponse: AWSShape {

    }

    public struct TagFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: false, type: .list), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The tag values (0 to 20).
        public let values: [String]?
        /// The tag key.
        public let key: String?

        public init(values: [String]? = nil, key: String? = nil) {
            self.values = values
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
            case key = "Key"
        }
    }

    public struct ScalingPlan: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StatusStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ApplicationSource", required: true, type: .structure), 
            AWSShapeMember(label: "ScalingPlanVersion", required: true, type: .long), 
            AWSShapeMember(label: "ScalingInstructions", required: true, type: .list), 
            AWSShapeMember(label: "ScalingPlanName", required: true, type: .string), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "StatusCode", required: true, type: .enum)
        ]
        /// The Unix timestamp when the scaling plan entered the current status.
        public let statusStartTime: TimeStamp?
        /// The application source.
        public let applicationSource: ApplicationSource
        /// The version of the scaling plan.
        public let scalingPlanVersion: Int64
        /// The scaling instructions.
        public let scalingInstructions: [ScalingInstruction]
        /// The name of the scaling plan.
        public let scalingPlanName: String
        /// A simple message about the current status of the scaling plan.
        public let statusMessage: String?
        /// The Unix timestamp when the scaling plan was created.
        public let creationTime: TimeStamp?
        /// The status of the scaling plan.    Active - The scaling plan is active.    ActiveWithProblems - The scaling plan is active, but the scaling configuration for one or more resources could not be applied.    CreationInProgress - The scaling plan is being created.    CreationFailed - The scaling plan could not be created.    DeletionInProgress - The scaling plan is being deleted.    DeletionFailed - The scaling plan could not be deleted.  
        public let statusCode: ScalingPlanStatusCode

        public init(statusStartTime: TimeStamp? = nil, applicationSource: ApplicationSource, scalingPlanVersion: Int64, scalingInstructions: [ScalingInstruction], scalingPlanName: String, statusMessage: String? = nil, creationTime: TimeStamp? = nil, statusCode: ScalingPlanStatusCode) {
            self.statusStartTime = statusStartTime
            self.applicationSource = applicationSource
            self.scalingPlanVersion = scalingPlanVersion
            self.scalingInstructions = scalingInstructions
            self.scalingPlanName = scalingPlanName
            self.statusMessage = statusMessage
            self.creationTime = creationTime
            self.statusCode = statusCode
        }

        private enum CodingKeys: String, CodingKey {
            case statusStartTime = "StatusStartTime"
            case applicationSource = "ApplicationSource"
            case scalingPlanVersion = "ScalingPlanVersion"
            case scalingInstructions = "ScalingInstructions"
            case scalingPlanName = "ScalingPlanName"
            case statusMessage = "StatusMessage"
            case creationTime = "CreationTime"
            case statusCode = "StatusCode"
        }
    }

    public struct UpdateScalingPlanResponse: AWSShape {

    }

    public struct DescribeScalingPlansResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScalingPlans", required: false, type: .list)
        ]
        /// The token required to get the next set of results. This value is null if there are no more results to return.
        public let nextToken: String?
        /// Information about the scaling plans.
        public let scalingPlans: [ScalingPlan]?

        public init(nextToken: String? = nil, scalingPlans: [ScalingPlan]? = nil) {
            self.nextToken = nextToken
            self.scalingPlans = scalingPlans
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scalingPlans = "ScalingPlans"
        }
    }

    public enum ScalingStatusCode: String, CustomStringConvertible, Codable {
        case inactive = "Inactive"
        case partiallyactive = "PartiallyActive"
        case active = "Active"
        public var description: String { return self.rawValue }
    }

    public struct CreateScalingPlanResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScalingPlanVersion", required: true, type: .long)
        ]
        /// The version of the scaling plan. This value is always 1.
        public let scalingPlanVersion: Int64

        public init(scalingPlanVersion: Int64) {
            self.scalingPlanVersion = scalingPlanVersion
        }

        private enum CodingKeys: String, CodingKey {
            case scalingPlanVersion = "ScalingPlanVersion"
        }
    }

    public struct CreateScalingPlanRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScalingPlanName", required: true, type: .string), 
            AWSShapeMember(label: "ScalingInstructions", required: true, type: .list), 
            AWSShapeMember(label: "ApplicationSource", required: true, type: .structure)
        ]
        /// The name of the scaling plan. Names cannot contain vertical bars, colons, or forward slashes.
        public let scalingPlanName: String
        /// The scaling instructions.
        public let scalingInstructions: [ScalingInstruction]
        /// A CloudFormation stack or set of tags. You can create one scaling plan per application source.
        public let applicationSource: ApplicationSource

        public init(scalingPlanName: String, scalingInstructions: [ScalingInstruction], applicationSource: ApplicationSource) {
            self.scalingPlanName = scalingPlanName
            self.scalingInstructions = scalingInstructions
            self.applicationSource = applicationSource
        }

        private enum CodingKeys: String, CodingKey {
            case scalingPlanName = "ScalingPlanName"
            case scalingInstructions = "ScalingInstructions"
            case applicationSource = "ApplicationSource"
        }
    }

    public struct DescribeScalingPlansRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScalingPlanNames", required: false, type: .list), 
            AWSShapeMember(label: "ScalingPlanVersion", required: false, type: .long), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ApplicationSources", required: false, type: .list)
        ]
        /// The token for the next set of results.
        public let nextToken: String?
        /// The names of the scaling plans (up to 10). If you specify application sources, you cannot specify scaling plan names.
        public let scalingPlanNames: [String]?
        /// The version of the scaling plan. If you specify a scaling plan version, you must also specify a scaling plan name.
        public let scalingPlanVersion: Int64?
        /// The maximum number of scalable resources to return. This value can be between 1 and 50. The default value is 50.
        public let maxResults: Int32?
        /// The sources for the applications (up to 10). If you specify scaling plan names, you cannot specify application sources.
        public let applicationSources: [ApplicationSource]?

        public init(nextToken: String? = nil, scalingPlanNames: [String]? = nil, scalingPlanVersion: Int64? = nil, maxResults: Int32? = nil, applicationSources: [ApplicationSource]? = nil) {
            self.nextToken = nextToken
            self.scalingPlanNames = scalingPlanNames
            self.scalingPlanVersion = scalingPlanVersion
            self.maxResults = maxResults
            self.applicationSources = applicationSources
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scalingPlanNames = "ScalingPlanNames"
            case scalingPlanVersion = "ScalingPlanVersion"
            case maxResults = "MaxResults"
            case applicationSources = "ApplicationSources"
        }
    }

    public struct DeleteScalingPlanRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScalingPlanName", required: true, type: .string), 
            AWSShapeMember(label: "ScalingPlanVersion", required: true, type: .long)
        ]
        /// The name of the scaling plan.
        public let scalingPlanName: String
        /// The version of the scaling plan.
        public let scalingPlanVersion: Int64

        public init(scalingPlanName: String, scalingPlanVersion: Int64) {
            self.scalingPlanName = scalingPlanName
            self.scalingPlanVersion = scalingPlanVersion
        }

        private enum CodingKeys: String, CodingKey {
            case scalingPlanName = "ScalingPlanName"
            case scalingPlanVersion = "ScalingPlanVersion"
        }
    }

    public struct ScalingPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyType", required: true, type: .enum), 
            AWSShapeMember(label: "TargetTrackingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "PolicyName", required: true, type: .string)
        ]
        /// The type of scaling policy.
        public let policyType: PolicyType
        /// The target tracking scaling policy.
        public let targetTrackingConfiguration: TargetTrackingConfiguration?
        /// The name of the scaling policy.
        public let policyName: String

        public init(policyType: PolicyType, targetTrackingConfiguration: TargetTrackingConfiguration? = nil, policyName: String) {
            self.policyType = policyType
            self.targetTrackingConfiguration = targetTrackingConfiguration
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case policyType = "PolicyType"
            case targetTrackingConfiguration = "TargetTrackingConfiguration"
            case policyName = "PolicyName"
        }
    }

    public struct ScalingPlanResource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeMember(label: "ScalingStatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeMember(label: "ScalingPlanVersion", required: true, type: .long), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "ScalingPlanName", required: true, type: .string), 
            AWSShapeMember(label: "ScalingPolicies", required: false, type: .list), 
            AWSShapeMember(label: "ScalingStatusCode", required: true, type: .enum)
        ]
        /// The namespace of the AWS service.
        public let serviceNamespace: ServiceNamespace
        /// A simple message about the current scaling status of the resource.
        public let scalingStatusMessage: String?
        /// The scalable dimension for the resource.    autoscaling:autoScalingGroup:DesiredCapacity - The desired capacity of an Auto Scaling group.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot fleet request.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition.  
        public let scalableDimension: ScalableDimension
        /// The version of the scaling plan.
        public let scalingPlanVersion: Int64
        /// The ID of the resource. This string consists of the resource type and unique identifier.   Auto Scaling group - The resource type is autoScalingGroup and the unique identifier is the name of the Auto Scaling group. Example: autoScalingGroup/my-asg.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   DynamoDB table - The resource type is table and the unique identifier is the resource ID. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.  
        public let resourceId: String
        /// The name of the scaling plan.
        public let scalingPlanName: String
        /// The scaling policies.
        public let scalingPolicies: [ScalingPolicy]?
        /// The scaling status of the resource.    Active - The scaling configuration is active.    Inactive - The scaling configuration is not active because the scaling plan is being created or the scaling configuration could not be applied. Check the status message for more information.    PartiallyActive - The scaling configuration is partially active because the scaling plan is being created or deleted or the scaling configuration could not be fully applied. Check the status message for more information.  
        public let scalingStatusCode: ScalingStatusCode

        public init(serviceNamespace: ServiceNamespace, scalingStatusMessage: String? = nil, scalableDimension: ScalableDimension, scalingPlanVersion: Int64, resourceId: String, scalingPlanName: String, scalingPolicies: [ScalingPolicy]? = nil, scalingStatusCode: ScalingStatusCode) {
            self.serviceNamespace = serviceNamespace
            self.scalingStatusMessage = scalingStatusMessage
            self.scalableDimension = scalableDimension
            self.scalingPlanVersion = scalingPlanVersion
            self.resourceId = resourceId
            self.scalingPlanName = scalingPlanName
            self.scalingPolicies = scalingPolicies
            self.scalingStatusCode = scalingStatusCode
        }

        private enum CodingKeys: String, CodingKey {
            case serviceNamespace = "ServiceNamespace"
            case scalingStatusMessage = "ScalingStatusMessage"
            case scalableDimension = "ScalableDimension"
            case scalingPlanVersion = "ScalingPlanVersion"
            case resourceId = "ResourceId"
            case scalingPlanName = "ScalingPlanName"
            case scalingPolicies = "ScalingPolicies"
            case scalingStatusCode = "ScalingStatusCode"
        }
    }

    public enum MetricStatistic: String, CustomStringConvertible, Codable {
        case average = "Average"
        case minimum = "Minimum"
        case maximum = "Maximum"
        case samplecount = "SampleCount"
        case sum = "Sum"
        public var description: String { return self.rawValue }
    }

    public enum ScalingPlanStatusCode: String, CustomStringConvertible, Codable {
        case active = "Active"
        case activewithproblems = "ActiveWithProblems"
        case creationinprogress = "CreationInProgress"
        case creationfailed = "CreationFailed"
        case deletioninprogress = "DeletionInProgress"
        case deletionfailed = "DeletionFailed"
        case updateinprogress = "UpdateInProgress"
        case updatefailed = "UpdateFailed"
        public var description: String { return self.rawValue }
    }

    public enum ServiceNamespace: String, CustomStringConvertible, Codable {
        case autoscaling = "autoscaling"
        case ecs = "ecs"
        case ec2 = "ec2"
        case rds = "rds"
        case dynamodb = "dynamodb"
        public var description: String { return self.rawValue }
    }

    public struct ScalingInstruction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeMember(label: "MinCapacity", required: true, type: .integer), 
            AWSShapeMember(label: "MaxCapacity", required: true, type: .integer), 
            AWSShapeMember(label: "TargetTrackingConfigurations", required: true, type: .list), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "ScalableDimension", required: true, type: .enum)
        ]
        /// The namespace of the AWS service.
        public let serviceNamespace: ServiceNamespace
        /// The minimum value to scale to in response to a scale in event.
        public let minCapacity: Int32
        /// The maximum value to scale to in response to a scale out event.
        public let maxCapacity: Int32
        /// The target tracking scaling policies (up to 10).
        public let targetTrackingConfigurations: [TargetTrackingConfiguration]
        /// The ID of the resource. This string consists of the resource type and unique identifier.   Auto Scaling group - The resource type is autoScalingGroup and the unique identifier is the name of the Auto Scaling group. Example: autoScalingGroup/my-asg.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   DynamoDB table - The resource type is table and the unique identifier is the resource ID. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.  
        public let resourceId: String
        /// The scalable dimension associated with the resource.    autoscaling:autoScalingGroup:DesiredCapacity - The desired capacity of an Auto Scaling group.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot fleet request.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition.  
        public let scalableDimension: ScalableDimension

        public init(serviceNamespace: ServiceNamespace, minCapacity: Int32, maxCapacity: Int32, targetTrackingConfigurations: [TargetTrackingConfiguration], resourceId: String, scalableDimension: ScalableDimension) {
            self.serviceNamespace = serviceNamespace
            self.minCapacity = minCapacity
            self.maxCapacity = maxCapacity
            self.targetTrackingConfigurations = targetTrackingConfigurations
            self.resourceId = resourceId
            self.scalableDimension = scalableDimension
        }

        private enum CodingKeys: String, CodingKey {
            case serviceNamespace = "ServiceNamespace"
            case minCapacity = "MinCapacity"
            case maxCapacity = "MaxCapacity"
            case targetTrackingConfigurations = "TargetTrackingConfigurations"
            case resourceId = "ResourceId"
            case scalableDimension = "ScalableDimension"
        }
    }

    public struct MetricDimension: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]
        /// The name of the dimension.
        public let name: String
        /// The value of the dimension.
        public let value: String

        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct CustomizedScalingMetricSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Dimensions", required: false, type: .list), 
            AWSShapeMember(label: "Namespace", required: true, type: .string), 
            AWSShapeMember(label: "MetricName", required: true, type: .string), 
            AWSShapeMember(label: "Unit", required: false, type: .string), 
            AWSShapeMember(label: "Statistic", required: true, type: .enum)
        ]
        /// The dimensions of the metric.
        public let dimensions: [MetricDimension]?
        /// The namespace of the metric.
        public let namespace: String
        /// The name of the metric.
        public let metricName: String
        /// The unit of the metric.
        public let unit: String?
        /// The statistic of the metric.
        public let statistic: MetricStatistic

        public init(dimensions: [MetricDimension]? = nil, namespace: String, metricName: String, unit: String? = nil, statistic: MetricStatistic) {
            self.dimensions = dimensions
            self.namespace = namespace
            self.metricName = metricName
            self.unit = unit
            self.statistic = statistic
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case namespace = "Namespace"
            case metricName = "MetricName"
            case unit = "Unit"
            case statistic = "Statistic"
        }
    }

}