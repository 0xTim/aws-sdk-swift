// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension AutoScalingPlans {

    public enum ForecastDataType: String, CustomStringConvertible, Codable {
        case capacityforecast = "CapacityForecast"
        case loadforecast = "LoadForecast"
        case scheduledactionmincapacity = "ScheduledActionMinCapacity"
        case scheduledactionmaxcapacity = "ScheduledActionMaxCapacity"
        public var description: String { return self.rawValue }
    }

    public struct DescribeScalingPlansResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScalingPlans", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the scaling plans.
        public let scalingPlans: [ScalingPlan]?
        /// The token required to get the next set of results. This value is null if there are no more results to return.
        public let nextToken: String?

        public init(nextToken: String? = nil, scalingPlans: [ScalingPlan]? = nil) {
            self.scalingPlans = scalingPlans
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case scalingPlans = "ScalingPlans"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteScalingPlanResponse: AWSShape {

        public init() {
        }

    }

    public enum ScalableDimension: String, CustomStringConvertible, Codable {
        case autoscalingAutoscalinggroupDesiredcapacity = "autoscaling:autoScalingGroup:DesiredCapacity"
        case ecsServiceDesiredcount = "ecs:service:DesiredCount"
        case ec2SpotFleetRequestTargetcapacity = "ec2:spot-fleet-request:TargetCapacity"
        case rdsClusterReadreplicacount = "rds:cluster:ReadReplicaCount"
        case dynamodbTableReadcapacityunits = "dynamodb:table:ReadCapacityUnits"
        case dynamodbTableWritecapacityunits = "dynamodb:table:WriteCapacityUnits"
        case dynamodbIndexReadcapacityunits = "dynamodb:index:ReadCapacityUnits"
        case dynamodbIndexWritecapacityunits = "dynamodb:index:WriteCapacityUnits"
        public var description: String { return self.rawValue }
    }

    public struct PredefinedLoadMetricSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PredefinedLoadMetricType", required: true, type: .enum), 
            AWSShapeMember(label: "ResourceLabel", required: false, type: .string)
        ]
        /// The metric type.
        public let predefinedLoadMetricType: LoadMetricType
        /// Identifies the resource associated with the metric type. You can't specify a resource label unless the metric type is ALBRequestCountPerTarget and there is a target group for an Application Load Balancer attached to the Auto Scaling group. The format is app/&lt;load-balancer-name&gt;/&lt;load-balancer-id&gt;/targetgroup/&lt;target-group-name&gt;/&lt;target-group-id&gt;, where:   app/&lt;load-balancer-name&gt;/&lt;load-balancer-id&gt; is the final portion of the load balancer ARN.   targetgroup/&lt;target-group-name&gt;/&lt;target-group-id&gt; is the final portion of the target group ARN.  
        public let resourceLabel: String?

        public init(predefinedLoadMetricType: LoadMetricType, resourceLabel: String? = nil) {
            self.predefinedLoadMetricType = predefinedLoadMetricType
            self.resourceLabel = resourceLabel
        }

        private enum CodingKeys: String, CodingKey {
            case predefinedLoadMetricType = "PredefinedLoadMetricType"
            case resourceLabel = "ResourceLabel"
        }
    }

    public struct ScalingPlanResource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScalingPlanVersion", required: true, type: .long), 
            AWSShapeMember(label: "ScalingStatusCode", required: true, type: .enum), 
            AWSShapeMember(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeMember(label: "ScalingPlanName", required: true, type: .string), 
            AWSShapeMember(label: "ScalingPolicies", required: false, type: .list), 
            AWSShapeMember(label: "ScalingStatusMessage", required: false, type: .string)
        ]
        /// The version number of the scaling plan.
        public let scalingPlanVersion: Int64
        /// The scaling status of the resource.    Active - The scaling configuration is active.    Inactive - The scaling configuration is not active because the scaling plan is being created or the scaling configuration could not be applied. Check the status message for more information.    PartiallyActive - The scaling configuration is partially active because the scaling plan is being created or deleted or the scaling configuration could not be fully applied. Check the status message for more information.  
        public let scalingStatusCode: ScalingStatusCode
        /// The scalable dimension for the resource.    autoscaling:autoScalingGroup:DesiredCapacity - The desired capacity of an Auto Scaling group.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition.  
        public let scalableDimension: ScalableDimension
        /// The ID of the resource. This string consists of the resource type and unique identifier.   Auto Scaling group - The resource type is autoScalingGroup and the unique identifier is the name of the Auto Scaling group. Example: autoScalingGroup/my-asg.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   DynamoDB table - The resource type is table and the unique identifier is the resource ID. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.  
        public let resourceId: String
        /// The namespace of the AWS service.
        public let serviceNamespace: ServiceNamespace
        /// The name of the scaling plan.
        public let scalingPlanName: String
        /// The scaling policies.
        public let scalingPolicies: [ScalingPolicy]?
        /// A simple message about the current scaling status of the resource.
        public let scalingStatusMessage: String?

        public init(resourceId: String, scalableDimension: ScalableDimension, scalingPlanName: String, scalingPlanVersion: Int64, scalingPolicies: [ScalingPolicy]? = nil, scalingStatusCode: ScalingStatusCode, scalingStatusMessage: String? = nil, serviceNamespace: ServiceNamespace) {
            self.scalingPlanVersion = scalingPlanVersion
            self.scalingStatusCode = scalingStatusCode
            self.scalableDimension = scalableDimension
            self.resourceId = resourceId
            self.serviceNamespace = serviceNamespace
            self.scalingPlanName = scalingPlanName
            self.scalingPolicies = scalingPolicies
            self.scalingStatusMessage = scalingStatusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case scalingPlanVersion = "ScalingPlanVersion"
            case scalingStatusCode = "ScalingStatusCode"
            case scalableDimension = "ScalableDimension"
            case resourceId = "ResourceId"
            case serviceNamespace = "ServiceNamespace"
            case scalingPlanName = "ScalingPlanName"
            case scalingPolicies = "ScalingPolicies"
            case scalingStatusMessage = "ScalingStatusMessage"
        }
    }

    public enum ScalingMetricType: String, CustomStringConvertible, Codable {
        case asgaveragecpuutilization = "ASGAverageCPUUtilization"
        case asgaveragenetworkin = "ASGAverageNetworkIn"
        case asgaveragenetworkout = "ASGAverageNetworkOut"
        case dynamodbreadcapacityutilization = "DynamoDBReadCapacityUtilization"
        case dynamodbwritecapacityutilization = "DynamoDBWriteCapacityUtilization"
        case ecsserviceaveragecpuutilization = "ECSServiceAverageCPUUtilization"
        case ecsserviceaveragememoryutilization = "ECSServiceAverageMemoryUtilization"
        case albrequestcountpertarget = "ALBRequestCountPerTarget"
        case rdsreaderaveragecpuutilization = "RDSReaderAverageCPUUtilization"
        case rdsreaderaveragedatabaseconnections = "RDSReaderAverageDatabaseConnections"
        case ec2spotfleetrequestaveragecpuutilization = "EC2SpotFleetRequestAverageCPUUtilization"
        case ec2spotfleetrequestaveragenetworkin = "EC2SpotFleetRequestAverageNetworkIn"
        case ec2spotfleetrequestaveragenetworkout = "EC2SpotFleetRequestAverageNetworkOut"
        public var description: String { return self.rawValue }
    }

    public struct DescribeScalingPlanResourcesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScalingPlanResources", required: false, type: .list)
        ]
        /// The token required to get the next set of results. This value is null if there are no more results to return.
        public let nextToken: String?
        /// Information about the scalable resources.
        public let scalingPlanResources: [ScalingPlanResource]?

        public init(nextToken: String? = nil, scalingPlanResources: [ScalingPlanResource]? = nil) {
            self.nextToken = nextToken
            self.scalingPlanResources = scalingPlanResources
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scalingPlanResources = "ScalingPlanResources"
        }
    }

    public enum LoadMetricType: String, CustomStringConvertible, Codable {
        case asgtotalcpuutilization = "ASGTotalCPUUtilization"
        case asgtotalnetworkin = "ASGTotalNetworkIn"
        case asgtotalnetworkout = "ASGTotalNetworkOut"
        case albtargetgrouprequestcount = "ALBTargetGroupRequestCount"
        public var description: String { return self.rawValue }
    }

    public struct UpdateScalingPlanResponse: AWSShape {

        public init() {
        }

    }

    public struct CustomizedScalingMetricSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unit", required: false, type: .string), 
            AWSShapeMember(label: "MetricName", required: true, type: .string), 
            AWSShapeMember(label: "Dimensions", required: false, type: .list), 
            AWSShapeMember(label: "Namespace", required: true, type: .string), 
            AWSShapeMember(label: "Statistic", required: true, type: .enum)
        ]
        /// The unit of the metric. 
        public let unit: String?
        /// The name of the metric.
        public let metricName: String
        /// The dimensions of the metric.
        public let dimensions: [MetricDimension]?
        /// The namespace of the metric.
        public let namespace: String
        /// The statistic of the metric.
        public let statistic: MetricStatistic

        public init(dimensions: [MetricDimension]? = nil, metricName: String, namespace: String, statistic: MetricStatistic, unit: String? = nil) {
            self.unit = unit
            self.metricName = metricName
            self.dimensions = dimensions
            self.namespace = namespace
            self.statistic = statistic
        }

        private enum CodingKeys: String, CodingKey {
            case unit = "Unit"
            case metricName = "MetricName"
            case dimensions = "Dimensions"
            case namespace = "Namespace"
            case statistic = "Statistic"
        }
    }

    public enum MetricStatistic: String, CustomStringConvertible, Codable {
        case average = "Average"
        case minimum = "Minimum"
        case maximum = "Maximum"
        case samplecount = "SampleCount"
        case sum = "Sum"
        public var description: String { return self.rawValue }
    }

    public struct PredefinedScalingMetricSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceLabel", required: false, type: .string), 
            AWSShapeMember(label: "PredefinedScalingMetricType", required: true, type: .enum)
        ]
        /// Identifies the resource associated with the metric type. You can't specify a resource label unless the metric type is ALBRequestCountPerTarget and there is a target group for an Application Load Balancer attached to the Auto Scaling group, Spot Fleet request, or ECS service. The format is app/&lt;load-balancer-name&gt;/&lt;load-balancer-id&gt;/targetgroup/&lt;target-group-name&gt;/&lt;target-group-id&gt;, where:   app/&lt;load-balancer-name&gt;/&lt;load-balancer-id&gt; is the final portion of the load balancer ARN.   targetgroup/&lt;target-group-name&gt;/&lt;target-group-id&gt; is the final portion of the target group ARN.  
        public let resourceLabel: String?
        /// The metric type. The ALBRequestCountPerTarget metric type applies only to Auto Scaling groups, Spot Fleet requests, and ECS services.
        public let predefinedScalingMetricType: ScalingMetricType

        public init(predefinedScalingMetricType: ScalingMetricType, resourceLabel: String? = nil) {
            self.resourceLabel = resourceLabel
            self.predefinedScalingMetricType = predefinedScalingMetricType
        }

        private enum CodingKeys: String, CodingKey {
            case resourceLabel = "ResourceLabel"
            case predefinedScalingMetricType = "PredefinedScalingMetricType"
        }
    }

    public struct DescribeScalingPlanResourcesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ScalingPlanName", required: true, type: .string), 
            AWSShapeMember(label: "ScalingPlanVersion", required: true, type: .long), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of scalable resources to return. The value must be between 1 and 50. The default value is 50.
        public let maxResults: Int32?
        /// The name of the scaling plan.
        public let scalingPlanName: String
        /// The version number of the scaling plan.
        public let scalingPlanVersion: Int64
        /// The token for the next set of results.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, scalingPlanName: String, scalingPlanVersion: Int64) {
            self.maxResults = maxResults
            self.scalingPlanName = scalingPlanName
            self.scalingPlanVersion = scalingPlanVersion
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case scalingPlanName = "ScalingPlanName"
            case scalingPlanVersion = "ScalingPlanVersion"
            case nextToken = "NextToken"
        }
    }

    public enum ScalingStatusCode: String, CustomStringConvertible, Codable {
        case inactive = "Inactive"
        case partiallyactive = "PartiallyActive"
        case active = "Active"
        public var description: String { return self.rawValue }
    }

    public enum PredictiveScalingMode: String, CustomStringConvertible, Codable {
        case forecastandscale = "ForecastAndScale"
        case forecastonly = "ForecastOnly"
        public var description: String { return self.rawValue }
    }

    public struct Datapoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .double), 
            AWSShapeMember(label: "Timestamp", required: false, type: .timestamp)
        ]
        /// The value of the data point.
        public let value: Double?
        /// The time stamp for the data point in UTC format.
        public let timestamp: TimeStamp?

        public init(timestamp: TimeStamp? = nil, value: Double? = nil) {
            self.value = value
            self.timestamp = timestamp
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case timestamp = "Timestamp"
        }
    }

    public struct GetScalingPlanResourceForecastDataRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeMember(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeMember(label: "ForecastDataType", required: true, type: .enum), 
            AWSShapeMember(label: "EndTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "ScalingPlanName", required: true, type: .string), 
            AWSShapeMember(label: "ScalingPlanVersion", required: true, type: .long)
        ]
        /// The inclusive start time of the time range for the forecast data to get. The date and time can be at most 56 days before the current date and time. 
        public let startTime: TimeStamp
        /// The ID of the resource. This string consists of the resource type and unique identifier.    Auto Scaling group - The resource type is autoScalingGroup and the unique identifier is the name of the Auto Scaling group. Example: autoScalingGroup/my-asg.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   DynamoDB table - The resource type is table and the unique identifier is the resource ID. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.  
        public let resourceId: String
        /// The namespace of the AWS service.
        public let serviceNamespace: ServiceNamespace
        /// The scalable dimension for the resource.
        public let scalableDimension: ScalableDimension
        /// The type of forecast data to get.    LoadForecast: The load metric forecast.     CapacityForecast: The capacity forecast.     ScheduledActionMinCapacity: The minimum capacity for each scheduled scaling action. This data is calculated as the larger of two values: the capacity forecast or the minimum capacity in the scaling instruction.    ScheduledActionMaxCapacity: The maximum capacity for each scheduled scaling action. The calculation used is determined by the predictive scaling maximum capacity behavior setting in the scaling instruction.  
        public let forecastDataType: ForecastDataType
        /// The exclusive end time of the time range for the forecast data to get. The maximum time duration between the start and end time is seven days.  Although this parameter can accept a date and time that is more than two days in the future, the availability of forecast data has limits. AWS Auto Scaling only issues forecasts for periods of two days in advance.
        public let endTime: TimeStamp
        /// The name of the scaling plan.
        public let scalingPlanName: String
        /// The version number of the scaling plan.
        public let scalingPlanVersion: Int64

        public init(endTime: TimeStamp, forecastDataType: ForecastDataType, resourceId: String, scalableDimension: ScalableDimension, scalingPlanName: String, scalingPlanVersion: Int64, serviceNamespace: ServiceNamespace, startTime: TimeStamp) {
            self.startTime = startTime
            self.resourceId = resourceId
            self.serviceNamespace = serviceNamespace
            self.scalableDimension = scalableDimension
            self.forecastDataType = forecastDataType
            self.endTime = endTime
            self.scalingPlanName = scalingPlanName
            self.scalingPlanVersion = scalingPlanVersion
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case resourceId = "ResourceId"
            case serviceNamespace = "ServiceNamespace"
            case scalableDimension = "ScalableDimension"
            case forecastDataType = "ForecastDataType"
            case endTime = "EndTime"
            case scalingPlanName = "ScalingPlanName"
            case scalingPlanVersion = "ScalingPlanVersion"
        }
    }

    public enum ServiceNamespace: String, CustomStringConvertible, Codable {
        case autoscaling = "autoscaling"
        case ecs = "ecs"
        case ec2 = "ec2"
        case rds = "rds"
        case dynamodb = "dynamodb"
        public var description: String { return self.rawValue }
    }

    public enum PolicyType: String, CustomStringConvertible, Codable {
        case targettrackingscaling = "TargetTrackingScaling"
        public var description: String { return self.rawValue }
    }

    public struct DescribeScalingPlansRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationSources", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "ScalingPlanNames", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScalingPlanVersion", required: false, type: .long)
        ]
        /// The sources for the applications (up to 10). If you specify scaling plan names, you cannot specify application sources.
        public let applicationSources: [ApplicationSource]?
        /// The maximum number of scalable resources to return. This value can be between 1 and 50. The default value is 50.
        public let maxResults: Int32?
        /// The names of the scaling plans (up to 10). If you specify application sources, you cannot specify scaling plan names.
        public let scalingPlanNames: [String]?
        /// The token for the next set of results.
        public let nextToken: String?
        /// The version number of the scaling plan. If you specify a scaling plan version, you must also specify a scaling plan name.
        public let scalingPlanVersion: Int64?

        public init(applicationSources: [ApplicationSource]? = nil, maxResults: Int32? = nil, nextToken: String? = nil, scalingPlanNames: [String]? = nil, scalingPlanVersion: Int64? = nil) {
            self.applicationSources = applicationSources
            self.maxResults = maxResults
            self.scalingPlanNames = scalingPlanNames
            self.nextToken = nextToken
            self.scalingPlanVersion = scalingPlanVersion
        }

        private enum CodingKeys: String, CodingKey {
            case applicationSources = "ApplicationSources"
            case maxResults = "MaxResults"
            case scalingPlanNames = "ScalingPlanNames"
            case nextToken = "NextToken"
            case scalingPlanVersion = "ScalingPlanVersion"
        }
    }

    public enum ScalingPolicyUpdateBehavior: String, CustomStringConvertible, Codable {
        case keepexternalpolicies = "KeepExternalPolicies"
        case replaceexternalpolicies = "ReplaceExternalPolicies"
        public var description: String { return self.rawValue }
    }

    public struct ScalingPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyName", required: true, type: .string), 
            AWSShapeMember(label: "PolicyType", required: true, type: .enum), 
            AWSShapeMember(label: "TargetTrackingConfiguration", required: false, type: .structure)
        ]
        /// The name of the scaling policy.
        public let policyName: String
        /// The type of scaling policy.
        public let policyType: PolicyType
        /// The target tracking scaling policy. 
        public let targetTrackingConfiguration: TargetTrackingConfiguration?

        public init(policyName: String, policyType: PolicyType, targetTrackingConfiguration: TargetTrackingConfiguration? = nil) {
            self.policyName = policyName
            self.policyType = policyType
            self.targetTrackingConfiguration = targetTrackingConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "PolicyName"
            case policyType = "PolicyType"
            case targetTrackingConfiguration = "TargetTrackingConfiguration"
        }
    }

    public struct ApplicationSource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagFilters", required: false, type: .list), 
            AWSShapeMember(label: "CloudFormationStackARN", required: false, type: .string)
        ]
        /// A set of tags (up to 50).
        public let tagFilters: [TagFilter]?
        /// The Amazon Resource Name (ARN) of a AWS CloudFormation stack.
        public let cloudFormationStackARN: String?

        public init(cloudFormationStackARN: String? = nil, tagFilters: [TagFilter]? = nil) {
            self.tagFilters = tagFilters
            self.cloudFormationStackARN = cloudFormationStackARN
        }

        private enum CodingKeys: String, CodingKey {
            case tagFilters = "TagFilters"
            case cloudFormationStackARN = "CloudFormationStackARN"
        }
    }

    public struct ScalingPlan: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StatusStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ScalingPlanName", required: true, type: .string), 
            AWSShapeMember(label: "ApplicationSource", required: true, type: .structure), 
            AWSShapeMember(label: "StatusCode", required: true, type: .enum), 
            AWSShapeMember(label: "ScalingPlanVersion", required: true, type: .long), 
            AWSShapeMember(label: "ScalingInstructions", required: true, type: .list), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string)
        ]
        /// The Unix time stamp when the scaling plan entered the current status.
        public let statusStartTime: TimeStamp?
        /// The name of the scaling plan.
        public let scalingPlanName: String
        /// The application source.
        public let applicationSource: ApplicationSource
        /// The status of the scaling plan.    Active - The scaling plan is active.    ActiveWithProblems - The scaling plan is active, but the scaling configuration for one or more resources could not be applied.    CreationInProgress - The scaling plan is being created.    CreationFailed - The scaling plan could not be created.    DeletionInProgress - The scaling plan is being deleted.    DeletionFailed - The scaling plan could not be deleted.    UpdateInProgress - The scaling plan is being updated.    UpdateFailed - The scaling plan could not be updated.  
        public let statusCode: ScalingPlanStatusCode
        /// The version number of the scaling plan.
        public let scalingPlanVersion: Int64
        /// The scaling instructions.
        public let scalingInstructions: [ScalingInstruction]
        /// The Unix time stamp when the scaling plan was created.
        public let creationTime: TimeStamp?
        /// A simple message about the current status of the scaling plan.
        public let statusMessage: String?

        public init(applicationSource: ApplicationSource, creationTime: TimeStamp? = nil, scalingInstructions: [ScalingInstruction], scalingPlanName: String, scalingPlanVersion: Int64, statusCode: ScalingPlanStatusCode, statusMessage: String? = nil, statusStartTime: TimeStamp? = nil) {
            self.statusStartTime = statusStartTime
            self.scalingPlanName = scalingPlanName
            self.applicationSource = applicationSource
            self.statusCode = statusCode
            self.scalingPlanVersion = scalingPlanVersion
            self.scalingInstructions = scalingInstructions
            self.creationTime = creationTime
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case statusStartTime = "StatusStartTime"
            case scalingPlanName = "ScalingPlanName"
            case applicationSource = "ApplicationSource"
            case statusCode = "StatusCode"
            case scalingPlanVersion = "ScalingPlanVersion"
            case scalingInstructions = "ScalingInstructions"
            case creationTime = "CreationTime"
            case statusMessage = "StatusMessage"
        }
    }

    public enum ScalingPlanStatusCode: String, CustomStringConvertible, Codable {
        case active = "Active"
        case activewithproblems = "ActiveWithProblems"
        case creationinprogress = "CreationInProgress"
        case creationfailed = "CreationFailed"
        case deletioninprogress = "DeletionInProgress"
        case deletionfailed = "DeletionFailed"
        case updateinprogress = "UpdateInProgress"
        case updatefailed = "UpdateFailed"
        public var description: String { return self.rawValue }
    }

    public struct DeleteScalingPlanRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScalingPlanVersion", required: true, type: .long), 
            AWSShapeMember(label: "ScalingPlanName", required: true, type: .string)
        ]
        /// The version number of the scaling plan.
        public let scalingPlanVersion: Int64
        /// The name of the scaling plan.
        public let scalingPlanName: String

        public init(scalingPlanName: String, scalingPlanVersion: Int64) {
            self.scalingPlanVersion = scalingPlanVersion
            self.scalingPlanName = scalingPlanName
        }

        private enum CodingKeys: String, CodingKey {
            case scalingPlanVersion = "ScalingPlanVersion"
            case scalingPlanName = "ScalingPlanName"
        }
    }

    public struct TagFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: false, type: .list), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The tag values (0 to 20).
        public let values: [String]?
        /// The tag key.
        public let key: String?

        public init(key: String? = nil, values: [String]? = nil) {
            self.values = values
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
            case key = "Key"
        }
    }

    public struct GetScalingPlanResourceForecastDataResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Datapoints", required: true, type: .list)
        ]
        /// The data points to return.
        public let datapoints: [Datapoint]

        public init(datapoints: [Datapoint]) {
            self.datapoints = datapoints
        }

        private enum CodingKeys: String, CodingKey {
            case datapoints = "Datapoints"
        }
    }

    public struct CustomizedLoadMetricSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Statistic", required: true, type: .enum), 
            AWSShapeMember(label: "Unit", required: false, type: .string), 
            AWSShapeMember(label: "Dimensions", required: false, type: .list), 
            AWSShapeMember(label: "Namespace", required: true, type: .string), 
            AWSShapeMember(label: "MetricName", required: true, type: .string)
        ]
        /// The statistic of the metric. Currently, the value must always be Sum. 
        public let statistic: MetricStatistic
        /// The unit of the metric.
        public let unit: String?
        /// The dimensions of the metric.
        public let dimensions: [MetricDimension]?
        /// The namespace of the metric.
        public let namespace: String
        /// The name of the metric.
        public let metricName: String

        public init(dimensions: [MetricDimension]? = nil, metricName: String, namespace: String, statistic: MetricStatistic, unit: String? = nil) {
            self.statistic = statistic
            self.unit = unit
            self.dimensions = dimensions
            self.namespace = namespace
            self.metricName = metricName
        }

        private enum CodingKeys: String, CodingKey {
            case statistic = "Statistic"
            case unit = "Unit"
            case dimensions = "Dimensions"
            case namespace = "Namespace"
            case metricName = "MetricName"
        }
    }

    public struct MetricDimension: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]
        /// The name of the dimension.
        public let name: String
        /// The value of the dimension.
        public let value: String

        public init(name: String, value: String) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct CreateScalingPlanResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScalingPlanVersion", required: true, type: .long)
        ]
        /// The version number of the scaling plan. This value is always 1. Currently, you cannot specify multiple scaling plan versions.
        public let scalingPlanVersion: Int64

        public init(scalingPlanVersion: Int64) {
            self.scalingPlanVersion = scalingPlanVersion
        }

        private enum CodingKeys: String, CodingKey {
            case scalingPlanVersion = "ScalingPlanVersion"
        }
    }

    public struct ScalingInstruction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScalableDimension", required: true, type: .enum), 
            AWSShapeMember(label: "ServiceNamespace", required: true, type: .enum), 
            AWSShapeMember(label: "TargetTrackingConfigurations", required: true, type: .list), 
            AWSShapeMember(label: "CustomizedLoadMetricSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "DisableDynamicScaling", required: false, type: .boolean), 
            AWSShapeMember(label: "PredefinedLoadMetricSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "MaxCapacity", required: true, type: .integer), 
            AWSShapeMember(label: "PredictiveScalingMaxCapacityBuffer", required: false, type: .integer), 
            AWSShapeMember(label: "ScheduledActionBufferTime", required: false, type: .integer), 
            AWSShapeMember(label: "ScalingPolicyUpdateBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "MinCapacity", required: true, type: .integer), 
            AWSShapeMember(label: "PredictiveScalingMode", required: false, type: .enum), 
            AWSShapeMember(label: "PredictiveScalingMaxCapacityBehavior", required: false, type: .enum), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string)
        ]
        /// The scalable dimension associated with the resource.    autoscaling:autoScalingGroup:DesiredCapacity - The desired capacity of an Auto Scaling group.    ecs:service:DesiredCount - The desired task count of an ECS service.    ec2:spot-fleet-request:TargetCapacity - The target capacity of a Spot Fleet request.    dynamodb:table:ReadCapacityUnits - The provisioned read capacity for a DynamoDB table.    dynamodb:table:WriteCapacityUnits - The provisioned write capacity for a DynamoDB table.    dynamodb:index:ReadCapacityUnits - The provisioned read capacity for a DynamoDB global secondary index.    dynamodb:index:WriteCapacityUnits - The provisioned write capacity for a DynamoDB global secondary index.    rds:cluster:ReadReplicaCount - The count of Aurora Replicas in an Aurora DB cluster. Available for Aurora MySQL-compatible edition.  
        public let scalableDimension: ScalableDimension
        /// The namespace of the AWS service.
        public let serviceNamespace: ServiceNamespace
        /// The structure that defines new target tracking configurations (up to 10). Each of these structures includes a specific scaling metric and a target value for the metric, along with various parameters to use with dynamic scaling.  With predictive scaling and dynamic scaling, the resource scales based on the target tracking configuration that provides the largest capacity for both scale in and scale out.  Condition: The scaling metric must be unique across target tracking configurations.
        public let targetTrackingConfigurations: [TargetTrackingConfiguration]
        /// The customized load metric to use for predictive scaling. This parameter or a PredefinedLoadMetricSpecification is required when configuring predictive scaling, and cannot be used otherwise. 
        public let customizedLoadMetricSpecification: CustomizedLoadMetricSpecification?
        /// Controls whether dynamic scaling by AWS Auto Scaling is disabled. When dynamic scaling is enabled, AWS Auto Scaling creates target tracking scaling policies based on the specified target tracking configurations.  The default is enabled (false). 
        public let disableDynamicScaling: Bool?
        /// The predefined load metric to use for predictive scaling. This parameter or a CustomizedLoadMetricSpecification is required when configuring predictive scaling, and cannot be used otherwise. 
        public let predefinedLoadMetricSpecification: PredefinedLoadMetricSpecification?
        /// The maximum capacity of the resource. The exception to this upper limit is if you specify a non-default setting for PredictiveScalingMaxCapacityBehavior. 
        public let maxCapacity: Int32
        /// The size of the capacity buffer to use when the forecast capacity is close to or exceeds the maximum capacity. The value is specified as a percentage relative to the forecast capacity. For example, if the buffer is 10, this means a 10 percent buffer, such that if the forecast capacity is 50, and the maximum capacity is 40, then the effective maximum capacity is 55. Only valid when configuring predictive scaling. Required if the PredictiveScalingMaxCapacityBehavior is set to SetMaxCapacityAboveForecastCapacity, and cannot be used otherwise. The range is 1-100.
        public let predictiveScalingMaxCapacityBuffer: Int32?
        /// The amount of time, in seconds, to buffer the run time of scheduled scaling actions when scaling out. For example, if the forecast says to add capacity at 10:00 AM, and the buffer time is 5 minutes, then the run time of the corresponding scheduled scaling action will be 9:55 AM. The intention is to give resources time to be provisioned. For example, it can take a few minutes to launch an EC2 instance. The actual amount of time required depends on several factors, such as the size of the instance and whether there are startup scripts to complete.  The value must be less than the forecast interval duration of 3600 seconds (60 minutes). The default is 300 seconds.  Only valid when configuring predictive scaling. 
        public let scheduledActionBufferTime: Int32?
        /// Controls whether a resource's externally created scaling policies are kept or replaced.  The default value is KeepExternalPolicies. If the parameter is set to ReplaceExternalPolicies, any scaling policies that are external to AWS Auto Scaling are deleted and new target tracking scaling policies created.  Only valid when configuring dynamic scaling.  Condition: The number of existing policies to be replaced must be less than or equal to 50. If there are more than 50 policies to be replaced, AWS Auto Scaling keeps all existing policies and does not create new ones.
        public let scalingPolicyUpdateBehavior: ScalingPolicyUpdateBehavior?
        /// The minimum capacity of the resource. 
        public let minCapacity: Int32
        /// The predictive scaling mode. The default value is ForecastAndScale. Otherwise, AWS Auto Scaling forecasts capacity but does not create any scheduled scaling actions based on the capacity forecast. 
        public let predictiveScalingMode: PredictiveScalingMode?
        /// Defines the behavior that should be applied if the forecast capacity approaches or exceeds the maximum capacity specified for the resource. The default value is SetForecastCapacityToMaxCapacity. The following are possible values:    SetForecastCapacityToMaxCapacity - AWS Auto Scaling cannot scale resource capacity higher than the maximum capacity. The maximum capacity is enforced as a hard limit.     SetMaxCapacityToForecastCapacity - AWS Auto Scaling may scale resource capacity higher than the maximum capacity to equal but not exceed forecast capacity.    SetMaxCapacityAboveForecastCapacity - AWS Auto Scaling may scale resource capacity higher than the maximum capacity by a specified buffer value. The intention is to give the target tracking scaling policy extra capacity if unexpected traffic occurs.    Only valid when configuring predictive scaling.
        public let predictiveScalingMaxCapacityBehavior: PredictiveScalingMaxCapacityBehavior?
        /// The ID of the resource. This string consists of the resource type and unique identifier.   Auto Scaling group - The resource type is autoScalingGroup and the unique identifier is the name of the Auto Scaling group. Example: autoScalingGroup/my-asg.   ECS service - The resource type is service and the unique identifier is the cluster name and service name. Example: service/default/sample-webapp.   Spot Fleet request - The resource type is spot-fleet-request and the unique identifier is the Spot Fleet request ID. Example: spot-fleet-request/sfr-73fbd2ce-aa30-494c-8788-1cee4EXAMPLE.   DynamoDB table - The resource type is table and the unique identifier is the resource ID. Example: table/my-table.   DynamoDB global secondary index - The resource type is index and the unique identifier is the resource ID. Example: table/my-table/index/my-table-index.   Aurora DB cluster - The resource type is cluster and the unique identifier is the cluster name. Example: cluster:my-db-cluster.  
        public let resourceId: String

        public init(customizedLoadMetricSpecification: CustomizedLoadMetricSpecification? = nil, disableDynamicScaling: Bool? = nil, maxCapacity: Int32, minCapacity: Int32, predefinedLoadMetricSpecification: PredefinedLoadMetricSpecification? = nil, predictiveScalingMaxCapacityBehavior: PredictiveScalingMaxCapacityBehavior? = nil, predictiveScalingMaxCapacityBuffer: Int32? = nil, predictiveScalingMode: PredictiveScalingMode? = nil, resourceId: String, scalableDimension: ScalableDimension, scalingPolicyUpdateBehavior: ScalingPolicyUpdateBehavior? = nil, scheduledActionBufferTime: Int32? = nil, serviceNamespace: ServiceNamespace, targetTrackingConfigurations: [TargetTrackingConfiguration]) {
            self.scalableDimension = scalableDimension
            self.serviceNamespace = serviceNamespace
            self.targetTrackingConfigurations = targetTrackingConfigurations
            self.customizedLoadMetricSpecification = customizedLoadMetricSpecification
            self.disableDynamicScaling = disableDynamicScaling
            self.predefinedLoadMetricSpecification = predefinedLoadMetricSpecification
            self.maxCapacity = maxCapacity
            self.predictiveScalingMaxCapacityBuffer = predictiveScalingMaxCapacityBuffer
            self.scheduledActionBufferTime = scheduledActionBufferTime
            self.scalingPolicyUpdateBehavior = scalingPolicyUpdateBehavior
            self.minCapacity = minCapacity
            self.predictiveScalingMode = predictiveScalingMode
            self.predictiveScalingMaxCapacityBehavior = predictiveScalingMaxCapacityBehavior
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case scalableDimension = "ScalableDimension"
            case serviceNamespace = "ServiceNamespace"
            case targetTrackingConfigurations = "TargetTrackingConfigurations"
            case customizedLoadMetricSpecification = "CustomizedLoadMetricSpecification"
            case disableDynamicScaling = "DisableDynamicScaling"
            case predefinedLoadMetricSpecification = "PredefinedLoadMetricSpecification"
            case maxCapacity = "MaxCapacity"
            case predictiveScalingMaxCapacityBuffer = "PredictiveScalingMaxCapacityBuffer"
            case scheduledActionBufferTime = "ScheduledActionBufferTime"
            case scalingPolicyUpdateBehavior = "ScalingPolicyUpdateBehavior"
            case minCapacity = "MinCapacity"
            case predictiveScalingMode = "PredictiveScalingMode"
            case predictiveScalingMaxCapacityBehavior = "PredictiveScalingMaxCapacityBehavior"
            case resourceId = "ResourceId"
        }
    }

    public struct TargetTrackingConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EstimatedInstanceWarmup", required: false, type: .integer), 
            AWSShapeMember(label: "ScaleInCooldown", required: false, type: .integer), 
            AWSShapeMember(label: "DisableScaleIn", required: false, type: .boolean), 
            AWSShapeMember(label: "PredefinedScalingMetricSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "TargetValue", required: true, type: .double), 
            AWSShapeMember(label: "CustomizedScalingMetricSpecification", required: false, type: .structure), 
            AWSShapeMember(label: "ScaleOutCooldown", required: false, type: .integer)
        ]
        /// The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. This value is used only if the resource is an Auto Scaling group.
        public let estimatedInstanceWarmup: Int32?
        /// The amount of time, in seconds, after a scale in activity completes before another scale in activity can start. This value is not used if the scalable resource is an Auto Scaling group. The cooldown period is used to block subsequent scale in requests until it has expired. The intention is to scale in conservatively to protect your application's availability. However, if another alarm triggers a scale-out policy during the cooldown period after a scale-in, AWS Auto Scaling scales out your scalable target immediately.
        public let scaleInCooldown: Int32?
        /// Indicates whether scale in by the target tracking scaling policy is disabled. If the value is true, scale in is disabled and the target tracking scaling policy doesn't remove capacity from the scalable resource. Otherwise, scale in is enabled and the target tracking scaling policy can remove capacity from the scalable resource.  The default value is false.
        public let disableScaleIn: Bool?
        /// A predefined metric.
        public let predefinedScalingMetricSpecification: PredefinedScalingMetricSpecification?
        /// The target value for the metric. The range is 8.515920e-109 to 1.174271e+108 (Base 10) or 2e-360 to 2e360 (Base 2).
        public let targetValue: Double
        /// A customized metric.
        public let customizedScalingMetricSpecification: CustomizedScalingMetricSpecification?
        /// The amount of time, in seconds, after a scale-out activity completes before another scale-out activity can start. This value is not used if the scalable resource is an Auto Scaling group. While the cooldown period is in effect, the capacity that has been added by the previous scale-out event that initiated the cooldown is calculated as part of the desired capacity for the next scale out. The intention is to continuously (but not excessively) scale out.
        public let scaleOutCooldown: Int32?

        public init(customizedScalingMetricSpecification: CustomizedScalingMetricSpecification? = nil, disableScaleIn: Bool? = nil, estimatedInstanceWarmup: Int32? = nil, predefinedScalingMetricSpecification: PredefinedScalingMetricSpecification? = nil, scaleInCooldown: Int32? = nil, scaleOutCooldown: Int32? = nil, targetValue: Double) {
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
            self.scaleInCooldown = scaleInCooldown
            self.disableScaleIn = disableScaleIn
            self.predefinedScalingMetricSpecification = predefinedScalingMetricSpecification
            self.targetValue = targetValue
            self.customizedScalingMetricSpecification = customizedScalingMetricSpecification
            self.scaleOutCooldown = scaleOutCooldown
        }

        private enum CodingKeys: String, CodingKey {
            case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
            case scaleInCooldown = "ScaleInCooldown"
            case disableScaleIn = "DisableScaleIn"
            case predefinedScalingMetricSpecification = "PredefinedScalingMetricSpecification"
            case targetValue = "TargetValue"
            case customizedScalingMetricSpecification = "CustomizedScalingMetricSpecification"
            case scaleOutCooldown = "ScaleOutCooldown"
        }
    }

    public struct UpdateScalingPlanRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationSource", required: false, type: .structure), 
            AWSShapeMember(label: "ScalingPlanName", required: true, type: .string), 
            AWSShapeMember(label: "ScalingInstructions", required: false, type: .list), 
            AWSShapeMember(label: "ScalingPlanVersion", required: true, type: .long)
        ]
        /// A CloudFormation stack or set of tags.
        public let applicationSource: ApplicationSource?
        /// The name of the scaling plan.
        public let scalingPlanName: String
        /// The scaling instructions.
        public let scalingInstructions: [ScalingInstruction]?
        /// The version number of the scaling plan.
        public let scalingPlanVersion: Int64

        public init(applicationSource: ApplicationSource? = nil, scalingInstructions: [ScalingInstruction]? = nil, scalingPlanName: String, scalingPlanVersion: Int64) {
            self.applicationSource = applicationSource
            self.scalingPlanName = scalingPlanName
            self.scalingInstructions = scalingInstructions
            self.scalingPlanVersion = scalingPlanVersion
        }

        private enum CodingKeys: String, CodingKey {
            case applicationSource = "ApplicationSource"
            case scalingPlanName = "ScalingPlanName"
            case scalingInstructions = "ScalingInstructions"
            case scalingPlanVersion = "ScalingPlanVersion"
        }
    }

    public enum PredictiveScalingMaxCapacityBehavior: String, CustomStringConvertible, Codable {
        case setforecastcapacitytomaxcapacity = "SetForecastCapacityToMaxCapacity"
        case setmaxcapacitytoforecastcapacity = "SetMaxCapacityToForecastCapacity"
        case setmaxcapacityaboveforecastcapacity = "SetMaxCapacityAboveForecastCapacity"
        public var description: String { return self.rawValue }
    }

    public struct CreateScalingPlanRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScalingPlanName", required: true, type: .string), 
            AWSShapeMember(label: "ScalingInstructions", required: true, type: .list), 
            AWSShapeMember(label: "ApplicationSource", required: true, type: .structure)
        ]
        /// The name of the scaling plan. Names cannot contain vertical bars, colons, or forward slashes.
        public let scalingPlanName: String
        /// The scaling instructions.
        public let scalingInstructions: [ScalingInstruction]
        /// A CloudFormation stack or set of tags. You can create one scaling plan per application source.
        public let applicationSource: ApplicationSource

        public init(applicationSource: ApplicationSource, scalingInstructions: [ScalingInstruction], scalingPlanName: String) {
            self.scalingPlanName = scalingPlanName
            self.scalingInstructions = scalingInstructions
            self.applicationSource = applicationSource
        }

        private enum CodingKeys: String, CodingKey {
            case scalingPlanName = "ScalingPlanName"
            case scalingInstructions = "ScalingInstructions"
            case applicationSource = "ApplicationSource"
        }
    }

}