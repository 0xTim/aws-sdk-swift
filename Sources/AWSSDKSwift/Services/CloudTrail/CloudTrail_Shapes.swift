// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension CloudTrail {

    public struct Resource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", required: false, type: .string), 
            AWSShapeMember(label: "ResourceName", required: false, type: .string)
        ]
        /// The type of a resource referenced by the event returned. When the resource type cannot be determined, null is returned. Some examples of resource types are: Instance for EC2, Trail for CloudTrail, DBInstance for RDS, and AccessKey for IAM. For a list of resource types supported for event lookup, see Resource Types Supported for Event Lookup.
        public let resourceType: String?
        /// The name of the resource referenced by the event returned. These are user-created names whose values will depend on the environment. For example, the resource name might be "auto-scaling-test-group" for an Auto Scaling Group or "i-1234567" for an EC2 Instance.
        public let resourceName: String?

        public init(resourceType: String? = nil, resourceName: String? = nil) {
            self.resourceType = resourceType
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case resourceName = "ResourceName"
        }
    }

    public struct AddTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagsList", required: false, type: .list), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string)
        ]
        /// Contains a list of CloudTrail tags, up to a limit of 50
        public let tagsList: [Tag]?
        /// Specifies the ARN of the trail to which one or more tags will be added. The format of a trail ARN is:  arn:aws:cloudtrail:us-east-1:123456789012:trail/MyTrail 
        public let resourceId: String

        public init(tagsList: [Tag]? = nil, resourceId: String) {
            self.tagsList = tagsList
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case tagsList = "TagsList"
            case resourceId = "ResourceId"
        }
    }

    public enum LookupAttributeKey: String, CustomStringConvertible, Codable {
        case eventid = "EventId"
        case eventname = "EventName"
        case username = "Username"
        case resourcetype = "ResourceType"
        case resourcename = "ResourceName"
        case eventsource = "EventSource"
        public var description: String { return self.rawValue }
    }

    public struct RemoveTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagsList", required: false, type: .list), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string)
        ]
        /// Specifies a list of tags to be removed.
        public let tagsList: [Tag]?
        /// Specifies the ARN of the trail from which tags should be removed. The format of a trail ARN is:  arn:aws:cloudtrail:us-east-1:123456789012:trail/MyTrail 
        public let resourceId: String

        public init(tagsList: [Tag]? = nil, resourceId: String) {
            self.tagsList = tagsList
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case tagsList = "TagsList"
            case resourceId = "ResourceId"
        }
    }

    public struct ListPublicKeysResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PublicKeyList", required: false, type: .list)
        ]
        /// Reserved for future use.
        public let nextToken: String?
        /// Contains an array of PublicKey objects.  The returned public keys may have validity time ranges that overlap. 
        public let publicKeyList: [PublicKey]?

        public init(nextToken: String? = nil, publicKeyList: [PublicKey]? = nil) {
            self.nextToken = nextToken
            self.publicKeyList = publicKeyList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case publicKeyList = "PublicKeyList"
        }
    }

    public struct Event: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudTrailEvent", required: false, type: .string), 
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "EventId", required: false, type: .string), 
            AWSShapeMember(label: "Resources", required: false, type: .list), 
            AWSShapeMember(label: "EventSource", required: false, type: .string), 
            AWSShapeMember(label: "EventTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EventName", required: false, type: .string)
        ]
        /// A JSON string that contains a representation of the event returned.
        public let cloudTrailEvent: String?
        /// A user name or role name of the requester that called the API in the event returned.
        public let username: String?
        /// The CloudTrail ID of the event returned.
        public let eventId: String?
        /// A list of resources referenced by the event returned.
        public let resources: [Resource]?
        /// The AWS service that the request was made to.
        public let eventSource: String?
        /// The date and time of the event returned.
        public let eventTime: TimeStamp?
        /// The name of the event returned.
        public let eventName: String?

        public init(cloudTrailEvent: String? = nil, username: String? = nil, eventId: String? = nil, resources: [Resource]? = nil, eventSource: String? = nil, eventTime: TimeStamp? = nil, eventName: String? = nil) {
            self.cloudTrailEvent = cloudTrailEvent
            self.username = username
            self.eventId = eventId
            self.resources = resources
            self.eventSource = eventSource
            self.eventTime = eventTime
            self.eventName = eventName
        }

        private enum CodingKeys: String, CodingKey {
            case cloudTrailEvent = "CloudTrailEvent"
            case username = "Username"
            case eventId = "EventId"
            case resources = "Resources"
            case eventSource = "EventSource"
            case eventTime = "EventTime"
            case eventName = "EventName"
        }
    }

    public struct PutEventSelectorsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrailARN", required: false, type: .string), 
            AWSShapeMember(label: "EventSelectors", required: false, type: .list)
        ]
        /// Specifies the ARN of the trail that was updated with event selectors. The format of a trail ARN is:  arn:aws:cloudtrail:us-east-1:123456789012:trail/MyTrail 
        public let trailARN: String?
        /// Specifies the event selectors configured for your trail.
        public let eventSelectors: [EventSelector]?

        public init(trailARN: String? = nil, eventSelectors: [EventSelector]? = nil) {
            self.trailARN = trailARN
            self.eventSelectors = eventSelectors
        }

        private enum CodingKeys: String, CodingKey {
            case trailARN = "TrailARN"
            case eventSelectors = "EventSelectors"
        }
    }

    public struct LookupAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeValue", required: true, type: .string), 
            AWSShapeMember(label: "AttributeKey", required: true, type: .enum)
        ]
        /// Specifies a value for the specified AttributeKey.
        public let attributeValue: String
        /// Specifies an attribute on which to filter the events returned.
        public let attributeKey: LookupAttributeKey

        public init(attributeValue: String, attributeKey: LookupAttributeKey) {
            self.attributeValue = attributeValue
            self.attributeKey = attributeKey
        }

        private enum CodingKeys: String, CodingKey {
            case attributeValue = "AttributeValue"
            case attributeKey = "AttributeKey"
        }
    }

    public struct ListPublicKeysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp)
        ]
        /// Reserved for future use.
        public let nextToken: String?
        /// Optionally specifies, in UTC, the end of the time range to look up public keys for CloudTrail digest files. If not specified, the current time is used.
        public let endTime: TimeStamp?
        /// Optionally specifies, in UTC, the start of the time range to look up public keys for CloudTrail digest files. If not specified, the current time is used, and the current public key is returned.
        public let startTime: TimeStamp?

        public init(nextToken: String? = nil, endTime: TimeStamp? = nil, startTime: TimeStamp? = nil) {
            self.nextToken = nextToken
            self.endTime = endTime
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case endTime = "EndTime"
            case startTime = "StartTime"
        }
    }

    public struct GetEventSelectorsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrailARN", required: false, type: .string), 
            AWSShapeMember(label: "EventSelectors", required: false, type: .list)
        ]
        /// The specified trail ARN that has the event selectors.
        public let trailARN: String?
        /// The event selectors that are configured for the trail.
        public let eventSelectors: [EventSelector]?

        public init(trailARN: String? = nil, eventSelectors: [EventSelector]? = nil) {
            self.trailARN = trailARN
            self.eventSelectors = eventSelectors
        }

        private enum CodingKeys: String, CodingKey {
            case trailARN = "TrailARN"
            case eventSelectors = "EventSelectors"
        }
    }

    public struct ListTagsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceTagList", required: false, type: .list)
        ]
        /// Reserved for future use.
        public let nextToken: String?
        /// A list of resource tags.
        public let resourceTagList: [ResourceTag]?

        public init(nextToken: String? = nil, resourceTagList: [ResourceTag]? = nil) {
            self.nextToken = nextToken
            self.resourceTagList = resourceTagList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resourceTagList = "ResourceTagList"
        }
    }

    public struct EventSelector: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IncludeManagementEvents", required: false, type: .boolean), 
            AWSShapeMember(label: "DataResources", required: false, type: .list), 
            AWSShapeMember(label: "ReadWriteType", required: false, type: .enum)
        ]
        /// Specify if you want your event selector to include management events for your trail.  For more information, see Management Events in the AWS CloudTrail User Guide. By default, the value is true.
        public let includeManagementEvents: Bool?
        /// CloudTrail supports logging only data events for S3 objects. You can specify up to 250 S3 buckets and object prefixes for a trail. For more information, see Data Events in the AWS CloudTrail User Guide.
        public let dataResources: [DataResource]?
        /// Specify if you want your trail to log read-only events, write-only events, or all. For example, the EC2 GetConsoleOutput is a read-only API operation and RunInstances is a write-only API operation.  By default, the value is All.
        public let readWriteType: ReadWriteType?

        public init(includeManagementEvents: Bool? = nil, dataResources: [DataResource]? = nil, readWriteType: ReadWriteType? = nil) {
            self.includeManagementEvents = includeManagementEvents
            self.dataResources = dataResources
            self.readWriteType = readWriteType
        }

        private enum CodingKeys: String, CodingKey {
            case includeManagementEvents = "IncludeManagementEvents"
            case dataResources = "DataResources"
            case readWriteType = "ReadWriteType"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The key in a key-value pair. The key must be must be no longer than 128 Unicode characters. The key must be unique for the resource to which it applies.
        public let key: String
        /// The value in a key-value pair of a tag. The value must be no longer than 256 Unicode characters.
        public let value: String?

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct DescribeTrailsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "trailNameList", required: false, type: .list), 
            AWSShapeMember(label: "includeShadowTrails", required: false, type: .boolean)
        ]
        /// Specifies a list of trail names, trail ARNs, or both, of the trails to describe. The format of a trail ARN is:  arn:aws:cloudtrail:us-east-1:123456789012:trail/MyTrail  If an empty list is specified, information for the trail in the current region is returned.   If an empty list is specified and IncludeShadowTrails is false, then information for all trails in the current region is returned.   If an empty list is specified and IncludeShadowTrails is null or true, then information for all trails in the current region and any associated shadow trails in other regions is returned.    If one or more trail names are specified, information is returned only if the names match the names of trails belonging only to the current region. To return information about a trail in another region, you must specify its trail ARN. 
        public let trailNameList: [String]?
        /// Specifies whether to include shadow trails in the response. A shadow trail is the replication in a region of a trail that was created in a different region. The default is true.
        public let includeShadowTrails: Bool?

        public init(trailNameList: [String]? = nil, includeShadowTrails: Bool? = nil) {
            self.trailNameList = trailNameList
            self.includeShadowTrails = includeShadowTrails
        }

        private enum CodingKeys: String, CodingKey {
            case trailNameList = "trailNameList"
            case includeShadowTrails = "includeShadowTrails"
        }
    }

    public struct LookupEventsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Events", required: false, type: .list)
        ]
        /// The token to use to get the next page of results after a previous API call. If the token does not appear, there are no more results to return. The token must be passed in with the same parameters as the previous call. For example, if the original call specified an AttributeKey of 'Username' with a value of 'root', the call with NextToken should include those same parameters.
        public let nextToken: String?
        /// A list of events returned based on the lookup attributes specified and the CloudTrail event. The events list is sorted by time. The most recent event is listed first.
        public let events: [Event]?

        public init(nextToken: String? = nil, events: [Event]? = nil) {
            self.nextToken = nextToken
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case events = "Events"
        }
    }

    public struct RemoveTagsResponse: AWSShape {

    }

    public struct LookupEventsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "LookupAttributes", required: false, type: .list)
        ]
        /// The token to use to get the next page of results after a previous API call. This token must be passed in with the same parameters that were specified in the the original call. For example, if the original call specified an AttributeKey of 'Username' with a value of 'root', the call with NextToken should include those same parameters.
        public let nextToken: String?
        /// Specifies that only events that occur before or at the specified time are returned. If the specified end time is before the specified start time, an error is returned.
        public let endTime: TimeStamp?
        /// Specifies that only events that occur after or at the specified time are returned. If the specified start time is after the specified end time, an error is returned.
        public let startTime: TimeStamp?
        /// The number of events to return. Possible values are 1 through 50. The default is 10.
        public let maxResults: Int32?
        /// Contains a list of lookup attributes. Currently the list can contain only one item.
        public let lookupAttributes: [LookupAttribute]?

        public init(nextToken: String? = nil, endTime: TimeStamp? = nil, startTime: TimeStamp? = nil, maxResults: Int32? = nil, lookupAttributes: [LookupAttribute]? = nil) {
            self.nextToken = nextToken
            self.endTime = endTime
            self.startTime = startTime
            self.maxResults = maxResults
            self.lookupAttributes = lookupAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case endTime = "EndTime"
            case startTime = "StartTime"
            case maxResults = "MaxResults"
            case lookupAttributes = "LookupAttributes"
        }
    }

    public struct DeleteTrailRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Specifies the name or the CloudTrail ARN of the trail to be deleted. The format of a trail ARN is: arn:aws:cloudtrail:us-east-1:123456789012:trail/MyTrail 
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct UpdateTrailRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "S3BucketName", required: false, type: .string), 
            AWSShapeMember(label: "IncludeGlobalServiceEvents", required: false, type: .boolean), 
            AWSShapeMember(label: "CloudWatchLogsRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchLogsLogGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "EnableLogFileValidation", required: false, type: .boolean), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "SnsTopicName", required: false, type: .string), 
            AWSShapeMember(label: "IsMultiRegionTrail", required: false, type: .boolean), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for log file delivery. For more information, see Finding Your CloudTrail Log Files. The maximum length is 200 characters.
        public let s3KeyPrefix: String?
        /// Specifies the name of the Amazon S3 bucket designated for publishing log files. See Amazon S3 Bucket Naming Requirements.
        public let s3BucketName: String?
        /// Specifies whether the trail is publishing events from global services such as IAM to the log files.
        public let includeGlobalServiceEvents: Bool?
        /// Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.
        public let cloudWatchLogsRoleArn: String?
        /// Specifies a log group name using an Amazon Resource Name (ARN), a unique identifier that represents the log group to which CloudTrail logs will be delivered. Not required unless you specify CloudWatchLogsRoleArn.
        public let cloudWatchLogsLogGroupArn: String?
        /// Specifies whether log file validation is enabled. The default is false.  When you disable log file integrity validation, the chain of digest files is broken after one hour. CloudTrail will not create digest files for log files that were delivered during a period in which log file integrity validation was disabled. For example, if you enable log file integrity validation at noon on January 1, disable it at noon on January 2, and re-enable it at noon on January 10, digest files will not be created for the log files delivered from noon on January 2 to noon on January 10. The same applies whenever you stop CloudTrail logging or delete a trail. 
        public let enableLogFileValidation: Bool?
        /// Specifies the KMS key ID to use to encrypt the logs delivered by CloudTrail. The value can be an alias name prefixed by "alias/", a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier. Examples:   alias/MyAliasName   arn:aws:kms:us-east-1:123456789012:alias/MyAliasName   arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012   12345678-1234-1234-1234-123456789012  
        public let kmsKeyId: String?
        /// Specifies the name of the Amazon SNS topic defined for notification of log file delivery. The maximum length is 256 characters.
        public let snsTopicName: String?
        /// Specifies whether the trail applies only to the current region or to all regions. The default is false. If the trail exists only in the current region and this value is set to true, shadow trails (replications of the trail) will be created in the other regions. If the trail exists in all regions and this value is set to false, the trail will remain in the region where it was created, and its shadow trails in other regions will be deleted.
        public let isMultiRegionTrail: Bool?
        /// Specifies the name of the trail or trail ARN. If Name is a trail name, the string must meet the following requirements:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-)   Start with a letter or number, and end with a letter or number   Be between 3 and 128 characters   Have no adjacent periods, underscores or dashes. Names like my-_namespace and my--namespace are invalid.   Not be in IP address format (for example, 192.168.5.4)   If Name is a trail ARN, it must be in the format:  arn:aws:cloudtrail:us-east-1:123456789012:trail/MyTrail 
        public let name: String

        public init(s3KeyPrefix: String? = nil, s3BucketName: String? = nil, includeGlobalServiceEvents: Bool? = nil, cloudWatchLogsRoleArn: String? = nil, cloudWatchLogsLogGroupArn: String? = nil, enableLogFileValidation: Bool? = nil, kmsKeyId: String? = nil, snsTopicName: String? = nil, isMultiRegionTrail: Bool? = nil, name: String) {
            self.s3KeyPrefix = s3KeyPrefix
            self.s3BucketName = s3BucketName
            self.includeGlobalServiceEvents = includeGlobalServiceEvents
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.enableLogFileValidation = enableLogFileValidation
            self.kmsKeyId = kmsKeyId
            self.snsTopicName = snsTopicName
            self.isMultiRegionTrail = isMultiRegionTrail
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case s3KeyPrefix = "S3KeyPrefix"
            case s3BucketName = "S3BucketName"
            case includeGlobalServiceEvents = "IncludeGlobalServiceEvents"
            case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
            case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
            case enableLogFileValidation = "EnableLogFileValidation"
            case kmsKeyId = "KmsKeyId"
            case snsTopicName = "SnsTopicName"
            case isMultiRegionTrail = "IsMultiRegionTrail"
            case name = "Name"
        }
    }

    public struct DescribeTrailsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "trailList", required: false, type: .list)
        ]
        /// The list of trail objects.
        public let trailList: [Trail]?

        public init(trailList: [Trail]? = nil) {
            self.trailList = trailList
        }

        private enum CodingKeys: String, CodingKey {
            case trailList = "trailList"
        }
    }

    public struct StopLoggingResponse: AWSShape {

    }

    public struct ResourceTag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagsList", required: false, type: .list), 
            AWSShapeMember(label: "ResourceId", required: false, type: .string)
        ]
        /// A list of tags.
        public let tagsList: [Tag]?
        /// Specifies the ARN of the resource.
        public let resourceId: String?

        public init(tagsList: [Tag]? = nil, resourceId: String? = nil) {
            self.tagsList = tagsList
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case tagsList = "TagsList"
            case resourceId = "ResourceId"
        }
    }

    public struct ListTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceIdList", required: true, type: .list)
        ]
        /// Reserved for future use.
        public let nextToken: String?
        /// Specifies a list of trail ARNs whose tags will be listed. The list has a limit of 20 ARNs. The format of a trail ARN is:  arn:aws:cloudtrail:us-east-1:123456789012:trail/MyTrail 
        public let resourceIdList: [String]

        public init(nextToken: String? = nil, resourceIdList: [String]) {
            self.nextToken = nextToken
            self.resourceIdList = resourceIdList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resourceIdList = "ResourceIdList"
        }
    }

    public struct CreateTrailResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnsTopicARN", required: false, type: .string), 
            AWSShapeMember(label: "S3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "S3BucketName", required: false, type: .string), 
            AWSShapeMember(label: "IncludeGlobalServiceEvents", required: false, type: .boolean), 
            AWSShapeMember(label: "CloudWatchLogsRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchLogsLogGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "TrailARN", required: false, type: .string), 
            AWSShapeMember(label: "SnsTopicName", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "LogFileValidationEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "IsMultiRegionTrail", required: false, type: .boolean)
        ]
        /// Specifies the ARN of the Amazon SNS topic that CloudTrail uses to send notifications when log files are delivered. The format of a topic ARN is:  arn:aws:sns:us-east-1:123456789012:MyTopic 
        public let snsTopicARN: String?
        /// Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for log file delivery. For more information, see Finding Your CloudTrail Log Files.
        public let s3KeyPrefix: String?
        /// Specifies the name of the Amazon S3 bucket designated for publishing log files.
        public let s3BucketName: String?
        /// Specifies whether the trail is publishing events from global services such as IAM to the log files.
        public let includeGlobalServiceEvents: Bool?
        /// Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.
        public let cloudWatchLogsRoleArn: String?
        /// Specifies the Amazon Resource Name (ARN) of the log group to which CloudTrail logs will be delivered.
        public let cloudWatchLogsLogGroupArn: String?
        /// Specifies the ARN of the trail that was created. The format of a trail ARN is:  arn:aws:cloudtrail:us-east-1:123456789012:trail/MyTrail 
        public let trailARN: String?
        /// This field is deprecated. Use SnsTopicARN.
        public let snsTopicName: String?
        /// Specifies the KMS key ID that encrypts the logs delivered by CloudTrail. The value is a fully specified ARN to a KMS key in the format:  arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012 
        public let kmsKeyId: String?
        /// Specifies whether log file integrity validation is enabled.
        public let logFileValidationEnabled: Bool?
        /// Specifies the name of the trail.
        public let name: String?
        /// Specifies whether the trail exists in one region or in all regions.
        public let isMultiRegionTrail: Bool?

        public init(snsTopicARN: String? = nil, s3KeyPrefix: String? = nil, s3BucketName: String? = nil, includeGlobalServiceEvents: Bool? = nil, cloudWatchLogsRoleArn: String? = nil, cloudWatchLogsLogGroupArn: String? = nil, trailARN: String? = nil, snsTopicName: String? = nil, kmsKeyId: String? = nil, logFileValidationEnabled: Bool? = nil, name: String? = nil, isMultiRegionTrail: Bool? = nil) {
            self.snsTopicARN = snsTopicARN
            self.s3KeyPrefix = s3KeyPrefix
            self.s3BucketName = s3BucketName
            self.includeGlobalServiceEvents = includeGlobalServiceEvents
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.trailARN = trailARN
            self.snsTopicName = snsTopicName
            self.kmsKeyId = kmsKeyId
            self.logFileValidationEnabled = logFileValidationEnabled
            self.name = name
            self.isMultiRegionTrail = isMultiRegionTrail
        }

        private enum CodingKeys: String, CodingKey {
            case snsTopicARN = "SnsTopicARN"
            case s3KeyPrefix = "S3KeyPrefix"
            case s3BucketName = "S3BucketName"
            case includeGlobalServiceEvents = "IncludeGlobalServiceEvents"
            case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
            case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
            case trailARN = "TrailARN"
            case snsTopicName = "SnsTopicName"
            case kmsKeyId = "KmsKeyId"
            case logFileValidationEnabled = "LogFileValidationEnabled"
            case name = "Name"
            case isMultiRegionTrail = "IsMultiRegionTrail"
        }
    }

    public struct StartLoggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Specifies the name or the CloudTrail ARN of the trail for which CloudTrail logs AWS API calls. The format of a trail ARN is:  arn:aws:cloudtrail:us-east-1:123456789012:trail/MyTrail 
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct StartLoggingResponse: AWSShape {

    }

    public struct DataResource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// The resource type in which you want to log data events. You can specify only the following value: AWS::S3::Object.
        public let `type`: String?
        /// A list of ARN-like strings for the specified S3 objects. To log data events for all objects in an S3 bucket, specify the bucket and an empty object prefix such as arn:aws:s3:::bucket-1/. The trail logs data events for all objects in this S3 bucket. To log data events for specific objects, specify the S3 bucket and object prefix such as arn:aws:s3:::bucket-1/example-images. The trail logs data events for objects in this S3 bucket that match the prefix.
        public let values: [String]?

        public init(type: String? = nil, values: [String]? = nil) {
            self.`type` = `type`
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case values = "Values"
        }
    }

    public struct GetTrailStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Specifies the name or the CloudTrail ARN of the trail for which you are requesting status. To get the status of a shadow trail (a replication of the trail in another region), you must specify its ARN. The format of a trail ARN is:  arn:aws:cloudtrail:us-east-1:123456789012:trail/MyTrail 
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct AddTagsResponse: AWSShape {

    }

    public struct DeleteTrailResponse: AWSShape {

    }

    public struct Trail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HomeRegion", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "SnsTopicARN", required: false, type: .string), 
            AWSShapeMember(label: "HasCustomEventSelectors", required: false, type: .boolean), 
            AWSShapeMember(label: "CloudWatchLogsRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "TrailARN", required: false, type: .string), 
            AWSShapeMember(label: "SnsTopicName", required: false, type: .string), 
            AWSShapeMember(label: "S3BucketName", required: false, type: .string), 
            AWSShapeMember(label: "LogFileValidationEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "CloudWatchLogsLogGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "IsMultiRegionTrail", required: false, type: .boolean), 
            AWSShapeMember(label: "S3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "IncludeGlobalServiceEvents", required: false, type: .boolean)
        ]
        /// The region in which the trail was created.
        public let homeRegion: String?
        /// Name of the trail set by calling CreateTrail. The maximum length is 128 characters.
        public let name: String?
        /// Specifies the KMS key ID that encrypts the logs delivered by CloudTrail. The value is a fully specified ARN to a KMS key in the format:  arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012 
        public let kmsKeyId: String?
        /// Specifies the ARN of the Amazon SNS topic that CloudTrail uses to send notifications when log files are delivered. The format of a topic ARN is:  arn:aws:sns:us-east-1:123456789012:MyTopic 
        public let snsTopicARN: String?
        /// Specifies if the trail has custom event selectors.
        public let hasCustomEventSelectors: Bool?
        /// Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.
        public let cloudWatchLogsRoleArn: String?
        /// Specifies the ARN of the trail. The format of a trail ARN is:  arn:aws:cloudtrail:us-east-1:123456789012:trail/MyTrail 
        public let trailARN: String?
        /// This field is deprecated. Use SnsTopicARN.
        public let snsTopicName: String?
        /// Name of the Amazon S3 bucket into which CloudTrail delivers your trail files. See Amazon S3 Bucket Naming Requirements.
        public let s3BucketName: String?
        /// Specifies whether log file validation is enabled.
        public let logFileValidationEnabled: Bool?
        /// Specifies an Amazon Resource Name (ARN), a unique identifier that represents the log group to which CloudTrail logs will be delivered.
        public let cloudWatchLogsLogGroupArn: String?
        /// Specifies whether the trail belongs only to one region or exists in all regions.
        public let isMultiRegionTrail: Bool?
        /// Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for log file delivery. For more information, see Finding Your CloudTrail Log Files.The maximum length is 200 characters.
        public let s3KeyPrefix: String?
        /// Set to True to include AWS API calls from AWS global services such as IAM. Otherwise, False.
        public let includeGlobalServiceEvents: Bool?

        public init(homeRegion: String? = nil, name: String? = nil, kmsKeyId: String? = nil, snsTopicARN: String? = nil, hasCustomEventSelectors: Bool? = nil, cloudWatchLogsRoleArn: String? = nil, trailARN: String? = nil, snsTopicName: String? = nil, s3BucketName: String? = nil, logFileValidationEnabled: Bool? = nil, cloudWatchLogsLogGroupArn: String? = nil, isMultiRegionTrail: Bool? = nil, s3KeyPrefix: String? = nil, includeGlobalServiceEvents: Bool? = nil) {
            self.homeRegion = homeRegion
            self.name = name
            self.kmsKeyId = kmsKeyId
            self.snsTopicARN = snsTopicARN
            self.hasCustomEventSelectors = hasCustomEventSelectors
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.trailARN = trailARN
            self.snsTopicName = snsTopicName
            self.s3BucketName = s3BucketName
            self.logFileValidationEnabled = logFileValidationEnabled
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.isMultiRegionTrail = isMultiRegionTrail
            self.s3KeyPrefix = s3KeyPrefix
            self.includeGlobalServiceEvents = includeGlobalServiceEvents
        }

        private enum CodingKeys: String, CodingKey {
            case homeRegion = "HomeRegion"
            case name = "Name"
            case kmsKeyId = "KmsKeyId"
            case snsTopicARN = "SnsTopicARN"
            case hasCustomEventSelectors = "HasCustomEventSelectors"
            case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
            case trailARN = "TrailARN"
            case snsTopicName = "SnsTopicName"
            case s3BucketName = "S3BucketName"
            case logFileValidationEnabled = "LogFileValidationEnabled"
            case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
            case isMultiRegionTrail = "IsMultiRegionTrail"
            case s3KeyPrefix = "S3KeyPrefix"
            case includeGlobalServiceEvents = "IncludeGlobalServiceEvents"
        }
    }

    public enum ReadWriteType: String, CustomStringConvertible, Codable {
        case readonly = "ReadOnly"
        case writeonly = "WriteOnly"
        case all = "All"
        public var description: String { return self.rawValue }
    }

    public struct UpdateTrailResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnsTopicARN", required: false, type: .string), 
            AWSShapeMember(label: "S3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "S3BucketName", required: false, type: .string), 
            AWSShapeMember(label: "IncludeGlobalServiceEvents", required: false, type: .boolean), 
            AWSShapeMember(label: "CloudWatchLogsRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchLogsLogGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "TrailARN", required: false, type: .string), 
            AWSShapeMember(label: "SnsTopicName", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "LogFileValidationEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "IsMultiRegionTrail", required: false, type: .boolean)
        ]
        /// Specifies the ARN of the Amazon SNS topic that CloudTrail uses to send notifications when log files are delivered. The format of a topic ARN is:  arn:aws:sns:us-east-1:123456789012:MyTopic 
        public let snsTopicARN: String?
        /// Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for log file delivery. For more information, see Finding Your CloudTrail Log Files.
        public let s3KeyPrefix: String?
        /// Specifies the name of the Amazon S3 bucket designated for publishing log files.
        public let s3BucketName: String?
        /// Specifies whether the trail is publishing events from global services such as IAM to the log files.
        public let includeGlobalServiceEvents: Bool?
        /// Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.
        public let cloudWatchLogsRoleArn: String?
        /// Specifies the Amazon Resource Name (ARN) of the log group to which CloudTrail logs will be delivered.
        public let cloudWatchLogsLogGroupArn: String?
        /// Specifies the ARN of the trail that was updated. The format of a trail ARN is:  arn:aws:cloudtrail:us-east-1:123456789012:trail/MyTrail 
        public let trailARN: String?
        /// This field is deprecated. Use SnsTopicARN.
        public let snsTopicName: String?
        /// Specifies the KMS key ID that encrypts the logs delivered by CloudTrail. The value is a fully specified ARN to a KMS key in the format:  arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012 
        public let kmsKeyId: String?
        /// Specifies whether log file integrity validation is enabled.
        public let logFileValidationEnabled: Bool?
        /// Specifies the name of the trail.
        public let name: String?
        /// Specifies whether the trail exists in one region or in all regions.
        public let isMultiRegionTrail: Bool?

        public init(snsTopicARN: String? = nil, s3KeyPrefix: String? = nil, s3BucketName: String? = nil, includeGlobalServiceEvents: Bool? = nil, cloudWatchLogsRoleArn: String? = nil, cloudWatchLogsLogGroupArn: String? = nil, trailARN: String? = nil, snsTopicName: String? = nil, kmsKeyId: String? = nil, logFileValidationEnabled: Bool? = nil, name: String? = nil, isMultiRegionTrail: Bool? = nil) {
            self.snsTopicARN = snsTopicARN
            self.s3KeyPrefix = s3KeyPrefix
            self.s3BucketName = s3BucketName
            self.includeGlobalServiceEvents = includeGlobalServiceEvents
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.trailARN = trailARN
            self.snsTopicName = snsTopicName
            self.kmsKeyId = kmsKeyId
            self.logFileValidationEnabled = logFileValidationEnabled
            self.name = name
            self.isMultiRegionTrail = isMultiRegionTrail
        }

        private enum CodingKeys: String, CodingKey {
            case snsTopicARN = "SnsTopicARN"
            case s3KeyPrefix = "S3KeyPrefix"
            case s3BucketName = "S3BucketName"
            case includeGlobalServiceEvents = "IncludeGlobalServiceEvents"
            case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
            case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
            case trailARN = "TrailARN"
            case snsTopicName = "SnsTopicName"
            case kmsKeyId = "KmsKeyId"
            case logFileValidationEnabled = "LogFileValidationEnabled"
            case name = "Name"
            case isMultiRegionTrail = "IsMultiRegionTrail"
        }
    }

    public struct PutEventSelectorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrailName", required: true, type: .string), 
            AWSShapeMember(label: "EventSelectors", required: true, type: .list)
        ]
        /// Specifies the name of the trail or trail ARN. If you specify a trail name, the string must meet the following requirements:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-)   Start with a letter or number, and end with a letter or number   Be between 3 and 128 characters   Have no adjacent periods, underscores or dashes. Names like my-_namespace and my--namespace are invalid.   Not be in IP address format (for example, 192.168.5.4)   If you specify a trail ARN, it must be in the format:  arn:aws:cloudtrail:us-east-1:123456789012:trail/MyTrail 
        public let trailName: String
        /// Specifies the settings for your event selectors. You can configure up to five event selectors for a trail.
        public let eventSelectors: [EventSelector]

        public init(trailName: String, eventSelectors: [EventSelector]) {
            self.trailName = trailName
            self.eventSelectors = eventSelectors
        }

        private enum CodingKeys: String, CodingKey {
            case trailName = "TrailName"
            case eventSelectors = "EventSelectors"
        }
    }

    public struct GetTrailStatusResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LatestDeliveryAttemptTime", required: false, type: .string), 
            AWSShapeMember(label: "TimeLoggingStopped", required: false, type: .string), 
            AWSShapeMember(label: "LatestDigestDeliveryError", required: false, type: .string), 
            AWSShapeMember(label: "LatestDeliveryAttemptSucceeded", required: false, type: .string), 
            AWSShapeMember(label: "LatestCloudWatchLogsDeliveryTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LatestNotificationAttemptSucceeded", required: false, type: .string), 
            AWSShapeMember(label: "LatestDigestDeliveryTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LatestNotificationAttemptTime", required: false, type: .string), 
            AWSShapeMember(label: "LatestDeliveryTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "IsLogging", required: false, type: .boolean), 
            AWSShapeMember(label: "TimeLoggingStarted", required: false, type: .string), 
            AWSShapeMember(label: "LatestNotificationError", required: false, type: .string), 
            AWSShapeMember(label: "LatestCloudWatchLogsDeliveryError", required: false, type: .string), 
            AWSShapeMember(label: "StopLoggingTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LatestDeliveryError", required: false, type: .string), 
            AWSShapeMember(label: "StartLoggingTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "LatestNotificationTime", required: false, type: .timestamp)
        ]
        /// This field is deprecated.
        public let latestDeliveryAttemptTime: String?
        /// This field is deprecated.
        public let timeLoggingStopped: String?
        /// Displays any Amazon S3 error that CloudTrail encountered when attempting to deliver a digest file to the designated bucket. For more information see the topic Error Responses in the Amazon S3 API Reference.   This error occurs only when there is a problem with the destination S3 bucket and will not occur for timeouts. To resolve the issue, create a new bucket and call UpdateTrail to specify the new bucket, or fix the existing objects so that CloudTrail can again write to the bucket. 
        public let latestDigestDeliveryError: String?
        /// This field is deprecated.
        public let latestDeliveryAttemptSucceeded: String?
        /// Displays the most recent date and time when CloudTrail delivered logs to CloudWatch Logs.
        public let latestCloudWatchLogsDeliveryTime: TimeStamp?
        /// This field is deprecated.
        public let latestNotificationAttemptSucceeded: String?
        /// Specifies the date and time that CloudTrail last delivered a digest file to an account's Amazon S3 bucket.
        public let latestDigestDeliveryTime: TimeStamp?
        /// This field is deprecated.
        public let latestNotificationAttemptTime: String?
        /// Specifies the date and time that CloudTrail last delivered log files to an account's Amazon S3 bucket.
        public let latestDeliveryTime: TimeStamp?
        /// Whether the CloudTrail is currently logging AWS API calls.
        public let isLogging: Bool?
        /// This field is deprecated.
        public let timeLoggingStarted: String?
        /// Displays any Amazon SNS error that CloudTrail encountered when attempting to send a notification. For more information about Amazon SNS errors, see the Amazon SNS Developer Guide. 
        public let latestNotificationError: String?
        /// Displays any CloudWatch Logs error that CloudTrail encountered when attempting to deliver logs to CloudWatch Logs.
        public let latestCloudWatchLogsDeliveryError: String?
        /// Specifies the most recent date and time when CloudTrail stopped recording API calls for an AWS account.
        public let stopLoggingTime: TimeStamp?
        /// Displays any Amazon S3 error that CloudTrail encountered when attempting to deliver log files to the designated bucket. For more information see the topic Error Responses in the Amazon S3 API Reference.   This error occurs only when there is a problem with the destination S3 bucket and will not occur for timeouts. To resolve the issue, create a new bucket and call UpdateTrail to specify the new bucket, or fix the existing objects so that CloudTrail can again write to the bucket. 
        public let latestDeliveryError: String?
        /// Specifies the most recent date and time when CloudTrail started recording API calls for an AWS account.
        public let startLoggingTime: TimeStamp?
        /// Specifies the date and time of the most recent Amazon SNS notification that CloudTrail has written a new log file to an account's Amazon S3 bucket.
        public let latestNotificationTime: TimeStamp?

        public init(latestDeliveryAttemptTime: String? = nil, timeLoggingStopped: String? = nil, latestDigestDeliveryError: String? = nil, latestDeliveryAttemptSucceeded: String? = nil, latestCloudWatchLogsDeliveryTime: TimeStamp? = nil, latestNotificationAttemptSucceeded: String? = nil, latestDigestDeliveryTime: TimeStamp? = nil, latestNotificationAttemptTime: String? = nil, latestDeliveryTime: TimeStamp? = nil, isLogging: Bool? = nil, timeLoggingStarted: String? = nil, latestNotificationError: String? = nil, latestCloudWatchLogsDeliveryError: String? = nil, stopLoggingTime: TimeStamp? = nil, latestDeliveryError: String? = nil, startLoggingTime: TimeStamp? = nil, latestNotificationTime: TimeStamp? = nil) {
            self.latestDeliveryAttemptTime = latestDeliveryAttemptTime
            self.timeLoggingStopped = timeLoggingStopped
            self.latestDigestDeliveryError = latestDigestDeliveryError
            self.latestDeliveryAttemptSucceeded = latestDeliveryAttemptSucceeded
            self.latestCloudWatchLogsDeliveryTime = latestCloudWatchLogsDeliveryTime
            self.latestNotificationAttemptSucceeded = latestNotificationAttemptSucceeded
            self.latestDigestDeliveryTime = latestDigestDeliveryTime
            self.latestNotificationAttemptTime = latestNotificationAttemptTime
            self.latestDeliveryTime = latestDeliveryTime
            self.isLogging = isLogging
            self.timeLoggingStarted = timeLoggingStarted
            self.latestNotificationError = latestNotificationError
            self.latestCloudWatchLogsDeliveryError = latestCloudWatchLogsDeliveryError
            self.stopLoggingTime = stopLoggingTime
            self.latestDeliveryError = latestDeliveryError
            self.startLoggingTime = startLoggingTime
            self.latestNotificationTime = latestNotificationTime
        }

        private enum CodingKeys: String, CodingKey {
            case latestDeliveryAttemptTime = "LatestDeliveryAttemptTime"
            case timeLoggingStopped = "TimeLoggingStopped"
            case latestDigestDeliveryError = "LatestDigestDeliveryError"
            case latestDeliveryAttemptSucceeded = "LatestDeliveryAttemptSucceeded"
            case latestCloudWatchLogsDeliveryTime = "LatestCloudWatchLogsDeliveryTime"
            case latestNotificationAttemptSucceeded = "LatestNotificationAttemptSucceeded"
            case latestDigestDeliveryTime = "LatestDigestDeliveryTime"
            case latestNotificationAttemptTime = "LatestNotificationAttemptTime"
            case latestDeliveryTime = "LatestDeliveryTime"
            case isLogging = "IsLogging"
            case timeLoggingStarted = "TimeLoggingStarted"
            case latestNotificationError = "LatestNotificationError"
            case latestCloudWatchLogsDeliveryError = "LatestCloudWatchLogsDeliveryError"
            case stopLoggingTime = "StopLoggingTime"
            case latestDeliveryError = "LatestDeliveryError"
            case startLoggingTime = "StartLoggingTime"
            case latestNotificationTime = "LatestNotificationTime"
        }
    }

    public struct CreateTrailRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3KeyPrefix", required: false, type: .string), 
            AWSShapeMember(label: "S3BucketName", required: true, type: .string), 
            AWSShapeMember(label: "IncludeGlobalServiceEvents", required: false, type: .boolean), 
            AWSShapeMember(label: "CloudWatchLogsRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchLogsLogGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "EnableLogFileValidation", required: false, type: .boolean), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "SnsTopicName", required: false, type: .string), 
            AWSShapeMember(label: "IsMultiRegionTrail", required: false, type: .boolean), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Specifies the Amazon S3 key prefix that comes after the name of the bucket you have designated for log file delivery. For more information, see Finding Your CloudTrail Log Files. The maximum length is 200 characters.
        public let s3KeyPrefix: String?
        /// Specifies the name of the Amazon S3 bucket designated for publishing log files. See Amazon S3 Bucket Naming Requirements.
        public let s3BucketName: String
        /// Specifies whether the trail is publishing events from global services such as IAM to the log files.
        public let includeGlobalServiceEvents: Bool?
        /// Specifies the role for the CloudWatch Logs endpoint to assume to write to a user's log group.
        public let cloudWatchLogsRoleArn: String?
        /// Specifies a log group name using an Amazon Resource Name (ARN), a unique identifier that represents the log group to which CloudTrail logs will be delivered. Not required unless you specify CloudWatchLogsRoleArn.
        public let cloudWatchLogsLogGroupArn: String?
        /// Specifies whether log file integrity validation is enabled. The default is false.  When you disable log file integrity validation, the chain of digest files is broken after one hour. CloudTrail will not create digest files for log files that were delivered during a period in which log file integrity validation was disabled. For example, if you enable log file integrity validation at noon on January 1, disable it at noon on January 2, and re-enable it at noon on January 10, digest files will not be created for the log files delivered from noon on January 2 to noon on January 10. The same applies whenever you stop CloudTrail logging or delete a trail. 
        public let enableLogFileValidation: Bool?
        /// Specifies the KMS key ID to use to encrypt the logs delivered by CloudTrail. The value can be an alias name prefixed by "alias/", a fully specified ARN to an alias, a fully specified ARN to a key, or a globally unique identifier. Examples:   alias/MyAliasName   arn:aws:kms:us-east-1:123456789012:alias/MyAliasName   arn:aws:kms:us-east-1:123456789012:key/12345678-1234-1234-1234-123456789012   12345678-1234-1234-1234-123456789012  
        public let kmsKeyId: String?
        /// Specifies the name of the Amazon SNS topic defined for notification of log file delivery. The maximum length is 256 characters.
        public let snsTopicName: String?
        /// Specifies whether the trail is created in the current region or in all regions. The default is false.
        public let isMultiRegionTrail: Bool?
        /// Specifies the name of the trail. The name must meet the following requirements:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-)   Start with a letter or number, and end with a letter or number   Be between 3 and 128 characters   Have no adjacent periods, underscores or dashes. Names like my-_namespace and my--namespace are invalid.   Not be in IP address format (for example, 192.168.5.4)  
        public let name: String

        public init(s3KeyPrefix: String? = nil, s3BucketName: String, includeGlobalServiceEvents: Bool? = nil, cloudWatchLogsRoleArn: String? = nil, cloudWatchLogsLogGroupArn: String? = nil, enableLogFileValidation: Bool? = nil, kmsKeyId: String? = nil, snsTopicName: String? = nil, isMultiRegionTrail: Bool? = nil, name: String) {
            self.s3KeyPrefix = s3KeyPrefix
            self.s3BucketName = s3BucketName
            self.includeGlobalServiceEvents = includeGlobalServiceEvents
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.enableLogFileValidation = enableLogFileValidation
            self.kmsKeyId = kmsKeyId
            self.snsTopicName = snsTopicName
            self.isMultiRegionTrail = isMultiRegionTrail
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case s3KeyPrefix = "S3KeyPrefix"
            case s3BucketName = "S3BucketName"
            case includeGlobalServiceEvents = "IncludeGlobalServiceEvents"
            case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
            case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
            case enableLogFileValidation = "EnableLogFileValidation"
            case kmsKeyId = "KmsKeyId"
            case snsTopicName = "SnsTopicName"
            case isMultiRegionTrail = "IsMultiRegionTrail"
            case name = "Name"
        }
    }

    public struct GetEventSelectorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrailName", required: true, type: .string)
        ]
        /// Specifies the name of the trail or trail ARN. If you specify a trail name, the string must meet the following requirements:   Contain only ASCII letters (a-z, A-Z), numbers (0-9), periods (.), underscores (_), or dashes (-)   Start with a letter or number, and end with a letter or number   Be between 3 and 128 characters   Have no adjacent periods, underscores or dashes. Names like my-_namespace and my--namespace are invalid.   Not be in IP address format (for example, 192.168.5.4)   If you specify a trail ARN, it must be in the format:  arn:aws:cloudtrail:us-east-1:123456789012:trail/MyTrail 
        public let trailName: String

        public init(trailName: String) {
            self.trailName = trailName
        }

        private enum CodingKeys: String, CodingKey {
            case trailName = "TrailName"
        }
    }

    public struct PublicKey: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ValidityStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Fingerprint", required: false, type: .string), 
            AWSShapeMember(label: "ValidityEndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Value", required: false, type: .blob)
        ]
        /// The starting time of validity of the public key.
        public let validityStartTime: TimeStamp?
        /// The fingerprint of the public key.
        public let fingerprint: String?
        /// The ending time of validity of the public key.
        public let validityEndTime: TimeStamp?
        /// The DER encoded public key value in PKCS#1 format.
        public let value: Data?

        public init(validityStartTime: TimeStamp? = nil, fingerprint: String? = nil, validityEndTime: TimeStamp? = nil, value: Data? = nil) {
            self.validityStartTime = validityStartTime
            self.fingerprint = fingerprint
            self.validityEndTime = validityEndTime
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case validityStartTime = "ValidityStartTime"
            case fingerprint = "Fingerprint"
            case validityEndTime = "ValidityEndTime"
            case value = "Value"
        }
    }

    public struct StopLoggingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Specifies the name or the CloudTrail ARN of the trail for which CloudTrail will stop logging AWS API calls. The format of a trail ARN is:  arn:aws:cloudtrail:us-east-1:123456789012:trail/MyTrail 
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

}