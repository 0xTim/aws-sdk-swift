// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Sms {

    public struct DisassociateConnectorResponse: AWSShape {

    }

    public struct Connector: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "capabilityList", required: false, type: .structure), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "ipAddress", required: false, type: .string), 
            AWSShapeMember(label: "vmManagerId", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "vmManagerType", required: false, type: .enum), 
            AWSShapeMember(label: "connectorId", required: false, type: .string), 
            AWSShapeMember(label: "vmManagerName", required: false, type: .string), 
            AWSShapeMember(label: "macAddress", required: false, type: .string), 
            AWSShapeMember(label: "associatedOn", required: false, type: .timestamp)
        ]
        public let capabilityList: ConnectorCapabilityList?
        public let status: ConnectorStatus?
        public let ipAddress: String?
        public let vmManagerId: String?
        public let version: String?
        public let vmManagerType: VmManagerType?
        public let connectorId: String?
        public let vmManagerName: String?
        public let macAddress: String?
        public let associatedOn: TimeStamp?

        public init(capabilityList: ConnectorCapabilityList? = nil, status: ConnectorStatus? = nil, ipAddress: String? = nil, vmManagerId: String? = nil, version: String? = nil, vmManagerType: VmManagerType? = nil, connectorId: String? = nil, vmManagerName: String? = nil, macAddress: String? = nil, associatedOn: TimeStamp? = nil) {
            self.capabilityList = capabilityList
            self.status = status
            self.ipAddress = ipAddress
            self.vmManagerId = vmManagerId
            self.version = version
            self.vmManagerType = vmManagerType
            self.connectorId = connectorId
            self.vmManagerName = vmManagerName
            self.macAddress = macAddress
            self.associatedOn = associatedOn
        }

        private enum CodingKeys: String, CodingKey {
            case capabilityList = "capabilityList"
            case status = "status"
            case ipAddress = "ipAddress"
            case vmManagerId = "vmManagerId"
            case version = "version"
            case vmManagerType = "vmManagerType"
            case connectorId = "connectorId"
            case vmManagerName = "vmManagerName"
            case macAddress = "macAddress"
            case associatedOn = "associatedOn"
        }
    }

    public struct GetReplicationRunsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "replicationJobId", required: true, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: Int32?
        public let replicationJobId: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, replicationJobId: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.replicationJobId = replicationJobId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case replicationJobId = "replicationJobId"
        }
    }

    public enum ServerType: String, CustomStringConvertible, Codable {
        case virtualMachine = "VIRTUAL_MACHINE"
        public var description: String { return self.rawValue }
    }

    public struct GetConnectorsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        public let nextToken: String?
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct ImportServerCatalogRequest: AWSShape {

    }

    public enum VmManagerType: String, CustomStringConvertible, Codable {
        case vsphere = "VSPHERE"
        public var description: String { return self.rawValue }
    }

    public struct GetServersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "serverList", required: false, type: .structure), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "serverCatalogStatus", required: false, type: .enum), 
            AWSShapeMember(label: "lastModifiedOn", required: false, type: .timestamp)
        ]
        public let serverList: ServerList?
        public let nextToken: String?
        public let serverCatalogStatus: ServerCatalogStatus?
        public let lastModifiedOn: TimeStamp?

        public init(serverList: ServerList? = nil, nextToken: String? = nil, serverCatalogStatus: ServerCatalogStatus? = nil, lastModifiedOn: TimeStamp? = nil) {
            self.serverList = serverList
            self.nextToken = nextToken
            self.serverCatalogStatus = serverCatalogStatus
            self.lastModifiedOn = lastModifiedOn
        }

        private enum CodingKeys: String, CodingKey {
            case serverList = "serverList"
            case nextToken = "nextToken"
            case serverCatalogStatus = "serverCatalogStatus"
            case lastModifiedOn = "lastModifiedOn"
        }
    }

    public struct GetReplicationJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "replicationJobId", required: false, type: .string)
        ]
        public let nextToken: String?
        public let maxResults: Int32?
        public let replicationJobId: String?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, replicationJobId: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.replicationJobId = replicationJobId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case replicationJobId = "replicationJobId"
        }
    }

    public struct UpdateReplicationJobResponse: AWSShape {

    }

    public enum ReplicationJobState: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case active = "ACTIVE"
        case failed = "FAILED"
        case deleting = "DELETING"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct StartOnDemandReplicationRunResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "replicationRunId", required: false, type: .string)
        ]
        public let replicationRunId: String?

        public init(replicationRunId: String? = nil) {
            self.replicationRunId = replicationRunId
        }

        private enum CodingKeys: String, CodingKey {
            case replicationRunId = "replicationRunId"
        }
    }

    public struct UpdateReplicationJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleName", required: false, type: .string), 
            AWSShapeMember(label: "nextReplicationRunStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "frequency", required: false, type: .integer), 
            AWSShapeMember(label: "replicationJobId", required: true, type: .string), 
            AWSShapeMember(label: "licenseType", required: false, type: .enum)
        ]
        public let roleName: String?
        public let nextReplicationRunStartTime: TimeStamp?
        public let description: String?
        public let frequency: Int32?
        public let replicationJobId: String
        public let licenseType: LicenseType?

        public init(roleName: String? = nil, nextReplicationRunStartTime: TimeStamp? = nil, description: String? = nil, frequency: Int32? = nil, replicationJobId: String, licenseType: LicenseType? = nil) {
            self.roleName = roleName
            self.nextReplicationRunStartTime = nextReplicationRunStartTime
            self.description = description
            self.frequency = frequency
            self.replicationJobId = replicationJobId
            self.licenseType = licenseType
        }

        private enum CodingKeys: String, CodingKey {
            case roleName = "roleName"
            case nextReplicationRunStartTime = "nextReplicationRunStartTime"
            case description = "description"
            case frequency = "frequency"
            case replicationJobId = "replicationJobId"
            case licenseType = "licenseType"
        }
    }

    public struct ConnectorCapabilityList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ConnectorCapability]?

        public init(item: [ConnectorCapability]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct ReplicationRun: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "state", required: false, type: .enum), 
            AWSShapeMember(label: "replicationRunId", required: false, type: .string), 
            AWSShapeMember(label: "completedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "scheduledStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "amiId", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .enum), 
            AWSShapeMember(label: "statusMessage", required: false, type: .string)
        ]
        public let state: ReplicationRunState?
        public let replicationRunId: String?
        public let completedTime: TimeStamp?
        public let scheduledStartTime: TimeStamp?
        public let description: String?
        public let amiId: String?
        public let `type`: ReplicationRunType?
        public let statusMessage: String?

        public init(state: ReplicationRunState? = nil, replicationRunId: String? = nil, completedTime: TimeStamp? = nil, scheduledStartTime: TimeStamp? = nil, description: String? = nil, amiId: String? = nil, type: ReplicationRunType? = nil, statusMessage: String? = nil) {
            self.state = state
            self.replicationRunId = replicationRunId
            self.completedTime = completedTime
            self.scheduledStartTime = scheduledStartTime
            self.description = description
            self.amiId = amiId
            self.`type` = `type`
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case replicationRunId = "replicationRunId"
            case completedTime = "completedTime"
            case scheduledStartTime = "scheduledStartTime"
            case description = "description"
            case amiId = "amiId"
            case `type` = "type"
            case statusMessage = "statusMessage"
        }
    }

    public struct DeleteServerCatalogResponse: AWSShape {

    }

    public struct ReplicationJob: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "state", required: false, type: .enum), 
            AWSShapeMember(label: "replicationRunList", required: false, type: .structure), 
            AWSShapeMember(label: "nextReplicationRunStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "vmServer", required: false, type: .structure), 
            AWSShapeMember(label: "licenseType", required: false, type: .enum), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "serverId", required: false, type: .string), 
            AWSShapeMember(label: "latestAmiId", required: false, type: .string), 
            AWSShapeMember(label: "frequency", required: false, type: .integer), 
            AWSShapeMember(label: "statusMessage", required: false, type: .string), 
            AWSShapeMember(label: "replicationJobId", required: false, type: .string), 
            AWSShapeMember(label: "roleName", required: false, type: .string), 
            AWSShapeMember(label: "seedReplicationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "serverType", required: false, type: .enum)
        ]
        public let state: ReplicationJobState?
        public let replicationRunList: ReplicationRunList?
        public let nextReplicationRunStartTime: TimeStamp?
        public let vmServer: VmServer?
        public let licenseType: LicenseType?
        public let description: String?
        public let serverId: String?
        public let latestAmiId: String?
        public let frequency: Int32?
        public let statusMessage: String?
        public let replicationJobId: String?
        public let roleName: String?
        public let seedReplicationTime: TimeStamp?
        public let serverType: ServerType?

        public init(state: ReplicationJobState? = nil, replicationRunList: ReplicationRunList? = nil, nextReplicationRunStartTime: TimeStamp? = nil, vmServer: VmServer? = nil, licenseType: LicenseType? = nil, description: String? = nil, serverId: String? = nil, latestAmiId: String? = nil, frequency: Int32? = nil, statusMessage: String? = nil, replicationJobId: String? = nil, roleName: String? = nil, seedReplicationTime: TimeStamp? = nil, serverType: ServerType? = nil) {
            self.state = state
            self.replicationRunList = replicationRunList
            self.nextReplicationRunStartTime = nextReplicationRunStartTime
            self.vmServer = vmServer
            self.licenseType = licenseType
            self.description = description
            self.serverId = serverId
            self.latestAmiId = latestAmiId
            self.frequency = frequency
            self.statusMessage = statusMessage
            self.replicationJobId = replicationJobId
            self.roleName = roleName
            self.seedReplicationTime = seedReplicationTime
            self.serverType = serverType
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case replicationRunList = "replicationRunList"
            case nextReplicationRunStartTime = "nextReplicationRunStartTime"
            case vmServer = "vmServer"
            case licenseType = "licenseType"
            case description = "description"
            case serverId = "serverId"
            case latestAmiId = "latestAmiId"
            case frequency = "frequency"
            case statusMessage = "statusMessage"
            case replicationJobId = "replicationJobId"
            case roleName = "roleName"
            case seedReplicationTime = "seedReplicationTime"
            case serverType = "serverType"
        }
    }

    public enum ReplicationRunState: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case missed = "MISSED"
        case active = "ACTIVE"
        case failed = "FAILED"
        case completed = "COMPLETED"
        case deleting = "DELETING"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct ImportServerCatalogResponse: AWSShape {

    }

    public struct ServerList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Server]?

        public init(item: [Server]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct DeleteReplicationJobResponse: AWSShape {

    }

    public struct ReplicationJobList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReplicationJob]?

        public init(item: [ReplicationJob]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public enum ConnectorStatus: String, CustomStringConvertible, Codable {
        case healthy = "HEALTHY"
        case unhealthy = "UNHEALTHY"
        public var description: String { return self.rawValue }
    }

    public struct GetConnectorsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "connectorList", required: false, type: .structure)
        ]
        public let nextToken: String?
        public let connectorList: ConnectorList?

        public init(nextToken: String? = nil, connectorList: ConnectorList? = nil) {
            self.nextToken = nextToken
            self.connectorList = connectorList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case connectorList = "connectorList"
        }
    }

    public struct CreateReplicationJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "seedReplicationTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "roleName", required: false, type: .string), 
            AWSShapeMember(label: "serverId", required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "frequency", required: true, type: .integer), 
            AWSShapeMember(label: "licenseType", required: false, type: .enum)
        ]
        public let seedReplicationTime: TimeStamp
        public let roleName: String?
        public let serverId: String
        public let description: String?
        public let frequency: Int32
        public let licenseType: LicenseType?

        public init(seedReplicationTime: TimeStamp, roleName: String? = nil, serverId: String, description: String? = nil, frequency: Int32, licenseType: LicenseType? = nil) {
            self.seedReplicationTime = seedReplicationTime
            self.roleName = roleName
            self.serverId = serverId
            self.description = description
            self.frequency = frequency
            self.licenseType = licenseType
        }

        private enum CodingKeys: String, CodingKey {
            case seedReplicationTime = "seedReplicationTime"
            case roleName = "roleName"
            case serverId = "serverId"
            case description = "description"
            case frequency = "frequency"
            case licenseType = "licenseType"
        }
    }

    public enum ReplicationRunType: String, CustomStringConvertible, Codable {
        case onDemand = "ON_DEMAND"
        case automatic = "AUTOMATIC"
        public var description: String { return self.rawValue }
    }

    public struct VmServerAddress: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "vmId", required: false, type: .string), 
            AWSShapeMember(label: "vmManagerId", required: false, type: .string)
        ]
        public let vmId: String?
        public let vmManagerId: String?

        public init(vmId: String? = nil, vmManagerId: String? = nil) {
            self.vmId = vmId
            self.vmManagerId = vmManagerId
        }

        private enum CodingKeys: String, CodingKey {
            case vmId = "vmId"
            case vmManagerId = "vmManagerId"
        }
    }

    public struct GetServersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        public let nextToken: String?
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public enum ConnectorCapability: String, CustomStringConvertible, Codable {
        case vsphere = "VSPHERE"
        public var description: String { return self.rawValue }
    }

    public struct ConnectorList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [Connector]?

        public init(item: [Connector]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct VmServer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "vmManagerName", required: false, type: .string), 
            AWSShapeMember(label: "vmManagerType", required: false, type: .enum), 
            AWSShapeMember(label: "vmName", required: false, type: .string), 
            AWSShapeMember(label: "vmServerAddress", required: false, type: .structure), 
            AWSShapeMember(label: "vmPath", required: false, type: .string)
        ]
        public let vmManagerName: String?
        public let vmManagerType: VmManagerType?
        public let vmName: String?
        public let vmServerAddress: VmServerAddress?
        public let vmPath: String?

        public init(vmManagerName: String? = nil, vmManagerType: VmManagerType? = nil, vmName: String? = nil, vmServerAddress: VmServerAddress? = nil, vmPath: String? = nil) {
            self.vmManagerName = vmManagerName
            self.vmManagerType = vmManagerType
            self.vmName = vmName
            self.vmServerAddress = vmServerAddress
            self.vmPath = vmPath
        }

        private enum CodingKeys: String, CodingKey {
            case vmManagerName = "vmManagerName"
            case vmManagerType = "vmManagerType"
            case vmName = "vmName"
            case vmServerAddress = "vmServerAddress"
            case vmPath = "vmPath"
        }
    }

    public struct Server: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "serverId", required: false, type: .string), 
            AWSShapeMember(label: "replicationJobTerminated", required: false, type: .boolean), 
            AWSShapeMember(label: "serverType", required: false, type: .enum), 
            AWSShapeMember(label: "vmServer", required: false, type: .structure), 
            AWSShapeMember(label: "replicationJobId", required: false, type: .string)
        ]
        public let serverId: String?
        public let replicationJobTerminated: Bool?
        public let serverType: ServerType?
        public let vmServer: VmServer?
        public let replicationJobId: String?

        public init(serverId: String? = nil, replicationJobTerminated: Bool? = nil, serverType: ServerType? = nil, vmServer: VmServer? = nil, replicationJobId: String? = nil) {
            self.serverId = serverId
            self.replicationJobTerminated = replicationJobTerminated
            self.serverType = serverType
            self.vmServer = vmServer
            self.replicationJobId = replicationJobId
        }

        private enum CodingKeys: String, CodingKey {
            case serverId = "serverId"
            case replicationJobTerminated = "replicationJobTerminated"
            case serverType = "serverType"
            case vmServer = "vmServer"
            case replicationJobId = "replicationJobId"
        }
    }

    public struct DeleteServerCatalogRequest: AWSShape {

    }

    public struct CreateReplicationJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "replicationJobId", required: false, type: .string)
        ]
        public let replicationJobId: String?

        public init(replicationJobId: String? = nil) {
            self.replicationJobId = replicationJobId
        }

        private enum CodingKeys: String, CodingKey {
            case replicationJobId = "replicationJobId"
        }
    }

    public struct ReplicationRunList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "item", required: false, type: .list)
        ]
        public let item: [ReplicationRun]?

        public init(item: [ReplicationRun]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "item"
        }
    }

    public struct StartOnDemandReplicationRunRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "replicationJobId", required: true, type: .string)
        ]
        public let description: String?
        public let replicationJobId: String

        public init(description: String? = nil, replicationJobId: String) {
            self.description = description
            self.replicationJobId = replicationJobId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case replicationJobId = "replicationJobId"
        }
    }

    public enum ServerCatalogStatus: String, CustomStringConvertible, Codable {
        case notImported = "NOT_IMPORTED"
        case importing = "IMPORTING"
        case available = "AVAILABLE"
        case deleted = "DELETED"
        case expired = "EXPIRED"
        public var description: String { return self.rawValue }
    }

    public struct GetReplicationJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "replicationJobList", required: false, type: .structure)
        ]
        public let nextToken: String?
        public let replicationJobList: ReplicationJobList?

        public init(nextToken: String? = nil, replicationJobList: ReplicationJobList? = nil) {
            self.nextToken = nextToken
            self.replicationJobList = replicationJobList
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case replicationJobList = "replicationJobList"
        }
    }

    public struct DisassociateConnectorRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectorId", required: true, type: .string)
        ]
        public let connectorId: String

        public init(connectorId: String) {
            self.connectorId = connectorId
        }

        private enum CodingKeys: String, CodingKey {
            case connectorId = "connectorId"
        }
    }

    public struct GetReplicationRunsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "replicationJob", required: false, type: .structure), 
            AWSShapeMember(label: "replicationRunList", required: false, type: .structure), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        public let replicationJob: ReplicationJob?
        public let replicationRunList: ReplicationRunList?
        public let nextToken: String?

        public init(replicationJob: ReplicationJob? = nil, replicationRunList: ReplicationRunList? = nil, nextToken: String? = nil) {
            self.replicationJob = replicationJob
            self.replicationRunList = replicationRunList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case replicationJob = "replicationJob"
            case replicationRunList = "replicationRunList"
            case nextToken = "nextToken"
        }
    }

    public enum LicenseType: String, CustomStringConvertible, Codable {
        case aws = "AWS"
        case byol = "BYOL"
        public var description: String { return self.rawValue }
    }

    public struct DeleteReplicationJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "replicationJobId", required: true, type: .string)
        ]
        public let replicationJobId: String

        public init(replicationJobId: String) {
            self.replicationJobId = replicationJobId
        }

        private enum CodingKeys: String, CodingKey {
            case replicationJobId = "replicationJobId"
        }
    }

}