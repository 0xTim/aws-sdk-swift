// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension RDSDataService {

    public struct ResultFrame: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "records", required: false, type: .list), 
            AWSShapeMember(label: "resultSetMetadata", required: false, type: .structure)
        ]
        /// ResultSet Metadata.
        public let records: [Record]?
        /// ResultSet Metadata.
        public let resultSetMetadata: ResultSetMetadata?

        public init(records: [Record]? = nil, resultSetMetadata: ResultSetMetadata? = nil) {
            self.records = records
            self.resultSetMetadata = resultSetMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case records = "records"
            case resultSetMetadata = "resultSetMetadata"
        }
    }

    public struct ResultSetMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "columnMetadata", required: false, type: .list), 
            AWSShapeMember(label: "columnCount", required: false, type: .long)
        ]
        /// List of columns and their types
        public let columnMetadata: [ColumnMetadata]?
        /// Number of columns
        public let columnCount: Int64?

        public init(columnMetadata: [ColumnMetadata]? = nil, columnCount: Int64? = nil) {
            self.columnMetadata = columnMetadata
            self.columnCount = columnCount
        }

        private enum CodingKeys: String, CodingKey {
            case columnMetadata = "columnMetadata"
            case columnCount = "columnCount"
        }
    }

    public struct ExecuteSqlResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "sqlStatementResults", required: true, type: .list)
        ]
        /// Results returned by executing the sql statement(s)
        public let sqlStatementResults: [SqlStatementResult]

        public init(sqlStatementResults: [SqlStatementResult]) {
            self.sqlStatementResults = sqlStatementResults
        }

        private enum CodingKeys: String, CodingKey {
            case sqlStatementResults = "sqlStatementResults"
        }
    }

    public struct ExecuteSqlRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "sqlStatements", required: true, type: .string), 
            AWSShapeMember(label: "awsSecretStoreArn", required: true, type: .string), 
            AWSShapeMember(label: "schema", required: false, type: .string), 
            AWSShapeMember(label: "database", required: false, type: .string), 
            AWSShapeMember(label: "dbClusterOrInstanceArn", required: true, type: .string)
        ]
        /// SQL statement(s) to be executed. Statements can be chained by using semicolons
        public let sqlStatements: String
        /// ARN of the db credentials in AWS Secret Store or the friendly secret name
        public let awsSecretStoreArn: String
        /// Target Schema name
        public let schema: String?
        /// Target DB name
        public let database: String?
        /// ARN of the target db cluster or instance
        public let dbClusterOrInstanceArn: String

        public init(sqlStatements: String, awsSecretStoreArn: String, schema: String? = nil, database: String? = nil, dbClusterOrInstanceArn: String) {
            self.sqlStatements = sqlStatements
            self.awsSecretStoreArn = awsSecretStoreArn
            self.schema = schema
            self.database = database
            self.dbClusterOrInstanceArn = dbClusterOrInstanceArn
        }

        private enum CodingKeys: String, CodingKey {
            case sqlStatements = "sqlStatements"
            case awsSecretStoreArn = "awsSecretStoreArn"
            case schema = "schema"
            case database = "database"
            case dbClusterOrInstanceArn = "dbClusterOrInstanceArn"
        }
    }

    public struct Record: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "values", required: false, type: .list)
        ]
        /// Record
        public let values: [Value]?

        public init(values: [Value]? = nil) {
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case values = "values"
        }
    }

    public struct StructValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributes", required: false, type: .list)
        ]
        /// Struct or UDT
        public let attributes: [Value]?

        public init(attributes: [Value]? = nil) {
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
        }
    }

    public struct SqlStatementResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "numberOfRecordsUpdated", required: false, type: .long), 
            AWSShapeMember(label: "resultFrame", required: false, type: .structure)
        ]
        /// Number of rows updated.
        public let numberOfRecordsUpdated: Int64?
        /// ResultFrame returned by executing the sql statement
        public let resultFrame: ResultFrame?

        public init(numberOfRecordsUpdated: Int64? = nil, resultFrame: ResultFrame? = nil) {
            self.numberOfRecordsUpdated = numberOfRecordsUpdated
            self.resultFrame = resultFrame
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfRecordsUpdated = "numberOfRecordsUpdated"
            case resultFrame = "resultFrame"
        }
    }

    public struct ColumnMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "precision", required: false, type: .integer), 
            AWSShapeMember(label: "scale", required: false, type: .integer), 
            AWSShapeMember(label: "isSigned", required: false, type: .boolean), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "tableName", required: false, type: .string), 
            AWSShapeMember(label: "arrayBaseColumnType", required: false, type: .integer), 
            AWSShapeMember(label: "isCurrency", required: false, type: .boolean), 
            AWSShapeMember(label: "label", required: false, type: .string), 
            AWSShapeMember(label: "nullable", required: false, type: .integer), 
            AWSShapeMember(label: "type", required: false, type: .integer), 
            AWSShapeMember(label: "isAutoIncrement", required: false, type: .boolean), 
            AWSShapeMember(label: "typeName", required: false, type: .string), 
            AWSShapeMember(label: "isCaseSensitive", required: false, type: .boolean), 
            AWSShapeMember(label: "schemaName", required: false, type: .string)
        ]
        /// Get the designated column's specified column size.For numeric data, this is the maximum precision.  For character data, this is the length in characters. For datetime datatypes, this is the length in characters of the String representation (assuming the maximum allowed precision of the fractional seconds component). For binary data, this is the length in bytes.  For the ROWID datatype, this is the length in bytes. 0 is returned for data types where the column size is not applicable.
        public let precision: Int32?
        /// Designated column's number of digits to right of the decimal point. 0 is returned for data types where the scale is not applicable.
        public let scale: Int32?
        /// Whether values in the designated column are signed numbers
        public let isSigned: Bool?
        /// Name of the column.
        public let name: String?
        /// Designated column's table name
        public let tableName: String?
        /// Homogenous array base SQL type from java.sql.Types.
        public let arrayBaseColumnType: Int32?
        /// Whether values in the designated column is a cash value
        public let isCurrency: Bool?
        /// Usually specified by the SQL AS. If not specified, return column name.
        public let label: String?
        /// Indicates the nullability of values in the designated column. One of columnNoNulls (0), columnNullable (1), columnNullableUnknown (2)
        public let nullable: Int32?
        /// SQL type from java.sql.Types.
        public let `type`: Int32?
        /// Whether the designated column is automatically numbered
        public let isAutoIncrement: Bool?
        /// Database-specific type name.
        public let typeName: String?
        /// Whether values in the designated column's case matters
        public let isCaseSensitive: Bool?
        /// Designated column's table's schema
        public let schemaName: String?

        public init(precision: Int32? = nil, scale: Int32? = nil, isSigned: Bool? = nil, name: String? = nil, tableName: String? = nil, arrayBaseColumnType: Int32? = nil, isCurrency: Bool? = nil, label: String? = nil, nullable: Int32? = nil, type: Int32? = nil, isAutoIncrement: Bool? = nil, typeName: String? = nil, isCaseSensitive: Bool? = nil, schemaName: String? = nil) {
            self.precision = precision
            self.scale = scale
            self.isSigned = isSigned
            self.name = name
            self.tableName = tableName
            self.arrayBaseColumnType = arrayBaseColumnType
            self.isCurrency = isCurrency
            self.label = label
            self.nullable = nullable
            self.`type` = `type`
            self.isAutoIncrement = isAutoIncrement
            self.typeName = typeName
            self.isCaseSensitive = isCaseSensitive
            self.schemaName = schemaName
        }

        private enum CodingKeys: String, CodingKey {
            case precision = "precision"
            case scale = "scale"
            case isSigned = "isSigned"
            case name = "name"
            case tableName = "tableName"
            case arrayBaseColumnType = "arrayBaseColumnType"
            case isCurrency = "isCurrency"
            case label = "label"
            case nullable = "nullable"
            case `type` = "type"
            case isAutoIncrement = "isAutoIncrement"
            case typeName = "typeName"
            case isCaseSensitive = "isCaseSensitive"
            case schemaName = "schemaName"
        }
    }

    public class Value: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "isNull", required: false, type: .boolean), 
            AWSShapeMember(label: "intValue", required: false, type: .integer), 
            AWSShapeMember(label: "doubleValue", required: false, type: .double), 
            AWSShapeMember(label: "realValue", required: false, type: .float), 
            AWSShapeMember(label: "blobValue", required: false, type: .blob), 
            AWSShapeMember(label: "bigIntValue", required: false, type: .long), 
            AWSShapeMember(label: "arrayValues", required: false, type: .list), 
            AWSShapeMember(label: "bitValue", required: false, type: .boolean), 
            AWSShapeMember(label: "stringValue", required: false, type: .string), 
            AWSShapeMember(label: "structValue", required: false, type: .structure)
        ]
        /// Is column null
        public let isNull: Bool?
        /// Integer value
        public let intValue: Int32?
        /// Double value
        public let doubleValue: Double?
        /// Float value
        public let realValue: Float?
        /// Blob value
        public let blobValue: Data?
        /// Long value
        public let bigIntValue: Int64?
        /// Arbitrarily nested arrays
        public let arrayValues: [Value]?
        /// Bit value
        public let bitValue: Bool?
        /// String value
        public let stringValue: String?
        /// Struct or UDT
        public let structValue: StructValue?

        public init(isNull: Bool? = nil, intValue: Int32? = nil, doubleValue: Double? = nil, realValue: Float? = nil, blobValue: Data? = nil, bigIntValue: Int64? = nil, arrayValues: [Value]? = nil, bitValue: Bool? = nil, stringValue: String? = nil, structValue: StructValue? = nil) {
            self.isNull = isNull
            self.intValue = intValue
            self.doubleValue = doubleValue
            self.realValue = realValue
            self.blobValue = blobValue
            self.bigIntValue = bigIntValue
            self.arrayValues = arrayValues
            self.bitValue = bitValue
            self.stringValue = stringValue
            self.structValue = structValue
        }

        private enum CodingKeys: String, CodingKey {
            case isNull = "isNull"
            case intValue = "intValue"
            case doubleValue = "doubleValue"
            case realValue = "realValue"
            case blobValue = "blobValue"
            case bigIntValue = "bigIntValue"
            case arrayValues = "arrayValues"
            case bitValue = "bitValue"
            case stringValue = "stringValue"
            case structValue = "structValue"
        }
    }

}