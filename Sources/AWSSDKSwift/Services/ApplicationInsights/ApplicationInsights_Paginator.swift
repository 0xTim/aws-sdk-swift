// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import NIO

extension ApplicationInsights {

    ///  Lists the IDs of the applications that you are monitoring. 
    public func listApplicationsPaginator(_ input: ListApplicationsRequest) -> EventLoopFuture<[ApplicationInfo]> {
        return client.paginate(input: input, command: listApplications, resultKey: \.applicationInfoList, tokenKey: \.nextToken)
    }
    
    ///  Lists the auto-grouped, standalone, and custom components of the application.
    public func listComponentsPaginator(_ input: ListComponentsRequest) -> EventLoopFuture<[ApplicationComponent]> {
        return client.paginate(input: input, command: listComponents, resultKey: \.applicationComponentList, tokenKey: \.nextToken)
    }
    
    ///  Lists the log pattern sets in the specific application.
    public func listLogPatternSetsPaginator(_ input: ListLogPatternSetsRequest) -> EventLoopFuture<[String]> {
        return client.paginate(input: input, command: listLogPatternSets, resultKey: \.logPatternSets, tokenKey: \.nextToken)
    }
    
    ///  Lists the log patterns in the specific log LogPatternSet.
    public func listLogPatternsPaginator(_ input: ListLogPatternsRequest) -> EventLoopFuture<[LogPattern]> {
        return client.paginate(input: input, command: listLogPatterns, resultKey: \.logPatterns, tokenKey: \.nextToken)
    }
    
    ///  Lists the problems with your application.
    public func listProblemsPaginator(_ input: ListProblemsRequest) -> EventLoopFuture<[Problem]> {
        return client.paginate(input: input, command: listProblems, resultKey: \.problemList, tokenKey: \.nextToken)
    }
    
}

extension ApplicationInsights.ListApplicationsRequest: AWSPaginateStringToken {
    public init(_ original: ApplicationInsights.ListApplicationsRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension ApplicationInsights.ListComponentsRequest: AWSPaginateStringToken {
    public init(_ original: ApplicationInsights.ListComponentsRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nextToken: token, 
            resourceGroupName: original.resourceGroupName
        )
    }
}

extension ApplicationInsights.ListLogPatternSetsRequest: AWSPaginateStringToken {
    public init(_ original: ApplicationInsights.ListLogPatternSetsRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nextToken: token, 
            resourceGroupName: original.resourceGroupName
        )
    }
}

extension ApplicationInsights.ListLogPatternsRequest: AWSPaginateStringToken {
    public init(_ original: ApplicationInsights.ListLogPatternsRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nextToken: token, 
            patternSetName: original.patternSetName, 
            resourceGroupName: original.resourceGroupName
        )
    }
}

extension ApplicationInsights.ListProblemsRequest: AWSPaginateStringToken {
    public init(_ original: ApplicationInsights.ListProblemsRequest, token: String) {
        self.init(
            endTime: original.endTime, 
            maxResults: original.maxResults, 
            nextToken: token, 
            resourceGroupName: original.resourceGroupName, 
            startTime: original.startTime
        )
    }
}


