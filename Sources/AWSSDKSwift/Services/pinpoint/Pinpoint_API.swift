// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

/**

*/
public struct Pinpoint {

    let request: AWSRequest

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: Core.Region? = nil, endpoint: String? = nil) {
        self.request = AWSRequest(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            service: "pinpoint",
            endpoint: endpoint
        )
    }

    ///  Returns information about a segment version.
    public func getSegmentVersion(_ input: GetSegmentVersionRequest) throws -> GetSegmentVersionResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetSegmentVersion", path: "/v1/apps/\(input.applicationId)/segments/\(input.segmentId)/versions/\(input.version)", httpMethod: "GET", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about your campaign versions.
    public func getCampaignVersion(_ input: GetCampaignVersionRequest) throws -> GetCampaignVersionResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetCampaignVersion", path: "/v1/apps/\(input.applicationId)/campaigns/\(input.campaignId)/versions/\(input.version)", httpMethod: "GET", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns a list of import jobs for a specific segment.
    public func getSegmentImportJobs(_ input: GetSegmentImportJobsRequest) throws -> GetSegmentImportJobsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetSegmentImportJobs", path: "/v1/apps/\(input.applicationId)/segments/\(input.segmentId)/jobs/import?token=\(input.token?.description ?? "")&page-size=\(input.pageSize?.description ?? "")", httpMethod: "GET", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about your campaign versions.
    public func getCampaignVersions(_ input: GetCampaignVersionsRequest) throws -> GetCampaignVersionsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetCampaignVersions", path: "/v1/apps/\(input.applicationId)/campaigns/\(input.campaignId)/versions?token=\(input.token?.description ?? "")&page-size=\(input.pageSize?.description ?? "")", httpMethod: "GET", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about the GCM channel for an app.
    public func getGcmChannel(_ input: GetGcmChannelRequest) throws -> GetGcmChannelResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetGcmChannel", path: "/v1/apps/\(input.applicationId)/channels/gcm", httpMethod: "GET", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about your import jobs.
    public func getImportJobs(_ input: GetImportJobsRequest) throws -> GetImportJobsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetImportJobs", path: "/v1/apps/\(input.applicationId)/jobs/import?token=\(input.token?.description ?? "")&page-size=\(input.pageSize?.description ?? "")", httpMethod: "GET", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Used to update the settings for an app.
    public func updateApplicationSettings(_ input: UpdateApplicationSettingsRequest) throws -> UpdateApplicationSettingsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdateApplicationSettings", path: "/v1/apps/\(input.applicationId)/settings", httpMethod: "PUT", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes a campaign.
    public func deleteCampaign(_ input: DeleteCampaignRequest) throws -> DeleteCampaignResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteCampaign", path: "/v1/apps/\(input.applicationId)/campaigns/\(input.campaignId)", httpMethod: "DELETE", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about a segment.
    public func getSegment(_ input: GetSegmentRequest) throws -> GetSegmentResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetSegment", path: "/v1/apps/\(input.applicationId)/segments/\(input.segmentId)", httpMethod: "GET", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Use to update a segment.
    public func updateSegment(_ input: UpdateSegmentRequest) throws -> UpdateSegmentResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdateSegment", path: "/v1/apps/\(input.applicationId)/segments/\(input.segmentId)", httpMethod: "PUT", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Used to create or update a segment.
    public func createSegment(_ input: CreateSegmentRequest) throws -> CreateSegmentResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateSegment", path: "/v1/apps/\(input.applicationId)/segments", httpMethod: "POST", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Use to update your endpoints.
    public func updateEndpointsBatch(_ input: UpdateEndpointsBatchRequest) throws -> UpdateEndpointsBatchResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdateEndpointsBatch", path: "/v1/apps/\(input.applicationId)/endpoints", httpMethod: "PUT", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Creates or updates an import job.
    public func createImportJob(_ input: CreateImportJobRequest) throws -> CreateImportJobResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateImportJob", path: "/v1/apps/\(input.applicationId)/jobs/import", httpMethod: "POST", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes the GCM channel for an app.
    public func deleteGcmChannel(_ input: DeleteGcmChannelRequest) throws -> DeleteGcmChannelResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteGcmChannel", path: "/v1/apps/\(input.applicationId)/channels/gcm", httpMethod: "DELETE", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about the APNs channel for an app.
    public func getApnsChannel(_ input: GetApnsChannelRequest) throws -> GetApnsChannelResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetApnsChannel", path: "/v1/apps/\(input.applicationId)/channels/apns", httpMethod: "GET", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about a campaign.
    public func getCampaign(_ input: GetCampaignRequest) throws -> GetCampaignResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetCampaign", path: "/v1/apps/\(input.applicationId)/campaigns/\(input.campaignId)", httpMethod: "GET", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Use to update an endpoint.
    public func updateEndpoint(_ input: UpdateEndpointRequest) throws -> UpdateEndpointResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdateEndpoint", path: "/v1/apps/\(input.applicationId)/endpoints/\(input.endpointId)", httpMethod: "PUT", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about your campaigns.
    public func getCampaigns(_ input: GetCampaignsRequest) throws -> GetCampaignsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetCampaigns", path: "/v1/apps/\(input.applicationId)/campaigns?token=\(input.token?.description ?? "")&page-size=\(input.pageSize?.description ?? "")", httpMethod: "GET", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes a segment.
    public func deleteSegment(_ input: DeleteSegmentRequest) throws -> DeleteSegmentResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteSegment", path: "/v1/apps/\(input.applicationId)/segments/\(input.segmentId)", httpMethod: "DELETE", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Use to update a campaign.
    public func updateCampaign(_ input: UpdateCampaignRequest) throws -> UpdateCampaignResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdateCampaign", path: "/v1/apps/\(input.applicationId)/campaigns/\(input.campaignId)", httpMethod: "PUT", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about an endpoint.
    public func getEndpoint(_ input: GetEndpointRequest) throws -> GetEndpointResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetEndpoint", path: "/v1/apps/\(input.applicationId)/endpoints/\(input.endpointId)", httpMethod: "GET", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about an import job.
    public func getImportJob(_ input: GetImportJobRequest) throws -> GetImportJobResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetImportJob", path: "/v1/apps/\(input.applicationId)/jobs/import/\(input.jobId)", httpMethod: "GET", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about your segment versions.
    public func getSegmentVersions(_ input: GetSegmentVersionsRequest) throws -> GetSegmentVersionsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetSegmentVersions", path: "/v1/apps/\(input.applicationId)/segments/\(input.segmentId)/versions?token=\(input.token?.description ?? "")&page-size=\(input.pageSize?.description ?? "")", httpMethod: "GET", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Use to update the APNs channel for an app.
    public func updateApnsChannel(_ input: UpdateApnsChannelRequest) throws -> UpdateApnsChannelResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdateApnsChannel", path: "/v1/apps/\(input.applicationId)/channels/apns", httpMethod: "PUT", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes the APNs channel for an app.
    public func deleteApnsChannel(_ input: DeleteApnsChannelRequest) throws -> DeleteApnsChannelResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteApnsChannel", path: "/v1/apps/\(input.applicationId)/channels/apns", httpMethod: "DELETE", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about the activity performed by a campaign.
    public func getCampaignActivities(_ input: GetCampaignActivitiesRequest) throws -> GetCampaignActivitiesResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetCampaignActivities", path: "/v1/apps/\(input.applicationId)/campaigns/\(input.campaignId)/activities?token=\(input.token?.description ?? "")&page-size=\(input.pageSize?.description ?? "")", httpMethod: "GET", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Creates or updates a campaign.
    public func createCampaign(_ input: CreateCampaignRequest) throws -> CreateCampaignResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateCampaign", path: "/v1/apps/\(input.applicationId)/campaigns", httpMethod: "POST", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Use to update the GCM channel for an app.
    public func updateGcmChannel(_ input: UpdateGcmChannelRequest) throws -> UpdateGcmChannelResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdateGcmChannel", path: "/v1/apps/\(input.applicationId)/channels/gcm", httpMethod: "PUT", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Used to request the settings for an app.
    public func getApplicationSettings(_ input: GetApplicationSettingsRequest) throws -> GetApplicationSettingsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetApplicationSettings", path: "/v1/apps/\(input.applicationId)/settings", httpMethod: "GET", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Used to get information about your segments.
    public func getSegments(_ input: GetSegmentsRequest) throws -> GetSegmentsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetSegments", path: "/v1/apps/\(input.applicationId)/segments?token=\(input.token?.description ?? "")&page-size=\(input.pageSize?.description ?? "")", httpMethod: "GET", httpHeaders: [:], input: input)
        return try PinpointResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }


}