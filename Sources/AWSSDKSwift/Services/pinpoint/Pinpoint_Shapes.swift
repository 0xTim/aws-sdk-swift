// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Pinpoint {

    public struct UpdateApplicationSettingsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ApplicationSettingsResource"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationSettingsResource", required: true, type: .structure)
        ]
        public let applicationSettingsResource: ApplicationSettingsResource

        public init(applicationSettingsResource: ApplicationSettingsResource) {
            self.applicationSettingsResource = applicationSettingsResource
        }

        private enum CodingKeys: String, CodingKey {
            case applicationSettingsResource = "ApplicationSettingsResource"
        }
    }

    public struct GetCampaignActivitiesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", location: .querystring(locationName: "page-size"), required: false, type: .string), 
            AWSShapeMember(label: "CampaignId", location: .uri(locationName: "campaign-id"), required: true, type: .string), 
            AWSShapeMember(label: "Token", location: .querystring(locationName: "token"), required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let pageSize: String?
        public let campaignId: String
        public let token: String?
        public let applicationId: String

        public init(pageSize: String? = nil, campaignId: String, token: String? = nil, applicationId: String) {
            self.pageSize = pageSize
            self.campaignId = campaignId
            self.token = token
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "page-size"
            case campaignId = "campaign-id"
            case token = "token"
            case applicationId = "application-id"
        }
    }

    public struct EndpointBatchRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Item", required: false, type: .list)
        ]
        /// List of items to update. Maximum 100 items
        public let item: [EndpointBatchItem]?

        public init(item: [EndpointBatchItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
        }
    }

    public struct EndpointRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointStatus", required: false, type: .string), 
            AWSShapeMember(label: "OptOut", required: false, type: .string), 
            AWSShapeMember(label: "Metrics", required: false, type: .map), 
            AWSShapeMember(label: "EffectiveDate", required: false, type: .string), 
            AWSShapeMember(label: "Address", required: false, type: .string), 
            AWSShapeMember(label: "Location", required: false, type: .structure), 
            AWSShapeMember(label: "Demographic", required: false, type: .structure), 
            AWSShapeMember(label: "Attributes", required: false, type: .map), 
            AWSShapeMember(label: "RequestId", required: false, type: .string), 
            AWSShapeMember(label: "User", required: false, type: .structure), 
            AWSShapeMember(label: "ChannelType", required: false, type: .enum)
        ]
        /// Unused.
        public let endpointStatus: String?
        /// Indicates whether a user has opted out of receiving messages with one of the following values:
        /// ALL - User has opted out of all messages.
        /// NONE - Users has not opted out and receives all messages.
        public let optOut: String?
        /// Custom metrics that your app reports to Amazon Pinpoint.
        public let metrics: [String: Double]?
        /// The last time the endpoint was updated. Provided in ISO 8601 format.
        public let effectiveDate: String?
        /// The destination for messages that you send to this endpoint. The address varies by channel. For mobile push channels, use the token provided by the push notification service, such as the APNs device token or the FCM registration token. For the SMS channel, use a phone number in E.164 format, such as +1206XXX5550100. For the email channel, use an email address.
        public let address: String?
        /// The endpoint location attributes.
        public let location: EndpointLocation?
        /// The endpoint demographic attributes.
        public let demographic: EndpointDemographic?
        /// Custom attributes that describe the endpoint by associating a name with an array of values. For example, an attribute named "interests" might have the values ["science", "politics", "travel"]. You can use these attributes as selection criteria when you create a segment of users to engage with a messaging campaign.
        /// The following characters are not recommended in attribute names: # : ? \ /. The Amazon Pinpoint console does not display attributes that include these characters in the name. This limitation does not apply to attribute values.
        public let attributes: [String: [String]]?
        /// The unique ID for the most recent request to update the endpoint.
        public let requestId: String?
        /// Custom user-specific attributes that your app reports to Amazon Pinpoint.
        public let user: EndpointUser?
        /// The channel type.
        /// Valid values: GCM | APNS | APNS_SANDBOX | APNS_VOIP | APNS_VOIP_SANDBOX | ADM | SMS | EMAIL | BAIDU
        public let channelType: ChannelType?

        public init(endpointStatus: String? = nil, optOut: String? = nil, metrics: [String: Double]? = nil, effectiveDate: String? = nil, address: String? = nil, location: EndpointLocation? = nil, demographic: EndpointDemographic? = nil, attributes: [String: [String]]? = nil, requestId: String? = nil, user: EndpointUser? = nil, channelType: ChannelType? = nil) {
            self.endpointStatus = endpointStatus
            self.optOut = optOut
            self.metrics = metrics
            self.effectiveDate = effectiveDate
            self.address = address
            self.location = location
            self.demographic = demographic
            self.attributes = attributes
            self.requestId = requestId
            self.user = user
            self.channelType = channelType
        }

        private enum CodingKeys: String, CodingKey {
            case endpointStatus = "EndpointStatus"
            case optOut = "OptOut"
            case metrics = "Metrics"
            case effectiveDate = "EffectiveDate"
            case address = "Address"
            case location = "Location"
            case demographic = "Demographic"
            case attributes = "Attributes"
            case requestId = "RequestId"
            case user = "User"
            case channelType = "ChannelType"
        }
    }

    public enum Format: String, CustomStringConvertible, Codable {
        case csv = "CSV"
        case json = "JSON"
        public var description: String { return self.rawValue }
    }

    public struct QuietTime: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "End", required: false, type: .string), 
            AWSShapeMember(label: "Start", required: false, type: .string)
        ]
        /// The default end time for quiet time in ISO 8601 format.
        public let end: String?
        /// The default start time for quiet time in ISO 8601 format.
        public let start: String?

        public init(end: String? = nil, start: String? = nil) {
            self.end = end
            self.start = start
        }

        private enum CodingKeys: String, CodingKey {
            case end = "End"
            case start = "Start"
        }
    }

    public struct GetSegmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentId", location: .uri(locationName: "segment-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let segmentId: String
        public let applicationId: String

        public init(segmentId: String, applicationId: String) {
            self.segmentId = segmentId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case segmentId = "segment-id"
            case applicationId = "application-id"
        }
    }

    public struct CreateCampaignRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "WriteCampaignRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "WriteCampaignRequest", required: true, type: .structure)
        ]
        public let applicationId: String
        public let writeCampaignRequest: WriteCampaignRequest

        public init(applicationId: String, writeCampaignRequest: WriteCampaignRequest) {
            self.applicationId = applicationId
            self.writeCampaignRequest = writeCampaignRequest
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
            case writeCampaignRequest = "WriteCampaignRequest"
        }
    }

    public struct UpdateAdmChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ADMChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ADMChannelResponse", required: true, type: .structure)
        ]
        public let aDMChannelResponse: ADMChannelResponse

        public init(aDMChannelResponse: ADMChannelResponse) {
            self.aDMChannelResponse = aDMChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aDMChannelResponse = "ADMChannelResponse"
        }
    }

    public struct GetBaiduChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "BaiduChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaiduChannelResponse", required: true, type: .structure)
        ]
        public let baiduChannelResponse: BaiduChannelResponse

        public init(baiduChannelResponse: BaiduChannelResponse) {
            self.baiduChannelResponse = baiduChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case baiduChannelResponse = "BaiduChannelResponse"
        }
    }

    public struct DeleteCampaignRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignId", location: .uri(locationName: "campaign-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let campaignId: String
        public let applicationId: String

        public init(campaignId: String, applicationId: String) {
            self.campaignId = campaignId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case campaignId = "campaign-id"
            case applicationId = "application-id"
        }
    }

    public struct CampaignHook: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Mode", required: false, type: .enum), 
            AWSShapeMember(label: "WebUrl", required: false, type: .string), 
            AWSShapeMember(label: "LambdaFunctionName", required: false, type: .string)
        ]
        /// What mode Lambda should be invoked in.
        public let mode: Mode?
        /// Web URL to call for hook. If the URL has authentication specified it will be added as authentication to the request
        public let webUrl: String?
        /// Lambda function name or arn to be called for delivery
        public let lambdaFunctionName: String?

        public init(mode: Mode? = nil, webUrl: String? = nil, lambdaFunctionName: String? = nil) {
            self.mode = mode
            self.webUrl = webUrl
            self.lambdaFunctionName = lambdaFunctionName
        }

        private enum CodingKeys: String, CodingKey {
            case mode = "Mode"
            case webUrl = "WebUrl"
            case lambdaFunctionName = "LambdaFunctionName"
        }
    }

    public struct EndpointSendConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TitleOverride", required: false, type: .string), 
            AWSShapeMember(label: "Context", required: false, type: .map), 
            AWSShapeMember(label: "BodyOverride", required: false, type: .string), 
            AWSShapeMember(label: "RawContent", required: false, type: .string), 
            AWSShapeMember(label: "Substitutions", required: false, type: .map)
        ]
        /// Title override. If specified will override default title if applicable.
        public let titleOverride: String?
        /// A map of custom attributes to attributes to be attached to the message for this address. This payload is added to the push notification's 'data.pinpoint' object or added to the email/sms delivery receipt event attributes.
        public let context: [String: String]?
        /// Body override. If specified will override default body.
        public let bodyOverride: String?
        /// The Raw JSON formatted string to be used as the payload. This value overrides the message.
        public let rawContent: String?
        /// A map of substitution values for the message to be merged with the DefaultMessage's substitutions. Substitutions on this map take precedence over the all other substitutions.
        public let substitutions: [String: [String]]?

        public init(titleOverride: String? = nil, context: [String: String]? = nil, bodyOverride: String? = nil, rawContent: String? = nil, substitutions: [String: [String]]? = nil) {
            self.titleOverride = titleOverride
            self.context = context
            self.bodyOverride = bodyOverride
            self.rawContent = rawContent
            self.substitutions = substitutions
        }

        private enum CodingKeys: String, CodingKey {
            case titleOverride = "TitleOverride"
            case context = "Context"
            case bodyOverride = "BodyOverride"
            case rawContent = "RawContent"
            case substitutions = "Substitutions"
        }
    }

    public enum Action: String, CustomStringConvertible, Codable {
        case openApp = "OPEN_APP"
        case deepLink = "DEEP_LINK"
        case url = "URL"
        public var description: String { return self.rawValue }
    }

    public struct EmailChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "FromAddress", required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "Identity", required: false, type: .string)
        ]
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// The email address used to send emails from.
        public let fromAddress: String?
        /// The ARN of an IAM Role used to submit events to Mobile Analytics' event ingestion service
        public let roleArn: String?
        /// The ARN of an identity verified with SES.
        public let identity: String?

        public init(enabled: Bool? = nil, fromAddress: String? = nil, roleArn: String? = nil, identity: String? = nil) {
            self.enabled = enabled
            self.fromAddress = fromAddress
            self.roleArn = roleArn
            self.identity = identity
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case fromAddress = "FromAddress"
            case roleArn = "RoleArn"
            case identity = "Identity"
        }
    }

    public struct UpdateSmsChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SMSChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SMSChannelResponse", required: true, type: .structure)
        ]
        public let sMSChannelResponse: SMSChannelResponse

        public init(sMSChannelResponse: SMSChannelResponse) {
            self.sMSChannelResponse = sMSChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case sMSChannelResponse = "SMSChannelResponse"
        }
    }

    public struct DeleteGcmChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "GCMChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GCMChannelResponse", required: true, type: .structure)
        ]
        public let gCMChannelResponse: GCMChannelResponse

        public init(gCMChannelResponse: GCMChannelResponse) {
            self.gCMChannelResponse = gCMChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case gCMChannelResponse = "GCMChannelResponse"
        }
    }

    public struct GetImportJobResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ImportJobResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportJobResponse", required: true, type: .structure)
        ]
        public let importJobResponse: ImportJobResponse

        public init(importJobResponse: ImportJobResponse) {
            self.importJobResponse = importJobResponse
        }

        private enum CodingKeys: String, CodingKey {
            case importJobResponse = "ImportJobResponse"
        }
    }

    public struct GetSegmentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", location: .querystring(locationName: "page-size"), required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "Token", location: .querystring(locationName: "token"), required: false, type: .string)
        ]
        public let pageSize: String?
        public let applicationId: String
        public let token: String?

        public init(pageSize: String? = nil, applicationId: String, token: String? = nil) {
            self.pageSize = pageSize
            self.applicationId = applicationId
            self.token = token
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "page-size"
            case applicationId = "application-id"
            case token = "token"
        }
    }

    public struct GetApnsVoipSandboxChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct UpdateApnsSandboxChannelRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSSandboxChannelRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSSandboxChannelRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let aPNSSandboxChannelRequest: APNSSandboxChannelRequest
        public let applicationId: String

        public init(aPNSSandboxChannelRequest: APNSSandboxChannelRequest, applicationId: String) {
            self.aPNSSandboxChannelRequest = aPNSSandboxChannelRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSSandboxChannelRequest = "APNSSandboxChannelRequest"
            case applicationId = "application-id"
        }
    }

    public struct ExportJobResource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentVersion", required: false, type: .integer), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "SegmentId", required: false, type: .string), 
            AWSShapeMember(label: "S3UrlPrefix", required: false, type: .string)
        ]
        /// The version of the segment to export if specified.
        public let segmentVersion: Int32?
        /// The Amazon Resource Name (ARN) of an IAM role that grants Amazon Pinpoint access to the Amazon S3 location that endpoints will be exported to.
        public let roleArn: String?
        /// The ID of the segment to export endpoints from. If not present, Amazon Pinpoint exports all of the endpoints that belong to the application.
        public let segmentId: String?
        /// A URL that points to the location within an Amazon S3 bucket that will receive the export. The location is typically a folder with multiple files.
        /// The URL should follow this format: s3://bucket-name/folder-name/
        /// Amazon Pinpoint will export endpoints to this location.
        public let s3UrlPrefix: String?

        public init(segmentVersion: Int32? = nil, roleArn: String? = nil, segmentId: String? = nil, s3UrlPrefix: String? = nil) {
            self.segmentVersion = segmentVersion
            self.roleArn = roleArn
            self.segmentId = segmentId
            self.s3UrlPrefix = s3UrlPrefix
        }

        private enum CodingKeys: String, CodingKey {
            case segmentVersion = "SegmentVersion"
            case roleArn = "RoleArn"
            case segmentId = "SegmentId"
            case s3UrlPrefix = "S3UrlPrefix"
        }
    }

    public struct DeleteApnsVoipSandboxChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSVoipSandboxChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSVoipSandboxChannelResponse", required: true, type: .structure)
        ]
        public let aPNSVoipSandboxChannelResponse: APNSVoipSandboxChannelResponse

        public init(aPNSVoipSandboxChannelResponse: APNSVoipSandboxChannelResponse) {
            self.aPNSVoipSandboxChannelResponse = aPNSVoipSandboxChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSVoipSandboxChannelResponse = "APNSVoipSandboxChannelResponse"
        }
    }

    public struct BaiduChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "HasCredential", required: false, type: .boolean), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "Credential", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "IsArchived", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedBy", required: false, type: .string)
        ]
        /// Channel ID. Not used, only for backwards compatibility.
        public let id: String?
        /// The platform type. Will be BAIDU
        public let platform: String?
        /// Not used. Retained for backwards compatibility.
        public let hasCredential: Bool?
        /// Version of channel
        public let version: Int32?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// Last date this was updated
        public let lastModifiedDate: String?
        /// The Baidu API key from Baidu.
        public let credential: String?
        /// Application id
        public let applicationId: String?
        /// When was this segment created
        public let creationDate: String?
        /// Is this channel archived
        public let isArchived: Bool?
        /// Who made the last change
        public let lastModifiedBy: String?

        public init(id: String? = nil, platform: String? = nil, hasCredential: Bool? = nil, version: Int32? = nil, enabled: Bool? = nil, lastModifiedDate: String? = nil, credential: String? = nil, applicationId: String? = nil, creationDate: String? = nil, isArchived: Bool? = nil, lastModifiedBy: String? = nil) {
            self.id = id
            self.platform = platform
            self.hasCredential = hasCredential
            self.version = version
            self.enabled = enabled
            self.lastModifiedDate = lastModifiedDate
            self.credential = credential
            self.applicationId = applicationId
            self.creationDate = creationDate
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case platform = "Platform"
            case hasCredential = "HasCredential"
            case version = "Version"
            case enabled = "Enabled"
            case lastModifiedDate = "LastModifiedDate"
            case credential = "Credential"
            case applicationId = "ApplicationId"
            case creationDate = "CreationDate"
            case isArchived = "IsArchived"
            case lastModifiedBy = "LastModifiedBy"
        }
    }

    public struct UpdateEmailChannelRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EmailChannelRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmailChannelRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let emailChannelRequest: EmailChannelRequest
        public let applicationId: String

        public init(emailChannelRequest: EmailChannelRequest, applicationId: String) {
            self.emailChannelRequest = emailChannelRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case emailChannelRequest = "EmailChannelRequest"
            case applicationId = "application-id"
        }
    }

    public struct SendUsersMessagesRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SendUsersMessageRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SendUsersMessageRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let sendUsersMessageRequest: SendUsersMessageRequest
        public let applicationId: String

        public init(sendUsersMessageRequest: SendUsersMessageRequest, applicationId: String) {
            self.sendUsersMessageRequest = sendUsersMessageRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case sendUsersMessageRequest = "SendUsersMessageRequest"
            case applicationId = "application-id"
        }
    }

    public struct UpdateApnsVoipChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSVoipChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSVoipChannelResponse", required: true, type: .structure)
        ]
        public let aPNSVoipChannelResponse: APNSVoipChannelResponse

        public init(aPNSVoipChannelResponse: APNSVoipChannelResponse) {
            self.aPNSVoipChannelResponse = aPNSVoipChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSVoipChannelResponse = "APNSVoipChannelResponse"
        }
    }

    public struct ExportJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CompletionDate", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "FailedPieces", required: false, type: .integer), 
            AWSShapeMember(label: "TotalPieces", required: false, type: .integer), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "TotalProcessed", required: false, type: .integer), 
            AWSShapeMember(label: "CompletedPieces", required: false, type: .integer), 
            AWSShapeMember(label: "TotalFailures", required: false, type: .integer), 
            AWSShapeMember(label: "Failures", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .string)
        ]
        /// The date the job completed in ISO 8601 format.
        public let completionDate: String?
        /// The export job settings.
        public let definition: ExportJobResource?
        /// The number of pieces that failed to be processed as of the time of the request.
        public let failedPieces: Int32?
        /// The total number of pieces that must be processed to finish the job. Each piece is an approximately equal portion of the endpoints.
        public let totalPieces: Int32?
        /// The date the job was created in ISO 8601 format.
        public let creationDate: String?
        /// The status of the job.
        /// Valid values: CREATED, INITIALIZING, PROCESSING, COMPLETING, COMPLETED, FAILING, FAILED
        /// The job status is FAILED if one or more pieces failed.
        public let jobStatus: JobStatus?
        /// The unique ID of the job.
        public let id: String?
        /// The number of endpoints that were processed by the job.
        public let totalProcessed: Int32?
        /// The number of pieces that have successfully completed as of the time of the request.
        public let completedPieces: Int32?
        /// The number of endpoints that were not processed; for example, because of syntax errors.
        public let totalFailures: Int32?
        /// Provides up to 100 of the first failed entries for the job, if any exist.
        public let failures: [String]?
        /// The unique ID of the application to which the job applies.
        public let applicationId: String?
        /// The job type. Will be 'EXPORT'.
        public let `type`: String?

        public init(completionDate: String? = nil, definition: ExportJobResource? = nil, failedPieces: Int32? = nil, totalPieces: Int32? = nil, creationDate: String? = nil, jobStatus: JobStatus? = nil, id: String? = nil, totalProcessed: Int32? = nil, completedPieces: Int32? = nil, totalFailures: Int32? = nil, failures: [String]? = nil, applicationId: String? = nil, type: String? = nil) {
            self.completionDate = completionDate
            self.definition = definition
            self.failedPieces = failedPieces
            self.totalPieces = totalPieces
            self.creationDate = creationDate
            self.jobStatus = jobStatus
            self.id = id
            self.totalProcessed = totalProcessed
            self.completedPieces = completedPieces
            self.totalFailures = totalFailures
            self.failures = failures
            self.applicationId = applicationId
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case completionDate = "CompletionDate"
            case definition = "Definition"
            case failedPieces = "FailedPieces"
            case totalPieces = "TotalPieces"
            case creationDate = "CreationDate"
            case jobStatus = "JobStatus"
            case id = "Id"
            case totalProcessed = "TotalProcessed"
            case completedPieces = "CompletedPieces"
            case totalFailures = "TotalFailures"
            case failures = "Failures"
            case applicationId = "ApplicationId"
            case `type` = "Type"
        }
    }

    public struct DeleteApnsVoipChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct SMSChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "SenderId", required: false, type: .string), 
            AWSShapeMember(label: "ShortCode", required: false, type: .string)
        ]
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// Sender identifier of your messages.
        public let senderId: String?
        /// ShortCode registered with phone provider.
        public let shortCode: String?

        public init(enabled: Bool? = nil, senderId: String? = nil, shortCode: String? = nil) {
            self.enabled = enabled
            self.senderId = senderId
            self.shortCode = shortCode
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case senderId = "SenderId"
            case shortCode = "ShortCode"
        }
    }

    public struct GetExportJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", location: .querystring(locationName: "page-size"), required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "Token", location: .querystring(locationName: "token"), required: false, type: .string)
        ]
        public let pageSize: String?
        public let applicationId: String
        public let token: String?

        public init(pageSize: String? = nil, applicationId: String, token: String? = nil) {
            self.pageSize = pageSize
            self.applicationId = applicationId
            self.token = token
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "page-size"
            case applicationId = "application-id"
            case token = "token"
        }
    }

    public struct WriteCampaignRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limits", required: false, type: .structure), 
            AWSShapeMember(label: "TreatmentName", required: false, type: .string), 
            AWSShapeMember(label: "SegmentVersion", required: false, type: .integer), 
            AWSShapeMember(label: "Schedule", required: false, type: .structure), 
            AWSShapeMember(label: "MessageConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SegmentId", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Hook", required: false, type: .structure), 
            AWSShapeMember(label: "TreatmentDescription", required: false, type: .string), 
            AWSShapeMember(label: "AdditionalTreatments", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "HoldoutPercent", required: false, type: .integer), 
            AWSShapeMember(label: "IsPaused", required: false, type: .boolean)
        ]
        /// The campaign limits settings.
        public let limits: CampaignLimits?
        /// The custom name of a variation of the campaign used for A/B testing.
        public let treatmentName: String?
        /// The version of the segment to which the campaign sends messages.
        public let segmentVersion: Int32?
        /// The campaign schedule.
        public let schedule: Schedule?
        /// The message configuration settings.
        public let messageConfiguration: MessageConfiguration?
        /// The ID of the segment to which the campaign sends messages.
        public let segmentId: String?
        /// A description of the campaign.
        public let description: String?
        /// Campaign hook information.
        public let hook: CampaignHook?
        /// A custom description for the treatment.
        public let treatmentDescription: String?
        /// Treatments that are defined in addition to the default treatment.
        public let additionalTreatments: [WriteTreatmentResource]?
        /// The custom name of the campaign.
        public let name: String?
        /// The allocated percentage of end users who will not receive messages from this campaign.
        public let holdoutPercent: Int32?
        /// Indicates whether the campaign is paused. A paused campaign does not send messages unless you resume it by setting IsPaused to false.
        public let isPaused: Bool?

        public init(limits: CampaignLimits? = nil, treatmentName: String? = nil, segmentVersion: Int32? = nil, schedule: Schedule? = nil, messageConfiguration: MessageConfiguration? = nil, segmentId: String? = nil, description: String? = nil, hook: CampaignHook? = nil, treatmentDescription: String? = nil, additionalTreatments: [WriteTreatmentResource]? = nil, name: String? = nil, holdoutPercent: Int32? = nil, isPaused: Bool? = nil) {
            self.limits = limits
            self.treatmentName = treatmentName
            self.segmentVersion = segmentVersion
            self.schedule = schedule
            self.messageConfiguration = messageConfiguration
            self.segmentId = segmentId
            self.description = description
            self.hook = hook
            self.treatmentDescription = treatmentDescription
            self.additionalTreatments = additionalTreatments
            self.name = name
            self.holdoutPercent = holdoutPercent
            self.isPaused = isPaused
        }

        private enum CodingKeys: String, CodingKey {
            case limits = "Limits"
            case treatmentName = "TreatmentName"
            case segmentVersion = "SegmentVersion"
            case schedule = "Schedule"
            case messageConfiguration = "MessageConfiguration"
            case segmentId = "SegmentId"
            case description = "Description"
            case hook = "Hook"
            case treatmentDescription = "TreatmentDescription"
            case additionalTreatments = "AdditionalTreatments"
            case name = "Name"
            case holdoutPercent = "HoldoutPercent"
            case isPaused = "IsPaused"
        }
    }

    public struct GetAdmChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct WriteTreatmentResource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Schedule", required: false, type: .structure), 
            AWSShapeMember(label: "TreatmentDescription", required: false, type: .string), 
            AWSShapeMember(label: "MessageConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SizePercent", required: false, type: .integer), 
            AWSShapeMember(label: "TreatmentName", required: false, type: .string)
        ]
        /// The campaign schedule.
        public let schedule: Schedule?
        /// A custom description for the treatment.
        public let treatmentDescription: String?
        /// The message configuration settings.
        public let messageConfiguration: MessageConfiguration?
        /// The allocated percentage of users for this treatment.
        public let sizePercent: Int32?
        /// The custom name of a variation of the campaign used for A/B testing.
        public let treatmentName: String?

        public init(schedule: Schedule? = nil, treatmentDescription: String? = nil, messageConfiguration: MessageConfiguration? = nil, sizePercent: Int32? = nil, treatmentName: String? = nil) {
            self.schedule = schedule
            self.treatmentDescription = treatmentDescription
            self.messageConfiguration = messageConfiguration
            self.sizePercent = sizePercent
            self.treatmentName = treatmentName
        }

        private enum CodingKeys: String, CodingKey {
            case schedule = "Schedule"
            case treatmentDescription = "TreatmentDescription"
            case messageConfiguration = "MessageConfiguration"
            case sizePercent = "SizePercent"
            case treatmentName = "TreatmentName"
        }
    }

    public struct SMSMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Keyword", required: false, type: .string), 
            AWSShapeMember(label: "SenderId", required: false, type: .string), 
            AWSShapeMember(label: "OriginationNumber", required: false, type: .string), 
            AWSShapeMember(label: "MessageType", required: false, type: .enum), 
            AWSShapeMember(label: "Body", required: false, type: .string), 
            AWSShapeMember(label: "Substitutions", required: false, type: .map)
        ]
        /// The SMS program name that you provided to AWS Support when you requested your dedicated number.
        public let keyword: String?
        /// The sender ID that is shown as the message sender on the recipient's device. Support for sender IDs varies by country or region.
        public let senderId: String?
        /// The phone number that the SMS message originates from. Specify one of the dedicated long codes or short codes that you requested from AWS Support and that is assigned to your account. If this attribute is not specified, Amazon Pinpoint randomly assigns a long code.
        public let originationNumber: String?
        /// Is this a transaction priority message or lower priority.
        public let messageType: MessageType?
        /// The body of the SMS message.
        public let body: String?
        /// Default message substitutions. Can be overridden by individual address substitutions.
        public let substitutions: [String: [String]]?

        public init(keyword: String? = nil, senderId: String? = nil, originationNumber: String? = nil, messageType: MessageType? = nil, body: String? = nil, substitutions: [String: [String]]? = nil) {
            self.keyword = keyword
            self.senderId = senderId
            self.originationNumber = originationNumber
            self.messageType = messageType
            self.body = body
            self.substitutions = substitutions
        }

        private enum CodingKeys: String, CodingKey {
            case keyword = "Keyword"
            case senderId = "SenderId"
            case originationNumber = "OriginationNumber"
            case messageType = "MessageType"
            case body = "Body"
            case substitutions = "Substitutions"
        }
    }

    public struct GetUserEndpointsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserId", location: .uri(locationName: "user-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let userId: String
        public let applicationId: String

        public init(userId: String, applicationId: String) {
            self.userId = userId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case userId = "user-id"
            case applicationId = "application-id"
        }
    }

    public struct DeleteSmsChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct SegmentReference: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// If specified contains a specific version of the segment included.
        public let version: Int32?
        /// Segment Id.
        public let id: String?

        public init(version: Int32? = nil, id: String? = nil) {
            self.version = version
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case version = "Version"
            case id = "Id"
        }
    }

    public struct UpdateApnsVoipSandboxChannelRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSVoipSandboxChannelRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSVoipSandboxChannelRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let aPNSVoipSandboxChannelRequest: APNSVoipSandboxChannelRequest
        public let applicationId: String

        public init(aPNSVoipSandboxChannelRequest: APNSVoipSandboxChannelRequest, applicationId: String) {
            self.aPNSVoipSandboxChannelRequest = aPNSVoipSandboxChannelRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSVoipSandboxChannelRequest = "APNSVoipSandboxChannelRequest"
            case applicationId = "application-id"
        }
    }

    public enum Frequency: String, CustomStringConvertible, Codable {
        case once = "ONCE"
        case hourly = "HOURLY"
        case daily = "DAILY"
        case weekly = "WEEKLY"
        case monthly = "MONTHLY"
        public var description: String { return self.rawValue }
    }

    public struct DeleteSmsChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SMSChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SMSChannelResponse", required: true, type: .structure)
        ]
        public let sMSChannelResponse: SMSChannelResponse

        public init(sMSChannelResponse: SMSChannelResponse) {
            self.sMSChannelResponse = sMSChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case sMSChannelResponse = "SMSChannelResponse"
        }
    }

    public struct GetSmsChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct DeleteApnsVoipSandboxChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct MessageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Context", required: false, type: .map), 
            AWSShapeMember(label: "Addresses", required: false, type: .map), 
            AWSShapeMember(label: "MessageConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Endpoints", required: false, type: .map)
        ]
        /// A map of custom attributes to attributes to be attached to the message. This payload is added to the push notification's 'data.pinpoint' object or added to the email/sms delivery receipt event attributes.
        public let context: [String: String]?
        /// A map of key-value pairs, where each key is an address and each value is an AddressConfiguration object. An address can be a push notification token, a phone number, or an email address.
        public let addresses: [String: AddressConfiguration]?
        /// Message configuration.
        public let messageConfiguration: DirectMessageConfiguration?
        /// A map of key-value pairs, where each key is an endpoint ID and each value is an EndpointSendConfiguration object. Within an EndpointSendConfiguration object, you can tailor the message for an endpoint by specifying message overrides or substitutions.
        public let endpoints: [String: EndpointSendConfiguration]?

        public init(context: [String: String]? = nil, addresses: [String: AddressConfiguration]? = nil, messageConfiguration: DirectMessageConfiguration? = nil, endpoints: [String: EndpointSendConfiguration]? = nil) {
            self.context = context
            self.addresses = addresses
            self.messageConfiguration = messageConfiguration
            self.endpoints = endpoints
        }

        private enum CodingKeys: String, CodingKey {
            case context = "Context"
            case addresses = "Addresses"
            case messageConfiguration = "MessageConfiguration"
            case endpoints = "Endpoints"
        }
    }

    public struct GetExportJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", location: .uri(locationName: "job-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let jobId: String
        public let applicationId: String

        public init(jobId: String, applicationId: String) {
            self.jobId = jobId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "job-id"
            case applicationId = "application-id"
        }
    }

    public struct GetCampaignRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignId", location: .uri(locationName: "campaign-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let campaignId: String
        public let applicationId: String

        public init(campaignId: String, applicationId: String) {
            self.campaignId = campaignId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case campaignId = "campaign-id"
            case applicationId = "application-id"
        }
    }

    public struct DeleteBaiduChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "BaiduChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaiduChannelResponse", required: true, type: .structure)
        ]
        public let baiduChannelResponse: BaiduChannelResponse

        public init(baiduChannelResponse: BaiduChannelResponse) {
            self.baiduChannelResponse = baiduChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case baiduChannelResponse = "BaiduChannelResponse"
        }
    }

    public struct ApplicationResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The display name of the application.
        public let name: String?
        /// The unique application ID.
        public let id: String?

        public init(name: String? = nil, id: String? = nil) {
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case id = "Id"
        }
    }

    public struct UpdateEndpointRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EndpointRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointRequest", required: true, type: .structure), 
            AWSShapeMember(label: "EndpointId", location: .uri(locationName: "endpoint-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let endpointRequest: EndpointRequest
        public let endpointId: String
        public let applicationId: String

        public init(endpointRequest: EndpointRequest, endpointId: String, applicationId: String) {
            self.endpointRequest = endpointRequest
            self.endpointId = endpointId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case endpointRequest = "EndpointRequest"
            case endpointId = "endpoint-id"
            case applicationId = "application-id"
        }
    }

    public struct GetSegmentImportJobsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ImportJobsResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportJobsResponse", required: true, type: .structure)
        ]
        public let importJobsResponse: ImportJobsResponse

        public init(importJobsResponse: ImportJobsResponse) {
            self.importJobsResponse = importJobsResponse
        }

        private enum CodingKeys: String, CodingKey {
            case importJobsResponse = "ImportJobsResponse"
        }
    }

    public struct WriteApplicationSettingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limits", required: false, type: .structure), 
            AWSShapeMember(label: "QuietTime", required: false, type: .structure), 
            AWSShapeMember(label: "CampaignHook", required: false, type: .structure), 
            AWSShapeMember(label: "CloudWatchMetricsEnabled", required: false, type: .boolean)
        ]
        /// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own.
        public let limits: CampaignLimits?
        /// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own.
        public let quietTime: QuietTime?
        /// Default campaign hook information.
        public let campaignHook: CampaignHook?
        /// The CloudWatchMetrics settings for the app.
        public let cloudWatchMetricsEnabled: Bool?

        public init(limits: CampaignLimits? = nil, quietTime: QuietTime? = nil, campaignHook: CampaignHook? = nil, cloudWatchMetricsEnabled: Bool? = nil) {
            self.limits = limits
            self.quietTime = quietTime
            self.campaignHook = campaignHook
            self.cloudWatchMetricsEnabled = cloudWatchMetricsEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case limits = "Limits"
            case quietTime = "QuietTime"
            case campaignHook = "CampaignHook"
            case cloudWatchMetricsEnabled = "CloudWatchMetricsEnabled"
        }
    }

    public struct UpdateGcmChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "GCMChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GCMChannelResponse", required: true, type: .structure)
        ]
        public let gCMChannelResponse: GCMChannelResponse

        public init(gCMChannelResponse: GCMChannelResponse) {
            self.gCMChannelResponse = gCMChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case gCMChannelResponse = "GCMChannelResponse"
        }
    }

    public struct EndpointMessageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpdatedToken", required: false, type: .string), 
            AWSShapeMember(label: "StatusCode", required: false, type: .integer), 
            AWSShapeMember(label: "DeliveryStatus", required: false, type: .enum), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "Address", required: false, type: .string), 
            AWSShapeMember(label: "MessageId", required: false, type: .string)
        ]
        /// If token was updated as part of delivery. (This is GCM Specific)
        public let updatedToken: String?
        /// Downstream service status code.
        public let statusCode: Int32?
        /// Delivery status of message.
        public let deliveryStatus: DeliveryStatus?
        /// Status message for message delivery.
        public let statusMessage: String?
        /// Address that endpoint message was delivered to.
        public let address: String?
        /// Unique message identifier associated with the message that was sent.
        public let messageId: String?

        public init(updatedToken: String? = nil, statusCode: Int32? = nil, deliveryStatus: DeliveryStatus? = nil, statusMessage: String? = nil, address: String? = nil, messageId: String? = nil) {
            self.updatedToken = updatedToken
            self.statusCode = statusCode
            self.deliveryStatus = deliveryStatus
            self.statusMessage = statusMessage
            self.address = address
            self.messageId = messageId
        }

        private enum CodingKeys: String, CodingKey {
            case updatedToken = "UpdatedToken"
            case statusCode = "StatusCode"
            case deliveryStatus = "DeliveryStatus"
            case statusMessage = "StatusMessage"
            case address = "Address"
            case messageId = "MessageId"
        }
    }

    public enum Duration: String, CustomStringConvertible, Codable {
        case hr24 = "HR_24"
        case day7 = "DAY_7"
        case day14 = "DAY_14"
        case day30 = "DAY_30"
        public var description: String { return self.rawValue }
    }

    public struct EndpointsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Item", required: false, type: .list)
        ]
        /// The list of endpoints.
        public let item: [EndpointResponse]?

        public init(item: [EndpointResponse]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
        }
    }

    public struct GetSmsChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SMSChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SMSChannelResponse", required: true, type: .structure)
        ]
        public let sMSChannelResponse: SMSChannelResponse

        public init(sMSChannelResponse: SMSChannelResponse) {
            self.sMSChannelResponse = sMSChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case sMSChannelResponse = "SMSChannelResponse"
        }
    }

    public struct EndpointBatchItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelType", required: false, type: .enum), 
            AWSShapeMember(label: "User", required: false, type: .structure), 
            AWSShapeMember(label: "EffectiveDate", required: false, type: .string), 
            AWSShapeMember(label: "OptOut", required: false, type: .string), 
            AWSShapeMember(label: "Metrics", required: false, type: .map), 
            AWSShapeMember(label: "Location", required: false, type: .structure), 
            AWSShapeMember(label: "Address", required: false, type: .string), 
            AWSShapeMember(label: "Demographic", required: false, type: .structure), 
            AWSShapeMember(label: "Attributes", required: false, type: .map), 
            AWSShapeMember(label: "RequestId", required: false, type: .string), 
            AWSShapeMember(label: "EndpointStatus", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The channel type.
        /// Valid values: GCM | APNS | APNS_SANDBOX | APNS_VOIP | APNS_VOIP_SANDBOX | ADM | SMS | EMAIL | BAIDU
        public let channelType: ChannelType?
        /// Custom user-specific attributes that your app reports to Amazon Pinpoint.
        public let user: EndpointUser?
        /// The last time the endpoint was updated. Provided in ISO 8601 format.
        public let effectiveDate: String?
        /// Indicates whether a user has opted out of receiving messages with one of the following values:
        /// ALL - User has opted out of all messages.
        /// NONE - Users has not opted out and receives all messages.
        public let optOut: String?
        /// Custom metrics that your app reports to Amazon Pinpoint.
        public let metrics: [String: Double]?
        /// The endpoint location attributes.
        public let location: EndpointLocation?
        /// The destination for messages that you send to this endpoint. The address varies by channel. For mobile push channels, use the token provided by the push notification service, such as the APNs device token or the FCM registration token. For the SMS channel, use a phone number in E.164 format, such as +1206XXX5550100. For the email channel, use an email address.
        public let address: String?
        /// The endpoint demographic attributes.
        public let demographic: EndpointDemographic?
        /// Custom attributes that describe the endpoint by associating a name with an array of values. For example, an attribute named "interests" might have the values ["science", "politics", "travel"]. You can use these attributes as selection criteria when you create a segment of users to engage with a messaging campaign.
        /// The following characters are not recommended in attribute names: # : ? \ /. The Amazon Pinpoint console does not display attributes that include these characters in the name. This limitation does not apply to attribute values.
        public let attributes: [String: [String]]?
        /// The unique ID for the most recent request to update the endpoint.
        public let requestId: String?
        /// Unused.
        public let endpointStatus: String?
        /// The unique Id for the Endpoint in the batch.
        public let id: String?

        public init(channelType: ChannelType? = nil, user: EndpointUser? = nil, effectiveDate: String? = nil, optOut: String? = nil, metrics: [String: Double]? = nil, location: EndpointLocation? = nil, address: String? = nil, demographic: EndpointDemographic? = nil, attributes: [String: [String]]? = nil, requestId: String? = nil, endpointStatus: String? = nil, id: String? = nil) {
            self.channelType = channelType
            self.user = user
            self.effectiveDate = effectiveDate
            self.optOut = optOut
            self.metrics = metrics
            self.location = location
            self.address = address
            self.demographic = demographic
            self.attributes = attributes
            self.requestId = requestId
            self.endpointStatus = endpointStatus
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case channelType = "ChannelType"
            case user = "User"
            case effectiveDate = "EffectiveDate"
            case optOut = "OptOut"
            case metrics = "Metrics"
            case location = "Location"
            case address = "Address"
            case demographic = "Demographic"
            case attributes = "Attributes"
            case requestId = "RequestId"
            case endpointStatus = "EndpointStatus"
            case id = "Id"
        }
    }

    public struct UpdateApnsVoipChannelRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSVoipChannelRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSVoipChannelRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let aPNSVoipChannelRequest: APNSVoipChannelRequest
        public let applicationId: String

        public init(aPNSVoipChannelRequest: APNSVoipChannelRequest, applicationId: String) {
            self.aPNSVoipChannelRequest = aPNSVoipChannelRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSVoipChannelRequest = "APNSVoipChannelRequest"
            case applicationId = "application-id"
        }
    }

    public enum AttributeType: String, CustomStringConvertible, Codable {
        case inclusive = "INCLUSIVE"
        case exclusive = "EXCLUSIVE"
        public var description: String { return self.rawValue }
    }

    public struct CampaignsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Item", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of campaigns.
        public let item: [CampaignResponse]?
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        public let nextToken: String?

        public init(item: [CampaignResponse]? = nil, nextToken: String? = nil) {
            self.item = item
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
            case nextToken = "NextToken"
        }
    }

    public struct GetApnsVoipChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct DefaultMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Body", required: false, type: .string), 
            AWSShapeMember(label: "Substitutions", required: false, type: .map)
        ]
        /// The message body of the notification, the email body or the text message.
        public let body: String?
        /// Default message substitutions. Can be overridden by individual address substitutions.
        public let substitutions: [String: [String]]?

        public init(body: String? = nil, substitutions: [String: [String]]? = nil) {
            self.body = body
            self.substitutions = substitutions
        }

        private enum CodingKeys: String, CodingKey {
            case body = "Body"
            case substitutions = "Substitutions"
        }
    }

    public enum Mode: String, CustomStringConvertible, Codable {
        case delivery = "DELIVERY"
        case filter = "FILTER"
        public var description: String { return self.rawValue }
    }

    public struct CreateApplicationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The display name of the application. Used in the Amazon Pinpoint console.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct EndpointLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Longitude", required: false, type: .double), 
            AWSShapeMember(label: "Country", required: false, type: .string), 
            AWSShapeMember(label: "PostalCode", required: false, type: .string), 
            AWSShapeMember(label: "City", required: false, type: .string), 
            AWSShapeMember(label: "Latitude", required: false, type: .double), 
            AWSShapeMember(label: "Region", required: false, type: .string)
        ]
        /// The longitude of the endpoint location. Rounded to one decimal (Roughly corresponding to a mile).
        public let longitude: Double?
        /// Country according to ISO 3166-1 Alpha-2 codes. For example, US.
        public let country: String?
        /// The postal code or zip code of the endpoint.
        public let postalCode: String?
        /// The city where the endpoint is located.
        public let city: String?
        /// The latitude of the endpoint location. Rounded to one decimal (Roughly corresponding to a mile).
        public let latitude: Double?
        /// The region of the endpoint location. For example, corresponds to a state in US.
        public let region: String?

        public init(longitude: Double? = nil, country: String? = nil, postalCode: String? = nil, city: String? = nil, latitude: Double? = nil, region: String? = nil) {
            self.longitude = longitude
            self.country = country
            self.postalCode = postalCode
            self.city = city
            self.latitude = latitude
            self.region = region
        }

        private enum CodingKeys: String, CodingKey {
            case longitude = "Longitude"
            case country = "Country"
            case postalCode = "PostalCode"
            case city = "City"
            case latitude = "Latitude"
            case region = "Region"
        }
    }

    public struct GetApnsVoipChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSVoipChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSVoipChannelResponse", required: true, type: .structure)
        ]
        public let aPNSVoipChannelResponse: APNSVoipChannelResponse

        public init(aPNSVoipChannelResponse: APNSVoipChannelResponse) {
            self.aPNSVoipChannelResponse = aPNSVoipChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSVoipChannelResponse = "APNSVoipChannelResponse"
        }
    }

    public struct ExportJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentVersion", required: false, type: .integer), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "SegmentId", required: false, type: .string), 
            AWSShapeMember(label: "S3UrlPrefix", required: false, type: .string)
        ]
        /// The version of the segment to export if specified.
        public let segmentVersion: Int32?
        /// The Amazon Resource Name (ARN) of an IAM role that grants Amazon Pinpoint access to the Amazon S3 location that endpoints will be exported to.
        public let roleArn: String?
        /// The ID of the segment to export endpoints from. If not present, Amazon Pinpoint exports all of the endpoints that belong to the application.
        public let segmentId: String?
        /// A URL that points to the location within an Amazon S3 bucket that will receive the export. The location is typically a folder with multiple files.
        /// The URL should follow this format: s3://bucket-name/folder-name/
        /// Amazon Pinpoint will export endpoints to this location.
        public let s3UrlPrefix: String?

        public init(segmentVersion: Int32? = nil, roleArn: String? = nil, segmentId: String? = nil, s3UrlPrefix: String? = nil) {
            self.segmentVersion = segmentVersion
            self.roleArn = roleArn
            self.segmentId = segmentId
            self.s3UrlPrefix = s3UrlPrefix
        }

        private enum CodingKeys: String, CodingKey {
            case segmentVersion = "SegmentVersion"
            case roleArn = "RoleArn"
            case segmentId = "SegmentId"
            case s3UrlPrefix = "S3UrlPrefix"
        }
    }

    public struct DeleteAdmChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct GetEndpointResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EndpointResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointResponse", required: true, type: .structure)
        ]
        public let endpointResponse: EndpointResponse

        public init(endpointResponse: EndpointResponse) {
            self.endpointResponse = endpointResponse
        }

        private enum CodingKeys: String, CodingKey {
            case endpointResponse = "EndpointResponse"
        }
    }

    public struct GCMChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "HasCredential", required: false, type: .boolean), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "Credential", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "IsArchived", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedBy", required: false, type: .string)
        ]
        /// Channel ID. Not used. Present only for backwards compatibility.
        public let id: String?
        /// The platform type. Will be GCM
        public let platform: String?
        /// Not used. Retained for backwards compatibility.
        public let hasCredential: Bool?
        /// Version of channel
        public let version: Int32?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// Last date this was updated
        public let lastModifiedDate: String?
        /// The GCM API key from Google.
        public let credential: String?
        /// The ID of the application to which the channel applies.
        public let applicationId: String?
        /// When was this segment created
        public let creationDate: String?
        /// Is this channel archived
        public let isArchived: Bool?
        /// Who last updated this entry
        public let lastModifiedBy: String?

        public init(id: String? = nil, platform: String? = nil, hasCredential: Bool? = nil, version: Int32? = nil, enabled: Bool? = nil, lastModifiedDate: String? = nil, credential: String? = nil, applicationId: String? = nil, creationDate: String? = nil, isArchived: Bool? = nil, lastModifiedBy: String? = nil) {
            self.id = id
            self.platform = platform
            self.hasCredential = hasCredential
            self.version = version
            self.enabled = enabled
            self.lastModifiedDate = lastModifiedDate
            self.credential = credential
            self.applicationId = applicationId
            self.creationDate = creationDate
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case platform = "Platform"
            case hasCredential = "HasCredential"
            case version = "Version"
            case enabled = "Enabled"
            case lastModifiedDate = "LastModifiedDate"
            case credential = "Credential"
            case applicationId = "ApplicationId"
            case creationDate = "CreationDate"
            case isArchived = "IsArchived"
            case lastModifiedBy = "LastModifiedBy"
        }
    }

    public enum DimensionType: String, CustomStringConvertible, Codable {
        case inclusive = "INCLUSIVE"
        case exclusive = "EXCLUSIVE"
        public var description: String { return self.rawValue }
    }

    public struct SendMessagesRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MessageRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "MessageRequest", required: true, type: .structure)
        ]
        public let applicationId: String
        public let messageRequest: MessageRequest

        public init(applicationId: String, messageRequest: MessageRequest) {
            self.applicationId = applicationId
            self.messageRequest = messageRequest
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
            case messageRequest = "MessageRequest"
        }
    }

    public struct GetEmailChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EmailChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmailChannelResponse", required: true, type: .structure)
        ]
        public let emailChannelResponse: EmailChannelResponse

        public init(emailChannelResponse: EmailChannelResponse) {
            self.emailChannelResponse = emailChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case emailChannelResponse = "EmailChannelResponse"
        }
    }

    public enum DeliveryStatus: String, CustomStringConvertible, Codable {
        case successful = "SUCCESSFUL"
        case throttled = "THROTTLED"
        case temporaryFailure = "TEMPORARY_FAILURE"
        case permanentFailure = "PERMANENT_FAILURE"
        case unknownFailure = "UNKNOWN_FAILURE"
        case optOut = "OPT_OUT"
        case duplicate = "DUPLICATE"
        public var description: String { return self.rawValue }
    }

    public struct PutEventStreamResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EventStream"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventStream", required: true, type: .structure)
        ]
        public let eventStream: EventStream

        public init(eventStream: EventStream) {
            self.eventStream = eventStream
        }

        private enum CodingKeys: String, CodingKey {
            case eventStream = "EventStream"
        }
    }

    public struct SegmentGroupList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Groups", required: false, type: .list), 
            AWSShapeMember(label: "Include", required: false, type: .enum)
        ]
        /// List of dimension groups to evaluate.
        public let groups: [SegmentGroup]?
        /// How should the groups be applied for the result
        public let include: Include?

        public init(groups: [SegmentGroup]? = nil, include: Include? = nil) {
            self.groups = groups
            self.include = include
        }

        private enum CodingKeys: String, CodingKey {
            case groups = "Groups"
            case include = "Include"
        }
    }

    public enum CampaignStatus: String, CustomStringConvertible, Codable {
        case scheduled = "SCHEDULED"
        case executing = "EXECUTING"
        case pendingNextRun = "PENDING_NEXT_RUN"
        case completed = "COMPLETED"
        case paused = "PAUSED"
        case deleted = "DELETED"
        public var description: String { return self.rawValue }
    }

    public struct UpdateAdmChannelRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ADMChannelRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "ADMChannelRequest", required: true, type: .structure)
        ]
        public let applicationId: String
        public let aDMChannelRequest: ADMChannelRequest

        public init(applicationId: String, aDMChannelRequest: ADMChannelRequest) {
            self.applicationId = applicationId
            self.aDMChannelRequest = aDMChannelRequest
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
            case aDMChannelRequest = "ADMChannelRequest"
        }
    }

    public struct SetDimension: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DimensionType", required: false, type: .enum), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// The type of dimension:
        /// INCLUSIVE - Endpoints that match the criteria are included in the segment.
        /// EXCLUSIVE - Endpoints that match the criteria are excluded from the segment.
        public let dimensionType: DimensionType?
        /// The criteria values for the segment dimension. Endpoints with matching attribute values are included or excluded from the segment, depending on the setting for Type.
        public let values: [String]?

        public init(dimensionType: DimensionType? = nil, values: [String]? = nil) {
            self.dimensionType = dimensionType
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case dimensionType = "DimensionType"
            case values = "Values"
        }
    }

    public struct GetCampaignVersionResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CampaignResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignResponse", required: true, type: .structure)
        ]
        public let campaignResponse: CampaignResponse

        public init(campaignResponse: CampaignResponse) {
            self.campaignResponse = campaignResponse
        }

        private enum CodingKeys: String, CodingKey {
            case campaignResponse = "CampaignResponse"
        }
    }

    public struct APNSChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TeamId", required: false, type: .string), 
            AWSShapeMember(label: "DefaultAuthenticationMethod", required: false, type: .string), 
            AWSShapeMember(label: "TokenKeyId", required: false, type: .string), 
            AWSShapeMember(label: "TokenKey", required: false, type: .string), 
            AWSShapeMember(label: "Certificate", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateKey", required: false, type: .string), 
            AWSShapeMember(label: "BundleId", required: false, type: .string)
        ]
        /// The team id used for APNs Tokens.
        public let teamId: String?
        /// The default authentication method used for APNs.
        public let defaultAuthenticationMethod: String?
        /// The token key used for APNs Tokens.
        public let tokenKeyId: String?
        /// The token key used for APNs Tokens.
        public let tokenKey: String?
        /// The distribution certificate from Apple.
        public let certificate: String?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// The certificate private key.
        public let privateKey: String?
        /// The bundle id used for APNs Tokens.
        public let bundleId: String?

        public init(teamId: String? = nil, defaultAuthenticationMethod: String? = nil, tokenKeyId: String? = nil, tokenKey: String? = nil, certificate: String? = nil, enabled: Bool? = nil, privateKey: String? = nil, bundleId: String? = nil) {
            self.teamId = teamId
            self.defaultAuthenticationMethod = defaultAuthenticationMethod
            self.tokenKeyId = tokenKeyId
            self.tokenKey = tokenKey
            self.certificate = certificate
            self.enabled = enabled
            self.privateKey = privateKey
            self.bundleId = bundleId
        }

        private enum CodingKeys: String, CodingKey {
            case teamId = "TeamId"
            case defaultAuthenticationMethod = "DefaultAuthenticationMethod"
            case tokenKeyId = "TokenKeyId"
            case tokenKey = "TokenKey"
            case certificate = "Certificate"
            case enabled = "Enabled"
            case privateKey = "PrivateKey"
            case bundleId = "BundleId"
        }
    }

    public enum RecencyType: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
        public var description: String { return self.rawValue }
    }

    public struct GetEventStreamRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public enum JobStatus: String, CustomStringConvertible, Codable {
        case created = "CREATED"
        case initializing = "INITIALIZING"
        case processing = "PROCESSING"
        case completing = "COMPLETING"
        case completed = "COMPLETED"
        case failing = "FAILING"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct MessageBody: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestID", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]
        /// The unique message body ID.
        public let requestID: String?
        /// The error message that's returned from the API.
        public let message: String?

        public init(requestID: String? = nil, message: String? = nil) {
            self.requestID = requestID
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case requestID = "RequestID"
            case message = "Message"
        }
    }

    public struct GetGcmChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "GCMChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GCMChannelResponse", required: true, type: .structure)
        ]
        public let gCMChannelResponse: GCMChannelResponse

        public init(gCMChannelResponse: GCMChannelResponse) {
            self.gCMChannelResponse = gCMChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case gCMChannelResponse = "GCMChannelResponse"
        }
    }

    public struct GetSegmentVersionsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SegmentsResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentsResponse", required: true, type: .structure)
        ]
        public let segmentsResponse: SegmentsResponse

        public init(segmentsResponse: SegmentsResponse) {
            self.segmentsResponse = segmentsResponse
        }

        private enum CodingKeys: String, CodingKey {
            case segmentsResponse = "SegmentsResponse"
        }
    }

    public struct MetricDimension: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComparisonOperator", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .double)
        ]
        /// GREATER_THAN | LESS_THAN | GREATER_THAN_OR_EQUAL | LESS_THAN_OR_EQUAL | EQUAL
        public let comparisonOperator: String?
        /// Value to be compared.
        public let value: Double?

        public init(comparisonOperator: String? = nil, value: Double? = nil) {
            self.comparisonOperator = comparisonOperator
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case comparisonOperator = "ComparisonOperator"
            case value = "Value"
        }
    }

    public struct UpdateEndpointResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MessageBody"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MessageBody", required: true, type: .structure)
        ]
        public let messageBody: MessageBody

        public init(messageBody: MessageBody) {
            self.messageBody = messageBody
        }

        private enum CodingKeys: String, CodingKey {
            case messageBody = "MessageBody"
        }
    }

    public struct GetCampaignVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", location: .querystring(locationName: "page-size"), required: false, type: .string), 
            AWSShapeMember(label: "CampaignId", location: .uri(locationName: "campaign-id"), required: true, type: .string), 
            AWSShapeMember(label: "Token", location: .querystring(locationName: "token"), required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let pageSize: String?
        public let campaignId: String
        public let token: String?
        public let applicationId: String

        public init(pageSize: String? = nil, campaignId: String, token: String? = nil, applicationId: String) {
            self.pageSize = pageSize
            self.campaignId = campaignId
            self.token = token
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "page-size"
            case campaignId = "campaign-id"
            case token = "token"
            case applicationId = "application-id"
        }
    }

    public struct GPSCoordinates: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Longitude", required: false, type: .double), 
            AWSShapeMember(label: "Latitude", required: false, type: .double)
        ]
        /// Longitude
        public let longitude: Double?
        /// Latitude
        public let latitude: Double?

        public init(longitude: Double? = nil, latitude: Double? = nil) {
            self.longitude = longitude
            self.latitude = latitude
        }

        private enum CodingKeys: String, CodingKey {
            case longitude = "Longitude"
            case latitude = "Latitude"
        }
    }

    public struct AttributeDimension: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeType", required: false, type: .enum), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// The type of dimension:
        /// INCLUSIVE - Endpoints that match the criteria are included in the segment.
        /// EXCLUSIVE - Endpoints that match the criteria are excluded from the segment.
        public let attributeType: AttributeType?
        /// The criteria values for the segment dimension. Endpoints with matching attribute values are included or excluded from the segment, depending on the setting for Type.
        public let values: [String]?

        public init(attributeType: AttributeType? = nil, values: [String]? = nil) {
            self.attributeType = attributeType
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case attributeType = "AttributeType"
            case values = "Values"
        }
    }

    public struct UpdateEndpointsBatchRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EndpointBatchRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointBatchRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let endpointBatchRequest: EndpointBatchRequest
        public let applicationId: String

        public init(endpointBatchRequest: EndpointBatchRequest, applicationId: String) {
            self.endpointBatchRequest = endpointBatchRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case endpointBatchRequest = "EndpointBatchRequest"
            case applicationId = "application-id"
        }
    }

    public struct APNSChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "DefaultAuthenticationMethod", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "HasCredential", required: false, type: .boolean), 
            AWSShapeMember(label: "IsArchived", required: false, type: .boolean), 
            AWSShapeMember(label: "HasTokenKey", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedBy", required: false, type: .string)
        ]
        /// Channel ID. Not used. Present only for backwards compatibility.
        public let id: String?
        /// The platform type. Will be APNS.
        public let platform: String?
        /// The default authentication method used for APNs.
        public let defaultAuthenticationMethod: String?
        /// Version of channel
        public let version: Int32?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// Last date this was updated
        public let lastModifiedDate: String?
        /// When was this segment created
        public let creationDate: String?
        /// The ID of the application to which the channel applies.
        public let applicationId: String?
        /// Not used. Retained for backwards compatibility.
        public let hasCredential: Bool?
        /// Is this channel archived
        public let isArchived: Bool?
        /// Indicates whether the channel is configured with a key for APNs token authentication. Provide a token key by setting the TokenKey attribute.
        public let hasTokenKey: Bool?
        /// Who last updated this entry
        public let lastModifiedBy: String?

        public init(id: String? = nil, platform: String? = nil, defaultAuthenticationMethod: String? = nil, version: Int32? = nil, enabled: Bool? = nil, lastModifiedDate: String? = nil, creationDate: String? = nil, applicationId: String? = nil, hasCredential: Bool? = nil, isArchived: Bool? = nil, hasTokenKey: Bool? = nil, lastModifiedBy: String? = nil) {
            self.id = id
            self.platform = platform
            self.defaultAuthenticationMethod = defaultAuthenticationMethod
            self.version = version
            self.enabled = enabled
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.applicationId = applicationId
            self.hasCredential = hasCredential
            self.isArchived = isArchived
            self.hasTokenKey = hasTokenKey
            self.lastModifiedBy = lastModifiedBy
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case platform = "Platform"
            case defaultAuthenticationMethod = "DefaultAuthenticationMethod"
            case version = "Version"
            case enabled = "Enabled"
            case lastModifiedDate = "LastModifiedDate"
            case creationDate = "CreationDate"
            case applicationId = "ApplicationId"
            case hasCredential = "HasCredential"
            case isArchived = "IsArchived"
            case hasTokenKey = "HasTokenKey"
            case lastModifiedBy = "LastModifiedBy"
        }
    }

    public struct SegmentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Item", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The list of segments.
        public let item: [SegmentResponse]?
        /// An identifier used to retrieve the next page of results. The token is null if no additional pages exist.
        public let nextToken: String?

        public init(item: [SegmentResponse]? = nil, nextToken: String? = nil) {
            self.item = item
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteEventStreamRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct DeleteUserEndpointsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EndpointsResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointsResponse", required: true, type: .structure)
        ]
        public let endpointsResponse: EndpointsResponse

        public init(endpointsResponse: EndpointsResponse) {
            self.endpointsResponse = endpointsResponse
        }

        private enum CodingKeys: String, CodingKey {
            case endpointsResponse = "EndpointsResponse"
        }
    }

    public struct CreateAppRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CreateApplicationRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateApplicationRequest", required: true, type: .structure)
        ]
        public let createApplicationRequest: CreateApplicationRequest

        public init(createApplicationRequest: CreateApplicationRequest) {
            self.createApplicationRequest = createApplicationRequest
        }

        private enum CodingKeys: String, CodingKey {
            case createApplicationRequest = "CreateApplicationRequest"
        }
    }

    public struct GetEventStreamResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EventStream"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventStream", required: true, type: .structure)
        ]
        public let eventStream: EventStream

        public init(eventStream: EventStream) {
            self.eventStream = eventStream
        }

        private enum CodingKeys: String, CodingKey {
            case eventStream = "EventStream"
        }
    }

    public struct CreateImportJobResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ImportJobResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportJobResponse", required: true, type: .structure)
        ]
        public let importJobResponse: ImportJobResponse

        public init(importJobResponse: ImportJobResponse) {
            self.importJobResponse = importJobResponse
        }

        private enum CodingKeys: String, CodingKey {
            case importJobResponse = "ImportJobResponse"
        }
    }

    public struct UpdateSmsChannelRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SMSChannelRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SMSChannelRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let sMSChannelRequest: SMSChannelRequest
        public let applicationId: String

        public init(sMSChannelRequest: SMSChannelRequest, applicationId: String) {
            self.sMSChannelRequest = sMSChannelRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case sMSChannelRequest = "SMSChannelRequest"
            case applicationId = "application-id"
        }
    }

    public struct GetImportJobsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ImportJobsResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportJobsResponse", required: true, type: .structure)
        ]
        public let importJobsResponse: ImportJobsResponse

        public init(importJobsResponse: ImportJobsResponse) {
            self.importJobsResponse = importJobsResponse
        }

        private enum CodingKeys: String, CodingKey {
            case importJobsResponse = "ImportJobsResponse"
        }
    }

    public struct GetCampaignResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CampaignResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignResponse", required: true, type: .structure)
        ]
        public let campaignResponse: CampaignResponse

        public init(campaignResponse: CampaignResponse) {
            self.campaignResponse = campaignResponse
        }

        private enum CodingKeys: String, CodingKey {
            case campaignResponse = "CampaignResponse"
        }
    }

    public struct ChannelsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Channels", required: false, type: .map)
        ]
        /// A map of channels, with the ChannelType as the key and the Channel as the value.
        public let channels: [String: ChannelResponse]?

        public init(channels: [String: ChannelResponse]? = nil) {
            self.channels = channels
        }

        private enum CodingKeys: String, CodingKey {
            case channels = "Channels"
        }
    }

    public struct UpdateSegmentRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "WriteSegmentRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "SegmentId", location: .uri(locationName: "segment-id"), required: true, type: .string), 
            AWSShapeMember(label: "WriteSegmentRequest", required: true, type: .structure)
        ]
        public let applicationId: String
        public let segmentId: String
        public let writeSegmentRequest: WriteSegmentRequest

        public init(applicationId: String, segmentId: String, writeSegmentRequest: WriteSegmentRequest) {
            self.applicationId = applicationId
            self.segmentId = segmentId
            self.writeSegmentRequest = writeSegmentRequest
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
            case segmentId = "segment-id"
            case writeSegmentRequest = "WriteSegmentRequest"
        }
    }

    public struct DeleteGcmChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct WriteEventStream: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "DestinationStreamArn", required: false, type: .string)
        ]
        /// The IAM role that authorizes Amazon Pinpoint to publish events to the stream in your account.
        public let roleArn: String?
        /// The Amazon Resource Name (ARN) of the Amazon Kinesis stream or Firehose delivery stream to which you want to publish events.
        ///  Firehose ARN: arn:aws:firehose:REGION:ACCOUNT_ID:deliverystream/STREAM_NAME
        ///  Kinesis ARN: arn:aws:kinesis:REGION:ACCOUNT_ID:stream/STREAM_NAME
        public let destinationStreamArn: String?

        public init(roleArn: String? = nil, destinationStreamArn: String? = nil) {
            self.roleArn = roleArn
            self.destinationStreamArn = destinationStreamArn
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
            case destinationStreamArn = "DestinationStreamArn"
        }
    }

    public struct UpdateApnsChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSChannelResponse", required: true, type: .structure)
        ]
        public let aPNSChannelResponse: APNSChannelResponse

        public init(aPNSChannelResponse: APNSChannelResponse) {
            self.aPNSChannelResponse = aPNSChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSChannelResponse = "APNSChannelResponse"
        }
    }

    public struct APNSSandboxChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "DefaultAuthenticationMethod", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "HasCredential", required: false, type: .boolean), 
            AWSShapeMember(label: "IsArchived", required: false, type: .boolean), 
            AWSShapeMember(label: "HasTokenKey", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedBy", required: false, type: .string)
        ]
        /// Channel ID. Not used, only for backwards compatibility.
        public let id: String?
        /// The platform type. Will be APNS_SANDBOX.
        public let platform: String?
        /// The default authentication method used for APNs.
        public let defaultAuthenticationMethod: String?
        /// Version of channel
        public let version: Int32?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// Last date this was updated
        public let lastModifiedDate: String?
        /// When was this segment created
        public let creationDate: String?
        /// The ID of the application to which the channel applies.
        public let applicationId: String?
        /// Not used. Retained for backwards compatibility.
        public let hasCredential: Bool?
        /// Is this channel archived
        public let isArchived: Bool?
        /// Indicates whether the channel is configured with a key for APNs token authentication. Provide a token key by setting the TokenKey attribute.
        public let hasTokenKey: Bool?
        /// Who last updated this entry
        public let lastModifiedBy: String?

        public init(id: String? = nil, platform: String? = nil, defaultAuthenticationMethod: String? = nil, version: Int32? = nil, enabled: Bool? = nil, lastModifiedDate: String? = nil, creationDate: String? = nil, applicationId: String? = nil, hasCredential: Bool? = nil, isArchived: Bool? = nil, hasTokenKey: Bool? = nil, lastModifiedBy: String? = nil) {
            self.id = id
            self.platform = platform
            self.defaultAuthenticationMethod = defaultAuthenticationMethod
            self.version = version
            self.enabled = enabled
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.applicationId = applicationId
            self.hasCredential = hasCredential
            self.isArchived = isArchived
            self.hasTokenKey = hasTokenKey
            self.lastModifiedBy = lastModifiedBy
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case platform = "Platform"
            case defaultAuthenticationMethod = "DefaultAuthenticationMethod"
            case version = "Version"
            case enabled = "Enabled"
            case lastModifiedDate = "LastModifiedDate"
            case creationDate = "CreationDate"
            case applicationId = "ApplicationId"
            case hasCredential = "HasCredential"
            case isArchived = "IsArchived"
            case hasTokenKey = "HasTokenKey"
            case lastModifiedBy = "LastModifiedBy"
        }
    }

    public struct DeleteBaiduChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct GetApnsSandboxChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct UpdateApnsVoipSandboxChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSVoipSandboxChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSVoipSandboxChannelResponse", required: true, type: .structure)
        ]
        public let aPNSVoipSandboxChannelResponse: APNSVoipSandboxChannelResponse

        public init(aPNSVoipSandboxChannelResponse: APNSVoipSandboxChannelResponse) {
            self.aPNSVoipSandboxChannelResponse = aPNSVoipSandboxChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSVoipSandboxChannelResponse = "APNSVoipSandboxChannelResponse"
        }
    }

    public enum `Type`: String, CustomStringConvertible, Codable {
        case all = "ALL"
        case any = "ANY"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public struct UpdateBaiduChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "BaiduChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaiduChannelResponse", required: true, type: .structure)
        ]
        public let baiduChannelResponse: BaiduChannelResponse

        public init(baiduChannelResponse: BaiduChannelResponse) {
            self.baiduChannelResponse = baiduChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case baiduChannelResponse = "BaiduChannelResponse"
        }
    }

    public struct ActivityResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignId", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .string), 
            AWSShapeMember(label: "TimezonesTotalCount", required: false, type: .integer), 
            AWSShapeMember(label: "TotalEndpointCount", required: false, type: .integer), 
            AWSShapeMember(label: "TimezonesCompletedCount", required: false, type: .integer), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "ScheduledStart", required: false, type: .string), 
            AWSShapeMember(label: "Start", required: false, type: .string), 
            AWSShapeMember(label: "End", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "TreatmentId", required: false, type: .string), 
            AWSShapeMember(label: "Result", required: false, type: .string), 
            AWSShapeMember(label: "SuccessfulEndpointCount", required: false, type: .integer)
        ]
        /// The ID of the campaign to which the activity applies.
        public let campaignId: String?
        /// The state of the activity.
        /// Valid values: PENDING, INITIALIZING, RUNNING, PAUSED, CANCELLED, COMPLETED
        public let state: String?
        /// The total number of unique timezones present in the segment.
        public let timezonesTotalCount: Int32?
        /// The total number of endpoints to which the campaign attempts to deliver messages.
        public let totalEndpointCount: Int32?
        /// The total number of timezones completed.
        public let timezonesCompletedCount: Int32?
        /// The unique activity ID.
        public let id: String?
        /// The scheduled start time for the activity in ISO 8601 format.
        public let scheduledStart: String?
        /// The actual start time of the activity in ISO 8601 format.
        public let start: String?
        /// The actual time the activity was marked CANCELLED or COMPLETED. Provided in ISO 8601 format.
        public let end: String?
        /// The ID of the application to which the campaign applies.
        public let applicationId: String?
        /// The ID of a variation of the campaign used for A/B testing.
        public let treatmentId: String?
        /// Indicates whether the activity succeeded.
        /// Valid values: SUCCESS, FAIL
        public let result: String?
        /// The total number of endpoints to which the campaign successfully delivered messages.
        public let successfulEndpointCount: Int32?

        public init(campaignId: String? = nil, state: String? = nil, timezonesTotalCount: Int32? = nil, totalEndpointCount: Int32? = nil, timezonesCompletedCount: Int32? = nil, id: String? = nil, scheduledStart: String? = nil, start: String? = nil, end: String? = nil, applicationId: String? = nil, treatmentId: String? = nil, result: String? = nil, successfulEndpointCount: Int32? = nil) {
            self.campaignId = campaignId
            self.state = state
            self.timezonesTotalCount = timezonesTotalCount
            self.totalEndpointCount = totalEndpointCount
            self.timezonesCompletedCount = timezonesCompletedCount
            self.id = id
            self.scheduledStart = scheduledStart
            self.start = start
            self.end = end
            self.applicationId = applicationId
            self.treatmentId = treatmentId
            self.result = result
            self.successfulEndpointCount = successfulEndpointCount
        }

        private enum CodingKeys: String, CodingKey {
            case campaignId = "CampaignId"
            case state = "State"
            case timezonesTotalCount = "TimezonesTotalCount"
            case totalEndpointCount = "TotalEndpointCount"
            case timezonesCompletedCount = "TimezonesCompletedCount"
            case id = "Id"
            case scheduledStart = "ScheduledStart"
            case start = "Start"
            case end = "End"
            case applicationId = "ApplicationId"
            case treatmentId = "TreatmentId"
            case result = "Result"
            case successfulEndpointCount = "SuccessfulEndpointCount"
        }
    }

    public struct GetSegmentResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SegmentResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentResponse", required: true, type: .structure)
        ]
        public let segmentResponse: SegmentResponse

        public init(segmentResponse: SegmentResponse) {
            self.segmentResponse = segmentResponse
        }

        private enum CodingKeys: String, CodingKey {
            case segmentResponse = "SegmentResponse"
        }
    }

    public struct GetSegmentImportJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", location: .querystring(locationName: "page-size"), required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "Token", location: .querystring(locationName: "token"), required: false, type: .string), 
            AWSShapeMember(label: "SegmentId", location: .uri(locationName: "segment-id"), required: true, type: .string)
        ]
        public let pageSize: String?
        public let applicationId: String
        public let token: String?
        public let segmentId: String

        public init(pageSize: String? = nil, applicationId: String, token: String? = nil, segmentId: String) {
            self.pageSize = pageSize
            self.applicationId = applicationId
            self.token = token
            self.segmentId = segmentId
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "page-size"
            case applicationId = "application-id"
            case token = "token"
            case segmentId = "segment-id"
        }
    }

    public struct DeleteEndpointResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EndpointResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointResponse", required: true, type: .structure)
        ]
        public let endpointResponse: EndpointResponse

        public init(endpointResponse: EndpointResponse) {
            self.endpointResponse = endpointResponse
        }

        private enum CodingKeys: String, CodingKey {
            case endpointResponse = "EndpointResponse"
        }
    }

    public struct CreateCampaignResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CampaignResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignResponse", required: true, type: .structure)
        ]
        public let campaignResponse: CampaignResponse

        public init(campaignResponse: CampaignResponse) {
            self.campaignResponse = campaignResponse
        }

        private enum CodingKeys: String, CodingKey {
            case campaignResponse = "CampaignResponse"
        }
    }

    public struct PutEventStreamRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "WriteEventStream"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "WriteEventStream", required: true, type: .structure)
        ]
        public let applicationId: String
        public let writeEventStream: WriteEventStream

        public init(applicationId: String, writeEventStream: WriteEventStream) {
            self.applicationId = applicationId
            self.writeEventStream = writeEventStream
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
            case writeEventStream = "WriteEventStream"
        }
    }

    public struct DeleteAppResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ApplicationResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationResponse", required: true, type: .structure)
        ]
        public let applicationResponse: ApplicationResponse

        public init(applicationResponse: ApplicationResponse) {
            self.applicationResponse = applicationResponse
        }

        private enum CodingKeys: String, CodingKey {
            case applicationResponse = "ApplicationResponse"
        }
    }

    public struct GetChannelsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ChannelsResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelsResponse", required: true, type: .structure)
        ]
        public let channelsResponse: ChannelsResponse

        public init(channelsResponse: ChannelsResponse) {
            self.channelsResponse = channelsResponse
        }

        private enum CodingKeys: String, CodingKey {
            case channelsResponse = "ChannelsResponse"
        }
    }

    public struct GetCampaignVersionsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CampaignsResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignsResponse", required: true, type: .structure)
        ]
        public let campaignsResponse: CampaignsResponse

        public init(campaignsResponse: CampaignsResponse) {
            self.campaignsResponse = campaignsResponse
        }

        private enum CodingKeys: String, CodingKey {
            case campaignsResponse = "CampaignsResponse"
        }
    }

    public struct GetAdmChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ADMChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ADMChannelResponse", required: true, type: .structure)
        ]
        public let aDMChannelResponse: ADMChannelResponse

        public init(aDMChannelResponse: ADMChannelResponse) {
            self.aDMChannelResponse = aDMChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aDMChannelResponse = "ADMChannelResponse"
        }
    }

    public struct GetAppsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ApplicationsResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationsResponse", required: true, type: .structure)
        ]
        public let applicationsResponse: ApplicationsResponse

        public init(applicationsResponse: ApplicationsResponse) {
            self.applicationsResponse = applicationsResponse
        }

        private enum CodingKeys: String, CodingKey {
            case applicationsResponse = "ApplicationsResponse"
        }
    }

    public struct GetCampaignsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CampaignsResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignsResponse", required: true, type: .structure)
        ]
        public let campaignsResponse: CampaignsResponse

        public init(campaignsResponse: CampaignsResponse) {
            self.campaignsResponse = campaignsResponse
        }

        private enum CodingKeys: String, CodingKey {
            case campaignsResponse = "CampaignsResponse"
        }
    }

    public struct ExportJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Item", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of export jobs for the application.
        public let item: [ExportJobResponse]?
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        public let nextToken: String?

        public init(item: [ExportJobResponse]? = nil, nextToken: String? = nil) {
            self.item = item
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
            case nextToken = "NextToken"
        }
    }

    public struct GetEndpointRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointId", location: .uri(locationName: "endpoint-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let endpointId: String
        public let applicationId: String

        public init(endpointId: String, applicationId: String) {
            self.endpointId = endpointId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case endpointId = "endpoint-id"
            case applicationId = "application-id"
        }
    }

    public struct GetCampaignVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "CampaignId", location: .uri(locationName: "campaign-id"), required: true, type: .string), 
            AWSShapeMember(label: "Version", location: .uri(locationName: "version"), required: true, type: .string)
        ]
        public let applicationId: String
        public let campaignId: String
        public let version: String

        public init(applicationId: String, campaignId: String, version: String) {
            self.applicationId = applicationId
            self.campaignId = campaignId
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
            case campaignId = "campaign-id"
            case version = "version"
        }
    }

    public struct SendUsersMessageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MessageConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Context", required: false, type: .map), 
            AWSShapeMember(label: "Users", required: false, type: .map)
        ]
        /// Message definitions for the default message and any messages that are tailored for specific channels.
        public let messageConfiguration: DirectMessageConfiguration?
        /// A map of custom attribute-value pairs. Amazon Pinpoint adds these attributes to the data.pinpoint object in the body of the push notification payload. Amazon Pinpoint also provides these attributes in the events that it generates for users-messages deliveries.
        public let context: [String: String]?
        /// A map that associates user IDs with EndpointSendConfiguration objects. Within an EndpointSendConfiguration object, you can tailor the message for a user by specifying message overrides or substitutions.
        public let users: [String: EndpointSendConfiguration]?

        public init(messageConfiguration: DirectMessageConfiguration? = nil, context: [String: String]? = nil, users: [String: EndpointSendConfiguration]? = nil) {
            self.messageConfiguration = messageConfiguration
            self.context = context
            self.users = users
        }

        private enum CodingKeys: String, CodingKey {
            case messageConfiguration = "MessageConfiguration"
            case context = "Context"
            case users = "Users"
        }
    }

    public struct UpdateCampaignResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CampaignResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignResponse", required: true, type: .structure)
        ]
        public let campaignResponse: CampaignResponse

        public init(campaignResponse: CampaignResponse) {
            self.campaignResponse = campaignResponse
        }

        private enum CodingKeys: String, CodingKey {
            case campaignResponse = "CampaignResponse"
        }
    }

    public struct SegmentBehaviors: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Recency", required: false, type: .structure)
        ]
        /// The recency of use.
        public let recency: RecencyDimension?

        public init(recency: RecencyDimension? = nil) {
            self.recency = recency
        }

        private enum CodingKeys: String, CodingKey {
            case recency = "Recency"
        }
    }

    public struct UpdateSegmentResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SegmentResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentResponse", required: true, type: .structure)
        ]
        public let segmentResponse: SegmentResponse

        public init(segmentResponse: SegmentResponse) {
            self.segmentResponse = segmentResponse
        }

        private enum CodingKeys: String, CodingKey {
            case segmentResponse = "SegmentResponse"
        }
    }

    public struct CampaignState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignStatus", required: false, type: .enum)
        ]
        /// The status of the campaign, or the status of a treatment that belongs to an A/B test campaign.
        /// Valid values: SCHEDULED, EXECUTING, PENDING_NEXT_RUN, COMPLETED, PAUSED
        public let campaignStatus: CampaignStatus?

        public init(campaignStatus: CampaignStatus? = nil) {
            self.campaignStatus = campaignStatus
        }

        private enum CodingKeys: String, CodingKey {
            case campaignStatus = "CampaignStatus"
        }
    }

    public struct DeleteApnsChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSChannelResponse", required: true, type: .structure)
        ]
        public let aPNSChannelResponse: APNSChannelResponse

        public init(aPNSChannelResponse: APNSChannelResponse) {
            self.aPNSChannelResponse = aPNSChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSChannelResponse = "APNSChannelResponse"
        }
    }

    public struct UpdateAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Blacklist", required: false, type: .list)
        ]
        /// The GLOB wildcard for removing the attributes in the application
        public let blacklist: [String]?

        public init(blacklist: [String]? = nil) {
            self.blacklist = blacklist
        }

        private enum CodingKeys: String, CodingKey {
            case blacklist = "Blacklist"
        }
    }

    public struct DeleteSegmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentId", location: .uri(locationName: "segment-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let segmentId: String
        public let applicationId: String

        public init(segmentId: String, applicationId: String) {
            self.segmentId = segmentId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case segmentId = "segment-id"
            case applicationId = "application-id"
        }
    }

    public struct BaiduMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IconReference", required: false, type: .string), 
            AWSShapeMember(label: "Data", required: false, type: .map), 
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "ImageIconUrl", required: false, type: .string), 
            AWSShapeMember(label: "SilentPush", required: false, type: .boolean), 
            AWSShapeMember(label: "SmallImageIconUrl", required: false, type: .string), 
            AWSShapeMember(label: "Action", required: false, type: .enum), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "RawContent", required: false, type: .string), 
            AWSShapeMember(label: "Sound", required: false, type: .string), 
            AWSShapeMember(label: "TimeToLive", required: false, type: .integer), 
            AWSShapeMember(label: "Body", required: false, type: .string), 
            AWSShapeMember(label: "ImageUrl", required: false, type: .string), 
            AWSShapeMember(label: "Substitutions", required: false, type: .map)
        ]
        /// The icon image name of the asset saved in your application.
        public let iconReference: String?
        /// The data payload used for a silent push. This payload is added to the notifications' data.pinpoint.jsonBody' object
        public let data: [String: String]?
        /// The message title that displays above the message on the user's device.
        public let title: String?
        /// The URL that points to an image used as the large icon to the notification content view.
        public let imageIconUrl: String?
        /// Indicates if the message should display on the users device. Silent pushes can be used for Remote Configuration and Phone Home use cases.
        public let silentPush: Bool?
        /// The URL that points to an image used as the small icon for the notification which will be used to represent the notification in the status bar and content view
        public let smallImageIconUrl: String?
        /// The action that occurs if the user taps a push notification delivered by the campaign: OPEN_APP - Your app launches, or it becomes the foreground app if it has been sent to the background. This is the default action. DEEP_LINK - Uses deep linking features in iOS and Android to open your app and display a designated user interface within the app. URL - The default mobile browser on the user's device launches and opens a web page at the URL you specify. Possible values include: OPEN_APP | DEEP_LINK | URL
        public let action: Action?
        /// The URL to open in the user's mobile browser. Used if the value for Action is URL.
        public let url: String?
        /// The Raw JSON formatted string to be used as the payload. This value overrides the message.
        public let rawContent: String?
        /// Indicates a sound to play when the device receives the notification. Supports default, or the filename of a sound resource bundled in the app. Android sound files must reside in /res/raw/
        public let sound: String?
        /// This parameter specifies how long (in seconds) the message should be kept in Baidu storage if the device is offline. The and the default value and the maximum time to live supported is 7 days (604800 seconds)
        public let timeToLive: Int32?
        /// The message body of the notification, the email body or the text message.
        public let body: String?
        /// The URL that points to an image used in the push notification.
        public let imageUrl: String?
        /// Default message substitutions. Can be overridden by individual address substitutions.
        public let substitutions: [String: [String]]?

        public init(iconReference: String? = nil, data: [String: String]? = nil, title: String? = nil, imageIconUrl: String? = nil, silentPush: Bool? = nil, smallImageIconUrl: String? = nil, action: Action? = nil, url: String? = nil, rawContent: String? = nil, sound: String? = nil, timeToLive: Int32? = nil, body: String? = nil, imageUrl: String? = nil, substitutions: [String: [String]]? = nil) {
            self.iconReference = iconReference
            self.data = data
            self.title = title
            self.imageIconUrl = imageIconUrl
            self.silentPush = silentPush
            self.smallImageIconUrl = smallImageIconUrl
            self.action = action
            self.url = url
            self.rawContent = rawContent
            self.sound = sound
            self.timeToLive = timeToLive
            self.body = body
            self.imageUrl = imageUrl
            self.substitutions = substitutions
        }

        private enum CodingKeys: String, CodingKey {
            case iconReference = "IconReference"
            case data = "Data"
            case title = "Title"
            case imageIconUrl = "ImageIconUrl"
            case silentPush = "SilentPush"
            case smallImageIconUrl = "SmallImageIconUrl"
            case action = "Action"
            case url = "Url"
            case rawContent = "RawContent"
            case sound = "Sound"
            case timeToLive = "TimeToLive"
            case body = "Body"
            case imageUrl = "ImageUrl"
            case substitutions = "Substitutions"
        }
    }

    public struct GetImportJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", location: .querystring(locationName: "page-size"), required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "Token", location: .querystring(locationName: "token"), required: false, type: .string)
        ]
        public let pageSize: String?
        public let applicationId: String
        public let token: String?

        public init(pageSize: String? = nil, applicationId: String, token: String? = nil) {
            self.pageSize = pageSize
            self.applicationId = applicationId
            self.token = token
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "page-size"
            case applicationId = "application-id"
            case token = "token"
        }
    }

    public struct EndpointDemographic: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Locale", required: false, type: .string), 
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "Timezone", required: false, type: .string), 
            AWSShapeMember(label: "PlatformVersion", required: false, type: .string), 
            AWSShapeMember(label: "Make", required: false, type: .string), 
            AWSShapeMember(label: "AppVersion", required: false, type: .string), 
            AWSShapeMember(label: "Model", required: false, type: .string), 
            AWSShapeMember(label: "ModelVersion", required: false, type: .string)
        ]
        /// The endpoint locale in the following format: The ISO 639-1 alpha-2 code, followed by an underscore, followed by an ISO 3166-1 alpha-2 value.
        public let locale: String?
        /// The endpoint platform, such as ios or android.
        public let platform: String?
        /// The timezone of the endpoint. Specified as a tz database value, such as Americas/Los_Angeles.
        public let timezone: String?
        /// The endpoint platform version.
        public let platformVersion: String?
        /// The endpoint make, such as such as Apple or Samsung.
        public let make: String?
        /// The version of the application associated with the endpoint.
        public let appVersion: String?
        /// The endpoint model, such as iPhone.
        public let model: String?
        /// The endpoint model version.
        public let modelVersion: String?

        public init(locale: String? = nil, platform: String? = nil, timezone: String? = nil, platformVersion: String? = nil, make: String? = nil, appVersion: String? = nil, model: String? = nil, modelVersion: String? = nil) {
            self.locale = locale
            self.platform = platform
            self.timezone = timezone
            self.platformVersion = platformVersion
            self.make = make
            self.appVersion = appVersion
            self.model = model
            self.modelVersion = modelVersion
        }

        private enum CodingKeys: String, CodingKey {
            case locale = "Locale"
            case platform = "Platform"
            case timezone = "Timezone"
            case platformVersion = "PlatformVersion"
            case make = "Make"
            case appVersion = "AppVersion"
            case model = "Model"
            case modelVersion = "ModelVersion"
        }
    }

    public struct CreateExportJobResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ExportJobResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportJobResponse", required: true, type: .structure)
        ]
        public let exportJobResponse: ExportJobResponse

        public init(exportJobResponse: ExportJobResponse) {
            self.exportJobResponse = exportJobResponse
        }

        private enum CodingKeys: String, CodingKey {
            case exportJobResponse = "ExportJobResponse"
        }
    }

    public struct GetSegmentExportJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", location: .querystring(locationName: "page-size"), required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "Token", location: .querystring(locationName: "token"), required: false, type: .string), 
            AWSShapeMember(label: "SegmentId", location: .uri(locationName: "segment-id"), required: true, type: .string)
        ]
        public let pageSize: String?
        public let applicationId: String
        public let token: String?
        public let segmentId: String

        public init(pageSize: String? = nil, applicationId: String, token: String? = nil, segmentId: String) {
            self.pageSize = pageSize
            self.applicationId = applicationId
            self.token = token
            self.segmentId = segmentId
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "page-size"
            case applicationId = "application-id"
            case token = "token"
            case segmentId = "segment-id"
        }
    }

    public struct APNSVoipSandboxChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TeamId", required: false, type: .string), 
            AWSShapeMember(label: "DefaultAuthenticationMethod", required: false, type: .string), 
            AWSShapeMember(label: "TokenKeyId", required: false, type: .string), 
            AWSShapeMember(label: "TokenKey", required: false, type: .string), 
            AWSShapeMember(label: "Certificate", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateKey", required: false, type: .string), 
            AWSShapeMember(label: "BundleId", required: false, type: .string)
        ]
        /// The team id used for APNs Tokens.
        public let teamId: String?
        /// The default authentication method used for APNs.
        public let defaultAuthenticationMethod: String?
        /// The token key used for APNs Tokens.
        public let tokenKeyId: String?
        /// The token key used for APNs Tokens.
        public let tokenKey: String?
        /// The distribution certificate from Apple.
        public let certificate: String?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// The certificate private key.
        public let privateKey: String?
        /// The bundle id used for APNs Tokens.
        public let bundleId: String?

        public init(teamId: String? = nil, defaultAuthenticationMethod: String? = nil, tokenKeyId: String? = nil, tokenKey: String? = nil, certificate: String? = nil, enabled: Bool? = nil, privateKey: String? = nil, bundleId: String? = nil) {
            self.teamId = teamId
            self.defaultAuthenticationMethod = defaultAuthenticationMethod
            self.tokenKeyId = tokenKeyId
            self.tokenKey = tokenKey
            self.certificate = certificate
            self.enabled = enabled
            self.privateKey = privateKey
            self.bundleId = bundleId
        }

        private enum CodingKeys: String, CodingKey {
            case teamId = "TeamId"
            case defaultAuthenticationMethod = "DefaultAuthenticationMethod"
            case tokenKeyId = "TokenKeyId"
            case tokenKey = "TokenKey"
            case certificate = "Certificate"
            case enabled = "Enabled"
            case privateKey = "PrivateKey"
            case bundleId = "BundleId"
        }
    }

    public struct CreateAppResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ApplicationResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationResponse", required: true, type: .structure)
        ]
        public let applicationResponse: ApplicationResponse

        public init(applicationResponse: ApplicationResponse) {
            self.applicationResponse = applicationResponse
        }

        private enum CodingKeys: String, CodingKey {
            case applicationResponse = "ApplicationResponse"
        }
    }

    public struct GetAppResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ApplicationResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationResponse", required: true, type: .structure)
        ]
        public let applicationResponse: ApplicationResponse

        public init(applicationResponse: ApplicationResponse) {
            self.applicationResponse = applicationResponse
        }

        private enum CodingKeys: String, CodingKey {
            case applicationResponse = "ApplicationResponse"
        }
    }

    public struct GPSPointDimension: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Coordinates", required: false, type: .structure), 
            AWSShapeMember(label: "RangeInKilometers", required: false, type: .double)
        ]
        /// Coordinate to measure distance from.
        public let coordinates: GPSCoordinates?
        /// Range in kilometers from the coordinate.
        public let rangeInKilometers: Double?

        public init(coordinates: GPSCoordinates? = nil, rangeInKilometers: Double? = nil) {
            self.coordinates = coordinates
            self.rangeInKilometers = rangeInKilometers
        }

        private enum CodingKeys: String, CodingKey {
            case coordinates = "Coordinates"
            case rangeInKilometers = "RangeInKilometers"
        }
    }

    public struct GetExportJobResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ExportJobResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportJobResponse", required: true, type: .structure)
        ]
        public let exportJobResponse: ExportJobResponse

        public init(exportJobResponse: ExportJobResponse) {
            self.exportJobResponse = exportJobResponse
        }

        private enum CodingKeys: String, CodingKey {
            case exportJobResponse = "ExportJobResponse"
        }
    }

    public struct AttributesResource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeType", required: false, type: .string), 
            AWSShapeMember(label: "Attributes", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string)
        ]
        /// The attribute type for the application.
        public let attributeType: String?
        /// The attributes for the application.
        public let attributes: [String]?
        /// The unique ID for the application.
        public let applicationId: String?

        public init(attributeType: String? = nil, attributes: [String]? = nil, applicationId: String? = nil) {
            self.attributeType = attributeType
            self.attributes = attributes
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case attributeType = "AttributeType"
            case attributes = "Attributes"
            case applicationId = "ApplicationId"
        }
    }

    public struct SendMessagesResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MessageResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MessageResponse", required: true, type: .structure)
        ]
        public let messageResponse: MessageResponse

        public init(messageResponse: MessageResponse) {
            self.messageResponse = messageResponse
        }

        private enum CodingKeys: String, CodingKey {
            case messageResponse = "MessageResponse"
        }
    }

    public struct UpdateEndpointsBatchResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MessageBody"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MessageBody", required: true, type: .structure)
        ]
        public let messageBody: MessageBody

        public init(messageBody: MessageBody) {
            self.messageBody = messageBody
        }

        private enum CodingKeys: String, CodingKey {
            case messageBody = "MessageBody"
        }
    }

    public struct DeleteApnsVoipChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSVoipChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSVoipChannelResponse", required: true, type: .structure)
        ]
        public let aPNSVoipChannelResponse: APNSVoipChannelResponse

        public init(aPNSVoipChannelResponse: APNSVoipChannelResponse) {
            self.aPNSVoipChannelResponse = aPNSVoipChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSVoipChannelResponse = "APNSVoipChannelResponse"
        }
    }

    public struct ADMChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientSecret", required: false, type: .string), 
            AWSShapeMember(label: "ClientId", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// Client secret as gotten from Amazon
        public let clientSecret: String?
        /// Client ID as gotten from Amazon
        public let clientId: String?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?

        public init(clientSecret: String? = nil, clientId: String? = nil, enabled: Bool? = nil) {
            self.clientSecret = clientSecret
            self.clientId = clientId
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case clientSecret = "ClientSecret"
            case clientId = "ClientId"
            case enabled = "Enabled"
        }
    }

    public struct GetGcmChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct GCMChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiKey", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// Platform credential API key from Google.
        public let apiKey: String?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?

        public init(apiKey: String? = nil, enabled: Bool? = nil) {
            self.apiKey = apiKey
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case apiKey = "ApiKey"
            case enabled = "Enabled"
        }
    }

    public struct DeleteApnsChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct DeleteEndpointRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointId", location: .uri(locationName: "endpoint-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let endpointId: String
        public let applicationId: String

        public init(endpointId: String, applicationId: String) {
            self.endpointId = endpointId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case endpointId = "endpoint-id"
            case applicationId = "application-id"
        }
    }

    public struct BaiduChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecretKey", required: false, type: .string), 
            AWSShapeMember(label: "ApiKey", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// Platform credential Secret key from Baidu.
        public let secretKey: String?
        /// Platform credential API key from Baidu.
        public let apiKey: String?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?

        public init(secretKey: String? = nil, apiKey: String? = nil, enabled: Bool? = nil) {
            self.secretKey = secretKey
            self.apiKey = apiKey
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case secretKey = "SecretKey"
            case apiKey = "ApiKey"
            case enabled = "Enabled"
        }
    }

    public struct CreateSegmentRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "WriteSegmentRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "WriteSegmentRequest", required: true, type: .structure)
        ]
        public let applicationId: String
        public let writeSegmentRequest: WriteSegmentRequest

        public init(applicationId: String, writeSegmentRequest: WriteSegmentRequest) {
            self.applicationId = applicationId
            self.writeSegmentRequest = writeSegmentRequest
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
            case writeSegmentRequest = "WriteSegmentRequest"
        }
    }

    public struct GetSegmentVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", location: .querystring(locationName: "page-size"), required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "Token", location: .querystring(locationName: "token"), required: false, type: .string), 
            AWSShapeMember(label: "SegmentId", location: .uri(locationName: "segment-id"), required: true, type: .string)
        ]
        public let pageSize: String?
        public let applicationId: String
        public let token: String?
        public let segmentId: String

        public init(pageSize: String? = nil, applicationId: String, token: String? = nil, segmentId: String) {
            self.pageSize = pageSize
            self.applicationId = applicationId
            self.token = token
            self.segmentId = segmentId
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "page-size"
            case applicationId = "application-id"
            case token = "token"
            case segmentId = "segment-id"
        }
    }

    public struct AddressConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TitleOverride", required: false, type: .string), 
            AWSShapeMember(label: "Context", required: false, type: .map), 
            AWSShapeMember(label: "BodyOverride", required: false, type: .string), 
            AWSShapeMember(label: "RawContent", required: false, type: .string), 
            AWSShapeMember(label: "ChannelType", required: false, type: .enum), 
            AWSShapeMember(label: "Substitutions", required: false, type: .map)
        ]
        /// Title override. If specified will override default title if applicable.
        public let titleOverride: String?
        /// A map of custom attributes to attributes to be attached to the message for this address. This payload is added to the push notification's 'data.pinpoint' object or added to the email/sms delivery receipt event attributes.
        public let context: [String: String]?
        /// Body override. If specified will override default body.
        public let bodyOverride: String?
        /// The Raw JSON formatted string to be used as the payload. This value overrides the message.
        public let rawContent: String?
        /// The channel type.
        /// Valid values: GCM | APNS | APNS_SANDBOX | APNS_VOIP | APNS_VOIP_SANDBOX | ADM | SMS | EMAIL | BAIDU
        public let channelType: ChannelType?
        /// A map of substitution values for the message to be merged with the DefaultMessage's substitutions. Substitutions on this map take precedence over the all other substitutions.
        public let substitutions: [String: [String]]?

        public init(titleOverride: String? = nil, context: [String: String]? = nil, bodyOverride: String? = nil, rawContent: String? = nil, channelType: ChannelType? = nil, substitutions: [String: [String]]? = nil) {
            self.titleOverride = titleOverride
            self.context = context
            self.bodyOverride = bodyOverride
            self.rawContent = rawContent
            self.channelType = channelType
            self.substitutions = substitutions
        }

        private enum CodingKeys: String, CodingKey {
            case titleOverride = "TitleOverride"
            case context = "Context"
            case bodyOverride = "BodyOverride"
            case rawContent = "RawContent"
            case channelType = "ChannelType"
            case substitutions = "Substitutions"
        }
    }

    public struct GetChannelsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct Message: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SilentPush", required: false, type: .boolean), 
            AWSShapeMember(label: "ImageSmallIconUrl", required: false, type: .string), 
            AWSShapeMember(label: "Action", required: false, type: .enum), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "RawContent", required: false, type: .string), 
            AWSShapeMember(label: "MediaUrl", required: false, type: .string), 
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "ImageIconUrl", required: false, type: .string), 
            AWSShapeMember(label: "TimeToLive", required: false, type: .integer), 
            AWSShapeMember(label: "Body", required: false, type: .string), 
            AWSShapeMember(label: "ImageUrl", required: false, type: .string), 
            AWSShapeMember(label: "JsonBody", required: false, type: .string)
        ]
        /// Indicates if the message should display on the users device.
        /// Silent pushes can be used for Remote Configuration and Phone Home use cases. 
        public let silentPush: Bool?
        /// The URL that points to the small icon image for the push notification icon, for example, the app icon.
        public let imageSmallIconUrl: String?
        /// The action that occurs if the user taps a push notification delivered by the campaign:
        /// OPEN_APP - Your app launches, or it becomes the foreground app if it has been sent to the background. This is the default action.
        /// DEEP_LINK - Uses deep linking features in iOS and Android to open your app and display a designated user interface within the app.
        /// URL - The default mobile browser on the user's device launches and opens a web page at the URL you specify.
        public let action: Action?
        /// The URL to open in the user's mobile browser. Used if the value for Action is URL.
        public let url: String?
        /// The Raw JSON formatted string to be used as the payload. This value overrides the message.
        public let rawContent: String?
        /// The URL that points to the media resource, for example a .mp4 or .gif file.
        public let mediaUrl: String?
        /// The message title that displays above the message on the user's device.
        public let title: String?
        /// The URL that points to the icon image for the push notification icon, for example, the app icon.
        public let imageIconUrl: String?
        /// This parameter specifies how long (in seconds) the message should be kept if the service is unable to deliver the notification the first time. If the value is 0, it treats the notification as if it expires immediately and does not store the notification or attempt to redeliver it. This value is converted to the expiration field when sent to the service. It only applies to APNs and GCM
        public let timeToLive: Int32?
        /// The message body. Can include up to 140 characters.
        public let body: String?
        /// The URL that points to an image used in the push notification.
        public let imageUrl: String?
        /// The JSON payload used for a silent push.
        public let jsonBody: String?

        public init(silentPush: Bool? = nil, imageSmallIconUrl: String? = nil, action: Action? = nil, url: String? = nil, rawContent: String? = nil, mediaUrl: String? = nil, title: String? = nil, imageIconUrl: String? = nil, timeToLive: Int32? = nil, body: String? = nil, imageUrl: String? = nil, jsonBody: String? = nil) {
            self.silentPush = silentPush
            self.imageSmallIconUrl = imageSmallIconUrl
            self.action = action
            self.url = url
            self.rawContent = rawContent
            self.mediaUrl = mediaUrl
            self.title = title
            self.imageIconUrl = imageIconUrl
            self.timeToLive = timeToLive
            self.body = body
            self.imageUrl = imageUrl
            self.jsonBody = jsonBody
        }

        private enum CodingKeys: String, CodingKey {
            case silentPush = "SilentPush"
            case imageSmallIconUrl = "ImageSmallIconUrl"
            case action = "Action"
            case url = "Url"
            case rawContent = "RawContent"
            case mediaUrl = "MediaUrl"
            case title = "Title"
            case imageIconUrl = "ImageIconUrl"
            case timeToLive = "TimeToLive"
            case body = "Body"
            case imageUrl = "ImageUrl"
            case jsonBody = "JsonBody"
        }
    }

    public struct GetApnsVoipSandboxChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSVoipSandboxChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSVoipSandboxChannelResponse", required: true, type: .structure)
        ]
        public let aPNSVoipSandboxChannelResponse: APNSVoipSandboxChannelResponse

        public init(aPNSVoipSandboxChannelResponse: APNSVoipSandboxChannelResponse) {
            self.aPNSVoipSandboxChannelResponse = aPNSVoipSandboxChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSVoipSandboxChannelResponse = "APNSVoipSandboxChannelResponse"
        }
    }

    public struct SMSChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "SenderId", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "IsArchived", required: false, type: .boolean), 
            AWSShapeMember(label: "ShortCode", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "TransactionalMessagesPerSecond", required: false, type: .integer), 
            AWSShapeMember(label: "PromotionalMessagesPerSecond", required: false, type: .integer), 
            AWSShapeMember(label: "HasCredential", required: false, type: .boolean), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedBy", required: false, type: .string)
        ]
        /// Platform type. Will be "SMS"
        public let platform: String?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// Sender identifier of your messages.
        public let senderId: String?
        /// The date that the settings were last updated in ISO 8601 format.
        public let creationDate: String?
        /// Is this channel archived
        public let isArchived: Bool?
        /// The short code registered with the phone provider.
        public let shortCode: String?
        /// Channel ID. Not used, only for backwards compatibility.
        public let id: String?
        /// Transactional messages per second that can be sent
        public let transactionalMessagesPerSecond: Int32?
        /// Promotional messages per second that can be sent
        public let promotionalMessagesPerSecond: Int32?
        /// Not used. Retained for backwards compatibility.
        public let hasCredential: Bool?
        /// Version of channel
        public let version: Int32?
        /// Last date this was updated
        public let lastModifiedDate: String?
        /// The unique ID of the application to which the SMS channel belongs.
        public let applicationId: String?
        /// Who last updated this entry
        public let lastModifiedBy: String?

        public init(platform: String? = nil, enabled: Bool? = nil, senderId: String? = nil, creationDate: String? = nil, isArchived: Bool? = nil, shortCode: String? = nil, id: String? = nil, transactionalMessagesPerSecond: Int32? = nil, promotionalMessagesPerSecond: Int32? = nil, hasCredential: Bool? = nil, version: Int32? = nil, lastModifiedDate: String? = nil, applicationId: String? = nil, lastModifiedBy: String? = nil) {
            self.platform = platform
            self.enabled = enabled
            self.senderId = senderId
            self.creationDate = creationDate
            self.isArchived = isArchived
            self.shortCode = shortCode
            self.id = id
            self.transactionalMessagesPerSecond = transactionalMessagesPerSecond
            self.promotionalMessagesPerSecond = promotionalMessagesPerSecond
            self.hasCredential = hasCredential
            self.version = version
            self.lastModifiedDate = lastModifiedDate
            self.applicationId = applicationId
            self.lastModifiedBy = lastModifiedBy
        }

        private enum CodingKeys: String, CodingKey {
            case platform = "Platform"
            case enabled = "Enabled"
            case senderId = "SenderId"
            case creationDate = "CreationDate"
            case isArchived = "IsArchived"
            case shortCode = "ShortCode"
            case id = "Id"
            case transactionalMessagesPerSecond = "TransactionalMessagesPerSecond"
            case promotionalMessagesPerSecond = "PromotionalMessagesPerSecond"
            case hasCredential = "HasCredential"
            case version = "Version"
            case lastModifiedDate = "LastModifiedDate"
            case applicationId = "ApplicationId"
            case lastModifiedBy = "LastModifiedBy"
        }
    }

    public struct GetApplicationSettingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct GetSegmentVersionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "SegmentId", location: .uri(locationName: "segment-id"), required: true, type: .string), 
            AWSShapeMember(label: "Version", location: .uri(locationName: "version"), required: true, type: .string)
        ]
        public let applicationId: String
        public let segmentId: String
        public let version: String

        public init(applicationId: String, segmentId: String, version: String) {
            self.applicationId = applicationId
            self.segmentId = segmentId
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
            case segmentId = "segment-id"
            case version = "version"
        }
    }

    public struct SegmentLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GPSPoint", required: false, type: .structure), 
            AWSShapeMember(label: "Country", required: false, type: .structure)
        ]
        /// The GPS Point dimension.
        public let gPSPoint: GPSPointDimension?
        /// The country filter according to ISO 3166-1 Alpha-2 codes.
        public let country: SetDimension?

        public init(gPSPoint: GPSPointDimension? = nil, country: SetDimension? = nil) {
            self.gPSPoint = gPSPoint
            self.country = country
        }

        private enum CodingKeys: String, CodingKey {
            case gPSPoint = "GPSPoint"
            case country = "Country"
        }
    }

    public struct UpdateApplicationSettingsRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "WriteApplicationSettingsRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WriteApplicationSettingsRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let writeApplicationSettingsRequest: WriteApplicationSettingsRequest
        public let applicationId: String

        public init(writeApplicationSettingsRequest: WriteApplicationSettingsRequest, applicationId: String) {
            self.writeApplicationSettingsRequest = writeApplicationSettingsRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case writeApplicationSettingsRequest = "WriteApplicationSettingsRequest"
            case applicationId = "application-id"
        }
    }

    public struct TreatmentResource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TreatmentName", required: false, type: .string), 
            AWSShapeMember(label: "TreatmentDescription", required: false, type: .string), 
            AWSShapeMember(label: "SizePercent", required: false, type: .integer), 
            AWSShapeMember(label: "State", required: false, type: .structure), 
            AWSShapeMember(label: "Schedule", required: false, type: .structure), 
            AWSShapeMember(label: "MessageConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The custom name of a variation of the campaign used for A/B testing.
        public let treatmentName: String?
        /// A custom description for the treatment.
        public let treatmentDescription: String?
        /// The allocated percentage of users for this treatment.
        public let sizePercent: Int32?
        /// The treatment status.
        public let state: CampaignState?
        /// The campaign schedule.
        public let schedule: Schedule?
        /// The message configuration settings.
        public let messageConfiguration: MessageConfiguration?
        /// The unique treatment ID.
        public let id: String?

        public init(treatmentName: String? = nil, treatmentDescription: String? = nil, sizePercent: Int32? = nil, state: CampaignState? = nil, schedule: Schedule? = nil, messageConfiguration: MessageConfiguration? = nil, id: String? = nil) {
            self.treatmentName = treatmentName
            self.treatmentDescription = treatmentDescription
            self.sizePercent = sizePercent
            self.state = state
            self.schedule = schedule
            self.messageConfiguration = messageConfiguration
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case treatmentName = "TreatmentName"
            case treatmentDescription = "TreatmentDescription"
            case sizePercent = "SizePercent"
            case state = "State"
            case schedule = "Schedule"
            case messageConfiguration = "MessageConfiguration"
            case id = "Id"
        }
    }

    public struct APNSVoipChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "DefaultAuthenticationMethod", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "HasCredential", required: false, type: .boolean), 
            AWSShapeMember(label: "IsArchived", required: false, type: .boolean), 
            AWSShapeMember(label: "HasTokenKey", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedBy", required: false, type: .string)
        ]
        /// Channel ID. Not used, only for backwards compatibility.
        public let id: String?
        /// The platform type. Will be APNS.
        public let platform: String?
        /// The default authentication method used for APNs.
        public let defaultAuthenticationMethod: String?
        /// Version of channel
        public let version: Int32?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// Last date this was updated
        public let lastModifiedDate: String?
        /// When was this segment created
        public let creationDate: String?
        /// Application id
        public let applicationId: String?
        /// Not used. Retained for backwards compatibility.
        public let hasCredential: Bool?
        /// Is this channel archived
        public let isArchived: Bool?
        /// If the channel is registered with a token key for authentication.
        public let hasTokenKey: Bool?
        /// Who made the last change
        public let lastModifiedBy: String?

        public init(id: String? = nil, platform: String? = nil, defaultAuthenticationMethod: String? = nil, version: Int32? = nil, enabled: Bool? = nil, lastModifiedDate: String? = nil, creationDate: String? = nil, applicationId: String? = nil, hasCredential: Bool? = nil, isArchived: Bool? = nil, hasTokenKey: Bool? = nil, lastModifiedBy: String? = nil) {
            self.id = id
            self.platform = platform
            self.defaultAuthenticationMethod = defaultAuthenticationMethod
            self.version = version
            self.enabled = enabled
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.applicationId = applicationId
            self.hasCredential = hasCredential
            self.isArchived = isArchived
            self.hasTokenKey = hasTokenKey
            self.lastModifiedBy = lastModifiedBy
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case platform = "Platform"
            case defaultAuthenticationMethod = "DefaultAuthenticationMethod"
            case version = "Version"
            case enabled = "Enabled"
            case lastModifiedDate = "LastModifiedDate"
            case creationDate = "CreationDate"
            case applicationId = "ApplicationId"
            case hasCredential = "HasCredential"
            case isArchived = "IsArchived"
            case hasTokenKey = "HasTokenKey"
            case lastModifiedBy = "LastModifiedBy"
        }
    }

    public struct EventStream: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExternalId", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "DestinationStreamArn", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedBy", required: false, type: .string)
        ]
        /// DEPRECATED. Your AWS account ID, which you assigned to the ExternalID key in an IAM trust policy. Used by Amazon Pinpoint to assume an IAM role. This requirement is removed, and external IDs are not recommended for IAM roles assumed by Amazon Pinpoint.
        public let externalId: String?
        /// The date the event stream was last updated in ISO 8601 format.
        public let lastModifiedDate: String?
        /// The Amazon Resource Name (ARN) of the Amazon Kinesis stream or Firehose delivery stream to which you want to publish events.
        ///  Firehose ARN: arn:aws:firehose:REGION:ACCOUNT_ID:deliverystream/STREAM_NAME
        ///  Kinesis ARN: arn:aws:kinesis:REGION:ACCOUNT_ID:stream/STREAM_NAME
        public let destinationStreamArn: String?
        /// The ID of the application from which events should be published.
        public let applicationId: String?
        /// The IAM role that authorizes Amazon Pinpoint to publish events to the stream in your account.
        public let roleArn: String?
        /// The IAM user who last modified the event stream.
        public let lastUpdatedBy: String?

        public init(externalId: String? = nil, lastModifiedDate: String? = nil, destinationStreamArn: String? = nil, applicationId: String? = nil, roleArn: String? = nil, lastUpdatedBy: String? = nil) {
            self.externalId = externalId
            self.lastModifiedDate = lastModifiedDate
            self.destinationStreamArn = destinationStreamArn
            self.applicationId = applicationId
            self.roleArn = roleArn
            self.lastUpdatedBy = lastUpdatedBy
        }

        private enum CodingKeys: String, CodingKey {
            case externalId = "ExternalId"
            case lastModifiedDate = "LastModifiedDate"
            case destinationStreamArn = "DestinationStreamArn"
            case applicationId = "ApplicationId"
            case roleArn = "RoleArn"
            case lastUpdatedBy = "LastUpdatedBy"
        }
    }

    public struct DeleteApnsSandboxChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct EndpointResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: false, type: .structure), 
            AWSShapeMember(label: "Metrics", required: false, type: .map), 
            AWSShapeMember(label: "OptOut", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "CohortId", required: false, type: .string), 
            AWSShapeMember(label: "EffectiveDate", required: false, type: .string), 
            AWSShapeMember(label: "Location", required: false, type: .structure), 
            AWSShapeMember(label: "Address", required: false, type: .string), 
            AWSShapeMember(label: "Demographic", required: false, type: .structure), 
            AWSShapeMember(label: "Attributes", required: false, type: .map), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "RequestId", required: false, type: .string), 
            AWSShapeMember(label: "EndpointStatus", required: false, type: .string), 
            AWSShapeMember(label: "ChannelType", required: false, type: .enum)
        ]
        /// Custom user-specific attributes that your app reports to Amazon Pinpoint.
        public let user: EndpointUser?
        /// Custom metrics that your app reports to Amazon Pinpoint.
        public let metrics: [String: Double]?
        /// Indicates whether a user has opted out of receiving messages with one of the following values:
        /// ALL - User has opted out of all messages.
        /// NONE - Users has not opted out and receives all messages.
        public let optOut: String?
        /// The last time the endpoint was created. Provided in ISO 8601 format.
        public let creationDate: String?
        /// The unique ID that you assigned to the endpoint. The ID should be a globally unique identifier (GUID) to ensure that it is unique compared to all other endpoints for the application.
        public let id: String?
        /// A number from 0 - 99 that represents the cohort the endpoint is assigned to. Endpoints are grouped into cohorts randomly, and each cohort contains approximately 1 percent of the endpoints for an app. Amazon Pinpoint assigns cohorts to the holdout or treatment allocations for a campaign.
        public let cohortId: String?
        /// The last time the endpoint was updated. Provided in ISO 8601 format.
        public let effectiveDate: String?
        /// The endpoint location attributes.
        public let location: EndpointLocation?
        /// The address or token of the endpoint as provided by your push provider (e.g. DeviceToken or RegistrationId).
        public let address: String?
        /// The endpoint demographic attributes.
        public let demographic: EndpointDemographic?
        /// Custom attributes that describe the endpoint by associating a name with an array of values. For example, an attribute named "interests" might have the values ["science", "politics", "travel"]. You can use these attributes as selection criteria when you create a segment of users to engage with a messaging campaign.
        /// The following characters are not recommended in attribute names: # : ? \ /. The Amazon Pinpoint console does not display attributes that include these characters in the name. This limitation does not apply to attribute values.
        public let attributes: [String: [String]]?
        /// The ID of the application associated with the endpoint.
        public let applicationId: String?
        /// The unique ID for the most recent request to update the endpoint.
        public let requestId: String?
        /// Unused.
        public let endpointStatus: String?
        /// The channel type.
        /// Valid values: GCM | APNS | APNS_SANDBOX | APNS_VOIP | APNS_VOIP_SANDBOX | ADM | SMS | EMAIL | BAIDU
        public let channelType: ChannelType?

        public init(user: EndpointUser? = nil, metrics: [String: Double]? = nil, optOut: String? = nil, creationDate: String? = nil, id: String? = nil, cohortId: String? = nil, effectiveDate: String? = nil, location: EndpointLocation? = nil, address: String? = nil, demographic: EndpointDemographic? = nil, attributes: [String: [String]]? = nil, applicationId: String? = nil, requestId: String? = nil, endpointStatus: String? = nil, channelType: ChannelType? = nil) {
            self.user = user
            self.metrics = metrics
            self.optOut = optOut
            self.creationDate = creationDate
            self.id = id
            self.cohortId = cohortId
            self.effectiveDate = effectiveDate
            self.location = location
            self.address = address
            self.demographic = demographic
            self.attributes = attributes
            self.applicationId = applicationId
            self.requestId = requestId
            self.endpointStatus = endpointStatus
            self.channelType = channelType
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
            case metrics = "Metrics"
            case optOut = "OptOut"
            case creationDate = "CreationDate"
            case id = "Id"
            case cohortId = "CohortId"
            case effectiveDate = "EffectiveDate"
            case location = "Location"
            case address = "Address"
            case demographic = "Demographic"
            case attributes = "Attributes"
            case applicationId = "ApplicationId"
            case requestId = "RequestId"
            case endpointStatus = "EndpointStatus"
            case channelType = "ChannelType"
        }
    }

    public struct GetImportJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", location: .uri(locationName: "job-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let jobId: String
        public let applicationId: String

        public init(jobId: String, applicationId: String) {
            self.jobId = jobId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "job-id"
            case applicationId = "application-id"
        }
    }

    public struct CampaignResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TreatmentName", required: false, type: .string), 
            AWSShapeMember(label: "SegmentVersion", required: false, type: .integer), 
            AWSShapeMember(label: "Limits", required: false, type: .structure), 
            AWSShapeMember(label: "State", required: false, type: .structure), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "Schedule", required: false, type: .structure), 
            AWSShapeMember(label: "MessageConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SegmentId", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Hook", required: false, type: .structure), 
            AWSShapeMember(label: "TreatmentDescription", required: false, type: .string), 
            AWSShapeMember(label: "AdditionalTreatments", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "HoldoutPercent", required: false, type: .integer), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "IsPaused", required: false, type: .boolean), 
            AWSShapeMember(label: "DefaultState", required: false, type: .structure)
        ]
        /// The custom name of a variation of the campaign used for A/B testing.
        public let treatmentName: String?
        /// The version of the segment to which the campaign sends messages.
        public let segmentVersion: Int32?
        /// The campaign limits settings.
        public let limits: CampaignLimits?
        /// The campaign status.
        /// An A/B test campaign will have a status of COMPLETED only when all treatments have a status of COMPLETED.
        public let state: CampaignState?
        /// The date the campaign was created in ISO 8601 format.
        public let creationDate: String?
        /// The campaign schedule.
        public let schedule: Schedule?
        /// The message configuration settings.
        public let messageConfiguration: MessageConfiguration?
        /// The ID of the segment to which the campaign sends messages.
        public let segmentId: String?
        /// A description of the campaign.
        public let description: String?
        /// The unique campaign ID.
        public let id: String?
        /// Campaign hook information.
        public let hook: CampaignHook?
        /// A custom description for the treatment.
        public let treatmentDescription: String?
        /// Treatments that are defined in addition to the default treatment.
        public let additionalTreatments: [TreatmentResource]?
        /// The custom name of the campaign.
        public let name: String?
        /// The allocated percentage of end users who will not receive messages from this campaign.
        public let holdoutPercent: Int32?
        /// The campaign version number.
        public let version: Int32?
        /// The date the campaign was last updated in ISO 8601 format.	
        public let lastModifiedDate: String?
        /// The ID of the application to which the campaign applies.
        public let applicationId: String?
        /// Indicates whether the campaign is paused. A paused campaign does not send messages unless you resume it by setting IsPaused to false.
        public let isPaused: Bool?
        /// The status of the campaign's default treatment. Only present for A/B test campaigns.
        public let defaultState: CampaignState?

        public init(treatmentName: String? = nil, segmentVersion: Int32? = nil, limits: CampaignLimits? = nil, state: CampaignState? = nil, creationDate: String? = nil, schedule: Schedule? = nil, messageConfiguration: MessageConfiguration? = nil, segmentId: String? = nil, description: String? = nil, id: String? = nil, hook: CampaignHook? = nil, treatmentDescription: String? = nil, additionalTreatments: [TreatmentResource]? = nil, name: String? = nil, holdoutPercent: Int32? = nil, version: Int32? = nil, lastModifiedDate: String? = nil, applicationId: String? = nil, isPaused: Bool? = nil, defaultState: CampaignState? = nil) {
            self.treatmentName = treatmentName
            self.segmentVersion = segmentVersion
            self.limits = limits
            self.state = state
            self.creationDate = creationDate
            self.schedule = schedule
            self.messageConfiguration = messageConfiguration
            self.segmentId = segmentId
            self.description = description
            self.id = id
            self.hook = hook
            self.treatmentDescription = treatmentDescription
            self.additionalTreatments = additionalTreatments
            self.name = name
            self.holdoutPercent = holdoutPercent
            self.version = version
            self.lastModifiedDate = lastModifiedDate
            self.applicationId = applicationId
            self.isPaused = isPaused
            self.defaultState = defaultState
        }

        private enum CodingKeys: String, CodingKey {
            case treatmentName = "TreatmentName"
            case segmentVersion = "SegmentVersion"
            case limits = "Limits"
            case state = "State"
            case creationDate = "CreationDate"
            case schedule = "Schedule"
            case messageConfiguration = "MessageConfiguration"
            case segmentId = "SegmentId"
            case description = "Description"
            case id = "Id"
            case hook = "Hook"
            case treatmentDescription = "TreatmentDescription"
            case additionalTreatments = "AdditionalTreatments"
            case name = "Name"
            case holdoutPercent = "HoldoutPercent"
            case version = "Version"
            case lastModifiedDate = "LastModifiedDate"
            case applicationId = "ApplicationId"
            case isPaused = "IsPaused"
            case defaultState = "DefaultState"
        }
    }

    public struct SendUsersMessagesResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SendUsersMessageResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SendUsersMessageResponse", required: true, type: .structure)
        ]
        public let sendUsersMessageResponse: SendUsersMessageResponse

        public init(sendUsersMessageResponse: SendUsersMessageResponse) {
            self.sendUsersMessageResponse = sendUsersMessageResponse
        }

        private enum CodingKeys: String, CodingKey {
            case sendUsersMessageResponse = "SendUsersMessageResponse"
        }
    }

    public struct RemoveAttributesRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "UpdateAttributesRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeType", location: .uri(locationName: "attribute-type"), required: true, type: .string), 
            AWSShapeMember(label: "UpdateAttributesRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let attributeType: String
        public let updateAttributesRequest: UpdateAttributesRequest
        public let applicationId: String

        public init(attributeType: String, updateAttributesRequest: UpdateAttributesRequest, applicationId: String) {
            self.attributeType = attributeType
            self.updateAttributesRequest = updateAttributesRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case attributeType = "attribute-type"
            case updateAttributesRequest = "UpdateAttributesRequest"
            case applicationId = "application-id"
        }
    }

    public enum SourceType: String, CustomStringConvertible, Codable {
        case all = "ALL"
        case any = "ANY"
        public var description: String { return self.rawValue }
    }

    public struct APNSMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ThreadId", required: false, type: .string), 
            AWSShapeMember(label: "Data", required: false, type: .map), 
            AWSShapeMember(label: "Priority", required: false, type: .string), 
            AWSShapeMember(label: "MediaUrl", required: false, type: .string), 
            AWSShapeMember(label: "CollapseId", required: false, type: .string), 
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "SilentPush", required: false, type: .boolean), 
            AWSShapeMember(label: "Badge", required: false, type: .integer), 
            AWSShapeMember(label: "Action", required: false, type: .enum), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "PreferredAuthenticationMethod", required: false, type: .string), 
            AWSShapeMember(label: "RawContent", required: false, type: .string), 
            AWSShapeMember(label: "Category", required: false, type: .string), 
            AWSShapeMember(label: "Sound", required: false, type: .string), 
            AWSShapeMember(label: "TimeToLive", required: false, type: .integer), 
            AWSShapeMember(label: "Body", required: false, type: .string), 
            AWSShapeMember(label: "Substitutions", required: false, type: .map)
        ]
        /// Provide this key with a string value that represents the app-specific identifier for grouping notifications. If you provide a Notification Content app extension, you can use this value to group your notifications together.
        public let threadId: String?
        /// The data payload used for a silent push. This payload is added to the notifications' data.pinpoint.jsonBody' object
        public let data: [String: String]?
        /// The message priority. Amazon Pinpoint uses this value to set the apns-priority request header when it sends the message to APNs. Accepts the following values:
        /// "5" - Low priority. Messages might be delayed, delivered in groups, and throttled.
        /// "10" - High priority. Messages are sent immediately. High priority messages must cause an alert, sound, or badge on the receiving device.
        /// The default value is "10".
        /// The equivalent values for FCM or GCM messages are "normal" and "high". Amazon Pinpoint accepts these values for APNs messages and converts them.
        /// For more information about the apns-priority parameter, see Communicating with APNs in the APNs Local and Remote Notification Programming Guide.
        public let priority: String?
        /// The URL that points to a video used in the push notification.
        public let mediaUrl: String?
        /// An ID that, if assigned to multiple messages, causes APNs to coalesce the messages into a single push notification instead of delivering each message individually. The value must not exceed 64 bytes. Amazon Pinpoint uses this value to set the apns-collapse-id request header when it sends the message to APNs.
        public let collapseId: String?
        /// The message title that displays above the message on the user's device.
        public let title: String?
        /// Indicates if the message should display on the users device. Silent pushes can be used for Remote Configuration and Phone Home use cases.
        public let silentPush: Bool?
        /// Include this key when you want the system to modify the badge of your app icon. If this key is not included in the dictionary, the badge is not changed. To remove the badge, set the value of this key to 0.
        public let badge: Int32?
        /// The action that occurs if the user taps a push notification delivered by the campaign: OPEN_APP - Your app launches, or it becomes the foreground app if it has been sent to the background. This is the default action. DEEP_LINK - Uses deep linking features in iOS and Android to open your app and display a designated user interface within the app. URL - The default mobile browser on the user's device launches and opens a web page at the URL you specify. Possible values include: OPEN_APP | DEEP_LINK | URL
        public let action: Action?
        /// The URL to open in the user's mobile browser. Used if the value for Action is URL.
        public let url: String?
        /// The preferred authentication method, either "CERTIFICATE" or "TOKEN"
        public let preferredAuthenticationMethod: String?
        /// The Raw JSON formatted string to be used as the payload. This value overrides the message.
        public let rawContent: String?
        /// Provide this key with a string value that represents the notification's type. This value corresponds to the value in the identifier property of one of your app's registered categories.
        public let category: String?
        /// Include this key when you want the system to play a sound. The value of this key is the name of a sound file in your app's main bundle or in the Library/Sounds folder of your app's data container. If the sound file cannot be found, or if you specify defaultfor the value, the system plays the default alert sound.
        public let sound: String?
        /// The length of time (in seconds) that APNs stores and attempts to deliver the message. If the value is 0, APNs does not store the message or attempt to deliver it more than once. Amazon Pinpoint uses this value to set the apns-expiration request header when it sends the message to APNs.
        public let timeToLive: Int32?
        /// The message body of the notification, the email body or the text message.
        public let body: String?
        /// Default message substitutions. Can be overridden by individual address substitutions.
        public let substitutions: [String: [String]]?

        public init(threadId: String? = nil, data: [String: String]? = nil, priority: String? = nil, mediaUrl: String? = nil, collapseId: String? = nil, title: String? = nil, silentPush: Bool? = nil, badge: Int32? = nil, action: Action? = nil, url: String? = nil, preferredAuthenticationMethod: String? = nil, rawContent: String? = nil, category: String? = nil, sound: String? = nil, timeToLive: Int32? = nil, body: String? = nil, substitutions: [String: [String]]? = nil) {
            self.threadId = threadId
            self.data = data
            self.priority = priority
            self.mediaUrl = mediaUrl
            self.collapseId = collapseId
            self.title = title
            self.silentPush = silentPush
            self.badge = badge
            self.action = action
            self.url = url
            self.preferredAuthenticationMethod = preferredAuthenticationMethod
            self.rawContent = rawContent
            self.category = category
            self.sound = sound
            self.timeToLive = timeToLive
            self.body = body
            self.substitutions = substitutions
        }

        private enum CodingKeys: String, CodingKey {
            case threadId = "ThreadId"
            case data = "Data"
            case priority = "Priority"
            case mediaUrl = "MediaUrl"
            case collapseId = "CollapseId"
            case title = "Title"
            case silentPush = "SilentPush"
            case badge = "Badge"
            case action = "Action"
            case url = "Url"
            case preferredAuthenticationMethod = "PreferredAuthenticationMethod"
            case rawContent = "RawContent"
            case category = "Category"
            case sound = "Sound"
            case timeToLive = "TimeToLive"
            case body = "Body"
            case substitutions = "Substitutions"
        }
    }

    public struct ApplicationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Item", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// List of applications returned in this page.
        public let item: [ApplicationResponse]?
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        public let nextToken: String?

        public init(item: [ApplicationResponse]? = nil, nextToken: String? = nil) {
            self.item = item
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
            case nextToken = "NextToken"
        }
    }

    public struct DefaultPushNotificationMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Action", required: false, type: .enum), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "Data", required: false, type: .map), 
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "Body", required: false, type: .string), 
            AWSShapeMember(label: "SilentPush", required: false, type: .boolean), 
            AWSShapeMember(label: "Substitutions", required: false, type: .map)
        ]
        /// The action that occurs if the user taps a push notification delivered by the campaign: OPEN_APP - Your app launches, or it becomes the foreground app if it has been sent to the background. This is the default action. DEEP_LINK - Uses deep linking features in iOS and Android to open your app and display a designated user interface within the app. URL - The default mobile browser on the user's device launches and opens a web page at the URL you specify. Possible values include: OPEN_APP | DEEP_LINK | URL
        public let action: Action?
        /// The URL to open in the user's mobile browser. Used if the value for Action is URL.
        public let url: String?
        /// The data payload used for a silent push. This payload is added to the notifications' data.pinpoint.jsonBody' object
        public let data: [String: String]?
        /// The message title that displays above the message on the user's device.
        public let title: String?
        /// The message body of the notification, the email body or the text message.
        public let body: String?
        /// Indicates if the message should display on the users device. Silent pushes can be used for Remote Configuration and Phone Home use cases.
        public let silentPush: Bool?
        /// Default message substitutions. Can be overridden by individual address substitutions.
        public let substitutions: [String: [String]]?

        public init(action: Action? = nil, url: String? = nil, data: [String: String]? = nil, title: String? = nil, body: String? = nil, silentPush: Bool? = nil, substitutions: [String: [String]]? = nil) {
            self.action = action
            self.url = url
            self.data = data
            self.title = title
            self.body = body
            self.silentPush = silentPush
            self.substitutions = substitutions
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case url = "Url"
            case data = "Data"
            case title = "Title"
            case body = "Body"
            case silentPush = "SilentPush"
            case substitutions = "Substitutions"
        }
    }

    public struct ADMChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "HasCredential", required: false, type: .boolean), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "IsArchived", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedBy", required: false, type: .string)
        ]
        /// Channel ID. Not used, only for backwards compatibility.
        public let id: String?
        /// Platform type. Will be "ADM"
        public let platform: String?
        /// Not used. Retained for backwards compatibility.
        public let hasCredential: Bool?
        /// Version of channel
        public let version: Int32?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// Last date this was updated
        public let lastModifiedDate: String?
        /// When was this segment created
        public let creationDate: String?
        /// The ID of the application to which the channel applies.
        public let applicationId: String?
        /// Is this channel archived
        public let isArchived: Bool?
        /// Who last updated this entry
        public let lastModifiedBy: String?

        public init(id: String? = nil, platform: String? = nil, hasCredential: Bool? = nil, version: Int32? = nil, enabled: Bool? = nil, lastModifiedDate: String? = nil, creationDate: String? = nil, applicationId: String? = nil, isArchived: Bool? = nil, lastModifiedBy: String? = nil) {
            self.id = id
            self.platform = platform
            self.hasCredential = hasCredential
            self.version = version
            self.enabled = enabled
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.applicationId = applicationId
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case platform = "Platform"
            case hasCredential = "HasCredential"
            case version = "Version"
            case enabled = "Enabled"
            case lastModifiedDate = "LastModifiedDate"
            case creationDate = "CreationDate"
            case applicationId = "ApplicationId"
            case isArchived = "IsArchived"
            case lastModifiedBy = "LastModifiedBy"
        }
    }

    public enum ChannelType: String, CustomStringConvertible, Codable {
        case gcm = "GCM"
        case apns = "APNS"
        case apnsSandbox = "APNS_SANDBOX"
        case apnsVoip = "APNS_VOIP"
        case apnsVoipSandbox = "APNS_VOIP_SANDBOX"
        case adm = "ADM"
        case sms = "SMS"
        case email = "EMAIL"
        case baidu = "BAIDU"
        case custom = "CUSTOM"
        public var description: String { return self.rawValue }
    }

    public struct UpdateBaiduChannelRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "BaiduChannelRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BaiduChannelRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let baiduChannelRequest: BaiduChannelRequest
        public let applicationId: String

        public init(baiduChannelRequest: BaiduChannelRequest, applicationId: String) {
            self.baiduChannelRequest = baiduChannelRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case baiduChannelRequest = "BaiduChannelRequest"
            case applicationId = "application-id"
        }
    }

    public struct MessageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointResult", required: false, type: .map), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "Result", required: false, type: .map), 
            AWSShapeMember(label: "RequestId", required: false, type: .string)
        ]
        /// A map containing a multi part response for each address, with the endpointId as the key and the result as the value.
        public let endpointResult: [String: EndpointMessageResult]?
        /// Application id of the message.
        public let applicationId: String?
        /// A map containing a multi part response for each address, with the address as the key(Email address, phone number or push token) and the result as the value.
        public let result: [String: MessageResult]?
        /// Original request Id for which this message was delivered.
        public let requestId: String?

        public init(endpointResult: [String: EndpointMessageResult]? = nil, applicationId: String? = nil, result: [String: MessageResult]? = nil, requestId: String? = nil) {
            self.endpointResult = endpointResult
            self.applicationId = applicationId
            self.result = result
            self.requestId = requestId
        }

        private enum CodingKeys: String, CodingKey {
            case endpointResult = "EndpointResult"
            case applicationId = "ApplicationId"
            case result = "Result"
            case requestId = "RequestId"
        }
    }

    public struct UpdateEmailChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EmailChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmailChannelResponse", required: true, type: .structure)
        ]
        public let emailChannelResponse: EmailChannelResponse

        public init(emailChannelResponse: EmailChannelResponse) {
            self.emailChannelResponse = emailChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case emailChannelResponse = "EmailChannelResponse"
        }
    }

    public struct GetSegmentExportJobsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ExportJobsResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportJobsResponse", required: true, type: .structure)
        ]
        public let exportJobsResponse: ExportJobsResponse

        public init(exportJobsResponse: ExportJobsResponse) {
            self.exportJobsResponse = exportJobsResponse
        }

        private enum CodingKeys: String, CodingKey {
            case exportJobsResponse = "ExportJobsResponse"
        }
    }

    public struct ActivitiesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Item", required: false, type: .list)
        ]
        /// List of campaign activities
        public let item: [ActivityResponse]?

        public init(item: [ActivityResponse]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
        }
    }

    public struct ChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "HasCredential", required: false, type: .boolean), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "IsArchived", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedBy", required: false, type: .string)
        ]
        /// Channel ID. Not used, only for backwards compatibility.
        public let id: String?
        /// Not used. Retained for backwards compatibility.
        public let hasCredential: Bool?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// Version of channel
        public let version: Int32?
        /// Last date this was updated
        public let lastModifiedDate: String?
        /// When was this segment created
        public let creationDate: String?
        /// Application id
        public let applicationId: String?
        /// Is this channel archived
        public let isArchived: Bool?
        /// Who made the last change
        public let lastModifiedBy: String?

        public init(id: String? = nil, hasCredential: Bool? = nil, enabled: Bool? = nil, version: Int32? = nil, lastModifiedDate: String? = nil, creationDate: String? = nil, applicationId: String? = nil, isArchived: Bool? = nil, lastModifiedBy: String? = nil) {
            self.id = id
            self.hasCredential = hasCredential
            self.enabled = enabled
            self.version = version
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.applicationId = applicationId
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case hasCredential = "HasCredential"
            case enabled = "Enabled"
            case version = "Version"
            case lastModifiedDate = "LastModifiedDate"
            case creationDate = "CreationDate"
            case applicationId = "ApplicationId"
            case isArchived = "IsArchived"
            case lastModifiedBy = "LastModifiedBy"
        }
    }

    public struct DeleteAdmChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ADMChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ADMChannelResponse", required: true, type: .structure)
        ]
        public let aDMChannelResponse: ADMChannelResponse

        public init(aDMChannelResponse: ADMChannelResponse) {
            self.aDMChannelResponse = aDMChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aDMChannelResponse = "ADMChannelResponse"
        }
    }

    public struct RecencyDimension: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Duration", required: false, type: .enum), 
            AWSShapeMember(label: "RecencyType", required: false, type: .enum)
        ]
        /// The length of time during which users have been active or inactive with your app.
        /// Valid values: HR_24, DAY_7, DAY_14, DAY_30
        public let duration: Duration?
        /// The recency dimension type:
        /// ACTIVE - Users who have used your app within the specified duration are included in the segment.
        /// INACTIVE - Users who have not used your app within the specified duration are included in the segment.
        public let recencyType: RecencyType?

        public init(duration: Duration? = nil, recencyType: RecencyType? = nil) {
            self.duration = duration
            self.recencyType = recencyType
        }

        private enum CodingKeys: String, CodingKey {
            case duration = "Duration"
            case recencyType = "RecencyType"
        }
    }

    public struct GetApnsChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct Schedule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .string), 
            AWSShapeMember(label: "Frequency", required: false, type: .enum), 
            AWSShapeMember(label: "QuietTime", required: false, type: .structure), 
            AWSShapeMember(label: "IsLocalTime", required: false, type: .boolean), 
            AWSShapeMember(label: "Timezone", required: false, type: .string)
        ]
        /// The scheduled time that the campaign begins in ISO 8601 format.
        public let startTime: String?
        /// The scheduled time that the campaign ends in ISO 8601 format.
        public let endTime: String?
        /// How often the campaign delivers messages.
        /// Valid values: ONCE, HOURLY, DAILY, WEEKLY, MONTHLY
        public let frequency: Frequency?
        /// The time during which the campaign sends no messages.
        public let quietTime: QuietTime?
        /// Indicates whether the campaign schedule takes effect according to each user's local time.
        public let isLocalTime: Bool?
        /// The starting UTC offset for the schedule if the value for isLocalTime is true
        /// Valid values: 
        /// UTC
        /// UTC+01
        /// UTC+02
        /// UTC+03
        /// UTC+03:30
        /// UTC+04
        /// UTC+04:30
        /// UTC+05
        /// UTC+05:30
        /// UTC+05:45
        /// UTC+06
        /// UTC+06:30
        /// UTC+07
        /// UTC+08
        /// UTC+09
        /// UTC+09:30
        /// UTC+10
        /// UTC+10:30
        /// UTC+11
        /// UTC+12
        /// UTC+13
        /// UTC-02
        /// UTC-03
        /// UTC-04
        /// UTC-05
        /// UTC-06
        /// UTC-07
        /// UTC-08
        /// UTC-09
        /// UTC-10
        /// UTC-11
        public let timezone: String?

        public init(startTime: String? = nil, endTime: String? = nil, frequency: Frequency? = nil, quietTime: QuietTime? = nil, isLocalTime: Bool? = nil, timezone: String? = nil) {
            self.startTime = startTime
            self.endTime = endTime
            self.frequency = frequency
            self.quietTime = quietTime
            self.isLocalTime = isLocalTime
            self.timezone = timezone
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case frequency = "Frequency"
            case quietTime = "QuietTime"
            case isLocalTime = "IsLocalTime"
            case timezone = "Timezone"
        }
    }

    public struct GetApnsChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSChannelResponse", required: true, type: .structure)
        ]
        public let aPNSChannelResponse: APNSChannelResponse

        public init(aPNSChannelResponse: APNSChannelResponse) {
            self.aPNSChannelResponse = aPNSChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSChannelResponse = "APNSChannelResponse"
        }
    }

    public struct SegmentImportResource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExternalId", required: false, type: .string), 
            AWSShapeMember(label: "Format", required: false, type: .enum), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "ChannelCounts", required: false, type: .map), 
            AWSShapeMember(label: "S3Url", required: false, type: .string), 
            AWSShapeMember(label: "Size", required: false, type: .integer)
        ]
        /// DEPRECATED. Your AWS account ID, which you assigned to the ExternalID key in an IAM trust policy. Used by Amazon Pinpoint to assume an IAM role. This requirement is removed, and external IDs are not recommended for IAM roles assumed by Amazon Pinpoint.
        public let externalId: String?
        /// The format of the endpoint files that were imported to create this segment.
        /// Valid values: CSV, JSON
        public let format: Format?
        /// The Amazon Resource Name (ARN) of an IAM role that grants Amazon Pinpoint access to the endpoints in Amazon S3.
        public let roleArn: String?
        /// Channel type counts
        public let channelCounts: [String: Int32]?
        /// A URL that points to the Amazon S3 location from which the endpoints for this segment were imported.
        public let s3Url: String?
        /// The number of endpoints that were successfully imported to create this segment.
        public let size: Int32?

        public init(externalId: String? = nil, format: Format? = nil, roleArn: String? = nil, channelCounts: [String: Int32]? = nil, s3Url: String? = nil, size: Int32? = nil) {
            self.externalId = externalId
            self.format = format
            self.roleArn = roleArn
            self.channelCounts = channelCounts
            self.s3Url = s3Url
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case externalId = "ExternalId"
            case format = "Format"
            case roleArn = "RoleArn"
            case channelCounts = "ChannelCounts"
            case s3Url = "S3Url"
            case size = "Size"
        }
    }

    public struct ImportJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Url", required: false, type: .string), 
            AWSShapeMember(label: "DefineSegment", required: false, type: .boolean), 
            AWSShapeMember(label: "Format", required: false, type: .enum), 
            AWSShapeMember(label: "ExternalId", required: false, type: .string), 
            AWSShapeMember(label: "RegisterEndpoints", required: false, type: .boolean), 
            AWSShapeMember(label: "SegmentName", required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "SegmentId", required: false, type: .string)
        ]
        /// A URL that points to the location within an Amazon S3 bucket that contains the endpoints to import. The location can be a folder or a single file.
        /// The URL should follow this format: s3://bucket-name/folder-name/file-name
        /// Amazon Pinpoint will import endpoints from this location and any subfolders it contains.
        public let s3Url: String?
        /// Sets whether the endpoints create a segment when they are imported.
        public let defineSegment: Bool?
        /// The format of the files that contain the endpoint definitions.
        /// Valid values: CSV, JSON
        public let format: Format?
        /// DEPRECATED. Your AWS account ID, which you assigned to the ExternalID key in an IAM trust policy. Used by Amazon Pinpoint to assume an IAM role. This requirement is removed, and external IDs are not recommended for IAM roles assumed by Amazon Pinpoint.
        public let externalId: String?
        /// Sets whether the endpoints are registered with Amazon Pinpoint when they are imported.
        public let registerEndpoints: Bool?
        /// A custom name for the segment created by the import job. Use if DefineSegment is true.
        public let segmentName: String?
        /// The Amazon Resource Name (ARN) of an IAM role that grants Amazon Pinpoint access to the Amazon S3 location that contains the endpoints to import.
        public let roleArn: String?
        /// The ID of the segment to update if the import job is meant to update an existing segment.
        public let segmentId: String?

        public init(s3Url: String? = nil, defineSegment: Bool? = nil, format: Format? = nil, externalId: String? = nil, registerEndpoints: Bool? = nil, segmentName: String? = nil, roleArn: String? = nil, segmentId: String? = nil) {
            self.s3Url = s3Url
            self.defineSegment = defineSegment
            self.format = format
            self.externalId = externalId
            self.registerEndpoints = registerEndpoints
            self.segmentName = segmentName
            self.roleArn = roleArn
            self.segmentId = segmentId
        }

        private enum CodingKeys: String, CodingKey {
            case s3Url = "S3Url"
            case defineSegment = "DefineSegment"
            case format = "Format"
            case externalId = "ExternalId"
            case registerEndpoints = "RegisterEndpoints"
            case segmentName = "SegmentName"
            case roleArn = "RoleArn"
            case segmentId = "SegmentId"
        }
    }

    public struct GetCampaignsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", location: .querystring(locationName: "page-size"), required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "Token", location: .querystring(locationName: "token"), required: false, type: .string)
        ]
        public let pageSize: String?
        public let applicationId: String
        public let token: String?

        public init(pageSize: String? = nil, applicationId: String, token: String? = nil) {
            self.pageSize = pageSize
            self.applicationId = applicationId
            self.token = token
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "page-size"
            case applicationId = "application-id"
            case token = "token"
        }
    }

    public struct PhoneNumberValidateRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "NumberValidateRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NumberValidateRequest", required: true, type: .structure)
        ]
        public let numberValidateRequest: NumberValidateRequest

        public init(numberValidateRequest: NumberValidateRequest) {
            self.numberValidateRequest = numberValidateRequest
        }

        private enum CodingKeys: String, CodingKey {
            case numberValidateRequest = "NumberValidateRequest"
        }
    }

    public struct PhoneNumberValidateResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "NumberValidateResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NumberValidateResponse", required: true, type: .structure)
        ]
        public let numberValidateResponse: NumberValidateResponse

        public init(numberValidateResponse: NumberValidateResponse) {
            self.numberValidateResponse = numberValidateResponse
        }

        private enum CodingKeys: String, CodingKey {
            case numberValidateResponse = "NumberValidateResponse"
        }
    }

    public struct CreateImportJobRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ImportJobRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportJobRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let importJobRequest: ImportJobRequest
        public let applicationId: String

        public init(importJobRequest: ImportJobRequest, applicationId: String) {
            self.importJobRequest = importJobRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case importJobRequest = "ImportJobRequest"
            case applicationId = "application-id"
        }
    }

    public struct ImportJobResource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Url", required: false, type: .string), 
            AWSShapeMember(label: "DefineSegment", required: false, type: .boolean), 
            AWSShapeMember(label: "Format", required: false, type: .enum), 
            AWSShapeMember(label: "ExternalId", required: false, type: .string), 
            AWSShapeMember(label: "RegisterEndpoints", required: false, type: .boolean), 
            AWSShapeMember(label: "SegmentName", required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "SegmentId", required: false, type: .string)
        ]
        /// A URL that points to the location within an Amazon S3 bucket that contains the endpoints to import. The location can be a folder or a single file.
        /// The URL should follow this format: s3://bucket-name/folder-name/file-name
        /// Amazon Pinpoint will import endpoints from this location and any subfolders it contains.
        public let s3Url: String?
        /// Sets whether the endpoints create a segment when they are imported.
        public let defineSegment: Bool?
        /// The format of the files that contain the endpoint definitions.
        /// Valid values: CSV, JSON
        public let format: Format?
        /// DEPRECATED. Your AWS account ID, which you assigned to the ExternalID key in an IAM trust policy. Used by Amazon Pinpoint to assume an IAM role. This requirement is removed, and external IDs are not recommended for IAM roles assumed by Amazon Pinpoint.
        public let externalId: String?
        /// Sets whether the endpoints are registered with Amazon Pinpoint when they are imported.
        public let registerEndpoints: Bool?
        /// A custom name for the segment created by the import job. Use if DefineSegment is true.
        public let segmentName: String?
        /// The Amazon Resource Name (ARN) of an IAM role that grants Amazon Pinpoint access to the Amazon S3 location that contains the endpoints to import.
        public let roleArn: String?
        /// The ID of the segment to update if the import job is meant to update an existing segment.
        public let segmentId: String?

        public init(s3Url: String? = nil, defineSegment: Bool? = nil, format: Format? = nil, externalId: String? = nil, registerEndpoints: Bool? = nil, segmentName: String? = nil, roleArn: String? = nil, segmentId: String? = nil) {
            self.s3Url = s3Url
            self.defineSegment = defineSegment
            self.format = format
            self.externalId = externalId
            self.registerEndpoints = registerEndpoints
            self.segmentName = segmentName
            self.roleArn = roleArn
            self.segmentId = segmentId
        }

        private enum CodingKeys: String, CodingKey {
            case s3Url = "S3Url"
            case defineSegment = "DefineSegment"
            case format = "Format"
            case externalId = "ExternalId"
            case registerEndpoints = "RegisterEndpoints"
            case segmentName = "SegmentName"
            case roleArn = "RoleArn"
            case segmentId = "SegmentId"
        }
    }

    public struct GetAppsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", location: .querystring(locationName: "page-size"), required: false, type: .string), 
            AWSShapeMember(label: "Token", location: .querystring(locationName: "token"), required: false, type: .string)
        ]
        public let pageSize: String?
        public let token: String?

        public init(pageSize: String? = nil, token: String? = nil) {
            self.pageSize = pageSize
            self.token = token
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "page-size"
            case token = "token"
        }
    }

    public struct DeleteUserEndpointsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserId", location: .uri(locationName: "user-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let userId: String
        public let applicationId: String

        public init(userId: String, applicationId: String) {
            self.userId = userId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case userId = "user-id"
            case applicationId = "application-id"
        }
    }

    public struct EndpointUser: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserId", required: false, type: .string), 
            AWSShapeMember(label: "UserAttributes", required: false, type: .map)
        ]
        /// The unique ID of the user.
        public let userId: String?
        /// Custom attributes that describe an end user by associating a name with an array of values. For example, an attribute named "interests" might have the values ["science", "politics", "travel"]. You can use these attributes as selection criteria when you create a segment of users to engage with a messaging campaign.
        /// The following characters are not recommended in attribute names: # : ? \ /. The Amazon Pinpoint console does not display attributes that include these characters in the name. This limitation does not apply to attribute values.
        public let userAttributes: [String: [String]]?

        public init(userId: String? = nil, userAttributes: [String: [String]]? = nil) {
            self.userId = userId
            self.userAttributes = userAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case userAttributes = "UserAttributes"
        }
    }

    public enum Include: String, CustomStringConvertible, Codable {
        case all = "ALL"
        case any = "ANY"
        case none = "NONE"
        public var description: String { return self.rawValue }
    }

    public struct CampaignEmailMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "HtmlBody", required: false, type: .string), 
            AWSShapeMember(label: "Body", required: false, type: .string), 
            AWSShapeMember(label: "FromAddress", required: false, type: .string)
        ]
        /// The email title (Or subject).
        public let title: String?
        /// The email html body.
        public let htmlBody: String?
        /// The email text body.
        public let body: String?
        /// The email address used to send the email from. Defaults to use FromAddress specified in the Email Channel.
        public let fromAddress: String?

        public init(title: String? = nil, htmlBody: String? = nil, body: String? = nil, fromAddress: String? = nil) {
            self.title = title
            self.htmlBody = htmlBody
            self.body = body
            self.fromAddress = fromAddress
        }

        private enum CodingKeys: String, CodingKey {
            case title = "Title"
            case htmlBody = "HtmlBody"
            case body = "Body"
            case fromAddress = "FromAddress"
        }
    }

    public struct SegmentDimensions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Demographic", required: false, type: .structure), 
            AWSShapeMember(label: "Behavior", required: false, type: .structure), 
            AWSShapeMember(label: "Attributes", required: false, type: .map), 
            AWSShapeMember(label: "Metrics", required: false, type: .map), 
            AWSShapeMember(label: "Location", required: false, type: .structure), 
            AWSShapeMember(label: "UserAttributes", required: false, type: .map)
        ]
        /// The segment demographics attributes.
        public let demographic: SegmentDemographics?
        /// The segment behaviors attributes.
        public let behavior: SegmentBehaviors?
        /// Custom segment attributes.
        public let attributes: [String: AttributeDimension]?
        /// Custom segment metrics.
        public let metrics: [String: MetricDimension]?
        /// The segment location attributes.
        public let location: SegmentLocation?
        /// Custom segment user attributes.
        public let userAttributes: [String: AttributeDimension]?

        public init(demographic: SegmentDemographics? = nil, behavior: SegmentBehaviors? = nil, attributes: [String: AttributeDimension]? = nil, metrics: [String: MetricDimension]? = nil, location: SegmentLocation? = nil, userAttributes: [String: AttributeDimension]? = nil) {
            self.demographic = demographic
            self.behavior = behavior
            self.attributes = attributes
            self.metrics = metrics
            self.location = location
            self.userAttributes = userAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case demographic = "Demographic"
            case behavior = "Behavior"
            case attributes = "Attributes"
            case metrics = "Metrics"
            case location = "Location"
            case userAttributes = "UserAttributes"
        }
    }

    public struct ApplicationSettingsResource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "Limits", required: false, type: .structure), 
            AWSShapeMember(label: "CampaignHook", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "QuietTime", required: false, type: .structure)
        ]
        /// The date that the settings were last updated in ISO 8601 format.
        public let lastModifiedDate: String?
        /// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own.
        public let limits: CampaignLimits?
        /// Default campaign hook.
        public let campaignHook: CampaignHook?
        /// The unique ID for the application.
        public let applicationId: String?
        /// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own.
        public let quietTime: QuietTime?

        public init(lastModifiedDate: String? = nil, limits: CampaignLimits? = nil, campaignHook: CampaignHook? = nil, applicationId: String? = nil, quietTime: QuietTime? = nil) {
            self.lastModifiedDate = lastModifiedDate
            self.limits = limits
            self.campaignHook = campaignHook
            self.applicationId = applicationId
            self.quietTime = quietTime
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedDate = "LastModifiedDate"
            case limits = "Limits"
            case campaignHook = "CampaignHook"
            case applicationId = "ApplicationId"
            case quietTime = "QuietTime"
        }
    }

    public struct SegmentGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Dimensions", required: false, type: .list), 
            AWSShapeMember(label: "SourceSegments", required: false, type: .list), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "SourceType", required: false, type: .enum)
        ]
        /// List of dimensions to include or exclude.
        public let dimensions: [SegmentDimensions]?
        /// Segments that define the source of this segment. Currently a maximum of 1 import segment is supported.
        public let sourceSegments: [SegmentReference]?
        /// How should the dimensions be applied for the result
        public let `type`: `Type`?
        /// Include or exclude the source.
        public let sourceType: SourceType?

        public init(dimensions: [SegmentDimensions]? = nil, sourceSegments: [SegmentReference]? = nil, type: `Type`? = nil, sourceType: SourceType? = nil) {
            self.dimensions = dimensions
            self.sourceSegments = sourceSegments
            self.`type` = `type`
            self.sourceType = sourceType
        }

        private enum CodingKeys: String, CodingKey {
            case dimensions = "Dimensions"
            case sourceSegments = "SourceSegments"
            case `type` = "Type"
            case sourceType = "SourceType"
        }
    }

    public struct GetCampaignActivitiesResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ActivitiesResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActivitiesResponse", required: true, type: .structure)
        ]
        public let activitiesResponse: ActivitiesResponse

        public init(activitiesResponse: ActivitiesResponse) {
            self.activitiesResponse = activitiesResponse
        }

        private enum CodingKeys: String, CodingKey {
            case activitiesResponse = "ActivitiesResponse"
        }
    }

    public struct UpdateApnsSandboxChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSSandboxChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSSandboxChannelResponse", required: true, type: .structure)
        ]
        public let aPNSSandboxChannelResponse: APNSSandboxChannelResponse

        public init(aPNSSandboxChannelResponse: APNSSandboxChannelResponse) {
            self.aPNSSandboxChannelResponse = aPNSSandboxChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSSandboxChannelResponse = "APNSSandboxChannelResponse"
        }
    }

    public struct GetAppRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct NumberValidateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IsoCountryCode", required: false, type: .string), 
            AWSShapeMember(label: "PhoneNumber", required: false, type: .string)
        ]
        /// (Optional) The two-character ISO country code for the country where the phone number was originally registered.
        public let isoCountryCode: String?
        /// The phone number to get information about.
        public let phoneNumber: String?

        public init(isoCountryCode: String? = nil, phoneNumber: String? = nil) {
            self.isoCountryCode = isoCountryCode
            self.phoneNumber = phoneNumber
        }

        private enum CodingKeys: String, CodingKey {
            case isoCountryCode = "IsoCountryCode"
            case phoneNumber = "PhoneNumber"
        }
    }

    public struct GetExportJobsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ExportJobsResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportJobsResponse", required: true, type: .structure)
        ]
        public let exportJobsResponse: ExportJobsResponse

        public init(exportJobsResponse: ExportJobsResponse) {
            self.exportJobsResponse = exportJobsResponse
        }

        private enum CodingKeys: String, CodingKey {
            case exportJobsResponse = "ExportJobsResponse"
        }
    }

    public struct SegmentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentType", required: false, type: .enum), 
            AWSShapeMember(label: "SegmentGroups", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "Dimensions", required: false, type: .structure), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "ImportDefinition", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The segment type:
        /// DIMENSIONAL - A dynamic segment built from selection criteria based on endpoint data reported by your app. You create this type of segment by using the segment builder in the Amazon Pinpoint console or by making a POST request to the segments resource.
        /// IMPORT - A static segment built from an imported set of endpoint definitions. You create this type of segment by importing a segment in the Amazon Pinpoint console or by making a POST request to the jobs/import resource.
        public let segmentType: SegmentType?
        /// Segment definition groups. We currently only support one. If specified Dimensions must be empty.
        public let segmentGroups: SegmentGroupList?
        /// The name of segment
        public let name: String?
        /// The segment version number.
        public let version: Int32?
        /// The segment dimensions attributes.
        public let dimensions: SegmentDimensions?
        /// The date the segment was created in ISO 8601 format.
        public let creationDate: String?
        /// The ID of the application to which the segment applies.
        public let applicationId: String?
        /// The date the segment was last updated in ISO 8601 format.
        public let lastModifiedDate: String?
        /// The import job settings.
        public let importDefinition: SegmentImportResource?
        /// The unique segment ID.
        public let id: String?

        public init(segmentType: SegmentType? = nil, segmentGroups: SegmentGroupList? = nil, name: String? = nil, version: Int32? = nil, dimensions: SegmentDimensions? = nil, creationDate: String? = nil, applicationId: String? = nil, lastModifiedDate: String? = nil, importDefinition: SegmentImportResource? = nil, id: String? = nil) {
            self.segmentType = segmentType
            self.segmentGroups = segmentGroups
            self.name = name
            self.version = version
            self.dimensions = dimensions
            self.creationDate = creationDate
            self.applicationId = applicationId
            self.lastModifiedDate = lastModifiedDate
            self.importDefinition = importDefinition
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case segmentType = "SegmentType"
            case segmentGroups = "SegmentGroups"
            case name = "Name"
            case version = "Version"
            case dimensions = "Dimensions"
            case creationDate = "CreationDate"
            case applicationId = "ApplicationId"
            case lastModifiedDate = "LastModifiedDate"
            case importDefinition = "ImportDefinition"
            case id = "Id"
        }
    }

    public struct ImportJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CompletionDate", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "FailedPieces", required: false, type: .integer), 
            AWSShapeMember(label: "TotalPieces", required: false, type: .integer), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "TotalProcessed", required: false, type: .integer), 
            AWSShapeMember(label: "CompletedPieces", required: false, type: .integer), 
            AWSShapeMember(label: "TotalFailures", required: false, type: .integer), 
            AWSShapeMember(label: "Failures", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .string)
        ]
        /// The date the import job completed in ISO 8601 format.
        public let completionDate: String?
        /// The import job settings.
        public let definition: ImportJobResource?
        /// The number of pieces that have failed to import as of the time of the request.
        public let failedPieces: Int32?
        /// The total number of pieces that must be imported to finish the job. Each piece is an approximately equal portion of the endpoints to import.
        public let totalPieces: Int32?
        /// The date the import job was created in ISO 8601 format.
        public let creationDate: String?
        /// The status of the import job.
        /// Valid values: CREATED, INITIALIZING, PROCESSING, COMPLETING, COMPLETED, FAILING, FAILED
        /// The job status is FAILED if one or more pieces failed to import.
        public let jobStatus: JobStatus?
        /// The unique ID of the import job.
        public let id: String?
        /// The number of endpoints that were processed by the import job.
        public let totalProcessed: Int32?
        /// The number of pieces that have successfully imported as of the time of the request.
        public let completedPieces: Int32?
        /// The number of endpoints that failed to import; for example, because of syntax errors.
        public let totalFailures: Int32?
        /// Provides up to 100 of the first failed entries for the job, if any exist.
        public let failures: [String]?
        /// The unique ID of the application to which the import job applies.
        public let applicationId: String?
        /// The job type. Will be Import.
        public let `type`: String?

        public init(completionDate: String? = nil, definition: ImportJobResource? = nil, failedPieces: Int32? = nil, totalPieces: Int32? = nil, creationDate: String? = nil, jobStatus: JobStatus? = nil, id: String? = nil, totalProcessed: Int32? = nil, completedPieces: Int32? = nil, totalFailures: Int32? = nil, failures: [String]? = nil, applicationId: String? = nil, type: String? = nil) {
            self.completionDate = completionDate
            self.definition = definition
            self.failedPieces = failedPieces
            self.totalPieces = totalPieces
            self.creationDate = creationDate
            self.jobStatus = jobStatus
            self.id = id
            self.totalProcessed = totalProcessed
            self.completedPieces = completedPieces
            self.totalFailures = totalFailures
            self.failures = failures
            self.applicationId = applicationId
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case completionDate = "CompletionDate"
            case definition = "Definition"
            case failedPieces = "FailedPieces"
            case totalPieces = "TotalPieces"
            case creationDate = "CreationDate"
            case jobStatus = "JobStatus"
            case id = "Id"
            case totalProcessed = "TotalProcessed"
            case completedPieces = "CompletedPieces"
            case totalFailures = "TotalFailures"
            case failures = "Failures"
            case applicationId = "ApplicationId"
            case `type` = "Type"
        }
    }

    public struct NumberValidateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CleansedPhoneNumberE164", required: false, type: .string), 
            AWSShapeMember(label: "Country", required: false, type: .string), 
            AWSShapeMember(label: "Carrier", required: false, type: .string), 
            AWSShapeMember(label: "Timezone", required: false, type: .string), 
            AWSShapeMember(label: "PhoneTypeCode", required: false, type: .integer), 
            AWSShapeMember(label: "ZipCode", required: false, type: .string), 
            AWSShapeMember(label: "PhoneType", required: false, type: .string), 
            AWSShapeMember(label: "County", required: false, type: .string), 
            AWSShapeMember(label: "City", required: false, type: .string), 
            AWSShapeMember(label: "OriginalCountryCodeIso2", required: false, type: .string), 
            AWSShapeMember(label: "CountryCodeIso2", required: false, type: .string), 
            AWSShapeMember(label: "CleansedPhoneNumberNational", required: false, type: .string), 
            AWSShapeMember(label: "CountryCodeNumeric", required: false, type: .string), 
            AWSShapeMember(label: "OriginalPhoneNumber", required: false, type: .string)
        ]
        /// The cleansed (standardized) phone number in E.164 format.
        public let cleansedPhoneNumberE164: String?
        /// The country where the phone number was originally registered.
        public let country: String?
        /// The carrier that the phone number is registered with.
        public let carrier: String?
        /// The time zone for the location where the phone number was originally registered.
        public let timezone: String?
        /// The phone type as an integer. Possible values include 0 (MOBILE), 1 (LANDLINE), 2 (VOIP), 3 (INVALID), and 4 (OTHER).
        public let phoneTypeCode: Int32?
        /// The zip code for the location where the phone number was originally registered.
        public let zipCode: String?
        /// A description of the phone type. Possible values include MOBILE, LANDLINE, VOIP, INVALID, and OTHER.
        public let phoneType: String?
        /// The county where the phone number was originally registered.
        public let county: String?
        /// The city where the phone number was originally registered.
        public let city: String?
        /// The two-character ISO country code that was included in the request body.
        public let originalCountryCodeIso2: String?
        /// The two-character ISO country code for the country where the phone number was originally registered.
        public let countryCodeIso2: String?
        /// The cleansed phone number in national format.
        public let cleansedPhoneNumberNational: String?
        /// The numeric country code for the country where the phone number was originally registered.
        public let countryCodeNumeric: String?
        /// The phone number that you included in the request body.
        public let originalPhoneNumber: String?

        public init(cleansedPhoneNumberE164: String? = nil, country: String? = nil, carrier: String? = nil, timezone: String? = nil, phoneTypeCode: Int32? = nil, zipCode: String? = nil, phoneType: String? = nil, county: String? = nil, city: String? = nil, originalCountryCodeIso2: String? = nil, countryCodeIso2: String? = nil, cleansedPhoneNumberNational: String? = nil, countryCodeNumeric: String? = nil, originalPhoneNumber: String? = nil) {
            self.cleansedPhoneNumberE164 = cleansedPhoneNumberE164
            self.country = country
            self.carrier = carrier
            self.timezone = timezone
            self.phoneTypeCode = phoneTypeCode
            self.zipCode = zipCode
            self.phoneType = phoneType
            self.county = county
            self.city = city
            self.originalCountryCodeIso2 = originalCountryCodeIso2
            self.countryCodeIso2 = countryCodeIso2
            self.cleansedPhoneNumberNational = cleansedPhoneNumberNational
            self.countryCodeNumeric = countryCodeNumeric
            self.originalPhoneNumber = originalPhoneNumber
        }

        private enum CodingKeys: String, CodingKey {
            case cleansedPhoneNumberE164 = "CleansedPhoneNumberE164"
            case country = "Country"
            case carrier = "Carrier"
            case timezone = "Timezone"
            case phoneTypeCode = "PhoneTypeCode"
            case zipCode = "ZipCode"
            case phoneType = "PhoneType"
            case county = "County"
            case city = "City"
            case originalCountryCodeIso2 = "OriginalCountryCodeIso2"
            case countryCodeIso2 = "CountryCodeIso2"
            case cleansedPhoneNumberNational = "CleansedPhoneNumberNational"
            case countryCodeNumeric = "CountryCodeNumeric"
            case originalPhoneNumber = "OriginalPhoneNumber"
        }
    }

    public struct APNSVoipSandboxChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "DefaultAuthenticationMethod", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "HasCredential", required: false, type: .boolean), 
            AWSShapeMember(label: "IsArchived", required: false, type: .boolean), 
            AWSShapeMember(label: "HasTokenKey", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedBy", required: false, type: .string)
        ]
        /// Channel ID. Not used, only for backwards compatibility.
        public let id: String?
        /// The platform type. Will be APNS.
        public let platform: String?
        /// The default authentication method used for APNs.
        public let defaultAuthenticationMethod: String?
        /// Version of channel
        public let version: Int32?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// Last date this was updated
        public let lastModifiedDate: String?
        /// When was this segment created
        public let creationDate: String?
        /// Application id
        public let applicationId: String?
        /// Not used. Retained for backwards compatibility.
        public let hasCredential: Bool?
        /// Is this channel archived
        public let isArchived: Bool?
        /// If the channel is registered with a token key for authentication.
        public let hasTokenKey: Bool?
        /// Who made the last change
        public let lastModifiedBy: String?

        public init(id: String? = nil, platform: String? = nil, defaultAuthenticationMethod: String? = nil, version: Int32? = nil, enabled: Bool? = nil, lastModifiedDate: String? = nil, creationDate: String? = nil, applicationId: String? = nil, hasCredential: Bool? = nil, isArchived: Bool? = nil, hasTokenKey: Bool? = nil, lastModifiedBy: String? = nil) {
            self.id = id
            self.platform = platform
            self.defaultAuthenticationMethod = defaultAuthenticationMethod
            self.version = version
            self.enabled = enabled
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.applicationId = applicationId
            self.hasCredential = hasCredential
            self.isArchived = isArchived
            self.hasTokenKey = hasTokenKey
            self.lastModifiedBy = lastModifiedBy
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case platform = "Platform"
            case defaultAuthenticationMethod = "DefaultAuthenticationMethod"
            case version = "Version"
            case enabled = "Enabled"
            case lastModifiedDate = "LastModifiedDate"
            case creationDate = "CreationDate"
            case applicationId = "ApplicationId"
            case hasCredential = "HasCredential"
            case isArchived = "IsArchived"
            case hasTokenKey = "HasTokenKey"
            case lastModifiedBy = "LastModifiedBy"
        }
    }

    public struct GetApplicationSettingsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ApplicationSettingsResource"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationSettingsResource", required: true, type: .structure)
        ]
        public let applicationSettingsResource: ApplicationSettingsResource

        public init(applicationSettingsResource: ApplicationSettingsResource) {
            self.applicationSettingsResource = applicationSettingsResource
        }

        private enum CodingKeys: String, CodingKey {
            case applicationSettingsResource = "ApplicationSettingsResource"
        }
    }

    public struct APNSVoipChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TeamId", required: false, type: .string), 
            AWSShapeMember(label: "DefaultAuthenticationMethod", required: false, type: .string), 
            AWSShapeMember(label: "TokenKeyId", required: false, type: .string), 
            AWSShapeMember(label: "TokenKey", required: false, type: .string), 
            AWSShapeMember(label: "Certificate", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateKey", required: false, type: .string), 
            AWSShapeMember(label: "BundleId", required: false, type: .string)
        ]
        /// The team id used for APNs Tokens.
        public let teamId: String?
        /// The default authentication method used for APNs.
        public let defaultAuthenticationMethod: String?
        /// The token key used for APNs Tokens.
        public let tokenKeyId: String?
        /// The token key used for APNs Tokens.
        public let tokenKey: String?
        /// The distribution certificate from Apple.
        public let certificate: String?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// The certificate private key.
        public let privateKey: String?
        /// The bundle id used for APNs Tokens.
        public let bundleId: String?

        public init(teamId: String? = nil, defaultAuthenticationMethod: String? = nil, tokenKeyId: String? = nil, tokenKey: String? = nil, certificate: String? = nil, enabled: Bool? = nil, privateKey: String? = nil, bundleId: String? = nil) {
            self.teamId = teamId
            self.defaultAuthenticationMethod = defaultAuthenticationMethod
            self.tokenKeyId = tokenKeyId
            self.tokenKey = tokenKey
            self.certificate = certificate
            self.enabled = enabled
            self.privateKey = privateKey
            self.bundleId = bundleId
        }

        private enum CodingKeys: String, CodingKey {
            case teamId = "TeamId"
            case defaultAuthenticationMethod = "DefaultAuthenticationMethod"
            case tokenKeyId = "TokenKeyId"
            case tokenKey = "TokenKey"
            case certificate = "Certificate"
            case enabled = "Enabled"
            case privateKey = "PrivateKey"
            case bundleId = "BundleId"
        }
    }

    public struct UpdateGcmChannelRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "GCMChannelRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GCMChannelRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let gCMChannelRequest: GCMChannelRequest
        public let applicationId: String

        public init(gCMChannelRequest: GCMChannelRequest, applicationId: String) {
            self.gCMChannelRequest = gCMChannelRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case gCMChannelRequest = "GCMChannelRequest"
            case applicationId = "application-id"
        }
    }

    public struct DeleteCampaignResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CampaignResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignResponse", required: true, type: .structure)
        ]
        public let campaignResponse: CampaignResponse

        public init(campaignResponse: CampaignResponse) {
            self.campaignResponse = campaignResponse
        }

        private enum CodingKeys: String, CodingKey {
            case campaignResponse = "CampaignResponse"
        }
    }

    public struct ADMMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IconReference", required: false, type: .string), 
            AWSShapeMember(label: "Data", required: false, type: .map), 
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "ImageIconUrl", required: false, type: .string), 
            AWSShapeMember(label: "SilentPush", required: false, type: .boolean), 
            AWSShapeMember(label: "SmallImageIconUrl", required: false, type: .string), 
            AWSShapeMember(label: "ConsolidationKey", required: false, type: .string), 
            AWSShapeMember(label: "Action", required: false, type: .enum), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "RawContent", required: false, type: .string), 
            AWSShapeMember(label: "MD5", required: false, type: .string), 
            AWSShapeMember(label: "Sound", required: false, type: .string), 
            AWSShapeMember(label: "ImageUrl", required: false, type: .string), 
            AWSShapeMember(label: "Body", required: false, type: .string), 
            AWSShapeMember(label: "ExpiresAfter", required: false, type: .string), 
            AWSShapeMember(label: "Substitutions", required: false, type: .map)
        ]
        /// The icon image name of the asset saved in your application.
        public let iconReference: String?
        /// The data payload used for a silent push. This payload is added to the notifications' data.pinpoint.jsonBody' object
        public let data: [String: String]?
        /// The message title that displays above the message on the user's device.
        public let title: String?
        /// The URL that points to an image used as the large icon to the notification content view.
        public let imageIconUrl: String?
        /// Indicates if the message should display on the users device. Silent pushes can be used for Remote Configuration and Phone Home use cases.
        public let silentPush: Bool?
        /// The URL that points to an image used as the small icon for the notification which will be used to represent the notification in the status bar and content view
        public let smallImageIconUrl: String?
        /// Optional. Arbitrary string used to indicate multiple messages are logically the same and that ADM is allowed to drop previously enqueued messages in favor of this one.
        public let consolidationKey: String?
        /// The action that occurs if the user taps a push notification delivered by the campaign: OPEN_APP - Your app launches, or it becomes the foreground app if it has been sent to the background. This is the default action. DEEP_LINK - Uses deep linking features in iOS and Android to open your app and display a designated user interface within the app. URL - The default mobile browser on the user's device launches and opens a web page at the URL you specify. Possible values include: OPEN_APP | DEEP_LINK | URL
        public let action: Action?
        /// The URL to open in the user's mobile browser. Used if the value for Action is URL.
        public let url: String?
        /// The Raw JSON formatted string to be used as the payload. This value overrides the message.
        public let rawContent: String?
        /// Optional. Base-64-encoded MD5 checksum of the data parameter. Used to verify data integrity
        public let md5: String?
        /// Indicates a sound to play when the device receives the notification. Supports default, or the filename of a sound resource bundled in the app. Android sound files must reside in /res/raw/
        public let sound: String?
        /// The URL that points to an image used in the push notification.
        public let imageUrl: String?
        /// The message body of the notification, the email body or the text message.
        public let body: String?
        /// Optional. Number of seconds ADM should retain the message if the device is offline
        public let expiresAfter: String?
        /// Default message substitutions. Can be overridden by individual address substitutions.
        public let substitutions: [String: [String]]?

        public init(iconReference: String? = nil, data: [String: String]? = nil, title: String? = nil, imageIconUrl: String? = nil, silentPush: Bool? = nil, smallImageIconUrl: String? = nil, consolidationKey: String? = nil, action: Action? = nil, url: String? = nil, rawContent: String? = nil, md5: String? = nil, sound: String? = nil, imageUrl: String? = nil, body: String? = nil, expiresAfter: String? = nil, substitutions: [String: [String]]? = nil) {
            self.iconReference = iconReference
            self.data = data
            self.title = title
            self.imageIconUrl = imageIconUrl
            self.silentPush = silentPush
            self.smallImageIconUrl = smallImageIconUrl
            self.consolidationKey = consolidationKey
            self.action = action
            self.url = url
            self.rawContent = rawContent
            self.md5 = md5
            self.sound = sound
            self.imageUrl = imageUrl
            self.body = body
            self.expiresAfter = expiresAfter
            self.substitutions = substitutions
        }

        private enum CodingKeys: String, CodingKey {
            case iconReference = "IconReference"
            case data = "Data"
            case title = "Title"
            case imageIconUrl = "ImageIconUrl"
            case silentPush = "SilentPush"
            case smallImageIconUrl = "SmallImageIconUrl"
            case consolidationKey = "ConsolidationKey"
            case action = "Action"
            case url = "Url"
            case rawContent = "RawContent"
            case md5 = "MD5"
            case sound = "Sound"
            case imageUrl = "ImageUrl"
            case body = "Body"
            case expiresAfter = "ExpiresAfter"
            case substitutions = "Substitutions"
        }
    }

    public struct CampaignLimits: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaximumDuration", required: false, type: .integer), 
            AWSShapeMember(label: "Daily", required: false, type: .integer), 
            AWSShapeMember(label: "MessagesPerSecond", required: false, type: .integer), 
            AWSShapeMember(label: "Total", required: false, type: .integer)
        ]
        /// The length of time (in seconds) that the campaign can run before it ends and message deliveries stop. This duration begins at the scheduled start time for the campaign. The minimum value is 60.
        public let maximumDuration: Int32?
        /// The maximum number of messages that the campaign can send daily.
        public let daily: Int32?
        /// The number of messages that the campaign can send per second. The minimum value is 50, and the maximum is 20000.
        public let messagesPerSecond: Int32?
        /// The maximum total number of messages that the campaign can send.
        public let total: Int32?

        public init(maximumDuration: Int32? = nil, daily: Int32? = nil, messagesPerSecond: Int32? = nil, total: Int32? = nil) {
            self.maximumDuration = maximumDuration
            self.daily = daily
            self.messagesPerSecond = messagesPerSecond
            self.total = total
        }

        private enum CodingKeys: String, CodingKey {
            case maximumDuration = "MaximumDuration"
            case daily = "Daily"
            case messagesPerSecond = "MessagesPerSecond"
            case total = "Total"
        }
    }

    public struct SegmentDemographics: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Make", required: false, type: .structure), 
            AWSShapeMember(label: "Platform", required: false, type: .structure), 
            AWSShapeMember(label: "DeviceType", required: false, type: .structure), 
            AWSShapeMember(label: "AppVersion", required: false, type: .structure), 
            AWSShapeMember(label: "Channel", required: false, type: .structure), 
            AWSShapeMember(label: "Model", required: false, type: .structure)
        ]
        /// The device make criteria for the segment.
        public let make: SetDimension?
        /// The device platform criteria for the segment.
        public let platform: SetDimension?
        /// The device type criteria for the segment.
        public let deviceType: SetDimension?
        /// The app version criteria for the segment.
        public let appVersion: SetDimension?
        /// The channel criteria for the segment.
        public let channel: SetDimension?
        /// The device model criteria for the segment.
        public let model: SetDimension?

        public init(make: SetDimension? = nil, platform: SetDimension? = nil, deviceType: SetDimension? = nil, appVersion: SetDimension? = nil, channel: SetDimension? = nil, model: SetDimension? = nil) {
            self.make = make
            self.platform = platform
            self.deviceType = deviceType
            self.appVersion = appVersion
            self.channel = channel
            self.model = model
        }

        private enum CodingKeys: String, CodingKey {
            case make = "Make"
            case platform = "Platform"
            case deviceType = "DeviceType"
            case appVersion = "AppVersion"
            case channel = "Channel"
            case model = "Model"
        }
    }

    public struct DeleteEventStreamResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EventStream"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventStream", required: true, type: .structure)
        ]
        public let eventStream: EventStream

        public init(eventStream: EventStream) {
            self.eventStream = eventStream
        }

        private enum CodingKeys: String, CodingKey {
            case eventStream = "EventStream"
        }
    }

    public struct EmailChannelResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "MessagesPerSecond", required: false, type: .integer), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "IsArchived", required: false, type: .boolean), 
            AWSShapeMember(label: "FromAddress", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "HasCredential", required: false, type: .boolean), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "Identity", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedBy", required: false, type: .string)
        ]
        /// Platform type. Will be "EMAIL"
        public let platform: String?
        /// Messages per second that can be sent
        public let messagesPerSecond: Int32?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// The date that the settings were last updated in ISO 8601 format.
        public let creationDate: String?
        /// Is this channel archived
        public let isArchived: Bool?
        /// The email address used to send emails from.
        public let fromAddress: String?
        /// Channel ID. Not used, only for backwards compatibility.
        public let id: String?
        /// Not used. Retained for backwards compatibility.
        public let hasCredential: Bool?
        /// Version of channel
        public let version: Int32?
        /// The ARN of an identity verified with SES.
        public let identity: String?
        /// Last date this was updated
        public let lastModifiedDate: String?
        /// The unique ID of the application to which the email channel belongs.
        public let applicationId: String?
        /// The ARN of an IAM Role used to submit events to Mobile Analytics' event ingestion service
        public let roleArn: String?
        /// Who last updated this entry
        public let lastModifiedBy: String?

        public init(platform: String? = nil, messagesPerSecond: Int32? = nil, enabled: Bool? = nil, creationDate: String? = nil, isArchived: Bool? = nil, fromAddress: String? = nil, id: String? = nil, hasCredential: Bool? = nil, version: Int32? = nil, identity: String? = nil, lastModifiedDate: String? = nil, applicationId: String? = nil, roleArn: String? = nil, lastModifiedBy: String? = nil) {
            self.platform = platform
            self.messagesPerSecond = messagesPerSecond
            self.enabled = enabled
            self.creationDate = creationDate
            self.isArchived = isArchived
            self.fromAddress = fromAddress
            self.id = id
            self.hasCredential = hasCredential
            self.version = version
            self.identity = identity
            self.lastModifiedDate = lastModifiedDate
            self.applicationId = applicationId
            self.roleArn = roleArn
            self.lastModifiedBy = lastModifiedBy
        }

        private enum CodingKeys: String, CodingKey {
            case platform = "Platform"
            case messagesPerSecond = "MessagesPerSecond"
            case enabled = "Enabled"
            case creationDate = "CreationDate"
            case isArchived = "IsArchived"
            case fromAddress = "FromAddress"
            case id = "Id"
            case hasCredential = "HasCredential"
            case version = "Version"
            case identity = "Identity"
            case lastModifiedDate = "LastModifiedDate"
            case applicationId = "ApplicationId"
            case roleArn = "RoleArn"
            case lastModifiedBy = "LastModifiedBy"
        }
    }

    public struct CreateSegmentResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SegmentResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentResponse", required: true, type: .structure)
        ]
        public let segmentResponse: SegmentResponse

        public init(segmentResponse: SegmentResponse) {
            self.segmentResponse = segmentResponse
        }

        private enum CodingKeys: String, CodingKey {
            case segmentResponse = "SegmentResponse"
        }
    }

    public struct UpdateApnsChannelRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSChannelRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSChannelRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let aPNSChannelRequest: APNSChannelRequest
        public let applicationId: String

        public init(aPNSChannelRequest: APNSChannelRequest, applicationId: String) {
            self.aPNSChannelRequest = aPNSChannelRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSChannelRequest = "APNSChannelRequest"
            case applicationId = "application-id"
        }
    }

    public struct UpdateCampaignRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "WriteCampaignRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "CampaignId", location: .uri(locationName: "campaign-id"), required: true, type: .string), 
            AWSShapeMember(label: "WriteCampaignRequest", required: true, type: .structure)
        ]
        public let applicationId: String
        public let campaignId: String
        public let writeCampaignRequest: WriteCampaignRequest

        public init(applicationId: String, campaignId: String, writeCampaignRequest: WriteCampaignRequest) {
            self.applicationId = applicationId
            self.campaignId = campaignId
            self.writeCampaignRequest = writeCampaignRequest
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
            case campaignId = "campaign-id"
            case writeCampaignRequest = "WriteCampaignRequest"
        }
    }

    public struct DeleteSegmentResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SegmentResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentResponse", required: true, type: .structure)
        ]
        public let segmentResponse: SegmentResponse

        public init(segmentResponse: SegmentResponse) {
            self.segmentResponse = segmentResponse
        }

        private enum CodingKeys: String, CodingKey {
            case segmentResponse = "SegmentResponse"
        }
    }

    public enum MessageType: String, CustomStringConvertible, Codable {
        case transactional = "TRANSACTIONAL"
        case promotional = "PROMOTIONAL"
        public var description: String { return self.rawValue }
    }

    public struct GetSegmentsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SegmentsResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentsResponse", required: true, type: .structure)
        ]
        public let segmentsResponse: SegmentsResponse

        public init(segmentsResponse: SegmentsResponse) {
            self.segmentsResponse = segmentsResponse
        }

        private enum CodingKeys: String, CodingKey {
            case segmentsResponse = "SegmentsResponse"
        }
    }

    public struct GetSegmentVersionResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SegmentResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentResponse", required: true, type: .structure)
        ]
        public let segmentResponse: SegmentResponse

        public init(segmentResponse: SegmentResponse) {
            self.segmentResponse = segmentResponse
        }

        private enum CodingKeys: String, CodingKey {
            case segmentResponse = "SegmentResponse"
        }
    }

    public struct APNSSandboxChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TeamId", required: false, type: .string), 
            AWSShapeMember(label: "DefaultAuthenticationMethod", required: false, type: .string), 
            AWSShapeMember(label: "TokenKeyId", required: false, type: .string), 
            AWSShapeMember(label: "TokenKey", required: false, type: .string), 
            AWSShapeMember(label: "Certificate", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateKey", required: false, type: .string), 
            AWSShapeMember(label: "BundleId", required: false, type: .string)
        ]
        /// The team id used for APNs Tokens.
        public let teamId: String?
        /// The default authentication method used for APNs.
        public let defaultAuthenticationMethod: String?
        /// The token key used for APNs Tokens.
        public let tokenKeyId: String?
        /// The token key used for APNs Tokens.
        public let tokenKey: String?
        /// The distribution certificate from Apple.
        public let certificate: String?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// The certificate private key.
        public let privateKey: String?
        /// The bundle id used for APNs Tokens.
        public let bundleId: String?

        public init(teamId: String? = nil, defaultAuthenticationMethod: String? = nil, tokenKeyId: String? = nil, tokenKey: String? = nil, certificate: String? = nil, enabled: Bool? = nil, privateKey: String? = nil, bundleId: String? = nil) {
            self.teamId = teamId
            self.defaultAuthenticationMethod = defaultAuthenticationMethod
            self.tokenKeyId = tokenKeyId
            self.tokenKey = tokenKey
            self.certificate = certificate
            self.enabled = enabled
            self.privateKey = privateKey
            self.bundleId = bundleId
        }

        private enum CodingKeys: String, CodingKey {
            case teamId = "TeamId"
            case defaultAuthenticationMethod = "DefaultAuthenticationMethod"
            case tokenKeyId = "TokenKeyId"
            case tokenKey = "TokenKey"
            case certificate = "Certificate"
            case enabled = "Enabled"
            case privateKey = "PrivateKey"
            case bundleId = "BundleId"
        }
    }

    public struct DeleteEmailChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct DeleteEmailChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EmailChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmailChannelResponse", required: true, type: .structure)
        ]
        public let emailChannelResponse: EmailChannelResponse

        public init(emailChannelResponse: EmailChannelResponse) {
            self.emailChannelResponse = emailChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case emailChannelResponse = "EmailChannelResponse"
        }
    }

    public struct MessageResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeliveryStatus", required: false, type: .enum), 
            AWSShapeMember(label: "StatusCode", required: false, type: .integer), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedToken", required: false, type: .string), 
            AWSShapeMember(label: "MessageId", required: false, type: .string)
        ]
        /// Delivery status of message.
        public let deliveryStatus: DeliveryStatus?
        /// Downstream service status code.
        public let statusCode: Int32?
        /// Status message for message delivery.
        public let statusMessage: String?
        /// If token was updated as part of delivery. (This is GCM Specific)
        public let updatedToken: String?
        /// Unique message identifier associated with the message that was sent.
        public let messageId: String?

        public init(deliveryStatus: DeliveryStatus? = nil, statusCode: Int32? = nil, statusMessage: String? = nil, updatedToken: String? = nil, messageId: String? = nil) {
            self.deliveryStatus = deliveryStatus
            self.statusCode = statusCode
            self.statusMessage = statusMessage
            self.updatedToken = updatedToken
            self.messageId = messageId
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStatus = "DeliveryStatus"
            case statusCode = "StatusCode"
            case statusMessage = "StatusMessage"
            case updatedToken = "UpdatedToken"
            case messageId = "MessageId"
        }
    }

    public struct GetEmailChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct GetApnsSandboxChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSSandboxChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSSandboxChannelResponse", required: true, type: .structure)
        ]
        public let aPNSSandboxChannelResponse: APNSSandboxChannelResponse

        public init(aPNSSandboxChannelResponse: APNSSandboxChannelResponse) {
            self.aPNSSandboxChannelResponse = aPNSSandboxChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSSandboxChannelResponse = "APNSSandboxChannelResponse"
        }
    }

    public struct ImportJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Item", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of import jobs for the application.
        public let item: [ImportJobResponse]?
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        public let nextToken: String?

        public init(item: [ImportJobResponse]? = nil, nextToken: String? = nil) {
            self.item = item
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteAppRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct CampaignSmsMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Body", required: false, type: .string), 
            AWSShapeMember(label: "SenderId", required: false, type: .string), 
            AWSShapeMember(label: "MessageType", required: false, type: .enum)
        ]
        /// The SMS text body.
        public let body: String?
        /// Sender ID of sent message.
        public let senderId: String?
        /// Is this is a transactional SMS message, otherwise a promotional message.
        public let messageType: MessageType?

        public init(body: String? = nil, senderId: String? = nil, messageType: MessageType? = nil) {
            self.body = body
            self.senderId = senderId
            self.messageType = messageType
        }

        private enum CodingKeys: String, CodingKey {
            case body = "Body"
            case senderId = "SenderId"
            case messageType = "MessageType"
        }
    }

    public struct DirectMessageConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GCMMessage", required: false, type: .structure), 
            AWSShapeMember(label: "SMSMessage", required: false, type: .structure), 
            AWSShapeMember(label: "APNSMessage", required: false, type: .structure), 
            AWSShapeMember(label: "ADMMessage", required: false, type: .structure), 
            AWSShapeMember(label: "DefaultMessage", required: false, type: .structure), 
            AWSShapeMember(label: "BaiduMessage", required: false, type: .structure), 
            AWSShapeMember(label: "DefaultPushNotificationMessage", required: false, type: .structure)
        ]
        /// The message to GCM channels. Overrides the default push notification message.
        public let gCMMessage: GCMMessage?
        /// The message to SMS channels. Overrides the default message.
        public let sMSMessage: SMSMessage?
        /// The message to APNS channels. Overrides the default push notification message.
        public let aPNSMessage: APNSMessage?
        /// The message to ADM channels. Overrides the default push notification message.
        public let aDMMessage: ADMMessage?
        /// The default message for all channels.
        public let defaultMessage: DefaultMessage?
        /// The message to Baidu GCM channels. Overrides the default push notification message.
        public let baiduMessage: BaiduMessage?
        /// The default push notification message for all push channels.
        public let defaultPushNotificationMessage: DefaultPushNotificationMessage?

        public init(gCMMessage: GCMMessage? = nil, sMSMessage: SMSMessage? = nil, aPNSMessage: APNSMessage? = nil, aDMMessage: ADMMessage? = nil, defaultMessage: DefaultMessage? = nil, baiduMessage: BaiduMessage? = nil, defaultPushNotificationMessage: DefaultPushNotificationMessage? = nil) {
            self.gCMMessage = gCMMessage
            self.sMSMessage = sMSMessage
            self.aPNSMessage = aPNSMessage
            self.aDMMessage = aDMMessage
            self.defaultMessage = defaultMessage
            self.baiduMessage = baiduMessage
            self.defaultPushNotificationMessage = defaultPushNotificationMessage
        }

        private enum CodingKeys: String, CodingKey {
            case gCMMessage = "GCMMessage"
            case sMSMessage = "SMSMessage"
            case aPNSMessage = "APNSMessage"
            case aDMMessage = "ADMMessage"
            case defaultMessage = "DefaultMessage"
            case baiduMessage = "BaiduMessage"
            case defaultPushNotificationMessage = "DefaultPushNotificationMessage"
        }
    }

    public struct MessageConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GCMMessage", required: false, type: .structure), 
            AWSShapeMember(label: "SMSMessage", required: false, type: .structure), 
            AWSShapeMember(label: "APNSMessage", required: false, type: .structure), 
            AWSShapeMember(label: "ADMMessage", required: false, type: .structure), 
            AWSShapeMember(label: "DefaultMessage", required: false, type: .structure), 
            AWSShapeMember(label: "EmailMessage", required: false, type: .structure), 
            AWSShapeMember(label: "BaiduMessage", required: false, type: .structure)
        ]
        /// The message that the campaign delivers to GCM channels. Overrides the default message.
        public let gCMMessage: Message?
        /// The SMS message configuration.
        public let sMSMessage: CampaignSmsMessage?
        /// The message that the campaign delivers to APNS channels. Overrides the default message.
        public let aPNSMessage: Message?
        /// The message that the campaign delivers to ADM channels. Overrides the default message.
        public let aDMMessage: Message?
        /// The default message for all channels.
        public let defaultMessage: Message?
        /// The email message configuration.
        public let emailMessage: CampaignEmailMessage?
        /// The message that the campaign delivers to Baidu channels. Overrides the default message.
        public let baiduMessage: Message?

        public init(gCMMessage: Message? = nil, sMSMessage: CampaignSmsMessage? = nil, aPNSMessage: Message? = nil, aDMMessage: Message? = nil, defaultMessage: Message? = nil, emailMessage: CampaignEmailMessage? = nil, baiduMessage: Message? = nil) {
            self.gCMMessage = gCMMessage
            self.sMSMessage = sMSMessage
            self.aPNSMessage = aPNSMessage
            self.aDMMessage = aDMMessage
            self.defaultMessage = defaultMessage
            self.emailMessage = emailMessage
            self.baiduMessage = baiduMessage
        }

        private enum CodingKeys: String, CodingKey {
            case gCMMessage = "GCMMessage"
            case sMSMessage = "SMSMessage"
            case aPNSMessage = "APNSMessage"
            case aDMMessage = "ADMMessage"
            case defaultMessage = "DefaultMessage"
            case emailMessage = "EmailMessage"
            case baiduMessage = "BaiduMessage"
        }
    }

    public enum SegmentType: String, CustomStringConvertible, Codable {
        case dimensional = "DIMENSIONAL"
        case `import` = "IMPORT"
        public var description: String { return self.rawValue }
    }

    public struct GCMMessage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RestrictedPackageName", required: false, type: .string), 
            AWSShapeMember(label: "IconReference", required: false, type: .string), 
            AWSShapeMember(label: "CollapseKey", required: false, type: .string), 
            AWSShapeMember(label: "Data", required: false, type: .map), 
            AWSShapeMember(label: "Priority", required: false, type: .string), 
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "ImageIconUrl", required: false, type: .string), 
            AWSShapeMember(label: "SilentPush", required: false, type: .boolean), 
            AWSShapeMember(label: "SmallImageIconUrl", required: false, type: .string), 
            AWSShapeMember(label: "Action", required: false, type: .enum), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "RawContent", required: false, type: .string), 
            AWSShapeMember(label: "Sound", required: false, type: .string), 
            AWSShapeMember(label: "TimeToLive", required: false, type: .integer), 
            AWSShapeMember(label: "Body", required: false, type: .string), 
            AWSShapeMember(label: "ImageUrl", required: false, type: .string), 
            AWSShapeMember(label: "Substitutions", required: false, type: .map)
        ]
        /// This parameter specifies the package name of the application where the registration tokens must match in order to receive the message.
        public let restrictedPackageName: String?
        /// The icon image name of the asset saved in your application.
        public let iconReference: String?
        /// This parameter identifies a group of messages (e.g., with collapse_key: "Updates Available") that can be collapsed, so that only the last message gets sent when delivery can be resumed. This is intended to avoid sending too many of the same messages when the device comes back online or becomes active.
        public let collapseKey: String?
        /// The data payload used for a silent push. This payload is added to the notifications' data.pinpoint.jsonBody' object
        public let data: [String: String]?
        /// The message priority. Amazon Pinpoint uses this value to set the FCM or GCM priority parameter when it sends the message. Accepts the following values:
        /// "Normal" - Messages might be delayed. Delivery is optimized for battery usage on the receiving device. Use normal priority unless immediate delivery is required.
        /// "High" - Messages are sent immediately and might wake a sleeping device.
        /// The equivalent values for APNs messages are "5" and "10". Amazon Pinpoint accepts these values here and converts them.
        /// For more information, see About FCM Messages in the Firebase documentation.
        public let priority: String?
        /// The message title that displays above the message on the user's device.
        public let title: String?
        /// The URL that points to an image used as the large icon to the notification content view.
        public let imageIconUrl: String?
        /// Indicates if the message should display on the users device. Silent pushes can be used for Remote Configuration and Phone Home use cases.
        public let silentPush: Bool?
        /// The URL that points to an image used as the small icon for the notification which will be used to represent the notification in the status bar and content view
        public let smallImageIconUrl: String?
        /// The action that occurs if the user taps a push notification delivered by the campaign: OPEN_APP - Your app launches, or it becomes the foreground app if it has been sent to the background. This is the default action. DEEP_LINK - Uses deep linking features in iOS and Android to open your app and display a designated user interface within the app. URL - The default mobile browser on the user's device launches and opens a web page at the URL you specify. Possible values include: OPEN_APP | DEEP_LINK | URL
        public let action: Action?
        /// The URL to open in the user's mobile browser. Used if the value for Action is URL.
        public let url: String?
        /// The Raw JSON formatted string to be used as the payload. This value overrides the message.
        public let rawContent: String?
        /// Indicates a sound to play when the device receives the notification. Supports default, or the filename of a sound resource bundled in the app. Android sound files must reside in /res/raw/
        public let sound: String?
        /// The length of time (in seconds) that FCM or GCM stores and attempts to deliver the message. If unspecified, the value defaults to the maximum, which is 2,419,200 seconds (28 days). Amazon Pinpoint uses this value to set the FCM or GCM time_to_live parameter.
        public let timeToLive: Int32?
        /// The message body of the notification, the email body or the text message.
        public let body: String?
        /// The URL that points to an image used in the push notification.
        public let imageUrl: String?
        /// Default message substitutions. Can be overridden by individual address substitutions.
        public let substitutions: [String: [String]]?

        public init(restrictedPackageName: String? = nil, iconReference: String? = nil, collapseKey: String? = nil, data: [String: String]? = nil, priority: String? = nil, title: String? = nil, imageIconUrl: String? = nil, silentPush: Bool? = nil, smallImageIconUrl: String? = nil, action: Action? = nil, url: String? = nil, rawContent: String? = nil, sound: String? = nil, timeToLive: Int32? = nil, body: String? = nil, imageUrl: String? = nil, substitutions: [String: [String]]? = nil) {
            self.restrictedPackageName = restrictedPackageName
            self.iconReference = iconReference
            self.collapseKey = collapseKey
            self.data = data
            self.priority = priority
            self.title = title
            self.imageIconUrl = imageIconUrl
            self.silentPush = silentPush
            self.smallImageIconUrl = smallImageIconUrl
            self.action = action
            self.url = url
            self.rawContent = rawContent
            self.sound = sound
            self.timeToLive = timeToLive
            self.body = body
            self.imageUrl = imageUrl
            self.substitutions = substitutions
        }

        private enum CodingKeys: String, CodingKey {
            case restrictedPackageName = "RestrictedPackageName"
            case iconReference = "IconReference"
            case collapseKey = "CollapseKey"
            case data = "Data"
            case priority = "Priority"
            case title = "Title"
            case imageIconUrl = "ImageIconUrl"
            case silentPush = "SilentPush"
            case smallImageIconUrl = "SmallImageIconUrl"
            case action = "Action"
            case url = "Url"
            case rawContent = "RawContent"
            case sound = "Sound"
            case timeToLive = "TimeToLive"
            case body = "Body"
            case imageUrl = "ImageUrl"
            case substitutions = "Substitutions"
        }
    }

    public struct DeleteApnsSandboxChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSSandboxChannelResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSSandboxChannelResponse", required: true, type: .structure)
        ]
        public let aPNSSandboxChannelResponse: APNSSandboxChannelResponse

        public init(aPNSSandboxChannelResponse: APNSSandboxChannelResponse) {
            self.aPNSSandboxChannelResponse = aPNSSandboxChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSSandboxChannelResponse = "APNSSandboxChannelResponse"
        }
    }

    public struct SendUsersMessageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Result", required: false, type: .map), 
            AWSShapeMember(label: "RequestId", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string)
        ]
        /// An object that shows the endpoints that were messaged for each user. The object provides a list of user IDs. For each user ID, it provides the endpoint IDs that were messaged. For each endpoint ID, it provides an EndpointMessageResult object.
        public let result: [String: [String: EndpointMessageResult]]?
        /// The unique ID assigned to the users-messages request.
        public let requestId: String?
        /// The unique ID of the Amazon Pinpoint project used to send the message.
        public let applicationId: String?

        public init(result: [String: [String: EndpointMessageResult]]? = nil, requestId: String? = nil, applicationId: String? = nil) {
            self.result = result
            self.requestId = requestId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
            case applicationId = "ApplicationId"
        }
    }

    public struct GetBaiduChannelRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct WriteSegmentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentGroups", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Dimensions", required: false, type: .structure)
        ]
        /// Segment definition groups. We currently only support one. If specified Dimensions must be empty.
        public let segmentGroups: SegmentGroupList?
        /// The name of segment
        public let name: String?
        /// The segment dimensions attributes.
        public let dimensions: SegmentDimensions?

        public init(segmentGroups: SegmentGroupList? = nil, name: String? = nil, dimensions: SegmentDimensions? = nil) {
            self.segmentGroups = segmentGroups
            self.name = name
            self.dimensions = dimensions
        }

        private enum CodingKeys: String, CodingKey {
            case segmentGroups = "SegmentGroups"
            case name = "Name"
            case dimensions = "Dimensions"
        }
    }

    public struct CreateExportJobRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ExportJobRequest"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExportJobRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let exportJobRequest: ExportJobRequest
        public let applicationId: String

        public init(exportJobRequest: ExportJobRequest, applicationId: String) {
            self.exportJobRequest = exportJobRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case exportJobRequest = "ExportJobRequest"
            case applicationId = "application-id"
        }
    }

    public struct GetUserEndpointsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EndpointsResponse"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointsResponse", required: true, type: .structure)
        ]
        public let endpointsResponse: EndpointsResponse

        public init(endpointsResponse: EndpointsResponse) {
            self.endpointsResponse = endpointsResponse
        }

        private enum CodingKeys: String, CodingKey {
            case endpointsResponse = "EndpointsResponse"
        }
    }

    public struct RemoveAttributesResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "AttributesResource"
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributesResource", required: true, type: .structure)
        ]
        public let attributesResource: AttributesResource

        public init(attributesResource: AttributesResource) {
            self.attributesResource = attributesResource
        }

        private enum CodingKeys: String, CodingKey {
            case attributesResource = "AttributesResource"
        }
    }

}