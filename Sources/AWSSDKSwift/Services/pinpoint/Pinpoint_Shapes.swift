// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Pinpoint {

    public struct GetCampaignActivitiesRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", location: .querystring(locationName: "page-size"), required: false, type: .string), 
            AWSShapeMember(label: "CampaignId", location: .uri(locationName: "campaign-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "Token", location: .querystring(locationName: "token"), required: false, type: .string)
        ]
        public let pageSize: String?
        public let campaignId: String
        public let applicationId: String
        public let token: String?

        public init(pageSize: String? = nil, campaignId: String, applicationId: String, token: String? = nil) {
            self.pageSize = pageSize
            self.campaignId = campaignId
            self.applicationId = applicationId
            self.token = token
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "page-size"
            case campaignId = "campaign-id"
            case applicationId = "application-id"
            case token = "token"
        }
    }

    public struct SendMessagesResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MessageResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MessageResponse", required: true, type: .structure)
        ]
        public let messageResponse: MessageResponse

        public init(messageResponse: MessageResponse) {
            self.messageResponse = messageResponse
        }

        private enum CodingKeys: String, CodingKey {
            case messageResponse = "MessageResponse"
        }
    }

    public struct UpdateEndpointsBatchResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MessageBody"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MessageBody", required: true, type: .structure)
        ]
        public let messageBody: MessageBody

        public init(messageBody: MessageBody) {
            self.messageBody = messageBody
        }

        private enum CodingKeys: String, CodingKey {
            case messageBody = "MessageBody"
        }
    }

    public struct EndpointRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointStatus", required: false, type: .string), 
            AWSShapeMember(label: "OptOut", required: false, type: .string), 
            AWSShapeMember(label: "Metrics", required: false, type: .map), 
            AWSShapeMember(label: "EffectiveDate", required: false, type: .string), 
            AWSShapeMember(label: "Address", required: false, type: .string), 
            AWSShapeMember(label: "Location", required: false, type: .structure), 
            AWSShapeMember(label: "Demographic", required: false, type: .structure), 
            AWSShapeMember(label: "Attributes", required: false, type: .map), 
            AWSShapeMember(label: "RequestId", required: false, type: .string), 
            AWSShapeMember(label: "User", required: false, type: .structure), 
            AWSShapeMember(label: "ChannelType", required: false, type: .enum)
        ]
        /// The endpoint status. Can be either ACTIVE or INACTIVE. Will be set to INACTIVE if a delivery fails. Will be set to ACTIVE if the address is updated.
        public let endpointStatus: String?
        /// Indicates whether a user has opted out of receiving messages with one of the following values:
        /// ALL – User receives all messages.
        /// NONE – User receives no messages.
        public let optOut: String?
        public let metrics: [String: Double]?
        /// The last time the endpoint was updated. Provided in ISO 8601 format.
        public let effectiveDate: String?
        /// The address or token of the endpoint as provided by your push provider (e.g. DeviceToken or RegistrationId).
        public let address: String?
        /// The endpoint location attributes.
        public let location: EndpointLocation?
        /// The endpoint demographic attributes.
        public let demographic: EndpointDemographic?
        public let attributes: [String: [String]]?
        /// The unique ID for the most recent request to update the endpoint.
        public let requestId: String?
        /// Custom user-specific attributes that your app reports to Amazon Pinpoint.
        public let user: EndpointUser?
        /// The channel type.
        /// Valid values: APNS, GCM
        public let channelType: ChannelType?

        public init(endpointStatus: String? = nil, optOut: String? = nil, metrics: [String: Double]? = nil, effectiveDate: String? = nil, address: String? = nil, location: EndpointLocation? = nil, demographic: EndpointDemographic? = nil, attributes: [String: [String]]? = nil, requestId: String? = nil, user: EndpointUser? = nil, channelType: ChannelType? = nil) {
            self.endpointStatus = endpointStatus
            self.optOut = optOut
            self.metrics = metrics
            self.effectiveDate = effectiveDate
            self.address = address
            self.location = location
            self.demographic = demographic
            self.attributes = attributes
            self.requestId = requestId
            self.user = user
            self.channelType = channelType
        }

        private enum CodingKeys: String, CodingKey {
            case endpointStatus = "EndpointStatus"
            case optOut = "OptOut"
            case metrics = "Metrics"
            case effectiveDate = "EffectiveDate"
            case address = "Address"
            case location = "Location"
            case demographic = "Demographic"
            case attributes = "Attributes"
            case requestId = "RequestId"
            case user = "User"
            case channelType = "ChannelType"
        }
    }

    public struct UpdateApplicationSettingsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ApplicationSettingsResource"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationSettingsResource", required: true, type: .structure)
        ]
        public let applicationSettingsResource: ApplicationSettingsResource

        public init(applicationSettingsResource: ApplicationSettingsResource) {
            self.applicationSettingsResource = applicationSettingsResource
        }

        private enum CodingKeys: String, CodingKey {
            case applicationSettingsResource = "ApplicationSettingsResource"
        }
    }

    public struct EndpointBatchRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Item", required: false, type: .list)
        ]
        /// List of items to update. Maximum 100 items
        public let item: [EndpointBatchItem]?

        public init(item: [EndpointBatchItem]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
        }
    }

    public struct GCMChannelRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApiKey", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// Platform credential API key from Google.
        public let apiKey: String?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?

        public init(apiKey: String? = nil, enabled: Bool? = nil) {
            self.apiKey = apiKey
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case apiKey = "ApiKey"
            case enabled = "Enabled"
        }
    }

    public enum Format: String, CustomStringConvertible, Codable {
        case csv = "CSV"
        case json = "JSON"
        public var description: String { return self.rawValue }
    }

    public struct GetGcmChannelRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct CreateCampaignRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "WriteCampaignRequest"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "WriteCampaignRequest", required: true, type: .structure)
        ]
        public let applicationId: String
        public let writeCampaignRequest: WriteCampaignRequest

        public init(applicationId: String, writeCampaignRequest: WriteCampaignRequest) {
            self.applicationId = applicationId
            self.writeCampaignRequest = writeCampaignRequest
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
            case writeCampaignRequest = "WriteCampaignRequest"
        }
    }

    public struct GetSegmentRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentId", location: .uri(locationName: "segment-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let segmentId: String
        public let applicationId: String

        public init(segmentId: String, applicationId: String) {
            self.segmentId = segmentId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case segmentId = "segment-id"
            case applicationId = "application-id"
        }
    }

    public struct QuietTime: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "End", required: false, type: .string), 
            AWSShapeMember(label: "Start", required: false, type: .string)
        ]
        /// The default end time for quiet time in ISO 8601 format.
        public let end: String?
        /// The default start time for quiet time in ISO 8601 format.
        public let start: String?

        public init(end: String? = nil, start: String? = nil) {
            self.end = end
            self.start = start
        }

        private enum CodingKeys: String, CodingKey {
            case end = "End"
            case start = "Start"
        }
    }

    public struct DeleteApnsChannelRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct DeleteCampaignRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignId", location: .uri(locationName: "campaign-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let campaignId: String
        public let applicationId: String

        public init(campaignId: String, applicationId: String) {
            self.campaignId = campaignId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case campaignId = "campaign-id"
            case applicationId = "application-id"
        }
    }

    public enum Action: String, CustomStringConvertible, Codable {
        case openApp = "OPEN_APP"
        case deepLink = "DEEP_LINK"
        case url = "URL"
        public var description: String { return self.rawValue }
    }

    public struct EmailChannelRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FromAddress", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "Identity", required: false, type: .string)
        ]
        /// The email address used to send emails from.
        public let fromAddress: String?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// The ARN of an IAM Role used to submit events to Mobile Analytics' event ingestion service
        public let roleArn: String?
        /// The ARN of an identity verified with SES.
        public let identity: String?

        public init(fromAddress: String? = nil, enabled: Bool? = nil, roleArn: String? = nil, identity: String? = nil) {
            self.fromAddress = fromAddress
            self.enabled = enabled
            self.roleArn = roleArn
            self.identity = identity
        }

        private enum CodingKeys: String, CodingKey {
            case fromAddress = "FromAddress"
            case enabled = "Enabled"
            case roleArn = "RoleArn"
            case identity = "Identity"
        }
    }

    public struct DeleteGcmChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "GCMChannelResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GCMChannelResponse", required: true, type: .structure)
        ]
        public let gCMChannelResponse: GCMChannelResponse

        public init(gCMChannelResponse: GCMChannelResponse) {
            self.gCMChannelResponse = gCMChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case gCMChannelResponse = "GCMChannelResponse"
        }
    }

    public struct UpdateSmsChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SMSChannelResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SMSChannelResponse", required: true, type: .structure)
        ]
        public let sMSChannelResponse: SMSChannelResponse

        public init(sMSChannelResponse: SMSChannelResponse) {
            self.sMSChannelResponse = sMSChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case sMSChannelResponse = "SMSChannelResponse"
        }
    }

    public struct GetImportJobResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ImportJobResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportJobResponse", required: true, type: .structure)
        ]
        public let importJobResponse: ImportJobResponse

        public init(importJobResponse: ImportJobResponse) {
            self.importJobResponse = importJobResponse
        }

        private enum CodingKeys: String, CodingKey {
            case importJobResponse = "ImportJobResponse"
        }
    }

    public struct GetSegmentsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", location: .querystring(locationName: "page-size"), required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "Token", location: .querystring(locationName: "token"), required: false, type: .string)
        ]
        public let pageSize: String?
        public let applicationId: String
        public let token: String?

        public init(pageSize: String? = nil, applicationId: String, token: String? = nil) {
            self.pageSize = pageSize
            self.applicationId = applicationId
            self.token = token
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "page-size"
            case applicationId = "application-id"
            case token = "token"
        }
    }

    public struct CreateSegmentRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "WriteSegmentRequest"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "WriteSegmentRequest", required: true, type: .structure)
        ]
        public let applicationId: String
        public let writeSegmentRequest: WriteSegmentRequest

        public init(applicationId: String, writeSegmentRequest: WriteSegmentRequest) {
            self.applicationId = applicationId
            self.writeSegmentRequest = writeSegmentRequest
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
            case writeSegmentRequest = "WriteSegmentRequest"
        }
    }

    public struct GetSegmentVersionsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", location: .querystring(locationName: "page-size"), required: false, type: .string), 
            AWSShapeMember(label: "Token", location: .querystring(locationName: "token"), required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "SegmentId", location: .uri(locationName: "segment-id"), required: true, type: .string)
        ]
        public let pageSize: String?
        public let token: String?
        public let applicationId: String
        public let segmentId: String

        public init(pageSize: String? = nil, token: String? = nil, applicationId: String, segmentId: String) {
            self.pageSize = pageSize
            self.token = token
            self.applicationId = applicationId
            self.segmentId = segmentId
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "page-size"
            case token = "token"
            case applicationId = "application-id"
            case segmentId = "segment-id"
        }
    }

    public struct UpdateApnsSandboxChannelRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSSandboxChannelRequest"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSSandboxChannelRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let aPNSSandboxChannelRequest: APNSSandboxChannelRequest
        public let applicationId: String

        public init(aPNSSandboxChannelRequest: APNSSandboxChannelRequest, applicationId: String) {
            self.aPNSSandboxChannelRequest = aPNSSandboxChannelRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSSandboxChannelRequest = "APNSSandboxChannelRequest"
            case applicationId = "application-id"
        }
    }

    public struct AddressConfiguration: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TitleOverride", required: false, type: .string), 
            AWSShapeMember(label: "Context", required: false, type: .map), 
            AWSShapeMember(label: "BodyOverride", required: false, type: .string), 
            AWSShapeMember(label: "RawContent", required: false, type: .string), 
            AWSShapeMember(label: "ChannelType", required: false, type: .enum), 
            AWSShapeMember(label: "Substitutions", required: false, type: .map)
        ]
        /// Title override. If specified will override default title if applicable.
        public let titleOverride: String?
        public let context: [String: String]?
        /// Body override. If specified will override default body.
        public let bodyOverride: String?
        /// The Raw JSON formatted string to be used as the payload. This value overrides the message.
        public let rawContent: String?
        /// Type of channel of this address
        public let channelType: ChannelType?
        public let substitutions: [String: [String]]?

        public init(titleOverride: String? = nil, context: [String: String]? = nil, bodyOverride: String? = nil, rawContent: String? = nil, channelType: ChannelType? = nil, substitutions: [String: [String]]? = nil) {
            self.titleOverride = titleOverride
            self.context = context
            self.bodyOverride = bodyOverride
            self.rawContent = rawContent
            self.channelType = channelType
            self.substitutions = substitutions
        }

        private enum CodingKeys: String, CodingKey {
            case titleOverride = "TitleOverride"
            case context = "Context"
            case bodyOverride = "BodyOverride"
            case rawContent = "RawContent"
            case channelType = "ChannelType"
            case substitutions = "Substitutions"
        }
    }

    public struct Message: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageSmallIconUrl", required: false, type: .string), 
            AWSShapeMember(label: "Action", required: false, type: .enum), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "MediaUrl", required: false, type: .string), 
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "ImageUrl", required: false, type: .string), 
            AWSShapeMember(label: "SilentPush", required: false, type: .boolean), 
            AWSShapeMember(label: "JsonBody", required: false, type: .string), 
            AWSShapeMember(label: "Body", required: false, type: .string), 
            AWSShapeMember(label: "ImageIconUrl", required: false, type: .string)
        ]
        /// The URL that points to the small icon image for the push notification icon, for example, the app icon.
        public let imageSmallIconUrl: String?
        /// The action that occurs if the user taps a push notification delivered by the campaign:
        /// OPEN_APP - Your app launches, or it becomes the foreground app if it has been sent to the background. This is the default action.
        /// DEEP_LINK - Uses deep linking features in iOS and Android to open your app and display a designated user interface within the app.
        /// URL - The default mobile browser on the user's device launches and opens a web page at the URL you specify.
        public let action: Action?
        /// The URL to open in the user's mobile browser. Used if the value for Action is URL.
        public let url: String?
        /// The URL that points to the media resource, for example a .mp4 or .gif file.
        public let mediaUrl: String?
        /// The message title that displays above the message on the user's device.
        public let title: String?
        /// The URL that points to an image used in the push notification.
        public let imageUrl: String?
        /// Indicates if the message should display on the users device.
        /// Silent pushes can be used for Remote Configuration and Phone Home use cases. 
        public let silentPush: Bool?
        /// The JSON payload used for a silent push.
        public let jsonBody: String?
        /// The message body. Can include up to 140 characters.
        public let body: String?
        /// The URL that points to the icon image for the push notification icon, for example, the app icon.
        public let imageIconUrl: String?

        public init(imageSmallIconUrl: String? = nil, action: Action? = nil, url: String? = nil, mediaUrl: String? = nil, title: String? = nil, imageUrl: String? = nil, silentPush: Bool? = nil, jsonBody: String? = nil, body: String? = nil, imageIconUrl: String? = nil) {
            self.imageSmallIconUrl = imageSmallIconUrl
            self.action = action
            self.url = url
            self.mediaUrl = mediaUrl
            self.title = title
            self.imageUrl = imageUrl
            self.silentPush = silentPush
            self.jsonBody = jsonBody
            self.body = body
            self.imageIconUrl = imageIconUrl
        }

        private enum CodingKeys: String, CodingKey {
            case imageSmallIconUrl = "ImageSmallIconUrl"
            case action = "Action"
            case url = "Url"
            case mediaUrl = "MediaUrl"
            case title = "Title"
            case imageUrl = "ImageUrl"
            case silentPush = "SilentPush"
            case jsonBody = "JsonBody"
            case body = "Body"
            case imageIconUrl = "ImageIconUrl"
        }
    }

    public struct SMSChannelResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShortCode", required: false, type: .string), 
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "SenderId", required: false, type: .string), 
            AWSShapeMember(label: "IsArchived", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedBy", required: false, type: .string)
        ]
        /// The short code registered with the phone provider.
        public let shortCode: String?
        /// Platform type. Will be "SMS"
        public let platform: String?
        /// Channel ID. Not used, only for backwards compatibility.
        public let id: String?
        /// Version of channel
        public let version: Int32?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// Last date this was updated
        public let lastModifiedDate: String?
        /// The date that the settings were last updated in ISO 8601 format.
        public let creationDate: String?
        /// Application id
        public let applicationId: String?
        /// Sender identifier of your messages.
        public let senderId: String?
        /// Is this channel archived
        public let isArchived: Bool?
        /// Who last updated this entry
        public let lastModifiedBy: String?

        public init(shortCode: String? = nil, platform: String? = nil, id: String? = nil, version: Int32? = nil, enabled: Bool? = nil, lastModifiedDate: String? = nil, creationDate: String? = nil, applicationId: String? = nil, senderId: String? = nil, isArchived: Bool? = nil, lastModifiedBy: String? = nil) {
            self.shortCode = shortCode
            self.platform = platform
            self.id = id
            self.version = version
            self.enabled = enabled
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.applicationId = applicationId
            self.senderId = senderId
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
        }

        private enum CodingKeys: String, CodingKey {
            case shortCode = "ShortCode"
            case platform = "Platform"
            case id = "Id"
            case version = "Version"
            case enabled = "Enabled"
            case lastModifiedDate = "LastModifiedDate"
            case creationDate = "CreationDate"
            case applicationId = "ApplicationId"
            case senderId = "SenderId"
            case isArchived = "IsArchived"
            case lastModifiedBy = "LastModifiedBy"
        }
    }

    public struct UpdateEmailChannelRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EmailChannelRequest"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmailChannelRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let emailChannelRequest: EmailChannelRequest
        public let applicationId: String

        public init(emailChannelRequest: EmailChannelRequest, applicationId: String) {
            self.emailChannelRequest = emailChannelRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case emailChannelRequest = "EmailChannelRequest"
            case applicationId = "application-id"
        }
    }

    public struct GetApplicationSettingsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct GetSegmentVersionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "SegmentId", location: .uri(locationName: "segment-id"), required: true, type: .string), 
            AWSShapeMember(label: "Version", location: .uri(locationName: "version"), required: true, type: .string)
        ]
        public let applicationId: String
        public let segmentId: String
        public let version: String

        public init(applicationId: String, segmentId: String, version: String) {
            self.applicationId = applicationId
            self.segmentId = segmentId
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
            case segmentId = "segment-id"
            case version = "version"
        }
    }

    public struct SegmentLocation: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Country", required: false, type: .structure)
        ]
        /// The country filter according to ISO 3166-1 Alpha-2 codes.
        public let country: SetDimension?

        public init(country: SetDimension? = nil) {
            self.country = country
        }

        private enum CodingKeys: String, CodingKey {
            case country = "Country"
        }
    }

    public struct SMSChannelRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SenderId", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// Sender identifier of your messages.
        public let senderId: String?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?

        public init(senderId: String? = nil, enabled: Bool? = nil) {
            self.senderId = senderId
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case senderId = "SenderId"
            case enabled = "Enabled"
        }
    }

    public struct WriteCampaignRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TreatmentName", required: false, type: .string), 
            AWSShapeMember(label: "SegmentVersion", required: false, type: .integer), 
            AWSShapeMember(label: "AdditionalTreatments", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "TreatmentDescription", required: false, type: .string), 
            AWSShapeMember(label: "HoldoutPercent", required: false, type: .integer), 
            AWSShapeMember(label: "Limits", required: false, type: .structure), 
            AWSShapeMember(label: "Schedule", required: false, type: .structure), 
            AWSShapeMember(label: "MessageConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SegmentId", required: false, type: .string), 
            AWSShapeMember(label: "IsPaused", required: false, type: .boolean), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The custom name of a variation of the campaign used for A/B testing.
        public let treatmentName: String?
        /// The version of the segment to which the campaign sends messages.
        public let segmentVersion: Int32?
        /// Treatments that are defined in addition to the default treatment.
        public let additionalTreatments: [WriteTreatmentResource]?
        /// The custom name of the campaign.
        public let name: String?
        /// A custom description for the treatment.
        public let treatmentDescription: String?
        /// The allocated percentage of end users who will not receive messages from this campaign.
        public let holdoutPercent: Int32?
        /// The campaign limits settings.
        public let limits: CampaignLimits?
        /// The campaign schedule.
        public let schedule: Schedule?
        /// The message configuration settings.
        public let messageConfiguration: MessageConfiguration?
        /// The ID of the segment to which the campaign sends messages.
        public let segmentId: String?
        /// Indicates whether the campaign is paused. A paused campaign does not send messages unless you resume it by setting IsPaused to false.
        public let isPaused: Bool?
        /// A description of the campaign.
        public let description: String?

        public init(treatmentName: String? = nil, segmentVersion: Int32? = nil, additionalTreatments: [WriteTreatmentResource]? = nil, name: String? = nil, treatmentDescription: String? = nil, holdoutPercent: Int32? = nil, limits: CampaignLimits? = nil, schedule: Schedule? = nil, messageConfiguration: MessageConfiguration? = nil, segmentId: String? = nil, isPaused: Bool? = nil, description: String? = nil) {
            self.treatmentName = treatmentName
            self.segmentVersion = segmentVersion
            self.additionalTreatments = additionalTreatments
            self.name = name
            self.treatmentDescription = treatmentDescription
            self.holdoutPercent = holdoutPercent
            self.limits = limits
            self.schedule = schedule
            self.messageConfiguration = messageConfiguration
            self.segmentId = segmentId
            self.isPaused = isPaused
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case treatmentName = "TreatmentName"
            case segmentVersion = "SegmentVersion"
            case additionalTreatments = "AdditionalTreatments"
            case name = "Name"
            case treatmentDescription = "TreatmentDescription"
            case holdoutPercent = "HoldoutPercent"
            case limits = "Limits"
            case schedule = "Schedule"
            case messageConfiguration = "MessageConfiguration"
            case segmentId = "SegmentId"
            case isPaused = "IsPaused"
            case description = "Description"
        }
    }

    public struct UpdateApplicationSettingsRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "WriteApplicationSettingsRequest"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "WriteApplicationSettingsRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let writeApplicationSettingsRequest: WriteApplicationSettingsRequest
        public let applicationId: String

        public init(writeApplicationSettingsRequest: WriteApplicationSettingsRequest, applicationId: String) {
            self.writeApplicationSettingsRequest = writeApplicationSettingsRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case writeApplicationSettingsRequest = "WriteApplicationSettingsRequest"
            case applicationId = "application-id"
        }
    }

    public struct WriteTreatmentResource: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Schedule", required: false, type: .structure), 
            AWSShapeMember(label: "TreatmentDescription", required: false, type: .string), 
            AWSShapeMember(label: "MessageConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SizePercent", required: false, type: .integer), 
            AWSShapeMember(label: "TreatmentName", required: false, type: .string)
        ]
        /// The campaign schedule.
        public let schedule: Schedule?
        /// A custom description for the treatment.
        public let treatmentDescription: String?
        /// The message configuration settings.
        public let messageConfiguration: MessageConfiguration?
        /// The allocated percentage of users for this treatment.
        public let sizePercent: Int32?
        /// The custom name of a variation of the campaign used for A/B testing.
        public let treatmentName: String?

        public init(schedule: Schedule? = nil, treatmentDescription: String? = nil, messageConfiguration: MessageConfiguration? = nil, sizePercent: Int32? = nil, treatmentName: String? = nil) {
            self.schedule = schedule
            self.treatmentDescription = treatmentDescription
            self.messageConfiguration = messageConfiguration
            self.sizePercent = sizePercent
            self.treatmentName = treatmentName
        }

        private enum CodingKeys: String, CodingKey {
            case schedule = "Schedule"
            case treatmentDescription = "TreatmentDescription"
            case messageConfiguration = "MessageConfiguration"
            case sizePercent = "SizePercent"
            case treatmentName = "TreatmentName"
        }
    }

    public struct TreatmentResource: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TreatmentName", required: false, type: .string), 
            AWSShapeMember(label: "TreatmentDescription", required: false, type: .string), 
            AWSShapeMember(label: "SizePercent", required: false, type: .integer), 
            AWSShapeMember(label: "State", required: false, type: .structure), 
            AWSShapeMember(label: "Schedule", required: false, type: .structure), 
            AWSShapeMember(label: "MessageConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The custom name of a variation of the campaign used for A/B testing.
        public let treatmentName: String?
        /// A custom description for the treatment.
        public let treatmentDescription: String?
        /// The allocated percentage of users for this treatment.
        public let sizePercent: Int32?
        /// The treatment status.
        public let state: CampaignState?
        /// The campaign schedule.
        public let schedule: Schedule?
        /// The message configuration settings.
        public let messageConfiguration: MessageConfiguration?
        /// The unique treatment ID.
        public let id: String?

        public init(treatmentName: String? = nil, treatmentDescription: String? = nil, sizePercent: Int32? = nil, state: CampaignState? = nil, schedule: Schedule? = nil, messageConfiguration: MessageConfiguration? = nil, id: String? = nil) {
            self.treatmentName = treatmentName
            self.treatmentDescription = treatmentDescription
            self.sizePercent = sizePercent
            self.state = state
            self.schedule = schedule
            self.messageConfiguration = messageConfiguration
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case treatmentName = "TreatmentName"
            case treatmentDescription = "TreatmentDescription"
            case sizePercent = "SizePercent"
            case state = "State"
            case schedule = "Schedule"
            case messageConfiguration = "MessageConfiguration"
            case id = "Id"
        }
    }

    public struct EventStream: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExternalId", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "DestinationStreamArn", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "LastUpdatedBy", required: false, type: .string)
        ]
        /// The external ID assigned the IAM role that authorizes Amazon Pinpoint to publish to the stream.
        public let externalId: String?
        /// The date the event stream was last updated in ISO 8601 format.
        public let lastModifiedDate: String?
        /// The Amazon Resource Name (ARN) of the Amazon Kinesis stream or Firehose delivery stream to which you want to publish events.
        ///  Firehose ARN: arn:aws:firehose:REGION:ACCOUNT_ID:deliverystream/STREAM_NAME
        ///  Kinesis ARN: arn:aws:kinesis:REGION:ACCOUNT_ID:stream/STREAM_NAME
        public let destinationStreamArn: String?
        /// The ID of the application from which events should be published.
        public let applicationId: String?
        /// The IAM role that authorizes Amazon Pinpoint to publish events to the stream in your account.
        public let roleArn: String?
        /// The IAM user who last modified the event stream.
        public let lastUpdatedBy: String?

        public init(externalId: String? = nil, lastModifiedDate: String? = nil, destinationStreamArn: String? = nil, applicationId: String? = nil, roleArn: String? = nil, lastUpdatedBy: String? = nil) {
            self.externalId = externalId
            self.lastModifiedDate = lastModifiedDate
            self.destinationStreamArn = destinationStreamArn
            self.applicationId = applicationId
            self.roleArn = roleArn
            self.lastUpdatedBy = lastUpdatedBy
        }

        private enum CodingKeys: String, CodingKey {
            case externalId = "ExternalId"
            case lastModifiedDate = "LastModifiedDate"
            case destinationStreamArn = "DestinationStreamArn"
            case applicationId = "ApplicationId"
            case roleArn = "RoleArn"
            case lastUpdatedBy = "LastUpdatedBy"
        }
    }

    public struct EndpointResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "User", required: false, type: .structure), 
            AWSShapeMember(label: "ShardId", required: false, type: .string), 
            AWSShapeMember(label: "OptOut", required: false, type: .string), 
            AWSShapeMember(label: "Metrics", required: false, type: .map), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "CohortId", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "EffectiveDate", required: false, type: .string), 
            AWSShapeMember(label: "Location", required: false, type: .structure), 
            AWSShapeMember(label: "Address", required: false, type: .string), 
            AWSShapeMember(label: "Demographic", required: false, type: .structure), 
            AWSShapeMember(label: "Attributes", required: false, type: .map), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "RequestId", required: false, type: .string), 
            AWSShapeMember(label: "ChannelType", required: false, type: .enum), 
            AWSShapeMember(label: "EndpointStatus", required: false, type: .string)
        ]
        /// Custom user-specific attributes that your app reports to Amazon Pinpoint.
        public let user: EndpointUser?
        public let shardId: String?
        /// Indicates whether a user has opted out of receiving messages with one of the following values:
        /// ALL – User receives all messages.
        /// NONE – User receives no messages.
        public let optOut: String?
        public let metrics: [String: Double]?
        /// The last time the endpoint was created. Provided in ISO 8601 format.
        public let creationDate: String?
        /// A number from 0 - 99 that represents the cohort the endpoint is assigned to. Endpoints are grouped into cohorts randomly, and each cohort contains approximately 1 percent of the endpoints for an app. Amazon Pinpoint assigns cohorts to the holdout or treatment allocations for a campaign.
        public let cohortId: String?
        /// The unique ID that you assigned to the endpoint. The ID should be a globally unique identifier (GUID) to ensure that it is unique compared to all other endpoints for the application.
        public let id: String?
        /// The last time the endpoint was updated. Provided in ISO 8601 format.
        public let effectiveDate: String?
        /// The endpoint location attributes.
        public let location: EndpointLocation?
        /// The address or token of the endpoint as provided by your push provider (e.g. DeviceToken or RegistrationId).
        public let address: String?
        /// The endpoint demographic attributes.
        public let demographic: EndpointDemographic?
        public let attributes: [String: [String]]?
        /// The ID of the application associated with the endpoint.
        public let applicationId: String?
        /// The unique ID for the most recent request to update the endpoint.
        public let requestId: String?
        /// The channel type.
        /// Valid values: APNS, GCM
        public let channelType: ChannelType?
        /// The endpoint status. Can be either ACTIVE or INACTIVE. Will be set to INACTIVE if a delivery fails. Will be set to ACTIVE if the address is updated.
        public let endpointStatus: String?

        public init(user: EndpointUser? = nil, shardId: String? = nil, optOut: String? = nil, metrics: [String: Double]? = nil, creationDate: String? = nil, cohortId: String? = nil, id: String? = nil, effectiveDate: String? = nil, location: EndpointLocation? = nil, address: String? = nil, demographic: EndpointDemographic? = nil, attributes: [String: [String]]? = nil, applicationId: String? = nil, requestId: String? = nil, channelType: ChannelType? = nil, endpointStatus: String? = nil) {
            self.user = user
            self.shardId = shardId
            self.optOut = optOut
            self.metrics = metrics
            self.creationDate = creationDate
            self.cohortId = cohortId
            self.id = id
            self.effectiveDate = effectiveDate
            self.location = location
            self.address = address
            self.demographic = demographic
            self.attributes = attributes
            self.applicationId = applicationId
            self.requestId = requestId
            self.channelType = channelType
            self.endpointStatus = endpointStatus
        }

        private enum CodingKeys: String, CodingKey {
            case user = "User"
            case shardId = "ShardId"
            case optOut = "OptOut"
            case metrics = "Metrics"
            case creationDate = "CreationDate"
            case cohortId = "CohortId"
            case id = "Id"
            case effectiveDate = "EffectiveDate"
            case location = "Location"
            case address = "Address"
            case demographic = "Demographic"
            case attributes = "Attributes"
            case applicationId = "ApplicationId"
            case requestId = "RequestId"
            case channelType = "ChannelType"
            case endpointStatus = "EndpointStatus"
        }
    }

    public struct DeleteSmsChannelRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct GetImportJobRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", location: .uri(locationName: "job-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let jobId: String
        public let applicationId: String

        public init(jobId: String, applicationId: String) {
            self.jobId = jobId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "job-id"
            case applicationId = "application-id"
        }
    }

    public struct SMSMessage: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SenderId", required: false, type: .string), 
            AWSShapeMember(label: "MessageType", required: false, type: .enum), 
            AWSShapeMember(label: "Body", required: false, type: .string), 
            AWSShapeMember(label: "Substitutions", required: false, type: .map)
        ]
        /// Sender ID of sent message.
        public let senderId: String?
        /// Is this a transaction priority message or lower priority.
        public let messageType: MessageType?
        /// The message body of the notification, the email body or the text message.
        public let body: String?
        public let substitutions: [String: [String]]?

        public init(senderId: String? = nil, messageType: MessageType? = nil, body: String? = nil, substitutions: [String: [String]]? = nil) {
            self.senderId = senderId
            self.messageType = messageType
            self.body = body
            self.substitutions = substitutions
        }

        private enum CodingKeys: String, CodingKey {
            case senderId = "SenderId"
            case messageType = "MessageType"
            case body = "Body"
            case substitutions = "Substitutions"
        }
    }

    public struct DeleteApnsSandboxChannelRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct DeleteSmsChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SMSChannelResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SMSChannelResponse", required: true, type: .structure)
        ]
        public let sMSChannelResponse: SMSChannelResponse

        public init(sMSChannelResponse: SMSChannelResponse) {
            self.sMSChannelResponse = sMSChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case sMSChannelResponse = "SMSChannelResponse"
        }
    }

    public struct CampaignResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limits", required: false, type: .structure), 
            AWSShapeMember(label: "TreatmentName", required: false, type: .string), 
            AWSShapeMember(label: "SegmentVersion", required: false, type: .integer), 
            AWSShapeMember(label: "State", required: false, type: .structure), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "Schedule", required: false, type: .structure), 
            AWSShapeMember(label: "MessageConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SegmentId", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "TreatmentDescription", required: false, type: .string), 
            AWSShapeMember(label: "AdditionalTreatments", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "HoldoutPercent", required: false, type: .integer), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "IsPaused", required: false, type: .boolean), 
            AWSShapeMember(label: "DefaultState", required: false, type: .structure)
        ]
        /// The campaign limits settings.
        public let limits: CampaignLimits?
        /// The custom name of a variation of the campaign used for A/B testing.
        public let treatmentName: String?
        /// The version of the segment to which the campaign sends messages.
        public let segmentVersion: Int32?
        /// The campaign status.
        /// An A/B test campaign will have a status of COMPLETED only when all treatments have a status of COMPLETED.
        public let state: CampaignState?
        /// The date the campaign was created in ISO 8601 format.
        public let creationDate: String?
        /// The campaign schedule.
        public let schedule: Schedule?
        /// The message configuration settings.
        public let messageConfiguration: MessageConfiguration?
        /// The ID of the segment to which the campaign sends messages.
        public let segmentId: String?
        /// The unique campaign ID.
        public let id: String?
        /// A description of the campaign.
        public let description: String?
        /// A custom description for the treatment.
        public let treatmentDescription: String?
        /// Treatments that are defined in addition to the default treatment.
        public let additionalTreatments: [TreatmentResource]?
        /// The custom name of the campaign.
        public let name: String?
        /// The allocated percentage of end users who will not receive messages from this campaign.
        public let holdoutPercent: Int32?
        /// The campaign version number.
        public let version: Int32?
        /// The date the campaign was last updated in ISO 8601 format.	
        public let lastModifiedDate: String?
        /// The ID of the application to which the campaign applies.
        public let applicationId: String?
        /// Indicates whether the campaign is paused. A paused campaign does not send messages unless you resume it by setting IsPaused to false.
        public let isPaused: Bool?
        /// The status of the campaign's default treatment. Only present for A/B test campaigns.
        public let defaultState: CampaignState?

        public init(limits: CampaignLimits? = nil, treatmentName: String? = nil, segmentVersion: Int32? = nil, state: CampaignState? = nil, creationDate: String? = nil, schedule: Schedule? = nil, messageConfiguration: MessageConfiguration? = nil, segmentId: String? = nil, id: String? = nil, description: String? = nil, treatmentDescription: String? = nil, additionalTreatments: [TreatmentResource]? = nil, name: String? = nil, holdoutPercent: Int32? = nil, version: Int32? = nil, lastModifiedDate: String? = nil, applicationId: String? = nil, isPaused: Bool? = nil, defaultState: CampaignState? = nil) {
            self.limits = limits
            self.treatmentName = treatmentName
            self.segmentVersion = segmentVersion
            self.state = state
            self.creationDate = creationDate
            self.schedule = schedule
            self.messageConfiguration = messageConfiguration
            self.segmentId = segmentId
            self.id = id
            self.description = description
            self.treatmentDescription = treatmentDescription
            self.additionalTreatments = additionalTreatments
            self.name = name
            self.holdoutPercent = holdoutPercent
            self.version = version
            self.lastModifiedDate = lastModifiedDate
            self.applicationId = applicationId
            self.isPaused = isPaused
            self.defaultState = defaultState
        }

        private enum CodingKeys: String, CodingKey {
            case limits = "Limits"
            case treatmentName = "TreatmentName"
            case segmentVersion = "SegmentVersion"
            case state = "State"
            case creationDate = "CreationDate"
            case schedule = "Schedule"
            case messageConfiguration = "MessageConfiguration"
            case segmentId = "SegmentId"
            case id = "Id"
            case description = "Description"
            case treatmentDescription = "TreatmentDescription"
            case additionalTreatments = "AdditionalTreatments"
            case name = "Name"
            case holdoutPercent = "HoldoutPercent"
            case version = "Version"
            case lastModifiedDate = "LastModifiedDate"
            case applicationId = "ApplicationId"
            case isPaused = "IsPaused"
            case defaultState = "DefaultState"
        }
    }

    public enum Frequency: String, CustomStringConvertible, Codable {
        case once = "ONCE"
        case hourly = "HOURLY"
        case daily = "DAILY"
        case weekly = "WEEKLY"
        case monthly = "MONTHLY"
        public var description: String { return self.rawValue }
    }

    public struct GetSmsChannelRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct MessageRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MessageConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Context", required: false, type: .map), 
            AWSShapeMember(label: "Addresses", required: false, type: .map)
        ]
        /// Message configuration.
        public let messageConfiguration: DirectMessageConfiguration?
        public let context: [String: String]?
        /// A map of destination addresses, with the address as the key(Email address, phone number or push token) and the Address Configuration as the value.
        public let addresses: [String: AddressConfiguration]?

        public init(messageConfiguration: DirectMessageConfiguration? = nil, context: [String: String]? = nil, addresses: [String: AddressConfiguration]? = nil) {
            self.messageConfiguration = messageConfiguration
            self.context = context
            self.addresses = addresses
        }

        private enum CodingKeys: String, CodingKey {
            case messageConfiguration = "MessageConfiguration"
            case context = "Context"
            case addresses = "Addresses"
        }
    }

    public struct GetCampaignRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignId", location: .uri(locationName: "campaign-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let campaignId: String
        public let applicationId: String

        public init(campaignId: String, applicationId: String) {
            self.campaignId = campaignId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case campaignId = "campaign-id"
            case applicationId = "application-id"
        }
    }

    public struct WriteApplicationSettingsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limits", required: false, type: .structure), 
            AWSShapeMember(label: "QuietTime", required: false, type: .structure)
        ]
        /// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own.
        public let limits: CampaignLimits?
        /// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own.
        public let quietTime: QuietTime?

        public init(limits: CampaignLimits? = nil, quietTime: QuietTime? = nil) {
            self.limits = limits
            self.quietTime = quietTime
        }

        private enum CodingKeys: String, CodingKey {
            case limits = "Limits"
            case quietTime = "QuietTime"
        }
    }

    public struct UpdateGcmChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "GCMChannelResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GCMChannelResponse", required: true, type: .structure)
        ]
        public let gCMChannelResponse: GCMChannelResponse

        public init(gCMChannelResponse: GCMChannelResponse) {
            self.gCMChannelResponse = gCMChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case gCMChannelResponse = "GCMChannelResponse"
        }
    }

    public struct APNSMessage: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ThreadId", required: false, type: .string), 
            AWSShapeMember(label: "Data", required: false, type: .map), 
            AWSShapeMember(label: "MediaUrl", required: false, type: .string), 
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "SilentPush", required: false, type: .boolean), 
            AWSShapeMember(label: "Badge", required: false, type: .integer), 
            AWSShapeMember(label: "Action", required: false, type: .enum), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "RawContent", required: false, type: .string), 
            AWSShapeMember(label: "Category", required: false, type: .string), 
            AWSShapeMember(label: "Sound", required: false, type: .string), 
            AWSShapeMember(label: "Body", required: false, type: .string), 
            AWSShapeMember(label: "Substitutions", required: false, type: .map)
        ]
        /// Provide this key with a string value that represents the app-specific identifier for grouping notifications. If you provide a Notification Content app extension, you can use this value to group your notifications together.
        public let threadId: String?
        public let data: [String: String]?
        /// The URL that points to a video used in the push notification.
        public let mediaUrl: String?
        /// The message title that displays above the message on the user's device.
        public let title: String?
        /// Indicates if the message should display on the users device. Silent pushes can be used for Remote Configuration and Phone Home use cases.
        public let silentPush: Bool?
        /// Include this key when you want the system to modify the badge of your app icon. If this key is not included in the dictionary, the badge is not changed. To remove the badge, set the value of this key to 0.
        public let badge: Int32?
        /// The action that occurs if the user taps a push notification delivered by the campaign: OPEN_APP - Your app launches, or it becomes the foreground app if it has been sent to the background. This is the default action. DEEP_LINK - Uses deep linking features in iOS and Android to open your app and display a designated user interface within the app. URL - The default mobile browser on the user's device launches and opens a web page at the URL you specify. Possible values include: OPEN_APP | DEEP_LINK | URL
        public let action: Action?
        /// The URL to open in the user's mobile browser. Used if the value for Action is URL.
        public let url: String?
        /// The Raw JSON formatted string to be used as the payload. This value overrides the message.
        public let rawContent: String?
        /// Provide this key with a string value that represents the notification's type. This value corresponds to the value in the identifier property of one of your app's registered categories.
        public let category: String?
        /// Include this key when you want the system to play a sound. The value of this key is the name of a sound file in your app's main bundle or in the Library/Sounds folder of your app's data container. If the sound file cannot be found, or if you specify defaultfor the value, the system plays the default alert sound.
        public let sound: String?
        /// The message body of the notification, the email body or the text message.
        public let body: String?
        public let substitutions: [String: [String]]?

        public init(threadId: String? = nil, data: [String: String]? = nil, mediaUrl: String? = nil, title: String? = nil, silentPush: Bool? = nil, badge: Int32? = nil, action: Action? = nil, url: String? = nil, rawContent: String? = nil, category: String? = nil, sound: String? = nil, body: String? = nil, substitutions: [String: [String]]? = nil) {
            self.threadId = threadId
            self.data = data
            self.mediaUrl = mediaUrl
            self.title = title
            self.silentPush = silentPush
            self.badge = badge
            self.action = action
            self.url = url
            self.rawContent = rawContent
            self.category = category
            self.sound = sound
            self.body = body
            self.substitutions = substitutions
        }

        private enum CodingKeys: String, CodingKey {
            case threadId = "ThreadId"
            case data = "Data"
            case mediaUrl = "MediaUrl"
            case title = "Title"
            case silentPush = "SilentPush"
            case badge = "Badge"
            case action = "Action"
            case url = "Url"
            case rawContent = "RawContent"
            case category = "Category"
            case sound = "Sound"
            case body = "Body"
            case substitutions = "Substitutions"
        }
    }

    public struct GetSegmentImportJobsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ImportJobsResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportJobsResponse", required: true, type: .structure)
        ]
        public let importJobsResponse: ImportJobsResponse

        public init(importJobsResponse: ImportJobsResponse) {
            self.importJobsResponse = importJobsResponse
        }

        private enum CodingKeys: String, CodingKey {
            case importJobsResponse = "ImportJobsResponse"
        }
    }

    public struct UpdateEndpointRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EndpointRequest"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointRequest", required: true, type: .structure), 
            AWSShapeMember(label: "EndpointId", location: .uri(locationName: "endpoint-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let endpointRequest: EndpointRequest
        public let endpointId: String
        public let applicationId: String

        public init(endpointRequest: EndpointRequest, endpointId: String, applicationId: String) {
            self.endpointRequest = endpointRequest
            self.endpointId = endpointId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case endpointRequest = "EndpointRequest"
            case endpointId = "endpoint-id"
            case applicationId = "application-id"
        }
    }

    public struct DefaultPushNotificationMessage: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Action", required: false, type: .enum), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "Data", required: false, type: .map), 
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "SilentPush", required: false, type: .boolean), 
            AWSShapeMember(label: "Body", required: false, type: .string), 
            AWSShapeMember(label: "Substitutions", required: false, type: .map)
        ]
        /// The action that occurs if the user taps a push notification delivered by the campaign: OPEN_APP - Your app launches, or it becomes the foreground app if it has been sent to the background. This is the default action. DEEP_LINK - Uses deep linking features in iOS and Android to open your app and display a designated user interface within the app. URL - The default mobile browser on the user's device launches and opens a web page at the URL you specify. Possible values include: OPEN_APP | DEEP_LINK | URL
        public let action: Action?
        /// The URL to open in the user's mobile browser. Used if the value for Action is URL.
        public let url: String?
        public let data: [String: String]?
        /// The message title that displays above the message on the user's device.
        public let title: String?
        /// Indicates if the message should display on the users device. Silent pushes can be used for Remote Configuration and Phone Home use cases.
        public let silentPush: Bool?
        /// The message body of the notification, the email body or the text message.
        public let body: String?
        public let substitutions: [String: [String]]?

        public init(action: Action? = nil, url: String? = nil, data: [String: String]? = nil, title: String? = nil, silentPush: Bool? = nil, body: String? = nil, substitutions: [String: [String]]? = nil) {
            self.action = action
            self.url = url
            self.data = data
            self.title = title
            self.silentPush = silentPush
            self.body = body
            self.substitutions = substitutions
        }

        private enum CodingKeys: String, CodingKey {
            case action = "Action"
            case url = "Url"
            case data = "Data"
            case title = "Title"
            case silentPush = "SilentPush"
            case body = "Body"
            case substitutions = "Substitutions"
        }
    }

    public enum Duration: String, CustomStringConvertible, Codable {
        case hr24 = "HR_24"
        case day7 = "DAY_7"
        case day14 = "DAY_14"
        case day30 = "DAY_30"
        public var description: String { return self.rawValue }
    }

    public enum ChannelType: String, CustomStringConvertible, Codable {
        case gcm = "GCM"
        case apns = "APNS"
        case apnsSandbox = "APNS_SANDBOX"
        case adm = "ADM"
        case sms = "SMS"
        case email = "EMAIL"
        public var description: String { return self.rawValue }
    }

    public struct GetSmsChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SMSChannelResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SMSChannelResponse", required: true, type: .structure)
        ]
        public let sMSChannelResponse: SMSChannelResponse

        public init(sMSChannelResponse: SMSChannelResponse) {
            self.sMSChannelResponse = sMSChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case sMSChannelResponse = "SMSChannelResponse"
        }
    }

    public struct MessageResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Result", required: false, type: .map), 
            AWSShapeMember(label: "RequestId", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string)
        ]
        /// A map containing a multi part response for each address, with the address as the key(Email address, phone number or push token) and the result as the value.
        public let result: [String: MessageResult]?
        /// Original request Id for which this message was delivered.
        public let requestId: String?
        /// Application id of the message.
        public let applicationId: String?

        public init(result: [String: MessageResult]? = nil, requestId: String? = nil, applicationId: String? = nil) {
            self.result = result
            self.requestId = requestId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case result = "Result"
            case requestId = "RequestId"
            case applicationId = "ApplicationId"
        }
    }

    public struct UpdateEmailChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EmailChannelResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmailChannelResponse", required: true, type: .structure)
        ]
        public let emailChannelResponse: EmailChannelResponse

        public init(emailChannelResponse: EmailChannelResponse) {
            self.emailChannelResponse = emailChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case emailChannelResponse = "EmailChannelResponse"
        }
    }

    public enum AttributeType: String, CustomStringConvertible, Codable {
        case inclusive = "INCLUSIVE"
        case exclusive = "EXCLUSIVE"
        public var description: String { return self.rawValue }
    }

    public struct CampaignsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Item", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of campaigns.
        public let item: [CampaignResponse]?
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        public let nextToken: String?

        public init(item: [CampaignResponse]? = nil, nextToken: String? = nil) {
            self.item = item
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
            case nextToken = "NextToken"
        }
    }

    public struct GCMChannelResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "Credential", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "IsArchived", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedBy", required: false, type: .string)
        ]
        /// Channel ID. Not used, only for backwards compatibility.
        public let id: String?
        /// The platform type. Will be GCM
        public let platform: String?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// Version of channel
        public let version: Int32?
        /// Last date this was updated
        public let lastModifiedDate: String?
        /// The GCM API key from Google.
        public let credential: String?
        /// The ID of the application to which the channel applies.
        public let applicationId: String?
        /// When was this segment created
        public let creationDate: String?
        /// Is this channel archived
        public let isArchived: Bool?
        /// Who last updated this entry
        public let lastModifiedBy: String?

        public init(id: String? = nil, platform: String? = nil, enabled: Bool? = nil, version: Int32? = nil, lastModifiedDate: String? = nil, credential: String? = nil, applicationId: String? = nil, creationDate: String? = nil, isArchived: Bool? = nil, lastModifiedBy: String? = nil) {
            self.id = id
            self.platform = platform
            self.enabled = enabled
            self.version = version
            self.lastModifiedDate = lastModifiedDate
            self.credential = credential
            self.applicationId = applicationId
            self.creationDate = creationDate
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case platform = "Platform"
            case enabled = "Enabled"
            case version = "Version"
            case lastModifiedDate = "LastModifiedDate"
            case credential = "Credential"
            case applicationId = "ApplicationId"
            case creationDate = "CreationDate"
            case isArchived = "IsArchived"
            case lastModifiedBy = "LastModifiedBy"
        }
    }

    public struct DefaultMessage: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Body", required: false, type: .string), 
            AWSShapeMember(label: "Substitutions", required: false, type: .map)
        ]
        /// The message body of the notification, the email body or the text message.
        public let body: String?
        public let substitutions: [String: [String]]?

        public init(body: String? = nil, substitutions: [String: [String]]? = nil) {
            self.body = body
            self.substitutions = substitutions
        }

        private enum CodingKeys: String, CodingKey {
            case body = "Body"
            case substitutions = "Substitutions"
        }
    }

    public struct ActivitiesResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Item", required: false, type: .list)
        ]
        /// List of campaign activities
        public let item: [ActivityResponse]?

        public init(item: [ActivityResponse]? = nil) {
            self.item = item
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
        }
    }

    public struct RecencyDimension: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Duration", required: false, type: .enum), 
            AWSShapeMember(label: "RecencyType", required: false, type: .enum)
        ]
        /// The length of time during which users have been active or inactive with your app.
        /// Valid values: HR_24, DAY_7, DAY_14, DAY_30
        public let duration: Duration?
        /// The recency dimension type:
        /// ACTIVE - Users who have used your app within the specified duration are included in the segment.
        /// INACTIVE - Users who have not used your app within the specified duration are included in the segment.
        public let recencyType: RecencyType?

        public init(duration: Duration? = nil, recencyType: RecencyType? = nil) {
            self.duration = duration
            self.recencyType = recencyType
        }

        private enum CodingKeys: String, CodingKey {
            case duration = "Duration"
            case recencyType = "RecencyType"
        }
    }

    public struct EndpointLocation: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Longitude", required: false, type: .double), 
            AWSShapeMember(label: "Country", required: false, type: .string), 
            AWSShapeMember(label: "PostalCode", required: false, type: .string), 
            AWSShapeMember(label: "City", required: false, type: .string), 
            AWSShapeMember(label: "Latitude", required: false, type: .double), 
            AWSShapeMember(label: "Region", required: false, type: .string)
        ]
        /// The longitude of the endpoint location. Rounded to one decimal (Roughly corresponding to a mile).
        public let longitude: Double?
        /// Country according to ISO 3166-1 Alpha-2 codes. For example, US.
        public let country: String?
        /// The postal code or zip code of the endpoint.
        public let postalCode: String?
        /// The city where the endpoint is located.
        public let city: String?
        /// The latitude of the endpoint location. Rounded to one decimal (Roughly corresponding to a mile).
        public let latitude: Double?
        /// The region of the endpoint location. For example, corresponds to a state in US.
        public let region: String?

        public init(longitude: Double? = nil, country: String? = nil, postalCode: String? = nil, city: String? = nil, latitude: Double? = nil, region: String? = nil) {
            self.longitude = longitude
            self.country = country
            self.postalCode = postalCode
            self.city = city
            self.latitude = latitude
            self.region = region
        }

        private enum CodingKeys: String, CodingKey {
            case longitude = "Longitude"
            case country = "Country"
            case postalCode = "PostalCode"
            case city = "City"
            case latitude = "Latitude"
            case region = "Region"
        }
    }

    public struct Schedule: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .string), 
            AWSShapeMember(label: "Frequency", required: false, type: .enum), 
            AWSShapeMember(label: "QuietTime", required: false, type: .structure), 
            AWSShapeMember(label: "IsLocalTime", required: false, type: .boolean), 
            AWSShapeMember(label: "Timezone", required: false, type: .string)
        ]
        /// The scheduled time that the campaign begins in ISO 8601 format.
        public let startTime: String?
        /// The scheduled time that the campaign ends in ISO 8601 format.
        public let endTime: String?
        /// How often the campaign delivers messages.
        /// Valid values: ONCE, HOURLY, DAILY, WEEKLY, MONTHLY
        public let frequency: Frequency?
        /// The time during which the campaign sends no messages.
        public let quietTime: QuietTime?
        /// Indicates whether the campaign schedule takes effect according to each user's local time.
        public let isLocalTime: Bool?
        /// The starting UTC offset for the schedule if the value for isLocalTime is true
        /// Valid values: 
        /// UTC
        /// UTC+01
        /// UTC+02
        /// UTC+03
        /// UTC+03:30
        /// UTC+04
        /// UTC+04:30
        /// UTC+05
        /// UTC+05:30
        /// UTC+05:45
        /// UTC+06
        /// UTC+06:30
        /// UTC+07
        /// UTC+08
        /// UTC+09
        /// UTC+09:30
        /// UTC+10
        /// UTC+10:30
        /// UTC+11
        /// UTC+12
        /// UTC+13
        /// UTC-02
        /// UTC-03
        /// UTC-04
        /// UTC-05
        /// UTC-06
        /// UTC-07
        /// UTC-08
        /// UTC-09
        /// UTC-10
        /// UTC-11
        public let timezone: String?

        public init(startTime: String? = nil, endTime: String? = nil, frequency: Frequency? = nil, quietTime: QuietTime? = nil, isLocalTime: Bool? = nil, timezone: String? = nil) {
            self.startTime = startTime
            self.endTime = endTime
            self.frequency = frequency
            self.quietTime = quietTime
            self.isLocalTime = isLocalTime
            self.timezone = timezone
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case frequency = "Frequency"
            case quietTime = "QuietTime"
            case isLocalTime = "IsLocalTime"
            case timezone = "Timezone"
        }
    }

    public struct GetEndpointResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EndpointResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointResponse", required: true, type: .structure)
        ]
        public let endpointResponse: EndpointResponse

        public init(endpointResponse: EndpointResponse) {
            self.endpointResponse = endpointResponse
        }

        private enum CodingKeys: String, CodingKey {
            case endpointResponse = "EndpointResponse"
        }
    }

    public struct EndpointBatchItem: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChannelType", required: false, type: .enum), 
            AWSShapeMember(label: "User", required: false, type: .structure), 
            AWSShapeMember(label: "EffectiveDate", required: false, type: .string), 
            AWSShapeMember(label: "OptOut", required: false, type: .string), 
            AWSShapeMember(label: "Metrics", required: false, type: .map), 
            AWSShapeMember(label: "Location", required: false, type: .structure), 
            AWSShapeMember(label: "Address", required: false, type: .string), 
            AWSShapeMember(label: "Demographic", required: false, type: .structure), 
            AWSShapeMember(label: "Attributes", required: false, type: .map), 
            AWSShapeMember(label: "RequestId", required: false, type: .string), 
            AWSShapeMember(label: "EndpointStatus", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The channel type.
        /// Valid values: APNS, GCM
        public let channelType: ChannelType?
        /// Custom user-specific attributes that your app reports to Amazon Pinpoint.
        public let user: EndpointUser?
        /// The last time the endpoint was updated. Provided in ISO 8601 format.
        public let effectiveDate: String?
        /// Indicates whether a user has opted out of receiving messages with one of the following values:
        /// ALL – User receives all messages.
        /// NONE – User receives no messages.
        public let optOut: String?
        public let metrics: [String: Double]?
        /// The endpoint location attributes.
        public let location: EndpointLocation?
        /// The address or token of the endpoint as provided by your push provider (e.g. DeviceToken or RegistrationId).
        public let address: String?
        /// The endpoint demographic attributes.
        public let demographic: EndpointDemographic?
        public let attributes: [String: [String]]?
        /// The unique ID for the most recent request to update the endpoint.
        public let requestId: String?
        /// The endpoint status. Can be either ACTIVE or INACTIVE. Will be set to INACTIVE if a delivery fails. Will be set to ACTIVE if the address is updated.
        public let endpointStatus: String?
        /// The unique Id for the Endpoint in the batch.
        public let id: String?

        public init(channelType: ChannelType? = nil, user: EndpointUser? = nil, effectiveDate: String? = nil, optOut: String? = nil, metrics: [String: Double]? = nil, location: EndpointLocation? = nil, address: String? = nil, demographic: EndpointDemographic? = nil, attributes: [String: [String]]? = nil, requestId: String? = nil, endpointStatus: String? = nil, id: String? = nil) {
            self.channelType = channelType
            self.user = user
            self.effectiveDate = effectiveDate
            self.optOut = optOut
            self.metrics = metrics
            self.location = location
            self.address = address
            self.demographic = demographic
            self.attributes = attributes
            self.requestId = requestId
            self.endpointStatus = endpointStatus
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case channelType = "ChannelType"
            case user = "User"
            case effectiveDate = "EffectiveDate"
            case optOut = "OptOut"
            case metrics = "Metrics"
            case location = "Location"
            case address = "Address"
            case demographic = "Demographic"
            case attributes = "Attributes"
            case requestId = "RequestId"
            case endpointStatus = "EndpointStatus"
            case id = "Id"
        }
    }

    public struct GetApnsChannelRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct GetApnsChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSChannelResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSChannelResponse", required: true, type: .structure)
        ]
        public let aPNSChannelResponse: APNSChannelResponse

        public init(aPNSChannelResponse: APNSChannelResponse) {
            self.aPNSChannelResponse = aPNSChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSChannelResponse = "APNSChannelResponse"
        }
    }

    public struct SegmentImportResource: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExternalId", required: false, type: .string), 
            AWSShapeMember(label: "Format", required: false, type: .enum), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "ChannelCounts", required: false, type: .map), 
            AWSShapeMember(label: "S3Url", required: false, type: .string), 
            AWSShapeMember(label: "Size", required: false, type: .integer)
        ]
        /// A unique, custom ID assigned to the IAM role that restricts who can assume the role.
        public let externalId: String?
        /// The format of the endpoint files that were imported to create this segment.
        /// Valid values: CSV, JSON
        public let format: Format?
        /// The Amazon Resource Name (ARN) of an IAM role that grants Amazon Pinpoint access to the endpoints in Amazon S3.
        public let roleArn: String?
        public let channelCounts: [String: Int32]?
        /// A URL that points to the Amazon S3 location from which the endpoints for this segment were imported.
        public let s3Url: String?
        /// The number of endpoints that were successfully imported to create this segment.
        public let size: Int32?

        public init(externalId: String? = nil, format: Format? = nil, roleArn: String? = nil, channelCounts: [String: Int32]? = nil, s3Url: String? = nil, size: Int32? = nil) {
            self.externalId = externalId
            self.format = format
            self.roleArn = roleArn
            self.channelCounts = channelCounts
            self.s3Url = s3Url
            self.size = size
        }

        private enum CodingKeys: String, CodingKey {
            case externalId = "ExternalId"
            case format = "Format"
            case roleArn = "RoleArn"
            case channelCounts = "ChannelCounts"
            case s3Url = "S3Url"
            case size = "Size"
        }
    }

    public enum DimensionType: String, CustomStringConvertible, Codable {
        case inclusive = "INCLUSIVE"
        case exclusive = "EXCLUSIVE"
        public var description: String { return self.rawValue }
    }

    public struct ImportJobRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Url", required: false, type: .string), 
            AWSShapeMember(label: "DefineSegment", required: false, type: .boolean), 
            AWSShapeMember(label: "Format", required: false, type: .enum), 
            AWSShapeMember(label: "ExternalId", required: false, type: .string), 
            AWSShapeMember(label: "RegisterEndpoints", required: false, type: .boolean), 
            AWSShapeMember(label: "SegmentName", required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "SegmentId", required: false, type: .string)
        ]
        /// A URL that points to the location within an Amazon S3 bucket that contains the endpoints to import. The location can be a folder or a single file.
        /// The URL should follow this format: s3://bucket-name/folder-name/file-name
        /// Amazon Pinpoint will import endpoints from this location and any subfolders it contains.
        public let s3Url: String?
        /// Sets whether the endpoints create a segment when they are imported.
        public let defineSegment: Bool?
        /// The format of the files that contain the endpoint definitions.
        /// Valid values: CSV, JSON
        public let format: Format?
        /// A unique, custom ID assigned to the IAM role that restricts who can assume the role.	
        public let externalId: String?
        /// Sets whether the endpoints are registered with Amazon Pinpoint when they are imported.
        public let registerEndpoints: Bool?
        /// A custom name for the segment created by the import job. Use if DefineSegment is true.
        public let segmentName: String?
        /// The Amazon Resource Name (ARN) of an IAM role that grants Amazon Pinpoint access to the Amazon S3 location that contains the endpoints to import.
        public let roleArn: String?
        /// The ID of the segment to update if the import job is meant to update an existing segment.
        public let segmentId: String?

        public init(s3Url: String? = nil, defineSegment: Bool? = nil, format: Format? = nil, externalId: String? = nil, registerEndpoints: Bool? = nil, segmentName: String? = nil, roleArn: String? = nil, segmentId: String? = nil) {
            self.s3Url = s3Url
            self.defineSegment = defineSegment
            self.format = format
            self.externalId = externalId
            self.registerEndpoints = registerEndpoints
            self.segmentName = segmentName
            self.roleArn = roleArn
            self.segmentId = segmentId
        }

        private enum CodingKeys: String, CodingKey {
            case s3Url = "S3Url"
            case defineSegment = "DefineSegment"
            case format = "Format"
            case externalId = "ExternalId"
            case registerEndpoints = "RegisterEndpoints"
            case segmentName = "SegmentName"
            case roleArn = "RoleArn"
            case segmentId = "SegmentId"
        }
    }

    public struct GetEmailChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EmailChannelResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmailChannelResponse", required: true, type: .structure)
        ]
        public let emailChannelResponse: EmailChannelResponse

        public init(emailChannelResponse: EmailChannelResponse) {
            self.emailChannelResponse = emailChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case emailChannelResponse = "EmailChannelResponse"
        }
    }

    public struct SendMessagesRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MessageRequest"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "MessageRequest", required: true, type: .structure)
        ]
        public let applicationId: String
        public let messageRequest: MessageRequest

        public init(applicationId: String, messageRequest: MessageRequest) {
            self.applicationId = applicationId
            self.messageRequest = messageRequest
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
            case messageRequest = "MessageRequest"
        }
    }

    public struct PutEventStreamResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EventStream"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventStream", required: true, type: .structure)
        ]
        public let eventStream: EventStream

        public init(eventStream: EventStream) {
            self.eventStream = eventStream
        }

        private enum CodingKeys: String, CodingKey {
            case eventStream = "EventStream"
        }
    }

    public enum DeliveryStatus: String, CustomStringConvertible, Codable {
        case successful = "SUCCESSFUL"
        case throttled = "THROTTLED"
        case temporaryFailure = "TEMPORARY_FAILURE"
        case permanentFailure = "PERMANENT_FAILURE"
        public var description: String { return self.rawValue }
    }

    public struct GetCampaignsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", location: .querystring(locationName: "page-size"), required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "Token", location: .querystring(locationName: "token"), required: false, type: .string)
        ]
        public let pageSize: String?
        public let applicationId: String
        public let token: String?

        public init(pageSize: String? = nil, applicationId: String, token: String? = nil) {
            self.pageSize = pageSize
            self.applicationId = applicationId
            self.token = token
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "page-size"
            case applicationId = "application-id"
            case token = "token"
        }
    }

    public enum CampaignStatus: String, CustomStringConvertible, Codable {
        case scheduled = "SCHEDULED"
        case executing = "EXECUTING"
        case pendingNextRun = "PENDING_NEXT_RUN"
        case completed = "COMPLETED"
        case paused = "PAUSED"
        public var description: String { return self.rawValue }
    }

    public struct SetDimension: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DimensionType", required: false, type: .enum), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// The type of dimension:
        /// INCLUSIVE - Endpoints that match the criteria are included in the segment.
        /// EXCLUSIVE - Endpoints that match the criteria are excluded from the segment.
        public let dimensionType: DimensionType?
        public let values: [String]?

        public init(dimensionType: DimensionType? = nil, values: [String]? = nil) {
            self.dimensionType = dimensionType
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case dimensionType = "DimensionType"
            case values = "Values"
        }
    }

    public struct ImportJobResource: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Url", required: false, type: .string), 
            AWSShapeMember(label: "DefineSegment", required: false, type: .boolean), 
            AWSShapeMember(label: "Format", required: false, type: .enum), 
            AWSShapeMember(label: "ExternalId", required: false, type: .string), 
            AWSShapeMember(label: "RegisterEndpoints", required: false, type: .boolean), 
            AWSShapeMember(label: "SegmentName", required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "SegmentId", required: false, type: .string)
        ]
        /// A URL that points to the location within an Amazon S3 bucket that contains the endpoints to import. The location can be a folder or a single file.
        /// The URL should follow this format: s3://bucket-name/folder-name/file-name
        /// Amazon Pinpoint will import endpoints from this location and any subfolders it contains.
        public let s3Url: String?
        /// Sets whether the endpoints create a segment when they are imported.
        public let defineSegment: Bool?
        /// The format of the files that contain the endpoint definitions.
        /// Valid values: CSV, JSON
        public let format: Format?
        /// A unique, custom ID assigned to the IAM role that restricts who can assume the role.	
        public let externalId: String?
        /// Sets whether the endpoints are registered with Amazon Pinpoint when they are imported.
        public let registerEndpoints: Bool?
        /// A custom name for the segment created by the import job. Use if DefineSegment is true.
        public let segmentName: String?
        /// The Amazon Resource Name (ARN) of an IAM role that grants Amazon Pinpoint access to the Amazon S3 location that contains the endpoints to import.
        public let roleArn: String?
        /// The ID of the segment to update if the import job is meant to update an existing segment.
        public let segmentId: String?

        public init(s3Url: String? = nil, defineSegment: Bool? = nil, format: Format? = nil, externalId: String? = nil, registerEndpoints: Bool? = nil, segmentName: String? = nil, roleArn: String? = nil, segmentId: String? = nil) {
            self.s3Url = s3Url
            self.defineSegment = defineSegment
            self.format = format
            self.externalId = externalId
            self.registerEndpoints = registerEndpoints
            self.segmentName = segmentName
            self.roleArn = roleArn
            self.segmentId = segmentId
        }

        private enum CodingKeys: String, CodingKey {
            case s3Url = "S3Url"
            case defineSegment = "DefineSegment"
            case format = "Format"
            case externalId = "ExternalId"
            case registerEndpoints = "RegisterEndpoints"
            case segmentName = "SegmentName"
            case roleArn = "RoleArn"
            case segmentId = "SegmentId"
        }
    }

    public struct GetCampaignVersionResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CampaignResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignResponse", required: true, type: .structure)
        ]
        public let campaignResponse: CampaignResponse

        public init(campaignResponse: CampaignResponse) {
            self.campaignResponse = campaignResponse
        }

        private enum CodingKeys: String, CodingKey {
            case campaignResponse = "CampaignResponse"
        }
    }

    public struct CreateImportJobRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ImportJobRequest"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportJobRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let importJobRequest: ImportJobRequest
        public let applicationId: String

        public init(importJobRequest: ImportJobRequest, applicationId: String) {
            self.importJobRequest = importJobRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case importJobRequest = "ImportJobRequest"
            case applicationId = "application-id"
        }
    }

    public struct APNSChannelRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificate", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateKey", required: false, type: .string)
        ]
        /// The distribution certificate from Apple.
        public let certificate: String?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// The certificate private key.
        public let privateKey: String?

        public init(certificate: String? = nil, enabled: Bool? = nil, privateKey: String? = nil) {
            self.certificate = certificate
            self.enabled = enabled
            self.privateKey = privateKey
        }

        private enum CodingKeys: String, CodingKey {
            case certificate = "Certificate"
            case enabled = "Enabled"
            case privateKey = "PrivateKey"
        }
    }

    public enum RecencyType: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case inactive = "INACTIVE"
        public var description: String { return self.rawValue }
    }

    public enum JobStatus: String, CustomStringConvertible, Codable {
        case created = "CREATED"
        case initializing = "INITIALIZING"
        case processing = "PROCESSING"
        case completing = "COMPLETING"
        case completed = "COMPLETED"
        case failing = "FAILING"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct EndpointUser: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserId", required: false, type: .string), 
            AWSShapeMember(label: "UserAttributes", required: false, type: .map)
        ]
        /// The unique ID of the user.
        public let userId: String?
        public let userAttributes: [String: [String]]?

        public init(userId: String? = nil, userAttributes: [String: [String]]? = nil) {
            self.userId = userId
            self.userAttributes = userAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case userAttributes = "UserAttributes"
        }
    }

    public struct CampaignEmailMessage: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Body", required: false, type: .string), 
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "HtmlBody", required: false, type: .string)
        ]
        /// The email text body.
        public let body: String?
        /// The email title (Or subject).
        public let title: String?
        /// The email html body.
        public let htmlBody: String?

        public init(body: String? = nil, title: String? = nil, htmlBody: String? = nil) {
            self.body = body
            self.title = title
            self.htmlBody = htmlBody
        }

        private enum CodingKeys: String, CodingKey {
            case body = "Body"
            case title = "Title"
            case htmlBody = "HtmlBody"
        }
    }

    public struct SegmentDimensions: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Demographic", required: false, type: .structure), 
            AWSShapeMember(label: "Behavior", required: false, type: .structure), 
            AWSShapeMember(label: "Attributes", required: false, type: .map), 
            AWSShapeMember(label: "Location", required: false, type: .structure), 
            AWSShapeMember(label: "UserAttributes", required: false, type: .map)
        ]
        /// The segment demographics attributes.
        public let demographic: SegmentDemographics?
        /// The segment behaviors attributes.
        public let behavior: SegmentBehaviors?
        /// Custom segment attributes.
        public let attributes: [String: AttributeDimension]?
        /// The segment location attributes.
        public let location: SegmentLocation?
        /// Custom segment user attributes.
        public let userAttributes: [String: AttributeDimension]?

        public init(demographic: SegmentDemographics? = nil, behavior: SegmentBehaviors? = nil, attributes: [String: AttributeDimension]? = nil, location: SegmentLocation? = nil, userAttributes: [String: AttributeDimension]? = nil) {
            self.demographic = demographic
            self.behavior = behavior
            self.attributes = attributes
            self.location = location
            self.userAttributes = userAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case demographic = "Demographic"
            case behavior = "Behavior"
            case attributes = "Attributes"
            case location = "Location"
            case userAttributes = "UserAttributes"
        }
    }

    public struct GetSegmentVersionsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SegmentsResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentsResponse", required: true, type: .structure)
        ]
        public let segmentsResponse: SegmentsResponse

        public init(segmentsResponse: SegmentsResponse) {
            self.segmentsResponse = segmentsResponse
        }

        private enum CodingKeys: String, CodingKey {
            case segmentsResponse = "SegmentsResponse"
        }
    }

    public struct GetEventStreamRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        /// Application Id.
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct MessageBody: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestID", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]
        /// The unique message body ID.
        public let requestID: String?
        /// The error message returned from the API.
        public let message: String?

        public init(requestID: String? = nil, message: String? = nil) {
            self.requestID = requestID
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case requestID = "RequestID"
            case message = "Message"
        }
    }

    public struct GetGcmChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "GCMChannelResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GCMChannelResponse", required: true, type: .structure)
        ]
        public let gCMChannelResponse: GCMChannelResponse

        public init(gCMChannelResponse: GCMChannelResponse) {
            self.gCMChannelResponse = gCMChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case gCMChannelResponse = "GCMChannelResponse"
        }
    }

    public struct ApplicationSettingsResource: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "Limits", required: false, type: .structure), 
            AWSShapeMember(label: "QuietTime", required: false, type: .structure), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string)
        ]
        /// The date that the settings were last updated in ISO 8601 format.
        public let lastModifiedDate: String?
        /// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own.
        public let limits: CampaignLimits?
        /// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own.
        public let quietTime: QuietTime?
        /// The unique ID for the application.
        public let applicationId: String?

        public init(lastModifiedDate: String? = nil, limits: CampaignLimits? = nil, quietTime: QuietTime? = nil, applicationId: String? = nil) {
            self.lastModifiedDate = lastModifiedDate
            self.limits = limits
            self.quietTime = quietTime
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedDate = "LastModifiedDate"
            case limits = "Limits"
            case quietTime = "QuietTime"
            case applicationId = "ApplicationId"
        }
    }

    public struct UpdateEndpointResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "MessageBody"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MessageBody", required: true, type: .structure)
        ]
        public let messageBody: MessageBody

        public init(messageBody: MessageBody) {
            self.messageBody = messageBody
        }

        private enum CodingKeys: String, CodingKey {
            case messageBody = "MessageBody"
        }
    }

    public struct GetCampaignActivitiesResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ActivitiesResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActivitiesResponse", required: true, type: .structure)
        ]
        public let activitiesResponse: ActivitiesResponse

        public init(activitiesResponse: ActivitiesResponse) {
            self.activitiesResponse = activitiesResponse
        }

        private enum CodingKeys: String, CodingKey {
            case activitiesResponse = "ActivitiesResponse"
        }
    }

    public struct GetCampaignVersionsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", location: .querystring(locationName: "page-size"), required: false, type: .string), 
            AWSShapeMember(label: "CampaignId", location: .uri(locationName: "campaign-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "Token", location: .querystring(locationName: "token"), required: false, type: .string)
        ]
        public let pageSize: String?
        public let campaignId: String
        public let applicationId: String
        public let token: String?

        public init(pageSize: String? = nil, campaignId: String, applicationId: String, token: String? = nil) {
            self.pageSize = pageSize
            self.campaignId = campaignId
            self.applicationId = applicationId
            self.token = token
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "page-size"
            case campaignId = "campaign-id"
            case applicationId = "application-id"
            case token = "token"
        }
    }

    public struct UpdateEndpointsBatchRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EndpointBatchRequest"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointBatchRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let endpointBatchRequest: EndpointBatchRequest
        public let applicationId: String

        public init(endpointBatchRequest: EndpointBatchRequest, applicationId: String) {
            self.endpointBatchRequest = endpointBatchRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case endpointBatchRequest = "EndpointBatchRequest"
            case applicationId = "application-id"
        }
    }

    public struct AttributeDimension: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AttributeType", required: false, type: .enum), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// The type of dimension:
        /// INCLUSIVE - Endpoints that match the criteria are included in the segment.
        /// EXCLUSIVE - Endpoints that match the criteria are excluded from the segment.
        public let attributeType: AttributeType?
        public let values: [String]?

        public init(attributeType: AttributeType? = nil, values: [String]? = nil) {
            self.attributeType = attributeType
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case attributeType = "AttributeType"
            case values = "Values"
        }
    }

    public struct APNSChannelResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "IsArchived", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedBy", required: false, type: .string)
        ]
        /// Channel ID. Not used, only for backwards compatibility.
        public let id: String?
        /// The platform type. Will be APNS.
        public let platform: String?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// Version of channel
        public let version: Int32?
        /// Last date this was updated
        public let lastModifiedDate: String?
        /// When was this segment created
        public let creationDate: String?
        /// The ID of the application to which the channel applies.
        public let applicationId: String?
        /// Is this channel archived
        public let isArchived: Bool?
        /// Who last updated this entry
        public let lastModifiedBy: String?

        public init(id: String? = nil, platform: String? = nil, enabled: Bool? = nil, version: Int32? = nil, lastModifiedDate: String? = nil, creationDate: String? = nil, applicationId: String? = nil, isArchived: Bool? = nil, lastModifiedBy: String? = nil) {
            self.id = id
            self.platform = platform
            self.enabled = enabled
            self.version = version
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.applicationId = applicationId
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case platform = "Platform"
            case enabled = "Enabled"
            case version = "Version"
            case lastModifiedDate = "LastModifiedDate"
            case creationDate = "CreationDate"
            case applicationId = "ApplicationId"
            case isArchived = "IsArchived"
            case lastModifiedBy = "LastModifiedBy"
        }
    }

    public struct UpdateApnsSandboxChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSSandboxChannelResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSSandboxChannelResponse", required: true, type: .structure)
        ]
        public let aPNSSandboxChannelResponse: APNSSandboxChannelResponse

        public init(aPNSSandboxChannelResponse: APNSSandboxChannelResponse) {
            self.aPNSSandboxChannelResponse = aPNSSandboxChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSSandboxChannelResponse = "APNSSandboxChannelResponse"
        }
    }

    public struct DeleteEventStreamRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        /// Application Id.
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct SegmentsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Item", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The list of segments.
        public let item: [SegmentResponse]?
        /// An identifier used to retrieve the next page of results. The token is null if no additional pages exist.
        public let nextToken: String?

        public init(item: [SegmentResponse]? = nil, nextToken: String? = nil) {
            self.item = item
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
            case nextToken = "NextToken"
        }
    }

    public struct SegmentResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "Dimensions", required: false, type: .structure), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "ImportDefinition", required: false, type: .structure), 
            AWSShapeMember(label: "SegmentType", required: false, type: .enum)
        ]
        /// The unique segment ID.
        public let id: String?
        /// The name of segment
        public let name: String?
        /// The segment version number.
        public let version: Int32?
        /// The segment dimensions attributes.
        public let dimensions: SegmentDimensions?
        /// The date the segment was created in ISO 8601 format.
        public let creationDate: String?
        /// The ID of the application to which the segment applies.
        public let applicationId: String?
        /// The date the segment was last updated in ISO 8601 format.
        public let lastModifiedDate: String?
        /// The import job settings.
        public let importDefinition: SegmentImportResource?
        /// The segment type:
        /// DIMENSIONAL - A dynamic segment built from selection criteria based on endpoint data reported by your app. You create this type of segment by using the segment builder in the Amazon Pinpoint console or by making a POST request to the segments resource.
        /// IMPORT - A static segment built from an imported set of endpoint definitions. You create this type of segment by importing a segment in the Amazon Pinpoint console or by making a POST request to the jobs/import resource.
        public let segmentType: SegmentType?

        public init(id: String? = nil, name: String? = nil, version: Int32? = nil, dimensions: SegmentDimensions? = nil, creationDate: String? = nil, applicationId: String? = nil, lastModifiedDate: String? = nil, importDefinition: SegmentImportResource? = nil, segmentType: SegmentType? = nil) {
            self.id = id
            self.name = name
            self.version = version
            self.dimensions = dimensions
            self.creationDate = creationDate
            self.applicationId = applicationId
            self.lastModifiedDate = lastModifiedDate
            self.importDefinition = importDefinition
            self.segmentType = segmentType
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case name = "Name"
            case version = "Version"
            case dimensions = "Dimensions"
            case creationDate = "CreationDate"
            case applicationId = "ApplicationId"
            case lastModifiedDate = "LastModifiedDate"
            case importDefinition = "ImportDefinition"
            case segmentType = "SegmentType"
        }
    }

    public struct ImportJobResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CompletionDate", required: false, type: .string), 
            AWSShapeMember(label: "Definition", required: false, type: .structure), 
            AWSShapeMember(label: "FailedPieces", required: false, type: .integer), 
            AWSShapeMember(label: "TotalPieces", required: false, type: .integer), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "TotalProcessed", required: false, type: .integer), 
            AWSShapeMember(label: "CompletedPieces", required: false, type: .integer), 
            AWSShapeMember(label: "TotalFailures", required: false, type: .integer), 
            AWSShapeMember(label: "Failures", required: false, type: .list), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .string)
        ]
        /// The date the import job completed in ISO 8601 format.
        public let completionDate: String?
        /// The import job settings.
        public let definition: ImportJobResource?
        /// The number of pieces that have failed to import as of the time of the request.
        public let failedPieces: Int32?
        /// The total number of pieces that must be imported to finish the job. Each piece is an approximately equal portion of the endpoints to import.
        public let totalPieces: Int32?
        /// The date the import job was created in ISO 8601 format.
        public let creationDate: String?
        /// The status of the import job.
        /// Valid values: CREATED, INITIALIZING, PROCESSING, COMPLETING, COMPLETED, FAILING, FAILED
        /// The job status is FAILED if one or more pieces failed to import.
        public let jobStatus: JobStatus?
        /// The unique ID of the import job.
        public let id: String?
        /// The number of endpoints that were processed by the import job.
        public let totalProcessed: Int32?
        /// The number of pieces that have successfully imported as of the time of the request.
        public let completedPieces: Int32?
        /// The number of endpoints that failed to import; for example, because of syntax errors.
        public let totalFailures: Int32?
        public let failures: [String]?
        /// The unique ID of the application to which the import job applies.
        public let applicationId: String?
        /// The job type. Will be Import.
        public let `type`: String?

        public init(completionDate: String? = nil, definition: ImportJobResource? = nil, failedPieces: Int32? = nil, totalPieces: Int32? = nil, creationDate: String? = nil, jobStatus: JobStatus? = nil, id: String? = nil, totalProcessed: Int32? = nil, completedPieces: Int32? = nil, totalFailures: Int32? = nil, failures: [String]? = nil, applicationId: String? = nil, type: String? = nil) {
            self.completionDate = completionDate
            self.definition = definition
            self.failedPieces = failedPieces
            self.totalPieces = totalPieces
            self.creationDate = creationDate
            self.jobStatus = jobStatus
            self.id = id
            self.totalProcessed = totalProcessed
            self.completedPieces = completedPieces
            self.totalFailures = totalFailures
            self.failures = failures
            self.applicationId = applicationId
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case completionDate = "CompletionDate"
            case definition = "Definition"
            case failedPieces = "FailedPieces"
            case totalPieces = "TotalPieces"
            case creationDate = "CreationDate"
            case jobStatus = "JobStatus"
            case id = "Id"
            case totalProcessed = "TotalProcessed"
            case completedPieces = "CompletedPieces"
            case totalFailures = "TotalFailures"
            case failures = "Failures"
            case applicationId = "ApplicationId"
            case `type` = "Type"
        }
    }

    public struct CreateImportJobResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ImportJobResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportJobResponse", required: true, type: .structure)
        ]
        public let importJobResponse: ImportJobResponse

        public init(importJobResponse: ImportJobResponse) {
            self.importJobResponse = importJobResponse
        }

        private enum CodingKeys: String, CodingKey {
            case importJobResponse = "ImportJobResponse"
        }
    }

    public struct GetEventStreamResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EventStream"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventStream", required: true, type: .structure)
        ]
        public let eventStream: EventStream

        public init(eventStream: EventStream) {
            self.eventStream = eventStream
        }

        private enum CodingKeys: String, CodingKey {
            case eventStream = "EventStream"
        }
    }

    public struct GetApplicationSettingsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ApplicationSettingsResource"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationSettingsResource", required: true, type: .structure)
        ]
        public let applicationSettingsResource: ApplicationSettingsResource

        public init(applicationSettingsResource: ApplicationSettingsResource) {
            self.applicationSettingsResource = applicationSettingsResource
        }

        private enum CodingKeys: String, CodingKey {
            case applicationSettingsResource = "ApplicationSettingsResource"
        }
    }

    public struct GetImportJobsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "ImportJobsResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImportJobsResponse", required: true, type: .structure)
        ]
        public let importJobsResponse: ImportJobsResponse

        public init(importJobsResponse: ImportJobsResponse) {
            self.importJobsResponse = importJobsResponse
        }

        private enum CodingKeys: String, CodingKey {
            case importJobsResponse = "ImportJobsResponse"
        }
    }

    public struct GetCampaignResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CampaignResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignResponse", required: true, type: .structure)
        ]
        public let campaignResponse: CampaignResponse

        public init(campaignResponse: CampaignResponse) {
            self.campaignResponse = campaignResponse
        }

        private enum CodingKeys: String, CodingKey {
            case campaignResponse = "CampaignResponse"
        }
    }

    public struct UpdateSmsChannelRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SMSChannelRequest"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SMSChannelRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let sMSChannelRequest: SMSChannelRequest
        public let applicationId: String

        public init(sMSChannelRequest: SMSChannelRequest, applicationId: String) {
            self.sMSChannelRequest = sMSChannelRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case sMSChannelRequest = "SMSChannelRequest"
            case applicationId = "application-id"
        }
    }

    public struct UpdateSegmentRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "WriteSegmentRequest"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "SegmentId", location: .uri(locationName: "segment-id"), required: true, type: .string), 
            AWSShapeMember(label: "WriteSegmentRequest", required: true, type: .structure)
        ]
        public let applicationId: String
        public let segmentId: String
        public let writeSegmentRequest: WriteSegmentRequest

        public init(applicationId: String, segmentId: String, writeSegmentRequest: WriteSegmentRequest) {
            self.applicationId = applicationId
            self.segmentId = segmentId
            self.writeSegmentRequest = writeSegmentRequest
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
            case segmentId = "segment-id"
            case writeSegmentRequest = "WriteSegmentRequest"
        }
    }

    public struct DeleteGcmChannelRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct APNSSandboxChannelResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "IsArchived", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedBy", required: false, type: .string)
        ]
        /// Channel ID. Not used, only for backwards compatibility.
        public let id: String?
        /// The platform type. Will be APNS.
        public let platform: String?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// Version of channel
        public let version: Int32?
        /// Last date this was updated
        public let lastModifiedDate: String?
        /// When was this segment created
        public let creationDate: String?
        /// Application id
        public let applicationId: String?
        /// Is this channel archived
        public let isArchived: Bool?
        /// Who last updated this entry
        public let lastModifiedBy: String?

        public init(id: String? = nil, platform: String? = nil, enabled: Bool? = nil, version: Int32? = nil, lastModifiedDate: String? = nil, creationDate: String? = nil, applicationId: String? = nil, isArchived: Bool? = nil, lastModifiedBy: String? = nil) {
            self.id = id
            self.platform = platform
            self.enabled = enabled
            self.version = version
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.applicationId = applicationId
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case platform = "Platform"
            case enabled = "Enabled"
            case version = "Version"
            case lastModifiedDate = "LastModifiedDate"
            case creationDate = "CreationDate"
            case applicationId = "ApplicationId"
            case isArchived = "IsArchived"
            case lastModifiedBy = "LastModifiedBy"
        }
    }

    public struct WriteEventStream: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "DestinationStreamArn", required: false, type: .string)
        ]
        /// The IAM role that authorizes Amazon Pinpoint to publish events to the stream in your account.
        public let roleArn: String?
        /// The Amazon Resource Name (ARN) of the Amazon Kinesis stream or Firehose delivery stream to which you want to publish events.
        ///  Firehose ARN: arn:aws:firehose:REGION:ACCOUNT_ID:deliverystream/STREAM_NAME
        ///  Kinesis ARN: arn:aws:kinesis:REGION:ACCOUNT_ID:stream/STREAM_NAME
        public let destinationStreamArn: String?

        public init(roleArn: String? = nil, destinationStreamArn: String? = nil) {
            self.roleArn = roleArn
            self.destinationStreamArn = destinationStreamArn
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "RoleArn"
            case destinationStreamArn = "DestinationStreamArn"
        }
    }

    public struct UpdateApnsChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSChannelResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSChannelResponse", required: true, type: .structure)
        ]
        public let aPNSChannelResponse: APNSChannelResponse

        public init(aPNSChannelResponse: APNSChannelResponse) {
            self.aPNSChannelResponse = aPNSChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSChannelResponse = "APNSChannelResponse"
        }
    }

    public struct UpdateGcmChannelRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "GCMChannelRequest"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GCMChannelRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let gCMChannelRequest: GCMChannelRequest
        public let applicationId: String

        public init(gCMChannelRequest: GCMChannelRequest, applicationId: String) {
            self.gCMChannelRequest = gCMChannelRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case gCMChannelRequest = "GCMChannelRequest"
            case applicationId = "application-id"
        }
    }

    public struct DeleteCampaignResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CampaignResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignResponse", required: true, type: .structure)
        ]
        public let campaignResponse: CampaignResponse

        public init(campaignResponse: CampaignResponse) {
            self.campaignResponse = campaignResponse
        }

        private enum CodingKeys: String, CodingKey {
            case campaignResponse = "CampaignResponse"
        }
    }

    public struct CampaignLimits: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Daily", required: false, type: .integer), 
            AWSShapeMember(label: "Total", required: false, type: .integer)
        ]
        /// The maximum number of messages that the campaign can send daily.
        public let daily: Int32?
        /// The maximum total number of messages that the campaign can send.
        public let total: Int32?

        public init(daily: Int32? = nil, total: Int32? = nil) {
            self.daily = daily
            self.total = total
        }

        private enum CodingKeys: String, CodingKey {
            case daily = "Daily"
            case total = "Total"
        }
    }

    public struct SegmentDemographics: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Make", required: false, type: .structure), 
            AWSShapeMember(label: "Platform", required: false, type: .structure), 
            AWSShapeMember(label: "DeviceType", required: false, type: .structure), 
            AWSShapeMember(label: "AppVersion", required: false, type: .structure), 
            AWSShapeMember(label: "Channel", required: false, type: .structure), 
            AWSShapeMember(label: "Model", required: false, type: .structure)
        ]
        /// The device make criteria for the segment.
        public let make: SetDimension?
        /// The device platform criteria for the segment.
        public let platform: SetDimension?
        /// The device type criteria for the segment.
        public let deviceType: SetDimension?
        /// The app version criteria for the segment.
        public let appVersion: SetDimension?
        /// The channel criteria for the segment.
        public let channel: SetDimension?
        /// The device model criteria for the segment.
        public let model: SetDimension?

        public init(make: SetDimension? = nil, platform: SetDimension? = nil, deviceType: SetDimension? = nil, appVersion: SetDimension? = nil, channel: SetDimension? = nil, model: SetDimension? = nil) {
            self.make = make
            self.platform = platform
            self.deviceType = deviceType
            self.appVersion = appVersion
            self.channel = channel
            self.model = model
        }

        private enum CodingKeys: String, CodingKey {
            case make = "Make"
            case platform = "Platform"
            case deviceType = "DeviceType"
            case appVersion = "AppVersion"
            case channel = "Channel"
            case model = "Model"
        }
    }

    public struct GetApnsSandboxChannelRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct DeleteEventStreamResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EventStream"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventStream", required: true, type: .structure)
        ]
        public let eventStream: EventStream

        public init(eventStream: EventStream) {
            self.eventStream = eventStream
        }

        private enum CodingKeys: String, CodingKey {
            case eventStream = "EventStream"
        }
    }

    public struct EmailChannelResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedBy", required: false, type: .string), 
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .integer), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "LastModifiedDate", required: false, type: .string), 
            AWSShapeMember(label: "CreationDate", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "IsArchived", required: false, type: .boolean), 
            AWSShapeMember(label: "Identity", required: false, type: .string), 
            AWSShapeMember(label: "FromAddress", required: false, type: .string)
        ]
        /// Who last updated this entry
        public let lastModifiedBy: String?
        /// Platform type. Will be "EMAIL"
        public let platform: String?
        /// Channel ID. Not used, only for backwards compatibility.
        public let id: String?
        /// Version of channel
        public let version: Int32?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// Last date this was updated
        public let lastModifiedDate: String?
        /// The date that the settings were last updated in ISO 8601 format.
        public let creationDate: String?
        /// Application id
        public let applicationId: String?
        /// The ARN of an IAM Role used to submit events to Mobile Analytics' event ingestion service
        public let roleArn: String?
        /// Is this channel archived
        public let isArchived: Bool?
        /// The ARN of an identity verified with SES.
        public let identity: String?
        /// The email address used to send emails from.
        public let fromAddress: String?

        public init(lastModifiedBy: String? = nil, platform: String? = nil, id: String? = nil, version: Int32? = nil, enabled: Bool? = nil, lastModifiedDate: String? = nil, creationDate: String? = nil, applicationId: String? = nil, roleArn: String? = nil, isArchived: Bool? = nil, identity: String? = nil, fromAddress: String? = nil) {
            self.lastModifiedBy = lastModifiedBy
            self.platform = platform
            self.id = id
            self.version = version
            self.enabled = enabled
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.applicationId = applicationId
            self.roleArn = roleArn
            self.isArchived = isArchived
            self.identity = identity
            self.fromAddress = fromAddress
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedBy = "LastModifiedBy"
            case platform = "Platform"
            case id = "Id"
            case version = "Version"
            case enabled = "Enabled"
            case lastModifiedDate = "LastModifiedDate"
            case creationDate = "CreationDate"
            case applicationId = "ApplicationId"
            case roleArn = "RoleArn"
            case isArchived = "IsArchived"
            case identity = "Identity"
            case fromAddress = "FromAddress"
        }
    }

    public struct CreateCampaignResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CampaignResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignResponse", required: true, type: .structure)
        ]
        public let campaignResponse: CampaignResponse

        public init(campaignResponse: CampaignResponse) {
            self.campaignResponse = campaignResponse
        }

        private enum CodingKeys: String, CodingKey {
            case campaignResponse = "CampaignResponse"
        }
    }

    public struct ActivityResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignId", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .string), 
            AWSShapeMember(label: "TimezonesTotalCount", required: false, type: .integer), 
            AWSShapeMember(label: "TotalEndpointCount", required: false, type: .integer), 
            AWSShapeMember(label: "TimezonesCompletedCount", required: false, type: .integer), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "ScheduledStart", required: false, type: .string), 
            AWSShapeMember(label: "Start", required: false, type: .string), 
            AWSShapeMember(label: "End", required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", required: false, type: .string), 
            AWSShapeMember(label: "TreatmentId", required: false, type: .string), 
            AWSShapeMember(label: "Result", required: false, type: .string), 
            AWSShapeMember(label: "SuccessfulEndpointCount", required: false, type: .integer)
        ]
        /// The ID of the campaign to which the activity applies.
        public let campaignId: String?
        /// The state of the activity.
        /// Valid values: PENDING, INITIALIZING, RUNNING, PAUSED, CANCELLED, COMPLETED
        public let state: String?
        /// The total number of unique timezones present in the segment.
        public let timezonesTotalCount: Int32?
        /// The total number of endpoints to which the campaign attempts to deliver messages.
        public let totalEndpointCount: Int32?
        /// The total number of timezones completed.
        public let timezonesCompletedCount: Int32?
        /// The unique activity ID.
        public let id: String?
        /// The scheduled start time for the activity in ISO 8601 format.
        public let scheduledStart: String?
        /// The actual start time of the activity in ISO 8601 format.
        public let start: String?
        /// The actual time the activity was marked CANCELLED or COMPLETED. Provided in ISO 8601 format.
        public let end: String?
        /// The ID of the application to which the campaign applies.
        public let applicationId: String?
        /// The ID of a variation of the campaign used for A/B testing.
        public let treatmentId: String?
        /// Indicates whether the activity succeeded.
        /// Valid values: SUCCESS, FAIL
        public let result: String?
        /// The total number of endpoints to which the campaign successfully delivered messages.
        public let successfulEndpointCount: Int32?

        public init(campaignId: String? = nil, state: String? = nil, timezonesTotalCount: Int32? = nil, totalEndpointCount: Int32? = nil, timezonesCompletedCount: Int32? = nil, id: String? = nil, scheduledStart: String? = nil, start: String? = nil, end: String? = nil, applicationId: String? = nil, treatmentId: String? = nil, result: String? = nil, successfulEndpointCount: Int32? = nil) {
            self.campaignId = campaignId
            self.state = state
            self.timezonesTotalCount = timezonesTotalCount
            self.totalEndpointCount = totalEndpointCount
            self.timezonesCompletedCount = timezonesCompletedCount
            self.id = id
            self.scheduledStart = scheduledStart
            self.start = start
            self.end = end
            self.applicationId = applicationId
            self.treatmentId = treatmentId
            self.result = result
            self.successfulEndpointCount = successfulEndpointCount
        }

        private enum CodingKeys: String, CodingKey {
            case campaignId = "CampaignId"
            case state = "State"
            case timezonesTotalCount = "TimezonesTotalCount"
            case totalEndpointCount = "TotalEndpointCount"
            case timezonesCompletedCount = "TimezonesCompletedCount"
            case id = "Id"
            case scheduledStart = "ScheduledStart"
            case start = "Start"
            case end = "End"
            case applicationId = "ApplicationId"
            case treatmentId = "TreatmentId"
            case result = "Result"
            case successfulEndpointCount = "SuccessfulEndpointCount"
        }
    }

    public struct CreateSegmentResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SegmentResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentResponse", required: true, type: .structure)
        ]
        public let segmentResponse: SegmentResponse

        public init(segmentResponse: SegmentResponse) {
            self.segmentResponse = segmentResponse
        }

        private enum CodingKeys: String, CodingKey {
            case segmentResponse = "SegmentResponse"
        }
    }

    public struct GetSegmentImportJobsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", location: .querystring(locationName: "page-size"), required: false, type: .string), 
            AWSShapeMember(label: "Token", location: .querystring(locationName: "token"), required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "SegmentId", location: .uri(locationName: "segment-id"), required: true, type: .string)
        ]
        public let pageSize: String?
        public let token: String?
        public let applicationId: String
        public let segmentId: String

        public init(pageSize: String? = nil, token: String? = nil, applicationId: String, segmentId: String) {
            self.pageSize = pageSize
            self.token = token
            self.applicationId = applicationId
            self.segmentId = segmentId
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "page-size"
            case token = "token"
            case applicationId = "application-id"
            case segmentId = "segment-id"
        }
    }

    public struct UpdateApnsChannelRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSChannelRequest"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSChannelRequest", required: true, type: .structure), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let aPNSChannelRequest: APNSChannelRequest
        public let applicationId: String

        public init(aPNSChannelRequest: APNSChannelRequest, applicationId: String) {
            self.aPNSChannelRequest = aPNSChannelRequest
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSChannelRequest = "APNSChannelRequest"
            case applicationId = "application-id"
        }
    }

    public struct GetCampaignVersionsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CampaignsResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignsResponse", required: true, type: .structure)
        ]
        public let campaignsResponse: CampaignsResponse

        public init(campaignsResponse: CampaignsResponse) {
            self.campaignsResponse = campaignsResponse
        }

        private enum CodingKeys: String, CodingKey {
            case campaignsResponse = "CampaignsResponse"
        }
    }

    public struct GetSegmentResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SegmentResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentResponse", required: true, type: .structure)
        ]
        public let segmentResponse: SegmentResponse

        public init(segmentResponse: SegmentResponse) {
            self.segmentResponse = segmentResponse
        }

        private enum CodingKeys: String, CodingKey {
            case segmentResponse = "SegmentResponse"
        }
    }

    public struct GetSegmentsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SegmentsResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentsResponse", required: true, type: .structure)
        ]
        public let segmentsResponse: SegmentsResponse

        public init(segmentsResponse: SegmentsResponse) {
            self.segmentsResponse = segmentsResponse
        }

        private enum CodingKeys: String, CodingKey {
            case segmentsResponse = "SegmentsResponse"
        }
    }

    public enum MessageType: String, CustomStringConvertible, Codable {
        case transactional = "TRANSACTIONAL"
        case promotional = "PROMOTIONAL"
        public var description: String { return self.rawValue }
    }

    public struct UpdateCampaignRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "WriteCampaignRequest"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "CampaignId", location: .uri(locationName: "campaign-id"), required: true, type: .string), 
            AWSShapeMember(label: "WriteCampaignRequest", required: true, type: .structure)
        ]
        public let applicationId: String
        public let campaignId: String
        public let writeCampaignRequest: WriteCampaignRequest

        public init(applicationId: String, campaignId: String, writeCampaignRequest: WriteCampaignRequest) {
            self.applicationId = applicationId
            self.campaignId = campaignId
            self.writeCampaignRequest = writeCampaignRequest
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
            case campaignId = "campaign-id"
            case writeCampaignRequest = "WriteCampaignRequest"
        }
    }

    public struct DeleteSegmentResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SegmentResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentResponse", required: true, type: .structure)
        ]
        public let segmentResponse: SegmentResponse

        public init(segmentResponse: SegmentResponse) {
            self.segmentResponse = segmentResponse
        }

        private enum CodingKeys: String, CodingKey {
            case segmentResponse = "SegmentResponse"
        }
    }

    public struct PutEventStreamRequest: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "WriteEventStream"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "WriteEventStream", required: true, type: .structure)
        ]
        /// Application Id.
        public let applicationId: String
        /// Write event stream wrapper.
        public let writeEventStream: WriteEventStream

        public init(applicationId: String, writeEventStream: WriteEventStream) {
            self.applicationId = applicationId
            self.writeEventStream = writeEventStream
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
            case writeEventStream = "WriteEventStream"
        }
    }

    public struct GetCampaignsResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CampaignsResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignsResponse", required: true, type: .structure)
        ]
        public let campaignsResponse: CampaignsResponse

        public init(campaignsResponse: CampaignsResponse) {
            self.campaignsResponse = campaignsResponse
        }

        private enum CodingKeys: String, CodingKey {
            case campaignsResponse = "CampaignsResponse"
        }
    }

    public struct GetSegmentVersionResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SegmentResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentResponse", required: true, type: .structure)
        ]
        public let segmentResponse: SegmentResponse

        public init(segmentResponse: SegmentResponse) {
            self.segmentResponse = segmentResponse
        }

        private enum CodingKeys: String, CodingKey {
            case segmentResponse = "SegmentResponse"
        }
    }

    public struct GetEndpointRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointId", location: .uri(locationName: "endpoint-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let endpointId: String
        public let applicationId: String

        public init(endpointId: String, applicationId: String) {
            self.endpointId = endpointId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case endpointId = "endpoint-id"
            case applicationId = "application-id"
        }
    }

    public struct APNSSandboxChannelRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Certificate", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "PrivateKey", required: false, type: .string)
        ]
        /// The distribution certificate from Apple.
        public let certificate: String?
        /// If the channel is enabled for sending messages.
        public let enabled: Bool?
        /// The certificate private key.
        public let privateKey: String?

        public init(certificate: String? = nil, enabled: Bool? = nil, privateKey: String? = nil) {
            self.certificate = certificate
            self.enabled = enabled
            self.privateKey = privateKey
        }

        private enum CodingKeys: String, CodingKey {
            case certificate = "Certificate"
            case enabled = "Enabled"
            case privateKey = "PrivateKey"
        }
    }

    public struct GetCampaignVersionRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "CampaignId", location: .uri(locationName: "campaign-id"), required: true, type: .string), 
            AWSShapeMember(label: "Version", location: .uri(locationName: "version"), required: true, type: .string)
        ]
        public let applicationId: String
        public let campaignId: String
        public let version: String

        public init(applicationId: String, campaignId: String, version: String) {
            self.applicationId = applicationId
            self.campaignId = campaignId
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
            case campaignId = "campaign-id"
            case version = "version"
        }
    }

    public struct DeleteEmailChannelRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct UpdateCampaignResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "CampaignResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignResponse", required: true, type: .structure)
        ]
        public let campaignResponse: CampaignResponse

        public init(campaignResponse: CampaignResponse) {
            self.campaignResponse = campaignResponse
        }

        private enum CodingKeys: String, CodingKey {
            case campaignResponse = "CampaignResponse"
        }
    }

    public struct DeleteEmailChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "EmailChannelResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EmailChannelResponse", required: true, type: .structure)
        ]
        public let emailChannelResponse: EmailChannelResponse

        public init(emailChannelResponse: EmailChannelResponse) {
            self.emailChannelResponse = emailChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case emailChannelResponse = "EmailChannelResponse"
        }
    }

    public struct UpdateSegmentResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "SegmentResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentResponse", required: true, type: .structure)
        ]
        public let segmentResponse: SegmentResponse

        public init(segmentResponse: SegmentResponse) {
            self.segmentResponse = segmentResponse
        }

        private enum CodingKeys: String, CodingKey {
            case segmentResponse = "SegmentResponse"
        }
    }

    public struct SegmentBehaviors: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Recency", required: false, type: .structure)
        ]
        /// The recency of use.
        public let recency: RecencyDimension?

        public init(recency: RecencyDimension? = nil) {
            self.recency = recency
        }

        private enum CodingKeys: String, CodingKey {
            case recency = "Recency"
        }
    }

    public struct GetEmailChannelRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let applicationId: String

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case applicationId = "application-id"
        }
    }

    public struct GetApnsSandboxChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSSandboxChannelResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSSandboxChannelResponse", required: true, type: .structure)
        ]
        public let aPNSSandboxChannelResponse: APNSSandboxChannelResponse

        public init(aPNSSandboxChannelResponse: APNSSandboxChannelResponse) {
            self.aPNSSandboxChannelResponse = aPNSSandboxChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSSandboxChannelResponse = "APNSSandboxChannelResponse"
        }
    }

    public struct MessageResult: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StatusCode", required: false, type: .integer), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedToken", required: false, type: .string), 
            AWSShapeMember(label: "DeliveryStatus", required: false, type: .enum)
        ]
        /// Downstream service status code.
        public let statusCode: Int32?
        /// Status message for message delivery.
        public let statusMessage: String?
        /// If token was updated as part of delivery. (This is GCM Specific)
        public let updatedToken: String?
        /// Delivery status of message.
        public let deliveryStatus: DeliveryStatus?

        public init(statusCode: Int32? = nil, statusMessage: String? = nil, updatedToken: String? = nil, deliveryStatus: DeliveryStatus? = nil) {
            self.statusCode = statusCode
            self.statusMessage = statusMessage
            self.updatedToken = updatedToken
            self.deliveryStatus = deliveryStatus
        }

        private enum CodingKeys: String, CodingKey {
            case statusCode = "StatusCode"
            case statusMessage = "StatusMessage"
            case updatedToken = "UpdatedToken"
            case deliveryStatus = "DeliveryStatus"
        }
    }

    public struct CampaignState: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CampaignStatus", required: false, type: .enum)
        ]
        /// The status of the campaign, or the status of a treatment that belongs to an A/B test campaign.
        /// Valid values: SCHEDULED, EXECUTING, PENDING_NEXT_RUN, COMPLETED, PAUSED
        public let campaignStatus: CampaignStatus?

        public init(campaignStatus: CampaignStatus? = nil) {
            self.campaignStatus = campaignStatus
        }

        private enum CodingKeys: String, CodingKey {
            case campaignStatus = "CampaignStatus"
        }
    }

    public struct DeleteApnsChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSChannelResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSChannelResponse", required: true, type: .structure)
        ]
        public let aPNSChannelResponse: APNSChannelResponse

        public init(aPNSChannelResponse: APNSChannelResponse) {
            self.aPNSChannelResponse = aPNSChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSChannelResponse = "APNSChannelResponse"
        }
    }

    public struct DeleteSegmentRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SegmentId", location: .uri(locationName: "segment-id"), required: true, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string)
        ]
        public let segmentId: String
        public let applicationId: String

        public init(segmentId: String, applicationId: String) {
            self.segmentId = segmentId
            self.applicationId = applicationId
        }

        private enum CodingKeys: String, CodingKey {
            case segmentId = "segment-id"
            case applicationId = "application-id"
        }
    }

    public struct ImportJobsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Item", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of import jobs for the application.
        public let item: [ImportJobResponse]?
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        public let nextToken: String?

        public init(item: [ImportJobResponse]? = nil, nextToken: String? = nil) {
            self.item = item
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case item = "Item"
            case nextToken = "NextToken"
        }
    }

    public struct GetImportJobsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", location: .querystring(locationName: "page-size"), required: false, type: .string), 
            AWSShapeMember(label: "ApplicationId", location: .uri(locationName: "application-id"), required: true, type: .string), 
            AWSShapeMember(label: "Token", location: .querystring(locationName: "token"), required: false, type: .string)
        ]
        public let pageSize: String?
        public let applicationId: String
        public let token: String?

        public init(pageSize: String? = nil, applicationId: String, token: String? = nil) {
            self.pageSize = pageSize
            self.applicationId = applicationId
            self.token = token
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "page-size"
            case applicationId = "application-id"
            case token = "token"
        }
    }

    public struct CampaignSmsMessage: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Body", required: false, type: .string), 
            AWSShapeMember(label: "SenderId", required: false, type: .string), 
            AWSShapeMember(label: "MessageType", required: false, type: .enum)
        ]
        /// The SMS text body.
        public let body: String?
        /// Sender ID of sent message.
        public let senderId: String?
        /// Is this is a transactional SMS message, otherwise a promotional message.
        public let messageType: MessageType?

        public init(body: String? = nil, senderId: String? = nil, messageType: MessageType? = nil) {
            self.body = body
            self.senderId = senderId
            self.messageType = messageType
        }

        private enum CodingKeys: String, CodingKey {
            case body = "Body"
            case senderId = "SenderId"
            case messageType = "MessageType"
        }
    }

    public struct DirectMessageConfiguration: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GCMMessage", required: false, type: .structure), 
            AWSShapeMember(label: "SMSMessage", required: false, type: .structure), 
            AWSShapeMember(label: "DefaultPushNotificationMessage", required: false, type: .structure), 
            AWSShapeMember(label: "APNSMessage", required: false, type: .structure), 
            AWSShapeMember(label: "DefaultMessage", required: false, type: .structure)
        ]
        /// The message to GCM channels. Overrides the default push notification message.
        public let gCMMessage: GCMMessage?
        /// The message to SMS channels. Overrides the default message.
        public let sMSMessage: SMSMessage?
        /// The default push notification message for all push channels.
        public let defaultPushNotificationMessage: DefaultPushNotificationMessage?
        /// The message to APNS channels. Overrides the default push notification message.
        public let aPNSMessage: APNSMessage?
        /// The default message for all channels.
        public let defaultMessage: DefaultMessage?

        public init(gCMMessage: GCMMessage? = nil, sMSMessage: SMSMessage? = nil, defaultPushNotificationMessage: DefaultPushNotificationMessage? = nil, aPNSMessage: APNSMessage? = nil, defaultMessage: DefaultMessage? = nil) {
            self.gCMMessage = gCMMessage
            self.sMSMessage = sMSMessage
            self.defaultPushNotificationMessage = defaultPushNotificationMessage
            self.aPNSMessage = aPNSMessage
            self.defaultMessage = defaultMessage
        }

        private enum CodingKeys: String, CodingKey {
            case gCMMessage = "GCMMessage"
            case sMSMessage = "SMSMessage"
            case defaultPushNotificationMessage = "DefaultPushNotificationMessage"
            case aPNSMessage = "APNSMessage"
            case defaultMessage = "DefaultMessage"
        }
    }

    public struct EndpointDemographic: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Locale", required: false, type: .string), 
            AWSShapeMember(label: "Platform", required: false, type: .string), 
            AWSShapeMember(label: "Timezone", required: false, type: .string), 
            AWSShapeMember(label: "PlatformVersion", required: false, type: .string), 
            AWSShapeMember(label: "Make", required: false, type: .string), 
            AWSShapeMember(label: "AppVersion", required: false, type: .string), 
            AWSShapeMember(label: "Model", required: false, type: .string), 
            AWSShapeMember(label: "ModelVersion", required: false, type: .string)
        ]
        /// The endpoint locale in the following format: The ISO 639-1 alpha-2 code, followed by an underscore, followed by an ISO 3166-1 alpha-2 value.
        public let locale: String?
        /// The endpoint platform, such as ios or android.
        public let platform: String?
        /// The timezone of the endpoint. Specified as a tz database value, such as Americas/Los_Angeles.
        public let timezone: String?
        /// The endpoint platform version.
        public let platformVersion: String?
        /// The endpoint make, such as such as Apple or Samsung.
        public let make: String?
        /// The version of the application associated with the endpoint.
        public let appVersion: String?
        /// The endpoint model, such as iPhone.
        public let model: String?
        /// The endpoint model version.
        public let modelVersion: String?

        public init(locale: String? = nil, platform: String? = nil, timezone: String? = nil, platformVersion: String? = nil, make: String? = nil, appVersion: String? = nil, model: String? = nil, modelVersion: String? = nil) {
            self.locale = locale
            self.platform = platform
            self.timezone = timezone
            self.platformVersion = platformVersion
            self.make = make
            self.appVersion = appVersion
            self.model = model
            self.modelVersion = modelVersion
        }

        private enum CodingKeys: String, CodingKey {
            case locale = "Locale"
            case platform = "Platform"
            case timezone = "Timezone"
            case platformVersion = "PlatformVersion"
            case make = "Make"
            case appVersion = "AppVersion"
            case model = "Model"
            case modelVersion = "ModelVersion"
        }
    }

    public struct MessageConfiguration: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SMSMessage", required: false, type: .structure), 
            AWSShapeMember(label: "EmailMessage", required: false, type: .structure), 
            AWSShapeMember(label: "GCMMessage", required: false, type: .structure), 
            AWSShapeMember(label: "APNSMessage", required: false, type: .structure), 
            AWSShapeMember(label: "DefaultMessage", required: false, type: .structure)
        ]
        /// The SMS message configuration.
        public let sMSMessage: CampaignSmsMessage?
        /// The email message configuration.
        public let emailMessage: CampaignEmailMessage?
        /// The message that the campaign delivers to GCM channels. Overrides the default message.
        public let gCMMessage: Message?
        /// The message that the campaign delivers to APNS channels. Overrides the default message.
        public let aPNSMessage: Message?
        /// The default message for all channels.
        public let defaultMessage: Message?

        public init(sMSMessage: CampaignSmsMessage? = nil, emailMessage: CampaignEmailMessage? = nil, gCMMessage: Message? = nil, aPNSMessage: Message? = nil, defaultMessage: Message? = nil) {
            self.sMSMessage = sMSMessage
            self.emailMessage = emailMessage
            self.gCMMessage = gCMMessage
            self.aPNSMessage = aPNSMessage
            self.defaultMessage = defaultMessage
        }

        private enum CodingKeys: String, CodingKey {
            case sMSMessage = "SMSMessage"
            case emailMessage = "EmailMessage"
            case gCMMessage = "GCMMessage"
            case aPNSMessage = "APNSMessage"
            case defaultMessage = "DefaultMessage"
        }
    }

    public enum SegmentType: String, CustomStringConvertible, Codable {
        case dimensional = "DIMENSIONAL"
        case `import` = "IMPORT"
        public var description: String { return self.rawValue }
    }

    public struct GCMMessage: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RestrictedPackageName", required: false, type: .string), 
            AWSShapeMember(label: "IconReference", required: false, type: .string), 
            AWSShapeMember(label: "CollapseKey", required: false, type: .string), 
            AWSShapeMember(label: "Data", required: false, type: .map), 
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "ImageIconUrl", required: false, type: .string), 
            AWSShapeMember(label: "SilentPush", required: false, type: .boolean), 
            AWSShapeMember(label: "SmallImageIconUrl", required: false, type: .string), 
            AWSShapeMember(label: "Action", required: false, type: .enum), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "RawContent", required: false, type: .string), 
            AWSShapeMember(label: "Sound", required: false, type: .string), 
            AWSShapeMember(label: "ImageUrl", required: false, type: .string), 
            AWSShapeMember(label: "Body", required: false, type: .string), 
            AWSShapeMember(label: "Substitutions", required: false, type: .map)
        ]
        /// This parameter specifies the package name of the application where the registration tokens must match in order to receive the message.
        public let restrictedPackageName: String?
        /// The icon image name of the asset saved in your application.
        public let iconReference: String?
        /// This parameter identifies a group of messages (e.g., with collapse_key: "Updates Available") that can be collapsed, so that only the last message gets sent when delivery can be resumed. This is intended to avoid sending too many of the same messages when the device comes back online or becomes active.
        public let collapseKey: String?
        public let data: [String: String]?
        /// The message title that displays above the message on the user's device.
        public let title: String?
        /// The URL that points to an image used as the large icon to the notification content view.
        public let imageIconUrl: String?
        /// Indicates if the message should display on the users device. Silent pushes can be used for Remote Configuration and Phone Home use cases.
        public let silentPush: Bool?
        /// The URL that points to an image used as the small icon for the notification which will be used to represent the notification in the status bar and content view
        public let smallImageIconUrl: String?
        /// The action that occurs if the user taps a push notification delivered by the campaign: OPEN_APP - Your app launches, or it becomes the foreground app if it has been sent to the background. This is the default action. DEEP_LINK - Uses deep linking features in iOS and Android to open your app and display a designated user interface within the app. URL - The default mobile browser on the user's device launches and opens a web page at the URL you specify. Possible values include: OPEN_APP | DEEP_LINK | URL
        public let action: Action?
        /// The URL to open in the user's mobile browser. Used if the value for Action is URL.
        public let url: String?
        /// The Raw JSON formatted string to be used as the payload. This value overrides the message.
        public let rawContent: String?
        /// Indicates a sound to play when the device receives the notification. Supports default, or the filename of a sound resource bundled in the app. Android sound files must reside in /res/raw/
        public let sound: String?
        /// The URL that points to an image used in the push notification.
        public let imageUrl: String?
        /// The message body of the notification, the email body or the text message.
        public let body: String?
        public let substitutions: [String: [String]]?

        public init(restrictedPackageName: String? = nil, iconReference: String? = nil, collapseKey: String? = nil, data: [String: String]? = nil, title: String? = nil, imageIconUrl: String? = nil, silentPush: Bool? = nil, smallImageIconUrl: String? = nil, action: Action? = nil, url: String? = nil, rawContent: String? = nil, sound: String? = nil, imageUrl: String? = nil, body: String? = nil, substitutions: [String: [String]]? = nil) {
            self.restrictedPackageName = restrictedPackageName
            self.iconReference = iconReference
            self.collapseKey = collapseKey
            self.data = data
            self.title = title
            self.imageIconUrl = imageIconUrl
            self.silentPush = silentPush
            self.smallImageIconUrl = smallImageIconUrl
            self.action = action
            self.url = url
            self.rawContent = rawContent
            self.sound = sound
            self.imageUrl = imageUrl
            self.body = body
            self.substitutions = substitutions
        }

        private enum CodingKeys: String, CodingKey {
            case restrictedPackageName = "RestrictedPackageName"
            case iconReference = "IconReference"
            case collapseKey = "CollapseKey"
            case data = "Data"
            case title = "Title"
            case imageIconUrl = "ImageIconUrl"
            case silentPush = "SilentPush"
            case smallImageIconUrl = "SmallImageIconUrl"
            case action = "Action"
            case url = "Url"
            case rawContent = "RawContent"
            case sound = "Sound"
            case imageUrl = "ImageUrl"
            case body = "Body"
            case substitutions = "Substitutions"
        }
    }

    public struct DeleteApnsSandboxChannelResponse: AWSShape {
        /// The key for the payload
        public static let payloadPath: String? = "APNSSandboxChannelResponse"
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "APNSSandboxChannelResponse", required: true, type: .structure)
        ]
        public let aPNSSandboxChannelResponse: APNSSandboxChannelResponse

        public init(aPNSSandboxChannelResponse: APNSSandboxChannelResponse) {
            self.aPNSSandboxChannelResponse = aPNSSandboxChannelResponse
        }

        private enum CodingKeys: String, CodingKey {
            case aPNSSandboxChannelResponse = "APNSSandboxChannelResponse"
        }
    }

    public struct WriteSegmentRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Dimensions", required: false, type: .structure)
        ]
        /// The name of segment
        public let name: String?
        /// The segment dimensions attributes.
        public let dimensions: SegmentDimensions?

        public init(name: String? = nil, dimensions: SegmentDimensions? = nil) {
            self.name = name
            self.dimensions = dimensions
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case dimensions = "Dimensions"
        }
    }

}