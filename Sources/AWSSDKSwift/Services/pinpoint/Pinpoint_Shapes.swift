// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Pinpoint {

    public struct EndpointBatchRequest: Serializable, Initializable {
        /// List of items to update. Maximum 100 items
        var item: [EndpointBatchItem]? = nil

        public init() {}

        public init(item: [EndpointBatchItem]? = nil) {
            self.item = item
        }

    }

    public struct UpdateEndpointsBatchResponse: Serializable, Initializable {
        var messageBody: MessageBody = MessageBody()

        public init() {}

        public init(messageBody: MessageBody) {
            self.messageBody = messageBody
        }

    }

    public struct GetCampaignActivitiesRequest: Serializable, Initializable {
        var pageSize: String? = nil
        var campaignId: String = ""
        var applicationId: String = ""
        var token: String? = nil

        public init() {}

        public init(pageSize: String? = nil, campaignId: String, applicationId: String, token: String? = nil) {
            self.pageSize = pageSize
            self.campaignId = campaignId
            self.applicationId = applicationId
            self.token = token
        }

    }

    public struct EndpointRequest: Serializable, Initializable {
        /// The endpoint status. Can be either ACTIVE or INACTIVE. Will be set to INACTIVE if a delivery fails. Will be set to ACTIVE if the address is updated.
        var endpointStatus: String? = nil
        var metrics: [String: Double]? = nil
        /// Indicates whether a user has opted out of receiving messages with one of the following values:  ALL – User receives all messages. NONE – User receives no messages.
        var optOut: String? = nil
        /// The last time the endpoint was updated. Provided in ISO 8601 format.
        var effectiveDate: String? = nil
        /// The address or token of the endpoint.
        var address: String? = nil
        /// The endpoint location attributes.
        var location: EndpointLocation? = nil
        /// The endpoint demographic attributes.
        var demographic: EndpointDemographic? = nil
        var attributes: [String: [String]]? = nil
        /// The unique ID for the most recent request to update the endpoint.
        var requestId: String? = nil
        /// Custom user-specific attributes that your app reports to Amazon Pinpoint.
        var user: EndpointUser? = nil
        var channelType: String? = nil

        public init() {}

        public init(endpointStatus: String? = nil, metrics: [String: Double]? = nil, optOut: String? = nil, effectiveDate: String? = nil, address: String? = nil, location: EndpointLocation? = nil, demographic: EndpointDemographic? = nil, attributes: [String: [String]]? = nil, requestId: String? = nil, user: EndpointUser? = nil, channelType: String? = nil) {
            self.endpointStatus = endpointStatus
            self.metrics = metrics
            self.optOut = optOut
            self.effectiveDate = effectiveDate
            self.address = address
            self.location = location
            self.demographic = demographic
            self.attributes = attributes
            self.requestId = requestId
            self.user = user
            self.channelType = channelType
        }

    }

    public struct UpdateApplicationSettingsResponse: Serializable, Initializable {
        var applicationSettingsResource: ApplicationSettingsResource = ApplicationSettingsResource()

        public init() {}

        public init(applicationSettingsResource: ApplicationSettingsResource) {
            self.applicationSettingsResource = applicationSettingsResource
        }

    }

    public struct GetGcmChannelRequest: Serializable, Initializable {
        var applicationId: String = ""

        public init() {}

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

    }

    public struct GCMChannelRequest: Serializable, Initializable {
        /// Platform credential API key from Google.
        var apiKey: String? = nil

        public init() {}

        public init(apiKey: String? = nil) {
            self.apiKey = apiKey
        }

    }

    public struct CreateCampaignRequest: Serializable, Initializable {
        var applicationId: String = ""
        var writeCampaignRequest: WriteCampaignRequest = WriteCampaignRequest()

        public init() {}

        public init(applicationId: String, writeCampaignRequest: WriteCampaignRequest) {
            self.applicationId = applicationId
            self.writeCampaignRequest = writeCampaignRequest
        }

    }

    public struct GetSegmentRequest: Serializable, Initializable {
        var segmentId: String = ""
        var applicationId: String = ""

        public init() {}

        public init(segmentId: String, applicationId: String) {
            self.segmentId = segmentId
            self.applicationId = applicationId
        }

    }

    public struct QuietTime: Serializable, Initializable {
        /// The default end time for quiet time in ISO 8601 format.
        var end: String? = nil
        /// The default start time for quiet time in ISO 8601 format.
        var start: String? = nil

        public init() {}

        public init(end: String? = nil, start: String? = nil) {
            self.end = end
            self.start = start
        }

    }

    public struct DeleteApnsChannelRequest: Serializable, Initializable {
        var applicationId: String = ""

        public init() {}

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

    }

    public struct DeleteCampaignRequest: Serializable, Initializable {
        var campaignId: String = ""
        var applicationId: String = ""

        public init() {}

        public init(campaignId: String, applicationId: String) {
            self.campaignId = campaignId
            self.applicationId = applicationId
        }

    }

    public struct DeleteGcmChannelResponse: Serializable, Initializable {
        var gCMChannelResponse: GCMChannelResponse = GCMChannelResponse()

        public init() {}

        public init(gCMChannelResponse: GCMChannelResponse) {
            self.gCMChannelResponse = gCMChannelResponse
        }

    }

    public struct GetSegmentsRequest: Serializable, Initializable {
        var pageSize: String? = nil
        var applicationId: String = ""
        var token: String? = nil

        public init() {}

        public init(pageSize: String? = nil, applicationId: String, token: String? = nil) {
            self.pageSize = pageSize
            self.applicationId = applicationId
            self.token = token
        }

    }

    public struct GetImportJobResponse: Serializable, Initializable {
        var importJobResponse: ImportJobResponse = ImportJobResponse()

        public init() {}

        public init(importJobResponse: ImportJobResponse) {
            self.importJobResponse = importJobResponse
        }

    }

    public struct CreateSegmentRequest: Serializable, Initializable {
        var applicationId: String = ""
        var writeSegmentRequest: WriteSegmentRequest = WriteSegmentRequest()

        public init() {}

        public init(applicationId: String, writeSegmentRequest: WriteSegmentRequest) {
            self.applicationId = applicationId
            self.writeSegmentRequest = writeSegmentRequest
        }

    }

    public struct GetSegmentVersionsRequest: Serializable, Initializable {
        var pageSize: String? = nil
        var token: String? = nil
        var applicationId: String = ""
        var segmentId: String = ""

        public init() {}

        public init(pageSize: String? = nil, token: String? = nil, applicationId: String, segmentId: String) {
            self.pageSize = pageSize
            self.token = token
            self.applicationId = applicationId
            self.segmentId = segmentId
        }

    }

    public struct Message: Serializable, Initializable {
        var action: String? = nil
        /// The URL to open in the user's mobile browser. Used if the value for Action is URL.
        var url: String? = nil
        /// The URL that points to the media resource, for example a .mp4 or .gif file.
        var mediaUrl: String? = nil
        /// The message title that displays above the message on the user's device.
        var title: String? = nil
        /// The URL that points to an image used in the push notification.
        var imageUrl: String? = nil
        /// Indicates if the message should display on the users device.  Silent pushes can be used for Remote Configuration and Phone Home use cases. 
        var silentPush: Bool? = nil
        /// The JSON payload used for a silent push.
        var jsonBody: String? = nil
        /// The message body. Can include up to 140 characters.
        var body: String? = nil
        /// The URL that points to the icon image for the push notification icon, for example, the app icon.
        var imageIconUrl: String? = nil

        public init() {}

        public init(action: String? = nil, url: String? = nil, mediaUrl: String? = nil, title: String? = nil, imageUrl: String? = nil, silentPush: Bool? = nil, jsonBody: String? = nil, body: String? = nil, imageIconUrl: String? = nil) {
            self.action = action
            self.url = url
            self.mediaUrl = mediaUrl
            self.title = title
            self.imageUrl = imageUrl
            self.silentPush = silentPush
            self.jsonBody = jsonBody
            self.body = body
            self.imageIconUrl = imageIconUrl
        }

    }

    public struct GetApplicationSettingsRequest: Serializable, Initializable {
        var applicationId: String = ""

        public init() {}

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

    }

    public struct GetSegmentVersionRequest: Serializable, Initializable {
        var applicationId: String = ""
        var segmentId: String = ""
        var version: String = ""

        public init() {}

        public init(applicationId: String, segmentId: String, version: String) {
            self.applicationId = applicationId
            self.segmentId = segmentId
            self.version = version
        }

    }

    public struct SegmentLocation: Serializable, Initializable {
        /// The country filter according to ISO 3166-1 Alpha-2 codes.
        var country: SetDimension? = nil

        public init() {}

        public init(country: SetDimension? = nil) {
            self.country = country
        }

    }

    public struct WriteCampaignRequest: Serializable, Initializable {
        /// The custom name of a variation of the campaign used for A/B testing.
        var treatmentName: String? = nil
        /// The version of the segment to which the campaign sends messages.
        var segmentVersion: Int32? = nil
        /// Treatments that are defined in addition to the default treatment.
        var additionalTreatments: [WriteTreatmentResource]? = nil
        /// The custom name of the campaign.
        var name: String? = nil
        /// A custom description for the treatment.
        var treatmentDescription: String? = nil
        /// The allocated percentage of end users who will not receive messages from this campaign.
        var holdoutPercent: Int32? = nil
        /// The campaign limits settings.
        var limits: CampaignLimits? = nil
        /// The campaign schedule.
        var schedule: Schedule? = nil
        /// The message configuration settings.
        var messageConfiguration: MessageConfiguration? = nil
        /// The ID of the segment to which the campaign sends messages.
        var segmentId: String? = nil
        /// Indicates whether the campaign is paused. A paused campaign does not send messages unless you resume it by setting IsPaused to false.
        var isPaused: Bool? = nil
        /// A description of the campaign.
        var description: String? = nil

        public init() {}

        public init(treatmentName: String? = nil, segmentVersion: Int32? = nil, additionalTreatments: [WriteTreatmentResource]? = nil, name: String? = nil, treatmentDescription: String? = nil, holdoutPercent: Int32? = nil, limits: CampaignLimits? = nil, schedule: Schedule? = nil, messageConfiguration: MessageConfiguration? = nil, segmentId: String? = nil, isPaused: Bool? = nil, description: String? = nil) {
            self.treatmentName = treatmentName
            self.segmentVersion = segmentVersion
            self.additionalTreatments = additionalTreatments
            self.name = name
            self.treatmentDescription = treatmentDescription
            self.holdoutPercent = holdoutPercent
            self.limits = limits
            self.schedule = schedule
            self.messageConfiguration = messageConfiguration
            self.segmentId = segmentId
            self.isPaused = isPaused
            self.description = description
        }

    }

    public struct UpdateApplicationSettingsRequest: Serializable, Initializable {
        var writeApplicationSettingsRequest: WriteApplicationSettingsRequest = WriteApplicationSettingsRequest()
        var applicationId: String = ""

        public init() {}

        public init(writeApplicationSettingsRequest: WriteApplicationSettingsRequest, applicationId: String) {
            self.writeApplicationSettingsRequest = writeApplicationSettingsRequest
            self.applicationId = applicationId
        }

    }

    public struct WriteTreatmentResource: Serializable, Initializable {
        /// The campaign schedule.
        var schedule: Schedule? = nil
        /// A custom description for the treatment.
        var treatmentDescription: String? = nil
        /// The message configuration settings.
        var messageConfiguration: MessageConfiguration? = nil
        /// The allocated percentage of users for this treatment.
        var sizePercent: Int32? = nil
        /// The custom name of a variation of the campaign used for A/B testing.
        var treatmentName: String? = nil

        public init() {}

        public init(schedule: Schedule? = nil, treatmentDescription: String? = nil, messageConfiguration: MessageConfiguration? = nil, sizePercent: Int32? = nil, treatmentName: String? = nil) {
            self.schedule = schedule
            self.treatmentDescription = treatmentDescription
            self.messageConfiguration = messageConfiguration
            self.sizePercent = sizePercent
            self.treatmentName = treatmentName
        }

    }

    public struct TreatmentResource: Serializable, Initializable {
        /// The custom name of a variation of the campaign used for A/B testing.
        var treatmentName: String? = nil
        /// A custom description for the treatment.
        var treatmentDescription: String? = nil
        /// The allocated percentage of users for this treatment.
        var sizePercent: Int32? = nil
        /// The treatment status.
        var state: CampaignState? = nil
        /// The campaign schedule.
        var schedule: Schedule? = nil
        /// The message configuration settings.
        var messageConfiguration: MessageConfiguration? = nil
        /// The unique treatment ID.
        var id: String? = nil

        public init() {}

        public init(treatmentName: String? = nil, treatmentDescription: String? = nil, sizePercent: Int32? = nil, state: CampaignState? = nil, schedule: Schedule? = nil, messageConfiguration: MessageConfiguration? = nil, id: String? = nil) {
            self.treatmentName = treatmentName
            self.treatmentDescription = treatmentDescription
            self.sizePercent = sizePercent
            self.state = state
            self.schedule = schedule
            self.messageConfiguration = messageConfiguration
            self.id = id
        }

    }

    public struct EndpointResponse: Serializable, Initializable {
        /// Custom user-specific attributes that your app reports to Amazon Pinpoint.
        var user: EndpointUser? = nil
        /// The ShardId of endpoint
        var shardId: String? = nil
        /// Indicates whether a user has opted out of receiving messages with one of the following values:  ALL – User receives all messages. NONE – User receives no messages.
        var optOut: String? = nil
        var metrics: [String: Double]? = nil
        /// The last time the endpoint was created. Provided in ISO 8601 format.
        var creationDate: String? = nil
        /// The unique ID that you assigned to the endpoint. The ID should be a globally unique identifier (GUID) to ensure that it is unique compared to all other endpoints for the application.
        var id: String? = nil
        /// A number from 0 - 99 that represents the cohort the endpoint is assigned to. Endpoints are grouped into cohorts randomly, and each cohort contains approximately 1 percent of the endpoints for an app. Amazon Pinpoint assigns cohorts to the holdout or treatment allocations for a campaign.
        var cohortId: String? = nil
        /// The last time the endpoint was updated. Provided in ISO 8601 format.
        var effectiveDate: String? = nil
        /// The endpoint location attributes.
        var location: EndpointLocation? = nil
        /// The address or token of the endpoint.
        var address: String? = nil
        /// The endpoint demographic attributes.
        var demographic: EndpointDemographic? = nil
        var attributes: [String: [String]]? = nil
        /// The ID of the application associated with the endpoint.
        var applicationId: String? = nil
        /// The unique ID for the most recent request to update the endpoint.
        var requestId: String? = nil
        /// The endpoint status. Can be either ACTIVE or INACTIVE. Will be set to INACTIVE if a delivery fails. Will be set to ACTIVE if the address is updated.
        var endpointStatus: String? = nil
        var channelType: String? = nil

        public init() {}

        public init(user: EndpointUser? = nil, shardId: String? = nil, optOut: String? = nil, metrics: [String: Double]? = nil, creationDate: String? = nil, id: String? = nil, cohortId: String? = nil, effectiveDate: String? = nil, location: EndpointLocation? = nil, address: String? = nil, demographic: EndpointDemographic? = nil, attributes: [String: [String]]? = nil, applicationId: String? = nil, requestId: String? = nil, endpointStatus: String? = nil, channelType: String? = nil) {
            self.user = user
            self.shardId = shardId
            self.optOut = optOut
            self.metrics = metrics
            self.creationDate = creationDate
            self.id = id
            self.cohortId = cohortId
            self.effectiveDate = effectiveDate
            self.location = location
            self.address = address
            self.demographic = demographic
            self.attributes = attributes
            self.applicationId = applicationId
            self.requestId = requestId
            self.endpointStatus = endpointStatus
            self.channelType = channelType
        }

    }

    public struct GetImportJobRequest: Serializable, Initializable {
        var jobId: String = ""
        var applicationId: String = ""

        public init() {}

        public init(jobId: String, applicationId: String) {
            self.jobId = jobId
            self.applicationId = applicationId
        }

    }

    public struct CampaignResponse: Serializable, Initializable {
        /// The custom name of a variation of the campaign used for A/B testing.
        var treatmentName: String? = nil
        /// The version of the segment to which the campaign sends messages.
        var segmentVersion: Int32? = nil
        /// The campaign limits settings.
        var limits: CampaignLimits? = nil
        /// The campaign status.  An A/B test campaign will have a status of COMPLETED only when all treatments have a status of COMPLETED.
        var state: CampaignState? = nil
        /// The date the campaign was created in ISO 8601 format.
        var creationDate: String? = nil
        /// The campaign schedule.
        var schedule: Schedule? = nil
        /// The message configuration settings.
        var messageConfiguration: MessageConfiguration? = nil
        /// The ID of the segment to which the campaign sends messages.
        var segmentId: String? = nil
        /// A description of the campaign.
        var description: String? = nil
        /// The unique campaign ID.
        var id: String? = nil
        /// A custom description for the treatment.
        var treatmentDescription: String? = nil
        /// Treatments that are defined in addition to the default treatment.
        var additionalTreatments: [TreatmentResource]? = nil
        /// The custom name of the campaign.
        var name: String? = nil
        /// The allocated percentage of end users who will not receive messages from this campaign.
        var holdoutPercent: Int32? = nil
        /// The campaign version number.
        var version: Int32? = nil
        /// The date the campaign was last updated in ISO 8601 format.	
        var lastModifiedDate: String? = nil
        /// The ID of the application to which the campaign applies.
        var applicationId: String? = nil
        /// Indicates whether the campaign is paused. A paused campaign does not send messages unless you resume it by setting IsPaused to false.
        var isPaused: Bool? = nil
        /// The status of the campaign's default treatment. Only present for A/B test campaigns.
        var defaultState: CampaignState? = nil

        public init() {}

        public init(treatmentName: String? = nil, segmentVersion: Int32? = nil, limits: CampaignLimits? = nil, state: CampaignState? = nil, creationDate: String? = nil, schedule: Schedule? = nil, messageConfiguration: MessageConfiguration? = nil, segmentId: String? = nil, description: String? = nil, id: String? = nil, treatmentDescription: String? = nil, additionalTreatments: [TreatmentResource]? = nil, name: String? = nil, holdoutPercent: Int32? = nil, version: Int32? = nil, lastModifiedDate: String? = nil, applicationId: String? = nil, isPaused: Bool? = nil, defaultState: CampaignState? = nil) {
            self.treatmentName = treatmentName
            self.segmentVersion = segmentVersion
            self.limits = limits
            self.state = state
            self.creationDate = creationDate
            self.schedule = schedule
            self.messageConfiguration = messageConfiguration
            self.segmentId = segmentId
            self.description = description
            self.id = id
            self.treatmentDescription = treatmentDescription
            self.additionalTreatments = additionalTreatments
            self.name = name
            self.holdoutPercent = holdoutPercent
            self.version = version
            self.lastModifiedDate = lastModifiedDate
            self.applicationId = applicationId
            self.isPaused = isPaused
            self.defaultState = defaultState
        }

    }

    public struct WriteApplicationSettingsRequest: Serializable, Initializable {
        /// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own.
        var limits: CampaignLimits? = nil
        /// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own.
        var quietTime: QuietTime? = nil

        public init() {}

        public init(limits: CampaignLimits? = nil, quietTime: QuietTime? = nil) {
            self.limits = limits
            self.quietTime = quietTime
        }

    }

    public struct GetCampaignRequest: Serializable, Initializable {
        var campaignId: String = ""
        var applicationId: String = ""

        public init() {}

        public init(campaignId: String, applicationId: String) {
            self.campaignId = campaignId
            self.applicationId = applicationId
        }

    }

    public struct UpdateEndpointRequest: Serializable, Initializable {
        var endpointRequest: EndpointRequest = EndpointRequest()
        var endpointId: String = ""
        var applicationId: String = ""

        public init() {}

        public init(endpointRequest: EndpointRequest, endpointId: String, applicationId: String) {
            self.endpointRequest = endpointRequest
            self.endpointId = endpointId
            self.applicationId = applicationId
        }

    }

    public struct GetSegmentImportJobsResponse: Serializable, Initializable {
        var importJobsResponse: ImportJobsResponse = ImportJobsResponse()

        public init() {}

        public init(importJobsResponse: ImportJobsResponse) {
            self.importJobsResponse = importJobsResponse
        }

    }

    public struct UpdateGcmChannelResponse: Serializable, Initializable {
        var gCMChannelResponse: GCMChannelResponse = GCMChannelResponse()

        public init() {}

        public init(gCMChannelResponse: GCMChannelResponse) {
            self.gCMChannelResponse = gCMChannelResponse
        }

    }

    public struct EndpointBatchItem: Serializable, Initializable {
        var channelType: String? = nil
        /// Custom user-specific attributes that your app reports to Amazon Pinpoint.
        var user: EndpointUser? = nil
        /// The last time the endpoint was updated. Provided in ISO 8601 format.
        var effectiveDate: String? = nil
        /// Indicates whether a user has opted out of receiving messages with one of the following values:  ALL – User receives all messages. NONE – User receives no messages.
        var optOut: String? = nil
        var metrics: [String: Double]? = nil
        /// The endpoint location attributes.
        var location: EndpointLocation? = nil
        /// The address or token of the endpoint.
        var address: String? = nil
        /// The endpoint demographic attributes.
        var demographic: EndpointDemographic? = nil
        var attributes: [String: [String]]? = nil
        /// The unique ID for the most recent request to update the endpoint.
        var requestId: String? = nil
        /// The endpoint status. Can be either ACTIVE or INACTIVE. Will be set to INACTIVE if a delivery fails. Will be set to ACTIVE if the address is updated.
        var endpointStatus: String? = nil
        var id: String? = nil

        public init() {}

        public init(channelType: String? = nil, user: EndpointUser? = nil, effectiveDate: String? = nil, optOut: String? = nil, metrics: [String: Double]? = nil, location: EndpointLocation? = nil, address: String? = nil, demographic: EndpointDemographic? = nil, attributes: [String: [String]]? = nil, requestId: String? = nil, endpointStatus: String? = nil, id: String? = nil) {
            self.channelType = channelType
            self.user = user
            self.effectiveDate = effectiveDate
            self.optOut = optOut
            self.metrics = metrics
            self.location = location
            self.address = address
            self.demographic = demographic
            self.attributes = attributes
            self.requestId = requestId
            self.endpointStatus = endpointStatus
            self.id = id
        }

    }

    public struct CampaignsResponse: Serializable, Initializable {
        /// A list of campaigns.
        var item: [CampaignResponse]? = nil
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        var nextToken: String? = nil

        public init() {}

        public init(item: [CampaignResponse]? = nil, nextToken: String? = nil) {
            self.item = item
            self.nextToken = nextToken
        }

    }

    public struct GCMChannelResponse: Serializable, Initializable {
        var id: String? = nil
        /// The platform type. Will be GCM
        var platform: String? = nil
        /// Version of channel
        var version: Int32? = nil
        /// Last date this was updated
        var lastModifiedDate: String? = nil
        /// The GCM API key from Google.
        var credential: String? = nil
        var applicationId: String? = nil
        /// When was this segment created
        var creationDate: String? = nil
        /// Is this channel archived
        var isArchived: Bool? = nil
        /// Who last updated this entry
        var lastModifiedBy: String? = nil

        public init() {}

        public init(id: String? = nil, platform: String? = nil, version: Int32? = nil, lastModifiedDate: String? = nil, credential: String? = nil, applicationId: String? = nil, creationDate: String? = nil, isArchived: Bool? = nil, lastModifiedBy: String? = nil) {
            self.id = id
            self.platform = platform
            self.version = version
            self.lastModifiedDate = lastModifiedDate
            self.credential = credential
            self.applicationId = applicationId
            self.creationDate = creationDate
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
        }

    }

    public struct ActivitiesResponse: Serializable, Initializable {
        /// List of campaign activities
        var item: [ActivityResponse]? = nil

        public init() {}

        public init(item: [ActivityResponse]? = nil) {
            self.item = item
        }

    }

    public struct GetEndpointResponse: Serializable, Initializable {
        var endpointResponse: EndpointResponse = EndpointResponse()

        public init() {}

        public init(endpointResponse: EndpointResponse) {
            self.endpointResponse = endpointResponse
        }

    }

    public struct EndpointLocation: Serializable, Initializable {
        /// The longitude of the endpoint location. Rounded to one decimal (Roughly corresponding to a mile).
        var longitude: Double? = nil
        /// Country according to ISO 3166-1 Alpha-2 codes. For example, US.
        var country: String? = nil
        /// The postal code or zip code of the endpoint.
        var postalCode: String? = nil
        /// The city where the endpoint is located.
        var city: String? = nil
        /// The latitude of the endpoint location. Rounded to one decimal (Roughly corresponding to a mile).
        var latitude: Double? = nil
        /// The region of the endpoint location. For example, corresponds to a state in US.
        var region: String? = nil

        public init() {}

        public init(longitude: Double? = nil, country: String? = nil, postalCode: String? = nil, city: String? = nil, latitude: Double? = nil, region: String? = nil) {
            self.longitude = longitude
            self.country = country
            self.postalCode = postalCode
            self.city = city
            self.latitude = latitude
            self.region = region
        }

    }

    public struct GetApnsChannelRequest: Serializable, Initializable {
        var applicationId: String = ""

        public init() {}

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

    }

    public struct RecencyDimension: Serializable, Initializable {
        var duration: String? = nil
        var recencyType: String? = nil

        public init() {}

        public init(duration: String? = nil, recencyType: String? = nil) {
            self.duration = duration
            self.recencyType = recencyType
        }

    }

    public struct Schedule: Serializable, Initializable {
        /// The scheduled time that the campaign begins in ISO 8601 format.
        var startTime: String? = nil
        /// The scheduled time that the campaign ends in ISO 8601 format.
        var endTime: String? = nil
        var frequency: String? = nil
        /// The time during which the campaign sends no messages.
        var quietTime: QuietTime? = nil
        /// Indicates whether the campaign schedule takes effect according to each user's local time.
        var isLocalTime: Bool? = nil
        /// The starting UTC offset for the schedule if the value for isLocalTime is true  Valid values:  UTC UTC+01 UTC+02 UTC+03 UTC+03:30 UTC+04 UTC+04:30 UTC+05 UTC+05:30 UTC+05:45 UTC+06 UTC+06:30 UTC+07 UTC+08 UTC+09 UTC+09:30 UTC+10 UTC+10:30 UTC+11 UTC+12 UTC+13 UTC-02 UTC-03 UTC-04 UTC-05 UTC-06 UTC-07 UTC-08 UTC-09 UTC-10 UTC-11
        var timezone: String? = nil

        public init() {}

        public init(startTime: String? = nil, endTime: String? = nil, frequency: String? = nil, quietTime: QuietTime? = nil, isLocalTime: Bool? = nil, timezone: String? = nil) {
            self.startTime = startTime
            self.endTime = endTime
            self.frequency = frequency
            self.quietTime = quietTime
            self.isLocalTime = isLocalTime
            self.timezone = timezone
        }

    }

    public struct GetApnsChannelResponse: Serializable, Initializable {
        var aPNSChannelResponse: APNSChannelResponse = APNSChannelResponse()

        public init() {}

        public init(aPNSChannelResponse: APNSChannelResponse) {
            self.aPNSChannelResponse = aPNSChannelResponse
        }

    }

    public struct SegmentImportResource: Serializable, Initializable {
        /// A unique, custom ID assigned to the IAM role that restricts who can assume the role.
        var externalId: String? = nil
        var format: String? = nil
        /// The Amazon Resource Name (ARN) of an IAM role that grants Amazon Pinpoint access to the endpoints in Amazon S3.
        var roleArn: String? = nil
        /// A URL that points to the Amazon S3 location from which the endpoints for this segment were imported.
        var s3Url: String? = nil
        /// The number of endpoints that were successfully imported to create this segment.
        var size: Int32? = nil

        public init() {}

        public init(externalId: String? = nil, format: String? = nil, roleArn: String? = nil, s3Url: String? = nil, size: Int32? = nil) {
            self.externalId = externalId
            self.format = format
            self.roleArn = roleArn
            self.s3Url = s3Url
            self.size = size
        }

    }

    public struct ImportJobRequest: Serializable, Initializable {
        /// A URL that points to the location within an Amazon S3 bucket that contains the endpoints to import. The location can be a folder or a single file. The URL should follow this format: s3://bucket-name/folder-name/file-name  Amazon Pinpoint will import endpoints from this location and any subfolders it contains.
        var s3Url: String? = nil
        /// Sets whether the endpoints create a segment when they are imported.
        var defineSegment: Bool? = nil
        var format: String? = nil
        /// A unique, custom ID assigned to the IAM role that restricts who can assume the role.	
        var externalId: String? = nil
        /// Sets whether the endpoints are registered with Amazon Pinpoint when they are imported.
        var registerEndpoints: Bool? = nil
        /// A custom name for the segment created by the import job. Use if DefineSegment is true.
        var segmentName: String? = nil
        /// The Amazon Resource Name (ARN) of an IAM role that grants Amazon Pinpoint access to the Amazon S3 location that contains the endpoints to import.
        var roleArn: String? = nil
        /// The ID of the segment to update if the import job is meant to update an existing segment.
        var segmentId: String? = nil

        public init() {}

        public init(s3Url: String? = nil, defineSegment: Bool? = nil, format: String? = nil, externalId: String? = nil, registerEndpoints: Bool? = nil, segmentName: String? = nil, roleArn: String? = nil, segmentId: String? = nil) {
            self.s3Url = s3Url
            self.defineSegment = defineSegment
            self.format = format
            self.externalId = externalId
            self.registerEndpoints = registerEndpoints
            self.segmentName = segmentName
            self.roleArn = roleArn
            self.segmentId = segmentId
        }

    }

    public struct GetCampaignsRequest: Serializable, Initializable {
        var pageSize: String? = nil
        var applicationId: String = ""
        var token: String? = nil

        public init() {}

        public init(pageSize: String? = nil, applicationId: String, token: String? = nil) {
            self.pageSize = pageSize
            self.applicationId = applicationId
            self.token = token
        }

    }

    public struct CreateImportJobRequest: Serializable, Initializable {
        var importJobRequest: ImportJobRequest = ImportJobRequest()
        var applicationId: String = ""

        public init() {}

        public init(importJobRequest: ImportJobRequest, applicationId: String) {
            self.importJobRequest = importJobRequest
            self.applicationId = applicationId
        }

    }

    public struct ImportJobResource: Serializable, Initializable {
        /// A URL that points to the location within an Amazon S3 bucket that contains the endpoints to import. The location can be a folder or a single file. The URL should follow this format: s3://bucket-name/folder-name/file-name  Amazon Pinpoint will import endpoints from this location and any subfolders it contains.
        var s3Url: String? = nil
        /// Sets whether the endpoints create a segment when they are imported.
        var defineSegment: Bool? = nil
        var format: String? = nil
        /// A unique, custom ID assigned to the IAM role that restricts who can assume the role.	
        var externalId: String? = nil
        /// Sets whether the endpoints are registered with Amazon Pinpoint when they are imported.
        var registerEndpoints: Bool? = nil
        /// A custom name for the segment created by the import job. Use if DefineSegment is true.
        var segmentName: String? = nil
        /// The Amazon Resource Name (ARN) of an IAM role that grants Amazon Pinpoint access to the Amazon S3 location that contains the endpoints to import.
        var roleArn: String? = nil
        /// The ID of the segment to update if the import job is meant to update an existing segment.
        var segmentId: String? = nil

        public init() {}

        public init(s3Url: String? = nil, defineSegment: Bool? = nil, format: String? = nil, externalId: String? = nil, registerEndpoints: Bool? = nil, segmentName: String? = nil, roleArn: String? = nil, segmentId: String? = nil) {
            self.s3Url = s3Url
            self.defineSegment = defineSegment
            self.format = format
            self.externalId = externalId
            self.registerEndpoints = registerEndpoints
            self.segmentName = segmentName
            self.roleArn = roleArn
            self.segmentId = segmentId
        }

    }

    public struct SetDimension: Serializable, Initializable {
        var dimensionType: String? = nil
        var values: [String]? = nil

        public init() {}

        public init(dimensionType: String? = nil, values: [String]? = nil) {
            self.dimensionType = dimensionType
            self.values = values
        }

    }

    public struct APNSChannelRequest: Serializable, Initializable {
        /// The distribution certificate from Apple.
        var certificate: String? = nil
        /// The certificate private key.
        var privateKey: String? = nil

        public init() {}

        public init(certificate: String? = nil, privateKey: String? = nil) {
            self.certificate = certificate
            self.privateKey = privateKey
        }

    }

    public struct GetCampaignVersionResponse: Serializable, Initializable {
        var campaignResponse: CampaignResponse = CampaignResponse()

        public init() {}

        public init(campaignResponse: CampaignResponse) {
            self.campaignResponse = campaignResponse
        }

    }

    public struct EndpointUser: Serializable, Initializable {
        /// The unique ID of the user.
        var userId: String? = nil
        var userAttributes: [String: [String]]? = nil

        public init() {}

        public init(userId: String? = nil, userAttributes: [String: [String]]? = nil) {
            self.userId = userId
            self.userAttributes = userAttributes
        }

    }

    public struct MessageBody: Serializable, Initializable {
        var requestID: String? = nil
        var message: String? = nil

        public init() {}

        public init(requestID: String? = nil, message: String? = nil) {
            self.requestID = requestID
            self.message = message
        }

    }

    public struct SegmentDimensions: Serializable, Initializable {
        /// The segment demographics attributes.
        var demographic: SegmentDemographics? = nil
        /// The segment behaviors attributes.
        var behavior: SegmentBehaviors? = nil
        /// Custom segment attributes.
        var attributes: [String: AttributeDimension]? = nil
        /// The segment location attributes. 
        var location: SegmentLocation? = nil

        public init() {}

        public init(demographic: SegmentDemographics? = nil, behavior: SegmentBehaviors? = nil, attributes: [String: AttributeDimension]? = nil, location: SegmentLocation? = nil) {
            self.demographic = demographic
            self.behavior = behavior
            self.attributes = attributes
            self.location = location
        }

    }

    public struct GetGcmChannelResponse: Serializable, Initializable {
        var gCMChannelResponse: GCMChannelResponse = GCMChannelResponse()

        public init() {}

        public init(gCMChannelResponse: GCMChannelResponse) {
            self.gCMChannelResponse = gCMChannelResponse
        }

    }

    public struct GetSegmentVersionsResponse: Serializable, Initializable {
        var segmentsResponse: SegmentsResponse = SegmentsResponse()

        public init() {}

        public init(segmentsResponse: SegmentsResponse) {
            self.segmentsResponse = segmentsResponse
        }

    }

    public struct ApplicationSettingsResource: Serializable, Initializable {
        /// The date that the settings were last updated in ISO 8601 format.
        var lastModifiedDate: String? = nil
        /// The default campaign limits for the app. These limits apply to each campaign for the app, unless the campaign overrides the default with limits of its own.
        var limits: CampaignLimits? = nil
        /// The default quiet time for the app. Each campaign for this app sends no messages during this time unless the campaign overrides the default with a quiet time of its own.
        var quietTime: QuietTime? = nil
        /// The unique ID for the application.
        var applicationId: String? = nil

        public init() {}

        public init(lastModifiedDate: String? = nil, limits: CampaignLimits? = nil, quietTime: QuietTime? = nil, applicationId: String? = nil) {
            self.lastModifiedDate = lastModifiedDate
            self.limits = limits
            self.quietTime = quietTime
            self.applicationId = applicationId
        }

    }

    public struct UpdateEndpointResponse: Serializable, Initializable {
        var messageBody: MessageBody = MessageBody()

        public init() {}

        public init(messageBody: MessageBody) {
            self.messageBody = messageBody
        }

    }

    public struct GetCampaignActivitiesResponse: Serializable, Initializable {
        var activitiesResponse: ActivitiesResponse = ActivitiesResponse()

        public init() {}

        public init(activitiesResponse: ActivitiesResponse) {
            self.activitiesResponse = activitiesResponse
        }

    }

    public struct GetCampaignVersionsRequest: Serializable, Initializable {
        var pageSize: String? = nil
        var campaignId: String = ""
        var applicationId: String = ""
        var token: String? = nil

        public init() {}

        public init(pageSize: String? = nil, campaignId: String, applicationId: String, token: String? = nil) {
            self.pageSize = pageSize
            self.campaignId = campaignId
            self.applicationId = applicationId
            self.token = token
        }

    }

    public struct AttributeDimension: Serializable, Initializable {
        var attributeType: String? = nil
        var values: [String]? = nil

        public init() {}

        public init(attributeType: String? = nil, values: [String]? = nil) {
            self.attributeType = attributeType
            self.values = values
        }

    }

    public struct UpdateEndpointsBatchRequest: Serializable, Initializable {
        var endpointBatchRequest: EndpointBatchRequest = EndpointBatchRequest()
        var applicationId: String = ""

        public init() {}

        public init(endpointBatchRequest: EndpointBatchRequest, applicationId: String) {
            self.endpointBatchRequest = endpointBatchRequest
            self.applicationId = applicationId
        }

    }

    public struct APNSChannelResponse: Serializable, Initializable {
        var id: String? = nil
        /// The platform type. Will be APNS.
        var platform: String? = nil
        /// Version of channel
        var version: Int32? = nil
        /// Last date this was updated
        var lastModifiedDate: String? = nil
        /// When was this segment created
        var creationDate: String? = nil
        var applicationId: String? = nil
        /// Is this channel archived
        var isArchived: Bool? = nil
        /// Who last updated this entry
        var lastModifiedBy: String? = nil

        public init() {}

        public init(id: String? = nil, platform: String? = nil, version: Int32? = nil, lastModifiedDate: String? = nil, creationDate: String? = nil, applicationId: String? = nil, isArchived: Bool? = nil, lastModifiedBy: String? = nil) {
            self.id = id
            self.platform = platform
            self.version = version
            self.lastModifiedDate = lastModifiedDate
            self.creationDate = creationDate
            self.applicationId = applicationId
            self.isArchived = isArchived
            self.lastModifiedBy = lastModifiedBy
        }

    }

    public struct SegmentsResponse: Serializable, Initializable {
        /// The list of segments.
        var item: [SegmentResponse]? = nil
        /// An identifier used to retrieve the next page of results. The token is null if no additional pages exist.
        var nextToken: String? = nil

        public init() {}

        public init(item: [SegmentResponse]? = nil, nextToken: String? = nil) {
            self.item = item
            self.nextToken = nextToken
        }

    }

    public struct SegmentResponse: Serializable, Initializable {
        /// The unique segment ID.
        var id: String? = nil
        /// The name of segment
        var name: String? = nil
        /// The segment version number.
        var version: Int32? = nil
        /// The segment dimensions attributes.
        var dimensions: SegmentDimensions? = nil
        /// The date the segment was created in ISO 8601 format.
        var creationDate: String? = nil
        /// The ID of the application to which the segment applies.
        var applicationId: String? = nil
        /// The date the segment was last updated in ISO 8601 format.
        var lastModifiedDate: String? = nil
        /// The import job settings.
        var importDefinition: SegmentImportResource? = nil
        var segmentType: String? = nil

        public init() {}

        public init(id: String? = nil, name: String? = nil, version: Int32? = nil, dimensions: SegmentDimensions? = nil, creationDate: String? = nil, applicationId: String? = nil, lastModifiedDate: String? = nil, importDefinition: SegmentImportResource? = nil, segmentType: String? = nil) {
            self.id = id
            self.name = name
            self.version = version
            self.dimensions = dimensions
            self.creationDate = creationDate
            self.applicationId = applicationId
            self.lastModifiedDate = lastModifiedDate
            self.importDefinition = importDefinition
            self.segmentType = segmentType
        }

    }

    public struct ImportJobResponse: Serializable, Initializable {
        /// The date the import job completed in ISO 8601 format.
        var completionDate: String? = nil
        /// The import job settings.
        var definition: ImportJobResource? = nil
        /// The number of pieces that have failed to import as of the time of the request.
        var failedPieces: Int32? = nil
        /// The total number of pieces that must be imported to finish the job. Each piece is an approximately equal portion of the endpoints to import.
        var totalPieces: Int32? = nil
        /// The date the import job was created in ISO 8601 format.
        var creationDate: String? = nil
        var jobStatus: String? = nil
        /// The unique ID of the import job.
        var id: String? = nil
        /// The number of endpoints that were processed by the import job.
        var totalProcessed: Int32? = nil
        /// The number of pieces that have successfully imported as of the time of the request.
        var completedPieces: Int32? = nil
        /// The number of endpoints that failed to import; for example, because of syntax errors.
        var totalFailures: Int32? = nil
        var failures: [String]? = nil
        /// The unique ID of the application to which the import job applies.
        var applicationId: String? = nil
        /// The job type. Will be Import.
        var type: String? = nil

        public init() {}

        public init(completionDate: String? = nil, definition: ImportJobResource? = nil, failedPieces: Int32? = nil, totalPieces: Int32? = nil, creationDate: String? = nil, jobStatus: String? = nil, id: String? = nil, totalProcessed: Int32? = nil, completedPieces: Int32? = nil, totalFailures: Int32? = nil, failures: [String]? = nil, applicationId: String? = nil, type: String? = nil) {
            self.completionDate = completionDate
            self.definition = definition
            self.failedPieces = failedPieces
            self.totalPieces = totalPieces
            self.creationDate = creationDate
            self.jobStatus = jobStatus
            self.id = id
            self.totalProcessed = totalProcessed
            self.completedPieces = completedPieces
            self.totalFailures = totalFailures
            self.failures = failures
            self.applicationId = applicationId
            self.type = type
        }

    }

    public struct CreateImportJobResponse: Serializable, Initializable {
        var importJobResponse: ImportJobResponse = ImportJobResponse()

        public init() {}

        public init(importJobResponse: ImportJobResponse) {
            self.importJobResponse = importJobResponse
        }

    }

    public struct GetApplicationSettingsResponse: Serializable, Initializable {
        var applicationSettingsResource: ApplicationSettingsResource = ApplicationSettingsResource()

        public init() {}

        public init(applicationSettingsResource: ApplicationSettingsResource) {
            self.applicationSettingsResource = applicationSettingsResource
        }

    }

    public struct GetImportJobsResponse: Serializable, Initializable {
        var importJobsResponse: ImportJobsResponse = ImportJobsResponse()

        public init() {}

        public init(importJobsResponse: ImportJobsResponse) {
            self.importJobsResponse = importJobsResponse
        }

    }

    public struct GetCampaignResponse: Serializable, Initializable {
        var campaignResponse: CampaignResponse = CampaignResponse()

        public init() {}

        public init(campaignResponse: CampaignResponse) {
            self.campaignResponse = campaignResponse
        }

    }

    public struct UpdateSegmentRequest: Serializable, Initializable {
        var applicationId: String = ""
        var segmentId: String = ""
        var writeSegmentRequest: WriteSegmentRequest = WriteSegmentRequest()

        public init() {}

        public init(applicationId: String, segmentId: String, writeSegmentRequest: WriteSegmentRequest) {
            self.applicationId = applicationId
            self.segmentId = segmentId
            self.writeSegmentRequest = writeSegmentRequest
        }

    }

    public struct DeleteGcmChannelRequest: Serializable, Initializable {
        var applicationId: String = ""

        public init() {}

        public init(applicationId: String) {
            self.applicationId = applicationId
        }

    }

    public struct UpdateApnsChannelResponse: Serializable, Initializable {
        var aPNSChannelResponse: APNSChannelResponse = APNSChannelResponse()

        public init() {}

        public init(aPNSChannelResponse: APNSChannelResponse) {
            self.aPNSChannelResponse = aPNSChannelResponse
        }

    }

    public struct UpdateGcmChannelRequest: Serializable, Initializable {
        var gCMChannelRequest: GCMChannelRequest = GCMChannelRequest()
        var applicationId: String = ""

        public init() {}

        public init(gCMChannelRequest: GCMChannelRequest, applicationId: String) {
            self.gCMChannelRequest = gCMChannelRequest
            self.applicationId = applicationId
        }

    }

    public struct DeleteCampaignResponse: Serializable, Initializable {
        var campaignResponse: CampaignResponse = CampaignResponse()

        public init() {}

        public init(campaignResponse: CampaignResponse) {
            self.campaignResponse = campaignResponse
        }

    }

    public struct CampaignLimits: Serializable, Initializable {
        /// The maximum number of messages that the campaign can send daily.
        var daily: Int32? = nil
        /// The maximum total number of messages that the campaign can send.
        var total: Int32? = nil

        public init() {}

        public init(daily: Int32? = nil, total: Int32? = nil) {
            self.daily = daily
            self.total = total
        }

    }

    public struct SegmentDemographics: Serializable, Initializable {
        /// The device make criteria for the segment.
        var make: SetDimension? = nil
        /// The device platform criteria for the segment.
        var platform: SetDimension? = nil
        /// The device type criteria for the segment.
        var deviceType: SetDimension? = nil
        /// The app version criteria for the segment.
        var appVersion: SetDimension? = nil
        /// The device model criteria for the segment.
        var model: SetDimension? = nil

        public init() {}

        public init(make: SetDimension? = nil, platform: SetDimension? = nil, deviceType: SetDimension? = nil, appVersion: SetDimension? = nil, model: SetDimension? = nil) {
            self.make = make
            self.platform = platform
            self.deviceType = deviceType
            self.appVersion = appVersion
            self.model = model
        }

    }

    public struct CreateCampaignResponse: Serializable, Initializable {
        var campaignResponse: CampaignResponse = CampaignResponse()

        public init() {}

        public init(campaignResponse: CampaignResponse) {
            self.campaignResponse = campaignResponse
        }

    }

    public struct ActivityResponse: Serializable, Initializable {
        /// The ID of the campaign to which the activity applies.
        var campaignId: String? = nil
        /// The scheduled start time for the activity in ISO 8601 format.
        var scheduledStart: String? = nil
        /// The actual start time of the activity in ISO 8601 format.
        var start: String? = nil
        /// The state of the activity.  Valid values: PENDING, INITIALIZING, RUNNING, PAUSED, CANCELLED, COMPLETED
        var state: String? = nil
        /// The actual time the activity was marked CANCELLED or COMPLETED. Provided in ISO 8601 format.
        var end: String? = nil
        /// The total number of endpoints to which the campaign attempts to deliver messages.
        var totalEndpointCount: Int32? = nil
        /// The ID of the application to which the campaign applies.
        var applicationId: String? = nil
        /// Indicates whether the activity succeeded.  Valid values: SUCCESS, FAIL
        var result: String? = nil
        /// The total number of endpoints to which the campaign successfully delivered messages.
        var successfulEndpointCount: Int32? = nil
        /// The ID of a variation of the campaign used for A/B testing.
        var treatmentId: String? = nil
        /// The unique activity ID.
        var id: String? = nil

        public init() {}

        public init(campaignId: String? = nil, scheduledStart: String? = nil, start: String? = nil, state: String? = nil, end: String? = nil, totalEndpointCount: Int32? = nil, applicationId: String? = nil, result: String? = nil, successfulEndpointCount: Int32? = nil, treatmentId: String? = nil, id: String? = nil) {
            self.campaignId = campaignId
            self.scheduledStart = scheduledStart
            self.start = start
            self.state = state
            self.end = end
            self.totalEndpointCount = totalEndpointCount
            self.applicationId = applicationId
            self.result = result
            self.successfulEndpointCount = successfulEndpointCount
            self.treatmentId = treatmentId
            self.id = id
        }

    }

    public struct GetSegmentResponse: Serializable, Initializable {
        var segmentResponse: SegmentResponse = SegmentResponse()

        public init() {}

        public init(segmentResponse: SegmentResponse) {
            self.segmentResponse = segmentResponse
        }

    }

    public struct GetSegmentImportJobsRequest: Serializable, Initializable {
        var pageSize: String? = nil
        var token: String? = nil
        var applicationId: String = ""
        var segmentId: String = ""

        public init() {}

        public init(pageSize: String? = nil, token: String? = nil, applicationId: String, segmentId: String) {
            self.pageSize = pageSize
            self.token = token
            self.applicationId = applicationId
            self.segmentId = segmentId
        }

    }

    public struct UpdateApnsChannelRequest: Serializable, Initializable {
        var aPNSChannelRequest: APNSChannelRequest = APNSChannelRequest()
        var applicationId: String = ""

        public init() {}

        public init(aPNSChannelRequest: APNSChannelRequest, applicationId: String) {
            self.aPNSChannelRequest = aPNSChannelRequest
            self.applicationId = applicationId
        }

    }

    public struct UpdateCampaignRequest: Serializable, Initializable {
        var applicationId: String = ""
        var campaignId: String = ""
        var writeCampaignRequest: WriteCampaignRequest = WriteCampaignRequest()

        public init() {}

        public init(applicationId: String, campaignId: String, writeCampaignRequest: WriteCampaignRequest) {
            self.applicationId = applicationId
            self.campaignId = campaignId
            self.writeCampaignRequest = writeCampaignRequest
        }

    }

    public struct CreateSegmentResponse: Serializable, Initializable {
        var segmentResponse: SegmentResponse = SegmentResponse()

        public init() {}

        public init(segmentResponse: SegmentResponse) {
            self.segmentResponse = segmentResponse
        }

    }

    public struct DeleteSegmentResponse: Serializable, Initializable {
        var segmentResponse: SegmentResponse = SegmentResponse()

        public init() {}

        public init(segmentResponse: SegmentResponse) {
            self.segmentResponse = segmentResponse
        }

    }

    public struct GetSegmentsResponse: Serializable, Initializable {
        var segmentsResponse: SegmentsResponse = SegmentsResponse()

        public init() {}

        public init(segmentsResponse: SegmentsResponse) {
            self.segmentsResponse = segmentsResponse
        }

    }

    public struct GetCampaignVersionsResponse: Serializable, Initializable {
        var campaignsResponse: CampaignsResponse = CampaignsResponse()

        public init() {}

        public init(campaignsResponse: CampaignsResponse) {
            self.campaignsResponse = campaignsResponse
        }

    }

    public struct GetCampaignsResponse: Serializable, Initializable {
        var campaignsResponse: CampaignsResponse = CampaignsResponse()

        public init() {}

        public init(campaignsResponse: CampaignsResponse) {
            self.campaignsResponse = campaignsResponse
        }

    }

    public struct GetSegmentVersionResponse: Serializable, Initializable {
        var segmentResponse: SegmentResponse = SegmentResponse()

        public init() {}

        public init(segmentResponse: SegmentResponse) {
            self.segmentResponse = segmentResponse
        }

    }

    public struct GetEndpointRequest: Serializable, Initializable {
        var endpointId: String = ""
        var applicationId: String = ""

        public init() {}

        public init(endpointId: String, applicationId: String) {
            self.endpointId = endpointId
            self.applicationId = applicationId
        }

    }

    public struct GetCampaignVersionRequest: Serializable, Initializable {
        var applicationId: String = ""
        var campaignId: String = ""
        var version: String = ""

        public init() {}

        public init(applicationId: String, campaignId: String, version: String) {
            self.applicationId = applicationId
            self.campaignId = campaignId
            self.version = version
        }

    }

    public struct UpdateCampaignResponse: Serializable, Initializable {
        var campaignResponse: CampaignResponse = CampaignResponse()

        public init() {}

        public init(campaignResponse: CampaignResponse) {
            self.campaignResponse = campaignResponse
        }

    }

    public struct SegmentBehaviors: Serializable, Initializable {
        /// The recency of use.
        var recency: RecencyDimension? = nil

        public init() {}

        public init(recency: RecencyDimension? = nil) {
            self.recency = recency
        }

    }

    public struct UpdateSegmentResponse: Serializable, Initializable {
        var segmentResponse: SegmentResponse = SegmentResponse()

        public init() {}

        public init(segmentResponse: SegmentResponse) {
            self.segmentResponse = segmentResponse
        }

    }

    public struct CampaignState: Serializable, Initializable {
        var campaignStatus: String? = nil

        public init() {}

        public init(campaignStatus: String? = nil) {
            self.campaignStatus = campaignStatus
        }

    }

    public struct DeleteApnsChannelResponse: Serializable, Initializable {
        var aPNSChannelResponse: APNSChannelResponse = APNSChannelResponse()

        public init() {}

        public init(aPNSChannelResponse: APNSChannelResponse) {
            self.aPNSChannelResponse = aPNSChannelResponse
        }

    }

    public struct DeleteSegmentRequest: Serializable, Initializable {
        var segmentId: String = ""
        var applicationId: String = ""

        public init() {}

        public init(segmentId: String, applicationId: String) {
            self.segmentId = segmentId
            self.applicationId = applicationId
        }

    }

    public struct ImportJobsResponse: Serializable, Initializable {
        /// A list of import jobs for the application.
        var item: [ImportJobResponse]? = nil
        /// The string that you use in a subsequent request to get the next page of results in a paginated response.
        var nextToken: String? = nil

        public init() {}

        public init(item: [ImportJobResponse]? = nil, nextToken: String? = nil) {
            self.item = item
            self.nextToken = nextToken
        }

    }

    public struct GetImportJobsRequest: Serializable, Initializable {
        var pageSize: String? = nil
        var applicationId: String = ""
        var token: String? = nil

        public init() {}

        public init(pageSize: String? = nil, applicationId: String, token: String? = nil) {
            self.pageSize = pageSize
            self.applicationId = applicationId
            self.token = token
        }

    }

    public struct MessageConfiguration: Serializable, Initializable {
        /// The message that the campaign delivers to GCM channels. Overrides the default message.
        var gCMMessage: Message? = nil
        /// The message that the campaign delivers to APNS channels. Overrides the default message.
        var aPNSMessage: Message? = nil
        /// The default message for all channels.
        var defaultMessage: Message? = nil

        public init() {}

        public init(gCMMessage: Message? = nil, aPNSMessage: Message? = nil, defaultMessage: Message? = nil) {
            self.gCMMessage = gCMMessage
            self.aPNSMessage = aPNSMessage
            self.defaultMessage = defaultMessage
        }

    }

    public struct EndpointDemographic: Serializable, Initializable {
        /// The endpoint locale in the following format: The ISO 639-1 alpha-2 code, followed by an underscore, followed by an ISO 3166-1 alpha-2 value. 
        var locale: String? = nil
        /// The endpoint platform, such as ios or android.
        var platform: String? = nil
        /// The timezone of the endpoint. Specified as a tz database value, such as Americas/Los_Angeles.
        var timezone: String? = nil
        /// The endpoint platform version.
        var platformVersion: String? = nil
        /// The endpoint make, such as such as Apple or Samsung.
        var make: String? = nil
        /// The version of the application associated with the endpoint.
        var appVersion: String? = nil
        /// The endpoint model, such as iPhone.
        var model: String? = nil
        /// The endpoint model version.
        var modelVersion: String? = nil

        public init() {}

        public init(locale: String? = nil, platform: String? = nil, timezone: String? = nil, platformVersion: String? = nil, make: String? = nil, appVersion: String? = nil, model: String? = nil, modelVersion: String? = nil) {
            self.locale = locale
            self.platform = platform
            self.timezone = timezone
            self.platformVersion = platformVersion
            self.make = make
            self.appVersion = appVersion
            self.model = model
            self.modelVersion = modelVersion
        }

    }

    public struct WriteSegmentRequest: Serializable, Initializable {
        /// The name of segment
        var name: String? = nil
        /// The segment dimensions attributes.
        var dimensions: SegmentDimensions? = nil

        public init() {}

        public init(name: String? = nil, dimensions: SegmentDimensions? = nil) {
            self.name = name
            self.dimensions = dimensions
        }

    }

}