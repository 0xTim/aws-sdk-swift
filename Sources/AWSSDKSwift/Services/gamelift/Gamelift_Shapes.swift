// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Gamelift {

    public struct DeleteFleetInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: true, type: .string)
        ]
        /// Unique identifier for a fleet to be deleted.
        public let fleetId: String

        public init(fleetId: String) {
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct UpdateFleetCapacityInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinSize", required: false, type: .integer), 
            AWSShapeMember(label: "MaxSize", required: false, type: .integer), 
            AWSShapeMember(label: "DesiredInstances", required: false, type: .integer), 
            AWSShapeMember(label: "FleetId", required: true, type: .string)
        ]
        /// Minimum value allowed for the fleet's instance count. Default if not set is 0.
        public let minSize: Int32?
        /// Maximum value allowed for the fleet's instance count. Default if not set is 1.
        public let maxSize: Int32?
        /// Number of EC2 instances you want this fleet to host.
        public let desiredInstances: Int32?
        /// Unique identifier for a fleet to update capacity for.
        public let fleetId: String

        public init(minSize: Int32? = nil, maxSize: Int32? = nil, desiredInstances: Int32? = nil, fleetId: String) {
            self.minSize = minSize
            self.maxSize = maxSize
            self.desiredInstances = desiredInstances
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case minSize = "MinSize"
            case maxSize = "MaxSize"
            case desiredInstances = "DesiredInstances"
            case fleetId = "FleetId"
        }
    }

    public struct DescribePlayerSessionsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlayerId", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "GameSessionId", required: false, type: .string), 
            AWSShapeMember(label: "PlayerSessionStatusFilter", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PlayerSessionId", required: false, type: .string)
        ]
        /// Unique identifier for a player to retrieve player sessions for.
        public let playerId: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. If a player session ID is specified, this parameter is ignored.
        public let limit: Int32?
        /// Unique identifier for the game session to retrieve player sessions for.
        public let gameSessionId: String?
        /// Player session status to filter results on. Possible player session statuses include the following:    RESERVED – The player session request has been received, but the player has not yet connected to the server process and/or been validated.     ACTIVE – The player has been validated by the server process and is currently connected.    COMPLETED – The player connection has been dropped.    TIMEDOUT – A player session request was received, but the player did not connect and/or was not validated within the time-out limit (60 seconds).  
        public let playerSessionStatusFilter: String?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value. If a player session ID is specified, this parameter is ignored.
        public let nextToken: String?
        /// Unique identifier for a player session to retrieve.
        public let playerSessionId: String?

        public init(playerId: String? = nil, limit: Int32? = nil, gameSessionId: String? = nil, playerSessionStatusFilter: String? = nil, nextToken: String? = nil, playerSessionId: String? = nil) {
            self.playerId = playerId
            self.limit = limit
            self.gameSessionId = gameSessionId
            self.playerSessionStatusFilter = playerSessionStatusFilter
            self.nextToken = nextToken
            self.playerSessionId = playerSessionId
        }

        private enum CodingKeys: String, CodingKey {
            case playerId = "PlayerId"
            case limit = "Limit"
            case gameSessionId = "GameSessionId"
            case playerSessionStatusFilter = "PlayerSessionStatusFilter"
            case nextToken = "NextToken"
            case playerSessionId = "PlayerSessionId"
        }
    }

    public struct SearchGameSessionsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SortExpression", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "FilterExpression", required: false, type: .string), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "AliasId", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Instructions on how to sort the search results. If no sort expression is included, the request returns results in random order. A sort expression consists of the following elements:    Operand -- Name of a game session attribute. Valid values are gameSessionName, gameSessionId, creationTimeMillis, playerSessionCount, maximumSessions, hasAvailablePlayerSessions.    Order -- Valid sort orders are ASC (ascending) and DESC (descending).   For example, this sort expression returns the oldest active sessions first: "SortExpression": "creationTimeMillis ASC". Results with a null value for the sort operand are returned at the end of the list.
        public let sortExpression: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. The maximum number of results returned is 20, even if this value is not set or is set higher than 20. 
        public let limit: Int32?
        /// String containing the search criteria for the session search. If no filter expression is included, the request returns results for all game sessions in the fleet that are in ACTIVE status. A filter expression can contain one or multiple conditions. Each condition consists of the following:    Operand -- Name of a game session attribute. Valid values are gameSessionName, gameSessionId, creationTimeMillis, playerSessionCount, maximumSessions, hasAvailablePlayerSessions.    Comparator -- Valid comparators are: =, &lt;&gt;, &lt;, &gt;, &lt;=, &gt;=.     Value -- Value to be searched for. Values can be numbers, boolean values (true/false) or strings. String values are case sensitive, enclosed in single quotes. Special characters must be escaped. Boolean and string values can only be used with the comparators = and &lt;&gt;. For example, the following filter expression searches on gameSessionName: "FilterExpression": "gameSessionName = 'Matt\\'s Awesome Game 1'".    To chain multiple conditions in a single expression, use the logical keywords AND, OR, and NOT and parentheses as needed. For example: x AND y AND NOT z, NOT (x OR y). Session search evaluates conditions from left to right using the following precedence rules:    =, &lt;&gt;, &lt;, &gt;, &lt;=, &gt;=    Parentheses   NOT   AND   OR   For example, this filter expression retrieves game sessions hosting at least ten players that have an open player slot: "maximumSessions&gt;=10 AND hasAvailablePlayerSessions=true". 
        public let filterExpression: String?
        /// Unique identifier for a fleet to search for active game sessions. Each request must reference either a fleet ID or alias ID, but not both.
        public let fleetId: String?
        /// Unique identifier for an alias associated with the fleet to search for active game sessions. Each request must reference either a fleet ID or alias ID, but not both.
        public let aliasId: String?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?

        public init(sortExpression: String? = nil, limit: Int32? = nil, filterExpression: String? = nil, fleetId: String? = nil, aliasId: String? = nil, nextToken: String? = nil) {
            self.sortExpression = sortExpression
            self.limit = limit
            self.filterExpression = filterExpression
            self.fleetId = fleetId
            self.aliasId = aliasId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case sortExpression = "SortExpression"
            case limit = "Limit"
            case filterExpression = "FilterExpression"
            case fleetId = "FleetId"
            case aliasId = "AliasId"
            case nextToken = "NextToken"
        }
    }

    public struct PutScalingPolicyOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// Descriptive label that is associated with a scaling policy. Policy names do not need to be unique.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public enum EventCode: String, CustomStringConvertible, Codable {
        case genericEvent = "GENERIC_EVENT"
        case fleetCreated = "FLEET_CREATED"
        case fleetDeleted = "FLEET_DELETED"
        case fleetScalingEvent = "FLEET_SCALING_EVENT"
        case fleetStateDownloading = "FLEET_STATE_DOWNLOADING"
        case fleetStateValidating = "FLEET_STATE_VALIDATING"
        case fleetStateBuilding = "FLEET_STATE_BUILDING"
        case fleetStateActivating = "FLEET_STATE_ACTIVATING"
        case fleetStateActive = "FLEET_STATE_ACTIVE"
        case fleetStateError = "FLEET_STATE_ERROR"
        case fleetInitializationFailed = "FLEET_INITIALIZATION_FAILED"
        case fleetBinaryDownloadFailed = "FLEET_BINARY_DOWNLOAD_FAILED"
        case fleetValidationLaunchPathNotFound = "FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND"
        case fleetValidationExecutableRuntimeFailure = "FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE"
        case fleetValidationTimedOut = "FLEET_VALIDATION_TIMED_OUT"
        case fleetActivationFailed = "FLEET_ACTIVATION_FAILED"
        case fleetActivationFailedNoInstances = "FLEET_ACTIVATION_FAILED_NO_INSTANCES"
        case fleetNewGameSessionProtectionPolicyUpdated = "FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED"
        case serverProcessInvalidPath = "SERVER_PROCESS_INVALID_PATH"
        case serverProcessSdkInitializationTimeout = "SERVER_PROCESS_SDK_INITIALIZATION_TIMEOUT"
        case serverProcessProcessReadyTimeout = "SERVER_PROCESS_PROCESS_READY_TIMEOUT"
        case serverProcessCrashed = "SERVER_PROCESS_CRASHED"
        case serverProcessTerminatedUnhealthy = "SERVER_PROCESS_TERMINATED_UNHEALTHY"
        case serverProcessForceTerminated = "SERVER_PROCESS_FORCE_TERMINATED"
        case serverProcessProcessExitTimeout = "SERVER_PROCESS_PROCESS_EXIT_TIMEOUT"
        case gameSessionActivationTimeout = "GAME_SESSION_ACTIVATION_TIMEOUT"
        case fleetCreationExtractingBuild = "FLEET_CREATION_EXTRACTING_BUILD"
        case fleetCreationRunningInstaller = "FLEET_CREATION_RUNNING_INSTALLER"
        case fleetCreationValidatingRuntimeConfig = "FLEET_CREATION_VALIDATING_RUNTIME_CONFIG"
        public var description: String { return self.rawValue }
    }

    public struct ScalingPolicy: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Threshold", required: false, type: .double), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "MetricName", required: false, type: .enum), 
            AWSShapeMember(label: "EvaluationPeriods", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ScalingAdjustment", required: false, type: .integer), 
            AWSShapeMember(label: "ComparisonOperator", required: false, type: .enum), 
            AWSShapeMember(label: "ScalingAdjustmentType", required: false, type: .enum), 
            AWSShapeMember(label: "FleetId", required: false, type: .string)
        ]
        /// Metric value used to trigger a scaling event.
        public let threshold: Double?
        /// Current status of the scaling policy. The scaling policy is only in force when in an ACTIVE status.    ACTIVE – The scaling policy is currently in force.    UPDATE_REQUESTED – A request to update the scaling policy has been received.    UPDATING – A change is being made to the scaling policy.    DELETE_REQUESTED – A request to delete the scaling policy has been received.    DELETING – The scaling policy is being deleted.    DELETED – The scaling policy has been deleted.    ERROR – An error occurred in creating the policy. It should be removed and recreated.  
        public let status: ScalingStatusType?
        /// Name of the Amazon GameLift-defined metric that is used to trigger an adjustment.    ActivatingGameSessions – number of game sessions in the process of being created (game session status = ACTIVATING).    ActiveGameSessions – number of game sessions currently running (game session status = ACTIVE).    CurrentPlayerSessions – number of active or reserved player sessions (player session status = ACTIVE or RESERVED).     AvailablePlayerSessions – number of player session slots currently available in active game sessions across the fleet, calculated by subtracting a game session's current player session count from its maximum player session count. This number does include game sessions that are not currently accepting players (game session PlayerSessionCreationPolicy = DENY_ALL).    ActiveInstances – number of instances currently running a game session.    IdleInstances – number of instances not currently running a game session.  
        public let metricName: MetricName?
        /// Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
        public let evaluationPeriods: Int32?
        /// Descriptive label that is associated with a scaling policy. Policy names do not need to be unique.
        public let name: String?
        /// Amount of adjustment to make, based on the scaling adjustment type.
        public let scalingAdjustment: Int32?
        /// Comparison operator to use when measuring a metric against the threshold value.
        public let comparisonOperator: ComparisonOperatorType?
        /// Type of adjustment to make to a fleet's instance count (see FleetCapacity):    ChangeInCapacity – add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.    ExactCapacity – set the instance count to the scaling adjustment value.    PercentChangeInCapacity – increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down.  
        public let scalingAdjustmentType: ScalingAdjustmentType?
        /// Unique identifier for a fleet that is associated with this scaling policy.
        public let fleetId: String?

        public init(threshold: Double? = nil, status: ScalingStatusType? = nil, metricName: MetricName? = nil, evaluationPeriods: Int32? = nil, name: String? = nil, scalingAdjustment: Int32? = nil, comparisonOperator: ComparisonOperatorType? = nil, scalingAdjustmentType: ScalingAdjustmentType? = nil, fleetId: String? = nil) {
            self.threshold = threshold
            self.status = status
            self.metricName = metricName
            self.evaluationPeriods = evaluationPeriods
            self.name = name
            self.scalingAdjustment = scalingAdjustment
            self.comparisonOperator = comparisonOperator
            self.scalingAdjustmentType = scalingAdjustmentType
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case threshold = "Threshold"
            case status = "Status"
            case metricName = "MetricName"
            case evaluationPeriods = "EvaluationPeriods"
            case name = "Name"
            case scalingAdjustment = "ScalingAdjustment"
            case comparisonOperator = "ComparisonOperator"
            case scalingAdjustmentType = "ScalingAdjustmentType"
            case fleetId = "FleetId"
        }
    }

    public struct GetGameSessionLogUrlOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PreSignedUrl", required: false, type: .string)
        ]
        /// Location of the requested game session logs, available for download.
        public let preSignedUrl: String?

        public init(preSignedUrl: String? = nil) {
            self.preSignedUrl = preSignedUrl
        }

        private enum CodingKeys: String, CodingKey {
            case preSignedUrl = "PreSignedUrl"
        }
    }

    public enum ScalingStatusType: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case updateRequested = "UPDATE_REQUESTED"
        case updating = "UPDATING"
        case deleteRequested = "DELETE_REQUESTED"
        case deleting = "DELETING"
        case deleted = "DELETED"
        case error = "ERROR"
        public var description: String { return self.rawValue }
    }

    public struct Build: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string), 
            AWSShapeMember(label: "OperatingSystem", required: false, type: .enum), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SizeOnDisk", required: false, type: .long), 
            AWSShapeMember(label: "BuildId", required: false, type: .string)
        ]
        /// Current status of the build. Possible build statuses include the following:    INITIALIZED – A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value.     READY – The game build has been successfully uploaded. You can now create new fleets for this build.    FAILED – The game build upload failed. You cannot create new fleets for this build.   
        public let status: BuildStatus?
        /// Descriptive label that is associated with a build. Build names do not need to be unique. It can be set using CreateBuild or UpdateBuild.
        public let name: String?
        /// Version that is associated with this build. Version strings do not need to be unique. This value can be set using CreateBuild or UpdateBuild.
        public let version: String?
        /// Operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build.
        public let operatingSystem: OperatingSystem?
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: TimeStamp?
        /// File size of the uploaded game build, expressed in bytes. When the build status is INITIALIZED, this value is 0.
        public let sizeOnDisk: Int64?
        /// Unique identifier for a build.
        public let buildId: String?

        public init(status: BuildStatus? = nil, name: String? = nil, version: String? = nil, operatingSystem: OperatingSystem? = nil, creationTime: TimeStamp? = nil, sizeOnDisk: Int64? = nil, buildId: String? = nil) {
            self.status = status
            self.name = name
            self.version = version
            self.operatingSystem = operatingSystem
            self.creationTime = creationTime
            self.sizeOnDisk = sizeOnDisk
            self.buildId = buildId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case name = "Name"
            case version = "Version"
            case operatingSystem = "OperatingSystem"
            case creationTime = "CreationTime"
            case sizeOnDisk = "SizeOnDisk"
            case buildId = "BuildId"
        }
    }

    public struct DescribeBuildInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BuildId", required: true, type: .string)
        ]
        /// Unique identifier for a build to retrieve properties for.
        public let buildId: String

        public init(buildId: String) {
            self.buildId = buildId
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
        }
    }

    public struct DescribeFleetPortSettingsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: true, type: .string)
        ]
        /// Unique identifier for a fleet to retrieve port settings for.
        public let fleetId: String

        public init(fleetId: String) {
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct DescribeFleetUtilizationOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "FleetUtilization", required: false, type: .list)
        ]
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// Collection of objects containing utilization information for each requested fleet ID.
        public let fleetUtilization: [FleetUtilization]?

        public init(nextToken: String? = nil, fleetUtilization: [FleetUtilization]? = nil) {
            self.nextToken = nextToken
            self.fleetUtilization = fleetUtilization
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case fleetUtilization = "FleetUtilization"
        }
    }

    public struct UpdateGameSessionOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSession", required: false, type: .structure)
        ]
        /// Object that contains the updated game session metadata.
        public let gameSession: GameSession?

        public init(gameSession: GameSession? = nil) {
            self.gameSession = gameSession
        }

        private enum CodingKeys: String, CodingKey {
            case gameSession = "GameSession"
        }
    }

    public enum EC2InstanceType: String, CustomStringConvertible, Codable {
        case t2Micro = "t2.micro"
        case t2Small = "t2.small"
        case t2Medium = "t2.medium"
        case t2Large = "t2.large"
        case c3Large = "c3.large"
        case c3Xlarge = "c3.xlarge"
        case c32Xlarge = "c3.2xlarge"
        case c34Xlarge = "c3.4xlarge"
        case c38Xlarge = "c3.8xlarge"
        case c4Large = "c4.large"
        case c4Xlarge = "c4.xlarge"
        case c42Xlarge = "c4.2xlarge"
        case c44Xlarge = "c4.4xlarge"
        case c48Xlarge = "c4.8xlarge"
        case r3Large = "r3.large"
        case r3Xlarge = "r3.xlarge"
        case r32Xlarge = "r3.2xlarge"
        case r34Xlarge = "r3.4xlarge"
        case r38Xlarge = "r3.8xlarge"
        case m3Medium = "m3.medium"
        case m3Large = "m3.large"
        case m3Xlarge = "m3.xlarge"
        case m32Xlarge = "m3.2xlarge"
        case m4Large = "m4.large"
        case m4Xlarge = "m4.xlarge"
        case m42Xlarge = "m4.2xlarge"
        case m44Xlarge = "m4.4xlarge"
        case m410Xlarge = "m4.10xlarge"
        public var description: String { return self.rawValue }
    }

    public struct ResolveAliasOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: false, type: .string)
        ]
        /// Fleet identifier that is associated with the requested alias.
        public let fleetId: String?

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct DescribeAliasInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AliasId", required: true, type: .string)
        ]
        /// Unique identifier for a fleet alias. Specify the alias you want to retrieve.
        public let aliasId: String

        public init(aliasId: String) {
            self.aliasId = aliasId
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
        }
    }

    public struct UpdateGameSessionQueueInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Destinations", required: false, type: .list), 
            AWSShapeMember(label: "TimeoutInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "PlayerLatencyPolicies", required: false, type: .list)
        ]
        /// List of fleets that can be used to fulfill game session placement requests in the queue. Fleets are identified by either a fleet ARN or a fleet alias ARN. Destinations are listed in default preference order. When updating this list, provide a complete list of destinations.
        public let destinations: [GameSessionQueueDestination]?
        /// Maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
        public let timeoutInSeconds: Int32?
        /// Descriptive label that is associated with queue. Queue names must be unique within each region.
        public let name: String
        /// Collection of latency policies to apply when processing game sessions placement requests with player latency information. Multiple policies are evaluated in order of the maximum latency value, starting with the lowest latency values. With just one policy, it is enforced at the start of the game session placement for the duration period. With multiple policies, each policy is enforced consecutively for its duration period. For example, a queue might enforce a 60-second policy followed by a 120-second policy, and then no policy for the remainder of the placement. When updating policies, provide a complete collection of policies.
        public let playerLatencyPolicies: [PlayerLatencyPolicy]?

        public init(destinations: [GameSessionQueueDestination]? = nil, timeoutInSeconds: Int32? = nil, name: String, playerLatencyPolicies: [PlayerLatencyPolicy]? = nil) {
            self.destinations = destinations
            self.timeoutInSeconds = timeoutInSeconds
            self.name = name
            self.playerLatencyPolicies = playerLatencyPolicies
        }

        private enum CodingKeys: String, CodingKey {
            case destinations = "Destinations"
            case timeoutInSeconds = "TimeoutInSeconds"
            case name = "Name"
            case playerLatencyPolicies = "PlayerLatencyPolicies"
        }
    }

    public enum MetricName: String, CustomStringConvertible, Codable {
        case activatinggamesessions = "ActivatingGameSessions"
        case activegamesessions = "ActiveGameSessions"
        case activeinstances = "ActiveInstances"
        case availablegamesessions = "AvailableGameSessions"
        case availableplayersessions = "AvailablePlayerSessions"
        case currentplayersessions = "CurrentPlayerSessions"
        case idleinstances = "IdleInstances"
        case percentavailablegamesessions = "PercentAvailableGameSessions"
        case percentidleinstances = "PercentIdleInstances"
        case queuedepth = "QueueDepth"
        case waittime = "WaitTime"
        public var description: String { return self.rawValue }
    }

    public struct DescribeGameSessionPlacementOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionPlacement", required: false, type: .structure)
        ]
        /// Object that describes the requested game session placement.
        public let gameSessionPlacement: GameSessionPlacement?

        public init(gameSessionPlacement: GameSessionPlacement? = nil) {
            self.gameSessionPlacement = gameSessionPlacement
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionPlacement = "GameSessionPlacement"
        }
    }

    public struct GameSession: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TerminationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "GameSessionId", required: false, type: .string), 
            AWSShapeMember(label: "MaximumPlayerSessionCount", required: false, type: .integer), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "IpAddress", required: false, type: .string), 
            AWSShapeMember(label: "CreatorId", required: false, type: .string), 
            AWSShapeMember(label: "PlayerSessionCreationPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "GameProperties", required: false, type: .list), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "CurrentPlayerSessionCount", required: false, type: .integer), 
            AWSShapeMember(label: "Port", required: false, type: .integer)
        ]
        /// Time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let terminationTime: TimeStamp?
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: TimeStamp?
        /// Unique identifier for the game session. A game session ID has the following format: arn:aws:gamelift:&lt;region&gt;::gamesession/&lt;fleet ID&gt;/&lt;custom ID string or idempotency token&gt;.
        public let gameSessionId: String?
        /// Maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int32?
        /// Current status of the game session. A game session must have an ACTIVE status to have player sessions.
        public let status: GameSessionStatus?
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        public let name: String?
        /// IP address of the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.
        public let ipAddress: String?
        /// Unique identifier for a player. This ID is used to enforce a resource protection policy (if one exists), that limits the number of game sessions a player can create.
        public let creatorId: String?
        /// Indicates whether or not the game session is accepting new players.
        public let playerSessionCreationPolicy: PlayerSessionCreationPolicy?
        /// Set of developer-defined properties for a game session. These properties are passed to the server process hosting the game session.
        public let gameProperties: [GameProperty]?
        /// Unique identifier for a fleet the game session is running on.
        public let fleetId: String?
        /// Number of players currently in the game session.
        public let currentPlayerSessionCount: Int32?
        /// Port number for the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.
        public let port: Int32?

        public init(terminationTime: TimeStamp? = nil, creationTime: TimeStamp? = nil, gameSessionId: String? = nil, maximumPlayerSessionCount: Int32? = nil, status: GameSessionStatus? = nil, name: String? = nil, ipAddress: String? = nil, creatorId: String? = nil, playerSessionCreationPolicy: PlayerSessionCreationPolicy? = nil, gameProperties: [GameProperty]? = nil, fleetId: String? = nil, currentPlayerSessionCount: Int32? = nil, port: Int32? = nil) {
            self.terminationTime = terminationTime
            self.creationTime = creationTime
            self.gameSessionId = gameSessionId
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.status = status
            self.name = name
            self.ipAddress = ipAddress
            self.creatorId = creatorId
            self.playerSessionCreationPolicy = playerSessionCreationPolicy
            self.gameProperties = gameProperties
            self.fleetId = fleetId
            self.currentPlayerSessionCount = currentPlayerSessionCount
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case terminationTime = "TerminationTime"
            case creationTime = "CreationTime"
            case gameSessionId = "GameSessionId"
            case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
            case status = "Status"
            case name = "Name"
            case ipAddress = "IpAddress"
            case creatorId = "CreatorId"
            case playerSessionCreationPolicy = "PlayerSessionCreationPolicy"
            case gameProperties = "GameProperties"
            case fleetId = "FleetId"
            case currentPlayerSessionCount = "CurrentPlayerSessionCount"
            case port = "Port"
        }
    }

    public struct ListBuildsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Builds", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Collection of build records that match the request.
        public let builds: [Build]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(builds: [Build]? = nil, nextToken: String? = nil) {
            self.builds = builds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case builds = "Builds"
            case nextToken = "NextToken"
        }
    }

    public enum ComparisonOperatorType: String, CustomStringConvertible, Codable {
        case greaterthanorequaltothreshold = "GreaterThanOrEqualToThreshold"
        case greaterthanthreshold = "GreaterThanThreshold"
        case lessthanthreshold = "LessThanThreshold"
        case lessthanorequaltothreshold = "LessThanOrEqualToThreshold"
        public var description: String { return self.rawValue }
    }

    public struct DescribeScalingPoliciesOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ScalingPolicies", required: false, type: .list)
        ]
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// Collection of objects containing the scaling policies matching the request.
        public let scalingPolicies: [ScalingPolicy]?

        public init(nextToken: String? = nil, scalingPolicies: [ScalingPolicy]? = nil) {
            self.nextToken = nextToken
            self.scalingPolicies = scalingPolicies
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scalingPolicies = "ScalingPolicies"
        }
    }

    public struct GameSessionPlacement: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlacedPlayerSessions", required: false, type: .list), 
            AWSShapeMember(label: "GameSessionRegion", required: false, type: .string), 
            AWSShapeMember(label: "PlacementId", required: false, type: .string), 
            AWSShapeMember(label: "PlayerLatencies", required: false, type: .list), 
            AWSShapeMember(label: "GameSessionId", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionName", required: false, type: .string), 
            AWSShapeMember(label: "MaximumPlayerSessionCount", required: false, type: .integer), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "GameSessionArn", required: false, type: .string), 
            AWSShapeMember(label: "IpAddress", required: false, type: .string), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "GameSessionQueueName", required: false, type: .string), 
            AWSShapeMember(label: "GameProperties", required: false, type: .list), 
            AWSShapeMember(label: "Port", required: false, type: .integer)
        ]
        /// Collection of information on player sessions created in response to the game session placement request. These player sessions are created only once a new game session is successfully placed (placement status is Fulfilled). This information includes the player ID (as provided in the placement request) and the corresponding player session ID. Retrieve full player sessions by calling DescribePlayerSessions with the player session ID.
        public let placedPlayerSessions: [PlacedPlayerSession]?
        /// Name of the region where the game session created by this placement request is running. This value is set once the new game session is placed (placement status is Fulfilled).
        public let gameSessionRegion: String?
        /// Unique identifier for a game session placement.
        public let placementId: String?
        /// Set of values, expressed in milliseconds, indicating the amount of latency that players are experiencing when connected to AWS regions.
        public let playerLatencies: [PlayerLatency]?
        /// Unique identifier for the game session. This value is set once the new game session is placed (placement status is Fulfilled).
        public let gameSessionId: String?
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        public let gameSessionName: String?
        /// Maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int32?
        /// Time stamp indicating when this request was placed in the queue. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let startTime: TimeStamp?
        /// Current status of the game session placement request.    PENDING – The placement request is currently in the queue waiting to be processed.    FULFILLED – A new game session and player sessions (if requested) have been successfully created. Values for GameSessionArn and GameSessionRegion are available.     CANCELLED – The placement request was canceled with a call to StopGameSessionPlacement.    TIMED_OUT – A new game session was not successfully created before the time limit expired. You can resubmit the placement request as needed.  
        public let status: GameSessionPlacementState?
        /// Identifier for the game session created by this placement request. This value is set once the new game session is placed (placement status is Fulfilled). This identifier is unique across all regions. You can use this value as a GameSessionId value as needed.
        public let gameSessionArn: String?
        /// IP address of the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number. This value is set once the new game session is placed (placement status is Fulfilled). 
        public let ipAddress: String?
        /// Time stamp indicating when this request was completed, canceled, or timed out.
        public let endTime: TimeStamp?
        /// Descriptive label that is associated with queue. Queue names must be unique within each region.
        public let gameSessionQueueName: String?
        /// Set of developer-defined properties for a game session. These properties are passed to the server process hosting the game session.
        public let gameProperties: [GameProperty]?
        /// Port number for the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number. This value is set once the new game session is placed (placement status is Fulfilled).
        public let port: Int32?

        public init(placedPlayerSessions: [PlacedPlayerSession]? = nil, gameSessionRegion: String? = nil, placementId: String? = nil, playerLatencies: [PlayerLatency]? = nil, gameSessionId: String? = nil, gameSessionName: String? = nil, maximumPlayerSessionCount: Int32? = nil, startTime: TimeStamp? = nil, status: GameSessionPlacementState? = nil, gameSessionArn: String? = nil, ipAddress: String? = nil, endTime: TimeStamp? = nil, gameSessionQueueName: String? = nil, gameProperties: [GameProperty]? = nil, port: Int32? = nil) {
            self.placedPlayerSessions = placedPlayerSessions
            self.gameSessionRegion = gameSessionRegion
            self.placementId = placementId
            self.playerLatencies = playerLatencies
            self.gameSessionId = gameSessionId
            self.gameSessionName = gameSessionName
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.startTime = startTime
            self.status = status
            self.gameSessionArn = gameSessionArn
            self.ipAddress = ipAddress
            self.endTime = endTime
            self.gameSessionQueueName = gameSessionQueueName
            self.gameProperties = gameProperties
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case placedPlayerSessions = "PlacedPlayerSessions"
            case gameSessionRegion = "GameSessionRegion"
            case placementId = "PlacementId"
            case playerLatencies = "PlayerLatencies"
            case gameSessionId = "GameSessionId"
            case gameSessionName = "GameSessionName"
            case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
            case startTime = "StartTime"
            case status = "Status"
            case gameSessionArn = "GameSessionArn"
            case ipAddress = "IpAddress"
            case endTime = "EndTime"
            case gameSessionQueueName = "GameSessionQueueName"
            case gameProperties = "GameProperties"
            case port = "Port"
        }
    }

    public struct ListBuildsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// Build status to filter results by. To retrieve all builds, leave this parameter empty. Possible build statuses include the following:    INITIALIZED – A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value.     READY – The game build has been successfully uploaded. You can now create new fleets for this build.    FAILED – The game build upload failed. You cannot create new fleets for this build.   
        public let status: BuildStatus?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int32?

        public init(status: BuildStatus? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.status = status
            self.nextToken = nextToken
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case nextToken = "NextToken"
            case limit = "Limit"
        }
    }

    public struct RuntimeConfiguration: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionActivationTimeoutSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "ServerProcesses", required: false, type: .list), 
            AWSShapeMember(label: "MaxConcurrentGameSessionActivations", required: false, type: .integer)
        ]
        /// Maximum amount of time (in seconds) that a game session can remain in status ACTIVATING. If the game session is not active before the timeout, activation is terminated and the game session status is changed to TERMINATED.
        public let gameSessionActivationTimeoutSeconds: Int32?
        /// Collection of server process configurations that describe which server processes to run on each instance in a fleet.
        public let serverProcesses: [ServerProcess]?
        /// Maximum number of game sessions with status ACTIVATING to allow on an instance simultaneously. This setting limits the amount of instance resources that can be used for new game activations at any one time.
        public let maxConcurrentGameSessionActivations: Int32?

        public init(gameSessionActivationTimeoutSeconds: Int32? = nil, serverProcesses: [ServerProcess]? = nil, maxConcurrentGameSessionActivations: Int32? = nil) {
            self.gameSessionActivationTimeoutSeconds = gameSessionActivationTimeoutSeconds
            self.serverProcesses = serverProcesses
            self.maxConcurrentGameSessionActivations = maxConcurrentGameSessionActivations
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionActivationTimeoutSeconds = "GameSessionActivationTimeoutSeconds"
            case serverProcesses = "ServerProcesses"
            case maxConcurrentGameSessionActivations = "MaxConcurrentGameSessionActivations"
        }
    }

    public struct Instance: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "IpAddress", required: false, type: .string), 
            AWSShapeMember(label: "OperatingSystem", required: false, type: .enum), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "FleetId", required: false, type: .string)
        ]
        /// Current status of the instance. Possible statuses include the following:    PENDING – The instance is in the process of being created and launching server processes as defined in the fleet's run-time configuration.     ACTIVE – The instance has been successfully created and at least one server process has successfully launched and reported back to Amazon GameLift that it is ready to host a game session. The instance is now considered ready to host game sessions.     TERMINATING – The instance is in the process of shutting down. This may happen to reduce capacity during a scaling down event or to recycle resources in the event of a problem.  
        public let status: InstanceStatus?
        /// Unique identifier for an instance.
        public let instanceId: String?
        /// IP address assigned to the instance.
        public let ipAddress: String?
        /// Operating system that is running on this instance. 
        public let operatingSystem: OperatingSystem?
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: TimeStamp?
        /// EC2 instance type that defines the computing resources of this instance. 
        public let `type`: EC2InstanceType?
        /// Unique identifier for a fleet that the instance is in.
        public let fleetId: String?

        public init(status: InstanceStatus? = nil, instanceId: String? = nil, ipAddress: String? = nil, operatingSystem: OperatingSystem? = nil, creationTime: TimeStamp? = nil, type: EC2InstanceType? = nil, fleetId: String? = nil) {
            self.status = status
            self.instanceId = instanceId
            self.ipAddress = ipAddress
            self.operatingSystem = operatingSystem
            self.creationTime = creationTime
            self.`type` = `type`
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case instanceId = "InstanceId"
            case ipAddress = "IpAddress"
            case operatingSystem = "OperatingSystem"
            case creationTime = "CreationTime"
            case `type` = "Type"
            case fleetId = "FleetId"
        }
    }

    public struct EC2InstanceLimit: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentInstances", required: false, type: .integer), 
            AWSShapeMember(label: "EC2InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "InstanceLimit", required: false, type: .integer)
        ]
        /// Number of instances of the specified type that are currently in use by this AWS account.
        public let currentInstances: Int32?
        /// Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions.
        public let eC2InstanceType: EC2InstanceType?
        /// Number of instances allowed.
        public let instanceLimit: Int32?

        public init(currentInstances: Int32? = nil, eC2InstanceType: EC2InstanceType? = nil, instanceLimit: Int32? = nil) {
            self.currentInstances = currentInstances
            self.eC2InstanceType = eC2InstanceType
            self.instanceLimit = instanceLimit
        }

        private enum CodingKeys: String, CodingKey {
            case currentInstances = "CurrentInstances"
            case eC2InstanceType = "EC2InstanceType"
            case instanceLimit = "InstanceLimit"
        }
    }

    public struct DeleteGameSessionQueueOutput: AWSShape {
        /// The key for the payload

    }

    public struct DescribeFleetAttributesOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetAttributes", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Collection of objects containing attribute metadata for each requested fleet ID.
        public let fleetAttributes: [FleetAttributes]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(fleetAttributes: [FleetAttributes]? = nil, nextToken: String? = nil) {
            self.fleetAttributes = fleetAttributes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case fleetAttributes = "FleetAttributes"
            case nextToken = "NextToken"
        }
    }

    public struct GetInstanceAccessOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceAccess", required: false, type: .structure)
        ]
        /// Object that contains connection information for a fleet instance, including IP address and access credentials.
        public let instanceAccess: InstanceAccess?

        public init(instanceAccess: InstanceAccess? = nil) {
            self.instanceAccess = instanceAccess
        }

        private enum CodingKeys: String, CodingKey {
            case instanceAccess = "InstanceAccess"
        }
    }

    public struct StartGameSessionPlacementOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionPlacement", required: false, type: .structure)
        ]
        /// Object that describes the newly created game session placement. This object includes all the information provided in the request, as well as start/end time stamps and placement status. 
        public let gameSessionPlacement: GameSessionPlacement?

        public init(gameSessionPlacement: GameSessionPlacement? = nil) {
            self.gameSessionPlacement = gameSessionPlacement
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionPlacement = "GameSessionPlacement"
        }
    }

    public struct CreateGameSessionOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSession", required: false, type: .structure)
        ]
        /// Object that describes the newly created game session record.
        public let gameSession: GameSession?

        public init(gameSession: GameSession? = nil) {
            self.gameSession = gameSession
        }

        private enum CodingKeys: String, CodingKey {
            case gameSession = "GameSession"
        }
    }

    public struct ListAliasesInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoutingStrategyType", required: false, type: .enum), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Type of routing to filter results on. Use this parameter to retrieve only aliases of a certain type. To retrieve all aliases, leave this parameter empty. Possible routing types include the following:    SIMPLE – The alias resolves to one specific fleet. Use this type when routing to active fleets.    TERMINAL – The alias does not resolve to a fleet but instead can be used to display a message to the user. A terminal alias throws a TerminalRoutingStrategyException with the RoutingStrategy message embedded.  
        public let routingStrategyType: RoutingStrategyType?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int32?
        /// Descriptive label that is associated with an alias. Alias names do not need to be unique.
        public let name: String?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?

        public init(routingStrategyType: RoutingStrategyType? = nil, limit: Int32? = nil, name: String? = nil, nextToken: String? = nil) {
            self.routingStrategyType = routingStrategyType
            self.limit = limit
            self.name = name
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case routingStrategyType = "RoutingStrategyType"
            case limit = "Limit"
            case name = "Name"
            case nextToken = "NextToken"
        }
    }

    public struct UpdateRuntimeConfigurationOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RuntimeConfiguration", required: false, type: .structure)
        ]
        /// The run-time configuration currently in force. If the update was successful, this object matches the one in the request.
        public let runtimeConfiguration: RuntimeConfiguration?

        public init(runtimeConfiguration: RuntimeConfiguration? = nil) {
            self.runtimeConfiguration = runtimeConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case runtimeConfiguration = "RuntimeConfiguration"
        }
    }

    public struct RequestUploadCredentialsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BuildId", required: true, type: .string)
        ]
        /// Unique identifier for a build to get credentials for.
        public let buildId: String

        public init(buildId: String) {
            self.buildId = buildId
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
        }
    }

    public enum PlayerSessionStatus: String, CustomStringConvertible, Codable {
        case reserved = "RESERVED"
        case active = "ACTIVE"
        case completed = "COMPLETED"
        case timedout = "TIMEDOUT"
        public var description: String { return self.rawValue }
    }

    public struct StopGameSessionPlacementInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlacementId", required: true, type: .string)
        ]
        /// Unique identifier for a game session placement to cancel.
        public let placementId: String

        public init(placementId: String) {
            self.placementId = placementId
        }

        private enum CodingKeys: String, CodingKey {
            case placementId = "PlacementId"
        }
    }

    public struct CreateFleetInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceCreationLimitPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "EC2InstanceType", required: true, type: .enum), 
            AWSShapeMember(label: "BuildId", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ServerLaunchParameters", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "NewGameSessionProtectionPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "EC2InboundPermissions", required: false, type: .list), 
            AWSShapeMember(label: "RuntimeConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "LogPaths", required: false, type: .list), 
            AWSShapeMember(label: "ServerLaunchPath", required: false, type: .string), 
            AWSShapeMember(label: "MetricGroups", required: false, type: .list)
        ]
        /// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet.
        public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?
        /// Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions.
        public let eC2InstanceType: EC2InstanceType
        /// Unique identifier for a build to be deployed on the new fleet. The build must have been successfully uploaded to Amazon GameLift and be in a READY status. This fleet setting cannot be changed once the fleet is created.
        public let buildId: String
        /// Human-readable description of a fleet.
        public let description: String?
        /// This parameter is no longer used. Instead, specify server launch parameters in the RuntimeConfiguration parameter. (Requests that specify a server launch path and launch parameters instead of a run-time configuration will continue to work.)
        public let serverLaunchParameters: String?
        /// Descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        public let name: String
        /// Game session protection policy to apply to all instances in this fleet. If this parameter is not set, instances in this fleet default to no protection. You can change a fleet's protection policy using UpdateFleetAttributes, but this change will only affect sessions created after the policy change. You can also set protection for individual instances using UpdateGameSession.    NoProtection – The game session can be terminated during a scale-down event.    FullProtection – If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        public let newGameSessionProtectionPolicy: ProtectionPolicy?
        /// Range of IP addresses and port settings that permit inbound traffic to access server processes running on the fleet. If no inbound permissions are set, including both IP address range and port range, the server processes in the fleet cannot accept connections. You can specify one or more sets of permissions for a fleet.
        public let eC2InboundPermissions: [IpPermission]?
        /// Instructions for launching server processes on each instance in the fleet. The run-time configuration for a fleet has a collection of server process configurations, one for each type of server process to run on an instance. A server process configuration specifies the location of the server executable, launch parameters, and the number of concurrent processes with that configuration to maintain on each instance. A CreateFleet request must include a run-time configuration with at least one server process configuration; otherwise the request fails with an invalid request exception. (This parameter replaces the parameters ServerLaunchPath and ServerLaunchParameters; requests that contain values for these parameters instead of a run-time configuration will continue to work.) 
        public let runtimeConfiguration: RuntimeConfiguration?
        /// This parameter is no longer used. Instead, to specify where Amazon GameLift should store log files once a server process shuts down, use the Amazon GameLift server API ProcessReady() and specify one or more directory paths in logParameters. See more information in the Server API Reference. 
        public let logPaths: [String]?
        /// This parameter is no longer used. Instead, specify a server launch path using the RuntimeConfiguration parameter. (Requests that specify a server launch path and launch parameters instead of a run-time configuration will continue to work.)
        public let serverLaunchPath: String?
        /// Names of metric groups to add this fleet to. Use an existing metric group name to add this fleet to the group. Or use a new name to create a new metric group. A fleet can only be included in one metric group at a time.
        public let metricGroups: [String]?

        public init(resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil, eC2InstanceType: EC2InstanceType, buildId: String, description: String? = nil, serverLaunchParameters: String? = nil, name: String, newGameSessionProtectionPolicy: ProtectionPolicy? = nil, eC2InboundPermissions: [IpPermission]? = nil, runtimeConfiguration: RuntimeConfiguration? = nil, logPaths: [String]? = nil, serverLaunchPath: String? = nil, metricGroups: [String]? = nil) {
            self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
            self.eC2InstanceType = eC2InstanceType
            self.buildId = buildId
            self.description = description
            self.serverLaunchParameters = serverLaunchParameters
            self.name = name
            self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
            self.eC2InboundPermissions = eC2InboundPermissions
            self.runtimeConfiguration = runtimeConfiguration
            self.logPaths = logPaths
            self.serverLaunchPath = serverLaunchPath
            self.metricGroups = metricGroups
        }

        private enum CodingKeys: String, CodingKey {
            case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
            case eC2InstanceType = "EC2InstanceType"
            case buildId = "BuildId"
            case description = "Description"
            case serverLaunchParameters = "ServerLaunchParameters"
            case name = "Name"
            case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
            case eC2InboundPermissions = "EC2InboundPermissions"
            case runtimeConfiguration = "RuntimeConfiguration"
            case logPaths = "LogPaths"
            case serverLaunchPath = "ServerLaunchPath"
            case metricGroups = "MetricGroups"
        }
    }

    public struct UpdateBuildInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BuildId", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        /// Unique identifier for a build to update.
        public let buildId: String
        /// Descriptive label that is associated with a build. Build names do not need to be unique. 
        public let name: String?
        /// Version that is associated with this build. Version strings do not need to be unique.
        public let version: String?

        public init(buildId: String, name: String? = nil, version: String? = nil) {
            self.buildId = buildId
            self.name = name
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
            case name = "Name"
            case version = "Version"
        }
    }

    public struct ResolveAliasInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AliasId", required: true, type: .string)
        ]
        /// Unique identifier for the alias you want to resolve.
        public let aliasId: String

        public init(aliasId: String) {
            self.aliasId = aliasId
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
        }
    }

    public struct PlayerLatency: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlayerId", required: false, type: .string), 
            AWSShapeMember(label: "RegionIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "LatencyInMilliseconds", required: false, type: .float)
        ]
        /// Unique identifier for a player associated with the latency data.
        public let playerId: String?
        /// Name of the region that is associated with the latency value.
        public let regionIdentifier: String?
        /// Amount of time that represents the time lag experienced by the player when connected to the specified region.
        public let latencyInMilliseconds: Float?

        public init(playerId: String? = nil, regionIdentifier: String? = nil, latencyInMilliseconds: Float? = nil) {
            self.playerId = playerId
            self.regionIdentifier = regionIdentifier
            self.latencyInMilliseconds = latencyInMilliseconds
        }

        private enum CodingKeys: String, CodingKey {
            case playerId = "PlayerId"
            case regionIdentifier = "RegionIdentifier"
            case latencyInMilliseconds = "LatencyInMilliseconds"
        }
    }

    public struct CreatePlayerSessionsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionId", required: true, type: .string), 
            AWSShapeMember(label: "PlayerIds", required: true, type: .list), 
            AWSShapeMember(label: "PlayerDataMap", required: false, type: .map)
        ]
        /// Unique identifier for the game session to add players to.
        public let gameSessionId: String
        /// List of unique identifiers for the players to be added.
        public let playerIds: [String]
        /// Map of string pairs, each specifying a player ID and a set of developer-defined information related to the player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game. Player data strings for player IDs not included in the PlayerIds parameter are ignored. 
        public let playerDataMap: [String: String]?

        public init(gameSessionId: String, playerIds: [String], playerDataMap: [String: String]? = nil) {
            self.gameSessionId = gameSessionId
            self.playerIds = playerIds
            self.playerDataMap = playerDataMap
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionId = "GameSessionId"
            case playerIds = "PlayerIds"
            case playerDataMap = "PlayerDataMap"
        }
    }

    public struct DescribeFleetPortSettingsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InboundPermissions", required: false, type: .list)
        ]
        /// Object that contains port settings for the requested fleet ID.
        public let inboundPermissions: [IpPermission]?

        public init(inboundPermissions: [IpPermission]? = nil) {
            self.inboundPermissions = inboundPermissions
        }

        private enum CodingKeys: String, CodingKey {
            case inboundPermissions = "InboundPermissions"
        }
    }

    public struct DeleteAliasInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AliasId", required: true, type: .string)
        ]
        /// Unique identifier for a fleet alias. Specify the alias you want to delete.
        public let aliasId: String

        public init(aliasId: String) {
            self.aliasId = aliasId
        }

        private enum CodingKeys: String, CodingKey {
            case aliasId = "AliasId"
        }
    }

    public struct DescribeGameSessionQueuesInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Names", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// List of queue names to retrieve information for. To request settings for all queues, leave this parameter empty.
        public let names: [String]?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int32?

        public init(names: [String]? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.names = names
            self.nextToken = nextToken
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case names = "Names"
            case nextToken = "NextToken"
            case limit = "Limit"
        }
    }

    public struct Alias: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastUpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "RoutingStrategy", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "AliasArn", required: false, type: .string), 
            AWSShapeMember(label: "AliasId", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// Time stamp indicating when this data object was last modified. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let lastUpdatedTime: TimeStamp?
        /// Alias configuration for the alias, including routing type and settings.
        public let routingStrategy: RoutingStrategy?
        /// Descriptive label that is associated with an alias. Alias names do not need to be unique.
        public let name: String?
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: TimeStamp?
        /// Unique identifier for an alias; alias ARNs are unique across all regions.
        public let aliasArn: String?
        /// Unique identifier for an alias; alias IDs are unique within a region.
        public let aliasId: String?
        /// Human-readable description of an alias.
        public let description: String?

        public init(lastUpdatedTime: TimeStamp? = nil, routingStrategy: RoutingStrategy? = nil, name: String? = nil, creationTime: TimeStamp? = nil, aliasArn: String? = nil, aliasId: String? = nil, description: String? = nil) {
            self.lastUpdatedTime = lastUpdatedTime
            self.routingStrategy = routingStrategy
            self.name = name
            self.creationTime = creationTime
            self.aliasArn = aliasArn
            self.aliasId = aliasId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case lastUpdatedTime = "LastUpdatedTime"
            case routingStrategy = "RoutingStrategy"
            case name = "Name"
            case creationTime = "CreationTime"
            case aliasArn = "AliasArn"
            case aliasId = "AliasId"
            case description = "Description"
        }
    }

    public struct CreatePlayerSessionInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionId", required: true, type: .string), 
            AWSShapeMember(label: "PlayerData", required: false, type: .string), 
            AWSShapeMember(label: "PlayerId", required: true, type: .string)
        ]
        /// Unique identifier for the game session to add a player to.
        public let gameSessionId: String
        /// Developer-defined information related to a player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game.
        public let playerData: String?
        /// Unique identifier for a player. Player IDs are developer-defined.
        public let playerId: String

        public init(gameSessionId: String, playerData: String? = nil, playerId: String) {
            self.gameSessionId = gameSessionId
            self.playerData = playerData
            self.playerId = playerId
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionId = "GameSessionId"
            case playerData = "PlayerData"
            case playerId = "PlayerId"
        }
    }

    public struct Event: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PreSignedLogUrl", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "ResourceId", required: false, type: .string), 
            AWSShapeMember(label: "EventCode", required: false, type: .enum), 
            AWSShapeMember(label: "EventTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EventId", required: false, type: .string)
        ]
        /// Location of stored logs with additional detail related to the event, useful for debugging issues. The URL is valid for 15 minutes. Fleet creation logs can also be accessed through the Amazon GameLift console.
        public let preSignedLogUrl: String?
        /// Additional information related to the event.
        public let message: String?
        /// Unique identifier for an event resource, such as a fleet ID.
        public let resourceId: String?
        /// Type of event being logged. The following events are currently in use:   General events:    GENERIC_EVENT – An unspecified event has occurred.     Fleet creation events:    FLEET_CREATED – A fleet record was successfully created with a status of NEW. Event messaging includes the fleet ID.    FLEET_STATE_DOWNLOADING – Fleet status changed from NEW to DOWNLOADING. The compressed build has started downloading to a fleet instance for installation.    FLEET_BINARY_DOWNLOAD_FAILED – The build failed to download to the fleet instance.    FLEET_CREATION_EXTRACTING_BUILD – The game server build was successfully downloaded to an instance, and the build files are now being extracted from the uploaded build and saved to an instance. Failure at this stage prevents a fleet from moving to ACTIVE status. Logs for this stage display a list of the files that are extracted and saved on the instance. Access the logs by using the URL in PreSignedLogUrl).    FLEET_CREATION_RUNNING_INSTALLER – The game server build files were successfully extracted, and the Amazon GameLift is now running the build's install script (if one is included). Failure in this stage prevents a fleet from moving to ACTIVE status. Logs for this stage list the installation steps and whether or not the install completed sucessfully. Access the logs by using the URL in PreSignedLogUrl).     FLEET_CREATION_VALIDATING_RUNTIME_CONFIG – The build process was successful, and the Amazon GameLift is now verifying that the game server launch path(s), which are specified in the fleet's run-time configuration, exist. If any listed launch path exists, Amazon GameLift tries to launch a game server process and waits for the process to report ready. Failures in this stage prevent a fleet from moving to ACTIVE status. Logs for this stage list the launch paths in the run-time configuration and indicate whether each is found. Access the logs by using the URL in PreSignedLogUrl). Once the game server is launched, failures and crashes are logged; these logs can be downloaded from the Amazon GameLift console.     FLEET_STATE_VALIDATING – Fleet status changed from DOWNLOADING to VALIDATING.    FLEET_VALIDATION_LAUNCH_PATH_NOT_FOUND – Validation of the run-time validation failed because the executable specified in a launch path does not exist on the instance.    FLEET_STATE_BUILDING – Fleet status changed from VALIDATING to BUILDING.    FLEET_VALIDATION_EXECUTABLE_RUNTIME_FAILURE – Validation of the runtime validation failed because the executable specified in a launch path failed to run on the fleet instance.    FLEET_STATE_ACTIVATING – Fleet status changed from BUILDING to ACTIVATING.     FLEET_ACTIVATION_FAILED - The fleet failed to successfully complete one of the steps in the fleet activation process. This event code indicates that the game build was successfully downloaded to a fleet instance, built, and validated, but was not able to start a server process. A possible reason for failure is that the game server is not reporting "process ready" to the Amazon GameLift service.    FLEET_STATE_ACTIVE – The fleet's status changed from ACTIVATING to ACTIVE. The fleet is now ready to host game sessions.     Other fleet events:    FLEET_SCALING_EVENT – A change was made to the fleet's capacity settings (desired instances, minimum/maximum scaling limits). Event messaging includes the new capacity settings.    FLEET_NEW_GAME_SESSION_PROTECTION_POLICY_UPDATED – A change was made to the fleet's game session protection policy setting. Event messaging includes both the old and new policy setting.     FLEET_DELETED – A request to delete a fleet was initiated.    
        public let eventCode: EventCode?
        /// Time stamp indicating when this event occurred. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let eventTime: TimeStamp?
        /// Unique identifier for a fleet event.
        public let eventId: String?

        public init(preSignedLogUrl: String? = nil, message: String? = nil, resourceId: String? = nil, eventCode: EventCode? = nil, eventTime: TimeStamp? = nil, eventId: String? = nil) {
            self.preSignedLogUrl = preSignedLogUrl
            self.message = message
            self.resourceId = resourceId
            self.eventCode = eventCode
            self.eventTime = eventTime
            self.eventId = eventId
        }

        private enum CodingKeys: String, CodingKey {
            case preSignedLogUrl = "PreSignedLogUrl"
            case message = "Message"
            case resourceId = "ResourceId"
            case eventCode = "EventCode"
            case eventTime = "EventTime"
            case eventId = "EventId"
        }
    }

    public struct UpdateGameSessionQueueOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionQueue", required: false, type: .structure)
        ]
        /// Object that describes the newly updated game session queue.
        public let gameSessionQueue: GameSessionQueue?

        public init(gameSessionQueue: GameSessionQueue? = nil) {
            self.gameSessionQueue = gameSessionQueue
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionQueue = "GameSessionQueue"
        }
    }

    public enum ProtectionPolicy: String, CustomStringConvertible, Codable {
        case noprotection = "NoProtection"
        case fullprotection = "FullProtection"
        public var description: String { return self.rawValue }
    }

    public struct GameSessionQueueDestination: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DestinationArn", required: false, type: .string)
        ]
        /// Amazon Resource Name (ARN) assigned to fleet or fleet alias. ARNs, which include a fleet ID or alias ID and a region name, provide a unique identifier across all regions. 
        public let destinationArn: String?

        public init(destinationArn: String? = nil) {
            self.destinationArn = destinationArn
        }

        private enum CodingKeys: String, CodingKey {
            case destinationArn = "DestinationArn"
        }
    }

    public struct DesiredPlayerSession: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlayerData", required: false, type: .string), 
            AWSShapeMember(label: "PlayerId", required: false, type: .string)
        ]
        /// Developer-defined information related to a player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game.
        public let playerData: String?
        /// Unique identifier for a player to associate with the player session.
        public let playerId: String?

        public init(playerData: String? = nil, playerId: String? = nil) {
            self.playerData = playerData
            self.playerId = playerId
        }

        private enum CodingKeys: String, CodingKey {
            case playerData = "PlayerData"
            case playerId = "PlayerId"
        }
    }

    public struct DescribeFleetUtilizationInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetIds", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// Unique identifier for a fleet(s) to retrieve utilization data for. To request utilization data for all fleets, leave this parameter empty.
        public let fleetIds: [String]?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let nextToken: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let limit: Int32?

        public init(fleetIds: [String]? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.fleetIds = fleetIds
            self.nextToken = nextToken
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case fleetIds = "FleetIds"
            case nextToken = "NextToken"
            case limit = "Limit"
        }
    }

    public struct CreateAliasInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoutingStrategy", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// Object that specifies the fleet and routing type to use for the alias.
        public let routingStrategy: RoutingStrategy
        /// Descriptive label that is associated with an alias. Alias names do not need to be unique.
        public let name: String
        /// Human-readable description of an alias.
        public let description: String?

        public init(routingStrategy: RoutingStrategy, name: String, description: String? = nil) {
            self.routingStrategy = routingStrategy
            self.name = name
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case routingStrategy = "RoutingStrategy"
            case name = "Name"
            case description = "Description"
        }
    }

    public struct ResourceCreationLimitPolicy: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NewGameSessionsPerCreator", required: false, type: .integer), 
            AWSShapeMember(label: "PolicyPeriodInMinutes", required: false, type: .integer)
        ]
        /// Maximum number of game sessions that an individual can create during the policy period. 
        public let newGameSessionsPerCreator: Int32?
        /// Time span used in evaluating the resource creation limit policy. 
        public let policyPeriodInMinutes: Int32?

        public init(newGameSessionsPerCreator: Int32? = nil, policyPeriodInMinutes: Int32? = nil) {
            self.newGameSessionsPerCreator = newGameSessionsPerCreator
            self.policyPeriodInMinutes = policyPeriodInMinutes
        }

        private enum CodingKeys: String, CodingKey {
            case newGameSessionsPerCreator = "NewGameSessionsPerCreator"
            case policyPeriodInMinutes = "PolicyPeriodInMinutes"
        }
    }

    public struct PutScalingPolicyInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Threshold", required: true, type: .double), 
            AWSShapeMember(label: "MetricName", required: true, type: .enum), 
            AWSShapeMember(label: "EvaluationPeriods", required: true, type: .integer), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ScalingAdjustment", required: true, type: .integer), 
            AWSShapeMember(label: "ComparisonOperator", required: true, type: .enum), 
            AWSShapeMember(label: "ScalingAdjustmentType", required: true, type: .enum), 
            AWSShapeMember(label: "FleetId", required: true, type: .string)
        ]
        /// Metric value used to trigger a scaling event.
        public let threshold: Double
        /// Name of the Amazon GameLift-defined metric that is used to trigger an adjustment.    ActivatingGameSessions – number of game sessions in the process of being created (game session status = ACTIVATING).    ActiveGameSessions – number of game sessions currently running (game session status = ACTIVE).    CurrentPlayerSessions – number of active or reserved player sessions (player session status = ACTIVE or RESERVED).     AvailablePlayerSessions – number of player session slots currently available in active game sessions across the fleet, calculated by subtracting a game session's current player session count from its maximum player session count. This number includes game sessions that are not currently accepting players (game session PlayerSessionCreationPolicy = DENY_ALL).    ActiveInstances – number of instances currently running a game session.    IdleInstances – number of instances not currently running a game session.  
        public let metricName: MetricName
        /// Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
        public let evaluationPeriods: Int32
        /// Descriptive label that is associated with a scaling policy. Policy names do not need to be unique. A fleet can have only one scaling policy with the same name.
        public let name: String
        /// Amount of adjustment to make, based on the scaling adjustment type.
        public let scalingAdjustment: Int32
        /// Comparison operator to use when measuring the metric against the threshold value.
        public let comparisonOperator: ComparisonOperatorType
        /// Type of adjustment to make to a fleet's instance count (see FleetCapacity):    ChangeInCapacity – add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.    ExactCapacity – set the instance count to the scaling adjustment value.    PercentChangeInCapacity – increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down; for example, a value of "-10" scales the fleet down by 10%.  
        public let scalingAdjustmentType: ScalingAdjustmentType
        /// Unique identifier for a fleet to apply this policy to.
        public let fleetId: String

        public init(threshold: Double, metricName: MetricName, evaluationPeriods: Int32, name: String, scalingAdjustment: Int32, comparisonOperator: ComparisonOperatorType, scalingAdjustmentType: ScalingAdjustmentType, fleetId: String) {
            self.threshold = threshold
            self.metricName = metricName
            self.evaluationPeriods = evaluationPeriods
            self.name = name
            self.scalingAdjustment = scalingAdjustment
            self.comparisonOperator = comparisonOperator
            self.scalingAdjustmentType = scalingAdjustmentType
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case threshold = "Threshold"
            case metricName = "MetricName"
            case evaluationPeriods = "EvaluationPeriods"
            case name = "Name"
            case scalingAdjustment = "ScalingAdjustment"
            case comparisonOperator = "ComparisonOperator"
            case scalingAdjustmentType = "ScalingAdjustmentType"
            case fleetId = "FleetId"
        }
    }

    public struct PlacedPlayerSession: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlayerSessionId", required: false, type: .string), 
            AWSShapeMember(label: "PlayerId", required: false, type: .string)
        ]
        /// Unique identifier for a player session.
        public let playerSessionId: String?
        /// Unique identifier for a player that is associated with this player session.
        public let playerId: String?

        public init(playerSessionId: String? = nil, playerId: String? = nil) {
            self.playerSessionId = playerSessionId
            self.playerId = playerId
        }

        private enum CodingKeys: String, CodingKey {
            case playerSessionId = "PlayerSessionId"
            case playerId = "PlayerId"
        }
    }

    public struct DeleteBuildInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BuildId", required: true, type: .string)
        ]
        /// Unique identifier for a build to delete.
        public let buildId: String

        public init(buildId: String) {
            self.buildId = buildId
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
        }
    }

    public enum IpProtocol: String, CustomStringConvertible, Codable {
        case tcp = "TCP"
        case udp = "UDP"
        public var description: String { return self.rawValue }
    }

    public struct UpdateFleetAttributesOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: false, type: .string)
        ]
        /// Unique identifier for a fleet that was updated.
        public let fleetId: String?

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct DescribeGameSessionsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StatusFilter", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "GameSessionId", required: false, type: .string), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "AliasId", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Game session status to filter results on. Possible game session statuses include ACTIVE, TERMINATED, ACTIVATING, and TERMINATING (the last two are transitory). 
        public let statusFilter: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int32?
        /// Unique identifier for the game session to retrieve. You can use either a GameSessionId or GameSessionArn value. 
        public let gameSessionId: String?
        /// Unique identifier for a fleet to retrieve all game sessions for.
        public let fleetId: String?
        /// Unique identifier for an alias associated with the fleet to retrieve all game sessions for. 
        public let aliasId: String?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?

        public init(statusFilter: String? = nil, limit: Int32? = nil, gameSessionId: String? = nil, fleetId: String? = nil, aliasId: String? = nil, nextToken: String? = nil) {
            self.statusFilter = statusFilter
            self.limit = limit
            self.gameSessionId = gameSessionId
            self.fleetId = fleetId
            self.aliasId = aliasId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case statusFilter = "StatusFilter"
            case limit = "Limit"
            case gameSessionId = "GameSessionId"
            case fleetId = "FleetId"
            case aliasId = "AliasId"
            case nextToken = "NextToken"
        }
    }

    public struct CreateFleetOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetAttributes", required: false, type: .structure)
        ]
        /// Properties for the newly created fleet.
        public let fleetAttributes: FleetAttributes?

        public init(fleetAttributes: FleetAttributes? = nil) {
            self.fleetAttributes = fleetAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case fleetAttributes = "FleetAttributes"
        }
    }

    public struct GameSessionQueue: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Destinations", required: false, type: .list), 
            AWSShapeMember(label: "TimeoutInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "GameSessionQueueArn", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "PlayerLatencyPolicies", required: false, type: .list)
        ]
        /// List of fleets that can be used to fulfill game session placement requests in the queue. Fleets are identified by either a fleet ARN or a fleet alias ARN. Destinations are listed in default preference order.
        public let destinations: [GameSessionQueueDestination]?
        /// Maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
        public let timeoutInSeconds: Int32?
        /// Amazon Resource Name (ARN) that is assigned to a game session queue and uniquely identifies it. Format is arn:aws:gamelift:&lt;region&gt;::fleet/fleet-a1234567-b8c9-0d1e-2fa3-b45c6d7e8912.
        public let gameSessionQueueArn: String?
        /// Descriptive label that is associated with queue. Queue names must be unique within each region.
        public let name: String?
        /// Collection of latency policies to apply when processing game sessions placement requests with player latency information. Multiple policies are evaluated in order of the maximum latency value, starting with the lowest latency values. With just one policy, it is enforced at the start of the game session placement for the duration period. With multiple policies, each policy is enforced consecutively for its duration period. For example, a queue might enforce a 60-second policy followed by a 120-second policy, and then no policy for the remainder of the placement. 
        public let playerLatencyPolicies: [PlayerLatencyPolicy]?

        public init(destinations: [GameSessionQueueDestination]? = nil, timeoutInSeconds: Int32? = nil, gameSessionQueueArn: String? = nil, name: String? = nil, playerLatencyPolicies: [PlayerLatencyPolicy]? = nil) {
            self.destinations = destinations
            self.timeoutInSeconds = timeoutInSeconds
            self.gameSessionQueueArn = gameSessionQueueArn
            self.name = name
            self.playerLatencyPolicies = playerLatencyPolicies
        }

        private enum CodingKeys: String, CodingKey {
            case destinations = "Destinations"
            case timeoutInSeconds = "TimeoutInSeconds"
            case gameSessionQueueArn = "GameSessionQueueArn"
            case name = "Name"
            case playerLatencyPolicies = "PlayerLatencyPolicies"
        }
    }

    public struct DescribeFleetCapacityOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "FleetCapacity", required: false, type: .list)
        ]
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// Collection of objects containing capacity information for each requested fleet ID. Leave this parameter empty to retrieve capacity information for all fleets.
        public let fleetCapacity: [FleetCapacity]?

        public init(nextToken: String? = nil, fleetCapacity: [FleetCapacity]? = nil) {
            self.nextToken = nextToken
            self.fleetCapacity = fleetCapacity
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case fleetCapacity = "FleetCapacity"
        }
    }

    public struct DescribeGameSessionDetailsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StatusFilter", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "GameSessionId", required: false, type: .string), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "AliasId", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Game session status to filter results on. Possible game session statuses include ACTIVE, TERMINATED, ACTIVATING and TERMINATING (the last two are transitory). 
        public let statusFilter: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int32?
        /// Unique identifier for the game session to retrieve.
        public let gameSessionId: String?
        /// Unique identifier for a fleet to retrieve all game sessions active on the fleet.
        public let fleetId: String?
        /// Unique identifier for an alias associated with the fleet to retrieve all game sessions for.
        public let aliasId: String?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?

        public init(statusFilter: String? = nil, limit: Int32? = nil, gameSessionId: String? = nil, fleetId: String? = nil, aliasId: String? = nil, nextToken: String? = nil) {
            self.statusFilter = statusFilter
            self.limit = limit
            self.gameSessionId = gameSessionId
            self.fleetId = fleetId
            self.aliasId = aliasId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case statusFilter = "StatusFilter"
            case limit = "Limit"
            case gameSessionId = "GameSessionId"
            case fleetId = "FleetId"
            case aliasId = "AliasId"
            case nextToken = "NextToken"
        }
    }

    public struct UpdateFleetPortSettingsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InboundPermissionAuthorizations", required: false, type: .list), 
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "InboundPermissionRevocations", required: false, type: .list)
        ]
        /// Collection of port settings to be added to the fleet record.
        public let inboundPermissionAuthorizations: [IpPermission]?
        /// Unique identifier for a fleet to update port settings for.
        public let fleetId: String
        /// Collection of port settings to be removed from the fleet record.
        public let inboundPermissionRevocations: [IpPermission]?

        public init(inboundPermissionAuthorizations: [IpPermission]? = nil, fleetId: String, inboundPermissionRevocations: [IpPermission]? = nil) {
            self.inboundPermissionAuthorizations = inboundPermissionAuthorizations
            self.fleetId = fleetId
            self.inboundPermissionRevocations = inboundPermissionRevocations
        }

        private enum CodingKeys: String, CodingKey {
            case inboundPermissionAuthorizations = "InboundPermissionAuthorizations"
            case fleetId = "FleetId"
            case inboundPermissionRevocations = "InboundPermissionRevocations"
        }
    }

    public struct InstanceCredentials: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserName", required: false, type: .string), 
            AWSShapeMember(label: "Secret", required: false, type: .string)
        ]
        /// User login string.
        public let userName: String?
        /// Secret string. For Windows instances, the secret is a password for use with Windows Remote Desktop. For Linux instances, it is a private key (which must be saved as a .pem file) for use with SSH.
        public let secret: String?

        public init(userName: String? = nil, secret: String? = nil) {
            self.userName = userName
            self.secret = secret
        }

        private enum CodingKeys: String, CodingKey {
            case userName = "UserName"
            case secret = "Secret"
        }
    }

    public struct DescribeFleetCapacityInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetIds", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// Unique identifier for a fleet(s) to retrieve capacity information for. To request capacity information for all fleets, leave this parameter empty.
        public let fleetIds: [String]?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let nextToken: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let limit: Int32?

        public init(fleetIds: [String]? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.fleetIds = fleetIds
            self.nextToken = nextToken
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case fleetIds = "FleetIds"
            case nextToken = "NextToken"
            case limit = "Limit"
        }
    }

    public struct ServerProcess: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .string), 
            AWSShapeMember(label: "LaunchPath", required: true, type: .string), 
            AWSShapeMember(label: "ConcurrentExecutions", required: true, type: .integer)
        ]
        /// Optional list of parameters to pass to the server executable on launch.
        public let parameters: String?
        /// Location of the server executable in a game build. All game builds are installed on instances at the root : for Windows instances C:\game, and for Linux instances /local/game. A Windows game build with an executable file located at MyGame\latest\server.exe must have a launch path of "C:\game\MyGame\latest\server.exe". A Linux game build with an executable file located at MyGame/latest/server.exe must have a launch path of "/local/game/MyGame/latest/server.exe". 
        public let launchPath: String
        /// Number of server processes using this configuration to run concurrently on an instance.
        public let concurrentExecutions: Int32

        public init(parameters: String? = nil, launchPath: String, concurrentExecutions: Int32) {
            self.parameters = parameters
            self.launchPath = launchPath
            self.concurrentExecutions = concurrentExecutions
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case launchPath = "LaunchPath"
            case concurrentExecutions = "ConcurrentExecutions"
        }
    }

    public struct RequestUploadCredentialsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageLocation", required: false, type: .structure), 
            AWSShapeMember(label: "UploadCredentials", required: false, type: .structure)
        ]
        /// Amazon S3 path and key, identifying where the game build files are stored.
        public let storageLocation: S3Location?
        /// AWS credentials required when uploading a game build to the storage location. These credentials have a limited lifespan and are valid only for the build they were issued for.
        public let uploadCredentials: AwsCredentials?

        public init(storageLocation: S3Location? = nil, uploadCredentials: AwsCredentials? = nil) {
            self.storageLocation = storageLocation
            self.uploadCredentials = uploadCredentials
        }

        private enum CodingKeys: String, CodingKey {
            case storageLocation = "StorageLocation"
            case uploadCredentials = "UploadCredentials"
        }
    }

    public enum InstanceStatus: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case active = "ACTIVE"
        case terminating = "TERMINATING"
        public var description: String { return self.rawValue }
    }

    public struct GameProperty: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// TBD
        public let value: String
        /// TBD
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public enum BuildStatus: String, CustomStringConvertible, Codable {
        case initialized = "INITIALIZED"
        case ready = "READY"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct UpdateBuildOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Build", required: false, type: .structure)
        ]
        /// Object that contains the updated build record.
        public let build: Build?

        public init(build: Build? = nil) {
            self.build = build
        }

        private enum CodingKeys: String, CodingKey {
            case build = "Build"
        }
    }

    public struct DescribeFleetAttributesInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetIds", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// Unique identifier for a fleet(s) to retrieve attributes for. To request attributes for all fleets, leave this parameter empty.
        public let fleetIds: [String]?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let nextToken: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
        public let limit: Int32?

        public init(fleetIds: [String]? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.fleetIds = fleetIds
            self.nextToken = nextToken
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case fleetIds = "FleetIds"
            case nextToken = "NextToken"
            case limit = "Limit"
        }
    }

    public struct DescribeEC2InstanceLimitsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EC2InstanceType", required: false, type: .enum)
        ]
        /// Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions. Leave this parameter blank to retrieve limits for all types.
        public let eC2InstanceType: EC2InstanceType?

        public init(eC2InstanceType: EC2InstanceType? = nil) {
            self.eC2InstanceType = eC2InstanceType
        }

        private enum CodingKeys: String, CodingKey {
            case eC2InstanceType = "EC2InstanceType"
        }
    }

    public struct CreatePlayerSessionsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlayerSessions", required: false, type: .list)
        ]
        /// Collection of player session objects created for the added players.
        public let playerSessions: [PlayerSession]?

        public init(playerSessions: [PlayerSession]? = nil) {
            self.playerSessions = playerSessions
        }

        private enum CodingKeys: String, CodingKey {
            case playerSessions = "PlayerSessions"
        }
    }

    public struct GetGameSessionLogUrlInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionId", required: true, type: .string)
        ]
        /// Unique identifier for the game session to get logs for.
        public let gameSessionId: String

        public init(gameSessionId: String) {
            self.gameSessionId = gameSessionId
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionId = "GameSessionId"
        }
    }

    public struct DescribeEC2InstanceLimitsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "EC2InstanceLimits", required: false, type: .list)
        ]
        /// Object that contains the maximum number of instances for the specified instance type.
        public let eC2InstanceLimits: [EC2InstanceLimit]?

        public init(eC2InstanceLimits: [EC2InstanceLimit]? = nil) {
            self.eC2InstanceLimits = eC2InstanceLimits
        }

        private enum CodingKeys: String, CodingKey {
            case eC2InstanceLimits = "EC2InstanceLimits"
        }
    }

    public struct EC2InstanceCounts: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TERMINATING", required: false, type: .integer), 
            AWSShapeMember(label: "MINIMUM", required: false, type: .integer), 
            AWSShapeMember(label: "PENDING", required: false, type: .integer), 
            AWSShapeMember(label: "MAXIMUM", required: false, type: .integer), 
            AWSShapeMember(label: "IDLE", required: false, type: .integer), 
            AWSShapeMember(label: "DESIRED", required: false, type: .integer), 
            AWSShapeMember(label: "ACTIVE", required: false, type: .integer)
        ]
        /// Number of instances in the fleet that are no longer active but haven't yet been terminated.
        public let terminating: Int32?
        /// Minimum value allowed for the fleet's instance count.
        public let minimum: Int32?
        /// Number of instances in the fleet that are starting but not yet active.
        public let pending: Int32?
        /// Maximum value allowed for the fleet's instance count.
        public let maximum: Int32?
        /// Number of active instances in the fleet that are not currently hosting a game session.
        public let idle: Int32?
        /// Ideal number of active instances in the fleet.
        public let desired: Int32?
        /// Actual number of active instances in the fleet.
        public let active: Int32?

        public init(terminating: Int32? = nil, minimum: Int32? = nil, pending: Int32? = nil, maximum: Int32? = nil, idle: Int32? = nil, desired: Int32? = nil, active: Int32? = nil) {
            self.terminating = terminating
            self.minimum = minimum
            self.pending = pending
            self.maximum = maximum
            self.idle = idle
            self.desired = desired
            self.active = active
        }

        private enum CodingKeys: String, CodingKey {
            case terminating = "TERMINATING"
            case minimum = "MINIMUM"
            case pending = "PENDING"
            case maximum = "MAXIMUM"
            case idle = "IDLE"
            case desired = "DESIRED"
            case active = "ACTIVE"
        }
    }

    public struct DescribePlayerSessionsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "PlayerSessions", required: false, type: .list)
        ]
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// Collection of objects containing properties for each player session that matches the request.
        public let playerSessions: [PlayerSession]?

        public init(nextToken: String? = nil, playerSessions: [PlayerSession]? = nil) {
            self.nextToken = nextToken
            self.playerSessions = playerSessions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case playerSessions = "PlayerSessions"
        }
    }

    public struct FleetCapacity: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceCounts", required: false, type: .structure)
        ]
        /// Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions.
        public let instanceType: EC2InstanceType?
        /// Unique identifier for a fleet.
        public let fleetId: String?
        /// Current status of fleet capacity.
        public let instanceCounts: EC2InstanceCounts?

        public init(instanceType: EC2InstanceType? = nil, fleetId: String? = nil, instanceCounts: EC2InstanceCounts? = nil) {
            self.instanceType = instanceType
            self.fleetId = fleetId
            self.instanceCounts = instanceCounts
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "InstanceType"
            case fleetId = "FleetId"
            case instanceCounts = "InstanceCounts"
        }
    }

    public struct GameSessionDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProtectionPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "GameSession", required: false, type: .structure)
        ]
        /// Current status of protection for the game session.    NoProtection – The game session can be terminated during a scale-down event.    FullProtection – If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        public let protectionPolicy: ProtectionPolicy?
        /// Object that describes a game session.
        public let gameSession: GameSession?

        public init(protectionPolicy: ProtectionPolicy? = nil, gameSession: GameSession? = nil) {
            self.protectionPolicy = protectionPolicy
            self.gameSession = gameSession
        }

        private enum CodingKeys: String, CodingKey {
            case protectionPolicy = "ProtectionPolicy"
            case gameSession = "GameSession"
        }
    }

    public struct CreateBuildInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OperatingSystem", required: false, type: .enum), 
            AWSShapeMember(label: "StorageLocation", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        /// Operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build. If your game build contains multiple executables, they all must run on the same operating system.
        public let operatingSystem: OperatingSystem?
        /// Amazon S3 location of the game build files to be uploaded. The S3 bucket must be owned by the same AWS account that you're using to manage Amazon GameLift. It also must in the same region that you want to create a new build in. Before calling CreateBuild with this location, you must allow Amazon GameLift to access your Amazon S3 bucket (see Create a Build with Files in Amazon S3).
        public let storageLocation: S3Location?
        /// Descriptive label that is associated with a build. Build names do not need to be unique. You can use UpdateBuild to change this value later. 
        public let name: String?
        /// Version that is associated with this build. Version strings do not need to be unique. You can use UpdateBuild to change this value later. 
        public let version: String?

        public init(operatingSystem: OperatingSystem? = nil, storageLocation: S3Location? = nil, name: String? = nil, version: String? = nil) {
            self.operatingSystem = operatingSystem
            self.storageLocation = storageLocation
            self.name = name
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case operatingSystem = "OperatingSystem"
            case storageLocation = "StorageLocation"
            case name = "Name"
            case version = "Version"
        }
    }

    public struct DescribeInstancesOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Instances", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Collection of objects containing properties for each instance returned.
        public let instances: [Instance]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(instances: [Instance]? = nil, nextToken: String? = nil) {
            self.instances = instances
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case instances = "Instances"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeInstancesInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string)
        ]
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int32?
        /// Unique identifier for a fleet to retrieve instance information for.
        public let fleetId: String
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?
        /// Unique identifier for an instance to retrieve. Specify an instance ID or leave blank to retrieve all instances in the fleet.
        public let instanceId: String?

        public init(limit: Int32? = nil, fleetId: String, nextToken: String? = nil, instanceId: String? = nil) {
            self.limit = limit
            self.fleetId = fleetId
            self.nextToken = nextToken
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case fleetId = "FleetId"
            case nextToken = "NextToken"
            case instanceId = "InstanceId"
        }
    }

    public struct AwsCredentials: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccessKeyId", required: false, type: .string), 
            AWSShapeMember(label: "SecretAccessKey", required: false, type: .string), 
            AWSShapeMember(label: "SessionToken", required: false, type: .string)
        ]
        /// Access key for an AWS account.
        public let accessKeyId: String?
        /// Secret key for an AWS account.
        public let secretAccessKey: String?
        /// Token specific to a build ID.
        public let sessionToken: String?

        public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, sessionToken: String? = nil) {
            self.accessKeyId = accessKeyId
            self.secretAccessKey = secretAccessKey
            self.sessionToken = sessionToken
        }

        private enum CodingKeys: String, CodingKey {
            case accessKeyId = "AccessKeyId"
            case secretAccessKey = "SecretAccessKey"
            case sessionToken = "SessionToken"
        }
    }

    public struct ListFleetsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "BuildId", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// Unique identifier for a build to return fleets for. Use this parameter to return only fleets using the specified build. To retrieve all fleets, leave this parameter empty.
        public let buildId: String?
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int32?

        public init(buildId: String? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.buildId = buildId
            self.nextToken = nextToken
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case buildId = "BuildId"
            case nextToken = "NextToken"
            case limit = "Limit"
        }
    }

    public struct DeleteScalingPolicyInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Unique identifier for a fleet to be deleted.
        public let fleetId: String
        /// Descriptive label that is associated with a scaling policy. Policy names do not need to be unique.
        public let name: String

        public init(fleetId: String, name: String) {
            self.fleetId = fleetId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case name = "Name"
        }
    }

    public enum GameSessionStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case activating = "ACTIVATING"
        case terminated = "TERMINATED"
        case terminating = "TERMINATING"
        case error = "ERROR"
        public var description: String { return self.rawValue }
    }

    public struct PlayerSession: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "PlayerSessionId", required: false, type: .string), 
            AWSShapeMember(label: "IpAddress", required: false, type: .string), 
            AWSShapeMember(label: "PlayerData", required: false, type: .string), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TerminationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "PlayerId", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionId", required: false, type: .string), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer)
        ]
        /// Current status of the player session. Possible player session statuses include the following:    RESERVED – The player session request has been received, but the player has not yet connected to the server process and/or been validated.     ACTIVE – The player has been validated by the server process and is currently connected.    COMPLETED – The player connection has been dropped.    TIMEDOUT – A player session request was received, but the player did not connect and/or was not validated within the time-out limit (60 seconds).  
        public let status: PlayerSessionStatus?
        /// Unique identifier for a player session.
        public let playerSessionId: String?
        /// IP address of the game session. To connect to a Amazon GameLift game server, an app needs both the IP address and port number.
        public let ipAddress: String?
        /// Developer-defined information related to a player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game. 
        public let playerData: String?
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: TimeStamp?
        /// Time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let terminationTime: TimeStamp?
        /// Unique identifier for a player that is associated with this player session.
        public let playerId: String?
        /// Unique identifier for the game session that the player session is connected to.
        public let gameSessionId: String?
        /// Unique identifier for a fleet that the player's game session is running on.
        public let fleetId: String?
        /// Port number for the game session. To connect to a Amazon GameLift server process, an app needs both the IP address and port number.
        public let port: Int32?

        public init(status: PlayerSessionStatus? = nil, playerSessionId: String? = nil, ipAddress: String? = nil, playerData: String? = nil, creationTime: TimeStamp? = nil, terminationTime: TimeStamp? = nil, playerId: String? = nil, gameSessionId: String? = nil, fleetId: String? = nil, port: Int32? = nil) {
            self.status = status
            self.playerSessionId = playerSessionId
            self.ipAddress = ipAddress
            self.playerData = playerData
            self.creationTime = creationTime
            self.terminationTime = terminationTime
            self.playerId = playerId
            self.gameSessionId = gameSessionId
            self.fleetId = fleetId
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case playerSessionId = "PlayerSessionId"
            case ipAddress = "IpAddress"
            case playerData = "PlayerData"
            case creationTime = "CreationTime"
            case terminationTime = "TerminationTime"
            case playerId = "PlayerId"
            case gameSessionId = "GameSessionId"
            case fleetId = "FleetId"
            case port = "Port"
        }
    }

    public struct FleetUtilization: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaximumPlayerSessionCount", required: false, type: .integer), 
            AWSShapeMember(label: "ActiveServerProcessCount", required: false, type: .integer), 
            AWSShapeMember(label: "ActiveGameSessionCount", required: false, type: .integer), 
            AWSShapeMember(label: "CurrentPlayerSessionCount", required: false, type: .integer), 
            AWSShapeMember(label: "FleetId", required: false, type: .string)
        ]
        /// Maximum players allowed across all game sessions currently being hosted on all instances in the fleet.
        public let maximumPlayerSessionCount: Int32?
        /// Number of server processes in an ACTIVE status currently running across all instances in the fleet
        public let activeServerProcessCount: Int32?
        /// Number of active game sessions currently being hosted on all instances in the fleet.
        public let activeGameSessionCount: Int32?
        /// Number of active player sessions currently being hosted on all instances in the fleet.
        public let currentPlayerSessionCount: Int32?
        /// Unique identifier for a fleet.
        public let fleetId: String?

        public init(maximumPlayerSessionCount: Int32? = nil, activeServerProcessCount: Int32? = nil, activeGameSessionCount: Int32? = nil, currentPlayerSessionCount: Int32? = nil, fleetId: String? = nil) {
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.activeServerProcessCount = activeServerProcessCount
            self.activeGameSessionCount = activeGameSessionCount
            self.currentPlayerSessionCount = currentPlayerSessionCount
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
            case activeServerProcessCount = "ActiveServerProcessCount"
            case activeGameSessionCount = "ActiveGameSessionCount"
            case currentPlayerSessionCount = "CurrentPlayerSessionCount"
            case fleetId = "FleetId"
        }
    }

    public struct DescribeGameSessionQueuesOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionQueues", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Collection of objects that describes the requested game session queues.
        public let gameSessionQueues: [GameSessionQueue]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(gameSessionQueues: [GameSessionQueue]? = nil, nextToken: String? = nil) {
            self.gameSessionQueues = gameSessionQueues
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionQueues = "GameSessionQueues"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeGameSessionsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Collection of objects containing game session properties for each session matching the request.
        public let gameSessions: [GameSession]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(gameSessions: [GameSession]? = nil, nextToken: String? = nil) {
            self.gameSessions = gameSessions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessions = "GameSessions"
            case nextToken = "NextToken"
        }
    }

    public enum OperatingSystem: String, CustomStringConvertible, Codable {
        case windows2012 = "WINDOWS_2012"
        case amazonLinux = "AMAZON_LINUX"
        public var description: String { return self.rawValue }
    }

    public struct DescribeFleetEventsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Earliest date to retrieve event logs for. If no start time is specified, this call returns entries starting from when the fleet was created to the specified end time. Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").
        public let startTime: TimeStamp?
        /// Most recent date to retrieve event logs for. If no end time is specified, this call returns entries from the specified start time up to the present. Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").
        public let endTime: TimeStamp?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int32?
        /// Unique identifier for a fleet to get event logs for.
        public let fleetId: String
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?

        public init(startTime: TimeStamp? = nil, endTime: TimeStamp? = nil, limit: Int32? = nil, fleetId: String, nextToken: String? = nil) {
            self.startTime = startTime
            self.endTime = endTime
            self.limit = limit
            self.fleetId = fleetId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case endTime = "EndTime"
            case limit = "Limit"
            case fleetId = "FleetId"
            case nextToken = "NextToken"
        }
    }

    public enum FleetStatus: String, CustomStringConvertible, Codable {
        case new = "NEW"
        case downloading = "DOWNLOADING"
        case validating = "VALIDATING"
        case building = "BUILDING"
        case activating = "ACTIVATING"
        case active = "ACTIVE"
        case deleting = "DELETING"
        case error = "ERROR"
        case terminated = "TERMINATED"
        public var description: String { return self.rawValue }
    }

    public enum GameSessionPlacementState: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case fulfilled = "FULFILLED"
        case cancelled = "CANCELLED"
        case timedOut = "TIMED_OUT"
        public var description: String { return self.rawValue }
    }

    public struct S3Location: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Bucket", required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// Amazon S3 bucket identifier. This is the name of your S3 bucket.
        public let bucket: String?
        /// Amazon Resource Name (ARN) for the access role that allows Amazon GameLift to access your S3 bucket.
        public let roleArn: String?
        /// Name of the zip file containing your build files. 
        public let key: String?

        public init(bucket: String? = nil, roleArn: String? = nil, key: String? = nil) {
            self.bucket = bucket
            self.roleArn = roleArn
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case bucket = "Bucket"
            case roleArn = "RoleArn"
            case key = "Key"
        }
    }

    public struct CreateGameSessionInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: false, type: .string), 
            AWSShapeMember(label: "CreatorId", required: false, type: .string), 
            AWSShapeMember(label: "GameProperties", required: false, type: .list), 
            AWSShapeMember(label: "AliasId", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionId", required: false, type: .string), 
            AWSShapeMember(label: "MaximumPlayerSessionCount", required: true, type: .integer)
        ]
        /// Unique identifier for a fleet to create a game session in. Each request must reference either a fleet ID or alias ID, but not both.
        public let fleetId: String?
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        public let name: String?
        /// Custom string that uniquely identifies a request for a new game session. Maximum token length is 48 characters. If provided, this string is included in the new game session's ID. (A game session ID has the following format: arn:aws:gamelift:&lt;region&gt;::gamesession/&lt;fleet ID&gt;/&lt;custom ID string or idempotency token&gt;.) 
        public let idempotencyToken: String?
        /// Unique identifier for a player or entity creating the game session. This ID is used to enforce a resource protection policy (if one exists) that limits the number of concurrent active game sessions one player can have.
        public let creatorId: String?
        /// Set of developer-defined properties for a game session. These properties are passed to the server process hosting the game session.
        public let gameProperties: [GameProperty]?
        /// Unique identifier for an alias associated with the fleet to create a game session in. Each request must reference either a fleet ID or alias ID, but not both.
        public let aliasId: String?
        ///  This parameter is no longer preferred. Please use IdempotencyToken instead. Custom string that uniquely identifies a request for a new game session. Maximum token length is 48 characters. If provided, this string is included in the new game session's ID. (A game session ID has the following format: arn:aws:gamelift:&lt;region&gt;::gamesession/&lt;fleet ID&gt;/&lt;custom ID string or idempotency token&gt;.) 
        public let gameSessionId: String?
        /// Maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int32

        public init(fleetId: String? = nil, name: String? = nil, idempotencyToken: String? = nil, creatorId: String? = nil, gameProperties: [GameProperty]? = nil, aliasId: String? = nil, gameSessionId: String? = nil, maximumPlayerSessionCount: Int32) {
            self.fleetId = fleetId
            self.name = name
            self.idempotencyToken = idempotencyToken
            self.creatorId = creatorId
            self.gameProperties = gameProperties
            self.aliasId = aliasId
            self.gameSessionId = gameSessionId
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case name = "Name"
            case idempotencyToken = "IdempotencyToken"
            case creatorId = "CreatorId"
            case gameProperties = "GameProperties"
            case aliasId = "AliasId"
            case gameSessionId = "GameSessionId"
            case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        }
    }

    public struct UpdateGameSessionInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlayerSessionCreationPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "ProtectionPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "GameSessionId", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "MaximumPlayerSessionCount", required: false, type: .integer)
        ]
        /// Policy determining whether or not the game session accepts new players.
        public let playerSessionCreationPolicy: PlayerSessionCreationPolicy?
        /// Game session protection policy to apply to this game session only.    NoProtection – The game session can be terminated during a scale-down event.    FullProtection – If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        public let protectionPolicy: ProtectionPolicy?
        /// Unique identifier for the game session to update.
        public let gameSessionId: String
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        public let name: String?
        /// Maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int32?

        public init(playerSessionCreationPolicy: PlayerSessionCreationPolicy? = nil, protectionPolicy: ProtectionPolicy? = nil, gameSessionId: String, name: String? = nil, maximumPlayerSessionCount: Int32? = nil) {
            self.playerSessionCreationPolicy = playerSessionCreationPolicy
            self.protectionPolicy = protectionPolicy
            self.gameSessionId = gameSessionId
            self.name = name
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
        }

        private enum CodingKeys: String, CodingKey {
            case playerSessionCreationPolicy = "PlayerSessionCreationPolicy"
            case protectionPolicy = "ProtectionPolicy"
            case gameSessionId = "GameSessionId"
            case name = "Name"
            case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        }
    }

    public struct CreateBuildOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageLocation", required: false, type: .structure), 
            AWSShapeMember(label: "UploadCredentials", required: false, type: .structure), 
            AWSShapeMember(label: "Build", required: false, type: .structure)
        ]
        /// Amazon S3 location specified in the request.
        public let storageLocation: S3Location?
        /// This element is not currently in use.
        public let uploadCredentials: AwsCredentials?
        /// The newly created build record, including a unique build ID and status. 
        public let build: Build?

        public init(storageLocation: S3Location? = nil, uploadCredentials: AwsCredentials? = nil, build: Build? = nil) {
            self.storageLocation = storageLocation
            self.uploadCredentials = uploadCredentials
            self.build = build
        }

        private enum CodingKeys: String, CodingKey {
            case storageLocation = "StorageLocation"
            case uploadCredentials = "UploadCredentials"
            case build = "Build"
        }
    }

    public struct FleetAttributes: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TerminationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "FleetArn", required: false, type: .string), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "NewGameSessionProtectionPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "LogPaths", required: false, type: .list), 
            AWSShapeMember(label: "ServerLaunchPath", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ResourceCreationLimitPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "MetricGroups", required: false, type: .list), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "BuildId", required: false, type: .string), 
            AWSShapeMember(label: "ServerLaunchParameters", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "OperatingSystem", required: false, type: .enum), 
            AWSShapeMember(label: "FleetId", required: false, type: .string)
        ]
        /// Time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let terminationTime: TimeStamp?
        /// Identifier for a fleet that is unique across all regions.
        public let fleetArn: String?
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        public let creationTime: TimeStamp?
        /// Type of game session protection to set for all new instances started in the fleet.    NoProtection – The game session can be terminated during a scale-down event.    FullProtection – If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        public let newGameSessionProtectionPolicy: ProtectionPolicy?
        /// Location of default log files. When a server process is shut down, Amazon GameLift captures and stores any log files in this location. These logs are in addition to game session logs; see more on game session logs in the Amazon GameLift Developer Guide. If no default log path for a fleet is specified, Amazon GameLift automatically uploads logs that are stored on each instance at C:\game\logs (for Windows) or /local/game/logs (for Linux). Use the Amazon GameLift console to access stored logs. 
        public let logPaths: [String]?
        /// Path to a game server executable in the fleet's build, specified for fleets created before 2016-08-04 (or AWS SDK v. 0.12.16). Server launch paths for fleets created after this date are specified in the fleet's RuntimeConfiguration.
        public let serverLaunchPath: String?
        /// Human-readable description of the fleet.
        public let description: String?
        /// Fleet policy to limit the number of game sessions an individual player can create over a span of time.
        public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?
        /// Names of metric groups that this fleet is included in. In Amazon CloudWatch, you can view metrics for an individual fleet or aggregated metrics for fleets that are in a fleet metric group. A fleet can be included in only one metric group at a time.
        public let metricGroups: [String]?
        /// Current status of the fleet. Possible fleet statuses include the following:    NEW – A new fleet has been defined and desired instances is set to 1.     DOWNLOADING/VALIDATING/BUILDING/ACTIVATING – Amazon GameLift is setting up the new fleet, creating new instances with the game build and starting server processes.    ACTIVE – Hosts can now accept game sessions.    ERROR – An error occurred when downloading, validating, building, or activating the fleet.    DELETING – Hosts are responding to a delete fleet request.    TERMINATED – The fleet no longer exists.  
        public let status: FleetStatus?
        /// Unique identifier for a build.
        public let buildId: String?
        /// Game server launch parameters specified for fleets created before 2016-08-04 (or AWS SDK v. 0.12.16). Server launch parameters for fleets created after this date are specified in the fleet's RuntimeConfiguration.
        public let serverLaunchParameters: String?
        /// Descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        public let name: String?
        /// Operating system of the fleet's computing resources. A fleet's operating system depends on the OS specified for the build that is deployed on this fleet.
        public let operatingSystem: OperatingSystem?
        /// Unique identifier for a fleet.
        public let fleetId: String?

        public init(terminationTime: TimeStamp? = nil, fleetArn: String? = nil, creationTime: TimeStamp? = nil, newGameSessionProtectionPolicy: ProtectionPolicy? = nil, logPaths: [String]? = nil, serverLaunchPath: String? = nil, description: String? = nil, resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil, metricGroups: [String]? = nil, status: FleetStatus? = nil, buildId: String? = nil, serverLaunchParameters: String? = nil, name: String? = nil, operatingSystem: OperatingSystem? = nil, fleetId: String? = nil) {
            self.terminationTime = terminationTime
            self.fleetArn = fleetArn
            self.creationTime = creationTime
            self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
            self.logPaths = logPaths
            self.serverLaunchPath = serverLaunchPath
            self.description = description
            self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
            self.metricGroups = metricGroups
            self.status = status
            self.buildId = buildId
            self.serverLaunchParameters = serverLaunchParameters
            self.name = name
            self.operatingSystem = operatingSystem
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case terminationTime = "TerminationTime"
            case fleetArn = "FleetArn"
            case creationTime = "CreationTime"
            case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
            case logPaths = "LogPaths"
            case serverLaunchPath = "ServerLaunchPath"
            case description = "Description"
            case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
            case metricGroups = "MetricGroups"
            case status = "Status"
            case buildId = "BuildId"
            case serverLaunchParameters = "ServerLaunchParameters"
            case name = "Name"
            case operatingSystem = "OperatingSystem"
            case fleetId = "FleetId"
        }
    }

    public struct InstanceAccess: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OperatingSystem", required: false, type: .enum), 
            AWSShapeMember(label: "Credentials", required: false, type: .structure), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "InstanceId", required: false, type: .string), 
            AWSShapeMember(label: "IpAddress", required: false, type: .string)
        ]
        /// Operating system that is running on the instance.
        public let operatingSystem: OperatingSystem?
        /// Credentials required to access the instance.
        public let credentials: InstanceCredentials?
        /// Unique identifier for a fleet containing the instance being accessed.
        public let fleetId: String?
        /// Unique identifier for an instance being accessed.
        public let instanceId: String?
        /// IP address assigned to the instance.
        public let ipAddress: String?

        public init(operatingSystem: OperatingSystem? = nil, credentials: InstanceCredentials? = nil, fleetId: String? = nil, instanceId: String? = nil, ipAddress: String? = nil) {
            self.operatingSystem = operatingSystem
            self.credentials = credentials
            self.fleetId = fleetId
            self.instanceId = instanceId
            self.ipAddress = ipAddress
        }

        private enum CodingKeys: String, CodingKey {
            case operatingSystem = "OperatingSystem"
            case credentials = "Credentials"
            case fleetId = "FleetId"
            case instanceId = "InstanceId"
            case ipAddress = "IpAddress"
        }
    }

    public struct StopGameSessionPlacementOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionPlacement", required: false, type: .structure)
        ]
        /// Object that describes the canceled game session placement, with Cancelled status and an end time stamp. 
        public let gameSessionPlacement: GameSessionPlacement?

        public init(gameSessionPlacement: GameSessionPlacement? = nil) {
            self.gameSessionPlacement = gameSessionPlacement
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionPlacement = "GameSessionPlacement"
        }
    }

    public enum RoutingStrategyType: String, CustomStringConvertible, Codable {
        case simple = "SIMPLE"
        case terminal = "TERMINAL"
        public var description: String { return self.rawValue }
    }

    public struct CreateGameSessionQueueOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessionQueue", required: false, type: .structure)
        ]
        /// Object that describes the newly created game session queue.
        public let gameSessionQueue: GameSessionQueue?

        public init(gameSessionQueue: GameSessionQueue? = nil) {
            self.gameSessionQueue = gameSessionQueue
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessionQueue = "GameSessionQueue"
        }
    }

    public struct CreatePlayerSessionOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlayerSession", required: false, type: .structure)
        ]
        /// Object that describes the newly created player session record.
        public let playerSession: PlayerSession?

        public init(playerSession: PlayerSession? = nil) {
            self.playerSession = playerSession
        }

        private enum CodingKeys: String, CodingKey {
            case playerSession = "PlayerSession"
        }
    }

    public struct DescribeGameSessionDetailsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "GameSessionDetails", required: false, type: .list)
        ]
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// Collection of objects containing game session properties and the protection policy currently in force for each session matching the request.
        public let gameSessionDetails: [GameSessionDetail]?

        public init(nextToken: String? = nil, gameSessionDetails: [GameSessionDetail]? = nil) {
            self.nextToken = nextToken
            self.gameSessionDetails = gameSessionDetails
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case gameSessionDetails = "GameSessionDetails"
        }
    }

    public struct StartGameSessionPlacementInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DesiredPlayerSessions", required: false, type: .list), 
            AWSShapeMember(label: "PlacementId", required: true, type: .string), 
            AWSShapeMember(label: "PlayerLatencies", required: false, type: .list), 
            AWSShapeMember(label: "GameSessionQueueName", required: true, type: .string), 
            AWSShapeMember(label: "GameProperties", required: false, type: .list), 
            AWSShapeMember(label: "GameSessionName", required: false, type: .string), 
            AWSShapeMember(label: "MaximumPlayerSessionCount", required: true, type: .integer)
        ]
        /// Set of information on each player to create a player session for.
        public let desiredPlayerSessions: [DesiredPlayerSession]?
        /// Unique identifier to assign to the new game session placement. This value is developer-defined. The value must be unique across all regions and cannot be reused unless you are resubmitting a canceled or timed-out placement request.
        public let placementId: String
        /// Set of values, expressed in milliseconds, indicating the amount of latency that players are experiencing when connected to AWS regions. This information is used to try to place the new game session where it can offer the best possible gameplay experience for the players. 
        public let playerLatencies: [PlayerLatency]?
        /// Name of the queue to use to place the new game session.
        public let gameSessionQueueName: String
        /// Set of developer-defined properties for a game session. These properties are passed to the server process hosting the game session.
        public let gameProperties: [GameProperty]?
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        public let gameSessionName: String?
        /// Maximum number of players that can be connected simultaneously to the game session.
        public let maximumPlayerSessionCount: Int32

        public init(desiredPlayerSessions: [DesiredPlayerSession]? = nil, placementId: String, playerLatencies: [PlayerLatency]? = nil, gameSessionQueueName: String, gameProperties: [GameProperty]? = nil, gameSessionName: String? = nil, maximumPlayerSessionCount: Int32) {
            self.desiredPlayerSessions = desiredPlayerSessions
            self.placementId = placementId
            self.playerLatencies = playerLatencies
            self.gameSessionQueueName = gameSessionQueueName
            self.gameProperties = gameProperties
            self.gameSessionName = gameSessionName
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
        }

        private enum CodingKeys: String, CodingKey {
            case desiredPlayerSessions = "DesiredPlayerSessions"
            case placementId = "PlacementId"
            case playerLatencies = "PlayerLatencies"
            case gameSessionQueueName = "GameSessionQueueName"
            case gameProperties = "GameProperties"
            case gameSessionName = "GameSessionName"
            case maximumPlayerSessionCount = "MaximumPlayerSessionCount"
        }
    }

    public struct CreateAliasOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Alias", required: false, type: .structure)
        ]
        /// Object that describes the newly created alias record.
        public let alias: Alias?

        public init(alias: Alias? = nil) {
            self.alias = alias
        }

        private enum CodingKeys: String, CodingKey {
            case alias = "Alias"
        }
    }

    public struct DescribeScalingPoliciesInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StatusFilter", required: false, type: .enum), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Scaling policy status to filter results on. A scaling policy is only in force when in an ACTIVE status.    ACTIVE – The scaling policy is currently in force.    UPDATEREQUESTED – A request to update the scaling policy has been received.    UPDATING – A change is being made to the scaling policy.    DELETEREQUESTED – A request to delete the scaling policy has been received.    DELETING – The scaling policy is being deleted.    DELETED – The scaling policy has been deleted.    ERROR – An error occurred in creating the policy. It should be removed and recreated.  
        public let statusFilter: ScalingStatusType?
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        public let limit: Int32?
        /// Unique identifier for a fleet to retrieve scaling policies for.
        public let fleetId: String
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        public let nextToken: String?

        public init(statusFilter: ScalingStatusType? = nil, limit: Int32? = nil, fleetId: String, nextToken: String? = nil) {
            self.statusFilter = statusFilter
            self.limit = limit
            self.fleetId = fleetId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case statusFilter = "StatusFilter"
            case limit = "Limit"
            case fleetId = "FleetId"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeBuildOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Build", required: false, type: .structure)
        ]
        /// Set of properties describing the requested build.
        public let build: Build?

        public init(build: Build? = nil) {
            self.build = build
        }

        private enum CodingKeys: String, CodingKey {
            case build = "Build"
        }
    }

    public struct UpdateFleetCapacityOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: false, type: .string)
        ]
        /// Unique identifier for a fleet that was updated.
        public let fleetId: String?

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct UpdateFleetAttributesInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceCreationLimitPolicy", required: false, type: .structure), 
            AWSShapeMember(label: "NewGameSessionProtectionPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "MetricGroups", required: false, type: .list)
        ]
        /// Policy that limits the number of game sessions an individual player can create over a span of time. 
        public let resourceCreationLimitPolicy: ResourceCreationLimitPolicy?
        /// Game session protection policy to apply to all new instances created in this fleet. Instances that already exist are not affected. You can set protection for individual instances using UpdateGameSession.    NoProtection – The game session can be terminated during a scale-down event.    FullProtection – If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        public let newGameSessionProtectionPolicy: ProtectionPolicy?
        /// Human-readable description of a fleet.
        public let description: String?
        /// Unique identifier for a fleet to update attribute metadata for.
        public let fleetId: String
        /// Descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        public let name: String?
        /// Names of metric groups to include this fleet in. Amazon CloudWatch uses a fleet metric group is to aggregate metrics from multiple fleets. Use an existing metric group name to add this fleet to the group. Or use a new name to create a new metric group. A fleet can only be included in one metric group at a time.
        public let metricGroups: [String]?

        public init(resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil, newGameSessionProtectionPolicy: ProtectionPolicy? = nil, description: String? = nil, fleetId: String, name: String? = nil, metricGroups: [String]? = nil) {
            self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
            self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
            self.description = description
            self.fleetId = fleetId
            self.name = name
            self.metricGroups = metricGroups
        }

        private enum CodingKeys: String, CodingKey {
            case resourceCreationLimitPolicy = "ResourceCreationLimitPolicy"
            case newGameSessionProtectionPolicy = "NewGameSessionProtectionPolicy"
            case description = "Description"
            case fleetId = "FleetId"
            case name = "Name"
            case metricGroups = "MetricGroups"
        }
    }

    public struct DeleteGameSessionQueueInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// Descriptive label that is associated with queue. Queue names must be unique within each region.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct ListAliasesOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Aliases", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Collection of alias records that match the list request.
        public let aliases: [Alias]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(aliases: [Alias]? = nil, nextToken: String? = nil) {
            self.aliases = aliases
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case aliases = "Aliases"
            case nextToken = "NextToken"
        }
    }

    public struct IpPermission: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FromPort", required: true, type: .integer), 
            AWSShapeMember(label: "ToPort", required: true, type: .integer), 
            AWSShapeMember(label: "Protocol", required: true, type: .enum), 
            AWSShapeMember(label: "IpRange", required: true, type: .string)
        ]
        /// Starting value for a range of allowed port numbers.
        public let fromPort: Int32
        /// Ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than FromPort.
        public let toPort: Int32
        /// Network communication protocol used by the fleet.
        public let `protocol`: IpProtocol
        /// Range of allowed IP addresses. This value must be expressed in CIDR notation. Example: "000.000.000.000/[subnet mask]" or optionally the shortened version "0.0.0.0/[subnet mask]".
        public let ipRange: String

        public init(fromPort: Int32, toPort: Int32, protocol: IpProtocol, ipRange: String) {
            self.fromPort = fromPort
            self.toPort = toPort
            self.`protocol` = `protocol`
            self.ipRange = ipRange
        }

        private enum CodingKeys: String, CodingKey {
            case fromPort = "FromPort"
            case toPort = "ToPort"
            case `protocol` = "Protocol"
            case ipRange = "IpRange"
        }
    }

    public struct DescribeFleetEventsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Events", required: false, type: .list)
        ]
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// Collection of objects containing event log entries for the specified fleet.
        public let events: [Event]?

        public init(nextToken: String? = nil, events: [Event]? = nil) {
            self.nextToken = nextToken
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case events = "Events"
        }
    }

    public struct DescribeAliasOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Alias", required: false, type: .structure)
        ]
        /// Object that contains the requested alias.
        public let alias: Alias?

        public init(alias: Alias? = nil) {
            self.alias = alias
        }

        private enum CodingKeys: String, CodingKey {
            case alias = "Alias"
        }
    }

    public struct GetInstanceAccessInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]
        /// Unique identifier for a fleet that contains the instance you want access to. The fleet can be in any of the following statuses: ACTIVATING, ACTIVE, or ERROR. Fleets with an ERROR status may be accessible for a short time before they are deleted.
        public let fleetId: String
        /// Unique identifier for an instance you want to get access to. You can access an instance in any status.
        public let instanceId: String

        public init(fleetId: String, instanceId: String) {
            self.fleetId = fleetId
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case instanceId = "InstanceId"
        }
    }

    public enum ScalingAdjustmentType: String, CustomStringConvertible, Codable {
        case changeincapacity = "ChangeInCapacity"
        case exactcapacity = "ExactCapacity"
        case percentchangeincapacity = "PercentChangeInCapacity"
        public var description: String { return self.rawValue }
    }

    public struct DescribeRuntimeConfigurationInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: true, type: .string)
        ]
        /// Unique identifier for a fleet to get the run-time configuration for.
        public let fleetId: String

        public init(fleetId: String) {
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public enum PlayerSessionCreationPolicy: String, CustomStringConvertible, Codable {
        case acceptAll = "ACCEPT_ALL"
        case denyAll = "DENY_ALL"
        public var description: String { return self.rawValue }
    }

    public struct DescribeGameSessionPlacementInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlacementId", required: true, type: .string)
        ]
        /// Unique identifier for a game session placement to retrieve.
        public let placementId: String

        public init(placementId: String) {
            self.placementId = placementId
        }

        private enum CodingKeys: String, CodingKey {
            case placementId = "PlacementId"
        }
    }

    public struct RoutingStrategy: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "FleetId", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string)
        ]
        /// Type of routing strategy. Possible routing types include the following:    SIMPLE – The alias resolves to one specific fleet. Use this type when routing to active fleets.    TERMINAL – The alias does not resolve to a fleet but instead can be used to display a message to the user. A terminal alias throws a TerminalRoutingStrategyException with the RoutingStrategy message embedded.  
        public let `type`: RoutingStrategyType?
        /// Unique identifier for a fleet that the alias points to.
        public let fleetId: String?
        /// Message text to be used with a terminal routing strategy.
        public let message: String?

        public init(type: RoutingStrategyType? = nil, fleetId: String? = nil, message: String? = nil) {
            self.`type` = `type`
            self.fleetId = fleetId
            self.message = message
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case fleetId = "FleetId"
            case message = "Message"
        }
    }

    public struct UpdateAliasInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "AliasId", required: true, type: .string), 
            AWSShapeMember(label: "RoutingStrategy", required: false, type: .structure)
        ]
        /// Human-readable description of an alias.
        public let description: String?
        /// Descriptive label that is associated with an alias. Alias names do not need to be unique.
        public let name: String?
        /// Unique identifier for a fleet alias. Specify the alias you want to update.
        public let aliasId: String
        /// Object that specifies the fleet and routing type to use for the alias.
        public let routingStrategy: RoutingStrategy?

        public init(description: String? = nil, name: String? = nil, aliasId: String, routingStrategy: RoutingStrategy? = nil) {
            self.description = description
            self.name = name
            self.aliasId = aliasId
            self.routingStrategy = routingStrategy
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case name = "Name"
            case aliasId = "AliasId"
            case routingStrategy = "RoutingStrategy"
        }
    }

    public struct PlayerLatencyPolicy: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyDurationSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "MaximumIndividualPlayerLatencyMilliseconds", required: false, type: .integer)
        ]
        /// The length of time, in seconds, that the policy is enforced while placing a new game session. A null value for this property means that the policy is enforced until the queue times out.
        public let policyDurationSeconds: Int32?
        /// The maximum latency value that is allowed for any player, in milliseconds. All policies must have a value set for this property.
        public let maximumIndividualPlayerLatencyMilliseconds: Int32?

        public init(policyDurationSeconds: Int32? = nil, maximumIndividualPlayerLatencyMilliseconds: Int32? = nil) {
            self.policyDurationSeconds = policyDurationSeconds
            self.maximumIndividualPlayerLatencyMilliseconds = maximumIndividualPlayerLatencyMilliseconds
        }

        private enum CodingKeys: String, CodingKey {
            case policyDurationSeconds = "PolicyDurationSeconds"
            case maximumIndividualPlayerLatencyMilliseconds = "MaximumIndividualPlayerLatencyMilliseconds"
        }
    }

    public struct UpdateFleetPortSettingsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: false, type: .string)
        ]
        /// Unique identifier for a fleet that was updated.
        public let fleetId: String?

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
        }
    }

    public struct UpdateRuntimeConfigurationInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FleetId", required: true, type: .string), 
            AWSShapeMember(label: "RuntimeConfiguration", required: true, type: .structure)
        ]
        /// Unique identifier for a fleet to update run-time configuration for.
        public let fleetId: String
        /// Instructions for launching server processes on each instance in the fleet. The run-time configuration for a fleet has a collection of server process configurations, one for each type of server process to run on an instance. A server process configuration specifies the location of the server executable, launch parameters, and the number of concurrent processes with that configuration to maintain on each instance.
        public let runtimeConfiguration: RuntimeConfiguration

        public init(fleetId: String, runtimeConfiguration: RuntimeConfiguration) {
            self.fleetId = fleetId
            self.runtimeConfiguration = runtimeConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case fleetId = "FleetId"
            case runtimeConfiguration = "RuntimeConfiguration"
        }
    }

    public struct CreateGameSessionQueueInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Destinations", required: false, type: .list), 
            AWSShapeMember(label: "TimeoutInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "PlayerLatencyPolicies", required: false, type: .list)
        ]
        /// List of fleets that can be used to fulfill game session placement requests in the queue. Fleets are identified by either a fleet ARN or a fleet alias ARN. Destinations are listed in default preference order.
        public let destinations: [GameSessionQueueDestination]?
        /// Maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
        public let timeoutInSeconds: Int32?
        /// Descriptive label that is associated with queue. Queue names must be unique within each region.
        public let name: String
        /// Collection of latency policies to apply when processing game sessions placement requests with player latency information. Multiple policies are evaluated in order of the maximum latency value, starting with the lowest latency values. With just one policy, it is enforced at the start of the game session placement for the duration period. With multiple policies, each policy is enforced consecutively for its duration period. For example, a queue might enforce a 60-second policy followed by a 120-second policy, and then no policy for the remainder of the placement. A player latency policy must set a value for MaximumIndividualPlayerLatencyMilliseconds; if none is set, this API requests will fail.
        public let playerLatencyPolicies: [PlayerLatencyPolicy]?

        public init(destinations: [GameSessionQueueDestination]? = nil, timeoutInSeconds: Int32? = nil, name: String, playerLatencyPolicies: [PlayerLatencyPolicy]? = nil) {
            self.destinations = destinations
            self.timeoutInSeconds = timeoutInSeconds
            self.name = name
            self.playerLatencyPolicies = playerLatencyPolicies
        }

        private enum CodingKeys: String, CodingKey {
            case destinations = "Destinations"
            case timeoutInSeconds = "TimeoutInSeconds"
            case name = "Name"
            case playerLatencyPolicies = "PlayerLatencyPolicies"
        }
    }

    public struct SearchGameSessionsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "GameSessions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Collection of objects containing game session properties for each session matching the request.
        public let gameSessions: [GameSession]?
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?

        public init(gameSessions: [GameSession]? = nil, nextToken: String? = nil) {
            self.gameSessions = gameSessions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case gameSessions = "GameSessions"
            case nextToken = "NextToken"
        }
    }

    public struct UpdateAliasOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Alias", required: false, type: .structure)
        ]
        /// Object that contains the updated alias configuration.
        public let alias: Alias?

        public init(alias: Alias? = nil) {
            self.alias = alias
        }

        private enum CodingKeys: String, CodingKey {
            case alias = "Alias"
        }
    }

    public struct DescribeRuntimeConfigurationOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RuntimeConfiguration", required: false, type: .structure)
        ]
        /// Instructions describing how server processes should be launched and maintained on each instance in the fleet.
        public let runtimeConfiguration: RuntimeConfiguration?

        public init(runtimeConfiguration: RuntimeConfiguration? = nil) {
            self.runtimeConfiguration = runtimeConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case runtimeConfiguration = "RuntimeConfiguration"
        }
    }

    public struct ListFleetsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "FleetIds", required: false, type: .list)
        ]
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        public let nextToken: String?
        /// Set of fleet IDs matching the list request. You can retrieve additional information about all returned fleets by passing this result set to a call to DescribeFleetAttributes, DescribeFleetCapacity, or DescribeFleetUtilization.
        public let fleetIds: [String]?

        public init(nextToken: String? = nil, fleetIds: [String]? = nil) {
            self.nextToken = nextToken
            self.fleetIds = fleetIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case fleetIds = "FleetIds"
        }
    }

}