// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Gamelift {

    public struct DeleteFleetInput: Serializable, Initializable {
        /// Unique identifier for a fleet to be deleted.
        var fleetId: String = ""

        public init() {}

        public init(fleetId: String) {
            self.fleetId = fleetId
        }

    }

    public struct UpdateFleetCapacityInput: Serializable, Initializable {
        /// Minimum value allowed for the fleet's instance count. Default if not set is 0.
        var minSize: Int32? = nil
        /// Maximum value allowed for the fleet's instance count. Default if not set is 1.
        var maxSize: Int32? = nil
        /// Number of EC2 instances you want this fleet to host.
        var desiredInstances: Int32? = nil
        /// Unique identifier for a fleet to update capacity for.
        var fleetId: String = ""

        public init() {}

        public init(minSize: Int32? = nil, maxSize: Int32? = nil, desiredInstances: Int32? = nil, fleetId: String) {
            self.minSize = minSize
            self.maxSize = maxSize
            self.desiredInstances = desiredInstances
            self.fleetId = fleetId
        }

    }

    public struct DescribePlayerSessionsInput: Serializable, Initializable {
        /// Unique identifier for a player to retrieve player sessions for.
        var playerId: String? = nil
        /// Player session status to filter results on. Possible player session statuses include the following:    RESERVED – The player session request has been received, but the player has not yet connected to the server process and/or been validated.     ACTIVE – The player has been validated by the server process and is currently connected.    COMPLETED – The player connection has been dropped.    TIMEDOUT – A player session request was received, but the player did not connect and/or was not validated within the time-out limit (60 seconds).  
        var playerSessionStatusFilter: String? = nil
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. If a player session ID is specified, this parameter is ignored.
        var limit: Int32? = nil
        /// Unique identifier for the game session to retrieve player sessions for.
        var gameSessionId: String? = nil
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value. If a player session ID is specified, this parameter is ignored.
        var nextToken: String? = nil
        /// Unique identifier for a player session to retrieve.
        var playerSessionId: String? = nil

        public init() {}

        public init(playerId: String? = nil, playerSessionStatusFilter: String? = nil, limit: Int32? = nil, gameSessionId: String? = nil, nextToken: String? = nil, playerSessionId: String? = nil) {
            self.playerId = playerId
            self.playerSessionStatusFilter = playerSessionStatusFilter
            self.limit = limit
            self.gameSessionId = gameSessionId
            self.nextToken = nextToken
            self.playerSessionId = playerSessionId
        }

    }

    public struct SearchGameSessionsInput: Serializable, Initializable {
        /// Instructions on how to sort the search results. If no sort expression is included, the request returns results in random order. A sort expression consists of the following elements:    Operand -- Name of a game session attribute. Valid values are gameSessionName, gameSessionId, creationTimeMillis, playerSessionCount, maximumSessions, hasAvailablePlayerSessions.    Order -- Valid sort orders are ASC (ascending) and DESC (descending).   For example, this sort expression returns the oldest active sessions first: "SortExpression": "creationTimeMillis ASC". Results with a null value for the sort operand are returned at the end of the list.
        var sortExpression: String? = nil
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. The maximum number of results returned is 20, even if this value is not set or is set higher than 20. 
        var limit: Int32? = nil
        /// String containing the search criteria for the session search. If no filter expression is included, the request returns results for all game sessions in the fleet that are in ACTIVE status. A filter expression can contain one or multiple conditions. Each condition consists of the following:    Operand -- Name of a game session attribute. Valid values are gameSessionName, gameSessionId, creationTimeMillis, playerSessionCount, maximumSessions, hasAvailablePlayerSessions.    Comparator -- Valid comparators are: =, &lt;&gt;, &lt;, &gt;, &lt;=, &gt;=.     Value -- Value to be searched for. Values can be numbers, boolean values (true/false) or strings. String values are case sensitive, enclosed in single quotes. Special characters must be escaped. Boolean and string values can only be used with the comparators = and &lt;&gt;. For example, the following filter expression searches on gameSessionName: "FilterExpression": "gameSessionName = 'Matt\\'s Awesome Game 1'".    To chain multiple conditions in a single expression, use the logical keywords AND, OR, and NOT and parentheses as needed. For example: x AND y AND NOT z, NOT (x OR y). Session search evaluates conditions from left to right using the following precedence rules:    =, &lt;&gt;, &lt;, &gt;, &lt;=, &gt;=    Parentheses   NOT   AND   OR   For example, this filter expression retrieves game sessions hosting at least ten players that have an open player slot: "maximumSessions&gt;=10 AND hasAvailablePlayerSessions=true". 
        var filterExpression: String? = nil
        /// Unique identifier for a fleet to search for active game sessions. Each request must reference either a fleet ID or alias ID, but not both.
        var fleetId: String? = nil
        /// Unique identifier for an alias associated with the fleet to search for active game sessions. Each request must reference either a fleet ID or alias ID, but not both.
        var aliasId: String? = nil
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        var nextToken: String? = nil

        public init() {}

        public init(sortExpression: String? = nil, limit: Int32? = nil, filterExpression: String? = nil, fleetId: String? = nil, aliasId: String? = nil, nextToken: String? = nil) {
            self.sortExpression = sortExpression
            self.limit = limit
            self.filterExpression = filterExpression
            self.fleetId = fleetId
            self.aliasId = aliasId
            self.nextToken = nextToken
        }

    }

    public struct PutScalingPolicyOutput: Serializable, Initializable {
        /// Descriptive label that is associated with a scaling policy. Policy names do not need to be unique.
        var name: String? = nil

        public init() {}

        public init(name: String? = nil) {
            self.name = name
        }

    }

    public struct ScalingPolicy: Serializable, Initializable {
        /// Metric value used to trigger a scaling event.
        var threshold: Double? = nil
        /// Current status of the scaling policy. The scaling policy is only in force when in an ACTIVE status.    ACTIVE – The scaling policy is currently in force.    UPDATE_REQUESTED – A request to update the scaling policy has been received.    UPDATING – A change is being made to the scaling policy.    DELETE_REQUESTED – A request to delete the scaling policy has been received.    DELETING – The scaling policy is being deleted.    DELETED – The scaling policy has been deleted.    ERROR – An error occurred in creating the policy. It should be removed and recreated.  
        var status: String? = nil
        /// Name of the Amazon GameLift-defined metric that is used to trigger an adjustment.    ActivatingGameSessions – number of game sessions in the process of being created (game session status = ACTIVATING).    ActiveGameSessions – number of game sessions currently running (game session status = ACTIVE).    CurrentPlayerSessions – number of active or reserved player sessions (player session status = ACTIVE or RESERVED).     AvailablePlayerSessions – number of player session slots currently available in active game sessions across the fleet, calculated by subtracting a game session's current player session count from its maximum player session count. This number does include game sessions that are not currently accepting players (game session PlayerSessionCreationPolicy = DENY_ALL).    ActiveInstances – number of instances currently running a game session.    IdleInstances – number of instances not currently running a game session.  
        var metricName: String? = nil
        /// Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
        var evaluationPeriods: Int32? = nil
        /// Descriptive label that is associated with a scaling policy. Policy names do not need to be unique.
        var name: String? = nil
        /// Amount of adjustment to make, based on the scaling adjustment type.
        var scalingAdjustment: Int32? = nil
        /// Comparison operator to use when measuring a metric against the threshold value.
        var comparisonOperator: String? = nil
        /// Type of adjustment to make to a fleet's instance count (see FleetCapacity):    ChangeInCapacity – add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.    ExactCapacity – set the instance count to the scaling adjustment value.    PercentChangeInCapacity – increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down.  
        var scalingAdjustmentType: String? = nil
        /// Unique identifier for a fleet that is associated with this scaling policy.
        var fleetId: String? = nil

        public init() {}

        public init(threshold: Double? = nil, status: String? = nil, metricName: String? = nil, evaluationPeriods: Int32? = nil, name: String? = nil, scalingAdjustment: Int32? = nil, comparisonOperator: String? = nil, scalingAdjustmentType: String? = nil, fleetId: String? = nil) {
            self.threshold = threshold
            self.status = status
            self.metricName = metricName
            self.evaluationPeriods = evaluationPeriods
            self.name = name
            self.scalingAdjustment = scalingAdjustment
            self.comparisonOperator = comparisonOperator
            self.scalingAdjustmentType = scalingAdjustmentType
            self.fleetId = fleetId
        }

    }

    public struct GetGameSessionLogUrlOutput: Serializable, Initializable {
        /// Location of the requested game session logs, available for download.
        var preSignedUrl: String? = nil

        public init() {}

        public init(preSignedUrl: String? = nil) {
            self.preSignedUrl = preSignedUrl
        }

    }

    public struct Build: Serializable, Initializable {
        /// Current status of the build. Possible build statuses include the following:    INITIALIZED – A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value.     READY – The game build has been successfully uploaded. You can now create new fleets for this build.    FAILED – The game build upload failed. You cannot create new fleets for this build.   
        var status: String? = nil
        /// Descriptive label that is associated with a build. Build names do not need to be unique. It can be set using CreateBuild or UpdateBuild.
        var name: String? = nil
        /// Version that is associated with this build. Version strings do not need to be unique. This value can be set using CreateBuild or UpdateBuild.
        var version: String? = nil
        /// Operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build.
        var operatingSystem: String? = nil
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        var creationTime: Date? = nil
        /// File size of the uploaded game build, expressed in bytes. When the build status is INITIALIZED, this value is 0.
        var sizeOnDisk: Int64? = nil
        /// Unique identifier for a build.
        var buildId: String? = nil

        public init() {}

        public init(status: String? = nil, name: String? = nil, version: String? = nil, operatingSystem: String? = nil, creationTime: Date? = nil, sizeOnDisk: Int64? = nil, buildId: String? = nil) {
            self.status = status
            self.name = name
            self.version = version
            self.operatingSystem = operatingSystem
            self.creationTime = creationTime
            self.sizeOnDisk = sizeOnDisk
            self.buildId = buildId
        }

    }

    public struct DescribeBuildInput: Serializable, Initializable {
        /// Unique identifier for a build to retrieve properties for.
        var buildId: String = ""

        public init() {}

        public init(buildId: String) {
            self.buildId = buildId
        }

    }

    public struct DescribeFleetPortSettingsInput: Serializable, Initializable {
        /// Unique identifier for a fleet to retrieve port settings for.
        var fleetId: String = ""

        public init() {}

        public init(fleetId: String) {
            self.fleetId = fleetId
        }

    }

    public struct DescribeFleetUtilizationOutput: Serializable, Initializable {
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        var nextToken: String? = nil
        /// Collection of objects containing utilization information for each requested fleet ID.
        var fleetUtilization: [FleetUtilization]? = nil

        public init() {}

        public init(nextToken: String? = nil, fleetUtilization: [FleetUtilization]? = nil) {
            self.nextToken = nextToken
            self.fleetUtilization = fleetUtilization
        }

    }

    public struct UpdateGameSessionOutput: Serializable, Initializable {
        /// Object that contains the updated game session metadata.
        var gameSession: GameSession? = nil

        public init() {}

        public init(gameSession: GameSession? = nil) {
            self.gameSession = gameSession
        }

    }

    public struct ResolveAliasOutput: Serializable, Initializable {
        /// Fleet identifier that is associated with the requested alias.
        var fleetId: String? = nil

        public init() {}

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

    }

    public struct DescribeAliasInput: Serializable, Initializable {
        /// Unique identifier for a fleet alias. Specify the alias you want to retrieve.
        var aliasId: String = ""

        public init() {}

        public init(aliasId: String) {
            self.aliasId = aliasId
        }

    }

    public struct UpdateGameSessionQueueInput: Serializable, Initializable {
        /// List of fleets that can be used to fulfill game session placement requests in the queue. Fleets are identified by either a fleet ARN or a fleet alias ARN. Destinations are listed in default preference order.
        var destinations: [GameSessionQueueDestination]? = nil
        /// Descriptive label that is associated with queue. Queue names must be unique within each region.
        var name: String = ""
        /// Maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
        var timeoutInSeconds: Int32? = nil

        public init() {}

        public init(destinations: [GameSessionQueueDestination]? = nil, name: String, timeoutInSeconds: Int32? = nil) {
            self.destinations = destinations
            self.name = name
            self.timeoutInSeconds = timeoutInSeconds
        }

    }

    public struct DescribeGameSessionPlacementOutput: Serializable, Initializable {
        /// Object that describes the requested game session placement.
        var gameSessionPlacement: GameSessionPlacement? = nil

        public init() {}

        public init(gameSessionPlacement: GameSessionPlacement? = nil) {
            self.gameSessionPlacement = gameSessionPlacement
        }

    }

    public struct GameSession: Serializable, Initializable {
        /// Time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        var terminationTime: Date? = nil
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        var creationTime: Date? = nil
        /// Unique identifier for the game session. A game session ID has the following format: "arn:aws:gamelift:&lt;region&gt;::gamesession/&lt;fleet ID&gt;/&lt;game session ID&gt;".
        var gameSessionId: String? = nil
        /// Maximum number of players that can be connected simultaneously to the game session.
        var maximumPlayerSessionCount: Int32? = nil
        /// Current status of the game session. A game session must have an ACTIVE status to have player sessions.
        var status: String? = nil
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        var name: String? = nil
        /// IP address of the game session. To connect to a Amazon GameLift server process, an app needs both the IP address and port number.
        var ipAddress: String? = nil
        /// Unique identifier for a player. This ID is used to enforce a resource protection policy (if one exists), that limits the number of game sessions a player can create.
        var creatorId: String? = nil
        /// Indicates whether or not the game session is accepting new players.
        var playerSessionCreationPolicy: String? = nil
        /// Set of developer-defined properties for a game session. These properties are passed to the server process hosting the game session.
        var gameProperties: [GameProperty]? = nil
        /// Unique identifier for a fleet the game session is running on.
        var fleetId: String? = nil
        /// Number of players currently in the game session.
        var currentPlayerSessionCount: Int32? = nil
        /// Port number for the game session. To connect to a Amazon GameLift server process, an app needs both the IP address and port number.
        var port: Int32? = nil

        public init() {}

        public init(terminationTime: Date? = nil, creationTime: Date? = nil, gameSessionId: String? = nil, maximumPlayerSessionCount: Int32? = nil, status: String? = nil, name: String? = nil, ipAddress: String? = nil, creatorId: String? = nil, playerSessionCreationPolicy: String? = nil, gameProperties: [GameProperty]? = nil, fleetId: String? = nil, currentPlayerSessionCount: Int32? = nil, port: Int32? = nil) {
            self.terminationTime = terminationTime
            self.creationTime = creationTime
            self.gameSessionId = gameSessionId
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.status = status
            self.name = name
            self.ipAddress = ipAddress
            self.creatorId = creatorId
            self.playerSessionCreationPolicy = playerSessionCreationPolicy
            self.gameProperties = gameProperties
            self.fleetId = fleetId
            self.currentPlayerSessionCount = currentPlayerSessionCount
            self.port = port
        }

    }

    public struct ListBuildsOutput: Serializable, Initializable {
        /// Collection of build records that match the request.
        var builds: [Build]? = nil
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        var nextToken: String? = nil

        public init() {}

        public init(builds: [Build]? = nil, nextToken: String? = nil) {
            self.builds = builds
            self.nextToken = nextToken
        }

    }

    public struct DescribeScalingPoliciesOutput: Serializable, Initializable {
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        var nextToken: String? = nil
        /// Collection of objects containing the scaling policies matching the request.
        var scalingPolicies: [ScalingPolicy]? = nil

        public init() {}

        public init(nextToken: String? = nil, scalingPolicies: [ScalingPolicy]? = nil) {
            self.nextToken = nextToken
            self.scalingPolicies = scalingPolicies
        }

    }

    public struct GameSessionPlacement: Serializable, Initializable {
        /// Time stamp indicating when this request was placed in the queue. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        var startTime: Date? = nil
        /// Current status of the game session placement request.    PENDING – The placement request is currently in the queue waiting to be processed.    FULFILLED – A new game session and player sessions (if requested) have been successfully created. Values for GameSessionArn and GameSessionRegion are available.     CANCELLED – The placement request was cancelled with a call to StopGameSessionPlacement.    TIMED_OUT – A new game session was not successfully created before the time limit expired. You can resubmit the placement request as needed.  
        var status: String? = nil
        /// Name of the region where the game session created by this placement request is running. This value exists only if the game session placement status is Completed.
        var gameSessionRegion: String? = nil
        /// Identifier for the game session created by this placement request. This value exists only if the game session placement status is Completed. This identifier is unique across all regions.
        var gameSessionArn: String? = nil
        /// Unique identifier for a game session placement.
        var placementId: String? = nil
        /// Set of values, expressed in milliseconds, indicating the amount of latency that players experience when connected to AWS regions.
        var playerLatencies: [PlayerLatency]? = nil
        /// Time stamp indicating when this request was completed, cancelled, or timed out.
        var endTime: Date? = nil
        /// Descriptive label that is associated with queue. Queue names must be unique within each region.
        var gameSessionQueueName: String? = nil
        /// Set of developer-defined properties for a game session. These properties are passed to the server process hosting the game session.
        var gameProperties: [GameProperty]? = nil
        /// Maximum number of players that can be connected simultaneously to the game session.
        var maximumPlayerSessionCount: Int32? = nil
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        var gameSessionName: String? = nil

        public init() {}

        public init(startTime: Date? = nil, status: String? = nil, gameSessionRegion: String? = nil, gameSessionArn: String? = nil, placementId: String? = nil, playerLatencies: [PlayerLatency]? = nil, endTime: Date? = nil, gameSessionQueueName: String? = nil, gameProperties: [GameProperty]? = nil, maximumPlayerSessionCount: Int32? = nil, gameSessionName: String? = nil) {
            self.startTime = startTime
            self.status = status
            self.gameSessionRegion = gameSessionRegion
            self.gameSessionArn = gameSessionArn
            self.placementId = placementId
            self.playerLatencies = playerLatencies
            self.endTime = endTime
            self.gameSessionQueueName = gameSessionQueueName
            self.gameProperties = gameProperties
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.gameSessionName = gameSessionName
        }

    }

    public struct ListBuildsInput: Serializable, Initializable {
        /// Build status to filter results by. To retrieve all builds, leave this parameter empty. Possible build statuses include the following:    INITIALIZED – A new build has been defined, but no files have been uploaded. You cannot create fleets for builds that are in this status. When a build is successfully created, the build status is set to this value.     READY – The game build has been successfully uploaded. You can now create new fleets for this build.    FAILED – The game build upload failed. You cannot create new fleets for this build.   
        var status: String? = nil
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        var nextToken: String? = nil
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        var limit: Int32? = nil

        public init() {}

        public init(status: String? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.status = status
            self.nextToken = nextToken
            self.limit = limit
        }

    }

    public struct RuntimeConfiguration: Serializable, Initializable {
        /// Collection of server process configurations describing what server processes to run on each instance in a fleet
        var serverProcesses: [ServerProcess]? = nil

        public init() {}

        public init(serverProcesses: [ServerProcess]? = nil) {
            self.serverProcesses = serverProcesses
        }

    }

    public struct Instance: Serializable, Initializable {
        /// Current status of the instance. Possible statuses include the following:    PENDING – The instance is in the process of being created and launching server processes as defined in the fleet's runtime configuration.     ACTIVE – The instance has been successfully created and at least one server process has successfully launched and reported back to Amazon GameLift that it is ready to host a game session. The instance is now considered ready to host game sessions.     TERMINATING – The instance is in the process of shutting down. This may happen to reduce capacity during a scaling down event or to recycle resources in the event of a problem.  
        var status: String? = nil
        /// Unique identifier for an instance.
        var instanceId: String? = nil
        /// IP address assigned to the instance.
        var ipAddress: String? = nil
        /// Operating system that is running on this instance. 
        var operatingSystem: String? = nil
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        var creationTime: Date? = nil
        /// EC2 instance type that defines the computing resources of this instance. 
        var type: String? = nil
        /// Unique identifier for a fleet that the instance is in.
        var fleetId: String? = nil

        public init() {}

        public init(status: String? = nil, instanceId: String? = nil, ipAddress: String? = nil, operatingSystem: String? = nil, creationTime: Date? = nil, type: String? = nil, fleetId: String? = nil) {
            self.status = status
            self.instanceId = instanceId
            self.ipAddress = ipAddress
            self.operatingSystem = operatingSystem
            self.creationTime = creationTime
            self.type = type
            self.fleetId = fleetId
        }

    }

    public struct EC2InstanceLimit: Serializable, Initializable {
        /// Number of instances of the specified type that are currently in use by this AWS account.
        var currentInstances: Int32? = nil
        /// Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions.
        var eC2InstanceType: String? = nil
        /// Number of instances allowed.
        var instanceLimit: Int32? = nil

        public init() {}

        public init(currentInstances: Int32? = nil, eC2InstanceType: String? = nil, instanceLimit: Int32? = nil) {
            self.currentInstances = currentInstances
            self.eC2InstanceType = eC2InstanceType
            self.instanceLimit = instanceLimit
        }

    }

    public struct DeleteGameSessionQueueOutput: Serializable, Initializable {

        public init() {}

    }

    public struct DescribeFleetAttributesOutput: Serializable, Initializable {
        /// Collection of objects containing attribute metadata for each requested fleet ID.
        var fleetAttributes: [FleetAttributes]? = nil
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        var nextToken: String? = nil

        public init() {}

        public init(fleetAttributes: [FleetAttributes]? = nil, nextToken: String? = nil) {
            self.fleetAttributes = fleetAttributes
            self.nextToken = nextToken
        }

    }

    public struct GetInstanceAccessOutput: Serializable, Initializable {
        /// Object that contains connection information for a fleet instance, including IP address and access credentials.
        var instanceAccess: InstanceAccess? = nil

        public init() {}

        public init(instanceAccess: InstanceAccess? = nil) {
            self.instanceAccess = instanceAccess
        }

    }

    public struct StartGameSessionPlacementOutput: Serializable, Initializable {
        /// Object that describes the newly created game session placement. This object includes all the information provided in the request, as well as start/end time stamps and placement status. 
        var gameSessionPlacement: GameSessionPlacement? = nil

        public init() {}

        public init(gameSessionPlacement: GameSessionPlacement? = nil) {
            self.gameSessionPlacement = gameSessionPlacement
        }

    }

    public struct CreateGameSessionOutput: Serializable, Initializable {
        /// Object that describes the newly created game session record.
        var gameSession: GameSession? = nil

        public init() {}

        public init(gameSession: GameSession? = nil) {
            self.gameSession = gameSession
        }

    }

    public struct ListAliasesInput: Serializable, Initializable {
        /// Type of routing to filter results on. Use this parameter to retrieve only aliases of a certain type. To retrieve all aliases, leave this parameter empty. Possible routing types include the following:    SIMPLE – The alias resolves to one specific fleet. Use this type when routing to active fleets.    TERMINAL – The alias does not resolve to a fleet but instead can be used to display a message to the user. A terminal alias throws a TerminalRoutingStrategyException with the RoutingStrategy message embedded.  
        var routingStrategyType: String? = nil
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        var limit: Int32? = nil
        /// Descriptive label that is associated with an alias. Alias names do not need to be unique.
        var name: String? = nil
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        var nextToken: String? = nil

        public init() {}

        public init(routingStrategyType: String? = nil, limit: Int32? = nil, name: String? = nil, nextToken: String? = nil) {
            self.routingStrategyType = routingStrategyType
            self.limit = limit
            self.name = name
            self.nextToken = nextToken
        }

    }

    public struct UpdateRuntimeConfigurationOutput: Serializable, Initializable {
        /// The runtime configuration currently in force. If the update was successful, this object matches the one in the request.
        var runtimeConfiguration: RuntimeConfiguration? = nil

        public init() {}

        public init(runtimeConfiguration: RuntimeConfiguration? = nil) {
            self.runtimeConfiguration = runtimeConfiguration
        }

    }

    public struct RequestUploadCredentialsInput: Serializable, Initializable {
        /// Unique identifier for a build to get credentials for.
        var buildId: String = ""

        public init() {}

        public init(buildId: String) {
            self.buildId = buildId
        }

    }

    public struct StopGameSessionPlacementInput: Serializable, Initializable {
        /// Unique identifier for a game session placement to cancel.
        var placementId: String = ""

        public init() {}

        public init(placementId: String) {
            self.placementId = placementId
        }

    }

    public struct CreateFleetInput: Serializable, Initializable {
        /// Policy that limits the number of game sessions an individual player can create over a span of time for this fleet.
        var resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil
        /// Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions.
        var eC2InstanceType: String = ""
        /// Unique identifier for a build to be deployed on the new fleet. The build must have been successfully uploaded to Amazon GameLift and be in a READY status. This fleet setting cannot be changed once the fleet is created.
        var buildId: String = ""
        /// This parameter is no longer used. Instead, specify server launch parameters in the RuntimeConfiguration parameter. (Requests that specify a server launch path and launch parameters instead of a runtime configuration will continue to work.)
        var serverLaunchParameters: String? = nil
        /// Descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        var name: String = ""
        /// Game session protection policy to apply to all instances in this fleet. If this parameter is not set, instances in this fleet default to no protection. You can change a fleet's protection policy using UpdateFleetAttributes, but this change will only affect sessions created after the policy change. You can also set protection for individual instances using UpdateGameSession.    NoProtection – The game session can be terminated during a scale-down event.    FullProtection – If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        var newGameSessionProtectionPolicy: String? = nil
        /// Range of IP addresses and port settings that permit inbound traffic to access server processes running on the fleet. If no inbound permissions are set, including both IP address range and port range, the server processes in the fleet cannot accept connections. You can specify one or more sets of permissions for a fleet.
        var eC2InboundPermissions: [IpPermission]? = nil
        /// Instructions for launching server processes on each instance in the fleet. The runtime configuration for a fleet has a collection of server process configurations, one for each type of server process to run on an instance. A server process configuration specifies the location of the server executable, launch parameters, and the number of concurrent processes with that configuration to maintain on each instance. A CreateFleet request must include a runtime configuration with at least one server process configuration; otherwise the request will fail with an invalid request exception. (This parameter replaces the parameters ServerLaunchPath and ServerLaunchParameters; requests that contain values for these parameters instead of a runtime configuration will continue to work.) 
        var runtimeConfiguration: RuntimeConfiguration? = nil
        /// This parameter is no longer used. Instead, to specify where Amazon GameLift should store log files once a server process shuts down, use the Amazon GameLift server API ProcessReady() and specify one or more directory paths in logParameters. See more information in the Server API Reference. 
        var logPaths: [String]? = nil
        /// This parameter is no longer used. Instead, specify a server launch path using the RuntimeConfiguration parameter. (Requests that specify a server launch path and launch parameters instead of a runtime configuration will continue to work.)
        var serverLaunchPath: String? = nil
        /// Human-readable description of a fleet.
        var description: String? = nil

        public init() {}

        public init(resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil, eC2InstanceType: String, buildId: String, serverLaunchParameters: String? = nil, name: String, newGameSessionProtectionPolicy: String? = nil, eC2InboundPermissions: [IpPermission]? = nil, runtimeConfiguration: RuntimeConfiguration? = nil, logPaths: [String]? = nil, serverLaunchPath: String? = nil, description: String? = nil) {
            self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
            self.eC2InstanceType = eC2InstanceType
            self.buildId = buildId
            self.serverLaunchParameters = serverLaunchParameters
            self.name = name
            self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
            self.eC2InboundPermissions = eC2InboundPermissions
            self.runtimeConfiguration = runtimeConfiguration
            self.logPaths = logPaths
            self.serverLaunchPath = serverLaunchPath
            self.description = description
        }

    }

    public struct UpdateBuildInput: Serializable, Initializable {
        /// Unique identifier for a build to update.
        var buildId: String = ""
        /// Descriptive label that is associated with a build. Build names do not need to be unique. 
        var name: String? = nil
        /// Version that is associated with this build. Version strings do not need to be unique.
        var version: String? = nil

        public init() {}

        public init(buildId: String, name: String? = nil, version: String? = nil) {
            self.buildId = buildId
            self.name = name
            self.version = version
        }

    }

    public struct ResolveAliasInput: Serializable, Initializable {
        /// Unique identifier for the alias you want to resolve.
        var aliasId: String = ""

        public init() {}

        public init(aliasId: String) {
            self.aliasId = aliasId
        }

    }

    public struct PlayerLatency: Serializable, Initializable {
        /// Unique identifier for a player associated with the latency data.
        var playerId: String? = nil
        /// Name of the region that is associated with the latency value.
        var regionIdentifier: String? = nil
        /// Amount of time that represents the time lag experienced by the player when connected to the specified region.
        var latencyInMilliseconds: Float? = nil

        public init() {}

        public init(playerId: String? = nil, regionIdentifier: String? = nil, latencyInMilliseconds: Float? = nil) {
            self.playerId = playerId
            self.regionIdentifier = regionIdentifier
            self.latencyInMilliseconds = latencyInMilliseconds
        }

    }

    public struct CreatePlayerSessionsInput: Serializable, Initializable {
        /// Unique identifier for the game session to add players to.
        var gameSessionId: String = ""
        /// List of unique identifiers for the players to be added.
        var playerIds: [String] = []
        /// Map of string pairs, each specifying a player ID and a set of developer-defined information related to the player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game. Player data strings for player IDs not included in the PlayerIds parameter are ignored. 
        var playerDataMap: [String: String]? = nil

        public init() {}

        public init(gameSessionId: String, playerIds: [String], playerDataMap: [String: String]? = nil) {
            self.gameSessionId = gameSessionId
            self.playerIds = playerIds
            self.playerDataMap = playerDataMap
        }

    }

    public struct DescribeFleetPortSettingsOutput: Serializable, Initializable {
        /// Object that contains port settings for the requested fleet ID.
        var inboundPermissions: [IpPermission]? = nil

        public init() {}

        public init(inboundPermissions: [IpPermission]? = nil) {
            self.inboundPermissions = inboundPermissions
        }

    }

    public struct DeleteAliasInput: Serializable, Initializable {
        /// Unique identifier for a fleet alias. Specify the alias you want to delete.
        var aliasId: String = ""

        public init() {}

        public init(aliasId: String) {
            self.aliasId = aliasId
        }

    }

    public struct DescribeGameSessionQueuesInput: Serializable, Initializable {
        /// List of queue names to retrieve information for. To request settings for all queues, leave this parameter empty.
        var names: [String]? = nil
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        var nextToken: String? = nil
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        var limit: Int32? = nil

        public init() {}

        public init(names: [String]? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.names = names
            self.nextToken = nextToken
            self.limit = limit
        }

    }

    public struct Alias: Serializable, Initializable {
        /// Time stamp indicating when this data object was last modified. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        var lastUpdatedTime: Date? = nil
        /// Alias configuration for the alias, including routing type and settings.
        var routingStrategy: RoutingStrategy? = nil
        /// Descriptive label that is associated with an alias. Alias names do not need to be unique.
        var name: String? = nil
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        var creationTime: Date? = nil
        /// Unique identifier for an alias; alias ARNs are unique across all regions.
        var aliasArn: String? = nil
        /// Unique identifier for an alias; alias IDs are unique within a region.
        var aliasId: String? = nil
        /// Human-readable description of an alias.
        var description: String? = nil

        public init() {}

        public init(lastUpdatedTime: Date? = nil, routingStrategy: RoutingStrategy? = nil, name: String? = nil, creationTime: Date? = nil, aliasArn: String? = nil, aliasId: String? = nil, description: String? = nil) {
            self.lastUpdatedTime = lastUpdatedTime
            self.routingStrategy = routingStrategy
            self.name = name
            self.creationTime = creationTime
            self.aliasArn = aliasArn
            self.aliasId = aliasId
            self.description = description
        }

    }

    public struct CreatePlayerSessionInput: Serializable, Initializable {
        /// Unique identifier for the game session to add a player to.
        var gameSessionId: String = ""
        /// Developer-defined information related to a player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game.
        var playerData: String? = nil
        /// Unique identifier for a player. Player IDs are developer-defined.
        var playerId: String = ""

        public init() {}

        public init(gameSessionId: String, playerData: String? = nil, playerId: String) {
            self.gameSessionId = gameSessionId
            self.playerData = playerData
            self.playerId = playerId
        }

    }

    public struct Event: Serializable, Initializable {
        /// Additional information related to the event.
        var message: String? = nil
        /// Unique identifier for an event resource, such as a fleet ID.
        var resourceId: String? = nil
        /// Type of event being logged. 
        var eventCode: String? = nil
        /// Time stamp indicating when this event occurred. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        var eventTime: Date? = nil
        /// Unique identifier for a fleet event.
        var eventId: String? = nil

        public init() {}

        public init(message: String? = nil, resourceId: String? = nil, eventCode: String? = nil, eventTime: Date? = nil, eventId: String? = nil) {
            self.message = message
            self.resourceId = resourceId
            self.eventCode = eventCode
            self.eventTime = eventTime
            self.eventId = eventId
        }

    }

    public struct UpdateGameSessionQueueOutput: Serializable, Initializable {
        /// Object that describes the newly updated game session queue.
        var gameSessionQueue: GameSessionQueue? = nil

        public init() {}

        public init(gameSessionQueue: GameSessionQueue? = nil) {
            self.gameSessionQueue = gameSessionQueue
        }

    }

    public struct GameSessionQueueDestination: Serializable, Initializable {
        /// Amazon Resource Name (ARN) assigned to fleet or fleet alias. ARNs, which include a fleet ID or alias ID and a region name, provide a unique identifier across all regions. 
        var destinationArn: String? = nil

        public init() {}

        public init(destinationArn: String? = nil) {
            self.destinationArn = destinationArn
        }

    }

    public struct DesiredPlayerSession: Serializable, Initializable {
        /// Developer-defined information related to a player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game.
        var playerData: String? = nil
        /// Unique identifier for a player to associate with the player session.
        var playerId: String? = nil

        public init() {}

        public init(playerData: String? = nil, playerId: String? = nil) {
            self.playerData = playerData
            self.playerId = playerId
        }

    }

    public struct DescribeFleetUtilizationInput: Serializable, Initializable {
        /// Unique identifier for a fleet(s) to retrieve utilization data for. To request utilization data for all fleets, leave this parameter empty.
        var fleetIds: [String]? = nil
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
        var nextToken: String? = nil
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
        var limit: Int32? = nil

        public init() {}

        public init(fleetIds: [String]? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.fleetIds = fleetIds
            self.nextToken = nextToken
            self.limit = limit
        }

    }

    public struct CreateAliasInput: Serializable, Initializable {
        /// Object that specifies the fleet and routing type to use for the alias.
        var routingStrategy: RoutingStrategy = RoutingStrategy()
        /// Descriptive label that is associated with an alias. Alias names do not need to be unique.
        var name: String = ""
        /// Human-readable description of an alias.
        var description: String? = nil

        public init() {}

        public init(routingStrategy: RoutingStrategy, name: String, description: String? = nil) {
            self.routingStrategy = routingStrategy
            self.name = name
            self.description = description
        }

    }

    public struct ResourceCreationLimitPolicy: Serializable, Initializable {
        /// Maximum number of game sessions that an individual can create during the policy period. 
        var newGameSessionsPerCreator: Int32? = nil
        /// Time span used in evaluating the resource creation limit policy. 
        var policyPeriodInMinutes: Int32? = nil

        public init() {}

        public init(newGameSessionsPerCreator: Int32? = nil, policyPeriodInMinutes: Int32? = nil) {
            self.newGameSessionsPerCreator = newGameSessionsPerCreator
            self.policyPeriodInMinutes = policyPeriodInMinutes
        }

    }

    public struct PutScalingPolicyInput: Serializable, Initializable {
        /// Metric value used to trigger a scaling event.
        var threshold: Double = 0
        /// Name of the Amazon GameLift-defined metric that is used to trigger an adjustment.    ActivatingGameSessions – number of game sessions in the process of being created (game session status = ACTIVATING).    ActiveGameSessions – number of game sessions currently running (game session status = ACTIVE).    CurrentPlayerSessions – number of active or reserved player sessions (player session status = ACTIVE or RESERVED).     AvailablePlayerSessions – number of player session slots currently available in active game sessions across the fleet, calculated by subtracting a game session's current player session count from its maximum player session count. This number includes game sessions that are not currently accepting players (game session PlayerSessionCreationPolicy = DENY_ALL).    ActiveInstances – number of instances currently running a game session.    IdleInstances – number of instances not currently running a game session.  
        var metricName: String = ""
        /// Length of time (in minutes) the metric must be at or beyond the threshold before a scaling event is triggered.
        var evaluationPeriods: Int32 = 0
        /// Descriptive label that is associated with a scaling policy. Policy names do not need to be unique. A fleet can have only one scaling policy with the same name.
        var name: String = ""
        /// Amount of adjustment to make, based on the scaling adjustment type.
        var scalingAdjustment: Int32 = 0
        /// Comparison operator to use when measuring the metric against the threshold value.
        var comparisonOperator: String = ""
        /// Type of adjustment to make to a fleet's instance count (see FleetCapacity):    ChangeInCapacity – add (or subtract) the scaling adjustment value from the current instance count. Positive values scale up while negative values scale down.    ExactCapacity – set the instance count to the scaling adjustment value.    PercentChangeInCapacity – increase or reduce the current instance count by the scaling adjustment, read as a percentage. Positive values scale up while negative values scale down; for example, a value of "-10" scales the fleet down by 10%.  
        var scalingAdjustmentType: String = ""
        /// Unique identifier for a fleet to apply this policy to.
        var fleetId: String = ""

        public init() {}

        public init(threshold: Double, metricName: String, evaluationPeriods: Int32, name: String, scalingAdjustment: Int32, comparisonOperator: String, scalingAdjustmentType: String, fleetId: String) {
            self.threshold = threshold
            self.metricName = metricName
            self.evaluationPeriods = evaluationPeriods
            self.name = name
            self.scalingAdjustment = scalingAdjustment
            self.comparisonOperator = comparisonOperator
            self.scalingAdjustmentType = scalingAdjustmentType
            self.fleetId = fleetId
        }

    }

    public struct DeleteBuildInput: Serializable, Initializable {
        /// Unique identifier for a build to delete.
        var buildId: String = ""

        public init() {}

        public init(buildId: String) {
            self.buildId = buildId
        }

    }

    public struct UpdateFleetAttributesOutput: Serializable, Initializable {
        /// Unique identifier for a fleet that was updated.
        var fleetId: String? = nil

        public init() {}

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

    }

    public struct DescribeGameSessionsInput: Serializable, Initializable {
        /// Game session status to filter results on. Possible game session statuses include ACTIVE, TERMINATED, ACTIVATING, and TERMINATING (the last two are transitory). 
        var statusFilter: String? = nil
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        var limit: Int32? = nil
        /// Unique identifier for the game session to retrieve.
        var gameSessionId: String? = nil
        /// Unique identifier for a fleet to retrieve all game sessions for.
        var fleetId: String? = nil
        /// Unique identifier for an alias associated with the fleet to retrieve all game sessions for. 
        var aliasId: String? = nil
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        var nextToken: String? = nil

        public init() {}

        public init(statusFilter: String? = nil, limit: Int32? = nil, gameSessionId: String? = nil, fleetId: String? = nil, aliasId: String? = nil, nextToken: String? = nil) {
            self.statusFilter = statusFilter
            self.limit = limit
            self.gameSessionId = gameSessionId
            self.fleetId = fleetId
            self.aliasId = aliasId
            self.nextToken = nextToken
        }

    }

    public struct CreateFleetOutput: Serializable, Initializable {
        /// Properties for the newly created fleet.
        var fleetAttributes: FleetAttributes? = nil

        public init() {}

        public init(fleetAttributes: FleetAttributes? = nil) {
            self.fleetAttributes = fleetAttributes
        }

    }

    public struct GameSessionQueue: Serializable, Initializable {
        /// List of fleets that can be used to fulfill game session placement requests in the queue. Fleets are identified by either a fleet ARN or a fleet alias ARN. Destinations are listed in default preference order.
        var destinations: [GameSessionQueueDestination]? = nil
        /// Descriptive label that is associated with queue. Queue names must be unique within each region.
        var name: String? = nil
        /// Maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
        var timeoutInSeconds: Int32? = nil

        public init() {}

        public init(destinations: [GameSessionQueueDestination]? = nil, name: String? = nil, timeoutInSeconds: Int32? = nil) {
            self.destinations = destinations
            self.name = name
            self.timeoutInSeconds = timeoutInSeconds
        }

    }

    public struct DescribeFleetCapacityOutput: Serializable, Initializable {
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        var nextToken: String? = nil
        /// Collection of objects containing capacity information for each requested fleet ID. Leave this parameter empty to retrieve capacity information for all fleets.
        var fleetCapacity: [FleetCapacity]? = nil

        public init() {}

        public init(nextToken: String? = nil, fleetCapacity: [FleetCapacity]? = nil) {
            self.nextToken = nextToken
            self.fleetCapacity = fleetCapacity
        }

    }

    public struct DescribeGameSessionDetailsInput: Serializable, Initializable {
        /// Game session status to filter results on. Possible game session statuses include ACTIVE, TERMINATED, ACTIVATING and TERMINATING (the last two are transitory). 
        var statusFilter: String? = nil
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        var limit: Int32? = nil
        /// Unique identifier for the game session to retrieve.
        var gameSessionId: String? = nil
        /// Unique identifier for a fleet to retrieve all game sessions active on the fleet.
        var fleetId: String? = nil
        /// Unique identifier for an alias associated with the fleet to retrieve all game sessions for.
        var aliasId: String? = nil
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        var nextToken: String? = nil

        public init() {}

        public init(statusFilter: String? = nil, limit: Int32? = nil, gameSessionId: String? = nil, fleetId: String? = nil, aliasId: String? = nil, nextToken: String? = nil) {
            self.statusFilter = statusFilter
            self.limit = limit
            self.gameSessionId = gameSessionId
            self.fleetId = fleetId
            self.aliasId = aliasId
            self.nextToken = nextToken
        }

    }

    public struct UpdateFleetPortSettingsInput: Serializable, Initializable {
        /// Collection of port settings to be added to the fleet record.
        var inboundPermissionAuthorizations: [IpPermission]? = nil
        /// Unique identifier for a fleet to update port settings for.
        var fleetId: String = ""
        /// Collection of port settings to be removed from the fleet record.
        var inboundPermissionRevocations: [IpPermission]? = nil

        public init() {}

        public init(inboundPermissionAuthorizations: [IpPermission]? = nil, fleetId: String, inboundPermissionRevocations: [IpPermission]? = nil) {
            self.inboundPermissionAuthorizations = inboundPermissionAuthorizations
            self.fleetId = fleetId
            self.inboundPermissionRevocations = inboundPermissionRevocations
        }

    }

    public struct DescribeFleetCapacityInput: Serializable, Initializable {
        /// Unique identifier for a fleet(s) to retrieve capacity information for. To request capacity information for all fleets, leave this parameter empty.
        var fleetIds: [String]? = nil
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
        var nextToken: String? = nil
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
        var limit: Int32? = nil

        public init() {}

        public init(fleetIds: [String]? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.fleetIds = fleetIds
            self.nextToken = nextToken
            self.limit = limit
        }

    }

    public struct InstanceCredentials: Serializable, Initializable {
        /// User login string.
        var userName: String? = nil
        /// Secret string. For Windows instances, the secret is a password for use with Windows Remote Desktop. For Linux instances, it is a private key (which must be saved as a .pem file) for use with SSH.
        var secret: String? = nil

        public init() {}

        public init(userName: String? = nil, secret: String? = nil) {
            self.userName = userName
            self.secret = secret
        }

    }

    public struct ServerProcess: Serializable, Initializable {
        /// Optional list of parameters to pass to the server executable on launch.
        var parameters: String? = nil
        /// Location of the server executable in a game build. All game builds are installed on instances at the root : for Windows instances C:\game, and for Linux instances /local/game. A Windows game build with an executable file located at MyGame\latest\server.exe must have a launch path of "C:\game\MyGame\latest\server.exe". A Linux game build with an executable file located at MyGame/latest/server.exe must have a launch path of "/local/game/MyGame/latest/server.exe". 
        var launchPath: String = ""
        /// Number of server processes using this configuration to run concurrently on an instance.
        var concurrentExecutions: Int32 = 0

        public init() {}

        public init(parameters: String? = nil, launchPath: String, concurrentExecutions: Int32) {
            self.parameters = parameters
            self.launchPath = launchPath
            self.concurrentExecutions = concurrentExecutions
        }

    }

    public struct RequestUploadCredentialsOutput: Serializable, Initializable {
        /// Amazon S3 path and key, identifying where the game build files are stored.
        var storageLocation: S3Location? = nil
        /// AWS credentials required when uploading a game build to the storage location. These credentials have a limited lifespan and are valid only for the build they were issued for.
        var uploadCredentials: AwsCredentials? = nil

        public init() {}

        public init(storageLocation: S3Location? = nil, uploadCredentials: AwsCredentials? = nil) {
            self.storageLocation = storageLocation
            self.uploadCredentials = uploadCredentials
        }

    }

    public struct GameProperty: Serializable, Initializable {
        /// TBD
        var value: String = ""
        /// TBD
        var key: String = ""

        public init() {}

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

    }

    public struct UpdateBuildOutput: Serializable, Initializable {
        /// Object that contains the updated build record.
        var build: Build? = nil

        public init() {}

        public init(build: Build? = nil) {
            self.build = build
        }

    }

    public struct DescribeFleetAttributesInput: Serializable, Initializable {
        /// Unique identifier for a fleet(s) to retrieve attributes for. To request attributes for all fleets, leave this parameter empty.
        var fleetIds: [String]? = nil
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value. This parameter is ignored when the request specifies one or a list of fleet IDs.
        var nextToken: String? = nil
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages. This parameter is ignored when the request specifies one or a list of fleet IDs.
        var limit: Int32? = nil

        public init() {}

        public init(fleetIds: [String]? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.fleetIds = fleetIds
            self.nextToken = nextToken
            self.limit = limit
        }

    }

    public struct DescribeEC2InstanceLimitsInput: Serializable, Initializable {
        /// Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions. Leave this parameter blank to retrieve limits for all types.
        var eC2InstanceType: String? = nil

        public init() {}

        public init(eC2InstanceType: String? = nil) {
            self.eC2InstanceType = eC2InstanceType
        }

    }

    public struct CreatePlayerSessionsOutput: Serializable, Initializable {
        /// Collection of player session objects created for the added players.
        var playerSessions: [PlayerSession]? = nil

        public init() {}

        public init(playerSessions: [PlayerSession]? = nil) {
            self.playerSessions = playerSessions
        }

    }

    public struct GetGameSessionLogUrlInput: Serializable, Initializable {
        /// Unique identifier for the game session to get logs for.
        var gameSessionId: String = ""

        public init() {}

        public init(gameSessionId: String) {
            self.gameSessionId = gameSessionId
        }

    }

    public struct DescribeEC2InstanceLimitsOutput: Serializable, Initializable {
        /// Object that contains the maximum number of instances for the specified instance type.
        var eC2InstanceLimits: [EC2InstanceLimit]? = nil

        public init() {}

        public init(eC2InstanceLimits: [EC2InstanceLimit]? = nil) {
            self.eC2InstanceLimits = eC2InstanceLimits
        }

    }

    public struct EC2InstanceCounts: Serializable, Initializable {
        /// Number of instances in the fleet that are no longer active but haven't yet been terminated.
        var tERMINATING: Int32? = nil
        /// Minimum value allowed for the fleet's instance count.
        var mINIMUM: Int32? = nil
        /// Number of instances in the fleet that are starting but not yet active.
        var pENDING: Int32? = nil
        /// Maximum value allowed for the fleet's instance count.
        var mAXIMUM: Int32? = nil
        /// Number of active instances in the fleet that are not currently hosting a game session.
        var iDLE: Int32? = nil
        /// Ideal number of active instances in the fleet.
        var dESIRED: Int32? = nil
        /// Actual number of active instances in the fleet.
        var aCTIVE: Int32? = nil

        public init() {}

        public init(tERMINATING: Int32? = nil, mINIMUM: Int32? = nil, pENDING: Int32? = nil, mAXIMUM: Int32? = nil, iDLE: Int32? = nil, dESIRED: Int32? = nil, aCTIVE: Int32? = nil) {
            self.tERMINATING = tERMINATING
            self.mINIMUM = mINIMUM
            self.pENDING = pENDING
            self.mAXIMUM = mAXIMUM
            self.iDLE = iDLE
            self.dESIRED = dESIRED
            self.aCTIVE = aCTIVE
        }

    }

    public struct DescribePlayerSessionsOutput: Serializable, Initializable {
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        var nextToken: String? = nil
        /// Collection of objects containing properties for each player session that matches the request.
        var playerSessions: [PlayerSession]? = nil

        public init() {}

        public init(nextToken: String? = nil, playerSessions: [PlayerSession]? = nil) {
            self.nextToken = nextToken
            self.playerSessions = playerSessions
        }

    }

    public struct FleetCapacity: Serializable, Initializable {
        /// Name of an EC2 instance type that is supported in Amazon GameLift. A fleet instance type determines the computing resources of each instance in the fleet, including CPU, memory, storage, and networking capacity. Amazon GameLift supports the following EC2 instance types. See Amazon EC2 Instance Types for detailed descriptions.
        var instanceType: String? = nil
        /// Unique identifier for a fleet.
        var fleetId: String? = nil
        /// Current status of fleet capacity.
        var instanceCounts: EC2InstanceCounts? = nil

        public init() {}

        public init(instanceType: String? = nil, fleetId: String? = nil, instanceCounts: EC2InstanceCounts? = nil) {
            self.instanceType = instanceType
            self.fleetId = fleetId
            self.instanceCounts = instanceCounts
        }

    }

    public struct GameSessionDetail: Serializable, Initializable {
        /// Current status of protection for the game session.    NoProtection – The game session can be terminated during a scale-down event.    FullProtection – If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        var protectionPolicy: String? = nil
        /// Object that describes a game session.
        var gameSession: GameSession? = nil

        public init() {}

        public init(protectionPolicy: String? = nil, gameSession: GameSession? = nil) {
            self.protectionPolicy = protectionPolicy
            self.gameSession = gameSession
        }

    }

    public struct CreateBuildInput: Serializable, Initializable {
        /// Operating system that the game server binaries are built to run on. This value determines the type of fleet resources that you can use for this build. If your game build contains multiple executables, they all must run on the same operating system.
        var operatingSystem: String? = nil
        /// Amazon S3 location of the game build files to be uploaded. The S3 bucket must be owned by the same AWS account that you're using to manage Amazon GameLift. It also must in the same region that you want to create a new build in. Before calling CreateBuild with this location, you must allow Amazon GameLift to access your Amazon S3 bucket (see Create a Build with Files in Amazon S3).
        var storageLocation: S3Location? = nil
        /// Descriptive label that is associated with a build. Build names do not need to be unique. You can use UpdateBuild to change this value later. 
        var name: String? = nil
        /// Version that is associated with this build. Version strings do not need to be unique. You can use UpdateBuild to change this value later. 
        var version: String? = nil

        public init() {}

        public init(operatingSystem: String? = nil, storageLocation: S3Location? = nil, name: String? = nil, version: String? = nil) {
            self.operatingSystem = operatingSystem
            self.storageLocation = storageLocation
            self.name = name
            self.version = version
        }

    }

    public struct DescribeInstancesOutput: Serializable, Initializable {
        /// Collection of objects containing properties for each instance returned.
        var instances: [Instance]? = nil
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        var nextToken: String? = nil

        public init() {}

        public init(instances: [Instance]? = nil, nextToken: String? = nil) {
            self.instances = instances
            self.nextToken = nextToken
        }

    }

    public struct DescribeInstancesInput: Serializable, Initializable {
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        var limit: Int32? = nil
        /// Unique identifier for a fleet to retrieve instance information for.
        var fleetId: String = ""
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        var nextToken: String? = nil
        /// Unique identifier for an instance to retrieve. Specify an instance ID or leave blank to retrieve all instances in the fleet.
        var instanceId: String? = nil

        public init() {}

        public init(limit: Int32? = nil, fleetId: String, nextToken: String? = nil, instanceId: String? = nil) {
            self.limit = limit
            self.fleetId = fleetId
            self.nextToken = nextToken
            self.instanceId = instanceId
        }

    }

    public struct AwsCredentials: Serializable, Initializable {
        /// Access key for an AWS account.
        var accessKeyId: String? = nil
        /// Secret key for an AWS account.
        var secretAccessKey: String? = nil
        /// Token specific to a build ID.
        var sessionToken: String? = nil

        public init() {}

        public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, sessionToken: String? = nil) {
            self.accessKeyId = accessKeyId
            self.secretAccessKey = secretAccessKey
            self.sessionToken = sessionToken
        }

    }

    public struct ListFleetsInput: Serializable, Initializable {
        /// Unique identifier for a build to return fleets for. Use this parameter to return only fleets using the specified build. To retrieve all fleets, leave this parameter empty.
        var buildId: String? = nil
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        var nextToken: String? = nil
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        var limit: Int32? = nil

        public init() {}

        public init(buildId: String? = nil, nextToken: String? = nil, limit: Int32? = nil) {
            self.buildId = buildId
            self.nextToken = nextToken
            self.limit = limit
        }

    }

    public struct DeleteScalingPolicyInput: Serializable, Initializable {
        /// Unique identifier for a fleet to be deleted.
        var fleetId: String = ""
        /// Descriptive label that is associated with a scaling policy. Policy names do not need to be unique.
        var name: String = ""

        public init() {}

        public init(fleetId: String, name: String) {
            self.fleetId = fleetId
            self.name = name
        }

    }

    public struct PlayerSession: Serializable, Initializable {
        /// Current status of the player session. Possible player session statuses include the following:    RESERVED – The player session request has been received, but the player has not yet connected to the server process and/or been validated.     ACTIVE – The player has been validated by the server process and is currently connected.    COMPLETED – The player connection has been dropped.    TIMEDOUT – A player session request was received, but the player did not connect and/or was not validated within the time-out limit (60 seconds).  
        var status: String? = nil
        /// Unique identifier for a player session.
        var playerSessionId: String? = nil
        /// Time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        var terminationTime: Date? = nil
        /// Developer-defined information related to a player. Amazon GameLift does not use this data, so it can be formatted as needed for use in the game. 
        var playerData: String? = nil
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        var creationTime: Date? = nil
        /// Game session IP address. All player sessions reference the game session location.
        var ipAddress: String? = nil
        /// Unique identifier for a player that is associated with this player session.
        var playerId: String? = nil
        /// Unique identifier for the game session that the player session is connected to.
        var gameSessionId: String? = nil
        /// Unique identifier for a fleet that the player's game session is running on.
        var fleetId: String? = nil
        /// Port number for the game session. To connect to a Amazon GameLift server process, an app needs both the IP address and port number.
        var port: Int32? = nil

        public init() {}

        public init(status: String? = nil, playerSessionId: String? = nil, terminationTime: Date? = nil, playerData: String? = nil, creationTime: Date? = nil, ipAddress: String? = nil, playerId: String? = nil, gameSessionId: String? = nil, fleetId: String? = nil, port: Int32? = nil) {
            self.status = status
            self.playerSessionId = playerSessionId
            self.terminationTime = terminationTime
            self.playerData = playerData
            self.creationTime = creationTime
            self.ipAddress = ipAddress
            self.playerId = playerId
            self.gameSessionId = gameSessionId
            self.fleetId = fleetId
            self.port = port
        }

    }

    public struct FleetUtilization: Serializable, Initializable {
        /// Maximum players allowed across all game sessions currently being hosted on all instances in the fleet.
        var maximumPlayerSessionCount: Int32? = nil
        /// Number of server processes in an ACTIVE status currently running across all instances in the fleet
        var activeServerProcessCount: Int32? = nil
        /// Number of active game sessions currently being hosted on all instances in the fleet.
        var activeGameSessionCount: Int32? = nil
        /// Number of active player sessions currently being hosted on all instances in the fleet.
        var currentPlayerSessionCount: Int32? = nil
        /// Unique identifier for a fleet.
        var fleetId: String? = nil

        public init() {}

        public init(maximumPlayerSessionCount: Int32? = nil, activeServerProcessCount: Int32? = nil, activeGameSessionCount: Int32? = nil, currentPlayerSessionCount: Int32? = nil, fleetId: String? = nil) {
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.activeServerProcessCount = activeServerProcessCount
            self.activeGameSessionCount = activeGameSessionCount
            self.currentPlayerSessionCount = currentPlayerSessionCount
            self.fleetId = fleetId
        }

    }

    public struct DescribeGameSessionQueuesOutput: Serializable, Initializable {
        /// Collection of objects that describes the requested game session queues.
        var gameSessionQueues: [GameSessionQueue]? = nil
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        var nextToken: String? = nil

        public init() {}

        public init(gameSessionQueues: [GameSessionQueue]? = nil, nextToken: String? = nil) {
            self.gameSessionQueues = gameSessionQueues
            self.nextToken = nextToken
        }

    }

    public struct DescribeGameSessionsOutput: Serializable, Initializable {
        /// Collection of objects containing game session properties for each session matching the request.
        var gameSessions: [GameSession]? = nil
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        var nextToken: String? = nil

        public init() {}

        public init(gameSessions: [GameSession]? = nil, nextToken: String? = nil) {
            self.gameSessions = gameSessions
            self.nextToken = nextToken
        }

    }

    public struct DescribeFleetEventsInput: Serializable, Initializable {
        /// Earliest date to retrieve event logs for. If no start time is specified, this call returns entries starting from when the fleet was created to the specified end time. Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").
        var startTime: Date? = nil
        /// Most recent date to retrieve event logs for. If no end time is specified, this call returns entries from the specified start time up to the present. Format is a number expressed in Unix time as milliseconds (ex: "1469498468.057").
        var endTime: Date? = nil
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        var limit: Int32? = nil
        /// Unique identifier for a fleet to get event logs for.
        var fleetId: String = ""
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        var nextToken: String? = nil

        public init() {}

        public init(startTime: Date? = nil, endTime: Date? = nil, limit: Int32? = nil, fleetId: String, nextToken: String? = nil) {
            self.startTime = startTime
            self.endTime = endTime
            self.limit = limit
            self.fleetId = fleetId
            self.nextToken = nextToken
        }

    }

    public struct S3Location: Serializable, Initializable {
        /// Amazon S3 bucket identifier. This is the name of your S3 bucket.
        var bucket: String? = nil
        /// Amazon Resource Name (ARN) for the access role that allows Amazon GameLift to access your S3 bucket.
        var roleArn: String? = nil
        /// Name of the zip file containing your build files. 
        var key: String? = nil

        public init() {}

        public init(bucket: String? = nil, roleArn: String? = nil, key: String? = nil) {
            self.bucket = bucket
            self.roleArn = roleArn
            self.key = key
        }

    }

    public struct CreateGameSessionInput: Serializable, Initializable {
        /// Unique identifier for a fleet to create a game session in. Each request must reference either a fleet ID or alias ID, but not both.
        var fleetId: String? = nil
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        var name: String? = nil
        /// $player-id; or entity creating the game session. This ID is used to enforce a resource protection policy (if one exists) that limits the number of concurrent active game sessions one player can have.
        var creatorId: String? = nil
        /// Set of developer-defined properties for a game session. These properties are passed to the server process hosting the game session.
        var gameProperties: [GameProperty]? = nil
        /// Custom string to include in the game session ID, with a maximum length of 48 characters. A game session ID has the following format: "arn:aws:gamelift:&lt;region&gt;::gamesession/&lt;fleet ID&gt;/&lt;game session ID&gt;". If provided, the custom string is used for the game session ID string. This value cannot be updated once a game session is created.
        var gameSessionId: String? = nil
        /// Maximum number of players that can be connected simultaneously to the game session.
        var maximumPlayerSessionCount: Int32 = 0
        /// Unique identifier for an alias associated with the fleet to create a game session in. Each request must reference either a fleet ID or alias ID, but not both.
        var aliasId: String? = nil

        public init() {}

        public init(fleetId: String? = nil, name: String? = nil, creatorId: String? = nil, gameProperties: [GameProperty]? = nil, gameSessionId: String? = nil, maximumPlayerSessionCount: Int32, aliasId: String? = nil) {
            self.fleetId = fleetId
            self.name = name
            self.creatorId = creatorId
            self.gameProperties = gameProperties
            self.gameSessionId = gameSessionId
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
            self.aliasId = aliasId
        }

    }

    public struct UpdateGameSessionInput: Serializable, Initializable {
        /// Policy determining whether or not the game session accepts new players.
        var playerSessionCreationPolicy: String? = nil
        /// Game session protection policy to apply to this game session only.    NoProtection – The game session can be terminated during a scale-down event.    FullProtection – If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        var protectionPolicy: String? = nil
        /// Unique identifier for the game session to update.
        var gameSessionId: String = ""
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        var name: String? = nil
        /// Maximum number of players that can be connected simultaneously to the game session.
        var maximumPlayerSessionCount: Int32? = nil

        public init() {}

        public init(playerSessionCreationPolicy: String? = nil, protectionPolicy: String? = nil, gameSessionId: String, name: String? = nil, maximumPlayerSessionCount: Int32? = nil) {
            self.playerSessionCreationPolicy = playerSessionCreationPolicy
            self.protectionPolicy = protectionPolicy
            self.gameSessionId = gameSessionId
            self.name = name
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
        }

    }

    public struct CreateBuildOutput: Serializable, Initializable {
        /// Amazon S3 location specified in the request.
        var storageLocation: S3Location? = nil
        /// This element is not currently in use.
        var uploadCredentials: AwsCredentials? = nil
        /// The newly created build record, including a unique build ID and status. 
        var build: Build? = nil

        public init() {}

        public init(storageLocation: S3Location? = nil, uploadCredentials: AwsCredentials? = nil, build: Build? = nil) {
            self.storageLocation = storageLocation
            self.uploadCredentials = uploadCredentials
            self.build = build
        }

    }

    public struct FleetAttributes: Serializable, Initializable {
        /// Time stamp indicating when this data object was terminated. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        var terminationTime: Date? = nil
        /// Type of game session protection to set for all new instances started in the fleet.    NoProtection – The game session can be terminated during a scale-down event.    FullProtection – If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        var newGameSessionProtectionPolicy: String? = nil
        /// Identifier for a fleet that is unique across all regions.
        var fleetArn: String? = nil
        /// Time stamp indicating when this data object was created. Format is a number expressed in Unix time as milliseconds (for example "1469498468.057").
        var creationTime: Date? = nil
        /// Location of default log files. When a server process is shut down, Amazon GameLift captures and stores any log files in this location. These logs are in addition to game session logs; see more on game session logs in the Amazon GameLift Developer Guide. If no default log path for a fleet is specified, Amazon GameLift will automatically upload logs that are stored on each instance at C:\game\logs (for Windows) or /local/game/logs (for Linux). Use the Amazon GameLift console to access stored logs. 
        var logPaths: [String]? = nil
        /// Path to a game server executable in the fleet's build, specified for fleets created prior to 2016-08-04 (or AWS SDK v. 0.12.16). Server launch paths for fleets created after this date are specified in the fleet's RuntimeConfiguration.
        var serverLaunchPath: String? = nil
        /// Human-readable description of the fleet.
        var description: String? = nil
        /// Fleet policy to limit the number of game sessions an individual player can create over a span of time.
        var resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil
        /// Current status of the fleet. Possible fleet statuses include the following:    NEW – A new fleet has been defined and desired instances is set to 1.     DOWNLOADING/VALIDATING/BUILDING/ACTIVATING – Amazon GameLift is setting up the new fleet, creating new instances with the game build and starting server processes.    ACTIVE – Hosts can now accept game sessions.    ERROR – An error occurred when downloading, validating, building, or activating the fleet.    DELETING – Hosts are responding to a delete fleet request.    TERMINATED – The fleet no longer exists.  
        var status: String? = nil
        /// Unique identifier for a build.
        var buildId: String? = nil
        /// Game server launch parameters specified for fleets created prior to 2016-08-04 (or AWS SDK v. 0.12.16). Server launch parameters for fleets created after this date are specified in the fleet's RuntimeConfiguration.
        var serverLaunchParameters: String? = nil
        /// Descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        var name: String? = nil
        /// Operating system of the fleet's computing resources. A fleet's operating system depends on the OS specified for the build that is deployed on this fleet.
        var operatingSystem: String? = nil
        /// Unique identifier for a fleet.
        var fleetId: String? = nil

        public init() {}

        public init(terminationTime: Date? = nil, newGameSessionProtectionPolicy: String? = nil, fleetArn: String? = nil, creationTime: Date? = nil, logPaths: [String]? = nil, serverLaunchPath: String? = nil, description: String? = nil, resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil, status: String? = nil, buildId: String? = nil, serverLaunchParameters: String? = nil, name: String? = nil, operatingSystem: String? = nil, fleetId: String? = nil) {
            self.terminationTime = terminationTime
            self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
            self.fleetArn = fleetArn
            self.creationTime = creationTime
            self.logPaths = logPaths
            self.serverLaunchPath = serverLaunchPath
            self.description = description
            self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
            self.status = status
            self.buildId = buildId
            self.serverLaunchParameters = serverLaunchParameters
            self.name = name
            self.operatingSystem = operatingSystem
            self.fleetId = fleetId
        }

    }

    public struct InstanceAccess: Serializable, Initializable {
        /// Operating system that is running on the instance.
        var operatingSystem: String? = nil
        /// Credentials required to access the instance.
        var credentials: InstanceCredentials? = nil
        /// Unique identifier for a fleet containing the instance being accessed.
        var fleetId: String? = nil
        /// Unique identifier for an instance being accessed.
        var instanceId: String? = nil
        /// IP address assigned to the instance.
        var ipAddress: String? = nil

        public init() {}

        public init(operatingSystem: String? = nil, credentials: InstanceCredentials? = nil, fleetId: String? = nil, instanceId: String? = nil, ipAddress: String? = nil) {
            self.operatingSystem = operatingSystem
            self.credentials = credentials
            self.fleetId = fleetId
            self.instanceId = instanceId
            self.ipAddress = ipAddress
        }

    }

    public struct StopGameSessionPlacementOutput: Serializable, Initializable {
        /// Object that describes the cancelled game session placement, with cancelled status and an end time stamp. 
        var gameSessionPlacement: GameSessionPlacement? = nil

        public init() {}

        public init(gameSessionPlacement: GameSessionPlacement? = nil) {
            self.gameSessionPlacement = gameSessionPlacement
        }

    }

    public struct CreateGameSessionQueueOutput: Serializable, Initializable {
        /// Object that describes the newly created game session queue.
        var gameSessionQueue: GameSessionQueue? = nil

        public init() {}

        public init(gameSessionQueue: GameSessionQueue? = nil) {
            self.gameSessionQueue = gameSessionQueue
        }

    }

    public struct CreatePlayerSessionOutput: Serializable, Initializable {
        /// Object that describes the newly created player session record.
        var playerSession: PlayerSession? = nil

        public init() {}

        public init(playerSession: PlayerSession? = nil) {
            self.playerSession = playerSession
        }

    }

    public struct DescribeGameSessionDetailsOutput: Serializable, Initializable {
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        var nextToken: String? = nil
        /// Collection of objects containing game session properties and the protection policy currently in force for each session matching the request.
        var gameSessionDetails: [GameSessionDetail]? = nil

        public init() {}

        public init(nextToken: String? = nil, gameSessionDetails: [GameSessionDetail]? = nil) {
            self.nextToken = nextToken
            self.gameSessionDetails = gameSessionDetails
        }

    }

    public struct StartGameSessionPlacementInput: Serializable, Initializable {
        /// Set of information on each player to create a player session for.
        var desiredPlayerSessions: [DesiredPlayerSession]? = nil
        /// Unique identifier to assign to the new game session placement. This value is developer-defined. The value must be unique across all regions and cannot be reused unless you are resubmitting a cancelled or timed-out placement request.
        var placementId: String = ""
        /// Set of values, expressed in milliseconds, indicating the amount of latency that players experience when connected to AWS regions. This information is relevant when requesting player sessions. Latency information provided for player IDs not included in DesiredPlayerSessions are ignored.
        var playerLatencies: [PlayerLatency]? = nil
        /// Name of the queue to use to place the new game session.
        var gameSessionQueueName: String = ""
        /// Set of developer-defined properties for a game session. These properties are passed to the server process hosting the game session.
        var gameProperties: [GameProperty]? = nil
        /// Descriptive label that is associated with a game session. Session names do not need to be unique.
        var gameSessionName: String? = nil
        /// Maximum number of players that can be connected simultaneously to the game session.
        var maximumPlayerSessionCount: Int32 = 0

        public init() {}

        public init(desiredPlayerSessions: [DesiredPlayerSession]? = nil, placementId: String, playerLatencies: [PlayerLatency]? = nil, gameSessionQueueName: String, gameProperties: [GameProperty]? = nil, gameSessionName: String? = nil, maximumPlayerSessionCount: Int32) {
            self.desiredPlayerSessions = desiredPlayerSessions
            self.placementId = placementId
            self.playerLatencies = playerLatencies
            self.gameSessionQueueName = gameSessionQueueName
            self.gameProperties = gameProperties
            self.gameSessionName = gameSessionName
            self.maximumPlayerSessionCount = maximumPlayerSessionCount
        }

    }

    public struct CreateAliasOutput: Serializable, Initializable {
        /// Object that describes the newly created alias record.
        var alias: Alias? = nil

        public init() {}

        public init(alias: Alias? = nil) {
            self.alias = alias
        }

    }

    public struct DescribeScalingPoliciesInput: Serializable, Initializable {
        /// Scaling policy status to filter results on. A scaling policy is only in force when in an ACTIVE status.    ACTIVE – The scaling policy is currently in force.    UPDATEREQUESTED – A request to update the scaling policy has been received.    UPDATING – A change is being made to the scaling policy.    DELETEREQUESTED – A request to delete the scaling policy has been received.    DELETING – The scaling policy is being deleted.    DELETED – The scaling policy has been deleted.    ERROR – An error occurred in creating the policy. It should be removed and recreated.  
        var statusFilter: String? = nil
        /// Maximum number of results to return. Use this parameter with NextToken to get results as a set of sequential pages.
        var limit: Int32? = nil
        /// Unique identifier for a fleet to retrieve scaling policies for.
        var fleetId: String = ""
        /// Token that indicates the start of the next sequential page of results. Use the token that is returned with a previous call to this action. To specify the start of the result set, do not specify a value.
        var nextToken: String? = nil

        public init() {}

        public init(statusFilter: String? = nil, limit: Int32? = nil, fleetId: String, nextToken: String? = nil) {
            self.statusFilter = statusFilter
            self.limit = limit
            self.fleetId = fleetId
            self.nextToken = nextToken
        }

    }

    public struct DescribeBuildOutput: Serializable, Initializable {
        /// Set of properties describing the requested build.
        var build: Build? = nil

        public init() {}

        public init(build: Build? = nil) {
            self.build = build
        }

    }

    public struct UpdateFleetCapacityOutput: Serializable, Initializable {
        /// Unique identifier for a fleet that was updated.
        var fleetId: String? = nil

        public init() {}

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

    }

    public struct UpdateFleetAttributesInput: Serializable, Initializable {
        /// Policy that limits the number of game sessions an individual player can create over a span of time. 
        var resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil
        /// Human-readable description of a fleet.
        var description: String? = nil
        /// Unique identifier for a fleet to update attribute metadata for.
        var fleetId: String = ""
        /// Descriptive label that is associated with a fleet. Fleet names do not need to be unique.
        var name: String? = nil
        /// Game session protection policy to apply to all new instances created in this fleet. Instances that already exist are not affected. You can set protection for individual instances using UpdateGameSession.    NoProtection – The game session can be terminated during a scale-down event.    FullProtection – If the game session is in an ACTIVE status, it cannot be terminated during a scale-down event.  
        var newGameSessionProtectionPolicy: String? = nil

        public init() {}

        public init(resourceCreationLimitPolicy: ResourceCreationLimitPolicy? = nil, description: String? = nil, fleetId: String, name: String? = nil, newGameSessionProtectionPolicy: String? = nil) {
            self.resourceCreationLimitPolicy = resourceCreationLimitPolicy
            self.description = description
            self.fleetId = fleetId
            self.name = name
            self.newGameSessionProtectionPolicy = newGameSessionProtectionPolicy
        }

    }

    public struct DeleteGameSessionQueueInput: Serializable, Initializable {
        /// Descriptive label that is associated with queue. Queue names must be unique within each region.
        var name: String = ""

        public init() {}

        public init(name: String) {
            self.name = name
        }

    }

    public struct ListAliasesOutput: Serializable, Initializable {
        /// Collection of alias records that match the list request.
        var aliases: [Alias]? = nil
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        var nextToken: String? = nil

        public init() {}

        public init(aliases: [Alias]? = nil, nextToken: String? = nil) {
            self.aliases = aliases
            self.nextToken = nextToken
        }

    }

    public struct IpPermission: Serializable, Initializable {
        /// Starting value for a range of allowed port numbers.
        var fromPort: Int32 = 0
        /// Ending value for a range of allowed port numbers. Port numbers are end-inclusive. This value must be higher than FromPort.
        var toPort: Int32 = 0
        /// Network communication protocol used by the fleet.
        var `protocol`: String = ""
        /// Range of allowed IP addresses. This value must be expressed in CIDR notation. Example: "000.000.000.000/[subnet mask]" or optionally the shortened version "0.0.0.0/[subnet mask]".
        var ipRange: String = ""

        public init() {}

        public init(fromPort: Int32, toPort: Int32, protocol: String, ipRange: String) {
            self.fromPort = fromPort
            self.toPort = toPort
            self.`protocol` = `protocol`
            self.ipRange = ipRange
        }

    }

    public struct DescribeFleetEventsOutput: Serializable, Initializable {
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        var nextToken: String? = nil
        /// Collection of objects containing event log entries for the specified fleet.
        var events: [Event]? = nil

        public init() {}

        public init(nextToken: String? = nil, events: [Event]? = nil) {
            self.nextToken = nextToken
            self.events = events
        }

    }

    public struct DescribeAliasOutput: Serializable, Initializable {
        /// Object that contains the requested alias.
        var alias: Alias? = nil

        public init() {}

        public init(alias: Alias? = nil) {
            self.alias = alias
        }

    }

    public struct GetInstanceAccessInput: Serializable, Initializable {
        /// Unique identifier for a fleet that contains the instance you want access to. The fleet can be in any of the following statuses: ACTIVATING, ACTIVE, or ERROR. Fleets with an ERROR status may be accessible for a short time before they are deleted.
        var fleetId: String = ""
        /// Unique identifier for an instance you want to get access to. You can access an instance in any status.
        var instanceId: String = ""

        public init() {}

        public init(fleetId: String, instanceId: String) {
            self.fleetId = fleetId
            self.instanceId = instanceId
        }

    }

    public struct DescribeRuntimeConfigurationInput: Serializable, Initializable {
        /// Unique identifier for a fleet to get the runtime configuration for.
        var fleetId: String = ""

        public init() {}

        public init(fleetId: String) {
            self.fleetId = fleetId
        }

    }

    public struct DescribeGameSessionPlacementInput: Serializable, Initializable {
        /// Unique identifier for a game session placement to retrieve.
        var placementId: String = ""

        public init() {}

        public init(placementId: String) {
            self.placementId = placementId
        }

    }

    public struct RoutingStrategy: Serializable, Initializable {
        /// Type of routing strategy. Possible routing types include the following:    SIMPLE – The alias resolves to one specific fleet. Use this type when routing to active fleets.    TERMINAL – The alias does not resolve to a fleet but instead can be used to display a message to the user. A terminal alias throws a TerminalRoutingStrategyException with the RoutingStrategy message embedded.  
        var type: String? = nil
        /// Unique identifier for a fleet that the alias points to.
        var fleetId: String? = nil
        /// Message text to be used with a terminal routing strategy.
        var message: String? = nil

        public init() {}

        public init(type: String? = nil, fleetId: String? = nil, message: String? = nil) {
            self.type = type
            self.fleetId = fleetId
            self.message = message
        }

    }

    public struct UpdateAliasInput: Serializable, Initializable {
        /// Human-readable description of an alias.
        var description: String? = nil
        /// Descriptive label that is associated with an alias. Alias names do not need to be unique.
        var name: String? = nil
        /// Unique identifier for a fleet alias. Specify the alias you want to update.
        var aliasId: String = ""
        /// Object that specifies the fleet and routing type to use for the alias.
        var routingStrategy: RoutingStrategy? = nil

        public init() {}

        public init(description: String? = nil, name: String? = nil, aliasId: String, routingStrategy: RoutingStrategy? = nil) {
            self.description = description
            self.name = name
            self.aliasId = aliasId
            self.routingStrategy = routingStrategy
        }

    }

    public struct UpdateFleetPortSettingsOutput: Serializable, Initializable {
        /// Unique identifier for a fleet that was updated.
        var fleetId: String? = nil

        public init() {}

        public init(fleetId: String? = nil) {
            self.fleetId = fleetId
        }

    }

    public struct UpdateRuntimeConfigurationInput: Serializable, Initializable {
        /// Unique identifier for a fleet to update runtime configuration for.
        var fleetId: String = ""
        /// Instructions for launching server processes on each instance in the fleet. The runtime configuration for a fleet has a collection of server process configurations, one for each type of server process to run on an instance. A server process configuration specifies the location of the server executable, launch parameters, and the number of concurrent processes with that configuration to maintain on each instance.
        var runtimeConfiguration: RuntimeConfiguration = RuntimeConfiguration()

        public init() {}

        public init(fleetId: String, runtimeConfiguration: RuntimeConfiguration) {
            self.fleetId = fleetId
            self.runtimeConfiguration = runtimeConfiguration
        }

    }

    public struct CreateGameSessionQueueInput: Serializable, Initializable {
        /// List of fleets that can be used to fulfill game session placement requests in the queue. Fleets are identified by either a fleet ARN or a fleet alias ARN. Destinations are listed in default preference order.
        var destinations: [GameSessionQueueDestination]? = nil
        /// Descriptive label that is associated with queue. Queue names must be unique within each region.
        var name: String = ""
        /// Maximum time, in seconds, that a new game session placement request remains in the queue. When a request exceeds this time, the game session placement changes to a TIMED_OUT status.
        var timeoutInSeconds: Int32? = nil

        public init() {}

        public init(destinations: [GameSessionQueueDestination]? = nil, name: String, timeoutInSeconds: Int32? = nil) {
            self.destinations = destinations
            self.name = name
            self.timeoutInSeconds = timeoutInSeconds
        }

    }

    public struct SearchGameSessionsOutput: Serializable, Initializable {
        /// Collection of objects containing game session properties for each session matching the request.
        var gameSessions: [GameSession]? = nil
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        var nextToken: String? = nil

        public init() {}

        public init(gameSessions: [GameSession]? = nil, nextToken: String? = nil) {
            self.gameSessions = gameSessions
            self.nextToken = nextToken
        }

    }

    public struct UpdateAliasOutput: Serializable, Initializable {
        /// Object that contains the updated alias configuration.
        var alias: Alias? = nil

        public init() {}

        public init(alias: Alias? = nil) {
            self.alias = alias
        }

    }

    public struct DescribeRuntimeConfigurationOutput: Serializable, Initializable {
        /// Instructions describing how server processes should be launched and maintained on each instance in the fleet.
        var runtimeConfiguration: RuntimeConfiguration? = nil

        public init() {}

        public init(runtimeConfiguration: RuntimeConfiguration? = nil) {
            self.runtimeConfiguration = runtimeConfiguration
        }

    }

    public struct ListFleetsOutput: Serializable, Initializable {
        /// Token that indicates where to resume retrieving results on the next call to this action. If no token is returned, these results represent the end of the list.
        var nextToken: String? = nil
        /// Set of fleet IDs matching the list request. You can retrieve additional information about all returned fleets by passing this result set to a call to DescribeFleetAttributes, DescribeFleetCapacity, or DescribeFleetUtilization.
        var fleetIds: [String]? = nil

        public init() {}

        public init(nextToken: String? = nil, fleetIds: [String]? = nil) {
            self.nextToken = nextToken
            self.fleetIds = fleetIds
        }

    }

}