// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Redshift {

    public struct ClusterSubnetGroupMessage: Serializable, Initializable {
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        var marker: String? = nil
        /// A list of ClusterSubnetGroup instances. 
        var clusterSubnetGroups: [ClusterSubnetGroup]? = nil

        public init() {}

        public init(marker: String? = nil, clusterSubnetGroups: [ClusterSubnetGroup]? = nil) {
            self.marker = marker
            self.clusterSubnetGroups = clusterSubnetGroups
        }

    }

    public struct DeleteClusterResult: Serializable, Initializable {
        var cluster: Cluster? = nil

        public init() {}

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

    }

    public struct EventsMessage: Serializable, Initializable {
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        var marker: String? = nil
        /// A list of Event instances. 
        var events: [Event]? = nil

        public init() {}

        public init(marker: String? = nil, events: [Event]? = nil) {
            self.marker = marker
            self.events = events
        }

    }

    public struct TaggedResourceListMessage: Serializable, Initializable {
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        var marker: String? = nil
        /// A list of tags with their associated resources.
        var taggedResources: [TaggedResource]? = nil

        public init() {}

        public init(marker: String? = nil, taggedResources: [TaggedResource]? = nil) {
            self.marker = marker
            self.taggedResources = taggedResources
        }

    }

    public struct RevokeClusterSecurityGroupIngressResult: Serializable, Initializable {
        var clusterSecurityGroup: ClusterSecurityGroup? = nil

        public init() {}

        public init(clusterSecurityGroup: ClusterSecurityGroup? = nil) {
            self.clusterSecurityGroup = clusterSecurityGroup
        }

    }

    public struct AuthorizeClusterSecurityGroupIngressMessage: Serializable, Initializable {
        /// The IP range to be added the Amazon Redshift security group.
        var cIDRIP: String? = nil
        /// The EC2 security group to be added the Amazon Redshift security group.
        var eC2SecurityGroupName: String? = nil
        /// The AWS account number of the owner of the security group specified by the EC2SecurityGroupName parameter. The AWS Access Key ID is not an acceptable value.  Example: 111122223333 
        var eC2SecurityGroupOwnerId: String? = nil
        /// The name of the security group to which the ingress rule is added.
        var clusterSecurityGroupName: String = ""

        public init() {}

        public init(cIDRIP: String? = nil, eC2SecurityGroupName: String? = nil, eC2SecurityGroupOwnerId: String? = nil, clusterSecurityGroupName: String) {
            self.cIDRIP = cIDRIP
            self.eC2SecurityGroupName = eC2SecurityGroupName
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }

    }

    public struct ClusterSecurityGroupMessage: Serializable, Initializable {
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        var marker: String? = nil
        /// A list of ClusterSecurityGroup instances. 
        var clusterSecurityGroups: [ClusterSecurityGroup]? = nil

        public init() {}

        public init(marker: String? = nil, clusterSecurityGroups: [ClusterSecurityGroup]? = nil) {
            self.marker = marker
            self.clusterSecurityGroups = clusterSecurityGroups
        }

    }

    public struct DescribeTableRestoreStatusMessage: Serializable, Initializable {
        /// The Amazon Redshift cluster that the table is being restored to.
        var clusterIdentifier: String? = nil
        /// The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.
        var maxRecords: Int32? = nil
        /// The identifier of the table restore request to return status for. If you don't specify a TableRestoreRequestId value, then DescribeTableRestoreStatus returns the status of all in-progress table restore requests.
        var tableRestoreRequestId: String? = nil
        /// An optional pagination token provided by a previous DescribeTableRestoreStatus request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by the MaxRecords parameter.
        var marker: String? = nil

        public init() {}

        public init(clusterIdentifier: String? = nil, maxRecords: Int32? = nil, tableRestoreRequestId: String? = nil, marker: String? = nil) {
            self.clusterIdentifier = clusterIdentifier
            self.maxRecords = maxRecords
            self.tableRestoreRequestId = tableRestoreRequestId
            self.marker = marker
        }

    }

    public struct RebootClusterResult: Serializable, Initializable {
        var cluster: Cluster? = nil

        public init() {}

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

    }

    public struct DeleteHsmClientCertificateMessage: Serializable, Initializable {
        /// The identifier of the HSM client certificate to be deleted.
        var hsmClientCertificateIdentifier: String = ""

        public init() {}

        public init(hsmClientCertificateIdentifier: String) {
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        }

    }

    public struct OrderableClusterOptionsMessage: Serializable, Initializable {
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        var marker: String? = nil
        /// An OrderableClusterOption structure containing information about orderable options for the cluster.
        var orderableClusterOptions: [OrderableClusterOption]? = nil

        public init() {}

        public init(marker: String? = nil, orderableClusterOptions: [OrderableClusterOption]? = nil) {
            self.marker = marker
            self.orderableClusterOptions = orderableClusterOptions
        }

    }

    public struct AuthorizeSnapshotAccessMessage: Serializable, Initializable {
        /// The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
        var snapshotClusterIdentifier: String? = nil
        /// The identifier of the snapshot the account is authorized to restore.
        var snapshotIdentifier: String = ""
        /// The identifier of the AWS customer account authorized to restore the specified snapshot.
        var accountWithRestoreAccess: String = ""

        public init() {}

        public init(snapshotClusterIdentifier: String? = nil, snapshotIdentifier: String, accountWithRestoreAccess: String) {
            self.snapshotClusterIdentifier = snapshotClusterIdentifier
            self.snapshotIdentifier = snapshotIdentifier
            self.accountWithRestoreAccess = accountWithRestoreAccess
        }

    }

    public struct Endpoint: Serializable, Initializable {
        /// The DNS address of the Cluster.
        var address: String? = nil
        /// The port that the database engine is listening on.
        var port: Int32? = nil

        public init() {}

        public init(address: String? = nil, port: Int32? = nil) {
            self.address = address
            self.port = port
        }

    }

    public struct CreateClusterParameterGroupResult: Serializable, Initializable {
        var clusterParameterGroup: ClusterParameterGroup? = nil

        public init() {}

        public init(clusterParameterGroup: ClusterParameterGroup? = nil) {
            self.clusterParameterGroup = clusterParameterGroup
        }

    }

    public struct HsmConfigurationMessage: Serializable, Initializable {
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        var marker: String? = nil
        /// A list of HsmConfiguration objects.
        var hsmConfigurations: [HsmConfiguration]? = nil

        public init() {}

        public init(marker: String? = nil, hsmConfigurations: [HsmConfiguration]? = nil) {
            self.marker = marker
            self.hsmConfigurations = hsmConfigurations
        }

    }

    public struct PurchaseReservedNodeOfferingMessage: Serializable, Initializable {
        /// The unique identifier of the reserved node offering you want to purchase.
        var reservedNodeOfferingId: String = ""
        /// The number of reserved nodes that you want to purchase. Default: 1 
        var nodeCount: Int32? = nil

        public init() {}

        public init(reservedNodeOfferingId: String, nodeCount: Int32? = nil) {
            self.reservedNodeOfferingId = reservedNodeOfferingId
            self.nodeCount = nodeCount
        }

    }

    public struct ModifySnapshotCopyRetentionPeriodResult: Serializable, Initializable {
        var cluster: Cluster? = nil

        public init() {}

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

    }

    public struct HsmStatus: Serializable, Initializable {
        /// Reports whether the Amazon Redshift cluster has finished applying any HSM settings changes specified in a modify cluster command. Values: active, applying
        var status: String? = nil
        /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
        var hsmConfigurationIdentifier: String? = nil
        /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
        var hsmClientCertificateIdentifier: String? = nil

        public init() {}

        public init(status: String? = nil, hsmConfigurationIdentifier: String? = nil, hsmClientCertificateIdentifier: String? = nil) {
            self.status = status
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        }

    }

    public struct ModifyClusterSubnetGroupMessage: Serializable, Initializable {
        /// An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
        var subnetIds: [String] = []
        /// The name of the subnet group to be modified.
        var clusterSubnetGroupName: String = ""
        /// A text description of the subnet group to be modified.
        var description: String? = nil

        public init() {}

        public init(subnetIds: [String], clusterSubnetGroupName: String, description: String? = nil) {
            self.subnetIds = subnetIds
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.description = description
        }

    }

    public struct RestoreTableFromClusterSnapshotResult: Serializable, Initializable {
        var tableRestoreStatus: TableRestoreStatus? = nil

        public init() {}

        public init(tableRestoreStatus: TableRestoreStatus? = nil) {
            self.tableRestoreStatus = tableRestoreStatus
        }

    }

    public struct AuthorizeSnapshotAccessResult: Serializable, Initializable {
        var snapshot: Snapshot? = nil

        public init() {}

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

    }

    public struct ClusterSubnetGroup: Serializable, Initializable {
        /// The status of the cluster subnet group. Possible values are Complete, Incomplete and Invalid. 
        var subnetGroupStatus: String? = nil
        /// A list of the VPC Subnet elements. 
        var subnets: [Subnet]? = nil
        /// The VPC ID of the cluster subnet group.
        var vpcId: String? = nil
        /// The list of tags for the cluster subnet group.
        var tags: [Tag]? = nil
        /// The name of the cluster subnet group.
        var clusterSubnetGroupName: String? = nil
        /// The description of the cluster subnet group.
        var description: String? = nil

        public init() {}

        public init(subnetGroupStatus: String? = nil, subnets: [Subnet]? = nil, vpcId: String? = nil, tags: [Tag]? = nil, clusterSubnetGroupName: String? = nil, description: String? = nil) {
            self.subnetGroupStatus = subnetGroupStatus
            self.subnets = subnets
            self.vpcId = vpcId
            self.tags = tags
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.description = description
        }

    }

    public struct CreateHsmConfigurationMessage: Serializable, Initializable {
        /// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
        var hsmPartitionName: String = ""
        /// The password required to access the HSM partition.
        var hsmPartitionPassword: String = ""
        /// A list of tag instances.
        var tags: [Tag]? = nil
        /// The HSMs public certificate file. When using Cloud HSM, the file name is server.pem.
        var hsmServerPublicCertificate: String = ""
        /// The IP address that the Amazon Redshift cluster must use to access the HSM.
        var hsmIpAddress: String = ""
        /// The identifier to be assigned to the new Amazon Redshift HSM configuration.
        var hsmConfigurationIdentifier: String = ""
        /// A text description of the HSM configuration to be created.
        var description: String = ""

        public init() {}

        public init(hsmPartitionName: String, hsmPartitionPassword: String, tags: [Tag]? = nil, hsmServerPublicCertificate: String, hsmIpAddress: String, hsmConfigurationIdentifier: String, description: String) {
            self.hsmPartitionName = hsmPartitionName
            self.hsmPartitionPassword = hsmPartitionPassword
            self.tags = tags
            self.hsmServerPublicCertificate = hsmServerPublicCertificate
            self.hsmIpAddress = hsmIpAddress
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.description = description
        }

    }

    public struct RestoreTableFromClusterSnapshotMessage: Serializable, Initializable {
        /// The identifier of the snapshot to restore the table from. This snapshot must have been created from the Amazon Redshift cluster specified by the ClusterIdentifier parameter.
        var snapshotIdentifier: String = ""
        /// The name of the source database that contains the table to restore from.
        var sourceDatabaseName: String = ""
        /// The name of the source table to restore from.
        var sourceTableName: String = ""
        /// The name of the source schema that contains the table to restore from. If you do not specify a SourceSchemaName value, the default is public.
        var sourceSchemaName: String? = nil
        /// The identifier of the Amazon Redshift cluster to restore the table to.
        var clusterIdentifier: String = ""
        /// The name of the database to restore the table to.
        var targetDatabaseName: String? = nil
        /// The name of the table to create as a result of the current request.
        var newTableName: String = ""
        /// The name of the schema to restore the table to.
        var targetSchemaName: String? = nil

        public init() {}

        public init(snapshotIdentifier: String, sourceDatabaseName: String, sourceTableName: String, sourceSchemaName: String? = nil, clusterIdentifier: String, targetDatabaseName: String? = nil, newTableName: String, targetSchemaName: String? = nil) {
            self.snapshotIdentifier = snapshotIdentifier
            self.sourceDatabaseName = sourceDatabaseName
            self.sourceTableName = sourceTableName
            self.sourceSchemaName = sourceSchemaName
            self.clusterIdentifier = clusterIdentifier
            self.targetDatabaseName = targetDatabaseName
            self.newTableName = newTableName
            self.targetSchemaName = targetSchemaName
        }

    }

    public struct DisableSnapshotCopyResult: Serializable, Initializable {
        var cluster: Cluster? = nil

        public init() {}

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

    }

    public struct Tag: Serializable, Initializable {
        /// The value for the resource tag.
        var value: String? = nil
        /// The key, or name, for the resource tag.
        var key: String? = nil

        public init() {}

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

    }

    public struct ResizeProgressMessage: Serializable, Initializable {
        /// The status of the resize operation. Valid Values: NONE | IN_PROGRESS | FAILED | SUCCEEDED 
        var status: String? = nil
        /// The estimated time remaining, in seconds, until the resize operation is complete. This value is calculated based on the average resize rate and the estimated amount of data remaining to be processed. Once the resize operation is complete, this value will be 0.
        var estimatedTimeToCompletionInSeconds: Int64? = nil
        /// The cluster type after the resize operation is complete. Valid Values: multi-node | single-node 
        var targetClusterType: String? = nil
        /// The average rate of the resize operation over the last few minutes, measured in megabytes per second. After the resize operation completes, this value shows the average rate of the entire resize operation.
        var avgResizeRateInMegaBytesPerSecond: Double? = nil
        /// While the resize operation is in progress, this value shows the current amount of data, in megabytes, that has been processed so far. When the resize operation is complete, this value shows the total amount of data, in megabytes, on the cluster, which may be more or less than TotalResizeDataInMegaBytes (the estimated total amount of data before resize).
        var progressInMegaBytes: Int64? = nil
        /// The names of tables that are being currently imported. Valid Values: List of table names.
        var importTablesInProgress: [String]? = nil
        /// The estimated total amount of data, in megabytes, on the cluster before the resize operation began.
        var totalResizeDataInMegaBytes: Int64? = nil
        /// The amount of seconds that have elapsed since the resize operation began. After the resize operation completes, this value shows the total actual time, in seconds, for the resize operation.
        var elapsedTimeInSeconds: Int64? = nil
        /// The names of tables that have not been yet imported. Valid Values: List of table names
        var importTablesNotStarted: [String]? = nil
        /// The number of nodes that the cluster will have after the resize operation is complete.
        var targetNumberOfNodes: Int32? = nil
        /// The node type that the cluster will have after the resize operation is complete.
        var targetNodeType: String? = nil
        /// The names of tables that have been completely imported . Valid Values: List of table names.
        var importTablesCompleted: [String]? = nil

        public init() {}

        public init(status: String? = nil, estimatedTimeToCompletionInSeconds: Int64? = nil, targetClusterType: String? = nil, avgResizeRateInMegaBytesPerSecond: Double? = nil, progressInMegaBytes: Int64? = nil, importTablesInProgress: [String]? = nil, totalResizeDataInMegaBytes: Int64? = nil, elapsedTimeInSeconds: Int64? = nil, importTablesNotStarted: [String]? = nil, targetNumberOfNodes: Int32? = nil, targetNodeType: String? = nil, importTablesCompleted: [String]? = nil) {
            self.status = status
            self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
            self.targetClusterType = targetClusterType
            self.avgResizeRateInMegaBytesPerSecond = avgResizeRateInMegaBytesPerSecond
            self.progressInMegaBytes = progressInMegaBytes
            self.importTablesInProgress = importTablesInProgress
            self.totalResizeDataInMegaBytes = totalResizeDataInMegaBytes
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
            self.importTablesNotStarted = importTablesNotStarted
            self.targetNumberOfNodes = targetNumberOfNodes
            self.targetNodeType = targetNodeType
            self.importTablesCompleted = importTablesCompleted
        }

    }

    public struct OrderableClusterOption: Serializable, Initializable {
        /// A list of availability zones for the orderable cluster.
        var availabilityZones: [AvailabilityZone]? = nil
        /// The cluster type, for example multi-node. 
        var clusterType: String? = nil
        /// The version of the orderable cluster.
        var clusterVersion: String? = nil
        /// The node type for the orderable cluster.
        var nodeType: String? = nil

        public init() {}

        public init(availabilityZones: [AvailabilityZone]? = nil, clusterType: String? = nil, clusterVersion: String? = nil, nodeType: String? = nil) {
            self.availabilityZones = availabilityZones
            self.clusterType = clusterType
            self.clusterVersion = clusterVersion
            self.nodeType = nodeType
        }

    }

    public struct CreateEventSubscriptionMessage: Serializable, Initializable {
        /// Specifies the Amazon Redshift event severity to be published by the event notification subscription. Values: ERROR, INFO
        var severity: String? = nil
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic used to transmit the event notifications. The ARN is created by Amazon SNS when you create a topic and subscribe to it.
        var snsTopicArn: String = ""
        /// The name of the event subscription to be created. Constraints:   Cannot be null, empty, or blank.   Must contain from 1 to 255 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        var subscriptionName: String = ""
        /// A list of tag instances.
        var tags: [Tag]? = nil
        /// Specifies the Amazon Redshift event categories to be published by the event notification subscription. Values: Configuration, Management, Monitoring, Security
        var eventCategories: [String]? = nil
        /// A Boolean value; set to true to activate the subscription, set to false to create the subscription but not active it. 
        var enabled: Bool? = nil
        /// The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs. Valid values: cluster, cluster-parameter-group, cluster-security-group, and cluster-snapshot.
        var sourceType: String? = nil
        /// A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified. Example: my-cluster-1, my-cluster-2 Example: my-snapshot-20131010
        var sourceIds: [String]? = nil

        public init() {}

        public init(severity: String? = nil, snsTopicArn: String, subscriptionName: String, tags: [Tag]? = nil, eventCategories: [String]? = nil, enabled: Bool? = nil, sourceType: String? = nil, sourceIds: [String]? = nil) {
            self.severity = severity
            self.snsTopicArn = snsTopicArn
            self.subscriptionName = subscriptionName
            self.tags = tags
            self.eventCategories = eventCategories
            self.enabled = enabled
            self.sourceType = sourceType
            self.sourceIds = sourceIds
        }

    }

    public struct EventCategoriesMessage: Serializable, Initializable {
        /// A list of event categories descriptions.
        var eventCategoriesMapList: [EventCategoriesMap]? = nil

        public init() {}

        public init(eventCategoriesMapList: [EventCategoriesMap]? = nil) {
            self.eventCategoriesMapList = eventCategoriesMapList
        }

    }

    public struct RecurringCharge: Serializable, Initializable {
        /// The amount charged per the period of time specified by the recurring charge frequency.
        var recurringChargeAmount: Double? = nil
        /// The frequency at which the recurring charge amount is applied.
        var recurringChargeFrequency: String? = nil

        public init() {}

        public init(recurringChargeAmount: Double? = nil, recurringChargeFrequency: String? = nil) {
            self.recurringChargeAmount = recurringChargeAmount
            self.recurringChargeFrequency = recurringChargeFrequency
        }

    }

    public struct HsmClientCertificateMessage: Serializable, Initializable {
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        var marker: String? = nil
        /// A list of the identifiers for one or more HSM client certificates used by Amazon Redshift clusters to store and retrieve database encryption keys in an HSM.
        var hsmClientCertificates: [HsmClientCertificate]? = nil

        public init() {}

        public init(marker: String? = nil, hsmClientCertificates: [HsmClientCertificate]? = nil) {
            self.marker = marker
            self.hsmClientCertificates = hsmClientCertificates
        }

    }

    public struct DescribeEventsMessage: Serializable, Initializable {
        /// The beginning of the time interval to retrieve events for, specified in ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.  Example: 2009-07-08T18:00Z 
        var startTime: Date? = nil
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeEvents request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        var marker: String? = nil
        /// The event source to retrieve events for. If no value is specified, all events are returned. Constraints: If SourceType is supplied, SourceIdentifier must also be provided.   Specify cluster when SourceIdentifier is a cluster identifier.   Specify cluster-security-group when SourceIdentifier is a cluster security group name.   Specify cluster-parameter-group when SourceIdentifier is a cluster parameter group name.   Specify cluster-snapshot when SourceIdentifier is a cluster snapshot identifier.  
        var sourceType: String? = nil
        /// The end of the time interval for which to retrieve events, specified in ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.  Example: 2009-07-08T18:00Z 
        var endTime: Date? = nil
        /// The identifier of the event source for which events will be returned. If this parameter is not specified, then all sources are included in the response. Constraints: If SourceIdentifier is supplied, SourceType must also be provided.   Specify a cluster identifier when SourceType is cluster.   Specify a cluster security group name when SourceType is cluster-security-group.   Specify a cluster parameter group name when SourceType is cluster-parameter-group.   Specify a cluster snapshot identifier when SourceType is cluster-snapshot.  
        var sourceIdentifier: String? = nil
        /// The number of minutes prior to the time of the request for which to retrieve events. For example, if the request is sent at 18:00 and you specify a duration of 60, then only events which have occurred after 17:00 will be returned. Default: 60 
        var duration: Int32? = nil

        public init() {}

        public init(startTime: Date? = nil, maxRecords: Int32? = nil, marker: String? = nil, sourceType: String? = nil, endTime: Date? = nil, sourceIdentifier: String? = nil, duration: Int32? = nil) {
            self.startTime = startTime
            self.maxRecords = maxRecords
            self.marker = marker
            self.sourceType = sourceType
            self.endTime = endTime
            self.sourceIdentifier = sourceIdentifier
            self.duration = duration
        }

    }

    public struct EnableSnapshotCopyMessage: Serializable, Initializable {
        /// The destination region that you want to copy snapshots to. Constraints: Must be the name of a valid region. For more information, see Regions and Endpoints in the Amazon Web Services General Reference. 
        var destinationRegion: String = ""
        /// The number of days to retain automated snapshots in the destination region after they are copied from the source region. Default: 7. Constraints: Must be at least 1 and no more than 35.
        var retentionPeriod: Int32? = nil
        /// The unique identifier of the source cluster to copy snapshots from. Constraints: Must be the valid name of an existing cluster that does not already have cross-region snapshot copy enabled.
        var clusterIdentifier: String = ""
        /// The name of the snapshot copy grant to use when snapshots of an AWS KMS-encrypted cluster are copied to the destination region.
        var snapshotCopyGrantName: String? = nil

        public init() {}

        public init(destinationRegion: String, retentionPeriod: Int32? = nil, clusterIdentifier: String, snapshotCopyGrantName: String? = nil) {
            self.destinationRegion = destinationRegion
            self.retentionPeriod = retentionPeriod
            self.clusterIdentifier = clusterIdentifier
            self.snapshotCopyGrantName = snapshotCopyGrantName
        }

    }

    public struct DescribeClusterSecurityGroupsMessage: Serializable, Initializable {
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        /// A tag value or values for which you want to return all matching cluster security groups that are associated with the specified tag value or values. For example, suppose that you have security groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag values associated with them.
        var tagValues: [String]? = nil
        /// A tag key or keys for which you want to return all matching cluster security groups that are associated with the specified key or keys. For example, suppose that you have security groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the security groups that have either or both of these tag keys associated with them.
        var tagKeys: [String]? = nil
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterSecurityGroups request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.  Constraints: You can specify either the ClusterSecurityGroupName parameter or the Marker parameter, but not both. 
        var marker: String? = nil
        /// The name of a cluster security group for which you are requesting details. You can specify either the Marker parameter or a ClusterSecurityGroupName parameter, but not both.   Example: securitygroup1 
        var clusterSecurityGroupName: String? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, tagValues: [String]? = nil, tagKeys: [String]? = nil, marker: String? = nil, clusterSecurityGroupName: String? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.tagKeys = tagKeys
            self.marker = marker
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }

    }

    public struct CreateClusterSecurityGroupMessage: Serializable, Initializable {
        /// The name for the security group. Amazon Redshift stores the value as a lowercase string. Constraints:   Must contain no more than 255 alphanumeric characters or hyphens.   Must not be "Default".   Must be unique for all security groups that are created by your AWS account.   Example: examplesecuritygroup 
        var clusterSecurityGroupName: String = ""
        /// A list of tag instances.
        var tags: [Tag]? = nil
        /// A description for the security group.
        var description: String = ""

        public init() {}

        public init(clusterSecurityGroupName: String, tags: [Tag]? = nil, description: String) {
            self.clusterSecurityGroupName = clusterSecurityGroupName
            self.tags = tags
            self.description = description
        }

    }

    public struct DescribeHsmConfigurationsMessage: Serializable, Initializable {
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        /// A tag value or values for which you want to return all matching HSM configurations that are associated with the specified tag value or values. For example, suppose that you have HSM configurations that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag values associated with them.
        var tagValues: [String]? = nil
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeHsmConfigurations request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        var marker: String? = nil
        /// The identifier of a specific Amazon Redshift HSM configuration to be described. If no identifier is specified, information is returned for all HSM configurations owned by your AWS customer account.
        var hsmConfigurationIdentifier: String? = nil
        /// A tag key or keys for which you want to return all matching HSM configurations that are associated with the specified key or keys. For example, suppose that you have HSM configurations that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM configurations that have either or both of these tag keys associated with them.
        var tagKeys: [String]? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, tagValues: [String]? = nil, marker: String? = nil, hsmConfigurationIdentifier: String? = nil, tagKeys: [String]? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.marker = marker
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.tagKeys = tagKeys
        }

    }

    public struct DeleteClusterSnapshotResult: Serializable, Initializable {
        var snapshot: Snapshot? = nil

        public init() {}

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

    }

    public struct ClusterParameterGroup: Serializable, Initializable {
        /// The name of the cluster parameter group.
        var parameterGroupName: String? = nil
        /// The name of the cluster parameter group family that this cluster parameter group is compatible with.
        var parameterGroupFamily: String? = nil
        /// The list of tags for the cluster parameter group.
        var tags: [Tag]? = nil
        /// The description of the parameter group.
        var description: String? = nil

        public init() {}

        public init(parameterGroupName: String? = nil, parameterGroupFamily: String? = nil, tags: [Tag]? = nil, description: String? = nil) {
            self.parameterGroupName = parameterGroupName
            self.parameterGroupFamily = parameterGroupFamily
            self.tags = tags
            self.description = description
        }

    }

    public struct ReservedNode: Serializable, Initializable {
        /// The time the reservation started. You purchase a reserved node offering for a duration. This is the start time of that duration.
        var startTime: Date? = nil
        /// The recurring charges for the reserved node.
        var recurringCharges: [RecurringCharge]? = nil
        /// The number of reserved compute nodes.
        var nodeCount: Int32? = nil
        /// The hourly rate Amazon Redshift charges you for this reserved node.
        var usagePrice: Double? = nil
        /// The state of the reserved compute node. Possible Values:   pending-payment-This reserved node has recently been purchased, and the sale has been approved, but payment has not yet been confirmed.   active-This reserved node is owned by the caller and is available for use.   payment-failed-Payment failed for the purchase attempt.  
        var state: String? = nil
        /// The node type of the reserved node.
        var nodeType: String? = nil
        /// The unique identifier for the reservation.
        var reservedNodeId: String? = nil
        /// The currency code for the reserved cluster.
        var currencyCode: String? = nil
        /// The identifier for the reserved node offering.
        var reservedNodeOfferingId: String? = nil
        /// The duration of the node reservation in seconds.
        var duration: Int32? = nil
        /// The anticipated utilization of the reserved node, as defined in the reserved node offering.
        var offeringType: String? = nil
        /// The fixed cost Amazon Redshift charges you for this reserved node.
        var fixedPrice: Double? = nil

        public init() {}

        public init(startTime: Date? = nil, recurringCharges: [RecurringCharge]? = nil, nodeCount: Int32? = nil, usagePrice: Double? = nil, state: String? = nil, nodeType: String? = nil, reservedNodeId: String? = nil, currencyCode: String? = nil, reservedNodeOfferingId: String? = nil, duration: Int32? = nil, offeringType: String? = nil, fixedPrice: Double? = nil) {
            self.startTime = startTime
            self.recurringCharges = recurringCharges
            self.nodeCount = nodeCount
            self.usagePrice = usagePrice
            self.state = state
            self.nodeType = nodeType
            self.reservedNodeId = reservedNodeId
            self.currencyCode = currencyCode
            self.reservedNodeOfferingId = reservedNodeOfferingId
            self.duration = duration
            self.offeringType = offeringType
            self.fixedPrice = fixedPrice
        }

    }

    public struct RestoreStatus: Serializable, Initializable {
        /// The status of the restore action. Returns starting, restoring, completed, or failed.
        var status: String? = nil
        /// The size of the set of snapshot data used to restore the cluster.
        var snapshotSizeInMegaBytes: Int64? = nil
        /// The number of megabytes per second being transferred from the backup storage. Returns the average rate for a completed backup.
        var currentRestoreRateInMegaBytesPerSecond: Double? = nil
        /// The estimate of the time remaining before the restore will complete. Returns 0 for a completed restore.
        var estimatedTimeToCompletionInSeconds: Int64? = nil
        /// The number of megabytes that have been transferred from snapshot storage.
        var progressInMegaBytes: Int64? = nil
        /// The amount of time an in-progress restore has been running, or the amount of time it took a completed restore to finish.
        var elapsedTimeInSeconds: Int64? = nil

        public init() {}

        public init(status: String? = nil, snapshotSizeInMegaBytes: Int64? = nil, currentRestoreRateInMegaBytesPerSecond: Double? = nil, estimatedTimeToCompletionInSeconds: Int64? = nil, progressInMegaBytes: Int64? = nil, elapsedTimeInSeconds: Int64? = nil) {
            self.status = status
            self.snapshotSizeInMegaBytes = snapshotSizeInMegaBytes
            self.currentRestoreRateInMegaBytesPerSecond = currentRestoreRateInMegaBytesPerSecond
            self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
            self.progressInMegaBytes = progressInMegaBytes
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
        }

    }

    public struct RestoreFromClusterSnapshotMessage: Serializable, Initializable {
        /// A list of security groups to be associated with this cluster. Default: The default cluster security group for Amazon Redshift. Cluster security groups only apply to clusters outside of VPCs.
        var clusterSecurityGroups: [String]? = nil
        /// The name of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
        var snapshotClusterIdentifier: String? = nil
        /// The node type that the restored cluster will be provisioned with. Default: The node type of the cluster from which the snapshot was taken. You can modify this if you are using any DS node type. In that case, you can choose to restore into another DS node type of the same size. For example, you can restore ds1.8xlarge into ds2.8xlarge, or ds2.xlarge into ds1.xlarge. If you have a DC instance type, you must restore into that same instance type and size. In other words, you can only restore a dc1.large instance type into another dc1.large instance type. For more information about node types, see  About Clusters and Nodes in the Amazon Redshift Cluster Management Guide 
        var nodeType: String? = nil
        /// The AWS customer account used to create or copy the snapshot. Required if you are restoring a snapshot you do not own, optional if you own the snapshot.
        var ownerAccount: String? = nil
        /// A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster. Default: The default VPC security group is associated with the cluster. VPC security groups only apply to clusters in VPCs.
        var vpcSecurityGroupIds: [String]? = nil
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.  Default: false
        var enhancedVpcRouting: Bool? = nil
        /// The identifier of the cluster that will be created from restoring the snapshot. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   Alphabetic characters must be lowercase.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Must be unique for all clusters within an AWS account.  
        var clusterIdentifier: String = ""
        /// The name of the parameter group to be associated with this cluster. Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to Working with Amazon Redshift Parameter Groups. Constraints:   Must be 1 to 255 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        var clusterParameterGroupName: String? = nil
        /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with CreateClusterSnapshot.  Default: The value selected for the cluster from which the snapshot was taken. Constraints: Must be a value from 0 to 35.
        var automatedSnapshotRetentionPeriod: Int32? = nil
        /// If true, the cluster can be accessed from a public network. 
        var publiclyAccessible: Bool? = nil
        /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
        var hsmConfigurationIdentifier: String? = nil
        /// The Amazon EC2 Availability Zone in which to restore the cluster. Default: A random, system-chosen Availability Zone. Example: us-east-1a 
        var availabilityZone: String? = nil
        /// A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single request. A cluster can have up to 10 IAM roles associated at any time.
        var iamRoles: [String]? = nil
        /// The name of the snapshot from which to create the new cluster. This parameter isn't case sensitive. Example: my-snapshot-id 
        var snapshotIdentifier: String = ""
        /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
        var hsmClientCertificateIdentifier: String? = nil
        /// The elastic IP (EIP) address for the cluster.
        var elasticIp: String? = nil
        /// The weekly time range (in UTC) during which automated cluster maintenance can occur.  Format: ddd:hh24:mi-ddd:hh24:mi   Default: The value selected for the cluster from which the snapshot was taken. For more information about the time blocks for each region, see Maintenance Windows in Amazon Redshift Cluster Management Guide.  Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Minimum 30-minute window.
        var preferredMaintenanceWindow: String? = nil
        /// The name of the subnet group where you want to cluster restored. A snapshot of cluster in VPC can be restored only in VPC. Therefore, you must provide subnet group name where you want the cluster restored.
        var clusterSubnetGroupName: String? = nil
        /// Reserved.
        var additionalInfo: String? = nil
        /// If true, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster.  Default: true 
        var allowVersionUpgrade: Bool? = nil
        /// The port number on which the cluster accepts connections. Default: The same port as the original cluster. Constraints: Must be between 1115 and 65535.
        var port: Int32? = nil
        /// The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster that you restore from a shared snapshot.
        var kmsKeyId: String? = nil

        public init() {}

        public init(clusterSecurityGroups: [String]? = nil, snapshotClusterIdentifier: String? = nil, nodeType: String? = nil, ownerAccount: String? = nil, vpcSecurityGroupIds: [String]? = nil, enhancedVpcRouting: Bool? = nil, clusterIdentifier: String, clusterParameterGroupName: String? = nil, automatedSnapshotRetentionPeriod: Int32? = nil, publiclyAccessible: Bool? = nil, hsmConfigurationIdentifier: String? = nil, availabilityZone: String? = nil, iamRoles: [String]? = nil, snapshotIdentifier: String, hsmClientCertificateIdentifier: String? = nil, elasticIp: String? = nil, preferredMaintenanceWindow: String? = nil, clusterSubnetGroupName: String? = nil, additionalInfo: String? = nil, allowVersionUpgrade: Bool? = nil, port: Int32? = nil, kmsKeyId: String? = nil) {
            self.clusterSecurityGroups = clusterSecurityGroups
            self.snapshotClusterIdentifier = snapshotClusterIdentifier
            self.nodeType = nodeType
            self.ownerAccount = ownerAccount
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.enhancedVpcRouting = enhancedVpcRouting
            self.clusterIdentifier = clusterIdentifier
            self.clusterParameterGroupName = clusterParameterGroupName
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.publiclyAccessible = publiclyAccessible
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.availabilityZone = availabilityZone
            self.iamRoles = iamRoles
            self.snapshotIdentifier = snapshotIdentifier
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.elasticIp = elasticIp
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.additionalInfo = additionalInfo
            self.allowVersionUpgrade = allowVersionUpgrade
            self.port = port
            self.kmsKeyId = kmsKeyId
        }

    }

    public struct DeleteTagsMessage: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) from which you want to remove the tag or tags. For example, arn:aws:redshift:us-east-1:123456789:cluster:t1. 
        var resourceName: String = ""
        /// The tag key that you want to delete.
        var tagKeys: [String] = []

        public init() {}

        public init(resourceName: String, tagKeys: [String]) {
            self.resourceName = resourceName
            self.tagKeys = tagKeys
        }

    }

    public struct RebootClusterMessage: Serializable, Initializable {
        /// The cluster identifier.
        var clusterIdentifier: String = ""

        public init() {}

        public init(clusterIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
        }

    }

    public struct ReservedNodesMessage: Serializable, Initializable {
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        var marker: String? = nil
        /// The list of ReservedNode objects.
        var reservedNodes: [ReservedNode]? = nil

        public init() {}

        public init(marker: String? = nil, reservedNodes: [ReservedNode]? = nil) {
            self.marker = marker
            self.reservedNodes = reservedNodes
        }

    }

    public struct DescribeLoggingStatusMessage: Serializable, Initializable {
        /// The identifier of the cluster from which to get the logging status. Example: examplecluster 
        var clusterIdentifier: String = ""

        public init() {}

        public init(clusterIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
        }

    }

    public struct ResetClusterParameterGroupMessage: Serializable, Initializable {
        /// An array of names of parameters to be reset. If ResetAllParameters option is not used, then at least one parameter name must be supplied.  Constraints: A maximum of 20 parameters can be reset in a single request.
        var parameters: [Parameter]? = nil
        /// If true, all parameters in the specified parameter group will be reset to their default values.  Default: true 
        var resetAllParameters: Bool? = nil
        /// The name of the cluster parameter group to be reset.
        var parameterGroupName: String = ""

        public init() {}

        public init(parameters: [Parameter]? = nil, resetAllParameters: Bool? = nil, parameterGroupName: String) {
            self.parameters = parameters
            self.resetAllParameters = resetAllParameters
            self.parameterGroupName = parameterGroupName
        }

    }

    public struct DeleteEventSubscriptionMessage: Serializable, Initializable {
        /// The name of the Amazon Redshift event notification subscription to be deleted.
        var subscriptionName: String = ""

        public init() {}

        public init(subscriptionName: String) {
            self.subscriptionName = subscriptionName
        }

    }

    public struct DescribeOrderableClusterOptionsMessage: Serializable, Initializable {
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        /// The version filter value. Specify this parameter to show only the available offerings matching the specified version. Default: All versions. Constraints: Must be one of the version returned from DescribeClusterVersions.
        var clusterVersion: String? = nil
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeOrderableClusterOptions request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        var marker: String? = nil
        /// The node type filter value. Specify this parameter to show only the available offerings matching the specified node type.
        var nodeType: String? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, clusterVersion: String? = nil, marker: String? = nil, nodeType: String? = nil) {
            self.maxRecords = maxRecords
            self.clusterVersion = clusterVersion
            self.marker = marker
            self.nodeType = nodeType
        }

    }

    public struct ClusterVersion: Serializable, Initializable {
        /// The version number used by the cluster.
        var clusterVersion: String? = nil
        /// The name of the cluster parameter group family for the cluster.
        var clusterParameterGroupFamily: String? = nil
        /// The description of the cluster version.
        var description: String? = nil

        public init() {}

        public init(clusterVersion: String? = nil, clusterParameterGroupFamily: String? = nil, description: String? = nil) {
            self.clusterVersion = clusterVersion
            self.clusterParameterGroupFamily = clusterParameterGroupFamily
            self.description = description
        }

    }

    public struct Subnet: Serializable, Initializable {
        /// The identifier of the subnet.
        var subnetIdentifier: String? = nil
        var subnetAvailabilityZone: AvailabilityZone? = nil
        /// The status of the subnet.
        var subnetStatus: String? = nil

        public init() {}

        public init(subnetIdentifier: String? = nil, subnetAvailabilityZone: AvailabilityZone? = nil, subnetStatus: String? = nil) {
            self.subnetIdentifier = subnetIdentifier
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetStatus = subnetStatus
        }

    }

    public struct EC2SecurityGroup: Serializable, Initializable {
        /// The status of the EC2 security group.
        var status: String? = nil
        /// The AWS ID of the owner of the EC2 security group specified in the EC2SecurityGroupName field. 
        var eC2SecurityGroupOwnerId: String? = nil
        /// The list of tags for the EC2 security group.
        var tags: [Tag]? = nil
        /// The name of the EC2 Security Group.
        var eC2SecurityGroupName: String? = nil

        public init() {}

        public init(status: String? = nil, eC2SecurityGroupOwnerId: String? = nil, tags: [Tag]? = nil, eC2SecurityGroupName: String? = nil) {
            self.status = status
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.tags = tags
            self.eC2SecurityGroupName = eC2SecurityGroupName
        }

    }

    public struct Parameter: Serializable, Initializable {
        /// The value of the parameter.
        var parameterValue: String? = nil
        /// The valid range of values for the parameter.
        var allowedValues: String? = nil
        /// The data type of the parameter.
        var dataType: String? = nil
        /// Specifies how to apply the WLM configuration parameter. Some properties can be applied dynamically, while other properties require that any associated clusters be rebooted for the configuration changes to be applied. For more information about parameters and parameter groups, go to Amazon Redshift Parameter Groups in the Amazon Redshift Cluster Management Guide.
        var applyType: String? = nil
        /// The name of the parameter.
        var parameterName: String? = nil
        /// The source of the parameter value, such as "engine-default" or "user".
        var source: String? = nil
        /// If true, the parameter can be modified. Some parameters have security or operational implications that prevent them from being changed. 
        var isModifiable: Bool? = nil
        /// The earliest engine version to which the parameter can apply.
        var minimumEngineVersion: String? = nil
        /// A description of the parameter.
        var description: String? = nil

        public init() {}

        public init(parameterValue: String? = nil, allowedValues: String? = nil, dataType: String? = nil, applyType: String? = nil, parameterName: String? = nil, source: String? = nil, isModifiable: Bool? = nil, minimumEngineVersion: String? = nil, description: String? = nil) {
            self.parameterValue = parameterValue
            self.allowedValues = allowedValues
            self.dataType = dataType
            self.applyType = applyType
            self.parameterName = parameterName
            self.source = source
            self.isModifiable = isModifiable
            self.minimumEngineVersion = minimumEngineVersion
            self.description = description
        }

    }

    public struct CreateClusterParameterGroupMessage: Serializable, Initializable {
        /// The name of the cluster parameter group. Constraints:   Must be 1 to 255 alphanumeric characters or hyphens   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Must be unique withing your AWS account.    This value is stored as a lower-case string. 
        var parameterGroupName: String = ""
        /// The Amazon Redshift engine version to which the cluster parameter group applies. The cluster engine version determines the set of parameters. To get a list of valid parameter group family names, you can call DescribeClusterParameterGroups. By default, Amazon Redshift returns a list of all the parameter groups that are owned by your AWS account, including the default parameter groups for each Amazon Redshift engine version. The parameter group family names associated with the default parameter groups provide you the valid values. For example, a valid family name is "redshift-1.0". 
        var parameterGroupFamily: String = ""
        /// A list of tag instances.
        var tags: [Tag]? = nil
        /// A description of the parameter group.
        var description: String = ""

        public init() {}

        public init(parameterGroupName: String, parameterGroupFamily: String, tags: [Tag]? = nil, description: String) {
            self.parameterGroupName = parameterGroupName
            self.parameterGroupFamily = parameterGroupFamily
            self.tags = tags
            self.description = description
        }

    }

    public struct DescribeHsmClientCertificatesMessage: Serializable, Initializable {
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        /// A tag value or values for which you want to return all matching HSM client certificates that are associated with the specified tag value or values. For example, suppose that you have HSM client certificates that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag values associated with them.
        var tagValues: [String]? = nil
        /// The identifier of a specific HSM client certificate for which you want information. If no identifier is specified, information is returned for all HSM client certificates owned by your AWS customer account.
        var hsmClientCertificateIdentifier: String? = nil
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeHsmClientCertificates request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        var marker: String? = nil
        /// A tag key or keys for which you want to return all matching HSM client certificates that are associated with the specified key or keys. For example, suppose that you have HSM client certificates that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the HSM client certificates that have either or both of these tag keys associated with them.
        var tagKeys: [String]? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, tagValues: [String]? = nil, hsmClientCertificateIdentifier: String? = nil, marker: String? = nil, tagKeys: [String]? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.marker = marker
            self.tagKeys = tagKeys
        }

    }

    public struct DescribeResizeMessage: Serializable, Initializable {
        /// The unique identifier of a cluster whose resize progress you are requesting. This parameter is case-sensitive. By default, resize operations for all clusters defined for an AWS account are returned.
        var clusterIdentifier: String = ""

        public init() {}

        public init(clusterIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
        }

    }

    public struct ClusterVersionsMessage: Serializable, Initializable {
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        var marker: String? = nil
        /// A list of Version elements. 
        var clusterVersions: [ClusterVersion]? = nil

        public init() {}

        public init(marker: String? = nil, clusterVersions: [ClusterVersion]? = nil) {
            self.marker = marker
            self.clusterVersions = clusterVersions
        }

    }

    public struct Event: Serializable, Initializable {
        /// The severity of the event. Values: ERROR, INFO
        var severity: String? = nil
        /// The text of this event.
        var message: String? = nil
        /// The source type for this event.
        var sourceType: String? = nil
        /// The identifier of the event.
        var eventId: String? = nil
        /// A list of the event categories. Values: Configuration, Management, Monitoring, Security
        var eventCategories: [String]? = nil
        /// The identifier for the source of the event.
        var sourceIdentifier: String? = nil
        /// The date and time of the event.
        var date: Date? = nil

        public init() {}

        public init(severity: String? = nil, message: String? = nil, sourceType: String? = nil, eventId: String? = nil, eventCategories: [String]? = nil, sourceIdentifier: String? = nil, date: Date? = nil) {
            self.severity = severity
            self.message = message
            self.sourceType = sourceType
            self.eventId = eventId
            self.eventCategories = eventCategories
            self.sourceIdentifier = sourceIdentifier
            self.date = date
        }

    }

    public struct ReservedNodeOffering: Serializable, Initializable {
        /// The charge to your account regardless of whether you are creating any clusters using the node offering. Recurring charges are only in effect for heavy-utilization reserved nodes.
        var recurringCharges: [RecurringCharge]? = nil
        /// The rate you are charged for each hour the cluster that is using the offering is running.
        var usagePrice: Double? = nil
        /// The node type offered by the reserved node offering.
        var nodeType: String? = nil
        /// The currency code for the compute nodes offering.
        var currencyCode: String? = nil
        /// The offering identifier.
        var reservedNodeOfferingId: String? = nil
        /// The duration, in seconds, for which the offering will reserve the node.
        var duration: Int32? = nil
        /// The anticipated utilization of the reserved node, as defined in the reserved node offering.
        var offeringType: String? = nil
        /// The upfront fixed charge you will pay to purchase the specific reserved node offering.
        var fixedPrice: Double? = nil

        public init() {}

        public init(recurringCharges: [RecurringCharge]? = nil, usagePrice: Double? = nil, nodeType: String? = nil, currencyCode: String? = nil, reservedNodeOfferingId: String? = nil, duration: Int32? = nil, offeringType: String? = nil, fixedPrice: Double? = nil) {
            self.recurringCharges = recurringCharges
            self.usagePrice = usagePrice
            self.nodeType = nodeType
            self.currencyCode = currencyCode
            self.reservedNodeOfferingId = reservedNodeOfferingId
            self.duration = duration
            self.offeringType = offeringType
            self.fixedPrice = fixedPrice
        }

    }

    public struct RevokeSnapshotAccessResult: Serializable, Initializable {
        var snapshot: Snapshot? = nil

        public init() {}

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

    }

    public struct CreateClusterResult: Serializable, Initializable {
        var cluster: Cluster? = nil

        public init() {}

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

    }

    public struct EventCategoriesMap: Serializable, Initializable {
        /// The source type, such as cluster or cluster-snapshot, that the returned categories belong to.
        var sourceType: String? = nil
        /// The events in the event category.
        var events: [EventInfoMap]? = nil

        public init() {}

        public init(sourceType: String? = nil, events: [EventInfoMap]? = nil) {
            self.sourceType = sourceType
            self.events = events
        }

    }

    public struct TableRestoreStatus: Serializable, Initializable {
        /// A description of the status of the table restore request. Status values include SUCCEEDED, FAILED, CANCELED, PENDING, IN_PROGRESS.
        var message: String? = nil
        /// The name of the source schema that contains the table being restored.
        var sourceSchemaName: String? = nil
        /// The amount of data restored to the new table so far, in megabytes (MB).
        var progressInMegaBytes: Int64? = nil
        /// The identifier of the Amazon Redshift cluster that the table is being restored to.
        var clusterIdentifier: String? = nil
        /// The name of the database to restore the table to.
        var targetDatabaseName: String? = nil
        /// The total amount of data to restore to the new table, in megabytes (MB).
        var totalDataInMegaBytes: Int64? = nil
        /// The time that the table restore request was made, in Universal Coordinated Time (UTC).
        var requestTime: Date? = nil
        /// The unique identifier for the table restore request.
        var tableRestoreRequestId: String? = nil
        /// A value that describes the current state of the table restore request. Valid Values: SUCCEEDED, FAILED, CANCELED, PENDING, IN_PROGRESS 
        var status: String? = nil
        /// The identifier of the snapshot that the table is being restored from.
        var snapshotIdentifier: String? = nil
        /// The name of the source database that contains the table being restored.
        var sourceDatabaseName: String? = nil
        /// The name of the source table being restored.
        var sourceTableName: String? = nil
        /// The name of the table to create as a result of the table restore request.
        var newTableName: String? = nil
        /// The name of the schema to restore the table to.
        var targetSchemaName: String? = nil

        public init() {}

        public init(message: String? = nil, sourceSchemaName: String? = nil, progressInMegaBytes: Int64? = nil, clusterIdentifier: String? = nil, targetDatabaseName: String? = nil, totalDataInMegaBytes: Int64? = nil, requestTime: Date? = nil, tableRestoreRequestId: String? = nil, status: String? = nil, snapshotIdentifier: String? = nil, sourceDatabaseName: String? = nil, sourceTableName: String? = nil, newTableName: String? = nil, targetSchemaName: String? = nil) {
            self.message = message
            self.sourceSchemaName = sourceSchemaName
            self.progressInMegaBytes = progressInMegaBytes
            self.clusterIdentifier = clusterIdentifier
            self.targetDatabaseName = targetDatabaseName
            self.totalDataInMegaBytes = totalDataInMegaBytes
            self.requestTime = requestTime
            self.tableRestoreRequestId = tableRestoreRequestId
            self.status = status
            self.snapshotIdentifier = snapshotIdentifier
            self.sourceDatabaseName = sourceDatabaseName
            self.sourceTableName = sourceTableName
            self.newTableName = newTableName
            self.targetSchemaName = targetSchemaName
        }

    }

    public struct DescribeEventSubscriptionsMessage: Serializable, Initializable {
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeEventSubscriptions request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        var marker: String? = nil
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        /// The name of the Amazon Redshift event notification subscription to be described.
        var subscriptionName: String? = nil

        public init() {}

        public init(marker: String? = nil, maxRecords: Int32? = nil, subscriptionName: String? = nil) {
            self.marker = marker
            self.maxRecords = maxRecords
            self.subscriptionName = subscriptionName
        }

    }

    public struct DescribeDefaultClusterParametersResult: Serializable, Initializable {
        var defaultClusterParameters: DefaultClusterParameters? = nil

        public init() {}

        public init(defaultClusterParameters: DefaultClusterParameters? = nil) {
            self.defaultClusterParameters = defaultClusterParameters
        }

    }

    public struct ModifyEventSubscriptionResult: Serializable, Initializable {
        var eventSubscription: EventSubscription? = nil

        public init() {}

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

    }

    public struct ClusterParameterGroupStatus: Serializable, Initializable {
        /// The list of parameter statuses.  For more information about parameters and parameter groups, go to Amazon Redshift Parameter Groups in the Amazon Redshift Cluster Management Guide.
        var clusterParameterStatusList: [ClusterParameterStatus]? = nil
        /// The status of parameter updates.
        var parameterApplyStatus: String? = nil
        /// The name of the cluster parameter group.
        var parameterGroupName: String? = nil

        public init() {}

        public init(clusterParameterStatusList: [ClusterParameterStatus]? = nil, parameterApplyStatus: String? = nil, parameterGroupName: String? = nil) {
            self.clusterParameterStatusList = clusterParameterStatusList
            self.parameterApplyStatus = parameterApplyStatus
            self.parameterGroupName = parameterGroupName
        }

    }

    public struct CreateClusterSubnetGroupMessage: Serializable, Initializable {
        /// An array of VPC subnet IDs. A maximum of 20 subnets can be modified in a single request.
        var subnetIds: [String] = []
        /// The name for the subnet group. Amazon Redshift stores the value as a lowercase string. Constraints:   Must contain no more than 255 alphanumeric characters or hyphens.   Must not be "Default".   Must be unique for all subnet groups that are created by your AWS account.   Example: examplesubnetgroup 
        var clusterSubnetGroupName: String = ""
        /// A list of tag instances.
        var tags: [Tag]? = nil
        /// A description for the subnet group.
        var description: String = ""

        public init() {}

        public init(subnetIds: [String], clusterSubnetGroupName: String, tags: [Tag]? = nil, description: String) {
            self.subnetIds = subnetIds
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.tags = tags
            self.description = description
        }

    }

    public struct CopyClusterSnapshotMessage: Serializable, Initializable {
        /// The identifier given to the new manual snapshot. Constraints:   Cannot be null, empty, or blank.   Must contain from 1 to 255 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Must be unique for the AWS account that is making the request.  
        var targetSnapshotIdentifier: String = ""
        /// The identifier for the source snapshot. Constraints:   Must be the identifier for a valid automated snapshot whose state is available.  
        var sourceSnapshotIdentifier: String = ""
        /// The identifier of the cluster the source snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name. Constraints:   Must be the identifier for a valid cluster.  
        var sourceSnapshotClusterIdentifier: String? = nil

        public init() {}

        public init(targetSnapshotIdentifier: String, sourceSnapshotIdentifier: String, sourceSnapshotClusterIdentifier: String? = nil) {
            self.targetSnapshotIdentifier = targetSnapshotIdentifier
            self.sourceSnapshotIdentifier = sourceSnapshotIdentifier
            self.sourceSnapshotClusterIdentifier = sourceSnapshotClusterIdentifier
        }

    }

    public struct DeleteHsmConfigurationMessage: Serializable, Initializable {
        /// The identifier of the Amazon Redshift HSM configuration to be deleted.
        var hsmConfigurationIdentifier: String = ""

        public init() {}

        public init(hsmConfigurationIdentifier: String) {
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
        }

    }

    public struct RestoreFromClusterSnapshotResult: Serializable, Initializable {
        var cluster: Cluster? = nil

        public init() {}

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

    }

    public struct DescribeClusterVersionsMessage: Serializable, Initializable {
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        /// The specific cluster version to return. Example: 1.0 
        var clusterVersion: String? = nil
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterVersions request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        var marker: String? = nil
        /// The name of a specific cluster parameter group family to return details for. Constraints:   Must be 1 to 255 alphanumeric characters   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens  
        var clusterParameterGroupFamily: String? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, clusterVersion: String? = nil, marker: String? = nil, clusterParameterGroupFamily: String? = nil) {
            self.maxRecords = maxRecords
            self.clusterVersion = clusterVersion
            self.marker = marker
            self.clusterParameterGroupFamily = clusterParameterGroupFamily
        }

    }

    public struct LoggingStatus: Serializable, Initializable {
        /// The message indicating that logs failed to be delivered.
        var lastFailureMessage: String? = nil
        /// The name of the S3 bucket where the log files are stored.
        var bucketName: String? = nil
        /// The prefix applied to the log file names.
        var s3KeyPrefix: String? = nil
        ///  true if logging is on, false if logging is off.
        var loggingEnabled: Bool? = nil
        /// The last time when logs failed to be delivered.
        var lastFailureTime: Date? = nil
        /// The last time that logs were delivered.
        var lastSuccessfulDeliveryTime: Date? = nil

        public init() {}

        public init(lastFailureMessage: String? = nil, bucketName: String? = nil, s3KeyPrefix: String? = nil, loggingEnabled: Bool? = nil, lastFailureTime: Date? = nil, lastSuccessfulDeliveryTime: Date? = nil) {
            self.lastFailureMessage = lastFailureMessage
            self.bucketName = bucketName
            self.s3KeyPrefix = s3KeyPrefix
            self.loggingEnabled = loggingEnabled
            self.lastFailureTime = lastFailureTime
            self.lastSuccessfulDeliveryTime = lastSuccessfulDeliveryTime
        }

    }

    public struct EnableSnapshotCopyResult: Serializable, Initializable {
        var cluster: Cluster? = nil

        public init() {}

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

    }

    public struct DeleteClusterMessage: Serializable, Initializable {
        /// The identifier of the cluster to be deleted. Constraints:   Must contain lowercase characters.   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        var clusterIdentifier: String = ""
        /// The identifier of the final snapshot that is to be created immediately before deleting the cluster. If this parameter is provided, SkipFinalClusterSnapshot must be false.  Constraints:   Must be 1 to 255 alphanumeric characters.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        var finalClusterSnapshotIdentifier: String? = nil
        /// Determines whether a final snapshot of the cluster is created before Amazon Redshift deletes the cluster. If true, a final cluster snapshot is not created. If false, a final cluster snapshot is created before the cluster is deleted.   The FinalClusterSnapshotIdentifier parameter must be specified if SkipFinalClusterSnapshot is false.  Default: false 
        var skipFinalClusterSnapshot: Bool? = nil

        public init() {}

        public init(clusterIdentifier: String, finalClusterSnapshotIdentifier: String? = nil, skipFinalClusterSnapshot: Bool? = nil) {
            self.clusterIdentifier = clusterIdentifier
            self.finalClusterSnapshotIdentifier = finalClusterSnapshotIdentifier
            self.skipFinalClusterSnapshot = skipFinalClusterSnapshot
        }

    }

    public struct DeleteClusterSecurityGroupMessage: Serializable, Initializable {
        /// The name of the cluster security group to be deleted.
        var clusterSecurityGroupName: String = ""

        public init() {}

        public init(clusterSecurityGroupName: String) {
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }

    }

    public struct DescribeReservedNodeOfferingsMessage: Serializable, Initializable {
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeReservedNodeOfferings request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        var marker: String? = nil
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        /// The unique identifier for the offering.
        var reservedNodeOfferingId: String? = nil

        public init() {}

        public init(marker: String? = nil, maxRecords: Int32? = nil, reservedNodeOfferingId: String? = nil) {
            self.marker = marker
            self.maxRecords = maxRecords
            self.reservedNodeOfferingId = reservedNodeOfferingId
        }

    }

    public struct ModifyClusterResult: Serializable, Initializable {
        var cluster: Cluster? = nil

        public init() {}

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

    }

    public struct EventSubscriptionsMessage: Serializable, Initializable {
        /// A list of event subscriptions.
        var eventSubscriptionsList: [EventSubscription]? = nil
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        var marker: String? = nil

        public init() {}

        public init(eventSubscriptionsList: [EventSubscription]? = nil, marker: String? = nil) {
            self.eventSubscriptionsList = eventSubscriptionsList
            self.marker = marker
        }

    }

    public struct ClusterParameterGroupNameMessage: Serializable, Initializable {
        /// The status of the parameter group. For example, if you made a change to a parameter group name-value pair, then the change could be pending a reboot of an associated cluster.
        var parameterGroupStatus: String? = nil
        /// The name of the cluster parameter group.
        var parameterGroupName: String? = nil

        public init() {}

        public init(parameterGroupStatus: String? = nil, parameterGroupName: String? = nil) {
            self.parameterGroupStatus = parameterGroupStatus
            self.parameterGroupName = parameterGroupName
        }

    }

    public struct TableRestoreStatusMessage: Serializable, Initializable {
        /// A list of status details for one or more table restore requests.
        var tableRestoreStatusDetails: [TableRestoreStatus]? = nil
        /// A pagination token that can be used in a subsequent DescribeTableRestoreStatus request.
        var marker: String? = nil

        public init() {}

        public init(tableRestoreStatusDetails: [TableRestoreStatus]? = nil, marker: String? = nil) {
            self.tableRestoreStatusDetails = tableRestoreStatusDetails
            self.marker = marker
        }

    }

    public struct CreateEventSubscriptionResult: Serializable, Initializable {
        var eventSubscription: EventSubscription? = nil

        public init() {}

        public init(eventSubscription: EventSubscription? = nil) {
            self.eventSubscription = eventSubscription
        }

    }

    public struct VpcSecurityGroupMembership: Serializable, Initializable {
        /// The status of the VPC security group.
        var status: String? = nil
        /// The identifier of the VPC security group.
        var vpcSecurityGroupId: String? = nil

        public init() {}

        public init(status: String? = nil, vpcSecurityGroupId: String? = nil) {
            self.status = status
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }

    }

    public struct HsmClientCertificate: Serializable, Initializable {
        /// The list of tags for the HSM client certificate.
        var tags: [Tag]? = nil
        /// The public key that the Amazon Redshift cluster will use to connect to the HSM. You must register the public key in the HSM.
        var hsmClientCertificatePublicKey: String? = nil
        /// The identifier of the HSM client certificate.
        var hsmClientCertificateIdentifier: String? = nil

        public init() {}

        public init(tags: [Tag]? = nil, hsmClientCertificatePublicKey: String? = nil, hsmClientCertificateIdentifier: String? = nil) {
            self.tags = tags
            self.hsmClientCertificatePublicKey = hsmClientCertificatePublicKey
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        }

    }

    public struct DescribeClusterSnapshotsMessage: Serializable, Initializable {
        /// A value that requests only snapshots created at or after the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.  Example: 2012-07-16T18:00:00Z 
        var startTime: Date? = nil
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        /// The snapshot identifier of the snapshot about which to return information.
        var snapshotIdentifier: String? = nil
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterSnapshots request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        var marker: String? = nil
        /// A tag key or keys for which you want to return all matching cluster snapshots that are associated with the specified key or keys. For example, suppose that you have snapshots that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag keys associated with them.
        var tagKeys: [String]? = nil
        /// The identifier of the cluster for which information about snapshots is requested.
        var clusterIdentifier: String? = nil
        /// A tag value or values for which you want to return all matching cluster snapshots that are associated with the specified tag value or values. For example, suppose that you have snapshots that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the snapshots that have either or both of these tag values associated with them.
        var tagValues: [String]? = nil
        /// The type of snapshots for which you are requesting information. By default, snapshots of all types are returned. Valid Values: automated | manual 
        var snapshotType: String? = nil
        /// A time value that requests only snapshots created at or before the specified time. The time value is specified in ISO 8601 format. For more information about ISO 8601, go to the ISO8601 Wikipedia page.  Example: 2012-07-16T18:00:00Z 
        var endTime: Date? = nil
        /// The AWS customer account used to create or copy the snapshot. Use this field to filter the results to snapshots owned by a particular account. To describe snapshots you own, either specify your AWS customer account, or do not specify the parameter.
        var ownerAccount: String? = nil

        public init() {}

        public init(startTime: Date? = nil, maxRecords: Int32? = nil, snapshotIdentifier: String? = nil, marker: String? = nil, tagKeys: [String]? = nil, clusterIdentifier: String? = nil, tagValues: [String]? = nil, snapshotType: String? = nil, endTime: Date? = nil, ownerAccount: String? = nil) {
            self.startTime = startTime
            self.maxRecords = maxRecords
            self.snapshotIdentifier = snapshotIdentifier
            self.marker = marker
            self.tagKeys = tagKeys
            self.clusterIdentifier = clusterIdentifier
            self.tagValues = tagValues
            self.snapshotType = snapshotType
            self.endTime = endTime
            self.ownerAccount = ownerAccount
        }

    }

    public struct DeleteSnapshotCopyGrantMessage: Serializable, Initializable {
        /// The name of the snapshot copy grant to delete.
        var snapshotCopyGrantName: String = ""

        public init() {}

        public init(snapshotCopyGrantName: String) {
            self.snapshotCopyGrantName = snapshotCopyGrantName
        }

    }

    public struct ClusterParameterGroupsMessage: Serializable, Initializable {
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        var marker: String? = nil
        /// A list of ClusterParameterGroup instances. Each instance describes one cluster parameter group. 
        var parameterGroups: [ClusterParameterGroup]? = nil

        public init() {}

        public init(marker: String? = nil, parameterGroups: [ClusterParameterGroup]? = nil) {
            self.marker = marker
            self.parameterGroups = parameterGroups
        }

    }

    public struct DescribeDefaultClusterParametersMessage: Serializable, Initializable {
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeDefaultClusterParameters request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        var marker: String? = nil
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        /// The name of the cluster parameter group family.
        var parameterGroupFamily: String = ""

        public init() {}

        public init(marker: String? = nil, maxRecords: Int32? = nil, parameterGroupFamily: String) {
            self.marker = marker
            self.maxRecords = maxRecords
            self.parameterGroupFamily = parameterGroupFamily
        }

    }

    public struct CreateClusterSubnetGroupResult: Serializable, Initializable {
        var clusterSubnetGroup: ClusterSubnetGroup? = nil

        public init() {}

        public init(clusterSubnetGroup: ClusterSubnetGroup? = nil) {
            self.clusterSubnetGroup = clusterSubnetGroup
        }

    }

    public struct ModifyClusterIamRolesResult: Serializable, Initializable {
        var cluster: Cluster? = nil

        public init() {}

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

    }

    public struct ClusterSecurityGroupMembership: Serializable, Initializable {
        /// The status of the cluster security group.
        var status: String? = nil
        /// The name of the cluster security group.
        var clusterSecurityGroupName: String? = nil

        public init() {}

        public init(status: String? = nil, clusterSecurityGroupName: String? = nil) {
            self.status = status
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }

    }

    public struct DescribeReservedNodesMessage: Serializable, Initializable {
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeReservedNodes request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        var marker: String? = nil
        /// Identifier for the node reservation.
        var reservedNodeId: String? = nil
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        var maxRecords: Int32? = nil

        public init() {}

        public init(marker: String? = nil, reservedNodeId: String? = nil, maxRecords: Int32? = nil) {
            self.marker = marker
            self.reservedNodeId = reservedNodeId
            self.maxRecords = maxRecords
        }

    }

    public struct CopyClusterSnapshotResult: Serializable, Initializable {
        var snapshot: Snapshot? = nil

        public init() {}

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

    }

    public struct DescribeTagsMessage: Serializable, Initializable {
        /// The maximum number or response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value. 
        var maxRecords: Int32? = nil
        /// A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
        var tagValues: [String]? = nil
        /// The type of resource with which you want to view tags. Valid resource types are:    Cluster   CIDR/IP   EC2 security group   Snapshot   Cluster security group   Subnet group   HSM connection   HSM certificate   Parameter group   Snapshot copy grant   For more information about Amazon Redshift resource types and constructing ARNs, go to Constructing an Amazon Redshift Amazon Resource Name (ARN) in the Amazon Redshift Cluster Management Guide. 
        var resourceType: String? = nil
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the marker parameter and retrying the command. If the marker field is empty, all response records have been retrieved for the request. 
        var marker: String? = nil
        /// The Amazon Resource Name (ARN) for which you want to describe the tag or tags. For example, arn:aws:redshift:us-east-1:123456789:cluster:t1. 
        var resourceName: String? = nil
        /// A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
        var tagKeys: [String]? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, tagValues: [String]? = nil, resourceType: String? = nil, marker: String? = nil, resourceName: String? = nil, tagKeys: [String]? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.resourceType = resourceType
            self.marker = marker
            self.resourceName = resourceName
            self.tagKeys = tagKeys
        }

    }

    public struct Snapshot: Serializable, Initializable {
        /// The size of the incremental backup.
        var actualIncrementalBackupSizeInMegaBytes: Double? = nil
        /// The name of the database that was created when the cluster was created.
        var dBName: String? = nil
        /// The version ID of the Amazon Redshift engine that is running on the cluster.
        var clusterVersion: String? = nil
        /// The number of megabytes per second being transferred to the snapshot backup. Returns 0 for a completed backup. 
        var currentBackupRateInMegaBytesPerSecond: Double? = nil
        /// For manual snapshots, the AWS customer account used to create or copy the snapshot. For automatic snapshots, the owner of the cluster. The owner can perform all snapshot actions, such as sharing a manual snapshot.
        var ownerAccount: String? = nil
        /// If true, the data in the snapshot is encrypted at rest.
        var encrypted: Bool? = nil
        /// The number of megabytes that have been transferred to the snapshot backup.
        var backupProgressInMegaBytes: Double? = nil
        /// The list of node types that this cluster snapshot is able to restore into.
        var restorableNodeTypes: [String]? = nil
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.  Default: false
        var enhancedVpcRouting: Bool? = nil
        /// A boolean that indicates whether the snapshot data is encrypted using the HSM keys of the source cluster. true indicates that the data is encrypted using HSM keys.
        var encryptedWithHSM: Bool? = nil
        /// The identifier of the cluster for which the snapshot was taken.
        var clusterIdentifier: String? = nil
        /// The Availability Zone in which the cluster was created.
        var availabilityZone: String? = nil
        /// The snapshot status. The value of the status depends on the API operation used.     CreateClusterSnapshot and CopyClusterSnapshot returns status as "creating".     DescribeClusterSnapshots returns status as "creating", "available", "final snapshot", or "failed".    DeleteClusterSnapshot returns status as "deleted".  
        var status: String? = nil
        /// The estimate of the time remaining before the snapshot backup will complete. Returns 0 for a completed backup. 
        var estimatedSecondsToCompletion: Int64? = nil
        /// The VPC identifier of the cluster if the snapshot is from a cluster in a VPC. Otherwise, this field is not in the output.
        var vpcId: String? = nil
        /// The time (UTC) when Amazon Redshift began the snapshot. A snapshot contains a copy of the cluster data as of this exact time.
        var snapshotCreateTime: Date? = nil
        /// A list of the AWS customer accounts authorized to restore the snapshot. Returns null if no accounts are authorized. Visible only to the snapshot owner. 
        var accountsWithRestoreAccess: [AccountWithRestoreAccess]? = nil
        /// The number of nodes in the cluster.
        var numberOfNodes: Int32? = nil
        /// The AWS Key Management Service (KMS) key ID of the encryption key that was used to encrypt data in the cluster from which the snapshot was taken.
        var kmsKeyId: String? = nil
        /// The source region from which the snapshot was copied.
        var sourceRegion: String? = nil
        /// The list of tags for the cluster snapshot.
        var tags: [Tag]? = nil
        /// The node type of the nodes in the cluster.
        var nodeType: String? = nil
        /// The snapshot type. Snapshots created using CreateClusterSnapshot and CopyClusterSnapshot will be of type "manual". 
        var snapshotType: String? = nil
        /// The time (UTC) when the cluster was originally created.
        var clusterCreateTime: Date? = nil
        /// The snapshot identifier that is provided in the request.
        var snapshotIdentifier: String? = nil
        /// The master user name for the cluster.
        var masterUsername: String? = nil
        /// The size of the complete set of backup data that would be used to restore the cluster.
        var totalBackupSizeInMegaBytes: Double? = nil
        /// The amount of time an in-progress snapshot backup has been running, or the amount of time it took a completed backup to finish.
        var elapsedTimeInSeconds: Int64? = nil
        /// The port that the cluster is listening on.
        var port: Int32? = nil

        public init() {}

        public init(actualIncrementalBackupSizeInMegaBytes: Double? = nil, dBName: String? = nil, clusterVersion: String? = nil, currentBackupRateInMegaBytesPerSecond: Double? = nil, ownerAccount: String? = nil, encrypted: Bool? = nil, backupProgressInMegaBytes: Double? = nil, restorableNodeTypes: [String]? = nil, enhancedVpcRouting: Bool? = nil, encryptedWithHSM: Bool? = nil, clusterIdentifier: String? = nil, availabilityZone: String? = nil, status: String? = nil, estimatedSecondsToCompletion: Int64? = nil, vpcId: String? = nil, snapshotCreateTime: Date? = nil, accountsWithRestoreAccess: [AccountWithRestoreAccess]? = nil, numberOfNodes: Int32? = nil, kmsKeyId: String? = nil, sourceRegion: String? = nil, tags: [Tag]? = nil, nodeType: String? = nil, snapshotType: String? = nil, clusterCreateTime: Date? = nil, snapshotIdentifier: String? = nil, masterUsername: String? = nil, totalBackupSizeInMegaBytes: Double? = nil, elapsedTimeInSeconds: Int64? = nil, port: Int32? = nil) {
            self.actualIncrementalBackupSizeInMegaBytes = actualIncrementalBackupSizeInMegaBytes
            self.dBName = dBName
            self.clusterVersion = clusterVersion
            self.currentBackupRateInMegaBytesPerSecond = currentBackupRateInMegaBytesPerSecond
            self.ownerAccount = ownerAccount
            self.encrypted = encrypted
            self.backupProgressInMegaBytes = backupProgressInMegaBytes
            self.restorableNodeTypes = restorableNodeTypes
            self.enhancedVpcRouting = enhancedVpcRouting
            self.encryptedWithHSM = encryptedWithHSM
            self.clusterIdentifier = clusterIdentifier
            self.availabilityZone = availabilityZone
            self.status = status
            self.estimatedSecondsToCompletion = estimatedSecondsToCompletion
            self.vpcId = vpcId
            self.snapshotCreateTime = snapshotCreateTime
            self.accountsWithRestoreAccess = accountsWithRestoreAccess
            self.numberOfNodes = numberOfNodes
            self.kmsKeyId = kmsKeyId
            self.sourceRegion = sourceRegion
            self.tags = tags
            self.nodeType = nodeType
            self.snapshotType = snapshotType
            self.clusterCreateTime = clusterCreateTime
            self.snapshotIdentifier = snapshotIdentifier
            self.masterUsername = masterUsername
            self.totalBackupSizeInMegaBytes = totalBackupSizeInMegaBytes
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
            self.port = port
        }

    }

    public struct EventSubscription: Serializable, Initializable {
        /// The event severity specified in the Amazon Redshift event notification subscription. Values: ERROR, INFO
        var severity: String? = nil
        /// The status of the Amazon Redshift event notification subscription. Constraints:   Can be one of the following: active | no-permission | topic-not-exist   The status "no-permission" indicates that Amazon Redshift no longer has permission to post to the Amazon SNS topic. The status "topic-not-exist" indicates that the topic was deleted after the subscription was created.  
        var status: String? = nil
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic used by the event notification subscription.
        var snsTopicArn: String? = nil
        /// A list of the sources that publish events to the Amazon Redshift event notification subscription.
        var sourceIdsList: [String]? = nil
        /// The source type of the events returned the Amazon Redshift event notification, such as cluster, or cluster-snapshot.
        var sourceType: String? = nil
        /// The name of the Amazon Redshift event notification subscription.
        var custSubscriptionId: String? = nil
        /// A Boolean value indicating whether the subscription is enabled. true indicates the subscription is enabled.
        var enabled: Bool? = nil
        /// The list of tags for the event subscription.
        var tags: [Tag]? = nil
        /// The AWS customer account associated with the Amazon Redshift event notification subscription.
        var customerAwsId: String? = nil
        /// The list of Amazon Redshift event categories specified in the event notification subscription. Values: Configuration, Management, Monitoring, Security
        var eventCategoriesList: [String]? = nil
        /// The date and time the Amazon Redshift event notification subscription was created.
        var subscriptionCreationTime: Date? = nil

        public init() {}

        public init(severity: String? = nil, status: String? = nil, snsTopicArn: String? = nil, sourceIdsList: [String]? = nil, sourceType: String? = nil, custSubscriptionId: String? = nil, enabled: Bool? = nil, tags: [Tag]? = nil, customerAwsId: String? = nil, eventCategoriesList: [String]? = nil, subscriptionCreationTime: Date? = nil) {
            self.severity = severity
            self.status = status
            self.snsTopicArn = snsTopicArn
            self.sourceIdsList = sourceIdsList
            self.sourceType = sourceType
            self.custSubscriptionId = custSubscriptionId
            self.enabled = enabled
            self.tags = tags
            self.customerAwsId = customerAwsId
            self.eventCategoriesList = eventCategoriesList
            self.subscriptionCreationTime = subscriptionCreationTime
        }

    }

    public struct CreateSnapshotCopyGrantMessage: Serializable, Initializable {
        /// The name of the snapshot copy grant. This name must be unique in the region for the AWS account. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   Alphabetic characters must be lowercase.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Must be unique for all clusters within an AWS account.  
        var snapshotCopyGrantName: String = ""
        /// A list of tag instances.
        var tags: [Tag]? = nil
        /// The unique identifier of the customer master key (CMK) to which to grant Amazon Redshift permission. If no key is specified, the default key is used.
        var kmsKeyId: String? = nil

        public init() {}

        public init(snapshotCopyGrantName: String, tags: [Tag]? = nil, kmsKeyId: String? = nil) {
            self.snapshotCopyGrantName = snapshotCopyGrantName
            self.tags = tags
            self.kmsKeyId = kmsKeyId
        }

    }

    public struct ElasticIpStatus: Serializable, Initializable {
        /// The elastic IP (EIP) address for the cluster.
        var elasticIp: String? = nil
        /// The status of the elastic IP (EIP) address.
        var status: String? = nil

        public init() {}

        public init(elasticIp: String? = nil, status: String? = nil) {
            self.elasticIp = elasticIp
            self.status = status
        }

    }

    public struct DescribeEventCategoriesMessage: Serializable, Initializable {
        /// The source type, such as cluster or parameter group, to which the described event categories apply. Valid values: cluster, cluster-snapshot, cluster-parameter-group, and cluster-security-group.
        var sourceType: String? = nil

        public init() {}

        public init(sourceType: String? = nil) {
            self.sourceType = sourceType
        }

    }

    public struct DeleteClusterParameterGroupMessage: Serializable, Initializable {
        /// The name of the parameter group to be deleted. Constraints:   Must be the name of an existing cluster parameter group.   Cannot delete a default cluster parameter group.  
        var parameterGroupName: String = ""

        public init() {}

        public init(parameterGroupName: String) {
            self.parameterGroupName = parameterGroupName
        }

    }

    public struct CreateHsmClientCertificateMessage: Serializable, Initializable {
        /// A list of tag instances.
        var tags: [Tag]? = nil
        /// The identifier to be assigned to the new HSM client certificate that the cluster will use to connect to the HSM to use the database encryption keys.
        var hsmClientCertificateIdentifier: String = ""

        public init() {}

        public init(tags: [Tag]? = nil, hsmClientCertificateIdentifier: String) {
            self.tags = tags
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
        }

    }

    public struct DescribeSnapshotCopyGrantsMessage: Serializable, Initializable {
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        /// A tag value or values for which you want to return all matching resources that are associated with the specified value or values. For example, suppose that you have resources tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with all resources that have either or both of these tag values associated with them.
        var tagValues: [String]? = nil
        /// The name of the snapshot copy grant.
        var snapshotCopyGrantName: String? = nil
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeSnapshotCopyGrant request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.  Constraints: You can specify either the SnapshotCopyGrantName parameter or the Marker parameter, but not both. 
        var marker: String? = nil
        /// A tag key or keys for which you want to return all matching resources that are associated with the specified key or keys. For example, suppose that you have resources tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with all resources that have either or both of these tag keys associated with them.
        var tagKeys: [String]? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, tagValues: [String]? = nil, snapshotCopyGrantName: String? = nil, marker: String? = nil, tagKeys: [String]? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.snapshotCopyGrantName = snapshotCopyGrantName
            self.marker = marker
            self.tagKeys = tagKeys
        }

    }

    public struct ClustersMessage: Serializable, Initializable {
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        var marker: String? = nil
        /// A list of Cluster objects, where each object describes one cluster. 
        var clusters: [Cluster]? = nil

        public init() {}

        public init(marker: String? = nil, clusters: [Cluster]? = nil) {
            self.marker = marker
            self.clusters = clusters
        }

    }

    public struct PurchaseReservedNodeOfferingResult: Serializable, Initializable {
        var reservedNode: ReservedNode? = nil

        public init() {}

        public init(reservedNode: ReservedNode? = nil) {
            self.reservedNode = reservedNode
        }

    }

    public struct DefaultClusterParameters: Serializable, Initializable {
        /// The list of cluster default parameters.
        var parameters: [Parameter]? = nil
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        var marker: String? = nil
        /// The name of the cluster parameter group family to which the engine default parameters apply.
        var parameterGroupFamily: String? = nil

        public init() {}

        public init(parameters: [Parameter]? = nil, marker: String? = nil, parameterGroupFamily: String? = nil) {
            self.parameters = parameters
            self.marker = marker
            self.parameterGroupFamily = parameterGroupFamily
        }

    }

    public struct ModifyClusterMessage: Serializable, Initializable {
        /// A list of cluster security groups to be authorized on this cluster. This change is asynchronously applied as soon as possible. Security groups currently associated with the cluster, and not in the list of groups to apply, will be revoked from the cluster. Constraints:   Must be 1 to 255 alphanumeric characters or hyphens   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens  
        var clusterSecurityGroups: [String]? = nil
        /// The new version number of the Amazon Redshift engine to upgrade to. For major version upgrades, if a non-default cluster parameter group is currently in use, a new cluster parameter group in the cluster parameter group family for the new version must be specified. The new cluster parameter group can be the default for that cluster parameter group family. For more information about parameters and parameter groups, go to Amazon Redshift Parameter Groups in the Amazon Redshift Cluster Management Guide. Example: 1.0 
        var clusterVersion: String? = nil
        /// The new identifier for the cluster. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   Alphabetic characters must be lowercase.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Must be unique for all clusters within an AWS account.   Example: examplecluster 
        var newClusterIdentifier: String? = nil
        /// The new node type of the cluster. If you specify a new node type, you must also specify the number of nodes parameter. When you submit your request to resize a cluster, Amazon Redshift sets access permissions for the cluster to read-only. After Amazon Redshift provisions a new cluster according to your resize requirements, there will be a temporary outage while the old cluster is deleted and your connection is switched to the new cluster. When the new connection is complete, the original access permissions for the cluster are restored. You can use DescribeResize to track the progress of the resize request.  Valid Values:  ds1.xlarge | ds1.8xlarge |  ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge.
        var nodeType: String? = nil
        /// A list of virtual private cloud (VPC) security groups to be associated with the cluster.
        var vpcSecurityGroupIds: [String]? = nil
        /// The new cluster type. When you submit your cluster resize request, your existing cluster goes into a read-only mode. After Amazon Redshift provisions a new cluster based on your resize requirements, there will be outage for a period while the old cluster is deleted and your connection is switched to the new cluster. You can use DescribeResize to track the progress of the resize request.  Valid Values:  multi-node | single-node  
        var clusterType: String? = nil
        /// The unique identifier of the cluster to be modified. Example: examplecluster 
        var clusterIdentifier: String = ""
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.  Default: false
        var enhancedVpcRouting: Bool? = nil
        /// The new password for the cluster master user. This change is asynchronously applied as soon as possible. Between the time of the request and the completion of the request, the MasterUserPassword element exists in the PendingModifiedValues element of the operation response.   Operations never return the password, so this operation provides a way to regain access to the master user account for a cluster if the password is lost.  Default: Uses existing setting. Constraints:   Must be between 8 and 64 characters in length.   Must contain at least one uppercase letter.   Must contain at least one lowercase letter.   Must contain one number.   Can be any printable ASCII character (ASCII code 33 to 126) except ' (single quote), " (double quote), \, /, @, or space.  
        var masterUserPassword: String? = nil
        /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with CreateClusterSnapshot.  If you decrease the automated snapshot retention period from its current value, existing automated snapshots that fall outside of the new retention period will be immediately deleted. Default: Uses existing setting. Constraints: Must be a value from 0 to 35.
        var automatedSnapshotRetentionPeriod: Int32? = nil
        /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
        var hsmConfigurationIdentifier: String? = nil
        /// If true, the cluster can be accessed from a public network. Only clusters in VPCs can be set to be publicly available.
        var publiclyAccessible: Bool? = nil
        /// The name of the cluster parameter group to apply to this cluster. This change is applied only after the cluster is rebooted. To reboot a cluster use RebootCluster.  Default: Uses existing setting. Constraints: The cluster parameter group must be in the same parameter group family that matches the cluster version.
        var clusterParameterGroupName: String? = nil
        /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
        var hsmClientCertificateIdentifier: String? = nil
        /// The Elastic IP (EIP) address for the cluster. Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to Supported Platforms to Launch Your Cluster in the Amazon Redshift Cluster Management Guide.
        var elasticIp: String? = nil
        /// The weekly time range (in UTC) during which system maintenance can occur, if necessary. If system maintenance is necessary during the window, it may result in an outage. This maintenance window change is made immediately. If the new maintenance window indicates the current time, there must be at least 120 minutes between the current time and end of the window in order to ensure that pending changes are applied. Default: Uses existing setting. Format: ddd:hh24:mi-ddd:hh24:mi, for example wed:07:30-wed:08:00. Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Must be at least 30 minutes.
        var preferredMaintenanceWindow: String? = nil
        /// If true, major version upgrades will be applied automatically to the cluster during the maintenance window.  Default: false 
        var allowVersionUpgrade: Bool? = nil
        /// The new number of nodes of the cluster. If you specify a new number of nodes, you must also specify the node type parameter. When you submit your request to resize a cluster, Amazon Redshift sets access permissions for the cluster to read-only. After Amazon Redshift provisions a new cluster according to your resize requirements, there will be a temporary outage while the old cluster is deleted and your connection is switched to the new cluster. When the new connection is complete, the original access permissions for the cluster are restored. You can use DescribeResize to track the progress of the resize request.  Valid Values: Integer greater than 0.
        var numberOfNodes: Int32? = nil

        public init() {}

        public init(clusterSecurityGroups: [String]? = nil, clusterVersion: String? = nil, newClusterIdentifier: String? = nil, nodeType: String? = nil, vpcSecurityGroupIds: [String]? = nil, clusterType: String? = nil, clusterIdentifier: String, enhancedVpcRouting: Bool? = nil, masterUserPassword: String? = nil, automatedSnapshotRetentionPeriod: Int32? = nil, hsmConfigurationIdentifier: String? = nil, publiclyAccessible: Bool? = nil, clusterParameterGroupName: String? = nil, hsmClientCertificateIdentifier: String? = nil, elasticIp: String? = nil, preferredMaintenanceWindow: String? = nil, allowVersionUpgrade: Bool? = nil, numberOfNodes: Int32? = nil) {
            self.clusterSecurityGroups = clusterSecurityGroups
            self.clusterVersion = clusterVersion
            self.newClusterIdentifier = newClusterIdentifier
            self.nodeType = nodeType
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.clusterType = clusterType
            self.clusterIdentifier = clusterIdentifier
            self.enhancedVpcRouting = enhancedVpcRouting
            self.masterUserPassword = masterUserPassword
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.publiclyAccessible = publiclyAccessible
            self.clusterParameterGroupName = clusterParameterGroupName
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.elasticIp = elasticIp
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.allowVersionUpgrade = allowVersionUpgrade
            self.numberOfNodes = numberOfNodes
        }

    }

    public struct RotateEncryptionKeyResult: Serializable, Initializable {
        var cluster: Cluster? = nil

        public init() {}

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

    }

    public struct DescribeClusterSubnetGroupsMessage: Serializable, Initializable {
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        /// A tag value or values for which you want to return all matching cluster subnet groups that are associated with the specified tag value or values. For example, suppose that you have subnet groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag values associated with them.
        var tagValues: [String]? = nil
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterSubnetGroups request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        var marker: String? = nil
        /// The name of the cluster subnet group for which information is requested.
        var clusterSubnetGroupName: String? = nil
        /// A tag key or keys for which you want to return all matching cluster subnet groups that are associated with the specified key or keys. For example, suppose that you have subnet groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the subnet groups that have either or both of these tag keys associated with them.
        var tagKeys: [String]? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, tagValues: [String]? = nil, marker: String? = nil, clusterSubnetGroupName: String? = nil, tagKeys: [String]? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.marker = marker
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.tagKeys = tagKeys
        }

    }

    public struct ModifyClusterIamRolesMessage: Serializable, Initializable {
        /// The unique identifier of the cluster for which you want to associate or disassociate IAM roles.
        var clusterIdentifier: String = ""
        /// Zero or more IAM roles to associate with the cluster. The roles must be in their Amazon Resource Name (ARN) format. You can associate up to 10 IAM roles with a single cluster in a single request.
        var addIamRoles: [String]? = nil
        /// Zero or more IAM roles in ARN format to disassociate from the cluster. You can disassociate up to 10 IAM roles from a single cluster in a single request.
        var removeIamRoles: [String]? = nil

        public init() {}

        public init(clusterIdentifier: String, addIamRoles: [String]? = nil, removeIamRoles: [String]? = nil) {
            self.clusterIdentifier = clusterIdentifier
            self.addIamRoles = addIamRoles
            self.removeIamRoles = removeIamRoles
        }

    }

    public struct ClusterIamRole: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the IAM role, for example, arn:aws:iam::123456789012:role/RedshiftCopyUnload. 
        var iamRoleArn: String? = nil
        /// A value that describes the status of the IAM role's association with an Amazon Redshift cluster. The following are possible statuses and descriptions.    in-sync: The role is available for use by the cluster.    adding: The role is in the process of being associated with the cluster.    removing: The role is in the process of being disassociated with the cluster.  
        var applyStatus: String? = nil

        public init() {}

        public init(iamRoleArn: String? = nil, applyStatus: String? = nil) {
            self.iamRoleArn = iamRoleArn
            self.applyStatus = applyStatus
        }

    }

    public struct CreateClusterSnapshotMessage: Serializable, Initializable {
        /// The cluster identifier for which you want a snapshot.
        var clusterIdentifier: String = ""
        /// A list of tag instances.
        var tags: [Tag]? = nil
        /// A unique identifier for the snapshot that you are requesting. This identifier must be unique for all snapshots within the AWS account. Constraints:   Cannot be null, empty, or blank   Must contain from 1 to 255 alphanumeric characters or hyphens   First character must be a letter   Cannot end with a hyphen or contain two consecutive hyphens   Example: my-snapshot-id 
        var snapshotIdentifier: String = ""

        public init() {}

        public init(clusterIdentifier: String, tags: [Tag]? = nil, snapshotIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
            self.tags = tags
            self.snapshotIdentifier = snapshotIdentifier
        }

    }

    public struct ClusterParameterGroupDetails: Serializable, Initializable {
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        var marker: String? = nil
        /// A list of Parameter instances. Each instance lists the parameters of one cluster parameter group. 
        var parameters: [Parameter]? = nil

        public init() {}

        public init(marker: String? = nil, parameters: [Parameter]? = nil) {
            self.marker = marker
            self.parameters = parameters
        }

    }

    public struct AuthorizeClusterSecurityGroupIngressResult: Serializable, Initializable {
        var clusterSecurityGroup: ClusterSecurityGroup? = nil

        public init() {}

        public init(clusterSecurityGroup: ClusterSecurityGroup? = nil) {
            self.clusterSecurityGroup = clusterSecurityGroup
        }

    }

    public struct ClusterSecurityGroup: Serializable, Initializable {
        /// A description of the security group.
        var description: String? = nil
        /// A list of IP ranges (CIDR blocks) that are permitted to access clusters associated with this cluster security group.
        var iPRanges: [IPRange]? = nil
        /// A list of EC2 security groups that are permitted to access clusters associated with this cluster security group.
        var eC2SecurityGroups: [EC2SecurityGroup]? = nil
        /// The list of tags for the cluster security group.
        var tags: [Tag]? = nil
        /// The name of the cluster security group to which the operation was applied.
        var clusterSecurityGroupName: String? = nil

        public init() {}

        public init(description: String? = nil, iPRanges: [IPRange]? = nil, eC2SecurityGroups: [EC2SecurityGroup]? = nil, tags: [Tag]? = nil, clusterSecurityGroupName: String? = nil) {
            self.description = description
            self.iPRanges = iPRanges
            self.eC2SecurityGroups = eC2SecurityGroups
            self.tags = tags
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }

    }

    public struct TaggedResource: Serializable, Initializable {
        /// The tag for the resource.
        var tag: Tag? = nil
        /// The Amazon Resource Name (ARN) with which the tag is associated. For example, arn:aws:redshift:us-east-1:123456789:cluster:t1.
        var resourceName: String? = nil
        /// The type of resource with which the tag is associated. Valid resource types are:    Cluster   CIDR/IP   EC2 security group   Snapshot   Cluster security group   Subnet group   HSM connection   HSM certificate   Parameter group   For more information about Amazon Redshift resource types and constructing ARNs, go to Constructing an Amazon Redshift Amazon Resource Name (ARN) in the Amazon Redshift Cluster Management Guide. 
        var resourceType: String? = nil

        public init() {}

        public init(tag: Tag? = nil, resourceName: String? = nil, resourceType: String? = nil) {
            self.tag = tag
            self.resourceName = resourceName
            self.resourceType = resourceType
        }

    }

    public struct ReservedNodeOfferingsMessage: Serializable, Initializable {
        /// A list of ReservedNodeOffering objects.
        var reservedNodeOfferings: [ReservedNodeOffering]? = nil
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        var marker: String? = nil

        public init() {}

        public init(reservedNodeOfferings: [ReservedNodeOffering]? = nil, marker: String? = nil) {
            self.reservedNodeOfferings = reservedNodeOfferings
            self.marker = marker
        }

    }

    public struct ClusterNode: Serializable, Initializable {
        /// Whether the node is a leader node or a compute node.
        var nodeRole: String? = nil
        /// The private IP address of a node within a cluster.
        var privateIPAddress: String? = nil
        /// The public IP address of a node within a cluster.
        var publicIPAddress: String? = nil

        public init() {}

        public init(nodeRole: String? = nil, privateIPAddress: String? = nil, publicIPAddress: String? = nil) {
            self.nodeRole = nodeRole
            self.privateIPAddress = privateIPAddress
            self.publicIPAddress = publicIPAddress
        }

    }

    public struct SnapshotCopyGrantMessage: Serializable, Initializable {
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeSnapshotCopyGrant request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.  Constraints: You can specify either the SnapshotCopyGrantName parameter or the Marker parameter, but not both. 
        var marker: String? = nil
        /// The list of SnapshotCopyGrant objects.
        var snapshotCopyGrants: [SnapshotCopyGrant]? = nil

        public init() {}

        public init(marker: String? = nil, snapshotCopyGrants: [SnapshotCopyGrant]? = nil) {
            self.marker = marker
            self.snapshotCopyGrants = snapshotCopyGrants
        }

    }

    public struct Cluster: Serializable, Initializable {
        /// The nodes in the cluster.
        var clusterNodes: [ClusterNode]? = nil
        /// The name of the initial database that was created when the cluster was created. This same name is returned for the life of the cluster. If an initial database was not specified, a database named devdev was created by default. 
        var dBName: String? = nil
        /// A list of Amazon Virtual Private Cloud (Amazon VPC) security groups that are associated with the cluster. This parameter is returned only if the cluster is in a VPC.
        var vpcSecurityGroups: [VpcSecurityGroupMembership]? = nil
        /// The version ID of the Amazon Redshift engine that is running on the cluster.
        var clusterVersion: String? = nil
        /// A Boolean value that, if true, indicates that data in the cluster is encrypted at rest.
        var encrypted: Bool? = nil
        /// The unique identifier of the cluster.
        var clusterIdentifier: String? = nil
        /// The number of days that automatic cluster snapshots are retained.
        var automatedSnapshotRetentionPeriod: Int32? = nil
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.  Default: false
        var enhancedVpcRouting: Bool? = nil
        /// A value that returns the destination region and retention period that are configured for cross-region snapshot copy.
        var clusterSnapshotCopyStatus: ClusterSnapshotCopyStatus? = nil
        /// The name of the Availability Zone in which the cluster is located.
        var availabilityZone: String? = nil
        /// A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services.
        var iamRoles: [ClusterIamRole]? = nil
        ///  The current state of the cluster. Possible values are the following:    available     creating     deleting     final-snapshot     hardware-failure     incompatible-hsm     incompatible-network     incompatible-parameters     incompatible-restore     modifying     rebooting     renaming     resizing     rotating-keys     storage-full     updating-hsm   
        var clusterStatus: String? = nil
        /// The identifier of the VPC the cluster is in, if the cluster is in a VPC.
        var vpcId: String? = nil
        /// The weekly time range, in Universal Coordinated Time (UTC), during which system maintenance can occur.
        var preferredMaintenanceWindow: String? = nil
        /// The number of compute nodes in the cluster.
        var numberOfNodes: Int32? = nil
        /// The connection endpoint.
        var endpoint: Endpoint? = nil
        /// The specific revision number of the database in the cluster.
        var clusterRevisionNumber: String? = nil
        /// The AWS Key Management Service (AWS KMS) key ID of the encryption key used to encrypt data in the cluster.
        var kmsKeyId: String? = nil
        /// A value that, if present, indicates that changes to the cluster are pending. Specific pending changes are identified by subelements.
        var pendingModifiedValues: PendingModifiedValues? = nil
        /// A list of cluster security group that are associated with the cluster. Each security group is represented by an element that contains ClusterSecurityGroup.Name and ClusterSecurityGroup.Status subelements.  Cluster security groups are used when the cluster is not created in an Amazon Virtual Private Cloud (VPC). Clusters that are created in a VPC use VPC security groups, which are listed by the VpcSecurityGroups parameter. 
        var clusterSecurityGroups: [ClusterSecurityGroupMembership]? = nil
        /// The list of cluster parameter groups that are associated with this cluster. Each parameter group in the list is returned with its status.
        var clusterParameterGroups: [ClusterParameterGroupStatus]? = nil
        /// The list of tags for the cluster.
        var tags: [Tag]? = nil
        /// The node type for the nodes in the cluster.
        var nodeType: String? = nil
        /// The public key for the cluster.
        var clusterPublicKey: String? = nil
        /// A value that reports whether the Amazon Redshift cluster has finished applying any hardware security module (HSM) settings changes specified in a modify cluster command. Values: active, applying
        var hsmStatus: HsmStatus? = nil
        /// The date and time that the cluster was created.
        var clusterCreateTime: Date? = nil
        /// A Boolean value that, if true, indicates that the cluster can be accessed from a public network.
        var publiclyAccessible: Bool? = nil
        /// The status of the elastic IP (EIP) address.
        var elasticIpStatus: ElasticIpStatus? = nil
        /// A value that describes the status of a cluster restore action. This parameter returns null if the cluster was not created by restoring a snapshot.
        var restoreStatus: RestoreStatus? = nil
        /// The name of the subnet group that is associated with the cluster. This parameter is valid only when the cluster is in a VPC.
        var clusterSubnetGroupName: String? = nil
        /// The master user name for the cluster. This name is used to connect to the database that is specified in the DBName parameter. 
        var masterUsername: String? = nil
        /// A Boolean value that, if true, indicates that major version upgrades will be applied automatically to the cluster during the maintenance window. 
        var allowVersionUpgrade: Bool? = nil
        /// The status of a modify operation, if any, initiated for the cluster.
        var modifyStatus: String? = nil

        public init() {}

        public init(clusterNodes: [ClusterNode]? = nil, dBName: String? = nil, vpcSecurityGroups: [VpcSecurityGroupMembership]? = nil, clusterVersion: String? = nil, encrypted: Bool? = nil, clusterIdentifier: String? = nil, automatedSnapshotRetentionPeriod: Int32? = nil, enhancedVpcRouting: Bool? = nil, clusterSnapshotCopyStatus: ClusterSnapshotCopyStatus? = nil, availabilityZone: String? = nil, iamRoles: [ClusterIamRole]? = nil, clusterStatus: String? = nil, vpcId: String? = nil, preferredMaintenanceWindow: String? = nil, numberOfNodes: Int32? = nil, endpoint: Endpoint? = nil, clusterRevisionNumber: String? = nil, kmsKeyId: String? = nil, pendingModifiedValues: PendingModifiedValues? = nil, clusterSecurityGroups: [ClusterSecurityGroupMembership]? = nil, clusterParameterGroups: [ClusterParameterGroupStatus]? = nil, tags: [Tag]? = nil, nodeType: String? = nil, clusterPublicKey: String? = nil, hsmStatus: HsmStatus? = nil, clusterCreateTime: Date? = nil, publiclyAccessible: Bool? = nil, elasticIpStatus: ElasticIpStatus? = nil, restoreStatus: RestoreStatus? = nil, clusterSubnetGroupName: String? = nil, masterUsername: String? = nil, allowVersionUpgrade: Bool? = nil, modifyStatus: String? = nil) {
            self.clusterNodes = clusterNodes
            self.dBName = dBName
            self.vpcSecurityGroups = vpcSecurityGroups
            self.clusterVersion = clusterVersion
            self.encrypted = encrypted
            self.clusterIdentifier = clusterIdentifier
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.enhancedVpcRouting = enhancedVpcRouting
            self.clusterSnapshotCopyStatus = clusterSnapshotCopyStatus
            self.availabilityZone = availabilityZone
            self.iamRoles = iamRoles
            self.clusterStatus = clusterStatus
            self.vpcId = vpcId
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.numberOfNodes = numberOfNodes
            self.endpoint = endpoint
            self.clusterRevisionNumber = clusterRevisionNumber
            self.kmsKeyId = kmsKeyId
            self.pendingModifiedValues = pendingModifiedValues
            self.clusterSecurityGroups = clusterSecurityGroups
            self.clusterParameterGroups = clusterParameterGroups
            self.tags = tags
            self.nodeType = nodeType
            self.clusterPublicKey = clusterPublicKey
            self.hsmStatus = hsmStatus
            self.clusterCreateTime = clusterCreateTime
            self.publiclyAccessible = publiclyAccessible
            self.elasticIpStatus = elasticIpStatus
            self.restoreStatus = restoreStatus
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.masterUsername = masterUsername
            self.allowVersionUpgrade = allowVersionUpgrade
            self.modifyStatus = modifyStatus
        }

    }

    public struct CreateClusterSnapshotResult: Serializable, Initializable {
        var snapshot: Snapshot? = nil

        public init() {}

        public init(snapshot: Snapshot? = nil) {
            self.snapshot = snapshot
        }

    }

    public struct ModifyEventSubscriptionMessage: Serializable, Initializable {
        /// Specifies the Amazon Redshift event severity to be published by the event notification subscription. Values: ERROR, INFO
        var severity: String? = nil
        /// The Amazon Resource Name (ARN) of the SNS topic to be used by the event notification subscription.
        var snsTopicArn: String? = nil
        /// The name of the modified Amazon Redshift event notification subscription.
        var subscriptionName: String = ""
        /// The type of source that will be generating the events. For example, if you want to be notified of events generated by a cluster, you would set this parameter to cluster. If this value is not specified, events are returned for all Amazon Redshift objects in your AWS account. You must specify a source type in order to specify source IDs. Valid values: cluster, cluster-parameter-group, cluster-security-group, and cluster-snapshot.
        var sourceType: String? = nil
        /// Specifies the Amazon Redshift event categories to be published by the event notification subscription. Values: Configuration, Management, Monitoring, Security
        var eventCategories: [String]? = nil
        /// A Boolean value indicating if the subscription is enabled. true indicates the subscription is enabled 
        var enabled: Bool? = nil
        /// A list of one or more identifiers of Amazon Redshift source objects. All of the objects must be of the same type as was specified in the source type parameter. The event subscription will return only events generated by the specified objects. If not specified, then events are returned for all objects within the source type specified. Example: my-cluster-1, my-cluster-2 Example: my-snapshot-20131010
        var sourceIds: [String]? = nil

        public init() {}

        public init(severity: String? = nil, snsTopicArn: String? = nil, subscriptionName: String, sourceType: String? = nil, eventCategories: [String]? = nil, enabled: Bool? = nil, sourceIds: [String]? = nil) {
            self.severity = severity
            self.snsTopicArn = snsTopicArn
            self.subscriptionName = subscriptionName
            self.sourceType = sourceType
            self.eventCategories = eventCategories
            self.enabled = enabled
            self.sourceIds = sourceIds
        }

    }

    public struct ClusterSnapshotCopyStatus: Serializable, Initializable {
        /// The destination region that snapshots are automatically copied to when cross-region snapshot copy is enabled.
        var destinationRegion: String? = nil
        /// The number of days that automated snapshots are retained in the destination region after they are copied from a source region.
        var retentionPeriod: Int64? = nil
        /// The name of the snapshot copy grant.
        var snapshotCopyGrantName: String? = nil

        public init() {}

        public init(destinationRegion: String? = nil, retentionPeriod: Int64? = nil, snapshotCopyGrantName: String? = nil) {
            self.destinationRegion = destinationRegion
            self.retentionPeriod = retentionPeriod
            self.snapshotCopyGrantName = snapshotCopyGrantName
        }

    }

    public struct AvailabilityZone: Serializable, Initializable {
        /// The name of the availability zone.
        var name: String? = nil

        public init() {}

        public init(name: String? = nil) {
            self.name = name
        }

    }

    public struct ModifyClusterSubnetGroupResult: Serializable, Initializable {
        var clusterSubnetGroup: ClusterSubnetGroup? = nil

        public init() {}

        public init(clusterSubnetGroup: ClusterSubnetGroup? = nil) {
            self.clusterSubnetGroup = clusterSubnetGroup
        }

    }

    public struct HsmConfiguration: Serializable, Initializable {
        /// The IP address that the Amazon Redshift cluster must use to access the HSM.
        var hsmIpAddress: String? = nil
        /// The name of the partition in the HSM where the Amazon Redshift clusters will store their database encryption keys.
        var hsmPartitionName: String? = nil
        /// The list of tags for the HSM configuration.
        var tags: [Tag]? = nil
        /// The name of the Amazon Redshift HSM configuration.
        var hsmConfigurationIdentifier: String? = nil
        /// A text description of the HSM configuration.
        var description: String? = nil

        public init() {}

        public init(hsmIpAddress: String? = nil, hsmPartitionName: String? = nil, tags: [Tag]? = nil, hsmConfigurationIdentifier: String? = nil, description: String? = nil) {
            self.hsmIpAddress = hsmIpAddress
            self.hsmPartitionName = hsmPartitionName
            self.tags = tags
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.description = description
        }

    }

    public struct DisableLoggingMessage: Serializable, Initializable {
        /// The identifier of the cluster on which logging is to be stopped. Example: examplecluster 
        var clusterIdentifier: String = ""

        public init() {}

        public init(clusterIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
        }

    }

    public struct DescribeClustersMessage: Serializable, Initializable {
        /// The unique identifier of a cluster whose properties you are requesting. This parameter is case sensitive. The default is that all clusters defined for an account are returned.
        var clusterIdentifier: String? = nil
        /// A tag value or values for which you want to return all matching clusters that are associated with the specified tag value or values. For example, suppose that you have clusters that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag values associated with them.
        var tagValues: [String]? = nil
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusters request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request.  Constraints: You can specify either the ClusterIdentifier parameter or the Marker parameter, but not both. 
        var marker: String? = nil
        /// A tag key or keys for which you want to return all matching clusters that are associated with the specified key or keys. For example, suppose that you have clusters that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the clusters that have either or both of these tag keys associated with them.
        var tagKeys: [String]? = nil

        public init() {}

        public init(clusterIdentifier: String? = nil, tagValues: [String]? = nil, maxRecords: Int32? = nil, marker: String? = nil, tagKeys: [String]? = nil) {
            self.clusterIdentifier = clusterIdentifier
            self.tagValues = tagValues
            self.maxRecords = maxRecords
            self.marker = marker
            self.tagKeys = tagKeys
        }

    }

    public struct RotateEncryptionKeyMessage: Serializable, Initializable {
        /// The unique identifier of the cluster that you want to rotate the encryption keys for. Constraints: Must be the name of valid cluster that has encryption enabled.
        var clusterIdentifier: String = ""

        public init() {}

        public init(clusterIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
        }

    }

    public struct RevokeClusterSecurityGroupIngressMessage: Serializable, Initializable {
        /// The IP range for which to revoke access. This range must be a valid Classless Inter-Domain Routing (CIDR) block of IP addresses. If CIDRIP is specified, EC2SecurityGroupName and EC2SecurityGroupOwnerId cannot be provided. 
        var cIDRIP: String? = nil
        /// The name of the EC2 Security Group whose access is to be revoked. If EC2SecurityGroupName is specified, EC2SecurityGroupOwnerId must also be provided and CIDRIP cannot be provided. 
        var eC2SecurityGroupName: String? = nil
        /// The AWS account number of the owner of the security group specified in the EC2SecurityGroupName parameter. The AWS access key ID is not an acceptable value. If EC2SecurityGroupOwnerId is specified, EC2SecurityGroupName must also be provided. and CIDRIP cannot be provided.  Example: 111122223333 
        var eC2SecurityGroupOwnerId: String? = nil
        /// The name of the security Group from which to revoke the ingress rule.
        var clusterSecurityGroupName: String = ""

        public init() {}

        public init(cIDRIP: String? = nil, eC2SecurityGroupName: String? = nil, eC2SecurityGroupOwnerId: String? = nil, clusterSecurityGroupName: String) {
            self.cIDRIP = cIDRIP
            self.eC2SecurityGroupName = eC2SecurityGroupName
            self.eC2SecurityGroupOwnerId = eC2SecurityGroupOwnerId
            self.clusterSecurityGroupName = clusterSecurityGroupName
        }

    }

    public struct EnableLoggingMessage: Serializable, Initializable {
        /// The identifier of the cluster on which logging is to be started. Example: examplecluster 
        var clusterIdentifier: String = ""
        /// The name of an existing S3 bucket where the log files are to be stored. Constraints:   Must be in the same region as the cluster   The cluster must have read bucket and put object permissions  
        var bucketName: String = ""
        /// The prefix applied to the log file names. Constraints:   Cannot exceed 512 characters   Cannot contain spaces( ), double quotes ("), single quotes ('), a backslash (\), or control characters. The hexadecimal codes for invalid characters are:    x00 to x20   x22   x27   x5c   x7f or larger    
        var s3KeyPrefix: String? = nil

        public init() {}

        public init(clusterIdentifier: String, bucketName: String, s3KeyPrefix: String? = nil) {
            self.clusterIdentifier = clusterIdentifier
            self.bucketName = bucketName
            self.s3KeyPrefix = s3KeyPrefix
        }

    }

    public struct SnapshotMessage: Serializable, Initializable {
        /// A value that indicates the starting point for the next set of response records in a subsequent request. If a value is returned in a response, you can retrieve the next set of records by providing this returned marker value in the Marker parameter and retrying the command. If the Marker field is empty, all response records have been retrieved for the request. 
        var marker: String? = nil
        /// A list of Snapshot instances. 
        var snapshots: [Snapshot]? = nil

        public init() {}

        public init(marker: String? = nil, snapshots: [Snapshot]? = nil) {
            self.marker = marker
            self.snapshots = snapshots
        }

    }

    public struct CreateClusterMessage: Serializable, Initializable {
        /// The name of the first database to be created when the cluster is created. To create additional databases after the cluster is created, connect to the cluster with a SQL client and use SQL commands to create a database. For more information, go to Create a Database in the Amazon Redshift Database Developer Guide.  Default: dev  Constraints:   Must contain 1 to 64 alphanumeric characters.   Must contain only lowercase letters.   Cannot be a word that is reserved by the service. A list of reserved words can be found in Reserved Words in the Amazon Redshift Database Developer Guide.   
        var dBName: String? = nil
        /// The version of the Amazon Redshift engine software that you want to deploy on the cluster. The version selected runs on all the nodes in the cluster. Constraints: Only version 1.0 is currently available. Example: 1.0 
        var clusterVersion: String? = nil
        /// If true, the data in the cluster is encrypted at rest.  Default: false
        var encrypted: Bool? = nil
        /// A unique identifier for the cluster. You use this identifier to refer to the cluster for any subsequent cluster operations such as deleting or modifying. The identifier also appears in the Amazon Redshift console. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   Alphabetic characters must be lowercase.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Must be unique for all clusters within an AWS account.   Example: myexamplecluster 
        var clusterIdentifier: String = ""
        /// The type of the cluster. When cluster type is specified as    single-node, the NumberOfNodes parameter is not required.    multi-node, the NumberOfNodes parameter is required.   Valid Values: multi-node | single-node  Default: multi-node 
        var clusterType: String? = nil
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.  Default: false
        var enhancedVpcRouting: Bool? = nil
        /// The number of days that automated snapshots are retained. If the value is 0, automated snapshots are disabled. Even if automated snapshots are disabled, you can still create manual snapshots when you want with CreateClusterSnapshot.  Default: 1  Constraints: Must be a value from 0 to 35.
        var automatedSnapshotRetentionPeriod: Int32? = nil
        /// The password associated with the master user account for the cluster that is being created. Constraints:   Must be between 8 and 64 characters in length.   Must contain at least one uppercase letter.   Must contain at least one lowercase letter.   Must contain one number.   Can be any printable ASCII character (ASCII code 33 to 126) except ' (single quote), " (double quote), \, /, @, or space.  
        var masterUserPassword: String = ""
        /// The EC2 Availability Zone (AZ) in which you want Amazon Redshift to provision the cluster. For example, if you have several EC2 instances running in a specific Availability Zone, then you might want the cluster to be provisioned in the same zone in order to decrease network latency. Default: A random, system-chosen Availability Zone in the region that is specified by the endpoint. Example: us-east-1d  Constraint: The specified Availability Zone must be in the same region as the current endpoint.
        var availabilityZone: String? = nil
        /// Specifies the name of the HSM configuration that contains the information the Amazon Redshift cluster can use to retrieve and store keys in an HSM.
        var hsmConfigurationIdentifier: String? = nil
        /// A list of AWS Identity and Access Management (IAM) roles that can be used by the cluster to access other AWS services. You must supply the IAM roles in their Amazon Resource Name (ARN) format. You can supply up to 10 IAM roles in a single request. A cluster can have up to 10 IAM roles associated with it at any time.
        var iamRoles: [String]? = nil
        /// Specifies the name of the HSM client certificate the Amazon Redshift cluster uses to retrieve the data encryption keys stored in an HSM.
        var hsmClientCertificateIdentifier: String? = nil
        /// The Elastic IP (EIP) address for the cluster. Constraints: The cluster must be provisioned in EC2-VPC and publicly-accessible through an Internet gateway. For more information about provisioning clusters in EC2-VPC, go to Supported Platforms to Launch Your Cluster in the Amazon Redshift Cluster Management Guide.
        var elasticIp: String? = nil
        /// The weekly time range (in UTC) during which automated cluster maintenance can occur.  Format: ddd:hh24:mi-ddd:hh24:mi   Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week. For more information about the time blocks for each region, see Maintenance Windows in Amazon Redshift Cluster Management Guide. Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Minimum 30-minute window.
        var preferredMaintenanceWindow: String? = nil
        /// The number of compute nodes in the cluster. This parameter is required when the ClusterType parameter is specified as multi-node.  For information about determining how many nodes you need, go to  Working with Clusters in the Amazon Redshift Cluster Management Guide.  If you don't specify this parameter, you get a single-node cluster. When requesting a multi-node cluster, you must specify the number of nodes that you want in the cluster. Default: 1  Constraints: Value must be at least 1 and no more than 100.
        var numberOfNodes: Int32? = nil
        /// The AWS Key Management Service (KMS) key ID of the encryption key that you want to use to encrypt data in the cluster.
        var kmsKeyId: String? = nil
        /// A list of security groups to be associated with this cluster. Default: The default cluster security group for Amazon Redshift.
        var clusterSecurityGroups: [String]? = nil
        /// A list of tag instances.
        var tags: [Tag]? = nil
        /// The node type to be provisioned for the cluster. For information about node types, go to  Working with Clusters in the Amazon Redshift Cluster Management Guide.  Valid Values: ds1.xlarge | ds1.8xlarge | ds2.xlarge | ds2.8xlarge | dc1.large | dc1.8xlarge. 
        var nodeType: String = ""
        /// A list of Virtual Private Cloud (VPC) security groups to be associated with the cluster. Default: The default VPC security group is associated with the cluster.
        var vpcSecurityGroupIds: [String]? = nil
        /// The name of the parameter group to be associated with this cluster. Default: The default Amazon Redshift cluster parameter group. For information about the default parameter group, go to Working with Amazon Redshift Parameter Groups  Constraints:   Must be 1 to 255 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        var clusterParameterGroupName: String? = nil
        /// If true, the cluster can be accessed from a public network. 
        var publiclyAccessible: Bool? = nil
        /// The user name associated with the master user account for the cluster that is being created. Constraints:   Must be 1 - 128 alphanumeric characters.   First character must be a letter.   Cannot be a reserved word. A list of reserved words can be found in Reserved Words in the Amazon Redshift Database Developer Guide.   
        var masterUsername: String = ""
        /// The name of a cluster subnet group to be associated with this cluster. If this parameter is not provided the resulting cluster will be deployed outside virtual private cloud (VPC).
        var clusterSubnetGroupName: String? = nil
        /// Reserved.
        var additionalInfo: String? = nil
        /// If true, major version upgrades can be applied during the maintenance window to the Amazon Redshift engine that is running on the cluster. When a new major version of the Amazon Redshift engine is released, you can request that the service automatically apply upgrades during the maintenance window to the Amazon Redshift engine that is running on your cluster. Default: true 
        var allowVersionUpgrade: Bool? = nil
        /// The port number on which the cluster accepts incoming connections. The cluster is accessible only via the JDBC and ODBC connection strings. Part of the connection string requires the port on which the cluster will listen for incoming connections. Default: 5439  Valid Values: 1150-65535 
        var port: Int32? = nil

        public init() {}

        public init(dBName: String? = nil, clusterVersion: String? = nil, encrypted: Bool? = nil, clusterIdentifier: String, clusterType: String? = nil, enhancedVpcRouting: Bool? = nil, automatedSnapshotRetentionPeriod: Int32? = nil, masterUserPassword: String, availabilityZone: String? = nil, hsmConfigurationIdentifier: String? = nil, iamRoles: [String]? = nil, hsmClientCertificateIdentifier: String? = nil, elasticIp: String? = nil, preferredMaintenanceWindow: String? = nil, numberOfNodes: Int32? = nil, kmsKeyId: String? = nil, clusterSecurityGroups: [String]? = nil, tags: [Tag]? = nil, nodeType: String, vpcSecurityGroupIds: [String]? = nil, clusterParameterGroupName: String? = nil, publiclyAccessible: Bool? = nil, masterUsername: String, clusterSubnetGroupName: String? = nil, additionalInfo: String? = nil, allowVersionUpgrade: Bool? = nil, port: Int32? = nil) {
            self.dBName = dBName
            self.clusterVersion = clusterVersion
            self.encrypted = encrypted
            self.clusterIdentifier = clusterIdentifier
            self.clusterType = clusterType
            self.enhancedVpcRouting = enhancedVpcRouting
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.masterUserPassword = masterUserPassword
            self.availabilityZone = availabilityZone
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.iamRoles = iamRoles
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.elasticIp = elasticIp
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.numberOfNodes = numberOfNodes
            self.kmsKeyId = kmsKeyId
            self.clusterSecurityGroups = clusterSecurityGroups
            self.tags = tags
            self.nodeType = nodeType
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.clusterParameterGroupName = clusterParameterGroupName
            self.publiclyAccessible = publiclyAccessible
            self.masterUsername = masterUsername
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.additionalInfo = additionalInfo
            self.allowVersionUpgrade = allowVersionUpgrade
            self.port = port
        }

    }

    public struct SnapshotCopyGrant: Serializable, Initializable {
        /// The name of the snapshot copy grant.
        var snapshotCopyGrantName: String? = nil
        /// A list of tag instances.
        var tags: [Tag]? = nil
        /// The unique identifier of the customer master key (CMK) in AWS KMS to which Amazon Redshift is granted permission.
        var kmsKeyId: String? = nil

        public init() {}

        public init(snapshotCopyGrantName: String? = nil, tags: [Tag]? = nil, kmsKeyId: String? = nil) {
            self.snapshotCopyGrantName = snapshotCopyGrantName
            self.tags = tags
            self.kmsKeyId = kmsKeyId
        }

    }

    public struct ModifySnapshotCopyRetentionPeriodMessage: Serializable, Initializable {
        /// The unique identifier of the cluster for which you want to change the retention period for automated snapshots that are copied to a destination region. Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.
        var clusterIdentifier: String = ""
        /// The number of days to retain automated snapshots in the destination region after they are copied from the source region. If you decrease the retention period for automated snapshots that are copied to a destination region, Amazon Redshift will delete any existing automated snapshots that were copied to the destination region and that fall outside of the new retention period. Constraints: Must be at least 1 and no more than 35.
        var retentionPeriod: Int32 = 0

        public init() {}

        public init(clusterIdentifier: String, retentionPeriod: Int32) {
            self.clusterIdentifier = clusterIdentifier
            self.retentionPeriod = retentionPeriod
        }

    }

    public struct DeleteClusterSubnetGroupMessage: Serializable, Initializable {
        /// The name of the cluster subnet group name to be deleted.
        var clusterSubnetGroupName: String = ""

        public init() {}

        public init(clusterSubnetGroupName: String) {
            self.clusterSubnetGroupName = clusterSubnetGroupName
        }

    }

    public struct RevokeSnapshotAccessMessage: Serializable, Initializable {
        /// The identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name.
        var snapshotClusterIdentifier: String? = nil
        /// The identifier of the snapshot that the account can no longer access.
        var snapshotIdentifier: String = ""
        /// The identifier of the AWS customer account that can no longer restore the specified snapshot.
        var accountWithRestoreAccess: String = ""

        public init() {}

        public init(snapshotClusterIdentifier: String? = nil, snapshotIdentifier: String, accountWithRestoreAccess: String) {
            self.snapshotClusterIdentifier = snapshotClusterIdentifier
            self.snapshotIdentifier = snapshotIdentifier
            self.accountWithRestoreAccess = accountWithRestoreAccess
        }

    }

    public struct CreateHsmClientCertificateResult: Serializable, Initializable {
        var hsmClientCertificate: HsmClientCertificate? = nil

        public init() {}

        public init(hsmClientCertificate: HsmClientCertificate? = nil) {
            self.hsmClientCertificate = hsmClientCertificate
        }

    }

    public struct CreateSnapshotCopyGrantResult: Serializable, Initializable {
        var snapshotCopyGrant: SnapshotCopyGrant? = nil

        public init() {}

        public init(snapshotCopyGrant: SnapshotCopyGrant? = nil) {
            self.snapshotCopyGrant = snapshotCopyGrant
        }

    }

    public struct ClusterParameterStatus: Serializable, Initializable {
        /// The error that prevented the parameter from being applied to the database.
        var parameterApplyErrorDescription: String? = nil
        /// The name of the parameter.
        var parameterName: String? = nil
        /// The status of the parameter that indicates whether the parameter is in sync with the database, waiting for a cluster reboot, or encountered an error when being applied. The following are possible statuses and descriptions.    in-sync: The parameter value is in sync with the database.    pending-reboot: The parameter value will be applied after the cluster reboots.    applying: The parameter value is being applied to the database.    invalid-parameter: Cannot apply the parameter value because it has an invalid value or syntax.    apply-deferred: The parameter contains static property changes. The changes are deferred until the cluster reboots.    apply-error: Cannot connect to the cluster. The parameter change will be applied after the cluster reboots.    unknown-error: Cannot apply the parameter change right now. The change will be applied after the cluster reboots.  
        var parameterApplyStatus: String? = nil

        public init() {}

        public init(parameterApplyErrorDescription: String? = nil, parameterName: String? = nil, parameterApplyStatus: String? = nil) {
            self.parameterApplyErrorDescription = parameterApplyErrorDescription
            self.parameterName = parameterName
            self.parameterApplyStatus = parameterApplyStatus
        }

    }

    public struct CreateClusterSecurityGroupResult: Serializable, Initializable {
        var clusterSecurityGroup: ClusterSecurityGroup? = nil

        public init() {}

        public init(clusterSecurityGroup: ClusterSecurityGroup? = nil) {
            self.clusterSecurityGroup = clusterSecurityGroup
        }

    }

    public struct PendingModifiedValues: Serializable, Initializable {
        /// The pending or in-progress change of the service version.
        var clusterVersion: String? = nil
        /// The pending or in-progress change of the cluster's node type.
        var nodeType: String? = nil
        /// The pending or in-progress change of the new identifier for the cluster.
        var clusterIdentifier: String? = nil
        /// The pending or in-progress change of the automated snapshot retention period.
        var automatedSnapshotRetentionPeriod: Int32? = nil
        /// The pending or in-progress change of the number of nodes in the cluster.
        var numberOfNodes: Int32? = nil
        /// The pending or in-progress change of the master user password for the cluster.
        var masterUserPassword: String? = nil
        /// An option that specifies whether to create the cluster with enhanced VPC routing enabled. To create a cluster that uses enhanced VPC routing, the cluster must be in a VPC. For more information, see Enhanced VPC Routing in the Amazon Redshift Cluster Management Guide. If this option is true, enhanced VPC routing is enabled.  Default: false
        var enhancedVpcRouting: Bool? = nil
        /// The pending or in-progress change of the cluster type.
        var clusterType: String? = nil
        /// The pending or in-progress change of the ability to connect to the cluster from the public network.
        var publiclyAccessible: Bool? = nil

        public init() {}

        public init(clusterVersion: String? = nil, nodeType: String? = nil, clusterIdentifier: String? = nil, automatedSnapshotRetentionPeriod: Int32? = nil, numberOfNodes: Int32? = nil, masterUserPassword: String? = nil, enhancedVpcRouting: Bool? = nil, clusterType: String? = nil, publiclyAccessible: Bool? = nil) {
            self.clusterVersion = clusterVersion
            self.nodeType = nodeType
            self.clusterIdentifier = clusterIdentifier
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.numberOfNodes = numberOfNodes
            self.masterUserPassword = masterUserPassword
            self.enhancedVpcRouting = enhancedVpcRouting
            self.clusterType = clusterType
            self.publiclyAccessible = publiclyAccessible
        }

    }

    public struct CreateHsmConfigurationResult: Serializable, Initializable {
        var hsmConfiguration: HsmConfiguration? = nil

        public init() {}

        public init(hsmConfiguration: HsmConfiguration? = nil) {
            self.hsmConfiguration = hsmConfiguration
        }

    }

    public struct CreateTagsMessage: Serializable, Initializable {
        /// One or more name/value pairs to add as tags to the specified resource. Each tag name is passed in with the parameter Key and the corresponding value is passed in with the parameter Value. The Key and Value parameters are separated by a comma (,). Separate multiple tags with a space. For example, --tags "Key"="owner","Value"="admin" "Key"="environment","Value"="test" "Key"="version","Value"="1.0". 
        var tags: [Tag] = []
        /// The Amazon Resource Name (ARN) to which you want to add the tag or tags. For example, arn:aws:redshift:us-east-1:123456789:cluster:t1. 
        var resourceName: String = ""

        public init() {}

        public init(tags: [Tag], resourceName: String) {
            self.tags = tags
            self.resourceName = resourceName
        }

    }

    public struct IPRange: Serializable, Initializable {
        /// The status of the IP range, for example, "authorized".
        var status: String? = nil
        /// The list of tags for the IP range.
        var tags: [Tag]? = nil
        /// The IP range in Classless Inter-Domain Routing (CIDR) notation.
        var cIDRIP: String? = nil

        public init() {}

        public init(status: String? = nil, tags: [Tag]? = nil, cIDRIP: String? = nil) {
            self.status = status
            self.tags = tags
            self.cIDRIP = cIDRIP
        }

    }

    public struct DeleteClusterSnapshotMessage: Serializable, Initializable {
        /// The unique identifier of the manual snapshot to be deleted. Constraints: Must be the name of an existing snapshot that is in the available state.
        var snapshotIdentifier: String = ""
        /// The unique identifier of the cluster the snapshot was created from. This parameter is required if your IAM user has a policy containing a snapshot resource element that specifies anything other than * for the cluster name. Constraints: Must be the name of valid cluster.
        var snapshotClusterIdentifier: String? = nil

        public init() {}

        public init(snapshotIdentifier: String, snapshotClusterIdentifier: String? = nil) {
            self.snapshotIdentifier = snapshotIdentifier
            self.snapshotClusterIdentifier = snapshotClusterIdentifier
        }

    }

    public struct DescribeClusterParameterGroupsMessage: Serializable, Initializable {
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        /// A tag value or values for which you want to return all matching cluster parameter groups that are associated with the specified tag value or values. For example, suppose that you have parameter groups that are tagged with values called admin and test. If you specify both of these tag values in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag values associated with them.
        var tagValues: [String]? = nil
        /// The name of a specific parameter group for which to return details. By default, details about all parameter groups and the default parameter group are returned.
        var parameterGroupName: String? = nil
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterParameterGroups request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        var marker: String? = nil
        /// A tag key or keys for which you want to return all matching cluster parameter groups that are associated with the specified key or keys. For example, suppose that you have parameter groups that are tagged with keys called owner and environment. If you specify both of these tag keys in the request, Amazon Redshift returns a response with the parameter groups that have either or both of these tag keys associated with them.
        var tagKeys: [String]? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, tagValues: [String]? = nil, parameterGroupName: String? = nil, marker: String? = nil, tagKeys: [String]? = nil) {
            self.maxRecords = maxRecords
            self.tagValues = tagValues
            self.parameterGroupName = parameterGroupName
            self.marker = marker
            self.tagKeys = tagKeys
        }

    }

    public struct DisableSnapshotCopyMessage: Serializable, Initializable {
        /// The unique identifier of the source cluster that you want to disable copying of snapshots to a destination region. Constraints: Must be the valid name of an existing cluster that has cross-region snapshot copy enabled.
        var clusterIdentifier: String = ""

        public init() {}

        public init(clusterIdentifier: String) {
            self.clusterIdentifier = clusterIdentifier
        }

    }

    public struct ModifyClusterParameterGroupMessage: Serializable, Initializable {
        /// An array of parameters to be modified. A maximum of 20 parameters can be modified in a single request. For each parameter to be modified, you must supply at least the parameter name and parameter value; other name-value pairs of the parameter are optional. For the workload management (WLM) configuration, you must supply all the name-value pairs in the wlm_json_configuration parameter.
        var parameters: [Parameter] = []
        /// The name of the parameter group to be modified.
        var parameterGroupName: String = ""

        public init() {}

        public init(parameters: [Parameter], parameterGroupName: String) {
            self.parameters = parameters
            self.parameterGroupName = parameterGroupName
        }

    }

    public struct DescribeClusterParametersMessage: Serializable, Initializable {
        /// The maximum number of response records to return in each call. If the number of remaining response records exceeds the specified MaxRecords value, a value is returned in a marker field of the response. You can retrieve the next set of records by retrying the command with the returned marker value.  Default: 100  Constraints: minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        /// The name of a cluster parameter group for which to return details.
        var parameterGroupName: String = ""
        /// An optional parameter that specifies the starting point to return a set of response records. When the results of a DescribeClusterParameters request exceed the value specified in MaxRecords, AWS returns a value in the Marker field of the response. You can retrieve the next set of response records by providing the returned marker value in the Marker parameter and retrying the request. 
        var marker: String? = nil
        /// The parameter types to return. Specify user to show parameters that are different form the default. Similarly, specify engine-default to show parameters that are the same as the default parameter group.  Default: All parameter types returned. Valid Values: user | engine-default 
        var source: String? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, parameterGroupName: String, marker: String? = nil, source: String? = nil) {
            self.maxRecords = maxRecords
            self.parameterGroupName = parameterGroupName
            self.marker = marker
            self.source = source
        }

    }

    public struct AccountWithRestoreAccess: Serializable, Initializable {
        /// The identifier of an AWS customer account authorized to restore a snapshot.
        var accountId: String? = nil

        public init() {}

        public init(accountId: String? = nil) {
            self.accountId = accountId
        }

    }

    public struct EventInfoMap: Serializable, Initializable {
        /// The severity of the event. Values: ERROR, INFO
        var severity: String? = nil
        /// The identifier of an Amazon Redshift event.
        var eventId: String? = nil
        /// The description of an Amazon Redshift event.
        var eventDescription: String? = nil
        /// The category of an Amazon Redshift event.
        var eventCategories: [String]? = nil

        public init() {}

        public init(severity: String? = nil, eventId: String? = nil, eventDescription: String? = nil, eventCategories: [String]? = nil) {
            self.severity = severity
            self.eventId = eventId
            self.eventDescription = eventDescription
            self.eventCategories = eventCategories
        }

    }

}