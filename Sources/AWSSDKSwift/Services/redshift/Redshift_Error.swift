// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import AWSSDKSwiftCore

/// Error enum for Redshift
public enum RedshiftError: AWSErrorType {
    case clusterParameterGroupNotFoundFault(message: String?)
    case clusterSecurityGroupNotFoundFault(message: String?)
    case authorizationNotFoundFault(message: String?)
    case invalidClusterSecurityGroupStateFault(message: String?)
    case clusterNotFoundFault(message: String?)
    case resizeNotFoundFault(message: String?)
    case snapshotCopyAlreadyDisabledFault(message: String?)
    case invalidClusterStateFault(message: String?)
    case unauthorizedOperation(message: String?)
    case invalidTagFault(message: String?)
    case hsmConfigurationNotFoundFault(message: String?)
    case reservedNodeNotFoundFault(message: String?)
    case hsmClientCertificateAlreadyExistsFault(message: String?)
    case hsmClientCertificateQuotaExceededFault(message: String?)
    case tagLimitExceededFault(message: String?)
    case resourceNotFoundFault(message: String?)
    case snapshotCopyGrantNotFoundFault(message: String?)
    case subscriptionNotFoundFault(message: String?)
    case sNSInvalidTopicFault(message: String?)
    case sNSNoAuthorizationFault(message: String?)
    case sNSTopicArnNotFoundFault(message: String?)
    case subscriptionEventIdNotFoundFault(message: String?)
    case subscriptionCategoryNotFoundFault(message: String?)
    case subscriptionSeverityNotFoundFault(message: String?)
    case sourceNotFoundFault(message: String?)
    case invalidSubscriptionStateFault(message: String?)
    case clusterSubnetGroupNotFoundFault(message: String?)
    case clusterSubnetQuotaExceededFault(message: String?)
    case subnetAlreadyInUse(message: String?)
    case invalidSubnet(message: String?)
    case dependentServiceRequestThrottlingFault(message: String?)
    case invalidClusterSnapshotStateFault(message: String?)
    case clusterSnapshotNotFoundFault(message: String?)
    case authorizationAlreadyExistsFault(message: String?)
    case authorizationQuotaExceededFault(message: String?)
    case clusterSecurityGroupAlreadyExistsFault(message: String?)
    case clusterSecurityGroupQuotaExceededFault(message: String?)
    case limitExceededFault(message: String?)
    case tableRestoreNotFoundFault(message: String?)
    case clusterParameterGroupQuotaExceededFault(message: String?)
    case clusterParameterGroupAlreadyExistsFault(message: String?)
    case clusterSnapshotAlreadyExistsFault(message: String?)
    case clusterSnapshotQuotaExceededFault(message: String?)
    case reservedNodeOfferingNotFoundFault(message: String?)
    case reservedNodeAlreadyExistsFault(message: String?)
    case reservedNodeQuotaExceededFault(message: String?)
    case unsupportedOperationFault(message: String?)
    case invalidHsmConfigurationStateFault(message: String?)
    case bucketNotFoundFault(message: String?)
    case insufficientS3BucketPolicyFault(message: String?)
    case invalidS3KeyPrefixFault(message: String?)
    case invalidS3BucketNameFault(message: String?)
    case inProgressTableRestoreQuotaExceededFault(message: String?)
    case invalidTableRestoreArgumentFault(message: String?)
    case invalidClusterParameterGroupStateFault(message: String?)
    case invalidHsmClientCertificateStateFault(message: String?)
    case hsmClientCertificateNotFoundFault(message: String?)
    case accessToSnapshotDeniedFault(message: String?)
    case clusterAlreadyExistsFault(message: String?)
    case insufficientClusterCapacityFault(message: String?)
    case clusterQuotaExceededFault(message: String?)
    case numberOfNodesQuotaExceededFault(message: String?)
    case numberOfNodesPerClusterLimitExceededFault(message: String?)
    case invalidVPCNetworkStateFault(message: String?)
    case invalidClusterSubnetGroupStateFault(message: String?)
    case invalidElasticIpFault(message: String?)
    case eventSubscriptionQuotaExceededFault(message: String?)
    case subscriptionAlreadyExistFault(message: String?)
    case hsmConfigurationAlreadyExistsFault(message: String?)
    case hsmConfigurationQuotaExceededFault(message: String?)
    case clusterSubnetGroupAlreadyExistsFault(message: String?)
    case clusterSubnetGroupQuotaExceededFault(message: String?)
    case incompatibleOrderableOptions(message: String?)
    case copyToRegionDisabledFault(message: String?)
    case snapshotCopyAlreadyEnabledFault(message: String?)
    case unknownSnapshotCopyRegionFault(message: String?)
    case snapshotCopyGrantAlreadyExistsFault(message: String?)
    case snapshotCopyGrantQuotaExceededFault(message: String?)
    case invalidClusterSubnetStateFault(message: String?)
    case snapshotCopyDisabledFault(message: String?)
    case invalidSnapshotCopyGrantStateFault(message: String?)
    case invalidRestoreFault(message: String?)
    case unsupportedOptionFault(message: String?)
}

extension RedshiftError {
    public init?(errorCode: String, message: String?){
        var errorCode = errorCode
        if let index = errorCode.index(of: "#") {
            errorCode = errorCode.substring(from: errorCode.index(index, offsetBy: 1))
        }
        switch errorCode {
        case "ClusterParameterGroupNotFoundFault":
            self = .clusterParameterGroupNotFoundFault(message: message)
        case "ClusterSecurityGroupNotFoundFault":
            self = .clusterSecurityGroupNotFoundFault(message: message)
        case "AuthorizationNotFoundFault":
            self = .authorizationNotFoundFault(message: message)
        case "InvalidClusterSecurityGroupStateFault":
            self = .invalidClusterSecurityGroupStateFault(message: message)
        case "ClusterNotFoundFault":
            self = .clusterNotFoundFault(message: message)
        case "ResizeNotFoundFault":
            self = .resizeNotFoundFault(message: message)
        case "SnapshotCopyAlreadyDisabledFault":
            self = .snapshotCopyAlreadyDisabledFault(message: message)
        case "InvalidClusterStateFault":
            self = .invalidClusterStateFault(message: message)
        case "UnauthorizedOperation":
            self = .unauthorizedOperation(message: message)
        case "InvalidTagFault":
            self = .invalidTagFault(message: message)
        case "HsmConfigurationNotFoundFault":
            self = .hsmConfigurationNotFoundFault(message: message)
        case "ReservedNodeNotFoundFault":
            self = .reservedNodeNotFoundFault(message: message)
        case "HsmClientCertificateAlreadyExistsFault":
            self = .hsmClientCertificateAlreadyExistsFault(message: message)
        case "HsmClientCertificateQuotaExceededFault":
            self = .hsmClientCertificateQuotaExceededFault(message: message)
        case "TagLimitExceededFault":
            self = .tagLimitExceededFault(message: message)
        case "ResourceNotFoundFault":
            self = .resourceNotFoundFault(message: message)
        case "SnapshotCopyGrantNotFoundFault":
            self = .snapshotCopyGrantNotFoundFault(message: message)
        case "SubscriptionNotFoundFault":
            self = .subscriptionNotFoundFault(message: message)
        case "SNSInvalidTopicFault":
            self = .sNSInvalidTopicFault(message: message)
        case "SNSNoAuthorizationFault":
            self = .sNSNoAuthorizationFault(message: message)
        case "SNSTopicArnNotFoundFault":
            self = .sNSTopicArnNotFoundFault(message: message)
        case "SubscriptionEventIdNotFoundFault":
            self = .subscriptionEventIdNotFoundFault(message: message)
        case "SubscriptionCategoryNotFoundFault":
            self = .subscriptionCategoryNotFoundFault(message: message)
        case "SubscriptionSeverityNotFoundFault":
            self = .subscriptionSeverityNotFoundFault(message: message)
        case "SourceNotFoundFault":
            self = .sourceNotFoundFault(message: message)
        case "InvalidSubscriptionStateFault":
            self = .invalidSubscriptionStateFault(message: message)
        case "ClusterSubnetGroupNotFoundFault":
            self = .clusterSubnetGroupNotFoundFault(message: message)
        case "ClusterSubnetQuotaExceededFault":
            self = .clusterSubnetQuotaExceededFault(message: message)
        case "SubnetAlreadyInUse":
            self = .subnetAlreadyInUse(message: message)
        case "InvalidSubnet":
            self = .invalidSubnet(message: message)
        case "DependentServiceRequestThrottlingFault":
            self = .dependentServiceRequestThrottlingFault(message: message)
        case "InvalidClusterSnapshotStateFault":
            self = .invalidClusterSnapshotStateFault(message: message)
        case "ClusterSnapshotNotFoundFault":
            self = .clusterSnapshotNotFoundFault(message: message)
        case "AuthorizationAlreadyExistsFault":
            self = .authorizationAlreadyExistsFault(message: message)
        case "AuthorizationQuotaExceededFault":
            self = .authorizationQuotaExceededFault(message: message)
        case "ClusterSecurityGroupAlreadyExistsFault":
            self = .clusterSecurityGroupAlreadyExistsFault(message: message)
        case "ClusterSecurityGroupQuotaExceededFault":
            self = .clusterSecurityGroupQuotaExceededFault(message: message)
        case "LimitExceededFault":
            self = .limitExceededFault(message: message)
        case "TableRestoreNotFoundFault":
            self = .tableRestoreNotFoundFault(message: message)
        case "ClusterParameterGroupQuotaExceededFault":
            self = .clusterParameterGroupQuotaExceededFault(message: message)
        case "ClusterParameterGroupAlreadyExistsFault":
            self = .clusterParameterGroupAlreadyExistsFault(message: message)
        case "ClusterSnapshotAlreadyExistsFault":
            self = .clusterSnapshotAlreadyExistsFault(message: message)
        case "ClusterSnapshotQuotaExceededFault":
            self = .clusterSnapshotQuotaExceededFault(message: message)
        case "ReservedNodeOfferingNotFoundFault":
            self = .reservedNodeOfferingNotFoundFault(message: message)
        case "ReservedNodeAlreadyExistsFault":
            self = .reservedNodeAlreadyExistsFault(message: message)
        case "ReservedNodeQuotaExceededFault":
            self = .reservedNodeQuotaExceededFault(message: message)
        case "UnsupportedOperationFault":
            self = .unsupportedOperationFault(message: message)
        case "InvalidHsmConfigurationStateFault":
            self = .invalidHsmConfigurationStateFault(message: message)
        case "BucketNotFoundFault":
            self = .bucketNotFoundFault(message: message)
        case "InsufficientS3BucketPolicyFault":
            self = .insufficientS3BucketPolicyFault(message: message)
        case "InvalidS3KeyPrefixFault":
            self = .invalidS3KeyPrefixFault(message: message)
        case "InvalidS3BucketNameFault":
            self = .invalidS3BucketNameFault(message: message)
        case "InProgressTableRestoreQuotaExceededFault":
            self = .inProgressTableRestoreQuotaExceededFault(message: message)
        case "InvalidTableRestoreArgumentFault":
            self = .invalidTableRestoreArgumentFault(message: message)
        case "InvalidClusterParameterGroupStateFault":
            self = .invalidClusterParameterGroupStateFault(message: message)
        case "InvalidHsmClientCertificateStateFault":
            self = .invalidHsmClientCertificateStateFault(message: message)
        case "HsmClientCertificateNotFoundFault":
            self = .hsmClientCertificateNotFoundFault(message: message)
        case "AccessToSnapshotDeniedFault":
            self = .accessToSnapshotDeniedFault(message: message)
        case "ClusterAlreadyExistsFault":
            self = .clusterAlreadyExistsFault(message: message)
        case "InsufficientClusterCapacityFault":
            self = .insufficientClusterCapacityFault(message: message)
        case "ClusterQuotaExceededFault":
            self = .clusterQuotaExceededFault(message: message)
        case "NumberOfNodesQuotaExceededFault":
            self = .numberOfNodesQuotaExceededFault(message: message)
        case "NumberOfNodesPerClusterLimitExceededFault":
            self = .numberOfNodesPerClusterLimitExceededFault(message: message)
        case "InvalidVPCNetworkStateFault":
            self = .invalidVPCNetworkStateFault(message: message)
        case "InvalidClusterSubnetGroupStateFault":
            self = .invalidClusterSubnetGroupStateFault(message: message)
        case "InvalidElasticIpFault":
            self = .invalidElasticIpFault(message: message)
        case "EventSubscriptionQuotaExceededFault":
            self = .eventSubscriptionQuotaExceededFault(message: message)
        case "SubscriptionAlreadyExistFault":
            self = .subscriptionAlreadyExistFault(message: message)
        case "HsmConfigurationAlreadyExistsFault":
            self = .hsmConfigurationAlreadyExistsFault(message: message)
        case "HsmConfigurationQuotaExceededFault":
            self = .hsmConfigurationQuotaExceededFault(message: message)
        case "ClusterSubnetGroupAlreadyExistsFault":
            self = .clusterSubnetGroupAlreadyExistsFault(message: message)
        case "ClusterSubnetGroupQuotaExceededFault":
            self = .clusterSubnetGroupQuotaExceededFault(message: message)
        case "IncompatibleOrderableOptions":
            self = .incompatibleOrderableOptions(message: message)
        case "CopyToRegionDisabledFault":
            self = .copyToRegionDisabledFault(message: message)
        case "SnapshotCopyAlreadyEnabledFault":
            self = .snapshotCopyAlreadyEnabledFault(message: message)
        case "UnknownSnapshotCopyRegionFault":
            self = .unknownSnapshotCopyRegionFault(message: message)
        case "SnapshotCopyGrantAlreadyExistsFault":
            self = .snapshotCopyGrantAlreadyExistsFault(message: message)
        case "SnapshotCopyGrantQuotaExceededFault":
            self = .snapshotCopyGrantQuotaExceededFault(message: message)
        case "InvalidClusterSubnetStateFault":
            self = .invalidClusterSubnetStateFault(message: message)
        case "SnapshotCopyDisabledFault":
            self = .snapshotCopyDisabledFault(message: message)
        case "InvalidSnapshotCopyGrantStateFault":
            self = .invalidSnapshotCopyGrantStateFault(message: message)
        case "InvalidRestoreFault":
            self = .invalidRestoreFault(message: message)
        case "UnsupportedOptionFault":
            self = .unsupportedOptionFault(message: message)
        default:
            return nil
        }
    }
}