// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import NIO

extension SageMaker {

    ///  Lists the machine learning algorithms that have been created.
    public func listAlgorithmsPaginator(_ input: ListAlgorithmsInput) -> EventLoopFuture<[AlgorithmSummary]> {
        return client.paginate(input: input, command: listAlgorithms, resultKey: \.algorithmSummaryList, tokenKey: \.nextToken)
    }
    
    ///  Lists apps.
    public func listAppsPaginator(_ input: ListAppsRequest) -> EventLoopFuture<[AppDetails]> {
        return client.paginate(input: input, command: listApps, resultKey: \.apps, tokenKey: \.nextToken)
    }
    
    ///  Request a list of jobs.
    public func listAutoMLJobsPaginator(_ input: ListAutoMLJobsRequest) -> EventLoopFuture<[AutoMLJobSummary]> {
        return client.paginate(input: input, command: listAutoMLJobs, resultKey: \.autoMLJobSummaries, tokenKey: \.nextToken)
    }
    
    ///  List the Candidates created for the job.
    public func listCandidatesForAutoMLJobPaginator(_ input: ListCandidatesForAutoMLJobRequest) -> EventLoopFuture<[AutoMLCandidate]> {
        return client.paginate(input: input, command: listCandidatesForAutoMLJob, resultKey: \.candidates, tokenKey: \.nextToken)
    }
    
    ///  Gets a list of the Git repositories in your account.
    public func listCodeRepositoriesPaginator(_ input: ListCodeRepositoriesInput) -> EventLoopFuture<[CodeRepositorySummary]> {
        return client.paginate(input: input, command: listCodeRepositories, resultKey: \.codeRepositorySummaryList, tokenKey: \.nextToken)
    }
    
    ///  Lists model compilation jobs that satisfy various filters. To create a model compilation job, use CreateCompilationJob. To get information about a particular model compilation job you have created, use DescribeCompilationJob.
    public func listCompilationJobsPaginator(_ input: ListCompilationJobsRequest) -> EventLoopFuture<[CompilationJobSummary]> {
        return client.paginate(input: input, command: listCompilationJobs, resultKey: \.compilationJobSummaries, tokenKey: \.nextToken)
    }
    
    ///  Lists the domains.
    public func listDomainsPaginator(_ input: ListDomainsRequest) -> EventLoopFuture<[DomainDetails]> {
        return client.paginate(input: input, command: listDomains, resultKey: \.domains, tokenKey: \.nextToken)
    }
    
    ///  Lists endpoint configurations.
    public func listEndpointConfigsPaginator(_ input: ListEndpointConfigsInput) -> EventLoopFuture<[EndpointConfigSummary]> {
        return client.paginate(input: input, command: listEndpointConfigs, resultKey: \.endpointConfigs, tokenKey: \.nextToken)
    }
    
    ///  Lists endpoints.
    public func listEndpointsPaginator(_ input: ListEndpointsInput) -> EventLoopFuture<[EndpointSummary]> {
        return client.paginate(input: input, command: listEndpoints, resultKey: \.endpoints, tokenKey: \.nextToken)
    }
    
    ///  Lists all the experiments in your account. The list can be filtered to show only experiments that were created in a specific time range. The list can be sorted by experiment name or creation time.
    public func listExperimentsPaginator(_ input: ListExperimentsRequest) -> EventLoopFuture<[ExperimentSummary]> {
        return client.paginate(input: input, command: listExperiments, resultKey: \.experimentSummaries, tokenKey: \.nextToken)
    }
    
    ///  Returns information about the flow definitions in your account.
    public func listFlowDefinitionsPaginator(_ input: ListFlowDefinitionsRequest) -> EventLoopFuture<[FlowDefinitionSummary]> {
        return client.paginate(input: input, command: listFlowDefinitions, resultKey: \.flowDefinitionSummaries, tokenKey: \.nextToken)
    }
    
    ///  Returns information about the human task user interfaces in your account.
    public func listHumanTaskUisPaginator(_ input: ListHumanTaskUisRequest) -> EventLoopFuture<[HumanTaskUiSummary]> {
        return client.paginate(input: input, command: listHumanTaskUis, resultKey: \.humanTaskUiSummaries, tokenKey: \.nextToken)
    }
    
    ///  Gets a list of HyperParameterTuningJobSummary objects that describe the hyperparameter tuning jobs launched in your account.
    public func listHyperParameterTuningJobsPaginator(_ input: ListHyperParameterTuningJobsRequest) -> EventLoopFuture<[HyperParameterTuningJobSummary]> {
        return client.paginate(input: input, command: listHyperParameterTuningJobs, resultKey: \.hyperParameterTuningJobSummaries, tokenKey: \.nextToken)
    }
    
    ///  Gets a list of labeling jobs.
    public func listLabelingJobsPaginator(_ input: ListLabelingJobsRequest) -> EventLoopFuture<[LabelingJobSummary]> {
        return client.paginate(input: input, command: listLabelingJobs, resultKey: \.labelingJobSummaryList, tokenKey: \.nextToken)
    }
    
    ///  Gets a list of labeling jobs assigned to a specified work team.
    public func listLabelingJobsForWorkteamPaginator(_ input: ListLabelingJobsForWorkteamRequest) -> EventLoopFuture<[LabelingJobForWorkteamSummary]> {
        return client.paginate(input: input, command: listLabelingJobsForWorkteam, resultKey: \.labelingJobSummaryList, tokenKey: \.nextToken)
    }
    
    ///  Lists the model packages that have been created.
    public func listModelPackagesPaginator(_ input: ListModelPackagesInput) -> EventLoopFuture<[ModelPackageSummary]> {
        return client.paginate(input: input, command: listModelPackages, resultKey: \.modelPackageSummaryList, tokenKey: \.nextToken)
    }
    
    ///  Lists models created with the CreateModel API.
    public func listModelsPaginator(_ input: ListModelsInput) -> EventLoopFuture<[ModelSummary]> {
        return client.paginate(input: input, command: listModels, resultKey: \.models, tokenKey: \.nextToken)
    }
    
    ///  Returns list of all monitoring job executions.
    public func listMonitoringExecutionsPaginator(_ input: ListMonitoringExecutionsRequest) -> EventLoopFuture<[MonitoringExecutionSummary]> {
        return client.paginate(input: input, command: listMonitoringExecutions, resultKey: \.monitoringExecutionSummaries, tokenKey: \.nextToken)
    }
    
    ///  Returns list of all monitoring schedules.
    public func listMonitoringSchedulesPaginator(_ input: ListMonitoringSchedulesRequest) -> EventLoopFuture<[MonitoringScheduleSummary]> {
        return client.paginate(input: input, command: listMonitoringSchedules, resultKey: \.monitoringScheduleSummaries, tokenKey: \.nextToken)
    }
    
    ///  Lists notebook instance lifestyle configurations created with the CreateNotebookInstanceLifecycleConfig API.
    public func listNotebookInstanceLifecycleConfigsPaginator(_ input: ListNotebookInstanceLifecycleConfigsInput) -> EventLoopFuture<[NotebookInstanceLifecycleConfigSummary]> {
        return client.paginate(input: input, command: listNotebookInstanceLifecycleConfigs, resultKey: \.notebookInstanceLifecycleConfigs, tokenKey: \.nextToken)
    }
    
    ///  Returns a list of the Amazon SageMaker notebook instances in the requester's account in an AWS Region. 
    public func listNotebookInstancesPaginator(_ input: ListNotebookInstancesInput) -> EventLoopFuture<[NotebookInstanceSummary]> {
        return client.paginate(input: input, command: listNotebookInstances, resultKey: \.notebookInstances, tokenKey: \.nextToken)
    }
    
    ///  Lists processing jobs that satisfy various filters.
    public func listProcessingJobsPaginator(_ input: ListProcessingJobsRequest) -> EventLoopFuture<[ProcessingJobSummary]> {
        return client.paginate(input: input, command: listProcessingJobs, resultKey: \.processingJobSummaries, tokenKey: \.nextToken)
    }
    
    ///  Gets a list of the work teams that you are subscribed to in the AWS Marketplace. The list may be empty if no work team satisfies the filter specified in the NameContains parameter.
    public func listSubscribedWorkteamsPaginator(_ input: ListSubscribedWorkteamsRequest) -> EventLoopFuture<[SubscribedWorkteam]> {
        return client.paginate(input: input, command: listSubscribedWorkteams, resultKey: \.subscribedWorkteams, tokenKey: \.nextToken)
    }
    
    ///  Returns the tags for the specified Amazon SageMaker resource.
    public func listTagsPaginator(_ input: ListTagsInput) -> EventLoopFuture<[Tag]> {
        return client.paginate(input: input, command: listTags, resultKey: \.tags, tokenKey: \.nextToken)
    }
    
    ///  Lists training jobs.
    public func listTrainingJobsPaginator(_ input: ListTrainingJobsRequest) -> EventLoopFuture<[TrainingJobSummary]> {
        return client.paginate(input: input, command: listTrainingJobs, resultKey: \.trainingJobSummaries, tokenKey: \.nextToken)
    }
    
    ///  Gets a list of TrainingJobSummary objects that describe the training jobs that a hyperparameter tuning job launched.
    public func listTrainingJobsForHyperParameterTuningJobPaginator(_ input: ListTrainingJobsForHyperParameterTuningJobRequest) -> EventLoopFuture<[HyperParameterTrainingJobSummary]> {
        return client.paginate(input: input, command: listTrainingJobsForHyperParameterTuningJob, resultKey: \.trainingJobSummaries, tokenKey: \.nextToken)
    }
    
    ///  Lists transform jobs.
    public func listTransformJobsPaginator(_ input: ListTransformJobsRequest) -> EventLoopFuture<[TransformJobSummary]> {
        return client.paginate(input: input, command: listTransformJobs, resultKey: \.transformJobSummaries, tokenKey: \.nextToken)
    }
    
    ///  Lists the trial components in your account. You can filter the list to show only components that were created in a specific time range. You can sort the list by trial component name or creation time.
    public func listTrialComponentsPaginator(_ input: ListTrialComponentsRequest) -> EventLoopFuture<[TrialComponentSummary]> {
        return client.paginate(input: input, command: listTrialComponents, resultKey: \.trialComponentSummaries, tokenKey: \.nextToken)
    }
    
    ///  Lists the trials in your account. Specify an experiment name to limit the list to the trials that are part of that experiment. The list can be filtered to show only trials that were created in a specific time range. The list can be sorted by trial name or creation time.
    public func listTrialsPaginator(_ input: ListTrialsRequest) -> EventLoopFuture<[TrialSummary]> {
        return client.paginate(input: input, command: listTrials, resultKey: \.trialSummaries, tokenKey: \.nextToken)
    }
    
    ///  Lists user profiles.
    public func listUserProfilesPaginator(_ input: ListUserProfilesRequest) -> EventLoopFuture<[UserProfileDetails]> {
        return client.paginate(input: input, command: listUserProfiles, resultKey: \.userProfiles, tokenKey: \.nextToken)
    }
    
    ///  Gets a list of work teams that you have defined in a region. The list may be empty if no work team satisfies the filter specified in the NameContains parameter.
    public func listWorkteamsPaginator(_ input: ListWorkteamsRequest) -> EventLoopFuture<[Workteam]> {
        return client.paginate(input: input, command: listWorkteams, resultKey: \.workteams, tokenKey: \.nextToken)
    }
    
    ///  Finds Amazon SageMaker resources that match a search query. Matching resource objects are returned as a list of SearchResult objects in the response. You can sort the search results by any resource property in a ascending or descending order. You can query against the following value types: numeric, text, Boolean, and timestamp.
    public func searchPaginator(_ input: SearchRequest) -> EventLoopFuture<[SearchRecord]> {
        return client.paginate(input: input, command: search, resultKey: \.results, tokenKey: \.nextToken)
    }
    
}

extension SageMaker.ListAlgorithmsInput: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListAlgorithmsInput, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            maxResults: original.maxResults, 
            nameContains: original.nameContains, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder
        )
    }
}

extension SageMaker.ListAppsRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListAppsRequest, token: String) {
        self.init(
            domainIdEquals: original.domainIdEquals, 
            maxResults: original.maxResults, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder, 
            userProfileNameEquals: original.userProfileNameEquals
        )
    }
}

extension SageMaker.ListAutoMLJobsRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListAutoMLJobsRequest, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            lastModifiedTimeAfter: original.lastModifiedTimeAfter, 
            lastModifiedTimeBefore: original.lastModifiedTimeBefore, 
            maxResults: original.maxResults, 
            nameContains: original.nameContains, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder, 
            statusEquals: original.statusEquals
        )
    }
}

extension SageMaker.ListCandidatesForAutoMLJobRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListCandidatesForAutoMLJobRequest, token: String) {
        self.init(
            autoMLJobName: original.autoMLJobName, 
            candidateNameEquals: original.candidateNameEquals, 
            maxResults: original.maxResults, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder, 
            statusEquals: original.statusEquals
        )
    }
}

extension SageMaker.ListCodeRepositoriesInput: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListCodeRepositoriesInput, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            lastModifiedTimeAfter: original.lastModifiedTimeAfter, 
            lastModifiedTimeBefore: original.lastModifiedTimeBefore, 
            maxResults: original.maxResults, 
            nameContains: original.nameContains, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder
        )
    }
}

extension SageMaker.ListCompilationJobsRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListCompilationJobsRequest, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            lastModifiedTimeAfter: original.lastModifiedTimeAfter, 
            lastModifiedTimeBefore: original.lastModifiedTimeBefore, 
            maxResults: original.maxResults, 
            nameContains: original.nameContains, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder, 
            statusEquals: original.statusEquals
        )
    }
}

extension SageMaker.ListDomainsRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListDomainsRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension SageMaker.ListEndpointConfigsInput: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListEndpointConfigsInput, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            maxResults: original.maxResults, 
            nameContains: original.nameContains, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder
        )
    }
}

extension SageMaker.ListEndpointsInput: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListEndpointsInput, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            lastModifiedTimeAfter: original.lastModifiedTimeAfter, 
            lastModifiedTimeBefore: original.lastModifiedTimeBefore, 
            maxResults: original.maxResults, 
            nameContains: original.nameContains, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder, 
            statusEquals: original.statusEquals
        )
    }
}

extension SageMaker.ListExperimentsRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListExperimentsRequest, token: String) {
        self.init(
            createdAfter: original.createdAfter, 
            createdBefore: original.createdBefore, 
            maxResults: original.maxResults, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder
        )
    }
}

extension SageMaker.ListFlowDefinitionsRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListFlowDefinitionsRequest, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            maxResults: original.maxResults, 
            nextToken: token, 
            sortOrder: original.sortOrder
        )
    }
}

extension SageMaker.ListHumanTaskUisRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListHumanTaskUisRequest, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            maxResults: original.maxResults, 
            nextToken: token, 
            sortOrder: original.sortOrder
        )
    }
}

extension SageMaker.ListHyperParameterTuningJobsRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListHyperParameterTuningJobsRequest, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            lastModifiedTimeAfter: original.lastModifiedTimeAfter, 
            lastModifiedTimeBefore: original.lastModifiedTimeBefore, 
            maxResults: original.maxResults, 
            nameContains: original.nameContains, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder, 
            statusEquals: original.statusEquals
        )
    }
}

extension SageMaker.ListLabelingJobsRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListLabelingJobsRequest, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            lastModifiedTimeAfter: original.lastModifiedTimeAfter, 
            lastModifiedTimeBefore: original.lastModifiedTimeBefore, 
            maxResults: original.maxResults, 
            nameContains: original.nameContains, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder, 
            statusEquals: original.statusEquals
        )
    }
}

extension SageMaker.ListLabelingJobsForWorkteamRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListLabelingJobsForWorkteamRequest, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            jobReferenceCodeContains: original.jobReferenceCodeContains, 
            maxResults: original.maxResults, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder, 
            workteamArn: original.workteamArn
        )
    }
}

extension SageMaker.ListModelPackagesInput: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListModelPackagesInput, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            maxResults: original.maxResults, 
            nameContains: original.nameContains, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder
        )
    }
}

extension SageMaker.ListModelsInput: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListModelsInput, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            maxResults: original.maxResults, 
            nameContains: original.nameContains, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder
        )
    }
}

extension SageMaker.ListMonitoringExecutionsRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListMonitoringExecutionsRequest, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            endpointName: original.endpointName, 
            lastModifiedTimeAfter: original.lastModifiedTimeAfter, 
            lastModifiedTimeBefore: original.lastModifiedTimeBefore, 
            maxResults: original.maxResults, 
            monitoringScheduleName: original.monitoringScheduleName, 
            nextToken: token, 
            scheduledTimeAfter: original.scheduledTimeAfter, 
            scheduledTimeBefore: original.scheduledTimeBefore, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder, 
            statusEquals: original.statusEquals
        )
    }
}

extension SageMaker.ListMonitoringSchedulesRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListMonitoringSchedulesRequest, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            endpointName: original.endpointName, 
            lastModifiedTimeAfter: original.lastModifiedTimeAfter, 
            lastModifiedTimeBefore: original.lastModifiedTimeBefore, 
            maxResults: original.maxResults, 
            nameContains: original.nameContains, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder, 
            statusEquals: original.statusEquals
        )
    }
}

extension SageMaker.ListNotebookInstanceLifecycleConfigsInput: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListNotebookInstanceLifecycleConfigsInput, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            lastModifiedTimeAfter: original.lastModifiedTimeAfter, 
            lastModifiedTimeBefore: original.lastModifiedTimeBefore, 
            maxResults: original.maxResults, 
            nameContains: original.nameContains, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder
        )
    }
}

extension SageMaker.ListNotebookInstancesInput: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListNotebookInstancesInput, token: String) {
        self.init(
            additionalCodeRepositoryEquals: original.additionalCodeRepositoryEquals, 
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            defaultCodeRepositoryContains: original.defaultCodeRepositoryContains, 
            lastModifiedTimeAfter: original.lastModifiedTimeAfter, 
            lastModifiedTimeBefore: original.lastModifiedTimeBefore, 
            maxResults: original.maxResults, 
            nameContains: original.nameContains, 
            nextToken: token, 
            notebookInstanceLifecycleConfigNameContains: original.notebookInstanceLifecycleConfigNameContains, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder, 
            statusEquals: original.statusEquals
        )
    }
}

extension SageMaker.ListProcessingJobsRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListProcessingJobsRequest, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            lastModifiedTimeAfter: original.lastModifiedTimeAfter, 
            lastModifiedTimeBefore: original.lastModifiedTimeBefore, 
            maxResults: original.maxResults, 
            nameContains: original.nameContains, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder, 
            statusEquals: original.statusEquals
        )
    }
}

extension SageMaker.ListSubscribedWorkteamsRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListSubscribedWorkteamsRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nameContains: original.nameContains, 
            nextToken: token
        )
    }
}

extension SageMaker.ListTagsInput: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListTagsInput, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nextToken: token, 
            resourceArn: original.resourceArn
        )
    }
}

extension SageMaker.ListTrainingJobsRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListTrainingJobsRequest, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            lastModifiedTimeAfter: original.lastModifiedTimeAfter, 
            lastModifiedTimeBefore: original.lastModifiedTimeBefore, 
            maxResults: original.maxResults, 
            nameContains: original.nameContains, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder, 
            statusEquals: original.statusEquals
        )
    }
}

extension SageMaker.ListTrainingJobsForHyperParameterTuningJobRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListTrainingJobsForHyperParameterTuningJobRequest, token: String) {
        self.init(
            hyperParameterTuningJobName: original.hyperParameterTuningJobName, 
            maxResults: original.maxResults, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder, 
            statusEquals: original.statusEquals
        )
    }
}

extension SageMaker.ListTransformJobsRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListTransformJobsRequest, token: String) {
        self.init(
            creationTimeAfter: original.creationTimeAfter, 
            creationTimeBefore: original.creationTimeBefore, 
            lastModifiedTimeAfter: original.lastModifiedTimeAfter, 
            lastModifiedTimeBefore: original.lastModifiedTimeBefore, 
            maxResults: original.maxResults, 
            nameContains: original.nameContains, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder, 
            statusEquals: original.statusEquals
        )
    }
}

extension SageMaker.ListTrialComponentsRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListTrialComponentsRequest, token: String) {
        self.init(
            createdAfter: original.createdAfter, 
            createdBefore: original.createdBefore, 
            experimentName: original.experimentName, 
            maxResults: original.maxResults, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder, 
            sourceArn: original.sourceArn, 
            trialName: original.trialName
        )
    }
}

extension SageMaker.ListTrialsRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListTrialsRequest, token: String) {
        self.init(
            createdAfter: original.createdAfter, 
            createdBefore: original.createdBefore, 
            experimentName: original.experimentName, 
            maxResults: original.maxResults, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder
        )
    }
}

extension SageMaker.ListUserProfilesRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListUserProfilesRequest, token: String) {
        self.init(
            domainIdEquals: original.domainIdEquals, 
            maxResults: original.maxResults, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder, 
            userProfileNameContains: original.userProfileNameContains
        )
    }
}

extension SageMaker.ListWorkteamsRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.ListWorkteamsRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nameContains: original.nameContains, 
            nextToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder
        )
    }
}

extension SageMaker.SearchRequest: AWSPaginateStringToken {
    public init(_ original: SageMaker.SearchRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nextToken: token, 
            resource: original.resource, 
            searchExpression: original.searchExpression, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder
        )
    }
}


