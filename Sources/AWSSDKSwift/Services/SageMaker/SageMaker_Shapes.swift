// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension SageMaker {

    public struct DescribeModelOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ModelName", required: true, type: .string), 
            AWSShapeMember(label: "ExecutionRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "ModelArn", required: true, type: .string), 
            AWSShapeMember(label: "CreationTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "PrimaryContainer", required: true, type: .structure), 
            AWSShapeMember(label: "SupplementalContainers", required: true, type: .list)
        ]
        /// Name of the Amazon SageMaker model.
        public let modelName: String
        /// The Amazon Resource Name (ARN) of the IAM role that you specified for the model.
        public let executionRoleArn: String
        /// The Amazon Resource Name (ARN) of the model.
        public let modelArn: String
        /// A timestamp that shows when the model was created.
        public let creationTime: TimeStamp
        /// The location of the primary inference code, associated artifacts, and custom environment map that the inference code uses when it is deployed in production. 
        public let primaryContainer: ContainerDefinition
        /// The description of additional optional containers that you defined when creating the model.
        public let supplementalContainers: [ContainerDefinition]

        public init(modelName: String, executionRoleArn: String, modelArn: String, creationTime: TimeStamp, primaryContainer: ContainerDefinition, supplementalContainers: [ContainerDefinition]) {
            self.modelName = modelName
            self.executionRoleArn = executionRoleArn
            self.modelArn = modelArn
            self.creationTime = creationTime
            self.primaryContainer = primaryContainer
            self.supplementalContainers = supplementalContainers
        }

        private enum CodingKeys: String, CodingKey {
            case modelName = "ModelName"
            case executionRoleArn = "ExecutionRoleArn"
            case modelArn = "ModelArn"
            case creationTime = "CreationTime"
            case primaryContainer = "PrimaryContainer"
            case supplementalContainers = "SupplementalContainers"
        }
    }

    public struct NotebookInstanceSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "NotebookInstanceName", required: true, type: .string), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "NotebookInstanceArn", required: true, type: .string), 
            AWSShapeMember(label: "InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "NotebookInstanceStatus", required: false, type: .enum)
        ]
        /// A timestamp that shows when the notebook instance was last modified.
        public let lastModifiedTime: TimeStamp?
        /// The name of the notebook instance that you want a summary for.
        public let notebookInstanceName: String
        /// The URL that you use to connect to the Jupyter instance running in your notebook instance. 
        public let url: String?
        /// A timestamp that shows when the notebook instance was created.
        public let creationTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the notebook instance.
        public let notebookInstanceArn: String
        /// The type of ML compute instance that the notebook instance is running on.
        public let instanceType: InstanceType?
        /// The status of the notebook instance.
        public let notebookInstanceStatus: NotebookInstanceStatus?

        public init(lastModifiedTime: TimeStamp? = nil, notebookInstanceName: String, url: String? = nil, creationTime: TimeStamp? = nil, notebookInstanceArn: String, instanceType: InstanceType? = nil, notebookInstanceStatus: NotebookInstanceStatus? = nil) {
            self.lastModifiedTime = lastModifiedTime
            self.notebookInstanceName = notebookInstanceName
            self.url = url
            self.creationTime = creationTime
            self.notebookInstanceArn = notebookInstanceArn
            self.instanceType = instanceType
            self.notebookInstanceStatus = notebookInstanceStatus
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedTime = "LastModifiedTime"
            case notebookInstanceName = "NotebookInstanceName"
            case url = "Url"
            case creationTime = "CreationTime"
            case notebookInstanceArn = "NotebookInstanceArn"
            case instanceType = "InstanceType"
            case notebookInstanceStatus = "NotebookInstanceStatus"
        }
    }

    public struct DeleteEndpointConfigInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointConfigName", required: true, type: .string)
        ]
        /// The name of the endpoint configuration that you want to delete.
        public let endpointConfigName: String

        public init(endpointConfigName: String) {
            self.endpointConfigName = endpointConfigName
        }

        private enum CodingKeys: String, CodingKey {
            case endpointConfigName = "EndpointConfigName"
        }
    }

    public struct DeleteNotebookInstanceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotebookInstanceName", required: true, type: .string)
        ]
        /// The name of the Amazon SageMaker notebook instance to delete.
        public let notebookInstanceName: String

        public init(notebookInstanceName: String) {
            self.notebookInstanceName = notebookInstanceName
        }

        private enum CodingKeys: String, CodingKey {
            case notebookInstanceName = "NotebookInstanceName"
        }
    }

    public enum EndpointStatus: String, CustomStringConvertible, Codable {
        case outofservice = "OutOfService"
        case creating = "Creating"
        case updating = "Updating"
        case rollingback = "RollingBack"
        case inservice = "InService"
        case deleting = "Deleting"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public enum EndpointConfigSortKey: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        public var description: String { return self.rawValue }
    }

    public struct DescribeEndpointOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "ProductionVariants", required: false, type: .list), 
            AWSShapeMember(label: "EndpointConfigName", required: true, type: .string), 
            AWSShapeMember(label: "EndpointName", required: true, type: .string), 
            AWSShapeMember(label: "EndpointArn", required: true, type: .string), 
            AWSShapeMember(label: "CreationTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "FailureReason", required: false, type: .string), 
            AWSShapeMember(label: "EndpointStatus", required: true, type: .enum)
        ]
        /// A timestamp that shows when the endpoint was last modified.
        public let lastModifiedTime: TimeStamp
        ///  An array of ProductionVariant objects, one for each model hosted behind this endpoint. 
        public let productionVariants: [ProductionVariantSummary]?
        /// The name of the endpoint configuration associated with this endpoint.
        public let endpointConfigName: String
        /// Name of the endpoint.
        public let endpointName: String
        /// The Amazon Resource Name (ARN) of the endpoint.
        public let endpointArn: String
        /// A timestamp that shows when the endpoint was created.
        public let creationTime: TimeStamp
        /// If the status of the endpoint is Failed, the reason why it failed. 
        public let failureReason: String?
        /// The status of the endpoint.
        public let endpointStatus: EndpointStatus

        public init(lastModifiedTime: TimeStamp, productionVariants: [ProductionVariantSummary]? = nil, endpointConfigName: String, endpointName: String, endpointArn: String, creationTime: TimeStamp, failureReason: String? = nil, endpointStatus: EndpointStatus) {
            self.lastModifiedTime = lastModifiedTime
            self.productionVariants = productionVariants
            self.endpointConfigName = endpointConfigName
            self.endpointName = endpointName
            self.endpointArn = endpointArn
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.endpointStatus = endpointStatus
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedTime = "LastModifiedTime"
            case productionVariants = "ProductionVariants"
            case endpointConfigName = "EndpointConfigName"
            case endpointName = "EndpointName"
            case endpointArn = "EndpointArn"
            case creationTime = "CreationTime"
            case failureReason = "FailureReason"
            case endpointStatus = "EndpointStatus"
        }
    }

    public struct CreateModelInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ModelName", required: true, type: .string), 
            AWSShapeMember(label: "ExecutionRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "PrimaryContainer", required: true, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "SupplementalContainers", required: false, type: .list)
        ]
        /// The name of the new model.
        public let modelName: String
        /// The Amazon Resource Name (ARN) of the IAM role that Amazon SageMaker can assume to access model artifacts and docker image for deployment on ML compute instances. Deploying on ML compute instances is part of model hosting. For more information, see Amazon SageMaker Roles. 
        public let executionRoleArn: String?
        /// The location of the primary docker image containing inference code, associated artifacts, and custom environment map that the inference code uses when the model is deployed into production. 
        public let primaryContainer: ContainerDefinition
        /// An array of key-value pairs. For more information, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide. 
        public let tags: [Tag]?
        /// The additional optional containers to deploy.
        public let supplementalContainers: [ContainerDefinition]?

        public init(modelName: String, executionRoleArn: String? = nil, primaryContainer: ContainerDefinition, tags: [Tag]? = nil, supplementalContainers: [ContainerDefinition]? = nil) {
            self.modelName = modelName
            self.executionRoleArn = executionRoleArn
            self.primaryContainer = primaryContainer
            self.tags = tags
            self.supplementalContainers = supplementalContainers
        }

        private enum CodingKeys: String, CodingKey {
            case modelName = "ModelName"
            case executionRoleArn = "ExecutionRoleArn"
            case primaryContainer = "PrimaryContainer"
            case tags = "Tags"
            case supplementalContainers = "SupplementalContainers"
        }
    }

    public struct CreateEndpointOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the endpoint.
        public let endpointArn: String

        public init(endpointArn: String) {
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
        }
    }

    public struct CreateModelOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ModelArn", required: true, type: .string)
        ]
        /// The ARN of the model created in Amazon SageMaker.
        public let modelArn: String

        public init(modelArn: String) {
            self.modelArn = modelArn
        }

        private enum CodingKeys: String, CodingKey {
            case modelArn = "ModelArn"
        }
    }

    public struct ListNotebookInstancesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SortBy", required: false, type: .enum), 
            AWSShapeMember(label: "LastModifiedTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "NameContains", required: false, type: .string), 
            AWSShapeMember(label: "SortOrder", required: false, type: .enum), 
            AWSShapeMember(label: "LastModifiedTimeBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "StatusEquals", required: false, type: .enum), 
            AWSShapeMember(label: "CreationTimeBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The field to sort results by. The default is Name.
        public let sortBy: NotebookInstanceSortKey?
        /// A filter that returns only notebook instances that were modified after the specified time (timestamp).
        public let lastModifiedTimeAfter: TimeStamp?
        ///  If the previous call to the ListNotebookInstances is truncated, the response includes a NextToken. You can use this token in your subsequent ListNotebookInstances request to fetch the next set of notebook instances.    You might specify a filter or a sort order in your request. When response is truncated, you must use the same values for the filer and sort order in the next request.  
        public let nextToken: String?
        /// A filter that returns only notebook instances that were created after the specified time (timestamp).
        public let creationTimeAfter: TimeStamp?
        /// A string in the notebook instances' name. This filter returns only notebook instances whose name contains the specified string. 
        public let nameContains: String?
        /// The sort order for results. 
        public let sortOrder: NotebookInstanceSortOrder?
        /// A filter that returns only notebook instances that were modified before the specified time (timestamp).
        public let lastModifiedTimeBefore: TimeStamp?
        /// A filter that returns only notebook instances with the specified status.
        public let statusEquals: NotebookInstanceStatus?
        /// A filter that returns only notebook instances that were created before the specified time (timestamp). 
        public let creationTimeBefore: TimeStamp?
        /// The maximum number of notebook instances to return.
        public let maxResults: Int32?

        public init(sortBy: NotebookInstanceSortKey? = nil, lastModifiedTimeAfter: TimeStamp? = nil, nextToken: String? = nil, creationTimeAfter: TimeStamp? = nil, nameContains: String? = nil, sortOrder: NotebookInstanceSortOrder? = nil, lastModifiedTimeBefore: TimeStamp? = nil, statusEquals: NotebookInstanceStatus? = nil, creationTimeBefore: TimeStamp? = nil, maxResults: Int32? = nil) {
            self.sortBy = sortBy
            self.lastModifiedTimeAfter = lastModifiedTimeAfter
            self.nextToken = nextToken
            self.creationTimeAfter = creationTimeAfter
            self.nameContains = nameContains
            self.sortOrder = sortOrder
            self.lastModifiedTimeBefore = lastModifiedTimeBefore
            self.statusEquals = statusEquals
            self.creationTimeBefore = creationTimeBefore
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case sortBy = "SortBy"
            case lastModifiedTimeAfter = "LastModifiedTimeAfter"
            case nextToken = "NextToken"
            case creationTimeAfter = "CreationTimeAfter"
            case nameContains = "NameContains"
            case sortOrder = "SortOrder"
            case lastModifiedTimeBefore = "LastModifiedTimeBefore"
            case statusEquals = "StatusEquals"
            case creationTimeBefore = "CreationTimeBefore"
            case maxResults = "MaxResults"
        }
    }

    public struct UpdateEndpointWeightsAndCapacitiesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the updated endpoint.
        public let endpointArn: String

        public init(endpointArn: String) {
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
        }
    }

    public struct ListEndpointConfigsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SortBy", required: false, type: .enum), 
            AWSShapeMember(label: "CreationTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "NameContains", required: false, type: .string), 
            AWSShapeMember(label: "SortOrder", required: false, type: .enum), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimeBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The field to sort results by. The default is CreationTime.
        public let sortBy: EndpointConfigSortKey?
        /// A filter that returns only endpoint configurations created after the specified time (timestamp).
        public let creationTimeAfter: TimeStamp?
        /// A string in the endpoint configuration name. This filter returns only endpoint configurations whose name contains the specified string. 
        public let nameContains: String?
        /// The sort order for results. The default is Ascending.
        public let sortOrder: OrderKey?
        /// If the result of the previous ListEndpointConfig request was truncated, the response includes a NextToken. To retrieve the next set of endpoint configurations, use the token in the next request. 
        public let nextToken: String?
        /// A filter that returns only endpoint configurations created before the specified time (timestamp).
        public let creationTimeBefore: TimeStamp?
        /// The maximum number of training jobs to return in the response.
        public let maxResults: Int32?

        public init(sortBy: EndpointConfigSortKey? = nil, creationTimeAfter: TimeStamp? = nil, nameContains: String? = nil, sortOrder: OrderKey? = nil, nextToken: String? = nil, creationTimeBefore: TimeStamp? = nil, maxResults: Int32? = nil) {
            self.sortBy = sortBy
            self.creationTimeAfter = creationTimeAfter
            self.nameContains = nameContains
            self.sortOrder = sortOrder
            self.nextToken = nextToken
            self.creationTimeBefore = creationTimeBefore
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case sortBy = "SortBy"
            case creationTimeAfter = "CreationTimeAfter"
            case nameContains = "NameContains"
            case sortOrder = "SortOrder"
            case nextToken = "NextToken"
            case creationTimeBefore = "CreationTimeBefore"
            case maxResults = "MaxResults"
        }
    }

    public struct UpdateEndpointInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointConfigName", required: true, type: .string), 
            AWSShapeMember(label: "EndpointName", required: true, type: .string)
        ]
        /// The name of the new endpoint configuration.
        public let endpointConfigName: String
        /// The name of the endpoint whose configuration you want to update.
        public let endpointName: String

        public init(endpointConfigName: String, endpointName: String) {
            self.endpointConfigName = endpointConfigName
            self.endpointName = endpointName
        }

        private enum CodingKeys: String, CodingKey {
            case endpointConfigName = "EndpointConfigName"
            case endpointName = "EndpointName"
        }
    }

    public enum ModelSortKey: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        public var description: String { return self.rawValue }
    }

    public struct UpdateEndpointOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the endpoint.
        public let endpointArn: String

        public init(endpointArn: String) {
            self.endpointArn = endpointArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointArn = "EndpointArn"
        }
    }

    public enum NotebookInstanceSortKey: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        case status = "Status"
        public var description: String { return self.rawValue }
    }

    public struct ProductionVariantSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CurrentWeight", required: false, type: .float), 
            AWSShapeMember(label: "DesiredWeight", required: false, type: .float), 
            AWSShapeMember(label: "DesiredInstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "VariantName", required: true, type: .string), 
            AWSShapeMember(label: "CurrentInstanceCount", required: false, type: .integer)
        ]
        /// The weight associated with the variant.
        public let currentWeight: Float?
        /// The requested weight, as specified in the UpdateWeightAndCapacities request. 
        public let desiredWeight: Float?
        /// The number of instances requested in the UpdateWeightAndCapacities request. 
        public let desiredInstanceCount: Int32?
        /// The name of the variant.
        public let variantName: String
        /// The number of instances associated with the variant.
        public let currentInstanceCount: Int32?

        public init(currentWeight: Float? = nil, desiredWeight: Float? = nil, desiredInstanceCount: Int32? = nil, variantName: String, currentInstanceCount: Int32? = nil) {
            self.currentWeight = currentWeight
            self.desiredWeight = desiredWeight
            self.desiredInstanceCount = desiredInstanceCount
            self.variantName = variantName
            self.currentInstanceCount = currentInstanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case currentWeight = "CurrentWeight"
            case desiredWeight = "DesiredWeight"
            case desiredInstanceCount = "DesiredInstanceCount"
            case variantName = "VariantName"
            case currentInstanceCount = "CurrentInstanceCount"
        }
    }

    public struct DescribeNotebookInstanceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotebookInstanceName", required: true, type: .string)
        ]
        /// The name of the notebook instance that you want information about.
        public let notebookInstanceName: String

        public init(notebookInstanceName: String) {
            self.notebookInstanceName = notebookInstanceName
        }

        private enum CodingKeys: String, CodingKey {
            case notebookInstanceName = "NotebookInstanceName"
        }
    }

    public enum ProductionVariantInstanceType: String, CustomStringConvertible, Codable {
        case mlC42Xlarge = "ml.c4.2xlarge"
        case mlC48Xlarge = "ml.c4.8xlarge"
        case mlC4Xlarge = "ml.c4.xlarge"
        case mlC52Xlarge = "ml.c5.2xlarge"
        case mlC59Xlarge = "ml.c5.9xlarge"
        case mlC5Xlarge = "ml.c5.xlarge"
        case mlM4Xlarge = "ml.m4.xlarge"
        case mlP2Xlarge = "ml.p2.xlarge"
        case mlP32Xlarge = "ml.p3.2xlarge"
        case mlT2Medium = "ml.t2.medium"
        public var description: String { return self.rawValue }
    }

    public enum S3DataType: String, CustomStringConvertible, Codable {
        case manifestfile = "ManifestFile"
        case s3prefix = "S3Prefix"
        public var description: String { return self.rawValue }
    }

    public struct StartNotebookInstanceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotebookInstanceName", required: true, type: .string)
        ]
        /// The name of the notebook instance to start.
        public let notebookInstanceName: String

        public init(notebookInstanceName: String) {
            self.notebookInstanceName = notebookInstanceName
        }

        private enum CodingKeys: String, CodingKey {
            case notebookInstanceName = "NotebookInstanceName"
        }
    }

    public struct UpdateEndpointWeightsAndCapacitiesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointName", required: true, type: .string), 
            AWSShapeMember(label: "DesiredWeightsAndCapacities", required: true, type: .list)
        ]
        /// The name of an existing Amazon SageMaker endpoint.
        public let endpointName: String
        /// An object that provides new capacity and weight values for a variant.
        public let desiredWeightsAndCapacities: [DesiredWeightAndCapacity]

        public init(endpointName: String, desiredWeightsAndCapacities: [DesiredWeightAndCapacity]) {
            self.endpointName = endpointName
            self.desiredWeightsAndCapacities = desiredWeightsAndCapacities
        }

        private enum CodingKeys: String, CodingKey {
            case endpointName = "EndpointName"
            case desiredWeightsAndCapacities = "DesiredWeightsAndCapacities"
        }
    }

    public struct DeleteModelInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ModelName", required: true, type: .string)
        ]
        /// The name of the model to delete.
        public let modelName: String

        public init(modelName: String) {
            self.modelName = modelName
        }

        private enum CodingKeys: String, CodingKey {
            case modelName = "ModelName"
        }
    }

    public enum TrainingInputMode: String, CustomStringConvertible, Codable {
        case pipe = "Pipe"
        case file = "File"
        public var description: String { return self.rawValue }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The tag value.
        public let value: String
        /// The tag key.
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct ListEndpointsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Endpoints", required: true, type: .list)
        ]
        ///  If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of training jobs, use it in the subsequent request. 
        public let nextToken: String?
        ///  An array or endpoint objects. 
        public let endpoints: [EndpointSummary]

        public init(nextToken: String? = nil, endpoints: [EndpointSummary]) {
            self.nextToken = nextToken
            self.endpoints = endpoints
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case endpoints = "Endpoints"
        }
    }

    public struct ContainerDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Environment", required: false, type: .map), 
            AWSShapeMember(label: "Image", required: true, type: .string), 
            AWSShapeMember(label: "ModelDataUrl", required: false, type: .string), 
            AWSShapeMember(label: "ContainerHostname", required: false, type: .string)
        ]
        /// The environment variables to set in the Docker container. Each key and value in the Environment string to string map can have length of up to 1024. We support up to 16 entries in the map. 
        public let environment: [String: String]?
        /// The Amazon EC2 Container Registry (Amazon ECR) path where inference code is stored. If you are using your own custom algorithm instead of an algorithm provided by Amazon SageMaker, the inference code must meet Amazon SageMaker requirements. For more information, see Using Your Own Algorithms with Amazon SageMaker 
        public let image: String
        /// The S3 path where the model artifacts, which result from model training, are stored. This path must point to a single gzip compressed tar archive (.tar.gz suffix). 
        public let modelDataUrl: String?
        /// The DNS host name for the container after Amazon SageMaker deploys it.
        public let containerHostname: String?

        public init(environment: [String: String]? = nil, image: String, modelDataUrl: String? = nil, containerHostname: String? = nil) {
            self.environment = environment
            self.image = image
            self.modelDataUrl = modelDataUrl
            self.containerHostname = containerHostname
        }

        private enum CodingKeys: String, CodingKey {
            case environment = "Environment"
            case image = "Image"
            case modelDataUrl = "ModelDataUrl"
            case containerHostname = "ContainerHostname"
        }
    }

    public enum SortOrder: String, CustomStringConvertible, Codable {
        case ascending = "Ascending"
        case descending = "Descending"
        public var description: String { return self.rawValue }
    }

    public struct DescribeModelInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ModelName", required: true, type: .string)
        ]
        /// The name of the model.
        public let modelName: String

        public init(modelName: String) {
            self.modelName = modelName
        }

        private enum CodingKeys: String, CodingKey {
            case modelName = "ModelName"
        }
    }

    public struct ListTagsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The Amazon Resource Name (ARN) of the resource whose tags you want to retrieve.
        public let resourceArn: String
        ///  If the response to the previous ListTags request is truncated, Amazon SageMaker returns this token. To retrieve the next set of tags, use it in the subsequent request. 
        public let nextToken: String?
        /// Maximum number of tags to return.
        public let maxResults: Int32?

        public init(resourceArn: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.resourceArn = resourceArn
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct Channel: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContentType", required: false, type: .string), 
            AWSShapeMember(label: "DataSource", required: true, type: .structure), 
            AWSShapeMember(label: "CompressionType", required: false, type: .enum), 
            AWSShapeMember(label: "ChannelName", required: true, type: .string), 
            AWSShapeMember(label: "RecordWrapperType", required: false, type: .enum)
        ]
        /// The MIME type of the data.
        public let contentType: String?
        /// The location of the channel data.
        public let dataSource: DataSource
        /// If training data is compressed, the compression type. The default value is None. CompressionType is used only in PIPE input mode. In FILE mode, leave this field unset or set it to None.
        public let compressionType: CompressionType?
        /// The name of the channel. 
        public let channelName: String
        ///  Specify RecordIO as the value when input data is in raw format but the training algorithm requires the RecordIO format, in which caseAmazon SageMaker wraps each individual S3 object in a RecordIO record. If the input data is already in RecordIO format, you don't need to set this attribute. For more information, see Create a Dataset Using RecordIO.  In FILE mode, leave this field unset or set it to None. 
        public let recordWrapperType: RecordWrapper?

        public init(contentType: String? = nil, dataSource: DataSource, compressionType: CompressionType? = nil, channelName: String, recordWrapperType: RecordWrapper? = nil) {
            self.contentType = contentType
            self.dataSource = dataSource
            self.compressionType = compressionType
            self.channelName = channelName
            self.recordWrapperType = recordWrapperType
        }

        private enum CodingKeys: String, CodingKey {
            case contentType = "ContentType"
            case dataSource = "DataSource"
            case compressionType = "CompressionType"
            case channelName = "ChannelName"
            case recordWrapperType = "RecordWrapperType"
        }
    }

    public struct CreateEndpointConfigInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointConfigName", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ProductionVariants", required: true, type: .list)
        ]
        /// The name of the endpoint configuration. You specify this name in a CreateEndpoint request. 
        public let endpointConfigName: String
        /// An array of key-value pairs. For more information, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide. 
        public let tags: [Tag]?
        /// An array of ProductionVariant objects, one for each model that you want to host at this endpoint.
        public let productionVariants: [ProductionVariant]

        public init(endpointConfigName: String, tags: [Tag]? = nil, productionVariants: [ProductionVariant]) {
            self.endpointConfigName = endpointConfigName
            self.tags = tags
            self.productionVariants = productionVariants
        }

        private enum CodingKeys: String, CodingKey {
            case endpointConfigName = "EndpointConfigName"
            case tags = "Tags"
            case productionVariants = "ProductionVariants"
        }
    }

    public struct ModelArtifacts: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3ModelArtifacts", required: true, type: .string)
        ]
        /// The path of the S3 object that contains the model artifacts. For example, s3://bucket-name/keynameprefix/model.tar.gz.
        public let s3ModelArtifacts: String

        public init(s3ModelArtifacts: String) {
            self.s3ModelArtifacts = s3ModelArtifacts
        }

        private enum CodingKeys: String, CodingKey {
            case s3ModelArtifacts = "S3ModelArtifacts"
        }
    }

    public struct OutputDataConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3OutputPath", required: true, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string)
        ]
        /// Identifies the S3 path where you want Amazon SageMaker to store the model artifacts. For example, s3://bucket-name/key-name-prefix. 
        public let s3OutputPath: String
        /// The AWS Key Management Service (AWS KMS) key that Amazon SageMaker uses to encrypt the model artifacts at rest using Amazon S3 server-side encryption.   If the configuration of the output S3 bucket requires server-side encryption for objects, and you don't provide the KMS key ID, Amazon SageMaker uses the default service key. For more information, see KMS-Managed Encryption Keys in Amazon Simple Storage Service developer guide.    The KMS key policy must grant permission to the IAM role you specify in your CreateTrainingJob request. Using Key Policies in AWS KMS in the AWS Key Management Service Developer Guide.  
        public let kmsKeyId: String?

        public init(s3OutputPath: String, kmsKeyId: String? = nil) {
            self.s3OutputPath = s3OutputPath
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case s3OutputPath = "S3OutputPath"
            case kmsKeyId = "KmsKeyId"
        }
    }

    public struct CreateTrainingJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrainingJobArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the training job.
        public let trainingJobArn: String

        public init(trainingJobArn: String) {
            self.trainingJobArn = trainingJobArn
        }

        private enum CodingKeys: String, CodingKey {
            case trainingJobArn = "TrainingJobArn"
        }
    }

    public struct CreateNotebookInstanceOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotebookInstanceArn", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the notebook instance. 
        public let notebookInstanceArn: String?

        public init(notebookInstanceArn: String? = nil) {
            self.notebookInstanceArn = notebookInstanceArn
        }

        private enum CodingKeys: String, CodingKey {
            case notebookInstanceArn = "NotebookInstanceArn"
        }
    }

    public enum RecordWrapper: String, CustomStringConvertible, Codable {
        case none = "None"
        case recordio = "RecordIO"
        public var description: String { return self.rawValue }
    }

    public enum TrainingInstanceType: String, CustomStringConvertible, Codable {
        case mlM4Xlarge = "ml.m4.xlarge"
        case mlM44Xlarge = "ml.m4.4xlarge"
        case mlM410Xlarge = "ml.m4.10xlarge"
        case mlC4Xlarge = "ml.c4.xlarge"
        case mlC42Xlarge = "ml.c4.2xlarge"
        case mlC48Xlarge = "ml.c4.8xlarge"
        case mlP2Xlarge = "ml.p2.xlarge"
        case mlP28Xlarge = "ml.p2.8xlarge"
        case mlP216Xlarge = "ml.p2.16xlarge"
        case mlP32Xlarge = "ml.p3.2xlarge"
        case mlP38Xlarge = "ml.p3.8xlarge"
        case mlP316Xlarge = "ml.p3.16xlarge"
        case mlC5Xlarge = "ml.c5.xlarge"
        case mlC52Xlarge = "ml.c5.2xlarge"
        case mlC54Xlarge = "ml.c5.4xlarge"
        case mlC59Xlarge = "ml.c5.9xlarge"
        case mlC518Xlarge = "ml.c5.18xlarge"
        public var description: String { return self.rawValue }
    }

    public enum OrderKey: String, CustomStringConvertible, Codable {
        case ascending = "Ascending"
        case descending = "Descending"
        public var description: String { return self.rawValue }
    }

    public struct DescribeTrainingJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrainingJobName", required: true, type: .string)
        ]
        /// The name of the training job.
        public let trainingJobName: String

        public init(trainingJobName: String) {
            self.trainingJobName = trainingJobName
        }

        private enum CodingKeys: String, CodingKey {
            case trainingJobName = "TrainingJobName"
        }
    }

    public enum S3DataDistribution: String, CustomStringConvertible, Codable {
        case fullyreplicated = "FullyReplicated"
        case shardedbys3key = "ShardedByS3Key"
        public var description: String { return self.rawValue }
    }

    public struct AddTagsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// A list of tags associated with the Amazon SageMaker resource.
        public let tags: [Tag]?

        public init(tags: [Tag]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct ListModelsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Models", required: true, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// An array of ModelSummary objects, each of which lists a model.
        public let models: [ModelSummary]
        ///  If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of models, use it in the subsequent request. 
        public let nextToken: String?

        public init(models: [ModelSummary], nextToken: String? = nil) {
            self.models = models
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case models = "Models"
            case nextToken = "NextToken"
        }
    }

    public struct ModelSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ModelName", required: true, type: .string), 
            AWSShapeMember(label: "CreationTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "ModelArn", required: true, type: .string)
        ]
        /// The name of the model that you want a summary for.
        public let modelName: String
        /// A timestamp that indicates when the model was created.
        public let creationTime: TimeStamp
        /// The Amazon Resource Name (ARN) of the model.
        public let modelArn: String

        public init(modelName: String, creationTime: TimeStamp, modelArn: String) {
            self.modelName = modelName
            self.creationTime = creationTime
            self.modelArn = modelArn
        }

        private enum CodingKeys: String, CodingKey {
            case modelName = "ModelName"
            case creationTime = "CreationTime"
            case modelArn = "ModelArn"
        }
    }

    public struct DescribeEndpointConfigOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointConfigArn", required: true, type: .string), 
            AWSShapeMember(label: "CreationTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "ProductionVariants", required: true, type: .list), 
            AWSShapeMember(label: "EndpointConfigName", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the endpoint configuration.
        public let endpointConfigArn: String
        /// A timestamp that shows when the endpoint configuration was created.
        public let creationTime: TimeStamp
        /// An array of ProductionVariant objects, one for each model that you want to host at this endpoint.
        public let productionVariants: [ProductionVariant]
        /// Name of the Amazon SageMaker endpoint configuration.
        public let endpointConfigName: String

        public init(endpointConfigArn: String, creationTime: TimeStamp, productionVariants: [ProductionVariant], endpointConfigName: String) {
            self.endpointConfigArn = endpointConfigArn
            self.creationTime = creationTime
            self.productionVariants = productionVariants
            self.endpointConfigName = endpointConfigName
        }

        private enum CodingKeys: String, CodingKey {
            case endpointConfigArn = "EndpointConfigArn"
            case creationTime = "CreationTime"
            case productionVariants = "ProductionVariants"
            case endpointConfigName = "EndpointConfigName"
        }
    }

    public enum EndpointSortKey: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        case status = "Status"
        public var description: String { return self.rawValue }
    }

    public struct DescribeEndpointInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointName", required: true, type: .string)
        ]
        /// The name of the endpoint.
        public let endpointName: String

        public init(endpointName: String) {
            self.endpointName = endpointName
        }

        private enum CodingKeys: String, CodingKey {
            case endpointName = "EndpointName"
        }
    }

    public struct CreatePresignedNotebookInstanceUrlInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SessionExpirationDurationInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "NotebookInstanceName", required: true, type: .string)
        ]
        /// The duration of the session, in seconds. The default is 12 hours.
        public let sessionExpirationDurationInSeconds: Int32?
        /// The name of the notebook instance.
        public let notebookInstanceName: String

        public init(sessionExpirationDurationInSeconds: Int32? = nil, notebookInstanceName: String) {
            self.sessionExpirationDurationInSeconds = sessionExpirationDurationInSeconds
            self.notebookInstanceName = notebookInstanceName
        }

        private enum CodingKeys: String, CodingKey {
            case sessionExpirationDurationInSeconds = "SessionExpirationDurationInSeconds"
            case notebookInstanceName = "NotebookInstanceName"
        }
    }

    public struct ProductionVariant: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitialVariantWeight", required: false, type: .float), 
            AWSShapeMember(label: "ModelName", required: true, type: .string), 
            AWSShapeMember(label: "InitialInstanceCount", required: true, type: .integer), 
            AWSShapeMember(label: "InstanceType", required: true, type: .enum), 
            AWSShapeMember(label: "VariantName", required: true, type: .string)
        ]
        /// Determines initial traffic distribution among all of the models that you specify in the endpoint configuration. The traffic to a production variant is determined by the ratio of the VariantWeight to the sum of all VariantWeight values across all ProductionVariants. If unspecified, it defaults to 1.0. 
        public let initialVariantWeight: Float?
        /// The name of the model that you want to host. This is the name that you specified when creating the model.
        public let modelName: String
        /// Number of instances to launch initially.
        public let initialInstanceCount: Int32
        /// The ML compute instance type.
        public let instanceType: ProductionVariantInstanceType
        /// The name of the production variant.
        public let variantName: String

        public init(initialVariantWeight: Float? = nil, modelName: String, initialInstanceCount: Int32, instanceType: ProductionVariantInstanceType, variantName: String) {
            self.initialVariantWeight = initialVariantWeight
            self.modelName = modelName
            self.initialInstanceCount = initialInstanceCount
            self.instanceType = instanceType
            self.variantName = variantName
        }

        private enum CodingKeys: String, CodingKey {
            case initialVariantWeight = "InitialVariantWeight"
            case modelName = "ModelName"
            case initialInstanceCount = "InitialInstanceCount"
            case instanceType = "InstanceType"
            case variantName = "VariantName"
        }
    }

    public enum InstanceType: String, CustomStringConvertible, Codable {
        case mlT2Medium = "ml.t2.medium"
        case mlM4Xlarge = "ml.m4.xlarge"
        case mlP2Xlarge = "ml.p2.xlarge"
        public var description: String { return self.rawValue }
    }

    public struct CreateEndpointConfigOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointConfigArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the endpoint configuration. 
        public let endpointConfigArn: String

        public init(endpointConfigArn: String) {
            self.endpointConfigArn = endpointConfigArn
        }

        private enum CodingKeys: String, CodingKey {
            case endpointConfigArn = "EndpointConfigArn"
        }
    }

    public struct S3DataSource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Uri", required: true, type: .string), 
            AWSShapeMember(label: "S3DataType", required: true, type: .enum), 
            AWSShapeMember(label: "S3DataDistributionType", required: false, type: .enum)
        ]
        /// Depending on the value specified for the S3DataType, identifies either a key name prefix or a manifest. For example:     A key name prefix might look like this: s3://bucketname/exampleprefix.     A manifest might look like this: s3://bucketname/example.manifest   The manifest is an S3 object which is a JSON file with the following format:   [    {"prefix": "s3://customer_bucket/some/prefix/"},    "relative/path/to/custdata-1",    "relative/path/custdata-2",    ...    ]   The preceding JSON matches the following s3Uris:   s3://customer_bucket/some/prefix/relative/path/to/custdata-1   s3://customer_bucket/some/prefix/relative/path/custdata-1   ...   The complete set of s3uris in this manifest constitutes the input data for the channel for this datasource. The object that each s3uris points to must readable by the IAM role that Amazon SageMaker uses to perform tasks on your behalf.   
        public let s3Uri: String
        /// If you choose S3Prefix, S3Uri identifies a key name prefix. Amazon SageMaker uses all objects with the specified key name prefix for model training.  If you choose ManifestFile, S3Uri identifies an object that is a manifest file containing a list of object keys that you want Amazon SageMaker to use for model training. 
        public let s3DataType: S3DataType
        /// If you want Amazon SageMaker to replicate the entire dataset on each ML compute instance that is launched for model training, specify FullyReplicated.  If you want Amazon SageMaker to replicate a subset of data on each ML compute instance that is launched for model training, specify ShardedByS3Key. If there are n ML compute instances launched for a training job, each instance gets approximately 1/n of the number of S3 objects. In this case, model training on each machine uses only the subset of training data.  Don't choose more ML compute instances for training than available S3 objects. If you do, some nodes won't get any data and you will pay for nodes that aren't getting any training data. This applies in both FILE and PIPE modes. Keep this in mind when developing algorithms.  In distributed training, where you use multiple ML compute EC2 instances, you might choose ShardedByS3Key. If the algorithm requires copying training data to the ML storage volume (when TrainingInputMode is set to File), this copies 1/n of the number of objects. 
        public let s3DataDistributionType: S3DataDistribution?

        public init(s3Uri: String, s3DataType: S3DataType, s3DataDistributionType: S3DataDistribution? = nil) {
            self.s3Uri = s3Uri
            self.s3DataType = s3DataType
            self.s3DataDistributionType = s3DataDistributionType
        }

        private enum CodingKeys: String, CodingKey {
            case s3Uri = "S3Uri"
            case s3DataType = "S3DataType"
            case s3DataDistributionType = "S3DataDistributionType"
        }
    }

    public struct StoppingCondition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRuntimeInSeconds", required: false, type: .integer)
        ]
        /// The maximum length of time, in seconds, that the training job can run. If model training does not complete during this time, Amazon SageMaker ends the job. If value is not specified, default value is 1 day. Maximum value is 5 days.
        public let maxRuntimeInSeconds: Int32?

        public init(maxRuntimeInSeconds: Int32? = nil) {
            self.maxRuntimeInSeconds = maxRuntimeInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case maxRuntimeInSeconds = "MaxRuntimeInSeconds"
        }
    }

    public struct ListTrainingJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TrainingJobSummaries", required: true, type: .list)
        ]
        /// If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of training jobs, use it in the subsequent request.
        public let nextToken: String?
        /// An array of TrainingJobSummary objects, each listing a training job.
        public let trainingJobSummaries: [TrainingJobSummary]

        public init(nextToken: String? = nil, trainingJobSummaries: [TrainingJobSummary]) {
            self.nextToken = nextToken
            self.trainingJobSummaries = trainingJobSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case trainingJobSummaries = "TrainingJobSummaries"
        }
    }

    public struct ListEndpointsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SortBy", required: false, type: .enum), 
            AWSShapeMember(label: "LastModifiedTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "NameContains", required: false, type: .string), 
            AWSShapeMember(label: "SortOrder", required: false, type: .enum), 
            AWSShapeMember(label: "LastModifiedTimeBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "StatusEquals", required: false, type: .enum), 
            AWSShapeMember(label: "CreationTimeBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Sorts the list of results. The default is CreationTime.
        public let sortBy: EndpointSortKey?
        ///  A filter that returns only endpoints that were modified after the specified timestamp. 
        public let lastModifiedTimeAfter: TimeStamp?
        /// If the result of a ListEndpoints request was truncated, the response includes a NextToken. To retrieve the next set of endpoints, use the token in the next request.
        public let nextToken: String?
        /// A filter that returns only endpoints that were created after the specified time (timestamp).
        public let creationTimeAfter: TimeStamp?
        /// A string in endpoint names. This filter returns only endpoints whose name contains the specified string.
        public let nameContains: String?
        /// The sort order for results. The default is Ascending.
        public let sortOrder: OrderKey?
        ///  A filter that returns only endpoints that were modified before the specified timestamp. 
        public let lastModifiedTimeBefore: TimeStamp?
        ///  A filter that returns only endpoints with the specified status. 
        public let statusEquals: EndpointStatus?
        /// A filter that returns only endpoints that were created before the specified time (timestamp).
        public let creationTimeBefore: TimeStamp?
        /// The maximum number of endpoints to return in the response.
        public let maxResults: Int32?

        public init(sortBy: EndpointSortKey? = nil, lastModifiedTimeAfter: TimeStamp? = nil, nextToken: String? = nil, creationTimeAfter: TimeStamp? = nil, nameContains: String? = nil, sortOrder: OrderKey? = nil, lastModifiedTimeBefore: TimeStamp? = nil, statusEquals: EndpointStatus? = nil, creationTimeBefore: TimeStamp? = nil, maxResults: Int32? = nil) {
            self.sortBy = sortBy
            self.lastModifiedTimeAfter = lastModifiedTimeAfter
            self.nextToken = nextToken
            self.creationTimeAfter = creationTimeAfter
            self.nameContains = nameContains
            self.sortOrder = sortOrder
            self.lastModifiedTimeBefore = lastModifiedTimeBefore
            self.statusEquals = statusEquals
            self.creationTimeBefore = creationTimeBefore
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case sortBy = "SortBy"
            case lastModifiedTimeAfter = "LastModifiedTimeAfter"
            case nextToken = "NextToken"
            case creationTimeAfter = "CreationTimeAfter"
            case nameContains = "NameContains"
            case sortOrder = "SortOrder"
            case lastModifiedTimeBefore = "LastModifiedTimeBefore"
            case statusEquals = "StatusEquals"
            case creationTimeBefore = "CreationTimeBefore"
            case maxResults = "MaxResults"
        }
    }

    public struct TrainingJobSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TrainingJobStatus", required: true, type: .enum), 
            AWSShapeMember(label: "CreationTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "TrainingJobArn", required: true, type: .string), 
            AWSShapeMember(label: "TrainingJobName", required: true, type: .string), 
            AWSShapeMember(label: "TrainingEndTime", required: false, type: .timestamp)
        ]
        ///  Timestamp when the training job was last modified. 
        public let lastModifiedTime: TimeStamp?
        /// The status of the training job.
        public let trainingJobStatus: TrainingJobStatus
        /// A timestamp that shows when the training job was created.
        public let creationTime: TimeStamp
        /// The Amazon Resource Name (ARN) of the training job.
        public let trainingJobArn: String
        /// The name of the training job that you want a summary for.
        public let trainingJobName: String
        /// A timestamp that shows when the training job ended. This field is set only if the training job has one of the terminal statuses (Completed, Failed, or Stopped). 
        public let trainingEndTime: TimeStamp?

        public init(lastModifiedTime: TimeStamp? = nil, trainingJobStatus: TrainingJobStatus, creationTime: TimeStamp, trainingJobArn: String, trainingJobName: String, trainingEndTime: TimeStamp? = nil) {
            self.lastModifiedTime = lastModifiedTime
            self.trainingJobStatus = trainingJobStatus
            self.creationTime = creationTime
            self.trainingJobArn = trainingJobArn
            self.trainingJobName = trainingJobName
            self.trainingEndTime = trainingEndTime
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedTime = "LastModifiedTime"
            case trainingJobStatus = "TrainingJobStatus"
            case creationTime = "CreationTime"
            case trainingJobArn = "TrainingJobArn"
            case trainingJobName = "TrainingJobName"
            case trainingEndTime = "TrainingEndTime"
        }
    }

    public struct CreateTrainingJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "AlgorithmSpecification", required: true, type: .structure), 
            AWSShapeMember(label: "HyperParameters", required: false, type: .map), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "InputDataConfig", required: true, type: .list), 
            AWSShapeMember(label: "ResourceConfig", required: true, type: .structure), 
            AWSShapeMember(label: "RoleArn", required: true, type: .string), 
            AWSShapeMember(label: "TrainingJobName", required: true, type: .string), 
            AWSShapeMember(label: "StoppingCondition", required: true, type: .structure)
        ]
        /// Specifies the path to the S3 bucket where you want to store model artifacts. Amazon SageMaker creates subfolders for the artifacts. 
        public let outputDataConfig: OutputDataConfig
        /// The registry path of the Docker image that contains the training algorithm and algorithm-specific metadata, including the input mode. For more information about algorithms provided by Amazon SageMaker, see Algorithms. For information about providing your own algorithms, see Bring Your Own Algorithms . 
        public let algorithmSpecification: AlgorithmSpecification
        /// Algorithm-specific parameters. You set hyperparameters before you start the learning process. Hyperparameters influence the quality of the model. For a list of hyperparameters for each training algorithm provided by Amazon SageMaker, see Algorithms.  You can specify a maximum of 100 hyperparameters. Each hyperparameter is a key-value pair. Each key and value is limited to 256 characters, as specified by the Length Constraint. 
        public let hyperParameters: [String: String]?
        /// An array of key-value pairs. For more information, see Using Cost Allocation Tags in the AWS Billing and Cost Management User Guide. 
        public let tags: [Tag]?
        /// An array of Channel objects. Each channel is a named input source. InputDataConfig describes the input data and its location.  Algorithms can accept input data from one or more channels. For example, an algorithm might have two channels of input data, training_data and validation_data. The configuration for each channel provides the S3 location where the input data is stored. It also provides information about the stored data: the MIME type, compression method, and whether the data is wrapped in RecordIO format.  Depending on the input mode that the algorithm supports, Amazon SageMaker either copies input data files from an S3 bucket to a local directory in the Docker container, or makes it available as input streams. 
        public let inputDataConfig: [Channel]
        /// The resources, including the ML compute instances and ML storage volumes, to use for model training.  ML storage volumes store model artifacts and incremental states. Training algorithms might also use ML storage volumes for scratch space. If you want Amazon SageMaker to use the ML storage volume to store the training data, choose File as the TrainingInputMode in the algorithm specification. For distributed training algorithms, specify an instance count greater than 1.
        public let resourceConfig: ResourceConfig
        /// The Amazon Resource Name (ARN) of an IAM role that Amazon SageMaker can assume to perform tasks on your behalf.  During model training, Amazon SageMaker needs your permission to read input data from an S3 bucket, download a Docker image that contains training code, write model artifacts to an S3 bucket, write logs to Amazon CloudWatch Logs, and publish metrics to Amazon CloudWatch. You grant permissions for all of these tasks to an IAM role. For more information, see Amazon SageMaker Roles. 
        public let roleArn: String
        /// The name of the training job. The name must be unique within an AWS Region in an AWS account. It appears in the Amazon SageMaker console. 
        public let trainingJobName: String
        /// Sets a duration for training. Use this parameter to cap model training costs. To stop a job, Amazon SageMaker sends the algorithm the SIGTERM signal, which delays job termination for 120 seconds. Algorithms might use this 120-second window to save the model artifacts.  When Amazon SageMaker terminates a job because the stopping condition has been met, training algorithms provided by Amazon SageMaker save the intermediate results of the job. This intermediate data is a valid model artifact. You can use it to create a model using the CreateModel API. 
        public let stoppingCondition: StoppingCondition

        public init(outputDataConfig: OutputDataConfig, algorithmSpecification: AlgorithmSpecification, hyperParameters: [String: String]? = nil, tags: [Tag]? = nil, inputDataConfig: [Channel], resourceConfig: ResourceConfig, roleArn: String, trainingJobName: String, stoppingCondition: StoppingCondition) {
            self.outputDataConfig = outputDataConfig
            self.algorithmSpecification = algorithmSpecification
            self.hyperParameters = hyperParameters
            self.tags = tags
            self.inputDataConfig = inputDataConfig
            self.resourceConfig = resourceConfig
            self.roleArn = roleArn
            self.trainingJobName = trainingJobName
            self.stoppingCondition = stoppingCondition
        }

        private enum CodingKeys: String, CodingKey {
            case outputDataConfig = "OutputDataConfig"
            case algorithmSpecification = "AlgorithmSpecification"
            case hyperParameters = "HyperParameters"
            case tags = "Tags"
            case inputDataConfig = "InputDataConfig"
            case resourceConfig = "ResourceConfig"
            case roleArn = "RoleArn"
            case trainingJobName = "TrainingJobName"
            case stoppingCondition = "StoppingCondition"
        }
    }

    public struct DesiredWeightAndCapacity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VariantName", required: true, type: .string), 
            AWSShapeMember(label: "DesiredInstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "DesiredWeight", required: false, type: .float)
        ]
        /// The name of the variant to update.
        public let variantName: String
        /// The variant's capacity.
        public let desiredInstanceCount: Int32?
        /// The variant's weight.
        public let desiredWeight: Float?

        public init(variantName: String, desiredInstanceCount: Int32? = nil, desiredWeight: Float? = nil) {
            self.variantName = variantName
            self.desiredInstanceCount = desiredInstanceCount
            self.desiredWeight = desiredWeight
        }

        private enum CodingKeys: String, CodingKey {
            case variantName = "VariantName"
            case desiredInstanceCount = "DesiredInstanceCount"
            case desiredWeight = "DesiredWeight"
        }
    }

    public struct DescribeTrainingJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlgorithmSpecification", required: true, type: .structure), 
            AWSShapeMember(label: "InputDataConfig", required: true, type: .list), 
            AWSShapeMember(label: "TrainingStartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TrainingJobStatus", required: true, type: .enum), 
            AWSShapeMember(label: "ResourceConfig", required: true, type: .structure), 
            AWSShapeMember(label: "SecondaryStatus", required: true, type: .enum), 
            AWSShapeMember(label: "TrainingJobName", required: true, type: .string), 
            AWSShapeMember(label: "CreationTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "LastModifiedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "OutputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "TrainingJobArn", required: true, type: .string), 
            AWSShapeMember(label: "ModelArtifacts", required: true, type: .structure), 
            AWSShapeMember(label: "HyperParameters", required: false, type: .map), 
            AWSShapeMember(label: "TrainingEndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "FailureReason", required: false, type: .string), 
            AWSShapeMember(label: "StoppingCondition", required: true, type: .structure), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string)
        ]
        /// Information about the algorithm used for training, and algorithm metadata. 
        public let algorithmSpecification: AlgorithmSpecification
        /// An array of Channel objects that describes each data input channel. 
        public let inputDataConfig: [Channel]
        /// A timestamp that indicates when training started.
        public let trainingStartTime: TimeStamp?
        /// The status of the training job.  For the InProgress status, Amazon SageMaker can return these secondary statuses:   Starting - Preparing for training.   Downloading - Optional stage for algorithms that support File training input mode. It indicates data is being downloaded to ML storage volumes.   Training - Training is in progress.   Uploading - Training is complete and model upload is in progress.   For the Stopped training status, Amazon SageMaker can return these secondary statuses:   MaxRuntimeExceeded - Job stopped as a result of maximum allowed runtime exceeded.  
        public let trainingJobStatus: TrainingJobStatus
        /// Resources, including ML compute instances and ML storage volumes, that are configured for model training. 
        public let resourceConfig: ResourceConfig
        ///  Provides granular information about the system state. For more information, see TrainingJobStatus. 
        public let secondaryStatus: SecondaryStatus
        ///  Name of the model training job. 
        public let trainingJobName: String
        /// A timestamp that indicates when the training job was created.
        public let creationTime: TimeStamp
        /// A timestamp that indicates when the status of the training job was last modified.
        public let lastModifiedTime: TimeStamp?
        /// The S3 path where model artifacts that you configured when creating the job are stored. Amazon SageMaker creates subfolders for model artifacts. 
        public let outputDataConfig: OutputDataConfig?
        /// The Amazon Resource Name (ARN) of the training job.
        public let trainingJobArn: String
        /// Information about the Amazon S3 location that is configured for storing model artifacts. 
        public let modelArtifacts: ModelArtifacts
        /// Algorithm-specific parameters. 
        public let hyperParameters: [String: String]?
        /// A timestamp that indicates when model training ended.
        public let trainingEndTime: TimeStamp?
        /// If the training job failed, the reason it failed. 
        public let failureReason: String?
        /// The condition under which to stop the training job. 
        public let stoppingCondition: StoppingCondition
        /// The AWS Identity and Access Management (IAM) role configured for the training job. 
        public let roleArn: String?

        public init(algorithmSpecification: AlgorithmSpecification, inputDataConfig: [Channel], trainingStartTime: TimeStamp? = nil, trainingJobStatus: TrainingJobStatus, resourceConfig: ResourceConfig, secondaryStatus: SecondaryStatus, trainingJobName: String, creationTime: TimeStamp, lastModifiedTime: TimeStamp? = nil, outputDataConfig: OutputDataConfig? = nil, trainingJobArn: String, modelArtifacts: ModelArtifacts, hyperParameters: [String: String]? = nil, trainingEndTime: TimeStamp? = nil, failureReason: String? = nil, stoppingCondition: StoppingCondition, roleArn: String? = nil) {
            self.algorithmSpecification = algorithmSpecification
            self.inputDataConfig = inputDataConfig
            self.trainingStartTime = trainingStartTime
            self.trainingJobStatus = trainingJobStatus
            self.resourceConfig = resourceConfig
            self.secondaryStatus = secondaryStatus
            self.trainingJobName = trainingJobName
            self.creationTime = creationTime
            self.lastModifiedTime = lastModifiedTime
            self.outputDataConfig = outputDataConfig
            self.trainingJobArn = trainingJobArn
            self.modelArtifacts = modelArtifacts
            self.hyperParameters = hyperParameters
            self.trainingEndTime = trainingEndTime
            self.failureReason = failureReason
            self.stoppingCondition = stoppingCondition
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case algorithmSpecification = "AlgorithmSpecification"
            case inputDataConfig = "InputDataConfig"
            case trainingStartTime = "TrainingStartTime"
            case trainingJobStatus = "TrainingJobStatus"
            case resourceConfig = "ResourceConfig"
            case secondaryStatus = "SecondaryStatus"
            case trainingJobName = "TrainingJobName"
            case creationTime = "CreationTime"
            case lastModifiedTime = "LastModifiedTime"
            case outputDataConfig = "OutputDataConfig"
            case trainingJobArn = "TrainingJobArn"
            case modelArtifacts = "ModelArtifacts"
            case hyperParameters = "HyperParameters"
            case trainingEndTime = "TrainingEndTime"
            case failureReason = "FailureReason"
            case stoppingCondition = "StoppingCondition"
            case roleArn = "RoleArn"
        }
    }

    public struct ListNotebookInstancesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotebookInstances", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// An array of NotebookInstanceSummary objects, one for each notebook instance.
        public let notebookInstances: [NotebookInstanceSummary]?
        /// If the response to the previous ListNotebookInstances request was truncated, Amazon SageMaker returns this token. To retrieve the next set of notebook instances, use the token in the next request.
        public let nextToken: String?

        public init(notebookInstances: [NotebookInstanceSummary]? = nil, nextToken: String? = nil) {
            self.notebookInstances = notebookInstances
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case notebookInstances = "NotebookInstances"
            case nextToken = "NextToken"
        }
    }

    public struct ListTrainingJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SortBy", required: false, type: .enum), 
            AWSShapeMember(label: "LastModifiedTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "NameContains", required: false, type: .string), 
            AWSShapeMember(label: "SortOrder", required: false, type: .enum), 
            AWSShapeMember(label: "LastModifiedTimeBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "StatusEquals", required: false, type: .enum), 
            AWSShapeMember(label: "CreationTimeBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The field to sort results by. The default is CreationTime.
        public let sortBy: SortBy?
        /// A filter that returns only training jobs modified after the specified time (timestamp).
        public let lastModifiedTimeAfter: TimeStamp?
        /// If the result of the previous ListTrainingJobs request was truncated, the response includes a NextToken. To retrieve the next set of training jobs, use the token in the next request. 
        public let nextToken: String?
        /// A filter that only training jobs created after the specified time (timestamp).
        public let creationTimeAfter: TimeStamp?
        /// A string in the training job name. This filter returns only models whose name contains the specified string.
        public let nameContains: String?
        /// The sort order for results. The default is Ascending.
        public let sortOrder: SortOrder?
        /// A filter that returns only training jobs modified before the specified time (timestamp).
        public let lastModifiedTimeBefore: TimeStamp?
        /// A filter that retrieves only training jobs with a specific status.
        public let statusEquals: TrainingJobStatus?
        /// A filter that returns only training jobs created before the specified time (timestamp).
        public let creationTimeBefore: TimeStamp?
        /// The maximum number of training jobs to return in the response.
        public let maxResults: Int32?

        public init(sortBy: SortBy? = nil, lastModifiedTimeAfter: TimeStamp? = nil, nextToken: String? = nil, creationTimeAfter: TimeStamp? = nil, nameContains: String? = nil, sortOrder: SortOrder? = nil, lastModifiedTimeBefore: TimeStamp? = nil, statusEquals: TrainingJobStatus? = nil, creationTimeBefore: TimeStamp? = nil, maxResults: Int32? = nil) {
            self.sortBy = sortBy
            self.lastModifiedTimeAfter = lastModifiedTimeAfter
            self.nextToken = nextToken
            self.creationTimeAfter = creationTimeAfter
            self.nameContains = nameContains
            self.sortOrder = sortOrder
            self.lastModifiedTimeBefore = lastModifiedTimeBefore
            self.statusEquals = statusEquals
            self.creationTimeBefore = creationTimeBefore
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case sortBy = "SortBy"
            case lastModifiedTimeAfter = "LastModifiedTimeAfter"
            case nextToken = "NextToken"
            case creationTimeAfter = "CreationTimeAfter"
            case nameContains = "NameContains"
            case sortOrder = "SortOrder"
            case lastModifiedTimeBefore = "LastModifiedTimeBefore"
            case statusEquals = "StatusEquals"
            case creationTimeBefore = "CreationTimeBefore"
            case maxResults = "MaxResults"
        }
    }

    public struct ListModelsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SortBy", required: false, type: .enum), 
            AWSShapeMember(label: "CreationTimeAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "NameContains", required: false, type: .string), 
            AWSShapeMember(label: "SortOrder", required: false, type: .enum), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "CreationTimeBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Sorts the list of results. The default is CreationTime.
        public let sortBy: ModelSortKey?
        /// A filter that returns only models created after the specified time (timestamp).
        public let creationTimeAfter: TimeStamp?
        /// A string in the training job name. This filter returns only models in the training job whose name contains the specified string.
        public let nameContains: String?
        /// The sort order for results. The default is Ascending.
        public let sortOrder: OrderKey?
        /// If the response to a previous ListModels request was truncated, the response includes a NextToken. To retrieve the next set of models, use the token in the next request.
        public let nextToken: String?
        /// A filter that returns only models created before the specified time (timestamp).
        public let creationTimeBefore: TimeStamp?
        /// The maximum number of models to return in the response.
        public let maxResults: Int32?

        public init(sortBy: ModelSortKey? = nil, creationTimeAfter: TimeStamp? = nil, nameContains: String? = nil, sortOrder: OrderKey? = nil, nextToken: String? = nil, creationTimeBefore: TimeStamp? = nil, maxResults: Int32? = nil) {
            self.sortBy = sortBy
            self.creationTimeAfter = creationTimeAfter
            self.nameContains = nameContains
            self.sortOrder = sortOrder
            self.nextToken = nextToken
            self.creationTimeBefore = creationTimeBefore
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case sortBy = "SortBy"
            case creationTimeAfter = "CreationTimeAfter"
            case nameContains = "NameContains"
            case sortOrder = "SortOrder"
            case nextToken = "NextToken"
            case creationTimeBefore = "CreationTimeBefore"
            case maxResults = "MaxResults"
        }
    }

    public struct DataSource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3DataSource", required: true, type: .structure)
        ]
        /// The S3 location of the data source that is associated with a channel.
        public let s3DataSource: S3DataSource

        public init(s3DataSource: S3DataSource) {
            self.s3DataSource = s3DataSource
        }

        private enum CodingKeys: String, CodingKey {
            case s3DataSource = "S3DataSource"
        }
    }

    public struct DescribeNotebookInstanceOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "CreationTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "LastModifiedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "NotebookInstanceName", required: false, type: .string), 
            AWSShapeMember(label: "Url", required: false, type: .string), 
            AWSShapeMember(label: "NotebookInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "NotebookInstanceStatus", required: false, type: .enum), 
            AWSShapeMember(label: "FailureReason", required: false, type: .string), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string)
        ]
        /// The ID of the VPC subnet.
        public let subnetId: String?
        ///  Network interface IDs that Amazon SageMaker created at the time of creating the instance. 
        public let networkInterfaceId: String?
        /// A timestamp. Use this parameter to return the time when the notebook instance was created
        public let creationTime: TimeStamp?
        /// The type of ML compute instance running on the notebook instance.
        public let instanceType: InstanceType?
        /// A timestamp. Use this parameter to retrieve the time when the notebook instance was last modified. 
        public let lastModifiedTime: TimeStamp?
        /// The IDs of the VPC security groups.
        public let securityGroups: [String]?
        ///  Name of the Amazon SageMaker notebook instance. 
        public let notebookInstanceName: String?
        /// The URL that you use to connect to the Jupyter notebook that is running in your notebook instance. 
        public let url: String?
        /// The Amazon Resource Name (ARN) of the notebook instance.
        public let notebookInstanceArn: String?
        ///  Amazon Resource Name (ARN) of the IAM role associated with the instance. 
        public let roleArn: String?
        /// The status of the notebook instance.
        public let notebookInstanceStatus: NotebookInstanceStatus?
        /// If staus is failed, the reason it failed.
        public let failureReason: String?
        ///  AWS KMS key ID Amazon SageMaker uses to encrypt data when storing it on the ML storage volume attached to the instance. 
        public let kmsKeyId: String?

        public init(subnetId: String? = nil, networkInterfaceId: String? = nil, creationTime: TimeStamp? = nil, instanceType: InstanceType? = nil, lastModifiedTime: TimeStamp? = nil, securityGroups: [String]? = nil, notebookInstanceName: String? = nil, url: String? = nil, notebookInstanceArn: String? = nil, roleArn: String? = nil, notebookInstanceStatus: NotebookInstanceStatus? = nil, failureReason: String? = nil, kmsKeyId: String? = nil) {
            self.subnetId = subnetId
            self.networkInterfaceId = networkInterfaceId
            self.creationTime = creationTime
            self.instanceType = instanceType
            self.lastModifiedTime = lastModifiedTime
            self.securityGroups = securityGroups
            self.notebookInstanceName = notebookInstanceName
            self.url = url
            self.notebookInstanceArn = notebookInstanceArn
            self.roleArn = roleArn
            self.notebookInstanceStatus = notebookInstanceStatus
            self.failureReason = failureReason
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
            case networkInterfaceId = "NetworkInterfaceId"
            case creationTime = "CreationTime"
            case instanceType = "InstanceType"
            case lastModifiedTime = "LastModifiedTime"
            case securityGroups = "SecurityGroups"
            case notebookInstanceName = "NotebookInstanceName"
            case url = "Url"
            case notebookInstanceArn = "NotebookInstanceArn"
            case roleArn = "RoleArn"
            case notebookInstanceStatus = "NotebookInstanceStatus"
            case failureReason = "FailureReason"
            case kmsKeyId = "KmsKeyId"
        }
    }

    public struct DeleteTagsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource whose tags you want to delete.
        public let resourceArn: String
        /// An array or one or more tag keys to delete.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tagKeys = "TagKeys"
        }
    }

    public struct DescribeEndpointConfigInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointConfigName", required: true, type: .string)
        ]
        /// The name of the endpoint configuration.
        public let endpointConfigName: String

        public init(endpointConfigName: String) {
            self.endpointConfigName = endpointConfigName
        }

        private enum CodingKeys: String, CodingKey {
            case endpointConfigName = "EndpointConfigName"
        }
    }

    public struct DeleteEndpointInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointName", required: true, type: .string)
        ]
        /// The name of the endpoint that you want to delete.
        public let endpointName: String

        public init(endpointName: String) {
            self.endpointName = endpointName
        }

        private enum CodingKeys: String, CodingKey {
            case endpointName = "EndpointName"
        }
    }

    public enum SecondaryStatus: String, CustomStringConvertible, Codable {
        case starting = "Starting"
        case downloading = "Downloading"
        case training = "Training"
        case uploading = "Uploading"
        case stopping = "Stopping"
        case stopped = "Stopped"
        case maxruntimeexceeded = "MaxRuntimeExceeded"
        case completed = "Completed"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct ResourceConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", required: true, type: .enum), 
            AWSShapeMember(label: "VolumeSizeInGB", required: true, type: .integer), 
            AWSShapeMember(label: "InstanceCount", required: true, type: .integer)
        ]
        /// The ML compute instance type. 
        public let instanceType: TrainingInstanceType
        /// The size of the ML storage volume that you want to provision.  ML storage volumes store model artifacts and incremental states. Training algorithms might also use the ML storage volume for scratch space. If you want to store the training data in the ML storage volume, choose File as the TrainingInputMode in the algorithm specification.  You must specify sufficient ML storage for your scenario.    Amazon SageMaker supports only the General Purpose SSD (gp2) ML storage volume type.  
        public let volumeSizeInGB: Int32
        /// The number of ML compute instances to use. For distributed training, provide a value greater than 1. 
        public let instanceCount: Int32

        public init(instanceType: TrainingInstanceType, volumeSizeInGB: Int32, instanceCount: Int32) {
            self.instanceType = instanceType
            self.volumeSizeInGB = volumeSizeInGB
            self.instanceCount = instanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "InstanceType"
            case volumeSizeInGB = "VolumeSizeInGB"
            case instanceCount = "InstanceCount"
        }
    }

    public struct EndpointSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastModifiedTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "EndpointArn", required: true, type: .string), 
            AWSShapeMember(label: "CreationTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "EndpointName", required: true, type: .string), 
            AWSShapeMember(label: "EndpointStatus", required: true, type: .enum)
        ]
        /// A timestamp that shows when the endpoint was last modified.
        public let lastModifiedTime: TimeStamp
        /// The Amazon Resource Name (ARN) of the endpoint.
        public let endpointArn: String
        /// A timestamp that shows when the endpoint was created.
        public let creationTime: TimeStamp
        /// The name of the endpoint.
        public let endpointName: String
        /// The status of the endpoint.
        public let endpointStatus: EndpointStatus

        public init(lastModifiedTime: TimeStamp, endpointArn: String, creationTime: TimeStamp, endpointName: String, endpointStatus: EndpointStatus) {
            self.lastModifiedTime = lastModifiedTime
            self.endpointArn = endpointArn
            self.creationTime = creationTime
            self.endpointName = endpointName
            self.endpointStatus = endpointStatus
        }

        private enum CodingKeys: String, CodingKey {
            case lastModifiedTime = "LastModifiedTime"
            case endpointArn = "EndpointArn"
            case creationTime = "CreationTime"
            case endpointName = "EndpointName"
            case endpointStatus = "EndpointStatus"
        }
    }

    public struct EndpointConfigSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointConfigName", required: true, type: .string), 
            AWSShapeMember(label: "EndpointConfigArn", required: true, type: .string), 
            AWSShapeMember(label: "CreationTime", required: true, type: .timestamp)
        ]
        /// The name of the endpoint configuration.
        public let endpointConfigName: String
        /// The Amazon Resource Name (ARN) of the endpoint configuration.
        public let endpointConfigArn: String
        /// A timestamp that shows when the endpoint configuration was created.
        public let creationTime: TimeStamp

        public init(endpointConfigName: String, endpointConfigArn: String, creationTime: TimeStamp) {
            self.endpointConfigName = endpointConfigName
            self.endpointConfigArn = endpointConfigArn
            self.creationTime = creationTime
        }

        private enum CodingKeys: String, CodingKey {
            case endpointConfigName = "EndpointConfigName"
            case endpointConfigArn = "EndpointConfigArn"
            case creationTime = "CreationTime"
        }
    }

    public struct ListEndpointConfigsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "EndpointConfigs", required: true, type: .list)
        ]
        ///  If the response is truncated, Amazon SageMaker returns this token. To retrieve the next set of endpoint configurations, use it in the subsequent request 
        public let nextToken: String?
        /// An array of endpoint configurations.
        public let endpointConfigs: [EndpointConfigSummary]

        public init(nextToken: String? = nil, endpointConfigs: [EndpointConfigSummary]) {
            self.nextToken = nextToken
            self.endpointConfigs = endpointConfigs
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case endpointConfigs = "EndpointConfigs"
        }
    }

    public enum NotebookInstanceStatus: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case inservice = "InService"
        case stopping = "Stopping"
        case stopped = "Stopped"
        case failed = "Failed"
        case deleting = "Deleting"
        public var description: String { return self.rawValue }
    }

    public enum SortBy: String, CustomStringConvertible, Codable {
        case name = "Name"
        case creationtime = "CreationTime"
        case status = "Status"
        public var description: String { return self.rawValue }
    }

    public struct AlgorithmSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrainingInputMode", required: true, type: .enum), 
            AWSShapeMember(label: "TrainingImage", required: true, type: .string)
        ]
        /// The input mode that the algorithm supports. For the input modes that Amazon SageMaker algorithms support, see Algorithms. If an algorithm supports the File input mode, Amazon SageMaker downloads the training data from S3 to the provisioned ML storage Volume, and mounts the directory to docker volume for training container. If an algorithm supports the Pipe input mode, Amazon SageMaker streams data directly from S3 to the container.   In File mode, make sure you provision ML storage volume with sufficient capacity to accomodate the data download from S3. In addition to the training data, the ML storage volume also stores the output model. The algorithm container use ML storage volume to also store intermediate information, if any.   For distributed algorithms using File mode, training data is distributed uniformly, and your training duration is predictable if the input data objects size is approximately same. Amazon SageMaker does not split the files any further for model training. If the object sizes are skewed, training won't be optimal as the data distribution is also skewed where one host in a training cluster is overloaded, thus becoming bottleneck in training. 
        public let trainingInputMode: TrainingInputMode
        /// The registry path of the Docker image that contains the training algorithm. For information about using your own algorithms, see Docker Registry Paths for Algorithms Provided by Amazon SageMaker . 
        public let trainingImage: String

        public init(trainingInputMode: TrainingInputMode, trainingImage: String) {
            self.trainingInputMode = trainingInputMode
            self.trainingImage = trainingImage
        }

        private enum CodingKeys: String, CodingKey {
            case trainingInputMode = "TrainingInputMode"
            case trainingImage = "TrainingImage"
        }
    }

    public struct AddTagsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceArn", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource that you want to tag. 
        public let resourceArn: String
        /// An array of Tag objects. Each tag is a key-value pair. Only the key parameter is required. If you don't specify a value, Amazon SageMaker sets the value to an empty string. 
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "ResourceArn"
            case tags = "Tags"
        }
    }

    public enum CompressionType: String, CustomStringConvertible, Codable {
        case none = "None"
        case gzip = "Gzip"
        public var description: String { return self.rawValue }
    }

    public enum NotebookInstanceSortOrder: String, CustomStringConvertible, Codable {
        case ascending = "Ascending"
        case descending = "Descending"
        public var description: String { return self.rawValue }
    }

    public enum TrainingJobStatus: String, CustomStringConvertible, Codable {
        case inprogress = "InProgress"
        case completed = "Completed"
        case failed = "Failed"
        case stopping = "Stopping"
        case stopped = "Stopped"
        public var description: String { return self.rawValue }
    }

    public struct ListTagsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        ///  If response is truncated, Amazon SageMaker includes a token in the response. You can use this token in your subsequent request to fetch next set of tokens. 
        public let nextToken: String?
        /// An array of Tag objects, each with a tag key and a value.
        public let tags: [Tag]?

        public init(nextToken: String? = nil, tags: [Tag]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case tags = "Tags"
        }
    }

    public struct CreateEndpointInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EndpointConfigName", required: true, type: .string), 
            AWSShapeMember(label: "EndpointName", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// The name of an endpoint configuration. For more information, see CreateEndpointConfig. 
        public let endpointConfigName: String
        /// The name of the endpoint. The name must be unique within an AWS Region in your AWS account.
        public let endpointName: String
        /// An array of key-value pairs. For more information, see Using Cost Allocation Tagsin the AWS Billing and Cost Management User Guide. 
        public let tags: [Tag]?

        public init(endpointConfigName: String, endpointName: String, tags: [Tag]? = nil) {
            self.endpointConfigName = endpointConfigName
            self.endpointName = endpointName
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case endpointConfigName = "EndpointConfigName"
            case endpointName = "EndpointName"
            case tags = "Tags"
        }
    }

    public struct UpdateNotebookInstanceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "NotebookInstanceName", required: true, type: .string)
        ]
        /// The Amazon ML compute instance type.
        public let instanceType: InstanceType?
        /// Amazon Resource Name (ARN) of the IAM role to associate with the instance.
        public let roleArn: String?
        /// The name of the notebook instance to update.
        public let notebookInstanceName: String

        public init(instanceType: InstanceType? = nil, roleArn: String? = nil, notebookInstanceName: String) {
            self.instanceType = instanceType
            self.roleArn = roleArn
            self.notebookInstanceName = notebookInstanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "InstanceType"
            case roleArn = "RoleArn"
            case notebookInstanceName = "NotebookInstanceName"
        }
    }

    public struct CreateNotebookInstanceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "NotebookInstanceName", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .list), 
            AWSShapeMember(label: "RoleArn", required: true, type: .string), 
            AWSShapeMember(label: "InstanceType", required: true, type: .enum), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string)
        ]
        /// The ID of the subnet in a VPC to which you would like to have a connectivity from your ML compute instance. 
        public let subnetId: String?
        /// The name of the new notebook instance.
        public let notebookInstanceName: String
        /// A list of tags to associate with the notebook instance. You can add tags later by using the CreateTags API.
        public let tags: [Tag]?
        /// The VPC security group IDs, in the form sg-xxxxxxxx. The security groups must be for the same VPC as specified in the subnet. 
        public let securityGroupIds: [String]?
        ///  When you send any requests to AWS resources from the notebook instance, Amazon SageMaker assumes this role to perform tasks on your behalf. You must grant this role necessary permissions so Amazon SageMaker can perform these tasks. The policy must allow the Amazon SageMaker service principal (sagemaker.amazonaws.com) permissions to assume this role. For more information, see Amazon SageMaker Roles. 
        public let roleArn: String
        /// The type of ML compute instance to launch for the notebook instance.
        public let instanceType: InstanceType
        ///  If you provide a AWS KMS key ID, Amazon SageMaker uses it to encrypt data at rest on the ML storage volume that is attached to your notebook instance. 
        public let kmsKeyId: String?

        public init(subnetId: String? = nil, notebookInstanceName: String, tags: [Tag]? = nil, securityGroupIds: [String]? = nil, roleArn: String, instanceType: InstanceType, kmsKeyId: String? = nil) {
            self.subnetId = subnetId
            self.notebookInstanceName = notebookInstanceName
            self.tags = tags
            self.securityGroupIds = securityGroupIds
            self.roleArn = roleArn
            self.instanceType = instanceType
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
            case notebookInstanceName = "NotebookInstanceName"
            case tags = "Tags"
            case securityGroupIds = "SecurityGroupIds"
            case roleArn = "RoleArn"
            case instanceType = "InstanceType"
            case kmsKeyId = "KmsKeyId"
        }
    }

    public struct StopTrainingJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrainingJobName", required: true, type: .string)
        ]
        /// The name of the training job to stop.
        public let trainingJobName: String

        public init(trainingJobName: String) {
            self.trainingJobName = trainingJobName
        }

        private enum CodingKeys: String, CodingKey {
            case trainingJobName = "TrainingJobName"
        }
    }

    public struct StopNotebookInstanceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotebookInstanceName", required: true, type: .string)
        ]
        /// The name of the notebook instance to terminate.
        public let notebookInstanceName: String

        public init(notebookInstanceName: String) {
            self.notebookInstanceName = notebookInstanceName
        }

        private enum CodingKeys: String, CodingKey {
            case notebookInstanceName = "NotebookInstanceName"
        }
    }

    public struct UpdateNotebookInstanceOutput: AWSShape {

    }

    public struct DeleteTagsOutput: AWSShape {

    }

    public struct CreatePresignedNotebookInstanceUrlOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthorizedUrl", required: false, type: .string)
        ]
        /// A JSON object that contains the URL string. 
        public let authorizedUrl: String?

        public init(authorizedUrl: String? = nil) {
            self.authorizedUrl = authorizedUrl
        }

        private enum CodingKeys: String, CodingKey {
            case authorizedUrl = "AuthorizedUrl"
        }
    }

}