// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Lightsail {

    public struct GetDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", required: true, type: .string)
        ]
        /// The domain name for which your want to return information about.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
        }
    }

    public struct GetInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string)
        ]
        /// A token used for advancing to the next page of results from your get instances request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct UnpeerVpcResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the request operation.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct GetKeyPairsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string)
        ]
        /// A token used for advancing to the next page of results from your get key pairs request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct ResourceLocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "regionName", required: false, type: .enum), 
            AWSShapeMember(label: "availabilityZone", required: false, type: .string)
        ]
        /// The AWS Region name.
        public let regionName: RegionName?
        /// The Availability Zone. Follows the format us-east-2a (case-sensitive).
        public let availabilityZone: String?

        public init(regionName: RegionName? = nil, availabilityZone: String? = nil) {
            self.regionName = regionName
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case regionName = "regionName"
            case availabilityZone = "availabilityZone"
        }
    }

    public struct GetOperationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the results of your get operation request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct CreateKeyPairResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "publicKeyBase64", required: false, type: .string), 
            AWSShapeMember(label: "privateKeyBase64", required: false, type: .string), 
            AWSShapeMember(label: "operation", required: false, type: .structure), 
            AWSShapeMember(label: "keyPair", required: false, type: .structure)
        ]
        /// A base64-encoded public key of the ssh-rsa type.
        public let publicKeyBase64: String?
        /// A base64-encoded RSA private key.
        public let privateKeyBase64: String?
        /// An array of key-value pairs containing information about the results of your create key pair request.
        public let operation: Operation?
        /// An array of key-value pairs containing information about the new key pair you just created.
        public let keyPair: KeyPair?

        public init(publicKeyBase64: String? = nil, privateKeyBase64: String? = nil, operation: Operation? = nil, keyPair: KeyPair? = nil) {
            self.publicKeyBase64 = publicKeyBase64
            self.privateKeyBase64 = privateKeyBase64
            self.operation = operation
            self.keyPair = keyPair
        }

        private enum CodingKeys: String, CodingKey {
            case publicKeyBase64 = "publicKeyBase64"
            case privateKeyBase64 = "privateKeyBase64"
            case operation = "operation"
            case keyPair = "keyPair"
        }
    }

    public struct InstanceHardware: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "disks", required: false, type: .list), 
            AWSShapeMember(label: "cpuCount", required: false, type: .integer), 
            AWSShapeMember(label: "ramSizeInGb", required: false, type: .float)
        ]
        /// The disks attached to the instance.
        public let disks: [Disk]?
        /// The number of vCPUs the instance has.
        public let cpuCount: Int32?
        /// The amount of RAM in GB on the instance (e.g., 1.0).
        public let ramSizeInGb: Float?

        public init(disks: [Disk]? = nil, cpuCount: Int32? = nil, ramSizeInGb: Float? = nil) {
            self.disks = disks
            self.cpuCount = cpuCount
            self.ramSizeInGb = ramSizeInGb
        }

        private enum CodingKeys: String, CodingKey {
            case disks = "disks"
            case cpuCount = "cpuCount"
            case ramSizeInGb = "ramSizeInGb"
        }
    }

    public struct PasswordData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ciphertext", required: false, type: .string), 
            AWSShapeMember(label: "keyPairName", required: false, type: .string)
        ]
        /// The encrypted password. Ciphertext will be an empty string if access to your new instance is not ready yet. When you create an instance, it can take up to 15 minutes for the instance to be ready.  If you use the default key pair (LightsailDefaultKeyPair), the decrypted password will be available in the password field. If you are using a custom key pair, you need to use your own means of decryption. If you change the Administrator password on the instance, Lightsail will continue to return the original ciphertext value. When accessing the instance using RDP, you need to manually enter the Administrator password after changing it from the default. 
        public let ciphertext: String?
        /// The name of the key pair that you used when creating your instance. If no key pair name was specified when creating the instance, Lightsail uses the default key pair (LightsailDefaultKeyPair). If you are using a custom key pair, you need to use your own means of decrypting your password using the ciphertext. Lightsail creates the ciphertext by encrypting your password with the public key part of this key pair.
        public let keyPairName: String?

        public init(ciphertext: String? = nil, keyPairName: String? = nil) {
            self.ciphertext = ciphertext
            self.keyPairName = keyPairName
        }

        private enum CodingKeys: String, CodingKey {
            case ciphertext = "ciphertext"
            case keyPairName = "keyPairName"
        }
    }

    public enum InstanceHealthReason: String, CustomStringConvertible, Codable {
        case lbRegistrationinprogress = "Lb.RegistrationInProgress"
        case lbInitialhealthchecking = "Lb.InitialHealthChecking"
        case lbInternalerror = "Lb.InternalError"
        case instanceResponsecodemismatch = "Instance.ResponseCodeMismatch"
        case instanceTimeout = "Instance.Timeout"
        case instanceFailedhealthchecks = "Instance.FailedHealthChecks"
        case instanceNotregistered = "Instance.NotRegistered"
        case instanceNotinuse = "Instance.NotInUse"
        case instanceDeregistrationinprogress = "Instance.DeregistrationInProgress"
        case instanceInvalidstate = "Instance.InvalidState"
        case instanceIpunusable = "Instance.IpUnusable"
        public var description: String { return self.rawValue }
    }

    public struct CreateDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", required: true, type: .string)
        ]
        /// The domain name to manage (e.g., example.com).  You cannot register a new domain name using Lightsail. You must register a domain name using Amazon Route 53 or another domain name registrar. If you have already registered your domain, you can enter its name in this parameter to manage the DNS records for that domain. 
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
        }
    }

    public struct GetLoadBalancerResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loadBalancer", required: false, type: .structure)
        ]
        /// An object containing information about your load balancer.
        public let loadBalancer: LoadBalancer?

        public init(loadBalancer: LoadBalancer? = nil) {
            self.loadBalancer = loadBalancer
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancer = "loadBalancer"
        }
    }

    public struct GetLoadBalancerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loadBalancerName", required: true, type: .string)
        ]
        /// The name of the load balancer.
        public let loadBalancerName: String

        public init(loadBalancerName: String) {
            self.loadBalancerName = loadBalancerName
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerName = "loadBalancerName"
        }
    }

    public struct CreateInstanceSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string), 
            AWSShapeMember(label: "instanceSnapshotName", required: true, type: .string)
        ]
        /// The Lightsail instance on which to base your snapshot.
        public let instanceName: String
        /// The name for your new snapshot.
        public let instanceSnapshotName: String

        public init(instanceName: String, instanceSnapshotName: String) {
            self.instanceName = instanceName
            self.instanceSnapshotName = instanceSnapshotName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
            case instanceSnapshotName = "instanceSnapshotName"
        }
    }

    public struct OpenInstancePublicPortsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the request operation.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct GetInstanceAccessDetailsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string), 
            AWSShapeMember(label: "protocol", required: false, type: .enum)
        ]
        /// The name of the instance to access.
        public let instanceName: String
        /// The protocol to use to connect to your instance. Defaults to ssh.
        public let `protocol`: InstanceAccessProtocol?

        public init(instanceName: String, protocol: InstanceAccessProtocol? = nil) {
            self.instanceName = instanceName
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
            case `protocol` = "protocol"
        }
    }

    public struct GetActiveNamesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string)
        ]
        /// A token used for paginating results from your get active names request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct MetricDatapoint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maximum", required: false, type: .double), 
            AWSShapeMember(label: "sampleCount", required: false, type: .double), 
            AWSShapeMember(label: "minimum", required: false, type: .double), 
            AWSShapeMember(label: "timestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "unit", required: false, type: .enum), 
            AWSShapeMember(label: "average", required: false, type: .double), 
            AWSShapeMember(label: "sum", required: false, type: .double)
        ]
        /// The maximum.
        public let maximum: Double?
        /// The sample count.
        public let sampleCount: Double?
        /// The minimum.
        public let minimum: Double?
        /// The timestamp (e.g., 1479816991.349).
        public let timestamp: TimeStamp?
        /// The unit. 
        public let unit: MetricUnit?
        /// The average.
        public let average: Double?
        /// The sum.
        public let sum: Double?

        public init(maximum: Double? = nil, sampleCount: Double? = nil, minimum: Double? = nil, timestamp: TimeStamp? = nil, unit: MetricUnit? = nil, average: Double? = nil, sum: Double? = nil) {
            self.maximum = maximum
            self.sampleCount = sampleCount
            self.minimum = minimum
            self.timestamp = timestamp
            self.unit = unit
            self.average = average
            self.sum = sum
        }

        private enum CodingKeys: String, CodingKey {
            case maximum = "maximum"
            case sampleCount = "sampleCount"
            case minimum = "minimum"
            case timestamp = "timestamp"
            case unit = "unit"
            case average = "average"
            case sum = "sum"
        }
    }

    public struct GetInstanceSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceSnapshot", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the results of your get instance snapshot request.
        public let instanceSnapshot: InstanceSnapshot?

        public init(instanceSnapshot: InstanceSnapshot? = nil) {
            self.instanceSnapshot = instanceSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case instanceSnapshot = "instanceSnapshot"
        }
    }

    public struct CreateInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userData", required: false, type: .string), 
            AWSShapeMember(label: "availabilityZone", required: true, type: .string), 
            AWSShapeMember(label: "keyPairName", required: false, type: .string), 
            AWSShapeMember(label: "customImageName", required: false, type: .string), 
            AWSShapeMember(label: "blueprintId", required: true, type: .string), 
            AWSShapeMember(label: "bundleId", required: true, type: .string), 
            AWSShapeMember(label: "instanceNames", required: true, type: .list)
        ]
        /// A launch script you can create that configures a server with additional user data. For example, you might want to run apt-get -y update.  Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use yum, Debian and Ubuntu use apt-get, and FreeBSD uses pkg. For a complete list, see the Dev Guide. 
        public let userData: String?
        /// The Availability Zone in which to create your instance. Use the following format: us-east-2a (case sensitive). You can get a list of availability zones by using the get regions operation. Be sure to add the include availability zones parameter to your request.
        public let availabilityZone: String
        /// The name of your key pair.
        public let keyPairName: String?
        /// (Deprecated) The name for your custom image.  In releases prior to June 12, 2017, this parameter was ignored by the API. It is now deprecated. 
        public let customImageName: String?
        /// The ID for a virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0). Use the get blueprints operation to return a list of available images (or blueprints).
        public let blueprintId: String
        /// The bundle of specification information for your virtual private server (or instance), including the pricing plan (e.g., micro_1_0).
        public let bundleId: String
        /// The names to use for your new Lightsail instances. Separate multiple values using quotation marks and commas, for example: ["MyFirstInstance","MySecondInstance"] 
        public let instanceNames: [String]

        public init(userData: String? = nil, availabilityZone: String, keyPairName: String? = nil, customImageName: String? = nil, blueprintId: String, bundleId: String, instanceNames: [String]) {
            self.userData = userData
            self.availabilityZone = availabilityZone
            self.keyPairName = keyPairName
            self.customImageName = customImageName
            self.blueprintId = blueprintId
            self.bundleId = bundleId
            self.instanceNames = instanceNames
        }

        private enum CodingKeys: String, CodingKey {
            case userData = "userData"
            case availabilityZone = "availabilityZone"
            case keyPairName = "keyPairName"
            case customImageName = "customImageName"
            case blueprintId = "blueprintId"
            case bundleId = "bundleId"
            case instanceNames = "instanceNames"
        }
    }

    public struct PeerVpcRequest: AWSShape {

    }

    public struct GetDiskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "diskName", required: true, type: .string)
        ]
        /// The name of the disk (e.g., my-disk).
        public let diskName: String

        public init(diskName: String) {
            self.diskName = diskName
        }

        private enum CodingKeys: String, CodingKey {
            case diskName = "diskName"
        }
    }

    public struct DeleteDiskSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "diskSnapshotName", required: true, type: .string)
        ]
        /// The name of the disk snapshot you want to delete (e.g., my-disk-snapshot).
        public let diskSnapshotName: String

        public init(diskSnapshotName: String) {
            self.diskSnapshotName = diskSnapshotName
        }

        private enum CodingKeys: String, CodingKey {
            case diskSnapshotName = "diskSnapshotName"
        }
    }

    public struct Region: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .enum), 
            AWSShapeMember(label: "continentCode", required: false, type: .string), 
            AWSShapeMember(label: "availabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "displayName", required: false, type: .string)
        ]
        /// The description of the AWS Region (e.g., This region is recommended to serve users in the eastern United States and eastern Canada).
        public let description: String?
        /// The region name (e.g., us-east-2).
        public let name: RegionName?
        /// The continent code (e.g., NA, meaning North America).
        public let continentCode: String?
        /// The Availability Zones. Follows the format us-east-2a (case-sensitive).
        public let availabilityZones: [AvailabilityZone]?
        /// The display name (e.g., Ohio).
        public let displayName: String?

        public init(description: String? = nil, name: RegionName? = nil, continentCode: String? = nil, availabilityZones: [AvailabilityZone]? = nil, displayName: String? = nil) {
            self.description = description
            self.name = name
            self.continentCode = continentCode
            self.availabilityZones = availabilityZones
            self.displayName = displayName
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case name = "name"
            case continentCode = "continentCode"
            case availabilityZones = "availabilityZones"
            case displayName = "displayName"
        }
    }

    public struct CreateDomainResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the domain resource you created.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct DeleteDiskResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An object describing the API operations.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct ReleaseStaticIpRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "staticIpName", required: true, type: .string)
        ]
        /// The name of the static IP to delete.
        public let staticIpName: String

        public init(staticIpName: String) {
            self.staticIpName = staticIpName
        }

        private enum CodingKeys: String, CodingKey {
            case staticIpName = "staticIpName"
        }
    }

    public struct LoadBalancerTlsCertificateDomainValidationRecord: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", required: false, type: .string), 
            AWSShapeMember(label: "type", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "validationStatus", required: false, type: .enum), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]
        /// The domain name against which your SSL/TLS certificate was validated.
        public let domainName: String?
        /// The type of validation record. For example, CNAME for domain validation.
        public let `type`: String?
        /// A fully qualified domain name in the certificate. For example, example.com.
        public let name: String?
        /// The validation status. Valid values are listed below.
        public let validationStatus: LoadBalancerTlsCertificateDomainStatus?
        /// The value for that type.
        public let value: String?

        public init(domainName: String? = nil, type: String? = nil, name: String? = nil, validationStatus: LoadBalancerTlsCertificateDomainStatus? = nil, value: String? = nil) {
            self.domainName = domainName
            self.`type` = `type`
            self.name = name
            self.validationStatus = validationStatus
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
            case `type` = "type"
            case name = "name"
            case validationStatus = "validationStatus"
            case value = "value"
        }
    }

    public struct GetStaticIpsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "staticIps", required: false, type: .list)
        ]
        /// A token used for advancing to the next page of results from your get static IPs request.
        public let nextPageToken: String?
        /// An array of key-value pairs containing information about your get static IPs request.
        public let staticIps: [StaticIp]?

        public init(nextPageToken: String? = nil, staticIps: [StaticIp]? = nil) {
            self.nextPageToken = nextPageToken
            self.staticIps = staticIps
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case staticIps = "staticIps"
        }
    }

    public struct GetInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instance", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the specified instance.
        public let instance: Instance?

        public init(instance: Instance? = nil) {
            self.instance = instance
        }

        private enum CodingKeys: String, CodingKey {
            case instance = "instance"
        }
    }

    public struct DetachInstancesFromLoadBalancerResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An object describing the API operations.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public enum InstanceSnapshotState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case error = "error"
        case available = "available"
        public var description: String { return self.rawValue }
    }

    public struct DeleteLoadBalancerTlsCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "force", required: false, type: .boolean), 
            AWSShapeMember(label: "certificateName", required: true, type: .string), 
            AWSShapeMember(label: "loadBalancerName", required: true, type: .string)
        ]
        /// When true, forces the deletion of an SSL/TLS certificate. There can be two certificates associated with a Lightsail load balancer: the primary and the backup. The force parameter is required when the primary SSL/TLS certificate is in use by an instance attached to the load balancer.
        public let force: Bool?
        /// The SSL/TLS certificate name.
        public let certificateName: String
        /// The load balancer name.
        public let loadBalancerName: String

        public init(force: Bool? = nil, certificateName: String, loadBalancerName: String) {
            self.force = force
            self.certificateName = certificateName
            self.loadBalancerName = loadBalancerName
        }

        private enum CodingKeys: String, CodingKey {
            case force = "force"
            case certificateName = "certificateName"
            case loadBalancerName = "loadBalancerName"
        }
    }

    public struct DeleteInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name of the instance to delete.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct DeleteInstanceSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceSnapshotName", required: true, type: .string)
        ]
        /// The name of the snapshot to delete.
        public let instanceSnapshotName: String

        public init(instanceSnapshotName: String) {
            self.instanceSnapshotName = instanceSnapshotName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceSnapshotName = "instanceSnapshotName"
        }
    }

    public struct InstanceNetworking: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ports", required: false, type: .list), 
            AWSShapeMember(label: "monthlyTransfer", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the ports on the instance.
        public let ports: [InstancePortInfo]?
        /// The amount of data in GB allocated for monthly data transfers.
        public let monthlyTransfer: MonthlyTransfer?

        public init(ports: [InstancePortInfo]? = nil, monthlyTransfer: MonthlyTransfer? = nil) {
            self.ports = ports
            self.monthlyTransfer = monthlyTransfer
        }

        private enum CodingKeys: String, CodingKey {
            case ports = "ports"
            case monthlyTransfer = "monthlyTransfer"
        }
    }

    public struct GetBundlesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "bundles", required: false, type: .list), 
            AWSShapeMember(label: "nextPageToken", required: false, type: .string)
        ]
        /// An array of key-value pairs that contains information about the available bundles.
        public let bundles: [Bundle]?
        /// A token used for advancing to the next page of results from your get active names request.
        public let nextPageToken: String?

        public init(bundles: [Bundle]? = nil, nextPageToken: String? = nil) {
            self.bundles = bundles
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case bundles = "bundles"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct GetOperationsForResourceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list), 
            AWSShapeMember(label: "nextPageCount", required: false, type: .string), 
            AWSShapeMember(label: "nextPageToken", required: false, type: .string)
        ]
        /// An array of key-value pairs containing information about the results of your get operations for resource request.
        public let operations: [Operation]?
        /// (Deprecated) Returns the number of pages of results that remain.  In releases prior to June 12, 2017, this parameter returned null by the API. It is now deprecated, and the API returns the nextPageToken parameter instead. 
        public let nextPageCount: String?
        /// An identifier that was returned from the previous call to this operation, which can be used to return the next set of items in the list.
        public let nextPageToken: String?

        public init(operations: [Operation]? = nil, nextPageCount: String? = nil, nextPageToken: String? = nil) {
            self.operations = operations
            self.nextPageCount = nextPageCount
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
            case nextPageCount = "nextPageCount"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct Disk: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "gbInUse", required: false, type: .integer), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "supportCode", required: false, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "isSystemDisk", required: false, type: .boolean), 
            AWSShapeMember(label: "sizeInGb", required: false, type: .integer), 
            AWSShapeMember(label: "path", required: false, type: .string), 
            AWSShapeMember(label: "state", required: false, type: .enum), 
            AWSShapeMember(label: "iops", required: false, type: .integer), 
            AWSShapeMember(label: "isAttached", required: false, type: .boolean), 
            AWSShapeMember(label: "attachmentState", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "attachedTo", required: false, type: .string)
        ]
        /// The Lightsail resource type (e.g., Disk).
        public let resourceType: ResourceType?
        /// (Deprecated) The number of GB in use by the disk.  In releases prior to November 14, 2017, this parameter was not included in the API response. It is now deprecated. 
        public let gbInUse: Int32?
        /// The date when the disk was created.
        public let createdAt: TimeStamp?
        /// The unique name of the disk.
        public let name: String?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The AWS Region and Availability Zone where the disk is located.
        public let location: ResourceLocation?
        /// A Boolean value indicating whether this disk is a system disk (has an operating system loaded on it).
        public let isSystemDisk: Bool?
        /// The size of the disk in GB.
        public let sizeInGb: Int32?
        /// The disk path.
        public let path: String?
        /// Describes the status of the disk.
        public let state: DiskState?
        /// The input/output operations per second (IOPS) of the disk.
        public let iops: Int32?
        /// A Boolean value indicating whether the disk is attached.
        public let isAttached: Bool?
        /// (Deprecated) The attachment state of the disk.  In releases prior to November 14, 2017, this parameter returned attached for system disks in the API response. It is now deprecated, but still included in the response. Use isAttached instead. 
        public let attachmentState: String?
        /// The Amazon Resource Name (ARN) of the disk.
        public let arn: String?
        /// The resources to which the disk is attached.
        public let attachedTo: String?

        public init(resourceType: ResourceType? = nil, gbInUse: Int32? = nil, createdAt: TimeStamp? = nil, name: String? = nil, supportCode: String? = nil, location: ResourceLocation? = nil, isSystemDisk: Bool? = nil, sizeInGb: Int32? = nil, path: String? = nil, state: DiskState? = nil, iops: Int32? = nil, isAttached: Bool? = nil, attachmentState: String? = nil, arn: String? = nil, attachedTo: String? = nil) {
            self.resourceType = resourceType
            self.gbInUse = gbInUse
            self.createdAt = createdAt
            self.name = name
            self.supportCode = supportCode
            self.location = location
            self.isSystemDisk = isSystemDisk
            self.sizeInGb = sizeInGb
            self.path = path
            self.state = state
            self.iops = iops
            self.isAttached = isAttached
            self.attachmentState = attachmentState
            self.arn = arn
            self.attachedTo = attachedTo
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case gbInUse = "gbInUse"
            case createdAt = "createdAt"
            case name = "name"
            case supportCode = "supportCode"
            case location = "location"
            case isSystemDisk = "isSystemDisk"
            case sizeInGb = "sizeInGb"
            case path = "path"
            case state = "state"
            case iops = "iops"
            case isAttached = "isAttached"
            case attachmentState = "attachmentState"
            case arn = "arn"
            case attachedTo = "attachedTo"
        }
    }

    public struct AttachStaticIpResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about your API operations.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public enum MetricStatistic: String, CustomStringConvertible, Codable {
        case minimum = "Minimum"
        case maximum = "Maximum"
        case sum = "Sum"
        case average = "Average"
        case samplecount = "SampleCount"
        public var description: String { return self.rawValue }
    }

    public struct DeleteDiskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "diskName", required: true, type: .string)
        ]
        /// The unique name of the disk you want to delete (e.g., my-disk).
        public let diskName: String

        public init(diskName: String) {
            self.diskName = diskName
        }

        private enum CodingKeys: String, CodingKey {
            case diskName = "diskName"
        }
    }

    public struct GetLoadBalancerTlsCertificatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loadBalancerName", required: true, type: .string)
        ]
        /// The name of the load balancer you associated with your SSL/TLS certificate.
        public let loadBalancerName: String

        public init(loadBalancerName: String) {
            self.loadBalancerName = loadBalancerName
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerName = "loadBalancerName"
        }
    }

    public struct DownloadDefaultKeyPairResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "publicKeyBase64", required: false, type: .string), 
            AWSShapeMember(label: "privateKeyBase64", required: false, type: .string)
        ]
        /// A base64-encoded public key of the ssh-rsa type.
        public let publicKeyBase64: String?
        /// A base64-encoded RSA private key.
        public let privateKeyBase64: String?

        public init(publicKeyBase64: String? = nil, privateKeyBase64: String? = nil) {
            self.publicKeyBase64 = publicKeyBase64
            self.privateKeyBase64 = privateKeyBase64
        }

        private enum CodingKeys: String, CodingKey {
            case publicKeyBase64 = "publicKeyBase64"
            case privateKeyBase64 = "privateKeyBase64"
        }
    }

    public struct InstanceSnapshot: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "fromInstanceArn", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "supportCode", required: false, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "sizeInGb", required: false, type: .integer), 
            AWSShapeMember(label: "fromInstanceName", required: false, type: .string), 
            AWSShapeMember(label: "state", required: false, type: .enum), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "progress", required: false, type: .string), 
            AWSShapeMember(label: "fromBlueprintId", required: false, type: .string), 
            AWSShapeMember(label: "fromBundleId", required: false, type: .string), 
            AWSShapeMember(label: "fromAttachedDisks", required: false, type: .list)
        ]
        /// The type of resource (usually InstanceSnapshot).
        public let resourceType: ResourceType?
        /// The Amazon Resource Name (ARN) of the instance from which the snapshot was created (e.g., arn:aws:lightsail:us-east-2:123456789101:Instance/64b8404c-ccb1-430b-8daf-12345EXAMPLE).
        public let fromInstanceArn: String?
        /// The timestamp when the snapshot was created (e.g., 1479907467.024).
        public let createdAt: TimeStamp?
        /// The name of the snapshot.
        public let name: String?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The region name and availability zone where you created the snapshot.
        public let location: ResourceLocation?
        /// The size in GB of the SSD.
        public let sizeInGb: Int32?
        /// The instance from which the snapshot was created.
        public let fromInstanceName: String?
        /// The state the snapshot is in.
        public let state: InstanceSnapshotState?
        /// The Amazon Resource Name (ARN) of the snapshot (e.g., arn:aws:lightsail:us-east-2:123456789101:InstanceSnapshot/d23b5706-3322-4d83-81e5-12345EXAMPLE).
        public let arn: String?
        /// The progress of the snapshot.
        public let progress: String?
        /// The blueprint ID from which you created the snapshot (e.g., os_debian_8_3). A blueprint is a virtual private server (or instance) image used to create instances quickly.
        public let fromBlueprintId: String?
        /// The bundle ID from which you created the snapshot (e.g., micro_1_0).
        public let fromBundleId: String?
        /// An array of disk objects containing information about all block storage disks.
        public let fromAttachedDisks: [Disk]?

        public init(resourceType: ResourceType? = nil, fromInstanceArn: String? = nil, createdAt: TimeStamp? = nil, name: String? = nil, supportCode: String? = nil, location: ResourceLocation? = nil, sizeInGb: Int32? = nil, fromInstanceName: String? = nil, state: InstanceSnapshotState? = nil, arn: String? = nil, progress: String? = nil, fromBlueprintId: String? = nil, fromBundleId: String? = nil, fromAttachedDisks: [Disk]? = nil) {
            self.resourceType = resourceType
            self.fromInstanceArn = fromInstanceArn
            self.createdAt = createdAt
            self.name = name
            self.supportCode = supportCode
            self.location = location
            self.sizeInGb = sizeInGb
            self.fromInstanceName = fromInstanceName
            self.state = state
            self.arn = arn
            self.progress = progress
            self.fromBlueprintId = fromBlueprintId
            self.fromBundleId = fromBundleId
            self.fromAttachedDisks = fromAttachedDisks
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case fromInstanceArn = "fromInstanceArn"
            case createdAt = "createdAt"
            case name = "name"
            case supportCode = "supportCode"
            case location = "location"
            case sizeInGb = "sizeInGb"
            case fromInstanceName = "fromInstanceName"
            case state = "state"
            case arn = "arn"
            case progress = "progress"
            case fromBlueprintId = "fromBlueprintId"
            case fromBundleId = "fromBundleId"
            case fromAttachedDisks = "fromAttachedDisks"
        }
    }

    public struct GetLoadBalancersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string)
        ]
        /// A token used for paginating the results from your GetLoadBalancers request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetRegionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "includeAvailabilityZones", required: false, type: .boolean)
        ]
        /// A Boolean value indicating whether to also include Availability Zones in your get regions request. Availability Zones are indicated with a letter: e.g., us-east-2a.
        public let includeAvailabilityZones: Bool?

        public init(includeAvailabilityZones: Bool? = nil) {
            self.includeAvailabilityZones = includeAvailabilityZones
        }

        private enum CodingKeys: String, CodingKey {
            case includeAvailabilityZones = "includeAvailabilityZones"
        }
    }

    public enum ResourceType: String, CustomStringConvertible, Codable {
        case instance = "Instance"
        case staticip = "StaticIp"
        case keypair = "KeyPair"
        case instancesnapshot = "InstanceSnapshot"
        case domain = "Domain"
        case peeredvpc = "PeeredVpc"
        case loadbalancer = "LoadBalancer"
        case loadbalancertlscertificate = "LoadBalancerTlsCertificate"
        case disk = "Disk"
        case disksnapshot = "DiskSnapshot"
        public var description: String { return self.rawValue }
    }

    public struct RebootInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the request operations.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateInstanceSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the results of your create instances snapshot request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateDiskSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "diskSnapshotName", required: true, type: .string), 
            AWSShapeMember(label: "diskName", required: true, type: .string)
        ]
        /// The name of the destination disk snapshot (e.g., my-disk-snapshot) based on the source disk.
        public let diskSnapshotName: String
        /// The unique name of the source disk (e.g., my-source-disk).
        public let diskName: String

        public init(diskSnapshotName: String, diskName: String) {
            self.diskSnapshotName = diskSnapshotName
            self.diskName = diskName
        }

        private enum CodingKeys: String, CodingKey {
            case diskSnapshotName = "diskSnapshotName"
            case diskName = "diskName"
        }
    }

    public struct UpdateDomainEntryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainEntry", required: true, type: .structure), 
            AWSShapeMember(label: "domainName", required: true, type: .string)
        ]
        /// An array of key-value pairs containing information about the domain entry.
        public let domainEntry: DomainEntry
        /// The name of the domain recordset to update.
        public let domainName: String

        public init(domainEntry: DomainEntry, domainName: String) {
            self.domainEntry = domainEntry
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainEntry = "domainEntry"
            case domainName = "domainName"
        }
    }

    public struct UpdateDomainEntryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the request operation.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct GetLoadBalancerTlsCertificatesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tlsCertificates", required: false, type: .list)
        ]
        /// An array of LoadBalancerTlsCertificate objects describing your SSL/TLS certificates.
        public let tlsCertificates: [LoadBalancerTlsCertificate]?

        public init(tlsCertificates: [LoadBalancerTlsCertificate]? = nil) {
            self.tlsCertificates = tlsCertificates
        }

        private enum CodingKeys: String, CodingKey {
            case tlsCertificates = "tlsCertificates"
        }
    }

    public struct Instance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ipv6Address", required: false, type: .string), 
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "networking", required: false, type: .structure), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "hardware", required: false, type: .structure), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "supportCode", required: false, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "blueprintId", required: false, type: .string), 
            AWSShapeMember(label: "privateIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "state", required: false, type: .structure), 
            AWSShapeMember(label: "isStaticIp", required: false, type: .boolean), 
            AWSShapeMember(label: "blueprintName", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "publicIpAddress", required: false, type: .string), 
            AWSShapeMember(label: "sshKeyName", required: false, type: .string), 
            AWSShapeMember(label: "username", required: false, type: .string), 
            AWSShapeMember(label: "bundleId", required: false, type: .string)
        ]
        /// The IPv6 address of the instance.
        public let ipv6Address: String?
        /// The type of resource (usually Instance).
        public let resourceType: ResourceType?
        /// Information about the public ports and monthly data transfer rates for the instance.
        public let networking: InstanceNetworking?
        /// The timestamp when the instance was created (e.g., 1479734909.17).
        public let createdAt: TimeStamp?
        /// The size of the vCPU and the amount of RAM for the instance.
        public let hardware: InstanceHardware?
        /// The name the user gave the instance (e.g., Amazon_Linux-1GB-Ohio-1).
        public let name: String?
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The region name and availability zone where the instance is located.
        public let location: ResourceLocation?
        /// The blueprint ID (e.g., os_amlinux_2016_03).
        public let blueprintId: String?
        /// The private IP address of the instance.
        public let privateIpAddress: String?
        /// The status code and the state (e.g., running) for the instance.
        public let state: InstanceState?
        /// A Boolean value indicating whether this instance has a static IP assigned to it.
        public let isStaticIp: Bool?
        /// The friendly name of the blueprint (e.g., Amazon Linux).
        public let blueprintName: String?
        /// The Amazon Resource Name (ARN) of the instance (e.g., arn:aws:lightsail:us-east-2:123456789101:Instance/244ad76f-8aad-4741-809f-12345EXAMPLE).
        public let arn: String?
        /// The public IP address of the instance.
        public let publicIpAddress: String?
        /// The name of the SSH key being used to connect to the instance (e.g., LightsailDefaultKeyPair).
        public let sshKeyName: String?
        /// The user name for connecting to the instance (e.g., ec2-user).
        public let username: String?
        /// The bundle for the instance (e.g., micro_1_0).
        public let bundleId: String?

        public init(ipv6Address: String? = nil, resourceType: ResourceType? = nil, networking: InstanceNetworking? = nil, createdAt: TimeStamp? = nil, hardware: InstanceHardware? = nil, name: String? = nil, supportCode: String? = nil, location: ResourceLocation? = nil, blueprintId: String? = nil, privateIpAddress: String? = nil, state: InstanceState? = nil, isStaticIp: Bool? = nil, blueprintName: String? = nil, arn: String? = nil, publicIpAddress: String? = nil, sshKeyName: String? = nil, username: String? = nil, bundleId: String? = nil) {
            self.ipv6Address = ipv6Address
            self.resourceType = resourceType
            self.networking = networking
            self.createdAt = createdAt
            self.hardware = hardware
            self.name = name
            self.supportCode = supportCode
            self.location = location
            self.blueprintId = blueprintId
            self.privateIpAddress = privateIpAddress
            self.state = state
            self.isStaticIp = isStaticIp
            self.blueprintName = blueprintName
            self.arn = arn
            self.publicIpAddress = publicIpAddress
            self.sshKeyName = sshKeyName
            self.username = username
            self.bundleId = bundleId
        }

        private enum CodingKeys: String, CodingKey {
            case ipv6Address = "ipv6Address"
            case resourceType = "resourceType"
            case networking = "networking"
            case createdAt = "createdAt"
            case hardware = "hardware"
            case name = "name"
            case supportCode = "supportCode"
            case location = "location"
            case blueprintId = "blueprintId"
            case privateIpAddress = "privateIpAddress"
            case state = "state"
            case isStaticIp = "isStaticIp"
            case blueprintName = "blueprintName"
            case arn = "arn"
            case publicIpAddress = "publicIpAddress"
            case sshKeyName = "sshKeyName"
            case username = "username"
            case bundleId = "bundleId"
        }
    }

    public struct GetBundlesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string), 
            AWSShapeMember(label: "includeInactive", required: false, type: .boolean)
        ]
        /// A token used for advancing to the next page of results from your get bundles request.
        public let pageToken: String?
        /// A Boolean value that indicates whether to include inactive bundle results in your request.
        public let includeInactive: Bool?

        public init(pageToken: String? = nil, includeInactive: Bool? = nil) {
            self.pageToken = pageToken
            self.includeInactive = includeInactive
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
            case includeInactive = "includeInactive"
        }
    }

    public enum MetricUnit: String, CustomStringConvertible, Codable {
        case seconds = "Seconds"
        case microseconds = "Microseconds"
        case milliseconds = "Milliseconds"
        case bytes = "Bytes"
        case kilobytes = "Kilobytes"
        case megabytes = "Megabytes"
        case gigabytes = "Gigabytes"
        case terabytes = "Terabytes"
        case bits = "Bits"
        case kilobits = "Kilobits"
        case megabits = "Megabits"
        case gigabits = "Gigabits"
        case terabits = "Terabits"
        case percent = "Percent"
        case count = "Count"
        case bytesSecond = "Bytes/Second"
        case kilobytesSecond = "Kilobytes/Second"
        case megabytesSecond = "Megabytes/Second"
        case gigabytesSecond = "Gigabytes/Second"
        case terabytesSecond = "Terabytes/Second"
        case bitsSecond = "Bits/Second"
        case kilobitsSecond = "Kilobits/Second"
        case megabitsSecond = "Megabits/Second"
        case gigabitsSecond = "Gigabits/Second"
        case terabitsSecond = "Terabits/Second"
        case countSecond = "Count/Second"
        case none = "None"
        public var description: String { return self.rawValue }
    }

    public struct CreateDiskSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An object describing the API operations.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct StopInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string), 
            AWSShapeMember(label: "force", required: false, type: .boolean)
        ]
        /// The name of the instance (a virtual private server) to stop.
        public let instanceName: String
        /// When set to True, forces a Lightsail instance that is stuck in a stopping state to stop.  Only use the force parameter if your instance is stuck in the stopping state. In any other state, your instance should stop normally without adding this parameter to your API request. 
        public let force: Bool?

        public init(instanceName: String, force: Bool? = nil) {
            self.instanceName = instanceName
            self.force = force
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
            case force = "force"
        }
    }

    public struct DeleteInstanceSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the results of your delete instance snapshot request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public enum LoadBalancerTlsCertificateRenewalStatus: String, CustomStringConvertible, Codable {
        case pendingAutoRenewal = "PENDING_AUTO_RENEWAL"
        case pendingValidation = "PENDING_VALIDATION"
        case success = "SUCCESS"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum InstanceMetricName: String, CustomStringConvertible, Codable {
        case cpuutilization = "CPUUtilization"
        case networkin = "NetworkIn"
        case networkout = "NetworkOut"
        case statuscheckfailed = "StatusCheckFailed"
        case statuscheckfailedInstance = "StatusCheckFailed_Instance"
        case statuscheckfailedSystem = "StatusCheckFailed_System"
        public var description: String { return self.rawValue }
    }

    public struct LoadBalancerTlsCertificateRenewalSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainValidationOptions", required: false, type: .list), 
            AWSShapeMember(label: "renewalStatus", required: false, type: .enum)
        ]
        /// Contains information about the validation of each domain name in the certificate, as it pertains to Lightsail's managed renewal. This is different from the initial validation that occurs as a result of the RequestCertificate request.
        public let domainValidationOptions: [LoadBalancerTlsCertificateDomainValidationOption]?
        /// The status of Lightsail's managed renewal of the certificate. Valid values are listed below.
        public let renewalStatus: LoadBalancerTlsCertificateRenewalStatus?

        public init(domainValidationOptions: [LoadBalancerTlsCertificateDomainValidationOption]? = nil, renewalStatus: LoadBalancerTlsCertificateRenewalStatus? = nil) {
            self.domainValidationOptions = domainValidationOptions
            self.renewalStatus = renewalStatus
        }

        private enum CodingKeys: String, CodingKey {
            case domainValidationOptions = "domainValidationOptions"
            case renewalStatus = "renewalStatus"
        }
    }

    public enum LoadBalancerAttributeName: String, CustomStringConvertible, Codable {
        case healthcheckpath = "HealthCheckPath"
        case sessionstickinessenabled = "SessionStickinessEnabled"
        case sessionstickinessLbCookiedurationseconds = "SessionStickiness_LB_CookieDurationSeconds"
        public var description: String { return self.rawValue }
    }

    public struct AttachDiskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string), 
            AWSShapeMember(label: "diskPath", required: true, type: .string), 
            AWSShapeMember(label: "diskName", required: true, type: .string)
        ]
        /// The name of the Lightsail instance where you want to utilize the storage disk.
        public let instanceName: String
        /// The disk path to expose to the instance (e.g., /dev/xvdf).
        public let diskPath: String
        /// The unique Lightsail disk name (e.g., my-disk).
        public let diskName: String

        public init(instanceName: String, diskPath: String, diskName: String) {
            self.instanceName = instanceName
            self.diskPath = diskPath
            self.diskName = diskName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
            case diskPath = "diskPath"
            case diskName = "diskName"
        }
    }

    public struct StartInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name of the instance (a virtual private server) to start.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct GetActiveNamesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "activeNames", required: false, type: .list), 
            AWSShapeMember(label: "nextPageToken", required: false, type: .string)
        ]
        /// The list of active names returned by the get active names request.
        public let activeNames: [String]?
        /// A token used for advancing to the next page of results from your get active names request.
        public let nextPageToken: String?

        public init(activeNames: [String]? = nil, nextPageToken: String? = nil) {
            self.activeNames = activeNames
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case activeNames = "activeNames"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct AllocateStaticIpRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "staticIpName", required: true, type: .string)
        ]
        /// The name of the static IP address.
        public let staticIpName: String

        public init(staticIpName: String) {
            self.staticIpName = staticIpName
        }

        private enum CodingKeys: String, CodingKey {
            case staticIpName = "staticIpName"
        }
    }

    public struct DeleteDiskSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An object describing the API operations.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct UpdateLoadBalancerAttributeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributeName", required: true, type: .enum), 
            AWSShapeMember(label: "loadBalancerName", required: true, type: .string), 
            AWSShapeMember(label: "attributeValue", required: true, type: .string)
        ]
        /// The name of the attribute you want to update. Valid values are below.
        public let attributeName: LoadBalancerAttributeName
        /// The name of the load balancer that you want to modify (e.g., my-load-balancer.
        public let loadBalancerName: String
        /// The value that you want to specify for the attribute name.
        public let attributeValue: String

        public init(attributeName: LoadBalancerAttributeName, loadBalancerName: String, attributeValue: String) {
            self.attributeName = attributeName
            self.loadBalancerName = loadBalancerName
            self.attributeValue = attributeValue
        }

        private enum CodingKeys: String, CodingKey {
            case attributeName = "attributeName"
            case loadBalancerName = "loadBalancerName"
            case attributeValue = "attributeValue"
        }
    }

    public struct GetDisksResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "disks", required: false, type: .list), 
            AWSShapeMember(label: "nextPageToken", required: false, type: .string)
        ]
        /// An array of objects containing information about all block storage disks.
        public let disks: [Disk]?
        /// A token used for advancing to the next page of results from your GetDisks request.
        public let nextPageToken: String?

        public init(disks: [Disk]? = nil, nextPageToken: String? = nil) {
            self.disks = disks
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case disks = "disks"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct LoadBalancer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "configurationOptions", required: false, type: .map), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "supportCode", required: false, type: .string), 
            AWSShapeMember(label: "protocol", required: false, type: .enum), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "instancePort", required: false, type: .integer), 
            AWSShapeMember(label: "tlsCertificateSummaries", required: false, type: .list), 
            AWSShapeMember(label: "state", required: false, type: .enum), 
            AWSShapeMember(label: "dnsName", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "publicPorts", required: false, type: .list), 
            AWSShapeMember(label: "instanceHealthSummary", required: false, type: .list), 
            AWSShapeMember(label: "healthCheckPath", required: false, type: .string)
        ]
        /// The resource type (e.g., LoadBalancer.
        public let resourceType: ResourceType?
        /// The date when your load balancer was created.
        public let createdAt: TimeStamp?
        /// A string to string map of the configuration options for your load balancer. Valid values are listed below.
        public let configurationOptions: [LoadBalancerAttributeName: String]?
        /// The name of the load balancer (e.g., my-load-balancer).
        public let name: String?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail load balancer. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The protocol you have enabled for your load balancer. Valid values are below. You can't just have HTTP_HTTPS, but you can have just HTTP.
        public let `protocol`: LoadBalancerProtocol?
        /// The AWS Region where your load balancer was created (e.g., us-east-2a). Lightsail automatically creates your load balancer across Availability Zones.
        public let location: ResourceLocation?
        /// The port where the load balancer will direct traffic to your Lightsail instances. For HTTP traffic, it's port 80. For HTTPS traffic, it's port 443.
        public let instancePort: Int32?
        /// An array of LoadBalancerTlsCertificateSummary objects that provide additional information about the SSL/TLS certificates. For example, if true, the certificate is attached to the load balancer.
        public let tlsCertificateSummaries: [LoadBalancerTlsCertificateSummary]?
        /// The status of your load balancer. Valid values are below.
        public let state: LoadBalancerState?
        /// The DNS name of your Lightsail load balancer.
        public let dnsName: String?
        /// The Amazon Resource Name (ARN) of the load balancer.
        public let arn: String?
        /// An array of public port settings for your load balancer. For HTTP, use port 80. For HTTPS, use port 443.
        public let publicPorts: [Int32]?
        /// An array of InstanceHealthSummary objects describing the health of the load balancer.
        public let instanceHealthSummary: [InstanceHealthSummary]?
        /// The path you specified to perform your health checks. If no path is specified, the load balancer tries to make a request to the default (root) page.
        public let healthCheckPath: String?

        public init(resourceType: ResourceType? = nil, createdAt: TimeStamp? = nil, configurationOptions: [LoadBalancerAttributeName: String]? = nil, name: String? = nil, supportCode: String? = nil, protocol: LoadBalancerProtocol? = nil, location: ResourceLocation? = nil, instancePort: Int32? = nil, tlsCertificateSummaries: [LoadBalancerTlsCertificateSummary]? = nil, state: LoadBalancerState? = nil, dnsName: String? = nil, arn: String? = nil, publicPorts: [Int32]? = nil, instanceHealthSummary: [InstanceHealthSummary]? = nil, healthCheckPath: String? = nil) {
            self.resourceType = resourceType
            self.createdAt = createdAt
            self.configurationOptions = configurationOptions
            self.name = name
            self.supportCode = supportCode
            self.`protocol` = `protocol`
            self.location = location
            self.instancePort = instancePort
            self.tlsCertificateSummaries = tlsCertificateSummaries
            self.state = state
            self.dnsName = dnsName
            self.arn = arn
            self.publicPorts = publicPorts
            self.instanceHealthSummary = instanceHealthSummary
            self.healthCheckPath = healthCheckPath
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "resourceType"
            case createdAt = "createdAt"
            case configurationOptions = "configurationOptions"
            case name = "name"
            case supportCode = "supportCode"
            case `protocol` = "protocol"
            case location = "location"
            case instancePort = "instancePort"
            case tlsCertificateSummaries = "tlsCertificateSummaries"
            case state = "state"
            case dnsName = "dnsName"
            case arn = "arn"
            case publicPorts = "publicPorts"
            case instanceHealthSummary = "instanceHealthSummary"
            case healthCheckPath = "healthCheckPath"
        }
    }

    public struct CreateDiskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "sizeInGb", required: true, type: .integer), 
            AWSShapeMember(label: "availabilityZone", required: true, type: .string), 
            AWSShapeMember(label: "diskName", required: true, type: .string)
        ]
        /// The size of the disk in GB (e.g., 32).
        public let sizeInGb: Int32
        /// The Availability Zone where you want to create the disk (e.g., us-east-2a). Choose the same Availability Zone as the Lightsail instance where you want to create the disk. Use the GetRegions operation to list the Availability Zones where Lightsail is currently available.
        public let availabilityZone: String
        /// The unique Lightsail disk name (e.g., my-disk).
        public let diskName: String

        public init(sizeInGb: Int32, availabilityZone: String, diskName: String) {
            self.sizeInGb = sizeInGb
            self.availabilityZone = availabilityZone
            self.diskName = diskName
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInGb = "sizeInGb"
            case availabilityZone = "availabilityZone"
            case diskName = "diskName"
        }
    }

    public struct DeleteLoadBalancerTlsCertificateResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An object describing the API operations.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct GetInstanceMetricDataRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "period", required: true, type: .integer), 
            AWSShapeMember(label: "statistics", required: true, type: .list), 
            AWSShapeMember(label: "unit", required: true, type: .enum), 
            AWSShapeMember(label: "instanceName", required: true, type: .string), 
            AWSShapeMember(label: "metricName", required: true, type: .enum), 
            AWSShapeMember(label: "startTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "endTime", required: true, type: .timestamp)
        ]
        /// The time period for which you are requesting data.
        public let period: Int32
        /// The instance statistics. 
        public let statistics: [MetricStatistic]
        /// The unit. The list of valid values is below.
        public let unit: MetricUnit
        /// The name of the instance for which you want to get metrics data.
        public let instanceName: String
        /// The metric name to get data about. 
        public let metricName: InstanceMetricName
        /// The start time of the time period.
        public let startTime: TimeStamp
        /// The end time of the time period.
        public let endTime: TimeStamp

        public init(period: Int32, statistics: [MetricStatistic], unit: MetricUnit, instanceName: String, metricName: InstanceMetricName, startTime: TimeStamp, endTime: TimeStamp) {
            self.period = period
            self.statistics = statistics
            self.unit = unit
            self.instanceName = instanceName
            self.metricName = metricName
            self.startTime = startTime
            self.endTime = endTime
        }

        private enum CodingKeys: String, CodingKey {
            case period = "period"
            case statistics = "statistics"
            case unit = "unit"
            case instanceName = "instanceName"
            case metricName = "metricName"
            case startTime = "startTime"
            case endTime = "endTime"
        }
    }

    public enum NetworkProtocol: String, CustomStringConvertible, Codable {
        case tcp = "tcp"
        case all = "all"
        case udp = "udp"
        public var description: String { return self.rawValue }
    }

    public struct GetDomainsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "domains", required: false, type: .list)
        ]
        /// A token used for advancing to the next page of results from your get active names request.
        public let nextPageToken: String?
        /// An array of key-value pairs containing information about each of the domain entries in the user's account.
        public let domains: [Domain]?

        public init(nextPageToken: String? = nil, domains: [Domain]? = nil) {
            self.nextPageToken = nextPageToken
            self.domains = domains
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case domains = "domains"
        }
    }

    public struct GetDiskSnapshotsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string)
        ]
        /// A token used for advancing to the next page of results from your GetDiskSnapshots request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct DetachInstancesFromLoadBalancerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceNames", required: true, type: .list), 
            AWSShapeMember(label: "loadBalancerName", required: true, type: .string)
        ]
        /// An array of strings containing the names of the instances you want to detach from the load balancer.
        public let instanceNames: [String]
        /// The name of the Lightsail load balancer.
        public let loadBalancerName: String

        public init(instanceNames: [String], loadBalancerName: String) {
            self.instanceNames = instanceNames
            self.loadBalancerName = loadBalancerName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceNames = "instanceNames"
            case loadBalancerName = "loadBalancerName"
        }
    }

    public struct DeleteDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", required: true, type: .string)
        ]
        /// The specific domain name to delete.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
        }
    }

    public struct GetInstancePortStatesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "portStates", required: false, type: .list)
        ]
        /// Information about the port states resulting from your request.
        public let portStates: [InstancePortState]?

        public init(portStates: [InstancePortState]? = nil) {
            self.portStates = portStates
        }

        private enum CodingKeys: String, CodingKey {
            case portStates = "portStates"
        }
    }

    public struct CreateKeyPairRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "keyPairName", required: true, type: .string)
        ]
        /// The name for your new key pair.
        public let keyPairName: String

        public init(keyPairName: String) {
            self.keyPairName = keyPairName
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairName = "keyPairName"
        }
    }

    public struct CreateDiskFromSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An object describing the API operations.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public enum LoadBalancerTlsCertificateRevocationReason: String, CustomStringConvertible, Codable {
        case unspecified = "UNSPECIFIED"
        case keyCompromise = "KEY_COMPROMISE"
        case caCompromise = "CA_COMPROMISE"
        case affiliationChanged = "AFFILIATION_CHANGED"
        case superceded = "SUPERCEDED"
        case cessationOfOperation = "CESSATION_OF_OPERATION"
        case certificateHold = "CERTIFICATE_HOLD"
        case removeFromCrl = "REMOVE_FROM_CRL"
        case privilegeWithdrawn = "PRIVILEGE_WITHDRAWN"
        case aACompromise = "A_A_COMPROMISE"
        public var description: String { return self.rawValue }
    }

    public struct GetDomainsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string)
        ]
        /// A token used for advancing to the next page of results from your get domains request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct AttachLoadBalancerTlsCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateName", required: true, type: .string), 
            AWSShapeMember(label: "loadBalancerName", required: true, type: .string)
        ]
        /// The name of your SSL/TLS certificate.
        public let certificateName: String
        /// The name of the load balancer to which you want to associate the SSL/TLS certificate.
        public let loadBalancerName: String

        public init(certificateName: String, loadBalancerName: String) {
            self.certificateName = certificateName
            self.loadBalancerName = loadBalancerName
        }

        private enum CodingKeys: String, CodingKey {
            case certificateName = "certificateName"
            case loadBalancerName = "loadBalancerName"
        }
    }

    public struct GetInstanceAccessDetailsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accessDetails", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about a get instance access request.
        public let accessDetails: InstanceAccessDetails?

        public init(accessDetails: InstanceAccessDetails? = nil) {
            self.accessDetails = accessDetails
        }

        private enum CodingKeys: String, CodingKey {
            case accessDetails = "accessDetails"
        }
    }

    public struct AvailabilityZone: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "state", required: false, type: .string), 
            AWSShapeMember(label: "zoneName", required: false, type: .string)
        ]
        /// The state of the Availability Zone.
        public let state: String?
        /// The name of the Availability Zone. The format is us-east-2a (case-sensitive).
        public let zoneName: String?

        public init(state: String? = nil, zoneName: String? = nil) {
            self.state = state
            self.zoneName = zoneName
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case zoneName = "zoneName"
        }
    }

    public struct IsVpcPeeredRequest: AWSShape {

    }

    public enum BlueprintType: String, CustomStringConvertible, Codable {
        case os = "os"
        case app = "app"
        public var description: String { return self.rawValue }
    }

    public struct DetachDiskRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "diskName", required: true, type: .string)
        ]
        /// The unique name of the disk you want to detach from your instance (e.g., my-disk).
        public let diskName: String

        public init(diskName: String) {
            self.diskName = diskName
        }

        private enum CodingKeys: String, CodingKey {
            case diskName = "diskName"
        }
    }

    public struct GetOperationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list), 
            AWSShapeMember(label: "nextPageToken", required: false, type: .string)
        ]
        /// An array of key-value pairs containing information about the results of your get operations request.
        public let operations: [Operation]?
        /// A token used for advancing to the next page of results from your get operations request.
        public let nextPageToken: String?

        public init(operations: [Operation]? = nil, nextPageToken: String? = nil) {
            self.operations = operations
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
            case nextPageToken = "nextPageToken"
        }
    }

    public enum OperationType: String, CustomStringConvertible, Codable {
        case deleteinstance = "DeleteInstance"
        case createinstance = "CreateInstance"
        case stopinstance = "StopInstance"
        case startinstance = "StartInstance"
        case rebootinstance = "RebootInstance"
        case openinstancepublicports = "OpenInstancePublicPorts"
        case putinstancepublicports = "PutInstancePublicPorts"
        case closeinstancepublicports = "CloseInstancePublicPorts"
        case allocatestaticip = "AllocateStaticIp"
        case releasestaticip = "ReleaseStaticIp"
        case attachstaticip = "AttachStaticIp"
        case detachstaticip = "DetachStaticIp"
        case updatedomainentry = "UpdateDomainEntry"
        case deletedomainentry = "DeleteDomainEntry"
        case createdomain = "CreateDomain"
        case deletedomain = "DeleteDomain"
        case createinstancesnapshot = "CreateInstanceSnapshot"
        case deleteinstancesnapshot = "DeleteInstanceSnapshot"
        case createinstancesfromsnapshot = "CreateInstancesFromSnapshot"
        case createloadbalancer = "CreateLoadBalancer"
        case deleteloadbalancer = "DeleteLoadBalancer"
        case attachinstancestoloadbalancer = "AttachInstancesToLoadBalancer"
        case detachinstancesfromloadbalancer = "DetachInstancesFromLoadBalancer"
        case updateloadbalancerattribute = "UpdateLoadBalancerAttribute"
        case createloadbalancertlscertificate = "CreateLoadBalancerTlsCertificate"
        case deleteloadbalancertlscertificate = "DeleteLoadBalancerTlsCertificate"
        case attachloadbalancertlscertificate = "AttachLoadBalancerTlsCertificate"
        case createdisk = "CreateDisk"
        case deletedisk = "DeleteDisk"
        case attachdisk = "AttachDisk"
        case detachdisk = "DetachDisk"
        case createdisksnapshot = "CreateDiskSnapshot"
        case deletedisksnapshot = "DeleteDiskSnapshot"
        case creatediskfromsnapshot = "CreateDiskFromSnapshot"
        public var description: String { return self.rawValue }
    }

    public struct DeleteLoadBalancerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loadBalancerName", required: true, type: .string)
        ]
        /// The name of the load balancer you want to delete.
        public let loadBalancerName: String

        public init(loadBalancerName: String) {
            self.loadBalancerName = loadBalancerName
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerName = "loadBalancerName"
        }
    }

    public struct DeleteDomainResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the results of your delete domain request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct CreateInstancesFromSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceSnapshotName", required: true, type: .string), 
            AWSShapeMember(label: "userData", required: false, type: .string), 
            AWSShapeMember(label: "availabilityZone", required: true, type: .string), 
            AWSShapeMember(label: "keyPairName", required: false, type: .string), 
            AWSShapeMember(label: "attachedDiskMapping", required: false, type: .map), 
            AWSShapeMember(label: "bundleId", required: true, type: .string), 
            AWSShapeMember(label: "instanceNames", required: true, type: .list)
        ]
        /// The name of the instance snapshot on which you are basing your new instances. Use the get instance snapshots operation to return information about your existing snapshots.
        public let instanceSnapshotName: String
        /// You can create a launch script that configures a server with additional user data. For example, apt-get -y update.  Depending on the machine image you choose, the command to get software on your instance varies. Amazon Linux and CentOS use yum, Debian and Ubuntu use apt-get, and FreeBSD uses pkg. For a complete list, see the Dev Guide. 
        public let userData: String?
        /// The Availability Zone where you want to create your instances. Use the following formatting: us-east-2a (case sensitive). You can get a list of availability zones by using the get regions operation. Be sure to add the include availability zones parameter to your request.
        public let availabilityZone: String
        /// The name for your key pair.
        public let keyPairName: String?
        /// An object containing information about one or more disk mappings.
        public let attachedDiskMapping: [String: [DiskMap]]?
        /// The bundle of specification information for your virtual private server (or instance), including the pricing plan (e.g., micro_1_0).
        public let bundleId: String
        /// The names for your new instances.
        public let instanceNames: [String]

        public init(instanceSnapshotName: String, userData: String? = nil, availabilityZone: String, keyPairName: String? = nil, attachedDiskMapping: [String: [DiskMap]]? = nil, bundleId: String, instanceNames: [String]) {
            self.instanceSnapshotName = instanceSnapshotName
            self.userData = userData
            self.availabilityZone = availabilityZone
            self.keyPairName = keyPairName
            self.attachedDiskMapping = attachedDiskMapping
            self.bundleId = bundleId
            self.instanceNames = instanceNames
        }

        private enum CodingKeys: String, CodingKey {
            case instanceSnapshotName = "instanceSnapshotName"
            case userData = "userData"
            case availabilityZone = "availabilityZone"
            case keyPairName = "keyPairName"
            case attachedDiskMapping = "attachedDiskMapping"
            case bundleId = "bundleId"
            case instanceNames = "instanceNames"
        }
    }

    public struct CreateLoadBalancerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "healthCheckPath", required: false, type: .string), 
            AWSShapeMember(label: "certificateAlternativeNames", required: false, type: .list), 
            AWSShapeMember(label: "certificateName", required: false, type: .string), 
            AWSShapeMember(label: "loadBalancerName", required: true, type: .string), 
            AWSShapeMember(label: "certificateDomainName", required: false, type: .string), 
            AWSShapeMember(label: "instancePort", required: true, type: .integer)
        ]
        /// The path you provided to perform the load balancer health check. If you didn't specify a health check path, Lightsail uses the root path of your website (e.g., "/"). You may want to specify a custom health check path other than the root of your application if your home page loads slowly or has a lot of media or scripting on it.
        public let healthCheckPath: String?
        /// The optional alternative domains and subdomains to use with your SSL/TLS certificate (e.g., www.example.com, example.com, m.example.com, blog.example.com).
        public let certificateAlternativeNames: [String]?
        /// The name of the SSL/TLS certificate. If you specify certificateName, then certificateDomainName is required (and vice-versa).
        public let certificateName: String?
        /// The name of your load balancer.
        public let loadBalancerName: String
        /// The domain name with which your certificate is associated (e.g., example.com). If you specify certificateDomainName, then certificateName is required (and vice-versa).
        public let certificateDomainName: String?
        /// The instance port where you're creating your load balancer.
        public let instancePort: Int32

        public init(healthCheckPath: String? = nil, certificateAlternativeNames: [String]? = nil, certificateName: String? = nil, loadBalancerName: String, certificateDomainName: String? = nil, instancePort: Int32) {
            self.healthCheckPath = healthCheckPath
            self.certificateAlternativeNames = certificateAlternativeNames
            self.certificateName = certificateName
            self.loadBalancerName = loadBalancerName
            self.certificateDomainName = certificateDomainName
            self.instancePort = instancePort
        }

        private enum CodingKeys: String, CodingKey {
            case healthCheckPath = "healthCheckPath"
            case certificateAlternativeNames = "certificateAlternativeNames"
            case certificateName = "certificateName"
            case loadBalancerName = "loadBalancerName"
            case certificateDomainName = "certificateDomainName"
            case instancePort = "instancePort"
        }
    }

    public struct GetStaticIpResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "staticIp", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the requested static IP.
        public let staticIp: StaticIp?

        public init(staticIp: StaticIp? = nil) {
            self.staticIp = staticIp
        }

        private enum CodingKeys: String, CodingKey {
            case staticIp = "staticIp"
        }
    }

    public struct GetInstanceMetricDataResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "metricData", required: false, type: .list), 
            AWSShapeMember(label: "metricName", required: false, type: .enum)
        ]
        /// An array of key-value pairs containing information about the results of your get instance metric data request.
        public let metricData: [MetricDatapoint]?
        /// The metric name to return data for.
        public let metricName: InstanceMetricName?

        public init(metricData: [MetricDatapoint]? = nil, metricName: InstanceMetricName? = nil) {
            self.metricData = metricData
            self.metricName = metricName
        }

        private enum CodingKeys: String, CodingKey {
            case metricData = "metricData"
            case metricName = "metricName"
        }
    }

    public struct DownloadDefaultKeyPairRequest: AWSShape {

    }

    public enum LoadBalancerMetricName: String, CustomStringConvertible, Codable {
        case clienttlsnegotiationerrorcount = "ClientTLSNegotiationErrorCount"
        case healthyhostcount = "HealthyHostCount"
        case unhealthyhostcount = "UnhealthyHostCount"
        case httpcodeLb4XxCount = "HTTPCode_LB_4XX_Count"
        case httpcodeLb5XxCount = "HTTPCode_LB_5XX_Count"
        case httpcodeInstance2XxCount = "HTTPCode_Instance_2XX_Count"
        case httpcodeInstance3XxCount = "HTTPCode_Instance_3XX_Count"
        case httpcodeInstance4XxCount = "HTTPCode_Instance_4XX_Count"
        case httpcodeInstance5XxCount = "HTTPCode_Instance_5XX_Count"
        case instanceresponsetime = "InstanceResponseTime"
        case rejectedconnectioncount = "RejectedConnectionCount"
        case requestcount = "RequestCount"
        public var description: String { return self.rawValue }
    }

    public struct PutInstancePublicPortsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string), 
            AWSShapeMember(label: "portInfos", required: true, type: .list)
        ]
        /// The Lightsail instance name of the public port(s) you are setting.
        public let instanceName: String
        /// Specifies information about the public port(s).
        public let portInfos: [PortInfo]

        public init(instanceName: String, portInfos: [PortInfo]) {
            self.instanceName = instanceName
            self.portInfos = portInfos
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
            case portInfos = "portInfos"
        }
    }

    public struct ImportKeyPairRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "keyPairName", required: true, type: .string), 
            AWSShapeMember(label: "publicKeyBase64", required: true, type: .string)
        ]
        /// The name of the key pair for which you want to import the public key.
        public let keyPairName: String
        /// A base64-encoded public key of the ssh-rsa type.
        public let publicKeyBase64: String

        public init(keyPairName: String, publicKeyBase64: String) {
            self.keyPairName = keyPairName
            self.publicKeyBase64 = publicKeyBase64
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairName = "keyPairName"
            case publicKeyBase64 = "publicKeyBase64"
        }
    }

    public struct CreateLoadBalancerTlsCertificateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "certificateName", required: true, type: .string), 
            AWSShapeMember(label: "certificateAlternativeNames", required: false, type: .list), 
            AWSShapeMember(label: "loadBalancerName", required: true, type: .string), 
            AWSShapeMember(label: "certificateDomainName", required: true, type: .string)
        ]
        /// The SSL/TLS certificate name. You can have up to 10 certificates in your account at one time. Each Lightsail load balancer can have up to 2 certificates associated with it at one time. There is also an overall limit to the number of certificates that can be issue in a 365-day period. For more information, see Limits.
        public let certificateName: String
        /// An array of strings listing alternative domains and subdomains for your SSL/TLS certificate. Lightsail will de-dupe the names for you. You can have a maximum of 9 alternative names (in addition to the 1 primary domain). We do not support wildcards (e.g., *.example.com).
        public let certificateAlternativeNames: [String]?
        /// The load balancer name where you want to create the SSL/TLS certificate.
        public let loadBalancerName: String
        /// The domain name (e.g., example.com) for your SSL/TLS certificate.
        public let certificateDomainName: String

        public init(certificateName: String, certificateAlternativeNames: [String]? = nil, loadBalancerName: String, certificateDomainName: String) {
            self.certificateName = certificateName
            self.certificateAlternativeNames = certificateAlternativeNames
            self.loadBalancerName = loadBalancerName
            self.certificateDomainName = certificateDomainName
        }

        private enum CodingKeys: String, CodingKey {
            case certificateName = "certificateName"
            case certificateAlternativeNames = "certificateAlternativeNames"
            case loadBalancerName = "loadBalancerName"
            case certificateDomainName = "certificateDomainName"
        }
    }

    public struct PutInstancePublicPortsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// Describes metadata about the operation you just executed.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct DetachDiskResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An object describing the API operations.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct InstancePortInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "accessType", required: false, type: .enum), 
            AWSShapeMember(label: "protocol", required: false, type: .enum), 
            AWSShapeMember(label: "accessDirection", required: false, type: .enum), 
            AWSShapeMember(label: "fromPort", required: false, type: .integer), 
            AWSShapeMember(label: "accessFrom", required: false, type: .string), 
            AWSShapeMember(label: "toPort", required: false, type: .integer), 
            AWSShapeMember(label: "commonName", required: false, type: .string)
        ]
        /// The type of access (Public or Private).
        public let accessType: PortAccessType?
        /// The protocol being used. Can be one of the following.    tcp - Transmission Control Protocol (TCP) provides reliable, ordered, and error-checked delivery of streamed data between applications running on hosts communicating by an IP network. If you have an application that doesn't require reliable data stream service, use UDP instead.    all - All transport layer protocol types. For more general information, see Transport layer on Wikipedia.    udp - With User Datagram Protocol (UDP), computer applications can send messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior communications are not required to set up transmission channels or data paths. Applications that don't require reliable data stream service can use UDP, which provides a connectionless datagram service that emphasizes reduced latency over reliability. If you do require reliable data stream service, use TCP instead.  
        public let `protocol`: NetworkProtocol?
        /// The access direction (inbound or outbound).
        public let accessDirection: AccessDirection?
        /// The first port in the range.
        public let fromPort: Int32?
        /// The location from which access is allowed (e.g., Anywhere (0.0.0.0/0)).
        public let accessFrom: String?
        /// The last port in the range.
        public let toPort: Int32?
        /// The common name.
        public let commonName: String?

        public init(accessType: PortAccessType? = nil, protocol: NetworkProtocol? = nil, accessDirection: AccessDirection? = nil, fromPort: Int32? = nil, accessFrom: String? = nil, toPort: Int32? = nil, commonName: String? = nil) {
            self.accessType = accessType
            self.`protocol` = `protocol`
            self.accessDirection = accessDirection
            self.fromPort = fromPort
            self.accessFrom = accessFrom
            self.toPort = toPort
            self.commonName = commonName
        }

        private enum CodingKeys: String, CodingKey {
            case accessType = "accessType"
            case `protocol` = "protocol"
            case accessDirection = "accessDirection"
            case fromPort = "fromPort"
            case accessFrom = "accessFrom"
            case toPort = "toPort"
            case commonName = "commonName"
        }
    }

    public struct AttachInstancesToLoadBalancerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceNames", required: true, type: .list), 
            AWSShapeMember(label: "loadBalancerName", required: true, type: .string)
        ]
        /// An array of strings representing the instance name(s) you want to attach to your load balancer. An instance must be running before you can attach it to your load balancer. There are no additional limits on the number of instances you can attach to your load balancer, aside from the limit of Lightsail instances you can create in your account (20).
        public let instanceNames: [String]
        /// The name of the load balancer.
        public let loadBalancerName: String

        public init(instanceNames: [String], loadBalancerName: String) {
            self.instanceNames = instanceNames
            self.loadBalancerName = loadBalancerName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceNames = "instanceNames"
            case loadBalancerName = "loadBalancerName"
        }
    }

    public struct GetInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "instances", required: false, type: .list)
        ]
        /// A token used for advancing to the next page of results from your get instances request.
        public let nextPageToken: String?
        /// An array of key-value pairs containing information about your instances.
        public let instances: [Instance]?

        public init(nextPageToken: String? = nil, instances: [Instance]? = nil) {
            self.nextPageToken = nextPageToken
            self.instances = instances
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case instances = "instances"
        }
    }

    public struct LoadBalancerTlsCertificateSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "isAttached", required: false, type: .boolean)
        ]
        /// The name of the SSL/TLS certificate.
        public let name: String?
        /// When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
        public let isAttached: Bool?

        public init(name: String? = nil, isAttached: Bool? = nil) {
            self.name = name
            self.isAttached = isAttached
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case isAttached = "isAttached"
        }
    }

    public struct InstanceAccessDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "passwordData", required: false, type: .structure), 
            AWSShapeMember(label: "expiresAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "username", required: false, type: .string), 
            AWSShapeMember(label: "protocol", required: false, type: .enum), 
            AWSShapeMember(label: "ipAddress", required: false, type: .string), 
            AWSShapeMember(label: "instanceName", required: false, type: .string), 
            AWSShapeMember(label: "privateKey", required: false, type: .string), 
            AWSShapeMember(label: "certKey", required: false, type: .string), 
            AWSShapeMember(label: "password", required: false, type: .string)
        ]
        /// For a Windows Server-based instance, an object with the data you can use to retrieve your password. This is only needed if password is empty and the instance is not new (and therefore the password is not ready yet). When you create an instance, it can take up to 15 minutes for the instance to be ready.
        public let passwordData: PasswordData?
        /// For SSH access, the date on which the temporary keys expire.
        public let expiresAt: TimeStamp?
        /// The user name to use when logging in to the Amazon Lightsail instance.
        public let username: String?
        /// The protocol for these Amazon Lightsail instance access details.
        public let `protocol`: InstanceAccessProtocol?
        /// The public IP address of the Amazon Lightsail instance.
        public let ipAddress: String?
        /// The name of this Amazon Lightsail instance.
        public let instanceName: String?
        /// For SSH access, the temporary private key. For OpenSSH clients (e.g., command line SSH), you should save this value to tempkey).
        public let privateKey: String?
        /// For SSH access, the public key to use when accessing your instance For OpenSSH clients (e.g., command line SSH), you should save this value to tempkey-cert.pub.
        public let certKey: String?
        /// For RDP access, the password for your Amazon Lightsail instance. Password will be an empty string if the password for your new instance is not ready yet. When you create an instance, it can take up to 15 minutes for the instance to be ready.  If you create an instance using any key pair other than the default (LightsailDefaultKeyPair), password will always be an empty string. If you change the Administrator password on the instance, Lightsail will continue to return the original password value. When accessing the instance using RDP, you need to manually enter the Administrator password after changing it from the default. 
        public let password: String?

        public init(passwordData: PasswordData? = nil, expiresAt: TimeStamp? = nil, username: String? = nil, protocol: InstanceAccessProtocol? = nil, ipAddress: String? = nil, instanceName: String? = nil, privateKey: String? = nil, certKey: String? = nil, password: String? = nil) {
            self.passwordData = passwordData
            self.expiresAt = expiresAt
            self.username = username
            self.`protocol` = `protocol`
            self.ipAddress = ipAddress
            self.instanceName = instanceName
            self.privateKey = privateKey
            self.certKey = certKey
            self.password = password
        }

        private enum CodingKeys: String, CodingKey {
            case passwordData = "passwordData"
            case expiresAt = "expiresAt"
            case username = "username"
            case `protocol` = "protocol"
            case ipAddress = "ipAddress"
            case instanceName = "instanceName"
            case privateKey = "privateKey"
            case certKey = "certKey"
            case password = "password"
        }
    }

    public enum PortState: String, CustomStringConvertible, Codable {
        case open = "open"
        case closed = "closed"
        public var description: String { return self.rawValue }
    }

    public struct GetInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name of the instance.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct DomainEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "isAlias", required: false, type: .boolean), 
            AWSShapeMember(label: "type", required: false, type: .string), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "target", required: false, type: .string), 
            AWSShapeMember(label: "options", required: false, type: .map)
        ]
        /// When true, specifies whether the domain entry is an alias used by the Lightsail load balancer. You can include an alias (A type) record in your request, which points to a load balancer DNS name and routes traffic to your load balancer
        public let isAlias: Bool?
        /// The type of domain entry (e.g., SOA or NS).
        public let `type`: String?
        /// The ID of the domain recordset entry.
        public let id: String?
        /// The name of the domain.
        public let name: String?
        /// The target AWS name server (e.g., ns-111.awsdns-22.com.). For Lightsail load balancers, the value looks like ab1234c56789c6b86aba6fb203d443bc-123456789.us-east-2.elb.amazonaws.com. Be sure to also set isAlias to true when setting up an A record for a load balancer.
        public let target: String?
        /// (Deprecated) The options for the domain entry.  In releases prior to November 29, 2017, this parameter was not included in the API response. It is now deprecated. 
        public let options: [String: String]?

        public init(isAlias: Bool? = nil, type: String? = nil, id: String? = nil, name: String? = nil, target: String? = nil, options: [String: String]? = nil) {
            self.isAlias = isAlias
            self.`type` = `type`
            self.id = id
            self.name = name
            self.target = target
            self.options = options
        }

        private enum CodingKeys: String, CodingKey {
            case isAlias = "isAlias"
            case `type` = "type"
            case id = "id"
            case name = "name"
            case target = "target"
            case options = "options"
        }
    }

    public struct InstanceState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "code", required: false, type: .integer)
        ]
        /// The state of the instance (e.g., running or pending).
        public let name: String?
        /// The status code for the instance.
        public let code: Int32?

        public init(name: String? = nil, code: Int32? = nil) {
            self.name = name
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case code = "code"
        }
    }

    public struct GetKeyPairResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "keyPair", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the key pair.
        public let keyPair: KeyPair?

        public init(keyPair: KeyPair? = nil) {
            self.keyPair = keyPair
        }

        private enum CodingKeys: String, CodingKey {
            case keyPair = "keyPair"
        }
    }

    public struct DiskMap: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "originalDiskPath", required: false, type: .string), 
            AWSShapeMember(label: "newDiskName", required: false, type: .string)
        ]
        /// The original disk path exposed to the instance (for example, /dev/sdh).
        public let originalDiskPath: String?
        /// The new disk name (e.g., my-new-disk).
        public let newDiskName: String?

        public init(originalDiskPath: String? = nil, newDiskName: String? = nil) {
            self.originalDiskPath = originalDiskPath
            self.newDiskName = newDiskName
        }

        private enum CodingKeys: String, CodingKey {
            case originalDiskPath = "originalDiskPath"
            case newDiskName = "newDiskName"
        }
    }

    public struct UpdateLoadBalancerAttributeResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An object describing the API operations.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct GetKeyPairsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "keyPairs", required: false, type: .list), 
            AWSShapeMember(label: "nextPageToken", required: false, type: .string)
        ]
        /// An array of key-value pairs containing information about the key pairs.
        public let keyPairs: [KeyPair]?
        /// A token used for advancing to the next page of results from your get key pairs request.
        public let nextPageToken: String?

        public init(keyPairs: [KeyPair]? = nil, nextPageToken: String? = nil) {
            self.keyPairs = keyPairs
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairs = "keyPairs"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct AttachStaticIpRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "staticIpName", required: true, type: .string), 
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name of the static IP.
        public let staticIpName: String
        /// The instance name to which you want to attach the static IP address.
        public let instanceName: String

        public init(staticIpName: String, instanceName: String) {
            self.staticIpName = staticIpName
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case staticIpName = "staticIpName"
            case instanceName = "instanceName"
        }
    }

    public enum DiskState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case error = "error"
        case available = "available"
        case inUse = "in-use"
        case unknown = "unknown"
        public var description: String { return self.rawValue }
    }

    public enum RegionName: String, CustomStringConvertible, Codable {
        case usEast1 = "us-east-1"
        case usEast2 = "us-east-2"
        case usWest1 = "us-west-1"
        case usWest2 = "us-west-2"
        case euCentral1 = "eu-central-1"
        case euWest1 = "eu-west-1"
        case euWest2 = "eu-west-2"
        case apSouth1 = "ap-south-1"
        case apSoutheast1 = "ap-southeast-1"
        case apSoutheast2 = "ap-southeast-2"
        case apNortheast1 = "ap-northeast-1"
        case apNortheast2 = "ap-northeast-2"
        public var description: String { return self.rawValue }
    }

    public struct StopInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the request operation.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public enum LoadBalancerTlsCertificateDomainStatus: String, CustomStringConvertible, Codable {
        case pendingValidation = "PENDING_VALIDATION"
        case failed = "FAILED"
        case success = "SUCCESS"
        public var description: String { return self.rawValue }
    }

    public struct DeleteDomainEntryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the results of your delete domain entry request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public enum LoadBalancerState: String, CustomStringConvertible, Codable {
        case active = "active"
        case provisioning = "provisioning"
        case activeImpaired = "active_impaired"
        case failed = "failed"
        case unknown = "unknown"
        public var description: String { return self.rawValue }
    }

    public struct IsVpcPeeredResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "isPeered", required: false, type: .boolean)
        ]
        /// Returns true if the Lightsail VPC is peered; otherwise, false.
        public let isPeered: Bool?

        public init(isPeered: Bool? = nil) {
            self.isPeered = isPeered
        }

        private enum CodingKeys: String, CodingKey {
            case isPeered = "isPeered"
        }
    }

    public struct CreateDomainEntryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the operation.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct DiskSnapshot: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "supportCode", required: false, type: .string), 
            AWSShapeMember(label: "fromDiskArn", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "fromDiskName", required: false, type: .string), 
            AWSShapeMember(label: "state", required: false, type: .enum), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "progress", required: false, type: .string), 
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "sizeInGb", required: false, type: .integer), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp)
        ]
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The Amazon Resource Name (ARN) of the source disk from which you are creating the disk snapshot.
        public let fromDiskArn: String?
        /// The name of the disk snapshot (e.g., my-disk-snapshot).
        public let name: String?
        /// The AWS Region and Availability Zone where the disk snapshot was created.
        public let location: ResourceLocation?
        /// The unique name of the source disk from which you are creating the disk snapshot.
        public let fromDiskName: String?
        /// The status of the disk snapshot operation.
        public let state: DiskSnapshotState?
        /// The Amazon Resource Name (ARN) of the disk snapshot.
        public let arn: String?
        /// The progress of the disk snapshot operation.
        public let progress: String?
        /// The Lightsail resource type (e.g., DiskSnapshot).
        public let resourceType: ResourceType?
        /// The size of the disk in GB.
        public let sizeInGb: Int32?
        /// The date when the disk snapshot was created.
        public let createdAt: TimeStamp?

        public init(supportCode: String? = nil, fromDiskArn: String? = nil, name: String? = nil, location: ResourceLocation? = nil, fromDiskName: String? = nil, state: DiskSnapshotState? = nil, arn: String? = nil, progress: String? = nil, resourceType: ResourceType? = nil, sizeInGb: Int32? = nil, createdAt: TimeStamp? = nil) {
            self.supportCode = supportCode
            self.fromDiskArn = fromDiskArn
            self.name = name
            self.location = location
            self.fromDiskName = fromDiskName
            self.state = state
            self.arn = arn
            self.progress = progress
            self.resourceType = resourceType
            self.sizeInGb = sizeInGb
            self.createdAt = createdAt
        }

        private enum CodingKeys: String, CodingKey {
            case supportCode = "supportCode"
            case fromDiskArn = "fromDiskArn"
            case name = "name"
            case location = "location"
            case fromDiskName = "fromDiskName"
            case state = "state"
            case arn = "arn"
            case progress = "progress"
            case resourceType = "resourceType"
            case sizeInGb = "sizeInGb"
            case createdAt = "createdAt"
        }
    }

    public struct StaticIp: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "supportCode", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "ipAddress", required: false, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "isAttached", required: false, type: .boolean), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "attachedTo", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp)
        ]
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The name of the static IP (e.g., StaticIP-Ohio-EXAMPLE).
        public let name: String?
        /// The static IP address.
        public let ipAddress: String?
        /// The region and Availability Zone where the static IP was created.
        public let location: ResourceLocation?
        /// A Boolean value indicating whether the static IP is attached.
        public let isAttached: Bool?
        /// The Amazon Resource Name (ARN) of the static IP (e.g., arn:aws:lightsail:us-east-2:123456789101:StaticIp/9cbb4a9e-f8e3-4dfe-b57e-12345EXAMPLE).
        public let arn: String?
        /// The resource type (usually StaticIp).
        public let resourceType: ResourceType?
        /// The instance where the static IP is attached (e.g., Amazon_Linux-1GB-Ohio-1).
        public let attachedTo: String?
        /// The timestamp when the static IP was created (e.g., 1479735304.222).
        public let createdAt: TimeStamp?

        public init(supportCode: String? = nil, name: String? = nil, ipAddress: String? = nil, location: ResourceLocation? = nil, isAttached: Bool? = nil, arn: String? = nil, resourceType: ResourceType? = nil, attachedTo: String? = nil, createdAt: TimeStamp? = nil) {
            self.supportCode = supportCode
            self.name = name
            self.ipAddress = ipAddress
            self.location = location
            self.isAttached = isAttached
            self.arn = arn
            self.resourceType = resourceType
            self.attachedTo = attachedTo
            self.createdAt = createdAt
        }

        private enum CodingKeys: String, CodingKey {
            case supportCode = "supportCode"
            case name = "name"
            case ipAddress = "ipAddress"
            case location = "location"
            case isAttached = "isAttached"
            case arn = "arn"
            case resourceType = "resourceType"
            case attachedTo = "attachedTo"
            case createdAt = "createdAt"
        }
    }

    public struct Bundle: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "diskSizeInGb", required: false, type: .integer), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "transferPerMonthInGb", required: false, type: .integer), 
            AWSShapeMember(label: "price", required: false, type: .float), 
            AWSShapeMember(label: "ramSizeInGb", required: false, type: .float), 
            AWSShapeMember(label: "cpuCount", required: false, type: .integer), 
            AWSShapeMember(label: "isActive", required: false, type: .boolean), 
            AWSShapeMember(label: "instanceType", required: false, type: .string), 
            AWSShapeMember(label: "supportedPlatforms", required: false, type: .list), 
            AWSShapeMember(label: "power", required: false, type: .integer), 
            AWSShapeMember(label: "bundleId", required: false, type: .string)
        ]
        /// The size of the SSD (e.g., 30).
        public let diskSizeInGb: Int32?
        /// A friendly name for the bundle (e.g., Micro).
        public let name: String?
        /// The data transfer rate per month in GB (e.g., 2000).
        public let transferPerMonthInGb: Int32?
        /// The price in US dollars (e.g., 5.0).
        public let price: Float?
        /// The amount of RAM in GB (e.g., 2.0).
        public let ramSizeInGb: Float?
        /// The number of vCPUs included in the bundle (e.g., 2).
        public let cpuCount: Int32?
        /// A Boolean value indicating whether the bundle is active.
        public let isActive: Bool?
        /// The Amazon EC2 instance type (e.g., t2.micro).
        public let instanceType: String?
        /// The operating system platform (Linux/Unix-based or Windows Server-based) that the bundle supports. You can only launch a WINDOWS bundle on a blueprint that supports the WINDOWS platform. LINUX_UNIX blueprints require a LINUX_UNIX bundle.
        public let supportedPlatforms: [InstancePlatform]?
        /// A numeric value that represents the power of the bundle (e.g., 500). You can use the bundle's power value in conjunction with a blueprint's minimum power value to determine whether the blueprint will run on the bundle. For example, you need a bundle with a power value of 500 or more to create an instance that uses a blueprint with a minimum power value of 500.
        public let power: Int32?
        /// The bundle ID (e.g., micro_1_0).
        public let bundleId: String?

        public init(diskSizeInGb: Int32? = nil, name: String? = nil, transferPerMonthInGb: Int32? = nil, price: Float? = nil, ramSizeInGb: Float? = nil, cpuCount: Int32? = nil, isActive: Bool? = nil, instanceType: String? = nil, supportedPlatforms: [InstancePlatform]? = nil, power: Int32? = nil, bundleId: String? = nil) {
            self.diskSizeInGb = diskSizeInGb
            self.name = name
            self.transferPerMonthInGb = transferPerMonthInGb
            self.price = price
            self.ramSizeInGb = ramSizeInGb
            self.cpuCount = cpuCount
            self.isActive = isActive
            self.instanceType = instanceType
            self.supportedPlatforms = supportedPlatforms
            self.power = power
            self.bundleId = bundleId
        }

        private enum CodingKeys: String, CodingKey {
            case diskSizeInGb = "diskSizeInGb"
            case name = "name"
            case transferPerMonthInGb = "transferPerMonthInGb"
            case price = "price"
            case ramSizeInGb = "ramSizeInGb"
            case cpuCount = "cpuCount"
            case isActive = "isActive"
            case instanceType = "instanceType"
            case supportedPlatforms = "supportedPlatforms"
            case power = "power"
            case bundleId = "bundleId"
        }
    }

    public struct Blueprint: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "versionCode", required: false, type: .string), 
            AWSShapeMember(label: "productUrl", required: false, type: .string), 
            AWSShapeMember(label: "group", required: false, type: .string), 
            AWSShapeMember(label: "minPower", required: false, type: .integer), 
            AWSShapeMember(label: "platform", required: false, type: .enum), 
            AWSShapeMember(label: "isActive", required: false, type: .boolean), 
            AWSShapeMember(label: "type", required: false, type: .enum), 
            AWSShapeMember(label: "blueprintId", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "licenseUrl", required: false, type: .string)
        ]
        /// The friendly name of the blueprint (e.g., Amazon Linux).
        public let name: String?
        /// The version code.
        public let versionCode: String?
        /// The product URL to learn more about the image or blueprint.
        public let productUrl: String?
        /// The group name of the blueprint (e.g., amazon-linux).
        public let group: String?
        /// The minimum bundle power required to run this blueprint. For example, you need a bundle with a power value of 500 or more to create an instance that uses a blueprint with a minimum power value of 500. 0 indicates that the blueprint runs on all instance sizes. 
        public let minPower: Int32?
        /// The operating system platform (either Linux/Unix-based or Windows Server-based) of the blueprint.
        public let platform: InstancePlatform?
        /// A Boolean value indicating whether the blueprint is active. When you update your blueprints, you will inactivate old blueprints and keep the most recent versions active.
        public let isActive: Bool?
        /// The type of the blueprint (e.g., os or app).
        public let `type`: BlueprintType?
        /// The ID for the virtual private server image (e.g., app_wordpress_4_4 or app_lamp_7_0).
        public let blueprintId: String?
        /// The description of the blueprint.
        public let description: String?
        /// The version number of the operating system, application, or stack (e.g., 2016.03.0).
        public let version: String?
        /// The end-user license agreement URL for the image or blueprint.
        public let licenseUrl: String?

        public init(name: String? = nil, versionCode: String? = nil, productUrl: String? = nil, group: String? = nil, minPower: Int32? = nil, platform: InstancePlatform? = nil, isActive: Bool? = nil, type: BlueprintType? = nil, blueprintId: String? = nil, description: String? = nil, version: String? = nil, licenseUrl: String? = nil) {
            self.name = name
            self.versionCode = versionCode
            self.productUrl = productUrl
            self.group = group
            self.minPower = minPower
            self.platform = platform
            self.isActive = isActive
            self.`type` = `type`
            self.blueprintId = blueprintId
            self.description = description
            self.version = version
            self.licenseUrl = licenseUrl
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case versionCode = "versionCode"
            case productUrl = "productUrl"
            case group = "group"
            case minPower = "minPower"
            case platform = "platform"
            case isActive = "isActive"
            case `type` = "type"
            case blueprintId = "blueprintId"
            case description = "description"
            case version = "version"
            case licenseUrl = "licenseUrl"
        }
    }

    public enum LoadBalancerTlsCertificateFailureReason: String, CustomStringConvertible, Codable {
        case noAvailableContacts = "NO_AVAILABLE_CONTACTS"
        case additionalVerificationRequired = "ADDITIONAL_VERIFICATION_REQUIRED"
        case domainNotAllowed = "DOMAIN_NOT_ALLOWED"
        case invalidPublicDomain = "INVALID_PUBLIC_DOMAIN"
        case other = "OTHER"
        public var description: String { return self.rawValue }
    }

    public struct GetDiskSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "diskSnapshotName", required: true, type: .string)
        ]
        /// The name of the disk snapshot (e.g., my-disk-snapshot).
        public let diskSnapshotName: String

        public init(diskSnapshotName: String) {
            self.diskSnapshotName = diskSnapshotName
        }

        private enum CodingKeys: String, CodingKey {
            case diskSnapshotName = "diskSnapshotName"
        }
    }

    public struct AttachDiskResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An object describing the API operations.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct Operation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "isTerminal", required: false, type: .boolean), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "operationDetails", required: false, type: .string), 
            AWSShapeMember(label: "operationType", required: false, type: .enum), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "errorDetails", required: false, type: .string), 
            AWSShapeMember(label: "resourceName", required: false, type: .string), 
            AWSShapeMember(label: "statusChangedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "errorCode", required: false, type: .string)
        ]
        /// A Boolean value indicating whether the operation is terminal.
        public let isTerminal: Bool?
        /// The timestamp when the operation was initialized (e.g., 1479816991.349).
        public let createdAt: TimeStamp?
        /// Details about the operation (e.g., Debian-1GB-Ohio-1).
        public let operationDetails: String?
        /// The type of operation. 
        public let operationType: OperationType?
        /// The region and Availability Zone.
        public let location: ResourceLocation?
        /// The resource type. 
        public let resourceType: ResourceType?
        /// The error details.
        public let errorDetails: String?
        /// The resource name.
        public let resourceName: String?
        /// The timestamp when the status was changed (e.g., 1479816991.349).
        public let statusChangedAt: TimeStamp?
        /// The ID of the operation.
        public let id: String?
        /// The status of the operation. 
        public let status: OperationStatus?
        /// The error code.
        public let errorCode: String?

        public init(isTerminal: Bool? = nil, createdAt: TimeStamp? = nil, operationDetails: String? = nil, operationType: OperationType? = nil, location: ResourceLocation? = nil, resourceType: ResourceType? = nil, errorDetails: String? = nil, resourceName: String? = nil, statusChangedAt: TimeStamp? = nil, id: String? = nil, status: OperationStatus? = nil, errorCode: String? = nil) {
            self.isTerminal = isTerminal
            self.createdAt = createdAt
            self.operationDetails = operationDetails
            self.operationType = operationType
            self.location = location
            self.resourceType = resourceType
            self.errorDetails = errorDetails
            self.resourceName = resourceName
            self.statusChangedAt = statusChangedAt
            self.id = id
            self.status = status
            self.errorCode = errorCode
        }

        private enum CodingKeys: String, CodingKey {
            case isTerminal = "isTerminal"
            case createdAt = "createdAt"
            case operationDetails = "operationDetails"
            case operationType = "operationType"
            case location = "location"
            case resourceType = "resourceType"
            case errorDetails = "errorDetails"
            case resourceName = "resourceName"
            case statusChangedAt = "statusChangedAt"
            case id = "id"
            case status = "status"
            case errorCode = "errorCode"
        }
    }

    public struct CreateDiskResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An object describing the API operations.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CloseInstancePublicPortsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs that contains information about the operation.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct Domain: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "supportCode", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "domainEntries", required: false, type: .list), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp)
        ]
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The name of the domain.
        public let name: String?
        /// The AWS Region and Availability Zones where the domain recordset was created.
        public let location: ResourceLocation?
        /// An array of key-value pairs containing information about the domain entries.
        public let domainEntries: [DomainEntry]?
        /// The Amazon Resource Name (ARN) of the domain recordset (e.g., arn:aws:lightsail:global:123456789101:Domain/824cede0-abc7-4f84-8dbc-12345EXAMPLE).
        public let arn: String?
        /// The resource type. 
        public let resourceType: ResourceType?
        /// The date when the domain recordset was created.
        public let createdAt: TimeStamp?

        public init(supportCode: String? = nil, name: String? = nil, location: ResourceLocation? = nil, domainEntries: [DomainEntry]? = nil, arn: String? = nil, resourceType: ResourceType? = nil, createdAt: TimeStamp? = nil) {
            self.supportCode = supportCode
            self.name = name
            self.location = location
            self.domainEntries = domainEntries
            self.arn = arn
            self.resourceType = resourceType
            self.createdAt = createdAt
        }

        private enum CodingKeys: String, CodingKey {
            case supportCode = "supportCode"
            case name = "name"
            case location = "location"
            case domainEntries = "domainEntries"
            case arn = "arn"
            case resourceType = "resourceType"
            case createdAt = "createdAt"
        }
    }

    public struct GetOperationsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string), 
            AWSShapeMember(label: "resourceName", required: true, type: .string)
        ]
        /// A token used for advancing to the next page of results from your get operations for resource request.
        public let pageToken: String?
        /// The name of the resource for which you are requesting information.
        public let resourceName: String

        public init(pageToken: String? = nil, resourceName: String) {
            self.pageToken = pageToken
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
            case resourceName = "resourceName"
        }
    }

    public struct DeleteInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the results of your delete instance request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct InstancePortState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "state", required: false, type: .enum), 
            AWSShapeMember(label: "toPort", required: false, type: .integer), 
            AWSShapeMember(label: "fromPort", required: false, type: .integer), 
            AWSShapeMember(label: "protocol", required: false, type: .enum)
        ]
        /// Specifies whether the instance port is open or closed.
        public let state: PortState?
        /// The last port in the range.
        public let toPort: Int32?
        /// The first port in the range.
        public let fromPort: Int32?
        /// The protocol being used. Can be one of the following.    tcp - Transmission Control Protocol (TCP) provides reliable, ordered, and error-checked delivery of streamed data between applications running on hosts communicating by an IP network. If you have an application that doesn't require reliable data stream service, use UDP instead.    all - All transport layer protocol types. For more general information, see Transport layer on Wikipedia.    udp - With User Datagram Protocol (UDP), computer applications can send messages (or datagrams) to other hosts on an Internet Protocol (IP) network. Prior communications are not required to set up transmission channels or data paths. Applications that don't require reliable data stream service can use UDP, which provides a connectionless datagram service that emphasizes reduced latency over reliability. If you do require reliable data stream service, use TCP instead.  
        public let `protocol`: NetworkProtocol?

        public init(state: PortState? = nil, toPort: Int32? = nil, fromPort: Int32? = nil, protocol: NetworkProtocol? = nil) {
            self.state = state
            self.toPort = toPort
            self.fromPort = fromPort
            self.`protocol` = `protocol`
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case toPort = "toPort"
            case fromPort = "fromPort"
            case `protocol` = "protocol"
        }
    }

    public struct DeleteKeyPairRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "keyPairName", required: true, type: .string)
        ]
        /// The name of the key pair to delete.
        public let keyPairName: String

        public init(keyPairName: String) {
            self.keyPairName = keyPairName
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairName = "keyPairName"
        }
    }

    public struct GetStaticIpRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "staticIpName", required: true, type: .string)
        ]
        /// The name of the static IP in Lightsail.
        public let staticIpName: String

        public init(staticIpName: String) {
            self.staticIpName = staticIpName
        }

        private enum CodingKeys: String, CodingKey {
            case staticIpName = "staticIpName"
        }
    }

    public struct ImportKeyPairResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the request operation.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct DetachStaticIpRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "staticIpName", required: true, type: .string)
        ]
        /// The name of the static IP to detach from the instance.
        public let staticIpName: String

        public init(staticIpName: String) {
            self.staticIpName = staticIpName
        }

        private enum CodingKeys: String, CodingKey {
            case staticIpName = "staticIpName"
        }
    }

    public struct GetInstanceStateResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "state", required: false, type: .structure)
        ]
        /// The state of the instance.
        public let state: InstanceState?

        public init(state: InstanceState? = nil) {
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
        }
    }

    public struct InstanceHealthSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: false, type: .string), 
            AWSShapeMember(label: "instanceHealthReason", required: false, type: .enum), 
            AWSShapeMember(label: "instanceHealth", required: false, type: .enum)
        ]
        /// The name of the Lightsail instance for which you are requesting health check data.
        public let instanceName: String?
        /// More information about the instance health. If the instanceHealth is healthy, then an instanceHealthReason value is not provided. If  instanceHealth  is initial, the  instanceHealthReason  value can be one of the following:     Lb.RegistrationInProgress  - The target instance is in the process of being registered with the load balancer.     Lb.InitialHealthChecking  - The Lightsail load balancer is still sending the target instance the minimum number of health checks required to determine its health status.   If  instanceHealth  is unhealthy, the  instanceHealthReason  value can be one of the following:     Instance.ResponseCodeMismatch  - The health checks did not return an expected HTTP code.     Instance.Timeout  - The health check requests timed out.     Instance.FailedHealthChecks  - The health checks failed because the connection to the target instance timed out, the target instance response was malformed, or the target instance failed the health check for an unknown reason.     Lb.InternalError  - The health checks failed due to an internal error.   If  instanceHealth  is unused, the  instanceHealthReason  value can be one of the following:     Instance.NotRegistered  - The target instance is not registered with the target group.     Instance.NotInUse  - The target group is not used by any load balancer, or the target instance is in an Availability Zone that is not enabled for its load balancer.     Instance.IpUnusable  - The target IP address is reserved for use by a Lightsail load balancer.     Instance.InvalidState  - The target is in the stopped or terminated state.   If  instanceHealth  is draining, the  instanceHealthReason  value can be one of the following:     Instance.DeregistrationInProgress  - The target instance is in the process of being deregistered and the deregistration delay period has not expired.  
        public let instanceHealthReason: InstanceHealthReason?
        /// Describes the overall instance health. Valid values are below.
        public let instanceHealth: InstanceHealthState?

        public init(instanceName: String? = nil, instanceHealthReason: InstanceHealthReason? = nil, instanceHealth: InstanceHealthState? = nil) {
            self.instanceName = instanceName
            self.instanceHealthReason = instanceHealthReason
            self.instanceHealth = instanceHealth
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
            case instanceHealthReason = "instanceHealthReason"
            case instanceHealth = "instanceHealth"
        }
    }

    public struct GetInstanceSnapshotsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string)
        ]
        /// A token used for advancing to the next page of results from your get instance snapshots request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct PeerVpcResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the request operation.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct DetachStaticIpResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the results of your detach static IP request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct KeyPair: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "supportCode", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "fingerprint", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp)
        ]
        /// The support code. Include this code in your email to support when you have questions about an instance or another resource in Lightsail. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// The friendly name of the SSH key pair.
        public let name: String?
        /// The region name and Availability Zone where the key pair was created.
        public let location: ResourceLocation?
        /// The RSA fingerprint of the key pair.
        public let fingerprint: String?
        /// The Amazon Resource Name (ARN) of the key pair (e.g., arn:aws:lightsail:us-east-2:123456789101:KeyPair/05859e3d-331d-48ba-9034-12345EXAMPLE).
        public let arn: String?
        /// The resource type (usually KeyPair).
        public let resourceType: ResourceType?
        /// The timestamp when the key pair was created (e.g., 1479816991.349).
        public let createdAt: TimeStamp?

        public init(supportCode: String? = nil, name: String? = nil, location: ResourceLocation? = nil, fingerprint: String? = nil, arn: String? = nil, resourceType: ResourceType? = nil, createdAt: TimeStamp? = nil) {
            self.supportCode = supportCode
            self.name = name
            self.location = location
            self.fingerprint = fingerprint
            self.arn = arn
            self.resourceType = resourceType
            self.createdAt = createdAt
        }

        private enum CodingKeys: String, CodingKey {
            case supportCode = "supportCode"
            case name = "name"
            case location = "location"
            case fingerprint = "fingerprint"
            case arn = "arn"
            case resourceType = "resourceType"
            case createdAt = "createdAt"
        }
    }

    public struct GetRegionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "regions", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about your get regions request.
        public let regions: [Region]?

        public init(regions: [Region]? = nil) {
            self.regions = regions
        }

        private enum CodingKeys: String, CodingKey {
            case regions = "regions"
        }
    }

    public struct GetLoadBalancerMetricDataResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "metricData", required: false, type: .list), 
            AWSShapeMember(label: "metricName", required: false, type: .enum)
        ]
        /// An array of metric datapoint objects.
        public let metricData: [MetricDatapoint]?
        /// The metric about which you are receiving information. Valid values are listed below, along with the most useful statistics to include in your request.     ClientTLSNegotiationErrorCount  - The number of TLS connections initiated by the client that did not establish a session with the load balancer. Possible causes include a mismatch of ciphers or protocols.  Statistics: The most useful statistic is Sum.     HealthyHostCount  - The number of target instances that are considered healthy.  Statistics: The most useful statistic are Average, Minimum, and Maximum.     UnhealthyHostCount  - The number of target instances that are considered unhealthy.  Statistics: The most useful statistic are Average, Minimum, and Maximum.     HTTPCode_LB_4XX_Count  - The number of HTTP 4XX client error codes that originate from the load balancer. Client errors are generated when requests are malformed or incomplete. These requests have not been received by the target instance. This count does not include any response codes generated by the target instances.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.     HTTPCode_LB_5XX_Count  - The number of HTTP 5XX server error codes that originate from the load balancer. This count does not include any response codes generated by the target instances.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1. Note that Minimum, Maximum, and Average all return 1.     HTTPCode_Instance_2XX_Count  - The number of HTTP response codes generated by the target instances. This does not include any response codes generated by the load balancer.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.     HTTPCode_Instance_3XX_Count  - The number of HTTP response codes generated by the target instances. This does not include any response codes generated by the load balancer.   Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.     HTTPCode_Instance_4XX_Count  - The number of HTTP response codes generated by the target instances. This does not include any response codes generated by the load balancer.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.     HTTPCode_Instance_5XX_Count  - The number of HTTP response codes generated by the target instances. This does not include any response codes generated by the load balancer.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.     InstanceResponseTime  - The time elapsed, in seconds, after the request leaves the load balancer until a response from the target instance is received.  Statistics: The most useful statistic is Average.     RejectedConnectionCount  - The number of connections that were rejected because the load balancer had reached its maximum number of connections.  Statistics: The most useful statistic is Sum.     RequestCount  - The number of requests processed over IPv4. This count includes only the requests with a response generated by a target instance of the load balancer.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.  
        public let metricName: LoadBalancerMetricName?

        public init(metricData: [MetricDatapoint]? = nil, metricName: LoadBalancerMetricName? = nil) {
            self.metricData = metricData
            self.metricName = metricName
        }

        private enum CodingKeys: String, CodingKey {
            case metricData = "metricData"
            case metricName = "metricName"
        }
    }

    public enum InstanceHealthState: String, CustomStringConvertible, Codable {
        case initial = "initial"
        case healthy = "healthy"
        case unhealthy = "unhealthy"
        case unused = "unused"
        case draining = "draining"
        case unavailable = "unavailable"
        public var description: String { return self.rawValue }
    }

    public enum PortAccessType: String, CustomStringConvertible, Codable {
        case `public` = "Public"
        case `private` = "Private"
        public var description: String { return self.rawValue }
    }

    public enum LoadBalancerTlsCertificateStatus: String, CustomStringConvertible, Codable {
        case pendingValidation = "PENDING_VALIDATION"
        case issued = "ISSUED"
        case inactive = "INACTIVE"
        case expired = "EXPIRED"
        case validationTimedOut = "VALIDATION_TIMED_OUT"
        case revoked = "REVOKED"
        case failed = "FAILED"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public struct GetDomainResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domain", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about your get domain request.
        public let domain: Domain?

        public init(domain: Domain? = nil) {
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "domain"
        }
    }

    public struct CreateLoadBalancerTlsCertificateResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An object containing information about the API operations.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateDiskFromSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "availabilityZone", required: true, type: .string), 
            AWSShapeMember(label: "diskName", required: true, type: .string), 
            AWSShapeMember(label: "diskSnapshotName", required: true, type: .string), 
            AWSShapeMember(label: "sizeInGb", required: true, type: .integer)
        ]
        /// The Availability Zone where you want to create the disk (e.g., us-east-2a). Choose the same Availability Zone as the Lightsail instance where you want to create the disk. Use the GetRegions operation to list the Availability Zones where Lightsail is currently available.
        public let availabilityZone: String
        /// The unique Lightsail disk name (e.g., my-disk).
        public let diskName: String
        /// The name of the disk snapshot (e.g., my-snapshot) from which to create the new storage disk.
        public let diskSnapshotName: String
        /// The size of the disk in GB (e.g., 32).
        public let sizeInGb: Int32

        public init(availabilityZone: String, diskName: String, diskSnapshotName: String, sizeInGb: Int32) {
            self.availabilityZone = availabilityZone
            self.diskName = diskName
            self.diskSnapshotName = diskSnapshotName
            self.sizeInGb = sizeInGb
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "availabilityZone"
            case diskName = "diskName"
            case diskSnapshotName = "diskSnapshotName"
            case sizeInGb = "sizeInGb"
        }
    }

    public struct GetDiskSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "diskSnapshot", required: false, type: .structure)
        ]
        /// An object containing information about the disk snapshot.
        public let diskSnapshot: DiskSnapshot?

        public init(diskSnapshot: DiskSnapshot? = nil) {
            self.diskSnapshot = diskSnapshot
        }

        private enum CodingKeys: String, CodingKey {
            case diskSnapshot = "diskSnapshot"
        }
    }

    public struct GetInstanceSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceSnapshotName", required: true, type: .string)
        ]
        /// The name of the snapshot for which you are requesting information.
        public let instanceSnapshotName: String

        public init(instanceSnapshotName: String) {
            self.instanceSnapshotName = instanceSnapshotName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceSnapshotName = "instanceSnapshotName"
        }
    }

    public struct DeleteLoadBalancerResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An object describing the API operations.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct GetDisksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string)
        ]
        /// A token used for advancing to the next page of results from your GetDisks request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct MonthlyTransfer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "gbPerMonthAllocated", required: false, type: .integer)
        ]
        /// The amount allocated per month (in GB).
        public let gbPerMonthAllocated: Int32?

        public init(gbPerMonthAllocated: Int32? = nil) {
            self.gbPerMonthAllocated = gbPerMonthAllocated
        }

        private enum CodingKeys: String, CodingKey {
            case gbPerMonthAllocated = "gbPerMonthAllocated"
        }
    }

    public struct GetDiskResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "disk", required: false, type: .structure)
        ]
        /// An object containing information about the disk.
        public let disk: Disk?

        public init(disk: Disk? = nil) {
            self.disk = disk
        }

        private enum CodingKeys: String, CodingKey {
            case disk = "disk"
        }
    }

    public enum AccessDirection: String, CustomStringConvertible, Codable {
        case inbound = "inbound"
        case outbound = "outbound"
        public var description: String { return self.rawValue }
    }

    public struct OpenInstancePublicPortsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string), 
            AWSShapeMember(label: "portInfo", required: true, type: .structure)
        ]
        /// The name of the instance for which you want to open the public ports.
        public let instanceName: String
        /// An array of key-value pairs containing information about the port mappings.
        public let portInfo: PortInfo

        public init(instanceName: String, portInfo: PortInfo) {
            self.instanceName = instanceName
            self.portInfo = portInfo
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
            case portInfo = "portInfo"
        }
    }

    public struct DeleteKeyPairResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operation", required: false, type: .structure)
        ]
        /// An array of key-value pairs containing information about the results of your delete key pair request.
        public let operation: Operation?

        public init(operation: Operation? = nil) {
            self.operation = operation
        }

        private enum CodingKeys: String, CodingKey {
            case operation = "operation"
        }
    }

    public struct StartInstanceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the request operation.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct GetLoadBalancerMetricDataRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "period", required: true, type: .integer), 
            AWSShapeMember(label: "statistics", required: true, type: .list), 
            AWSShapeMember(label: "unit", required: true, type: .enum), 
            AWSShapeMember(label: "loadBalancerName", required: true, type: .string), 
            AWSShapeMember(label: "metricName", required: true, type: .enum), 
            AWSShapeMember(label: "startTime", required: true, type: .timestamp), 
            AWSShapeMember(label: "endTime", required: true, type: .timestamp)
        ]
        /// The time period duration for your health data request.
        public let period: Int32
        /// An array of statistics that you want to request metrics for. Valid values are listed below.     SampleCount  - The count (number) of data points used for the statistical calculation.     Average  - The value of Sum / SampleCount during the specified period. By comparing this statistic with the Minimum and Maximum, you can determine the full scope of a metric and how close the average use is to the Minimum and Maximum. This comparison helps you to know when to increase or decrease your resources as needed.     Sum  - All values submitted for the matching metric added together. This statistic can be useful for determining the total volume of a metric.     Minimum  - The lowest value observed during the specified period. You can use this value to determine low volumes of activity for your application.     Maximum  - The highest value observed during the specified period. You can use this value to determine high volumes of activity for your application.  
        public let statistics: [MetricStatistic]
        /// The unit for the time period request. Valid values are listed below.
        public let unit: MetricUnit
        /// The name of the load balancer.
        public let loadBalancerName: String
        /// The metric about which you want to return information. Valid values are listed below, along with the most useful statistics to include in your request.     ClientTLSNegotiationErrorCount  - The number of TLS connections initiated by the client that did not establish a session with the load balancer. Possible causes include a mismatch of ciphers or protocols.  Statistics: The most useful statistic is Sum.     HealthyHostCount  - The number of target instances that are considered healthy.  Statistics: The most useful statistic are Average, Minimum, and Maximum.     UnhealthyHostCount  - The number of target instances that are considered unhealthy.  Statistics: The most useful statistic are Average, Minimum, and Maximum.     HTTPCode_LB_4XX_Count  - The number of HTTP 4XX client error codes that originate from the load balancer. Client errors are generated when requests are malformed or incomplete. These requests have not been received by the target instance. This count does not include any response codes generated by the target instances.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.     HTTPCode_LB_5XX_Count  - The number of HTTP 5XX server error codes that originate from the load balancer. This count does not include any response codes generated by the target instances.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1. Note that Minimum, Maximum, and Average all return 1.     HTTPCode_Instance_2XX_Count  - The number of HTTP response codes generated by the target instances. This does not include any response codes generated by the load balancer.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.     HTTPCode_Instance_3XX_Count  - The number of HTTP response codes generated by the target instances. This does not include any response codes generated by the load balancer.   Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.     HTTPCode_Instance_4XX_Count  - The number of HTTP response codes generated by the target instances. This does not include any response codes generated by the load balancer.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.     HTTPCode_Instance_5XX_Count  - The number of HTTP response codes generated by the target instances. This does not include any response codes generated by the load balancer.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.     InstanceResponseTime  - The time elapsed, in seconds, after the request leaves the load balancer until a response from the target instance is received.  Statistics: The most useful statistic is Average.     RejectedConnectionCount  - The number of connections that were rejected because the load balancer had reached its maximum number of connections.  Statistics: The most useful statistic is Sum.     RequestCount  - The number of requests processed over IPv4. This count includes only the requests with a response generated by a target instance of the load balancer.  Statistics: The most useful statistic is Sum. Note that Minimum, Maximum, and Average all return 1.  
        public let metricName: LoadBalancerMetricName
        /// The start time of the period.
        public let startTime: TimeStamp
        /// The end time of the period.
        public let endTime: TimeStamp

        public init(period: Int32, statistics: [MetricStatistic], unit: MetricUnit, loadBalancerName: String, metricName: LoadBalancerMetricName, startTime: TimeStamp, endTime: TimeStamp) {
            self.period = period
            self.statistics = statistics
            self.unit = unit
            self.loadBalancerName = loadBalancerName
            self.metricName = metricName
            self.startTime = startTime
            self.endTime = endTime
        }

        private enum CodingKeys: String, CodingKey {
            case period = "period"
            case statistics = "statistics"
            case unit = "unit"
            case loadBalancerName = "loadBalancerName"
            case metricName = "metricName"
            case startTime = "startTime"
            case endTime = "endTime"
        }
    }

    public struct GetStaticIpsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string)
        ]
        /// A token used for advancing to the next page of results from your get static IPs request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public enum InstanceAccessProtocol: String, CustomStringConvertible, Codable {
        case ssh = "ssh"
        case rdp = "rdp"
        public var description: String { return self.rawValue }
    }

    public struct GetBlueprintsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "blueprints", required: false, type: .list)
        ]
        /// A token used for advancing to the next page of results from your get blueprints request.
        public let nextPageToken: String?
        /// An array of key-value pairs that contains information about the available blueprints.
        public let blueprints: [Blueprint]?

        public init(nextPageToken: String? = nil, blueprints: [Blueprint]? = nil) {
            self.nextPageToken = nextPageToken
            self.blueprints = blueprints
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case blueprints = "blueprints"
        }
    }

    public enum DiskSnapshotState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case completed = "completed"
        case error = "error"
        case unknown = "unknown"
        public var description: String { return self.rawValue }
    }

    public struct GetBlueprintsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string), 
            AWSShapeMember(label: "includeInactive", required: false, type: .boolean)
        ]
        /// A token used for advancing to the next page of results from your get blueprints request.
        public let pageToken: String?
        /// A Boolean value indicating whether to include inactive results in your request.
        public let includeInactive: Bool?

        public init(pageToken: String? = nil, includeInactive: Bool? = nil) {
            self.pageToken = pageToken
            self.includeInactive = includeInactive
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
            case includeInactive = "includeInactive"
        }
    }

    public struct GetOperationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "pageToken", required: false, type: .string)
        ]
        /// A token used for advancing to the next page of results from your get operations request.
        public let pageToken: String?

        public init(pageToken: String? = nil) {
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "pageToken"
        }
    }

    public struct GetInstanceStateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name of the instance to get state information about.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct CloseInstancePublicPortsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string), 
            AWSShapeMember(label: "portInfo", required: true, type: .structure)
        ]
        /// The name of the instance on which you're attempting to close the public ports.
        public let instanceName: String
        /// Information about the public port you are trying to close.
        public let portInfo: PortInfo

        public init(instanceName: String, portInfo: PortInfo) {
            self.instanceName = instanceName
            self.portInfo = portInfo
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
            case portInfo = "portInfo"
        }
    }

    public struct CreateInstancesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the results of your create instances request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct GetDiskSnapshotsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "diskSnapshots", required: false, type: .list), 
            AWSShapeMember(label: "nextPageToken", required: false, type: .string)
        ]
        /// An array of objects containing information about all block storage disk snapshots.
        public let diskSnapshots: [DiskSnapshot]?
        /// A token used for advancing to the next page of results from your GetDiskSnapshots request.
        public let nextPageToken: String?

        public init(diskSnapshots: [DiskSnapshot]? = nil, nextPageToken: String? = nil) {
            self.diskSnapshots = diskSnapshots
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case diskSnapshots = "diskSnapshots"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct AllocateStaticIpResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the static IP address you allocated.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct UnpeerVpcRequest: AWSShape {

    }

    public struct GetInstancePortStatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name of the instance.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct GetInstanceSnapshotsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "instanceSnapshots", required: false, type: .list)
        ]
        /// A token used for advancing to the next page of results from your get instance snapshots request.
        public let nextPageToken: String?
        /// An array of key-value pairs containing information about the results of your get instance snapshots request.
        public let instanceSnapshots: [InstanceSnapshot]?

        public init(nextPageToken: String? = nil, instanceSnapshots: [InstanceSnapshot]? = nil) {
            self.nextPageToken = nextPageToken
            self.instanceSnapshots = instanceSnapshots
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case instanceSnapshots = "instanceSnapshots"
        }
    }

    public enum InstancePlatform: String, CustomStringConvertible, Codable {
        case linuxUnix = "LINUX_UNIX"
        case windows = "WINDOWS"
        public var description: String { return self.rawValue }
    }

    public struct AttachInstancesToLoadBalancerResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An object representing the API operations.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct RebootInstanceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "instanceName", required: true, type: .string)
        ]
        /// The name of the instance to reboot.
        public let instanceName: String

        public init(instanceName: String) {
            self.instanceName = instanceName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceName = "instanceName"
        }
    }

    public struct GetOperationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operationId", required: true, type: .string)
        ]
        /// A GUID used to identify the operation.
        public let operationId: String

        public init(operationId: String) {
            self.operationId = operationId
        }

        private enum CodingKeys: String, CodingKey {
            case operationId = "operationId"
        }
    }

    public struct PortInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "protocol", required: false, type: .enum), 
            AWSShapeMember(label: "fromPort", required: false, type: .integer), 
            AWSShapeMember(label: "toPort", required: false, type: .integer)
        ]
        /// The protocol. 
        public let `protocol`: NetworkProtocol?
        /// The first port in the range.
        public let fromPort: Int32?
        /// The last port in the range.
        public let toPort: Int32?

        public init(protocol: NetworkProtocol? = nil, fromPort: Int32? = nil, toPort: Int32? = nil) {
            self.`protocol` = `protocol`
            self.fromPort = fromPort
            self.toPort = toPort
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "protocol"
            case fromPort = "fromPort"
            case toPort = "toPort"
        }
    }

    public struct GetKeyPairRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "keyPairName", required: true, type: .string)
        ]
        /// The name of the key pair for which you are requesting information.
        public let keyPairName: String

        public init(keyPairName: String) {
            self.keyPairName = keyPairName
        }

        private enum CodingKeys: String, CodingKey {
            case keyPairName = "keyPairName"
        }
    }

    public struct CreateLoadBalancerResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An object containing information about the API operations.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct CreateDomainEntryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainEntry", required: true, type: .structure), 
            AWSShapeMember(label: "domainName", required: true, type: .string)
        ]
        /// An array of key-value pairs containing information about the domain entry request.
        public let domainEntry: DomainEntry
        /// The domain name (e.g., example.com) for which you want to create the domain entry.
        public let domainName: String

        public init(domainEntry: DomainEntry, domainName: String) {
            self.domainEntry = domainEntry
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainEntry = "domainEntry"
            case domainName = "domainName"
        }
    }

    public struct DeleteDomainEntryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainEntry", required: true, type: .structure), 
            AWSShapeMember(label: "domainName", required: true, type: .string)
        ]
        /// An array of key-value pairs containing information about your domain entries.
        public let domainEntry: DomainEntry
        /// The name of the domain entry to delete.
        public let domainName: String

        public init(domainEntry: DomainEntry, domainName: String) {
            self.domainEntry = domainEntry
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainEntry = "domainEntry"
            case domainName = "domainName"
        }
    }

    public struct LoadBalancerTlsCertificate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "signatureAlgorithm", required: false, type: .string), 
            AWSShapeMember(label: "resourceType", required: false, type: .enum), 
            AWSShapeMember(label: "subject", required: false, type: .string), 
            AWSShapeMember(label: "notAfter", required: false, type: .timestamp), 
            AWSShapeMember(label: "createdAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "issuer", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "supportCode", required: false, type: .string), 
            AWSShapeMember(label: "domainValidationRecords", required: false, type: .list), 
            AWSShapeMember(label: "location", required: false, type: .structure), 
            AWSShapeMember(label: "keyAlgorithm", required: false, type: .string), 
            AWSShapeMember(label: "issuedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "failureReason", required: false, type: .enum), 
            AWSShapeMember(label: "notBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "isAttached", required: false, type: .boolean), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .enum), 
            AWSShapeMember(label: "subjectAlternativeNames", required: false, type: .list), 
            AWSShapeMember(label: "revokedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "revocationReason", required: false, type: .enum), 
            AWSShapeMember(label: "serial", required: false, type: .string), 
            AWSShapeMember(label: "domainName", required: false, type: .string), 
            AWSShapeMember(label: "loadBalancerName", required: false, type: .string), 
            AWSShapeMember(label: "renewalSummary", required: false, type: .structure)
        ]
        /// The algorithm that was used to sign the certificate.
        public let signatureAlgorithm: String?
        /// The resource type (e.g., LoadBalancerTlsCertificate).     Instance  - A Lightsail instance (a virtual private server)     StaticIp  - A static IP address     KeyPair  - The key pair used to connect to a Lightsail instance     InstanceSnapshot  - A Lightsail instance snapshot     Domain  - A DNS zone     PeeredVpc  - A peered VPC     LoadBalancer  - A Lightsail load balancer     LoadBalancerTlsCertificate  - An SSL/TLS certificate associated with a Lightsail load balancer     Disk  - A Lightsail block storage disk     DiskSnapshot  - A block storage disk snapshot  
        public let resourceType: ResourceType?
        /// The name of the entity that is associated with the public key contained in the certificate.
        public let subject: String?
        /// The timestamp when the SSL/TLS certificate expires.
        public let notAfter: TimeStamp?
        /// The time when you created your SSL/TLS certificate.
        public let createdAt: TimeStamp?
        /// The issuer of the certificate.
        public let issuer: String?
        /// The name of the SSL/TLS certificate (e.g., my-certificate).
        public let name: String?
        /// The support code. Include this code in your email to support when you have questions about your Lightsail load balancer or SSL/TLS certificate. This code enables our support team to look up your Lightsail information more easily.
        public let supportCode: String?
        /// An array of LoadBalancerTlsCertificateDomainValidationRecord objects describing the records.
        public let domainValidationRecords: [LoadBalancerTlsCertificateDomainValidationRecord]?
        /// The AWS Region and Availability Zone where you created your certificate.
        public let location: ResourceLocation?
        /// The algorithm that was used to generate the key pair (the public and private key).
        public let keyAlgorithm: String?
        /// The time when the SSL/TLS certificate was issued.
        public let issuedAt: TimeStamp?
        /// The reason for the SSL/TLS certificate validation failure.
        public let failureReason: LoadBalancerTlsCertificateFailureReason?
        /// The timestamp when the SSL/TLS certificate is first valid.
        public let notBefore: TimeStamp?
        /// When true, the SSL/TLS certificate is attached to the Lightsail load balancer.
        public let isAttached: Bool?
        /// The Amazon Resource Name (ARN) of the SSL/TLS certificate.
        public let arn: String?
        /// The status of the SSL/TLS certificate. Valid values are below.
        public let status: LoadBalancerTlsCertificateStatus?
        /// One or more domains or subdomains included in the certificate. This list contains the domain names that are bound to the public key that is contained in the certificate. The subject alternative names include the canonical domain name (CNAME) of the certificate and additional domain names that can be used to connect to the website, such as example.com, www.example.com, or m.example.com.
        public let subjectAlternativeNames: [String]?
        /// The timestamp when the SSL/TLS certificate was revoked.
        public let revokedAt: TimeStamp?
        /// The reason the certificate was revoked. Valid values are below.
        public let revocationReason: LoadBalancerTlsCertificateRevocationReason?
        /// The serial number of the certificate.
        public let serial: String?
        /// The domain name for your SSL/TLS certificate.
        public let domainName: String?
        /// The load balancer name where your SSL/TLS certificate is attached.
        public let loadBalancerName: String?
        /// An object containing information about the status of Lightsail's managed renewal for the certificate.
        public let renewalSummary: LoadBalancerTlsCertificateRenewalSummary?

        public init(signatureAlgorithm: String? = nil, resourceType: ResourceType? = nil, subject: String? = nil, notAfter: TimeStamp? = nil, createdAt: TimeStamp? = nil, issuer: String? = nil, name: String? = nil, supportCode: String? = nil, domainValidationRecords: [LoadBalancerTlsCertificateDomainValidationRecord]? = nil, location: ResourceLocation? = nil, keyAlgorithm: String? = nil, issuedAt: TimeStamp? = nil, failureReason: LoadBalancerTlsCertificateFailureReason? = nil, notBefore: TimeStamp? = nil, isAttached: Bool? = nil, arn: String? = nil, status: LoadBalancerTlsCertificateStatus? = nil, subjectAlternativeNames: [String]? = nil, revokedAt: TimeStamp? = nil, revocationReason: LoadBalancerTlsCertificateRevocationReason? = nil, serial: String? = nil, domainName: String? = nil, loadBalancerName: String? = nil, renewalSummary: LoadBalancerTlsCertificateRenewalSummary? = nil) {
            self.signatureAlgorithm = signatureAlgorithm
            self.resourceType = resourceType
            self.subject = subject
            self.notAfter = notAfter
            self.createdAt = createdAt
            self.issuer = issuer
            self.name = name
            self.supportCode = supportCode
            self.domainValidationRecords = domainValidationRecords
            self.location = location
            self.keyAlgorithm = keyAlgorithm
            self.issuedAt = issuedAt
            self.failureReason = failureReason
            self.notBefore = notBefore
            self.isAttached = isAttached
            self.arn = arn
            self.status = status
            self.subjectAlternativeNames = subjectAlternativeNames
            self.revokedAt = revokedAt
            self.revocationReason = revocationReason
            self.serial = serial
            self.domainName = domainName
            self.loadBalancerName = loadBalancerName
            self.renewalSummary = renewalSummary
        }

        private enum CodingKeys: String, CodingKey {
            case signatureAlgorithm = "signatureAlgorithm"
            case resourceType = "resourceType"
            case subject = "subject"
            case notAfter = "notAfter"
            case createdAt = "createdAt"
            case issuer = "issuer"
            case name = "name"
            case supportCode = "supportCode"
            case domainValidationRecords = "domainValidationRecords"
            case location = "location"
            case keyAlgorithm = "keyAlgorithm"
            case issuedAt = "issuedAt"
            case failureReason = "failureReason"
            case notBefore = "notBefore"
            case isAttached = "isAttached"
            case arn = "arn"
            case status = "status"
            case subjectAlternativeNames = "subjectAlternativeNames"
            case revokedAt = "revokedAt"
            case revocationReason = "revocationReason"
            case serial = "serial"
            case domainName = "domainName"
            case loadBalancerName = "loadBalancerName"
            case renewalSummary = "renewalSummary"
        }
    }

    public enum LoadBalancerProtocol: String, CustomStringConvertible, Codable {
        case httpHttps = "HTTP_HTTPS"
        case http = "HTTP"
        public var description: String { return self.rawValue }
    }

    public enum OperationStatus: String, CustomStringConvertible, Codable {
        case notstarted = "NotStarted"
        case started = "Started"
        case failed = "Failed"
        case completed = "Completed"
        case succeeded = "Succeeded"
        public var description: String { return self.rawValue }
    }

    public struct GetLoadBalancersResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "loadBalancers", required: false, type: .list)
        ]
        /// A token used for advancing to the next page of results from your GetLoadBalancers request.
        public let nextPageToken: String?
        /// An array of LoadBalancer objects describing your load balancers.
        public let loadBalancers: [LoadBalancer]?

        public init(nextPageToken: String? = nil, loadBalancers: [LoadBalancer]? = nil) {
            self.nextPageToken = nextPageToken
            self.loadBalancers = loadBalancers
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case loadBalancers = "loadBalancers"
        }
    }

    public struct CreateInstancesFromSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the results of your create instances from snapshot request.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct ReleaseStaticIpResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An array of key-value pairs containing information about the request operation.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct AttachLoadBalancerTlsCertificateResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "operations", required: false, type: .list)
        ]
        /// An object representing the API operations. These SSL/TLS certificates are only usable by Lightsail load balancers. You can't get the certificate and use it for another purpose.
        public let operations: [Operation]?

        public init(operations: [Operation]? = nil) {
            self.operations = operations
        }

        private enum CodingKeys: String, CodingKey {
            case operations = "operations"
        }
    }

    public struct LoadBalancerTlsCertificateDomainValidationOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainName", required: false, type: .string), 
            AWSShapeMember(label: "validationStatus", required: false, type: .enum)
        ]
        /// The fully qualified domain name in the certificate request.
        public let domainName: String?
        /// The status of the domain validation. Valid values are listed below.
        public let validationStatus: LoadBalancerTlsCertificateDomainStatus?

        public init(domainName: String? = nil, validationStatus: LoadBalancerTlsCertificateDomainStatus? = nil) {
            self.domainName = domainName
            self.validationStatus = validationStatus
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "domainName"
            case validationStatus = "validationStatus"
        }
    }

}