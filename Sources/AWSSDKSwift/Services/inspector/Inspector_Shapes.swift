// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Inspector {

    public struct DescribeRulesPackagesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rulesPackageArns", required: true, type: .list), 
            AWSShapeMember(label: "locale", required: false, type: .enum)
        ]
        /// The ARN that specifies the rules package that you want to describe.
        public let rulesPackageArns: [String]
        /// The locale that you want to translate a rules package description into.
        public let locale: Locale?

        public init(rulesPackageArns: [String], locale: Locale? = nil) {
            self.rulesPackageArns = rulesPackageArns
            self.locale = locale
        }

        private enum CodingKeys: String, CodingKey {
            case rulesPackageArns = "rulesPackageArns"
            case locale = "locale"
        }
    }

    public enum InspectorEvent: String, CustomStringConvertible, Codable {
        case assessmentRunStarted = "ASSESSMENT_RUN_STARTED"
        case assessmentRunCompleted = "ASSESSMENT_RUN_COMPLETED"
        case assessmentRunStateChanged = "ASSESSMENT_RUN_STATE_CHANGED"
        case findingReported = "FINDING_REPORTED"
        case other = "OTHER"
        public var description: String { return self.rawValue }
    }

    public struct RemoveAttributesFromFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failedItems", required: true, type: .map)
        ]
        /// Attributes details that cannot be described. An error code is provided for each failed item.
        public let failedItems: [String: FailedItemDetails]

        public init(failedItems: [String: FailedItemDetails]) {
            self.failedItems = failedItems
        }

        private enum CodingKeys: String, CodingKey {
            case failedItems = "failedItems"
        }
    }

    public enum AccessDeniedErrorCode: String, CustomStringConvertible, Codable {
        case accessDeniedToAssessmentTarget = "ACCESS_DENIED_TO_ASSESSMENT_TARGET"
        case accessDeniedToAssessmentTemplate = "ACCESS_DENIED_TO_ASSESSMENT_TEMPLATE"
        case accessDeniedToAssessmentRun = "ACCESS_DENIED_TO_ASSESSMENT_RUN"
        case accessDeniedToFinding = "ACCESS_DENIED_TO_FINDING"
        case accessDeniedToResourceGroup = "ACCESS_DENIED_TO_RESOURCE_GROUP"
        case accessDeniedToRulesPackage = "ACCESS_DENIED_TO_RULES_PACKAGE"
        case accessDeniedToSnsTopic = "ACCESS_DENIED_TO_SNS_TOPIC"
        case accessDeniedToIamRole = "ACCESS_DENIED_TO_IAM_ROLE"
        public var description: String { return self.rawValue }
    }

    public struct DescribeResourceGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceGroupArns", required: true, type: .list)
        ]
        /// The ARN that specifies the resource group that you want to describe.
        public let resourceGroupArns: [String]

        public init(resourceGroupArns: [String]) {
            self.resourceGroupArns = resourceGroupArns
        }

        private enum CodingKeys: String, CodingKey {
            case resourceGroupArns = "resourceGroupArns"
        }
    }

    public struct ListFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "filter", required: false, type: .structure), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "assessmentRunArns", required: false, type: .list)
        ]
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        public let maxResults: Int32?
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        public let filter: FindingFilter?
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListFindings action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// The ARNs of the assessment runs that generate the findings that you want to list.
        public let assessmentRunArns: [String]?

        public init(maxResults: Int32? = nil, filter: FindingFilter? = nil, nextToken: String? = nil, assessmentRunArns: [String]? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.assessmentRunArns = assessmentRunArns
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case filter = "filter"
            case nextToken = "nextToken"
            case assessmentRunArns = "assessmentRunArns"
        }
    }

    public struct DescribeCrossAccountAccessRoleResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "valid", required: true, type: .boolean), 
            AWSShapeMember(label: "roleArn", required: true, type: .string), 
            AWSShapeMember(label: "registeredAt", required: true, type: .timestamp)
        ]
        /// A Boolean value that specifies whether the IAM role has the necessary policies attached to enable Amazon Inspector to access your AWS account.
        public let valid: Bool
        /// The ARN that specifies the IAM role that Amazon Inspector uses to access your AWS account.
        public let roleArn: String
        /// The date when the cross-account access role was registered.
        public let registeredAt: TimeStamp

        public init(valid: Bool, roleArn: String, registeredAt: TimeStamp) {
            self.valid = valid
            self.roleArn = roleArn
            self.registeredAt = registeredAt
        }

        private enum CodingKeys: String, CodingKey {
            case valid = "valid"
            case roleArn = "roleArn"
            case registeredAt = "registeredAt"
        }
    }

    public struct PreviewAgentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "previewAgentsArn", required: true, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The ARN of the assessment target whose agents you want to preview.
        public let previewAgentsArn: String
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        public let maxResults: Int32?
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the PreviewAgents action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public let nextToken: String?

        public init(previewAgentsArn: String, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.previewAgentsArn = previewAgentsArn
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case previewAgentsArn = "previewAgentsArn"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeRulesPackagesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rulesPackages", required: true, type: .list), 
            AWSShapeMember(label: "failedItems", required: true, type: .map)
        ]
        /// Information about the rules package.
        public let rulesPackages: [RulesPackage]
        /// Rules package details that cannot be described. An error code is provided for each failed item.
        public let failedItems: [String: FailedItemDetails]

        public init(rulesPackages: [RulesPackage], failedItems: [String: FailedItemDetails]) {
            self.rulesPackages = rulesPackages
            self.failedItems = failedItems
        }

        private enum CodingKeys: String, CodingKey {
            case rulesPackages = "rulesPackages"
            case failedItems = "failedItems"
        }
    }

    public struct Subscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "eventSubscriptions", required: true, type: .list), 
            AWSShapeMember(label: "topicArn", required: true, type: .string)
        ]
        /// The ARN of the assessment template that is used during the event for which the SNS notification is sent.
        public let resourceArn: String
        /// The list of existing event subscriptions.
        public let eventSubscriptions: [EventSubscription]
        /// The ARN of the Amazon Simple Notification Service (SNS) topic to which the SNS notifications are sent.
        public let topicArn: String

        public init(resourceArn: String, eventSubscriptions: [EventSubscription], topicArn: String) {
            self.resourceArn = resourceArn
            self.eventSubscriptions = eventSubscriptions
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case eventSubscriptions = "eventSubscriptions"
            case topicArn = "topicArn"
        }
    }

    public struct AssessmentTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceGroupArn", required: true, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "updatedAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "createdAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "arn", required: true, type: .string)
        ]
        /// The ARN that specifies the resource group that is associated with the assessment target.
        public let resourceGroupArn: String
        /// The name of the Amazon Inspector assessment target.
        public let name: String
        /// The time at which UpdateAssessmentTarget is called.
        public let updatedAt: TimeStamp
        /// The time at which the assessment target is created.
        public let createdAt: TimeStamp
        /// The ARN that specifies the Amazon Inspector assessment target.
        public let arn: String

        public init(resourceGroupArn: String, name: String, updatedAt: TimeStamp, createdAt: TimeStamp, arn: String) {
            self.resourceGroupArn = resourceGroupArn
            self.name = name
            self.updatedAt = updatedAt
            self.createdAt = createdAt
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceGroupArn = "resourceGroupArn"
            case name = "name"
            case updatedAt = "updatedAt"
            case createdAt = "createdAt"
            case arn = "arn"
        }
    }

    public struct DescribeAssessmentTemplatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTemplateArns", required: true, type: .list)
        ]
        public let assessmentTemplateArns: [String]

        public init(assessmentTemplateArns: [String]) {
            self.assessmentTemplateArns = assessmentTemplateArns
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTemplateArns = "assessmentTemplateArns"
        }
    }

    public struct AddAttributesToFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributes", required: true, type: .list), 
            AWSShapeMember(label: "findingArns", required: true, type: .list)
        ]
        /// The array of attributes that you want to assign to specified findings.
        public let attributes: [Attribute]
        /// The ARNs that specify the findings that you want to assign attributes to.
        public let findingArns: [String]

        public init(attributes: [Attribute], findingArns: [String]) {
            self.attributes = attributes
            self.findingArns = findingArns
        }

        private enum CodingKeys: String, CodingKey {
            case attributes = "attributes"
            case findingArns = "findingArns"
        }
    }

    public struct PreviewAgentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "agentPreviews", required: true, type: .list)
        ]
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public let nextToken: String?
        /// The resulting list of agents.
        public let agentPreviews: [AgentPreview]

        public init(nextToken: String? = nil, agentPreviews: [AgentPreview]) {
            self.nextToken = nextToken
            self.agentPreviews = agentPreviews
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case agentPreviews = "agentPreviews"
        }
    }

    public struct DescribeAssessmentRunsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failedItems", required: true, type: .map), 
            AWSShapeMember(label: "assessmentRuns", required: true, type: .list)
        ]
        /// Assessment run details that cannot be described. An error code is provided for each failed item.
        public let failedItems: [String: FailedItemDetails]
        /// Information about the assessment run.
        public let assessmentRuns: [AssessmentRun]

        public init(failedItems: [String: FailedItemDetails], assessmentRuns: [AssessmentRun]) {
            self.failedItems = failedItems
            self.assessmentRuns = assessmentRuns
        }

        private enum CodingKeys: String, CodingKey {
            case failedItems = "failedItems"
            case assessmentRuns = "assessmentRuns"
        }
    }

    public struct EventSubscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "event", required: true, type: .enum), 
            AWSShapeMember(label: "subscribedAt", required: true, type: .timestamp)
        ]
        /// The event for which Amazon Simple Notification Service (SNS) notifications are sent.
        public let event: InspectorEvent
        /// The time at which SubscribeToEvent is called.
        public let subscribedAt: TimeStamp

        public init(event: InspectorEvent, subscribedAt: TimeStamp) {
            self.event = event
            self.subscribedAt = subscribedAt
        }

        private enum CodingKeys: String, CodingKey {
            case event = "event"
            case subscribedAt = "subscribedAt"
        }
    }

    public struct CreateResourceGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceGroupArn", required: true, type: .string)
        ]
        /// The ARN that specifies the resource group that is created.
        public let resourceGroupArn: String

        public init(resourceGroupArn: String) {
            self.resourceGroupArn = resourceGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceGroupArn = "resourceGroupArn"
        }
    }

    public struct ResourceGroupTag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]
        /// A tag key.
        public let key: String
        /// The value assigned to a tag key.
        public let value: String?

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct RemoveAttributesFromFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "attributeKeys", required: true, type: .list), 
            AWSShapeMember(label: "findingArns", required: true, type: .list)
        ]
        /// The array of attribute keys that you want to remove from specified findings.
        public let attributeKeys: [String]
        /// The ARNs that specify the findings that you want to remove attributes from.
        public let findingArns: [String]

        public init(attributeKeys: [String], findingArns: [String]) {
            self.attributeKeys = attributeKeys
            self.findingArns = findingArns
        }

        private enum CodingKeys: String, CodingKey {
            case attributeKeys = "attributeKeys"
            case findingArns = "findingArns"
        }
    }

    public struct DescribeAssessmentRunsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentRunArns", required: true, type: .list)
        ]
        /// The ARN that specifies the assessment run that you want to describe.
        public let assessmentRunArns: [String]

        public init(assessmentRunArns: [String]) {
            self.assessmentRunArns = assessmentRunArns
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentRunArns = "assessmentRunArns"
        }
    }

    public struct ListAssessmentTemplatesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTemplateArns", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of ARNs that specifies the assessment templates returned by the action.
        public let assessmentTemplateArns: [String]
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public let nextToken: String?

        public init(assessmentTemplateArns: [String], nextToken: String? = nil) {
            self.assessmentTemplateArns = assessmentTemplateArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTemplateArns = "assessmentTemplateArns"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeAssessmentTemplatesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failedItems", required: true, type: .map), 
            AWSShapeMember(label: "assessmentTemplates", required: true, type: .list)
        ]
        /// Assessment template details that cannot be described. An error code is provided for each failed item.
        public let failedItems: [String: FailedItemDetails]
        /// Information about the assessment templates.
        public let assessmentTemplates: [AssessmentTemplate]

        public init(failedItems: [String: FailedItemDetails], assessmentTemplates: [AssessmentTemplate]) {
            self.failedItems = failedItems
            self.assessmentTemplates = assessmentTemplates
        }

        private enum CodingKeys: String, CodingKey {
            case failedItems = "failedItems"
            case assessmentTemplates = "assessmentTemplates"
        }
    }

    public enum AssetType: String, CustomStringConvertible, Codable {
        case ec2Instance = "ec2-instance"
        public var description: String { return self.rawValue }
    }

    public struct StartAssessmentRunResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentRunArn", required: true, type: .string)
        ]
        /// The ARN of the assessment run that has been started.
        public let assessmentRunArn: String

        public init(assessmentRunArn: String) {
            self.assessmentRunArn = assessmentRunArn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentRunArn = "assessmentRunArn"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]
        /// A tag key.
        public let key: String
        /// A value assigned to a tag key.
        public let value: String?

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public enum LimitExceededErrorCode: String, CustomStringConvertible, Codable {
        case assessmentTargetLimitExceeded = "ASSESSMENT_TARGET_LIMIT_EXCEEDED"
        case assessmentTemplateLimitExceeded = "ASSESSMENT_TEMPLATE_LIMIT_EXCEEDED"
        case assessmentRunLimitExceeded = "ASSESSMENT_RUN_LIMIT_EXCEEDED"
        case resourceGroupLimitExceeded = "RESOURCE_GROUP_LIMIT_EXCEEDED"
        case eventSubscriptionLimitExceeded = "EVENT_SUBSCRIPTION_LIMIT_EXCEEDED"
        public var description: String { return self.rawValue }
    }

    public struct ListAssessmentTargetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "assessmentTargetArns", required: true, type: .list)
        ]
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public let nextToken: String?
        /// A list of ARNs that specifies the assessment targets that are returned by the action.
        public let assessmentTargetArns: [String]

        public init(nextToken: String? = nil, assessmentTargetArns: [String]) {
            self.nextToken = nextToken
            self.assessmentTargetArns = assessmentTargetArns
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case assessmentTargetArns = "assessmentTargetArns"
        }
    }

    public struct ResourceGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: true, type: .list), 
            AWSShapeMember(label: "createdAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "arn", required: true, type: .string)
        ]
        /// The tags (key and value pairs) of the resource group. This data type property is used in the CreateResourceGroup action.
        public let tags: [ResourceGroupTag]
        /// The time at which resource group is created.
        public let createdAt: TimeStamp
        /// The ARN of the resource group.
        public let arn: String

        public init(tags: [ResourceGroupTag], createdAt: TimeStamp, arn: String) {
            self.tags = tags
            self.createdAt = createdAt
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case createdAt = "createdAt"
            case arn = "arn"
        }
    }

    public struct UnsubscribeFromEventRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "event", required: true, type: .enum), 
            AWSShapeMember(label: "topicArn", required: true, type: .string)
        ]
        /// The ARN of the assessment template that is used during the event for which you want to stop receiving SNS notifications.
        public let resourceArn: String
        /// The event for which you want to stop receiving SNS notifications.
        public let event: InspectorEvent
        /// The ARN of the SNS topic to which SNS notifications are sent.
        public let topicArn: String

        public init(resourceArn: String, event: InspectorEvent, topicArn: String) {
            self.resourceArn = resourceArn
            self.event = event
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case event = "event"
            case topicArn = "topicArn"
        }
    }

    public struct GetAssessmentReportRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "reportType", required: true, type: .enum), 
            AWSShapeMember(label: "reportFileFormat", required: true, type: .enum), 
            AWSShapeMember(label: "assessmentRunArn", required: true, type: .string)
        ]
        /// Specifies the type of the assessment report that you want to generate. There are two types of assessment reports: a finding report and a full report. For more information, see Assessment Reports. 
        public let reportType: ReportType
        /// Specifies the file format (html or pdf) of the assessment report that you want to generate.
        public let reportFileFormat: ReportFileFormat
        /// The ARN that specifies the assessment run for which you want to generate a report.
        public let assessmentRunArn: String

        public init(reportType: ReportType, reportFileFormat: ReportFileFormat, assessmentRunArn: String) {
            self.reportType = reportType
            self.reportFileFormat = reportFileFormat
            self.assessmentRunArn = assessmentRunArn
        }

        private enum CodingKeys: String, CodingKey {
            case reportType = "reportType"
            case reportFileFormat = "reportFileFormat"
            case assessmentRunArn = "assessmentRunArn"
        }
    }

    public struct Attribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]
        /// The attribute key.
        public let key: String
        /// The value assigned to the attribute key.
        public let value: String?

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct DeleteAssessmentTemplateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTemplateArn", required: true, type: .string)
        ]
        /// The ARN that specifies the assessment template that you want to delete.
        public let assessmentTemplateArn: String

        public init(assessmentTemplateArn: String) {
            self.assessmentTemplateArn = assessmentTemplateArn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTemplateArn = "assessmentTemplateArn"
        }
    }

    public struct DescribeAssessmentTargetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTargetArns", required: true, type: .list)
        ]
        /// The ARNs that specifies the assessment targets that you want to describe.
        public let assessmentTargetArns: [String]

        public init(assessmentTargetArns: [String]) {
            self.assessmentTargetArns = assessmentTargetArns
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTargetArns = "assessmentTargetArns"
        }
    }

    public struct DeleteAssessmentRunRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentRunArn", required: true, type: .string)
        ]
        /// The ARN that specifies the assessment run that you want to delete.
        public let assessmentRunArn: String

        public init(assessmentRunArn: String) {
            self.assessmentRunArn = assessmentRunArn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentRunArn = "assessmentRunArn"
        }
    }

    public struct FindingFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ruleNames", required: false, type: .list), 
            AWSShapeMember(label: "severities", required: false, type: .list), 
            AWSShapeMember(label: "attributes", required: false, type: .list), 
            AWSShapeMember(label: "userAttributes", required: false, type: .list), 
            AWSShapeMember(label: "agentIds", required: false, type: .list), 
            AWSShapeMember(label: "rulesPackageArns", required: false, type: .list), 
            AWSShapeMember(label: "creationTimeRange", required: false, type: .structure), 
            AWSShapeMember(label: "autoScalingGroups", required: false, type: .list)
        ]
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the ruleName property of the Finding data type.
        public let ruleNames: [String]?
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the severity property of the Finding data type.
        public let severities: [Severity]?
        /// For a record to match a filter, the list of values that are specified for this data type property must be contained in the list of values of the attributes property of the Finding data type.
        public let attributes: [Attribute]?
        /// For a record to match a filter, the value that is specified for this data type property must be contained in the list of values of the userAttributes property of the Finding data type.
        public let userAttributes: [Attribute]?
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the agentId property of the Finding data type.
        public let agentIds: [String]?
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the rulesPackageArn property of the Finding data type.
        public let rulesPackageArns: [String]?
        /// The time range during which the finding is generated.
        public let creationTimeRange: TimestampRange?
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the autoScalingGroup property of the Finding data type.
        public let autoScalingGroups: [String]?

        public init(ruleNames: [String]? = nil, severities: [Severity]? = nil, attributes: [Attribute]? = nil, userAttributes: [Attribute]? = nil, agentIds: [String]? = nil, rulesPackageArns: [String]? = nil, creationTimeRange: TimestampRange? = nil, autoScalingGroups: [String]? = nil) {
            self.ruleNames = ruleNames
            self.severities = severities
            self.attributes = attributes
            self.userAttributes = userAttributes
            self.agentIds = agentIds
            self.rulesPackageArns = rulesPackageArns
            self.creationTimeRange = creationTimeRange
            self.autoScalingGroups = autoScalingGroups
        }

        private enum CodingKeys: String, CodingKey {
            case ruleNames = "ruleNames"
            case severities = "severities"
            case attributes = "attributes"
            case userAttributes = "userAttributes"
            case agentIds = "agentIds"
            case rulesPackageArns = "rulesPackageArns"
            case creationTimeRange = "creationTimeRange"
            case autoScalingGroups = "autoScalingGroups"
        }
    }

    public enum InvalidInputErrorCode: String, CustomStringConvertible, Codable {
        case invalidAssessmentTargetArn = "INVALID_ASSESSMENT_TARGET_ARN"
        case invalidAssessmentTemplateArn = "INVALID_ASSESSMENT_TEMPLATE_ARN"
        case invalidAssessmentRunArn = "INVALID_ASSESSMENT_RUN_ARN"
        case invalidFindingArn = "INVALID_FINDING_ARN"
        case invalidResourceGroupArn = "INVALID_RESOURCE_GROUP_ARN"
        case invalidRulesPackageArn = "INVALID_RULES_PACKAGE_ARN"
        case invalidResourceArn = "INVALID_RESOURCE_ARN"
        case invalidSnsTopicArn = "INVALID_SNS_TOPIC_ARN"
        case invalidIamRoleArn = "INVALID_IAM_ROLE_ARN"
        case invalidAssessmentTargetName = "INVALID_ASSESSMENT_TARGET_NAME"
        case invalidAssessmentTargetNamePattern = "INVALID_ASSESSMENT_TARGET_NAME_PATTERN"
        case invalidAssessmentTemplateName = "INVALID_ASSESSMENT_TEMPLATE_NAME"
        case invalidAssessmentTemplateNamePattern = "INVALID_ASSESSMENT_TEMPLATE_NAME_PATTERN"
        case invalidAssessmentTemplateDuration = "INVALID_ASSESSMENT_TEMPLATE_DURATION"
        case invalidAssessmentTemplateDurationRange = "INVALID_ASSESSMENT_TEMPLATE_DURATION_RANGE"
        case invalidAssessmentRunDurationRange = "INVALID_ASSESSMENT_RUN_DURATION_RANGE"
        case invalidAssessmentRunStartTimeRange = "INVALID_ASSESSMENT_RUN_START_TIME_RANGE"
        case invalidAssessmentRunCompletionTimeRange = "INVALID_ASSESSMENT_RUN_COMPLETION_TIME_RANGE"
        case invalidAssessmentRunStateChangeTimeRange = "INVALID_ASSESSMENT_RUN_STATE_CHANGE_TIME_RANGE"
        case invalidAssessmentRunState = "INVALID_ASSESSMENT_RUN_STATE"
        case invalidTag = "INVALID_TAG"
        case invalidTagKey = "INVALID_TAG_KEY"
        case invalidTagValue = "INVALID_TAG_VALUE"
        case invalidResourceGroupTagKey = "INVALID_RESOURCE_GROUP_TAG_KEY"
        case invalidResourceGroupTagValue = "INVALID_RESOURCE_GROUP_TAG_VALUE"
        case invalidAttribute = "INVALID_ATTRIBUTE"
        case invalidUserAttribute = "INVALID_USER_ATTRIBUTE"
        case invalidUserAttributeKey = "INVALID_USER_ATTRIBUTE_KEY"
        case invalidUserAttributeValue = "INVALID_USER_ATTRIBUTE_VALUE"
        case invalidPaginationToken = "INVALID_PAGINATION_TOKEN"
        case invalidMaxResults = "INVALID_MAX_RESULTS"
        case invalidAgentId = "INVALID_AGENT_ID"
        case invalidAutoScalingGroup = "INVALID_AUTO_SCALING_GROUP"
        case invalidRuleName = "INVALID_RULE_NAME"
        case invalidSeverity = "INVALID_SEVERITY"
        case invalidLocale = "INVALID_LOCALE"
        case invalidEvent = "INVALID_EVENT"
        case assessmentTargetNameAlreadyTaken = "ASSESSMENT_TARGET_NAME_ALREADY_TAKEN"
        case assessmentTemplateNameAlreadyTaken = "ASSESSMENT_TEMPLATE_NAME_ALREADY_TAKEN"
        case invalidNumberOfAssessmentTargetArns = "INVALID_NUMBER_OF_ASSESSMENT_TARGET_ARNS"
        case invalidNumberOfAssessmentTemplateArns = "INVALID_NUMBER_OF_ASSESSMENT_TEMPLATE_ARNS"
        case invalidNumberOfAssessmentRunArns = "INVALID_NUMBER_OF_ASSESSMENT_RUN_ARNS"
        case invalidNumberOfFindingArns = "INVALID_NUMBER_OF_FINDING_ARNS"
        case invalidNumberOfResourceGroupArns = "INVALID_NUMBER_OF_RESOURCE_GROUP_ARNS"
        case invalidNumberOfRulesPackageArns = "INVALID_NUMBER_OF_RULES_PACKAGE_ARNS"
        case invalidNumberOfAssessmentRunStates = "INVALID_NUMBER_OF_ASSESSMENT_RUN_STATES"
        case invalidNumberOfTags = "INVALID_NUMBER_OF_TAGS"
        case invalidNumberOfResourceGroupTags = "INVALID_NUMBER_OF_RESOURCE_GROUP_TAGS"
        case invalidNumberOfAttributes = "INVALID_NUMBER_OF_ATTRIBUTES"
        case invalidNumberOfUserAttributes = "INVALID_NUMBER_OF_USER_ATTRIBUTES"
        case invalidNumberOfAgentIds = "INVALID_NUMBER_OF_AGENT_IDS"
        case invalidNumberOfAutoScalingGroups = "INVALID_NUMBER_OF_AUTO_SCALING_GROUPS"
        case invalidNumberOfRuleNames = "INVALID_NUMBER_OF_RULE_NAMES"
        case invalidNumberOfSeverities = "INVALID_NUMBER_OF_SEVERITIES"
        public var description: String { return self.rawValue }
    }

    public enum NoSuchEntityErrorCode: String, CustomStringConvertible, Codable {
        case assessmentTargetDoesNotExist = "ASSESSMENT_TARGET_DOES_NOT_EXIST"
        case assessmentTemplateDoesNotExist = "ASSESSMENT_TEMPLATE_DOES_NOT_EXIST"
        case assessmentRunDoesNotExist = "ASSESSMENT_RUN_DOES_NOT_EXIST"
        case findingDoesNotExist = "FINDING_DOES_NOT_EXIST"
        case resourceGroupDoesNotExist = "RESOURCE_GROUP_DOES_NOT_EXIST"
        case rulesPackageDoesNotExist = "RULES_PACKAGE_DOES_NOT_EXIST"
        case snsTopicDoesNotExist = "SNS_TOPIC_DOES_NOT_EXIST"
        case iamRoleDoesNotExist = "IAM_ROLE_DOES_NOT_EXIST"
        public var description: String { return self.rawValue }
    }

    public enum Severity: String, CustomStringConvertible, Codable {
        case low = "Low"
        case medium = "Medium"
        case high = "High"
        case informational = "Informational"
        case undefined = "Undefined"
        public var description: String { return self.rawValue }
    }

    public struct RulesPackage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "version", required: true, type: .string), 
            AWSShapeMember(label: "provider", required: true, type: .string), 
            AWSShapeMember(label: "arn", required: true, type: .string)
        ]
        /// The description of the rules package.
        public let description: String?
        /// The name of the rules package.
        public let name: String
        /// The version ID of the rules package.
        public let version: String
        /// The provider of the rules package.
        public let provider: String
        /// The ARN of the rules package.
        public let arn: String

        public init(description: String? = nil, name: String, version: String, provider: String, arn: String) {
            self.description = description
            self.name = name
            self.version = version
            self.provider = provider
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case name = "name"
            case version = "version"
            case provider = "provider"
            case arn = "arn"
        }
    }

    public struct AssessmentRunStateChange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "state", required: true, type: .enum), 
            AWSShapeMember(label: "stateChangedAt", required: true, type: .timestamp)
        ]
        /// The assessment run state.
        public let state: AssessmentRunState
        /// The last time the assessment run state changed.
        public let stateChangedAt: TimeStamp

        public init(state: AssessmentRunState, stateChangedAt: TimeStamp) {
            self.state = state
            self.stateChangedAt = stateChangedAt
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case stateChangedAt = "stateChangedAt"
        }
    }

    public struct ListFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "findingArns", required: true, type: .list)
        ]
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public let nextToken: String?
        /// A list of ARNs that specifies the findings returned by the action.
        public let findingArns: [String]

        public init(nextToken: String? = nil, findingArns: [String]) {
            self.nextToken = nextToken
            self.findingArns = findingArns
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case findingArns = "findingArns"
        }
    }

    public struct ListAssessmentRunsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "filter", required: false, type: .structure), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "assessmentTemplateArns", required: false, type: .list)
        ]
        /// You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 10. The maximum value is 500.
        public let maxResults: Int32?
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        public let filter: AssessmentRunFilter?
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListAssessmentRuns action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// The ARNs that specify the assessment templates whose assessment runs you want to list.
        public let assessmentTemplateArns: [String]?

        public init(maxResults: Int32? = nil, filter: AssessmentRunFilter? = nil, nextToken: String? = nil, assessmentTemplateArns: [String]? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.assessmentTemplateArns = assessmentTemplateArns
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case filter = "filter"
            case nextToken = "nextToken"
            case assessmentTemplateArns = "assessmentTemplateArns"
        }
    }

    public struct AgentPreview: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "autoScalingGroup", required: false, type: .string), 
            AWSShapeMember(label: "agentId", required: true, type: .string)
        ]
        /// The Auto Scaling group for the EC2 instance where the agent is installed.
        public let autoScalingGroup: String?
        /// The ID of the EC2 instance where the agent is installed.
        public let agentId: String

        public init(autoScalingGroup: String? = nil, agentId: String) {
            self.autoScalingGroup = autoScalingGroup
            self.agentId = agentId
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroup = "autoScalingGroup"
            case agentId = "agentId"
        }
    }

    public struct ListRulesPackagesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListRulesPackages action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct AssessmentRunFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "namePattern", required: false, type: .string), 
            AWSShapeMember(label: "states", required: false, type: .list), 
            AWSShapeMember(label: "startTimeRange", required: false, type: .structure), 
            AWSShapeMember(label: "durationRange", required: false, type: .structure), 
            AWSShapeMember(label: "rulesPackageArns", required: false, type: .list), 
            AWSShapeMember(label: "completionTimeRange", required: false, type: .structure), 
            AWSShapeMember(label: "stateChangeTimeRange", required: false, type: .structure)
        ]
        /// For a record to match a filter, an explicit value or a string containing a wildcard that is specified for this data type property must match the value of the assessmentRunName property of the AssessmentRun data type.
        public let namePattern: String?
        /// For a record to match a filter, one of the values specified for this data type property must be the exact match of the value of the assessmentRunState property of the AssessmentRun data type.
        public let states: [AssessmentRunState]?
        /// For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the startTime property of the AssessmentRun data type.
        public let startTimeRange: TimestampRange?
        /// For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the durationInSeconds property of the AssessmentRun data type.
        public let durationRange: DurationRange?
        /// For a record to match a filter, the value that is specified for this data type property must be contained in the list of values of the rulesPackages property of the AssessmentRun data type.
        public let rulesPackageArns: [String]?
        /// For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the completedAt property of the AssessmentRun data type.
        public let completionTimeRange: TimestampRange?
        /// For a record to match a filter, the value that is specified for this data type property must match the stateChangedAt property of the AssessmentRun data type.
        public let stateChangeTimeRange: TimestampRange?

        public init(namePattern: String? = nil, states: [AssessmentRunState]? = nil, startTimeRange: TimestampRange? = nil, durationRange: DurationRange? = nil, rulesPackageArns: [String]? = nil, completionTimeRange: TimestampRange? = nil, stateChangeTimeRange: TimestampRange? = nil) {
            self.namePattern = namePattern
            self.states = states
            self.startTimeRange = startTimeRange
            self.durationRange = durationRange
            self.rulesPackageArns = rulesPackageArns
            self.completionTimeRange = completionTimeRange
            self.stateChangeTimeRange = stateChangeTimeRange
        }

        private enum CodingKeys: String, CodingKey {
            case namePattern = "namePattern"
            case states = "states"
            case startTimeRange = "startTimeRange"
            case durationRange = "durationRange"
            case rulesPackageArns = "rulesPackageArns"
            case completionTimeRange = "completionTimeRange"
            case stateChangeTimeRange = "stateChangeTimeRange"
        }
    }

    public struct GetTelemetryMetadataRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentRunArn", required: true, type: .string)
        ]
        /// The ARN that specifies the assessment run that has the telemetry data that you want to obtain.
        public let assessmentRunArn: String

        public init(assessmentRunArn: String) {
            self.assessmentRunArn = assessmentRunArn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentRunArn = "assessmentRunArn"
        }
    }

    public struct AssessmentTargetFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTargetNamePattern", required: false, type: .string)
        ]
        /// For a record to match a filter, an explicit value or a string that contains a wildcard that is specified for this data type property must match the value of the assessmentTargetName property of the AssessmentTarget data type.
        public let assessmentTargetNamePattern: String?

        public init(assessmentTargetNamePattern: String? = nil) {
            self.assessmentTargetNamePattern = assessmentTargetNamePattern
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTargetNamePattern = "assessmentTargetNamePattern"
        }
    }

    public struct AssessmentRun: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "state", required: true, type: .enum), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "createdAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "startedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "rulesPackageArns", required: true, type: .list), 
            AWSShapeMember(label: "notifications", required: true, type: .list), 
            AWSShapeMember(label: "dataCollected", required: true, type: .boolean), 
            AWSShapeMember(label: "stateChangedAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "findingCounts", required: true, type: .map), 
            AWSShapeMember(label: "userAttributesForFindings", required: true, type: .list), 
            AWSShapeMember(label: "arn", required: true, type: .string), 
            AWSShapeMember(label: "stateChanges", required: true, type: .list), 
            AWSShapeMember(label: "completedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "durationInSeconds", required: true, type: .integer), 
            AWSShapeMember(label: "assessmentTemplateArn", required: true, type: .string)
        ]
        /// The state of the assessment run.
        public let state: AssessmentRunState
        /// The auto-generated name for the assessment run.
        public let name: String
        /// The time when StartAssessmentRun was called.
        public let createdAt: TimeStamp
        /// The time when StartAssessmentRun was called.
        public let startedAt: TimeStamp?
        /// The rules packages selected for the assessment run.
        public let rulesPackageArns: [String]
        /// A list of notifications for the event subscriptions. A notification about a particular generated finding is added to this list only once.
        public let notifications: [AssessmentRunNotification]
        /// A Boolean value (true or false) that specifies whether the process of collecting data from the agents is completed.
        public let dataCollected: Bool
        /// The last time when the assessment run's state changed.
        public let stateChangedAt: TimeStamp
        /// Provides a total count of generated findings per severity.
        public let findingCounts: [Severity: Int32]
        /// The user-defined attributes that are assigned to every generated finding.
        public let userAttributesForFindings: [Attribute]
        /// The ARN of the assessment run.
        public let arn: String
        /// A list of the assessment run state changes.
        public let stateChanges: [AssessmentRunStateChange]
        /// The assessment run completion time that corresponds to the rules packages evaluation completion time or failure.
        public let completedAt: TimeStamp?
        /// The duration of the assessment run.
        public let durationInSeconds: Int32
        /// The ARN of the assessment template that is associated with the assessment run.
        public let assessmentTemplateArn: String

        public init(state: AssessmentRunState, name: String, createdAt: TimeStamp, startedAt: TimeStamp? = nil, rulesPackageArns: [String], notifications: [AssessmentRunNotification], dataCollected: Bool, stateChangedAt: TimeStamp, findingCounts: [Severity: Int32], userAttributesForFindings: [Attribute], arn: String, stateChanges: [AssessmentRunStateChange], completedAt: TimeStamp? = nil, durationInSeconds: Int32, assessmentTemplateArn: String) {
            self.state = state
            self.name = name
            self.createdAt = createdAt
            self.startedAt = startedAt
            self.rulesPackageArns = rulesPackageArns
            self.notifications = notifications
            self.dataCollected = dataCollected
            self.stateChangedAt = stateChangedAt
            self.findingCounts = findingCounts
            self.userAttributesForFindings = userAttributesForFindings
            self.arn = arn
            self.stateChanges = stateChanges
            self.completedAt = completedAt
            self.durationInSeconds = durationInSeconds
            self.assessmentTemplateArn = assessmentTemplateArn
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case name = "name"
            case createdAt = "createdAt"
            case startedAt = "startedAt"
            case rulesPackageArns = "rulesPackageArns"
            case notifications = "notifications"
            case dataCollected = "dataCollected"
            case stateChangedAt = "stateChangedAt"
            case findingCounts = "findingCounts"
            case userAttributesForFindings = "userAttributesForFindings"
            case arn = "arn"
            case stateChanges = "stateChanges"
            case completedAt = "completedAt"
            case durationInSeconds = "durationInSeconds"
            case assessmentTemplateArn = "assessmentTemplateArn"
        }
    }

    public struct ListEventSubscriptionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "subscriptions", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// Details of the returned event subscriptions.
        public let subscriptions: [Subscription]
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public let nextToken: String?

        public init(subscriptions: [Subscription], nextToken: String? = nil) {
            self.subscriptions = subscriptions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptions = "subscriptions"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteAssessmentTargetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTargetArn", required: true, type: .string)
        ]
        /// The ARN that specifies the assessment target that you want to delete.
        public let assessmentTargetArn: String

        public init(assessmentTargetArn: String) {
            self.assessmentTargetArn = assessmentTargetArn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTargetArn = "assessmentTargetArn"
        }
    }

    public enum AgentHealth: String, CustomStringConvertible, Codable {
        case healthy = "HEALTHY"
        case unhealthy = "UNHEALTHY"
        public var description: String { return self.rawValue }
    }

    public struct CreateAssessmentTemplateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTemplateArn", required: true, type: .string)
        ]
        /// The ARN that specifies the assessment template that is created.
        public let assessmentTemplateArn: String

        public init(assessmentTemplateArn: String) {
            self.assessmentTemplateArn = assessmentTemplateArn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTemplateArn = "assessmentTemplateArn"
        }
    }

    public enum ReportType: String, CustomStringConvertible, Codable {
        case finding = "FINDING"
        case full = "FULL"
        public var description: String { return self.rawValue }
    }

    public enum AssessmentRunState: String, CustomStringConvertible, Codable {
        case created = "CREATED"
        case startDataCollectionPending = "START_DATA_COLLECTION_PENDING"
        case startDataCollectionInProgress = "START_DATA_COLLECTION_IN_PROGRESS"
        case collectingData = "COLLECTING_DATA"
        case stopDataCollectionPending = "STOP_DATA_COLLECTION_PENDING"
        case dataCollected = "DATA_COLLECTED"
        case startEvaluatingRulesPending = "START_EVALUATING_RULES_PENDING"
        case evaluatingRules = "EVALUATING_RULES"
        case failed = "FAILED"
        case error = "ERROR"
        case completed = "COMPLETED"
        case completedWithErrors = "COMPLETED_WITH_ERRORS"
        case canceled = "CANCELED"
        public var description: String { return self.rawValue }
    }

    public struct Finding: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assetType", required: false, type: .enum), 
            AWSShapeMember(label: "schemaVersion", required: false, type: .integer), 
            AWSShapeMember(label: "userAttributes", required: true, type: .list), 
            AWSShapeMember(label: "recommendation", required: false, type: .string), 
            AWSShapeMember(label: "createdAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "serviceAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "indicatorOfCompromise", required: false, type: .boolean), 
            AWSShapeMember(label: "severity", required: false, type: .enum), 
            AWSShapeMember(label: "assetAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "numericSeverity", required: false, type: .double), 
            AWSShapeMember(label: "service", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: true, type: .string), 
            AWSShapeMember(label: "attributes", required: true, type: .list), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "updatedAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "title", required: false, type: .string), 
            AWSShapeMember(label: "confidence", required: false, type: .integer)
        ]
        /// The type of the host from which the finding is generated.
        public let assetType: AssetType?
        /// The schema version of this data type.
        public let schemaVersion: Int32?
        /// The user-defined attributes that are assigned to the finding.
        public let userAttributes: [Attribute]
        /// The recommendation for the finding.
        public let recommendation: String?
        /// The time when the finding was generated.
        public let createdAt: TimeStamp
        /// The description of the finding.
        public let description: String?
        /// This data type is used in the Finding data type.
        public let serviceAttributes: InspectorServiceAttributes?
        /// This data element is currently not used.
        public let indicatorOfCompromise: Bool?
        /// The finding severity. Values can be set to High, Medium, Low, and Informational.
        public let severity: Severity?
        /// A collection of attributes of the host from which the finding is generated.
        public let assetAttributes: AssetAttributes?
        /// The numeric value of the finding severity.
        public let numericSeverity: Double?
        /// The data element is set to "Inspector".
        public let service: String?
        /// The ARN that specifies the finding.
        public let arn: String
        /// The system-defined attributes for the finding.
        public let attributes: [Attribute]
        /// The ID of the finding.
        public let id: String?
        /// The time when AddAttributesToFindings is called.
        public let updatedAt: TimeStamp
        /// The name of the finding.
        public let title: String?
        /// This data element is currently not used.
        public let confidence: Int32?

        public init(assetType: AssetType? = nil, schemaVersion: Int32? = nil, userAttributes: [Attribute], recommendation: String? = nil, createdAt: TimeStamp, description: String? = nil, serviceAttributes: InspectorServiceAttributes? = nil, indicatorOfCompromise: Bool? = nil, severity: Severity? = nil, assetAttributes: AssetAttributes? = nil, numericSeverity: Double? = nil, service: String? = nil, arn: String, attributes: [Attribute], id: String? = nil, updatedAt: TimeStamp, title: String? = nil, confidence: Int32? = nil) {
            self.assetType = assetType
            self.schemaVersion = schemaVersion
            self.userAttributes = userAttributes
            self.recommendation = recommendation
            self.createdAt = createdAt
            self.description = description
            self.serviceAttributes = serviceAttributes
            self.indicatorOfCompromise = indicatorOfCompromise
            self.severity = severity
            self.assetAttributes = assetAttributes
            self.numericSeverity = numericSeverity
            self.service = service
            self.arn = arn
            self.attributes = attributes
            self.id = id
            self.updatedAt = updatedAt
            self.title = title
            self.confidence = confidence
        }

        private enum CodingKeys: String, CodingKey {
            case assetType = "assetType"
            case schemaVersion = "schemaVersion"
            case userAttributes = "userAttributes"
            case recommendation = "recommendation"
            case createdAt = "createdAt"
            case description = "description"
            case serviceAttributes = "serviceAttributes"
            case indicatorOfCompromise = "indicatorOfCompromise"
            case severity = "severity"
            case assetAttributes = "assetAttributes"
            case numericSeverity = "numericSeverity"
            case service = "service"
            case arn = "arn"
            case attributes = "attributes"
            case id = "id"
            case updatedAt = "updatedAt"
            case title = "title"
            case confidence = "confidence"
        }
    }

    public struct ListAssessmentRunAgentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "filter", required: false, type: .structure), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "assessmentRunArn", required: true, type: .string)
        ]
        /// You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 10. The maximum value is 500.
        public let maxResults: Int32?
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        public let filter: AgentFilter?
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListAssessmentRunAgents action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// The ARN that specifies the assessment run whose agents you want to list.
        public let assessmentRunArn: String

        public init(maxResults: Int32? = nil, filter: AgentFilter? = nil, nextToken: String? = nil, assessmentRunArn: String) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.assessmentRunArn = assessmentRunArn
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case filter = "filter"
            case nextToken = "nextToken"
            case assessmentRunArn = "assessmentRunArn"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string)
        ]
        /// The ARN that specifies the assessment template whose tags you want to list.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
        }
    }

    public struct ListEventSubscriptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// The ARN of the assessment template for which you want to list the existing event subscriptions.
        public let resourceArn: String?
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListEventSubscriptions action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        public let maxResults: Int32?

        public init(resourceArn: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.resourceArn = resourceArn
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct UpdateAssessmentTargetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceGroupArn", required: true, type: .string), 
            AWSShapeMember(label: "assessmentTargetArn", required: true, type: .string), 
            AWSShapeMember(label: "assessmentTargetName", required: true, type: .string)
        ]
        /// The ARN of the resource group that is used to specify the new resource group to associate with the assessment target.
        public let resourceGroupArn: String
        /// The ARN of the assessment target that you want to update.
        public let assessmentTargetArn: String
        /// The name of the assessment target that you want to update.
        public let assessmentTargetName: String

        public init(resourceGroupArn: String, assessmentTargetArn: String, assessmentTargetName: String) {
            self.resourceGroupArn = resourceGroupArn
            self.assessmentTargetArn = assessmentTargetArn
            self.assessmentTargetName = assessmentTargetName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceGroupArn = "resourceGroupArn"
            case assessmentTargetArn = "assessmentTargetArn"
            case assessmentTargetName = "assessmentTargetName"
        }
    }

    public struct AddAttributesToFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failedItems", required: true, type: .map)
        ]
        /// Attribute details that cannot be described. An error code is provided for each failed item.
        public let failedItems: [String: FailedItemDetails]

        public init(failedItems: [String: FailedItemDetails]) {
            self.failedItems = failedItems
        }

        private enum CodingKeys: String, CodingKey {
            case failedItems = "failedItems"
        }
    }

    public enum ReportStatus: String, CustomStringConvertible, Codable {
        case workInProgress = "WORK_IN_PROGRESS"
        case failed = "FAILED"
        case completed = "COMPLETED"
        public var description: String { return self.rawValue }
    }

    public enum InvalidCrossAccountRoleErrorCode: String, CustomStringConvertible, Codable {
        case roleDoesNotExistOrInvalidTrustRelationship = "ROLE_DOES_NOT_EXIST_OR_INVALID_TRUST_RELATIONSHIP"
        case roleDoesNotHaveCorrectPolicy = "ROLE_DOES_NOT_HAVE_CORRECT_POLICY"
        public var description: String { return self.rawValue }
    }

    public enum Locale: String, CustomStringConvertible, Codable {
        case enUs = "EN_US"
        public var description: String { return self.rawValue }
    }

    public struct CreateAssessmentTargetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTargetArn", required: true, type: .string)
        ]
        /// The ARN that specifies the assessment target that is created.
        public let assessmentTargetArn: String

        public init(assessmentTargetArn: String) {
            self.assessmentTargetArn = assessmentTargetArn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTargetArn = "assessmentTargetArn"
        }
    }

    public struct ListAssessmentRunsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "assessmentRunArns", required: true, type: .list)
        ]
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public let nextToken: String?
        /// A list of ARNs that specifies the assessment runs that are returned by the action.
        public let assessmentRunArns: [String]

        public init(nextToken: String? = nil, assessmentRunArns: [String]) {
            self.nextToken = nextToken
            self.assessmentRunArns = assessmentRunArns
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case assessmentRunArns = "assessmentRunArns"
        }
    }

    public struct AssessmentRunAgent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "telemetryMetadata", required: true, type: .list), 
            AWSShapeMember(label: "autoScalingGroup", required: false, type: .string), 
            AWSShapeMember(label: "agentHealth", required: true, type: .enum), 
            AWSShapeMember(label: "agentHealthDetails", required: false, type: .string), 
            AWSShapeMember(label: "assessmentRunArn", required: true, type: .string), 
            AWSShapeMember(label: "agentHealthCode", required: true, type: .enum), 
            AWSShapeMember(label: "agentId", required: true, type: .string)
        ]
        /// The Amazon Inspector application data metrics that are collected by the agent.
        public let telemetryMetadata: [TelemetryMetadata]
        /// The Auto Scaling group of the EC2 instance that is specified by the agent ID.
        public let autoScalingGroup: String?
        /// The current health state of the agent.
        public let agentHealth: AgentHealth
        /// The description for the agent health code.
        public let agentHealthDetails: String?
        /// The ARN of the assessment run that is associated with the agent.
        public let assessmentRunArn: String
        /// The detailed health state of the agent.
        public let agentHealthCode: AgentHealthCode
        /// The AWS account of the EC2 instance where the agent is installed.
        public let agentId: String

        public init(telemetryMetadata: [TelemetryMetadata], autoScalingGroup: String? = nil, agentHealth: AgentHealth, agentHealthDetails: String? = nil, assessmentRunArn: String, agentHealthCode: AgentHealthCode, agentId: String) {
            self.telemetryMetadata = telemetryMetadata
            self.autoScalingGroup = autoScalingGroup
            self.agentHealth = agentHealth
            self.agentHealthDetails = agentHealthDetails
            self.assessmentRunArn = assessmentRunArn
            self.agentHealthCode = agentHealthCode
            self.agentId = agentId
        }

        private enum CodingKeys: String, CodingKey {
            case telemetryMetadata = "telemetryMetadata"
            case autoScalingGroup = "autoScalingGroup"
            case agentHealth = "agentHealth"
            case agentHealthDetails = "agentHealthDetails"
            case assessmentRunArn = "assessmentRunArn"
            case agentHealthCode = "agentHealthCode"
            case agentId = "agentId"
        }
    }

    public struct DescribeResourceGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failedItems", required: true, type: .map), 
            AWSShapeMember(label: "resourceGroups", required: true, type: .list)
        ]
        /// Resource group details that cannot be described. An error code is provided for each failed item.
        public let failedItems: [String: FailedItemDetails]
        /// Information about a resource group.
        public let resourceGroups: [ResourceGroup]

        public init(failedItems: [String: FailedItemDetails], resourceGroups: [ResourceGroup]) {
            self.failedItems = failedItems
            self.resourceGroups = resourceGroups
        }

        private enum CodingKeys: String, CodingKey {
            case failedItems = "failedItems"
            case resourceGroups = "resourceGroups"
        }
    }

    public enum StopAction: String, CustomStringConvertible, Codable {
        case startEvaluation = "START_EVALUATION"
        case skipEvaluation = "SKIP_EVALUATION"
        public var description: String { return self.rawValue }
    }

    public struct AssessmentTemplateFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "namePattern", required: false, type: .string), 
            AWSShapeMember(label: "rulesPackageArns", required: false, type: .list), 
            AWSShapeMember(label: "durationRange", required: false, type: .structure)
        ]
        /// For a record to match a filter, an explicit value or a string that contains a wildcard that is specified for this data type property must match the value of the assessmentTemplateName property of the AssessmentTemplate data type.
        public let namePattern: String?
        /// For a record to match a filter, the values that are specified for this data type property must be contained in the list of values of the rulesPackageArns property of the AssessmentTemplate data type.
        public let rulesPackageArns: [String]?
        /// For a record to match a filter, the value specified for this data type property must inclusively match any value between the specified minimum and maximum values of the durationInSeconds property of the AssessmentTemplate data type.
        public let durationRange: DurationRange?

        public init(namePattern: String? = nil, rulesPackageArns: [String]? = nil, durationRange: DurationRange? = nil) {
            self.namePattern = namePattern
            self.rulesPackageArns = rulesPackageArns
            self.durationRange = durationRange
        }

        private enum CodingKeys: String, CodingKey {
            case namePattern = "namePattern"
            case rulesPackageArns = "rulesPackageArns"
            case durationRange = "durationRange"
        }
    }

    public struct AgentAlreadyRunningAssessment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentId", required: true, type: .string), 
            AWSShapeMember(label: "assessmentRunArn", required: true, type: .string)
        ]
        /// ID of the agent that is running on an EC2 instance that is already participating in another started assessment run.
        public let agentId: String
        /// The ARN of the assessment run that has already been started.
        public let assessmentRunArn: String

        public init(agentId: String, assessmentRunArn: String) {
            self.agentId = agentId
            self.assessmentRunArn = assessmentRunArn
        }

        private enum CodingKeys: String, CodingKey {
            case agentId = "agentId"
            case assessmentRunArn = "assessmentRunArn"
        }
    }

    public struct GetAssessmentReportResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: true, type: .enum), 
            AWSShapeMember(label: "url", required: false, type: .string)
        ]
        /// Specifies the status of the request to generate an assessment report. 
        public let status: ReportStatus
        /// Specifies the URL where you can find the generated assessment report. This parameter is only returned if the report is successfully generated.
        public let url: String?

        public init(status: ReportStatus, url: String? = nil) {
            self.status = status
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case url = "url"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: true, type: .list)
        ]
        /// A collection of key and value pairs.
        public let tags: [Tag]

        public init(tags: [Tag]) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public enum ReportFileFormat: String, CustomStringConvertible, Codable {
        case html = "HTML"
        case pdf = "PDF"
        public var description: String { return self.rawValue }
    }

    public struct DurationRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "minSeconds", required: false, type: .integer)
        ]
        /// The maximum value of the duration range. Must be less than or equal to 604800 seconds (1 week).
        public let maxSeconds: Int32?
        /// The minimum value of the duration range. Must be greater than zero.
        public let minSeconds: Int32?

        public init(maxSeconds: Int32? = nil, minSeconds: Int32? = nil) {
            self.maxSeconds = maxSeconds
            self.minSeconds = minSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case maxSeconds = "maxSeconds"
            case minSeconds = "minSeconds"
        }
    }

    public enum FailedItemErrorCode: String, CustomStringConvertible, Codable {
        case invalidArn = "INVALID_ARN"
        case duplicateArn = "DUPLICATE_ARN"
        case itemDoesNotExist = "ITEM_DOES_NOT_EXIST"
        case accessDenied = "ACCESS_DENIED"
        case limitExceeded = "LIMIT_EXCEEDED"
        case internalError = "INTERNAL_ERROR"
        public var description: String { return self.rawValue }
    }

    public enum AgentHealthCode: String, CustomStringConvertible, Codable {
        case idle = "IDLE"
        case running = "RUNNING"
        case shutdown = "SHUTDOWN"
        case unhealthy = "UNHEALTHY"
        case throttled = "THROTTLED"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public struct TimestampRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "beginDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "endDate", required: false, type: .timestamp)
        ]
        /// The minimum value of the timestamp range.
        public let beginDate: TimeStamp?
        /// The maximum value of the timestamp range.
        public let endDate: TimeStamp?

        public init(beginDate: TimeStamp? = nil, endDate: TimeStamp? = nil) {
            self.beginDate = beginDate
            self.endDate = endDate
        }

        private enum CodingKeys: String, CodingKey {
            case beginDate = "beginDate"
            case endDate = "endDate"
        }
    }

    public struct TelemetryMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "dataSize", required: false, type: .long), 
            AWSShapeMember(label: "count", required: true, type: .long), 
            AWSShapeMember(label: "messageType", required: true, type: .string)
        ]
        /// The data size of messages that the agent sends to the Amazon Inspector service.
        public let dataSize: Int64?
        /// The count of messages that the agent sends to the Amazon Inspector service.
        public let count: Int64
        /// A specific type of behavioral data that is collected by the agent.
        public let messageType: String

        public init(dataSize: Int64? = nil, count: Int64, messageType: String) {
            self.dataSize = dataSize
            self.count = count
            self.messageType = messageType
        }

        private enum CodingKeys: String, CodingKey {
            case dataSize = "dataSize"
            case count = "count"
            case messageType = "messageType"
        }
    }

    public struct AssessmentTemplate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTargetArn", required: true, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "createdAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "rulesPackageArns", required: true, type: .list), 
            AWSShapeMember(label: "durationInSeconds", required: true, type: .integer), 
            AWSShapeMember(label: "userAttributesForFindings", required: true, type: .list), 
            AWSShapeMember(label: "arn", required: true, type: .string)
        ]
        /// The ARN of the assessment target that corresponds to this assessment template.
        public let assessmentTargetArn: String
        /// The name of the assessment template.
        public let name: String
        /// The time at which the assessment template is created.
        public let createdAt: TimeStamp
        /// The rules packages that are specified for this assessment template.
        public let rulesPackageArns: [String]
        /// The duration in seconds specified for this assessment tempate. The default value is 3600 seconds (one hour). The maximum value is 86400 seconds (one day).
        public let durationInSeconds: Int32
        /// The user-defined attributes that are assigned to every generated finding from the assessment run that uses this assessment template.
        public let userAttributesForFindings: [Attribute]
        /// The ARN of the assessment template.
        public let arn: String

        public init(assessmentTargetArn: String, name: String, createdAt: TimeStamp, rulesPackageArns: [String], durationInSeconds: Int32, userAttributesForFindings: [Attribute], arn: String) {
            self.assessmentTargetArn = assessmentTargetArn
            self.name = name
            self.createdAt = createdAt
            self.rulesPackageArns = rulesPackageArns
            self.durationInSeconds = durationInSeconds
            self.userAttributesForFindings = userAttributesForFindings
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTargetArn = "assessmentTargetArn"
            case name = "name"
            case createdAt = "createdAt"
            case rulesPackageArns = "rulesPackageArns"
            case durationInSeconds = "durationInSeconds"
            case userAttributesForFindings = "userAttributesForFindings"
            case arn = "arn"
        }
    }

    public struct RegisterCrossAccountAccessRoleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// The ARN of the IAM role that Amazon Inspector uses to list your EC2 instances during the assessment run or when you call the PreviewAgents action. 
        public let roleArn: String

        public init(roleArn: String) {
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
        }
    }

    public struct AssetAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "autoScalingGroup", required: false, type: .string), 
            AWSShapeMember(label: "hostname", required: false, type: .string), 
            AWSShapeMember(label: "amiId", required: false, type: .string), 
            AWSShapeMember(label: "agentId", required: false, type: .string), 
            AWSShapeMember(label: "schemaVersion", required: true, type: .integer), 
            AWSShapeMember(label: "ipv4Addresses", required: false, type: .list)
        ]
        /// The Auto Scaling group of the EC2 instance where the finding is generated.
        public let autoScalingGroup: String?
        /// The hostname of the EC2 instance where the finding is generated.
        public let hostname: String?
        /// The ID of the Amazon Machine Image (AMI) that is installed on the EC2 instance where the finding is generated.
        public let amiId: String?
        /// The ID of the agent that is installed on the EC2 instance where the finding is generated.
        public let agentId: String?
        /// The schema version of this data type.
        public let schemaVersion: Int32
        /// The list of IP v4 addresses of the EC2 instance where the finding is generated.
        public let ipv4Addresses: [String]?

        public init(autoScalingGroup: String? = nil, hostname: String? = nil, amiId: String? = nil, agentId: String? = nil, schemaVersion: Int32, ipv4Addresses: [String]? = nil) {
            self.autoScalingGroup = autoScalingGroup
            self.hostname = hostname
            self.amiId = amiId
            self.agentId = agentId
            self.schemaVersion = schemaVersion
            self.ipv4Addresses = ipv4Addresses
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroup = "autoScalingGroup"
            case hostname = "hostname"
            case amiId = "amiId"
            case agentId = "agentId"
            case schemaVersion = "schemaVersion"
            case ipv4Addresses = "ipv4Addresses"
        }
    }

    public struct ListAssessmentRunAgentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "assessmentRunAgents", required: true, type: .list)
        ]
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public let nextToken: String?
        /// A list of ARNs that specifies the agents returned by the action.
        public let assessmentRunAgents: [AssessmentRunAgent]

        public init(nextToken: String? = nil, assessmentRunAgents: [AssessmentRunAgent]) {
            self.nextToken = nextToken
            self.assessmentRunAgents = assessmentRunAgents
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case assessmentRunAgents = "assessmentRunAgents"
        }
    }

    public struct ListAssessmentTargetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "filter", required: false, type: .structure)
        ]
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListAssessmentTargets action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        public let maxResults: Int32?
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        public let filter: AssessmentTargetFilter?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, filter: AssessmentTargetFilter? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.filter = filter
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case filter = "filter"
        }
    }

    public struct GetTelemetryMetadataResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "telemetryMetadata", required: true, type: .list)
        ]
        /// Telemetry details.
        public let telemetryMetadata: [TelemetryMetadata]

        public init(telemetryMetadata: [TelemetryMetadata]) {
            self.telemetryMetadata = telemetryMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case telemetryMetadata = "telemetryMetadata"
        }
    }

    public struct CreateAssessmentTemplateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTemplateName", required: true, type: .string), 
            AWSShapeMember(label: "assessmentTargetArn", required: true, type: .string), 
            AWSShapeMember(label: "durationInSeconds", required: true, type: .integer), 
            AWSShapeMember(label: "rulesPackageArns", required: true, type: .list), 
            AWSShapeMember(label: "userAttributesForFindings", required: false, type: .list)
        ]
        /// The user-defined name that identifies the assessment template that you want to create. You can create several assessment templates for an assessment target. The names of the assessment templates that correspond to a particular assessment target must be unique.
        public let assessmentTemplateName: String
        /// The ARN that specifies the assessment target for which you want to create the assessment template.
        public let assessmentTargetArn: String
        /// The duration of the assessment run in seconds. The default value is 3600 seconds (one hour).
        public let durationInSeconds: Int32
        /// The ARNs that specify the rules packages that you want to attach to the assessment template.
        public let rulesPackageArns: [String]
        /// The user-defined attributes that are assigned to every finding that is generated by the assessment run that uses this assessment template. An attribute is a key and value pair (an Attribute object). Within an assessment template, each key must be unique.
        public let userAttributesForFindings: [Attribute]?

        public init(assessmentTemplateName: String, assessmentTargetArn: String, durationInSeconds: Int32, rulesPackageArns: [String], userAttributesForFindings: [Attribute]? = nil) {
            self.assessmentTemplateName = assessmentTemplateName
            self.assessmentTargetArn = assessmentTargetArn
            self.durationInSeconds = durationInSeconds
            self.rulesPackageArns = rulesPackageArns
            self.userAttributesForFindings = userAttributesForFindings
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTemplateName = "assessmentTemplateName"
            case assessmentTargetArn = "assessmentTargetArn"
            case durationInSeconds = "durationInSeconds"
            case rulesPackageArns = "rulesPackageArns"
            case userAttributesForFindings = "userAttributesForFindings"
        }
    }

    public struct StartAssessmentRunRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentRunName", required: false, type: .string), 
            AWSShapeMember(label: "assessmentTemplateArn", required: true, type: .string)
        ]
        /// You can specify the name for the assessment run. The name must be unique for the assessment template whose ARN is used to start the assessment run.
        public let assessmentRunName: String?
        /// The ARN of the assessment template of the assessment run that you want to start.
        public let assessmentTemplateArn: String

        public init(assessmentRunName: String? = nil, assessmentTemplateArn: String) {
            self.assessmentRunName = assessmentRunName
            self.assessmentTemplateArn = assessmentTemplateArn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentRunName = "assessmentRunName"
            case assessmentTemplateArn = "assessmentTemplateArn"
        }
    }

    public struct AgentFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentHealthCodes", required: true, type: .list), 
            AWSShapeMember(label: "agentHealths", required: true, type: .list)
        ]
        /// The detailed health state of the agent. Values can be set to IDLE, RUNNING, SHUTDOWN, UNHEALTHY, THROTTLED, and UNKNOWN. 
        public let agentHealthCodes: [AgentHealthCode]
        /// The current health state of the agent. Values can be set to HEALTHY or UNHEALTHY.
        public let agentHealths: [AgentHealth]

        public init(agentHealthCodes: [AgentHealthCode], agentHealths: [AgentHealth]) {
            self.agentHealthCodes = agentHealthCodes
            self.agentHealths = agentHealths
        }

        private enum CodingKeys: String, CodingKey {
            case agentHealthCodes = "agentHealthCodes"
            case agentHealths = "agentHealths"
        }
    }

    public struct SubscribeToEventRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "event", required: true, type: .enum), 
            AWSShapeMember(label: "topicArn", required: true, type: .string)
        ]
        /// The ARN of the assessment template that is used during the event for which you want to receive SNS notifications.
        public let resourceArn: String
        /// The event for which you want to receive SNS notifications.
        public let event: InspectorEvent
        /// The ARN of the SNS topic to which the SNS notifications are sent.
        public let topicArn: String

        public init(resourceArn: String, event: InspectorEvent, topicArn: String) {
            self.resourceArn = resourceArn
            self.event = event
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case event = "event"
            case topicArn = "topicArn"
        }
    }

    public enum AssessmentRunNotificationSnsStatusCode: String, CustomStringConvertible, Codable {
        case success = "SUCCESS"
        case topicDoesNotExist = "TOPIC_DOES_NOT_EXIST"
        case accessDenied = "ACCESS_DENIED"
        case internalError = "INTERNAL_ERROR"
        public var description: String { return self.rawValue }
    }

    public struct CreateResourceGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceGroupTags", required: true, type: .list)
        ]
        /// A collection of keys and an array of possible values, '[{"key":"key1","values":["Value1","Value2"]},{"key":"Key2","values":["Value3"]}]'. For example,'[{"key":"Name","values":["TestEC2Instance"]}]'.
        public let resourceGroupTags: [ResourceGroupTag]

        public init(resourceGroupTags: [ResourceGroupTag]) {
            self.resourceGroupTags = resourceGroupTags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceGroupTags = "resourceGroupTags"
        }
    }

    public struct DescribeFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "findings", required: true, type: .list), 
            AWSShapeMember(label: "failedItems", required: true, type: .map)
        ]
        /// Information about the finding.
        public let findings: [Finding]
        /// Finding details that cannot be described. An error code is provided for each failed item.
        public let failedItems: [String: FailedItemDetails]

        public init(findings: [Finding], failedItems: [String: FailedItemDetails]) {
            self.findings = findings
            self.failedItems = failedItems
        }

        private enum CodingKeys: String, CodingKey {
            case findings = "findings"
            case failedItems = "failedItems"
        }
    }

    public struct SetTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]
        /// The ARN of the assessment template that you want to set tags to.
        public let resourceArn: String
        /// A collection of key and value pairs that you want to set to the assessment template.
        public let tags: [Tag]?

        public init(resourceArn: String, tags: [Tag]? = nil) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct FailedItemDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failureCode", required: true, type: .enum), 
            AWSShapeMember(label: "retryable", required: true, type: .boolean)
        ]
        /// The status code of a failed item.
        public let failureCode: FailedItemErrorCode
        /// Indicates whether you can immediately retry a request for this item for a specified resource.
        public let retryable: Bool

        public init(failureCode: FailedItemErrorCode, retryable: Bool) {
            self.failureCode = failureCode
            self.retryable = retryable
        }

        private enum CodingKeys: String, CodingKey {
            case failureCode = "failureCode"
            case retryable = "retryable"
        }
    }

    public struct AssessmentRunNotification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "snsTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "snsPublishStatusCode", required: false, type: .enum), 
            AWSShapeMember(label: "event", required: true, type: .enum), 
            AWSShapeMember(label: "message", required: false, type: .string), 
            AWSShapeMember(label: "date", required: true, type: .timestamp), 
            AWSShapeMember(label: "error", required: true, type: .boolean)
        ]
        /// The SNS topic to which the SNS notification is sent.
        public let snsTopicArn: String?
        /// The status code of the SNS notification.
        public let snsPublishStatusCode: AssessmentRunNotificationSnsStatusCode?
        /// The event for which a notification is sent.
        public let event: InspectorEvent
        /// The message included in the notification.
        public let message: String?
        /// The date of the notification.
        public let date: TimeStamp
        /// The Boolean value that specifies whether the notification represents an error.
        public let error: Bool

        public init(snsTopicArn: String? = nil, snsPublishStatusCode: AssessmentRunNotificationSnsStatusCode? = nil, event: InspectorEvent, message: String? = nil, date: TimeStamp, error: Bool) {
            self.snsTopicArn = snsTopicArn
            self.snsPublishStatusCode = snsPublishStatusCode
            self.event = event
            self.message = message
            self.date = date
            self.error = error
        }

        private enum CodingKeys: String, CodingKey {
            case snsTopicArn = "snsTopicArn"
            case snsPublishStatusCode = "snsPublishStatusCode"
            case event = "event"
            case message = "message"
            case date = "date"
            case error = "error"
        }
    }

    public struct ListAssessmentTemplatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "filter", required: false, type: .structure), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "assessmentTargetArns", required: false, type: .list)
        ]
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        public let maxResults: Int32?
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        public let filter: AssessmentTemplateFilter?
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListAssessmentTemplates action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// A list of ARNs that specifies the assessment targets whose assessment templates you want to list.
        public let assessmentTargetArns: [String]?

        public init(maxResults: Int32? = nil, filter: AssessmentTemplateFilter? = nil, nextToken: String? = nil, assessmentTargetArns: [String]? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.assessmentTargetArns = assessmentTargetArns
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case filter = "filter"
            case nextToken = "nextToken"
            case assessmentTargetArns = "assessmentTargetArns"
        }
    }

    public struct StopAssessmentRunRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stopAction", required: false, type: .enum), 
            AWSShapeMember(label: "assessmentRunArn", required: true, type: .string)
        ]
        /// An input option that can be set to either START_EVALUATION or SKIP_EVALUATION. START_EVALUATION (the default value), stops the AWS agent from collecting data and begins the results evaluation and the findings generation process. SKIP_EVALUATION cancels the assessment run immediately, after which no findings are generated.
        public let stopAction: StopAction?
        /// The ARN of the assessment run that you want to stop.
        public let assessmentRunArn: String

        public init(stopAction: StopAction? = nil, assessmentRunArn: String) {
            self.stopAction = stopAction
            self.assessmentRunArn = assessmentRunArn
        }

        private enum CodingKeys: String, CodingKey {
            case stopAction = "stopAction"
            case assessmentRunArn = "assessmentRunArn"
        }
    }

    public struct ListRulesPackagesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rulesPackageArns", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The list of ARNs that specifies the rules packages returned by the action.
        public let rulesPackageArns: [String]
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public let nextToken: String?

        public init(rulesPackageArns: [String], nextToken: String? = nil) {
            self.rulesPackageArns = rulesPackageArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case rulesPackageArns = "rulesPackageArns"
            case nextToken = "nextToken"
        }
    }

    public struct CreateAssessmentTargetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceGroupArn", required: true, type: .string), 
            AWSShapeMember(label: "assessmentTargetName", required: true, type: .string)
        ]
        /// The ARN that specifies the resource group that is used to create the assessment target.
        public let resourceGroupArn: String
        /// The user-defined name that identifies the assessment target that you want to create. The name must be unique within the AWS account.
        public let assessmentTargetName: String

        public init(resourceGroupArn: String, assessmentTargetName: String) {
            self.resourceGroupArn = resourceGroupArn
            self.assessmentTargetName = assessmentTargetName
        }

        private enum CodingKeys: String, CodingKey {
            case resourceGroupArn = "resourceGroupArn"
            case assessmentTargetName = "assessmentTargetName"
        }
    }

    public struct InspectorServiceAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "schemaVersion", required: true, type: .integer), 
            AWSShapeMember(label: "rulesPackageArn", required: false, type: .string), 
            AWSShapeMember(label: "assessmentRunArn", required: false, type: .string)
        ]
        /// The schema version of this data type.
        public let schemaVersion: Int32
        /// The ARN of the rules package that is used to generate the finding.
        public let rulesPackageArn: String?
        /// The ARN of the assessment run during which the finding is generated.
        public let assessmentRunArn: String?

        public init(schemaVersion: Int32, rulesPackageArn: String? = nil, assessmentRunArn: String? = nil) {
            self.schemaVersion = schemaVersion
            self.rulesPackageArn = rulesPackageArn
            self.assessmentRunArn = assessmentRunArn
        }

        private enum CodingKeys: String, CodingKey {
            case schemaVersion = "schemaVersion"
            case rulesPackageArn = "rulesPackageArn"
            case assessmentRunArn = "assessmentRunArn"
        }
    }

    public struct DescribeAssessmentTargetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTargets", required: true, type: .list), 
            AWSShapeMember(label: "failedItems", required: true, type: .map)
        ]
        /// Information about the assessment targets.
        public let assessmentTargets: [AssessmentTarget]
        /// Assessment target details that cannot be described. An error code is provided for each failed item.
        public let failedItems: [String: FailedItemDetails]

        public init(assessmentTargets: [AssessmentTarget], failedItems: [String: FailedItemDetails]) {
            self.assessmentTargets = assessmentTargets
            self.failedItems = failedItems
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTargets = "assessmentTargets"
            case failedItems = "failedItems"
        }
    }

    public struct DescribeFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "locale", required: false, type: .enum), 
            AWSShapeMember(label: "findingArns", required: true, type: .list)
        ]
        /// The locale into which you want to translate a finding description, recommendation, and the short description that identifies the finding.
        public let locale: Locale?
        /// The ARN that specifies the finding that you want to describe.
        public let findingArns: [String]

        public init(locale: Locale? = nil, findingArns: [String]) {
            self.locale = locale
            self.findingArns = findingArns
        }

        private enum CodingKeys: String, CodingKey {
            case locale = "locale"
            case findingArns = "findingArns"
        }
    }

}