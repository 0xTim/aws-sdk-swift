// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Inspector {

    public struct DescribeRulesPackagesRequest: Serializable, Initializable {
        /// The ARN that specifies the rules package that you want to describe.
        var rulesPackageArns: [String] = []
        /// The locale that you want to translate a rules package description into.
        var locale: String? = nil

        public init() {}

        public init(rulesPackageArns: [String], locale: String? = nil) {
            self.rulesPackageArns = rulesPackageArns
            self.locale = locale
        }

    }

    public struct RemoveAttributesFromFindingsResponse: Serializable, Initializable {
        /// Attributes details that cannot be described. An error code is provided for each failed item.
        var failedItems: [String: FailedItemDetails] = [:]

        public init() {}

        public init(failedItems: [String: FailedItemDetails]) {
            self.failedItems = failedItems
        }

    }

    public struct DescribeResourceGroupsRequest: Serializable, Initializable {
        /// The ARN that specifies the resource group that you want to describe.
        var resourceGroupArns: [String] = []

        public init() {}

        public init(resourceGroupArns: [String]) {
            self.resourceGroupArns = resourceGroupArns
        }

    }

    public struct ListFindingsRequest: Serializable, Initializable {
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        var maxResults: Int32? = nil
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        var filter: FindingFilter? = nil
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListFindings action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        var nextToken: String? = nil
        /// The ARNs of the assessment runs that generate the findings that you want to list.
        var assessmentRunArns: [String]? = nil

        public init() {}

        public init(maxResults: Int32? = nil, filter: FindingFilter? = nil, nextToken: String? = nil, assessmentRunArns: [String]? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.assessmentRunArns = assessmentRunArns
        }

    }

    public struct DescribeCrossAccountAccessRoleResponse: Serializable, Initializable {
        /// A Boolean value that specifies whether the IAM role has the necessary policies attached to enable Amazon Inspector to access your AWS account.
        var valid: Bool = false
        /// The ARN that specifies the IAM role that Amazon Inspector uses to access your AWS account.
        var roleArn: String = ""
        /// The date when the cross-account access role was registered.
        var registeredAt: Date = Date()

        public init() {}

        public init(valid: Bool, roleArn: String, registeredAt: Date) {
            self.valid = valid
            self.roleArn = roleArn
            self.registeredAt = registeredAt
        }

    }

    public struct PreviewAgentsRequest: Serializable, Initializable {
        /// The ARN of the assessment target whose agents you want to preview.
        var previewAgentsArn: String = ""
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        var maxResults: Int32? = nil
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the PreviewAgents action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        var nextToken: String? = nil

        public init() {}

        public init(previewAgentsArn: String, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.previewAgentsArn = previewAgentsArn
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

    }

    public struct DescribeRulesPackagesResponse: Serializable, Initializable {
        /// Information about the rules package.
        var rulesPackages: [RulesPackage] = []
        /// Rules package details that cannot be described. An error code is provided for each failed item.
        var failedItems: [String: FailedItemDetails] = [:]

        public init() {}

        public init(rulesPackages: [RulesPackage], failedItems: [String: FailedItemDetails]) {
            self.rulesPackages = rulesPackages
            self.failedItems = failedItems
        }

    }

    public struct Subscription: Serializable, Initializable {
        /// The ARN of the assessment template that is used during the event for which the SNS notification is sent.
        var resourceArn: String = ""
        /// The list of existing event subscriptions.
        var eventSubscriptions: [EventSubscription] = []
        /// The ARN of the Amazon Simple Notification Service (SNS) topic to which the SNS notifications are sent.
        var topicArn: String = ""

        public init() {}

        public init(resourceArn: String, eventSubscriptions: [EventSubscription], topicArn: String) {
            self.resourceArn = resourceArn
            self.eventSubscriptions = eventSubscriptions
            self.topicArn = topicArn
        }

    }

    public struct AssessmentTarget: Serializable, Initializable {
        /// The ARN that specifies the resource group that is associated with the assessment target.
        var resourceGroupArn: String = ""
        /// The name of the Amazon Inspector assessment target.
        var name: String = ""
        /// The time at which UpdateAssessmentTarget is called.
        var updatedAt: Date = Date()
        /// The time at which the assessment target is created.
        var createdAt: Date = Date()
        /// The ARN that specifies the Amazon Inspector assessment target.
        var arn: String = ""

        public init() {}

        public init(resourceGroupArn: String, name: String, updatedAt: Date, createdAt: Date, arn: String) {
            self.resourceGroupArn = resourceGroupArn
            self.name = name
            self.updatedAt = updatedAt
            self.createdAt = createdAt
            self.arn = arn
        }

    }

    public struct DescribeAssessmentTemplatesRequest: Serializable, Initializable {
        var assessmentTemplateArns: [String] = []

        public init() {}

        public init(assessmentTemplateArns: [String]) {
            self.assessmentTemplateArns = assessmentTemplateArns
        }

    }

    public struct AddAttributesToFindingsRequest: Serializable, Initializable {
        /// The array of attributes that you want to assign to specified findings.
        var attributes: [Attribute] = []
        /// The ARNs that specify the findings that you want to assign attributes to.
        var findingArns: [String] = []

        public init() {}

        public init(attributes: [Attribute], findingArns: [String]) {
            self.attributes = attributes
            self.findingArns = findingArns
        }

    }

    public struct PreviewAgentsResponse: Serializable, Initializable {
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        var nextToken: String? = nil
        /// The resulting list of agents.
        var agentPreviews: [AgentPreview] = []

        public init() {}

        public init(nextToken: String? = nil, agentPreviews: [AgentPreview]) {
            self.nextToken = nextToken
            self.agentPreviews = agentPreviews
        }

    }

    public struct DescribeAssessmentRunsResponse: Serializable, Initializable {
        /// Assessment run details that cannot be described. An error code is provided for each failed item.
        var failedItems: [String: FailedItemDetails] = [:]
        /// Information about the assessment run.
        var assessmentRuns: [AssessmentRun] = []

        public init() {}

        public init(failedItems: [String: FailedItemDetails], assessmentRuns: [AssessmentRun]) {
            self.failedItems = failedItems
            self.assessmentRuns = assessmentRuns
        }

    }

    public struct EventSubscription: Serializable, Initializable {
        /// The event for which Amazon Simple Notification Service (SNS) notifications are sent.
        var event: String = ""
        /// The time at which SubscribeToEvent is called.
        var subscribedAt: Date = Date()

        public init() {}

        public init(event: String, subscribedAt: Date) {
            self.event = event
            self.subscribedAt = subscribedAt
        }

    }

    public struct CreateResourceGroupResponse: Serializable, Initializable {
        /// The ARN that specifies the resource group that is created.
        var resourceGroupArn: String = ""

        public init() {}

        public init(resourceGroupArn: String) {
            self.resourceGroupArn = resourceGroupArn
        }

    }

    public struct ResourceGroupTag: Serializable, Initializable {
        /// A tag key.
        var key: String = ""
        /// The value assigned to a tag key.
        var value: String? = nil

        public init() {}

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

    }

    public struct RemoveAttributesFromFindingsRequest: Serializable, Initializable {
        /// The array of attribute keys that you want to remove from specified findings.
        var attributeKeys: [String] = []
        /// The ARNs that specify the findings that you want to remove attributes from.
        var findingArns: [String] = []

        public init() {}

        public init(attributeKeys: [String], findingArns: [String]) {
            self.attributeKeys = attributeKeys
            self.findingArns = findingArns
        }

    }

    public struct DescribeAssessmentRunsRequest: Serializable, Initializable {
        /// The ARN that specifies the assessment run that you want to describe.
        var assessmentRunArns: [String] = []

        public init() {}

        public init(assessmentRunArns: [String]) {
            self.assessmentRunArns = assessmentRunArns
        }

    }

    public struct ListAssessmentTemplatesResponse: Serializable, Initializable {
        /// A list of ARNs that specifies the assessment templates returned by the action.
        var assessmentTemplateArns: [String] = []
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        var nextToken: String? = nil

        public init() {}

        public init(assessmentTemplateArns: [String], nextToken: String? = nil) {
            self.assessmentTemplateArns = assessmentTemplateArns
            self.nextToken = nextToken
        }

    }

    public struct DescribeAssessmentTemplatesResponse: Serializable, Initializable {
        /// Assessment template details that cannot be described. An error code is provided for each failed item.
        var failedItems: [String: FailedItemDetails] = [:]
        /// Information about the assessment templates.
        var assessmentTemplates: [AssessmentTemplate] = []

        public init() {}

        public init(failedItems: [String: FailedItemDetails], assessmentTemplates: [AssessmentTemplate]) {
            self.failedItems = failedItems
            self.assessmentTemplates = assessmentTemplates
        }

    }

    public struct StartAssessmentRunResponse: Serializable, Initializable {
        /// The ARN of the assessment run that has been started.
        var assessmentRunArn: String = ""

        public init() {}

        public init(assessmentRunArn: String) {
            self.assessmentRunArn = assessmentRunArn
        }

    }

    public struct Tag: Serializable, Initializable {
        /// A tag key.
        var key: String = ""
        /// A value assigned to a tag key.
        var value: String? = nil

        public init() {}

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

    }

    public struct ListAssessmentTargetsResponse: Serializable, Initializable {
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        var nextToken: String? = nil
        /// A list of ARNs that specifies the assessment targets that are returned by the action.
        var assessmentTargetArns: [String] = []

        public init() {}

        public init(nextToken: String? = nil, assessmentTargetArns: [String]) {
            self.nextToken = nextToken
            self.assessmentTargetArns = assessmentTargetArns
        }

    }

    public struct ResourceGroup: Serializable, Initializable {
        /// The tags (key and value pairs) of the resource group. This data type property is used in the CreateResourceGroup action.
        var tags: [ResourceGroupTag] = []
        /// The time at which resource group is created.
        var createdAt: Date = Date()
        /// The ARN of the resource group.
        var arn: String = ""

        public init() {}

        public init(tags: [ResourceGroupTag], createdAt: Date, arn: String) {
            self.tags = tags
            self.createdAt = createdAt
            self.arn = arn
        }

    }

    public struct UnsubscribeFromEventRequest: Serializable, Initializable {
        /// The ARN of the assessment template that is used during the event for which you want to stop receiving SNS notifications.
        var resourceArn: String = ""
        /// The event for which you want to stop receiving SNS notifications.
        var event: String = ""
        /// The ARN of the SNS topic to which SNS notifications are sent.
        var topicArn: String = ""

        public init() {}

        public init(resourceArn: String, event: String, topicArn: String) {
            self.resourceArn = resourceArn
            self.event = event
            self.topicArn = topicArn
        }

    }

    public struct Attribute: Serializable, Initializable {
        /// The attribute key.
        var key: String = ""
        /// The value assigned to the attribute key.
        var value: String? = nil

        public init() {}

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

    }

    public struct DeleteAssessmentTemplateRequest: Serializable, Initializable {
        /// The ARN that specifies the assessment template that you want to delete.
        var assessmentTemplateArn: String = ""

        public init() {}

        public init(assessmentTemplateArn: String) {
            self.assessmentTemplateArn = assessmentTemplateArn
        }

    }

    public struct DescribeAssessmentTargetsRequest: Serializable, Initializable {
        /// The ARNs that specifies the assessment targets that you want to describe.
        var assessmentTargetArns: [String] = []

        public init() {}

        public init(assessmentTargetArns: [String]) {
            self.assessmentTargetArns = assessmentTargetArns
        }

    }

    public struct DeleteAssessmentRunRequest: Serializable, Initializable {
        /// The ARN that specifies the assessment run that you want to delete.
        var assessmentRunArn: String = ""

        public init() {}

        public init(assessmentRunArn: String) {
            self.assessmentRunArn = assessmentRunArn
        }

    }

    public struct FindingFilter: Serializable, Initializable {
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the ruleName property of the Finding data type.
        var ruleNames: [String]? = nil
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the severity property of the Finding data type.
        var severities: [String]? = nil
        /// For a record to match a filter, the list of values that are specified for this data type property must be contained in the list of values of the attributes property of the Finding data type.
        var attributes: [Attribute]? = nil
        /// For a record to match a filter, the value that is specified for this data type property must be contained in the list of values of the userAttributes property of the Finding data type.
        var userAttributes: [Attribute]? = nil
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the agentId property of the Finding data type.
        var agentIds: [String]? = nil
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the rulesPackageArn property of the Finding data type.
        var rulesPackageArns: [String]? = nil
        /// The time range during which the finding is generated.
        var creationTimeRange: TimestampRange? = nil
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the autoScalingGroup property of the Finding data type.
        var autoScalingGroups: [String]? = nil

        public init() {}

        public init(ruleNames: [String]? = nil, severities: [String]? = nil, attributes: [Attribute]? = nil, userAttributes: [Attribute]? = nil, agentIds: [String]? = nil, rulesPackageArns: [String]? = nil, creationTimeRange: TimestampRange? = nil, autoScalingGroups: [String]? = nil) {
            self.ruleNames = ruleNames
            self.severities = severities
            self.attributes = attributes
            self.userAttributes = userAttributes
            self.agentIds = agentIds
            self.rulesPackageArns = rulesPackageArns
            self.creationTimeRange = creationTimeRange
            self.autoScalingGroups = autoScalingGroups
        }

    }

    public struct RulesPackage: Serializable, Initializable {
        /// The description of the rules package.
        var description: String? = nil
        /// The name of the rules package.
        var name: String = ""
        /// The version ID of the rules package.
        var version: String = ""
        /// The provider of the rules package.
        var provider: String = ""
        /// The ARN of the rules package.
        var arn: String = ""

        public init() {}

        public init(description: String? = nil, name: String, version: String, provider: String, arn: String) {
            self.description = description
            self.name = name
            self.version = version
            self.provider = provider
            self.arn = arn
        }

    }

    public struct AssessmentRunStateChange: Serializable, Initializable {
        /// The assessment run state.
        var state: String = ""
        /// The last time the assessment run state changed.
        var stateChangedAt: Date = Date()

        public init() {}

        public init(state: String, stateChangedAt: Date) {
            self.state = state
            self.stateChangedAt = stateChangedAt
        }

    }

    public struct ListFindingsResponse: Serializable, Initializable {
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        var nextToken: String? = nil
        /// A list of ARNs that specifies the findings returned by the action.
        var findingArns: [String] = []

        public init() {}

        public init(nextToken: String? = nil, findingArns: [String]) {
            self.nextToken = nextToken
            self.findingArns = findingArns
        }

    }

    public struct ListAssessmentRunsRequest: Serializable, Initializable {
        /// You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 10. The maximum value is 500.
        var maxResults: Int32? = nil
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        var filter: AssessmentRunFilter? = nil
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListAssessmentRuns action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        var nextToken: String? = nil
        /// The ARNs that specify the assessment templates whose assessment runs you want to list.
        var assessmentTemplateArns: [String]? = nil

        public init() {}

        public init(maxResults: Int32? = nil, filter: AssessmentRunFilter? = nil, nextToken: String? = nil, assessmentTemplateArns: [String]? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.assessmentTemplateArns = assessmentTemplateArns
        }

    }

    public struct AgentPreview: Serializable, Initializable {
        /// The Auto Scaling group for the EC2 instance where the agent is installed.
        var autoScalingGroup: String? = nil
        /// The ID of the EC2 instance where the agent is installed.
        var agentId: String = ""

        public init() {}

        public init(autoScalingGroup: String? = nil, agentId: String) {
            self.autoScalingGroup = autoScalingGroup
            self.agentId = agentId
        }

    }

    public struct ListRulesPackagesRequest: Serializable, Initializable {
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListRulesPackages action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        var nextToken: String? = nil
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct AssessmentRunFilter: Serializable, Initializable {
        /// For a record to match a filter, an explicit value or a string containing a wildcard that is specified for this data type property must match the value of the assessmentRunName property of the AssessmentRun data type.
        var namePattern: String? = nil
        /// For a record to match a filter, one of the values specified for this data type property must be the exact match of the value of the assessmentRunState property of the AssessmentRun data type.
        var states: [String]? = nil
        /// For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the startTime property of the AssessmentRun data type.
        var startTimeRange: TimestampRange? = nil
        /// For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the durationInSeconds property of the AssessmentRun data type.
        var durationRange: DurationRange? = nil
        /// For a record to match a filter, the value that is specified for this data type property must be contained in the list of values of the rulesPackages property of the AssessmentRun data type.
        var rulesPackageArns: [String]? = nil
        /// For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the completedAt property of the AssessmentRun data type.
        var completionTimeRange: TimestampRange? = nil
        /// For a record to match a filter, the value that is specified for this data type property must match the stateChangedAt property of the AssessmentRun data type.
        var stateChangeTimeRange: TimestampRange? = nil

        public init() {}

        public init(namePattern: String? = nil, states: [String]? = nil, startTimeRange: TimestampRange? = nil, durationRange: DurationRange? = nil, rulesPackageArns: [String]? = nil, completionTimeRange: TimestampRange? = nil, stateChangeTimeRange: TimestampRange? = nil) {
            self.namePattern = namePattern
            self.states = states
            self.startTimeRange = startTimeRange
            self.durationRange = durationRange
            self.rulesPackageArns = rulesPackageArns
            self.completionTimeRange = completionTimeRange
            self.stateChangeTimeRange = stateChangeTimeRange
        }

    }

    public struct GetTelemetryMetadataRequest: Serializable, Initializable {
        /// The ARN that specifies the assessment run that has the telemetry data that you want to obtain.
        var assessmentRunArn: String = ""

        public init() {}

        public init(assessmentRunArn: String) {
            self.assessmentRunArn = assessmentRunArn
        }

    }

    public struct AssessmentTargetFilter: Serializable, Initializable {
        /// For a record to match a filter, an explicit value or a string that contains a wildcard that is specified for this data type property must match the value of the assessmentTargetName property of the AssessmentTarget data type.
        var assessmentTargetNamePattern: String? = nil

        public init() {}

        public init(assessmentTargetNamePattern: String? = nil) {
            self.assessmentTargetNamePattern = assessmentTargetNamePattern
        }

    }

    public struct AssessmentRun: Serializable, Initializable {
        /// The state of the assessment run.
        var state: String = ""
        /// The auto-generated name for the assessment run.
        var name: String = ""
        /// The time when StartAssessmentRun was called.
        var createdAt: Date = Date()
        /// The time when StartAssessmentRun was called.
        var startedAt: Date? = nil
        /// A list of notifications for the event subscriptions. A notification about a particular generated finding is added to this list only once.
        var notifications: [AssessmentRunNotification] = []
        /// A Boolean value (true or false) that specifies whether the process of collecting data from the agents is completed.
        var dataCollected: Bool = false
        /// The rules packages selected for the assessment run.
        var rulesPackageArns: [String] = []
        /// The last time when the assessment run's state changed.
        var stateChangedAt: Date = Date()
        /// The user-defined attributes that are assigned to every generated finding.
        var userAttributesForFindings: [Attribute] = []
        /// The ARN of the assessment run.
        var arn: String = ""
        /// A list of the assessment run state changes.
        var stateChanges: [AssessmentRunStateChange] = []
        /// The assessment run completion time that corresponds to the rules packages evaluation completion time or failure.
        var completedAt: Date? = nil
        /// The duration of the assessment run.
        var durationInSeconds: Int32 = 0
        /// The ARN of the assessment template that is associated with the assessment run.
        var assessmentTemplateArn: String = ""

        public init() {}

        public init(state: String, name: String, createdAt: Date, startedAt: Date? = nil, notifications: [AssessmentRunNotification], dataCollected: Bool, rulesPackageArns: [String], stateChangedAt: Date, userAttributesForFindings: [Attribute], arn: String, stateChanges: [AssessmentRunStateChange], completedAt: Date? = nil, durationInSeconds: Int32, assessmentTemplateArn: String) {
            self.state = state
            self.name = name
            self.createdAt = createdAt
            self.startedAt = startedAt
            self.notifications = notifications
            self.dataCollected = dataCollected
            self.rulesPackageArns = rulesPackageArns
            self.stateChangedAt = stateChangedAt
            self.userAttributesForFindings = userAttributesForFindings
            self.arn = arn
            self.stateChanges = stateChanges
            self.completedAt = completedAt
            self.durationInSeconds = durationInSeconds
            self.assessmentTemplateArn = assessmentTemplateArn
        }

    }

    public struct ListEventSubscriptionsResponse: Serializable, Initializable {
        /// Details of the returned event subscriptions.
        var subscriptions: [Subscription] = []
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        var nextToken: String? = nil

        public init() {}

        public init(subscriptions: [Subscription], nextToken: String? = nil) {
            self.subscriptions = subscriptions
            self.nextToken = nextToken
        }

    }

    public struct DeleteAssessmentTargetRequest: Serializable, Initializable {
        /// The ARN that specifies the assessment target that you want to delete.
        var assessmentTargetArn: String = ""

        public init() {}

        public init(assessmentTargetArn: String) {
            self.assessmentTargetArn = assessmentTargetArn
        }

    }

    public struct CreateAssessmentTemplateResponse: Serializable, Initializable {
        /// The ARN that specifies the assessment template that is created.
        var assessmentTemplateArn: String = ""

        public init() {}

        public init(assessmentTemplateArn: String) {
            self.assessmentTemplateArn = assessmentTemplateArn
        }

    }

    public struct Finding: Serializable, Initializable {
        /// The type of the host from which the finding is generated.
        var assetType: String? = nil
        /// The schema version of this data type.
        var schemaVersion: Int32? = nil
        /// The user-defined attributes that are assigned to the finding.
        var userAttributes: [Attribute] = []
        /// The recommendation for the finding.
        var recommendation: String? = nil
        /// The time when the finding was generated.
        var createdAt: Date = Date()
        /// The description of the finding.
        var description: String? = nil
        var serviceAttributes: InspectorServiceAttributes? = nil
        /// This data element is currently not used.
        var indicatorOfCompromise: Bool? = nil
        /// The finding severity. Values can be set to High, Medium, Low, and Informational.
        var severity: String? = nil
        /// A collection of attributes of the host from which the finding is generated.
        var assetAttributes: AssetAttributes? = nil
        /// The numeric value of the finding severity.
        var numericSeverity: Double? = nil
        /// The data element is set to "Inspector".
        var service: String? = nil
        /// The ARN that specifies the finding.
        var arn: String = ""
        /// The system-defined attributes for the finding.
        var attributes: [Attribute] = []
        /// The ID of the finding.
        var id: String? = nil
        /// The time when AddAttributesToFindings is called.
        var updatedAt: Date = Date()
        /// The name of the finding.
        var title: String? = nil
        /// This data element is currently not used.
        var confidence: Int32? = nil

        public init() {}

        public init(assetType: String? = nil, schemaVersion: Int32? = nil, userAttributes: [Attribute], recommendation: String? = nil, createdAt: Date, description: String? = nil, serviceAttributes: InspectorServiceAttributes? = nil, indicatorOfCompromise: Bool? = nil, severity: String? = nil, assetAttributes: AssetAttributes? = nil, numericSeverity: Double? = nil, service: String? = nil, arn: String, attributes: [Attribute], id: String? = nil, updatedAt: Date, title: String? = nil, confidence: Int32? = nil) {
            self.assetType = assetType
            self.schemaVersion = schemaVersion
            self.userAttributes = userAttributes
            self.recommendation = recommendation
            self.createdAt = createdAt
            self.description = description
            self.serviceAttributes = serviceAttributes
            self.indicatorOfCompromise = indicatorOfCompromise
            self.severity = severity
            self.assetAttributes = assetAttributes
            self.numericSeverity = numericSeverity
            self.service = service
            self.arn = arn
            self.attributes = attributes
            self.id = id
            self.updatedAt = updatedAt
            self.title = title
            self.confidence = confidence
        }

    }

    public struct ListAssessmentRunAgentsRequest: Serializable, Initializable {
        /// You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 10. The maximum value is 500.
        var maxResults: Int32? = nil
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        var filter: AgentFilter? = nil
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListAssessmentRunAgents action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        var nextToken: String? = nil
        /// The ARN that specifies the assessment run whose agents you want to list.
        var assessmentRunArn: String = ""

        public init() {}

        public init(maxResults: Int32? = nil, filter: AgentFilter? = nil, nextToken: String? = nil, assessmentRunArn: String) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.assessmentRunArn = assessmentRunArn
        }

    }

    public struct ListTagsForResourceRequest: Serializable, Initializable {
        /// The ARN that specifies the assessment template whose tags you want to list.
        var resourceArn: String = ""

        public init() {}

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

    }

    public struct ListEventSubscriptionsRequest: Serializable, Initializable {
        /// The ARN of the assessment template for which you want to list the existing event subscriptions.
        var resourceArn: String? = nil
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListEventSubscriptions action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        var nextToken: String? = nil
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        var maxResults: Int32? = nil

        public init() {}

        public init(resourceArn: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.resourceArn = resourceArn
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct UpdateAssessmentTargetRequest: Serializable, Initializable {
        /// The ARN of the resource group that is used to specify the new resource group to associate with the assessment target.
        var resourceGroupArn: String = ""
        /// The ARN of the assessment target that you want to update.
        var assessmentTargetArn: String = ""
        /// The name of the assessment target that you want to update.
        var assessmentTargetName: String = ""

        public init() {}

        public init(resourceGroupArn: String, assessmentTargetArn: String, assessmentTargetName: String) {
            self.resourceGroupArn = resourceGroupArn
            self.assessmentTargetArn = assessmentTargetArn
            self.assessmentTargetName = assessmentTargetName
        }

    }

    public struct AddAttributesToFindingsResponse: Serializable, Initializable {
        /// Attribute details that cannot be described. An error code is provided for each failed item.
        var failedItems: [String: FailedItemDetails] = [:]

        public init() {}

        public init(failedItems: [String: FailedItemDetails]) {
            self.failedItems = failedItems
        }

    }

    public struct CreateAssessmentTargetResponse: Serializable, Initializable {
        /// The ARN that specifies the assessment target that is created.
        var assessmentTargetArn: String = ""

        public init() {}

        public init(assessmentTargetArn: String) {
            self.assessmentTargetArn = assessmentTargetArn
        }

    }

    public struct ListAssessmentRunsResponse: Serializable, Initializable {
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        var nextToken: String? = nil
        /// A list of ARNs that specifies the assessment runs that are returned by the action.
        var assessmentRunArns: [String] = []

        public init() {}

        public init(nextToken: String? = nil, assessmentRunArns: [String]) {
            self.nextToken = nextToken
            self.assessmentRunArns = assessmentRunArns
        }

    }

    public struct AssessmentRunAgent: Serializable, Initializable {
        /// The Amazon Inspector application data metrics that are collected by the agent.
        var telemetryMetadata: [TelemetryMetadata] = []
        /// The Auto Scaling group of the EC2 instance that is specified by the agent ID.
        var autoScalingGroup: String? = nil
        /// The current health state of the agent.
        var agentHealth: String = ""
        /// The description for the agent health code.
        var agentHealthDetails: String? = nil
        /// The ARN of the assessment run that is associated with the agent.
        var assessmentRunArn: String = ""
        /// The detailed health state of the agent.
        var agentHealthCode: String = ""
        /// The AWS account of the EC2 instance where the agent is installed.
        var agentId: String = ""

        public init() {}

        public init(telemetryMetadata: [TelemetryMetadata], autoScalingGroup: String? = nil, agentHealth: String, agentHealthDetails: String? = nil, assessmentRunArn: String, agentHealthCode: String, agentId: String) {
            self.telemetryMetadata = telemetryMetadata
            self.autoScalingGroup = autoScalingGroup
            self.agentHealth = agentHealth
            self.agentHealthDetails = agentHealthDetails
            self.assessmentRunArn = assessmentRunArn
            self.agentHealthCode = agentHealthCode
            self.agentId = agentId
        }

    }

    public struct DescribeResourceGroupsResponse: Serializable, Initializable {
        /// Resource group details that cannot be described. An error code is provided for each failed item.
        var failedItems: [String: FailedItemDetails] = [:]
        /// Information about a resource group.
        var resourceGroups: [ResourceGroup] = []

        public init() {}

        public init(failedItems: [String: FailedItemDetails], resourceGroups: [ResourceGroup]) {
            self.failedItems = failedItems
            self.resourceGroups = resourceGroups
        }

    }

    public struct AssessmentTemplateFilter: Serializable, Initializable {
        /// For a record to match a filter, an explicit value or a string that contains a wildcard that is specified for this data type property must match the value of the assessmentTemplateName property of the AssessmentTemplate data type.
        var namePattern: String? = nil
        /// For a record to match a filter, the values that are specified for this data type property must be contained in the list of values of the rulesPackageArns property of the AssessmentTemplate data type.
        var rulesPackageArns: [String]? = nil
        /// For a record to match a filter, the value specified for this data type property must inclusively match any value between the specified minimum and maximum values of the durationInSeconds property of the AssessmentTemplate data type.
        var durationRange: DurationRange? = nil

        public init() {}

        public init(namePattern: String? = nil, rulesPackageArns: [String]? = nil, durationRange: DurationRange? = nil) {
            self.namePattern = namePattern
            self.rulesPackageArns = rulesPackageArns
            self.durationRange = durationRange
        }

    }

    public struct ListTagsForResourceResponse: Serializable, Initializable {
        /// A collection of key and value pairs.
        var tags: [Tag] = []

        public init() {}

        public init(tags: [Tag]) {
            self.tags = tags
        }

    }

    public struct AgentAlreadyRunningAssessment: Serializable, Initializable {
        /// ID of the agent that is running on an EC2 instance that is already participating in another started assessment run.
        var agentId: String = ""
        /// The ARN of the assessment run that has already been started.
        var assessmentRunArn: String = ""

        public init() {}

        public init(agentId: String, assessmentRunArn: String) {
            self.agentId = agentId
            self.assessmentRunArn = assessmentRunArn
        }

    }

    public struct DurationRange: Serializable, Initializable {
        /// The maximum value of the duration range. Must be less than or equal to 604800 seconds (1 week).
        var maxSeconds: Int32? = nil
        /// The minimum value of the duration range. Must be greater than zero.
        var minSeconds: Int32? = nil

        public init() {}

        public init(maxSeconds: Int32? = nil, minSeconds: Int32? = nil) {
            self.maxSeconds = maxSeconds
            self.minSeconds = minSeconds
        }

    }

    public struct TimestampRange: Serializable, Initializable {
        /// The minimum value of the timestamp range.
        var beginDate: Date? = nil
        /// The maximum value of the timestamp range.
        var endDate: Date? = nil

        public init() {}

        public init(beginDate: Date? = nil, endDate: Date? = nil) {
            self.beginDate = beginDate
            self.endDate = endDate
        }

    }

    public struct TelemetryMetadata: Serializable, Initializable {
        /// The data size of messages that the agent sends to the Amazon Inspector service.
        var dataSize: Int64? = nil
        /// The count of messages that the agent sends to the Amazon Inspector service.
        var count: Int64 = 0
        /// A specific type of behavioral data that is collected by the agent.
        var messageType: String = ""

        public init() {}

        public init(dataSize: Int64? = nil, count: Int64, messageType: String) {
            self.dataSize = dataSize
            self.count = count
            self.messageType = messageType
        }

    }

    public struct AssessmentTemplate: Serializable, Initializable {
        /// The ARN of the assessment target that corresponds to this assessment template.
        var assessmentTargetArn: String = ""
        /// The name of the assessment template.
        var name: String = ""
        /// The time at which the assessment template is created.
        var createdAt: Date = Date()
        /// The rules packages that are specified for this assessment template.
        var rulesPackageArns: [String] = []
        /// The duration in seconds specified for this assessment tempate. The default value is 3600 seconds (one hour). The maximum value is 86400 seconds (one day).
        var durationInSeconds: Int32 = 0
        /// The user-defined attributes that are assigned to every generated finding from the assessment run that uses this assessment template.
        var userAttributesForFindings: [Attribute] = []
        /// The ARN of the assessment template.
        var arn: String = ""

        public init() {}

        public init(assessmentTargetArn: String, name: String, createdAt: Date, rulesPackageArns: [String], durationInSeconds: Int32, userAttributesForFindings: [Attribute], arn: String) {
            self.assessmentTargetArn = assessmentTargetArn
            self.name = name
            self.createdAt = createdAt
            self.rulesPackageArns = rulesPackageArns
            self.durationInSeconds = durationInSeconds
            self.userAttributesForFindings = userAttributesForFindings
            self.arn = arn
        }

    }

    public struct RegisterCrossAccountAccessRoleRequest: Serializable, Initializable {
        /// The ARN of the IAM role that Amazon Inspector uses to list your EC2 instances during the assessment run or when you call the PreviewAgents action. 
        var roleArn: String = ""

        public init() {}

        public init(roleArn: String) {
            self.roleArn = roleArn
        }

    }

    public struct AssetAttributes: Serializable, Initializable {
        /// The Auto Scaling group of the EC2 instance where the finding is generated.
        var autoScalingGroup: String? = nil
        /// The hostname of the EC2 instance where the finding is generated.
        var hostname: String? = nil
        /// The ID of the Amazon Machine Image (AMI) that is installed on the EC2 instance where the finding is generated.
        var amiId: String? = nil
        /// The ID of the agent that is installed on the EC2 instance where the finding is generated.
        var agentId: String? = nil
        /// The schema version of this data type.
        var schemaVersion: Int32 = 0
        /// The list of IP v4 addresses of the EC2 instance where the finding is generated.
        var ipv4Addresses: [String]? = nil

        public init() {}

        public init(autoScalingGroup: String? = nil, hostname: String? = nil, amiId: String? = nil, agentId: String? = nil, schemaVersion: Int32, ipv4Addresses: [String]? = nil) {
            self.autoScalingGroup = autoScalingGroup
            self.hostname = hostname
            self.amiId = amiId
            self.agentId = agentId
            self.schemaVersion = schemaVersion
            self.ipv4Addresses = ipv4Addresses
        }

    }

    public struct ListAssessmentRunAgentsResponse: Serializable, Initializable {
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        var nextToken: String? = nil
        /// A list of ARNs that specifies the agents returned by the action.
        var assessmentRunAgents: [AssessmentRunAgent] = []

        public init() {}

        public init(nextToken: String? = nil, assessmentRunAgents: [AssessmentRunAgent]) {
            self.nextToken = nextToken
            self.assessmentRunAgents = assessmentRunAgents
        }

    }

    public struct ListAssessmentTargetsRequest: Serializable, Initializable {
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListAssessmentTargets action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        var nextToken: String? = nil
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        var maxResults: Int32? = nil
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        var filter: AssessmentTargetFilter? = nil

        public init() {}

        public init(nextToken: String? = nil, maxResults: Int32? = nil, filter: AssessmentTargetFilter? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.filter = filter
        }

    }

    public struct GetTelemetryMetadataResponse: Serializable, Initializable {
        /// Telemetry details.
        var telemetryMetadata: [TelemetryMetadata] = []

        public init() {}

        public init(telemetryMetadata: [TelemetryMetadata]) {
            self.telemetryMetadata = telemetryMetadata
        }

    }

    public struct CreateAssessmentTemplateRequest: Serializable, Initializable {
        /// The user-defined name that identifies the assessment template that you want to create. You can create several assessment templates for an assessment target. The names of the assessment templates that correspond to a particular assessment target must be unique.
        var assessmentTemplateName: String = ""
        /// The ARN that specifies the assessment target for which you want to create the assessment template.
        var assessmentTargetArn: String = ""
        /// The duration of the assessment run in seconds. The default value is 3600 seconds (one hour).
        var durationInSeconds: Int32 = 0
        /// The ARNs that specify the rules packages that you want to attach to the assessment template.
        var rulesPackageArns: [String] = []
        /// The user-defined attributes that are assigned to every finding that is generated by the assessment run that uses this assessment template.
        var userAttributesForFindings: [Attribute]? = nil

        public init() {}

        public init(assessmentTemplateName: String, assessmentTargetArn: String, durationInSeconds: Int32, rulesPackageArns: [String], userAttributesForFindings: [Attribute]? = nil) {
            self.assessmentTemplateName = assessmentTemplateName
            self.assessmentTargetArn = assessmentTargetArn
            self.durationInSeconds = durationInSeconds
            self.rulesPackageArns = rulesPackageArns
            self.userAttributesForFindings = userAttributesForFindings
        }

    }

    public struct StartAssessmentRunRequest: Serializable, Initializable {
        /// You can specify the name for the assessment run. The name must be unique for the assessment template whose ARN is used to start the assessment run.
        var assessmentRunName: String? = nil
        /// The ARN of the assessment template of the assessment run that you want to start.
        var assessmentTemplateArn: String = ""

        public init() {}

        public init(assessmentRunName: String? = nil, assessmentTemplateArn: String) {
            self.assessmentRunName = assessmentRunName
            self.assessmentTemplateArn = assessmentTemplateArn
        }

    }

    public struct AgentFilter: Serializable, Initializable {
        /// The detailed health state of the agent. Values can be set to IDLE, RUNNING, SHUTDOWN, UNHEALTHY, THROTTLED, and UNKNOWN. 
        var agentHealthCodes: [String] = []
        /// The current health state of the agent. Values can be set to HEALTHY or UNHEALTHY.
        var agentHealths: [String] = []

        public init() {}

        public init(agentHealthCodes: [String], agentHealths: [String]) {
            self.agentHealthCodes = agentHealthCodes
            self.agentHealths = agentHealths
        }

    }

    public struct SubscribeToEventRequest: Serializable, Initializable {
        /// The ARN of the assessment template that is used during the event for which you want to receive SNS notifications.
        var resourceArn: String = ""
        /// The event for which you want to receive SNS notifications.
        var event: String = ""
        /// The ARN of the SNS topic to which the SNS notifications are sent.
        var topicArn: String = ""

        public init() {}

        public init(resourceArn: String, event: String, topicArn: String) {
            self.resourceArn = resourceArn
            self.event = event
            self.topicArn = topicArn
        }

    }

    public struct CreateResourceGroupRequest: Serializable, Initializable {
        /// A collection of keys and an array of possible values, '[{"key":"key1","values":["Value1","Value2"]},{"key":"Key2","values":["Value3"]}]'. For example,'[{"key":"Name","values":["TestEC2Instance"]}]'.
        var resourceGroupTags: [ResourceGroupTag] = []

        public init() {}

        public init(resourceGroupTags: [ResourceGroupTag]) {
            self.resourceGroupTags = resourceGroupTags
        }

    }

    public struct DescribeFindingsResponse: Serializable, Initializable {
        /// Information about the finding.
        var findings: [Finding] = []
        /// Finding details that cannot be described. An error code is provided for each failed item.
        var failedItems: [String: FailedItemDetails] = [:]

        public init() {}

        public init(findings: [Finding], failedItems: [String: FailedItemDetails]) {
            self.findings = findings
            self.failedItems = failedItems
        }

    }

    public struct SetTagsForResourceRequest: Serializable, Initializable {
        /// The ARN of the assessment template that you want to set tags to.
        var resourceArn: String = ""
        /// A collection of key and value pairs that you want to set to the assessment template.
        var tags: [Tag]? = nil

        public init() {}

        public init(resourceArn: String, tags: [Tag]? = nil) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

    }

    public struct FailedItemDetails: Serializable, Initializable {
        /// The status code of a failed item.
        var failureCode: String = ""
        /// Indicates whether you can immediately retry a request for this item for a specified resource.
        var retryable: Bool = false

        public init() {}

        public init(failureCode: String, retryable: Bool) {
            self.failureCode = failureCode
            self.retryable = retryable
        }

    }

    public struct AssessmentRunNotification: Serializable, Initializable {
        /// The SNS topic to which the SNS notification is sent.
        var snsTopicArn: String? = nil
        /// The status code of the SNS notification.
        var snsPublishStatusCode: String? = nil
        /// The event for which a notification is sent.
        var event: String = ""
        var message: String? = nil
        /// The date of the notification.
        var date: Date = Date()
        /// The Boolean value that specifies whether the notification represents an error.
        var error: Bool = false

        public init() {}

        public init(snsTopicArn: String? = nil, snsPublishStatusCode: String? = nil, event: String, message: String? = nil, date: Date, error: Bool) {
            self.snsTopicArn = snsTopicArn
            self.snsPublishStatusCode = snsPublishStatusCode
            self.event = event
            self.message = message
            self.date = date
            self.error = error
        }

    }

    public struct ListAssessmentTemplatesRequest: Serializable, Initializable {
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        var maxResults: Int32? = nil
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        var filter: AssessmentTemplateFilter? = nil
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListAssessmentTemplates action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        var nextToken: String? = nil
        /// A list of ARNs that specifies the assessment targets whose assessment templates you want to list.
        var assessmentTargetArns: [String]? = nil

        public init() {}

        public init(maxResults: Int32? = nil, filter: AssessmentTemplateFilter? = nil, nextToken: String? = nil, assessmentTargetArns: [String]? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.assessmentTargetArns = assessmentTargetArns
        }

    }

    public struct StopAssessmentRunRequest: Serializable, Initializable {
        /// The ARN of the assessment run that you want to stop.
        var assessmentRunArn: String = ""

        public init() {}

        public init(assessmentRunArn: String) {
            self.assessmentRunArn = assessmentRunArn
        }

    }

    public struct ListRulesPackagesResponse: Serializable, Initializable {
        /// The list of ARNs that specifies the rules packages returned by the action.
        var rulesPackageArns: [String] = []
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        var nextToken: String? = nil

        public init() {}

        public init(rulesPackageArns: [String], nextToken: String? = nil) {
            self.rulesPackageArns = rulesPackageArns
            self.nextToken = nextToken
        }

    }

    public struct CreateAssessmentTargetRequest: Serializable, Initializable {
        /// The ARN that specifies the resource group that is used to create the assessment target.
        var resourceGroupArn: String = ""
        /// The user-defined name that identifies the assessment target that you want to create. The name must be unique within the AWS account.
        var assessmentTargetName: String = ""

        public init() {}

        public init(resourceGroupArn: String, assessmentTargetName: String) {
            self.resourceGroupArn = resourceGroupArn
            self.assessmentTargetName = assessmentTargetName
        }

    }

    public struct InspectorServiceAttributes: Serializable, Initializable {
        /// The schema version of this data type.
        var schemaVersion: Int32 = 0
        /// The ARN of the rules package that is used to generate the finding.
        var rulesPackageArn: String? = nil
        /// The ARN of the assessment run during which the finding is generated.
        var assessmentRunArn: String? = nil

        public init() {}

        public init(schemaVersion: Int32, rulesPackageArn: String? = nil, assessmentRunArn: String? = nil) {
            self.schemaVersion = schemaVersion
            self.rulesPackageArn = rulesPackageArn
            self.assessmentRunArn = assessmentRunArn
        }

    }

    public struct DescribeAssessmentTargetsResponse: Serializable, Initializable {
        /// Information about the assessment targets.
        var assessmentTargets: [AssessmentTarget] = []
        /// Assessment target details that cannot be described. An error code is provided for each failed item.
        var failedItems: [String: FailedItemDetails] = [:]

        public init() {}

        public init(assessmentTargets: [AssessmentTarget], failedItems: [String: FailedItemDetails]) {
            self.assessmentTargets = assessmentTargets
            self.failedItems = failedItems
        }

    }

    public struct DescribeFindingsRequest: Serializable, Initializable {
        /// The locale into which you want to translate a finding description, recommendation, and the short description that identifies the finding.
        var locale: String? = nil
        /// The ARN that specifies the finding that you want to describe.
        var findingArns: [String] = []

        public init() {}

        public init(locale: String? = nil, findingArns: [String]) {
            self.locale = locale
            self.findingArns = findingArns
        }

    }

}