// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Inspector {

    public struct DescribeRulesPackagesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN that specifies the rules package that you want to describe.
        public var rulesPackageArns: [String] = []
        /// The locale that you want to translate a rules package description into.
        public var locale: String? = nil

        public init() {}

        public init(rulesPackageArns: [String], locale: String? = nil) {
            self.rulesPackageArns = rulesPackageArns
            self.locale = locale
        }

        public init(dictionary: [String: Any]) throws {
            guard let rulesPackageArns = dictionary["rulesPackageArns"] as? [String] else { throw InitializableError.missingRequiredParam("rulesPackageArns") }
            self.rulesPackageArns = rulesPackageArns
            self.locale = dictionary["locale"] as? String
        }
    }

    public struct RemoveAttributesFromFindingsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Attributes details that cannot be described. An error code is provided for each failed item.
        public var failedItems: [String: FailedItemDetails] = [:]

        public init() {}

        public init(failedItems: [String: FailedItemDetails]) {
            self.failedItems = failedItems
        }

        public init(dictionary: [String: Any]) throws {
            guard let failedItems = dictionary["failedItems"] as? [String: Any] else { throw InitializableError.missingRequiredParam("failedItems") }
            var failedItemsDict: [String: FailedItemDetails] = [:]
            for (key, value) in failedItems {
                guard let failedItemDetailsDict = value as? [String: Any] else { throw InitializableError.convertingError }
                failedItemsDict[key] = try FailedItemDetails(dictionary: failedItemDetailsDict)
            }
            self.failedItems = failedItemsDict
        }
    }

    public struct DescribeResourceGroupsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN that specifies the resource group that you want to describe.
        public var resourceGroupArns: [String] = []

        public init() {}

        public init(resourceGroupArns: [String]) {
            self.resourceGroupArns = resourceGroupArns
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceGroupArns = dictionary["resourceGroupArns"] as? [String] else { throw InitializableError.missingRequiredParam("resourceGroupArns") }
            self.resourceGroupArns = resourceGroupArns
        }
    }

    public struct ListFindingsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        public var maxResults: Int32? = nil
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        public var filter: FindingFilter? = nil
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListFindings action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public var nextToken: String? = nil
        /// The ARNs of the assessment runs that generate the findings that you want to list.
        public var assessmentRunArns: [String]? = nil

        public init() {}

        public init(maxResults: Int32? = nil, filter: FindingFilter? = nil, nextToken: String? = nil, assessmentRunArns: [String]? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.assessmentRunArns = assessmentRunArns
        }

        public init(dictionary: [String: Any]) throws {
            self.maxResults = dictionary["maxResults"] as? Int32
            if let filter = dictionary["filter"] as? [String: Any] { self.filter = try Inspector.FindingFilter(dictionary: filter) }
            self.nextToken = dictionary["nextToken"] as? String
            if let assessmentRunArns = dictionary["assessmentRunArns"] as? [String] {
                self.assessmentRunArns = assessmentRunArns
            }
        }
    }

    public struct DescribeCrossAccountAccessRoleResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A Boolean value that specifies whether the IAM role has the necessary policies attached to enable Amazon Inspector to access your AWS account.
        public var valid: Bool = false
        /// The ARN that specifies the IAM role that Amazon Inspector uses to access your AWS account.
        public var roleArn: String = ""
        /// The date when the cross-account access role was registered.
        public var registeredAt: Date = Date()

        public init() {}

        public init(valid: Bool, roleArn: String, registeredAt: Date) {
            self.valid = valid
            self.roleArn = roleArn
            self.registeredAt = registeredAt
        }

        public init(dictionary: [String: Any]) throws {
            guard let valid = dictionary["valid"] as? Bool else { throw InitializableError.missingRequiredParam("valid") }
            self.valid = valid
            guard let roleArn = dictionary["roleArn"] as? String else { throw InitializableError.missingRequiredParam("roleArn") }
            self.roleArn = roleArn
            guard let registeredAt = dictionary["registeredAt"] as? Date else { throw InitializableError.missingRequiredParam("registeredAt") }
            self.registeredAt = registeredAt
        }
    }

    public struct PreviewAgentsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the assessment target whose agents you want to preview.
        public var previewAgentsArn: String = ""
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        public var maxResults: Int32? = nil
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the PreviewAgents action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public var nextToken: String? = nil

        public init() {}

        public init(previewAgentsArn: String, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.previewAgentsArn = previewAgentsArn
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let previewAgentsArn = dictionary["previewAgentsArn"] as? String else { throw InitializableError.missingRequiredParam("previewAgentsArn") }
            self.previewAgentsArn = previewAgentsArn
            self.maxResults = dictionary["maxResults"] as? Int32
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct DescribeRulesPackagesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the rules package.
        public var rulesPackages: [RulesPackage] = []
        /// Rules package details that cannot be described. An error code is provided for each failed item.
        public var failedItems: [String: FailedItemDetails] = [:]

        public init() {}

        public init(rulesPackages: [RulesPackage], failedItems: [String: FailedItemDetails]) {
            self.rulesPackages = rulesPackages
            self.failedItems = failedItems
        }

        public init(dictionary: [String: Any]) throws {
            guard let rulesPackages = dictionary["rulesPackages"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("rulesPackages") }
            self.rulesPackages = try rulesPackages.map({ try RulesPackage(dictionary: $0) })
            guard let failedItems = dictionary["failedItems"] as? [String: Any] else { throw InitializableError.missingRequiredParam("failedItems") }
            var failedItemsDict: [String: FailedItemDetails] = [:]
            for (key, value) in failedItems {
                guard let failedItemDetailsDict = value as? [String: Any] else { throw InitializableError.convertingError }
                failedItemsDict[key] = try FailedItemDetails(dictionary: failedItemDetailsDict)
            }
            self.failedItems = failedItemsDict
        }
    }

    public struct Subscription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the assessment template that is used during the event for which the SNS notification is sent.
        public var resourceArn: String = ""
        /// The list of existing event subscriptions.
        public var eventSubscriptions: [EventSubscription] = []
        /// The ARN of the Amazon Simple Notification Service (SNS) topic to which the SNS notifications are sent.
        public var topicArn: String = ""

        public init() {}

        public init(resourceArn: String, eventSubscriptions: [EventSubscription], topicArn: String) {
            self.resourceArn = resourceArn
            self.eventSubscriptions = eventSubscriptions
            self.topicArn = topicArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceArn = dictionary["resourceArn"] as? String else { throw InitializableError.missingRequiredParam("resourceArn") }
            self.resourceArn = resourceArn
            guard let eventSubscriptions = dictionary["eventSubscriptions"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("eventSubscriptions") }
            self.eventSubscriptions = try eventSubscriptions.map({ try EventSubscription(dictionary: $0) })
            guard let topicArn = dictionary["topicArn"] as? String else { throw InitializableError.missingRequiredParam("topicArn") }
            self.topicArn = topicArn
        }
    }

    public struct AssessmentTarget: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN that specifies the resource group that is associated with the assessment target.
        public var resourceGroupArn: String = ""
        /// The name of the Amazon Inspector assessment target.
        public var name: String = ""
        /// The time at which UpdateAssessmentTarget is called.
        public var updatedAt: Date = Date()
        /// The time at which the assessment target is created.
        public var createdAt: Date = Date()
        /// The ARN that specifies the Amazon Inspector assessment target.
        public var arn: String = ""

        public init() {}

        public init(resourceGroupArn: String, name: String, updatedAt: Date, createdAt: Date, arn: String) {
            self.resourceGroupArn = resourceGroupArn
            self.name = name
            self.updatedAt = updatedAt
            self.createdAt = createdAt
            self.arn = arn
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceGroupArn = dictionary["resourceGroupArn"] as? String else { throw InitializableError.missingRequiredParam("resourceGroupArn") }
            self.resourceGroupArn = resourceGroupArn
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            guard let updatedAt = dictionary["updatedAt"] as? Date else { throw InitializableError.missingRequiredParam("updatedAt") }
            self.updatedAt = updatedAt
            guard let createdAt = dictionary["createdAt"] as? Date else { throw InitializableError.missingRequiredParam("createdAt") }
            self.createdAt = createdAt
            guard let arn = dictionary["arn"] as? String else { throw InitializableError.missingRequiredParam("arn") }
            self.arn = arn
        }
    }

    public struct DescribeAssessmentTemplatesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public var assessmentTemplateArns: [String] = []

        public init() {}

        public init(assessmentTemplateArns: [String]) {
            self.assessmentTemplateArns = assessmentTemplateArns
        }

        public init(dictionary: [String: Any]) throws {
            guard let assessmentTemplateArns = dictionary["assessmentTemplateArns"] as? [String] else { throw InitializableError.missingRequiredParam("assessmentTemplateArns") }
            self.assessmentTemplateArns = assessmentTemplateArns
        }
    }

    public struct AddAttributesToFindingsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The array of attributes that you want to assign to specified findings.
        public var attributes: [Attribute] = []
        /// The ARNs that specify the findings that you want to assign attributes to.
        public var findingArns: [String] = []

        public init() {}

        public init(attributes: [Attribute], findingArns: [String]) {
            self.attributes = attributes
            self.findingArns = findingArns
        }

        public init(dictionary: [String: Any]) throws {
            guard let attributes = dictionary["attributes"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("attributes") }
            self.attributes = try attributes.map({ try Attribute(dictionary: $0) })
            guard let findingArns = dictionary["findingArns"] as? [String] else { throw InitializableError.missingRequiredParam("findingArns") }
            self.findingArns = findingArns
        }
    }

    public struct PreviewAgentsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public var nextToken: String? = nil
        /// The resulting list of agents.
        public var agentPreviews: [AgentPreview] = []

        public init() {}

        public init(nextToken: String? = nil, agentPreviews: [AgentPreview]) {
            self.nextToken = nextToken
            self.agentPreviews = agentPreviews
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            guard let agentPreviews = dictionary["agentPreviews"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("agentPreviews") }
            self.agentPreviews = try agentPreviews.map({ try AgentPreview(dictionary: $0) })
        }
    }

    public struct DescribeAssessmentRunsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Assessment run details that cannot be described. An error code is provided for each failed item.
        public var failedItems: [String: FailedItemDetails] = [:]
        /// Information about the assessment run.
        public var assessmentRuns: [AssessmentRun] = []

        public init() {}

        public init(failedItems: [String: FailedItemDetails], assessmentRuns: [AssessmentRun]) {
            self.failedItems = failedItems
            self.assessmentRuns = assessmentRuns
        }

        public init(dictionary: [String: Any]) throws {
            guard let failedItems = dictionary["failedItems"] as? [String: Any] else { throw InitializableError.missingRequiredParam("failedItems") }
            var failedItemsDict: [String: FailedItemDetails] = [:]
            for (key, value) in failedItems {
                guard let failedItemDetailsDict = value as? [String: Any] else { throw InitializableError.convertingError }
                failedItemsDict[key] = try FailedItemDetails(dictionary: failedItemDetailsDict)
            }
            self.failedItems = failedItemsDict
            guard let assessmentRuns = dictionary["assessmentRuns"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("assessmentRuns") }
            self.assessmentRuns = try assessmentRuns.map({ try AssessmentRun(dictionary: $0) })
        }
    }

    public struct EventSubscription: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The event for which Amazon Simple Notification Service (SNS) notifications are sent.
        public var event: String = ""
        /// The time at which SubscribeToEvent is called.
        public var subscribedAt: Date = Date()

        public init() {}

        public init(event: String, subscribedAt: Date) {
            self.event = event
            self.subscribedAt = subscribedAt
        }

        public init(dictionary: [String: Any]) throws {
            guard let event = dictionary["event"] as? String else { throw InitializableError.missingRequiredParam("event") }
            self.event = event
            guard let subscribedAt = dictionary["subscribedAt"] as? Date else { throw InitializableError.missingRequiredParam("subscribedAt") }
            self.subscribedAt = subscribedAt
        }
    }

    public struct CreateResourceGroupResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN that specifies the resource group that is created.
        public var resourceGroupArn: String = ""

        public init() {}

        public init(resourceGroupArn: String) {
            self.resourceGroupArn = resourceGroupArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceGroupArn = dictionary["resourceGroupArn"] as? String else { throw InitializableError.missingRequiredParam("resourceGroupArn") }
            self.resourceGroupArn = resourceGroupArn
        }
    }

    public struct ResourceGroupTag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A tag key.
        public var key: String = ""
        /// The value assigned to a tag key.
        public var value: String? = nil

        public init() {}

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        public init(dictionary: [String: Any]) throws {
            guard let key = dictionary["key"] as? String else { throw InitializableError.missingRequiredParam("key") }
            self.key = key
            self.value = dictionary["value"] as? String
        }
    }

    public struct RemoveAttributesFromFindingsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The array of attribute keys that you want to remove from specified findings.
        public var attributeKeys: [String] = []
        /// The ARNs that specify the findings that you want to remove attributes from.
        public var findingArns: [String] = []

        public init() {}

        public init(attributeKeys: [String], findingArns: [String]) {
            self.attributeKeys = attributeKeys
            self.findingArns = findingArns
        }

        public init(dictionary: [String: Any]) throws {
            guard let attributeKeys = dictionary["attributeKeys"] as? [String] else { throw InitializableError.missingRequiredParam("attributeKeys") }
            self.attributeKeys = attributeKeys
            guard let findingArns = dictionary["findingArns"] as? [String] else { throw InitializableError.missingRequiredParam("findingArns") }
            self.findingArns = findingArns
        }
    }

    public struct DescribeAssessmentRunsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN that specifies the assessment run that you want to describe.
        public var assessmentRunArns: [String] = []

        public init() {}

        public init(assessmentRunArns: [String]) {
            self.assessmentRunArns = assessmentRunArns
        }

        public init(dictionary: [String: Any]) throws {
            guard let assessmentRunArns = dictionary["assessmentRunArns"] as? [String] else { throw InitializableError.missingRequiredParam("assessmentRunArns") }
            self.assessmentRunArns = assessmentRunArns
        }
    }

    public struct ListAssessmentTemplatesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A list of ARNs that specifies the assessment templates returned by the action.
        public var assessmentTemplateArns: [String] = []
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public var nextToken: String? = nil

        public init() {}

        public init(assessmentTemplateArns: [String], nextToken: String? = nil) {
            self.assessmentTemplateArns = assessmentTemplateArns
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let assessmentTemplateArns = dictionary["assessmentTemplateArns"] as? [String] else { throw InitializableError.missingRequiredParam("assessmentTemplateArns") }
            self.assessmentTemplateArns = assessmentTemplateArns
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct DescribeAssessmentTemplatesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Assessment template details that cannot be described. An error code is provided for each failed item.
        public var failedItems: [String: FailedItemDetails] = [:]
        /// Information about the assessment templates.
        public var assessmentTemplates: [AssessmentTemplate] = []

        public init() {}

        public init(failedItems: [String: FailedItemDetails], assessmentTemplates: [AssessmentTemplate]) {
            self.failedItems = failedItems
            self.assessmentTemplates = assessmentTemplates
        }

        public init(dictionary: [String: Any]) throws {
            guard let failedItems = dictionary["failedItems"] as? [String: Any] else { throw InitializableError.missingRequiredParam("failedItems") }
            var failedItemsDict: [String: FailedItemDetails] = [:]
            for (key, value) in failedItems {
                guard let failedItemDetailsDict = value as? [String: Any] else { throw InitializableError.convertingError }
                failedItemsDict[key] = try FailedItemDetails(dictionary: failedItemDetailsDict)
            }
            self.failedItems = failedItemsDict
            guard let assessmentTemplates = dictionary["assessmentTemplates"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("assessmentTemplates") }
            self.assessmentTemplates = try assessmentTemplates.map({ try AssessmentTemplate(dictionary: $0) })
        }
    }

    public struct StartAssessmentRunResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the assessment run that has been started.
        public var assessmentRunArn: String = ""

        public init() {}

        public init(assessmentRunArn: String) {
            self.assessmentRunArn = assessmentRunArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let assessmentRunArn = dictionary["assessmentRunArn"] as? String else { throw InitializableError.missingRequiredParam("assessmentRunArn") }
            self.assessmentRunArn = assessmentRunArn
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A tag key.
        public var key: String = ""
        /// A value assigned to a tag key.
        public var value: String? = nil

        public init() {}

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        public init(dictionary: [String: Any]) throws {
            guard let key = dictionary["key"] as? String else { throw InitializableError.missingRequiredParam("key") }
            self.key = key
            self.value = dictionary["value"] as? String
        }
    }

    public struct ListAssessmentTargetsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public var nextToken: String? = nil
        /// A list of ARNs that specifies the assessment targets that are returned by the action.
        public var assessmentTargetArns: [String] = []

        public init() {}

        public init(nextToken: String? = nil, assessmentTargetArns: [String]) {
            self.nextToken = nextToken
            self.assessmentTargetArns = assessmentTargetArns
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            guard let assessmentTargetArns = dictionary["assessmentTargetArns"] as? [String] else { throw InitializableError.missingRequiredParam("assessmentTargetArns") }
            self.assessmentTargetArns = assessmentTargetArns
        }
    }

    public struct ResourceGroup: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The tags (key and value pairs) of the resource group. This data type property is used in the CreateResourceGroup action.
        public var tags: [ResourceGroupTag] = []
        /// The time at which resource group is created.
        public var createdAt: Date = Date()
        /// The ARN of the resource group.
        public var arn: String = ""

        public init() {}

        public init(tags: [ResourceGroupTag], createdAt: Date, arn: String) {
            self.tags = tags
            self.createdAt = createdAt
            self.arn = arn
        }

        public init(dictionary: [String: Any]) throws {
            guard let tags = dictionary["tags"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("tags") }
            self.tags = try tags.map({ try ResourceGroupTag(dictionary: $0) })
            guard let createdAt = dictionary["createdAt"] as? Date else { throw InitializableError.missingRequiredParam("createdAt") }
            self.createdAt = createdAt
            guard let arn = dictionary["arn"] as? String else { throw InitializableError.missingRequiredParam("arn") }
            self.arn = arn
        }
    }

    public struct UnsubscribeFromEventRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the assessment template that is used during the event for which you want to stop receiving SNS notifications.
        public var resourceArn: String = ""
        /// The event for which you want to stop receiving SNS notifications.
        public var event: String = ""
        /// The ARN of the SNS topic to which SNS notifications are sent.
        public var topicArn: String = ""

        public init() {}

        public init(resourceArn: String, event: String, topicArn: String) {
            self.resourceArn = resourceArn
            self.event = event
            self.topicArn = topicArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceArn = dictionary["resourceArn"] as? String else { throw InitializableError.missingRequiredParam("resourceArn") }
            self.resourceArn = resourceArn
            guard let event = dictionary["event"] as? String else { throw InitializableError.missingRequiredParam("event") }
            self.event = event
            guard let topicArn = dictionary["topicArn"] as? String else { throw InitializableError.missingRequiredParam("topicArn") }
            self.topicArn = topicArn
        }
    }

    public struct Attribute: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The attribute key.
        public var key: String = ""
        /// The value assigned to the attribute key.
        public var value: String? = nil

        public init() {}

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        public init(dictionary: [String: Any]) throws {
            guard let key = dictionary["key"] as? String else { throw InitializableError.missingRequiredParam("key") }
            self.key = key
            self.value = dictionary["value"] as? String
        }
    }

    public struct DeleteAssessmentTemplateRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN that specifies the assessment template that you want to delete.
        public var assessmentTemplateArn: String = ""

        public init() {}

        public init(assessmentTemplateArn: String) {
            self.assessmentTemplateArn = assessmentTemplateArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let assessmentTemplateArn = dictionary["assessmentTemplateArn"] as? String else { throw InitializableError.missingRequiredParam("assessmentTemplateArn") }
            self.assessmentTemplateArn = assessmentTemplateArn
        }
    }

    public struct DescribeAssessmentTargetsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARNs that specifies the assessment targets that you want to describe.
        public var assessmentTargetArns: [String] = []

        public init() {}

        public init(assessmentTargetArns: [String]) {
            self.assessmentTargetArns = assessmentTargetArns
        }

        public init(dictionary: [String: Any]) throws {
            guard let assessmentTargetArns = dictionary["assessmentTargetArns"] as? [String] else { throw InitializableError.missingRequiredParam("assessmentTargetArns") }
            self.assessmentTargetArns = assessmentTargetArns
        }
    }

    public struct DeleteAssessmentRunRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN that specifies the assessment run that you want to delete.
        public var assessmentRunArn: String = ""

        public init() {}

        public init(assessmentRunArn: String) {
            self.assessmentRunArn = assessmentRunArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let assessmentRunArn = dictionary["assessmentRunArn"] as? String else { throw InitializableError.missingRequiredParam("assessmentRunArn") }
            self.assessmentRunArn = assessmentRunArn
        }
    }

    public struct FindingFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the ruleName property of the Finding data type.
        public var ruleNames: [String]? = nil
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the severity property of the Finding data type.
        public var severities: [String]? = nil
        /// For a record to match a filter, the list of values that are specified for this data type property must be contained in the list of values of the attributes property of the Finding data type.
        public var attributes: [Attribute]? = nil
        /// For a record to match a filter, the value that is specified for this data type property must be contained in the list of values of the userAttributes property of the Finding data type.
        public var userAttributes: [Attribute]? = nil
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the agentId property of the Finding data type.
        public var agentIds: [String]? = nil
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the rulesPackageArn property of the Finding data type.
        public var rulesPackageArns: [String]? = nil
        /// The time range during which the finding is generated.
        public var creationTimeRange: TimestampRange? = nil
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the autoScalingGroup property of the Finding data type.
        public var autoScalingGroups: [String]? = nil

        public init() {}

        public init(ruleNames: [String]? = nil, severities: [String]? = nil, attributes: [Attribute]? = nil, userAttributes: [Attribute]? = nil, agentIds: [String]? = nil, rulesPackageArns: [String]? = nil, creationTimeRange: TimestampRange? = nil, autoScalingGroups: [String]? = nil) {
            self.ruleNames = ruleNames
            self.severities = severities
            self.attributes = attributes
            self.userAttributes = userAttributes
            self.agentIds = agentIds
            self.rulesPackageArns = rulesPackageArns
            self.creationTimeRange = creationTimeRange
            self.autoScalingGroups = autoScalingGroups
        }

        public init(dictionary: [String: Any]) throws {
            if let ruleNames = dictionary["ruleNames"] as? [String] {
                self.ruleNames = ruleNames
            }
            if let severities = dictionary["severities"] as? [String] {
                self.severities = severities
            }
            if let attributes = dictionary["attributes"] as? [[String: Any]] {
                self.attributes = try attributes.map({ try Attribute(dictionary: $0) })
            }
            if let userAttributes = dictionary["userAttributes"] as? [[String: Any]] {
                self.userAttributes = try userAttributes.map({ try Attribute(dictionary: $0) })
            }
            if let agentIds = dictionary["agentIds"] as? [String] {
                self.agentIds = agentIds
            }
            if let rulesPackageArns = dictionary["rulesPackageArns"] as? [String] {
                self.rulesPackageArns = rulesPackageArns
            }
            if let creationTimeRange = dictionary["creationTimeRange"] as? [String: Any] { self.creationTimeRange = try Inspector.TimestampRange(dictionary: creationTimeRange) }
            if let autoScalingGroups = dictionary["autoScalingGroups"] as? [String] {
                self.autoScalingGroups = autoScalingGroups
            }
        }
    }

    public struct RulesPackage: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The description of the rules package.
        public var description: String? = nil
        /// The name of the rules package.
        public var name: String = ""
        /// The version ID of the rules package.
        public var version: String = ""
        /// The provider of the rules package.
        public var provider: String = ""
        /// The ARN of the rules package.
        public var arn: String = ""

        public init() {}

        public init(description: String? = nil, name: String, version: String, provider: String, arn: String) {
            self.description = description
            self.name = name
            self.version = version
            self.provider = provider
            self.arn = arn
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["description"] as? String
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            guard let version = dictionary["version"] as? String else { throw InitializableError.missingRequiredParam("version") }
            self.version = version
            guard let provider = dictionary["provider"] as? String else { throw InitializableError.missingRequiredParam("provider") }
            self.provider = provider
            guard let arn = dictionary["arn"] as? String else { throw InitializableError.missingRequiredParam("arn") }
            self.arn = arn
        }
    }

    public struct AssessmentRunStateChange: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The assessment run state.
        public var state: String = ""
        /// The last time the assessment run state changed.
        public var stateChangedAt: Date = Date()

        public init() {}

        public init(state: String, stateChangedAt: Date) {
            self.state = state
            self.stateChangedAt = stateChangedAt
        }

        public init(dictionary: [String: Any]) throws {
            guard let state = dictionary["state"] as? String else { throw InitializableError.missingRequiredParam("state") }
            self.state = state
            guard let stateChangedAt = dictionary["stateChangedAt"] as? Date else { throw InitializableError.missingRequiredParam("stateChangedAt") }
            self.stateChangedAt = stateChangedAt
        }
    }

    public struct ListFindingsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public var nextToken: String? = nil
        /// A list of ARNs that specifies the findings returned by the action.
        public var findingArns: [String] = []

        public init() {}

        public init(nextToken: String? = nil, findingArns: [String]) {
            self.nextToken = nextToken
            self.findingArns = findingArns
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            guard let findingArns = dictionary["findingArns"] as? [String] else { throw InitializableError.missingRequiredParam("findingArns") }
            self.findingArns = findingArns
        }
    }

    public struct ListAssessmentRunsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 10. The maximum value is 500.
        public var maxResults: Int32? = nil
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        public var filter: AssessmentRunFilter? = nil
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListAssessmentRuns action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public var nextToken: String? = nil
        /// The ARNs that specify the assessment templates whose assessment runs you want to list.
        public var assessmentTemplateArns: [String]? = nil

        public init() {}

        public init(maxResults: Int32? = nil, filter: AssessmentRunFilter? = nil, nextToken: String? = nil, assessmentTemplateArns: [String]? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.assessmentTemplateArns = assessmentTemplateArns
        }

        public init(dictionary: [String: Any]) throws {
            self.maxResults = dictionary["maxResults"] as? Int32
            if let filter = dictionary["filter"] as? [String: Any] { self.filter = try Inspector.AssessmentRunFilter(dictionary: filter) }
            self.nextToken = dictionary["nextToken"] as? String
            if let assessmentTemplateArns = dictionary["assessmentTemplateArns"] as? [String] {
                self.assessmentTemplateArns = assessmentTemplateArns
            }
        }
    }

    public struct AgentPreview: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Auto Scaling group for the EC2 instance where the agent is installed.
        public var autoScalingGroup: String? = nil
        /// The ID of the EC2 instance where the agent is installed.
        public var agentId: String = ""

        public init() {}

        public init(autoScalingGroup: String? = nil, agentId: String) {
            self.autoScalingGroup = autoScalingGroup
            self.agentId = agentId
        }

        public init(dictionary: [String: Any]) throws {
            self.autoScalingGroup = dictionary["autoScalingGroup"] as? String
            guard let agentId = dictionary["agentId"] as? String else { throw InitializableError.missingRequiredParam("agentId") }
            self.agentId = agentId
        }
    }

    public struct ListRulesPackagesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListRulesPackages action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public var nextToken: String? = nil
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        public var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            self.maxResults = dictionary["maxResults"] as? Int32
        }
    }

    public struct AssessmentRunFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// For a record to match a filter, an explicit value or a string containing a wildcard that is specified for this data type property must match the value of the assessmentRunName property of the AssessmentRun data type.
        public var namePattern: String? = nil
        /// For a record to match a filter, one of the values specified for this data type property must be the exact match of the value of the assessmentRunState property of the AssessmentRun data type.
        public var states: [String]? = nil
        /// For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the startTime property of the AssessmentRun data type.
        public var startTimeRange: TimestampRange? = nil
        /// For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the durationInSeconds property of the AssessmentRun data type.
        public var durationRange: DurationRange? = nil
        /// For a record to match a filter, the value that is specified for this data type property must be contained in the list of values of the rulesPackages property of the AssessmentRun data type.
        public var rulesPackageArns: [String]? = nil
        /// For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the completedAt property of the AssessmentRun data type.
        public var completionTimeRange: TimestampRange? = nil
        /// For a record to match a filter, the value that is specified for this data type property must match the stateChangedAt property of the AssessmentRun data type.
        public var stateChangeTimeRange: TimestampRange? = nil

        public init() {}

        public init(namePattern: String? = nil, states: [String]? = nil, startTimeRange: TimestampRange? = nil, durationRange: DurationRange? = nil, rulesPackageArns: [String]? = nil, completionTimeRange: TimestampRange? = nil, stateChangeTimeRange: TimestampRange? = nil) {
            self.namePattern = namePattern
            self.states = states
            self.startTimeRange = startTimeRange
            self.durationRange = durationRange
            self.rulesPackageArns = rulesPackageArns
            self.completionTimeRange = completionTimeRange
            self.stateChangeTimeRange = stateChangeTimeRange
        }

        public init(dictionary: [String: Any]) throws {
            self.namePattern = dictionary["namePattern"] as? String
            if let states = dictionary["states"] as? [String] {
                self.states = states
            }
            if let startTimeRange = dictionary["startTimeRange"] as? [String: Any] { self.startTimeRange = try Inspector.TimestampRange(dictionary: startTimeRange) }
            if let durationRange = dictionary["durationRange"] as? [String: Any] { self.durationRange = try Inspector.DurationRange(dictionary: durationRange) }
            if let rulesPackageArns = dictionary["rulesPackageArns"] as? [String] {
                self.rulesPackageArns = rulesPackageArns
            }
            if let completionTimeRange = dictionary["completionTimeRange"] as? [String: Any] { self.completionTimeRange = try Inspector.TimestampRange(dictionary: completionTimeRange) }
            if let stateChangeTimeRange = dictionary["stateChangeTimeRange"] as? [String: Any] { self.stateChangeTimeRange = try Inspector.TimestampRange(dictionary: stateChangeTimeRange) }
        }
    }

    public struct GetTelemetryMetadataRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN that specifies the assessment run that has the telemetry data that you want to obtain.
        public var assessmentRunArn: String = ""

        public init() {}

        public init(assessmentRunArn: String) {
            self.assessmentRunArn = assessmentRunArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let assessmentRunArn = dictionary["assessmentRunArn"] as? String else { throw InitializableError.missingRequiredParam("assessmentRunArn") }
            self.assessmentRunArn = assessmentRunArn
        }
    }

    public struct AssessmentTargetFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// For a record to match a filter, an explicit value or a string that contains a wildcard that is specified for this data type property must match the value of the assessmentTargetName property of the AssessmentTarget data type.
        public var assessmentTargetNamePattern: String? = nil

        public init() {}

        public init(assessmentTargetNamePattern: String? = nil) {
            self.assessmentTargetNamePattern = assessmentTargetNamePattern
        }

        public init(dictionary: [String: Any]) throws {
            self.assessmentTargetNamePattern = dictionary["assessmentTargetNamePattern"] as? String
        }
    }

    public struct AssessmentRun: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The state of the assessment run.
        public var state: String = ""
        /// The auto-generated name for the assessment run.
        public var name: String = ""
        /// The time when StartAssessmentRun was called.
        public var createdAt: Date = Date()
        /// The time when StartAssessmentRun was called.
        public var startedAt: Date? = nil
        /// A list of notifications for the event subscriptions. A notification about a particular generated finding is added to this list only once.
        public var notifications: [AssessmentRunNotification] = []
        /// A Boolean value (true or false) that specifies whether the process of collecting data from the agents is completed.
        public var dataCollected: Bool = false
        /// The rules packages selected for the assessment run.
        public var rulesPackageArns: [String] = []
        /// The last time when the assessment run's state changed.
        public var stateChangedAt: Date = Date()
        /// The user-defined attributes that are assigned to every generated finding.
        public var userAttributesForFindings: [Attribute] = []
        /// The ARN of the assessment run.
        public var arn: String = ""
        /// A list of the assessment run state changes.
        public var stateChanges: [AssessmentRunStateChange] = []
        /// The assessment run completion time that corresponds to the rules packages evaluation completion time or failure.
        public var completedAt: Date? = nil
        /// The duration of the assessment run.
        public var durationInSeconds: Int32 = 0
        /// The ARN of the assessment template that is associated with the assessment run.
        public var assessmentTemplateArn: String = ""

        public init() {}

        public init(state: String, name: String, createdAt: Date, startedAt: Date? = nil, notifications: [AssessmentRunNotification], dataCollected: Bool, rulesPackageArns: [String], stateChangedAt: Date, userAttributesForFindings: [Attribute], arn: String, stateChanges: [AssessmentRunStateChange], completedAt: Date? = nil, durationInSeconds: Int32, assessmentTemplateArn: String) {
            self.state = state
            self.name = name
            self.createdAt = createdAt
            self.startedAt = startedAt
            self.notifications = notifications
            self.dataCollected = dataCollected
            self.rulesPackageArns = rulesPackageArns
            self.stateChangedAt = stateChangedAt
            self.userAttributesForFindings = userAttributesForFindings
            self.arn = arn
            self.stateChanges = stateChanges
            self.completedAt = completedAt
            self.durationInSeconds = durationInSeconds
            self.assessmentTemplateArn = assessmentTemplateArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let state = dictionary["state"] as? String else { throw InitializableError.missingRequiredParam("state") }
            self.state = state
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            guard let createdAt = dictionary["createdAt"] as? Date else { throw InitializableError.missingRequiredParam("createdAt") }
            self.createdAt = createdAt
            self.startedAt = dictionary["startedAt"] as? Date
            guard let notifications = dictionary["notifications"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("notifications") }
            self.notifications = try notifications.map({ try AssessmentRunNotification(dictionary: $0) })
            guard let dataCollected = dictionary["dataCollected"] as? Bool else { throw InitializableError.missingRequiredParam("dataCollected") }
            self.dataCollected = dataCollected
            guard let rulesPackageArns = dictionary["rulesPackageArns"] as? [String] else { throw InitializableError.missingRequiredParam("rulesPackageArns") }
            self.rulesPackageArns = rulesPackageArns
            guard let stateChangedAt = dictionary["stateChangedAt"] as? Date else { throw InitializableError.missingRequiredParam("stateChangedAt") }
            self.stateChangedAt = stateChangedAt
            guard let userAttributesForFindings = dictionary["userAttributesForFindings"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("userAttributesForFindings") }
            self.userAttributesForFindings = try userAttributesForFindings.map({ try Attribute(dictionary: $0) })
            guard let arn = dictionary["arn"] as? String else { throw InitializableError.missingRequiredParam("arn") }
            self.arn = arn
            guard let stateChanges = dictionary["stateChanges"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("stateChanges") }
            self.stateChanges = try stateChanges.map({ try AssessmentRunStateChange(dictionary: $0) })
            self.completedAt = dictionary["completedAt"] as? Date
            guard let durationInSeconds = dictionary["durationInSeconds"] as? Int32 else { throw InitializableError.missingRequiredParam("durationInSeconds") }
            self.durationInSeconds = durationInSeconds
            guard let assessmentTemplateArn = dictionary["assessmentTemplateArn"] as? String else { throw InitializableError.missingRequiredParam("assessmentTemplateArn") }
            self.assessmentTemplateArn = assessmentTemplateArn
        }
    }

    public struct ListEventSubscriptionsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Details of the returned event subscriptions.
        public var subscriptions: [Subscription] = []
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public var nextToken: String? = nil

        public init() {}

        public init(subscriptions: [Subscription], nextToken: String? = nil) {
            self.subscriptions = subscriptions
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let subscriptions = dictionary["subscriptions"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("subscriptions") }
            self.subscriptions = try subscriptions.map({ try Subscription(dictionary: $0) })
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct DeleteAssessmentTargetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN that specifies the assessment target that you want to delete.
        public var assessmentTargetArn: String = ""

        public init() {}

        public init(assessmentTargetArn: String) {
            self.assessmentTargetArn = assessmentTargetArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let assessmentTargetArn = dictionary["assessmentTargetArn"] as? String else { throw InitializableError.missingRequiredParam("assessmentTargetArn") }
            self.assessmentTargetArn = assessmentTargetArn
        }
    }

    public struct CreateAssessmentTemplateResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN that specifies the assessment template that is created.
        public var assessmentTemplateArn: String = ""

        public init() {}

        public init(assessmentTemplateArn: String) {
            self.assessmentTemplateArn = assessmentTemplateArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let assessmentTemplateArn = dictionary["assessmentTemplateArn"] as? String else { throw InitializableError.missingRequiredParam("assessmentTemplateArn") }
            self.assessmentTemplateArn = assessmentTemplateArn
        }
    }

    public struct Finding: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The type of the host from which the finding is generated.
        public var assetType: String? = nil
        /// The schema version of this data type.
        public var schemaVersion: Int32? = nil
        /// The user-defined attributes that are assigned to the finding.
        public var userAttributes: [Attribute] = []
        /// The recommendation for the finding.
        public var recommendation: String? = nil
        /// The time when the finding was generated.
        public var createdAt: Date = Date()
        /// The description of the finding.
        public var description: String? = nil
        public var serviceAttributes: InspectorServiceAttributes? = nil
        /// This data element is currently not used.
        public var indicatorOfCompromise: Bool? = nil
        /// The finding severity. Values can be set to High, Medium, Low, and Informational.
        public var severity: String? = nil
        /// A collection of attributes of the host from which the finding is generated.
        public var assetAttributes: AssetAttributes? = nil
        /// The numeric value of the finding severity.
        public var numericSeverity: Double? = nil
        /// The data element is set to "Inspector".
        public var service: String? = nil
        /// The ARN that specifies the finding.
        public var arn: String = ""
        /// The system-defined attributes for the finding.
        public var attributes: [Attribute] = []
        /// The ID of the finding.
        public var id: String? = nil
        /// The time when AddAttributesToFindings is called.
        public var updatedAt: Date = Date()
        /// The name of the finding.
        public var title: String? = nil
        /// This data element is currently not used.
        public var confidence: Int32? = nil

        public init() {}

        public init(assetType: String? = nil, schemaVersion: Int32? = nil, userAttributes: [Attribute], recommendation: String? = nil, createdAt: Date, description: String? = nil, serviceAttributes: InspectorServiceAttributes? = nil, indicatorOfCompromise: Bool? = nil, severity: String? = nil, assetAttributes: AssetAttributes? = nil, numericSeverity: Double? = nil, service: String? = nil, arn: String, attributes: [Attribute], id: String? = nil, updatedAt: Date, title: String? = nil, confidence: Int32? = nil) {
            self.assetType = assetType
            self.schemaVersion = schemaVersion
            self.userAttributes = userAttributes
            self.recommendation = recommendation
            self.createdAt = createdAt
            self.description = description
            self.serviceAttributes = serviceAttributes
            self.indicatorOfCompromise = indicatorOfCompromise
            self.severity = severity
            self.assetAttributes = assetAttributes
            self.numericSeverity = numericSeverity
            self.service = service
            self.arn = arn
            self.attributes = attributes
            self.id = id
            self.updatedAt = updatedAt
            self.title = title
            self.confidence = confidence
        }

        public init(dictionary: [String: Any]) throws {
            self.assetType = dictionary["assetType"] as? String
            self.schemaVersion = dictionary["schemaVersion"] as? Int32
            guard let userAttributes = dictionary["userAttributes"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("userAttributes") }
            self.userAttributes = try userAttributes.map({ try Attribute(dictionary: $0) })
            self.recommendation = dictionary["recommendation"] as? String
            guard let createdAt = dictionary["createdAt"] as? Date else { throw InitializableError.missingRequiredParam("createdAt") }
            self.createdAt = createdAt
            self.description = dictionary["description"] as? String
            if let serviceAttributes = dictionary["serviceAttributes"] as? [String: Any] { self.serviceAttributes = try Inspector.InspectorServiceAttributes(dictionary: serviceAttributes) }
            self.indicatorOfCompromise = dictionary["indicatorOfCompromise"] as? Bool
            self.severity = dictionary["severity"] as? String
            if let assetAttributes = dictionary["assetAttributes"] as? [String: Any] { self.assetAttributes = try Inspector.AssetAttributes(dictionary: assetAttributes) }
            self.numericSeverity = dictionary["numericSeverity"] as? Double
            self.service = dictionary["service"] as? String
            guard let arn = dictionary["arn"] as? String else { throw InitializableError.missingRequiredParam("arn") }
            self.arn = arn
            guard let attributes = dictionary["attributes"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("attributes") }
            self.attributes = try attributes.map({ try Attribute(dictionary: $0) })
            self.id = dictionary["id"] as? String
            guard let updatedAt = dictionary["updatedAt"] as? Date else { throw InitializableError.missingRequiredParam("updatedAt") }
            self.updatedAt = updatedAt
            self.title = dictionary["title"] as? String
            self.confidence = dictionary["confidence"] as? Int32
        }
    }

    public struct ListAssessmentRunAgentsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 10. The maximum value is 500.
        public var maxResults: Int32? = nil
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        public var filter: AgentFilter? = nil
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListAssessmentRunAgents action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public var nextToken: String? = nil
        /// The ARN that specifies the assessment run whose agents you want to list.
        public var assessmentRunArn: String = ""

        public init() {}

        public init(maxResults: Int32? = nil, filter: AgentFilter? = nil, nextToken: String? = nil, assessmentRunArn: String) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.assessmentRunArn = assessmentRunArn
        }

        public init(dictionary: [String: Any]) throws {
            self.maxResults = dictionary["maxResults"] as? Int32
            if let filter = dictionary["filter"] as? [String: Any] { self.filter = try Inspector.AgentFilter(dictionary: filter) }
            self.nextToken = dictionary["nextToken"] as? String
            guard let assessmentRunArn = dictionary["assessmentRunArn"] as? String else { throw InitializableError.missingRequiredParam("assessmentRunArn") }
            self.assessmentRunArn = assessmentRunArn
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN that specifies the assessment template whose tags you want to list.
        public var resourceArn: String = ""

        public init() {}

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceArn = dictionary["resourceArn"] as? String else { throw InitializableError.missingRequiredParam("resourceArn") }
            self.resourceArn = resourceArn
        }
    }

    public struct ListEventSubscriptionsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the assessment template for which you want to list the existing event subscriptions.
        public var resourceArn: String? = nil
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListEventSubscriptions action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public var nextToken: String? = nil
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        public var maxResults: Int32? = nil

        public init() {}

        public init(resourceArn: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.resourceArn = resourceArn
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.resourceArn = dictionary["resourceArn"] as? String
            self.nextToken = dictionary["nextToken"] as? String
            self.maxResults = dictionary["maxResults"] as? Int32
        }
    }

    public struct UpdateAssessmentTargetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the resource group that is used to specify the new resource group to associate with the assessment target.
        public var resourceGroupArn: String = ""
        /// The ARN of the assessment target that you want to update.
        public var assessmentTargetArn: String = ""
        /// The name of the assessment target that you want to update.
        public var assessmentTargetName: String = ""

        public init() {}

        public init(resourceGroupArn: String, assessmentTargetArn: String, assessmentTargetName: String) {
            self.resourceGroupArn = resourceGroupArn
            self.assessmentTargetArn = assessmentTargetArn
            self.assessmentTargetName = assessmentTargetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceGroupArn = dictionary["resourceGroupArn"] as? String else { throw InitializableError.missingRequiredParam("resourceGroupArn") }
            self.resourceGroupArn = resourceGroupArn
            guard let assessmentTargetArn = dictionary["assessmentTargetArn"] as? String else { throw InitializableError.missingRequiredParam("assessmentTargetArn") }
            self.assessmentTargetArn = assessmentTargetArn
            guard let assessmentTargetName = dictionary["assessmentTargetName"] as? String else { throw InitializableError.missingRequiredParam("assessmentTargetName") }
            self.assessmentTargetName = assessmentTargetName
        }
    }

    public struct AddAttributesToFindingsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Attribute details that cannot be described. An error code is provided for each failed item.
        public var failedItems: [String: FailedItemDetails] = [:]

        public init() {}

        public init(failedItems: [String: FailedItemDetails]) {
            self.failedItems = failedItems
        }

        public init(dictionary: [String: Any]) throws {
            guard let failedItems = dictionary["failedItems"] as? [String: Any] else { throw InitializableError.missingRequiredParam("failedItems") }
            var failedItemsDict: [String: FailedItemDetails] = [:]
            for (key, value) in failedItems {
                guard let failedItemDetailsDict = value as? [String: Any] else { throw InitializableError.convertingError }
                failedItemsDict[key] = try FailedItemDetails(dictionary: failedItemDetailsDict)
            }
            self.failedItems = failedItemsDict
        }
    }

    public struct CreateAssessmentTargetResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN that specifies the assessment target that is created.
        public var assessmentTargetArn: String = ""

        public init() {}

        public init(assessmentTargetArn: String) {
            self.assessmentTargetArn = assessmentTargetArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let assessmentTargetArn = dictionary["assessmentTargetArn"] as? String else { throw InitializableError.missingRequiredParam("assessmentTargetArn") }
            self.assessmentTargetArn = assessmentTargetArn
        }
    }

    public struct ListAssessmentRunsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public var nextToken: String? = nil
        /// A list of ARNs that specifies the assessment runs that are returned by the action.
        public var assessmentRunArns: [String] = []

        public init() {}

        public init(nextToken: String? = nil, assessmentRunArns: [String]) {
            self.nextToken = nextToken
            self.assessmentRunArns = assessmentRunArns
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            guard let assessmentRunArns = dictionary["assessmentRunArns"] as? [String] else { throw InitializableError.missingRequiredParam("assessmentRunArns") }
            self.assessmentRunArns = assessmentRunArns
        }
    }

    public struct AssessmentRunAgent: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Amazon Inspector application data metrics that are collected by the agent.
        public var telemetryMetadata: [TelemetryMetadata] = []
        /// The Auto Scaling group of the EC2 instance that is specified by the agent ID.
        public var autoScalingGroup: String? = nil
        /// The current health state of the agent.
        public var agentHealth: String = ""
        /// The description for the agent health code.
        public var agentHealthDetails: String? = nil
        /// The ARN of the assessment run that is associated with the agent.
        public var assessmentRunArn: String = ""
        /// The detailed health state of the agent.
        public var agentHealthCode: String = ""
        /// The AWS account of the EC2 instance where the agent is installed.
        public var agentId: String = ""

        public init() {}

        public init(telemetryMetadata: [TelemetryMetadata], autoScalingGroup: String? = nil, agentHealth: String, agentHealthDetails: String? = nil, assessmentRunArn: String, agentHealthCode: String, agentId: String) {
            self.telemetryMetadata = telemetryMetadata
            self.autoScalingGroup = autoScalingGroup
            self.agentHealth = agentHealth
            self.agentHealthDetails = agentHealthDetails
            self.assessmentRunArn = assessmentRunArn
            self.agentHealthCode = agentHealthCode
            self.agentId = agentId
        }

        public init(dictionary: [String: Any]) throws {
            guard let telemetryMetadata = dictionary["telemetryMetadata"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("telemetryMetadata") }
            self.telemetryMetadata = try telemetryMetadata.map({ try TelemetryMetadata(dictionary: $0) })
            self.autoScalingGroup = dictionary["autoScalingGroup"] as? String
            guard let agentHealth = dictionary["agentHealth"] as? String else { throw InitializableError.missingRequiredParam("agentHealth") }
            self.agentHealth = agentHealth
            self.agentHealthDetails = dictionary["agentHealthDetails"] as? String
            guard let assessmentRunArn = dictionary["assessmentRunArn"] as? String else { throw InitializableError.missingRequiredParam("assessmentRunArn") }
            self.assessmentRunArn = assessmentRunArn
            guard let agentHealthCode = dictionary["agentHealthCode"] as? String else { throw InitializableError.missingRequiredParam("agentHealthCode") }
            self.agentHealthCode = agentHealthCode
            guard let agentId = dictionary["agentId"] as? String else { throw InitializableError.missingRequiredParam("agentId") }
            self.agentId = agentId
        }
    }

    public struct DescribeResourceGroupsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Resource group details that cannot be described. An error code is provided for each failed item.
        public var failedItems: [String: FailedItemDetails] = [:]
        /// Information about a resource group.
        public var resourceGroups: [ResourceGroup] = []

        public init() {}

        public init(failedItems: [String: FailedItemDetails], resourceGroups: [ResourceGroup]) {
            self.failedItems = failedItems
            self.resourceGroups = resourceGroups
        }

        public init(dictionary: [String: Any]) throws {
            guard let failedItems = dictionary["failedItems"] as? [String: Any] else { throw InitializableError.missingRequiredParam("failedItems") }
            var failedItemsDict: [String: FailedItemDetails] = [:]
            for (key, value) in failedItems {
                guard let failedItemDetailsDict = value as? [String: Any] else { throw InitializableError.convertingError }
                failedItemsDict[key] = try FailedItemDetails(dictionary: failedItemDetailsDict)
            }
            self.failedItems = failedItemsDict
            guard let resourceGroups = dictionary["resourceGroups"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("resourceGroups") }
            self.resourceGroups = try resourceGroups.map({ try ResourceGroup(dictionary: $0) })
        }
    }

    public struct AssessmentTemplateFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// For a record to match a filter, an explicit value or a string that contains a wildcard that is specified for this data type property must match the value of the assessmentTemplateName property of the AssessmentTemplate data type.
        public var namePattern: String? = nil
        /// For a record to match a filter, the values that are specified for this data type property must be contained in the list of values of the rulesPackageArns property of the AssessmentTemplate data type.
        public var rulesPackageArns: [String]? = nil
        /// For a record to match a filter, the value specified for this data type property must inclusively match any value between the specified minimum and maximum values of the durationInSeconds property of the AssessmentTemplate data type.
        public var durationRange: DurationRange? = nil

        public init() {}

        public init(namePattern: String? = nil, rulesPackageArns: [String]? = nil, durationRange: DurationRange? = nil) {
            self.namePattern = namePattern
            self.rulesPackageArns = rulesPackageArns
            self.durationRange = durationRange
        }

        public init(dictionary: [String: Any]) throws {
            self.namePattern = dictionary["namePattern"] as? String
            if let rulesPackageArns = dictionary["rulesPackageArns"] as? [String] {
                self.rulesPackageArns = rulesPackageArns
            }
            if let durationRange = dictionary["durationRange"] as? [String: Any] { self.durationRange = try Inspector.DurationRange(dictionary: durationRange) }
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A collection of key and value pairs.
        public var tags: [Tag] = []

        public init() {}

        public init(tags: [Tag]) {
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            guard let tags = dictionary["tags"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("tags") }
            self.tags = try tags.map({ try Tag(dictionary: $0) })
        }
    }

    public struct AgentAlreadyRunningAssessment: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// ID of the agent that is running on an EC2 instance that is already participating in another started assessment run.
        public var agentId: String = ""
        /// The ARN of the assessment run that has already been started.
        public var assessmentRunArn: String = ""

        public init() {}

        public init(agentId: String, assessmentRunArn: String) {
            self.agentId = agentId
            self.assessmentRunArn = assessmentRunArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let agentId = dictionary["agentId"] as? String else { throw InitializableError.missingRequiredParam("agentId") }
            self.agentId = agentId
            guard let assessmentRunArn = dictionary["assessmentRunArn"] as? String else { throw InitializableError.missingRequiredParam("assessmentRunArn") }
            self.assessmentRunArn = assessmentRunArn
        }
    }

    public struct DurationRange: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The maximum value of the duration range. Must be less than or equal to 604800 seconds (1 week).
        public var maxSeconds: Int32? = nil
        /// The minimum value of the duration range. Must be greater than zero.
        public var minSeconds: Int32? = nil

        public init() {}

        public init(maxSeconds: Int32? = nil, minSeconds: Int32? = nil) {
            self.maxSeconds = maxSeconds
            self.minSeconds = minSeconds
        }

        public init(dictionary: [String: Any]) throws {
            self.maxSeconds = dictionary["maxSeconds"] as? Int32
            self.minSeconds = dictionary["minSeconds"] as? Int32
        }
    }

    public struct TimestampRange: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The minimum value of the timestamp range.
        public var beginDate: Date? = nil
        /// The maximum value of the timestamp range.
        public var endDate: Date? = nil

        public init() {}

        public init(beginDate: Date? = nil, endDate: Date? = nil) {
            self.beginDate = beginDate
            self.endDate = endDate
        }

        public init(dictionary: [String: Any]) throws {
            self.beginDate = dictionary["beginDate"] as? Date
            self.endDate = dictionary["endDate"] as? Date
        }
    }

    public struct TelemetryMetadata: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The data size of messages that the agent sends to the Amazon Inspector service.
        public var dataSize: Int64? = nil
        /// The count of messages that the agent sends to the Amazon Inspector service.
        public var count: Int64 = 0
        /// A specific type of behavioral data that is collected by the agent.
        public var messageType: String = ""

        public init() {}

        public init(dataSize: Int64? = nil, count: Int64, messageType: String) {
            self.dataSize = dataSize
            self.count = count
            self.messageType = messageType
        }

        public init(dictionary: [String: Any]) throws {
            self.dataSize = dictionary["dataSize"] as? Int64
            guard let count = dictionary["count"] as? Int64 else { throw InitializableError.missingRequiredParam("count") }
            self.count = count
            guard let messageType = dictionary["messageType"] as? String else { throw InitializableError.missingRequiredParam("messageType") }
            self.messageType = messageType
        }
    }

    public struct AssessmentTemplate: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the assessment target that corresponds to this assessment template.
        public var assessmentTargetArn: String = ""
        /// The name of the assessment template.
        public var name: String = ""
        /// The time at which the assessment template is created.
        public var createdAt: Date = Date()
        /// The rules packages that are specified for this assessment template.
        public var rulesPackageArns: [String] = []
        /// The duration in seconds specified for this assessment tempate. The default value is 3600 seconds (one hour). The maximum value is 86400 seconds (one day).
        public var durationInSeconds: Int32 = 0
        /// The user-defined attributes that are assigned to every generated finding from the assessment run that uses this assessment template.
        public var userAttributesForFindings: [Attribute] = []
        /// The ARN of the assessment template.
        public var arn: String = ""

        public init() {}

        public init(assessmentTargetArn: String, name: String, createdAt: Date, rulesPackageArns: [String], durationInSeconds: Int32, userAttributesForFindings: [Attribute], arn: String) {
            self.assessmentTargetArn = assessmentTargetArn
            self.name = name
            self.createdAt = createdAt
            self.rulesPackageArns = rulesPackageArns
            self.durationInSeconds = durationInSeconds
            self.userAttributesForFindings = userAttributesForFindings
            self.arn = arn
        }

        public init(dictionary: [String: Any]) throws {
            guard let assessmentTargetArn = dictionary["assessmentTargetArn"] as? String else { throw InitializableError.missingRequiredParam("assessmentTargetArn") }
            self.assessmentTargetArn = assessmentTargetArn
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            guard let createdAt = dictionary["createdAt"] as? Date else { throw InitializableError.missingRequiredParam("createdAt") }
            self.createdAt = createdAt
            guard let rulesPackageArns = dictionary["rulesPackageArns"] as? [String] else { throw InitializableError.missingRequiredParam("rulesPackageArns") }
            self.rulesPackageArns = rulesPackageArns
            guard let durationInSeconds = dictionary["durationInSeconds"] as? Int32 else { throw InitializableError.missingRequiredParam("durationInSeconds") }
            self.durationInSeconds = durationInSeconds
            guard let userAttributesForFindings = dictionary["userAttributesForFindings"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("userAttributesForFindings") }
            self.userAttributesForFindings = try userAttributesForFindings.map({ try Attribute(dictionary: $0) })
            guard let arn = dictionary["arn"] as? String else { throw InitializableError.missingRequiredParam("arn") }
            self.arn = arn
        }
    }

    public struct RegisterCrossAccountAccessRoleRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the IAM role that Amazon Inspector uses to list your EC2 instances during the assessment run or when you call the PreviewAgents action. 
        public var roleArn: String = ""

        public init() {}

        public init(roleArn: String) {
            self.roleArn = roleArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let roleArn = dictionary["roleArn"] as? String else { throw InitializableError.missingRequiredParam("roleArn") }
            self.roleArn = roleArn
        }
    }

    public struct AssetAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The Auto Scaling group of the EC2 instance where the finding is generated.
        public var autoScalingGroup: String? = nil
        /// The hostname of the EC2 instance where the finding is generated.
        public var hostname: String? = nil
        /// The ID of the Amazon Machine Image (AMI) that is installed on the EC2 instance where the finding is generated.
        public var amiId: String? = nil
        /// The ID of the agent that is installed on the EC2 instance where the finding is generated.
        public var agentId: String? = nil
        /// The schema version of this data type.
        public var schemaVersion: Int32 = 0
        /// The list of IP v4 addresses of the EC2 instance where the finding is generated.
        public var ipv4Addresses: [String]? = nil

        public init() {}

        public init(autoScalingGroup: String? = nil, hostname: String? = nil, amiId: String? = nil, agentId: String? = nil, schemaVersion: Int32, ipv4Addresses: [String]? = nil) {
            self.autoScalingGroup = autoScalingGroup
            self.hostname = hostname
            self.amiId = amiId
            self.agentId = agentId
            self.schemaVersion = schemaVersion
            self.ipv4Addresses = ipv4Addresses
        }

        public init(dictionary: [String: Any]) throws {
            self.autoScalingGroup = dictionary["autoScalingGroup"] as? String
            self.hostname = dictionary["hostname"] as? String
            self.amiId = dictionary["amiId"] as? String
            self.agentId = dictionary["agentId"] as? String
            guard let schemaVersion = dictionary["schemaVersion"] as? Int32 else { throw InitializableError.missingRequiredParam("schemaVersion") }
            self.schemaVersion = schemaVersion
            if let ipv4Addresses = dictionary["ipv4Addresses"] as? [String] {
                self.ipv4Addresses = ipv4Addresses
            }
        }
    }

    public struct ListAssessmentRunAgentsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public var nextToken: String? = nil
        /// A list of ARNs that specifies the agents returned by the action.
        public var assessmentRunAgents: [AssessmentRunAgent] = []

        public init() {}

        public init(nextToken: String? = nil, assessmentRunAgents: [AssessmentRunAgent]) {
            self.nextToken = nextToken
            self.assessmentRunAgents = assessmentRunAgents
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            guard let assessmentRunAgents = dictionary["assessmentRunAgents"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("assessmentRunAgents") }
            self.assessmentRunAgents = try assessmentRunAgents.map({ try AssessmentRunAgent(dictionary: $0) })
        }
    }

    public struct ListAssessmentTargetsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListAssessmentTargets action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public var nextToken: String? = nil
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        public var maxResults: Int32? = nil
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        public var filter: AssessmentTargetFilter? = nil

        public init() {}

        public init(nextToken: String? = nil, maxResults: Int32? = nil, filter: AssessmentTargetFilter? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.filter = filter
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            self.maxResults = dictionary["maxResults"] as? Int32
            if let filter = dictionary["filter"] as? [String: Any] { self.filter = try Inspector.AssessmentTargetFilter(dictionary: filter) }
        }
    }

    public struct GetTelemetryMetadataResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Telemetry details.
        public var telemetryMetadata: [TelemetryMetadata] = []

        public init() {}

        public init(telemetryMetadata: [TelemetryMetadata]) {
            self.telemetryMetadata = telemetryMetadata
        }

        public init(dictionary: [String: Any]) throws {
            guard let telemetryMetadata = dictionary["telemetryMetadata"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("telemetryMetadata") }
            self.telemetryMetadata = try telemetryMetadata.map({ try TelemetryMetadata(dictionary: $0) })
        }
    }

    public struct CreateAssessmentTemplateRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The user-defined name that identifies the assessment template that you want to create. You can create several assessment templates for an assessment target. The names of the assessment templates that correspond to a particular assessment target must be unique.
        public var assessmentTemplateName: String = ""
        /// The ARN that specifies the assessment target for which you want to create the assessment template.
        public var assessmentTargetArn: String = ""
        /// The duration of the assessment run in seconds. The default value is 3600 seconds (one hour).
        public var durationInSeconds: Int32 = 0
        /// The ARNs that specify the rules packages that you want to attach to the assessment template.
        public var rulesPackageArns: [String] = []
        /// The user-defined attributes that are assigned to every finding that is generated by the assessment run that uses this assessment template.
        public var userAttributesForFindings: [Attribute]? = nil

        public init() {}

        public init(assessmentTemplateName: String, assessmentTargetArn: String, durationInSeconds: Int32, rulesPackageArns: [String], userAttributesForFindings: [Attribute]? = nil) {
            self.assessmentTemplateName = assessmentTemplateName
            self.assessmentTargetArn = assessmentTargetArn
            self.durationInSeconds = durationInSeconds
            self.rulesPackageArns = rulesPackageArns
            self.userAttributesForFindings = userAttributesForFindings
        }

        public init(dictionary: [String: Any]) throws {
            guard let assessmentTemplateName = dictionary["assessmentTemplateName"] as? String else { throw InitializableError.missingRequiredParam("assessmentTemplateName") }
            self.assessmentTemplateName = assessmentTemplateName
            guard let assessmentTargetArn = dictionary["assessmentTargetArn"] as? String else { throw InitializableError.missingRequiredParam("assessmentTargetArn") }
            self.assessmentTargetArn = assessmentTargetArn
            guard let durationInSeconds = dictionary["durationInSeconds"] as? Int32 else { throw InitializableError.missingRequiredParam("durationInSeconds") }
            self.durationInSeconds = durationInSeconds
            guard let rulesPackageArns = dictionary["rulesPackageArns"] as? [String] else { throw InitializableError.missingRequiredParam("rulesPackageArns") }
            self.rulesPackageArns = rulesPackageArns
            if let userAttributesForFindings = dictionary["userAttributesForFindings"] as? [[String: Any]] {
                self.userAttributesForFindings = try userAttributesForFindings.map({ try Attribute(dictionary: $0) })
            }
        }
    }

    public struct StartAssessmentRunRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// You can specify the name for the assessment run. The name must be unique for the assessment template whose ARN is used to start the assessment run.
        public var assessmentRunName: String? = nil
        /// The ARN of the assessment template of the assessment run that you want to start.
        public var assessmentTemplateArn: String = ""

        public init() {}

        public init(assessmentRunName: String? = nil, assessmentTemplateArn: String) {
            self.assessmentRunName = assessmentRunName
            self.assessmentTemplateArn = assessmentTemplateArn
        }

        public init(dictionary: [String: Any]) throws {
            self.assessmentRunName = dictionary["assessmentRunName"] as? String
            guard let assessmentTemplateArn = dictionary["assessmentTemplateArn"] as? String else { throw InitializableError.missingRequiredParam("assessmentTemplateArn") }
            self.assessmentTemplateArn = assessmentTemplateArn
        }
    }

    public struct AgentFilter: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The detailed health state of the agent. Values can be set to IDLE, RUNNING, SHUTDOWN, UNHEALTHY, THROTTLED, and UNKNOWN. 
        public var agentHealthCodes: [String] = []
        /// The current health state of the agent. Values can be set to HEALTHY or UNHEALTHY.
        public var agentHealths: [String] = []

        public init() {}

        public init(agentHealthCodes: [String], agentHealths: [String]) {
            self.agentHealthCodes = agentHealthCodes
            self.agentHealths = agentHealths
        }

        public init(dictionary: [String: Any]) throws {
            guard let agentHealthCodes = dictionary["agentHealthCodes"] as? [String] else { throw InitializableError.missingRequiredParam("agentHealthCodes") }
            self.agentHealthCodes = agentHealthCodes
            guard let agentHealths = dictionary["agentHealths"] as? [String] else { throw InitializableError.missingRequiredParam("agentHealths") }
            self.agentHealths = agentHealths
        }
    }

    public struct SubscribeToEventRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the assessment template that is used during the event for which you want to receive SNS notifications.
        public var resourceArn: String = ""
        /// The event for which you want to receive SNS notifications.
        public var event: String = ""
        /// The ARN of the SNS topic to which the SNS notifications are sent.
        public var topicArn: String = ""

        public init() {}

        public init(resourceArn: String, event: String, topicArn: String) {
            self.resourceArn = resourceArn
            self.event = event
            self.topicArn = topicArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceArn = dictionary["resourceArn"] as? String else { throw InitializableError.missingRequiredParam("resourceArn") }
            self.resourceArn = resourceArn
            guard let event = dictionary["event"] as? String else { throw InitializableError.missingRequiredParam("event") }
            self.event = event
            guard let topicArn = dictionary["topicArn"] as? String else { throw InitializableError.missingRequiredParam("topicArn") }
            self.topicArn = topicArn
        }
    }

    public struct CreateResourceGroupRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// A collection of keys and an array of possible values, '[{"key":"key1","values":["Value1","Value2"]},{"key":"Key2","values":["Value3"]}]'. For example,'[{"key":"Name","values":["TestEC2Instance"]}]'.
        public var resourceGroupTags: [ResourceGroupTag] = []

        public init() {}

        public init(resourceGroupTags: [ResourceGroupTag]) {
            self.resourceGroupTags = resourceGroupTags
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceGroupTags = dictionary["resourceGroupTags"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("resourceGroupTags") }
            self.resourceGroupTags = try resourceGroupTags.map({ try ResourceGroupTag(dictionary: $0) })
        }
    }

    public struct DescribeFindingsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the finding.
        public var findings: [Finding] = []
        /// Finding details that cannot be described. An error code is provided for each failed item.
        public var failedItems: [String: FailedItemDetails] = [:]

        public init() {}

        public init(findings: [Finding], failedItems: [String: FailedItemDetails]) {
            self.findings = findings
            self.failedItems = failedItems
        }

        public init(dictionary: [String: Any]) throws {
            guard let findings = dictionary["findings"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("findings") }
            self.findings = try findings.map({ try Finding(dictionary: $0) })
            guard let failedItems = dictionary["failedItems"] as? [String: Any] else { throw InitializableError.missingRequiredParam("failedItems") }
            var failedItemsDict: [String: FailedItemDetails] = [:]
            for (key, value) in failedItems {
                guard let failedItemDetailsDict = value as? [String: Any] else { throw InitializableError.convertingError }
                failedItemsDict[key] = try FailedItemDetails(dictionary: failedItemDetailsDict)
            }
            self.failedItems = failedItemsDict
        }
    }

    public struct SetTagsForResourceRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the assessment template that you want to set tags to.
        public var resourceArn: String = ""
        /// A collection of key and value pairs that you want to set to the assessment template.
        public var tags: [Tag]? = nil

        public init() {}

        public init(resourceArn: String, tags: [Tag]? = nil) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceArn = dictionary["resourceArn"] as? String else { throw InitializableError.missingRequiredParam("resourceArn") }
            self.resourceArn = resourceArn
            if let tags = dictionary["tags"] as? [[String: Any]] {
                self.tags = try tags.map({ try Tag(dictionary: $0) })
            }
        }
    }

    public struct FailedItemDetails: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The status code of a failed item.
        public var failureCode: String = ""
        /// Indicates whether you can immediately retry a request for this item for a specified resource.
        public var retryable: Bool = false

        public init() {}

        public init(failureCode: String, retryable: Bool) {
            self.failureCode = failureCode
            self.retryable = retryable
        }

        public init(dictionary: [String: Any]) throws {
            guard let failureCode = dictionary["failureCode"] as? String else { throw InitializableError.missingRequiredParam("failureCode") }
            self.failureCode = failureCode
            guard let retryable = dictionary["retryable"] as? Bool else { throw InitializableError.missingRequiredParam("retryable") }
            self.retryable = retryable
        }
    }

    public struct AssessmentRunNotification: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The SNS topic to which the SNS notification is sent.
        public var snsTopicArn: String? = nil
        /// The status code of the SNS notification.
        public var snsPublishStatusCode: String? = nil
        /// The event for which a notification is sent.
        public var event: String = ""
        public var message: String? = nil
        /// The date of the notification.
        public var date: Date = Date()
        /// The Boolean value that specifies whether the notification represents an error.
        public var error: Bool = false

        public init() {}

        public init(snsTopicArn: String? = nil, snsPublishStatusCode: String? = nil, event: String, message: String? = nil, date: Date, error: Bool) {
            self.snsTopicArn = snsTopicArn
            self.snsPublishStatusCode = snsPublishStatusCode
            self.event = event
            self.message = message
            self.date = date
            self.error = error
        }

        public init(dictionary: [String: Any]) throws {
            self.snsTopicArn = dictionary["snsTopicArn"] as? String
            self.snsPublishStatusCode = dictionary["snsPublishStatusCode"] as? String
            guard let event = dictionary["event"] as? String else { throw InitializableError.missingRequiredParam("event") }
            self.event = event
            self.message = dictionary["message"] as? String
            guard let date = dictionary["date"] as? Date else { throw InitializableError.missingRequiredParam("date") }
            self.date = date
            guard let error = dictionary["error"] as? Bool else { throw InitializableError.missingRequiredParam("error") }
            self.error = error
        }
    }

    public struct ListAssessmentTemplatesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        public var maxResults: Int32? = nil
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        public var filter: AssessmentTemplateFilter? = nil
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListAssessmentTemplates action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public var nextToken: String? = nil
        /// A list of ARNs that specifies the assessment targets whose assessment templates you want to list.
        public var assessmentTargetArns: [String]? = nil

        public init() {}

        public init(maxResults: Int32? = nil, filter: AssessmentTemplateFilter? = nil, nextToken: String? = nil, assessmentTargetArns: [String]? = nil) {
            self.maxResults = maxResults
            self.filter = filter
            self.nextToken = nextToken
            self.assessmentTargetArns = assessmentTargetArns
        }

        public init(dictionary: [String: Any]) throws {
            self.maxResults = dictionary["maxResults"] as? Int32
            if let filter = dictionary["filter"] as? [String: Any] { self.filter = try Inspector.AssessmentTemplateFilter(dictionary: filter) }
            self.nextToken = dictionary["nextToken"] as? String
            if let assessmentTargetArns = dictionary["assessmentTargetArns"] as? [String] {
                self.assessmentTargetArns = assessmentTargetArns
            }
        }
    }

    public struct StopAssessmentRunRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN of the assessment run that you want to stop.
        public var assessmentRunArn: String = ""

        public init() {}

        public init(assessmentRunArn: String) {
            self.assessmentRunArn = assessmentRunArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let assessmentRunArn = dictionary["assessmentRunArn"] as? String else { throw InitializableError.missingRequiredParam("assessmentRunArn") }
            self.assessmentRunArn = assessmentRunArn
        }
    }

    public struct ListRulesPackagesResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The list of ARNs that specifies the rules packages returned by the action.
        public var rulesPackageArns: [String] = []
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public var nextToken: String? = nil

        public init() {}

        public init(rulesPackageArns: [String], nextToken: String? = nil) {
            self.rulesPackageArns = rulesPackageArns
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let rulesPackageArns = dictionary["rulesPackageArns"] as? [String] else { throw InitializableError.missingRequiredParam("rulesPackageArns") }
            self.rulesPackageArns = rulesPackageArns
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct CreateAssessmentTargetRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The ARN that specifies the resource group that is used to create the assessment target.
        public var resourceGroupArn: String = ""
        /// The user-defined name that identifies the assessment target that you want to create. The name must be unique within the AWS account.
        public var assessmentTargetName: String = ""

        public init() {}

        public init(resourceGroupArn: String, assessmentTargetName: String) {
            self.resourceGroupArn = resourceGroupArn
            self.assessmentTargetName = assessmentTargetName
        }

        public init(dictionary: [String: Any]) throws {
            guard let resourceGroupArn = dictionary["resourceGroupArn"] as? String else { throw InitializableError.missingRequiredParam("resourceGroupArn") }
            self.resourceGroupArn = resourceGroupArn
            guard let assessmentTargetName = dictionary["assessmentTargetName"] as? String else { throw InitializableError.missingRequiredParam("assessmentTargetName") }
            self.assessmentTargetName = assessmentTargetName
        }
    }

    public struct InspectorServiceAttributes: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The schema version of this data type.
        public var schemaVersion: Int32 = 0
        /// The ARN of the rules package that is used to generate the finding.
        public var rulesPackageArn: String? = nil
        /// The ARN of the assessment run during which the finding is generated.
        public var assessmentRunArn: String? = nil

        public init() {}

        public init(schemaVersion: Int32, rulesPackageArn: String? = nil, assessmentRunArn: String? = nil) {
            self.schemaVersion = schemaVersion
            self.rulesPackageArn = rulesPackageArn
            self.assessmentRunArn = assessmentRunArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let schemaVersion = dictionary["schemaVersion"] as? Int32 else { throw InitializableError.missingRequiredParam("schemaVersion") }
            self.schemaVersion = schemaVersion
            self.rulesPackageArn = dictionary["rulesPackageArn"] as? String
            self.assessmentRunArn = dictionary["assessmentRunArn"] as? String
        }
    }

    public struct DescribeAssessmentTargetsResponse: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// Information about the assessment targets.
        public var assessmentTargets: [AssessmentTarget] = []
        /// Assessment target details that cannot be described. An error code is provided for each failed item.
        public var failedItems: [String: FailedItemDetails] = [:]

        public init() {}

        public init(assessmentTargets: [AssessmentTarget], failedItems: [String: FailedItemDetails]) {
            self.assessmentTargets = assessmentTargets
            self.failedItems = failedItems
        }

        public init(dictionary: [String: Any]) throws {
            guard let assessmentTargets = dictionary["assessmentTargets"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("assessmentTargets") }
            self.assessmentTargets = try assessmentTargets.map({ try AssessmentTarget(dictionary: $0) })
            guard let failedItems = dictionary["failedItems"] as? [String: Any] else { throw InitializableError.missingRequiredParam("failedItems") }
            var failedItemsDict: [String: FailedItemDetails] = [:]
            for (key, value) in failedItems {
                guard let failedItemDetailsDict = value as? [String: Any] else { throw InitializableError.convertingError }
                failedItemsDict[key] = try FailedItemDetails(dictionary: failedItemDetailsDict)
            }
            self.failedItems = failedItemsDict
        }
    }

    public struct DescribeFindingsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        /// The locale into which you want to translate a finding description, recommendation, and the short description that identifies the finding.
        public var locale: String? = nil
        /// The ARN that specifies the finding that you want to describe.
        public var findingArns: [String] = []

        public init() {}

        public init(locale: String? = nil, findingArns: [String]) {
            self.locale = locale
            self.findingArns = findingArns
        }

        public init(dictionary: [String: Any]) throws {
            self.locale = dictionary["locale"] as? String
            guard let findingArns = dictionary["findingArns"] as? [String] else { throw InitializableError.missingRequiredParam("findingArns") }
            self.findingArns = findingArns
        }
    }

}