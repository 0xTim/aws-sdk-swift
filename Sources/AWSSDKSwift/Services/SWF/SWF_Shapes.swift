// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension SWF {

    public struct RespondActivityTaskCompletedInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskToken", required: true, type: .string), 
            AWSShapeMember(label: "result", required: false, type: .string)
        ]
        /// The taskToken of the ActivityTask.   taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results. 
        public let taskToken: String
        /// The result of the activity task. It is a free form string that is implementation specific.
        public let result: String?

        public init(taskToken: String, result: String? = nil) {
            self.taskToken = taskToken
            self.result = result
        }

        private enum CodingKeys: String, CodingKey {
            case taskToken = "taskToken"
            case result = "result"
        }
    }

    public struct RegisterActivityTypeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "version", required: true, type: .string), 
            AWSShapeMember(label: "domain", required: true, type: .string), 
            AWSShapeMember(label: "defaultTaskScheduleToStartTimeout", required: false, type: .string), 
            AWSShapeMember(label: "defaultTaskStartToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "defaultTaskScheduleToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "defaultTaskList", required: false, type: .structure), 
            AWSShapeMember(label: "defaultTaskHeartbeatTimeout", required: false, type: .string), 
            AWSShapeMember(label: "defaultTaskPriority", required: false, type: .string)
        ]
        /// The version of the activity type.  The activity type consists of the name and version, the combination of which must be unique within the domain.  The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        public let version: String
        /// The name of the domain in which this activity is to be registered.
        public let domain: String
        /// If set, specifies the default maximum duration that a task of this activity type can wait before being assigned to a worker. This default can be overridden when scheduling an activity task using the ScheduleActivityTask Decision. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let defaultTaskScheduleToStartTimeout: String?
        /// If set, specifies the default maximum duration that a worker can take to process tasks of this activity type. This default can be overridden when scheduling an activity task using the ScheduleActivityTask Decision. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let defaultTaskStartToCloseTimeout: String?
        /// The name of the activity type within the domain. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        public let name: String
        /// A textual description of the activity type.
        public let description: String?
        /// If set, specifies the default maximum duration for a task of this activity type. This default can be overridden when scheduling an activity task using the ScheduleActivityTask Decision. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let defaultTaskScheduleToCloseTimeout: String?
        /// If set, specifies the default task list to use for scheduling tasks of this activity type. This default task list is used if a task list isn't provided when a task is scheduled through the ScheduleActivityTask Decision.
        public let defaultTaskList: TaskList?
        /// If set, specifies the default maximum time before which a worker processing a task of this type must report progress by calling RecordActivityTaskHeartbeat. If the timeout is exceeded, the activity task is automatically timed out. This default can be overridden when scheduling an activity task using the ScheduleActivityTask Decision. If the activity worker subsequently attempts to record a heartbeat or returns a result, the activity worker receives an UnknownResource fault. In this case, Amazon SWF no longer considers the activity task to be valid; the activity worker should clean up the activity task. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let defaultTaskHeartbeatTimeout: String?
        /// The default task priority to assign to the activity type. If not assigned, then 0 is used. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the in the Amazon SWF Developer Guide..
        public let defaultTaskPriority: String?

        public init(version: String, domain: String, defaultTaskScheduleToStartTimeout: String? = nil, defaultTaskStartToCloseTimeout: String? = nil, name: String, description: String? = nil, defaultTaskScheduleToCloseTimeout: String? = nil, defaultTaskList: TaskList? = nil, defaultTaskHeartbeatTimeout: String? = nil, defaultTaskPriority: String? = nil) {
            self.version = version
            self.domain = domain
            self.defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeout
            self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
            self.name = name
            self.description = description
            self.defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeout
            self.defaultTaskList = defaultTaskList
            self.defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeout
            self.defaultTaskPriority = defaultTaskPriority
        }

        private enum CodingKeys: String, CodingKey {
            case version = "version"
            case domain = "domain"
            case defaultTaskScheduleToStartTimeout = "defaultTaskScheduleToStartTimeout"
            case defaultTaskStartToCloseTimeout = "defaultTaskStartToCloseTimeout"
            case name = "name"
            case description = "description"
            case defaultTaskScheduleToCloseTimeout = "defaultTaskScheduleToCloseTimeout"
            case defaultTaskList = "defaultTaskList"
            case defaultTaskHeartbeatTimeout = "defaultTaskHeartbeatTimeout"
            case defaultTaskPriority = "defaultTaskPriority"
        }
    }

    public struct PollForActivityTaskInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskList", required: true, type: .structure), 
            AWSShapeMember(label: "identity", required: false, type: .string), 
            AWSShapeMember(label: "domain", required: true, type: .string)
        ]
        /// Specifies the task list to poll for activity tasks. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        public let taskList: TaskList
        /// Identity of the worker making the request, recorded in the ActivityTaskStarted event in the workflow history. This enables diagnostic tracing when problems arise. The form of this identity is user defined.
        public let identity: String?
        /// The name of the domain that contains the task lists being polled.
        public let domain: String

        public init(taskList: TaskList, identity: String? = nil, domain: String) {
            self.taskList = taskList
            self.identity = identity
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case taskList = "taskList"
            case identity = "identity"
            case domain = "domain"
        }
    }

    public struct RegisterWorkflowTypeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "version", required: true, type: .string), 
            AWSShapeMember(label: "domain", required: true, type: .string), 
            AWSShapeMember(label: "defaultExecutionStartToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "defaultTaskStartToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "defaultChildPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "defaultLambdaRole", required: false, type: .string), 
            AWSShapeMember(label: "defaultTaskList", required: false, type: .structure), 
            AWSShapeMember(label: "defaultTaskPriority", required: false, type: .string)
        ]
        /// The version of the workflow type.  The workflow type consists of the name and version, the combination of which must be unique within the domain. To get a list of all currently registered workflow types, use the ListWorkflowTypes action.  The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        public let version: String
        /// The name of the domain in which to register the workflow type.
        public let domain: String
        /// If set, specifies the default maximum duration for executions of this workflow type. You can override this default when starting an execution through the StartWorkflowExecution Action or StartChildWorkflowExecution Decision. The duration is specified in seconds; an integer greater than or equal to 0. Unlike some of the other timeout parameters in Amazon SWF, you cannot specify a value of "NONE" for defaultExecutionStartToCloseTimeout; there is a one-year max limit on the time that a workflow execution can run. Exceeding this limit always causes the workflow execution to time out.
        public let defaultExecutionStartToCloseTimeout: String?
        /// If set, specifies the default maximum duration of decision tasks for this workflow type. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution Decision. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let defaultTaskStartToCloseTimeout: String?
        /// If set, specifies the default policy to use for the child workflow executions when a workflow execution of this type is terminated, by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution Decision. The supported child policies are:    TERMINATE – The child executions are terminated.    REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.    ABANDON – No action is taken. The child executions continue to run.  
        public let defaultChildPolicy: ChildPolicy?
        /// Textual description of the workflow type.
        public let description: String?
        /// The name of the workflow type. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        public let name: String
        /// The default IAM role attached to this workflow type.  Executions of this workflow type need IAM roles to invoke Lambda functions. If you don't specify an IAM role when you start this workflow type, the default Lambda role is attached to the execution. For more information, see http://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html in the Amazon SWF Developer Guide. 
        public let defaultLambdaRole: String?
        /// If set, specifies the default task list to use for scheduling decision tasks for executions of this workflow type. This default is used only if a task list isn't provided when starting the execution through the StartWorkflowExecution Action or StartChildWorkflowExecution Decision.
        public let defaultTaskList: TaskList?
        /// The default task priority to assign to the workflow type. If not assigned, then 0 is used. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon SWF Developer Guide.
        public let defaultTaskPriority: String?

        public init(version: String, domain: String, defaultExecutionStartToCloseTimeout: String? = nil, defaultTaskStartToCloseTimeout: String? = nil, defaultChildPolicy: ChildPolicy? = nil, description: String? = nil, name: String, defaultLambdaRole: String? = nil, defaultTaskList: TaskList? = nil, defaultTaskPriority: String? = nil) {
            self.version = version
            self.domain = domain
            self.defaultExecutionStartToCloseTimeout = defaultExecutionStartToCloseTimeout
            self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
            self.defaultChildPolicy = defaultChildPolicy
            self.description = description
            self.name = name
            self.defaultLambdaRole = defaultLambdaRole
            self.defaultTaskList = defaultTaskList
            self.defaultTaskPriority = defaultTaskPriority
        }

        private enum CodingKeys: String, CodingKey {
            case version = "version"
            case domain = "domain"
            case defaultExecutionStartToCloseTimeout = "defaultExecutionStartToCloseTimeout"
            case defaultTaskStartToCloseTimeout = "defaultTaskStartToCloseTimeout"
            case defaultChildPolicy = "defaultChildPolicy"
            case description = "description"
            case name = "name"
            case defaultLambdaRole = "defaultLambdaRole"
            case defaultTaskList = "defaultTaskList"
            case defaultTaskPriority = "defaultTaskPriority"
        }
    }

    public struct RecordMarkerFailedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cause", required: true, type: .enum), 
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "markerName", required: true, type: .string)
        ]
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.  If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows in the Amazon SWF Developer Guide. 
        public let cause: RecordMarkerFailedCause
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RecordMarkerFailed decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The marker's name.
        public let markerName: String

        public init(cause: RecordMarkerFailedCause, decisionTaskCompletedEventId: Int64, markerName: String) {
            self.cause = cause
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.markerName = markerName
        }

        private enum CodingKeys: String, CodingKey {
            case cause = "cause"
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case markerName = "markerName"
        }
    }

    public struct RespondDecisionTaskCompletedInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskToken", required: true, type: .string), 
            AWSShapeMember(label: "decisions", required: false, type: .list), 
            AWSShapeMember(label: "executionContext", required: false, type: .string)
        ]
        /// The taskToken from the DecisionTask.   taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results. 
        public let taskToken: String
        /// The list of decisions (possibly empty) made by the decider while processing this decision task. See the docs for the Decision structure for details.
        public let decisions: [Decision]?
        /// User defined context to add to workflow execution.
        public let executionContext: String?

        public init(taskToken: String, decisions: [Decision]? = nil, executionContext: String? = nil) {
            self.taskToken = taskToken
            self.decisions = decisions
            self.executionContext = executionContext
        }

        private enum CodingKeys: String, CodingKey {
            case taskToken = "taskToken"
            case decisions = "decisions"
            case executionContext = "executionContext"
        }
    }

    public struct CloseStatusFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: true, type: .enum)
        ]
        ///  The close status that must match the close status of an execution for it to meet the criteria of this filter.
        public let status: CloseStatus

        public init(status: CloseStatus) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
        }
    }

    public struct RequestCancelExternalWorkflowExecutionInitiatedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "workflowId", required: true, type: .string), 
            AWSShapeMember(label: "control", required: false, type: .string), 
            AWSShapeMember(label: "runId", required: false, type: .string), 
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long)
        ]
        /// The workflowId of the external workflow execution to be canceled.
        public let workflowId: String
        /// Data attached to the event that can be used by the decider in subsequent workflow tasks.
        public let control: String?
        /// The runId of the external workflow execution to be canceled.
        public let runId: String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RequestCancelExternalWorkflowExecution decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64

        public init(workflowId: String, control: String? = nil, runId: String? = nil, decisionTaskCompletedEventId: Int64) {
            self.workflowId = workflowId
            self.control = control
            self.runId = runId
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case workflowId = "workflowId"
            case control = "control"
            case runId = "runId"
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
        }
    }

    public struct TimerCanceledEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "timerId", required: true, type: .string), 
            AWSShapeMember(label: "startedEventId", required: true, type: .long)
        ]
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CancelTimer decision to cancel this timer. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The unique ID of the timer that was canceled.
        public let timerId: String
        /// The ID of the TimerStarted event that was recorded when this timer was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64

        public init(decisionTaskCompletedEventId: Int64, timerId: String, startedEventId: Int64) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.timerId = timerId
            self.startedEventId = startedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case timerId = "timerId"
            case startedEventId = "startedEventId"
        }
    }

    public struct History: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "events", required: true, type: .list)
        ]
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?
        /// The list of history events.
        public let events: [HistoryEvent]

        public init(nextPageToken: String? = nil, events: [HistoryEvent]) {
            self.nextPageToken = nextPageToken
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case events = "events"
        }
    }

    public struct ActivityTypeInfos: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "typeInfos", required: true, type: .list)
        ]
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?
        /// List of activity type information.
        public let typeInfos: [ActivityTypeInfo]

        public init(nextPageToken: String? = nil, typeInfos: [ActivityTypeInfo]) {
            self.nextPageToken = nextPageToken
            self.typeInfos = typeInfos
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case typeInfos = "typeInfos"
        }
    }

    public struct WorkflowTypeFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "version", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// Version of the workflow type.
        public let version: String?
        ///  Name of the workflow type.
        public let name: String

        public init(version: String? = nil, name: String) {
            self.version = version
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case version = "version"
            case name = "name"
        }
    }

    public enum ContinueAsNewWorkflowExecutionFailedCause: String, CustomStringConvertible, Codable {
        case unhandledDecision = "UNHANDLED_DECISION"
        case workflowTypeDeprecated = "WORKFLOW_TYPE_DEPRECATED"
        case workflowTypeDoesNotExist = "WORKFLOW_TYPE_DOES_NOT_EXIST"
        case defaultExecutionStartToCloseTimeoutUndefined = "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED"
        case defaultTaskStartToCloseTimeoutUndefined = "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED"
        case defaultTaskListUndefined = "DEFAULT_TASK_LIST_UNDEFINED"
        case defaultChildPolicyUndefined = "DEFAULT_CHILD_POLICY_UNDEFINED"
        case continueAsNewWorkflowExecutionRateExceeded = "CONTINUE_AS_NEW_WORKFLOW_EXECUTION_RATE_EXCEEDED"
        case operationNotPermitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct LambdaFunctionTimedOutEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "timeoutType", required: false, type: .enum), 
            AWSShapeMember(label: "scheduledEventId", required: true, type: .long), 
            AWSShapeMember(label: "startedEventId", required: true, type: .long)
        ]
        /// The type of the timeout that caused this event.
        public let timeoutType: LambdaFunctionTimeoutType?
        /// The ID of the LambdaFunctionScheduled event that was recorded when this activity task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        public let scheduledEventId: Int64
        /// The ID of the ActivityTaskStarted event that was recorded when this activity task started. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        public let startedEventId: Int64

        public init(timeoutType: LambdaFunctionTimeoutType? = nil, scheduledEventId: Int64, startedEventId: Int64) {
            self.timeoutType = timeoutType
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case timeoutType = "timeoutType"
            case scheduledEventId = "scheduledEventId"
            case startedEventId = "startedEventId"
        }
    }

    public struct ScheduleActivityTaskFailedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "activityType", required: true, type: .structure), 
            AWSShapeMember(label: "cause", required: true, type: .enum), 
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "activityId", required: true, type: .string)
        ]
        /// The activity type provided in the ScheduleActivityTask decision that failed.
        public let activityType: ActivityType
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.  If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows in the Amazon SWF Developer Guide. 
        public let cause: ScheduleActivityTaskFailedCause
        /// The ID of the DecisionTaskCompleted event corresponding to the decision that resulted in the scheduling of this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The activityId provided in the ScheduleActivityTask decision that failed.
        public let activityId: String

        public init(activityType: ActivityType, cause: ScheduleActivityTaskFailedCause, decisionTaskCompletedEventId: Int64, activityId: String) {
            self.activityType = activityType
            self.cause = cause
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.activityId = activityId
        }

        private enum CodingKeys: String, CodingKey {
            case activityType = "activityType"
            case cause = "cause"
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case activityId = "activityId"
        }
    }

    public struct ListActivityTypesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "reverseOrder", required: false, type: .boolean), 
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "domain", required: true, type: .string), 
            AWSShapeMember(label: "registrationStatus", required: true, type: .enum), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "maximumPageSize", required: false, type: .integer)
        ]
        /// When set to true, returns the results in reverse order. By default, the results are returned in ascending alphabetical order by name of the activity types.
        public let reverseOrder: Bool?
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?
        /// The name of the domain in which the activity types have been registered.
        public let domain: String
        /// Specifies the registration status of the activity types to list.
        public let registrationStatus: RegistrationStatus
        /// If specified, only lists the activity types that have this name.
        public let name: String?
        /// The maximum number of results that are returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public let maximumPageSize: Int32?

        public init(reverseOrder: Bool? = nil, nextPageToken: String? = nil, domain: String, registrationStatus: RegistrationStatus, name: String? = nil, maximumPageSize: Int32? = nil) {
            self.reverseOrder = reverseOrder
            self.nextPageToken = nextPageToken
            self.domain = domain
            self.registrationStatus = registrationStatus
            self.name = name
            self.maximumPageSize = maximumPageSize
        }

        private enum CodingKeys: String, CodingKey {
            case reverseOrder = "reverseOrder"
            case nextPageToken = "nextPageToken"
            case domain = "domain"
            case registrationStatus = "registrationStatus"
            case name = "name"
            case maximumPageSize = "maximumPageSize"
        }
    }

    public enum LambdaFunctionTimeoutType: String, CustomStringConvertible, Codable {
        case startToClose = "START_TO_CLOSE"
        public var description: String { return self.rawValue }
    }

    public struct DecisionTaskScheduledEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskPriority", required: false, type: .string), 
            AWSShapeMember(label: "taskList", required: true, type: .structure), 
            AWSShapeMember(label: "startToCloseTimeout", required: false, type: .string)
        ]
        ///  A task priority that, if set, specifies the priority for this decision task. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon SWF Developer Guide.
        public let taskPriority: String?
        /// The name of the task list in which the decision task was scheduled.
        public let taskList: TaskList
        /// The maximum duration for this decision task. The task is considered timed out if it doesn't completed within this duration. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let startToCloseTimeout: String?

        public init(taskPriority: String? = nil, taskList: TaskList, startToCloseTimeout: String? = nil) {
            self.taskPriority = taskPriority
            self.taskList = taskList
            self.startToCloseTimeout = startToCloseTimeout
        }

        private enum CodingKeys: String, CodingKey {
            case taskPriority = "taskPriority"
            case taskList = "taskList"
            case startToCloseTimeout = "startToCloseTimeout"
        }
    }

    public struct DescribeActivityTypeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "activityType", required: true, type: .structure), 
            AWSShapeMember(label: "domain", required: true, type: .string)
        ]
        /// The activity type to get information about. Activity types are identified by the name and version that were supplied when the activity was registered.
        public let activityType: ActivityType
        /// The name of the domain in which the activity type is registered.
        public let domain: String

        public init(activityType: ActivityType, domain: String) {
            self.activityType = activityType
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case activityType = "activityType"
            case domain = "domain"
        }
    }

    public struct WorkflowExecutionCompletedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "result", required: false, type: .string)
        ]
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CompleteWorkflowExecution decision to complete this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The result produced by the workflow execution upon successful completion.
        public let result: String?

        public init(decisionTaskCompletedEventId: Int64, result: String? = nil) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.result = result
        }

        private enum CodingKeys: String, CodingKey {
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case result = "result"
        }
    }

    public struct StartChildWorkflowExecutionDecisionAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "childPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "input", required: false, type: .string), 
            AWSShapeMember(label: "workflowType", required: true, type: .structure), 
            AWSShapeMember(label: "workflowId", required: true, type: .string), 
            AWSShapeMember(label: "tagList", required: false, type: .list), 
            AWSShapeMember(label: "executionStartToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "lambdaRole", required: false, type: .string), 
            AWSShapeMember(label: "taskList", required: false, type: .structure), 
            AWSShapeMember(label: "taskStartToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "taskPriority", required: false, type: .string), 
            AWSShapeMember(label: "control", required: false, type: .string)
        ]
        ///  If set, specifies the policy to use for the child workflow executions if the workflow execution being started is terminated by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using RegisterWorkflowType. The supported child policies are:    TERMINATE – The child executions are terminated.    REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.    ABANDON – No action is taken. The child executions continue to run.    A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned. 
        public let childPolicy: ChildPolicy?
        /// The input to be provided to the workflow execution.
        public let input: String?
        ///  The type of the workflow execution to be started.
        public let workflowType: WorkflowType
        ///  The workflowId of the workflow execution. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        public let workflowId: String
        /// The list of tags to associate with the child workflow execution. A maximum of 5 tags can be specified. You can list workflow executions with a specific tag by calling ListOpenWorkflowExecutions or ListClosedWorkflowExecutions and specifying a TagFilter.
        public let tagList: [String]?
        /// The total duration for this workflow execution. This overrides the defaultExecutionStartToCloseTimeout specified when registering the workflow type. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.  An execution start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default execution start-to-close timeout was specified at registration time then a fault is returned. 
        public let executionStartToCloseTimeout: String?
        /// The IAM role attached to the child workflow execution.
        public let lambdaRole: String?
        /// The name of the task list to be used for decision tasks of the child workflow execution.  A task list for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task list was specified at registration time then a fault is returned.  The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        public let taskList: TaskList?
        /// Specifies the maximum duration of decision tasks for this workflow execution. This parameter overrides the defaultTaskStartToCloseTimout specified when registering the workflow type using RegisterWorkflowType. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.  A task start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault is returned. 
        public let taskStartToCloseTimeout: String?
        ///  A task priority that, if set, specifies the priority for a decision task of this workflow execution. This overrides the defaultTaskPriority specified when registering the workflow type. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon SWF Developer Guide.
        public let taskPriority: String?
        /// The data attached to the event that can be used by the decider in subsequent workflow tasks. This data isn't sent to the child workflow execution.
        public let control: String?

        public init(childPolicy: ChildPolicy? = nil, input: String? = nil, workflowType: WorkflowType, workflowId: String, tagList: [String]? = nil, executionStartToCloseTimeout: String? = nil, lambdaRole: String? = nil, taskList: TaskList? = nil, taskStartToCloseTimeout: String? = nil, taskPriority: String? = nil, control: String? = nil) {
            self.childPolicy = childPolicy
            self.input = input
            self.workflowType = workflowType
            self.workflowId = workflowId
            self.tagList = tagList
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.lambdaRole = lambdaRole
            self.taskList = taskList
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.taskPriority = taskPriority
            self.control = control
        }

        private enum CodingKeys: String, CodingKey {
            case childPolicy = "childPolicy"
            case input = "input"
            case workflowType = "workflowType"
            case workflowId = "workflowId"
            case tagList = "tagList"
            case executionStartToCloseTimeout = "executionStartToCloseTimeout"
            case lambdaRole = "lambdaRole"
            case taskList = "taskList"
            case taskStartToCloseTimeout = "taskStartToCloseTimeout"
            case taskPriority = "taskPriority"
            case control = "control"
        }
    }

    public struct ActivityTaskCancelRequestedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "activityId", required: true, type: .string), 
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long)
        ]
        /// The unique ID of the task.
        public let activityId: String
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RequestCancelActivityTask decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64

        public init(activityId: String, decisionTaskCompletedEventId: Int64) {
            self.activityId = activityId
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case activityId = "activityId"
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
        }
    }

    public struct ListOpenWorkflowExecutionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "startTimeFilter", required: true, type: .structure), 
            AWSShapeMember(label: "domain", required: true, type: .string), 
            AWSShapeMember(label: "executionFilter", required: false, type: .structure), 
            AWSShapeMember(label: "reverseOrder", required: false, type: .boolean), 
            AWSShapeMember(label: "maximumPageSize", required: false, type: .integer), 
            AWSShapeMember(label: "tagFilter", required: false, type: .structure), 
            AWSShapeMember(label: "typeFilter", required: false, type: .structure), 
            AWSShapeMember(label: "nextPageToken", required: false, type: .string)
        ]
        /// Workflow executions are included in the returned results based on whether their start times are within the range specified by this filter.
        public let startTimeFilter: ExecutionTimeFilter
        /// The name of the domain that contains the workflow executions to list.
        public let domain: String
        /// If specified, only workflow executions matching the workflow ID specified in the filter are returned.   executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request. 
        public let executionFilter: WorkflowExecutionFilter?
        /// When set to true, returns the results in reverse order. By default the results are returned in descending order of the start time of the executions.
        public let reverseOrder: Bool?
        /// The maximum number of results that are returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public let maximumPageSize: Int32?
        /// If specified, only executions that have the matching tag are listed.   executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request. 
        public let tagFilter: TagFilter?
        /// If specified, only executions of the type specified in the filter are returned.   executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request. 
        public let typeFilter: WorkflowTypeFilter?
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?

        public init(startTimeFilter: ExecutionTimeFilter, domain: String, executionFilter: WorkflowExecutionFilter? = nil, reverseOrder: Bool? = nil, maximumPageSize: Int32? = nil, tagFilter: TagFilter? = nil, typeFilter: WorkflowTypeFilter? = nil, nextPageToken: String? = nil) {
            self.startTimeFilter = startTimeFilter
            self.domain = domain
            self.executionFilter = executionFilter
            self.reverseOrder = reverseOrder
            self.maximumPageSize = maximumPageSize
            self.tagFilter = tagFilter
            self.typeFilter = typeFilter
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case startTimeFilter = "startTimeFilter"
            case domain = "domain"
            case executionFilter = "executionFilter"
            case reverseOrder = "reverseOrder"
            case maximumPageSize = "maximumPageSize"
            case tagFilter = "tagFilter"
            case typeFilter = "typeFilter"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct WorkflowTypeInfos: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "typeInfos", required: true, type: .list)
        ]
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?
        /// The list of workflow type information.
        public let typeInfos: [WorkflowTypeInfo]

        public init(nextPageToken: String? = nil, typeInfos: [WorkflowTypeInfo]) {
            self.nextPageToken = nextPageToken
            self.typeInfos = typeInfos
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case typeInfos = "typeInfos"
        }
    }

    public struct Decision: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "startChildWorkflowExecutionDecisionAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "recordMarkerDecisionAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "requestCancelExternalWorkflowExecutionDecisionAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "requestCancelActivityTaskDecisionAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "startTimerDecisionAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "cancelWorkflowExecutionDecisionAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "failWorkflowExecutionDecisionAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "signalExternalWorkflowExecutionDecisionAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "scheduleActivityTaskDecisionAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "completeWorkflowExecutionDecisionAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "continueAsNewWorkflowExecutionDecisionAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "cancelTimerDecisionAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "scheduleLambdaFunctionDecisionAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "decisionType", required: true, type: .enum)
        ]
        /// Provides the details of the StartChildWorkflowExecution decision. It isn't set for other decision types.
        public let startChildWorkflowExecutionDecisionAttributes: StartChildWorkflowExecutionDecisionAttributes?
        /// Provides the details of the RecordMarker decision. It isn't set for other decision types.
        public let recordMarkerDecisionAttributes: RecordMarkerDecisionAttributes?
        /// Provides the details of the RequestCancelExternalWorkflowExecution decision. It isn't set for other decision types.
        public let requestCancelExternalWorkflowExecutionDecisionAttributes: RequestCancelExternalWorkflowExecutionDecisionAttributes?
        /// Provides the details of the RequestCancelActivityTask decision. It isn't set for other decision types.
        public let requestCancelActivityTaskDecisionAttributes: RequestCancelActivityTaskDecisionAttributes?
        /// Provides the details of the StartTimer decision. It isn't set for other decision types.
        public let startTimerDecisionAttributes: StartTimerDecisionAttributes?
        /// Provides the details of the CancelWorkflowExecution decision. It isn't set for other decision types.
        public let cancelWorkflowExecutionDecisionAttributes: CancelWorkflowExecutionDecisionAttributes?
        /// Provides the details of the FailWorkflowExecution decision. It isn't set for other decision types.
        public let failWorkflowExecutionDecisionAttributes: FailWorkflowExecutionDecisionAttributes?
        /// Provides the details of the SignalExternalWorkflowExecution decision. It isn't set for other decision types.
        public let signalExternalWorkflowExecutionDecisionAttributes: SignalExternalWorkflowExecutionDecisionAttributes?
        /// Provides the details of the ScheduleActivityTask decision. It isn't set for other decision types.
        public let scheduleActivityTaskDecisionAttributes: ScheduleActivityTaskDecisionAttributes?
        /// Provides the details of the CompleteWorkflowExecution decision. It isn't set for other decision types.
        public let completeWorkflowExecutionDecisionAttributes: CompleteWorkflowExecutionDecisionAttributes?
        /// Provides the details of the ContinueAsNewWorkflowExecution decision. It isn't set for other decision types.
        public let continueAsNewWorkflowExecutionDecisionAttributes: ContinueAsNewWorkflowExecutionDecisionAttributes?
        /// Provides the details of the CancelTimer decision. It isn't set for other decision types.
        public let cancelTimerDecisionAttributes: CancelTimerDecisionAttributes?
        /// Provides the details of the ScheduleLambdaFunction decision. It isn't set for other decision types.
        public let scheduleLambdaFunctionDecisionAttributes: ScheduleLambdaFunctionDecisionAttributes?
        /// Specifies the type of the decision.
        public let decisionType: DecisionType

        public init(startChildWorkflowExecutionDecisionAttributes: StartChildWorkflowExecutionDecisionAttributes? = nil, recordMarkerDecisionAttributes: RecordMarkerDecisionAttributes? = nil, requestCancelExternalWorkflowExecutionDecisionAttributes: RequestCancelExternalWorkflowExecutionDecisionAttributes? = nil, requestCancelActivityTaskDecisionAttributes: RequestCancelActivityTaskDecisionAttributes? = nil, startTimerDecisionAttributes: StartTimerDecisionAttributes? = nil, cancelWorkflowExecutionDecisionAttributes: CancelWorkflowExecutionDecisionAttributes? = nil, failWorkflowExecutionDecisionAttributes: FailWorkflowExecutionDecisionAttributes? = nil, signalExternalWorkflowExecutionDecisionAttributes: SignalExternalWorkflowExecutionDecisionAttributes? = nil, scheduleActivityTaskDecisionAttributes: ScheduleActivityTaskDecisionAttributes? = nil, completeWorkflowExecutionDecisionAttributes: CompleteWorkflowExecutionDecisionAttributes? = nil, continueAsNewWorkflowExecutionDecisionAttributes: ContinueAsNewWorkflowExecutionDecisionAttributes? = nil, cancelTimerDecisionAttributes: CancelTimerDecisionAttributes? = nil, scheduleLambdaFunctionDecisionAttributes: ScheduleLambdaFunctionDecisionAttributes? = nil, decisionType: DecisionType) {
            self.startChildWorkflowExecutionDecisionAttributes = startChildWorkflowExecutionDecisionAttributes
            self.recordMarkerDecisionAttributes = recordMarkerDecisionAttributes
            self.requestCancelExternalWorkflowExecutionDecisionAttributes = requestCancelExternalWorkflowExecutionDecisionAttributes
            self.requestCancelActivityTaskDecisionAttributes = requestCancelActivityTaskDecisionAttributes
            self.startTimerDecisionAttributes = startTimerDecisionAttributes
            self.cancelWorkflowExecutionDecisionAttributes = cancelWorkflowExecutionDecisionAttributes
            self.failWorkflowExecutionDecisionAttributes = failWorkflowExecutionDecisionAttributes
            self.signalExternalWorkflowExecutionDecisionAttributes = signalExternalWorkflowExecutionDecisionAttributes
            self.scheduleActivityTaskDecisionAttributes = scheduleActivityTaskDecisionAttributes
            self.completeWorkflowExecutionDecisionAttributes = completeWorkflowExecutionDecisionAttributes
            self.continueAsNewWorkflowExecutionDecisionAttributes = continueAsNewWorkflowExecutionDecisionAttributes
            self.cancelTimerDecisionAttributes = cancelTimerDecisionAttributes
            self.scheduleLambdaFunctionDecisionAttributes = scheduleLambdaFunctionDecisionAttributes
            self.decisionType = decisionType
        }

        private enum CodingKeys: String, CodingKey {
            case startChildWorkflowExecutionDecisionAttributes = "startChildWorkflowExecutionDecisionAttributes"
            case recordMarkerDecisionAttributes = "recordMarkerDecisionAttributes"
            case requestCancelExternalWorkflowExecutionDecisionAttributes = "requestCancelExternalWorkflowExecutionDecisionAttributes"
            case requestCancelActivityTaskDecisionAttributes = "requestCancelActivityTaskDecisionAttributes"
            case startTimerDecisionAttributes = "startTimerDecisionAttributes"
            case cancelWorkflowExecutionDecisionAttributes = "cancelWorkflowExecutionDecisionAttributes"
            case failWorkflowExecutionDecisionAttributes = "failWorkflowExecutionDecisionAttributes"
            case signalExternalWorkflowExecutionDecisionAttributes = "signalExternalWorkflowExecutionDecisionAttributes"
            case scheduleActivityTaskDecisionAttributes = "scheduleActivityTaskDecisionAttributes"
            case completeWorkflowExecutionDecisionAttributes = "completeWorkflowExecutionDecisionAttributes"
            case continueAsNewWorkflowExecutionDecisionAttributes = "continueAsNewWorkflowExecutionDecisionAttributes"
            case cancelTimerDecisionAttributes = "cancelTimerDecisionAttributes"
            case scheduleLambdaFunctionDecisionAttributes = "scheduleLambdaFunctionDecisionAttributes"
            case decisionType = "decisionType"
        }
    }

    public struct WorkflowExecutionCancelRequestedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cause", required: false, type: .enum), 
            AWSShapeMember(label: "externalInitiatedEventId", required: false, type: .long), 
            AWSShapeMember(label: "externalWorkflowExecution", required: false, type: .structure)
        ]
        /// If set, indicates that the request to cancel the workflow execution was automatically generated, and specifies the cause. This happens if the parent workflow execution times out or is terminated, and the child policy is set to cancel child executions.
        public let cause: WorkflowExecutionCancelRequestedCause?
        /// The ID of the RequestCancelExternalWorkflowExecutionInitiated event corresponding to the RequestCancelExternalWorkflowExecution decision to cancel this workflow execution.The source event with this ID can be found in the history of the source workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let externalInitiatedEventId: Int64?
        /// The external workflow execution for which the cancellation was requested.
        public let externalWorkflowExecution: WorkflowExecution?

        public init(cause: WorkflowExecutionCancelRequestedCause? = nil, externalInitiatedEventId: Int64? = nil, externalWorkflowExecution: WorkflowExecution? = nil) {
            self.cause = cause
            self.externalInitiatedEventId = externalInitiatedEventId
            self.externalWorkflowExecution = externalWorkflowExecution
        }

        private enum CodingKeys: String, CodingKey {
            case cause = "cause"
            case externalInitiatedEventId = "externalInitiatedEventId"
            case externalWorkflowExecution = "externalWorkflowExecution"
        }
    }

    public struct WorkflowExecutionTimedOutEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "timeoutType", required: true, type: .enum), 
            AWSShapeMember(label: "childPolicy", required: true, type: .enum)
        ]
        /// The type of timeout that caused this event.
        public let timeoutType: WorkflowExecutionTimeoutType
        /// The policy used for the child workflow executions of this workflow execution. The supported child policies are:    TERMINATE – The child executions are terminated.    REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.    ABANDON – No action is taken. The child executions continue to run.  
        public let childPolicy: ChildPolicy

        public init(timeoutType: WorkflowExecutionTimeoutType, childPolicy: ChildPolicy) {
            self.timeoutType = timeoutType
            self.childPolicy = childPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case timeoutType = "timeoutType"
            case childPolicy = "childPolicy"
        }
    }

    public struct ActivityTaskScheduledEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "activityType", required: true, type: .structure), 
            AWSShapeMember(label: "input", required: false, type: .string), 
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "scheduleToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "startToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "taskList", required: true, type: .structure), 
            AWSShapeMember(label: "activityId", required: true, type: .string), 
            AWSShapeMember(label: "scheduleToStartTimeout", required: false, type: .string), 
            AWSShapeMember(label: "heartbeatTimeout", required: false, type: .string), 
            AWSShapeMember(label: "control", required: false, type: .string), 
            AWSShapeMember(label: "taskPriority", required: false, type: .string)
        ]
        /// The type of the activity task.
        public let activityType: ActivityType
        /// The input provided to the activity task.
        public let input: String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision that resulted in the scheduling of this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The maximum amount of time for this activity task.
        public let scheduleToCloseTimeout: String?
        /// The maximum amount of time a worker may take to process the activity task.
        public let startToCloseTimeout: String?
        /// The task list in which the activity task has been scheduled.
        public let taskList: TaskList
        /// The unique ID of the activity task.
        public let activityId: String
        /// The maximum amount of time the activity task can wait to be assigned to a worker.
        public let scheduleToStartTimeout: String?
        /// The maximum time before which the worker processing this task must report progress by calling RecordActivityTaskHeartbeat. If the timeout is exceeded, the activity task is automatically timed out. If the worker subsequently attempts to record a heartbeat or return a result, it is ignored.
        public let heartbeatTimeout: String?
        /// Data attached to the event that can be used by the decider in subsequent workflow tasks. This data isn't sent to the activity.
        public let control: String?
        ///  The priority to assign to the scheduled activity task. If set, this overrides any default priority value that was assigned when the activity type was registered. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon SWF Developer Guide.
        public let taskPriority: String?

        public init(activityType: ActivityType, input: String? = nil, decisionTaskCompletedEventId: Int64, scheduleToCloseTimeout: String? = nil, startToCloseTimeout: String? = nil, taskList: TaskList, activityId: String, scheduleToStartTimeout: String? = nil, heartbeatTimeout: String? = nil, control: String? = nil, taskPriority: String? = nil) {
            self.activityType = activityType
            self.input = input
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.scheduleToCloseTimeout = scheduleToCloseTimeout
            self.startToCloseTimeout = startToCloseTimeout
            self.taskList = taskList
            self.activityId = activityId
            self.scheduleToStartTimeout = scheduleToStartTimeout
            self.heartbeatTimeout = heartbeatTimeout
            self.control = control
            self.taskPriority = taskPriority
        }

        private enum CodingKeys: String, CodingKey {
            case activityType = "activityType"
            case input = "input"
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case scheduleToCloseTimeout = "scheduleToCloseTimeout"
            case startToCloseTimeout = "startToCloseTimeout"
            case taskList = "taskList"
            case activityId = "activityId"
            case scheduleToStartTimeout = "scheduleToStartTimeout"
            case heartbeatTimeout = "heartbeatTimeout"
            case control = "control"
            case taskPriority = "taskPriority"
        }
    }

    public struct StartWorkflowExecutionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "childPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "input", required: false, type: .string), 
            AWSShapeMember(label: "domain", required: true, type: .string), 
            AWSShapeMember(label: "workflowType", required: true, type: .structure), 
            AWSShapeMember(label: "workflowId", required: true, type: .string), 
            AWSShapeMember(label: "executionStartToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "tagList", required: false, type: .list), 
            AWSShapeMember(label: "lambdaRole", required: false, type: .string), 
            AWSShapeMember(label: "taskList", required: false, type: .structure), 
            AWSShapeMember(label: "taskStartToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "taskPriority", required: false, type: .string)
        ]
        /// If set, specifies the policy to use for the child workflow executions of this workflow execution if it is terminated, by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using RegisterWorkflowType. The supported child policies are:    TERMINATE – The child executions are terminated.    REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.    ABANDON – No action is taken. The child executions continue to run.    A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned. 
        public let childPolicy: ChildPolicy?
        /// The input for the workflow execution. This is a free form string which should be meaningful to the workflow you are starting. This input is made available to the new workflow execution in the WorkflowExecutionStarted history event.
        public let input: String?
        /// The name of the domain in which the workflow execution is created.
        public let domain: String
        /// The type of the workflow to start.
        public let workflowType: WorkflowType
        /// The user defined identifier associated with the workflow execution. You can use this to associate a custom identifier with the workflow execution. You may specify the same identifier if a workflow execution is logically a restart of a previous execution. You cannot have two open workflow executions with the same workflowId at the same time. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        public let workflowId: String
        /// The total duration for this workflow execution. This overrides the defaultExecutionStartToCloseTimeout specified when registering the workflow type. The duration is specified in seconds; an integer greater than or equal to 0. Exceeding this limit causes the workflow execution to time out. Unlike some of the other timeout parameters in Amazon SWF, you cannot specify a value of "NONE" for this timeout; there is a one-year max limit on the time that a workflow execution can run.  An execution start-to-close timeout must be specified either through this parameter or as a default when the workflow type is registered. If neither this parameter nor a default execution start-to-close timeout is specified, a fault is returned. 
        public let executionStartToCloseTimeout: String?
        /// The list of tags to associate with the workflow execution. You can specify a maximum of 5 tags. You can list workflow executions with a specific tag by calling ListOpenWorkflowExecutions or ListClosedWorkflowExecutions and specifying a TagFilter.
        public let tagList: [String]?
        /// The IAM role to attach to this workflow execution.  Executions of this workflow type need IAM roles to invoke Lambda functions. If you don't attach an IAM role, any attempt to schedule a Lambda task fails. This results in a ScheduleLambdaFunctionFailed history event. For more information, see http://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html in the Amazon SWF Developer Guide. 
        public let lambdaRole: String?
        /// The task list to use for the decision tasks generated for this workflow execution. This overrides the defaultTaskList specified when registering the workflow type.  A task list for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task list was specified at registration time then a fault is returned.  The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        public let taskList: TaskList?
        /// Specifies the maximum duration of decision tasks for this workflow execution. This parameter overrides the defaultTaskStartToCloseTimout specified when registering the workflow type using RegisterWorkflowType. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.  A task start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault is returned. 
        public let taskStartToCloseTimeout: String?
        /// The task priority to use for this workflow execution. This overrides any default priority that was assigned when the workflow type was registered. If not set, then the default task priority for the workflow type is used. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon SWF Developer Guide.
        public let taskPriority: String?

        public init(childPolicy: ChildPolicy? = nil, input: String? = nil, domain: String, workflowType: WorkflowType, workflowId: String, executionStartToCloseTimeout: String? = nil, tagList: [String]? = nil, lambdaRole: String? = nil, taskList: TaskList? = nil, taskStartToCloseTimeout: String? = nil, taskPriority: String? = nil) {
            self.childPolicy = childPolicy
            self.input = input
            self.domain = domain
            self.workflowType = workflowType
            self.workflowId = workflowId
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.tagList = tagList
            self.lambdaRole = lambdaRole
            self.taskList = taskList
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.taskPriority = taskPriority
        }

        private enum CodingKeys: String, CodingKey {
            case childPolicy = "childPolicy"
            case input = "input"
            case domain = "domain"
            case workflowType = "workflowType"
            case workflowId = "workflowId"
            case executionStartToCloseTimeout = "executionStartToCloseTimeout"
            case tagList = "tagList"
            case lambdaRole = "lambdaRole"
            case taskList = "taskList"
            case taskStartToCloseTimeout = "taskStartToCloseTimeout"
            case taskPriority = "taskPriority"
        }
    }

    public struct LambdaFunctionFailedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "startedEventId", required: true, type: .long), 
            AWSShapeMember(label: "details", required: false, type: .string), 
            AWSShapeMember(label: "reason", required: false, type: .string), 
            AWSShapeMember(label: "scheduledEventId", required: true, type: .long)
        ]
        /// The ID of the LambdaFunctionStarted event recorded when this activity task started. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// The details of the failure.
        public let details: String?
        /// The reason provided for the failure.
        public let reason: String?
        /// The ID of the LambdaFunctionScheduled event that was recorded when this activity task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        public let scheduledEventId: Int64

        public init(startedEventId: Int64, details: String? = nil, reason: String? = nil, scheduledEventId: Int64) {
            self.startedEventId = startedEventId
            self.details = details
            self.reason = reason
            self.scheduledEventId = scheduledEventId
        }

        private enum CodingKeys: String, CodingKey {
            case startedEventId = "startedEventId"
            case details = "details"
            case reason = "reason"
            case scheduledEventId = "scheduledEventId"
        }
    }

    public struct WorkflowExecutionInfos: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "executionInfos", required: true, type: .list), 
            AWSShapeMember(label: "nextPageToken", required: false, type: .string)
        ]
        /// The list of workflow information structures.
        public let executionInfos: [WorkflowExecutionInfo]
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?

        public init(executionInfos: [WorkflowExecutionInfo], nextPageToken: String? = nil) {
            self.executionInfos = executionInfos
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case executionInfos = "executionInfos"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct DomainConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "workflowExecutionRetentionPeriodInDays", required: true, type: .string)
        ]
        /// The retention period for workflow executions in this domain.
        public let workflowExecutionRetentionPeriodInDays: String

        public init(workflowExecutionRetentionPeriodInDays: String) {
            self.workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDays
        }

        private enum CodingKeys: String, CodingKey {
            case workflowExecutionRetentionPeriodInDays = "workflowExecutionRetentionPeriodInDays"
        }
    }

    public struct TimerStartedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "timerId", required: true, type: .string), 
            AWSShapeMember(label: "startToFireTimeout", required: true, type: .string), 
            AWSShapeMember(label: "control", required: false, type: .string), 
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long)
        ]
        /// The unique ID of the timer that was started.
        public let timerId: String
        /// The duration of time after which the timer fires. The duration is specified in seconds, an integer greater than or equal to 0.
        public let startToFireTimeout: String
        /// Data attached to the event that can be used by the decider in subsequent workflow tasks.
        public let control: String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the StartTimer decision for this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64

        public init(timerId: String, startToFireTimeout: String, control: String? = nil, decisionTaskCompletedEventId: Int64) {
            self.timerId = timerId
            self.startToFireTimeout = startToFireTimeout
            self.control = control
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case timerId = "timerId"
            case startToFireTimeout = "startToFireTimeout"
            case control = "control"
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
        }
    }

    public enum WorkflowExecutionTerminatedCause: String, CustomStringConvertible, Codable {
        case childPolicyApplied = "CHILD_POLICY_APPLIED"
        case eventLimitExceeded = "EVENT_LIMIT_EXCEEDED"
        case operatorInitiated = "OPERATOR_INITIATED"
        public var description: String { return self.rawValue }
    }

    public struct StartChildWorkflowExecutionInitiatedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "childPolicy", required: true, type: .enum), 
            AWSShapeMember(label: "input", required: false, type: .string), 
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "workflowType", required: true, type: .structure), 
            AWSShapeMember(label: "taskStartToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "tagList", required: false, type: .list), 
            AWSShapeMember(label: "lambdaRole", required: false, type: .string), 
            AWSShapeMember(label: "workflowId", required: true, type: .string), 
            AWSShapeMember(label: "taskList", required: true, type: .structure), 
            AWSShapeMember(label: "executionStartToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "control", required: false, type: .string), 
            AWSShapeMember(label: "taskPriority", required: false, type: .string)
        ]
        /// The policy to use for the child workflow executions if this execution gets terminated by explicitly calling the TerminateWorkflowExecution action or due to an expired timeout. The supported child policies are:    TERMINATE – The child executions are terminated.    REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.    ABANDON – No action is taken. The child executions continue to run.  
        public let childPolicy: ChildPolicy
        /// The inputs provided to the child workflow execution.
        public let input: String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the StartChildWorkflowExecution Decision to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the cause of events.
        public let decisionTaskCompletedEventId: Int64
        /// The type of the child workflow execution.
        public let workflowType: WorkflowType
        /// The maximum duration allowed for the decision tasks for this workflow execution. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let taskStartToCloseTimeout: String?
        /// The list of tags to associated with the child workflow execution.
        public let tagList: [String]?
        /// The IAM role to attach to the child workflow execution.
        public let lambdaRole: String?
        /// The workflowId of the child workflow execution.
        public let workflowId: String
        /// The name of the task list used for the decision tasks of the child workflow execution.
        public let taskList: TaskList
        /// The maximum duration for the child workflow execution. If the workflow execution isn't closed within this duration, it is timed out and force-terminated. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let executionStartToCloseTimeout: String?
        /// Data attached to the event that can be used by the decider in subsequent decision tasks. This data isn't sent to the activity.
        public let control: String?
        ///  The priority assigned for the decision tasks for this workflow execution. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon SWF Developer Guide.
        public let taskPriority: String?

        public init(childPolicy: ChildPolicy, input: String? = nil, decisionTaskCompletedEventId: Int64, workflowType: WorkflowType, taskStartToCloseTimeout: String? = nil, tagList: [String]? = nil, lambdaRole: String? = nil, workflowId: String, taskList: TaskList, executionStartToCloseTimeout: String? = nil, control: String? = nil, taskPriority: String? = nil) {
            self.childPolicy = childPolicy
            self.input = input
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.workflowType = workflowType
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.tagList = tagList
            self.lambdaRole = lambdaRole
            self.workflowId = workflowId
            self.taskList = taskList
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.control = control
            self.taskPriority = taskPriority
        }

        private enum CodingKeys: String, CodingKey {
            case childPolicy = "childPolicy"
            case input = "input"
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case workflowType = "workflowType"
            case taskStartToCloseTimeout = "taskStartToCloseTimeout"
            case tagList = "tagList"
            case lambdaRole = "lambdaRole"
            case workflowId = "workflowId"
            case taskList = "taskList"
            case executionStartToCloseTimeout = "executionStartToCloseTimeout"
            case control = "control"
            case taskPriority = "taskPriority"
        }
    }

    public struct ActivityTypeInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "activityType", required: true, type: .structure), 
            AWSShapeMember(label: "deprecationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "creationDate", required: true, type: .timestamp), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "status", required: true, type: .enum)
        ]
        /// The ActivityType type structure representing the activity type.
        public let activityType: ActivityType
        /// If DEPRECATED, the date and time DeprecateActivityType was called.
        public let deprecationDate: TimeStamp?
        /// The date and time this activity type was created through RegisterActivityType.
        public let creationDate: TimeStamp
        /// The description of the activity type provided in RegisterActivityType.
        public let description: String?
        /// The current status of the activity type.
        public let status: RegistrationStatus

        public init(activityType: ActivityType, deprecationDate: TimeStamp? = nil, creationDate: TimeStamp, description: String? = nil, status: RegistrationStatus) {
            self.activityType = activityType
            self.deprecationDate = deprecationDate
            self.creationDate = creationDate
            self.description = description
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case activityType = "activityType"
            case deprecationDate = "deprecationDate"
            case creationDate = "creationDate"
            case description = "description"
            case status = "status"
        }
    }

    public struct CancelWorkflowExecutionFailedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "cause", required: true, type: .enum)
        ]
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CancelWorkflowExecution decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.  If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows in the Amazon SWF Developer Guide. 
        public let cause: CancelWorkflowExecutionFailedCause

        public init(decisionTaskCompletedEventId: Int64, cause: CancelWorkflowExecutionFailedCause) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
        }

        private enum CodingKeys: String, CodingKey {
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case cause = "cause"
        }
    }

    public struct FailWorkflowExecutionDecisionAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "details", required: false, type: .string), 
            AWSShapeMember(label: "reason", required: false, type: .string)
        ]
        ///  Details of the failure.
        public let details: String?
        /// A descriptive reason for the failure that may help in diagnostics.
        public let reason: String?

        public init(details: String? = nil, reason: String? = nil) {
            self.details = details
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case details = "details"
            case reason = "reason"
        }
    }

    public struct WorkflowExecutionTerminatedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cause", required: false, type: .enum), 
            AWSShapeMember(label: "details", required: false, type: .string), 
            AWSShapeMember(label: "reason", required: false, type: .string), 
            AWSShapeMember(label: "childPolicy", required: true, type: .enum)
        ]
        /// If set, indicates that the workflow execution was automatically terminated, and specifies the cause. This happens if the parent workflow execution times out or is terminated and the child policy is set to terminate child executions.
        public let cause: WorkflowExecutionTerminatedCause?
        /// The details provided for the termination.
        public let details: String?
        /// The reason provided for the termination.
        public let reason: String?
        /// The policy used for the child workflow executions of this workflow execution. The supported child policies are:    TERMINATE – The child executions are terminated.    REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.    ABANDON – No action is taken. The child executions continue to run.  
        public let childPolicy: ChildPolicy

        public init(cause: WorkflowExecutionTerminatedCause? = nil, details: String? = nil, reason: String? = nil, childPolicy: ChildPolicy) {
            self.cause = cause
            self.details = details
            self.reason = reason
            self.childPolicy = childPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case cause = "cause"
            case details = "details"
            case reason = "reason"
            case childPolicy = "childPolicy"
        }
    }

    public struct SignalWorkflowExecutionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domain", required: true, type: .string), 
            AWSShapeMember(label: "signalName", required: true, type: .string), 
            AWSShapeMember(label: "workflowId", required: true, type: .string), 
            AWSShapeMember(label: "input", required: false, type: .string), 
            AWSShapeMember(label: "runId", required: false, type: .string)
        ]
        /// The name of the domain containing the workflow execution to signal.
        public let domain: String
        /// The name of the signal. This name must be meaningful to the target workflow.
        public let signalName: String
        /// The workflowId of the workflow execution to signal.
        public let workflowId: String
        /// Data to attach to the WorkflowExecutionSignaled event in the target workflow execution's history.
        public let input: String?
        /// The runId of the workflow execution to signal.
        public let runId: String?

        public init(domain: String, signalName: String, workflowId: String, input: String? = nil, runId: String? = nil) {
            self.domain = domain
            self.signalName = signalName
            self.workflowId = workflowId
            self.input = input
            self.runId = runId
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "domain"
            case signalName = "signalName"
            case workflowId = "workflowId"
            case input = "input"
            case runId = "runId"
        }
    }

    public struct ActivityTypeDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "typeInfo", required: true, type: .structure), 
            AWSShapeMember(label: "configuration", required: true, type: .structure)
        ]
        /// General information about the activity type. The status of activity type (returned in the ActivityTypeInfo structure) can be one of the following.    REGISTERED – The type is registered and available. Workers supporting this type should be running.     DEPRECATED – The type was deprecated using DeprecateActivityType, but is still in use. You should keep workers supporting this type running. You cannot create new tasks of this type.   
        public let typeInfo: ActivityTypeInfo
        /// The configuration settings registered with the activity type.
        public let configuration: ActivityTypeConfiguration

        public init(typeInfo: ActivityTypeInfo, configuration: ActivityTypeConfiguration) {
            self.typeInfo = typeInfo
            self.configuration = configuration
        }

        private enum CodingKeys: String, CodingKey {
            case typeInfo = "typeInfo"
            case configuration = "configuration"
        }
    }

    public struct RequestCancelExternalWorkflowExecutionDecisionAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "runId", required: false, type: .string), 
            AWSShapeMember(label: "workflowId", required: true, type: .string), 
            AWSShapeMember(label: "control", required: false, type: .string)
        ]
        /// The runId of the external workflow execution to cancel.
        public let runId: String?
        ///  The workflowId of the external workflow execution to cancel.
        public let workflowId: String
        /// The data attached to the event that can be used by the decider in subsequent workflow tasks.
        public let control: String?

        public init(runId: String? = nil, workflowId: String, control: String? = nil) {
            self.runId = runId
            self.workflowId = workflowId
            self.control = control
        }

        private enum CodingKeys: String, CodingKey {
            case runId = "runId"
            case workflowId = "workflowId"
            case control = "control"
        }
    }

    public enum DecisionType: String, CustomStringConvertible, Codable {
        case scheduleactivitytask = "ScheduleActivityTask"
        case requestcancelactivitytask = "RequestCancelActivityTask"
        case completeworkflowexecution = "CompleteWorkflowExecution"
        case failworkflowexecution = "FailWorkflowExecution"
        case cancelworkflowexecution = "CancelWorkflowExecution"
        case continueasnewworkflowexecution = "ContinueAsNewWorkflowExecution"
        case recordmarker = "RecordMarker"
        case starttimer = "StartTimer"
        case canceltimer = "CancelTimer"
        case signalexternalworkflowexecution = "SignalExternalWorkflowExecution"
        case requestcancelexternalworkflowexecution = "RequestCancelExternalWorkflowExecution"
        case startchildworkflowexecution = "StartChildWorkflowExecution"
        case schedulelambdafunction = "ScheduleLambdaFunction"
        public var description: String { return self.rawValue }
    }

    public struct WorkflowExecutionFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "workflowId", required: true, type: .string)
        ]
        /// The workflowId to pass of match the criteria of this filter.
        public let workflowId: String

        public init(workflowId: String) {
            self.workflowId = workflowId
        }

        private enum CodingKeys: String, CodingKey {
            case workflowId = "workflowId"
        }
    }

    public struct ScheduleLambdaFunctionDecisionAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "input", required: false, type: .string), 
            AWSShapeMember(label: "startToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "control", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "id", required: true, type: .string)
        ]
        /// The optional input data to be supplied to the Lambda function.
        public let input: String?
        /// The timeout value, in seconds, after which the Lambda function is considered to be failed once it has started. This can be any integer from 1-300 (1s-5m). If no value is supplied, than a default value of 300s is assumed.
        public let startToCloseTimeout: String?
        /// The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the Lambda task.
        public let control: String?
        /// The name, or ARN, of the Lambda function to schedule.
        public let name: String
        /// A string that identifies the Lambda function execution in the event history.
        public let id: String

        public init(input: String? = nil, startToCloseTimeout: String? = nil, control: String? = nil, name: String, id: String) {
            self.input = input
            self.startToCloseTimeout = startToCloseTimeout
            self.control = control
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case input = "input"
            case startToCloseTimeout = "startToCloseTimeout"
            case control = "control"
            case name = "name"
            case id = "id"
        }
    }

    public struct DecisionTaskStartedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "scheduledEventId", required: true, type: .long), 
            AWSShapeMember(label: "identity", required: false, type: .string)
        ]
        /// The ID of the DecisionTaskScheduled event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64
        /// Identity of the decider making the request. This enables diagnostic tracing when problems arise. The form of this identity is user defined.
        public let identity: String?

        public init(scheduledEventId: Int64, identity: String? = nil) {
            self.scheduledEventId = scheduledEventId
            self.identity = identity
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledEventId = "scheduledEventId"
            case identity = "identity"
        }
    }

    public struct RequestCancelActivityTaskDecisionAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "activityId", required: true, type: .string)
        ]
        /// The activityId of the activity task to be canceled.
        public let activityId: String

        public init(activityId: String) {
            self.activityId = activityId
        }

        private enum CodingKeys: String, CodingKey {
            case activityId = "activityId"
        }
    }

    public struct TerminateWorkflowExecutionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domain", required: true, type: .string), 
            AWSShapeMember(label: "workflowId", required: true, type: .string), 
            AWSShapeMember(label: "details", required: false, type: .string), 
            AWSShapeMember(label: "runId", required: false, type: .string), 
            AWSShapeMember(label: "reason", required: false, type: .string), 
            AWSShapeMember(label: "childPolicy", required: false, type: .enum)
        ]
        /// The domain of the workflow execution to terminate.
        public let domain: String
        /// The workflowId of the workflow execution to terminate.
        public let workflowId: String
        ///  Details for terminating the workflow execution.
        public let details: String?
        /// The runId of the workflow execution to terminate.
        public let runId: String?
        ///  A descriptive reason for terminating the workflow execution.
        public let reason: String?
        /// If set, specifies the policy to use for the child workflow executions of the workflow execution being terminated. This policy overrides the child policy specified for the workflow execution at registration time or when starting the execution. The supported child policies are:    TERMINATE – The child executions are terminated.    REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.    ABANDON – No action is taken. The child executions continue to run.    A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned. 
        public let childPolicy: ChildPolicy?

        public init(domain: String, workflowId: String, details: String? = nil, runId: String? = nil, reason: String? = nil, childPolicy: ChildPolicy? = nil) {
            self.domain = domain
            self.workflowId = workflowId
            self.details = details
            self.runId = runId
            self.reason = reason
            self.childPolicy = childPolicy
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "domain"
            case workflowId = "workflowId"
            case details = "details"
            case runId = "runId"
            case reason = "reason"
            case childPolicy = "childPolicy"
        }
    }

    public struct RequestCancelExternalWorkflowExecutionFailedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "workflowId", required: true, type: .string), 
            AWSShapeMember(label: "cause", required: true, type: .enum), 
            AWSShapeMember(label: "runId", required: false, type: .string), 
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "control", required: false, type: .string), 
            AWSShapeMember(label: "initiatedEventId", required: true, type: .long)
        ]
        /// The workflowId of the external workflow to which the cancel request was to be delivered.
        public let workflowId: String
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.  If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows in the Amazon SWF Developer Guide. 
        public let cause: RequestCancelExternalWorkflowExecutionFailedCause
        /// The runId of the external workflow execution.
        public let runId: String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RequestCancelExternalWorkflowExecution decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the workflow execution.
        public let control: String?
        /// The ID of the RequestCancelExternalWorkflowExecutionInitiated event corresponding to the RequestCancelExternalWorkflowExecution decision to cancel this external workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64

        public init(workflowId: String, cause: RequestCancelExternalWorkflowExecutionFailedCause, runId: String? = nil, decisionTaskCompletedEventId: Int64, control: String? = nil, initiatedEventId: Int64) {
            self.workflowId = workflowId
            self.cause = cause
            self.runId = runId
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.control = control
            self.initiatedEventId = initiatedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case workflowId = "workflowId"
            case cause = "cause"
            case runId = "runId"
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case control = "control"
            case initiatedEventId = "initiatedEventId"
        }
    }

    public enum SignalExternalWorkflowExecutionFailedCause: String, CustomStringConvertible, Codable {
        case unknownExternalWorkflowExecution = "UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION"
        case signalExternalWorkflowExecutionRateExceeded = "SIGNAL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED"
        case operationNotPermitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct WorkflowExecutionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lambdaRole", required: false, type: .string), 
            AWSShapeMember(label: "taskList", required: true, type: .structure), 
            AWSShapeMember(label: "childPolicy", required: true, type: .enum), 
            AWSShapeMember(label: "taskPriority", required: false, type: .string), 
            AWSShapeMember(label: "taskStartToCloseTimeout", required: true, type: .string), 
            AWSShapeMember(label: "executionStartToCloseTimeout", required: true, type: .string)
        ]
        /// The IAM role attached to the child workflow execution.
        public let lambdaRole: String?
        /// The task list used for the decision tasks generated for this workflow execution.
        public let taskList: TaskList
        /// The policy to use for the child workflow executions if this workflow execution is terminated, by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. The supported child policies are:    TERMINATE – The child executions are terminated.    REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.    ABANDON – No action is taken. The child executions continue to run.  
        public let childPolicy: ChildPolicy
        /// The priority assigned to decision tasks for this workflow execution. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon SWF Developer Guide.
        public let taskPriority: String?
        /// The maximum duration allowed for decision tasks for this workflow execution. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let taskStartToCloseTimeout: String
        /// The total duration for this workflow execution. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let executionStartToCloseTimeout: String

        public init(lambdaRole: String? = nil, taskList: TaskList, childPolicy: ChildPolicy, taskPriority: String? = nil, taskStartToCloseTimeout: String, executionStartToCloseTimeout: String) {
            self.lambdaRole = lambdaRole
            self.taskList = taskList
            self.childPolicy = childPolicy
            self.taskPriority = taskPriority
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
        }

        private enum CodingKeys: String, CodingKey {
            case lambdaRole = "lambdaRole"
            case taskList = "taskList"
            case childPolicy = "childPolicy"
            case taskPriority = "taskPriority"
            case taskStartToCloseTimeout = "taskStartToCloseTimeout"
            case executionStartToCloseTimeout = "executionStartToCloseTimeout"
        }
    }

    public enum ScheduleLambdaFunctionFailedCause: String, CustomStringConvertible, Codable {
        case idAlreadyInUse = "ID_ALREADY_IN_USE"
        case openLambdaFunctionsLimitExceeded = "OPEN_LAMBDA_FUNCTIONS_LIMIT_EXCEEDED"
        case lambdaFunctionCreationRateExceeded = "LAMBDA_FUNCTION_CREATION_RATE_EXCEEDED"
        case lambdaServiceNotAvailableInRegion = "LAMBDA_SERVICE_NOT_AVAILABLE_IN_REGION"
        public var description: String { return self.rawValue }
    }

    public struct ChildWorkflowExecutionTimedOutEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "startedEventId", required: true, type: .long), 
            AWSShapeMember(label: "initiatedEventId", required: true, type: .long), 
            AWSShapeMember(label: "workflowExecution", required: true, type: .structure), 
            AWSShapeMember(label: "workflowType", required: true, type: .structure), 
            AWSShapeMember(label: "timeoutType", required: true, type: .enum)
        ]
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution Decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64
        /// The child workflow execution that timed out.
        public let workflowExecution: WorkflowExecution
        /// The type of the child workflow execution.
        public let workflowType: WorkflowType
        /// The type of the timeout that caused the child workflow execution to time out.
        public let timeoutType: WorkflowExecutionTimeoutType

        public init(startedEventId: Int64, initiatedEventId: Int64, workflowExecution: WorkflowExecution, workflowType: WorkflowType, timeoutType: WorkflowExecutionTimeoutType) {
            self.startedEventId = startedEventId
            self.initiatedEventId = initiatedEventId
            self.workflowExecution = workflowExecution
            self.workflowType = workflowType
            self.timeoutType = timeoutType
        }

        private enum CodingKeys: String, CodingKey {
            case startedEventId = "startedEventId"
            case initiatedEventId = "initiatedEventId"
            case workflowExecution = "workflowExecution"
            case workflowType = "workflowType"
            case timeoutType = "timeoutType"
        }
    }

    public struct FailWorkflowExecutionFailedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "cause", required: true, type: .enum)
        ]
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the FailWorkflowExecution decision to fail this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.  If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows in the Amazon SWF Developer Guide. 
        public let cause: FailWorkflowExecutionFailedCause

        public init(decisionTaskCompletedEventId: Int64, cause: FailWorkflowExecutionFailedCause) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
        }

        private enum CodingKeys: String, CodingKey {
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case cause = "cause"
        }
    }

    public struct TaskList: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The name of the task list.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct ListWorkflowTypesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "reverseOrder", required: false, type: .boolean), 
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "domain", required: true, type: .string), 
            AWSShapeMember(label: "registrationStatus", required: true, type: .enum), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "maximumPageSize", required: false, type: .integer)
        ]
        /// When set to true, returns the results in reverse order. By default the results are returned in ascending alphabetical order of the name of the workflow types.
        public let reverseOrder: Bool?
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?
        /// The name of the domain in which the workflow types have been registered.
        public let domain: String
        /// Specifies the registration status of the workflow types to list.
        public let registrationStatus: RegistrationStatus
        /// If specified, lists the workflow type with this name.
        public let name: String?
        /// The maximum number of results that are returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public let maximumPageSize: Int32?

        public init(reverseOrder: Bool? = nil, nextPageToken: String? = nil, domain: String, registrationStatus: RegistrationStatus, name: String? = nil, maximumPageSize: Int32? = nil) {
            self.reverseOrder = reverseOrder
            self.nextPageToken = nextPageToken
            self.domain = domain
            self.registrationStatus = registrationStatus
            self.name = name
            self.maximumPageSize = maximumPageSize
        }

        private enum CodingKeys: String, CodingKey {
            case reverseOrder = "reverseOrder"
            case nextPageToken = "nextPageToken"
            case domain = "domain"
            case registrationStatus = "registrationStatus"
            case name = "name"
            case maximumPageSize = "maximumPageSize"
        }
    }

    public struct MarkerRecordedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "details", required: false, type: .string), 
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "markerName", required: true, type: .string)
        ]
        /// The details of the marker.
        public let details: String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RecordMarker decision that requested this marker. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The name of the marker.
        public let markerName: String

        public init(details: String? = nil, decisionTaskCompletedEventId: Int64, markerName: String) {
            self.details = details
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.markerName = markerName
        }

        private enum CodingKeys: String, CodingKey {
            case details = "details"
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case markerName = "markerName"
        }
    }

    public enum CancelTimerFailedCause: String, CustomStringConvertible, Codable {
        case timerIdUnknown = "TIMER_ID_UNKNOWN"
        case operationNotPermitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct GetWorkflowExecutionHistoryInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "reverseOrder", required: false, type: .boolean), 
            AWSShapeMember(label: "domain", required: true, type: .string), 
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "maximumPageSize", required: false, type: .integer), 
            AWSShapeMember(label: "execution", required: true, type: .structure)
        ]
        /// When set to true, returns the events in reverse order. By default the results are returned in ascending order of the eventTimeStamp of the events.
        public let reverseOrder: Bool?
        /// The name of the domain containing the workflow execution.
        public let domain: String
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?
        /// The maximum number of results that are returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public let maximumPageSize: Int32?
        /// Specifies the workflow execution for which to return the history.
        public let execution: WorkflowExecution

        public init(reverseOrder: Bool? = nil, domain: String, nextPageToken: String? = nil, maximumPageSize: Int32? = nil, execution: WorkflowExecution) {
            self.reverseOrder = reverseOrder
            self.domain = domain
            self.nextPageToken = nextPageToken
            self.maximumPageSize = maximumPageSize
            self.execution = execution
        }

        private enum CodingKeys: String, CodingKey {
            case reverseOrder = "reverseOrder"
            case domain = "domain"
            case nextPageToken = "nextPageToken"
            case maximumPageSize = "maximumPageSize"
            case execution = "execution"
        }
    }

    public struct DecisionTaskCompletedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "executionContext", required: false, type: .string), 
            AWSShapeMember(label: "scheduledEventId", required: true, type: .long), 
            AWSShapeMember(label: "startedEventId", required: true, type: .long)
        ]
        /// User defined context for the workflow execution.
        public let executionContext: String?
        /// The ID of the DecisionTaskScheduled event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64
        /// The ID of the DecisionTaskStarted event recorded when this decision task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64

        public init(executionContext: String? = nil, scheduledEventId: Int64, startedEventId: Int64) {
            self.executionContext = executionContext
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case executionContext = "executionContext"
            case scheduledEventId = "scheduledEventId"
            case startedEventId = "startedEventId"
        }
    }

    public struct WorkflowExecutionContinuedAsNewEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "childPolicy", required: true, type: .enum), 
            AWSShapeMember(label: "input", required: false, type: .string), 
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "workflowType", required: true, type: .structure), 
            AWSShapeMember(label: "taskStartToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "executionStartToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "tagList", required: false, type: .list), 
            AWSShapeMember(label: "lambdaRole", required: false, type: .string), 
            AWSShapeMember(label: "taskList", required: true, type: .structure), 
            AWSShapeMember(label: "newExecutionRunId", required: true, type: .string), 
            AWSShapeMember(label: "taskPriority", required: false, type: .string)
        ]
        /// The policy to use for the child workflow executions of the new execution if it is terminated by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. The supported child policies are:    TERMINATE – The child executions are terminated.    REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.    ABANDON – No action is taken. The child executions continue to run.  
        public let childPolicy: ChildPolicy
        /// The input provided to the new workflow execution.
        public let input: String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the ContinueAsNewWorkflowExecution decision that started this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The workflow type of this execution.
        public let workflowType: WorkflowType
        /// The maximum duration of decision tasks for the new workflow execution. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let taskStartToCloseTimeout: String?
        /// The total duration allowed for the new workflow execution. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let executionStartToCloseTimeout: String?
        /// The list of tags associated with the new workflow execution.
        public let tagList: [String]?
        /// The IAM role to attach to the new (continued) workflow execution.
        public let lambdaRole: String?
        /// The task list to use for the decisions of the new (continued) workflow execution.
        public let taskList: TaskList
        /// The runId of the new workflow execution.
        public let newExecutionRunId: String
        /// The priority of the task to use for the decisions of the new (continued) workflow execution.
        public let taskPriority: String?

        public init(childPolicy: ChildPolicy, input: String? = nil, decisionTaskCompletedEventId: Int64, workflowType: WorkflowType, taskStartToCloseTimeout: String? = nil, executionStartToCloseTimeout: String? = nil, tagList: [String]? = nil, lambdaRole: String? = nil, taskList: TaskList, newExecutionRunId: String, taskPriority: String? = nil) {
            self.childPolicy = childPolicy
            self.input = input
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.workflowType = workflowType
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.tagList = tagList
            self.lambdaRole = lambdaRole
            self.taskList = taskList
            self.newExecutionRunId = newExecutionRunId
            self.taskPriority = taskPriority
        }

        private enum CodingKeys: String, CodingKey {
            case childPolicy = "childPolicy"
            case input = "input"
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case workflowType = "workflowType"
            case taskStartToCloseTimeout = "taskStartToCloseTimeout"
            case executionStartToCloseTimeout = "executionStartToCloseTimeout"
            case tagList = "tagList"
            case lambdaRole = "lambdaRole"
            case taskList = "taskList"
            case newExecutionRunId = "newExecutionRunId"
            case taskPriority = "taskPriority"
        }
    }

    public struct DecisionTaskTimedOutEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "timeoutType", required: true, type: .enum), 
            AWSShapeMember(label: "scheduledEventId", required: true, type: .long), 
            AWSShapeMember(label: "startedEventId", required: true, type: .long)
        ]
        /// The type of timeout that expired before the decision task could be completed.
        public let timeoutType: DecisionTaskTimeoutType
        /// The ID of the DecisionTaskScheduled event that was recorded when this decision task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64
        /// The ID of the DecisionTaskStarted event recorded when this decision task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64

        public init(timeoutType: DecisionTaskTimeoutType, scheduledEventId: Int64, startedEventId: Int64) {
            self.timeoutType = timeoutType
            self.scheduledEventId = scheduledEventId
            self.startedEventId = startedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case timeoutType = "timeoutType"
            case scheduledEventId = "scheduledEventId"
            case startedEventId = "startedEventId"
        }
    }

    public struct CompleteWorkflowExecutionDecisionAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "result", required: false, type: .string)
        ]
        /// The result of the workflow execution. The form of the result is implementation defined.
        public let result: String?

        public init(result: String? = nil) {
            self.result = result
        }

        private enum CodingKeys: String, CodingKey {
            case result = "result"
        }
    }

    public struct SignalExternalWorkflowExecutionDecisionAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "input", required: false, type: .string), 
            AWSShapeMember(label: "signalName", required: true, type: .string), 
            AWSShapeMember(label: "workflowId", required: true, type: .string), 
            AWSShapeMember(label: "runId", required: false, type: .string), 
            AWSShapeMember(label: "control", required: false, type: .string)
        ]
        ///  The input data to be provided with the signal. The target workflow execution uses the signal name and input data to process the signal.
        public let input: String?
        ///  The name of the signal.The target workflow execution uses the signal name and input to process the signal.
        public let signalName: String
        ///  The workflowId of the workflow execution to be signaled.
        public let workflowId: String
        /// The runId of the workflow execution to be signaled.
        public let runId: String?
        /// The data attached to the event that can be used by the decider in subsequent decision tasks.
        public let control: String?

        public init(input: String? = nil, signalName: String, workflowId: String, runId: String? = nil, control: String? = nil) {
            self.input = input
            self.signalName = signalName
            self.workflowId = workflowId
            self.runId = runId
            self.control = control
        }

        private enum CodingKeys: String, CodingKey {
            case input = "input"
            case signalName = "signalName"
            case workflowId = "workflowId"
            case runId = "runId"
            case control = "control"
        }
    }

    public struct DeprecateActivityTypeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "activityType", required: true, type: .structure), 
            AWSShapeMember(label: "domain", required: true, type: .string)
        ]
        /// The activity type to deprecate.
        public let activityType: ActivityType
        /// The name of the domain in which the activity type is registered.
        public let domain: String

        public init(activityType: ActivityType, domain: String) {
            self.activityType = activityType
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case activityType = "activityType"
            case domain = "domain"
        }
    }

    public enum RequestCancelExternalWorkflowExecutionFailedCause: String, CustomStringConvertible, Codable {
        case unknownExternalWorkflowExecution = "UNKNOWN_EXTERNAL_WORKFLOW_EXECUTION"
        case requestCancelExternalWorkflowExecutionRateExceeded = "REQUEST_CANCEL_EXTERNAL_WORKFLOW_EXECUTION_RATE_EXCEEDED"
        case operationNotPermitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct ActivityTask: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "activityType", required: true, type: .structure), 
            AWSShapeMember(label: "input", required: false, type: .string), 
            AWSShapeMember(label: "startedEventId", required: true, type: .long), 
            AWSShapeMember(label: "workflowExecution", required: true, type: .structure), 
            AWSShapeMember(label: "activityId", required: true, type: .string), 
            AWSShapeMember(label: "taskToken", required: true, type: .string)
        ]
        /// The type of this activity task.
        public let activityType: ActivityType
        /// The inputs provided when the activity task was scheduled. The form of the input is user defined and should be meaningful to the activity implementation.
        public let input: String?
        /// The ID of the ActivityTaskStarted event recorded in the history.
        public let startedEventId: Int64
        /// The workflow execution that started this activity task.
        public let workflowExecution: WorkflowExecution
        /// The unique ID of the task.
        public let activityId: String
        /// The opaque string used as a handle on the task. This token is used by workers to communicate progress and response information back to the system about the task.
        public let taskToken: String

        public init(activityType: ActivityType, input: String? = nil, startedEventId: Int64, workflowExecution: WorkflowExecution, activityId: String, taskToken: String) {
            self.activityType = activityType
            self.input = input
            self.startedEventId = startedEventId
            self.workflowExecution = workflowExecution
            self.activityId = activityId
            self.taskToken = taskToken
        }

        private enum CodingKeys: String, CodingKey {
            case activityType = "activityType"
            case input = "input"
            case startedEventId = "startedEventId"
            case workflowExecution = "workflowExecution"
            case activityId = "activityId"
            case taskToken = "taskToken"
        }
    }

    public struct ListClosedWorkflowExecutionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "startTimeFilter", required: false, type: .structure), 
            AWSShapeMember(label: "domain", required: true, type: .string), 
            AWSShapeMember(label: "closeStatusFilter", required: false, type: .structure), 
            AWSShapeMember(label: "reverseOrder", required: false, type: .boolean), 
            AWSShapeMember(label: "maximumPageSize", required: false, type: .integer), 
            AWSShapeMember(label: "tagFilter", required: false, type: .structure), 
            AWSShapeMember(label: "typeFilter", required: false, type: .structure), 
            AWSShapeMember(label: "executionFilter", required: false, type: .structure), 
            AWSShapeMember(label: "closeTimeFilter", required: false, type: .structure), 
            AWSShapeMember(label: "nextPageToken", required: false, type: .string)
        ]
        /// If specified, the workflow executions are included in the returned results based on whether their start times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their start times.   startTimeFilter and closeTimeFilter are mutually exclusive. You must specify one of these in a request but not both. 
        public let startTimeFilter: ExecutionTimeFilter?
        /// The name of the domain that contains the workflow executions to list.
        public let domain: String
        /// If specified, only workflow executions that match this close status are listed. For example, if TERMINATED is specified, then only TERMINATED workflow executions are listed.   closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request. 
        public let closeStatusFilter: CloseStatusFilter?
        /// When set to true, returns the results in reverse order. By default the results are returned in descending order of the start or the close time of the executions.
        public let reverseOrder: Bool?
        /// The maximum number of results that are returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public let maximumPageSize: Int32?
        /// If specified, only executions that have the matching tag are listed.   closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request. 
        public let tagFilter: TagFilter?
        /// If specified, only executions of the type specified in the filter are returned.   closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request. 
        public let typeFilter: WorkflowTypeFilter?
        /// If specified, only workflow executions matching the workflow ID specified in the filter are returned.   closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request. 
        public let executionFilter: WorkflowExecutionFilter?
        /// If specified, the workflow executions are included in the returned results based on whether their close times are within the range specified by this filter. Also, if this parameter is specified, the returned results are ordered by their close times.   startTimeFilter and closeTimeFilter are mutually exclusive. You must specify one of these in a request but not both. 
        public let closeTimeFilter: ExecutionTimeFilter?
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?

        public init(startTimeFilter: ExecutionTimeFilter? = nil, domain: String, closeStatusFilter: CloseStatusFilter? = nil, reverseOrder: Bool? = nil, maximumPageSize: Int32? = nil, tagFilter: TagFilter? = nil, typeFilter: WorkflowTypeFilter? = nil, executionFilter: WorkflowExecutionFilter? = nil, closeTimeFilter: ExecutionTimeFilter? = nil, nextPageToken: String? = nil) {
            self.startTimeFilter = startTimeFilter
            self.domain = domain
            self.closeStatusFilter = closeStatusFilter
            self.reverseOrder = reverseOrder
            self.maximumPageSize = maximumPageSize
            self.tagFilter = tagFilter
            self.typeFilter = typeFilter
            self.executionFilter = executionFilter
            self.closeTimeFilter = closeTimeFilter
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case startTimeFilter = "startTimeFilter"
            case domain = "domain"
            case closeStatusFilter = "closeStatusFilter"
            case reverseOrder = "reverseOrder"
            case maximumPageSize = "maximumPageSize"
            case tagFilter = "tagFilter"
            case typeFilter = "typeFilter"
            case executionFilter = "executionFilter"
            case closeTimeFilter = "closeTimeFilter"
            case nextPageToken = "nextPageToken"
        }
    }

    public struct CancelWorkflowExecutionDecisionAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "details", required: false, type: .string)
        ]
        ///  Details of the cancellation.
        public let details: String?

        public init(details: String? = nil) {
            self.details = details
        }

        private enum CodingKeys: String, CodingKey {
            case details = "details"
        }
    }

    public struct HistoryEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lambdaFunctionCompletedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "externalWorkflowExecutionCancelRequestedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "signalExternalWorkflowExecutionFailedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "startChildWorkflowExecutionInitiatedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "decisionTaskScheduledEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "childWorkflowExecutionTimedOutEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "activityTaskCanceledEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "requestCancelExternalWorkflowExecutionInitiatedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "timerFiredEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "childWorkflowExecutionCanceledEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "workflowExecutionStartedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "requestCancelActivityTaskFailedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "timerCanceledEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "decisionTaskStartedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "childWorkflowExecutionCompletedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "workflowExecutionCanceledEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "activityTaskTimedOutEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "activityTaskFailedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "workflowExecutionTimedOutEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "cancelTimerFailedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "workflowExecutionTerminatedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "workflowExecutionCancelRequestedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "workflowExecutionCompletedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "eventTimestamp", required: true, type: .timestamp), 
            AWSShapeMember(label: "childWorkflowExecutionStartedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "completeWorkflowExecutionFailedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "workflowExecutionContinuedAsNewEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "markerRecordedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "eventType", required: true, type: .enum), 
            AWSShapeMember(label: "lambdaFunctionStartedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "lambdaFunctionTimedOutEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "activityTaskScheduledEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "scheduleActivityTaskFailedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "activityTaskCompletedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "continueAsNewWorkflowExecutionFailedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "decisionTaskTimedOutEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "lambdaFunctionScheduledEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "workflowExecutionSignaledEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "activityTaskStartedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "childWorkflowExecutionFailedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "recordMarkerFailedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "activityTaskCancelRequestedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "startChildWorkflowExecutionFailedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "timerStartedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "decisionTaskCompletedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "requestCancelExternalWorkflowExecutionFailedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "signalExternalWorkflowExecutionInitiatedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "eventId", required: true, type: .long), 
            AWSShapeMember(label: "cancelWorkflowExecutionFailedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "lambdaFunctionFailedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "externalWorkflowExecutionSignaledEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "failWorkflowExecutionFailedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "startLambdaFunctionFailedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "startTimerFailedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "workflowExecutionFailedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "scheduleLambdaFunctionFailedEventAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "childWorkflowExecutionTerminatedEventAttributes", required: false, type: .structure)
        ]
        /// Provides the details of the LambdaFunctionCompleted event. It isn't set for other event types.
        public let lambdaFunctionCompletedEventAttributes: LambdaFunctionCompletedEventAttributes?
        /// If the event is of type ExternalWorkflowExecutionCancelRequested then this member is set and provides detailed information about the event. It isn't set for other event types. 
        public let externalWorkflowExecutionCancelRequestedEventAttributes: ExternalWorkflowExecutionCancelRequestedEventAttributes?
        /// If the event is of type SignalExternalWorkflowExecutionFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let signalExternalWorkflowExecutionFailedEventAttributes: SignalExternalWorkflowExecutionFailedEventAttributes?
        /// If the event is of type StartChildWorkflowExecutionInitiated then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let startChildWorkflowExecutionInitiatedEventAttributes: StartChildWorkflowExecutionInitiatedEventAttributes?
        /// If the event is of type DecisionTaskScheduled then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let decisionTaskScheduledEventAttributes: DecisionTaskScheduledEventAttributes?
        /// If the event is of type ChildWorkflowExecutionTimedOut then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let childWorkflowExecutionTimedOutEventAttributes: ChildWorkflowExecutionTimedOutEventAttributes?
        /// If the event is of type ActivityTaskCanceled then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let activityTaskCanceledEventAttributes: ActivityTaskCanceledEventAttributes?
        /// If the event is of type RequestCancelExternalWorkflowExecutionInitiated then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let requestCancelExternalWorkflowExecutionInitiatedEventAttributes: RequestCancelExternalWorkflowExecutionInitiatedEventAttributes?
        /// If the event is of type TimerFired then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let timerFiredEventAttributes: TimerFiredEventAttributes?
        /// If the event is of type ChildWorkflowExecutionCanceled then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let childWorkflowExecutionCanceledEventAttributes: ChildWorkflowExecutionCanceledEventAttributes?
        /// If the event is of type WorkflowExecutionStarted then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let workflowExecutionStartedEventAttributes: WorkflowExecutionStartedEventAttributes?
        /// If the event is of type RequestCancelActivityTaskFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let requestCancelActivityTaskFailedEventAttributes: RequestCancelActivityTaskFailedEventAttributes?
        /// If the event is of type TimerCanceled then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let timerCanceledEventAttributes: TimerCanceledEventAttributes?
        /// If the event is of type DecisionTaskStarted then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let decisionTaskStartedEventAttributes: DecisionTaskStartedEventAttributes?
        /// If the event is of type ChildWorkflowExecutionCompleted then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let childWorkflowExecutionCompletedEventAttributes: ChildWorkflowExecutionCompletedEventAttributes?
        /// If the event is of type WorkflowExecutionCanceled then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let workflowExecutionCanceledEventAttributes: WorkflowExecutionCanceledEventAttributes?
        /// If the event is of type ActivityTaskTimedOut then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let activityTaskTimedOutEventAttributes: ActivityTaskTimedOutEventAttributes?
        /// If the event is of type ActivityTaskFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let activityTaskFailedEventAttributes: ActivityTaskFailedEventAttributes?
        /// If the event is of type WorkflowExecutionTimedOut then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let workflowExecutionTimedOutEventAttributes: WorkflowExecutionTimedOutEventAttributes?
        /// If the event is of type CancelTimerFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let cancelTimerFailedEventAttributes: CancelTimerFailedEventAttributes?
        /// If the event is of type WorkflowExecutionTerminated then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let workflowExecutionTerminatedEventAttributes: WorkflowExecutionTerminatedEventAttributes?
        /// If the event is of type WorkflowExecutionCancelRequested then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let workflowExecutionCancelRequestedEventAttributes: WorkflowExecutionCancelRequestedEventAttributes?
        /// If the event is of type WorkflowExecutionCompleted then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let workflowExecutionCompletedEventAttributes: WorkflowExecutionCompletedEventAttributes?
        /// The date and time when the event occurred.
        public let eventTimestamp: TimeStamp
        /// If the event is of type ChildWorkflowExecutionStarted then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let childWorkflowExecutionStartedEventAttributes: ChildWorkflowExecutionStartedEventAttributes?
        /// If the event is of type CompleteWorkflowExecutionFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let completeWorkflowExecutionFailedEventAttributes: CompleteWorkflowExecutionFailedEventAttributes?
        /// If the event is of type WorkflowExecutionContinuedAsNew then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let workflowExecutionContinuedAsNewEventAttributes: WorkflowExecutionContinuedAsNewEventAttributes?
        /// If the event is of type MarkerRecorded then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let markerRecordedEventAttributes: MarkerRecordedEventAttributes?
        /// The type of the history event.
        public let eventType: EventType
        /// Provides the details of the LambdaFunctionStarted event. It isn't set for other event types.
        public let lambdaFunctionStartedEventAttributes: LambdaFunctionStartedEventAttributes?
        /// Provides the details of the LambdaFunctionTimedOut event. It isn't set for other event types.
        public let lambdaFunctionTimedOutEventAttributes: LambdaFunctionTimedOutEventAttributes?
        /// If the event is of type ActivityTaskScheduled then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let activityTaskScheduledEventAttributes: ActivityTaskScheduledEventAttributes?
        /// If the event is of type ScheduleActivityTaskFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let scheduleActivityTaskFailedEventAttributes: ScheduleActivityTaskFailedEventAttributes?
        /// If the event is of type ActivityTaskCompleted then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let activityTaskCompletedEventAttributes: ActivityTaskCompletedEventAttributes?
        /// If the event is of type ContinueAsNewWorkflowExecutionFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let continueAsNewWorkflowExecutionFailedEventAttributes: ContinueAsNewWorkflowExecutionFailedEventAttributes?
        /// If the event is of type DecisionTaskTimedOut then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let decisionTaskTimedOutEventAttributes: DecisionTaskTimedOutEventAttributes?
        /// Provides the details of the LambdaFunctionScheduled event. It isn't set for other event types.
        public let lambdaFunctionScheduledEventAttributes: LambdaFunctionScheduledEventAttributes?
        /// If the event is of type WorkflowExecutionSignaled then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let workflowExecutionSignaledEventAttributes: WorkflowExecutionSignaledEventAttributes?
        /// If the event is of type ActivityTaskStarted then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let activityTaskStartedEventAttributes: ActivityTaskStartedEventAttributes?
        /// If the event is of type ChildWorkflowExecutionFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let childWorkflowExecutionFailedEventAttributes: ChildWorkflowExecutionFailedEventAttributes?
        /// If the event is of type DecisionTaskFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let recordMarkerFailedEventAttributes: RecordMarkerFailedEventAttributes?
        /// If the event is of type ActivityTaskcancelRequested then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let activityTaskCancelRequestedEventAttributes: ActivityTaskCancelRequestedEventAttributes?
        /// If the event is of type StartChildWorkflowExecutionFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let startChildWorkflowExecutionFailedEventAttributes: StartChildWorkflowExecutionFailedEventAttributes?
        /// If the event is of type TimerStarted then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let timerStartedEventAttributes: TimerStartedEventAttributes?
        /// If the event is of type DecisionTaskCompleted then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let decisionTaskCompletedEventAttributes: DecisionTaskCompletedEventAttributes?
        /// If the event is of type RequestCancelExternalWorkflowExecutionFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let requestCancelExternalWorkflowExecutionFailedEventAttributes: RequestCancelExternalWorkflowExecutionFailedEventAttributes?
        /// If the event is of type SignalExternalWorkflowExecutionInitiated then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let signalExternalWorkflowExecutionInitiatedEventAttributes: SignalExternalWorkflowExecutionInitiatedEventAttributes?
        /// The system generated ID of the event. This ID uniquely identifies the event with in the workflow execution history.
        public let eventId: Int64
        /// If the event is of type CancelWorkflowExecutionFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let cancelWorkflowExecutionFailedEventAttributes: CancelWorkflowExecutionFailedEventAttributes?
        /// Provides the details of the LambdaFunctionFailed event. It isn't set for other event types.
        public let lambdaFunctionFailedEventAttributes: LambdaFunctionFailedEventAttributes?
        /// If the event is of type ExternalWorkflowExecutionSignaled then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let externalWorkflowExecutionSignaledEventAttributes: ExternalWorkflowExecutionSignaledEventAttributes?
        /// If the event is of type FailWorkflowExecutionFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let failWorkflowExecutionFailedEventAttributes: FailWorkflowExecutionFailedEventAttributes?
        /// Provides the details of the StartLambdaFunctionFailed event. It isn't set for other event types.
        public let startLambdaFunctionFailedEventAttributes: StartLambdaFunctionFailedEventAttributes?
        /// If the event is of type StartTimerFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let startTimerFailedEventAttributes: StartTimerFailedEventAttributes?
        /// If the event is of type WorkflowExecutionFailed then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let workflowExecutionFailedEventAttributes: WorkflowExecutionFailedEventAttributes?
        /// Provides the details of the ScheduleLambdaFunctionFailed event. It isn't set for other event types.
        public let scheduleLambdaFunctionFailedEventAttributes: ScheduleLambdaFunctionFailedEventAttributes?
        /// If the event is of type ChildWorkflowExecutionTerminated then this member is set and provides detailed information about the event. It isn't set for other event types.
        public let childWorkflowExecutionTerminatedEventAttributes: ChildWorkflowExecutionTerminatedEventAttributes?

        public init(lambdaFunctionCompletedEventAttributes: LambdaFunctionCompletedEventAttributes? = nil, externalWorkflowExecutionCancelRequestedEventAttributes: ExternalWorkflowExecutionCancelRequestedEventAttributes? = nil, signalExternalWorkflowExecutionFailedEventAttributes: SignalExternalWorkflowExecutionFailedEventAttributes? = nil, startChildWorkflowExecutionInitiatedEventAttributes: StartChildWorkflowExecutionInitiatedEventAttributes? = nil, decisionTaskScheduledEventAttributes: DecisionTaskScheduledEventAttributes? = nil, childWorkflowExecutionTimedOutEventAttributes: ChildWorkflowExecutionTimedOutEventAttributes? = nil, activityTaskCanceledEventAttributes: ActivityTaskCanceledEventAttributes? = nil, requestCancelExternalWorkflowExecutionInitiatedEventAttributes: RequestCancelExternalWorkflowExecutionInitiatedEventAttributes? = nil, timerFiredEventAttributes: TimerFiredEventAttributes? = nil, childWorkflowExecutionCanceledEventAttributes: ChildWorkflowExecutionCanceledEventAttributes? = nil, workflowExecutionStartedEventAttributes: WorkflowExecutionStartedEventAttributes? = nil, requestCancelActivityTaskFailedEventAttributes: RequestCancelActivityTaskFailedEventAttributes? = nil, timerCanceledEventAttributes: TimerCanceledEventAttributes? = nil, decisionTaskStartedEventAttributes: DecisionTaskStartedEventAttributes? = nil, childWorkflowExecutionCompletedEventAttributes: ChildWorkflowExecutionCompletedEventAttributes? = nil, workflowExecutionCanceledEventAttributes: WorkflowExecutionCanceledEventAttributes? = nil, activityTaskTimedOutEventAttributes: ActivityTaskTimedOutEventAttributes? = nil, activityTaskFailedEventAttributes: ActivityTaskFailedEventAttributes? = nil, workflowExecutionTimedOutEventAttributes: WorkflowExecutionTimedOutEventAttributes? = nil, cancelTimerFailedEventAttributes: CancelTimerFailedEventAttributes? = nil, workflowExecutionTerminatedEventAttributes: WorkflowExecutionTerminatedEventAttributes? = nil, workflowExecutionCancelRequestedEventAttributes: WorkflowExecutionCancelRequestedEventAttributes? = nil, workflowExecutionCompletedEventAttributes: WorkflowExecutionCompletedEventAttributes? = nil, eventTimestamp: TimeStamp, childWorkflowExecutionStartedEventAttributes: ChildWorkflowExecutionStartedEventAttributes? = nil, completeWorkflowExecutionFailedEventAttributes: CompleteWorkflowExecutionFailedEventAttributes? = nil, workflowExecutionContinuedAsNewEventAttributes: WorkflowExecutionContinuedAsNewEventAttributes? = nil, markerRecordedEventAttributes: MarkerRecordedEventAttributes? = nil, eventType: EventType, lambdaFunctionStartedEventAttributes: LambdaFunctionStartedEventAttributes? = nil, lambdaFunctionTimedOutEventAttributes: LambdaFunctionTimedOutEventAttributes? = nil, activityTaskScheduledEventAttributes: ActivityTaskScheduledEventAttributes? = nil, scheduleActivityTaskFailedEventAttributes: ScheduleActivityTaskFailedEventAttributes? = nil, activityTaskCompletedEventAttributes: ActivityTaskCompletedEventAttributes? = nil, continueAsNewWorkflowExecutionFailedEventAttributes: ContinueAsNewWorkflowExecutionFailedEventAttributes? = nil, decisionTaskTimedOutEventAttributes: DecisionTaskTimedOutEventAttributes? = nil, lambdaFunctionScheduledEventAttributes: LambdaFunctionScheduledEventAttributes? = nil, workflowExecutionSignaledEventAttributes: WorkflowExecutionSignaledEventAttributes? = nil, activityTaskStartedEventAttributes: ActivityTaskStartedEventAttributes? = nil, childWorkflowExecutionFailedEventAttributes: ChildWorkflowExecutionFailedEventAttributes? = nil, recordMarkerFailedEventAttributes: RecordMarkerFailedEventAttributes? = nil, activityTaskCancelRequestedEventAttributes: ActivityTaskCancelRequestedEventAttributes? = nil, startChildWorkflowExecutionFailedEventAttributes: StartChildWorkflowExecutionFailedEventAttributes? = nil, timerStartedEventAttributes: TimerStartedEventAttributes? = nil, decisionTaskCompletedEventAttributes: DecisionTaskCompletedEventAttributes? = nil, requestCancelExternalWorkflowExecutionFailedEventAttributes: RequestCancelExternalWorkflowExecutionFailedEventAttributes? = nil, signalExternalWorkflowExecutionInitiatedEventAttributes: SignalExternalWorkflowExecutionInitiatedEventAttributes? = nil, eventId: Int64, cancelWorkflowExecutionFailedEventAttributes: CancelWorkflowExecutionFailedEventAttributes? = nil, lambdaFunctionFailedEventAttributes: LambdaFunctionFailedEventAttributes? = nil, externalWorkflowExecutionSignaledEventAttributes: ExternalWorkflowExecutionSignaledEventAttributes? = nil, failWorkflowExecutionFailedEventAttributes: FailWorkflowExecutionFailedEventAttributes? = nil, startLambdaFunctionFailedEventAttributes: StartLambdaFunctionFailedEventAttributes? = nil, startTimerFailedEventAttributes: StartTimerFailedEventAttributes? = nil, workflowExecutionFailedEventAttributes: WorkflowExecutionFailedEventAttributes? = nil, scheduleLambdaFunctionFailedEventAttributes: ScheduleLambdaFunctionFailedEventAttributes? = nil, childWorkflowExecutionTerminatedEventAttributes: ChildWorkflowExecutionTerminatedEventAttributes? = nil) {
            self.lambdaFunctionCompletedEventAttributes = lambdaFunctionCompletedEventAttributes
            self.externalWorkflowExecutionCancelRequestedEventAttributes = externalWorkflowExecutionCancelRequestedEventAttributes
            self.signalExternalWorkflowExecutionFailedEventAttributes = signalExternalWorkflowExecutionFailedEventAttributes
            self.startChildWorkflowExecutionInitiatedEventAttributes = startChildWorkflowExecutionInitiatedEventAttributes
            self.decisionTaskScheduledEventAttributes = decisionTaskScheduledEventAttributes
            self.childWorkflowExecutionTimedOutEventAttributes = childWorkflowExecutionTimedOutEventAttributes
            self.activityTaskCanceledEventAttributes = activityTaskCanceledEventAttributes
            self.requestCancelExternalWorkflowExecutionInitiatedEventAttributes = requestCancelExternalWorkflowExecutionInitiatedEventAttributes
            self.timerFiredEventAttributes = timerFiredEventAttributes
            self.childWorkflowExecutionCanceledEventAttributes = childWorkflowExecutionCanceledEventAttributes
            self.workflowExecutionStartedEventAttributes = workflowExecutionStartedEventAttributes
            self.requestCancelActivityTaskFailedEventAttributes = requestCancelActivityTaskFailedEventAttributes
            self.timerCanceledEventAttributes = timerCanceledEventAttributes
            self.decisionTaskStartedEventAttributes = decisionTaskStartedEventAttributes
            self.childWorkflowExecutionCompletedEventAttributes = childWorkflowExecutionCompletedEventAttributes
            self.workflowExecutionCanceledEventAttributes = workflowExecutionCanceledEventAttributes
            self.activityTaskTimedOutEventAttributes = activityTaskTimedOutEventAttributes
            self.activityTaskFailedEventAttributes = activityTaskFailedEventAttributes
            self.workflowExecutionTimedOutEventAttributes = workflowExecutionTimedOutEventAttributes
            self.cancelTimerFailedEventAttributes = cancelTimerFailedEventAttributes
            self.workflowExecutionTerminatedEventAttributes = workflowExecutionTerminatedEventAttributes
            self.workflowExecutionCancelRequestedEventAttributes = workflowExecutionCancelRequestedEventAttributes
            self.workflowExecutionCompletedEventAttributes = workflowExecutionCompletedEventAttributes
            self.eventTimestamp = eventTimestamp
            self.childWorkflowExecutionStartedEventAttributes = childWorkflowExecutionStartedEventAttributes
            self.completeWorkflowExecutionFailedEventAttributes = completeWorkflowExecutionFailedEventAttributes
            self.workflowExecutionContinuedAsNewEventAttributes = workflowExecutionContinuedAsNewEventAttributes
            self.markerRecordedEventAttributes = markerRecordedEventAttributes
            self.eventType = eventType
            self.lambdaFunctionStartedEventAttributes = lambdaFunctionStartedEventAttributes
            self.lambdaFunctionTimedOutEventAttributes = lambdaFunctionTimedOutEventAttributes
            self.activityTaskScheduledEventAttributes = activityTaskScheduledEventAttributes
            self.scheduleActivityTaskFailedEventAttributes = scheduleActivityTaskFailedEventAttributes
            self.activityTaskCompletedEventAttributes = activityTaskCompletedEventAttributes
            self.continueAsNewWorkflowExecutionFailedEventAttributes = continueAsNewWorkflowExecutionFailedEventAttributes
            self.decisionTaskTimedOutEventAttributes = decisionTaskTimedOutEventAttributes
            self.lambdaFunctionScheduledEventAttributes = lambdaFunctionScheduledEventAttributes
            self.workflowExecutionSignaledEventAttributes = workflowExecutionSignaledEventAttributes
            self.activityTaskStartedEventAttributes = activityTaskStartedEventAttributes
            self.childWorkflowExecutionFailedEventAttributes = childWorkflowExecutionFailedEventAttributes
            self.recordMarkerFailedEventAttributes = recordMarkerFailedEventAttributes
            self.activityTaskCancelRequestedEventAttributes = activityTaskCancelRequestedEventAttributes
            self.startChildWorkflowExecutionFailedEventAttributes = startChildWorkflowExecutionFailedEventAttributes
            self.timerStartedEventAttributes = timerStartedEventAttributes
            self.decisionTaskCompletedEventAttributes = decisionTaskCompletedEventAttributes
            self.requestCancelExternalWorkflowExecutionFailedEventAttributes = requestCancelExternalWorkflowExecutionFailedEventAttributes
            self.signalExternalWorkflowExecutionInitiatedEventAttributes = signalExternalWorkflowExecutionInitiatedEventAttributes
            self.eventId = eventId
            self.cancelWorkflowExecutionFailedEventAttributes = cancelWorkflowExecutionFailedEventAttributes
            self.lambdaFunctionFailedEventAttributes = lambdaFunctionFailedEventAttributes
            self.externalWorkflowExecutionSignaledEventAttributes = externalWorkflowExecutionSignaledEventAttributes
            self.failWorkflowExecutionFailedEventAttributes = failWorkflowExecutionFailedEventAttributes
            self.startLambdaFunctionFailedEventAttributes = startLambdaFunctionFailedEventAttributes
            self.startTimerFailedEventAttributes = startTimerFailedEventAttributes
            self.workflowExecutionFailedEventAttributes = workflowExecutionFailedEventAttributes
            self.scheduleLambdaFunctionFailedEventAttributes = scheduleLambdaFunctionFailedEventAttributes
            self.childWorkflowExecutionTerminatedEventAttributes = childWorkflowExecutionTerminatedEventAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case lambdaFunctionCompletedEventAttributes = "lambdaFunctionCompletedEventAttributes"
            case externalWorkflowExecutionCancelRequestedEventAttributes = "externalWorkflowExecutionCancelRequestedEventAttributes"
            case signalExternalWorkflowExecutionFailedEventAttributes = "signalExternalWorkflowExecutionFailedEventAttributes"
            case startChildWorkflowExecutionInitiatedEventAttributes = "startChildWorkflowExecutionInitiatedEventAttributes"
            case decisionTaskScheduledEventAttributes = "decisionTaskScheduledEventAttributes"
            case childWorkflowExecutionTimedOutEventAttributes = "childWorkflowExecutionTimedOutEventAttributes"
            case activityTaskCanceledEventAttributes = "activityTaskCanceledEventAttributes"
            case requestCancelExternalWorkflowExecutionInitiatedEventAttributes = "requestCancelExternalWorkflowExecutionInitiatedEventAttributes"
            case timerFiredEventAttributes = "timerFiredEventAttributes"
            case childWorkflowExecutionCanceledEventAttributes = "childWorkflowExecutionCanceledEventAttributes"
            case workflowExecutionStartedEventAttributes = "workflowExecutionStartedEventAttributes"
            case requestCancelActivityTaskFailedEventAttributes = "requestCancelActivityTaskFailedEventAttributes"
            case timerCanceledEventAttributes = "timerCanceledEventAttributes"
            case decisionTaskStartedEventAttributes = "decisionTaskStartedEventAttributes"
            case childWorkflowExecutionCompletedEventAttributes = "childWorkflowExecutionCompletedEventAttributes"
            case workflowExecutionCanceledEventAttributes = "workflowExecutionCanceledEventAttributes"
            case activityTaskTimedOutEventAttributes = "activityTaskTimedOutEventAttributes"
            case activityTaskFailedEventAttributes = "activityTaskFailedEventAttributes"
            case workflowExecutionTimedOutEventAttributes = "workflowExecutionTimedOutEventAttributes"
            case cancelTimerFailedEventAttributes = "cancelTimerFailedEventAttributes"
            case workflowExecutionTerminatedEventAttributes = "workflowExecutionTerminatedEventAttributes"
            case workflowExecutionCancelRequestedEventAttributes = "workflowExecutionCancelRequestedEventAttributes"
            case workflowExecutionCompletedEventAttributes = "workflowExecutionCompletedEventAttributes"
            case eventTimestamp = "eventTimestamp"
            case childWorkflowExecutionStartedEventAttributes = "childWorkflowExecutionStartedEventAttributes"
            case completeWorkflowExecutionFailedEventAttributes = "completeWorkflowExecutionFailedEventAttributes"
            case workflowExecutionContinuedAsNewEventAttributes = "workflowExecutionContinuedAsNewEventAttributes"
            case markerRecordedEventAttributes = "markerRecordedEventAttributes"
            case eventType = "eventType"
            case lambdaFunctionStartedEventAttributes = "lambdaFunctionStartedEventAttributes"
            case lambdaFunctionTimedOutEventAttributes = "lambdaFunctionTimedOutEventAttributes"
            case activityTaskScheduledEventAttributes = "activityTaskScheduledEventAttributes"
            case scheduleActivityTaskFailedEventAttributes = "scheduleActivityTaskFailedEventAttributes"
            case activityTaskCompletedEventAttributes = "activityTaskCompletedEventAttributes"
            case continueAsNewWorkflowExecutionFailedEventAttributes = "continueAsNewWorkflowExecutionFailedEventAttributes"
            case decisionTaskTimedOutEventAttributes = "decisionTaskTimedOutEventAttributes"
            case lambdaFunctionScheduledEventAttributes = "lambdaFunctionScheduledEventAttributes"
            case workflowExecutionSignaledEventAttributes = "workflowExecutionSignaledEventAttributes"
            case activityTaskStartedEventAttributes = "activityTaskStartedEventAttributes"
            case childWorkflowExecutionFailedEventAttributes = "childWorkflowExecutionFailedEventAttributes"
            case recordMarkerFailedEventAttributes = "recordMarkerFailedEventAttributes"
            case activityTaskCancelRequestedEventAttributes = "activityTaskCancelRequestedEventAttributes"
            case startChildWorkflowExecutionFailedEventAttributes = "startChildWorkflowExecutionFailedEventAttributes"
            case timerStartedEventAttributes = "timerStartedEventAttributes"
            case decisionTaskCompletedEventAttributes = "decisionTaskCompletedEventAttributes"
            case requestCancelExternalWorkflowExecutionFailedEventAttributes = "requestCancelExternalWorkflowExecutionFailedEventAttributes"
            case signalExternalWorkflowExecutionInitiatedEventAttributes = "signalExternalWorkflowExecutionInitiatedEventAttributes"
            case eventId = "eventId"
            case cancelWorkflowExecutionFailedEventAttributes = "cancelWorkflowExecutionFailedEventAttributes"
            case lambdaFunctionFailedEventAttributes = "lambdaFunctionFailedEventAttributes"
            case externalWorkflowExecutionSignaledEventAttributes = "externalWorkflowExecutionSignaledEventAttributes"
            case failWorkflowExecutionFailedEventAttributes = "failWorkflowExecutionFailedEventAttributes"
            case startLambdaFunctionFailedEventAttributes = "startLambdaFunctionFailedEventAttributes"
            case startTimerFailedEventAttributes = "startTimerFailedEventAttributes"
            case workflowExecutionFailedEventAttributes = "workflowExecutionFailedEventAttributes"
            case scheduleLambdaFunctionFailedEventAttributes = "scheduleLambdaFunctionFailedEventAttributes"
            case childWorkflowExecutionTerminatedEventAttributes = "childWorkflowExecutionTerminatedEventAttributes"
        }
    }

    public struct ExternalWorkflowExecutionSignaledEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "workflowExecution", required: true, type: .structure), 
            AWSShapeMember(label: "initiatedEventId", required: true, type: .long)
        ]
        /// The external workflow execution that the signal was delivered to.
        public let workflowExecution: WorkflowExecution
        /// The ID of the SignalExternalWorkflowExecutionInitiated event corresponding to the SignalExternalWorkflowExecution decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64

        public init(workflowExecution: WorkflowExecution, initiatedEventId: Int64) {
            self.workflowExecution = workflowExecution
            self.initiatedEventId = initiatedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case workflowExecution = "workflowExecution"
            case initiatedEventId = "initiatedEventId"
        }
    }

    public struct ActivityTaskCanceledEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "startedEventId", required: true, type: .long), 
            AWSShapeMember(label: "latestCancelRequestedEventId", required: false, type: .long), 
            AWSShapeMember(label: "details", required: false, type: .string), 
            AWSShapeMember(label: "scheduledEventId", required: true, type: .long)
        ]
        /// The ID of the ActivityTaskStarted event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// If set, contains the ID of the last ActivityTaskCancelRequested event recorded for this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let latestCancelRequestedEventId: Int64?
        /// Details of the cancellation.
        public let details: String?
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64

        public init(startedEventId: Int64, latestCancelRequestedEventId: Int64? = nil, details: String? = nil, scheduledEventId: Int64) {
            self.startedEventId = startedEventId
            self.latestCancelRequestedEventId = latestCancelRequestedEventId
            self.details = details
            self.scheduledEventId = scheduledEventId
        }

        private enum CodingKeys: String, CodingKey {
            case startedEventId = "startedEventId"
            case latestCancelRequestedEventId = "latestCancelRequestedEventId"
            case details = "details"
            case scheduledEventId = "scheduledEventId"
        }
    }

    public struct PollForDecisionTaskInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "reverseOrder", required: false, type: .boolean), 
            AWSShapeMember(label: "domain", required: true, type: .string), 
            AWSShapeMember(label: "identity", required: false, type: .string), 
            AWSShapeMember(label: "taskList", required: true, type: .structure), 
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "maximumPageSize", required: false, type: .integer)
        ]
        /// When set to true, returns the events in reverse order. By default the results are returned in ascending order of the eventTimestamp of the events.
        public let reverseOrder: Bool?
        /// The name of the domain containing the task lists to poll.
        public let domain: String
        /// Identity of the decider making the request, which is recorded in the DecisionTaskStarted event in the workflow history. This enables diagnostic tracing when problems arise. The form of this identity is user defined.
        public let identity: String?
        /// Specifies the task list to poll for decision tasks. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        public let taskList: TaskList
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.  The nextPageToken returned by this action cannot be used with GetWorkflowExecutionHistory to get the next page. You must call PollForDecisionTask again (with the nextPageToken) to retrieve the next page of history records. Calling PollForDecisionTask with a nextPageToken doesn't return a new decision task. 
        public let nextPageToken: String?
        /// The maximum number of results that are returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public let maximumPageSize: Int32?

        public init(reverseOrder: Bool? = nil, domain: String, identity: String? = nil, taskList: TaskList, nextPageToken: String? = nil, maximumPageSize: Int32? = nil) {
            self.reverseOrder = reverseOrder
            self.domain = domain
            self.identity = identity
            self.taskList = taskList
            self.nextPageToken = nextPageToken
            self.maximumPageSize = maximumPageSize
        }

        private enum CodingKeys: String, CodingKey {
            case reverseOrder = "reverseOrder"
            case domain = "domain"
            case identity = "identity"
            case taskList = "taskList"
            case nextPageToken = "nextPageToken"
            case maximumPageSize = "maximumPageSize"
        }
    }

    public struct TagFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tag", required: true, type: .string)
        ]
        ///  Specifies the tag that must be associated with the execution for it to meet the filter criteria.
        public let tag: String

        public init(tag: String) {
            self.tag = tag
        }

        private enum CodingKeys: String, CodingKey {
            case tag = "tag"
        }
    }

    public struct Run: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "runId", required: false, type: .string)
        ]
        /// The runId of a workflow execution. This ID is generated by the service and can be used to uniquely identify the workflow execution within a domain.
        public let runId: String?

        public init(runId: String? = nil) {
            self.runId = runId
        }

        private enum CodingKeys: String, CodingKey {
            case runId = "runId"
        }
    }

    public struct DescribeDomainInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The name of the domain to describe.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct CountClosedWorkflowExecutionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "startTimeFilter", required: false, type: .structure), 
            AWSShapeMember(label: "domain", required: true, type: .string), 
            AWSShapeMember(label: "closeStatusFilter", required: false, type: .structure), 
            AWSShapeMember(label: "tagFilter", required: false, type: .structure), 
            AWSShapeMember(label: "closeTimeFilter", required: false, type: .structure), 
            AWSShapeMember(label: "executionFilter", required: false, type: .structure), 
            AWSShapeMember(label: "typeFilter", required: false, type: .structure)
        ]
        /// If specified, only workflow executions that meet the start time criteria of the filter are counted.   startTimeFilter and closeTimeFilter are mutually exclusive. You must specify one of these in a request but not both. 
        public let startTimeFilter: ExecutionTimeFilter?
        /// The name of the domain containing the workflow executions to count.
        public let domain: String
        /// If specified, only workflow executions that match this close status are counted. This filter has an affect only if executionStatus is specified as CLOSED.   closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request. 
        public let closeStatusFilter: CloseStatusFilter?
        /// If specified, only executions that have a tag that matches the filter are counted.   closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request. 
        public let tagFilter: TagFilter?
        /// If specified, only workflow executions that meet the close time criteria of the filter are counted.   startTimeFilter and closeTimeFilter are mutually exclusive. You must specify one of these in a request but not both. 
        public let closeTimeFilter: ExecutionTimeFilter?
        /// If specified, only workflow executions matching the WorkflowId in the filter are counted.   closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request. 
        public let executionFilter: WorkflowExecutionFilter?
        /// If specified, indicates the type of the workflow executions to be counted.   closeStatusFilter, executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request. 
        public let typeFilter: WorkflowTypeFilter?

        public init(startTimeFilter: ExecutionTimeFilter? = nil, domain: String, closeStatusFilter: CloseStatusFilter? = nil, tagFilter: TagFilter? = nil, closeTimeFilter: ExecutionTimeFilter? = nil, executionFilter: WorkflowExecutionFilter? = nil, typeFilter: WorkflowTypeFilter? = nil) {
            self.startTimeFilter = startTimeFilter
            self.domain = domain
            self.closeStatusFilter = closeStatusFilter
            self.tagFilter = tagFilter
            self.closeTimeFilter = closeTimeFilter
            self.executionFilter = executionFilter
            self.typeFilter = typeFilter
        }

        private enum CodingKeys: String, CodingKey {
            case startTimeFilter = "startTimeFilter"
            case domain = "domain"
            case closeStatusFilter = "closeStatusFilter"
            case tagFilter = "tagFilter"
            case closeTimeFilter = "closeTimeFilter"
            case executionFilter = "executionFilter"
            case typeFilter = "typeFilter"
        }
    }

    public enum ScheduleActivityTaskFailedCause: String, CustomStringConvertible, Codable {
        case activityTypeDeprecated = "ACTIVITY_TYPE_DEPRECATED"
        case activityTypeDoesNotExist = "ACTIVITY_TYPE_DOES_NOT_EXIST"
        case activityIdAlreadyInUse = "ACTIVITY_ID_ALREADY_IN_USE"
        case openActivitiesLimitExceeded = "OPEN_ACTIVITIES_LIMIT_EXCEEDED"
        case activityCreationRateExceeded = "ACTIVITY_CREATION_RATE_EXCEEDED"
        case defaultScheduleToCloseTimeoutUndefined = "DEFAULT_SCHEDULE_TO_CLOSE_TIMEOUT_UNDEFINED"
        case defaultTaskListUndefined = "DEFAULT_TASK_LIST_UNDEFINED"
        case defaultScheduleToStartTimeoutUndefined = "DEFAULT_SCHEDULE_TO_START_TIMEOUT_UNDEFINED"
        case defaultStartToCloseTimeoutUndefined = "DEFAULT_START_TO_CLOSE_TIMEOUT_UNDEFINED"
        case defaultHeartbeatTimeoutUndefined = "DEFAULT_HEARTBEAT_TIMEOUT_UNDEFINED"
        case operationNotPermitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct WorkflowTypeConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "defaultTaskList", required: false, type: .structure), 
            AWSShapeMember(label: "defaultChildPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "defaultExecutionStartToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "defaultTaskPriority", required: false, type: .string), 
            AWSShapeMember(label: "defaultTaskStartToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "defaultLambdaRole", required: false, type: .string)
        ]
        ///  The default task list, specified when registering the workflow type, for decisions tasks scheduled for workflow executions of this type. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution Decision.
        public let defaultTaskList: TaskList?
        ///  The default policy to use for the child workflow executions when a workflow execution of this type is terminated, by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution Decision. The supported child policies are:    TERMINATE – The child executions are terminated.    REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.    ABANDON – No action is taken. The child executions continue to run.  
        public let defaultChildPolicy: ChildPolicy?
        ///  The default maximum duration, specified when registering the workflow type, for executions of this workflow type. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution Decision. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let defaultExecutionStartToCloseTimeout: String?
        ///  The default task priority, specified when registering the workflow type, for all decision tasks of this workflow type. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution decision. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon SWF Developer Guide.
        public let defaultTaskPriority: String?
        ///  The default maximum duration, specified when registering the workflow type, that a decision task for executions of this workflow type might take before returning completion or failure. If the task doesn'tdo close in the specified time then the task is automatically timed out and rescheduled. If the decider eventually reports a completion or failure, it is ignored. This default can be overridden when starting a workflow execution using the StartWorkflowExecution action or the StartChildWorkflowExecution Decision. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let defaultTaskStartToCloseTimeout: String?
        /// The default IAM role attached to this workflow type.  Executions of this workflow type need IAM roles to invoke Lambda functions. If you don't specify an IAM role when starting this workflow type, the default Lambda role is attached to the execution. For more information, see http://docs.aws.amazon.com/amazonswf/latest/developerguide/lambda-task.html in the Amazon SWF Developer Guide. 
        public let defaultLambdaRole: String?

        public init(defaultTaskList: TaskList? = nil, defaultChildPolicy: ChildPolicy? = nil, defaultExecutionStartToCloseTimeout: String? = nil, defaultTaskPriority: String? = nil, defaultTaskStartToCloseTimeout: String? = nil, defaultLambdaRole: String? = nil) {
            self.defaultTaskList = defaultTaskList
            self.defaultChildPolicy = defaultChildPolicy
            self.defaultExecutionStartToCloseTimeout = defaultExecutionStartToCloseTimeout
            self.defaultTaskPriority = defaultTaskPriority
            self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
            self.defaultLambdaRole = defaultLambdaRole
        }

        private enum CodingKeys: String, CodingKey {
            case defaultTaskList = "defaultTaskList"
            case defaultChildPolicy = "defaultChildPolicy"
            case defaultExecutionStartToCloseTimeout = "defaultExecutionStartToCloseTimeout"
            case defaultTaskPriority = "defaultTaskPriority"
            case defaultTaskStartToCloseTimeout = "defaultTaskStartToCloseTimeout"
            case defaultLambdaRole = "defaultLambdaRole"
        }
    }

    public struct DescribeWorkflowTypeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "workflowType", required: true, type: .structure), 
            AWSShapeMember(label: "domain", required: true, type: .string)
        ]
        /// The workflow type to describe.
        public let workflowType: WorkflowType
        /// The name of the domain in which this workflow type is registered.
        public let domain: String

        public init(workflowType: WorkflowType, domain: String) {
            self.workflowType = workflowType
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case workflowType = "workflowType"
            case domain = "domain"
        }
    }

    public struct DecisionTask: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "startedEventId", required: true, type: .long), 
            AWSShapeMember(label: "workflowType", required: true, type: .structure), 
            AWSShapeMember(label: "events", required: true, type: .list), 
            AWSShapeMember(label: "previousStartedEventId", required: false, type: .long), 
            AWSShapeMember(label: "workflowExecution", required: true, type: .structure), 
            AWSShapeMember(label: "taskToken", required: true, type: .string), 
            AWSShapeMember(label: "nextPageToken", required: false, type: .string)
        ]
        /// The ID of the DecisionTaskStarted event recorded in the history.
        public let startedEventId: Int64
        /// The type of the workflow execution for which this decision task was created.
        public let workflowType: WorkflowType
        /// A paginated list of history events of the workflow execution. The decider uses this during the processing of the decision task.
        public let events: [HistoryEvent]
        /// The ID of the DecisionTaskStarted event of the previous decision task of this workflow execution that was processed by the decider. This can be used to determine the events in the history new since the last decision task received by the decider.
        public let previousStartedEventId: Int64?
        /// The workflow execution for which this decision task was created.
        public let workflowExecution: WorkflowExecution
        /// The opaque string used as a handle on the task. This token is used by workers to communicate progress and response information back to the system about the task.
        public let taskToken: String
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?

        public init(startedEventId: Int64, workflowType: WorkflowType, events: [HistoryEvent], previousStartedEventId: Int64? = nil, workflowExecution: WorkflowExecution, taskToken: String, nextPageToken: String? = nil) {
            self.startedEventId = startedEventId
            self.workflowType = workflowType
            self.events = events
            self.previousStartedEventId = previousStartedEventId
            self.workflowExecution = workflowExecution
            self.taskToken = taskToken
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case startedEventId = "startedEventId"
            case workflowType = "workflowType"
            case events = "events"
            case previousStartedEventId = "previousStartedEventId"
            case workflowExecution = "workflowExecution"
            case taskToken = "taskToken"
            case nextPageToken = "nextPageToken"
        }
    }

    public enum WorkflowExecutionTimeoutType: String, CustomStringConvertible, Codable {
        case startToClose = "START_TO_CLOSE"
        public var description: String { return self.rawValue }
    }

    public struct DescribeWorkflowExecutionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "execution", required: true, type: .structure), 
            AWSShapeMember(label: "domain", required: true, type: .string)
        ]
        /// The workflow execution to describe.
        public let execution: WorkflowExecution
        /// The name of the domain containing the workflow execution.
        public let domain: String

        public init(execution: WorkflowExecution, domain: String) {
            self.execution = execution
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case execution = "execution"
            case domain = "domain"
        }
    }

    public struct CountPendingActivityTasksInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskList", required: true, type: .structure), 
            AWSShapeMember(label: "domain", required: true, type: .string)
        ]
        /// The name of the task list.
        public let taskList: TaskList
        /// The name of the domain that contains the task list.
        public let domain: String

        public init(taskList: TaskList, domain: String) {
            self.taskList = taskList
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case taskList = "taskList"
            case domain = "domain"
        }
    }

    public struct ActivityTaskTimedOutEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "startedEventId", required: true, type: .long), 
            AWSShapeMember(label: "details", required: false, type: .string), 
            AWSShapeMember(label: "timeoutType", required: true, type: .enum), 
            AWSShapeMember(label: "scheduledEventId", required: true, type: .long)
        ]
        /// The ID of the ActivityTaskStarted event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// Contains the content of the details parameter for the last call made by the activity to RecordActivityTaskHeartbeat.
        public let details: String?
        /// The type of the timeout that caused this event.
        public let timeoutType: ActivityTaskTimeoutType
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64

        public init(startedEventId: Int64, details: String? = nil, timeoutType: ActivityTaskTimeoutType, scheduledEventId: Int64) {
            self.startedEventId = startedEventId
            self.details = details
            self.timeoutType = timeoutType
            self.scheduledEventId = scheduledEventId
        }

        private enum CodingKeys: String, CodingKey {
            case startedEventId = "startedEventId"
            case details = "details"
            case timeoutType = "timeoutType"
            case scheduledEventId = "scheduledEventId"
        }
    }

    public enum WorkflowExecutionCancelRequestedCause: String, CustomStringConvertible, Codable {
        case childPolicyApplied = "CHILD_POLICY_APPLIED"
        public var description: String { return self.rawValue }
    }

    public struct ChildWorkflowExecutionCompletedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "startedEventId", required: true, type: .long), 
            AWSShapeMember(label: "workflowExecution", required: true, type: .structure), 
            AWSShapeMember(label: "workflowType", required: true, type: .structure), 
            AWSShapeMember(label: "result", required: false, type: .string), 
            AWSShapeMember(label: "initiatedEventId", required: true, type: .long)
        ]
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// The child workflow execution that was completed.
        public let workflowExecution: WorkflowExecution
        /// The type of the child workflow execution.
        public let workflowType: WorkflowType
        /// The result of the child workflow execution.
        public let result: String?
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution Decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64

        public init(startedEventId: Int64, workflowExecution: WorkflowExecution, workflowType: WorkflowType, result: String? = nil, initiatedEventId: Int64) {
            self.startedEventId = startedEventId
            self.workflowExecution = workflowExecution
            self.workflowType = workflowType
            self.result = result
            self.initiatedEventId = initiatedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case startedEventId = "startedEventId"
            case workflowExecution = "workflowExecution"
            case workflowType = "workflowType"
            case result = "result"
            case initiatedEventId = "initiatedEventId"
        }
    }

    public struct PendingTaskCount: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "truncated", required: false, type: .boolean), 
            AWSShapeMember(label: "count", required: true, type: .integer)
        ]
        /// If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.
        public let truncated: Bool?
        /// The number of tasks in the task list.
        public let count: Int32

        public init(truncated: Bool? = nil, count: Int32) {
            self.truncated = truncated
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case truncated = "truncated"
            case count = "count"
        }
    }

    public struct RespondActivityTaskCanceledInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskToken", required: true, type: .string), 
            AWSShapeMember(label: "details", required: false, type: .string)
        ]
        /// The taskToken of the ActivityTask.   taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results. 
        public let taskToken: String
        ///  Information about the cancellation.
        public let details: String?

        public init(taskToken: String, details: String? = nil) {
            self.taskToken = taskToken
            self.details = details
        }

        private enum CodingKeys: String, CodingKey {
            case taskToken = "taskToken"
            case details = "details"
        }
    }

    public struct WorkflowExecutionDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "executionInfo", required: true, type: .structure), 
            AWSShapeMember(label: "latestExecutionContext", required: false, type: .string), 
            AWSShapeMember(label: "executionConfiguration", required: true, type: .structure), 
            AWSShapeMember(label: "openCounts", required: true, type: .structure), 
            AWSShapeMember(label: "latestActivityTaskTimestamp", required: false, type: .timestamp)
        ]
        /// Information about the workflow execution.
        public let executionInfo: WorkflowExecutionInfo
        /// The latest executionContext provided by the decider for this workflow execution. A decider can provide an executionContext (a free-form string) when closing a decision task using RespondDecisionTaskCompleted.
        public let latestExecutionContext: String?
        /// The configuration settings for this workflow execution including timeout values, tasklist etc.
        public let executionConfiguration: WorkflowExecutionConfiguration
        /// The number of tasks for this workflow execution. This includes open and closed tasks of all types.
        public let openCounts: WorkflowExecutionOpenCounts
        /// The time when the last activity task was scheduled for this workflow execution. You can use this information to determine if the workflow has not made progress for an unusually long period of time and might require a corrective action.
        public let latestActivityTaskTimestamp: TimeStamp?

        public init(executionInfo: WorkflowExecutionInfo, latestExecutionContext: String? = nil, executionConfiguration: WorkflowExecutionConfiguration, openCounts: WorkflowExecutionOpenCounts, latestActivityTaskTimestamp: TimeStamp? = nil) {
            self.executionInfo = executionInfo
            self.latestExecutionContext = latestExecutionContext
            self.executionConfiguration = executionConfiguration
            self.openCounts = openCounts
            self.latestActivityTaskTimestamp = latestActivityTaskTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case executionInfo = "executionInfo"
            case latestExecutionContext = "latestExecutionContext"
            case executionConfiguration = "executionConfiguration"
            case openCounts = "openCounts"
            case latestActivityTaskTimestamp = "latestActivityTaskTimestamp"
        }
    }

    public enum FailWorkflowExecutionFailedCause: String, CustomStringConvertible, Codable {
        case unhandledDecision = "UNHANDLED_DECISION"
        case operationNotPermitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct DomainInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: true, type: .enum), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The status of the domain:    REGISTERED – The domain is properly registered and available. You can use this domain for registering types and creating new workflow executions.     DEPRECATED – The domain was deprecated using DeprecateDomain, but is still in use. You should not create new workflow executions in this domain.   
        public let status: RegistrationStatus
        /// The description of the domain provided through RegisterDomain.
        public let description: String?
        /// The name of the domain. This name is unique within the account.
        public let name: String

        public init(status: RegistrationStatus, description: String? = nil, name: String) {
            self.status = status
            self.description = description
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case description = "description"
            case name = "name"
        }
    }

    public enum ActivityTaskTimeoutType: String, CustomStringConvertible, Codable {
        case startToClose = "START_TO_CLOSE"
        case scheduleToStart = "SCHEDULE_TO_START"
        case scheduleToClose = "SCHEDULE_TO_CLOSE"
        case heartbeat = "HEARTBEAT"
        public var description: String { return self.rawValue }
    }

    public struct SignalExternalWorkflowExecutionFailedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "workflowId", required: true, type: .string), 
            AWSShapeMember(label: "cause", required: true, type: .enum), 
            AWSShapeMember(label: "runId", required: false, type: .string), 
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "control", required: false, type: .string), 
            AWSShapeMember(label: "initiatedEventId", required: true, type: .long)
        ]
        /// The workflowId of the external workflow execution that the signal was being delivered to.
        public let workflowId: String
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.  If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows in the Amazon SWF Developer Guide. 
        public let cause: SignalExternalWorkflowExecutionFailedCause
        /// The runId of the external workflow execution that the signal was being delivered to.
        public let runId: String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the SignalExternalWorkflowExecution decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the workflow execution.
        public let control: String?
        /// The ID of the SignalExternalWorkflowExecutionInitiated event corresponding to the SignalExternalWorkflowExecution decision to request this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64

        public init(workflowId: String, cause: SignalExternalWorkflowExecutionFailedCause, runId: String? = nil, decisionTaskCompletedEventId: Int64, control: String? = nil, initiatedEventId: Int64) {
            self.workflowId = workflowId
            self.cause = cause
            self.runId = runId
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.control = control
            self.initiatedEventId = initiatedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case workflowId = "workflowId"
            case cause = "cause"
            case runId = "runId"
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case control = "control"
            case initiatedEventId = "initiatedEventId"
        }
    }

    public struct RespondActivityTaskFailedInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskToken", required: true, type: .string), 
            AWSShapeMember(label: "details", required: false, type: .string), 
            AWSShapeMember(label: "reason", required: false, type: .string)
        ]
        /// The taskToken of the ActivityTask.   taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results. 
        public let taskToken: String
        ///  Detailed information about the failure.
        public let details: String?
        /// Description of the error that may assist in diagnostics.
        public let reason: String?

        public init(taskToken: String, details: String? = nil, reason: String? = nil) {
            self.taskToken = taskToken
            self.details = details
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case taskToken = "taskToken"
            case details = "details"
            case reason = "reason"
        }
    }

    public enum StartTimerFailedCause: String, CustomStringConvertible, Codable {
        case timerIdAlreadyInUse = "TIMER_ID_ALREADY_IN_USE"
        case openTimersLimitExceeded = "OPEN_TIMERS_LIMIT_EXCEEDED"
        case timerCreationRateExceeded = "TIMER_CREATION_RATE_EXCEEDED"
        case operationNotPermitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public enum RecordMarkerFailedCause: String, CustomStringConvertible, Codable {
        case operationNotPermitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public enum StartLambdaFunctionFailedCause: String, CustomStringConvertible, Codable {
        case assumeRoleFailed = "ASSUME_ROLE_FAILED"
        public var description: String { return self.rawValue }
    }

    public struct ChildWorkflowExecutionStartedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "workflowExecution", required: true, type: .structure), 
            AWSShapeMember(label: "workflowType", required: true, type: .structure), 
            AWSShapeMember(label: "initiatedEventId", required: true, type: .long)
        ]
        /// The child workflow execution that was started.
        public let workflowExecution: WorkflowExecution
        /// The type of the child workflow execution.
        public let workflowType: WorkflowType
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution Decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64

        public init(workflowExecution: WorkflowExecution, workflowType: WorkflowType, initiatedEventId: Int64) {
            self.workflowExecution = workflowExecution
            self.workflowType = workflowType
            self.initiatedEventId = initiatedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case workflowExecution = "workflowExecution"
            case workflowType = "workflowType"
            case initiatedEventId = "initiatedEventId"
        }
    }

    public struct ScheduleActivityTaskDecisionAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "activityType", required: true, type: .structure), 
            AWSShapeMember(label: "input", required: false, type: .string), 
            AWSShapeMember(label: "scheduleToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "startToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "taskList", required: false, type: .structure), 
            AWSShapeMember(label: "activityId", required: true, type: .string), 
            AWSShapeMember(label: "scheduleToStartTimeout", required: false, type: .string), 
            AWSShapeMember(label: "heartbeatTimeout", required: false, type: .string), 
            AWSShapeMember(label: "control", required: false, type: .string), 
            AWSShapeMember(label: "taskPriority", required: false, type: .string)
        ]
        ///  The type of the activity task to schedule.
        public let activityType: ActivityType
        /// The input provided to the activity task.
        public let input: String?
        /// The maximum duration for this activity task. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.  A schedule-to-close timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default schedule-to-close timeout was specified at registration time then a fault is returned. 
        public let scheduleToCloseTimeout: String?
        /// If set, specifies the maximum duration a worker may take to process this activity task. This overrides the default start-to-close timeout specified when registering the activity type using RegisterActivityType. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.  A start-to-close timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default start-to-close timeout was specified at registration time then a fault is returned. 
        public let startToCloseTimeout: String?
        /// If set, specifies the name of the task list in which to schedule the activity task. If not specified, the defaultTaskList registered with the activity type is used.  A task list for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default task list was specified at registration time then a fault is returned.  The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        public let taskList: TaskList?
        ///  The activityId of the activity task. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        public let activityId: String
        ///  If set, specifies the maximum duration the activity task can wait to be assigned to a worker. This overrides the default schedule-to-start timeout specified when registering the activity type using RegisterActivityType. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.  A schedule-to-start timeout for this activity task must be specified either as a default for the activity type or through this field. If neither this field is set nor a default schedule-to-start timeout was specified at registration time then a fault is returned. 
        public let scheduleToStartTimeout: String?
        /// If set, specifies the maximum time before which a worker processing a task of this type must report progress by calling RecordActivityTaskHeartbeat. If the timeout is exceeded, the activity task is automatically timed out. If the worker subsequently attempts to record a heartbeat or returns a result, it is ignored. This overrides the default heartbeat timeout specified when registering the activity type using RegisterActivityType. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let heartbeatTimeout: String?
        /// Data attached to the event that can be used by the decider in subsequent workflow tasks. This data isn't sent to the activity.
        public let control: String?
        ///  If set, specifies the priority with which the activity task is to be assigned to a worker. This overrides the defaultTaskPriority specified when registering the activity type using RegisterActivityType. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon SWF Developer Guide.
        public let taskPriority: String?

        public init(activityType: ActivityType, input: String? = nil, scheduleToCloseTimeout: String? = nil, startToCloseTimeout: String? = nil, taskList: TaskList? = nil, activityId: String, scheduleToStartTimeout: String? = nil, heartbeatTimeout: String? = nil, control: String? = nil, taskPriority: String? = nil) {
            self.activityType = activityType
            self.input = input
            self.scheduleToCloseTimeout = scheduleToCloseTimeout
            self.startToCloseTimeout = startToCloseTimeout
            self.taskList = taskList
            self.activityId = activityId
            self.scheduleToStartTimeout = scheduleToStartTimeout
            self.heartbeatTimeout = heartbeatTimeout
            self.control = control
            self.taskPriority = taskPriority
        }

        private enum CodingKeys: String, CodingKey {
            case activityType = "activityType"
            case input = "input"
            case scheduleToCloseTimeout = "scheduleToCloseTimeout"
            case startToCloseTimeout = "startToCloseTimeout"
            case taskList = "taskList"
            case activityId = "activityId"
            case scheduleToStartTimeout = "scheduleToStartTimeout"
            case heartbeatTimeout = "heartbeatTimeout"
            case control = "control"
            case taskPriority = "taskPriority"
        }
    }

    public struct CompleteWorkflowExecutionFailedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "cause", required: true, type: .enum)
        ]
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CompleteWorkflowExecution decision to complete this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.  If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows in the Amazon SWF Developer Guide. 
        public let cause: CompleteWorkflowExecutionFailedCause

        public init(decisionTaskCompletedEventId: Int64, cause: CompleteWorkflowExecutionFailedCause) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
        }

        private enum CodingKeys: String, CodingKey {
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case cause = "cause"
        }
    }

    public struct WorkflowExecutionFailedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "details", required: false, type: .string), 
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "reason", required: false, type: .string)
        ]
        /// The details of the failure.
        public let details: String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the FailWorkflowExecution decision to fail this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The descriptive reason provided for the failure.
        public let reason: String?

        public init(details: String? = nil, decisionTaskCompletedEventId: Int64, reason: String? = nil) {
            self.details = details
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.reason = reason
        }

        private enum CodingKeys: String, CodingKey {
            case details = "details"
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case reason = "reason"
        }
    }

    public struct CountOpenWorkflowExecutionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domain", required: true, type: .string), 
            AWSShapeMember(label: "typeFilter", required: false, type: .structure), 
            AWSShapeMember(label: "tagFilter", required: false, type: .structure), 
            AWSShapeMember(label: "startTimeFilter", required: true, type: .structure), 
            AWSShapeMember(label: "executionFilter", required: false, type: .structure)
        ]
        /// The name of the domain containing the workflow executions to count.
        public let domain: String
        /// Specifies the type of the workflow executions to be counted.   executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request. 
        public let typeFilter: WorkflowTypeFilter?
        /// If specified, only executions that have a tag that matches the filter are counted.   executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request. 
        public let tagFilter: TagFilter?
        /// Specifies the start time criteria that workflow executions must meet in order to be counted.
        public let startTimeFilter: ExecutionTimeFilter
        /// If specified, only workflow executions matching the WorkflowId in the filter are counted.   executionFilter, typeFilter and tagFilter are mutually exclusive. You can specify at most one of these in a request. 
        public let executionFilter: WorkflowExecutionFilter?

        public init(domain: String, typeFilter: WorkflowTypeFilter? = nil, tagFilter: TagFilter? = nil, startTimeFilter: ExecutionTimeFilter, executionFilter: WorkflowExecutionFilter? = nil) {
            self.domain = domain
            self.typeFilter = typeFilter
            self.tagFilter = tagFilter
            self.startTimeFilter = startTimeFilter
            self.executionFilter = executionFilter
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "domain"
            case typeFilter = "typeFilter"
            case tagFilter = "tagFilter"
            case startTimeFilter = "startTimeFilter"
            case executionFilter = "executionFilter"
        }
    }

    public enum CloseStatus: String, CustomStringConvertible, Codable {
        case completed = "COMPLETED"
        case failed = "FAILED"
        case canceled = "CANCELED"
        case terminated = "TERMINATED"
        case continuedAsNew = "CONTINUED_AS_NEW"
        case timedOut = "TIMED_OUT"
        public var description: String { return self.rawValue }
    }

    public struct DomainDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domainInfo", required: true, type: .structure), 
            AWSShapeMember(label: "configuration", required: true, type: .structure)
        ]
        /// The basic information about a domain, such as its name, status, and description.
        public let domainInfo: DomainInfo
        /// The domain configuration. Currently, this includes only the domain's retention period.
        public let configuration: DomainConfiguration

        public init(domainInfo: DomainInfo, configuration: DomainConfiguration) {
            self.domainInfo = domainInfo
            self.configuration = configuration
        }

        private enum CodingKeys: String, CodingKey {
            case domainInfo = "domainInfo"
            case configuration = "configuration"
        }
    }

    public struct ActivityTaskCompletedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "scheduledEventId", required: true, type: .long), 
            AWSShapeMember(label: "result", required: false, type: .string), 
            AWSShapeMember(label: "startedEventId", required: true, type: .long)
        ]
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64
        /// The results of the activity task.
        public let result: String?
        /// The ID of the ActivityTaskStarted event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64

        public init(scheduledEventId: Int64, result: String? = nil, startedEventId: Int64) {
            self.scheduledEventId = scheduledEventId
            self.result = result
            self.startedEventId = startedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledEventId = "scheduledEventId"
            case result = "result"
            case startedEventId = "startedEventId"
        }
    }

    public struct ScheduleLambdaFunctionFailedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cause", required: true, type: .enum), 
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "id", required: true, type: .string)
        ]
        /// The cause of the failure. To help diagnose issues, use this information to trace back the chain of events leading up to this event.  If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows in the Amazon SWF Developer Guide. 
        public let cause: ScheduleLambdaFunctionFailedCause
        /// The ID of the LambdaFunctionCompleted event corresponding to the decision that resulted in scheduling this Lambda task. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The name of the Lambda function.
        public let name: String
        /// The ID provided in the ScheduleLambdaFunction decision that failed. 
        public let id: String

        public init(cause: ScheduleLambdaFunctionFailedCause, decisionTaskCompletedEventId: Int64, name: String, id: String) {
            self.cause = cause
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case cause = "cause"
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case name = "name"
            case id = "id"
        }
    }

    public struct ExecutionTimeFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "oldestDate", required: true, type: .timestamp), 
            AWSShapeMember(label: "latestDate", required: false, type: .timestamp)
        ]
        /// Specifies the oldest start or close date and time to return.
        public let oldestDate: TimeStamp
        /// Specifies the latest start or close date and time to return.
        public let latestDate: TimeStamp?

        public init(oldestDate: TimeStamp, latestDate: TimeStamp? = nil) {
            self.oldestDate = oldestDate
            self.latestDate = latestDate
        }

        private enum CodingKeys: String, CodingKey {
            case oldestDate = "oldestDate"
            case latestDate = "latestDate"
        }
    }

    public struct ChildWorkflowExecutionCanceledEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "startedEventId", required: true, type: .long), 
            AWSShapeMember(label: "details", required: false, type: .string), 
            AWSShapeMember(label: "workflowExecution", required: true, type: .structure), 
            AWSShapeMember(label: "workflowType", required: true, type: .structure), 
            AWSShapeMember(label: "initiatedEventId", required: true, type: .long)
        ]
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// Details of the cancellation (if provided).
        public let details: String?
        /// The child workflow execution that was canceled.
        public let workflowExecution: WorkflowExecution
        /// The type of the child workflow execution.
        public let workflowType: WorkflowType
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution Decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64

        public init(startedEventId: Int64, details: String? = nil, workflowExecution: WorkflowExecution, workflowType: WorkflowType, initiatedEventId: Int64) {
            self.startedEventId = startedEventId
            self.details = details
            self.workflowExecution = workflowExecution
            self.workflowType = workflowType
            self.initiatedEventId = initiatedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case startedEventId = "startedEventId"
            case details = "details"
            case workflowExecution = "workflowExecution"
            case workflowType = "workflowType"
            case initiatedEventId = "initiatedEventId"
        }
    }

    public struct ContinueAsNewWorkflowExecutionDecisionAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "childPolicy", required: false, type: .enum), 
            AWSShapeMember(label: "input", required: false, type: .string), 
            AWSShapeMember(label: "taskStartToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "workflowTypeVersion", required: false, type: .string), 
            AWSShapeMember(label: "tagList", required: false, type: .list), 
            AWSShapeMember(label: "executionStartToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "taskList", required: false, type: .structure), 
            AWSShapeMember(label: "lambdaRole", required: false, type: .string), 
            AWSShapeMember(label: "taskPriority", required: false, type: .string)
        ]
        /// If set, specifies the policy to use for the child workflow executions of the new execution if it is terminated by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. This policy overrides the default child policy specified when registering the workflow type using RegisterWorkflowType. The supported child policies are:    TERMINATE – The child executions are terminated.    REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.    ABANDON – No action is taken. The child executions continue to run.    A child policy for this workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default child policy was specified at registration time then a fault is returned. 
        public let childPolicy: ChildPolicy?
        /// The input provided to the new workflow execution.
        public let input: String?
        /// Specifies the maximum duration of decision tasks for the new workflow execution. This parameter overrides the defaultTaskStartToCloseTimout specified when registering the workflow type using RegisterWorkflowType. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.  A task start-to-close timeout for the new workflow execution must be specified either as a default for the workflow type or through this parameter. If neither this parameter is set nor a default task start-to-close timeout was specified at registration time then a fault is returned. 
        public let taskStartToCloseTimeout: String?
        /// The version of the workflow to start.
        public let workflowTypeVersion: String?
        /// The list of tags to associate with the new workflow execution. A maximum of 5 tags can be specified. You can list workflow executions with a specific tag by calling ListOpenWorkflowExecutions or ListClosedWorkflowExecutions and specifying a TagFilter.
        public let tagList: [String]?
        /// If set, specifies the total duration for this workflow execution. This overrides the defaultExecutionStartToCloseTimeout specified when registering the workflow type. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.  An execution start-to-close timeout for this workflow execution must be specified either as a default for the workflow type or through this field. If neither this field is set nor a default execution start-to-close timeout was specified at registration time then a fault is returned. 
        public let executionStartToCloseTimeout: String?
        /// The task list to use for the decisions of the new (continued) workflow execution.
        public let taskList: TaskList?
        /// The IAM role to attach to the new (continued) execution.
        public let lambdaRole: String?
        ///  The task priority that, if set, specifies the priority for the decision tasks for this workflow execution. This overrides the defaultTaskPriority specified when registering the workflow type. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon SWF Developer Guide.
        public let taskPriority: String?

        public init(childPolicy: ChildPolicy? = nil, input: String? = nil, taskStartToCloseTimeout: String? = nil, workflowTypeVersion: String? = nil, tagList: [String]? = nil, executionStartToCloseTimeout: String? = nil, taskList: TaskList? = nil, lambdaRole: String? = nil, taskPriority: String? = nil) {
            self.childPolicy = childPolicy
            self.input = input
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.workflowTypeVersion = workflowTypeVersion
            self.tagList = tagList
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.taskList = taskList
            self.lambdaRole = lambdaRole
            self.taskPriority = taskPriority
        }

        private enum CodingKeys: String, CodingKey {
            case childPolicy = "childPolicy"
            case input = "input"
            case taskStartToCloseTimeout = "taskStartToCloseTimeout"
            case workflowTypeVersion = "workflowTypeVersion"
            case tagList = "tagList"
            case executionStartToCloseTimeout = "executionStartToCloseTimeout"
            case taskList = "taskList"
            case lambdaRole = "lambdaRole"
            case taskPriority = "taskPriority"
        }
    }

    public struct SignalExternalWorkflowExecutionInitiatedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "input", required: false, type: .string), 
            AWSShapeMember(label: "signalName", required: true, type: .string), 
            AWSShapeMember(label: "workflowId", required: true, type: .string), 
            AWSShapeMember(label: "runId", required: false, type: .string), 
            AWSShapeMember(label: "control", required: false, type: .string), 
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long)
        ]
        /// The input provided to the signal.
        public let input: String?
        /// The name of the signal.
        public let signalName: String
        /// The workflowId of the external workflow execution.
        public let workflowId: String
        /// The runId of the external workflow execution to send the signal to.
        public let runId: String?
        /// Data attached to the event that can be used by the decider in subsequent decision tasks.
        public let control: String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the SignalExternalWorkflowExecution decision for this signal. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64

        public init(input: String? = nil, signalName: String, workflowId: String, runId: String? = nil, control: String? = nil, decisionTaskCompletedEventId: Int64) {
            self.input = input
            self.signalName = signalName
            self.workflowId = workflowId
            self.runId = runId
            self.control = control
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case input = "input"
            case signalName = "signalName"
            case workflowId = "workflowId"
            case runId = "runId"
            case control = "control"
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
        }
    }

    public struct RequestCancelWorkflowExecutionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "domain", required: true, type: .string), 
            AWSShapeMember(label: "workflowId", required: true, type: .string), 
            AWSShapeMember(label: "runId", required: false, type: .string)
        ]
        /// The name of the domain containing the workflow execution to cancel.
        public let domain: String
        /// The workflowId of the workflow execution to cancel.
        public let workflowId: String
        /// The runId of the workflow execution to cancel.
        public let runId: String?

        public init(domain: String, workflowId: String, runId: String? = nil) {
            self.domain = domain
            self.workflowId = workflowId
            self.runId = runId
        }

        private enum CodingKeys: String, CodingKey {
            case domain = "domain"
            case workflowId = "workflowId"
            case runId = "runId"
        }
    }

    public struct RecordActivityTaskHeartbeatInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskToken", required: true, type: .string), 
            AWSShapeMember(label: "details", required: false, type: .string)
        ]
        /// The taskToken of the ActivityTask.   taskToken is generated by the service and should be treated as an opaque value. If the task is passed to another process, its taskToken must also be passed. This enables it to provide its progress and respond with results.  
        public let taskToken: String
        /// If specified, contains details about the progress of the task.
        public let details: String?

        public init(taskToken: String, details: String? = nil) {
            self.taskToken = taskToken
            self.details = details
        }

        private enum CodingKeys: String, CodingKey {
            case taskToken = "taskToken"
            case details = "details"
        }
    }

    public struct DomainInfos: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "domainInfos", required: true, type: .list)
        ]
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?
        /// A list of DomainInfo structures.
        public let domainInfos: [DomainInfo]

        public init(nextPageToken: String? = nil, domainInfos: [DomainInfo]) {
            self.nextPageToken = nextPageToken
            self.domainInfos = domainInfos
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "nextPageToken"
            case domainInfos = "domainInfos"
        }
    }

    public struct ActivityTaskFailedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "startedEventId", required: true, type: .long), 
            AWSShapeMember(label: "details", required: false, type: .string), 
            AWSShapeMember(label: "reason", required: false, type: .string), 
            AWSShapeMember(label: "scheduledEventId", required: true, type: .long)
        ]
        /// The ID of the ActivityTaskStarted event recorded when this activity task was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// The details of the failure.
        public let details: String?
        /// The reason provided for the failure.
        public let reason: String?
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64

        public init(startedEventId: Int64, details: String? = nil, reason: String? = nil, scheduledEventId: Int64) {
            self.startedEventId = startedEventId
            self.details = details
            self.reason = reason
            self.scheduledEventId = scheduledEventId
        }

        private enum CodingKeys: String, CodingKey {
            case startedEventId = "startedEventId"
            case details = "details"
            case reason = "reason"
            case scheduledEventId = "scheduledEventId"
        }
    }

    public struct WorkflowExecutionStartedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "childPolicy", required: true, type: .enum), 
            AWSShapeMember(label: "input", required: false, type: .string), 
            AWSShapeMember(label: "parentWorkflowExecution", required: false, type: .structure), 
            AWSShapeMember(label: "workflowType", required: true, type: .structure), 
            AWSShapeMember(label: "taskStartToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "tagList", required: false, type: .list), 
            AWSShapeMember(label: "lambdaRole", required: false, type: .string), 
            AWSShapeMember(label: "executionStartToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "taskList", required: true, type: .structure), 
            AWSShapeMember(label: "parentInitiatedEventId", required: false, type: .long), 
            AWSShapeMember(label: "continuedExecutionRunId", required: false, type: .string), 
            AWSShapeMember(label: "taskPriority", required: false, type: .string)
        ]
        /// The policy to use for the child workflow executions if this workflow execution is terminated, by calling the TerminateWorkflowExecution action explicitly or due to an expired timeout. The supported child policies are:    TERMINATE – The child executions are terminated.    REQUEST_CANCEL – A request to cancel is attempted for each child execution by recording a WorkflowExecutionCancelRequested event in its history. It is up to the decider to take appropriate actions when it receives an execution history with this event.    ABANDON – No action is taken. The child executions continue to run.  
        public let childPolicy: ChildPolicy
        /// The input provided to the workflow execution.
        public let input: String?
        /// The source workflow execution that started this workflow execution. The member isn't set if the workflow execution was not started by a workflow.
        public let parentWorkflowExecution: WorkflowExecution?
        /// The workflow type of this execution.
        public let workflowType: WorkflowType
        /// The maximum duration of decision tasks for this workflow type. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let taskStartToCloseTimeout: String?
        /// The list of tags associated with this workflow execution. An execution can have up to 5 tags.
        public let tagList: [String]?
        /// The IAM role attached to the workflow execution.
        public let lambdaRole: String?
        /// The maximum duration for this workflow execution. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let executionStartToCloseTimeout: String?
        /// The name of the task list for scheduling the decision tasks for this workflow execution.
        public let taskList: TaskList
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution Decision to start this workflow execution. The source event with this ID can be found in the history of the source workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let parentInitiatedEventId: Int64?
        /// If this workflow execution was started due to a ContinueAsNewWorkflowExecution decision, then it contains the runId of the previous workflow execution that was closed and continued as this execution.
        public let continuedExecutionRunId: String?
        /// The priority of the decision tasks in the workflow execution.
        public let taskPriority: String?

        public init(childPolicy: ChildPolicy, input: String? = nil, parentWorkflowExecution: WorkflowExecution? = nil, workflowType: WorkflowType, taskStartToCloseTimeout: String? = nil, tagList: [String]? = nil, lambdaRole: String? = nil, executionStartToCloseTimeout: String? = nil, taskList: TaskList, parentInitiatedEventId: Int64? = nil, continuedExecutionRunId: String? = nil, taskPriority: String? = nil) {
            self.childPolicy = childPolicy
            self.input = input
            self.parentWorkflowExecution = parentWorkflowExecution
            self.workflowType = workflowType
            self.taskStartToCloseTimeout = taskStartToCloseTimeout
            self.tagList = tagList
            self.lambdaRole = lambdaRole
            self.executionStartToCloseTimeout = executionStartToCloseTimeout
            self.taskList = taskList
            self.parentInitiatedEventId = parentInitiatedEventId
            self.continuedExecutionRunId = continuedExecutionRunId
            self.taskPriority = taskPriority
        }

        private enum CodingKeys: String, CodingKey {
            case childPolicy = "childPolicy"
            case input = "input"
            case parentWorkflowExecution = "parentWorkflowExecution"
            case workflowType = "workflowType"
            case taskStartToCloseTimeout = "taskStartToCloseTimeout"
            case tagList = "tagList"
            case lambdaRole = "lambdaRole"
            case executionStartToCloseTimeout = "executionStartToCloseTimeout"
            case taskList = "taskList"
            case parentInitiatedEventId = "parentInitiatedEventId"
            case continuedExecutionRunId = "continuedExecutionRunId"
            case taskPriority = "taskPriority"
        }
    }

    public enum CompleteWorkflowExecutionFailedCause: String, CustomStringConvertible, Codable {
        case unhandledDecision = "UNHANDLED_DECISION"
        case operationNotPermitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct CountPendingDecisionTasksInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "taskList", required: true, type: .structure), 
            AWSShapeMember(label: "domain", required: true, type: .string)
        ]
        /// The name of the task list.
        public let taskList: TaskList
        /// The name of the domain that contains the task list.
        public let domain: String

        public init(taskList: TaskList, domain: String) {
            self.taskList = taskList
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case taskList = "taskList"
            case domain = "domain"
        }
    }

    public struct StartTimerFailedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "timerId", required: true, type: .string), 
            AWSShapeMember(label: "cause", required: true, type: .enum)
        ]
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the StartTimer decision for this activity task. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The timerId provided in the StartTimer decision that failed.
        public let timerId: String
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.  If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows in the Amazon SWF Developer Guide. 
        public let cause: StartTimerFailedCause

        public init(decisionTaskCompletedEventId: Int64, timerId: String, cause: StartTimerFailedCause) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.timerId = timerId
            self.cause = cause
        }

        private enum CodingKeys: String, CodingKey {
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case timerId = "timerId"
            case cause = "cause"
        }
    }

    public struct WorkflowExecution: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "workflowId", required: true, type: .string), 
            AWSShapeMember(label: "runId", required: true, type: .string)
        ]
        /// The user defined identifier associated with the workflow execution.
        public let workflowId: String
        /// A system-generated unique identifier for the workflow execution.
        public let runId: String

        public init(workflowId: String, runId: String) {
            self.workflowId = workflowId
            self.runId = runId
        }

        private enum CodingKeys: String, CodingKey {
            case workflowId = "workflowId"
            case runId = "runId"
        }
    }

    public struct ContinueAsNewWorkflowExecutionFailedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "cause", required: true, type: .enum)
        ]
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the ContinueAsNewWorkflowExecution decision that started this execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.  If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows in the Amazon SWF Developer Guide. 
        public let cause: ContinueAsNewWorkflowExecutionFailedCause

        public init(decisionTaskCompletedEventId: Int64, cause: ContinueAsNewWorkflowExecutionFailedCause) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
        }

        private enum CodingKeys: String, CodingKey {
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case cause = "cause"
        }
    }

    public enum RegistrationStatus: String, CustomStringConvertible, Codable {
        case registered = "REGISTERED"
        case deprecated = "DEPRECATED"
        public var description: String { return self.rawValue }
    }

    public struct StartTimerDecisionAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "control", required: false, type: .string), 
            AWSShapeMember(label: "timerId", required: true, type: .string), 
            AWSShapeMember(label: "startToFireTimeout", required: true, type: .string)
        ]
        /// The data attached to the event that can be used by the decider in subsequent workflow tasks.
        public let control: String?
        ///  The unique ID of the timer. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        public let timerId: String
        ///  The duration to wait before firing the timer. The duration is specified in seconds, an integer greater than or equal to 0.
        public let startToFireTimeout: String

        public init(control: String? = nil, timerId: String, startToFireTimeout: String) {
            self.control = control
            self.timerId = timerId
            self.startToFireTimeout = startToFireTimeout
        }

        private enum CodingKeys: String, CodingKey {
            case control = "control"
            case timerId = "timerId"
            case startToFireTimeout = "startToFireTimeout"
        }
    }

    public struct ActivityTypeConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "defaultTaskList", required: false, type: .structure), 
            AWSShapeMember(label: "defaultTaskScheduleToStartTimeout", required: false, type: .string), 
            AWSShapeMember(label: "defaultTaskPriority", required: false, type: .string), 
            AWSShapeMember(label: "defaultTaskScheduleToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "defaultTaskStartToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "defaultTaskHeartbeatTimeout", required: false, type: .string)
        ]
        ///  The default task list specified for this activity type at registration. This default is used if a task list isn't provided when a task is scheduled through the ScheduleActivityTask Decision. You can override the default registered task list when scheduling a task through the ScheduleActivityTask Decision.
        public let defaultTaskList: TaskList?
        ///  The default maximum duration, specified when registering the activity type, that a task of an activity type can wait before being assigned to a worker. You can override this default when scheduling a task through the ScheduleActivityTask Decision. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let defaultTaskScheduleToStartTimeout: String?
        ///  The default task priority for tasks of this activity type, specified at registration. If not set, then 0 is used as the default priority. This default can be overridden when scheduling an activity task. Valid values are integers that range from Java's Integer.MIN_VALUE (-2147483648) to Integer.MAX_VALUE (2147483647). Higher numbers indicate higher priority. For more information about setting task priority, see Setting Task Priority in the Amazon SWF Developer Guide.
        public let defaultTaskPriority: String?
        ///  The default maximum duration, specified when registering the activity type, for tasks of this activity type. You can override this default when scheduling a task through the ScheduleActivityTask Decision. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let defaultTaskScheduleToCloseTimeout: String?
        ///  The default maximum duration for tasks of an activity type specified when registering the activity type. You can override this default when scheduling a task through the ScheduleActivityTask Decision. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let defaultTaskStartToCloseTimeout: String?
        ///  The default maximum time, in seconds, before which a worker processing a task must report progress by calling RecordActivityTaskHeartbeat. You can specify this value only when registering an activity type. The registered default value can be overridden when you schedule a task through the ScheduleActivityTask Decision. If the activity worker subsequently attempts to record a heartbeat or returns a result, the activity worker receives an UnknownResource fault. In this case, Amazon SWF no longer considers the activity task to be valid; the activity worker should clean up the activity task. The duration is specified in seconds, an integer greater than or equal to 0. You can use NONE to specify unlimited duration.
        public let defaultTaskHeartbeatTimeout: String?

        public init(defaultTaskList: TaskList? = nil, defaultTaskScheduleToStartTimeout: String? = nil, defaultTaskPriority: String? = nil, defaultTaskScheduleToCloseTimeout: String? = nil, defaultTaskStartToCloseTimeout: String? = nil, defaultTaskHeartbeatTimeout: String? = nil) {
            self.defaultTaskList = defaultTaskList
            self.defaultTaskScheduleToStartTimeout = defaultTaskScheduleToStartTimeout
            self.defaultTaskPriority = defaultTaskPriority
            self.defaultTaskScheduleToCloseTimeout = defaultTaskScheduleToCloseTimeout
            self.defaultTaskStartToCloseTimeout = defaultTaskStartToCloseTimeout
            self.defaultTaskHeartbeatTimeout = defaultTaskHeartbeatTimeout
        }

        private enum CodingKeys: String, CodingKey {
            case defaultTaskList = "defaultTaskList"
            case defaultTaskScheduleToStartTimeout = "defaultTaskScheduleToStartTimeout"
            case defaultTaskPriority = "defaultTaskPriority"
            case defaultTaskScheduleToCloseTimeout = "defaultTaskScheduleToCloseTimeout"
            case defaultTaskStartToCloseTimeout = "defaultTaskStartToCloseTimeout"
            case defaultTaskHeartbeatTimeout = "defaultTaskHeartbeatTimeout"
        }
    }

    public struct WorkflowTypeInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: true, type: .enum), 
            AWSShapeMember(label: "deprecationDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "workflowType", required: true, type: .structure), 
            AWSShapeMember(label: "creationDate", required: true, type: .timestamp), 
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// The current status of the workflow type.
        public let status: RegistrationStatus
        /// If the type is in deprecated state, then it is set to the date when the type was deprecated.
        public let deprecationDate: TimeStamp?
        /// The workflow type this information is about.
        public let workflowType: WorkflowType
        /// The date when this type was registered.
        public let creationDate: TimeStamp
        /// The description of the type registered through RegisterWorkflowType.
        public let description: String?

        public init(status: RegistrationStatus, deprecationDate: TimeStamp? = nil, workflowType: WorkflowType, creationDate: TimeStamp, description: String? = nil) {
            self.status = status
            self.deprecationDate = deprecationDate
            self.workflowType = workflowType
            self.creationDate = creationDate
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case deprecationDate = "deprecationDate"
            case workflowType = "workflowType"
            case creationDate = "creationDate"
            case description = "description"
        }
    }

    public enum RequestCancelActivityTaskFailedCause: String, CustomStringConvertible, Codable {
        case activityIdUnknown = "ACTIVITY_ID_UNKNOWN"
        case operationNotPermitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct WorkflowExecutionOpenCounts: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "openTimers", required: true, type: .integer), 
            AWSShapeMember(label: "openChildWorkflowExecutions", required: true, type: .integer), 
            AWSShapeMember(label: "openActivityTasks", required: true, type: .integer), 
            AWSShapeMember(label: "openDecisionTasks", required: true, type: .integer), 
            AWSShapeMember(label: "openLambdaFunctions", required: false, type: .integer)
        ]
        /// The count of timers started by this workflow execution that have not fired yet.
        public let openTimers: Int32
        /// The count of child workflow executions whose status is OPEN.
        public let openChildWorkflowExecutions: Int32
        /// The count of activity tasks whose status is OPEN.
        public let openActivityTasks: Int32
        /// The count of decision tasks whose status is OPEN. A workflow execution can have at most one open decision task.
        public let openDecisionTasks: Int32
        /// The count of Lambda tasks whose status is OPEN.
        public let openLambdaFunctions: Int32?

        public init(openTimers: Int32, openChildWorkflowExecutions: Int32, openActivityTasks: Int32, openDecisionTasks: Int32, openLambdaFunctions: Int32? = nil) {
            self.openTimers = openTimers
            self.openChildWorkflowExecutions = openChildWorkflowExecutions
            self.openActivityTasks = openActivityTasks
            self.openDecisionTasks = openDecisionTasks
            self.openLambdaFunctions = openLambdaFunctions
        }

        private enum CodingKeys: String, CodingKey {
            case openTimers = "openTimers"
            case openChildWorkflowExecutions = "openChildWorkflowExecutions"
            case openActivityTasks = "openActivityTasks"
            case openDecisionTasks = "openDecisionTasks"
            case openLambdaFunctions = "openLambdaFunctions"
        }
    }

    public enum StartChildWorkflowExecutionFailedCause: String, CustomStringConvertible, Codable {
        case workflowTypeDoesNotExist = "WORKFLOW_TYPE_DOES_NOT_EXIST"
        case workflowTypeDeprecated = "WORKFLOW_TYPE_DEPRECATED"
        case openChildrenLimitExceeded = "OPEN_CHILDREN_LIMIT_EXCEEDED"
        case openWorkflowsLimitExceeded = "OPEN_WORKFLOWS_LIMIT_EXCEEDED"
        case childCreationRateExceeded = "CHILD_CREATION_RATE_EXCEEDED"
        case workflowAlreadyRunning = "WORKFLOW_ALREADY_RUNNING"
        case defaultExecutionStartToCloseTimeoutUndefined = "DEFAULT_EXECUTION_START_TO_CLOSE_TIMEOUT_UNDEFINED"
        case defaultTaskListUndefined = "DEFAULT_TASK_LIST_UNDEFINED"
        case defaultTaskStartToCloseTimeoutUndefined = "DEFAULT_TASK_START_TO_CLOSE_TIMEOUT_UNDEFINED"
        case defaultChildPolicyUndefined = "DEFAULT_CHILD_POLICY_UNDEFINED"
        case operationNotPermitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public struct WorkflowExecutionCount: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "truncated", required: false, type: .boolean), 
            AWSShapeMember(label: "count", required: true, type: .integer)
        ]
        /// If set to true, indicates that the actual count was more than the maximum supported by this API and the count returned is the truncated value.
        public let truncated: Bool?
        /// The number of workflow executions.
        public let count: Int32

        public init(truncated: Bool? = nil, count: Int32) {
            self.truncated = truncated
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case truncated = "truncated"
            case count = "count"
        }
    }

    public enum DecisionTaskTimeoutType: String, CustomStringConvertible, Codable {
        case startToClose = "START_TO_CLOSE"
        public var description: String { return self.rawValue }
    }

    public struct StartChildWorkflowExecutionFailedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "workflowId", required: true, type: .string), 
            AWSShapeMember(label: "cause", required: true, type: .enum), 
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "workflowType", required: true, type: .structure), 
            AWSShapeMember(label: "control", required: false, type: .string), 
            AWSShapeMember(label: "initiatedEventId", required: true, type: .long)
        ]
        /// The workflowId of the child workflow execution.
        public let workflowId: String
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.  When cause is set to OPERATION_NOT_PERMITTED, the decision fails because it lacks sufficient permissions. For details and example IAM policies, see  Using IAM to Manage Access to Amazon SWF Workflows in the Amazon SWF Developer Guide. 
        public let cause: StartChildWorkflowExecutionFailedCause
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the StartChildWorkflowExecution Decision to request this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events.
        public let decisionTaskCompletedEventId: Int64
        /// The workflow type provided in the StartChildWorkflowExecution Decision that failed.
        public let workflowType: WorkflowType
        /// The data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the child workflow execution.
        public let control: String?
        /// When the cause is WORKFLOW_ALREADY_RUNNING, initiatedEventId is the ID of the StartChildWorkflowExecutionInitiated event that corresponds to the StartChildWorkflowExecution Decision to start the workflow execution. You can use this information to diagnose problems by tracing back the chain of events leading up to this event. When the cause isn't WORKFLOW_ALREADY_RUNNING, initiatedEventId is set to 0 because the StartChildWorkflowExecutionInitiated event doesn't exist.
        public let initiatedEventId: Int64

        public init(workflowId: String, cause: StartChildWorkflowExecutionFailedCause, decisionTaskCompletedEventId: Int64, workflowType: WorkflowType, control: String? = nil, initiatedEventId: Int64) {
            self.workflowId = workflowId
            self.cause = cause
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.workflowType = workflowType
            self.control = control
            self.initiatedEventId = initiatedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case workflowId = "workflowId"
            case cause = "cause"
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case workflowType = "workflowType"
            case control = "control"
            case initiatedEventId = "initiatedEventId"
        }
    }

    public struct ListDomainsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "reverseOrder", required: false, type: .boolean), 
            AWSShapeMember(label: "nextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "registrationStatus", required: true, type: .enum), 
            AWSShapeMember(label: "maximumPageSize", required: false, type: .integer)
        ]
        /// When set to true, returns the results in reverse order. By default, the results are returned in ascending alphabetical order by name of the domains.
        public let reverseOrder: Bool?
        /// If a NextPageToken was returned by a previous call, there are more results available. To retrieve the next page of results, make the call again using the returned token in nextPageToken. Keep all other arguments unchanged. The configured maximumPageSize determines how many results can be returned in a single call.
        public let nextPageToken: String?
        /// Specifies the registration status of the domains to list.
        public let registrationStatus: RegistrationStatus
        /// The maximum number of results that are returned per call. nextPageToken can be used to obtain futher pages of results. The default is 1000, which is the maximum allowed page size. You can, however, specify a page size smaller than the maximum. This is an upper limit only; the actual number of results returned per call may be fewer than the specified maximum.
        public let maximumPageSize: Int32?

        public init(reverseOrder: Bool? = nil, nextPageToken: String? = nil, registrationStatus: RegistrationStatus, maximumPageSize: Int32? = nil) {
            self.reverseOrder = reverseOrder
            self.nextPageToken = nextPageToken
            self.registrationStatus = registrationStatus
            self.maximumPageSize = maximumPageSize
        }

        private enum CodingKeys: String, CodingKey {
            case reverseOrder = "reverseOrder"
            case nextPageToken = "nextPageToken"
            case registrationStatus = "registrationStatus"
            case maximumPageSize = "maximumPageSize"
        }
    }

    public struct StartLambdaFunctionFailedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "scheduledEventId", required: false, type: .long), 
            AWSShapeMember(label: "message", required: false, type: .string), 
            AWSShapeMember(label: "cause", required: false, type: .enum)
        ]
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        public let scheduledEventId: Int64?
        /// A description that can help diagnose the cause of the fault.
        public let message: String?
        /// The cause of the failure. To help diagnose issues, use this information to trace back the chain of events leading up to this event.  If cause is set to OPERATION_NOT_PERMITTED, the decision failed because the IAM role attached to the execution lacked sufficient permissions. For details and example IAM policies, see Lambda Tasks in the Amazon SWF Developer Guide. 
        public let cause: StartLambdaFunctionFailedCause?

        public init(scheduledEventId: Int64? = nil, message: String? = nil, cause: StartLambdaFunctionFailedCause? = nil) {
            self.scheduledEventId = scheduledEventId
            self.message = message
            self.cause = cause
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledEventId = "scheduledEventId"
            case message = "message"
            case cause = "cause"
        }
    }

    public struct RequestCancelActivityTaskFailedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "activityId", required: true, type: .string), 
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "cause", required: true, type: .enum)
        ]
        /// The activityId provided in the RequestCancelActivityTask decision that failed.
        public let activityId: String
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the RequestCancelActivityTask decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.  If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows in the Amazon SWF Developer Guide. 
        public let cause: RequestCancelActivityTaskFailedCause

        public init(activityId: String, decisionTaskCompletedEventId: Int64, cause: RequestCancelActivityTaskFailedCause) {
            self.activityId = activityId
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.cause = cause
        }

        private enum CodingKeys: String, CodingKey {
            case activityId = "activityId"
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case cause = "cause"
        }
    }

    public struct ActivityTaskStartedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "scheduledEventId", required: true, type: .long), 
            AWSShapeMember(label: "identity", required: false, type: .string)
        ]
        /// The ID of the ActivityTaskScheduled event that was recorded when this activity task was scheduled. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let scheduledEventId: Int64
        /// Identity of the worker that was assigned this task. This aids diagnostics when problems arise. The form of this identity is user defined.
        public let identity: String?

        public init(scheduledEventId: Int64, identity: String? = nil) {
            self.scheduledEventId = scheduledEventId
            self.identity = identity
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledEventId = "scheduledEventId"
            case identity = "identity"
        }
    }

    public struct DeprecateDomainInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The name of the domain to deprecate.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct TimerFiredEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "timerId", required: true, type: .string), 
            AWSShapeMember(label: "startedEventId", required: true, type: .long)
        ]
        /// The unique ID of the timer that fired.
        public let timerId: String
        /// The ID of the TimerStarted event that was recorded when this timer was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64

        public init(timerId: String, startedEventId: Int64) {
            self.timerId = timerId
            self.startedEventId = startedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case timerId = "timerId"
            case startedEventId = "startedEventId"
        }
    }

    public struct DeprecateWorkflowTypeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "workflowType", required: true, type: .structure), 
            AWSShapeMember(label: "domain", required: true, type: .string)
        ]
        /// The workflow type to deprecate.
        public let workflowType: WorkflowType
        /// The name of the domain in which the workflow type is registered.
        public let domain: String

        public init(workflowType: WorkflowType, domain: String) {
            self.workflowType = workflowType
            self.domain = domain
        }

        private enum CodingKeys: String, CodingKey {
            case workflowType = "workflowType"
            case domain = "domain"
        }
    }

    public struct ActivityType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "version", required: true, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The version of this activity.  The combination of activity type name and version must be unique with in a domain. 
        public let version: String
        /// The name of this activity.  The combination of activity type name and version must be unique within a domain. 
        public let name: String

        public init(version: String, name: String) {
            self.version = version
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case version = "version"
            case name = "name"
        }
    }

    public struct WorkflowTypeDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "typeInfo", required: true, type: .structure), 
            AWSShapeMember(label: "configuration", required: true, type: .structure)
        ]
        /// General information about the workflow type. The status of the workflow type (returned in the WorkflowTypeInfo structure) can be one of the following.    REGISTERED – The type is registered and available. Workers supporting this type should be running.    DEPRECATED – The type was deprecated using DeprecateWorkflowType, but is still in use. You should keep workers supporting this type running. You cannot create new workflow executions of this type.  
        public let typeInfo: WorkflowTypeInfo
        /// Configuration settings of the workflow type registered through RegisterWorkflowType 
        public let configuration: WorkflowTypeConfiguration

        public init(typeInfo: WorkflowTypeInfo, configuration: WorkflowTypeConfiguration) {
            self.typeInfo = typeInfo
            self.configuration = configuration
        }

        private enum CodingKeys: String, CodingKey {
            case typeInfo = "typeInfo"
            case configuration = "configuration"
        }
    }

    public struct ChildWorkflowExecutionTerminatedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "startedEventId", required: true, type: .long), 
            AWSShapeMember(label: "workflowExecution", required: true, type: .structure), 
            AWSShapeMember(label: "workflowType", required: true, type: .structure), 
            AWSShapeMember(label: "initiatedEventId", required: true, type: .long)
        ]
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// The child workflow execution that was terminated.
        public let workflowExecution: WorkflowExecution
        /// The type of the child workflow execution.
        public let workflowType: WorkflowType
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution Decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64

        public init(startedEventId: Int64, workflowExecution: WorkflowExecution, workflowType: WorkflowType, initiatedEventId: Int64) {
            self.startedEventId = startedEventId
            self.workflowExecution = workflowExecution
            self.workflowType = workflowType
            self.initiatedEventId = initiatedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case startedEventId = "startedEventId"
            case workflowExecution = "workflowExecution"
            case workflowType = "workflowType"
            case initiatedEventId = "initiatedEventId"
        }
    }

    public struct LambdaFunctionStartedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "scheduledEventId", required: true, type: .long)
        ]
        /// The ID of the LambdaFunctionScheduled event that was recorded when this activity task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        public let scheduledEventId: Int64

        public init(scheduledEventId: Int64) {
            self.scheduledEventId = scheduledEventId
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledEventId = "scheduledEventId"
        }
    }

    public struct WorkflowExecutionCanceledEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "details", required: false, type: .string), 
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long)
        ]
        /// The details of the cancellation.
        public let details: String?
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CancelWorkflowExecution decision for this cancellation request. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64

        public init(details: String? = nil, decisionTaskCompletedEventId: Int64) {
            self.details = details
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case details = "details"
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
        }
    }

    public enum CancelWorkflowExecutionFailedCause: String, CustomStringConvertible, Codable {
        case unhandledDecision = "UNHANDLED_DECISION"
        case operationNotPermitted = "OPERATION_NOT_PERMITTED"
        public var description: String { return self.rawValue }
    }

    public enum EventType: String, CustomStringConvertible, Codable {
        case workflowexecutionstarted = "WorkflowExecutionStarted"
        case workflowexecutioncancelrequested = "WorkflowExecutionCancelRequested"
        case workflowexecutioncompleted = "WorkflowExecutionCompleted"
        case completeworkflowexecutionfailed = "CompleteWorkflowExecutionFailed"
        case workflowexecutionfailed = "WorkflowExecutionFailed"
        case failworkflowexecutionfailed = "FailWorkflowExecutionFailed"
        case workflowexecutiontimedout = "WorkflowExecutionTimedOut"
        case workflowexecutioncanceled = "WorkflowExecutionCanceled"
        case cancelworkflowexecutionfailed = "CancelWorkflowExecutionFailed"
        case workflowexecutioncontinuedasnew = "WorkflowExecutionContinuedAsNew"
        case continueasnewworkflowexecutionfailed = "ContinueAsNewWorkflowExecutionFailed"
        case workflowexecutionterminated = "WorkflowExecutionTerminated"
        case decisiontaskscheduled = "DecisionTaskScheduled"
        case decisiontaskstarted = "DecisionTaskStarted"
        case decisiontaskcompleted = "DecisionTaskCompleted"
        case decisiontasktimedout = "DecisionTaskTimedOut"
        case activitytaskscheduled = "ActivityTaskScheduled"
        case scheduleactivitytaskfailed = "ScheduleActivityTaskFailed"
        case activitytaskstarted = "ActivityTaskStarted"
        case activitytaskcompleted = "ActivityTaskCompleted"
        case activitytaskfailed = "ActivityTaskFailed"
        case activitytasktimedout = "ActivityTaskTimedOut"
        case activitytaskcanceled = "ActivityTaskCanceled"
        case activitytaskcancelrequested = "ActivityTaskCancelRequested"
        case requestcancelactivitytaskfailed = "RequestCancelActivityTaskFailed"
        case workflowexecutionsignaled = "WorkflowExecutionSignaled"
        case markerrecorded = "MarkerRecorded"
        case recordmarkerfailed = "RecordMarkerFailed"
        case timerstarted = "TimerStarted"
        case starttimerfailed = "StartTimerFailed"
        case timerfired = "TimerFired"
        case timercanceled = "TimerCanceled"
        case canceltimerfailed = "CancelTimerFailed"
        case startchildworkflowexecutioninitiated = "StartChildWorkflowExecutionInitiated"
        case startchildworkflowexecutionfailed = "StartChildWorkflowExecutionFailed"
        case childworkflowexecutionstarted = "ChildWorkflowExecutionStarted"
        case childworkflowexecutioncompleted = "ChildWorkflowExecutionCompleted"
        case childworkflowexecutionfailed = "ChildWorkflowExecutionFailed"
        case childworkflowexecutiontimedout = "ChildWorkflowExecutionTimedOut"
        case childworkflowexecutioncanceled = "ChildWorkflowExecutionCanceled"
        case childworkflowexecutionterminated = "ChildWorkflowExecutionTerminated"
        case signalexternalworkflowexecutioninitiated = "SignalExternalWorkflowExecutionInitiated"
        case signalexternalworkflowexecutionfailed = "SignalExternalWorkflowExecutionFailed"
        case externalworkflowexecutionsignaled = "ExternalWorkflowExecutionSignaled"
        case requestcancelexternalworkflowexecutioninitiated = "RequestCancelExternalWorkflowExecutionInitiated"
        case requestcancelexternalworkflowexecutionfailed = "RequestCancelExternalWorkflowExecutionFailed"
        case externalworkflowexecutioncancelrequested = "ExternalWorkflowExecutionCancelRequested"
        case lambdafunctionscheduled = "LambdaFunctionScheduled"
        case lambdafunctionstarted = "LambdaFunctionStarted"
        case lambdafunctioncompleted = "LambdaFunctionCompleted"
        case lambdafunctionfailed = "LambdaFunctionFailed"
        case lambdafunctiontimedout = "LambdaFunctionTimedOut"
        case schedulelambdafunctionfailed = "ScheduleLambdaFunctionFailed"
        case startlambdafunctionfailed = "StartLambdaFunctionFailed"
        public var description: String { return self.rawValue }
    }

    public struct LambdaFunctionCompletedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "scheduledEventId", required: true, type: .long), 
            AWSShapeMember(label: "result", required: false, type: .string), 
            AWSShapeMember(label: "startedEventId", required: true, type: .long)
        ]
        /// The ID of the LambdaFunctionScheduled event that was recorded when this Lambda task was scheduled. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        public let scheduledEventId: Int64
        /// The results of the Lambda task.
        public let result: String?
        /// The ID of the LambdaFunctionStarted event recorded when this activity task started. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        public let startedEventId: Int64

        public init(scheduledEventId: Int64, result: String? = nil, startedEventId: Int64) {
            self.scheduledEventId = scheduledEventId
            self.result = result
            self.startedEventId = startedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledEventId = "scheduledEventId"
            case result = "result"
            case startedEventId = "startedEventId"
        }
    }

    public struct LambdaFunctionScheduledEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "input", required: false, type: .string), 
            AWSShapeMember(label: "startToCloseTimeout", required: false, type: .string), 
            AWSShapeMember(label: "control", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "id", required: true, type: .string)
        ]
        /// The input provided to the Lambda task.
        public let input: String?
        /// The maximum amount of time a worker can take to process the Lambda task.
        public let startToCloseTimeout: String?
        /// Data attached to the event that the decider can use in subsequent workflow tasks. This data isn't sent to the Lambda task.
        public let control: String?
        /// The name of the Lambda function.
        public let name: String
        /// The ID of the LambdaFunctionCompleted event corresponding to the decision that resulted in scheduling this activity task. To help diagnose issues, use this information to trace back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The unique ID of the Lambda task.
        public let id: String

        public init(input: String? = nil, startToCloseTimeout: String? = nil, control: String? = nil, name: String, decisionTaskCompletedEventId: Int64, id: String) {
            self.input = input
            self.startToCloseTimeout = startToCloseTimeout
            self.control = control
            self.name = name
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case input = "input"
            case startToCloseTimeout = "startToCloseTimeout"
            case control = "control"
            case name = "name"
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case id = "id"
        }
    }

    public struct WorkflowExecutionSignaledEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "externalInitiatedEventId", required: false, type: .long), 
            AWSShapeMember(label: "input", required: false, type: .string), 
            AWSShapeMember(label: "signalName", required: true, type: .string), 
            AWSShapeMember(label: "externalWorkflowExecution", required: false, type: .structure)
        ]
        /// The ID of the SignalExternalWorkflowExecutionInitiated event corresponding to the SignalExternalWorkflow decision to signal this workflow execution.The source event with this ID can be found in the history of the source workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event. This field is set only if the signal was initiated by another workflow execution.
        public let externalInitiatedEventId: Int64?
        /// The inputs provided with the signal. The decider can use the signal name and inputs to determine how to process the signal.
        public let input: String?
        /// The name of the signal received. The decider can use the signal name and inputs to determine how to the process the signal.
        public let signalName: String
        /// The workflow execution that sent the signal. This is set only of the signal was sent by another workflow execution.
        public let externalWorkflowExecution: WorkflowExecution?

        public init(externalInitiatedEventId: Int64? = nil, input: String? = nil, signalName: String, externalWorkflowExecution: WorkflowExecution? = nil) {
            self.externalInitiatedEventId = externalInitiatedEventId
            self.input = input
            self.signalName = signalName
            self.externalWorkflowExecution = externalWorkflowExecution
        }

        private enum CodingKeys: String, CodingKey {
            case externalInitiatedEventId = "externalInitiatedEventId"
            case input = "input"
            case signalName = "signalName"
            case externalWorkflowExecution = "externalWorkflowExecution"
        }
    }

    public struct RegisterDomainInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "workflowExecutionRetentionPeriodInDays", required: true, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// A text description of the domain.
        public let description: String?
        /// The duration (in days) that records and histories of workflow executions on the domain should be kept by the service. After the retention period, the workflow execution isn't available in the results of visibility calls. If you pass the value NONE or 0 (zero), then the workflow execution history isn't retained. As soon as the workflow execution completes, the execution record and its history are deleted. The maximum workflow execution retention period is 90 days. For more information about Amazon SWF service limits, see: Amazon SWF Service Limits in the Amazon SWF Developer Guide.
        public let workflowExecutionRetentionPeriodInDays: String
        /// Name of the domain to register. The name must be unique in the region that the domain is registered in. The specified string must not start or end with whitespace. It must not contain a : (colon), / (slash), | (vertical bar), or any control characters (\u0000-\u001f | \u007f-\u009f). Also, it must not contain the literal string arn.
        public let name: String

        public init(description: String? = nil, workflowExecutionRetentionPeriodInDays: String, name: String) {
            self.description = description
            self.workflowExecutionRetentionPeriodInDays = workflowExecutionRetentionPeriodInDays
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case workflowExecutionRetentionPeriodInDays = "workflowExecutionRetentionPeriodInDays"
            case name = "name"
        }
    }

    public struct ActivityTaskStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cancelRequested", required: true, type: .boolean)
        ]
        /// Set to true if cancellation of the task is requested.
        public let cancelRequested: Bool

        public init(cancelRequested: Bool) {
            self.cancelRequested = cancelRequested
        }

        private enum CodingKeys: String, CodingKey {
            case cancelRequested = "cancelRequested"
        }
    }

    public struct WorkflowExecutionInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "execution", required: true, type: .structure), 
            AWSShapeMember(label: "workflowType", required: true, type: .structure), 
            AWSShapeMember(label: "tagList", required: false, type: .list), 
            AWSShapeMember(label: "executionStatus", required: true, type: .enum), 
            AWSShapeMember(label: "closeStatus", required: false, type: .enum), 
            AWSShapeMember(label: "parent", required: false, type: .structure), 
            AWSShapeMember(label: "cancelRequested", required: false, type: .boolean), 
            AWSShapeMember(label: "startTimestamp", required: true, type: .timestamp), 
            AWSShapeMember(label: "closeTimestamp", required: false, type: .timestamp)
        ]
        /// The workflow execution this information is about.
        public let execution: WorkflowExecution
        /// The type of the workflow execution.
        public let workflowType: WorkflowType
        /// The list of tags associated with the workflow execution. Tags can be used to identify and list workflow executions of interest through the visibility APIs. A workflow execution can have a maximum of 5 tags.
        public let tagList: [String]?
        /// The current status of the execution.
        public let executionStatus: ExecutionStatus
        /// If the execution status is closed then this specifies how the execution was closed:    COMPLETED – the execution was successfully completed.    CANCELED – the execution was canceled.Cancellation allows the implementation to gracefully clean up before the execution is closed.    TERMINATED – the execution was force terminated.    FAILED – the execution failed to complete.    TIMED_OUT – the execution did not complete in the alloted time and was automatically timed out.    CONTINUED_AS_NEW – the execution is logically continued. This means the current execution was completed and a new execution was started to carry on the workflow.  
        public let closeStatus: CloseStatus?
        /// If this workflow execution is a child of another execution then contains the workflow execution that started this execution.
        public let parent: WorkflowExecution?
        /// Set to true if a cancellation is requested for this workflow execution.
        public let cancelRequested: Bool?
        /// The time when the execution was started.
        public let startTimestamp: TimeStamp
        /// The time when the workflow execution was closed. Set only if the execution status is CLOSED.
        public let closeTimestamp: TimeStamp?

        public init(execution: WorkflowExecution, workflowType: WorkflowType, tagList: [String]? = nil, executionStatus: ExecutionStatus, closeStatus: CloseStatus? = nil, parent: WorkflowExecution? = nil, cancelRequested: Bool? = nil, startTimestamp: TimeStamp, closeTimestamp: TimeStamp? = nil) {
            self.execution = execution
            self.workflowType = workflowType
            self.tagList = tagList
            self.executionStatus = executionStatus
            self.closeStatus = closeStatus
            self.parent = parent
            self.cancelRequested = cancelRequested
            self.startTimestamp = startTimestamp
            self.closeTimestamp = closeTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case execution = "execution"
            case workflowType = "workflowType"
            case tagList = "tagList"
            case executionStatus = "executionStatus"
            case closeStatus = "closeStatus"
            case parent = "parent"
            case cancelRequested = "cancelRequested"
            case startTimestamp = "startTimestamp"
            case closeTimestamp = "closeTimestamp"
        }
    }

    public enum ExecutionStatus: String, CustomStringConvertible, Codable {
        case open = "OPEN"
        case closed = "CLOSED"
        public var description: String { return self.rawValue }
    }

    public struct ChildWorkflowExecutionFailedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "startedEventId", required: true, type: .long), 
            AWSShapeMember(label: "details", required: false, type: .string), 
            AWSShapeMember(label: "workflowExecution", required: true, type: .structure), 
            AWSShapeMember(label: "workflowType", required: true, type: .structure), 
            AWSShapeMember(label: "reason", required: false, type: .string), 
            AWSShapeMember(label: "initiatedEventId", required: true, type: .long)
        ]
        /// The ID of the ChildWorkflowExecutionStarted event recorded when this child workflow execution was started. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let startedEventId: Int64
        /// The details of the failure (if provided).
        public let details: String?
        /// The child workflow execution that failed.
        public let workflowExecution: WorkflowExecution
        /// The type of the child workflow execution.
        public let workflowType: WorkflowType
        /// The reason for the failure (if provided).
        public let reason: String?
        /// The ID of the StartChildWorkflowExecutionInitiated event corresponding to the StartChildWorkflowExecution Decision to start this child workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64

        public init(startedEventId: Int64, details: String? = nil, workflowExecution: WorkflowExecution, workflowType: WorkflowType, reason: String? = nil, initiatedEventId: Int64) {
            self.startedEventId = startedEventId
            self.details = details
            self.workflowExecution = workflowExecution
            self.workflowType = workflowType
            self.reason = reason
            self.initiatedEventId = initiatedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case startedEventId = "startedEventId"
            case details = "details"
            case workflowExecution = "workflowExecution"
            case workflowType = "workflowType"
            case reason = "reason"
            case initiatedEventId = "initiatedEventId"
        }
    }

    public struct RecordMarkerDecisionAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "details", required: false, type: .string), 
            AWSShapeMember(label: "markerName", required: true, type: .string)
        ]
        ///  The details of the marker.
        public let details: String?
        ///  The name of the marker.
        public let markerName: String

        public init(details: String? = nil, markerName: String) {
            self.details = details
            self.markerName = markerName
        }

        private enum CodingKeys: String, CodingKey {
            case details = "details"
            case markerName = "markerName"
        }
    }

    public struct ExternalWorkflowExecutionCancelRequestedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "workflowExecution", required: true, type: .structure), 
            AWSShapeMember(label: "initiatedEventId", required: true, type: .long)
        ]
        /// The external workflow execution to which the cancellation request was delivered.
        public let workflowExecution: WorkflowExecution
        /// The ID of the RequestCancelExternalWorkflowExecutionInitiated event corresponding to the RequestCancelExternalWorkflowExecution decision to cancel this external workflow execution. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let initiatedEventId: Int64

        public init(workflowExecution: WorkflowExecution, initiatedEventId: Int64) {
            self.workflowExecution = workflowExecution
            self.initiatedEventId = initiatedEventId
        }

        private enum CodingKeys: String, CodingKey {
            case workflowExecution = "workflowExecution"
            case initiatedEventId = "initiatedEventId"
        }
    }

    public struct CancelTimerFailedEventAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "decisionTaskCompletedEventId", required: true, type: .long), 
            AWSShapeMember(label: "timerId", required: true, type: .string), 
            AWSShapeMember(label: "cause", required: true, type: .enum)
        ]
        /// The ID of the DecisionTaskCompleted event corresponding to the decision task that resulted in the CancelTimer decision to cancel this timer. This information can be useful for diagnosing problems by tracing back the chain of events leading up to this event.
        public let decisionTaskCompletedEventId: Int64
        /// The timerId provided in the CancelTimer decision that failed.
        public let timerId: String
        /// The cause of the failure. This information is generated by the system and can be useful for diagnostic purposes.  If cause is set to OPERATION_NOT_PERMITTED, the decision failed because it lacked sufficient permissions. For details and example IAM policies, see Using IAM to Manage Access to Amazon SWF Workflows in the Amazon SWF Developer Guide. 
        public let cause: CancelTimerFailedCause

        public init(decisionTaskCompletedEventId: Int64, timerId: String, cause: CancelTimerFailedCause) {
            self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
            self.timerId = timerId
            self.cause = cause
        }

        private enum CodingKeys: String, CodingKey {
            case decisionTaskCompletedEventId = "decisionTaskCompletedEventId"
            case timerId = "timerId"
            case cause = "cause"
        }
    }

    public enum ChildPolicy: String, CustomStringConvertible, Codable {
        case terminate = "TERMINATE"
        case requestCancel = "REQUEST_CANCEL"
        case abandon = "ABANDON"
        public var description: String { return self.rawValue }
    }

    public struct CancelTimerDecisionAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "timerId", required: true, type: .string)
        ]
        ///  The unique ID of the timer to cancel.
        public let timerId: String

        public init(timerId: String) {
            self.timerId = timerId
        }

        private enum CodingKeys: String, CodingKey {
            case timerId = "timerId"
        }
    }

    public struct WorkflowType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "version", required: true, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        ///  The version of the workflow type.  The combination of workflow type name and version must be unique with in a domain. 
        public let version: String
        ///  The name of the workflow type.  The combination of workflow type name and version must be unique with in a domain. 
        public let name: String

        public init(version: String, name: String) {
            self.version = version
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case version = "version"
            case name = "name"
        }
    }

}