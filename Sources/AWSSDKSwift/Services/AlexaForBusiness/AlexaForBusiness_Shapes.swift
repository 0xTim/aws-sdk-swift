// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension AlexaForBusiness {

    public struct SearchUsersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "SortCriteria", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults. Required.
        public let nextToken: String?
        /// The filters to use for listing a specific set of users. Required. Supported filter keys are UserId, FirstName, LastName, Email, and EnrollmentStatus.
        public let filters: [Filter]?
        /// The sort order to use in listing the filtered set of users. Required. Supported sort keys are UserId, FirstName, LastName, Email, and EnrollmentStatus.
        public let sortCriteria: [Sort]?
        /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved. Required.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, filters: [Filter]? = nil, sortCriteria: [Sort]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.sortCriteria = sortCriteria
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case sortCriteria = "SortCriteria"
            case maxResults = "MaxResults"
        }
    }

    public struct UpdateSkillGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "SkillGroupName", required: false, type: .string), 
            AWSShapeMember(label: "SkillGroupArn", required: false, type: .string)
        ]
        /// The updated description for the skill group.
        public let description: String?
        /// The updated name for the skill group.
        public let skillGroupName: String?
        /// The ARN of the skill group to update. 
        public let skillGroupArn: String?

        public init(description: String? = nil, skillGroupName: String? = nil, skillGroupArn: String? = nil) {
            self.description = description
            self.skillGroupName = skillGroupName
            self.skillGroupArn = skillGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case skillGroupName = "SkillGroupName"
            case skillGroupArn = "SkillGroupArn"
        }
    }

    public struct TagResourceResponse: AWSShape {

    }

    public struct GetAddressBookResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddressBook", required: false, type: .structure)
        ]
        /// The details of the requested address book.
        public let addressBook: AddressBook?

        public init(addressBook: AddressBook? = nil) {
            self.addressBook = addressBook
        }

        private enum CodingKeys: String, CodingKey {
            case addressBook = "AddressBook"
        }
    }

    public struct CreateUserResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserArn", required: false, type: .string)
        ]
        /// The ARN of the newly created user in the response.
        public let userArn: String?

        public init(userArn: String? = nil) {
            self.userArn = userArn
        }

        private enum CodingKeys: String, CodingKey {
            case userArn = "UserArn"
        }
    }

    public struct DisassociateContactFromAddressBookRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddressBookArn", required: true, type: .string), 
            AWSShapeMember(label: "ContactArn", required: true, type: .string)
        ]
        /// The ARN of the address from which to disassociate the contact.
        public let addressBookArn: String
        /// The ARN of the contact to disassociate from an address book.
        public let contactArn: String

        public init(addressBookArn: String, contactArn: String) {
            self.addressBookArn = addressBookArn
            self.contactArn = contactArn
        }

        private enum CodingKeys: String, CodingKey {
            case addressBookArn = "AddressBookArn"
            case contactArn = "ContactArn"
        }
    }

    public struct PutRoomSkillParameterResponse: AWSShape {

    }

    public struct ResolveRoomResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoomArn", required: false, type: .string), 
            AWSShapeMember(label: "RoomName", required: false, type: .string), 
            AWSShapeMember(label: "RoomSkillParameters", required: false, type: .list)
        ]
        /// The ARN of the room from which the skill request was invoked.
        public let roomArn: String?
        /// The name of the room from which the skill request was invoked.
        public let roomName: String?
        /// Response to get the room profile request. Required.
        public let roomSkillParameters: [RoomSkillParameter]?

        public init(roomArn: String? = nil, roomName: String? = nil, roomSkillParameters: [RoomSkillParameter]? = nil) {
            self.roomArn = roomArn
            self.roomName = roomName
            self.roomSkillParameters = roomSkillParameters
        }

        private enum CodingKeys: String, CodingKey {
            case roomArn = "RoomArn"
            case roomName = "RoomName"
            case roomSkillParameters = "RoomSkillParameters"
        }
    }

    public struct DisassociateSkillGroupFromRoomResponse: AWSShape {

    }

    public struct PutRoomSkillParameterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoomArn", required: false, type: .string), 
            AWSShapeMember(label: "RoomSkillParameter", required: true, type: .structure), 
            AWSShapeMember(label: "SkillId", required: true, type: .string)
        ]
        /// The ARN of the room associated with the room skill parameter. Required.
        public let roomArn: String?
        /// The updated room skill parameter. Required.
        public let roomSkillParameter: RoomSkillParameter
        /// The ARN of the skill associated with the room skill parameter. Required.
        public let skillId: String

        public init(roomArn: String? = nil, roomSkillParameter: RoomSkillParameter, skillId: String) {
            self.roomArn = roomArn
            self.roomSkillParameter = roomSkillParameter
            self.skillId = skillId
        }

        private enum CodingKeys: String, CodingKey {
            case roomArn = "RoomArn"
            case roomSkillParameter = "RoomSkillParameter"
            case skillId = "SkillId"
        }
    }

    public struct GetProfileResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Profile", required: false, type: .structure)
        ]
        /// The details of the room profile requested. Required.
        public let profile: Profile?

        public init(profile: Profile? = nil) {
            self.profile = profile
        }

        private enum CodingKeys: String, CodingKey {
            case profile = "Profile"
        }
    }

    public enum DistanceUnit: String, CustomStringConvertible, Codable {
        case metric = "METRIC"
        case imperial = "IMPERIAL"
        public var description: String { return self.rawValue }
    }

    public enum DeviceEventType: String, CustomStringConvertible, Codable {
        case connectionStatus = "CONNECTION_STATUS"
        case deviceStatus = "DEVICE_STATUS"
        public var description: String { return self.rawValue }
    }

    public struct DeleteContactResponse: AWSShape {

    }

    public struct UpdateRoomRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProfileArn", required: false, type: .string), 
            AWSShapeMember(label: "ProviderCalendarId", required: false, type: .string), 
            AWSShapeMember(label: "RoomName", required: false, type: .string), 
            AWSShapeMember(label: "RoomArn", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The updated profile ARN for the room.
        public let profileArn: String?
        /// The updated provider calendar ARN for the room.
        public let providerCalendarId: String?
        /// The updated name for the room.
        public let roomName: String?
        /// The ARN of the room to update. 
        public let roomArn: String?
        /// The updated description for the room.
        public let description: String?

        public init(profileArn: String? = nil, providerCalendarId: String? = nil, roomName: String? = nil, roomArn: String? = nil, description: String? = nil) {
            self.profileArn = profileArn
            self.providerCalendarId = providerCalendarId
            self.roomName = roomName
            self.roomArn = roomArn
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case profileArn = "ProfileArn"
            case providerCalendarId = "ProviderCalendarId"
            case roomName = "RoomName"
            case roomArn = "RoomArn"
            case description = "Description"
        }
    }

    public struct SearchProfilesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Profiles", required: false, type: .list), 
            AWSShapeMember(label: "TotalCount", required: false, type: .integer)
        ]
        /// The token returned to indicate that there is more data available.
        public let nextToken: String?
        /// The profiles that meet the specified set of filter criteria, in sort order.
        public let profiles: [ProfileData]?
        /// The total number of room profiles returned.
        public let totalCount: Int32?

        public init(nextToken: String? = nil, profiles: [ProfileData]? = nil, totalCount: Int32? = nil) {
            self.nextToken = nextToken
            self.profiles = profiles
            self.totalCount = totalCount
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case profiles = "Profiles"
            case totalCount = "TotalCount"
        }
    }

    public enum ConnectionStatus: String, CustomStringConvertible, Codable {
        case online = "ONLINE"
        case offline = "OFFLINE"
        public var description: String { return self.rawValue }
    }

    public struct RoomSkillParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterValue", required: true, type: .string), 
            AWSShapeMember(label: "ParameterKey", required: true, type: .string)
        ]
        /// The parameter value of a room skill parameter.
        public let parameterValue: String
        /// The parameter key of a room skill parameter. ParameterKey is an enumerated type that only takes “DEFAULT” or “SCOPE” as valid values.
        public let parameterKey: String

        public init(parameterValue: String, parameterKey: String) {
            self.parameterValue = parameterValue
            self.parameterKey = parameterKey
        }

        private enum CodingKeys: String, CodingKey {
            case parameterValue = "ParameterValue"
            case parameterKey = "ParameterKey"
        }
    }

    public struct DisassociateSkillGroupFromRoomRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoomArn", required: false, type: .string), 
            AWSShapeMember(label: "SkillGroupArn", required: false, type: .string)
        ]
        /// The ARN of the room from which the skill group is to be disassociated. Required.
        public let roomArn: String?
        /// The ARN of the skill group to disassociate from a room. Required.
        public let skillGroupArn: String?

        public init(roomArn: String? = nil, skillGroupArn: String? = nil) {
            self.roomArn = roomArn
            self.skillGroupArn = skillGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case roomArn = "RoomArn"
            case skillGroupArn = "SkillGroupArn"
        }
    }

    public struct DeleteUserResponse: AWSShape {

    }

    public struct GetDeviceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Device", required: false, type: .structure)
        ]
        /// The details of the device requested. Required.
        public let device: Device?

        public init(device: Device? = nil) {
            self.device = device
        }

        private enum CodingKeys: String, CodingKey {
            case device = "Device"
        }
    }

    public struct DisassociateDeviceFromRoomResponse: AWSShape {

    }

    public struct UpdateAddressBookResponse: AWSShape {

    }

    public struct UpdateProfileResponse: AWSShape {

    }

    public struct CreateRoomRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "ProfileArn", required: false, type: .string), 
            AWSShapeMember(label: "ProviderCalendarId", required: false, type: .string), 
            AWSShapeMember(label: "RoomName", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// A unique, user-specified identifier for this request that ensures idempotency. 
        public let clientRequestToken: String?
        /// The profile ARN for the room.
        public let profileArn: String?
        /// The calendar ARN for the room.
        public let providerCalendarId: String?
        /// The name for the room.
        public let roomName: String
        /// The description for the room.
        public let description: String?
        /// The tags for the room.
        public let tags: [Tag]?

        public init(clientRequestToken: String? = nil, profileArn: String? = nil, providerCalendarId: String? = nil, roomName: String, description: String? = nil, tags: [Tag]? = nil) {
            self.clientRequestToken = clientRequestToken
            self.profileArn = profileArn
            self.providerCalendarId = providerCalendarId
            self.roomName = roomName
            self.description = description
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "ClientRequestToken"
            case profileArn = "ProfileArn"
            case providerCalendarId = "ProviderCalendarId"
            case roomName = "RoomName"
            case description = "Description"
            case tags = "Tags"
        }
    }

    public struct SkillGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "SkillGroupName", required: false, type: .string), 
            AWSShapeMember(label: "SkillGroupArn", required: false, type: .string)
        ]
        /// The description of a skill group.
        public let description: String?
        /// The name of a skill group.
        public let skillGroupName: String?
        /// The ARN of a skill group.
        public let skillGroupArn: String?

        public init(description: String? = nil, skillGroupName: String? = nil, skillGroupArn: String? = nil) {
            self.description = description
            self.skillGroupName = skillGroupName
            self.skillGroupArn = skillGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case skillGroupName = "SkillGroupName"
            case skillGroupArn = "SkillGroupArn"
        }
    }

    public struct SearchAddressBooksRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "SortCriteria", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response only includes results beyond the token, up to the value specified by MaxResults.
        public let nextToken: String?
        /// The filters to use to list a specified set of address books. The supported filter key is AddressBookName.
        public let filters: [Filter]?
        /// The sort order to use in listing the specified set of address books. The supported sort key is AddressBookName.
        public let sortCriteria: [Sort]?
        /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, filters: [Filter]? = nil, sortCriteria: [Sort]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.sortCriteria = sortCriteria
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case sortCriteria = "SortCriteria"
            case maxResults = "MaxResults"
        }
    }

    public struct CreateContactResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContactArn", required: false, type: .string)
        ]
        /// The ARN of the newly created address book.
        public let contactArn: String?

        public init(contactArn: String? = nil) {
            self.contactArn = contactArn
        }

        private enum CodingKeys: String, CodingKey {
            case contactArn = "ContactArn"
        }
    }

    public struct GetAddressBookRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddressBookArn", required: true, type: .string)
        ]
        /// The ARN of the address book for which to request details.
        public let addressBookArn: String

        public init(addressBookArn: String) {
            self.addressBookArn = addressBookArn
        }

        private enum CodingKeys: String, CodingKey {
            case addressBookArn = "AddressBookArn"
        }
    }

    public struct StartDeviceSyncRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoomArn", required: false, type: .string), 
            AWSShapeMember(label: "Features", required: true, type: .list), 
            AWSShapeMember(label: "DeviceArn", required: false, type: .string)
        ]
        /// The ARN of the room with which the device to sync is associated. Required.
        public let roomArn: String?
        /// Request structure to start the device sync. Required.
        public let features: [Feature]
        /// The ARN of the device to sync. Required.
        public let deviceArn: String?

        public init(roomArn: String? = nil, features: [Feature], deviceArn: String? = nil) {
            self.roomArn = roomArn
            self.features = features
            self.deviceArn = deviceArn
        }

        private enum CodingKeys: String, CodingKey {
            case roomArn = "RoomArn"
            case features = "Features"
            case deviceArn = "DeviceArn"
        }
    }

    public struct SearchSkillGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SkillGroups", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TotalCount", required: false, type: .integer)
        ]
        /// The skill groups that meet the filter criteria, in sort order.
        public let skillGroups: [SkillGroupData]?
        /// The token returned to indicate that there is more data available.
        public let nextToken: String?
        /// The total number of skill groups returned.
        public let totalCount: Int32?

        public init(skillGroups: [SkillGroupData]? = nil, nextToken: String? = nil, totalCount: Int32? = nil) {
            self.skillGroups = skillGroups
            self.nextToken = nextToken
            self.totalCount = totalCount
        }

        private enum CodingKeys: String, CodingKey {
            case skillGroups = "SkillGroups"
            case nextToken = "NextToken"
            case totalCount = "TotalCount"
        }
    }

    public struct DeleteProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProfileArn", required: false, type: .string)
        ]
        /// The ARN of the room profile to delete. Required.
        public let profileArn: String?

        public init(profileArn: String? = nil) {
            self.profileArn = profileArn
        }

        private enum CodingKeys: String, CodingKey {
            case profileArn = "ProfileArn"
        }
    }

    public struct ListTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults. 
        public let nextToken: String?
        /// The ARN of the specified resource for which to list tags.
        public let arn: String
        /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, arn: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.arn = arn
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case arn = "Arn"
            case maxResults = "MaxResults"
        }
    }

    public struct UserData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserArn", required: false, type: .string), 
            AWSShapeMember(label: "LastName", required: false, type: .string), 
            AWSShapeMember(label: "EnrollmentStatus", required: false, type: .enum), 
            AWSShapeMember(label: "Email", required: false, type: .string), 
            AWSShapeMember(label: "FirstName", required: false, type: .string), 
            AWSShapeMember(label: "EnrollmentId", required: false, type: .string)
        ]
        /// The ARN of a user.
        public let userArn: String?
        /// The last name of a user.
        public let lastName: String?
        /// The enrollment status of a user.
        public let enrollmentStatus: EnrollmentStatus?
        /// The email of a user.
        public let email: String?
        /// The first name of a user.
        public let firstName: String?
        /// The enrollment ARN of a user.
        public let enrollmentId: String?

        public init(userArn: String? = nil, lastName: String? = nil, enrollmentStatus: EnrollmentStatus? = nil, email: String? = nil, firstName: String? = nil, enrollmentId: String? = nil) {
            self.userArn = userArn
            self.lastName = lastName
            self.enrollmentStatus = enrollmentStatus
            self.email = email
            self.firstName = firstName
            self.enrollmentId = enrollmentId
        }

        private enum CodingKeys: String, CodingKey {
            case userArn = "UserArn"
            case lastName = "LastName"
            case enrollmentStatus = "EnrollmentStatus"
            case email = "Email"
            case firstName = "FirstName"
            case enrollmentId = "EnrollmentId"
        }
    }

    public struct Profile: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PSTNEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Address", required: false, type: .string), 
            AWSShapeMember(label: "TemperatureUnit", required: false, type: .enum), 
            AWSShapeMember(label: "ProfileArn", required: false, type: .string), 
            AWSShapeMember(label: "SetupModeDisabled", required: false, type: .boolean), 
            AWSShapeMember(label: "DistanceUnit", required: false, type: .enum), 
            AWSShapeMember(label: "MaxVolumeLimit", required: false, type: .integer), 
            AWSShapeMember(label: "WakeWord", required: false, type: .enum), 
            AWSShapeMember(label: "Timezone", required: false, type: .string), 
            AWSShapeMember(label: "ProfileName", required: false, type: .string)
        ]
        /// The PSTN setting of a room profile.
        public let pSTNEnabled: Bool?
        /// The address of a room profile.
        public let address: String?
        /// The temperature unit of a room profile.
        public let temperatureUnit: TemperatureUnit?
        /// The ARN of a room profile.
        public let profileArn: String?
        /// The setup mode of a room profile.
        public let setupModeDisabled: Bool?
        /// The distance unit of a room profile.
        public let distanceUnit: DistanceUnit?
        /// The max volume limit of a room profile.
        public let maxVolumeLimit: Int32?
        /// The wake word of a room profile.
        public let wakeWord: WakeWord?
        /// The time zone of a room profile.
        public let timezone: String?
        /// The name of a room profile.
        public let profileName: String?

        public init(pSTNEnabled: Bool? = nil, address: String? = nil, temperatureUnit: TemperatureUnit? = nil, profileArn: String? = nil, setupModeDisabled: Bool? = nil, distanceUnit: DistanceUnit? = nil, maxVolumeLimit: Int32? = nil, wakeWord: WakeWord? = nil, timezone: String? = nil, profileName: String? = nil) {
            self.pSTNEnabled = pSTNEnabled
            self.address = address
            self.temperatureUnit = temperatureUnit
            self.profileArn = profileArn
            self.setupModeDisabled = setupModeDisabled
            self.distanceUnit = distanceUnit
            self.maxVolumeLimit = maxVolumeLimit
            self.wakeWord = wakeWord
            self.timezone = timezone
            self.profileName = profileName
        }

        private enum CodingKeys: String, CodingKey {
            case pSTNEnabled = "PSTNEnabled"
            case address = "Address"
            case temperatureUnit = "TemperatureUnit"
            case profileArn = "ProfileArn"
            case setupModeDisabled = "SetupModeDisabled"
            case distanceUnit = "DistanceUnit"
            case maxVolumeLimit = "MaxVolumeLimit"
            case wakeWord = "WakeWord"
            case timezone = "Timezone"
            case profileName = "ProfileName"
        }
    }

    public struct ResolveRoomRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserId", required: true, type: .string), 
            AWSShapeMember(label: "SkillId", required: true, type: .string)
        ]
        /// The ARN of the user. Required.
        public let userId: String
        /// The ARN of the skill that was requested. Required.
        public let skillId: String

        public init(userId: String, skillId: String) {
            self.userId = userId
            self.skillId = skillId
        }

        private enum CodingKeys: String, CodingKey {
            case userId = "UserId"
            case skillId = "SkillId"
        }
    }

    public struct SkillSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SkillId", required: false, type: .string), 
            AWSShapeMember(label: "SupportsLinking", required: false, type: .boolean), 
            AWSShapeMember(label: "SkillName", required: false, type: .string)
        ]
        /// The ARN of the skill summary.
        public let skillId: String?
        /// Linking support for a skill.
        public let supportsLinking: Bool?
        /// The name of the skill.
        public let skillName: String?

        public init(skillId: String? = nil, supportsLinking: Bool? = nil, skillName: String? = nil) {
            self.skillId = skillId
            self.supportsLinking = supportsLinking
            self.skillName = skillName
        }

        private enum CodingKeys: String, CodingKey {
            case skillId = "SkillId"
            case supportsLinking = "SupportsLinking"
            case skillName = "SkillName"
        }
    }

    public struct GetProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProfileArn", required: false, type: .string)
        ]
        /// The ARN of the room profile for which to request details. Required.
        public let profileArn: String?

        public init(profileArn: String? = nil) {
            self.profileArn = profileArn
        }

        private enum CodingKeys: String, CodingKey {
            case profileArn = "ProfileArn"
        }
    }

    public struct ListTagsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// The token returned to indicate that there is more data available.
        public let nextToken: String?
        /// The tags requested for the specified resource.
        public let tags: [Tag]?

        public init(nextToken: String? = nil, tags: [Tag]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case tags = "Tags"
        }
    }

    public struct UpdateContactResponse: AWSShape {

    }

    public struct RevokeInvitationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnrollmentId", required: false, type: .string), 
            AWSShapeMember(label: "UserArn", required: false, type: .string)
        ]
        /// The ARN of the enrollment invitation to revoke. Required.
        public let enrollmentId: String?
        /// The ARN of the user for whom to revoke an enrollment invitation. Required.
        public let userArn: String?

        public init(enrollmentId: String? = nil, userArn: String? = nil) {
            self.enrollmentId = enrollmentId
            self.userArn = userArn
        }

        private enum CodingKeys: String, CodingKey {
            case enrollmentId = "EnrollmentId"
            case userArn = "UserArn"
        }
    }

    public enum DeviceStatus: String, CustomStringConvertible, Codable {
        case ready = "READY"
        case pending = "PENDING"
        case wasOffline = "WAS_OFFLINE"
        case deregistered = "DEREGISTERED"
        public var description: String { return self.rawValue }
    }

    public struct CreateProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PSTNEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Address", required: true, type: .string), 
            AWSShapeMember(label: "TemperatureUnit", required: true, type: .enum), 
            AWSShapeMember(label: "SetupModeDisabled", required: false, type: .boolean), 
            AWSShapeMember(label: "DistanceUnit", required: true, type: .enum), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxVolumeLimit", required: false, type: .integer), 
            AWSShapeMember(label: "WakeWord", required: true, type: .enum), 
            AWSShapeMember(label: "Timezone", required: true, type: .string), 
            AWSShapeMember(label: "ProfileName", required: true, type: .string)
        ]
        /// Whether PSTN calling is enabled.
        public let pSTNEnabled: Bool?
        /// The valid address for the room.
        public let address: String
        /// The temperature unit to be used by devices in the profile.
        public let temperatureUnit: TemperatureUnit
        /// Whether room profile setup is enabled.
        public let setupModeDisabled: Bool?
        /// The distance unit to be used by devices in the profile.
        public let distanceUnit: DistanceUnit
        /// The user-specified token that is used during the creation of a profile.
        public let clientRequestToken: String?
        /// The maximum volume limit for a room profile.
        public let maxVolumeLimit: Int32?
        /// A wake word for Alexa, Echo, Amazon, or a computer.
        public let wakeWord: WakeWord
        /// The time zone used by a room profile.
        public let timezone: String
        /// The name of a room profile.
        public let profileName: String

        public init(pSTNEnabled: Bool? = nil, address: String, temperatureUnit: TemperatureUnit, setupModeDisabled: Bool? = nil, distanceUnit: DistanceUnit, clientRequestToken: String? = nil, maxVolumeLimit: Int32? = nil, wakeWord: WakeWord, timezone: String, profileName: String) {
            self.pSTNEnabled = pSTNEnabled
            self.address = address
            self.temperatureUnit = temperatureUnit
            self.setupModeDisabled = setupModeDisabled
            self.distanceUnit = distanceUnit
            self.clientRequestToken = clientRequestToken
            self.maxVolumeLimit = maxVolumeLimit
            self.wakeWord = wakeWord
            self.timezone = timezone
            self.profileName = profileName
        }

        private enum CodingKeys: String, CodingKey {
            case pSTNEnabled = "PSTNEnabled"
            case address = "Address"
            case temperatureUnit = "TemperatureUnit"
            case setupModeDisabled = "SetupModeDisabled"
            case distanceUnit = "DistanceUnit"
            case clientRequestToken = "ClientRequestToken"
            case maxVolumeLimit = "MaxVolumeLimit"
            case wakeWord = "WakeWord"
            case timezone = "Timezone"
            case profileName = "ProfileName"
        }
    }

    public struct GetRoomResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Room", required: false, type: .structure)
        ]
        /// The details of the room requested.
        public let room: Room?

        public init(room: Room? = nil) {
            self.room = room
        }

        private enum CodingKeys: String, CodingKey {
            case room = "Room"
        }
    }

    public struct SearchRoomsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "SortCriteria", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
        public let nextToken: String?
        /// The filters to use to list a specified set of rooms. The supported filter keys are RoomName and ProfileName.
        public let filters: [Filter]?
        /// The sort order to use in listing the specified set of rooms. The supported sort keys are RoomName and ProfileName.
        public let sortCriteria: [Sort]?
        /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved. 
        public let maxResults: Int32?

        public init(nextToken: String? = nil, filters: [Filter]? = nil, sortCriteria: [Sort]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.sortCriteria = sortCriteria
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case sortCriteria = "SortCriteria"
            case maxResults = "MaxResults"
        }
    }

    public struct UpdateProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PSTNEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Address", required: false, type: .string), 
            AWSShapeMember(label: "TemperatureUnit", required: false, type: .enum), 
            AWSShapeMember(label: "ProfileArn", required: false, type: .string), 
            AWSShapeMember(label: "SetupModeDisabled", required: false, type: .boolean), 
            AWSShapeMember(label: "DistanceUnit", required: false, type: .enum), 
            AWSShapeMember(label: "MaxVolumeLimit", required: false, type: .integer), 
            AWSShapeMember(label: "WakeWord", required: false, type: .enum), 
            AWSShapeMember(label: "Timezone", required: false, type: .string), 
            AWSShapeMember(label: "ProfileName", required: false, type: .string)
        ]
        /// Whether the PSTN setting of the room profile is enabled.
        public let pSTNEnabled: Bool?
        /// The updated address for the room profile.
        public let address: String?
        /// The updated temperature unit for the room profile.
        public let temperatureUnit: TemperatureUnit?
        /// The ARN of the room profile to update. Required.
        public let profileArn: String?
        /// Whether the setup mode of the profile is enabled.
        public let setupModeDisabled: Bool?
        /// The updated distance unit for the room profile.
        public let distanceUnit: DistanceUnit?
        /// The updated maximum volume limit for the room profile.
        public let maxVolumeLimit: Int32?
        /// The updated wake word for the room profile.
        public let wakeWord: WakeWord?
        /// The updated timezone for the room profile.
        public let timezone: String?
        /// The updated name for the room profile.
        public let profileName: String?

        public init(pSTNEnabled: Bool? = nil, address: String? = nil, temperatureUnit: TemperatureUnit? = nil, profileArn: String? = nil, setupModeDisabled: Bool? = nil, distanceUnit: DistanceUnit? = nil, maxVolumeLimit: Int32? = nil, wakeWord: WakeWord? = nil, timezone: String? = nil, profileName: String? = nil) {
            self.pSTNEnabled = pSTNEnabled
            self.address = address
            self.temperatureUnit = temperatureUnit
            self.profileArn = profileArn
            self.setupModeDisabled = setupModeDisabled
            self.distanceUnit = distanceUnit
            self.maxVolumeLimit = maxVolumeLimit
            self.wakeWord = wakeWord
            self.timezone = timezone
            self.profileName = profileName
        }

        private enum CodingKeys: String, CodingKey {
            case pSTNEnabled = "PSTNEnabled"
            case address = "Address"
            case temperatureUnit = "TemperatureUnit"
            case profileArn = "ProfileArn"
            case setupModeDisabled = "SetupModeDisabled"
            case distanceUnit = "DistanceUnit"
            case maxVolumeLimit = "MaxVolumeLimit"
            case wakeWord = "WakeWord"
            case timezone = "Timezone"
            case profileName = "ProfileName"
        }
    }

    public struct DisassociateDeviceFromRoomRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceArn", required: false, type: .string)
        ]
        /// The ARN of the device to disassociate from a room. Required.
        public let deviceArn: String?

        public init(deviceArn: String? = nil) {
            self.deviceArn = deviceArn
        }

        private enum CodingKeys: String, CodingKey {
            case deviceArn = "DeviceArn"
        }
    }

    public struct CreateProfileResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProfileArn", required: false, type: .string)
        ]
        /// The ARN of the newly created room profile in the response.
        public let profileArn: String?

        public init(profileArn: String? = nil) {
            self.profileArn = profileArn
        }

        private enum CodingKeys: String, CodingKey {
            case profileArn = "ProfileArn"
        }
    }

    public struct SearchContactsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TotalCount", required: false, type: .integer), 
            AWSShapeMember(label: "Contacts", required: false, type: .list)
        ]
        /// The token returned to indicate that there is more data available.
        public let nextToken: String?
        /// The total number of contacts returned.
        public let totalCount: Int32?
        /// The contacts that meet the specified set of filter criteria, in sort order.
        public let contacts: [ContactData]?

        public init(nextToken: String? = nil, totalCount: Int32? = nil, contacts: [ContactData]? = nil) {
            self.nextToken = nextToken
            self.totalCount = totalCount
            self.contacts = contacts
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case totalCount = "TotalCount"
            case contacts = "Contacts"
        }
    }

    public struct UpdateAddressBookRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "AddressBookArn", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The updated description of the room.
        public let description: String?
        /// The ARN of the room to update.
        public let addressBookArn: String
        /// The updated name of the room.
        public let name: String?

        public init(description: String? = nil, addressBookArn: String, name: String? = nil) {
            self.description = description
            self.addressBookArn = addressBookArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case addressBookArn = "AddressBookArn"
            case name = "Name"
        }
    }

    public enum TemperatureUnit: String, CustomStringConvertible, Codable {
        case fahrenheit = "FAHRENHEIT"
        case celsius = "CELSIUS"
        public var description: String { return self.rawValue }
    }

    public struct DeviceStatusInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectionStatus", required: false, type: .enum), 
            AWSShapeMember(label: "DeviceStatusDetails", required: false, type: .list)
        ]
        /// The latest available information about the connection status of a device. 
        public let connectionStatus: ConnectionStatus?
        /// One or more device status detail descriptions.
        public let deviceStatusDetails: [DeviceStatusDetail]?

        public init(connectionStatus: ConnectionStatus? = nil, deviceStatusDetails: [DeviceStatusDetail]? = nil) {
            self.connectionStatus = connectionStatus
            self.deviceStatusDetails = deviceStatusDetails
        }

        private enum CodingKeys: String, CodingKey {
            case connectionStatus = "ConnectionStatus"
            case deviceStatusDetails = "DeviceStatusDetails"
        }
    }

    public enum Feature: String, CustomStringConvertible, Codable {
        case bluetooth = "BLUETOOTH"
        case volume = "VOLUME"
        case notifications = "NOTIFICATIONS"
        case lists = "LISTS"
        case skills = "SKILLS"
        case all = "ALL"
        public var description: String { return self.rawValue }
    }

    public struct CreateSkillGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "SkillGroupName", required: true, type: .string), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string)
        ]
        /// The description for the skill group.
        public let description: String?
        /// The name for the skill group.
        public let skillGroupName: String
        /// A unique, user-specified identifier for this request that ensures idempotency. 
        public let clientRequestToken: String?

        public init(description: String? = nil, skillGroupName: String, clientRequestToken: String? = nil) {
            self.description = description
            self.skillGroupName = skillGroupName
            self.clientRequestToken = clientRequestToken
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case skillGroupName = "SkillGroupName"
            case clientRequestToken = "ClientRequestToken"
        }
    }

    public struct GetRoomSkillParameterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoomArn", required: false, type: .string), 
            AWSShapeMember(label: "ParameterKey", required: true, type: .string), 
            AWSShapeMember(label: "SkillId", required: true, type: .string)
        ]
        /// The ARN of the room from which to get the room skill parameter details. 
        public let roomArn: String?
        /// The room skill parameter key for which to get details. Required.
        public let parameterKey: String
        /// The ARN of the skill from which to get the room skill parameter details. Required.
        public let skillId: String

        public init(roomArn: String? = nil, parameterKey: String, skillId: String) {
            self.roomArn = roomArn
            self.parameterKey = parameterKey
            self.skillId = skillId
        }

        private enum CodingKeys: String, CodingKey {
            case roomArn = "RoomArn"
            case parameterKey = "ParameterKey"
            case skillId = "SkillId"
        }
    }

    public struct DeleteRoomSkillParameterResponse: AWSShape {

    }

    public enum DeviceStatusDetailCode: String, CustomStringConvertible, Codable {
        case deviceSoftwareUpdateNeeded = "DEVICE_SOFTWARE_UPDATE_NEEDED"
        case deviceWasOffline = "DEVICE_WAS_OFFLINE"
        public var description: String { return self.rawValue }
    }

    public struct SearchAddressBooksResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "AddressBooks", required: false, type: .list), 
            AWSShapeMember(label: "TotalCount", required: false, type: .integer)
        ]
        /// The token returned to indicate that there is more data available.
        public let nextToken: String?
        /// The address books that meet the specified set of filter criteria, in sort order.
        public let addressBooks: [AddressBookData]?
        /// The total number of address books returned.
        public let totalCount: Int32?

        public init(nextToken: String? = nil, addressBooks: [AddressBookData]? = nil, totalCount: Int32? = nil) {
            self.nextToken = nextToken
            self.addressBooks = addressBooks
            self.totalCount = totalCount
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case addressBooks = "AddressBooks"
            case totalCount = "TotalCount"
        }
    }

    public struct CreateSkillGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SkillGroupArn", required: false, type: .string)
        ]
        /// The ARN of the newly created skill group in the response.
        public let skillGroupArn: String?

        public init(skillGroupArn: String? = nil) {
            self.skillGroupArn = skillGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case skillGroupArn = "SkillGroupArn"
        }
    }

    public struct AssociateDeviceWithRoomRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoomArn", required: false, type: .string), 
            AWSShapeMember(label: "DeviceArn", required: false, type: .string)
        ]
        /// The ARN of the room with which to associate the device. Required.
        public let roomArn: String?
        /// The ARN of the device to associate to a room. Required.
        public let deviceArn: String?

        public init(roomArn: String? = nil, deviceArn: String? = nil) {
            self.roomArn = roomArn
            self.deviceArn = deviceArn
        }

        private enum CodingKeys: String, CodingKey {
            case roomArn = "RoomArn"
            case deviceArn = "DeviceArn"
        }
    }

    public struct SearchDevicesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Devices", required: false, type: .list), 
            AWSShapeMember(label: "TotalCount", required: false, type: .integer)
        ]
        /// The token returned to indicate that there is more data available.
        public let nextToken: String?
        /// The devices that meet the specified set of filter criteria, in sort order.
        public let devices: [DeviceData]?
        /// The total number of devices returned.
        public let totalCount: Int32?

        public init(nextToken: String? = nil, devices: [DeviceData]? = nil, totalCount: Int32? = nil) {
            self.nextToken = nextToken
            self.devices = devices
            self.totalCount = totalCount
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case devices = "Devices"
            case totalCount = "TotalCount"
        }
    }

    public enum SortValue: String, CustomStringConvertible, Codable {
        case asc = "ASC"
        case desc = "DESC"
        public var description: String { return self.rawValue }
    }

    public struct UpdateSkillGroupResponse: AWSShape {

    }

    public struct AssociateSkillGroupWithRoomResponse: AWSShape {

    }

    public struct SearchContactsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "SortCriteria", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response only includes results beyond the token, up to the value specified by MaxResults.
        public let nextToken: String?
        /// The filters to use to list a specified set of address books. The supported filter keys are DisplayName, FirstName, LastName, and AddressBookArns.
        public let filters: [Filter]?
        /// The sort order to use in listing the specified set of contacts. The supported sort keys are DisplayName, FirstName, and LastName.
        public let sortCriteria: [Sort]?
        /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, filters: [Filter]? = nil, sortCriteria: [Sort]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.sortCriteria = sortCriteria
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case sortCriteria = "SortCriteria"
            case maxResults = "MaxResults"
        }
    }

    public struct DeleteSkillGroupResponse: AWSShape {

    }

    public struct CreateRoomResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoomArn", required: false, type: .string)
        ]
        /// The ARN of the newly created room in the response.
        public let roomArn: String?

        public init(roomArn: String? = nil) {
            self.roomArn = roomArn
        }

        private enum CodingKeys: String, CodingKey {
            case roomArn = "RoomArn"
        }
    }

    public struct ListDeviceEventsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "EventType", required: false, type: .enum), 
            AWSShapeMember(label: "DeviceArn", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response only includes results beyond the token, up to the value specified by MaxResults. When the end of results is reached, the response has a value of null.
        public let nextToken: String?
        /// The event type to filter device events. If EventType isn't specified, this returns a list of all device events in reverse chronological order. If EventType is specified, this returns a list of device events for that EventType in reverse chronological order. 
        public let eventType: DeviceEventType?
        /// The ARN of a device.
        public let deviceArn: String
        /// The maximum number of results to include in the response. The default value is 50. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved. 
        public let maxResults: Int32?

        public init(nextToken: String? = nil, eventType: DeviceEventType? = nil, deviceArn: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.eventType = eventType
            self.deviceArn = deviceArn
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case eventType = "EventType"
            case deviceArn = "DeviceArn"
            case maxResults = "MaxResults"
        }
    }

    public struct DeleteAddressBookRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddressBookArn", required: true, type: .string)
        ]
        /// The ARN of the address book to delete.
        public let addressBookArn: String

        public init(addressBookArn: String) {
            self.addressBookArn = addressBookArn
        }

        private enum CodingKeys: String, CodingKey {
            case addressBookArn = "AddressBookArn"
        }
    }

    public struct GetContactResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Contact", required: false, type: .structure)
        ]
        /// The details of the requested contact.
        public let contact: Contact?

        public init(contact: Contact? = nil) {
            self.contact = contact
        }

        private enum CodingKeys: String, CodingKey {
            case contact = "Contact"
        }
    }

    public struct AddressBook: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "AddressBookArn", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The description of the address book.
        public let description: String?
        /// The ARN of the address book.
        public let addressBookArn: String?
        /// The name of the address book.
        public let name: String?

        public init(description: String? = nil, addressBookArn: String? = nil, name: String? = nil) {
            self.description = description
            self.addressBookArn = addressBookArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case addressBookArn = "AddressBookArn"
            case name = "Name"
        }
    }

    public struct UpdateDeviceResponse: AWSShape {

    }

    public struct ListSkillsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "SkillGroupArn", required: false, type: .string)
        ]
        /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults. Required.
        public let nextToken: String?
        /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved. Required.
        public let maxResults: Int32?
        /// The ARN of the skill group for which to list enabled skills. Required.
        public let skillGroupArn: String?

        public init(nextToken: String? = nil, maxResults: Int32? = nil, skillGroupArn: String? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.skillGroupArn = skillGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
            case skillGroupArn = "SkillGroupArn"
        }
    }

    public struct Filter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: true, type: .list), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The values of a filter.
        public let values: [String]
        /// The key of a filter.
        public let key: String

        public init(values: [String], key: String) {
            self.values = values
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
            case key = "Key"
        }
    }

    public struct CreateAddressBookResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddressBookArn", required: false, type: .string)
        ]
        /// The ARN of the newly created address book.
        public let addressBookArn: String?

        public init(addressBookArn: String? = nil) {
            self.addressBookArn = addressBookArn
        }

        private enum CodingKeys: String, CodingKey {
            case addressBookArn = "AddressBookArn"
        }
    }

    public struct ListSkillsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SkillSummaries", required: false, type: .list)
        ]
        /// The token returned to indicate that there is more data available.
        public let nextToken: String?
        /// The list of enabled skills requested. Required.
        public let skillSummaries: [SkillSummary]?

        public init(nextToken: String? = nil, skillSummaries: [SkillSummary]? = nil) {
            self.nextToken = nextToken
            self.skillSummaries = skillSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case skillSummaries = "SkillSummaries"
        }
    }

    public struct GetRoomSkillParameterResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoomSkillParameter", required: false, type: .structure)
        ]
        /// The details of the room skill parameter requested. Required.
        public let roomSkillParameter: RoomSkillParameter?

        public init(roomSkillParameter: RoomSkillParameter? = nil) {
            self.roomSkillParameter = roomSkillParameter
        }

        private enum CodingKeys: String, CodingKey {
            case roomSkillParameter = "RoomSkillParameter"
        }
    }

    public struct SearchRoomsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Rooms", required: false, type: .list), 
            AWSShapeMember(label: "TotalCount", required: false, type: .integer)
        ]
        /// The token returned to indicate that there is more data available.
        public let nextToken: String?
        /// The rooms that meet the specified set of filter criteria, in sort order.
        public let rooms: [RoomData]?
        /// The total number of rooms returned.
        public let totalCount: Int32?

        public init(nextToken: String? = nil, rooms: [RoomData]? = nil, totalCount: Int32? = nil) {
            self.nextToken = nextToken
            self.rooms = rooms
            self.totalCount = totalCount
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case rooms = "Rooms"
            case totalCount = "TotalCount"
        }
    }

    public struct AddressBookData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "AddressBookArn", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The description of the address book.
        public let description: String?
        /// The ARN of the address book.
        public let addressBookArn: String?
        /// The name of the address book.
        public let name: String?

        public init(description: String? = nil, addressBookArn: String? = nil, name: String? = nil) {
            self.description = description
            self.addressBookArn = addressBookArn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case addressBookArn = "AddressBookArn"
            case name = "Name"
        }
    }

    public struct DeleteProfileResponse: AWSShape {

    }

    public struct CreateContactRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisplayName", required: false, type: .string), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "LastName", required: false, type: .string), 
            AWSShapeMember(label: "FirstName", required: true, type: .string), 
            AWSShapeMember(label: "PhoneNumber", required: true, type: .string)
        ]
        /// The name of the contact to display on the console.
        public let displayName: String?
        /// A unique, user-specified identifier for this request that ensures idempotency.
        public let clientRequestToken: String?
        /// The last name of the contact that is used to call the contact on the device.
        public let lastName: String?
        /// The first name of the contact that is used to call the contact on the device.
        public let firstName: String
        /// The phone number of the contact in E.164 format.
        public let phoneNumber: String

        public init(displayName: String? = nil, clientRequestToken: String? = nil, lastName: String? = nil, firstName: String, phoneNumber: String) {
            self.displayName = displayName
            self.clientRequestToken = clientRequestToken
            self.lastName = lastName
            self.firstName = firstName
            self.phoneNumber = phoneNumber
        }

        private enum CodingKeys: String, CodingKey {
            case displayName = "DisplayName"
            case clientRequestToken = "ClientRequestToken"
            case lastName = "LastName"
            case firstName = "FirstName"
            case phoneNumber = "PhoneNumber"
        }
    }

    public struct GetContactRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContactArn", required: true, type: .string)
        ]
        /// The ARN of the contact for which to request details.
        public let contactArn: String

        public init(contactArn: String) {
            self.contactArn = contactArn
        }

        private enum CodingKeys: String, CodingKey {
            case contactArn = "ContactArn"
        }
    }

    public struct GetDeviceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceArn", required: false, type: .string)
        ]
        /// The ARN of the device for which to request details. Required.
        public let deviceArn: String?

        public init(deviceArn: String? = nil) {
            self.deviceArn = deviceArn
        }

        private enum CodingKeys: String, CodingKey {
            case deviceArn = "DeviceArn"
        }
    }

    public struct DisassociateContactFromAddressBookResponse: AWSShape {

    }

    public struct DeviceData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceSerialNumber", required: false, type: .string), 
            AWSShapeMember(label: "MacAddress", required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", required: false, type: .string), 
            AWSShapeMember(label: "SoftwareVersion", required: false, type: .string), 
            AWSShapeMember(label: "DeviceType", required: false, type: .string), 
            AWSShapeMember(label: "RoomArn", required: false, type: .string), 
            AWSShapeMember(label: "DeviceArn", required: false, type: .string), 
            AWSShapeMember(label: "DeviceStatus", required: false, type: .enum), 
            AWSShapeMember(label: "RoomName", required: false, type: .string), 
            AWSShapeMember(label: "DeviceStatusInfo", required: false, type: .structure)
        ]
        /// The serial number of a device.
        public let deviceSerialNumber: String?
        /// The MAC address of a device.
        public let macAddress: String?
        /// The name of a device.
        public let deviceName: String?
        /// The software version of a device.
        public let softwareVersion: String?
        /// The type of a device.
        public let deviceType: String?
        /// The room ARN associated with a device.
        public let roomArn: String?
        /// The ARN of a device.
        public let deviceArn: String?
        /// The status of a device.
        public let deviceStatus: DeviceStatus?
        /// The name of the room associated with a device.
        public let roomName: String?
        /// Detailed information about a device's status.
        public let deviceStatusInfo: DeviceStatusInfo?

        public init(deviceSerialNumber: String? = nil, macAddress: String? = nil, deviceName: String? = nil, softwareVersion: String? = nil, deviceType: String? = nil, roomArn: String? = nil, deviceArn: String? = nil, deviceStatus: DeviceStatus? = nil, roomName: String? = nil, deviceStatusInfo: DeviceStatusInfo? = nil) {
            self.deviceSerialNumber = deviceSerialNumber
            self.macAddress = macAddress
            self.deviceName = deviceName
            self.softwareVersion = softwareVersion
            self.deviceType = deviceType
            self.roomArn = roomArn
            self.deviceArn = deviceArn
            self.deviceStatus = deviceStatus
            self.roomName = roomName
            self.deviceStatusInfo = deviceStatusInfo
        }

        private enum CodingKeys: String, CodingKey {
            case deviceSerialNumber = "DeviceSerialNumber"
            case macAddress = "MacAddress"
            case deviceName = "DeviceName"
            case softwareVersion = "SoftwareVersion"
            case deviceType = "DeviceType"
            case roomArn = "RoomArn"
            case deviceArn = "DeviceArn"
            case deviceStatus = "DeviceStatus"
            case roomName = "RoomName"
            case deviceStatusInfo = "DeviceStatusInfo"
        }
    }

    public struct ListDeviceEventsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceEvents", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The device events requested for the device ARN.
        public let deviceEvents: [DeviceEvent]?
        /// The token returned to indicate that there is more data available.
        public let nextToken: String?

        public init(deviceEvents: [DeviceEvent]? = nil, nextToken: String? = nil) {
            self.deviceEvents = deviceEvents
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case deviceEvents = "DeviceEvents"
            case nextToken = "NextToken"
        }
    }

    public struct SendInvitationResponse: AWSShape {

    }

    public struct StartDeviceSyncResponse: AWSShape {

    }

    public struct SkillGroupData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "SkillGroupName", required: false, type: .string), 
            AWSShapeMember(label: "SkillGroupArn", required: false, type: .string)
        ]
        /// The description of a skill group.
        public let description: String?
        /// The skill group name of a skill group.
        public let skillGroupName: String?
        /// The skill group ARN of a skill group.
        public let skillGroupArn: String?

        public init(description: String? = nil, skillGroupName: String? = nil, skillGroupArn: String? = nil) {
            self.description = description
            self.skillGroupName = skillGroupName
            self.skillGroupArn = skillGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case skillGroupName = "SkillGroupName"
            case skillGroupArn = "SkillGroupArn"
        }
    }

    public struct GetRoomRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoomArn", required: false, type: .string)
        ]
        /// The ARN of the room for which to request details. Required.
        public let roomArn: String?

        public init(roomArn: String? = nil) {
            self.roomArn = roomArn
        }

        private enum CodingKeys: String, CodingKey {
            case roomArn = "RoomArn"
        }
    }

    public struct RevokeInvitationResponse: AWSShape {

    }

    public struct GetSkillGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SkillGroup", required: false, type: .structure)
        ]
        /// The details of the skill group requested. Required.
        public let skillGroup: SkillGroup?

        public init(skillGroup: SkillGroup? = nil) {
            self.skillGroup = skillGroup
        }

        private enum CodingKeys: String, CodingKey {
            case skillGroup = "SkillGroup"
        }
    }

    public struct ProfileData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Address", required: false, type: .string), 
            AWSShapeMember(label: "TemperatureUnit", required: false, type: .enum), 
            AWSShapeMember(label: "ProfileArn", required: false, type: .string), 
            AWSShapeMember(label: "DistanceUnit", required: false, type: .enum), 
            AWSShapeMember(label: "WakeWord", required: false, type: .enum), 
            AWSShapeMember(label: "Timezone", required: false, type: .string), 
            AWSShapeMember(label: "ProfileName", required: false, type: .string)
        ]
        /// The address of a room profile.
        public let address: String?
        /// The temperature unit of a room profile.
        public let temperatureUnit: TemperatureUnit?
        /// The ARN of a room profile.
        public let profileArn: String?
        /// The distance unit of a room profile.
        public let distanceUnit: DistanceUnit?
        /// The wake word of a room profile.
        public let wakeWord: WakeWord?
        /// The timezone of a room profile.
        public let timezone: String?
        /// The name of a room profile.
        public let profileName: String?

        public init(address: String? = nil, temperatureUnit: TemperatureUnit? = nil, profileArn: String? = nil, distanceUnit: DistanceUnit? = nil, wakeWord: WakeWord? = nil, timezone: String? = nil, profileName: String? = nil) {
            self.address = address
            self.temperatureUnit = temperatureUnit
            self.profileArn = profileArn
            self.distanceUnit = distanceUnit
            self.wakeWord = wakeWord
            self.timezone = timezone
            self.profileName = profileName
        }

        private enum CodingKeys: String, CodingKey {
            case address = "Address"
            case temperatureUnit = "TemperatureUnit"
            case profileArn = "ProfileArn"
            case distanceUnit = "DistanceUnit"
            case wakeWord = "WakeWord"
            case timezone = "Timezone"
            case profileName = "ProfileName"
        }
    }

    public struct RoomData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProfileName", required: false, type: .string), 
            AWSShapeMember(label: "ProfileArn", required: false, type: .string), 
            AWSShapeMember(label: "ProviderCalendarId", required: false, type: .string), 
            AWSShapeMember(label: "RoomName", required: false, type: .string), 
            AWSShapeMember(label: "RoomArn", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The profile name of a room.
        public let profileName: String?
        /// The profile ARN of a room.
        public let profileArn: String?
        /// The provider calendar ARN of a room.
        public let providerCalendarId: String?
        /// The name of a room.
        public let roomName: String?
        /// The ARN of a room.
        public let roomArn: String?
        /// The description of a room.
        public let description: String?

        public init(profileName: String? = nil, profileArn: String? = nil, providerCalendarId: String? = nil, roomName: String? = nil, roomArn: String? = nil, description: String? = nil) {
            self.profileName = profileName
            self.profileArn = profileArn
            self.providerCalendarId = providerCalendarId
            self.roomName = roomName
            self.roomArn = roomArn
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case profileName = "ProfileName"
            case profileArn = "ProfileArn"
            case providerCalendarId = "ProviderCalendarId"
            case roomName = "RoomName"
            case roomArn = "RoomArn"
            case description = "Description"
        }
    }

    public struct UpdateDeviceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceName", required: false, type: .string), 
            AWSShapeMember(label: "DeviceArn", required: false, type: .string)
        ]
        /// The updated device name. Required.
        public let deviceName: String?
        /// The ARN of the device to update. Required.
        public let deviceArn: String?

        public init(deviceName: String? = nil, deviceArn: String? = nil) {
            self.deviceName = deviceName
            self.deviceArn = deviceArn
        }

        private enum CodingKeys: String, CodingKey {
            case deviceName = "DeviceName"
            case deviceArn = "DeviceArn"
        }
    }

    public struct DeviceStatusDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .enum)
        ]
        /// The device status detail code.
        public let code: DeviceStatusDetailCode?

        public init(code: DeviceStatusDetailCode? = nil) {
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
        }
    }

    public struct SearchUsersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Users", required: false, type: .list), 
            AWSShapeMember(label: "TotalCount", required: false, type: .integer)
        ]
        /// The token returned to indicate that there is more data available.
        public let nextToken: String?
        /// The users that meet the specified set of filter criteria, in sort order.
        public let users: [UserData]?
        /// The total number of users returned.
        public let totalCount: Int32?

        public init(nextToken: String? = nil, users: [UserData]? = nil, totalCount: Int32? = nil) {
            self.nextToken = nextToken
            self.users = users
            self.totalCount = totalCount
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case users = "Users"
            case totalCount = "TotalCount"
        }
    }

    public struct CreateAddressBookRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string)
        ]
        /// The description of the address book.
        public let description: String?
        /// The name of the address book.
        public let name: String
        /// A unique, user-specified identifier for the request that ensures idempotency.
        public let clientRequestToken: String?

        public init(description: String? = nil, name: String, clientRequestToken: String? = nil) {
            self.description = description
            self.name = name
            self.clientRequestToken = clientRequestToken
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case name = "Name"
            case clientRequestToken = "ClientRequestToken"
        }
    }

    public struct DeleteSkillGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SkillGroupArn", required: false, type: .string)
        ]
        /// The ARN of the skill group to delete. Required.
        public let skillGroupArn: String?

        public init(skillGroupArn: String? = nil) {
            self.skillGroupArn = skillGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case skillGroupArn = "SkillGroupArn"
        }
    }

    public struct SearchSkillGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "SortCriteria", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults. Required.
        public let nextToken: String?
        /// The filters to use to list a specified set of skill groups. The supported filter key is SkillGroupName. 
        public let filters: [Filter]?
        /// The sort order to use in listing the specified set of skill groups. The supported sort key is SkillGroupName. 
        public let sortCriteria: [Sort]?
        /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved. 
        public let maxResults: Int32?

        public init(nextToken: String? = nil, filters: [Filter]? = nil, sortCriteria: [Sort]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.sortCriteria = sortCriteria
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case sortCriteria = "SortCriteria"
            case maxResults = "MaxResults"
        }
    }

    public struct DeleteAddressBookResponse: AWSShape {

    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The key of a tag. Tag keys are case-sensitive. 
        public let key: String?
        /// The value of a tag. Tag values are case-sensitive and can be null.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct Room: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProfileArn", required: false, type: .string), 
            AWSShapeMember(label: "ProviderCalendarId", required: false, type: .string), 
            AWSShapeMember(label: "RoomName", required: false, type: .string), 
            AWSShapeMember(label: "RoomArn", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The profile ARN of a room.
        public let profileArn: String?
        /// The provider calendar ARN of a room.
        public let providerCalendarId: String?
        /// The name of a room.
        public let roomName: String?
        /// The ARN of a room.
        public let roomArn: String?
        /// The description of a room.
        public let description: String?

        public init(profileArn: String? = nil, providerCalendarId: String? = nil, roomName: String? = nil, roomArn: String? = nil, description: String? = nil) {
            self.profileArn = profileArn
            self.providerCalendarId = providerCalendarId
            self.roomName = roomName
            self.roomArn = roomArn
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case profileArn = "ProfileArn"
            case providerCalendarId = "ProviderCalendarId"
            case roomName = "RoomName"
            case roomArn = "RoomArn"
            case description = "Description"
        }
    }

    public struct DeviceEvent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Timestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The type of device event.
        public let `type`: DeviceEventType?
        /// The time (in epoch) when the event occurred. 
        public let timestamp: TimeStamp?
        /// The value of the event.
        public let value: String?

        public init(type: DeviceEventType? = nil, timestamp: TimeStamp? = nil, value: String? = nil) {
            self.`type` = `type`
            self.timestamp = timestamp
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case timestamp = "Timestamp"
            case value = "Value"
        }
    }

    public struct UpdateContactRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisplayName", required: false, type: .string), 
            AWSShapeMember(label: "LastName", required: false, type: .string), 
            AWSShapeMember(label: "ContactArn", required: true, type: .string), 
            AWSShapeMember(label: "FirstName", required: false, type: .string), 
            AWSShapeMember(label: "PhoneNumber", required: false, type: .string)
        ]
        /// The updated display name of the contact.
        public let displayName: String?
        /// The updated last name of the contact.
        public let lastName: String?
        /// The ARN of the contact to update.
        public let contactArn: String
        /// The updated first name of the contact.
        public let firstName: String?
        /// The updated phone number of the contact.
        public let phoneNumber: String?

        public init(displayName: String? = nil, lastName: String? = nil, contactArn: String, firstName: String? = nil, phoneNumber: String? = nil) {
            self.displayName = displayName
            self.lastName = lastName
            self.contactArn = contactArn
            self.firstName = firstName
            self.phoneNumber = phoneNumber
        }

        private enum CodingKeys: String, CodingKey {
            case displayName = "DisplayName"
            case lastName = "LastName"
            case contactArn = "ContactArn"
            case firstName = "FirstName"
            case phoneNumber = "PhoneNumber"
        }
    }

    public struct AssociateDeviceWithRoomResponse: AWSShape {

    }

    public struct DeleteUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EnrollmentId", required: true, type: .string), 
            AWSShapeMember(label: "UserArn", required: false, type: .string)
        ]
        /// The ARN of the user's enrollment in the organization. Required.
        public let enrollmentId: String
        /// The ARN of the user to delete in the organization. Required.
        public let userArn: String?

        public init(enrollmentId: String, userArn: String? = nil) {
            self.enrollmentId = enrollmentId
            self.userArn = userArn
        }

        private enum CodingKeys: String, CodingKey {
            case enrollmentId = "EnrollmentId"
            case userArn = "UserArn"
        }
    }

    public struct DeleteRoomSkillParameterRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoomArn", required: false, type: .string), 
            AWSShapeMember(label: "ParameterKey", required: true, type: .string), 
            AWSShapeMember(label: "SkillId", required: true, type: .string)
        ]
        /// The ARN of the room from which to remove the room skill parameter details.
        public let roomArn: String?
        /// The room skill parameter key for which to remove details.
        public let parameterKey: String
        /// The ID of the skill from which to remove the room skill parameter details.
        public let skillId: String

        public init(roomArn: String? = nil, parameterKey: String, skillId: String) {
            self.roomArn = roomArn
            self.parameterKey = parameterKey
            self.skillId = skillId
        }

        private enum CodingKeys: String, CodingKey {
            case roomArn = "RoomArn"
            case parameterKey = "ParameterKey"
            case skillId = "SkillId"
        }
    }

    public struct SendInvitationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserArn", required: false, type: .string)
        ]
        /// The ARN of the user to whom to send an invitation. Required.
        public let userArn: String?

        public init(userArn: String? = nil) {
            self.userArn = userArn
        }

        private enum CodingKeys: String, CodingKey {
            case userArn = "UserArn"
        }
    }

    public struct GetSkillGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SkillGroupArn", required: false, type: .string)
        ]
        /// The ARN of the skill group for which to get details. Required.
        public let skillGroupArn: String?

        public init(skillGroupArn: String? = nil) {
            self.skillGroupArn = skillGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case skillGroupArn = "SkillGroupArn"
        }
    }

    public struct SearchDevicesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "SortCriteria", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
        public let nextToken: String?
        /// The filters to use to list a specified set of devices. Supported filter keys are DeviceName, DeviceStatus, DeviceStatusDetailCode, RoomName, DeviceType, DeviceSerialNumber, UnassociatedOnly, and ConnectionStatus (ONLINE and OFFLINE).
        public let filters: [Filter]?
        /// The sort order to use in listing the specified set of devices. Supported sort keys are DeviceName, DeviceStatus, RoomName, DeviceType, DeviceSerialNumber, and ConnectionStatus.
        public let sortCriteria: [Sort]?
        /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, filters: [Filter]? = nil, sortCriteria: [Sort]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.sortCriteria = sortCriteria
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case sortCriteria = "SortCriteria"
            case maxResults = "MaxResults"
        }
    }

    public struct Contact: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisplayName", required: false, type: .string), 
            AWSShapeMember(label: "LastName", required: false, type: .string), 
            AWSShapeMember(label: "ContactArn", required: false, type: .string), 
            AWSShapeMember(label: "FirstName", required: false, type: .string), 
            AWSShapeMember(label: "PhoneNumber", required: false, type: .string)
        ]
        /// The name of the contact to display on the console.
        public let displayName: String?
        /// The last name of the contact, used to call the contact on the device.
        public let lastName: String?
        /// The ARN of the contact.
        public let contactArn: String?
        /// The first name of the contact, used to call the contact on the device.
        public let firstName: String?
        /// The phone number of the contact.
        public let phoneNumber: String?

        public init(displayName: String? = nil, lastName: String? = nil, contactArn: String? = nil, firstName: String? = nil, phoneNumber: String? = nil) {
            self.displayName = displayName
            self.lastName = lastName
            self.contactArn = contactArn
            self.firstName = firstName
            self.phoneNumber = phoneNumber
        }

        private enum CodingKeys: String, CodingKey {
            case displayName = "DisplayName"
            case lastName = "LastName"
            case contactArn = "ContactArn"
            case firstName = "FirstName"
            case phoneNumber = "PhoneNumber"
        }
    }

    public struct DeleteRoomRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoomArn", required: false, type: .string)
        ]
        /// The ARN of the room to delete. Required.
        public let roomArn: String?

        public init(roomArn: String? = nil) {
            self.roomArn = roomArn
        }

        private enum CodingKeys: String, CodingKey {
            case roomArn = "RoomArn"
        }
    }

    public struct Sort: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .enum)
        ]
        /// The sort key of a sort object.
        public let key: String
        /// The sort value of a sort object.
        public let value: SortValue

        public init(key: String, value: SortValue) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// The ARN of the resource to which to add metadata tags. Required. 
        public let arn: String
        /// The tags to be added to the specified resource. Do not provide system tags. Required. 
        public let tags: [Tag]

        public init(arn: String, tags: [Tag]) {
            self.arn = arn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case tags = "Tags"
        }
    }

    public enum EnrollmentStatus: String, CustomStringConvertible, Codable {
        case initialized = "INITIALIZED"
        case pending = "PENDING"
        case registered = "REGISTERED"
        case disassociating = "DISASSOCIATING"
        case deregistering = "DEREGISTERING"
        public var description: String { return self.rawValue }
    }

    public struct DeleteContactRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ContactArn", required: true, type: .string)
        ]
        /// The ARN of the contact to delete.
        public let contactArn: String

        public init(contactArn: String) {
            self.contactArn = contactArn
        }

        private enum CodingKeys: String, CodingKey {
            case contactArn = "ContactArn"
        }
    }

    public struct ContactData: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisplayName", required: false, type: .string), 
            AWSShapeMember(label: "LastName", required: false, type: .string), 
            AWSShapeMember(label: "ContactArn", required: false, type: .string), 
            AWSShapeMember(label: "FirstName", required: false, type: .string), 
            AWSShapeMember(label: "PhoneNumber", required: false, type: .string)
        ]
        /// The name of the contact to display on the console.
        public let displayName: String?
        /// The last name of the contact, used to call the contact on the device.
        public let lastName: String?
        /// The ARN of the contact.
        public let contactArn: String?
        /// The first name of the contact, used to call the contact on the device.
        public let firstName: String?
        /// The phone number of the contact.
        public let phoneNumber: String?

        public init(displayName: String? = nil, lastName: String? = nil, contactArn: String? = nil, firstName: String? = nil, phoneNumber: String? = nil) {
            self.displayName = displayName
            self.lastName = lastName
            self.contactArn = contactArn
            self.firstName = firstName
            self.phoneNumber = phoneNumber
        }

        private enum CodingKeys: String, CodingKey {
            case displayName = "DisplayName"
            case lastName = "LastName"
            case contactArn = "ContactArn"
            case firstName = "FirstName"
            case phoneNumber = "PhoneNumber"
        }
    }

    public struct CreateUserRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "LastName", required: false, type: .string), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "Email", required: false, type: .string), 
            AWSShapeMember(label: "UserId", required: true, type: .string), 
            AWSShapeMember(label: "FirstName", required: false, type: .string)
        ]
        /// The tags for the user.
        public let tags: [Tag]?
        /// The last name for the user.
        public let lastName: String?
        /// A unique, user-specified identifier for this request that ensures idempotency. 
        public let clientRequestToken: String?
        /// The email address for the user.
        public let email: String?
        /// The ARN for the user.
        public let userId: String
        /// The first name for the user.
        public let firstName: String?

        public init(tags: [Tag]? = nil, lastName: String? = nil, clientRequestToken: String? = nil, email: String? = nil, userId: String, firstName: String? = nil) {
            self.tags = tags
            self.lastName = lastName
            self.clientRequestToken = clientRequestToken
            self.email = email
            self.userId = userId
            self.firstName = firstName
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case lastName = "LastName"
            case clientRequestToken = "ClientRequestToken"
            case email = "Email"
            case userId = "UserId"
            case firstName = "FirstName"
        }
    }

    public struct Device: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceSerialNumber", required: false, type: .string), 
            AWSShapeMember(label: "MacAddress", required: false, type: .string), 
            AWSShapeMember(label: "DeviceName", required: false, type: .string), 
            AWSShapeMember(label: "SoftwareVersion", required: false, type: .string), 
            AWSShapeMember(label: "DeviceType", required: false, type: .string), 
            AWSShapeMember(label: "RoomArn", required: false, type: .string), 
            AWSShapeMember(label: "DeviceArn", required: false, type: .string), 
            AWSShapeMember(label: "DeviceStatus", required: false, type: .enum), 
            AWSShapeMember(label: "DeviceStatusInfo", required: false, type: .structure)
        ]
        /// The serial number of a device.
        public let deviceSerialNumber: String?
        /// The MAC address of a device.
        public let macAddress: String?
        /// The name of a device.
        public let deviceName: String?
        /// The software version of a device.
        public let softwareVersion: String?
        /// The type of a device.
        public let deviceType: String?
        /// The room ARN of a device.
        public let roomArn: String?
        /// The ARN of a device.
        public let deviceArn: String?
        /// The status of a device. If the status is not READY, check the DeviceStatusInfo value for details.
        public let deviceStatus: DeviceStatus?
        /// Detailed information about a device's status.
        public let deviceStatusInfo: DeviceStatusInfo?

        public init(deviceSerialNumber: String? = nil, macAddress: String? = nil, deviceName: String? = nil, softwareVersion: String? = nil, deviceType: String? = nil, roomArn: String? = nil, deviceArn: String? = nil, deviceStatus: DeviceStatus? = nil, deviceStatusInfo: DeviceStatusInfo? = nil) {
            self.deviceSerialNumber = deviceSerialNumber
            self.macAddress = macAddress
            self.deviceName = deviceName
            self.softwareVersion = softwareVersion
            self.deviceType = deviceType
            self.roomArn = roomArn
            self.deviceArn = deviceArn
            self.deviceStatus = deviceStatus
            self.deviceStatusInfo = deviceStatusInfo
        }

        private enum CodingKeys: String, CodingKey {
            case deviceSerialNumber = "DeviceSerialNumber"
            case macAddress = "MacAddress"
            case deviceName = "DeviceName"
            case softwareVersion = "SoftwareVersion"
            case deviceType = "DeviceType"
            case roomArn = "RoomArn"
            case deviceArn = "DeviceArn"
            case deviceStatus = "DeviceStatus"
            case deviceStatusInfo = "DeviceStatusInfo"
        }
    }

    public struct AssociateContactWithAddressBookResponse: AWSShape {

    }

    public struct AssociateSkillGroupWithRoomRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RoomArn", required: false, type: .string), 
            AWSShapeMember(label: "SkillGroupArn", required: false, type: .string)
        ]
        /// The ARN of the room with which to associate the skill group. Required.
        public let roomArn: String?
        /// The ARN of the skill group to associate with a room. Required.
        public let skillGroupArn: String?

        public init(roomArn: String? = nil, skillGroupArn: String? = nil) {
            self.roomArn = roomArn
            self.skillGroupArn = skillGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case roomArn = "RoomArn"
            case skillGroupArn = "SkillGroupArn"
        }
    }

    public struct UpdateRoomResponse: AWSShape {

    }

    public struct UntagResourceResponse: AWSShape {

    }

    public enum WakeWord: String, CustomStringConvertible, Codable {
        case alexa = "ALEXA"
        case amazon = "AMAZON"
        case echo = "ECHO"
        case computer = "COMPUTER"
        public var description: String { return self.rawValue }
    }

    public struct SearchProfilesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .list), 
            AWSShapeMember(label: "SortCriteria", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
        public let nextToken: String?
        /// The filters to use to list a specified set of room profiles. Supported filter keys are ProfileName and Address. Required. 
        public let filters: [Filter]?
        /// The sort order to use in listing the specified set of room profiles. Supported sort keys are ProfileName and Address.
        public let sortCriteria: [Sort]?
        /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, filters: [Filter]? = nil, sortCriteria: [Sort]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.filters = filters
            self.sortCriteria = sortCriteria
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case filters = "Filters"
            case sortCriteria = "SortCriteria"
            case maxResults = "MaxResults"
        }
    }

    public struct AssociateContactWithAddressBookRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AddressBookArn", required: true, type: .string), 
            AWSShapeMember(label: "ContactArn", required: true, type: .string)
        ]
        /// The ARN of the address book with which to associate the contact.
        public let addressBookArn: String
        /// The ARN of the contact to associate with an address book.
        public let contactArn: String

        public init(addressBookArn: String, contactArn: String) {
            self.addressBookArn = addressBookArn
            self.contactArn = contactArn
        }

        private enum CodingKeys: String, CodingKey {
            case addressBookArn = "AddressBookArn"
            case contactArn = "ContactArn"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// The ARN of the resource from which to remove metadata tags. Required. 
        public let arn: String
        /// The tags to be removed from the specified resource. Do not provide system tags. Required. 
        public let tagKeys: [String]

        public init(arn: String, tagKeys: [String]) {
            self.arn = arn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case tagKeys = "TagKeys"
        }
    }

    public struct DeleteRoomResponse: AWSShape {

    }

}