// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import NIO

extension AlexaForBusiness {

    ///  Lists the details of the schedules that a user configured. A download URL of the report associated with each schedule is returned every time this action is called. A new download URL is returned each time, and is valid for 24 hours.
    public func listBusinessReportSchedulesPaginator(_ input: ListBusinessReportSchedulesRequest) -> EventLoopFuture<[BusinessReportSchedule]> {
        return client.paginate(input: input, command: listBusinessReportSchedules, resultKey: \.businessReportSchedules, tokenKey: \.nextToken)
    }
    
    ///  Lists conference providers under a specific AWS account.
    public func listConferenceProvidersPaginator(_ input: ListConferenceProvidersRequest) -> EventLoopFuture<[ConferenceProvider]> {
        return client.paginate(input: input, command: listConferenceProviders, resultKey: \.conferenceProviders, tokenKey: \.nextToken)
    }
    
    ///  Lists the device event history, including device connection status, for up to 30 days.
    public func listDeviceEventsPaginator(_ input: ListDeviceEventsRequest) -> EventLoopFuture<[DeviceEvent]> {
        return client.paginate(input: input, command: listDeviceEvents, resultKey: \.deviceEvents, tokenKey: \.nextToken)
    }
    
    ///  Retrieves a list of gateway group summaries. Use GetGatewayGroup to retrieve details of a specific gateway group.
    public func listGatewayGroupsPaginator(_ input: ListGatewayGroupsRequest) -> EventLoopFuture<[GatewayGroupSummary]> {
        return client.paginate(input: input, command: listGatewayGroups, resultKey: \.gatewayGroups, tokenKey: \.nextToken)
    }
    
    ///  Retrieves a list of gateway summaries. Use GetGateway to retrieve details of a specific gateway. An optional gateway group ARN can be provided to only retrieve gateway summaries of gateways that are associated with that gateway group ARN.
    public func listGatewaysPaginator(_ input: ListGatewaysRequest) -> EventLoopFuture<[GatewaySummary]> {
        return client.paginate(input: input, command: listGateways, resultKey: \.gateways, tokenKey: \.nextToken)
    }
    
    ///  Lists all enabled skills in a specific skill group.
    public func listSkillsPaginator(_ input: ListSkillsRequest) -> EventLoopFuture<[SkillSummary]> {
        return client.paginate(input: input, command: listSkills, resultKey: \.skillSummaries, tokenKey: \.nextToken)
    }
    
    ///  Lists all categories in the Alexa skill store.
    public func listSkillsStoreCategoriesPaginator(_ input: ListSkillsStoreCategoriesRequest) -> EventLoopFuture<[Category]> {
        return client.paginate(input: input, command: listSkillsStoreCategories, resultKey: \.categoryList, tokenKey: \.nextToken)
    }
    
    ///  Lists all skills in the Alexa skill store by category.
    public func listSkillsStoreSkillsByCategoryPaginator(_ input: ListSkillsStoreSkillsByCategoryRequest) -> EventLoopFuture<[SkillsStoreSkill]> {
        return client.paginate(input: input, command: listSkillsStoreSkillsByCategory, resultKey: \.skillsStoreSkills, tokenKey: \.nextToken)
    }
    
    ///  Lists all of the smart home appliances associated with a room.
    public func listSmartHomeAppliancesPaginator(_ input: ListSmartHomeAppliancesRequest) -> EventLoopFuture<[SmartHomeAppliance]> {
        return client.paginate(input: input, command: listSmartHomeAppliances, resultKey: \.smartHomeAppliances, tokenKey: \.nextToken)
    }
    
    ///  Lists all tags for the specified resource.
    public func listTagsPaginator(_ input: ListTagsRequest) -> EventLoopFuture<[Tag]> {
        return client.paginate(input: input, command: listTags, resultKey: \.tags, tokenKey: \.nextToken)
    }
    
    ///  Searches address books and lists the ones that meet a set of filter and sort criteria.
    public func searchAddressBooksPaginator(_ input: SearchAddressBooksRequest) -> EventLoopFuture<[AddressBookData]> {
        return client.paginate(input: input, command: searchAddressBooks, resultKey: \.addressBooks, tokenKey: \.nextToken)
    }
    
    ///  Searches contacts and lists the ones that meet a set of filter and sort criteria.
    public func searchContactsPaginator(_ input: SearchContactsRequest) -> EventLoopFuture<[ContactData]> {
        return client.paginate(input: input, command: searchContacts, resultKey: \.contacts, tokenKey: \.nextToken)
    }
    
    ///  Searches devices and lists the ones that meet a set of filter criteria.
    public func searchDevicesPaginator(_ input: SearchDevicesRequest) -> EventLoopFuture<[DeviceData]> {
        return client.paginate(input: input, command: searchDevices, resultKey: \.devices, tokenKey: \.nextToken)
    }
    
    ///  Searches network profiles and lists the ones that meet a set of filter and sort criteria.
    public func searchNetworkProfilesPaginator(_ input: SearchNetworkProfilesRequest) -> EventLoopFuture<[NetworkProfileData]> {
        return client.paginate(input: input, command: searchNetworkProfiles, resultKey: \.networkProfiles, tokenKey: \.nextToken)
    }
    
    ///  Searches room profiles and lists the ones that meet a set of filter criteria.
    public func searchProfilesPaginator(_ input: SearchProfilesRequest) -> EventLoopFuture<[ProfileData]> {
        return client.paginate(input: input, command: searchProfiles, resultKey: \.profiles, tokenKey: \.nextToken)
    }
    
    ///  Searches rooms and lists the ones that meet a set of filter and sort criteria.
    public func searchRoomsPaginator(_ input: SearchRoomsRequest) -> EventLoopFuture<[RoomData]> {
        return client.paginate(input: input, command: searchRooms, resultKey: \.rooms, tokenKey: \.nextToken)
    }
    
    ///  Searches skill groups and lists the ones that meet a set of filter and sort criteria.
    public func searchSkillGroupsPaginator(_ input: SearchSkillGroupsRequest) -> EventLoopFuture<[SkillGroupData]> {
        return client.paginate(input: input, command: searchSkillGroups, resultKey: \.skillGroups, tokenKey: \.nextToken)
    }
    
    ///  Searches users and lists the ones that meet a set of filter and sort criteria.
    public func searchUsersPaginator(_ input: SearchUsersRequest) -> EventLoopFuture<[UserData]> {
        return client.paginate(input: input, command: searchUsers, resultKey: \.users, tokenKey: \.nextToken)
    }
    
}

extension AlexaForBusiness.ListBusinessReportSchedulesRequest: AWSPaginateStringToken {
    public init(_ original: AlexaForBusiness.ListBusinessReportSchedulesRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension AlexaForBusiness.ListConferenceProvidersRequest: AWSPaginateStringToken {
    public init(_ original: AlexaForBusiness.ListConferenceProvidersRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension AlexaForBusiness.ListDeviceEventsRequest: AWSPaginateStringToken {
    public init(_ original: AlexaForBusiness.ListDeviceEventsRequest, token: String) {
        self.init(
            deviceArn: original.deviceArn, 
            eventType: original.eventType, 
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension AlexaForBusiness.ListGatewayGroupsRequest: AWSPaginateStringToken {
    public init(_ original: AlexaForBusiness.ListGatewayGroupsRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension AlexaForBusiness.ListGatewaysRequest: AWSPaginateStringToken {
    public init(_ original: AlexaForBusiness.ListGatewaysRequest, token: String) {
        self.init(
            gatewayGroupArn: original.gatewayGroupArn, 
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension AlexaForBusiness.ListSkillsRequest: AWSPaginateStringToken {
    public init(_ original: AlexaForBusiness.ListSkillsRequest, token: String) {
        self.init(
            enablementType: original.enablementType, 
            maxResults: original.maxResults, 
            nextToken: token, 
            skillGroupArn: original.skillGroupArn, 
            skillType: original.skillType
        )
    }
}

extension AlexaForBusiness.ListSkillsStoreCategoriesRequest: AWSPaginateStringToken {
    public init(_ original: AlexaForBusiness.ListSkillsStoreCategoriesRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension AlexaForBusiness.ListSkillsStoreSkillsByCategoryRequest: AWSPaginateStringToken {
    public init(_ original: AlexaForBusiness.ListSkillsStoreSkillsByCategoryRequest, token: String) {
        self.init(
            categoryId: original.categoryId, 
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension AlexaForBusiness.ListSmartHomeAppliancesRequest: AWSPaginateStringToken {
    public init(_ original: AlexaForBusiness.ListSmartHomeAppliancesRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nextToken: token, 
            roomArn: original.roomArn
        )
    }
}

extension AlexaForBusiness.ListTagsRequest: AWSPaginateStringToken {
    public init(_ original: AlexaForBusiness.ListTagsRequest, token: String) {
        self.init(
            arn: original.arn, 
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension AlexaForBusiness.SearchAddressBooksRequest: AWSPaginateStringToken {
    public init(_ original: AlexaForBusiness.SearchAddressBooksRequest, token: String) {
        self.init(
            filters: original.filters, 
            maxResults: original.maxResults, 
            nextToken: token, 
            sortCriteria: original.sortCriteria
        )
    }
}

extension AlexaForBusiness.SearchContactsRequest: AWSPaginateStringToken {
    public init(_ original: AlexaForBusiness.SearchContactsRequest, token: String) {
        self.init(
            filters: original.filters, 
            maxResults: original.maxResults, 
            nextToken: token, 
            sortCriteria: original.sortCriteria
        )
    }
}

extension AlexaForBusiness.SearchDevicesRequest: AWSPaginateStringToken {
    public init(_ original: AlexaForBusiness.SearchDevicesRequest, token: String) {
        self.init(
            filters: original.filters, 
            maxResults: original.maxResults, 
            nextToken: token, 
            sortCriteria: original.sortCriteria
        )
    }
}

extension AlexaForBusiness.SearchNetworkProfilesRequest: AWSPaginateStringToken {
    public init(_ original: AlexaForBusiness.SearchNetworkProfilesRequest, token: String) {
        self.init(
            filters: original.filters, 
            maxResults: original.maxResults, 
            nextToken: token, 
            sortCriteria: original.sortCriteria
        )
    }
}

extension AlexaForBusiness.SearchProfilesRequest: AWSPaginateStringToken {
    public init(_ original: AlexaForBusiness.SearchProfilesRequest, token: String) {
        self.init(
            filters: original.filters, 
            maxResults: original.maxResults, 
            nextToken: token, 
            sortCriteria: original.sortCriteria
        )
    }
}

extension AlexaForBusiness.SearchRoomsRequest: AWSPaginateStringToken {
    public init(_ original: AlexaForBusiness.SearchRoomsRequest, token: String) {
        self.init(
            filters: original.filters, 
            maxResults: original.maxResults, 
            nextToken: token, 
            sortCriteria: original.sortCriteria
        )
    }
}

extension AlexaForBusiness.SearchSkillGroupsRequest: AWSPaginateStringToken {
    public init(_ original: AlexaForBusiness.SearchSkillGroupsRequest, token: String) {
        self.init(
            filters: original.filters, 
            maxResults: original.maxResults, 
            nextToken: token, 
            sortCriteria: original.sortCriteria
        )
    }
}

extension AlexaForBusiness.SearchUsersRequest: AWSPaginateStringToken {
    public init(_ original: AlexaForBusiness.SearchUsersRequest, token: String) {
        self.init(
            filters: original.filters, 
            maxResults: original.maxResults, 
            nextToken: token, 
            sortCriteria: original.sortCriteria
        )
    }
}


