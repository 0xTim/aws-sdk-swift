// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

/**
Amazon CloudFront This is the Amazon CloudFront API Reference. This guide is for developers who need detailed information about the CloudFront API actions, data types, and errors. For detailed information about CloudFront features and their associated API calls, see the Amazon CloudFront Developer Guide.
*/
public struct Cloudfront {

    let request: AWSRequest

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: Core.Region? = nil, endpoint: String? = nil) {
        self.request = AWSRequest(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            service: "cloudfront",
            endpoint: endpoint
        )
    }

    ///  
    public func updateCloudFrontOriginAccessIdentity20161125(_ input: UpdateCloudFrontOriginAccessIdentityRequest) throws -> UpdateCloudFrontOriginAccessIdentityResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdateCloudFrontOriginAccessIdentity2016_11_25", path: "/2016-11-25/origin-access-identity/cloudfront/\(input.id)/config", httpMethod: "PUT", httpHeaders: ["If-Match": input.ifMatch], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func createDistribution20161125(_ input: CreateDistributionRequest) throws -> CreateDistributionResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateDistribution2016_11_25", path: "/2016-11-25/distribution", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func updateDistribution20161125(_ input: UpdateDistributionRequest) throws -> UpdateDistributionResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdateDistribution2016_11_25", path: "/2016-11-25/distribution/\(input.id)/config", httpMethod: "PUT", httpHeaders: ["If-Match": input.ifMatch], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func listDistributionsByWebACLId20161125(_ input: ListDistributionsByWebACLIdRequest) throws -> ListDistributionsByWebACLIdResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListDistributionsByWebACLId2016_11_25", path: "/2016-11-25/distributionsByWebACLId/\(input.webACLId)?Marker=\(input.marker?.description ?? "")&MaxItems=\(input.maxItems?.description ?? "")", httpMethod: "GET", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func getCloudFrontOriginAccessIdentity20161125(_ input: GetCloudFrontOriginAccessIdentityRequest) throws -> GetCloudFrontOriginAccessIdentityResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetCloudFrontOriginAccessIdentity2016_11_25", path: "/2016-11-25/origin-access-identity/cloudfront/\(input.id)", httpMethod: "GET", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func createCloudFrontOriginAccessIdentity20161125(_ input: CreateCloudFrontOriginAccessIdentityRequest) throws -> CreateCloudFrontOriginAccessIdentityResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateCloudFrontOriginAccessIdentity2016_11_25", path: "/2016-11-25/origin-access-identity/cloudfront", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func listDistributions20161125(_ input: ListDistributionsRequest) throws -> ListDistributionsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListDistributions2016_11_25", path: "/2016-11-25/distribution?Marker=\(input.marker?.description ?? "")&MaxItems=\(input.maxItems?.description ?? "")", httpMethod: "GET", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func listTagsForResource20161125(_ input: ListTagsForResourceRequest) throws -> ListTagsForResourceResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListTagsForResource2016_11_25", path: "/2016-11-25/tagging?Resource=\(input.resource)", httpMethod: "GET", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func getDistributionConfig20161125(_ input: GetDistributionConfigRequest) throws -> GetDistributionConfigResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetDistributionConfig2016_11_25", path: "/2016-11-25/distribution/\(input.id)/config", httpMethod: "GET", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func createInvalidation20161125(_ input: CreateInvalidationRequest) throws -> CreateInvalidationResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateInvalidation2016_11_25", path: "/2016-11-25/distribution/\(input.distributionId)/invalidation", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func getCloudFrontOriginAccessIdentityConfig20161125(_ input: GetCloudFrontOriginAccessIdentityConfigRequest) throws -> GetCloudFrontOriginAccessIdentityConfigResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetCloudFrontOriginAccessIdentityConfig2016_11_25", path: "/2016-11-25/origin-access-identity/cloudfront/\(input.id)/config", httpMethod: "GET", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func getInvalidation20161125(_ input: GetInvalidationRequest) throws -> GetInvalidationResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetInvalidation2016_11_25", path: "/2016-11-25/distribution/\(input.distributionId)/invalidation/\(input.id)", httpMethod: "GET", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func listCloudFrontOriginAccessIdentities20161125(_ input: ListCloudFrontOriginAccessIdentitiesRequest) throws -> ListCloudFrontOriginAccessIdentitiesResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListCloudFrontOriginAccessIdentities2016_11_25", path: "/2016-11-25/origin-access-identity/cloudfront?Marker=\(input.marker?.description ?? "")&MaxItems=\(input.maxItems?.description ?? "")", httpMethod: "GET", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func getStreamingDistributionConfig20161125(_ input: GetStreamingDistributionConfigRequest) throws -> GetStreamingDistributionConfigResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetStreamingDistributionConfig2016_11_25", path: "/2016-11-25/streaming-distribution/\(input.id)/config", httpMethod: "GET", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func getDistribution20161125(_ input: GetDistributionRequest) throws -> GetDistributionResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetDistribution2016_11_25", path: "/2016-11-25/distribution/\(input.id)", httpMethod: "GET", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func deleteCloudFrontOriginAccessIdentity20161125(_ input: DeleteCloudFrontOriginAccessIdentityRequest) throws {
        _ = try request.invoke(operation: "DeleteCloudFrontOriginAccessIdentity2016_11_25", path: "/2016-11-25/origin-access-identity/cloudfront/\(input.id)", httpMethod: "DELETE", httpHeaders: ["If-Match": input.ifMatch], input: input)
    }

    ///  
    public func listStreamingDistributions20161125(_ input: ListStreamingDistributionsRequest) throws -> ListStreamingDistributionsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListStreamingDistributions2016_11_25", path: "/2016-11-25/streaming-distribution?Marker=\(input.marker?.description ?? "")&MaxItems=\(input.maxItems?.description ?? "")", httpMethod: "GET", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func listInvalidations20161125(_ input: ListInvalidationsRequest) throws -> ListInvalidationsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListInvalidations2016_11_25", path: "/2016-11-25/distribution/\(input.distributionId)/invalidation?Marker=\(input.marker?.description ?? "")&MaxItems=\(input.maxItems?.description ?? "")", httpMethod: "GET", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func getStreamingDistribution20161125(_ input: GetStreamingDistributionRequest) throws -> GetStreamingDistributionResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetStreamingDistribution2016_11_25", path: "/2016-11-25/streaming-distribution/\(input.id)", httpMethod: "GET", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func deleteStreamingDistribution20161125(_ input: DeleteStreamingDistributionRequest) throws {
        _ = try request.invoke(operation: "DeleteStreamingDistribution2016_11_25", path: "/2016-11-25/streaming-distribution/\(input.id)", httpMethod: "DELETE", httpHeaders: ["If-Match": input.ifMatch], input: input)
    }

    ///  
    public func untagResource20161125(_ input: UntagResourceRequest) throws {
        _ = try request.invoke(operation: "UntagResource2016_11_25", path: "/2016-11-25/tagging?Operation=Untag&Resource=\(input.resource)", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  
    public func createDistributionWithTags20161125(_ input: CreateDistributionWithTagsRequest) throws -> CreateDistributionWithTagsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateDistributionWithTags2016_11_25", path: "/2016-11-25/distribution?WithTags", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func createStreamingDistributionWithTags20161125(_ input: CreateStreamingDistributionWithTagsRequest) throws -> CreateStreamingDistributionWithTagsResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateStreamingDistributionWithTags2016_11_25", path: "/2016-11-25/streaming-distribution?WithTags", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func deleteDistribution20161125(_ input: DeleteDistributionRequest) throws {
        _ = try request.invoke(operation: "DeleteDistribution2016_11_25", path: "/2016-11-25/distribution/\(input.id)", httpMethod: "DELETE", httpHeaders: ["If-Match": input.ifMatch], input: input)
    }

    ///  
    public func tagResource20161125(_ input: TagResourceRequest) throws {
        _ = try request.invoke(operation: "TagResource2016_11_25", path: "/2016-11-25/tagging?Operation=Tag&Resource=\(input.resource)", httpMethod: "POST", httpHeaders: [:], input: input)
    }

    ///  
    public func createStreamingDistribution20161125(_ input: CreateStreamingDistributionRequest) throws -> CreateStreamingDistributionResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateStreamingDistribution2016_11_25", path: "/2016-11-25/streaming-distribution", httpMethod: "POST", httpHeaders: [:], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  
    public func updateStreamingDistribution20161125(_ input: UpdateStreamingDistributionRequest) throws -> UpdateStreamingDistributionResult {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdateStreamingDistribution2016_11_25", path: "/2016-11-25/streaming-distribution/\(input.id)/config", httpMethod: "PUT", httpHeaders: ["If-Match": input.ifMatch], input: input)
        return try CloudfrontResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }


}