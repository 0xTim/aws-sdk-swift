// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension StorageGateway {

    public struct AddTagsToResourceOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the resource you want to add tags to.
        public let resourceARN: String?

        public init(resourceARN: String? = nil) {
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct StartGatewayInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct UpdateBandwidthRateLimitInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AverageDownloadRateLimitInBitsPerSec", required: false, type: .long), 
            AWSShapeMember(label: "AverageUploadRateLimitInBitsPerSec", required: false, type: .long), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// The average download bandwidth rate limit in bits per second.
        public let averageDownloadRateLimitInBitsPerSec: Int64?
        /// The average upload bandwidth rate limit in bits per second.
        public let averageUploadRateLimitInBitsPerSec: Int64?
        public let gatewayARN: String

        public init(averageDownloadRateLimitInBitsPerSec: Int64? = nil, averageUploadRateLimitInBitsPerSec: Int64? = nil, gatewayARN: String) {
            self.averageDownloadRateLimitInBitsPerSec = averageDownloadRateLimitInBitsPerSec
            self.averageUploadRateLimitInBitsPerSec = averageUploadRateLimitInBitsPerSec
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case averageDownloadRateLimitInBitsPerSec = "AverageDownloadRateLimitInBitsPerSec"
            case averageUploadRateLimitInBitsPerSec = "AverageUploadRateLimitInBitsPerSec"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeTapeArchivesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TapeARNs", required: false, type: .list)
        ]
        /// Specifies that the number of virtual tapes descried be limited to the specified number.
        public let limit: Int32?
        /// An opaque string that indicates the position at which to begin describing virtual tapes.
        public let marker: String?
        /// Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe.
        public let tapeARNs: [String]?

        public init(limit: Int32? = nil, marker: String? = nil, tapeARNs: [String]? = nil) {
            self.limit = limit
            self.marker = marker
            self.tapeARNs = tapeARNs
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case marker = "Marker"
            case tapeARNs = "TapeARNs"
        }
    }

    public struct RemoveTagsFromResourceOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the resource that the tags were removed from.
        public let resourceARN: String?

        public init(resourceARN: String? = nil) {
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
        }
    }

    public struct DescribeBandwidthRateLimitOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AverageDownloadRateLimitInBitsPerSec", required: false, type: .long), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "AverageUploadRateLimitInBitsPerSec", required: false, type: .long)
        ]
        /// The average download bandwidth rate limit in bits per second. This field does not appear in the response if the download rate limit is not set.
        public let averageDownloadRateLimitInBitsPerSec: Int64?
        public let gatewayARN: String?
        /// The average upload bandwidth rate limit in bits per second. This field does not appear in the response if the upload rate limit is not set.
        public let averageUploadRateLimitInBitsPerSec: Int64?

        public init(averageDownloadRateLimitInBitsPerSec: Int64? = nil, averageUploadRateLimitInBitsPerSec: Int64? = nil, gatewayARN: String? = nil) {
            self.averageDownloadRateLimitInBitsPerSec = averageDownloadRateLimitInBitsPerSec
            self.gatewayARN = gatewayARN
            self.averageUploadRateLimitInBitsPerSec = averageUploadRateLimitInBitsPerSec
        }

        private enum CodingKeys: String, CodingKey {
            case averageDownloadRateLimitInBitsPerSec = "AverageDownloadRateLimitInBitsPerSec"
            case gatewayARN = "GatewayARN"
            case averageUploadRateLimitInBitsPerSec = "AverageUploadRateLimitInBitsPerSec"
        }
    }

    public struct SetSMBGuestPasswordOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct SetLocalConsolePasswordOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ListVolumesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        /// A string that indicates the position at which to begin the returned list of volumes. Obtain the marker from the response of a previous List iSCSI Volumes request.
        public let marker: String?
        /// Specifies that the list of volumes returned be limited to the specified number of items.
        public let limit: Int32?
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil, limit: Int32? = nil, marker: String? = nil) {
            self.marker = marker
            self.limit = limit
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case limit = "Limit"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeSMBFileSharesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARNList", required: true, type: .list)
        ]
        /// An array containing the Amazon Resource Name (ARN) of each file share to be described. 
        public let fileShareARNList: [String]

        public init(fileShareARNList: [String]) {
            self.fileShareARNList = fileShareARNList
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARNList = "FileShareARNList"
        }
    }

    public struct JoinDomainInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "UserName", required: true, type: .string), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "Password", required: true, type: .string)
        ]
        /// The unique Amazon Resource Name (ARN) of the file gateway you want to add to the Active Directory domain. 
        public let gatewayARN: String
        /// Sets the user name of user who has permission to add the gateway to the Active Directory domain.
        public let userName: String
        /// The name of the domain that you want the gateway to join.
        public let domainName: String
        /// Sets the password of the user who has permission to add the gateway to the Active Directory domain.
        public let password: String

        public init(domainName: String, gatewayARN: String, password: String, userName: String) {
            self.gatewayARN = gatewayARN
            self.userName = userName
            self.domainName = domainName
            self.password = password
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case userName = "UserName"
            case domainName = "DomainName"
            case password = "Password"
        }
    }

    public struct CancelArchivalOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape for which archiving was canceled.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct DescribeVTLDevicesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "VTLDeviceARNs", required: false, type: .list), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Specifies that the number of VTL devices described be limited to the specified number.
        public let limit: Int32?
        /// An array of strings, where each string represents the Amazon Resource Name (ARN) of a VTL device.  All of the specified VTL devices must be from the same gateway. If no VTL devices are specified, the result will contain all devices on the specified gateway. 
        public let vTLDeviceARNs: [String]?
        public let gatewayARN: String
        /// An opaque string that indicates the position at which to begin describing the VTL devices.
        public let marker: String?

        public init(gatewayARN: String, limit: Int32? = nil, marker: String? = nil, vTLDeviceARNs: [String]? = nil) {
            self.limit = limit
            self.vTLDeviceARNs = vTLDeviceARNs
            self.gatewayARN = gatewayARN
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case vTLDeviceARNs = "VTLDeviceARNs"
            case gatewayARN = "GatewayARN"
            case marker = "Marker"
        }
    }

    public struct DeleteVolumeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the storage volume that was deleted. It is the same ARN you provided in the request.
        public let volumeARN: String?

        public init(volumeARN: String? = nil) {
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct Tape: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeUsedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "TapeCreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "TapeARN", required: false, type: .string), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "TapeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "Progress", required: false, type: .double), 
            AWSShapeMember(label: "VTLDevice", required: false, type: .string), 
            AWSShapeMember(label: "TapeStatus", required: false, type: .string), 
            AWSShapeMember(label: "TapeBarcode", required: false, type: .string)
        ]
        /// The size, in bytes, of data stored on the virtual tape.  This value is not available for tapes created prior to May 13, 2015. 
        public let tapeUsedInBytes: Int64?
        /// The date the virtual tape was created.
        public let tapeCreatedDate: TimeStamp?
        /// The Amazon Resource Name (ARN) of the virtual tape.
        public let tapeARN: String?
        public let kMSKey: String?
        /// The size, in bytes, of the virtual tape capacity.
        public let tapeSizeInBytes: Int64?
        /// For archiving virtual tapes, indicates how much data remains to be uploaded before archiving is complete. Range: 0 (not started) to 100 (complete).
        public let progress: Double?
        /// The virtual tape library (VTL) device that the virtual tape is associated with.
        public let vTLDevice: String?
        /// The current state of the virtual tape.
        public let tapeStatus: String?
        /// The barcode that identifies a specific virtual tape.
        public let tapeBarcode: String?

        public init(kMSKey: String? = nil, progress: Double? = nil, tapeARN: String? = nil, tapeBarcode: String? = nil, tapeCreatedDate: TimeStamp? = nil, tapeSizeInBytes: Int64? = nil, tapeStatus: String? = nil, tapeUsedInBytes: Int64? = nil, vTLDevice: String? = nil) {
            self.tapeUsedInBytes = tapeUsedInBytes
            self.tapeCreatedDate = tapeCreatedDate
            self.tapeARN = tapeARN
            self.kMSKey = kMSKey
            self.tapeSizeInBytes = tapeSizeInBytes
            self.progress = progress
            self.vTLDevice = vTLDevice
            self.tapeStatus = tapeStatus
            self.tapeBarcode = tapeBarcode
        }

        private enum CodingKeys: String, CodingKey {
            case tapeUsedInBytes = "TapeUsedInBytes"
            case tapeCreatedDate = "TapeCreatedDate"
            case tapeARN = "TapeARN"
            case kMSKey = "KMSKey"
            case tapeSizeInBytes = "TapeSizeInBytes"
            case progress = "Progress"
            case vTLDevice = "VTLDevice"
            case tapeStatus = "TapeStatus"
            case tapeBarcode = "TapeBarcode"
        }
    }

    public struct CreateCachediSCSIVolumeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetName", required: true, type: .string), 
            AWSShapeMember(label: "ClientToken", required: true, type: .string), 
            AWSShapeMember(label: "VolumeSizeInBytes", required: true, type: .long), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "NetworkInterfaceId", required: true, type: .string), 
            AWSShapeMember(label: "SourceVolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string)
        ]
        /// The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. For example, specifying TargetName as myvolume results in the target ARN of arn:aws:storagegateway:us-east-2:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume. The target name must be unique across all volumes of a gateway.
        public let targetName: String
        /// A unique identifier that you use to retry a request. If you retry a request, use the same ClientToken you specified in the initial request.
        public let clientToken: String
        /// The size of the volume in bytes.
        public let volumeSizeInBytes: Int64
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional.
        public let kMSEncrypted: Bool?
        /// The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. This value can only be set when KMSEncrypted is true. Optional.
        public let kMSKey: String?
        public let gatewayARN: String
        /// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted. Use DescribeGatewayInformation to get a list of the network interfaces available on a gateway.  Valid Values: A valid IP address.
        public let networkInterfaceId: String
        /// The ARN for an existing volume. Specifying this ARN makes the new volume into an exact copy of the specified existing volume's latest recovery point. The VolumeSizeInBytes value for this new volume must be equal to or larger than the size of the existing volume, in bytes.
        public let sourceVolumeARN: String?
        /// The snapshot ID (e.g. "snap-1122aabb") of the snapshot to restore as the new cached volume. Specify this field if you want to create the iSCSI storage volume from a snapshot otherwise do not include this field. To list snapshots for your account use DescribeSnapshots in the Amazon Elastic Compute Cloud API Reference.
        public let snapshotId: String?

        public init(clientToken: String, gatewayARN: String, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, networkInterfaceId: String, snapshotId: String? = nil, sourceVolumeARN: String? = nil, targetName: String, volumeSizeInBytes: Int64) {
            self.targetName = targetName
            self.clientToken = clientToken
            self.volumeSizeInBytes = volumeSizeInBytes
            self.kMSEncrypted = kMSEncrypted
            self.kMSKey = kMSKey
            self.gatewayARN = gatewayARN
            self.networkInterfaceId = networkInterfaceId
            self.sourceVolumeARN = sourceVolumeARN
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case targetName = "TargetName"
            case clientToken = "ClientToken"
            case volumeSizeInBytes = "VolumeSizeInBytes"
            case kMSEncrypted = "KMSEncrypted"
            case kMSKey = "KMSKey"
            case gatewayARN = "GatewayARN"
            case networkInterfaceId = "NetworkInterfaceId"
            case sourceVolumeARN = "SourceVolumeARN"
            case snapshotId = "SnapshotId"
        }
    }

    public struct DeleteGatewayOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct CreateNFSFileShareOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the newly created file share. 
        public let fileShareARN: String?

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
        }
    }

    public struct DescribeTapeRecoveryPointsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TapeRecoveryPointInfos", required: false, type: .list)
        ]
        public let gatewayARN: String?
        /// An opaque string that indicates the position at which the virtual tape recovery points that were listed for description ended. Use this marker in your next request to list the next set of virtual tape recovery points in the list. If there are no more recovery points to describe, this field does not appear in the response.
        public let marker: String?
        /// An array of TapeRecoveryPointInfos that are available for the specified gateway.
        public let tapeRecoveryPointInfos: [TapeRecoveryPointInfo]?

        public init(gatewayARN: String? = nil, marker: String? = nil, tapeRecoveryPointInfos: [TapeRecoveryPointInfo]? = nil) {
            self.gatewayARN = gatewayARN
            self.marker = marker
            self.tapeRecoveryPointInfos = tapeRecoveryPointInfos
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case marker = "Marker"
            case tapeRecoveryPointInfos = "TapeRecoveryPointInfos"
        }
    }

    public struct DescribeSnapshotScheduleInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        public let volumeARN: String

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct DeleteSnapshotScheduleInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]
        public let volumeARN: String

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct CreateStorediSCSIVolumeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetName", required: true, type: .string), 
            AWSShapeMember(label: "PreserveExistingData", required: true, type: .boolean), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "DiskId", required: true, type: .string), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfaceId", required: true, type: .string), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string)
        ]
        /// The name of the iSCSI target used by initiators to connect to the target and as a suffix for the target ARN. For example, specifying TargetName as myvolume results in the target ARN of arn:aws:storagegateway:us-east-2:111122223333:gateway/sgw-12A3456B/target/iqn.1997-05.com.amazon:myvolume. The target name must be unique across all volumes of a gateway.
        public let targetName: String
        /// Specify this field as true if you want to preserve the data on the local disk. Otherwise, specifying this field as false creates an empty volume.  Valid Values: true, false
        public let preserveExistingData: Bool
        /// The Amazon Resource Name (ARN) of the KMS key used for Amazon S3 server side encryption. This value can only be set when KMSEncrypted is true. Optional.
        public let kMSKey: String?
        public let gatewayARN: String
        /// The unique identifier for the gateway local disk that is configured as a stored volume. Use ListLocalDisks to list disk IDs for a gateway.
        public let diskId: String
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional.
        public let kMSEncrypted: Bool?
        /// The network interface of the gateway on which to expose the iSCSI target. Only IPv4 addresses are accepted. Use DescribeGatewayInformation to get a list of the network interfaces available on a gateway.  Valid Values: A valid IP address.
        public let networkInterfaceId: String
        /// The snapshot ID (e.g. "snap-1122aabb") of the snapshot to restore as the new stored volume. Specify this field if you want to create the iSCSI storage volume from a snapshot otherwise do not include this field. To list snapshots for your account use DescribeSnapshots in the Amazon Elastic Compute Cloud API Reference.
        public let snapshotId: String?

        public init(diskId: String, gatewayARN: String, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, networkInterfaceId: String, preserveExistingData: Bool, snapshotId: String? = nil, targetName: String) {
            self.targetName = targetName
            self.preserveExistingData = preserveExistingData
            self.kMSKey = kMSKey
            self.gatewayARN = gatewayARN
            self.diskId = diskId
            self.kMSEncrypted = kMSEncrypted
            self.networkInterfaceId = networkInterfaceId
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case targetName = "TargetName"
            case preserveExistingData = "PreserveExistingData"
            case kMSKey = "KMSKey"
            case gatewayARN = "GatewayARN"
            case diskId = "DiskId"
            case kMSEncrypted = "KMSEncrypted"
            case networkInterfaceId = "NetworkInterfaceId"
            case snapshotId = "SnapshotId"
        }
    }

    public struct UpdateNFSFileShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Squash", required: false, type: .string), 
            AWSShapeMember(label: "RequesterPays", required: false, type: .boolean), 
            AWSShapeMember(label: "ClientList", required: false, type: .list), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "NFSFileShareDefaults", required: false, type: .structure), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "GuessMIMETypeEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "ObjectACL", required: false, type: .enum), 
            AWSShapeMember(label: "ReadOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "DefaultStorageClass", required: false, type: .string), 
            AWSShapeMember(label: "FileShareARN", required: true, type: .string)
        ]
        /// The user mapped to anonymous user. Valid options are the following:    RootSquash - Only root is mapped to anonymous user.    NoSquash - No one is mapped to anonymous user    AllSquash - Everyone is mapped to anonymous user.  
        public let squash: String?
        /// A value that sets the access control list permission for objects in the Amazon S3 bucket that a file gateway puts objects into. The default value is private.
        public let requesterPays: Bool?
        /// The list of clients that are allowed to access the file gateway. The list must contain either valid IP addresses or valid CIDR blocks.
        public let clientList: [String]?
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional. 
        public let kMSEncrypted: Bool?
        /// The default values for the file share. Optional.
        public let nFSFileShareDefaults: NFSFileShareDefaults?
        /// The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. This value can only be set when KMSEncrypted is true. Optional. 
        public let kMSKey: String?
        /// A value that enables guessing of the MIME type for uploaded objects based on file extensions. Set this value to true to enable MIME type guessing, and otherwise to false. The default value is true.
        public let guessMIMETypeEnabled: Bool?
        /// A value that sets the access control list permission for objects in the S3 bucket that a file gateway puts objects into. The default value is "private".
        public let objectACL: ObjectACL?
        /// A value that sets the write status of a file share. This value is true if the write status is read-only, and otherwise false.
        public let readOnly: Bool?
        /// The default storage class for objects put into an Amazon S3 bucket by the file gateway. Possible values are S3_STANDARD, S3_STANDARD_IA, or S3_ONEZONE_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        public let defaultStorageClass: String?
        /// The Amazon Resource Name (ARN) of the file share to be updated. 
        public let fileShareARN: String

        public init(clientList: [String]? = nil, defaultStorageClass: String? = nil, fileShareARN: String, guessMIMETypeEnabled: Bool? = nil, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, nFSFileShareDefaults: NFSFileShareDefaults? = nil, objectACL: ObjectACL? = nil, readOnly: Bool? = nil, requesterPays: Bool? = nil, squash: String? = nil) {
            self.squash = squash
            self.requesterPays = requesterPays
            self.clientList = clientList
            self.kMSEncrypted = kMSEncrypted
            self.nFSFileShareDefaults = nFSFileShareDefaults
            self.kMSKey = kMSKey
            self.guessMIMETypeEnabled = guessMIMETypeEnabled
            self.objectACL = objectACL
            self.readOnly = readOnly
            self.defaultStorageClass = defaultStorageClass
            self.fileShareARN = fileShareARN
        }

        private enum CodingKeys: String, CodingKey {
            case squash = "Squash"
            case requesterPays = "RequesterPays"
            case clientList = "ClientList"
            case kMSEncrypted = "KMSEncrypted"
            case nFSFileShareDefaults = "NFSFileShareDefaults"
            case kMSKey = "KMSKey"
            case guessMIMETypeEnabled = "GuessMIMETypeEnabled"
            case objectACL = "ObjectACL"
            case readOnly = "ReadOnly"
            case defaultStorageClass = "DefaultStorageClass"
            case fileShareARN = "FileShareARN"
        }
    }

    public struct VolumeRecoveryPointInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeUsageInBytes", required: false, type: .long), 
            AWSShapeMember(label: "VolumeRecoveryPointTime", required: false, type: .string)
        ]
        public let volumeSizeInBytes: Int64?
        public let volumeARN: String?
        public let volumeUsageInBytes: Int64?
        public let volumeRecoveryPointTime: String?

        public init(volumeARN: String? = nil, volumeRecoveryPointTime: String? = nil, volumeSizeInBytes: Int64? = nil, volumeUsageInBytes: Int64? = nil) {
            self.volumeSizeInBytes = volumeSizeInBytes
            self.volumeARN = volumeARN
            self.volumeUsageInBytes = volumeUsageInBytes
            self.volumeRecoveryPointTime = volumeRecoveryPointTime
        }

        private enum CodingKeys: String, CodingKey {
            case volumeSizeInBytes = "VolumeSizeInBytes"
            case volumeARN = "VolumeARN"
            case volumeUsageInBytes = "VolumeUsageInBytes"
            case volumeRecoveryPointTime = "VolumeRecoveryPointTime"
        }
    }

    public struct UpdateBandwidthRateLimitOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeVTLDevicesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VTLDevices", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        /// An array of VTL device objects composed of the Amazon Resource Name(ARN) of the VTL devices.
        public let vTLDevices: [VTLDevice]?
        /// An opaque string that indicates the position at which the VTL devices that were fetched for description ended. Use the marker in your next request to fetch the next set of VTL devices in the list. If there are no more VTL devices to describe, this field does not appear in the response.
        public let marker: String?
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil, marker: String? = nil, vTLDevices: [VTLDevice]? = nil) {
            self.vTLDevices = vTLDevices
            self.marker = marker
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case vTLDevices = "VTLDevices"
            case marker = "Marker"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ChapInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecretToAuthenticateInitiator", required: false, type: .string), 
            AWSShapeMember(label: "SecretToAuthenticateTarget", required: false, type: .string), 
            AWSShapeMember(label: "TargetARN", required: false, type: .string), 
            AWSShapeMember(label: "InitiatorName", required: false, type: .string)
        ]
        /// The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.
        public let secretToAuthenticateInitiator: String?
        /// The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).
        public let secretToAuthenticateTarget: String?
        /// The Amazon Resource Name (ARN) of the volume.  Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let targetARN: String?
        /// The iSCSI initiator that connects to the target.
        public let initiatorName: String?

        public init(initiatorName: String? = nil, secretToAuthenticateInitiator: String? = nil, secretToAuthenticateTarget: String? = nil, targetARN: String? = nil) {
            self.secretToAuthenticateInitiator = secretToAuthenticateInitiator
            self.secretToAuthenticateTarget = secretToAuthenticateTarget
            self.targetARN = targetARN
            self.initiatorName = initiatorName
        }

        private enum CodingKeys: String, CodingKey {
            case secretToAuthenticateInitiator = "SecretToAuthenticateInitiator"
            case secretToAuthenticateTarget = "SecretToAuthenticateTarget"
            case targetARN = "TargetARN"
            case initiatorName = "InitiatorName"
        }
    }

    public struct DeleteVolumeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        public let volumeARN: String

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct DeleteTapeArchiveOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape that was deleted from the virtual tape shelf (VTS).
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct UpdateSMBFileShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultStorageClass", required: false, type: .string), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "GuessMIMETypeEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "FileShareARN", required: true, type: .string), 
            AWSShapeMember(label: "ValidUserList", required: false, type: .list), 
            AWSShapeMember(label: "RequesterPays", required: false, type: .boolean), 
            AWSShapeMember(label: "ObjectACL", required: false, type: .enum), 
            AWSShapeMember(label: "InvalidUserList", required: false, type: .list), 
            AWSShapeMember(label: "ReadOnly", required: false, type: .boolean)
        ]
        /// The default storage class for objects put into an Amazon S3 bucket by the file gateway. Possible values are S3_STANDARD, S3_STANDARD_IA, or S3_ONEZONE_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        public let defaultStorageClass: String?
        /// The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. This value can only be set when KMSEncrypted is true. Optional.
        public let kMSKey: String?
        /// A value that enables guessing of the MIME type for uploaded objects based on file extensions. Set this value to true to enable MIME type guessing, and otherwise to false. The default value is true.
        public let guessMIMETypeEnabled: Bool?
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional.
        public let kMSEncrypted: Bool?
        /// The Amazon Resource Name (ARN) of the SMB file share that you want to update.
        public let fileShareARN: String
        /// A list of users or groups in the Active Directory that are allowed to access the file share. A group must be prefixed with the @ character. For example @group1. Can only be set if Authentication is set to ActiveDirectory.
        public let validUserList: [String]?
        /// A value that sets the access control list permission for objects in the Amazon S3 bucket that a file gateway puts objects into. The default value is private.
        public let requesterPays: Bool?
        /// A value that sets the access control list permission for objects in the S3 bucket that a file gateway puts objects into. The default value is "private".
        public let objectACL: ObjectACL?
        /// A list of users or groups in the Active Directory that are not allowed to access the file share. A group must be prefixed with the @ character. For example @group1. Can only be set if Authentication is set to ActiveDirectory.
        public let invalidUserList: [String]?
        /// A value that sets the write status of a file share. This value is true if the write status is read-only, and otherwise false.
        public let readOnly: Bool?

        public init(defaultStorageClass: String? = nil, fileShareARN: String, guessMIMETypeEnabled: Bool? = nil, invalidUserList: [String]? = nil, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, objectACL: ObjectACL? = nil, readOnly: Bool? = nil, requesterPays: Bool? = nil, validUserList: [String]? = nil) {
            self.defaultStorageClass = defaultStorageClass
            self.kMSKey = kMSKey
            self.guessMIMETypeEnabled = guessMIMETypeEnabled
            self.kMSEncrypted = kMSEncrypted
            self.fileShareARN = fileShareARN
            self.validUserList = validUserList
            self.requesterPays = requesterPays
            self.objectACL = objectACL
            self.invalidUserList = invalidUserList
            self.readOnly = readOnly
        }

        private enum CodingKeys: String, CodingKey {
            case defaultStorageClass = "DefaultStorageClass"
            case kMSKey = "KMSKey"
            case guessMIMETypeEnabled = "GuessMIMETypeEnabled"
            case kMSEncrypted = "KMSEncrypted"
            case fileShareARN = "FileShareARN"
            case validUserList = "ValidUserList"
            case requesterPays = "RequesterPays"
            case objectACL = "ObjectACL"
            case invalidUserList = "InvalidUserList"
            case readOnly = "ReadOnly"
        }
    }

    public struct ListVolumeRecoveryPointsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeRecoveryPointInfos", required: false, type: .list), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let volumeRecoveryPointInfos: [VolumeRecoveryPointInfo]?
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil, volumeRecoveryPointInfos: [VolumeRecoveryPointInfo]? = nil) {
            self.volumeRecoveryPointInfos = volumeRecoveryPointInfos
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case volumeRecoveryPointInfos = "VolumeRecoveryPointInfos"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeTapeArchivesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TapeArchives", required: false, type: .list)
        ]
        /// An opaque string that indicates the position at which the virtual tapes that were fetched for description ended. Use this marker in your next request to fetch the next set of virtual tapes in the virtual tape shelf (VTS). If there are no more virtual tapes to describe, this field does not appear in the response.
        public let marker: String?
        /// An array of virtual tape objects in the virtual tape shelf (VTS). The description includes of the Amazon Resource Name (ARN) of the virtual tapes. The information returned includes the Amazon Resource Names (ARNs) of the tapes, size of the tapes, status of the tapes, progress of the description and tape barcode.
        public let tapeArchives: [TapeArchive]?

        public init(marker: String? = nil, tapeArchives: [TapeArchive]? = nil) {
            self.marker = marker
            self.tapeArchives = tapeArchives
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case tapeArchives = "TapeArchives"
        }
    }

    public struct RetrieveTapeRecoveryPointOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape for which the recovery point was retrieved.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct DescribeCachediSCSIVolumesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CachediSCSIVolumes", required: false, type: .list)
        ]
        /// An array of objects where each object contains metadata about one cached volume.
        public let cachediSCSIVolumes: [CachediSCSIVolume]?

        public init(cachediSCSIVolumes: [CachediSCSIVolume]? = nil) {
            self.cachediSCSIVolumes = cachediSCSIVolumes
        }

        private enum CodingKeys: String, CodingKey {
            case cachediSCSIVolumes = "CachediSCSIVolumes"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        public let value: String
        public let key: String

        public init(key: String, value: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct VTLDevice: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeviceiSCSIAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "VTLDeviceProductIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "VTLDeviceType", required: false, type: .string), 
            AWSShapeMember(label: "VTLDeviceVendor", required: false, type: .string), 
            AWSShapeMember(label: "VTLDeviceARN", required: false, type: .string)
        ]
        /// A list of iSCSI information about a VTL device.
        public let deviceiSCSIAttributes: DeviceiSCSIAttributes?
        public let vTLDeviceProductIdentifier: String?
        public let vTLDeviceType: String?
        public let vTLDeviceVendor: String?
        /// Specifies the unique Amazon Resource Name (ARN) of the device (tape drive or media changer).
        public let vTLDeviceARN: String?

        public init(deviceiSCSIAttributes: DeviceiSCSIAttributes? = nil, vTLDeviceARN: String? = nil, vTLDeviceProductIdentifier: String? = nil, vTLDeviceType: String? = nil, vTLDeviceVendor: String? = nil) {
            self.deviceiSCSIAttributes = deviceiSCSIAttributes
            self.vTLDeviceProductIdentifier = vTLDeviceProductIdentifier
            self.vTLDeviceType = vTLDeviceType
            self.vTLDeviceVendor = vTLDeviceVendor
            self.vTLDeviceARN = vTLDeviceARN
        }

        private enum CodingKeys: String, CodingKey {
            case deviceiSCSIAttributes = "DeviceiSCSIAttributes"
            case vTLDeviceProductIdentifier = "VTLDeviceProductIdentifier"
            case vTLDeviceType = "VTLDeviceType"
            case vTLDeviceVendor = "VTLDeviceVendor"
            case vTLDeviceARN = "VTLDeviceARN"
        }
    }

    public struct ListFileSharesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// The Amazon resource Name (ARN) of the gateway whose file shares you want to list. If this field is not present, all file shares under your account are listed.
        public let gatewayARN: String?
        /// The maximum number of file shares to return in the response. The value must be an integer with a value greater than zero. Optional.
        public let limit: Int32?
        /// Opaque pagination token returned from a previous ListFileShares operation. If present, Marker specifies where to continue the list from after a previous call to ListFileShares. Optional.
        public let marker: String?

        public init(gatewayARN: String? = nil, limit: Int32? = nil, marker: String? = nil) {
            self.gatewayARN = gatewayARN
            self.limit = limit
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case limit = "Limit"
            case marker = "Marker"
        }
    }

    public struct DescribeSMBSettingsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SMBGuestPasswordSet", required: false, type: .boolean), 
            AWSShapeMember(label: "DomainName", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        /// This value is true if a password for the guest user “smbguest” is set, and otherwise false.
        public let sMBGuestPasswordSet: Bool?
        /// The name of the domain that the gateway is joined to.
        public let domainName: String?
        public let gatewayARN: String?

        public init(domainName: String? = nil, gatewayARN: String? = nil, sMBGuestPasswordSet: Bool? = nil) {
            self.sMBGuestPasswordSet = sMBGuestPasswordSet
            self.domainName = domainName
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case sMBGuestPasswordSet = "SMBGuestPasswordSet"
            case domainName = "DomainName"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct CancelRetrievalInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape you want to cancel retrieval for.
        public let tapeARN: String
        public let gatewayARN: String

        public init(gatewayARN: String, tapeARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ListVolumeInitiatorsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes for the gateway.
        public let volumeARN: String

        public init(volumeARN: String) {
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct DescribeMaintenanceStartTimeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeCacheOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CacheDirtyPercentage", required: false, type: .double), 
            AWSShapeMember(label: "CacheUsedPercentage", required: false, type: .double), 
            AWSShapeMember(label: "CacheAllocatedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "DiskIds", required: false, type: .list), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "CacheMissPercentage", required: false, type: .double), 
            AWSShapeMember(label: "CacheHitPercentage", required: false, type: .double)
        ]
        public let cacheDirtyPercentage: Double?
        public let cacheUsedPercentage: Double?
        public let cacheAllocatedInBytes: Int64?
        public let diskIds: [String]?
        public let gatewayARN: String?
        public let cacheMissPercentage: Double?
        public let cacheHitPercentage: Double?

        public init(cacheAllocatedInBytes: Int64? = nil, cacheDirtyPercentage: Double? = nil, cacheHitPercentage: Double? = nil, cacheMissPercentage: Double? = nil, cacheUsedPercentage: Double? = nil, diskIds: [String]? = nil, gatewayARN: String? = nil) {
            self.cacheDirtyPercentage = cacheDirtyPercentage
            self.cacheUsedPercentage = cacheUsedPercentage
            self.cacheAllocatedInBytes = cacheAllocatedInBytes
            self.diskIds = diskIds
            self.gatewayARN = gatewayARN
            self.cacheMissPercentage = cacheMissPercentage
            self.cacheHitPercentage = cacheHitPercentage
        }

        private enum CodingKeys: String, CodingKey {
            case cacheDirtyPercentage = "CacheDirtyPercentage"
            case cacheUsedPercentage = "CacheUsedPercentage"
            case cacheAllocatedInBytes = "CacheAllocatedInBytes"
            case diskIds = "DiskIds"
            case gatewayARN = "GatewayARN"
            case cacheMissPercentage = "CacheMissPercentage"
            case cacheHitPercentage = "CacheHitPercentage"
        }
    }

    public struct CreateTapeWithBarcodeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "TapeBarcode", required: true, type: .string), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "TapeSizeInBytes", required: true, type: .long), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the AWS KMS Key used for Amazon S3 server side encryption. This value can only be set when KMSEncrypted is true. Optional.
        public let kMSKey: String?
        /// The barcode that you want to assign to the tape.  Barcodes cannot be reused. This includes barcodes used for tapes that have been deleted. 
        public let tapeBarcode: String
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional.
        public let kMSEncrypted: Bool?
        /// The size, in bytes, of the virtual tape that you want to create.  The size must be aligned by gigabyte (1024*1024*1024 byte). 
        public let tapeSizeInBytes: Int64
        /// The unique Amazon Resource Name (ARN) that represents the gateway to associate the virtual tape with. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String

        public init(gatewayARN: String, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, tapeBarcode: String, tapeSizeInBytes: Int64) {
            self.kMSKey = kMSKey
            self.tapeBarcode = tapeBarcode
            self.kMSEncrypted = kMSEncrypted
            self.tapeSizeInBytes = tapeSizeInBytes
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case kMSKey = "KMSKey"
            case tapeBarcode = "TapeBarcode"
            case kMSEncrypted = "KMSEncrypted"
            case tapeSizeInBytes = "TapeSizeInBytes"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DeleteFileShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: true, type: .string), 
            AWSShapeMember(label: "ForceDelete", required: false, type: .boolean)
        ]
        /// The Amazon Resource Name (ARN) of the file share to be deleted. 
        public let fileShareARN: String
        /// If this value is set to true, the operation deletes a file share immediately and aborts all data uploads to AWS. Otherwise, the file share is not deleted until all data is uploaded to AWS. This process aborts the data upload process, and the file share enters the FORCE_DELETING status.
        public let forceDelete: Bool?

        public init(fileShareARN: String, forceDelete: Bool? = nil) {
            self.fileShareARN = fileShareARN
            self.forceDelete = forceDelete
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
            case forceDelete = "ForceDelete"
        }
    }

    public struct UpdateVTLDeviceTypeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VTLDeviceARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the medium changer you have selected.
        public let vTLDeviceARN: String?

        public init(vTLDeviceARN: String? = nil) {
            self.vTLDeviceARN = vTLDeviceARN
        }

        private enum CodingKeys: String, CodingKey {
            case vTLDeviceARN = "VTLDeviceARN"
        }
    }

    public struct DescribeChapCredentialsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the iSCSI volume target. Use the DescribeStorediSCSIVolumes operation to return to retrieve the TargetARN for specified VolumeARN.
        public let targetARN: String

        public init(targetARN: String) {
            self.targetARN = targetARN
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
        }
    }

    public struct DeleteSnapshotScheduleOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]
        public let volumeARN: String?

        public init(volumeARN: String? = nil) {
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct DisableGatewayInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public enum ErrorCode: String, CustomStringConvertible, Codable {
        case activationkeyexpired = "ActivationKeyExpired"
        case activationkeyinvalid = "ActivationKeyInvalid"
        case activationkeynotfound = "ActivationKeyNotFound"
        case gatewayinternalerror = "GatewayInternalError"
        case gatewaynotconnected = "GatewayNotConnected"
        case gatewaynotfound = "GatewayNotFound"
        case gatewayproxynetworkconnectionbusy = "GatewayProxyNetworkConnectionBusy"
        case authenticationfailure = "AuthenticationFailure"
        case bandwidththrottleschedulenotfound = "BandwidthThrottleScheduleNotFound"
        case blocked = "Blocked"
        case cannotexportsnapshot = "CannotExportSnapshot"
        case chapcredentialnotfound = "ChapCredentialNotFound"
        case diskalreadyallocated = "DiskAlreadyAllocated"
        case diskdoesnotexist = "DiskDoesNotExist"
        case disksizegreaterthanvolumemaxsize = "DiskSizeGreaterThanVolumeMaxSize"
        case disksizelessthanvolumesize = "DiskSizeLessThanVolumeSize"
        case disksizenotgigaligned = "DiskSizeNotGigAligned"
        case duplicatecertificateinfo = "DuplicateCertificateInfo"
        case duplicateschedule = "DuplicateSchedule"
        case endpointnotfound = "EndpointNotFound"
        case iamnotsupported = "IAMNotSupported"
        case initiatorinvalid = "InitiatorInvalid"
        case initiatornotfound = "InitiatorNotFound"
        case internalerror = "InternalError"
        case invalidgateway = "InvalidGateway"
        case invalidendpoint = "InvalidEndpoint"
        case invalidparameters = "InvalidParameters"
        case invalidschedule = "InvalidSchedule"
        case localstoragelimitexceeded = "LocalStorageLimitExceeded"
        case lunalreadyallocated = "LunAlreadyAllocated "
        case luninvalid = "LunInvalid"
        case maximumcontentlengthexceeded = "MaximumContentLengthExceeded"
        case maximumtapecartridgecountexceeded = "MaximumTapeCartridgeCountExceeded"
        case maximumvolumecountexceeded = "MaximumVolumeCountExceeded"
        case networkconfigurationchanged = "NetworkConfigurationChanged"
        case nodisksavailable = "NoDisksAvailable"
        case notimplemented = "NotImplemented"
        case notsupported = "NotSupported"
        case operationaborted = "OperationAborted"
        case outdatedgateway = "OutdatedGateway"
        case parametersnotimplemented = "ParametersNotImplemented"
        case regioninvalid = "RegionInvalid"
        case requesttimeout = "RequestTimeout"
        case serviceunavailable = "ServiceUnavailable"
        case snapshotdeleted = "SnapshotDeleted"
        case snapshotidinvalid = "SnapshotIdInvalid"
        case snapshotinprogress = "SnapshotInProgress"
        case snapshotnotfound = "SnapshotNotFound"
        case snapshotschedulenotfound = "SnapshotScheduleNotFound"
        case stagingareafull = "StagingAreaFull"
        case storagefailure = "StorageFailure"
        case tapecartridgenotfound = "TapeCartridgeNotFound"
        case targetalreadyexists = "TargetAlreadyExists"
        case targetinvalid = "TargetInvalid"
        case targetnotfound = "TargetNotFound"
        case unauthorizedoperation = "UnauthorizedOperation"
        case volumealreadyexists = "VolumeAlreadyExists"
        case volumeidinvalid = "VolumeIdInvalid"
        case volumeinuse = "VolumeInUse"
        case volumenotfound = "VolumeNotFound"
        case volumenotready = "VolumeNotReady"
        public var description: String { return self.rawValue }
    }

    public struct UpdateMaintenanceStartTimeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DayOfWeek", required: true, type: .integer), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "HourOfDay", required: true, type: .integer), 
            AWSShapeMember(label: "MinuteOfHour", required: true, type: .integer)
        ]
        /// The maintenance start time day of the week represented as an ordinal number from 0 to 6, where 0 represents Sunday and 6 Saturday.
        public let dayOfWeek: Int32
        public let gatewayARN: String
        /// The hour component of the maintenance start time represented as hh, where hh is the hour (00 to 23). The hour of the day is in the time zone of the gateway.
        public let hourOfDay: Int32
        /// The minute component of the maintenance start time represented as mm, where mm is the minute (00 to 59). The minute of the hour is in the time zone of the gateway.
        public let minuteOfHour: Int32

        public init(dayOfWeek: Int32, gatewayARN: String, hourOfDay: Int32, minuteOfHour: Int32) {
            self.dayOfWeek = dayOfWeek
            self.gatewayARN = gatewayARN
            self.hourOfDay = hourOfDay
            self.minuteOfHour = minuteOfHour
        }

        private enum CodingKeys: String, CodingKey {
            case dayOfWeek = "DayOfWeek"
            case gatewayARN = "GatewayARN"
            case hourOfDay = "HourOfDay"
            case minuteOfHour = "MinuteOfHour"
        }
    }

    public struct RefreshCacheInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: true, type: .string), 
            AWSShapeMember(label: "Recursive", required: false, type: .boolean), 
            AWSShapeMember(label: "FolderList", required: false, type: .list)
        ]
        public let fileShareARN: String
        /// A value that specifies whether to recursively refresh folders in the cache. The refresh includes folders that were in the cache the last time the gateway listed the folder's contents. If this value set to "true", each folder that is listed in FolderList is recursively updated. Otherwise, subfolders listed in FolderList are not refreshed. Only objects that are in folders listed directly under FolderList are found and used for the update. The default is "true".
        public let recursive: Bool?
        public let folderList: [String]?

        public init(fileShareARN: String, folderList: [String]? = nil, recursive: Bool? = nil) {
            self.fileShareARN = fileShareARN
            self.recursive = recursive
            self.folderList = folderList
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
            case recursive = "Recursive"
            case folderList = "FolderList"
        }
    }

    public struct NotifyWhenUploadedInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: true, type: .string)
        ]
        public let fileShareARN: String

        public init(fileShareARN: String) {
            self.fileShareARN = fileShareARN
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
        }
    }

    public struct DeleteTapeArchiveInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape to delete from the virtual tape shelf (VTS).
        public let tapeARN: String

        public init(tapeARN: String) {
            self.tapeARN = tapeARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct StartGatewayOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct AddWorkingStorageOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct UpdateSMBFileShareOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the updated SMB file share. 
        public let fileShareARN: String?

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
        }
    }

    public struct DescribeUploadBufferInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public enum ObjectACL: String, CustomStringConvertible, Codable {
        case `private` = "private"
        case publicRead = "public-read"
        case publicReadWrite = "public-read-write"
        case authenticatedRead = "authenticated-read"
        case bucketOwnerRead = "bucket-owner-read"
        case bucketOwnerFullControl = "bucket-owner-full-control"
        case awsExecRead = "aws-exec-read"
        public var description: String { return self.rawValue }
    }

    public struct DeviceiSCSIAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "TargetARN", required: false, type: .string), 
            AWSShapeMember(label: "ChapEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "NetworkInterfacePort", required: false, type: .integer)
        ]
        /// The network interface identifier of the VTL device.
        public let networkInterfaceId: String?
        /// Specifies the unique Amazon Resource Name (ARN) that encodes the iSCSI qualified name(iqn) of a tape drive or media changer target.
        public let targetARN: String?
        /// Indicates whether mutual CHAP is enabled for the iSCSI target.
        public let chapEnabled: Bool?
        /// The port used to communicate with iSCSI VTL device targets.
        public let networkInterfacePort: Int32?

        public init(chapEnabled: Bool? = nil, networkInterfaceId: String? = nil, networkInterfacePort: Int32? = nil, targetARN: String? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.targetARN = targetARN
            self.chapEnabled = chapEnabled
            self.networkInterfacePort = networkInterfacePort
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "NetworkInterfaceId"
            case targetARN = "TargetARN"
            case chapEnabled = "ChapEnabled"
            case networkInterfacePort = "NetworkInterfacePort"
        }
    }

    public struct ListTagsForResourceOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ResourceARN", required: false, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// An array that contains the tags for the specified resource.
        public let tags: [Tag]?
        /// he Amazon Resource Name (ARN) of the resource for which you want to list tags.
        public let resourceARN: String?
        /// An opaque string that indicates the position at which to stop returning the list of tags.
        public let marker: String?

        public init(marker: String? = nil, resourceARN: String? = nil, tags: [Tag]? = nil) {
            self.tags = tags
            self.resourceARN = resourceARN
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case resourceARN = "ResourceARN"
            case marker = "Marker"
        }
    }

    public struct DescribeTapesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "TapeARNs", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        public let gatewayARN: String
        /// Specifies one or more unique Amazon Resource Names (ARNs) that represent the virtual tapes you want to describe. If this parameter is not specified, Tape gateway returns a description of all virtual tapes associated with the specified gateway.
        public let tapeARNs: [String]?
        /// A marker value, obtained in a previous call to DescribeTapes. This marker indicates which page of results to retrieve.  If not specified, the first page of results is retrieved.
        public let marker: String?
        /// Specifies that the number of virtual tapes described be limited to the specified number.  Amazon Web Services may impose its own limit, if this field is not set. 
        public let limit: Int32?

        public init(gatewayARN: String, limit: Int32? = nil, marker: String? = nil, tapeARNs: [String]? = nil) {
            self.gatewayARN = gatewayARN
            self.tapeARNs = tapeARNs
            self.marker = marker
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case tapeARNs = "TapeARNs"
            case marker = "Marker"
            case limit = "Limit"
        }
    }

    public struct AddUploadBufferOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ListLocalDisksInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct JoinDomainOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        /// The unique Amazon Resource Name (ARN) of the gateway that joined the domain.
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeUploadBufferOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiskIds", required: false, type: .list), 
            AWSShapeMember(label: "UploadBufferAllocatedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "UploadBufferUsedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let diskIds: [String]?
        public let uploadBufferAllocatedInBytes: Int64?
        public let uploadBufferUsedInBytes: Int64?
        public let gatewayARN: String?

        public init(diskIds: [String]? = nil, gatewayARN: String? = nil, uploadBufferAllocatedInBytes: Int64? = nil, uploadBufferUsedInBytes: Int64? = nil) {
            self.diskIds = diskIds
            self.uploadBufferAllocatedInBytes = uploadBufferAllocatedInBytes
            self.uploadBufferUsedInBytes = uploadBufferUsedInBytes
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case diskIds = "DiskIds"
            case uploadBufferAllocatedInBytes = "UploadBufferAllocatedInBytes"
            case uploadBufferUsedInBytes = "UploadBufferUsedInBytes"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ListTapesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TapeARNs", required: false, type: .list), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// A string that indicates the position at which to begin the returned list of tapes.
        public let marker: String?
        public let tapeARNs: [String]?
        /// An optional number limit for the tapes in the list returned by this call.
        public let limit: Int32?

        public init(limit: Int32? = nil, marker: String? = nil, tapeARNs: [String]? = nil) {
            self.marker = marker
            self.tapeARNs = tapeARNs
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case tapeARNs = "TapeARNs"
            case limit = "Limit"
        }
    }

    public struct DeleteFileShareOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the deleted file share. 
        public let fileShareARN: String?

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
        }
    }

    public struct ShutdownGatewayInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ListTagsForResourceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        /// The Amazon Resource Name (ARN) of the resource for which you want to list tags.
        public let resourceARN: String
        /// An opaque string that indicates the position at which to begin returning the list of tags.
        public let marker: String?
        /// Specifies that the list of tags returned be limited to the specified number of items.
        public let limit: Int32?

        public init(limit: Int32? = nil, marker: String? = nil, resourceARN: String) {
            self.resourceARN = resourceARN
            self.marker = marker
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case marker = "Marker"
            case limit = "Limit"
        }
    }

    public struct ActivateGatewayOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ListGatewaysInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        /// Specifies that the list of gateways returned be limited to the specified number of items.
        public let limit: Int32?
        /// An opaque string that indicates the position at which to begin the returned list of gateways.
        public let marker: String?

        public init(limit: Int32? = nil, marker: String? = nil) {
            self.limit = limit
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case limit = "Limit"
            case marker = "Marker"
        }
    }

    public struct CreateStorediSCSIVolumeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]
        /// he Amazon Resource Name (ARN) of the volume target that includes the iSCSI name that initiators can use to connect to the target.
        public let targetARN: String?
        /// The size of the volume in bytes.
        public let volumeSizeInBytes: Int64?
        /// The Amazon Resource Name (ARN) of the configured volume.
        public let volumeARN: String?

        public init(targetARN: String? = nil, volumeARN: String? = nil, volumeSizeInBytes: Int64? = nil) {
            self.targetARN = targetARN
            self.volumeSizeInBytes = volumeSizeInBytes
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
            case volumeSizeInBytes = "VolumeSizeInBytes"
            case volumeARN = "VolumeARN"
        }
    }

    public struct DescribeWorkingStorageOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WorkingStorageUsedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "WorkingStorageAllocatedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "DiskIds", required: false, type: .list), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        /// The total working storage in bytes in use by the gateway. If no working storage is configured for the gateway, this field returns 0.
        public let workingStorageUsedInBytes: Int64?
        /// The total working storage in bytes allocated for the gateway. If no working storage is configured for the gateway, this field returns 0.
        public let workingStorageAllocatedInBytes: Int64?
        /// An array of the gateway's local disk IDs that are configured as working storage. Each local disk ID is specified as a string (minimum length of 1 and maximum length of 300). If no local disks are configured as working storage, then the DiskIds array is empty.
        public let diskIds: [String]?
        public let gatewayARN: String?

        public init(diskIds: [String]? = nil, gatewayARN: String? = nil, workingStorageAllocatedInBytes: Int64? = nil, workingStorageUsedInBytes: Int64? = nil) {
            self.workingStorageUsedInBytes = workingStorageUsedInBytes
            self.workingStorageAllocatedInBytes = workingStorageAllocatedInBytes
            self.diskIds = diskIds
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case workingStorageUsedInBytes = "WorkingStorageUsedInBytes"
            case workingStorageAllocatedInBytes = "WorkingStorageAllocatedInBytes"
            case diskIds = "DiskIds"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct CachediSCSIVolume: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "VolumeType", required: false, type: .string), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "SourceSnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeUsedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "VolumeStatus", required: false, type: .string), 
            AWSShapeMember(label: "VolumeiSCSIAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "VolumeProgress", required: false, type: .double), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp)
        ]
        /// The size, in bytes, of the volume capacity.
        public let volumeSizeInBytes: Int64?
        /// One of the VolumeType enumeration values that describes the type of the volume.
        public let volumeType: String?
        public let kMSKey: String?
        /// If the cached volume was created from a snapshot, this field contains the snapshot ID used, e.g. snap-78e22663. Otherwise, this field is not included.
        public let sourceSnapshotId: String?
        /// The unique identifier of the volume, e.g. vol-AE4B946D.
        public let volumeId: String?
        /// The size of the data stored on the volume in bytes.  This value is not available for volumes created prior to May 13, 2015, until you store data on the volume. 
        public let volumeUsedInBytes: Int64?
        /// One of the VolumeStatus values that indicates the state of the storage volume.
        public let volumeStatus: String?
        /// An VolumeiSCSIAttributes object that represents a collection of iSCSI attributes for one stored volume.
        public let volumeiSCSIAttributes: VolumeiSCSIAttributes?
        /// Represents the percentage complete if the volume is restoring or bootstrapping that represents the percent of data transferred. This field does not appear in the response if the cached volume is not restoring or bootstrapping.
        public let volumeProgress: Double?
        /// The Amazon Resource Name (ARN) of the storage volume.
        public let volumeARN: String?
        /// The date the volume was created. Volumes created prior to March 28, 2017 don’t have this time stamp.
        public let createdDate: TimeStamp?

        public init(createdDate: TimeStamp? = nil, kMSKey: String? = nil, sourceSnapshotId: String? = nil, volumeARN: String? = nil, volumeId: String? = nil, volumeProgress: Double? = nil, volumeSizeInBytes: Int64? = nil, volumeStatus: String? = nil, volumeType: String? = nil, volumeUsedInBytes: Int64? = nil, volumeiSCSIAttributes: VolumeiSCSIAttributes? = nil) {
            self.volumeSizeInBytes = volumeSizeInBytes
            self.volumeType = volumeType
            self.kMSKey = kMSKey
            self.sourceSnapshotId = sourceSnapshotId
            self.volumeId = volumeId
            self.volumeUsedInBytes = volumeUsedInBytes
            self.volumeStatus = volumeStatus
            self.volumeiSCSIAttributes = volumeiSCSIAttributes
            self.volumeProgress = volumeProgress
            self.volumeARN = volumeARN
            self.createdDate = createdDate
        }

        private enum CodingKeys: String, CodingKey {
            case volumeSizeInBytes = "VolumeSizeInBytes"
            case volumeType = "VolumeType"
            case kMSKey = "KMSKey"
            case sourceSnapshotId = "SourceSnapshotId"
            case volumeId = "VolumeId"
            case volumeUsedInBytes = "VolumeUsedInBytes"
            case volumeStatus = "VolumeStatus"
            case volumeiSCSIAttributes = "VolumeiSCSIAttributes"
            case volumeProgress = "VolumeProgress"
            case volumeARN = "VolumeARN"
            case createdDate = "CreatedDate"
        }
    }

    public struct AddWorkingStorageInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiskIds", required: true, type: .list), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// An array of strings that identify disks that are to be configured as working storage. Each string have a minimum length of 1 and maximum length of 300. You can get the disk IDs from the ListLocalDisks API.
        public let diskIds: [String]
        public let gatewayARN: String

        public init(diskIds: [String], gatewayARN: String) {
            self.diskIds = diskIds
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case diskIds = "DiskIds"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct UpdateGatewaySoftwareNowOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct CreateSnapshotFromVolumeRecoveryPointOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeRecoveryPointTime", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]
        public let snapshotId: String?
        public let volumeRecoveryPointTime: String?
        public let volumeARN: String?

        public init(snapshotId: String? = nil, volumeARN: String? = nil, volumeRecoveryPointTime: String? = nil) {
            self.snapshotId = snapshotId
            self.volumeRecoveryPointTime = volumeRecoveryPointTime
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
            case volumeRecoveryPointTime = "VolumeRecoveryPointTime"
            case volumeARN = "VolumeARN"
        }
    }

    public struct CreateSMBFileShareOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the newly created file share. 
        public let fileShareARN: String?

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
        }
    }

    public struct CreateSMBFileShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequesterPays", required: false, type: .boolean), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "LocationARN", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "InvalidUserList", required: false, type: .list), 
            AWSShapeMember(label: "Role", required: true, type: .string), 
            AWSShapeMember(label: "GuessMIMETypeEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Authentication", required: false, type: .string), 
            AWSShapeMember(label: "DefaultStorageClass", required: false, type: .string), 
            AWSShapeMember(label: "ClientToken", required: true, type: .string), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "ValidUserList", required: false, type: .list), 
            AWSShapeMember(label: "ObjectACL", required: false, type: .enum), 
            AWSShapeMember(label: "ReadOnly", required: false, type: .boolean)
        ]
        /// A value that sets the access control list permission for objects in the Amazon S3 bucket that a file gateway puts objects into. The default value is private.
        public let requesterPays: Bool?
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional.
        public let kMSEncrypted: Bool?
        /// The ARN of the backed storage used for storing file data. 
        public let locationARN: String
        /// The Amazon Resource Name (ARN) of the file gateway on which you want to create a file share.
        public let gatewayARN: String
        /// A list of users or groups in the Active Directory that are not allowed to access the file share. A group must be prefixed with the @ character. For example @group1. Can only be set if Authentication is set to ActiveDirectory.
        public let invalidUserList: [String]?
        /// The ARN of the AWS Identity and Access Management (IAM) role that a file gateway assumes when it accesses the underlying storage. 
        public let role: String
        /// A value that enables guessing of the MIME type for uploaded objects based on file extensions. Set this value to true to enable MIME type guessing, and otherwise to false. The default value is true.
        public let guessMIMETypeEnabled: Bool?
        /// The authentication method that users use to access the file share. Valid values are ActiveDirectory or GuestAccess. The default is ActiveDirectory.
        public let authentication: String?
        /// The default storage class for objects put into an Amazon S3 bucket by the file gateway. Possible values are S3_STANDARD, S3_STANDARD_IA, or S3_ONEZONE_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        public let defaultStorageClass: String?
        /// A unique string value that you supply that is used by file gateway to ensure idempotent file share creation.
        public let clientToken: String
        /// The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. This value can only be set when KMSEncrypted is true. Optional.
        public let kMSKey: String?
        /// A list of users or groups in the Active Directory that are allowed to access the file share. A group must be prefixed with the @ character. For example @group1. Can only be set if Authentication is set to ActiveDirectory.
        public let validUserList: [String]?
        /// A value that sets the access control list permission for objects in the S3 bucket that a file gateway puts objects into. The default value is "private".
        public let objectACL: ObjectACL?
        /// A value that sets the write status of a file share. This value is true if the write status is read-only, and otherwise false.
        public let readOnly: Bool?

        public init(authentication: String? = nil, clientToken: String, defaultStorageClass: String? = nil, gatewayARN: String, guessMIMETypeEnabled: Bool? = nil, invalidUserList: [String]? = nil, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, locationARN: String, objectACL: ObjectACL? = nil, readOnly: Bool? = nil, requesterPays: Bool? = nil, role: String, validUserList: [String]? = nil) {
            self.requesterPays = requesterPays
            self.kMSEncrypted = kMSEncrypted
            self.locationARN = locationARN
            self.gatewayARN = gatewayARN
            self.invalidUserList = invalidUserList
            self.role = role
            self.guessMIMETypeEnabled = guessMIMETypeEnabled
            self.authentication = authentication
            self.defaultStorageClass = defaultStorageClass
            self.clientToken = clientToken
            self.kMSKey = kMSKey
            self.validUserList = validUserList
            self.objectACL = objectACL
            self.readOnly = readOnly
        }

        private enum CodingKeys: String, CodingKey {
            case requesterPays = "RequesterPays"
            case kMSEncrypted = "KMSEncrypted"
            case locationARN = "LocationARN"
            case gatewayARN = "GatewayARN"
            case invalidUserList = "InvalidUserList"
            case role = "Role"
            case guessMIMETypeEnabled = "GuessMIMETypeEnabled"
            case authentication = "Authentication"
            case defaultStorageClass = "DefaultStorageClass"
            case clientToken = "ClientToken"
            case kMSKey = "KMSKey"
            case validUserList = "ValidUserList"
            case objectACL = "ObjectACL"
            case readOnly = "ReadOnly"
        }
    }

    public struct DescribeTapeRecoveryPointsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer)
        ]
        public let gatewayARN: String
        /// An opaque string that indicates the position at which to begin describing the virtual tape recovery points.
        public let marker: String?
        /// Specifies that the number of virtual tape recovery points that are described be limited to the specified number.
        public let limit: Int32?

        public init(gatewayARN: String, limit: Int32? = nil, marker: String? = nil) {
            self.gatewayARN = gatewayARN
            self.marker = marker
            self.limit = limit
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case marker = "Marker"
            case limit = "Limit"
        }
    }

    public struct CreateTapesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARNs", required: false, type: .list)
        ]
        /// A list of unique Amazon Resource Names (ARNs) that represents the virtual tapes that were created.
        public let tapeARNs: [String]?

        public init(tapeARNs: [String]? = nil) {
            self.tapeARNs = tapeARNs
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARNs = "TapeARNs"
        }
    }

    public struct CreateTapesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "TapeBarcodePrefix", required: true, type: .string), 
            AWSShapeMember(label: "NumTapesToCreate", required: true, type: .integer), 
            AWSShapeMember(label: "TapeSizeInBytes", required: true, type: .long), 
            AWSShapeMember(label: "ClientToken", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the AWS KMS key used for Amazon S3 server side encryption. This value can only be set when KMSEncrypted is true. Optional.
        public let kMSKey: String?
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional.
        public let kMSEncrypted: Bool?
        /// A prefix that you append to the barcode of the virtual tape you are creating. This prefix makes the barcode unique.  The prefix must be 1 to 4 characters in length and must be one of the uppercase letters from A to Z. 
        public let tapeBarcodePrefix: String
        /// The number of virtual tapes that you want to create.
        public let numTapesToCreate: Int32
        /// The size, in bytes, of the virtual tapes that you want to create.  The size must be aligned by gigabyte (1024*1024*1024 byte). 
        public let tapeSizeInBytes: Int64
        /// A unique identifier that you use to retry a request. If you retry a request, use the same ClientToken you specified in the initial request.  Using the same ClientToken prevents creating the tape multiple times. 
        public let clientToken: String
        /// The unique Amazon Resource Name (ARN) that represents the gateway to associate the virtual tapes with. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String

        public init(clientToken: String, gatewayARN: String, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, numTapesToCreate: Int32, tapeBarcodePrefix: String, tapeSizeInBytes: Int64) {
            self.kMSKey = kMSKey
            self.kMSEncrypted = kMSEncrypted
            self.tapeBarcodePrefix = tapeBarcodePrefix
            self.numTapesToCreate = numTapesToCreate
            self.tapeSizeInBytes = tapeSizeInBytes
            self.clientToken = clientToken
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case kMSKey = "KMSKey"
            case kMSEncrypted = "KMSEncrypted"
            case tapeBarcodePrefix = "TapeBarcodePrefix"
            case numTapesToCreate = "NumTapesToCreate"
            case tapeSizeInBytes = "TapeSizeInBytes"
            case clientToken = "ClientToken"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ShutdownGatewayOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ListVolumesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeInfos", required: false, type: .list), 
            AWSShapeMember(label: "Marker", required: false, type: .string)
        ]
        public let gatewayARN: String?
        public let volumeInfos: [VolumeInfo]?
        public let marker: String?

        public init(gatewayARN: String? = nil, marker: String? = nil, volumeInfos: [VolumeInfo]? = nil) {
            self.gatewayARN = gatewayARN
            self.volumeInfos = volumeInfos
            self.marker = marker
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case volumeInfos = "VolumeInfos"
            case marker = "Marker"
        }
    }

    public struct DescribeStorediSCSIVolumesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorediSCSIVolumes", required: false, type: .list)
        ]
        public let storediSCSIVolumes: [StorediSCSIVolume]?

        public init(storediSCSIVolumes: [StorediSCSIVolume]? = nil) {
            self.storediSCSIVolumes = storediSCSIVolumes
        }

        private enum CodingKeys: String, CodingKey {
            case storediSCSIVolumes = "StorediSCSIVolumes"
        }
    }

    public struct GatewayInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayType", required: false, type: .string), 
            AWSShapeMember(label: "GatewayName", required: false, type: .string), 
            AWSShapeMember(label: "GatewayId", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "GatewayOperationalState", required: false, type: .string)
        ]
        /// The type of the gateway.
        public let gatewayType: String?
        /// The name of the gateway.
        public let gatewayName: String?
        /// The unique identifier assigned to your gateway during activation. This ID becomes part of the gateway Amazon Resource Name (ARN), which you use as input for other operations.
        public let gatewayId: String?
        /// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String?
        /// The state of the gateway. Valid Values: DISABLED or ACTIVE
        public let gatewayOperationalState: String?

        public init(gatewayARN: String? = nil, gatewayId: String? = nil, gatewayName: String? = nil, gatewayOperationalState: String? = nil, gatewayType: String? = nil) {
            self.gatewayType = gatewayType
            self.gatewayName = gatewayName
            self.gatewayId = gatewayId
            self.gatewayARN = gatewayARN
            self.gatewayOperationalState = gatewayOperationalState
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayType = "GatewayType"
            case gatewayName = "GatewayName"
            case gatewayId = "GatewayId"
            case gatewayARN = "GatewayARN"
            case gatewayOperationalState = "GatewayOperationalState"
        }
    }

    public struct CreateTapeWithBarcodeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]
        /// A unique Amazon Resource Name (ARN) that represents the virtual tape that was created.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct CreateSnapshotFromVolumeRecoveryPointInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: true, type: .string), 
            AWSShapeMember(label: "SnapshotDescription", required: true, type: .string)
        ]
        public let volumeARN: String
        public let snapshotDescription: String

        public init(snapshotDescription: String, volumeARN: String) {
            self.volumeARN = volumeARN
            self.snapshotDescription = snapshotDescription
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
            case snapshotDescription = "SnapshotDescription"
        }
    }

    public struct UpdateGatewayInformationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayName", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "GatewayTimezone", required: false, type: .string)
        ]
        public let gatewayName: String?
        public let gatewayARN: String
        public let gatewayTimezone: String?

        public init(gatewayARN: String, gatewayName: String? = nil, gatewayTimezone: String? = nil) {
            self.gatewayName = gatewayName
            self.gatewayARN = gatewayARN
            self.gatewayTimezone = gatewayTimezone
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayName = "GatewayName"
            case gatewayARN = "GatewayARN"
            case gatewayTimezone = "GatewayTimezone"
        }
    }

    public struct ResetCacheOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct AddCacheOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct UpdateNFSFileShareOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the updated file share. 
        public let fileShareARN: String?

        public init(fileShareARN: String? = nil) {
            self.fileShareARN = fileShareARN
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
        }
    }

    public struct NFSFileShareInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GuessMIMETypeEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Role", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "NFSFileShareDefaults", required: false, type: .structure), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "FileShareStatus", required: false, type: .string), 
            AWSShapeMember(label: "LocationARN", required: false, type: .string), 
            AWSShapeMember(label: "RequesterPays", required: false, type: .boolean), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "DefaultStorageClass", required: false, type: .string), 
            AWSShapeMember(label: "Squash", required: false, type: .string), 
            AWSShapeMember(label: "ClientList", required: false, type: .list), 
            AWSShapeMember(label: "ObjectACL", required: false, type: .enum), 
            AWSShapeMember(label: "ReadOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "FileShareARN", required: false, type: .string), 
            AWSShapeMember(label: "FileShareId", required: false, type: .string), 
            AWSShapeMember(label: "Path", required: false, type: .string)
        ]
        /// A value that enables guessing of the MIME type for uploaded objects based on file extensions. Set this value to true to enable MIME type guessing, and otherwise to false. The default value is true.
        public let guessMIMETypeEnabled: Bool?
        public let role: String?
        public let gatewayARN: String?
        public let nFSFileShareDefaults: NFSFileShareDefaults?
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional. 
        public let kMSEncrypted: Bool?
        public let fileShareStatus: String?
        public let locationARN: String?
        /// A value that sets the access control list permission for objects in the Amazon S3 bucket that a file gateway puts objects into. The default value is private.
        public let requesterPays: Bool?
        public let kMSKey: String?
        /// The default storage class for objects put into an Amazon S3 bucket by the file gateway. Possible values are S3_STANDARD, S3_STANDARD_IA, or S3_ONEZONE_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        public let defaultStorageClass: String?
        public let squash: String?
        public let clientList: [String]?
        public let objectACL: ObjectACL?
        /// A value that sets the write status of a file share. This value is true if the write status is read-only, and otherwise false.
        public let readOnly: Bool?
        public let fileShareARN: String?
        public let fileShareId: String?
        public let path: String?

        public init(clientList: [String]? = nil, defaultStorageClass: String? = nil, fileShareARN: String? = nil, fileShareId: String? = nil, fileShareStatus: String? = nil, gatewayARN: String? = nil, guessMIMETypeEnabled: Bool? = nil, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, locationARN: String? = nil, nFSFileShareDefaults: NFSFileShareDefaults? = nil, objectACL: ObjectACL? = nil, path: String? = nil, readOnly: Bool? = nil, requesterPays: Bool? = nil, role: String? = nil, squash: String? = nil) {
            self.guessMIMETypeEnabled = guessMIMETypeEnabled
            self.role = role
            self.gatewayARN = gatewayARN
            self.nFSFileShareDefaults = nFSFileShareDefaults
            self.kMSEncrypted = kMSEncrypted
            self.fileShareStatus = fileShareStatus
            self.locationARN = locationARN
            self.requesterPays = requesterPays
            self.kMSKey = kMSKey
            self.defaultStorageClass = defaultStorageClass
            self.squash = squash
            self.clientList = clientList
            self.objectACL = objectACL
            self.readOnly = readOnly
            self.fileShareARN = fileShareARN
            self.fileShareId = fileShareId
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case guessMIMETypeEnabled = "GuessMIMETypeEnabled"
            case role = "Role"
            case gatewayARN = "GatewayARN"
            case nFSFileShareDefaults = "NFSFileShareDefaults"
            case kMSEncrypted = "KMSEncrypted"
            case fileShareStatus = "FileShareStatus"
            case locationARN = "LocationARN"
            case requesterPays = "RequesterPays"
            case kMSKey = "KMSKey"
            case defaultStorageClass = "DefaultStorageClass"
            case squash = "Squash"
            case clientList = "ClientList"
            case objectACL = "ObjectACL"
            case readOnly = "ReadOnly"
            case fileShareARN = "FileShareARN"
            case fileShareId = "FileShareId"
            case path = "Path"
        }
    }

    public struct RetrieveTapeArchiveOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the retrieved virtual tape.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct ListLocalDisksOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Disks", required: false, type: .list), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let disks: [Disk]?
        public let gatewayARN: String?

        public init(disks: [Disk]? = nil, gatewayARN: String? = nil) {
            self.disks = disks
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case disks = "Disks"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct RetrieveTapeArchiveInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape you want to retrieve from the virtual tape shelf (VTS).
        public let tapeARN: String
        /// The Amazon Resource Name (ARN) of the gateway you want to retrieve the virtual tape to. Use the ListGateways operation to return a list of gateways for your account and region. You retrieve archived virtual tapes to only one gateway and the gateway must be a tape gateway.
        public let gatewayARN: String

        public init(gatewayARN: String, tapeARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct ListGatewaysOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Gateways", required: false, type: .list)
        ]
        public let marker: String?
        public let gateways: [GatewayInfo]?

        public init(gateways: [GatewayInfo]? = nil, marker: String? = nil) {
            self.marker = marker
            self.gateways = gateways
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case gateways = "Gateways"
        }
    }

    public struct AddTagsToResourceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceARN", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource you want to add tags to.
        public let resourceARN: String
        /// The key-value pair that represents the tag you want to add to the resource. The value can be an empty string.  Valid characters for key and value are letters, spaces, and numbers representable in UTF-8 format, and the following special characters: + - = . _ : / @. 
        public let tags: [Tag]

        public init(resourceARN: String, tags: [Tag]) {
            self.resourceARN = resourceARN
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceARN = "ResourceARN"
            case tags = "Tags"
        }
    }

    public struct DescribeSMBFileSharesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SMBFileShareInfoList", required: false, type: .list)
        ]
        /// An array containing a description for each requested file share. 
        public let sMBFileShareInfoList: [SMBFileShareInfo]?

        public init(sMBFileShareInfoList: [SMBFileShareInfo]? = nil) {
            self.sMBFileShareInfoList = sMBFileShareInfoList
        }

        private enum CodingKeys: String, CodingKey {
            case sMBFileShareInfoList = "SMBFileShareInfoList"
        }
    }

    public struct RemoveTagsFromResourceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagKeys", required: true, type: .list), 
            AWSShapeMember(label: "ResourceARN", required: true, type: .string)
        ]
        /// The keys of the tags you want to remove from the specified resource. A tag is composed of a key/value pair.
        public let tagKeys: [String]
        /// The Amazon Resource Name (ARN) of the resource you want to remove the tags from.
        public let resourceARN: String

        public init(resourceARN: String, tagKeys: [String]) {
            self.tagKeys = tagKeys
            self.resourceARN = resourceARN
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeys = "TagKeys"
            case resourceARN = "ResourceARN"
        }
    }

    public struct CreateNFSFileShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Role", required: true, type: .string), 
            AWSShapeMember(label: "ClientList", required: false, type: .list), 
            AWSShapeMember(label: "LocationARN", required: true, type: .string), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "DefaultStorageClass", required: false, type: .string), 
            AWSShapeMember(label: "GuessMIMETypeEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "NFSFileShareDefaults", required: false, type: .structure), 
            AWSShapeMember(label: "Squash", required: false, type: .string), 
            AWSShapeMember(label: "RequesterPays", required: false, type: .boolean), 
            AWSShapeMember(label: "ObjectACL", required: false, type: .enum), 
            AWSShapeMember(label: "ClientToken", required: true, type: .string), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "ReadOnly", required: false, type: .boolean)
        ]
        /// The ARN of the AWS Identity and Access Management (IAM) role that a file gateway assumes when it accesses the underlying storage. 
        public let role: String
        /// The list of clients that are allowed to access the file gateway. The list must contain either valid IP addresses or valid CIDR blocks. 
        public let clientList: [String]?
        /// The ARN of the backed storage used for storing file data. 
        public let locationARN: String
        /// True to use Amazon S3 server side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional.
        public let kMSEncrypted: Bool?
        /// The default storage class for objects put into an Amazon S3 bucket by the file gateway. Possible values are S3_STANDARD, S3_STANDARD_IA, or S3_ONEZONE_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        public let defaultStorageClass: String?
        /// A value that enables guessing of the MIME type for uploaded objects based on file extensions. Set this value to true to enable MIME type guessing, and otherwise to false. The default value is true.
        public let guessMIMETypeEnabled: Bool?
        /// File share default values. Optional.
        public let nFSFileShareDefaults: NFSFileShareDefaults?
        /// Maps a user to anonymous user. Valid options are the following:     RootSquash - Only root is mapped to anonymous user.    NoSquash - No one is mapped to anonymous user    AllSquash - Everyone is mapped to anonymous user.  
        public let squash: String?
        /// A value that sets the access control list permission for objects in the Amazon S3 bucket that a file gateway puts objects into. The default value is private.
        public let requesterPays: Bool?
        /// A value that sets the access control list permission for objects in the S3 bucket that a file gateway puts objects into. The default value is "private".
        public let objectACL: ObjectACL?
        /// A unique string value that you supply that is used by file gateway to ensure idempotent file share creation.
        public let clientToken: String
        /// The Amazon Resource Name (ARN) AWS KMS key used for Amazon S3 server side encryption. This value can only be set when KMSEncrypted is true. Optional.
        public let kMSKey: String?
        /// The Amazon Resource Name (ARN) of the file gateway on which you want to create a file share.
        public let gatewayARN: String
        /// A value that sets the write status of a file share. This value is true if the write status is read-only, and otherwise false.
        public let readOnly: Bool?

        public init(clientList: [String]? = nil, clientToken: String, defaultStorageClass: String? = nil, gatewayARN: String, guessMIMETypeEnabled: Bool? = nil, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, locationARN: String, nFSFileShareDefaults: NFSFileShareDefaults? = nil, objectACL: ObjectACL? = nil, readOnly: Bool? = nil, requesterPays: Bool? = nil, role: String, squash: String? = nil) {
            self.role = role
            self.clientList = clientList
            self.locationARN = locationARN
            self.kMSEncrypted = kMSEncrypted
            self.defaultStorageClass = defaultStorageClass
            self.guessMIMETypeEnabled = guessMIMETypeEnabled
            self.nFSFileShareDefaults = nFSFileShareDefaults
            self.squash = squash
            self.requesterPays = requesterPays
            self.objectACL = objectACL
            self.clientToken = clientToken
            self.kMSKey = kMSKey
            self.gatewayARN = gatewayARN
            self.readOnly = readOnly
        }

        private enum CodingKeys: String, CodingKey {
            case role = "Role"
            case clientList = "ClientList"
            case locationARN = "LocationARN"
            case kMSEncrypted = "KMSEncrypted"
            case defaultStorageClass = "DefaultStorageClass"
            case guessMIMETypeEnabled = "GuessMIMETypeEnabled"
            case nFSFileShareDefaults = "NFSFileShareDefaults"
            case squash = "Squash"
            case requesterPays = "RequesterPays"
            case objectACL = "ObjectACL"
            case clientToken = "ClientToken"
            case kMSKey = "KMSKey"
            case gatewayARN = "GatewayARN"
            case readOnly = "ReadOnly"
        }
    }

    public struct TapeArchive: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CompletionTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TapeARN", required: false, type: .string), 
            AWSShapeMember(label: "TapeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "RetrievedTo", required: false, type: .string), 
            AWSShapeMember(label: "TapeUsedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "TapeBarcode", required: false, type: .string), 
            AWSShapeMember(label: "TapeCreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "TapeStatus", required: false, type: .string), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string)
        ]
        /// The time that the archiving of the virtual tape was completed. The default time stamp format is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.
        public let completionTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of an archived virtual tape.
        public let tapeARN: String?
        /// The size, in bytes, of the archived virtual tape.
        public let tapeSizeInBytes: Int64?
        /// The Amazon Resource Name (ARN) of the tape gateway that the virtual tape is being retrieved to. The virtual tape is retrieved from the virtual tape shelf (VTS).
        public let retrievedTo: String?
        /// The size, in bytes, of data stored on the virtual tape.  This value is not available for tapes created prior to May 13, 2015. 
        public let tapeUsedInBytes: Int64?
        /// The barcode that identifies the archived virtual tape.
        public let tapeBarcode: String?
        /// The date the virtual tape was created.
        public let tapeCreatedDate: TimeStamp?
        /// The current state of the archived virtual tape.
        public let tapeStatus: String?
        public let kMSKey: String?

        public init(completionTime: TimeStamp? = nil, kMSKey: String? = nil, retrievedTo: String? = nil, tapeARN: String? = nil, tapeBarcode: String? = nil, tapeCreatedDate: TimeStamp? = nil, tapeSizeInBytes: Int64? = nil, tapeStatus: String? = nil, tapeUsedInBytes: Int64? = nil) {
            self.completionTime = completionTime
            self.tapeARN = tapeARN
            self.tapeSizeInBytes = tapeSizeInBytes
            self.retrievedTo = retrievedTo
            self.tapeUsedInBytes = tapeUsedInBytes
            self.tapeBarcode = tapeBarcode
            self.tapeCreatedDate = tapeCreatedDate
            self.tapeStatus = tapeStatus
            self.kMSKey = kMSKey
        }

        private enum CodingKeys: String, CodingKey {
            case completionTime = "CompletionTime"
            case tapeARN = "TapeARN"
            case tapeSizeInBytes = "TapeSizeInBytes"
            case retrievedTo = "RetrievedTo"
            case tapeUsedInBytes = "TapeUsedInBytes"
            case tapeBarcode = "TapeBarcode"
            case tapeCreatedDate = "TapeCreatedDate"
            case tapeStatus = "TapeStatus"
            case kMSKey = "KMSKey"
        }
    }

    public struct VolumeInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "VolumeId", required: false, type: .string), 
            AWSShapeMember(label: "GatewayId", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeType", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) for the storage volume. For example, the following is a valid ARN:  arn:aws:storagegateway:us-east-2:111122223333:gateway/sgw-12A3456B/volume/vol-1122AABB   Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let volumeARN: String?
        /// The size of the volume in bytes. Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let volumeSizeInBytes: Int64?
        /// The unique identifier assigned to the volume. This ID becomes part of the volume Amazon Resource Name (ARN), which you use as input for other operations.  Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let volumeId: String?
        /// The unique identifier assigned to your gateway during activation. This ID becomes part of the gateway Amazon Resource Name (ARN), which you use as input for other operations.  Valid Values: 50 to 500 lowercase letters, numbers, periods (.), and hyphens (-).
        public let gatewayId: String?
        public let gatewayARN: String?
        public let volumeType: String?

        public init(gatewayARN: String? = nil, gatewayId: String? = nil, volumeARN: String? = nil, volumeId: String? = nil, volumeSizeInBytes: Int64? = nil, volumeType: String? = nil) {
            self.volumeARN = volumeARN
            self.volumeSizeInBytes = volumeSizeInBytes
            self.volumeId = volumeId
            self.gatewayId = gatewayId
            self.gatewayARN = gatewayARN
            self.volumeType = volumeType
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
            case volumeSizeInBytes = "VolumeSizeInBytes"
            case volumeId = "VolumeId"
            case gatewayId = "GatewayId"
            case gatewayARN = "GatewayARN"
            case volumeType = "VolumeType"
        }
    }

    public struct AddCacheInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiskIds", required: true, type: .list), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let diskIds: [String]
        public let gatewayARN: String

        public init(diskIds: [String], gatewayARN: String) {
            self.diskIds = diskIds
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case diskIds = "DiskIds"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct UpdateMaintenanceStartTimeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeTapesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "Tapes", required: false, type: .list)
        ]
        /// An opaque string which can be used as part of a subsequent DescribeTapes call to retrieve the next page of results. If a response does not contain a marker, then there are no more results to be retrieved.
        public let marker: String?
        /// An array of virtual tape descriptions.
        public let tapes: [Tape]?

        public init(marker: String? = nil, tapes: [Tape]? = nil) {
            self.marker = marker
            self.tapes = tapes
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case tapes = "Tapes"
        }
    }

    public struct TapeInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "TapeARN", required: false, type: .string), 
            AWSShapeMember(label: "TapeBarcode", required: false, type: .string), 
            AWSShapeMember(label: "TapeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "TapeStatus", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the gateway. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String?
        /// The Amazon Resource Name (ARN) of a virtual tape.
        public let tapeARN: String?
        /// The barcode that identifies a specific virtual tape.
        public let tapeBarcode: String?
        /// The size, in bytes, of a virtual tape.
        public let tapeSizeInBytes: Int64?
        /// The status of the tape.
        public let tapeStatus: String?

        public init(gatewayARN: String? = nil, tapeARN: String? = nil, tapeBarcode: String? = nil, tapeSizeInBytes: Int64? = nil, tapeStatus: String? = nil) {
            self.gatewayARN = gatewayARN
            self.tapeARN = tapeARN
            self.tapeBarcode = tapeBarcode
            self.tapeSizeInBytes = tapeSizeInBytes
            self.tapeStatus = tapeStatus
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case tapeARN = "TapeARN"
            case tapeBarcode = "TapeBarcode"
            case tapeSizeInBytes = "TapeSizeInBytes"
            case tapeStatus = "TapeStatus"
        }
    }

    public struct DescribeNFSFileSharesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NFSFileShareInfoList", required: false, type: .list)
        ]
        /// An array containing a description for each requested file share. 
        public let nFSFileShareInfoList: [NFSFileShareInfo]?

        public init(nFSFileShareInfoList: [NFSFileShareInfo]? = nil) {
            self.nFSFileShareInfoList = nFSFileShareInfoList
        }

        private enum CodingKeys: String, CodingKey {
            case nFSFileShareInfoList = "NFSFileShareInfoList"
        }
    }

    public struct DescribeStorediSCSIVolumesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARNs", required: true, type: .list)
        ]
        /// An array of strings where each string represents the Amazon Resource Name (ARN) of a stored volume. All of the specified stored volumes must from the same gateway. Use ListVolumes to get volume ARNs for a gateway.
        public let volumeARNs: [String]

        public init(volumeARNs: [String]) {
            self.volumeARNs = volumeARNs
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARNs = "VolumeARNs"
        }
    }

    public struct ResetCacheInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct RefreshCacheOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARN", required: false, type: .string), 
            AWSShapeMember(label: "NotificationId", required: false, type: .string)
        ]
        public let fileShareARN: String?
        public let notificationId: String?

        public init(fileShareARN: String? = nil, notificationId: String? = nil) {
            self.fileShareARN = fileShareARN
            self.notificationId = notificationId
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARN = "FileShareARN"
            case notificationId = "NotificationId"
        }
    }

    public struct DescribeSnapshotScheduleOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecurrenceInHours", required: false, type: .integer), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "StartAt", required: false, type: .integer), 
            AWSShapeMember(label: "Timezone", required: false, type: .string)
        ]
        public let recurrenceInHours: Int32?
        public let description: String?
        public let volumeARN: String?
        public let startAt: Int32?
        public let timezone: String?

        public init(description: String? = nil, recurrenceInHours: Int32? = nil, startAt: Int32? = nil, timezone: String? = nil, volumeARN: String? = nil) {
            self.recurrenceInHours = recurrenceInHours
            self.description = description
            self.volumeARN = volumeARN
            self.startAt = startAt
            self.timezone = timezone
        }

        private enum CodingKeys: String, CodingKey {
            case recurrenceInHours = "RecurrenceInHours"
            case description = "Description"
            case volumeARN = "VolumeARN"
            case startAt = "StartAt"
            case timezone = "Timezone"
        }
    }

    public struct CreateSnapshotOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]
        /// The snapshot ID that is used to refer to the snapshot in future operations such as describing snapshots (Amazon Elastic Compute Cloud API DescribeSnapshots) or creating a volume from a snapshot (CreateStorediSCSIVolume).
        public let snapshotId: String?
        /// The Amazon Resource Name (ARN) of the volume of which the snapshot was taken.
        public let volumeARN: String?

        public init(snapshotId: String? = nil, volumeARN: String? = nil) {
            self.snapshotId = snapshotId
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
            case volumeARN = "VolumeARN"
        }
    }

    public struct SMBFileShareInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "Path", required: false, type: .string), 
            AWSShapeMember(label: "FileShareARN", required: false, type: .string), 
            AWSShapeMember(label: "FileShareStatus", required: false, type: .string), 
            AWSShapeMember(label: "RequesterPays", required: false, type: .boolean), 
            AWSShapeMember(label: "Authentication", required: false, type: .string), 
            AWSShapeMember(label: "ReadOnly", required: false, type: .boolean), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "Role", required: false, type: .string), 
            AWSShapeMember(label: "KMSEncrypted", required: false, type: .boolean), 
            AWSShapeMember(label: "ObjectACL", required: false, type: .enum), 
            AWSShapeMember(label: "InvalidUserList", required: false, type: .list), 
            AWSShapeMember(label: "DefaultStorageClass", required: false, type: .string), 
            AWSShapeMember(label: "LocationARN", required: false, type: .string), 
            AWSShapeMember(label: "FileShareId", required: false, type: .string), 
            AWSShapeMember(label: "GuessMIMETypeEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "ValidUserList", required: false, type: .list)
        ]
        public let gatewayARN: String?
        /// The file share path used by the SMB client to identify the mount point.
        public let path: String?
        public let fileShareARN: String?
        public let fileShareStatus: String?
        /// A value that sets the access control list permission for objects in the Amazon S3 bucket that a file gateway puts objects into. The default value is private.
        public let requesterPays: Bool?
        public let authentication: String?
        /// A value that sets the write status of a file share. This value is true if the write status is read-only, and otherwise false.
        public let readOnly: Bool?
        public let kMSKey: String?
        public let role: String?
        /// True to use Amazon S3 server-side encryption with your own AWS KMS key, or false to use a key managed by Amazon S3. Optional. 
        public let kMSEncrypted: Bool?
        public let objectACL: ObjectACL?
        /// A list of users or groups in the Active Directory that are not allowed to access the file share. A group must be prefixed with the @ character. For example @group1. Can only be set if Authentication is set to ActiveDirectory.
        public let invalidUserList: [String]?
        /// The default storage class for objects put into an Amazon S3 bucket by the file gateway. Possible values are S3_STANDARD, S3_STANDARD_IA, or S3_ONEZONE_IA. If this field is not populated, the default value S3_STANDARD is used. Optional.
        public let defaultStorageClass: String?
        public let locationARN: String?
        public let fileShareId: String?
        /// A value that enables guessing of the MIME type for uploaded objects based on file extensions. Set this value to true to enable MIME type guessing, and otherwise to false. The default value is true.
        public let guessMIMETypeEnabled: Bool?
        /// A list of users or groups in the Active Directory that are allowed to access the file share. A group must be prefixed with the @ character. For example @group1. Can only be set if Authentication is set to ActiveDirectory.
        public let validUserList: [String]?

        public init(authentication: String? = nil, defaultStorageClass: String? = nil, fileShareARN: String? = nil, fileShareId: String? = nil, fileShareStatus: String? = nil, gatewayARN: String? = nil, guessMIMETypeEnabled: Bool? = nil, invalidUserList: [String]? = nil, kMSEncrypted: Bool? = nil, kMSKey: String? = nil, locationARN: String? = nil, objectACL: ObjectACL? = nil, path: String? = nil, readOnly: Bool? = nil, requesterPays: Bool? = nil, role: String? = nil, validUserList: [String]? = nil) {
            self.gatewayARN = gatewayARN
            self.path = path
            self.fileShareARN = fileShareARN
            self.fileShareStatus = fileShareStatus
            self.requesterPays = requesterPays
            self.authentication = authentication
            self.readOnly = readOnly
            self.kMSKey = kMSKey
            self.role = role
            self.kMSEncrypted = kMSEncrypted
            self.objectACL = objectACL
            self.invalidUserList = invalidUserList
            self.defaultStorageClass = defaultStorageClass
            self.locationARN = locationARN
            self.fileShareId = fileShareId
            self.guessMIMETypeEnabled = guessMIMETypeEnabled
            self.validUserList = validUserList
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case path = "Path"
            case fileShareARN = "FileShareARN"
            case fileShareStatus = "FileShareStatus"
            case requesterPays = "RequesterPays"
            case authentication = "Authentication"
            case readOnly = "ReadOnly"
            case kMSKey = "KMSKey"
            case role = "Role"
            case kMSEncrypted = "KMSEncrypted"
            case objectACL = "ObjectACL"
            case invalidUserList = "InvalidUserList"
            case defaultStorageClass = "DefaultStorageClass"
            case locationARN = "LocationARN"
            case fileShareId = "FileShareId"
            case guessMIMETypeEnabled = "GuessMIMETypeEnabled"
            case validUserList = "ValidUserList"
        }
    }

    public struct DescribeChapCredentialsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChapCredentials", required: false, type: .list)
        ]
        /// An array of ChapInfo objects that represent CHAP credentials. Each object in the array contains CHAP credential information for one target-initiator pair. If no CHAP credentials are set, an empty array is returned. CHAP credential information is provided in a JSON object with the following fields:    InitiatorName: The iSCSI initiator that connects to the target.    SecretToAuthenticateInitiator: The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.    SecretToAuthenticateTarget: The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client).    TargetARN: The Amazon Resource Name (ARN) of the storage volume.  
        public let chapCredentials: [ChapInfo]?

        public init(chapCredentials: [ChapInfo]? = nil) {
            self.chapCredentials = chapCredentials
        }

        private enum CodingKeys: String, CodingKey {
            case chapCredentials = "ChapCredentials"
        }
    }

    public struct NetworkInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MacAddress", required: false, type: .string), 
            AWSShapeMember(label: "Ipv4Address", required: false, type: .string), 
            AWSShapeMember(label: "Ipv6Address", required: false, type: .string)
        ]
        /// The Media Access Control (MAC) address of the interface.  This is currently unsupported and will not be returned in output. 
        public let macAddress: String?
        /// The Internet Protocol version 4 (IPv4) address of the interface.
        public let ipv4Address: String?
        /// The Internet Protocol version 6 (IPv6) address of the interface. Currently not supported.
        public let ipv6Address: String?

        public init(ipv4Address: String? = nil, ipv6Address: String? = nil, macAddress: String? = nil) {
            self.macAddress = macAddress
            self.ipv4Address = ipv4Address
            self.ipv6Address = ipv6Address
        }

        private enum CodingKeys: String, CodingKey {
            case macAddress = "MacAddress"
            case ipv4Address = "Ipv4Address"
            case ipv6Address = "Ipv6Address"
        }
    }

    public struct DeleteBandwidthRateLimitOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DeleteChapCredentialsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: true, type: .string), 
            AWSShapeMember(label: "InitiatorName", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the iSCSI volume target. Use the DescribeStorediSCSIVolumes operation to return to retrieve the TargetARN for specified VolumeARN.
        public let targetARN: String
        /// The iSCSI initiator that connects to the target.
        public let initiatorName: String

        public init(initiatorName: String, targetARN: String) {
            self.targetARN = targetARN
            self.initiatorName = initiatorName
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
            case initiatorName = "InitiatorName"
        }
    }

    public struct RetrieveTapeRecoveryPointInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape for which you want to retrieve the recovery point.
        public let tapeARN: String
        public let gatewayARN: String

        public init(gatewayARN: String, tapeARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct SetLocalConsolePasswordInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LocalConsolePassword", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// The password you want to set for your VM local console.
        public let localConsolePassword: String
        public let gatewayARN: String

        public init(gatewayARN: String, localConsolePassword: String) {
            self.localConsolePassword = localConsolePassword
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case localConsolePassword = "LocalConsolePassword"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeGatewayInformationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayName", required: false, type: .string), 
            AWSShapeMember(label: "GatewayType", required: false, type: .string), 
            AWSShapeMember(label: "GatewayTimezone", required: false, type: .string), 
            AWSShapeMember(label: "GatewayNetworkInterfaces", required: false, type: .list), 
            AWSShapeMember(label: "NextUpdateAvailabilityDate", required: false, type: .string), 
            AWSShapeMember(label: "GatewayId", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "LastSoftwareUpdate", required: false, type: .string), 
            AWSShapeMember(label: "GatewayState", required: false, type: .string)
        ]
        /// The name you configured for your gateway.
        public let gatewayName: String?
        /// The type of the gateway.
        public let gatewayType: String?
        /// A value that indicates the time zone configured for the gateway.
        public let gatewayTimezone: String?
        /// A NetworkInterface array that contains descriptions of the gateway network interfaces.
        public let gatewayNetworkInterfaces: [NetworkInterface]?
        /// The date on which an update to the gateway is available. This date is in the time zone of the gateway. If the gateway is not available for an update this field is not returned in the response.
        public let nextUpdateAvailabilityDate: String?
        /// The unique identifier assigned to your gateway during activation. This ID becomes part of the gateway Amazon Resource Name (ARN), which you use as input for other operations.
        public let gatewayId: String?
        public let gatewayARN: String?
        /// The date on which the last software update was applied to the gateway. If the gateway has never been updated, this field does not return a value in the response.
        public let lastSoftwareUpdate: String?
        /// A value that indicates the operating state of the gateway.
        public let gatewayState: String?

        public init(gatewayARN: String? = nil, gatewayId: String? = nil, gatewayName: String? = nil, gatewayNetworkInterfaces: [NetworkInterface]? = nil, gatewayState: String? = nil, gatewayTimezone: String? = nil, gatewayType: String? = nil, lastSoftwareUpdate: String? = nil, nextUpdateAvailabilityDate: String? = nil) {
            self.gatewayName = gatewayName
            self.gatewayType = gatewayType
            self.gatewayTimezone = gatewayTimezone
            self.gatewayNetworkInterfaces = gatewayNetworkInterfaces
            self.nextUpdateAvailabilityDate = nextUpdateAvailabilityDate
            self.gatewayId = gatewayId
            self.gatewayARN = gatewayARN
            self.lastSoftwareUpdate = lastSoftwareUpdate
            self.gatewayState = gatewayState
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayName = "GatewayName"
            case gatewayType = "GatewayType"
            case gatewayTimezone = "GatewayTimezone"
            case gatewayNetworkInterfaces = "GatewayNetworkInterfaces"
            case nextUpdateAvailabilityDate = "NextUpdateAvailabilityDate"
            case gatewayId = "GatewayId"
            case gatewayARN = "GatewayARN"
            case lastSoftwareUpdate = "LastSoftwareUpdate"
            case gatewayState = "GatewayState"
        }
    }

    public struct UpdateSnapshotScheduleInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: true, type: .string), 
            AWSShapeMember(label: "RecurrenceInHours", required: true, type: .integer), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "StartAt", required: true, type: .integer)
        ]
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        public let volumeARN: String
        /// Frequency of snapshots. Specify the number of hours between snapshots.
        public let recurrenceInHours: Int32
        /// Optional description of the snapshot that overwrites the existing description.
        public let description: String?
        /// The hour of the day at which the snapshot schedule begins represented as hh, where hh is the hour (0 to 23). The hour of the day is in the time zone of the gateway.
        public let startAt: Int32

        public init(description: String? = nil, recurrenceInHours: Int32, startAt: Int32, volumeARN: String) {
            self.volumeARN = volumeARN
            self.recurrenceInHours = recurrenceInHours
            self.description = description
            self.startAt = startAt
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
            case recurrenceInHours = "RecurrenceInHours"
            case description = "Description"
            case startAt = "StartAt"
        }
    }

    public struct DescribeSMBSettingsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeGatewayInformationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeMaintenanceStartTimeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinuteOfHour", required: false, type: .integer), 
            AWSShapeMember(label: "HourOfDay", required: false, type: .integer), 
            AWSShapeMember(label: "DayOfWeek", required: false, type: .integer), 
            AWSShapeMember(label: "Timezone", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        /// The minute component of the maintenance start time represented as mm, where mm is the minute (0 to 59). The minute of the hour is in the time zone of the gateway.
        public let minuteOfHour: Int32?
        /// The hour component of the maintenance start time represented as hh, where hh is the hour (0 to 23). The hour of the day is in the time zone of the gateway.
        public let hourOfDay: Int32?
        /// An ordinal number between 0 and 6 that represents the day of the week, where 0 represents Sunday and 6 represents Saturday. The day of week is in the time zone of the gateway.
        public let dayOfWeek: Int32?
        public let timezone: String?
        public let gatewayARN: String?

        public init(dayOfWeek: Int32? = nil, gatewayARN: String? = nil, hourOfDay: Int32? = nil, minuteOfHour: Int32? = nil, timezone: String? = nil) {
            self.minuteOfHour = minuteOfHour
            self.hourOfDay = hourOfDay
            self.dayOfWeek = dayOfWeek
            self.timezone = timezone
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case minuteOfHour = "MinuteOfHour"
            case hourOfDay = "HourOfDay"
            case dayOfWeek = "DayOfWeek"
            case timezone = "Timezone"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct StorageGatewayError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "errorCode", required: false, type: .enum), 
            AWSShapeMember(label: "errorDetails", required: false, type: .map)
        ]
        /// Additional information about the error.
        public let errorCode: ErrorCode?
        /// Human-readable text that provides detail about the error that occurred.
        public let errorDetails: [String: String]?

        public init(errorCode: ErrorCode? = nil, errorDetails: [String: String]? = nil) {
            self.errorCode = errorCode
            self.errorDetails = errorDetails
        }

        private enum CodingKeys: String, CodingKey {
            case errorCode = "errorCode"
            case errorDetails = "errorDetails"
        }
    }

    public struct ListFileSharesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "NextMarker", required: false, type: .string), 
            AWSShapeMember(label: "FileShareInfoList", required: false, type: .list)
        ]
        /// If the request includes Marker, the response returns that value in this field. 
        public let marker: String?
        /// If a value is present, there are more file shares to return. In a subsequent request, use NextMarker as the value for Marker to retrieve the next set of file shares. 
        public let nextMarker: String?
        /// An array of information about the file gateway's file shares. 
        public let fileShareInfoList: [FileShareInfo]?

        public init(fileShareInfoList: [FileShareInfo]? = nil, marker: String? = nil, nextMarker: String? = nil) {
            self.marker = marker
            self.nextMarker = nextMarker
            self.fileShareInfoList = fileShareInfoList
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case nextMarker = "NextMarker"
            case fileShareInfoList = "FileShareInfoList"
        }
    }

    public struct ListVolumeRecoveryPointsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct NotifyWhenUploadedOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotificationId", required: false, type: .string), 
            AWSShapeMember(label: "FileShareARN", required: false, type: .string)
        ]
        public let notificationId: String?
        public let fileShareARN: String?

        public init(fileShareARN: String? = nil, notificationId: String? = nil) {
            self.notificationId = notificationId
            self.fileShareARN = fileShareARN
        }

        private enum CodingKeys: String, CodingKey {
            case notificationId = "NotificationId"
            case fileShareARN = "FileShareARN"
        }
    }

    public struct ListVolumeInitiatorsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Initiators", required: false, type: .list)
        ]
        /// The host names and port numbers of all iSCSI initiators that are connected to the gateway.
        public let initiators: [String]?

        public init(initiators: [String]? = nil) {
            self.initiators = initiators
        }

        private enum CodingKeys: String, CodingKey {
            case initiators = "Initiators"
        }
    }

    public struct NFSFileShareDefaults: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", required: false, type: .long), 
            AWSShapeMember(label: "FileMode", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryMode", required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", required: false, type: .long)
        ]
        /// The default group ID for the file share (unless the files have another group ID specified). The default value is nfsnobody. 
        public let groupId: Int64?
        /// The Unix file mode in the form "nnnn". For example, "0666" represents the default file mode inside the file share. The default value is 0666. 
        public let fileMode: String?
        /// The Unix directory mode in the form "nnnn". For example, "0666" represents the default access mode for all directories inside the file share. The default value is 0777.
        public let directoryMode: String?
        /// The default owner ID for files in the file share (unless the files have another owner ID specified). The default value is nfsnobody. 
        public let ownerId: Int64?

        public init(directoryMode: String? = nil, fileMode: String? = nil, groupId: Int64? = nil, ownerId: Int64? = nil) {
            self.groupId = groupId
            self.fileMode = fileMode
            self.directoryMode = directoryMode
            self.ownerId = ownerId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
            case fileMode = "FileMode"
            case directoryMode = "DirectoryMode"
            case ownerId = "OwnerId"
        }
    }

    public struct DescribeCacheInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeWorkingStorageInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct CancelRetrievalOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape for which retrieval was canceled.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct ActivateGatewayInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayName", required: true, type: .string), 
            AWSShapeMember(label: "GatewayRegion", required: true, type: .string), 
            AWSShapeMember(label: "MediumChangerType", required: false, type: .string), 
            AWSShapeMember(label: "GatewayType", required: false, type: .string), 
            AWSShapeMember(label: "GatewayTimezone", required: true, type: .string), 
            AWSShapeMember(label: "ActivationKey", required: true, type: .string), 
            AWSShapeMember(label: "TapeDriveType", required: false, type: .string)
        ]
        /// The name you configured for your gateway.
        public let gatewayName: String
        /// A value that indicates the region where you want to store your data. The gateway region specified must be the same region as the region in your Host header in the request. For more information about available regions and endpoints for AWS Storage Gateway, see Regions and Endpoints in the Amazon Web Services Glossary.  Valid Values: "us-east-1", "us-east-2", "us-west-1", "us-west-2", "ca-central-1", "eu-west-1", "eu-central-1", "eu-west-2", "eu-west-3", "ap-northeast-1", "ap-northeast-2", "ap-southeast-1", "ap-southeast-2", "ap-south-1", "sa-east-1"
        public let gatewayRegion: String
        /// The value that indicates the type of medium changer to use for tape gateway. This field is optional.  Valid Values: "STK-L700", "AWS-Gateway-VTL"
        public let mediumChangerType: String?
        /// A value that defines the type of gateway to activate. The type specified is critical to all later functions of the gateway and cannot be changed after activation. The default value is CACHED.   Valid Values: "STORED", "CACHED", "VTL", "FILE_S3"
        public let gatewayType: String?
        /// A value that indicates the time zone you want to set for the gateway. The time zone is of the format "GMT-hr:mm" or "GMT+hr:mm". For example, GMT-4:00 indicates the time is 4 hours behind GMT. GMT+2:00 indicates the time is 2 hours ahead of GMT. The time zone is used, for example, for scheduling snapshots and your gateway's maintenance schedule.
        public let gatewayTimezone: String
        /// Your gateway activation key. You can obtain the activation key by sending an HTTP GET request with redirects enabled to the gateway IP address (port 80). The redirect URL returned in the response provides you the activation key for your gateway in the query string parameter activationKey. It may also include other activation-related parameters, however, these are merely defaults -- the arguments you pass to the ActivateGateway API call determine the actual configuration of your gateway.  For more information, see https://docs.aws.amazon.com/storagegateway/latest/userguide/get-activation-key.html in the Storage Gateway User Guide.
        public let activationKey: String
        /// The value that indicates the type of tape drive to use for tape gateway. This field is optional.  Valid Values: "IBM-ULT3580-TD5" 
        public let tapeDriveType: String?

        public init(activationKey: String, gatewayName: String, gatewayRegion: String, gatewayTimezone: String, gatewayType: String? = nil, mediumChangerType: String? = nil, tapeDriveType: String? = nil) {
            self.gatewayName = gatewayName
            self.gatewayRegion = gatewayRegion
            self.mediumChangerType = mediumChangerType
            self.gatewayType = gatewayType
            self.gatewayTimezone = gatewayTimezone
            self.activationKey = activationKey
            self.tapeDriveType = tapeDriveType
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayName = "GatewayName"
            case gatewayRegion = "GatewayRegion"
            case mediumChangerType = "MediumChangerType"
            case gatewayType = "GatewayType"
            case gatewayTimezone = "GatewayTimezone"
            case activationKey = "ActivationKey"
            case tapeDriveType = "TapeDriveType"
        }
    }

    public struct Disk: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DiskAllocationResource", required: false, type: .string), 
            AWSShapeMember(label: "DiskNode", required: false, type: .string), 
            AWSShapeMember(label: "DiskAttributeList", required: false, type: .list), 
            AWSShapeMember(label: "DiskId", required: false, type: .string), 
            AWSShapeMember(label: "DiskStatus", required: false, type: .string), 
            AWSShapeMember(label: "DiskAllocationType", required: false, type: .string), 
            AWSShapeMember(label: "DiskPath", required: false, type: .string), 
            AWSShapeMember(label: "DiskSizeInBytes", required: false, type: .long)
        ]
        /// The iSCSI Qualified Name (IQN) that is defined for a disk. This field is not included in the response if the local disk is not defined as an iSCSI target. The format of this field is targetIqn::LUNNumber::region-volumeId. 
        public let diskAllocationResource: String?
        /// The device node of a local disk as assigned by the virtualization environment.
        public let diskNode: String?
        public let diskAttributeList: [String]?
        /// The unique device ID or other distinguishing data that identifies a local disk.
        public let diskId: String?
        /// A value that represents the status of a local disk.
        public let diskStatus: String?
        public let diskAllocationType: String?
        /// The path of a local disk in the gateway virtual machine (VM).
        public let diskPath: String?
        /// The local disk size in bytes.
        public let diskSizeInBytes: Int64?

        public init(diskAllocationResource: String? = nil, diskAllocationType: String? = nil, diskAttributeList: [String]? = nil, diskId: String? = nil, diskNode: String? = nil, diskPath: String? = nil, diskSizeInBytes: Int64? = nil, diskStatus: String? = nil) {
            self.diskAllocationResource = diskAllocationResource
            self.diskNode = diskNode
            self.diskAttributeList = diskAttributeList
            self.diskId = diskId
            self.diskStatus = diskStatus
            self.diskAllocationType = diskAllocationType
            self.diskPath = diskPath
            self.diskSizeInBytes = diskSizeInBytes
        }

        private enum CodingKeys: String, CodingKey {
            case diskAllocationResource = "DiskAllocationResource"
            case diskNode = "DiskNode"
            case diskAttributeList = "DiskAttributeList"
            case diskId = "DiskId"
            case diskStatus = "DiskStatus"
            case diskAllocationType = "DiskAllocationType"
            case diskPath = "DiskPath"
            case diskSizeInBytes = "DiskSizeInBytes"
        }
    }

    public struct UpdateVTLDeviceTypeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VTLDeviceARN", required: true, type: .string), 
            AWSShapeMember(label: "DeviceType", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the medium changer you want to select.
        public let vTLDeviceARN: String
        /// The type of medium changer you want to select.  Valid Values: "STK-L700", "AWS-Gateway-VTL"
        public let deviceType: String

        public init(deviceType: String, vTLDeviceARN: String) {
            self.vTLDeviceARN = vTLDeviceARN
            self.deviceType = deviceType
        }

        private enum CodingKeys: String, CodingKey {
            case vTLDeviceARN = "VTLDeviceARN"
            case deviceType = "DeviceType"
        }
    }

    public struct StorediSCSIVolume: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeUsedInBytes", required: false, type: .long), 
            AWSShapeMember(label: "VolumeDiskId", required: false, type: .string), 
            AWSShapeMember(label: "PreservedExistingData", required: false, type: .boolean), 
            AWSShapeMember(label: "VolumeType", required: false, type: .string), 
            AWSShapeMember(label: "VolumeiSCSIAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "KMSKey", required: false, type: .string), 
            AWSShapeMember(label: "VolumeProgress", required: false, type: .double), 
            AWSShapeMember(label: "VolumeStatus", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "SourceSnapshotId", required: false, type: .string)
        ]
        /// The unique identifier of the volume, e.g. vol-AE4B946D.
        public let volumeId: String?
        /// The size of the data stored on the volume in bytes.   This value is not available for volumes created prior to May 13, 2015, until you store data on the volume. 
        public let volumeUsedInBytes: Int64?
        /// The ID of the local disk that was specified in the CreateStorediSCSIVolume operation.
        public let volumeDiskId: String?
        /// Indicates if when the stored volume was created, existing data on the underlying local disk was preserved.  Valid Values: true, false
        public let preservedExistingData: Bool?
        /// One of the VolumeType enumeration values describing the type of the volume.
        public let volumeType: String?
        /// An VolumeiSCSIAttributes object that represents a collection of iSCSI attributes for one stored volume.
        public let volumeiSCSIAttributes: VolumeiSCSIAttributes?
        public let kMSKey: String?
        /// Represents the percentage complete if the volume is restoring or bootstrapping that represents the percent of data transferred. This field does not appear in the response if the stored volume is not restoring or bootstrapping.
        public let volumeProgress: Double?
        /// One of the VolumeStatus values that indicates the state of the storage volume.
        public let volumeStatus: String?
        /// The Amazon Resource Name (ARN) of the storage volume.
        public let volumeARN: String?
        /// The size of the volume in bytes.
        public let volumeSizeInBytes: Int64?
        /// The date the volume was created. Volumes created prior to March 28, 2017 don’t have this time stamp.
        public let createdDate: TimeStamp?
        /// If the stored volume was created from a snapshot, this field contains the snapshot ID used, e.g. snap-78e22663. Otherwise, this field is not included.
        public let sourceSnapshotId: String?

        public init(createdDate: TimeStamp? = nil, kMSKey: String? = nil, preservedExistingData: Bool? = nil, sourceSnapshotId: String? = nil, volumeARN: String? = nil, volumeDiskId: String? = nil, volumeId: String? = nil, volumeProgress: Double? = nil, volumeSizeInBytes: Int64? = nil, volumeStatus: String? = nil, volumeType: String? = nil, volumeUsedInBytes: Int64? = nil, volumeiSCSIAttributes: VolumeiSCSIAttributes? = nil) {
            self.volumeId = volumeId
            self.volumeUsedInBytes = volumeUsedInBytes
            self.volumeDiskId = volumeDiskId
            self.preservedExistingData = preservedExistingData
            self.volumeType = volumeType
            self.volumeiSCSIAttributes = volumeiSCSIAttributes
            self.kMSKey = kMSKey
            self.volumeProgress = volumeProgress
            self.volumeStatus = volumeStatus
            self.volumeARN = volumeARN
            self.volumeSizeInBytes = volumeSizeInBytes
            self.createdDate = createdDate
            self.sourceSnapshotId = sourceSnapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case volumeId = "VolumeId"
            case volumeUsedInBytes = "VolumeUsedInBytes"
            case volumeDiskId = "VolumeDiskId"
            case preservedExistingData = "PreservedExistingData"
            case volumeType = "VolumeType"
            case volumeiSCSIAttributes = "VolumeiSCSIAttributes"
            case kMSKey = "KMSKey"
            case volumeProgress = "VolumeProgress"
            case volumeStatus = "VolumeStatus"
            case volumeARN = "VolumeARN"
            case volumeSizeInBytes = "VolumeSizeInBytes"
            case createdDate = "CreatedDate"
            case sourceSnapshotId = "SourceSnapshotId"
        }
    }

    public struct CreateCachediSCSIVolumeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: false, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]
        /// he Amazon Resource Name (ARN) of the volume target that includes the iSCSI name that initiators can use to connect to the target.
        public let targetARN: String?
        /// The Amazon Resource Name (ARN) of the configured volume.
        public let volumeARN: String?

        public init(targetARN: String? = nil, volumeARN: String? = nil) {
            self.targetARN = targetARN
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
            case volumeARN = "VolumeARN"
        }
    }

    public struct UpdateGatewayInformationOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayName", required: false, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        public let gatewayName: String?
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil, gatewayName: String? = nil) {
            self.gatewayName = gatewayName
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayName = "GatewayName"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct AddUploadBufferInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string), 
            AWSShapeMember(label: "DiskIds", required: true, type: .list)
        ]
        public let gatewayARN: String
        public let diskIds: [String]

        public init(diskIds: [String], gatewayARN: String) {
            self.gatewayARN = gatewayARN
            self.diskIds = diskIds
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
            case diskIds = "DiskIds"
        }
    }

    public struct DescribeBandwidthRateLimitInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DeleteTapeOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the deleted virtual tape.
        public let tapeARN: String?

        public init(tapeARN: String? = nil) {
            self.tapeARN = tapeARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
        }
    }

    public struct UpdateChapCredentialsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: true, type: .string), 
            AWSShapeMember(label: "SecretToAuthenticateInitiator", required: true, type: .string), 
            AWSShapeMember(label: "InitiatorName", required: true, type: .string), 
            AWSShapeMember(label: "SecretToAuthenticateTarget", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the iSCSI volume target. Use the DescribeStorediSCSIVolumes operation to return the TargetARN for specified VolumeARN.
        public let targetARN: String
        /// The secret key that the initiator (for example, the Windows client) must provide to participate in mutual CHAP with the target.  The secret key must be between 12 and 16 bytes when encoded in UTF-8. 
        public let secretToAuthenticateInitiator: String
        /// The iSCSI initiator that connects to the target.
        public let initiatorName: String
        /// The secret key that the target must provide to participate in mutual CHAP with the initiator (e.g. Windows client). Byte constraints: Minimum bytes of 12. Maximum bytes of 16.  The secret key must be between 12 and 16 bytes when encoded in UTF-8. 
        public let secretToAuthenticateTarget: String?

        public init(initiatorName: String, secretToAuthenticateInitiator: String, secretToAuthenticateTarget: String? = nil, targetARN: String) {
            self.targetARN = targetARN
            self.secretToAuthenticateInitiator = secretToAuthenticateInitiator
            self.initiatorName = initiatorName
            self.secretToAuthenticateTarget = secretToAuthenticateTarget
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
            case secretToAuthenticateInitiator = "SecretToAuthenticateInitiator"
            case initiatorName = "InitiatorName"
            case secretToAuthenticateTarget = "SecretToAuthenticateTarget"
        }
    }

    public struct DisableGatewayOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: false, type: .string)
        ]
        /// The unique Amazon Resource Name (ARN) of the disabled gateway.
        public let gatewayARN: String?

        public init(gatewayARN: String? = nil) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct FileShareInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareStatus", required: false, type: .string), 
            AWSShapeMember(label: "FileShareType", required: false, type: .enum), 
            AWSShapeMember(label: "GatewayARN", required: false, type: .string), 
            AWSShapeMember(label: "FileShareARN", required: false, type: .string), 
            AWSShapeMember(label: "FileShareId", required: false, type: .string)
        ]
        public let fileShareStatus: String?
        public let fileShareType: FileShareType?
        public let gatewayARN: String?
        public let fileShareARN: String?
        public let fileShareId: String?

        public init(fileShareARN: String? = nil, fileShareId: String? = nil, fileShareStatus: String? = nil, fileShareType: FileShareType? = nil, gatewayARN: String? = nil) {
            self.fileShareStatus = fileShareStatus
            self.fileShareType = fileShareType
            self.gatewayARN = gatewayARN
            self.fileShareARN = fileShareARN
            self.fileShareId = fileShareId
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareStatus = "FileShareStatus"
            case fileShareType = "FileShareType"
            case gatewayARN = "GatewayARN"
            case fileShareARN = "FileShareARN"
            case fileShareId = "FileShareId"
        }
    }

    public enum FileShareType: String, CustomStringConvertible, Codable {
        case nfs = "NFS"
        case smb = "SMB"
        public var description: String { return self.rawValue }
    }

    public struct ListTapesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Marker", required: false, type: .string), 
            AWSShapeMember(label: "TapeInfos", required: false, type: .list)
        ]
        /// A string that indicates the position at which to begin returning the next list of tapes. Use the marker in your next request to continue pagination of tapes. If there are no more tapes to list, this element does not appear in the response body.
        public let marker: String?
        public let tapeInfos: [TapeInfo]?

        public init(marker: String? = nil, tapeInfos: [TapeInfo]? = nil) {
            self.marker = marker
            self.tapeInfos = tapeInfos
        }

        private enum CodingKeys: String, CodingKey {
            case marker = "Marker"
            case tapeInfos = "TapeInfos"
        }
    }

    public struct VolumeiSCSIAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NetworkInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "ChapEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "LunNumber", required: false, type: .integer), 
            AWSShapeMember(label: "NetworkInterfacePort", required: false, type: .integer), 
            AWSShapeMember(label: "TargetARN", required: false, type: .string)
        ]
        /// The network interface identifier.
        public let networkInterfaceId: String?
        /// Indicates whether mutual CHAP is enabled for the iSCSI target.
        public let chapEnabled: Bool?
        /// The logical disk number.
        public let lunNumber: Int32?
        /// The port used to communicate with iSCSI targets.
        public let networkInterfacePort: Int32?
        /// The Amazon Resource Name (ARN) of the volume target.
        public let targetARN: String?

        public init(chapEnabled: Bool? = nil, lunNumber: Int32? = nil, networkInterfaceId: String? = nil, networkInterfacePort: Int32? = nil, targetARN: String? = nil) {
            self.networkInterfaceId = networkInterfaceId
            self.chapEnabled = chapEnabled
            self.lunNumber = lunNumber
            self.networkInterfacePort = networkInterfacePort
            self.targetARN = targetARN
        }

        private enum CodingKeys: String, CodingKey {
            case networkInterfaceId = "NetworkInterfaceId"
            case chapEnabled = "ChapEnabled"
            case lunNumber = "LunNumber"
            case networkInterfacePort = "NetworkInterfacePort"
            case targetARN = "TargetARN"
        }
    }

    public struct SetSMBGuestPasswordInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// The password that you want to set for your SMB Server.
        public let password: String
        /// The Amazon Resource Name (ARN) of the file gateway the SMB file share is associated with.
        public let gatewayARN: String

        public init(gatewayARN: String, password: String) {
            self.password = password
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case password = "Password"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DeleteGatewayInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct CreateSnapshotInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotDescription", required: true, type: .string), 
            AWSShapeMember(label: "VolumeARN", required: true, type: .string)
        ]
        /// Textual description of the snapshot that appears in the Amazon EC2 console, Elastic Block Store snapshots panel in the Description field, and in the AWS Storage Gateway snapshot Details pane, Description field
        public let snapshotDescription: String
        /// The Amazon Resource Name (ARN) of the volume. Use the ListVolumes operation to return a list of gateway volumes.
        public let volumeARN: String

        public init(snapshotDescription: String, volumeARN: String) {
            self.snapshotDescription = snapshotDescription
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotDescription = "SnapshotDescription"
            case volumeARN = "VolumeARN"
        }
    }

    public struct DeleteBandwidthRateLimitInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BandwidthType", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// One of the BandwidthType values that indicates the gateway bandwidth rate limit to delete. Valid Values: Upload, Download, All.
        public let bandwidthType: String
        public let gatewayARN: String

        public init(bandwidthType: String, gatewayARN: String) {
            self.bandwidthType = bandwidthType
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case bandwidthType = "BandwidthType"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DeleteChapCredentialsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InitiatorName", required: false, type: .string), 
            AWSShapeMember(label: "TargetARN", required: false, type: .string)
        ]
        /// The iSCSI initiator that connects to the target.
        public let initiatorName: String?
        /// The Amazon Resource Name (ARN) of the target.
        public let targetARN: String?

        public init(initiatorName: String? = nil, targetARN: String? = nil) {
            self.initiatorName = initiatorName
            self.targetARN = targetARN
        }

        private enum CodingKeys: String, CodingKey {
            case initiatorName = "InitiatorName"
            case targetARN = "TargetARN"
        }
    }

    public struct UpdateGatewaySoftwareNowInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        public let gatewayARN: String

        public init(gatewayARN: String) {
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case gatewayARN = "GatewayARN"
        }
    }

    public struct UpdateSnapshotScheduleOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARN", required: false, type: .string)
        ]
        public let volumeARN: String?

        public init(volumeARN: String? = nil) {
            self.volumeARN = volumeARN
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARN = "VolumeARN"
        }
    }

    public struct DescribeCachediSCSIVolumesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeARNs", required: true, type: .list)
        ]
        public let volumeARNs: [String]

        public init(volumeARNs: [String]) {
            self.volumeARNs = volumeARNs
        }

        private enum CodingKeys: String, CodingKey {
            case volumeARNs = "VolumeARNs"
        }
    }

    public struct TapeRecoveryPointInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: false, type: .string), 
            AWSShapeMember(label: "TapeRecoveryPointTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TapeSizeInBytes", required: false, type: .long), 
            AWSShapeMember(label: "TapeStatus", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape.
        public let tapeARN: String?
        /// The time when the point-in-time view of the virtual tape was replicated for later recovery. The default time stamp format of the tape recovery point time is in the ISO8601 extended YYYY-MM-DD'T'HH:MM:SS'Z' format.
        public let tapeRecoveryPointTime: TimeStamp?
        /// The size, in bytes, of the virtual tapes to recover.
        public let tapeSizeInBytes: Int64?
        public let tapeStatus: String?

        public init(tapeARN: String? = nil, tapeRecoveryPointTime: TimeStamp? = nil, tapeSizeInBytes: Int64? = nil, tapeStatus: String? = nil) {
            self.tapeARN = tapeARN
            self.tapeRecoveryPointTime = tapeRecoveryPointTime
            self.tapeSizeInBytes = tapeSizeInBytes
            self.tapeStatus = tapeStatus
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
            case tapeRecoveryPointTime = "TapeRecoveryPointTime"
            case tapeSizeInBytes = "TapeSizeInBytes"
            case tapeStatus = "TapeStatus"
        }
    }

    public struct DeleteTapeInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape to delete.
        public let tapeARN: String
        /// The unique Amazon Resource Name (ARN) of the gateway that the virtual tape to delete is associated with. Use the ListGateways operation to return a list of gateways for your account and region.
        public let gatewayARN: String

        public init(gatewayARN: String, tapeARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct CancelArchivalInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TapeARN", required: true, type: .string), 
            AWSShapeMember(label: "GatewayARN", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the virtual tape you want to cancel archiving for.
        public let tapeARN: String
        public let gatewayARN: String

        public init(gatewayARN: String, tapeARN: String) {
            self.tapeARN = tapeARN
            self.gatewayARN = gatewayARN
        }

        private enum CodingKeys: String, CodingKey {
            case tapeARN = "TapeARN"
            case gatewayARN = "GatewayARN"
        }
    }

    public struct DescribeNFSFileSharesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FileShareARNList", required: true, type: .list)
        ]
        /// An array containing the Amazon Resource Name (ARN) of each file share to be described. 
        public let fileShareARNList: [String]

        public init(fileShareARNList: [String]) {
            self.fileShareARNList = fileShareARNList
        }

        private enum CodingKeys: String, CodingKey {
            case fileShareARNList = "FileShareARNList"
        }
    }

    public struct UpdateChapCredentialsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetARN", required: false, type: .string), 
            AWSShapeMember(label: "InitiatorName", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the target. This is the same target specified in the request.
        public let targetARN: String?
        /// The iSCSI initiator that connects to the target. This is the same initiator name specified in the request.
        public let initiatorName: String?

        public init(initiatorName: String? = nil, targetARN: String? = nil) {
            self.targetARN = targetARN
            self.initiatorName = initiatorName
        }

        private enum CodingKeys: String, CodingKey {
            case targetARN = "TargetARN"
            case initiatorName = "InitiatorName"
        }
    }

}