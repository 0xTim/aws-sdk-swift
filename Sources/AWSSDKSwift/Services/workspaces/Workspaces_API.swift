// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

/**
Amazon WorkSpaces Service This reference provides detailed information about the Amazon WorkSpaces operations.
*/
public struct Workspaces {

    let client: AWSClient

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            amzTarget: "WorkspacesService",
            service: "workspaces",
            serviceProtocol: ServiceProtocol(type: .json, version: ServiceProtocol.Version(major: 1, minor: 1)),
            apiVersion: "2015-04-08",
            endpoint: endpoint,
            middlewares: [],
            possibleErrorTypes: [WorkspacesError.self]
        )
    }

    ///   Stops the specified WorkSpaces. The WorkSpaces must have a running mode of AutoStop and a state of AVAILABLE, IMPAIRED, UNHEALTHY, or ERROR.
    public func stopWorkspaces(_ input: StopWorkspacesRequest) throws -> StopWorkspacesResult {
        return try client.send(operation: "StopWorkspaces", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates tags for a WorkSpace.
    public func createTags(_ input: CreateTagsRequest) throws -> CreateTagsResult {
        return try client.send(operation: "CreateTags", path: "/", httpMethod: "POST", input: input)
    }

    ///  Modifies the WorkSpace properties, including the running mode and AutoStop time.
    public func modifyWorkspaceProperties(_ input: ModifyWorkspacePropertiesRequest) throws -> ModifyWorkspacePropertiesResult {
        return try client.send(operation: "ModifyWorkspaceProperties", path: "/", httpMethod: "POST", input: input)
    }

    ///  Starts the specified WorkSpaces. The WorkSpaces must have a running mode of AutoStop and a state of STOPPED.
    public func startWorkspaces(_ input: StartWorkspacesRequest) throws -> StartWorkspacesResult {
        return try client.send(operation: "StartWorkspaces", path: "/", httpMethod: "POST", input: input)
    }

    ///  Obtains information about the WorkSpace bundles that are available to your account in the specified region. You can filter the results with either the BundleIds parameter, or the Owner parameter, but not both. This operation supports pagination with the use of the NextToken request and response parameters. If more results are available, the NextToken response member contains a token that you pass in the next call to this operation to retrieve the next set of items.
    public func describeWorkspaceBundles(_ input: DescribeWorkspaceBundlesRequest) throws -> DescribeWorkspaceBundlesResult {
        return try client.send(operation: "DescribeWorkspaceBundles", path: "/", httpMethod: "POST", input: input)
    }

    ///  Rebuilds the specified WorkSpaces. Rebuilding a WorkSpace is a potentially destructive action that can result in the loss of data. Rebuilding a WorkSpace causes the following to occur:   The system is restored to the image of the bundle that the WorkSpace is created from. Any applications that have been installed, or system settings that have been made since the WorkSpace was created will be lost.   The data drive (D drive) is re-created from the last automatic snapshot taken of the data drive. The current contents of the data drive are overwritten. Automatic snapshots of the data drive are taken every 12 hours, so the snapshot can be as much as 12 hours old.   To be able to rebuild a WorkSpace, the WorkSpace must have a State of AVAILABLE or ERROR.  This operation is asynchronous and returns before the WorkSpaces have been completely rebuilt. 
    public func rebuildWorkspaces(_ input: RebuildWorkspacesRequest) throws -> RebuildWorkspacesResult {
        return try client.send(operation: "RebuildWorkspaces", path: "/", httpMethod: "POST", input: input)
    }

    ///  Describes the connection status of a specified WorkSpace.
    public func describeWorkspacesConnectionStatus(_ input: DescribeWorkspacesConnectionStatusRequest) throws -> DescribeWorkspacesConnectionStatusResult {
        return try client.send(operation: "DescribeWorkspacesConnectionStatus", path: "/", httpMethod: "POST", input: input)
    }

    ///  Obtains information about the specified WorkSpaces. Only one of the filter parameters, such as BundleId, DirectoryId, or WorkspaceIds, can be specified at a time. This operation supports pagination with the use of the NextToken request and response parameters. If more results are available, the NextToken response member contains a token that you pass in the next call to this operation to retrieve the next set of items.
    public func describeWorkspaces(_ input: DescribeWorkspacesRequest) throws -> DescribeWorkspacesResult {
        return try client.send(operation: "DescribeWorkspaces", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates one or more WorkSpaces.  This operation is asynchronous and returns before the WorkSpaces are created. 
    public func createWorkspaces(_ input: CreateWorkspacesRequest) throws -> CreateWorkspacesResult {
        return try client.send(operation: "CreateWorkspaces", path: "/", httpMethod: "POST", input: input)
    }

    ///  Describes tags for a WorkSpace.
    public func describeTags(_ input: DescribeTagsRequest) throws -> DescribeTagsResult {
        return try client.send(operation: "DescribeTags", path: "/", httpMethod: "POST", input: input)
    }

    ///  Reboots the specified WorkSpaces. To be able to reboot a WorkSpace, the WorkSpace must have a State of AVAILABLE, IMPAIRED, or INOPERABLE.  This operation is asynchronous and returns before the WorkSpaces have rebooted. 
    public func rebootWorkspaces(_ input: RebootWorkspacesRequest) throws -> RebootWorkspacesResult {
        return try client.send(operation: "RebootWorkspaces", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes tags from a WorkSpace.
    public func deleteTags(_ input: DeleteTagsRequest) throws -> DeleteTagsResult {
        return try client.send(operation: "DeleteTags", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves information about the AWS Directory Service directories in the region that are registered with Amazon WorkSpaces and are available to your account. This operation supports pagination with the use of the NextToken request and response parameters. If more results are available, the NextToken response member contains a token that you pass in the next call to this operation to retrieve the next set of items.
    public func describeWorkspaceDirectories(_ input: DescribeWorkspaceDirectoriesRequest) throws -> DescribeWorkspaceDirectoriesResult {
        return try client.send(operation: "DescribeWorkspaceDirectories", path: "/", httpMethod: "POST", input: input)
    }

    ///  Terminates the specified WorkSpaces. Terminating a WorkSpace is a permanent action and cannot be undone. The user's data is not maintained and will be destroyed. If you need to archive any user data, contact Amazon Web Services before terminating the WorkSpace. You can terminate a WorkSpace that is in any state except SUSPENDED.  This operation is asynchronous and returns before the WorkSpaces have been completely terminated. 
    public func terminateWorkspaces(_ input: TerminateWorkspacesRequest) throws -> TerminateWorkspacesResult {
        return try client.send(operation: "TerminateWorkspaces", path: "/", httpMethod: "POST", input: input)
    }


}