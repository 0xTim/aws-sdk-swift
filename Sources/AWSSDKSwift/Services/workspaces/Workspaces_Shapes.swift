// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Workspaces {

    public struct CreateTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// The ID of the WorkSpace. To find this ID, use DescribeWorkspaces.
        public let resourceId: String
        /// The tags. Each WorkSpace can have a maximum of 50 tags.
        public let tags: [Tag]

        public init(resourceId: String, tags: [Tag]) {
            self.resourceId = resourceId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tags = "Tags"
        }
    }

    public struct DisassociateIpGroupsResult: AWSShape {

    }

    public struct TerminateWorkspacesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TerminateWorkspaceRequests", required: true, type: .list)
        ]
        /// The WorkSpaces to terminate. You can specify up to 25 WorkSpaces.
        public let terminateWorkspaceRequests: [TerminateRequest]

        public init(terminateWorkspaceRequests: [TerminateRequest]) {
            self.terminateWorkspaceRequests = terminateWorkspaceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case terminateWorkspaceRequests = "TerminateWorkspaceRequests"
        }
    }

    public enum Compute: String, CustomStringConvertible, Codable {
        case value = "VALUE"
        case standard = "STANDARD"
        case performance = "PERFORMANCE"
        case power = "POWER"
        case graphics = "GRAPHICS"
        public var description: String { return self.rawValue }
    }

    public struct FailedCreateWorkspaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "WorkspaceRequest", required: false, type: .structure), 
            AWSShapeMember(label: "ErrorCode", required: false, type: .string)
        ]
        /// The textual error message.
        public let errorMessage: String?
        /// Information about the WorkSpace.
        public let workspaceRequest: WorkspaceRequest?
        /// The error code.
        public let errorCode: String?

        public init(errorMessage: String? = nil, workspaceRequest: WorkspaceRequest? = nil, errorCode: String? = nil) {
            self.errorMessage = errorMessage
            self.workspaceRequest = workspaceRequest
            self.errorCode = errorCode
        }

        private enum CodingKeys: String, CodingKey {
            case errorMessage = "ErrorMessage"
            case workspaceRequest = "WorkspaceRequest"
            case errorCode = "ErrorCode"
        }
    }

    public struct DescribeWorkspaceBundlesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "BundleIds", required: false, type: .list)
        ]
        /// The owner of the bundles. This parameter cannot be combined with any other filter. Specify AMAZON to describe the bundles provided by AWS or null to describe the bundles that belong to your account.
        public let owner: String?
        /// The token for the next set of results. (You received this token from a previous call.)
        public let nextToken: String?
        /// The IDs of the bundles. This parameter cannot be combined with any other filter.
        public let bundleIds: [String]?

        public init(owner: String? = nil, nextToken: String? = nil, bundleIds: [String]? = nil) {
            self.owner = owner
            self.nextToken = nextToken
            self.bundleIds = bundleIds
        }

        private enum CodingKeys: String, CodingKey {
            case owner = "Owner"
            case nextToken = "NextToken"
            case bundleIds = "BundleIds"
        }
    }

    public struct CreateIpGroupResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", required: false, type: .string)
        ]
        /// The ID of the group.
        public let groupId: String?

        public init(groupId: String? = nil) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct UserStorage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Capacity", required: false, type: .string)
        ]
        /// The size of the user storage.
        public let capacity: String?

        public init(capacity: String? = nil) {
            self.capacity = capacity
        }

        private enum CodingKeys: String, CodingKey {
            case capacity = "Capacity"
        }
    }

    public struct WorkspaceBundle: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RootStorage", required: false, type: .structure), 
            AWSShapeMember(label: "ComputeType", required: false, type: .structure), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "UserStorage", required: false, type: .structure), 
            AWSShapeMember(label: "BundleId", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The size of the root volume.
        public let rootStorage: RootStorage?
        /// The compute type. For more information, see Amazon WorkSpaces Bundles.
        public let computeType: ComputeType?
        /// The name of the bundle.
        public let name: String?
        /// The owner of the bundle. This is the account identifier of the owner, or AMAZON if the bundle is provided by AWS.
        public let owner: String?
        /// The size of the user storage.
        public let userStorage: UserStorage?
        /// The bundle identifier.
        public let bundleId: String?
        /// A description.
        public let description: String?

        public init(rootStorage: RootStorage? = nil, computeType: ComputeType? = nil, name: String? = nil, owner: String? = nil, userStorage: UserStorage? = nil, bundleId: String? = nil, description: String? = nil) {
            self.rootStorage = rootStorage
            self.computeType = computeType
            self.name = name
            self.owner = owner
            self.userStorage = userStorage
            self.bundleId = bundleId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case rootStorage = "RootStorage"
            case computeType = "ComputeType"
            case name = "Name"
            case owner = "Owner"
            case userStorage = "UserStorage"
            case bundleId = "BundleId"
            case description = "Description"
        }
    }

    public struct RevokeIpRulesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserRules", required: true, type: .list), 
            AWSShapeMember(label: "GroupId", required: true, type: .string)
        ]
        /// The rules to remove from the group.
        public let userRules: [String]
        /// The ID of the group.
        public let groupId: String

        public init(userRules: [String], groupId: String) {
            self.userRules = userRules
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case userRules = "UserRules"
            case groupId = "GroupId"
        }
    }

    public struct RebootWorkspacesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailedRequests", required: false, type: .list)
        ]
        /// Information about the WorkSpaces that could not be rebooted.
        public let failedRequests: [FailedWorkspaceChangeRequest]?

        public init(failedRequests: [FailedWorkspaceChangeRequest]? = nil) {
            self.failedRequests = failedRequests
        }

        private enum CodingKeys: String, CodingKey {
            case failedRequests = "FailedRequests"
        }
    }

    public struct DescribeTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string)
        ]
        /// The ID of the WorkSpace. To find this ID, use DescribeWorkspaces.
        public let resourceId: String

        public init(resourceId: String) {
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
        }
    }

    public struct CreateWorkspacesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailedRequests", required: false, type: .list), 
            AWSShapeMember(label: "PendingRequests", required: false, type: .list)
        ]
        /// Information about the WorkSpaces that could not be created.
        public let failedRequests: [FailedCreateWorkspaceRequest]?
        /// Information about the WorkSpaces that were created. Because this operation is asynchronous, the identifier returned is not immediately available for use with other operations. For example, if you call DescribeWorkspaces before the WorkSpace is created, the information returned can be incomplete.
        public let pendingRequests: [Workspace]?

        public init(failedRequests: [FailedCreateWorkspaceRequest]? = nil, pendingRequests: [Workspace]? = nil) {
            self.failedRequests = failedRequests
            self.pendingRequests = pendingRequests
        }

        private enum CodingKeys: String, CodingKey {
            case failedRequests = "FailedRequests"
            case pendingRequests = "PendingRequests"
        }
    }

    public struct DescribeIpGroupsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Result", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the IP access control groups.
        public let result: [WorkspacesIpGroup]?
        /// The token to use to retrieve the next set of results, or null if there are no more results available. This token is valid for one day and must be used within that time frame.
        public let nextToken: String?

        public init(result: [WorkspacesIpGroup]? = nil, nextToken: String? = nil) {
            self.result = result
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case result = "Result"
            case nextToken = "NextToken"
        }
    }

    public struct CreateTagsResult: AWSShape {

    }

    public struct RebootWorkspacesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RebootWorkspaceRequests", required: true, type: .list)
        ]
        /// The WorkSpaces to reboot. You can specify up to 25 WorkSpaces.
        public let rebootWorkspaceRequests: [RebootRequest]

        public init(rebootWorkspaceRequests: [RebootRequest]) {
            self.rebootWorkspaceRequests = rebootWorkspaceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case rebootWorkspaceRequests = "RebootWorkspaceRequests"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The value of the tag.
        public let value: String?
        /// The key of the tag.
        public let key: String

        public init(value: String? = nil, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct ModifyWorkspacePropertiesResult: AWSShape {

    }

    public struct DescribeWorkspacesConnectionStatusResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WorkspacesConnectionStatus", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the connection status of the WorkSpace.
        public let workspacesConnectionStatus: [WorkspaceConnectionStatus]?
        /// The token to use to retrieve the next set of results, or null if there are no more results available.
        public let nextToken: String?

        public init(workspacesConnectionStatus: [WorkspaceConnectionStatus]? = nil, nextToken: String? = nil) {
            self.workspacesConnectionStatus = workspacesConnectionStatus
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case workspacesConnectionStatus = "WorkspacesConnectionStatus"
            case nextToken = "NextToken"
        }
    }

    public enum WorkspaceDirectoryState: String, CustomStringConvertible, Codable {
        case registering = "REGISTERING"
        case registered = "REGISTERED"
        case deregistering = "DEREGISTERING"
        case deregistered = "DEREGISTERED"
        case error = "ERROR"
        public var description: String { return self.rawValue }
    }

    public enum RunningMode: String, CustomStringConvertible, Codable {
        case autoStop = "AUTO_STOP"
        case alwaysOn = "ALWAYS_ON"
        public var description: String { return self.rawValue }
    }

    public struct StartWorkspacesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartWorkspaceRequests", required: true, type: .list)
        ]
        /// The WorkSpaces to start. You can specify up to 25 WorkSpaces.
        public let startWorkspaceRequests: [StartRequest]

        public init(startWorkspaceRequests: [StartRequest]) {
            self.startWorkspaceRequests = startWorkspaceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case startWorkspaceRequests = "StartWorkspaceRequests"
        }
    }

    public enum WorkspaceState: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case available = "AVAILABLE"
        case impaired = "IMPAIRED"
        case unhealthy = "UNHEALTHY"
        case rebooting = "REBOOTING"
        case starting = "STARTING"
        case rebuilding = "REBUILDING"
        case maintenance = "MAINTENANCE"
        case adminMaintenance = "ADMIN_MAINTENANCE"
        case terminating = "TERMINATING"
        case terminated = "TERMINATED"
        case suspended = "SUSPENDED"
        case updating = "UPDATING"
        case stopping = "STOPPING"
        case stopped = "STOPPED"
        case error = "ERROR"
        public var description: String { return self.rawValue }
    }

    public struct ComputeType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .enum)
        ]
        /// The compute type.
        public let name: Compute?

        public init(name: Compute? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct UpdateRulesOfIpGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserRules", required: true, type: .list), 
            AWSShapeMember(label: "GroupId", required: true, type: .string)
        ]
        /// One or more rules.
        public let userRules: [IpRuleItem]
        /// The ID of the group.
        public let groupId: String

        public init(userRules: [IpRuleItem], groupId: String) {
            self.userRules = userRules
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case userRules = "UserRules"
            case groupId = "GroupId"
        }
    }

    public enum TargetWorkspaceState: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case adminMaintenance = "ADMIN_MAINTENANCE"
        public var description: String { return self.rawValue }
    }

    public struct FailedWorkspaceChangeRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "ErrorCode", required: false, type: .string), 
            AWSShapeMember(label: "WorkspaceId", required: false, type: .string)
        ]
        /// The textual error message.
        public let errorMessage: String?
        /// The error code.
        public let errorCode: String?
        /// The identifier of the WorkSpace.
        public let workspaceId: String?

        public init(errorMessage: String? = nil, errorCode: String? = nil, workspaceId: String? = nil) {
            self.errorMessage = errorMessage
            self.errorCode = errorCode
            self.workspaceId = workspaceId
        }

        private enum CodingKeys: String, CodingKey {
            case errorMessage = "ErrorMessage"
            case errorCode = "ErrorCode"
            case workspaceId = "WorkspaceId"
        }
    }

    public struct WorkspacesIpGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "groupId", required: false, type: .string), 
            AWSShapeMember(label: "userRules", required: false, type: .list), 
            AWSShapeMember(label: "groupName", required: false, type: .string), 
            AWSShapeMember(label: "groupDesc", required: false, type: .string)
        ]
        /// The ID of the group.
        public let groupId: String?
        /// The rules.
        public let userRules: [IpRuleItem]?
        /// The name of the group.
        public let groupName: String?
        /// The description of the group.
        public let groupDesc: String?

        public init(groupId: String? = nil, userRules: [IpRuleItem]? = nil, groupName: String? = nil, groupDesc: String? = nil) {
            self.groupId = groupId
            self.userRules = userRules
            self.groupName = groupName
            self.groupDesc = groupDesc
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "groupId"
            case userRules = "userRules"
            case groupName = "groupName"
            case groupDesc = "groupDesc"
        }
    }

    public struct StopRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WorkspaceId", required: false, type: .string)
        ]
        /// The ID of the WorkSpace.
        public let workspaceId: String?

        public init(workspaceId: String? = nil) {
            self.workspaceId = workspaceId
        }

        private enum CodingKeys: String, CodingKey {
            case workspaceId = "WorkspaceId"
        }
    }

    public struct StartRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WorkspaceId", required: false, type: .string)
        ]
        /// The ID of the WorkSpace.
        public let workspaceId: String?

        public init(workspaceId: String? = nil) {
            self.workspaceId = workspaceId
        }

        private enum CodingKeys: String, CodingKey {
            case workspaceId = "WorkspaceId"
        }
    }

    public struct DeleteIpGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupId", required: true, type: .string)
        ]
        /// The ID of the IP access control group.
        public let groupId: String

        public init(groupId: String) {
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case groupId = "GroupId"
        }
    }

    public struct RevokeIpRulesResult: AWSShape {

    }

    public struct AuthorizeIpRulesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserRules", required: true, type: .list), 
            AWSShapeMember(label: "GroupId", required: true, type: .string)
        ]
        /// The rules to add to the group.
        public let userRules: [IpRuleItem]
        /// The ID of the group.
        public let groupId: String

        public init(userRules: [IpRuleItem], groupId: String) {
            self.userRules = userRules
            self.groupId = groupId
        }

        private enum CodingKeys: String, CodingKey {
            case userRules = "UserRules"
            case groupId = "GroupId"
        }
    }

    public struct DefaultWorkspaceCreationProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DefaultOu", required: false, type: .string), 
            AWSShapeMember(label: "CustomSecurityGroupId", required: false, type: .string), 
            AWSShapeMember(label: "EnableInternetAccess", required: false, type: .boolean), 
            AWSShapeMember(label: "UserEnabledAsLocalAdministrator", required: false, type: .boolean), 
            AWSShapeMember(label: "EnableWorkDocs", required: false, type: .boolean)
        ]
        /// The organizational unit (OU) in the directory for the WorkSpace machine accounts.
        public let defaultOu: String?
        /// The identifier of any security groups to apply to WorkSpaces when they are created.
        public let customSecurityGroupId: String?
        /// The public IP address to attach to all WorkSpaces that are created or rebuilt.
        public let enableInternetAccess: Bool?
        /// Indicates whether the WorkSpace user is an administrator on the WorkSpace.
        public let userEnabledAsLocalAdministrator: Bool?
        /// Indicates whether the directory is enabled for Amazon WorkDocs.
        public let enableWorkDocs: Bool?

        public init(defaultOu: String? = nil, customSecurityGroupId: String? = nil, enableInternetAccess: Bool? = nil, userEnabledAsLocalAdministrator: Bool? = nil, enableWorkDocs: Bool? = nil) {
            self.defaultOu = defaultOu
            self.customSecurityGroupId = customSecurityGroupId
            self.enableInternetAccess = enableInternetAccess
            self.userEnabledAsLocalAdministrator = userEnabledAsLocalAdministrator
            self.enableWorkDocs = enableWorkDocs
        }

        private enum CodingKeys: String, CodingKey {
            case defaultOu = "DefaultOu"
            case customSecurityGroupId = "CustomSecurityGroupId"
            case enableInternetAccess = "EnableInternetAccess"
            case userEnabledAsLocalAdministrator = "UserEnabledAsLocalAdministrator"
            case enableWorkDocs = "EnableWorkDocs"
        }
    }

    public struct StopWorkspacesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StopWorkspaceRequests", required: true, type: .list)
        ]
        /// The WorkSpaces to stop. You can specify up to 25 WorkSpaces.
        public let stopWorkspaceRequests: [StopRequest]

        public init(stopWorkspaceRequests: [StopRequest]) {
            self.stopWorkspaceRequests = stopWorkspaceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case stopWorkspaceRequests = "StopWorkspaceRequests"
        }
    }

    public enum ModificationStateEnum: String, CustomStringConvertible, Codable {
        case updateInitiated = "UPDATE_INITIATED"
        case updateInProgress = "UPDATE_IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public struct DescribeWorkspacesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "UserName", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "WorkspaceIds", required: false, type: .list), 
            AWSShapeMember(label: "BundleId", required: false, type: .string)
        ]
        /// The ID of the directory. In addition, you can optionally specify a specific directory user (see UserName). This parameter cannot be combined with any other filter.
        public let directoryId: String?
        /// The name of the directory user. You must specify this parameter with DirectoryId.
        public let userName: String?
        /// The maximum number of items to return.
        public let limit: Int32?
        /// The token for the next set of results. (You received this token from a previous call.)
        public let nextToken: String?
        /// The IDs of the WorkSpaces. This parameter cannot be combined with any other filter. Because the CreateWorkspaces operation is asynchronous, the identifier it returns is not immediately available. If you immediately call DescribeWorkspaces with this identifier, no information is returned.
        public let workspaceIds: [String]?
        /// The ID of the bundle. All WorkSpaces that are created from this bundle are retrieved. This parameter cannot be combined with any other filter.
        public let bundleId: String?

        public init(directoryId: String? = nil, userName: String? = nil, limit: Int32? = nil, nextToken: String? = nil, workspaceIds: [String]? = nil, bundleId: String? = nil) {
            self.directoryId = directoryId
            self.userName = userName
            self.limit = limit
            self.nextToken = nextToken
            self.workspaceIds = workspaceIds
            self.bundleId = bundleId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case userName = "UserName"
            case limit = "Limit"
            case nextToken = "NextToken"
            case workspaceIds = "WorkspaceIds"
            case bundleId = "BundleId"
        }
    }

    public struct RebuildWorkspacesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailedRequests", required: false, type: .list)
        ]
        /// Information about the WorkSpace if it could not be rebuilt.
        public let failedRequests: [FailedWorkspaceChangeRequest]?

        public init(failedRequests: [FailedWorkspaceChangeRequest]? = nil) {
            self.failedRequests = failedRequests
        }

        private enum CodingKeys: String, CodingKey {
            case failedRequests = "FailedRequests"
        }
    }

    public struct RebootRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WorkspaceId", required: true, type: .string)
        ]
        /// The ID of the WorkSpace.
        public let workspaceId: String

        public init(workspaceId: String) {
            self.workspaceId = workspaceId
        }

        private enum CodingKeys: String, CodingKey {
            case workspaceId = "WorkspaceId"
        }
    }

    public struct DescribeWorkspacesConnectionStatusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WorkspaceIds", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The identifiers of the WorkSpaces. You can specify up to 25 WorkSpaces.
        public let workspaceIds: [String]?
        /// The token for the next set of results. (You received this token from a previous call.)
        public let nextToken: String?

        public init(workspaceIds: [String]? = nil, nextToken: String? = nil) {
            self.workspaceIds = workspaceIds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case workspaceIds = "WorkspaceIds"
            case nextToken = "NextToken"
        }
    }

    public struct WorkspaceConnectionStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WorkspaceId", required: false, type: .string), 
            AWSShapeMember(label: "ConnectionState", required: false, type: .enum), 
            AWSShapeMember(label: "LastKnownUserConnectionTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "ConnectionStateCheckTimestamp", required: false, type: .timestamp)
        ]
        /// The ID of the WorkSpace.
        public let workspaceId: String?
        /// The connection state of the WorkSpace. The connection state is unknown if the WorkSpace is stopped.
        public let connectionState: ConnectionState?
        /// The timestamp of the last known user connection.
        public let lastKnownUserConnectionTimestamp: TimeStamp?
        /// The timestamp of the connection state check.
        public let connectionStateCheckTimestamp: TimeStamp?

        public init(workspaceId: String? = nil, connectionState: ConnectionState? = nil, lastKnownUserConnectionTimestamp: TimeStamp? = nil, connectionStateCheckTimestamp: TimeStamp? = nil) {
            self.workspaceId = workspaceId
            self.connectionState = connectionState
            self.lastKnownUserConnectionTimestamp = lastKnownUserConnectionTimestamp
            self.connectionStateCheckTimestamp = connectionStateCheckTimestamp
        }

        private enum CodingKeys: String, CodingKey {
            case workspaceId = "WorkspaceId"
            case connectionState = "ConnectionState"
            case lastKnownUserConnectionTimestamp = "LastKnownUserConnectionTimestamp"
            case connectionStateCheckTimestamp = "ConnectionStateCheckTimestamp"
        }
    }

    public struct DescribeIpGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "GroupIds", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The token for the next set of results. (You received this token from a previous call.)
        public let nextToken: String?
        /// The IDs of one or more IP access control groups.
        public let groupIds: [String]?
        /// The maximum number of items to return.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, groupIds: [String]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.groupIds = groupIds
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case groupIds = "GroupIds"
            case maxResults = "MaxResults"
        }
    }

    public struct DescribeTagsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagList", required: false, type: .list)
        ]
        /// The tags.
        public let tagList: [Tag]?

        public init(tagList: [Tag]? = nil) {
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case tagList = "TagList"
        }
    }

    public enum ConnectionState: String, CustomStringConvertible, Codable {
        case connected = "CONNECTED"
        case disconnected = "DISCONNECTED"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public struct RootStorage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Capacity", required: false, type: .string)
        ]
        /// The size of the root volume.
        public let capacity: String?

        public init(capacity: String? = nil) {
            self.capacity = capacity
        }

        private enum CodingKeys: String, CodingKey {
            case capacity = "Capacity"
        }
    }

    public struct DescribeWorkspacesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Workspaces", required: false, type: .list)
        ]
        /// The token to use to retrieve the next set of results, or null if there are no more results available. This token is valid for one day and must be used within that time frame.
        public let nextToken: String?
        /// Information about the WorkSpaces. Because CreateWorkspaces is an asynchronous operation, some of the returned information could be incomplete.
        public let workspaces: [Workspace]?

        public init(nextToken: String? = nil, workspaces: [Workspace]? = nil) {
            self.nextToken = nextToken
            self.workspaces = workspaces
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case workspaces = "Workspaces"
        }
    }

    public struct DeleteIpGroupResult: AWSShape {

    }

    public struct ModifyWorkspacePropertiesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WorkspaceId", required: true, type: .string), 
            AWSShapeMember(label: "WorkspaceProperties", required: true, type: .structure)
        ]
        /// The ID of the WorkSpace.
        public let workspaceId: String
        /// The properties of the WorkSpace.
        public let workspaceProperties: WorkspaceProperties

        public init(workspaceId: String, workspaceProperties: WorkspaceProperties) {
            self.workspaceId = workspaceId
            self.workspaceProperties = workspaceProperties
        }

        private enum CodingKeys: String, CodingKey {
            case workspaceId = "WorkspaceId"
            case workspaceProperties = "WorkspaceProperties"
        }
    }

    public struct DescribeWorkspaceBundlesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Bundles", required: false, type: .list)
        ]
        /// The token to use to retrieve the next set of results, or null if there are no more results available. This token is valid for one day and must be used within that time frame.
        public let nextToken: String?
        /// Information about the bundles.
        public let bundles: [WorkspaceBundle]?

        public init(nextToken: String? = nil, bundles: [WorkspaceBundle]? = nil) {
            self.nextToken = nextToken
            self.bundles = bundles
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case bundles = "Bundles"
        }
    }

    public struct WorkspaceProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserVolumeSizeGib", required: false, type: .integer), 
            AWSShapeMember(label: "RunningMode", required: false, type: .enum), 
            AWSShapeMember(label: "RunningModeAutoStopTimeoutInMinutes", required: false, type: .integer), 
            AWSShapeMember(label: "RootVolumeSizeGib", required: false, type: .integer), 
            AWSShapeMember(label: "ComputeTypeName", required: false, type: .enum)
        ]
        /// The size of the user storage.
        public let userVolumeSizeGib: Int32?
        /// The running mode. For more information, see Manage the WorkSpace Running Mode.
        public let runningMode: RunningMode?
        /// The time after a user logs off when WorkSpaces are automatically stopped. Configured in 60 minute intervals.
        public let runningModeAutoStopTimeoutInMinutes: Int32?
        /// The size of the root volume.
        public let rootVolumeSizeGib: Int32?
        /// The compute type. For more information, see Amazon WorkSpaces Bundles.
        public let computeTypeName: Compute?

        public init(userVolumeSizeGib: Int32? = nil, runningMode: RunningMode? = nil, runningModeAutoStopTimeoutInMinutes: Int32? = nil, rootVolumeSizeGib: Int32? = nil, computeTypeName: Compute? = nil) {
            self.userVolumeSizeGib = userVolumeSizeGib
            self.runningMode = runningMode
            self.runningModeAutoStopTimeoutInMinutes = runningModeAutoStopTimeoutInMinutes
            self.rootVolumeSizeGib = rootVolumeSizeGib
            self.computeTypeName = computeTypeName
        }

        private enum CodingKeys: String, CodingKey {
            case userVolumeSizeGib = "UserVolumeSizeGib"
            case runningMode = "RunningMode"
            case runningModeAutoStopTimeoutInMinutes = "RunningModeAutoStopTimeoutInMinutes"
            case rootVolumeSizeGib = "RootVolumeSizeGib"
            case computeTypeName = "ComputeTypeName"
        }
    }

    public struct DeleteTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// The ID of the WorkSpace. To find this ID, use DescribeWorkspaces.
        public let resourceId: String
        /// The tag keys.
        public let tagKeys: [String]

        public init(resourceId: String, tagKeys: [String]) {
            self.resourceId = resourceId
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tagKeys = "TagKeys"
        }
    }

    public struct ModifyWorkspaceStateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WorkspaceId", required: true, type: .string), 
            AWSShapeMember(label: "WorkspaceState", required: true, type: .enum)
        ]
        /// The ID of the WorkSpace.
        public let workspaceId: String
        /// The WorkSpace state.
        public let workspaceState: TargetWorkspaceState

        public init(workspaceId: String, workspaceState: TargetWorkspaceState) {
            self.workspaceId = workspaceId
            self.workspaceState = workspaceState
        }

        private enum CodingKeys: String, CodingKey {
            case workspaceId = "WorkspaceId"
            case workspaceState = "WorkspaceState"
        }
    }

    public struct ModificationState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Resource", required: false, type: .enum), 
            AWSShapeMember(label: "State", required: false, type: .enum)
        ]
        /// The resource.
        public let resource: ModificationResourceEnum?
        /// The modification state.
        public let state: ModificationStateEnum?

        public init(resource: ModificationResourceEnum? = nil, state: ModificationStateEnum? = nil) {
            self.resource = resource
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case resource = "Resource"
            case state = "State"
        }
    }

    public struct ModifyWorkspaceStateResult: AWSShape {

    }

    public struct CreateIpGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserRules", required: false, type: .list), 
            AWSShapeMember(label: "GroupDesc", required: false, type: .string), 
            AWSShapeMember(label: "GroupName", required: true, type: .string)
        ]
        /// The rules to add to the group.
        public let userRules: [IpRuleItem]?
        /// The description of the group.
        public let groupDesc: String?
        /// The name of the group.
        public let groupName: String

        public init(userRules: [IpRuleItem]? = nil, groupDesc: String? = nil, groupName: String) {
            self.userRules = userRules
            self.groupDesc = groupDesc
            self.groupName = groupName
        }

        private enum CodingKeys: String, CodingKey {
            case userRules = "UserRules"
            case groupDesc = "GroupDesc"
            case groupName = "GroupName"
        }
    }

    public struct Workspace: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "UserName", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "RootVolumeEncryptionEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "WorkspaceProperties", required: false, type: .structure), 
            AWSShapeMember(label: "ComputerName", required: false, type: .string), 
            AWSShapeMember(label: "ModificationStates", required: false, type: .list), 
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "ErrorCode", required: false, type: .string), 
            AWSShapeMember(label: "BundleId", required: false, type: .string), 
            AWSShapeMember(label: "UserVolumeEncryptionEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "WorkspaceId", required: false, type: .string), 
            AWSShapeMember(label: "VolumeEncryptionKey", required: false, type: .string), 
            AWSShapeMember(label: "IpAddress", required: false, type: .string)
        ]
        /// The identifier of the subnet for the WorkSpace.
        public let subnetId: String?
        /// The user for the WorkSpace.
        public let userName: String?
        /// The operational state of the WorkSpace.
        public let state: WorkspaceState?
        /// Indicates whether the data stored on the root volume is encrypted.
        public let rootVolumeEncryptionEnabled: Bool?
        /// The identifier of the AWS Directory Service directory for the WorkSpace.
        public let directoryId: String?
        /// The properties of the WorkSpace.
        public let workspaceProperties: WorkspaceProperties?
        /// The name of the WorkSpace, as seen by the operating system.
        public let computerName: String?
        /// The modification states of the WorkSpace.
        public let modificationStates: [ModificationState]?
        /// If the WorkSpace could not be created, contains a textual error message that describes the failure.
        public let errorMessage: String?
        /// If the WorkSpace could not be created, contains the error code.
        public let errorCode: String?
        /// The identifier of the bundle used to create the WorkSpace.
        public let bundleId: String?
        /// Indicates whether the data stored on the user volume is encrypted.
        public let userVolumeEncryptionEnabled: Bool?
        /// The identifier of the WorkSpace.
        public let workspaceId: String?
        /// The KMS key used to encrypt data stored on your WorkSpace.
        public let volumeEncryptionKey: String?
        /// The IP address of the WorkSpace.
        public let ipAddress: String?

        public init(subnetId: String? = nil, userName: String? = nil, state: WorkspaceState? = nil, rootVolumeEncryptionEnabled: Bool? = nil, directoryId: String? = nil, workspaceProperties: WorkspaceProperties? = nil, computerName: String? = nil, modificationStates: [ModificationState]? = nil, errorMessage: String? = nil, errorCode: String? = nil, bundleId: String? = nil, userVolumeEncryptionEnabled: Bool? = nil, workspaceId: String? = nil, volumeEncryptionKey: String? = nil, ipAddress: String? = nil) {
            self.subnetId = subnetId
            self.userName = userName
            self.state = state
            self.rootVolumeEncryptionEnabled = rootVolumeEncryptionEnabled
            self.directoryId = directoryId
            self.workspaceProperties = workspaceProperties
            self.computerName = computerName
            self.modificationStates = modificationStates
            self.errorMessage = errorMessage
            self.errorCode = errorCode
            self.bundleId = bundleId
            self.userVolumeEncryptionEnabled = userVolumeEncryptionEnabled
            self.workspaceId = workspaceId
            self.volumeEncryptionKey = volumeEncryptionKey
            self.ipAddress = ipAddress
        }

        private enum CodingKeys: String, CodingKey {
            case subnetId = "SubnetId"
            case userName = "UserName"
            case state = "State"
            case rootVolumeEncryptionEnabled = "RootVolumeEncryptionEnabled"
            case directoryId = "DirectoryId"
            case workspaceProperties = "WorkspaceProperties"
            case computerName = "ComputerName"
            case modificationStates = "ModificationStates"
            case errorMessage = "ErrorMessage"
            case errorCode = "ErrorCode"
            case bundleId = "BundleId"
            case userVolumeEncryptionEnabled = "UserVolumeEncryptionEnabled"
            case workspaceId = "WorkspaceId"
            case volumeEncryptionKey = "VolumeEncryptionKey"
            case ipAddress = "IpAddress"
        }
    }

    public struct DescribeWorkspaceDirectoriesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Directories", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the directories.
        public let directories: [WorkspaceDirectory]?
        /// The token to use to retrieve the next set of results, or null if there are no more results available. This token is valid for one day and must be used within that time frame.
        public let nextToken: String?

        public init(directories: [WorkspaceDirectory]? = nil, nextToken: String? = nil) {
            self.directories = directories
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case directories = "Directories"
            case nextToken = "NextToken"
        }
    }

    public struct RebuildWorkspacesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RebuildWorkspaceRequests", required: true, type: .list)
        ]
        /// The WorkSpace to rebuild. You can specify a single WorkSpace.
        public let rebuildWorkspaceRequests: [RebuildRequest]

        public init(rebuildWorkspaceRequests: [RebuildRequest]) {
            self.rebuildWorkspaceRequests = rebuildWorkspaceRequests
        }

        private enum CodingKeys: String, CodingKey {
            case rebuildWorkspaceRequests = "RebuildWorkspaceRequests"
        }
    }

    public struct DisassociateIpGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupIds", required: true, type: .list), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The IDs of one or more IP access control groups.
        public let groupIds: [String]
        /// The ID of the directory.
        public let directoryId: String

        public init(groupIds: [String], directoryId: String) {
            self.groupIds = groupIds
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case groupIds = "GroupIds"
            case directoryId = "DirectoryId"
        }
    }

    public struct TerminateWorkspacesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailedRequests", required: false, type: .list)
        ]
        /// Information about the WorkSpaces that could not be terminated.
        public let failedRequests: [FailedWorkspaceChangeRequest]?

        public init(failedRequests: [FailedWorkspaceChangeRequest]? = nil) {
            self.failedRequests = failedRequests
        }

        private enum CodingKeys: String, CodingKey {
            case failedRequests = "FailedRequests"
        }
    }

    public struct StopWorkspacesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailedRequests", required: false, type: .list)
        ]
        /// Information about the WorkSpaces that could not be stopped.
        public let failedRequests: [FailedWorkspaceChangeRequest]?

        public init(failedRequests: [FailedWorkspaceChangeRequest]? = nil) {
            self.failedRequests = failedRequests
        }

        private enum CodingKeys: String, CodingKey {
            case failedRequests = "FailedRequests"
        }
    }

    public enum WorkspaceDirectoryType: String, CustomStringConvertible, Codable {
        case simpleAd = "SIMPLE_AD"
        case adConnector = "AD_CONNECTOR"
        public var description: String { return self.rawValue }
    }

    public struct RebuildRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WorkspaceId", required: true, type: .string)
        ]
        /// The ID of the WorkSpace.
        public let workspaceId: String

        public init(workspaceId: String) {
            self.workspaceId = workspaceId
        }

        private enum CodingKeys: String, CodingKey {
            case workspaceId = "WorkspaceId"
        }
    }

    public enum ModificationResourceEnum: String, CustomStringConvertible, Codable {
        case rootVolume = "ROOT_VOLUME"
        case userVolume = "USER_VOLUME"
        case computeType = "COMPUTE_TYPE"
        public var description: String { return self.rawValue }
    }

    public struct IpRuleItem: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ipRule", required: false, type: .string), 
            AWSShapeMember(label: "ruleDesc", required: false, type: .string)
        ]
        /// The IP address range, in CIDR notation.
        public let ipRule: String?
        /// The description.
        public let ruleDesc: String?

        public init(ipRule: String? = nil, ruleDesc: String? = nil) {
            self.ipRule = ipRule
            self.ruleDesc = ruleDesc
        }

        private enum CodingKeys: String, CodingKey {
            case ipRule = "ipRule"
            case ruleDesc = "ruleDesc"
        }
    }

    public struct CreateWorkspacesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Workspaces", required: true, type: .list)
        ]
        /// The WorkSpaces to create. You can specify up to 25 WorkSpaces.
        public let workspaces: [WorkspaceRequest]

        public init(workspaces: [WorkspaceRequest]) {
            self.workspaces = workspaces
        }

        private enum CodingKeys: String, CodingKey {
            case workspaces = "Workspaces"
        }
    }

    public struct AssociateIpGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupIds", required: true, type: .list), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The IDs of one or more IP access control groups.
        public let groupIds: [String]
        /// The ID of the directory.
        public let directoryId: String

        public init(groupIds: [String], directoryId: String) {
            self.groupIds = groupIds
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case groupIds = "GroupIds"
            case directoryId = "DirectoryId"
        }
    }

    public struct AuthorizeIpRulesResult: AWSShape {

    }

    public struct AssociateIpGroupsResult: AWSShape {

    }

    public struct WorkspaceDirectory: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WorkspaceCreationProperties", required: false, type: .structure), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "CustomerUserName", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "WorkspaceSecurityGroupId", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryName", required: false, type: .string), 
            AWSShapeMember(label: "SubnetIds", required: false, type: .list), 
            AWSShapeMember(label: "DnsIpAddresses", required: false, type: .list), 
            AWSShapeMember(label: "RegistrationCode", required: false, type: .string), 
            AWSShapeMember(label: "Alias", required: false, type: .string), 
            AWSShapeMember(label: "IamRoleId", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryType", required: false, type: .enum), 
            AWSShapeMember(label: "ipGroupIds", required: false, type: .list)
        ]
        /// The default creation properties for all WorkSpaces in the directory.
        public let workspaceCreationProperties: DefaultWorkspaceCreationProperties?
        /// The state of the directory's registration with Amazon WorkSpaces
        public let state: WorkspaceDirectoryState?
        /// The user name for the service account.
        public let customerUserName: String?
        /// The directory identifier.
        public let directoryId: String?
        /// The identifier of the security group that is assigned to new WorkSpaces.
        public let workspaceSecurityGroupId: String?
        /// The name of the directory.
        public let directoryName: String?
        /// The identifiers of the subnets used with the directory.
        public let subnetIds: [String]?
        /// The IP addresses of the DNS servers for the directory.
        public let dnsIpAddresses: [String]?
        /// The registration code for the directory. This is the code that users enter in their Amazon WorkSpaces client application to connect to the directory.
        public let registrationCode: String?
        /// The directory alias.
        public let alias: String?
        /// The identifier of the IAM role. This is the role that allows Amazon WorkSpaces to make calls to other services, such as Amazon EC2, on your behalf.
        public let iamRoleId: String?
        /// The directory type.
        public let directoryType: WorkspaceDirectoryType?
        /// The identifiers of the IP access control groups associated with the directory.
        public let ipGroupIds: [String]?

        public init(workspaceCreationProperties: DefaultWorkspaceCreationProperties? = nil, state: WorkspaceDirectoryState? = nil, customerUserName: String? = nil, directoryId: String? = nil, workspaceSecurityGroupId: String? = nil, directoryName: String? = nil, subnetIds: [String]? = nil, dnsIpAddresses: [String]? = nil, registrationCode: String? = nil, alias: String? = nil, iamRoleId: String? = nil, directoryType: WorkspaceDirectoryType? = nil, ipGroupIds: [String]? = nil) {
            self.workspaceCreationProperties = workspaceCreationProperties
            self.state = state
            self.customerUserName = customerUserName
            self.directoryId = directoryId
            self.workspaceSecurityGroupId = workspaceSecurityGroupId
            self.directoryName = directoryName
            self.subnetIds = subnetIds
            self.dnsIpAddresses = dnsIpAddresses
            self.registrationCode = registrationCode
            self.alias = alias
            self.iamRoleId = iamRoleId
            self.directoryType = directoryType
            self.ipGroupIds = ipGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case workspaceCreationProperties = "WorkspaceCreationProperties"
            case state = "State"
            case customerUserName = "CustomerUserName"
            case directoryId = "DirectoryId"
            case workspaceSecurityGroupId = "WorkspaceSecurityGroupId"
            case directoryName = "DirectoryName"
            case subnetIds = "SubnetIds"
            case dnsIpAddresses = "DnsIpAddresses"
            case registrationCode = "RegistrationCode"
            case alias = "Alias"
            case iamRoleId = "IamRoleId"
            case directoryType = "DirectoryType"
            case ipGroupIds = "ipGroupIds"
        }
    }

    public struct WorkspaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserName", required: true, type: .string), 
            AWSShapeMember(label: "VolumeEncryptionKey", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "RootVolumeEncryptionEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "WorkspaceProperties", required: false, type: .structure), 
            AWSShapeMember(label: "UserVolumeEncryptionEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "BundleId", required: true, type: .string)
        ]
        /// The username of the user for the WorkSpace. This username must exist in the AWS Directory Service directory for the WorkSpace.
        public let userName: String
        /// The KMS key used to encrypt data stored on your WorkSpace.
        public let volumeEncryptionKey: String?
        /// The tags for the WorkSpace.
        public let tags: [Tag]?
        /// Indicates whether the data stored on the root volume is encrypted.
        public let rootVolumeEncryptionEnabled: Bool?
        /// The identifier of the AWS Directory Service directory for the WorkSpace. You can use DescribeWorkspaceDirectories to list the available directories.
        public let directoryId: String
        /// The WorkSpace properties.
        public let workspaceProperties: WorkspaceProperties?
        /// Indicates whether the data stored on the user volume is encrypted.
        public let userVolumeEncryptionEnabled: Bool?
        /// The identifier of the bundle for the WorkSpace. You can use DescribeWorkspaceBundles to list the available bundles.
        public let bundleId: String

        public init(userName: String, volumeEncryptionKey: String? = nil, tags: [Tag]? = nil, rootVolumeEncryptionEnabled: Bool? = nil, directoryId: String, workspaceProperties: WorkspaceProperties? = nil, userVolumeEncryptionEnabled: Bool? = nil, bundleId: String) {
            self.userName = userName
            self.volumeEncryptionKey = volumeEncryptionKey
            self.tags = tags
            self.rootVolumeEncryptionEnabled = rootVolumeEncryptionEnabled
            self.directoryId = directoryId
            self.workspaceProperties = workspaceProperties
            self.userVolumeEncryptionEnabled = userVolumeEncryptionEnabled
            self.bundleId = bundleId
        }

        private enum CodingKeys: String, CodingKey {
            case userName = "UserName"
            case volumeEncryptionKey = "VolumeEncryptionKey"
            case tags = "Tags"
            case rootVolumeEncryptionEnabled = "RootVolumeEncryptionEnabled"
            case directoryId = "DirectoryId"
            case workspaceProperties = "WorkspaceProperties"
            case userVolumeEncryptionEnabled = "UserVolumeEncryptionEnabled"
            case bundleId = "BundleId"
        }
    }

    public struct UpdateRulesOfIpGroupResult: AWSShape {

    }

    public struct StartWorkspacesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "FailedRequests", required: false, type: .list)
        ]
        /// Information about the WorkSpaces that could not be started.
        public let failedRequests: [FailedWorkspaceChangeRequest]?

        public init(failedRequests: [FailedWorkspaceChangeRequest]? = nil) {
            self.failedRequests = failedRequests
        }

        private enum CodingKeys: String, CodingKey {
            case failedRequests = "FailedRequests"
        }
    }

    public struct DeleteTagsResult: AWSShape {

    }

    public struct DescribeWorkspaceDirectoriesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryIds", required: false, type: .list)
        ]
        /// The token for the next set of results. (You received this token from a previous call.)
        public let nextToken: String?
        /// The identifiers of the directories. If the value is null, all directories are retrieved.
        public let directoryIds: [String]?

        public init(nextToken: String? = nil, directoryIds: [String]? = nil) {
            self.nextToken = nextToken
            self.directoryIds = directoryIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case directoryIds = "DirectoryIds"
        }
    }

    public struct TerminateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "WorkspaceId", required: true, type: .string)
        ]
        /// The ID of the WorkSpace.
        public let workspaceId: String

        public init(workspaceId: String) {
            self.workspaceId = workspaceId
        }

        private enum CodingKeys: String, CodingKey {
            case workspaceId = "WorkspaceId"
        }
    }

}