// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension SecretsManager {

    public struct PutResourcePolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ARN", required: false, type: .string)
        ]
        /// The friendly name of the secret that the resource-based policy was retrieved for.
        public let name: String?
        /// The ARN of the secret that the resource-based policy was retrieved for.
        public let arn: String?

        public init(name: String? = nil, arn: String? = nil) {
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case arn = "ARN"
        }
    }

    public struct DescribeSecretResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeletedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "VersionIdsToStages", required: false, type: .map), 
            AWSShapeMember(label: "LastAccessedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "RotationLambdaARN", required: false, type: .string), 
            AWSShapeMember(label: "LastChangedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "RotationRules", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "LastRotatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "ARN", required: false, type: .string), 
            AWSShapeMember(label: "RotationEnabled", required: false, type: .boolean)
        ]
        /// This value exists if the secret is scheduled for deletion. Some time after the specified date and time, Secrets Manager deletes the secret and all of its versions. If a secret is scheduled for deletion, then its details, including the encrypted secret information, is not accessible. To cancel a scheduled deletion and restore access, use RestoreSecret.
        public let deletedDate: TimeStamp?
        /// A list of all of the currently assigned VersionStage staging labels and the VersionId that each is attached to. Staging labels are used to keep track of the different versions during the rotation process.  A version that does not have any staging labels attached is considered deprecated and subject to deletion. Such versions are not included in this list. 
        public let versionIdsToStages: [String: [String]]?
        /// The last date that this secret was accessed. This value is truncated to midnight of the date and therefore shows only the date, not the time.
        public let lastAccessedDate: TimeStamp?
        /// The ARN of a Lambda function that's invoked by Secrets Manager to rotate the secret either automatically per the schedule or manually by a call to RotateSecret.
        public let rotationLambdaARN: String?
        /// The last date and time that this secret was modified in any way.
        public let lastChangedDate: TimeStamp?
        /// The list of user-defined tags that are associated with the secret. To add tags to a secret, use TagResource. To remove tags, use UntagResource.
        public let tags: [Tag]?
        /// The ARN or alias of the AWS KMS customer master key (CMK) that's used to encrypt the SecretString or SecretBinary fields in each version of the secret. If you don't provide a key, then Secrets Manager defaults to encrypting the secret fields with the default AWS KMS CMK (the one named awssecretsmanager) for this account.
        public let kmsKeyId: String?
        /// A structure that contains the rotation configuration for this secret.
        public let rotationRules: RotationRulesType?
        /// The user-provided description of the secret.
        public let description: String?
        /// The user-provided friendly name of the secret.
        public let name: String?
        /// The most recent date and time that the Secrets Manager rotation process was successfully completed. This value is null if the secret has never rotated.
        public let lastRotatedDate: TimeStamp?
        /// The ARN of the secret.
        public let arn: String?
        /// Specifies whether automatic rotation is enabled for this secret. To enable rotation, use RotateSecret with AutomaticallyRotateAfterDays set to a value greater than 0. To disable rotation, use CancelRotateSecret.
        public let rotationEnabled: Bool?

        public init(deletedDate: TimeStamp? = nil, versionIdsToStages: [String: [String]]? = nil, lastAccessedDate: TimeStamp? = nil, rotationLambdaARN: String? = nil, lastChangedDate: TimeStamp? = nil, tags: [Tag]? = nil, kmsKeyId: String? = nil, rotationRules: RotationRulesType? = nil, description: String? = nil, name: String? = nil, lastRotatedDate: TimeStamp? = nil, arn: String? = nil, rotationEnabled: Bool? = nil) {
            self.deletedDate = deletedDate
            self.versionIdsToStages = versionIdsToStages
            self.lastAccessedDate = lastAccessedDate
            self.rotationLambdaARN = rotationLambdaARN
            self.lastChangedDate = lastChangedDate
            self.tags = tags
            self.kmsKeyId = kmsKeyId
            self.rotationRules = rotationRules
            self.description = description
            self.name = name
            self.lastRotatedDate = lastRotatedDate
            self.arn = arn
            self.rotationEnabled = rotationEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case deletedDate = "DeletedDate"
            case versionIdsToStages = "VersionIdsToStages"
            case lastAccessedDate = "LastAccessedDate"
            case rotationLambdaARN = "RotationLambdaARN"
            case lastChangedDate = "LastChangedDate"
            case tags = "Tags"
            case kmsKeyId = "KmsKeyId"
            case rotationRules = "RotationRules"
            case description = "Description"
            case name = "Name"
            case lastRotatedDate = "LastRotatedDate"
            case arn = "ARN"
            case rotationEnabled = "RotationEnabled"
        }
    }

    public struct UpdateSecretResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ARN", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The ARN of the secret that was updated.  Secrets Manager automatically adds several random characters to the name at the end of the ARN when you initially create a secret. This affects only the ARN and not the actual friendly name. This ensures that if you create a new secret with the same name as an old secret that you previously deleted, then users with access to the old secret don't automatically get access to the new secret because the ARNs are different. 
        public let arn: String?
        /// If a new version of the secret was created by this operation, then VersionId contains the unique identifier of the new version.
        public let versionId: String?
        /// The friendly name of the secret that was updated.
        public let name: String?

        public init(arn: String? = nil, versionId: String? = nil, name: String? = nil) {
            self.arn = arn
            self.versionId = versionId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case versionId = "VersionId"
            case name = "Name"
        }
    }

    public struct ListSecretVersionIdsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "IncludeDeprecated", required: false, type: .boolean), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "SecretId", required: true, type: .string)
        ]
        /// (Optional) Use this parameter in a request if you receive a NextToken response in a previous request that indicates that there's more output available. In a subsequent call, set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        public let nextToken: String?
        /// (Optional) Specifies that you want the results to include versions that do not have any staging labels attached to them. Such versions are considered deprecated and are subject to deletion by Secrets Manager as needed.
        public let includeDeprecated: Bool?
        /// (Optional) Limits the number of results that you want to include in the response. If you don't include this parameter, it defaults to a value that's specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (isn't null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Secrets Manager might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        public let maxResults: Int32?
        /// The identifier for the secret containing the versions you want to list. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names that end with a hyphen followed by six characters. 
        public let secretId: String

        public init(nextToken: String? = nil, includeDeprecated: Bool? = nil, maxResults: Int32? = nil, secretId: String) {
            self.nextToken = nextToken
            self.includeDeprecated = includeDeprecated
            self.maxResults = maxResults
            self.secretId = secretId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case includeDeprecated = "IncludeDeprecated"
            case maxResults = "MaxResults"
            case secretId = "SecretId"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagKeys", required: true, type: .list), 
            AWSShapeMember(label: "SecretId", required: true, type: .string)
        ]
        /// A list of tag key names to remove from the secret. You don't specify the value. Both the key and its associated value are removed. This parameter to the API requires a JSON text string argument. For information on how to format a JSON parameter for the various command line tool environments, see Using JSON for Parameters in the AWS CLI User Guide.
        public let tagKeys: [String]
        /// The identifier for the secret that you want to remove tags from. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names that end with a hyphen followed by six characters. 
        public let secretId: String

        public init(tagKeys: [String], secretId: String) {
            self.tagKeys = tagKeys
            self.secretId = secretId
        }

        private enum CodingKeys: String, CodingKey {
            case tagKeys = "TagKeys"
            case secretId = "SecretId"
        }
    }

    public struct DeleteSecretResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeletionDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ARN", required: false, type: .string)
        ]
        /// The date and time after which this secret can be deleted by Secrets Manager and can no longer be restored. This value is the date and time of the delete request plus the number of days specified in RecoveryWindowInDays.
        public let deletionDate: TimeStamp?
        /// The friendly name of the secret that is now scheduled for deletion.
        public let name: String?
        /// The ARN of the secret that is now scheduled for deletion.
        public let arn: String?

        public init(deletionDate: TimeStamp? = nil, name: String? = nil, arn: String? = nil) {
            self.deletionDate = deletionDate
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case deletionDate = "DeletionDate"
            case name = "Name"
            case arn = "ARN"
        }
    }

    public struct SecretVersionsListEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastAccessedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "VersionStages", required: false, type: .list), 
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "VersionId", required: false, type: .string)
        ]
        /// The date that this version of the secret was last accessed. Note that the resolution of this field is at the date level and does not include the time.
        public let lastAccessedDate: TimeStamp?
        /// An array of staging labels that are currently associated with this version of the secret.
        public let versionStages: [String]?
        /// The date and time this version of the secret was created.
        public let createdDate: TimeStamp?
        /// The unique version identifier of this version of the secret.
        public let versionId: String?

        public init(lastAccessedDate: TimeStamp? = nil, versionStages: [String]? = nil, createdDate: TimeStamp? = nil, versionId: String? = nil) {
            self.lastAccessedDate = lastAccessedDate
            self.versionStages = versionStages
            self.createdDate = createdDate
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case lastAccessedDate = "LastAccessedDate"
            case versionStages = "VersionStages"
            case createdDate = "CreatedDate"
            case versionId = "VersionId"
        }
    }

    public struct RotationRulesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutomaticallyAfterDays", required: false, type: .long)
        ]
        /// Specifies the number of days between automatic scheduled rotations of the secret. Secrets Manager schedules the next rotation when the previous one is complete. Secrets Manager schedules the date by adding the rotation interval (number of days) to the actual date of the last rotation. The service chooses the hour within that 24-hour date window randomly. The minute is also chosen somewhat randomly, but weighted towards the top of the hour and influenced by a variety of factors that help distribute load.
        public let automaticallyAfterDays: Int64?

        public init(automaticallyAfterDays: Int64? = nil) {
            self.automaticallyAfterDays = automaticallyAfterDays
        }

        private enum CodingKeys: String, CodingKey {
            case automaticallyAfterDays = "AutomaticallyAfterDays"
        }
    }

    public struct GetRandomPasswordResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RandomPassword", required: false, type: .string)
        ]
        /// A string with the generated password.
        public let randomPassword: String?

        public init(randomPassword: String? = nil) {
            self.randomPassword = randomPassword
        }

        private enum CodingKeys: String, CodingKey {
            case randomPassword = "RandomPassword"
        }
    }

    public struct RestoreSecretResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ARN", required: false, type: .string)
        ]
        /// The friendly name of the secret that was restored.
        public let name: String?
        /// The ARN of the secret that was restored.
        public let arn: String?

        public init(name: String? = nil, arn: String? = nil) {
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case arn = "ARN"
        }
    }

    public struct DeleteResourcePolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecretId", required: true, type: .string)
        ]
        /// Specifies the secret that you want to delete the attached resource-based policy for. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names that end with a hyphen followed by six characters. 
        public let secretId: String

        public init(secretId: String) {
            self.secretId = secretId
        }

        private enum CodingKeys: String, CodingKey {
            case secretId = "SecretId"
        }
    }

    public struct ListSecretsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecretList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of the secrets in the account.
        public let secretList: [SecretListEntry]?
        /// If present in the response, this value indicates that there's more output available than what's included in the current response. This can occur even when the response includes no values at all, such as when you ask for a filtered view of a very long list. Use this value in the NextToken request parameter in a subsequent call to the operation to continue processing and get the next part of the output. You should repeat this until the NextToken response element comes back empty (as null).
        public let nextToken: String?

        public init(secretList: [SecretListEntry]? = nil, nextToken: String? = nil) {
            self.secretList = secretList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case secretList = "SecretList"
            case nextToken = "NextToken"
        }
    }

    public struct CancelRotateSecretRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecretId", required: true, type: .string)
        ]
        /// Specifies the secret for which you want to cancel a rotation request. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names that end with a hyphen followed by six characters. 
        public let secretId: String

        public init(secretId: String) {
            self.secretId = secretId
        }

        private enum CodingKeys: String, CodingKey {
            case secretId = "SecretId"
        }
    }

    public struct GetResourcePolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecretId", required: true, type: .string)
        ]
        /// Specifies the secret that you want to retrieve the attached resource-based policy for. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names that end with a hyphen followed by six characters. 
        public let secretId: String

        public init(secretId: String) {
            self.secretId = secretId
        }

        private enum CodingKeys: String, CodingKey {
            case secretId = "SecretId"
        }
    }

    public struct DeleteResourcePolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ARN", required: false, type: .string)
        ]
        /// The friendly name of the secret that the resource-based policy was deleted for.
        public let name: String?
        /// The ARN of the secret that the resource-based policy was deleted for.
        public let arn: String?

        public init(name: String? = nil, arn: String? = nil) {
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case arn = "ARN"
        }
    }

    public struct GetRandomPasswordRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IncludeSpace", required: false, type: .boolean), 
            AWSShapeMember(label: "ExcludeLowercase", required: false, type: .boolean), 
            AWSShapeMember(label: "ExcludeCharacters", required: false, type: .string), 
            AWSShapeMember(label: "ExcludePunctuation", required: false, type: .boolean), 
            AWSShapeMember(label: "ExcludeNumbers", required: false, type: .boolean), 
            AWSShapeMember(label: "ExcludeUppercase", required: false, type: .boolean), 
            AWSShapeMember(label: "PasswordLength", required: false, type: .long), 
            AWSShapeMember(label: "RequireEachIncludedType", required: false, type: .boolean)
        ]
        /// Specifies that the generated password can include the space character. The default if you do not include this switch parameter is that the space character is not included.
        public let includeSpace: Bool?
        /// Specifies that the generated password should not include lowercase letters. The default if you do not include this switch parameter is that lowercase letters can be included.
        public let excludeLowercase: Bool?
        /// A string that includes characters that should not be included in the generated password. The default is that all characters from the included sets can be used.
        public let excludeCharacters: String?
        /// Specifies that the generated password should not include punctuation characters. The default if you do not include this switch parameter is that punctuation characters can be included. The following are the punctuation characters that can be included in the generated password if you don't explicitly exclude them with ExcludeCharacters or ExcludePunctuation:  ! " # $ % &amp; ' ( ) * + , - . / : ; &lt; = &gt; ? @ [ \ ] ^ _ ` { | } ~ 
        public let excludePunctuation: Bool?
        /// Specifies that the generated password should not include digits. The default if you do not include this switch parameter is that digits can be included.
        public let excludeNumbers: Bool?
        /// Specifies that the generated password should not include uppercase letters. The default if you do not include this switch parameter is that uppercase letters can be included.
        public let excludeUppercase: Bool?
        /// The desired length of the generated password. The default value if you do not include this parameter is 32 characters.
        public let passwordLength: Int64?
        /// A boolean value that specifies whether the generated password must include at least one of every allowed character type. The default value is True and the operation requires at least one of every character type.
        public let requireEachIncludedType: Bool?

        public init(includeSpace: Bool? = nil, excludeLowercase: Bool? = nil, excludeCharacters: String? = nil, excludePunctuation: Bool? = nil, excludeNumbers: Bool? = nil, excludeUppercase: Bool? = nil, passwordLength: Int64? = nil, requireEachIncludedType: Bool? = nil) {
            self.includeSpace = includeSpace
            self.excludeLowercase = excludeLowercase
            self.excludeCharacters = excludeCharacters
            self.excludePunctuation = excludePunctuation
            self.excludeNumbers = excludeNumbers
            self.excludeUppercase = excludeUppercase
            self.passwordLength = passwordLength
            self.requireEachIncludedType = requireEachIncludedType
        }

        private enum CodingKeys: String, CodingKey {
            case includeSpace = "IncludeSpace"
            case excludeLowercase = "ExcludeLowercase"
            case excludeCharacters = "ExcludeCharacters"
            case excludePunctuation = "ExcludePunctuation"
            case excludeNumbers = "ExcludeNumbers"
            case excludeUppercase = "ExcludeUppercase"
            case passwordLength = "PasswordLength"
            case requireEachIncludedType = "RequireEachIncludedType"
        }
    }

    public struct GetSecretValueResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "SecretString", required: false, type: .string), 
            AWSShapeMember(label: "VersionStages", required: false, type: .list), 
            AWSShapeMember(label: "SecretBinary", required: false, type: .blob), 
            AWSShapeMember(label: "ARN", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The date and time that this version of the secret was created.
        public let createdDate: TimeStamp?
        /// The unique identifier of this version of the secret.
        public let versionId: String?
        /// The decrypted part of the protected secret information that was originally provided as a string. If you create this secret by using the Secrets Manager console then only the SecretString parameter contains data. Secrets Manager stores the information as a JSON structure of key/value pairs that the Lambda rotation function knows how to parse. If you store custom information in the secret by using the CreateSecret, UpdateSecret, or PutSecretValue API operations instead of the Secrets Manager console, or by using the Other secret type in the console, then you must code your Lambda rotation function to parse and interpret those values.
        public let secretString: String?
        /// A list of all of the staging labels currently attached to this version of the secret.
        public let versionStages: [String]?
        /// The decrypted part of the protected secret information that was originally provided as binary data in the form of a byte array. The response parameter represents the binary data as a base64-encoded string. This parameter is not used if the secret is created by the Secrets Manager console. If you store custom information in this field of the secret, then you must code your Lambda rotation function to parse and interpret whatever you store in the SecretString or SecretBinary fields.
        public let secretBinary: Data?
        /// The ARN of the secret.
        public let arn: String?
        /// The friendly name of the secret.
        public let name: String?

        public init(createdDate: TimeStamp? = nil, versionId: String? = nil, secretString: String? = nil, versionStages: [String]? = nil, secretBinary: Data? = nil, arn: String? = nil, name: String? = nil) {
            self.createdDate = createdDate
            self.versionId = versionId
            self.secretString = secretString
            self.versionStages = versionStages
            self.secretBinary = secretBinary
            self.arn = arn
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case createdDate = "CreatedDate"
            case versionId = "VersionId"
            case secretString = "SecretString"
            case versionStages = "VersionStages"
            case secretBinary = "SecretBinary"
            case arn = "ARN"
            case name = "Name"
        }
    }

    public struct DescribeSecretRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecretId", required: true, type: .string)
        ]
        /// The identifier of the secret whose details you want to retrieve. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names that end with a hyphen followed by six characters. 
        public let secretId: String

        public init(secretId: String) {
            self.secretId = secretId
        }

        private enum CodingKeys: String, CodingKey {
            case secretId = "SecretId"
        }
    }

    public struct ListSecretVersionIdsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ARN", required: false, type: .string), 
            AWSShapeMember(label: "Versions", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// If present in the response, this value indicates that there's more output available than what's included in the current response. This can occur even when the response includes no values at all, such as when you ask for a filtered view of a very long list. Use this value in the NextToken request parameter in a subsequent call to the operation to continue processing and get the next part of the output. You should repeat this until the NextToken response element comes back empty (as null).
        public let nextToken: String?
        /// The Amazon Resource Name (ARN) for the secret.  Secrets Manager automatically adds several random characters to the name at the end of the ARN when you initially create a secret. This affects only the ARN and not the actual friendly name. This ensures that if you create a new secret with the same name as an old secret that you previously deleted, then users with access to the old secret don't automatically get access to the new secret because the ARNs are different. 
        public let arn: String?
        /// The list of the currently available versions of the specified secret.
        public let versions: [SecretVersionsListEntry]?
        /// The friendly name of the secret.
        public let name: String?

        public init(nextToken: String? = nil, arn: String? = nil, versions: [SecretVersionsListEntry]? = nil, name: String? = nil) {
            self.nextToken = nextToken
            self.arn = arn
            self.versions = versions
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case arn = "ARN"
            case versions = "Versions"
            case name = "Name"
        }
    }

    public struct DeleteSecretRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecretId", required: true, type: .string), 
            AWSShapeMember(label: "RecoveryWindowInDays", required: false, type: .long), 
            AWSShapeMember(label: "ForceDeleteWithoutRecovery", required: false, type: .boolean)
        ]
        /// Specifies the secret that you want to delete. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names that end with a hyphen followed by six characters. 
        public let secretId: String
        /// (Optional) Specifies the number of days that Secrets Manager waits before it can delete the secret. You can't use both this parameter and the ForceDeleteWithoutRecovery parameter in the same API call. This value can range from 7 to 30 days. The default value is 30.
        public let recoveryWindowInDays: Int64?
        /// (Optional) Specifies that the secret is to be deleted without any recovery window. You can't use both this parameter and the RecoveryWindowInDays parameter in the same API call. An asynchronous background process performs the actual deletion, so there can be a short delay before the operation completes. If you write code to delete and then immediately recreate a secret with the same name, ensure that your code includes appropriate back off and retry logic.  Use this parameter with caution. This parameter causes the operation to skip the normal waiting period before the permanent deletion that AWS would normally impose with the RecoveryWindowInDays parameter. If you delete a secret with the ForceDeleteWithouRecovery parameter, then you have no opportunity to recover the secret. It is permanently lost. 
        public let forceDeleteWithoutRecovery: Bool?

        public init(secretId: String, recoveryWindowInDays: Int64? = nil, forceDeleteWithoutRecovery: Bool? = nil) {
            self.secretId = secretId
            self.recoveryWindowInDays = recoveryWindowInDays
            self.forceDeleteWithoutRecovery = forceDeleteWithoutRecovery
        }

        private enum CodingKeys: String, CodingKey {
            case secretId = "SecretId"
            case recoveryWindowInDays = "RecoveryWindowInDays"
            case forceDeleteWithoutRecovery = "ForceDeleteWithoutRecovery"
        }
    }

    public struct GetResourcePolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ARN", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ResourcePolicy", required: false, type: .string)
        ]
        /// The ARN of the secret that the resource-based policy was retrieved for.
        public let arn: String?
        /// The friendly name of the secret that the resource-based policy was retrieved for.
        public let name: String?
        /// A JSON-formatted string that describes the permissions that are associated with the attached secret. These permissions are combined with any permissions that are associated with the user or role that attempts to access this secret. The combined permissions specify who can access the secret and what actions they can perform. For more information, see Authentication and Access Control for AWS Secrets Manager in the AWS Secrets Manager User Guide.
        public let resourcePolicy: String?

        public init(arn: String? = nil, name: String? = nil, resourcePolicy: String? = nil) {
            self.arn = arn
            self.name = name
            self.resourcePolicy = resourcePolicy
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case name = "Name"
            case resourcePolicy = "ResourcePolicy"
        }
    }

    public struct RotateSecretResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ARN", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The ARN of the secret.
        public let arn: String?
        /// The ID of the new version of the secret created by the rotation started by this request.
        public let versionId: String?
        /// The friendly name of the secret.
        public let name: String?

        public init(arn: String? = nil, versionId: String? = nil, name: String? = nil) {
            self.arn = arn
            self.versionId = versionId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case versionId = "VersionId"
            case name = "Name"
        }
    }

    public struct PutResourcePolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourcePolicy", required: true, type: .string), 
            AWSShapeMember(label: "SecretId", required: true, type: .string)
        ]
        /// A JSON-formatted string that's constructed according to the grammar and syntax for an AWS resource-based policy. The policy in the string identifies who can access or manage this secret and its versions. For information on how to format a JSON parameter for the various command line tool environments, see Using JSON for Parameters in the AWS CLI User Guide.
        public let resourcePolicy: String
        /// Specifies the secret that you want to attach the resource-based policy to. You can specify either the ARN or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names that end with a hyphen followed by six characters. 
        public let secretId: String

        public init(resourcePolicy: String, secretId: String) {
            self.resourcePolicy = resourcePolicy
            self.secretId = secretId
        }

        private enum CodingKeys: String, CodingKey {
            case resourcePolicy = "ResourcePolicy"
            case secretId = "SecretId"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .list), 
            AWSShapeMember(label: "SecretId", required: true, type: .string)
        ]
        /// The tags to attach to the secret. Each element in the list consists of a Key and a Value. This parameter to the API requires a JSON text string argument. For information on how to format a JSON parameter for the various command line tool environments, see Using JSON for Parameters in the AWS CLI User Guide. For the AWS CLI, you can also use the syntax: --Tags Key="Key1",Value="Value1",Key="Key2",Value="Value2"[,…] 
        public let tags: [Tag]
        /// The identifier for the secret that you want to attach tags to. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names that end with a hyphen followed by six characters. 
        public let secretId: String

        public init(tags: [Tag], secretId: String) {
            self.tags = tags
            self.secretId = secretId
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case secretId = "SecretId"
        }
    }

    public struct CancelRotateSecretResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ARN", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The ARN of the secret for which rotation was canceled.
        public let arn: String?
        /// The unique identifier of the version of the secret that was created during the rotation. This version might not be complete, and should be evaluated for possible deletion. At the very least, you should remove the VersionStage value AWSPENDING to enable this version to be deleted. Failing to clean up a cancelled rotation can block you from successfully starting future rotations.
        public let versionId: String?
        /// The friendly name of the secret for which rotation was canceled.
        public let name: String?

        public init(arn: String? = nil, versionId: String? = nil, name: String? = nil) {
            self.arn = arn
            self.versionId = versionId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case versionId = "VersionId"
            case name = "Name"
        }
    }

    public struct CreateSecretResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ARN", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the secret that you just created.  Secrets Manager automatically adds several random characters to the name at the end of the ARN when you initially create a secret. This affects only the ARN and not the actual friendly name. This ensures that if you create a new secret with the same name as an old secret that you previously deleted, then users with access to the old secret don't automatically get access to the new secret because the ARNs are different. 
        public let arn: String?
        /// The unique identifier that's associated with the version of the secret you just created.
        public let versionId: String?
        /// The friendly name of the secret that you just created.
        public let name: String?

        public init(arn: String? = nil, versionId: String? = nil, name: String? = nil) {
            self.arn = arn
            self.versionId = versionId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case versionId = "VersionId"
            case name = "Name"
        }
    }

    public struct SecretListEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeletedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "LastAccessedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "RotationLambdaARN", required: false, type: .string), 
            AWSShapeMember(label: "LastChangedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "SecretVersionsToStages", required: false, type: .map), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "RotationRules", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ARN", required: false, type: .string), 
            AWSShapeMember(label: "LastRotatedDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "RotationEnabled", required: false, type: .boolean)
        ]
        /// The date and time on which this secret was deleted. Not present on active secrets. The secret can be recovered until the number of days in the recovery window has passed, as specified in the RecoveryWindowInDays parameter of the DeleteSecret operation.
        public let deletedDate: TimeStamp?
        /// The last date that this secret was accessed. This value is truncated to midnight of the date and therefore shows only the date, not the time.
        public let lastAccessedDate: TimeStamp?
        /// The ARN of an AWS Lambda function that's invoked by Secrets Manager to rotate and expire the secret either automatically per the schedule or manually by a call to RotateSecret.
        public let rotationLambdaARN: String?
        /// The last date and time that this secret was modified in any way.
        public let lastChangedDate: TimeStamp?
        /// A list of all of the currently assigned SecretVersionStage staging labels and the SecretVersionId that each is attached to. Staging labels are used to keep track of the different versions during the rotation process.  A version that does not have any SecretVersionStage is considered deprecated and subject to deletion. Such versions are not included in this list. 
        public let secretVersionsToStages: [String: [String]]?
        /// The list of user-defined tags that are associated with the secret. To add tags to a secret, use TagResource. To remove tags, use UntagResource.
        public let tags: [Tag]?
        /// The ARN or alias of the AWS KMS customer master key (CMK) that's used to encrypt the SecretString and SecretBinary fields in each version of the secret. If you don't provide a key, then Secrets Manager defaults to encrypting the secret fields with the default KMS CMK (the one named awssecretsmanager) for this account.
        public let kmsKeyId: String?
        /// A structure that defines the rotation configuration for the secret.
        public let rotationRules: RotationRulesType?
        /// The user-provided description of the secret.
        public let description: String?
        /// The friendly name of the secret. You can use forward slashes in the name to represent a path hierarchy. For example, /prod/databases/dbserver1 could represent the secret for a server named dbserver1 in the folder databases in the folder prod. 
        public let name: String?
        /// The Amazon Resource Name (ARN) of the secret. For more information about ARNs in Secrets Manager, see Policy Resources in the AWS Secrets Manager User Guide.
        public let arn: String?
        /// The last date and time that the rotation process for this secret was invoked.
        public let lastRotatedDate: TimeStamp?
        /// Indicated whether automatic, scheduled rotation is enabled for this secret.
        public let rotationEnabled: Bool?

        public init(deletedDate: TimeStamp? = nil, lastAccessedDate: TimeStamp? = nil, rotationLambdaARN: String? = nil, lastChangedDate: TimeStamp? = nil, secretVersionsToStages: [String: [String]]? = nil, tags: [Tag]? = nil, kmsKeyId: String? = nil, rotationRules: RotationRulesType? = nil, description: String? = nil, name: String? = nil, arn: String? = nil, lastRotatedDate: TimeStamp? = nil, rotationEnabled: Bool? = nil) {
            self.deletedDate = deletedDate
            self.lastAccessedDate = lastAccessedDate
            self.rotationLambdaARN = rotationLambdaARN
            self.lastChangedDate = lastChangedDate
            self.secretVersionsToStages = secretVersionsToStages
            self.tags = tags
            self.kmsKeyId = kmsKeyId
            self.rotationRules = rotationRules
            self.description = description
            self.name = name
            self.arn = arn
            self.lastRotatedDate = lastRotatedDate
            self.rotationEnabled = rotationEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case deletedDate = "DeletedDate"
            case lastAccessedDate = "LastAccessedDate"
            case rotationLambdaARN = "RotationLambdaARN"
            case lastChangedDate = "LastChangedDate"
            case secretVersionsToStages = "SecretVersionsToStages"
            case tags = "Tags"
            case kmsKeyId = "KmsKeyId"
            case rotationRules = "RotationRules"
            case description = "Description"
            case name = "Name"
            case arn = "ARN"
            case lastRotatedDate = "LastRotatedDate"
            case rotationEnabled = "RotationEnabled"
        }
    }

    public struct UpdateSecretVersionStageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ARN", required: false, type: .string)
        ]
        /// The friendly name of the secret with the staging label that was modified.
        public let name: String?
        /// The ARN of the secret with the staging label that was modified.
        public let arn: String?

        public init(name: String? = nil, arn: String? = nil) {
            self.name = name
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case arn = "ARN"
        }
    }

    public struct GetSecretValueRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VersionStage", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", required: false, type: .string), 
            AWSShapeMember(label: "SecretId", required: true, type: .string)
        ]
        /// Specifies the secret version that you want to retrieve by the staging label attached to the version. Staging labels are used to keep track of different versions during the rotation process. If you use this parameter then don't specify VersionId. If you don't specify either a VersionStage or VersionId, then the default is to perform the operation on the version with the VersionStage value of AWSCURRENT.
        public let versionStage: String?
        /// Specifies the unique identifier of the version of the secret that you want to retrieve. If you specify this parameter then don't specify VersionStage. If you don't specify either a VersionStage or VersionId then the default is to perform the operation on the version with the VersionStage value of AWSCURRENT. This value is typically a UUID-type value with 32 hexadecimal digits.
        public let versionId: String?
        /// Specifies the secret containing the version that you want to retrieve. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names that end with a hyphen followed by six characters. 
        public let secretId: String

        public init(versionStage: String? = nil, versionId: String? = nil, secretId: String) {
            self.versionStage = versionStage
            self.versionId = versionId
            self.secretId = secretId
        }

        private enum CodingKeys: String, CodingKey {
            case versionStage = "VersionStage"
            case versionId = "VersionId"
            case secretId = "SecretId"
        }
    }

    public struct RestoreSecretRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecretId", required: true, type: .string)
        ]
        /// Specifies the secret that you want to restore from a previously scheduled deletion. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names that end with a hyphen followed by six characters. 
        public let secretId: String

        public init(secretId: String) {
            self.secretId = secretId
        }

        private enum CodingKeys: String, CodingKey {
            case secretId = "SecretId"
        }
    }

    public struct PutSecretValueResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ARN", required: false, type: .string), 
            AWSShapeMember(label: "VersionStages", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "VersionId", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) for the secret for which you just created a version.
        public let arn: String?
        /// The list of staging labels that are currently attached to this version of the secret. Staging labels are used to track a version as it progresses through the secret rotation process.
        public let versionStages: [String]?
        /// The friendly name of the secret for which you just created or updated a version.
        public let name: String?
        /// The unique identifier of the version of the secret you just created or updated.
        public let versionId: String?

        public init(arn: String? = nil, versionStages: [String]? = nil, name: String? = nil, versionId: String? = nil) {
            self.arn = arn
            self.versionStages = versionStages
            self.name = name
            self.versionId = versionId
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case versionStages = "VersionStages"
            case name = "Name"
            case versionId = "VersionId"
        }
    }

    public struct RotateSecretRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RotationRules", required: false, type: .structure), 
            AWSShapeMember(label: "RotationLambdaARN", required: false, type: .string), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "SecretId", required: true, type: .string)
        ]
        /// A structure that defines the rotation configuration for this secret.
        public let rotationRules: RotationRulesType?
        /// (Optional) Specifies the ARN of the Lambda function that can rotate the secret.
        public let rotationLambdaARN: String?
        /// (Optional) Specifies a unique identifier for the new version of the secret that helps ensure idempotency.  If you use the AWS CLI or one of the AWS SDK to call this operation, then you can leave this parameter empty. The CLI or SDK generates a random UUID for you and includes that in the request for this parameter. If you don't use the SDK and instead generate a raw HTTP request to the Secrets Manager service endpoint, then you must generate a ClientRequestToken yourself for new versions and include that value in the request. You only need to specify your own value if you are implementing your own retry logic and want to ensure that a given secret is not created twice. We recommend that you generate a UUID-type value to ensure uniqueness within the specified secret.  Secrets Manager uses this value to prevent the accidental creation of duplicate versions if there are failures and retries during the function's processing. This value becomes the VersionId of the new version.
        public let clientRequestToken: String?
        /// Specifies the secret that you want to rotate. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names that end with a hyphen followed by six characters. 
        public let secretId: String

        public init(rotationRules: RotationRulesType? = nil, rotationLambdaARN: String? = nil, clientRequestToken: String? = nil, secretId: String) {
            self.rotationRules = rotationRules
            self.rotationLambdaARN = rotationLambdaARN
            self.clientRequestToken = clientRequestToken
            self.secretId = secretId
        }

        private enum CodingKeys: String, CodingKey {
            case rotationRules = "RotationRules"
            case rotationLambdaARN = "RotationLambdaARN"
            case clientRequestToken = "ClientRequestToken"
            case secretId = "SecretId"
        }
    }

    public struct UpdateSecretRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecretBinary", required: false, type: .blob), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "SecretString", required: false, type: .string), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "SecretId", required: true, type: .string)
        ]
        /// (Optional) Specifies updated binary data that you want to encrypt and store in the new version of the secret. To use this parameter in the command-line tools, we recommend that you store your binary data in a file and then use the appropriate technique for your tool to pass the contents of the file as a parameter. Either SecretBinary or SecretString must have a value, but not both. They cannot both be empty. This parameter is not accessible using the Secrets Manager console.
        public let secretBinary: Data?
        /// (Optional) Specifies an updated ARN or alias of the AWS KMS customer master key (CMK) to be used to encrypt the protected text in new versions of this secret.  You can only use the account's default CMK to encrypt and decrypt if you call this operation using credentials from the same account that owns the secret. If the secret is in a different account, then you must create a custom CMK and provide the ARN of that CMK in this field. The user making the call must have permissions to both the secret and the CMK in their respective accounts. 
        public let kmsKeyId: String?
        /// (Optional) Specifies updated text data that you want to encrypt and store in this new version of the secret. Either SecretBinary or SecretString must have a value, but not both. They cannot both be empty. If you create this secret by using the Secrets Manager console then Secrets Manager puts the protected secret text in only the SecretString parameter. The Secrets Manager console stores the information as a JSON structure of key/value pairs that the default Lambda rotation function knows how to parse. For storing multiple values, we recommend that you use a JSON text string argument and specify key/value pairs. For information on how to format a JSON parameter for the various command line tool environments, see Using JSON for Parameters in the AWS CLI User Guide. For example:  [{"username":"bob"},{"password":"abc123xyz456"}]  If your command-line tool or SDK requires quotation marks around the parameter, you should use single quotes to avoid confusion with the double quotes required in the JSON text. You can also 'escape' the double quote character in the embedded JSON text by prefacing each with a backslash. For example, the following string is surrounded by double-quotes. All of the embedded double quotes are escaped:  "[{\"username\":\"bob\"},{\"password\":\"abc123xyz456\"}]" 
        public let secretString: String?
        /// (Optional) If you want to add a new version to the secret, this parameter specifies a unique identifier for the new version that helps ensure idempotency.  If you use the AWS CLI or one of the AWS SDK to call this operation, then you can leave this parameter empty. The CLI or SDK generates a random UUID for you and includes that in the request. If you don't use the SDK and instead generate a raw HTTP request to the Secrets Manager service endpoint, then you must generate a ClientRequestToken yourself for new versions and include that value in the request. You typically only need to interact with this value if you implement your own retry logic and want to ensure that a given secret is not created twice. We recommend that you generate a UUID-type value to ensure uniqueness within the specified secret.  Secrets Manager uses this value to prevent the accidental creation of duplicate versions if there are failures and retries during the Lambda rotation function's processing.   If the ClientRequestToken value isn't already associated with a version of the secret then a new version of the secret is created.    If a version with this value already exists and that version's SecretString and SecretBinary values are the same as those in the request then the request is ignored (the operation is idempotent).    If a version with this value already exists and that version's SecretString and SecretBinary values are different from the request then an error occurs because you cannot modify an existing secret value.   This value becomes the VersionId of the new version.
        public let clientRequestToken: String?
        /// (Optional) Specifies an updated user-provided description of the secret.
        public let description: String?
        /// Specifies the secret that you want to modify or to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names that end with a hyphen followed by six characters. 
        public let secretId: String

        public init(secretBinary: Data? = nil, kmsKeyId: String? = nil, secretString: String? = nil, clientRequestToken: String? = nil, description: String? = nil, secretId: String) {
            self.secretBinary = secretBinary
            self.kmsKeyId = kmsKeyId
            self.secretString = secretString
            self.clientRequestToken = clientRequestToken
            self.description = description
            self.secretId = secretId
        }

        private enum CodingKeys: String, CodingKey {
            case secretBinary = "SecretBinary"
            case kmsKeyId = "KmsKeyId"
            case secretString = "SecretString"
            case clientRequestToken = "ClientRequestToken"
            case description = "Description"
            case secretId = "SecretId"
        }
    }

    public struct ListSecretsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// (Optional) Limits the number of results that you want to include in the response. If you don't include this parameter, it defaults to a value that's specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (isn't null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Secrets Manager might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        public let maxResults: Int32?
        /// (Optional) Use this parameter in a request if you receive a NextToken response in a previous request that indicates that there's more output available. In a subsequent call, set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct UpdateSecretVersionStageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MoveToVersionId", required: false, type: .string), 
            AWSShapeMember(label: "RemoveFromVersionId", required: false, type: .string), 
            AWSShapeMember(label: "VersionStage", required: true, type: .string), 
            AWSShapeMember(label: "SecretId", required: true, type: .string)
        ]
        /// (Optional) The secret version ID that you want to add the staging label to. If you want to remove a label from a version, then do not specify this parameter. If the staging label is already attached to a different version of the secret, then you must also specify the RemoveFromVersionId parameter. 
        public let moveToVersionId: String?
        /// Specifies the secret version ID of the version that the staging label is to be removed from. If the staging label you are trying to attach to one version is already attached to a different version, then you must include this parameter and specify the version that the label is to be removed from. If the label is attached and you either do not specify this parameter, or the version ID does not match, then the operation fails.
        public let removeFromVersionId: String?
        /// The staging label to add to this version.
        public let versionStage: String
        /// Specifies the secret with the version whose list of staging labels you want to modify. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names that end with a hyphen followed by six characters. 
        public let secretId: String

        public init(moveToVersionId: String? = nil, removeFromVersionId: String? = nil, versionStage: String, secretId: String) {
            self.moveToVersionId = moveToVersionId
            self.removeFromVersionId = removeFromVersionId
            self.versionStage = versionStage
            self.secretId = secretId
        }

        private enum CodingKeys: String, CodingKey {
            case moveToVersionId = "MoveToVersionId"
            case removeFromVersionId = "RemoveFromVersionId"
            case versionStage = "VersionStage"
            case secretId = "SecretId"
        }
    }

    public struct CreateSecretRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "SecretString", required: false, type: .string), 
            AWSShapeMember(label: "SecretBinary", required: false, type: .blob), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// (Optional) If you include SecretString or SecretBinary, then an initial version is created as part of the secret, and this parameter specifies a unique identifier for the new version.   If you use the AWS CLI or one of the AWS SDK to call this operation, then you can leave this parameter empty. The CLI or SDK generates a random UUID for you and includes it as the value for this parameter in the request. If you don't use the SDK and instead generate a raw HTTP request to the Secrets Manager service endpoint, then you must generate a ClientRequestToken yourself for the new version and include that value in the request.  This value helps ensure idempotency. Secrets Manager uses this value to prevent the accidental creation of duplicate versions if there are failures and retries during a rotation. We recommend that you generate a UUID-type value to ensure uniqueness of your versions within the specified secret.    If the ClientRequestToken value isn't already associated with a version of the secret then a new version of the secret is created.    If a version with this value already exists and that version's SecretString and SecretBinary values are the same as those in the request, then the request is ignored (the operation is idempotent).   If a version with this value already exists and that version's SecretString and SecretBinary values are different from those in the request then the request fails because you cannot modify an existing version. Instead, use PutSecretValue to create a new version.   This value becomes the VersionId of the new version.
        public let clientRequestToken: String?
        /// (Optional) Specifies a user-provided description of the secret.
        public let description: String?
        /// (Optional) Specifies text data that you want to encrypt and store in this new version of the secret. Either SecretString or SecretBinary must have a value, but not both. They cannot both be empty. If you create a secret by using the Secrets Manager console then Secrets Manager puts the protected secret text in only the SecretString parameter. The Secrets Manager console stores the information as a JSON structure of key/value pairs that the Lambda rotation function knows how to parse. For storing multiple values, we recommend that you use a JSON text string argument and specify key/value pairs. For information on how to format a JSON parameter for the various command line tool environments, see Using JSON for Parameters in the AWS CLI User Guide. For example:  [{"username":"bob"},{"password":"abc123xyz456"}]  If your command-line tool or SDK requires quotation marks around the parameter, you should use single quotes to avoid confusion with the double quotes required in the JSON text. 
        public let secretString: String?
        /// (Optional) Specifies binary data that you want to encrypt and store in the new version of the secret. To use this parameter in the command-line tools, we recommend that you store your binary data in a file and then use the appropriate technique for your tool to pass the contents of the file as a parameter. Either SecretString or SecretBinary must have a value, but not both. They cannot both be empty. This parameter is not available using the Secrets Manager console. It can be accessed only by using the AWS CLI or one of the AWS SDKs.
        public let secretBinary: Data?
        /// (Optional) Specifies the ARN, Key ID, or alias of the AWS KMS customer master key (CMK) to be used to encrypt the SecretString or SecretBinary values in the versions stored in this secret. You can specify any of the supported ways to identify a AWS KMS key ID. If you need to reference a CMK in a different account, you can use only the key ARN or the alias ARN. If you don't specify this value, then Secrets Manager defaults to using the AWS account's default CMK (the one named aws/secretsmanager). If a AWS KMS CMK with that name doesn't yet exist, then Secrets Manager creates it for you automatically the first time it needs to encrypt a version's SecretString or SecretBinary fields.  You can use the account's default CMK to encrypt and decrypt only if you call this operation using credentials from the same account that owns the secret. If the secret is in a different account, then you must create a custom CMK and specify the ARN in this field.  
        public let kmsKeyId: String?
        /// Specifies the friendly name of the new secret. The secret name must be ASCII letters, digits, or the following characters : /_+=.@-  Don't end your secret name with a hyphen followed by six characters. If you do so, you risk confusion and unexpected results when searching for a secret by partial ARN. This is because Secrets Manager automatically adds a hyphen and six random characters at the end of the ARN. 
        public let name: String
        /// (Optional) Specifies a list of user-defined tags that are attached to the secret. Each tag is a "Key" and "Value" pair of strings. This operation only appends tags to the existing list of tags. To remove tags, you must use UntagResource.    Secrets Manager tag key names are case sensitive. A tag with the key "ABC" is a different tag from one with key "abc".   If you check tags in IAM policy Condition elements as part of your security strategy, then adding or removing a tag can change permissions. If the successful completion of this operation would result in you losing your permissions for this secret, then this operation is blocked and returns an Access Denied error.    This parameter requires a JSON text string argument. For information on how to format a JSON parameter for the various command line tool environments, see Using JSON for Parameters in the AWS CLI User Guide. For example:  [{"Key":"CostCenter","Value":"12345"},{"Key":"environment","Value":"production"}]  If your command-line tool or SDK requires quotation marks around the parameter, you should use single quotes to avoid confusion with the double quotes required in the JSON text.  The following basic restrictions apply to tags:   Maximum number of tags per secret—50   Maximum key length—127 Unicode characters in UTF-8   Maximum value length—255 Unicode characters in UTF-8   Tag keys and values are case sensitive.   Do not use the aws: prefix in your tag names or values because it is reserved for AWS use. You can't edit or delete tag names or values with this prefix. Tags with this prefix do not count against your tags per secret limit.   If your tagging schema will be used across multiple services and resources, remember that other services might have restrictions on allowed characters. Generally allowed characters are: letters, spaces, and numbers representable in UTF-8, plus the following special characters: + - = . _ : / @.  
        public let tags: [Tag]?

        public init(clientRequestToken: String? = nil, description: String? = nil, secretString: String? = nil, secretBinary: Data? = nil, kmsKeyId: String? = nil, name: String, tags: [Tag]? = nil) {
            self.clientRequestToken = clientRequestToken
            self.description = description
            self.secretString = secretString
            self.secretBinary = secretBinary
            self.kmsKeyId = kmsKeyId
            self.name = name
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "ClientRequestToken"
            case description = "Description"
            case secretString = "SecretString"
            case secretBinary = "SecretBinary"
            case kmsKeyId = "KmsKeyId"
            case name = "Name"
            case tags = "Tags"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The string value that's associated with the key of the tag.
        public let value: String?
        /// The key identifier, or name, of the tag.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct PutSecretValueRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SecretBinary", required: false, type: .blob), 
            AWSShapeMember(label: "SecretString", required: false, type: .string), 
            AWSShapeMember(label: "VersionStages", required: false, type: .list), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "SecretId", required: true, type: .string)
        ]
        /// (Optional) Specifies binary data that you want to encrypt and store in the new version of the secret. To use this parameter in the command-line tools, we recommend that you store your binary data in a file and then use the appropriate technique for your tool to pass the contents of the file as a parameter. Either SecretBinary or SecretString must have a value, but not both. They cannot both be empty. This parameter is not accessible if the secret using the Secrets Manager console. 
        public let secretBinary: Data?
        /// (Optional) Specifies text data that you want to encrypt and store in this new version of the secret. Either SecretString or SecretBinary must have a value, but not both. They cannot both be empty. If you create this secret by using the Secrets Manager console then Secrets Manager puts the protected secret text in only the SecretString parameter. The Secrets Manager console stores the information as a JSON structure of key/value pairs that the default Lambda rotation function knows how to parse. For storing multiple values, we recommend that you use a JSON text string argument and specify key/value pairs. For information on how to format a JSON parameter for the various command line tool environments, see Using JSON for Parameters in the AWS CLI User Guide.  For example:  [{"username":"bob"},{"password":"abc123xyz456"}]  If your command-line tool or SDK requires quotation marks around the parameter, you should use single quotes to avoid confusion with the double quotes required in the JSON text.
        public let secretString: String?
        /// (Optional) Specifies a list of staging labels that are attached to this version of the secret. These staging labels are used to track the versions through the rotation process by the Lambda rotation function. A staging label must be unique to a single version of the secret. If you specify a staging label that's already associated with a different version of the same secret then that staging label is automatically removed from the other version and attached to this version. If you do not specify a value for VersionStages then Secrets Manager automatically moves the staging label AWSCURRENT to this new version.
        public let versionStages: [String]?
        /// (Optional) Specifies a unique identifier for the new version of the secret.   If you use the AWS CLI or one of the AWS SDK to call this operation, then you can leave this parameter empty. The CLI or SDK generates a random UUID for you and includes that in the request. If you don't use the SDK and instead generate a raw HTTP request to the Secrets Manager service endpoint, then you must generate a ClientRequestToken yourself for new versions and include that value in the request.   This value helps ensure idempotency. Secrets Manager uses this value to prevent the accidental creation of duplicate versions if there are failures and retries during the Lambda rotation function's processing. We recommend that you generate a UUID-type value to ensure uniqueness within the specified secret.    If the ClientRequestToken value isn't already associated with a version of the secret then a new version of the secret is created.    If a version with this value already exists and that version's SecretString or SecretBinary values are the same as those in the request then the request is ignored (the operation is idempotent).    If a version with this value already exists and that version's SecretString and SecretBinary values are different from those in the request then the request fails because you cannot modify an existing secret version. You can only create new versions to store new secret values.   This value becomes the VersionId of the new version.
        public let clientRequestToken: String?
        /// Specifies the secret to which you want to add a new version. You can specify either the Amazon Resource Name (ARN) or the friendly name of the secret. The secret must already exist.  If you specify an ARN, we generally recommend that you specify a complete ARN. You can specify a partial ARN too—for example, if you don’t include the final hyphen and six random characters that Secrets Manager adds at the end of the ARN when you created the secret. A partial ARN match can work as long as it uniquely matches only one secret. However, if your secret has a name that ends in a hyphen followed by six characters (before Secrets Manager adds the hyphen and six characters to the ARN) and you try to use that as a partial ARN, then those characters cause Secrets Manager to assume that you’re specifying a complete ARN. This confusion can cause unexpected results. To avoid this situation, we recommend that you don’t create secret names that end with a hyphen followed by six characters. 
        public let secretId: String

        public init(secretBinary: Data? = nil, secretString: String? = nil, versionStages: [String]? = nil, clientRequestToken: String? = nil, secretId: String) {
            self.secretBinary = secretBinary
            self.secretString = secretString
            self.versionStages = versionStages
            self.clientRequestToken = clientRequestToken
            self.secretId = secretId
        }

        private enum CodingKeys: String, CodingKey {
            case secretBinary = "SecretBinary"
            case secretString = "SecretString"
            case versionStages = "VersionStages"
            case clientRequestToken = "ClientRequestToken"
            case secretId = "SecretId"
        }
    }

}