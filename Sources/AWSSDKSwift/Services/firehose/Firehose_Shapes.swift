// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Firehose {

    public struct DescribeDeliveryStreamOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeliveryStreamDescription", required: true, type: .structure)
        ]
        /// Information about the delivery stream.
        public let deliveryStreamDescription: DeliveryStreamDescription

        public init(deliveryStreamDescription: DeliveryStreamDescription) {
            self.deliveryStreamDescription = deliveryStreamDescription
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStreamDescription = "DeliveryStreamDescription"
        }
    }

    public enum ProcessorParameterName: String, CustomStringConvertible, Codable {
        case lambdaarn = "LambdaArn"
        case numberofretries = "NumberOfRetries"
        case rolearn = "RoleArn"
        case buffersizeinmbs = "BufferSizeInMBs"
        case bufferintervalinseconds = "BufferIntervalInSeconds"
        public var description: String { return self.rawValue }
    }

    public struct ProcessingConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Processors", required: false, type: .list), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// The data processors.
        public let processors: [Processor]?
        /// Enables or disables data processing.
        public let enabled: Bool?

        public init(processors: [Processor]? = nil, enabled: Bool? = nil) {
            self.processors = processors
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case processors = "Processors"
            case enabled = "Enabled"
        }
    }

    public enum NoEncryptionConfig: String, CustomStringConvertible, Codable {
        case noencryption = "NoEncryption"
        public var description: String { return self.rawValue }
    }

    public struct RedshiftDestinationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CopyCommand", required: true, type: .structure), 
            AWSShapeMember(label: "S3Configuration", required: true, type: .structure), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "S3BackupConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ClusterJDBCURL", required: true, type: .string), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Password", required: true, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "RetryOptions", required: false, type: .structure), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum)
        ]
        /// The COPY command.
        public let copyCommand: CopyCommand
        /// The configuration for the intermediate Amazon S3 location from which Amazon Redshift obtains data. Restrictions are described in the topic for CreateDeliveryStream. The compression formats SNAPPY or ZIP cannot be specified in RedshiftDestinationConfiguration.S3Configuration because the Amazon Redshift COPY operation that reads from the S3 bucket doesn't support these compression formats.
        public let s3Configuration: S3DestinationConfiguration
        /// The name of the user.
        public let username: String
        /// The configuration for backup in Amazon S3.
        public let s3BackupConfiguration: S3DestinationConfiguration?
        /// The database connection string.
        public let clusterJDBCURL: String
        /// The ARN of the AWS credentials.
        public let roleARN: String
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The user password.
        public let password: String
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The retry behavior in case Kinesis Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
        public let retryOptions: RedshiftRetryOptions?
        /// The Amazon S3 backup mode.
        public let s3BackupMode: RedshiftS3BackupMode?

        public init(copyCommand: CopyCommand, s3Configuration: S3DestinationConfiguration, username: String, s3BackupConfiguration: S3DestinationConfiguration? = nil, clusterJDBCURL: String, roleARN: String, processingConfiguration: ProcessingConfiguration? = nil, password: String, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, retryOptions: RedshiftRetryOptions? = nil, s3BackupMode: RedshiftS3BackupMode? = nil) {
            self.copyCommand = copyCommand
            self.s3Configuration = s3Configuration
            self.username = username
            self.s3BackupConfiguration = s3BackupConfiguration
            self.clusterJDBCURL = clusterJDBCURL
            self.roleARN = roleARN
            self.processingConfiguration = processingConfiguration
            self.password = password
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.retryOptions = retryOptions
            self.s3BackupMode = s3BackupMode
        }

        private enum CodingKeys: String, CodingKey {
            case copyCommand = "CopyCommand"
            case s3Configuration = "S3Configuration"
            case username = "Username"
            case s3BackupConfiguration = "S3BackupConfiguration"
            case clusterJDBCURL = "ClusterJDBCURL"
            case roleARN = "RoleARN"
            case processingConfiguration = "ProcessingConfiguration"
            case password = "Password"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case retryOptions = "RetryOptions"
            case s3BackupMode = "S3BackupMode"
        }
    }

    public struct CopyCommand: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataTableName", required: true, type: .string), 
            AWSShapeMember(label: "DataTableColumns", required: false, type: .string), 
            AWSShapeMember(label: "CopyOptions", required: false, type: .string)
        ]
        /// The name of the target table. The table must already exist in the database.
        public let dataTableName: String
        /// A comma-separated list of column names.
        public let dataTableColumns: String?
        /// Optional parameters to use with the Amazon Redshift COPY command. For more information, see the "Optional Parameters" section of Amazon Redshift COPY command. Some possible examples that would apply to Kinesis Firehose are as follows:  delimiter '\t' lzop; - fields are delimited with "\t" (TAB character) and compressed using lzop.  delimiter '|' - fields are delimited with "|" (this is the default delimiter).  delimiter '|' escape - the delimiter should be escaped.  fixedwidth 'venueid:3,venuename:25,venuecity:12,venuestate:2,venueseats:6' - fields are fixed width in the source, with each width specified after every column in the table.  JSON 's3://mybucket/jsonpaths.txt' - data is in JSON format, and the path specified is the format of the data. For more examples, see Amazon Redshift COPY command examples.
        public let copyOptions: String?

        public init(dataTableName: String, dataTableColumns: String? = nil, copyOptions: String? = nil) {
            self.dataTableName = dataTableName
            self.dataTableColumns = dataTableColumns
            self.copyOptions = copyOptions
        }

        private enum CodingKeys: String, CodingKey {
            case dataTableName = "DataTableName"
            case dataTableColumns = "DataTableColumns"
            case copyOptions = "CopyOptions"
        }
    }

    public struct ExtendedS3DestinationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "EncryptionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "S3BackupConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "CompressionFormat", required: false, type: .enum), 
            AWSShapeMember(label: "BufferingHints", required: false, type: .structure)
        ]
        /// The ARN of the S3 bucket.
        public let bucketARN: String
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public let encryptionConfiguration: EncryptionConfiguration?
        /// The ARN of the AWS credentials.
        public let roleARN: String
        /// The configuration for backup in Amazon S3.
        public let s3BackupConfiguration: S3DestinationConfiguration?
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. If the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see Amazon S3 Object Name Format in the Amazon Kinesis Firehose Developer Guide.
        public let prefix: String?
        /// The Amazon S3 backup mode.
        public let s3BackupMode: S3BackupMode?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED.
        public let compressionFormat: CompressionFormat?
        /// The buffering option.
        public let bufferingHints: BufferingHints?

        public init(bucketARN: String, encryptionConfiguration: EncryptionConfiguration? = nil, roleARN: String, s3BackupConfiguration: S3DestinationConfiguration? = nil, processingConfiguration: ProcessingConfiguration? = nil, prefix: String? = nil, s3BackupMode: S3BackupMode? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, compressionFormat: CompressionFormat? = nil, bufferingHints: BufferingHints? = nil) {
            self.bucketARN = bucketARN
            self.encryptionConfiguration = encryptionConfiguration
            self.roleARN = roleARN
            self.s3BackupConfiguration = s3BackupConfiguration
            self.processingConfiguration = processingConfiguration
            self.prefix = prefix
            self.s3BackupMode = s3BackupMode
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.bufferingHints = bufferingHints
        }

        private enum CodingKeys: String, CodingKey {
            case bucketARN = "BucketARN"
            case encryptionConfiguration = "EncryptionConfiguration"
            case roleARN = "RoleARN"
            case s3BackupConfiguration = "S3BackupConfiguration"
            case processingConfiguration = "ProcessingConfiguration"
            case prefix = "Prefix"
            case s3BackupMode = "S3BackupMode"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case compressionFormat = "CompressionFormat"
            case bufferingHints = "BufferingHints"
        }
    }

    public struct SplunkDestinationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RetryOptions", required: false, type: .structure), 
            AWSShapeMember(label: "S3DestinationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "HECAcknowledgmentTimeoutInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "HECToken", required: false, type: .string), 
            AWSShapeMember(label: "HECEndpoint", required: false, type: .string), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "HECEndpointType", required: false, type: .enum)
        ]
        /// The retry behavior in case Kinesis Firehose is unable to deliver data to Splunk or if it doesn't receive an acknowledgment of receipt from Splunk.
        public let retryOptions: SplunkRetryOptions?
        /// The Amazon S3 destination.&gt;
        public let s3DestinationDescription: S3DestinationDescription?
        /// The amount of time that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data. At the end of the timeout period Kinesis Firehose either tries to send the data again or considers it an error, based on your retry settings.
        public let hECAcknowledgmentTimeoutInSeconds: Int32?
        /// This is a GUID you obtain from your Splunk cluster when you create a new HEC endpoint.
        public let hECToken: String?
        /// The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
        public let hECEndpoint: String?
        /// Defines how documents should be delivered to Amazon S3. When set to FailedDocumentsOnly, Kinesis Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to AllDocuments, Kinesis Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. Default value is FailedDocumentsOnly. 
        public let s3BackupMode: SplunkS3BackupMode?
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// This type can be either "Raw" or "Event".
        public let hECEndpointType: HECEndpointType?

        public init(retryOptions: SplunkRetryOptions? = nil, s3DestinationDescription: S3DestinationDescription? = nil, hECAcknowledgmentTimeoutInSeconds: Int32? = nil, hECToken: String? = nil, hECEndpoint: String? = nil, s3BackupMode: SplunkS3BackupMode? = nil, processingConfiguration: ProcessingConfiguration? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, hECEndpointType: HECEndpointType? = nil) {
            self.retryOptions = retryOptions
            self.s3DestinationDescription = s3DestinationDescription
            self.hECAcknowledgmentTimeoutInSeconds = hECAcknowledgmentTimeoutInSeconds
            self.hECToken = hECToken
            self.hECEndpoint = hECEndpoint
            self.s3BackupMode = s3BackupMode
            self.processingConfiguration = processingConfiguration
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.hECEndpointType = hECEndpointType
        }

        private enum CodingKeys: String, CodingKey {
            case retryOptions = "RetryOptions"
            case s3DestinationDescription = "S3DestinationDescription"
            case hECAcknowledgmentTimeoutInSeconds = "HECAcknowledgmentTimeoutInSeconds"
            case hECToken = "HECToken"
            case hECEndpoint = "HECEndpoint"
            case s3BackupMode = "S3BackupMode"
            case processingConfiguration = "ProcessingConfiguration"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case hECEndpointType = "HECEndpointType"
        }
    }

    public enum S3BackupMode: String, CustomStringConvertible, Codable {
        case disabled = "Disabled"
        case enabled = "Enabled"
        public var description: String { return self.rawValue }
    }

    public enum DeliveryStreamType: String, CustomStringConvertible, Codable {
        case directput = "DirectPut"
        case kinesisstreamassource = "KinesisStreamAsSource"
        public var description: String { return self.rawValue }
    }

    public struct KinesisStreamSourceConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KinesisStreamARN", required: true, type: .string), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string)
        ]
        /// The ARN of the source Kinesis stream.
        public let kinesisStreamARN: String
        /// The ARN of the role that provides access to the source Kinesis stream.
        public let roleARN: String

        public init(kinesisStreamARN: String, roleARN: String) {
            self.kinesisStreamARN = kinesisStreamARN
            self.roleARN = roleARN
        }

        private enum CodingKeys: String, CodingKey {
            case kinesisStreamARN = "KinesisStreamARN"
            case roleARN = "RoleARN"
        }
    }

    public struct ElasticsearchRetryOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DurationInSeconds", required: false, type: .integer)
        ]
        /// After an initial failure to deliver to Amazon ES, the total amount of time during which Kinesis Firehose re-attempts delivery (including the first attempt). After this time has elapsed, the failed documents are written to Amazon S3. Default value is 300 seconds (5 minutes). A value of 0 (zero) results in no retries.
        public let durationInSeconds: Int32?

        public init(durationInSeconds: Int32? = nil) {
            self.durationInSeconds = durationInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case durationInSeconds = "DurationInSeconds"
        }
    }

    public struct PutRecordOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordId", required: true, type: .string)
        ]
        /// The ID of the record.
        public let recordId: String

        public init(recordId: String) {
            self.recordId = recordId
        }

        private enum CodingKeys: String, CodingKey {
            case recordId = "RecordId"
        }
    }

    public enum ElasticsearchS3BackupMode: String, CustomStringConvertible, Codable {
        case faileddocumentsonly = "FailedDocumentsOnly"
        case alldocuments = "AllDocuments"
        public var description: String { return self.rawValue }
    }

    public struct DestinationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3DestinationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "SplunkDestinationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "RedshiftDestinationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "ExtendedS3DestinationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "DestinationId", required: true, type: .string), 
            AWSShapeMember(label: "ElasticsearchDestinationDescription", required: false, type: .structure)
        ]
        /// [Deprecated] The destination in Amazon S3.
        public let s3DestinationDescription: S3DestinationDescription?
        /// The destination in Splunk.
        public let splunkDestinationDescription: SplunkDestinationDescription?
        /// The destination in Amazon Redshift.
        public let redshiftDestinationDescription: RedshiftDestinationDescription?
        /// The destination in Amazon S3.
        public let extendedS3DestinationDescription: ExtendedS3DestinationDescription?
        /// The ID of the destination.
        public let destinationId: String
        /// The destination in Amazon ES.
        public let elasticsearchDestinationDescription: ElasticsearchDestinationDescription?

        public init(s3DestinationDescription: S3DestinationDescription? = nil, splunkDestinationDescription: SplunkDestinationDescription? = nil, redshiftDestinationDescription: RedshiftDestinationDescription? = nil, extendedS3DestinationDescription: ExtendedS3DestinationDescription? = nil, destinationId: String, elasticsearchDestinationDescription: ElasticsearchDestinationDescription? = nil) {
            self.s3DestinationDescription = s3DestinationDescription
            self.splunkDestinationDescription = splunkDestinationDescription
            self.redshiftDestinationDescription = redshiftDestinationDescription
            self.extendedS3DestinationDescription = extendedS3DestinationDescription
            self.destinationId = destinationId
            self.elasticsearchDestinationDescription = elasticsearchDestinationDescription
        }

        private enum CodingKeys: String, CodingKey {
            case s3DestinationDescription = "S3DestinationDescription"
            case splunkDestinationDescription = "SplunkDestinationDescription"
            case redshiftDestinationDescription = "RedshiftDestinationDescription"
            case extendedS3DestinationDescription = "ExtendedS3DestinationDescription"
            case destinationId = "DestinationId"
            case elasticsearchDestinationDescription = "ElasticsearchDestinationDescription"
        }
    }

    public struct SourceDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KinesisStreamSourceDescription", required: false, type: .structure)
        ]
        /// The KinesisStreamSourceDescription value for the source Kinesis stream.
        public let kinesisStreamSourceDescription: KinesisStreamSourceDescription?

        public init(kinesisStreamSourceDescription: KinesisStreamSourceDescription? = nil) {
            self.kinesisStreamSourceDescription = kinesisStreamSourceDescription
        }

        private enum CodingKeys: String, CodingKey {
            case kinesisStreamSourceDescription = "KinesisStreamSourceDescription"
        }
    }

    public struct UpdateDestinationInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SplunkDestinationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ElasticsearchDestinationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string), 
            AWSShapeMember(label: "CurrentDeliveryStreamVersionId", required: true, type: .string), 
            AWSShapeMember(label: "DestinationId", required: true, type: .string), 
            AWSShapeMember(label: "ExtendedS3DestinationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "RedshiftDestinationUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "S3DestinationUpdate", required: false, type: .structure)
        ]
        /// Describes an update for a destination in Splunk.
        public let splunkDestinationUpdate: SplunkDestinationUpdate?
        /// Describes an update for a destination in Amazon ES.
        public let elasticsearchDestinationUpdate: ElasticsearchDestinationUpdate?
        /// The name of the delivery stream.
        public let deliveryStreamName: String
        /// Obtain this value from the VersionId result of DeliveryStreamDescription. This value is required, and helps the service to perform conditional operations. For example, if there is an interleaving update and this value is null, then the update destination fails. After the update is successful, the VersionId value is updated. The service then performs a merge of the old configuration with the new configuration.
        public let currentDeliveryStreamVersionId: String
        /// The ID of the destination.
        public let destinationId: String
        /// Describes an update for a destination in Amazon S3.
        public let extendedS3DestinationUpdate: ExtendedS3DestinationUpdate?
        /// Describes an update for a destination in Amazon Redshift.
        public let redshiftDestinationUpdate: RedshiftDestinationUpdate?
        /// [Deprecated] Describes an update for a destination in Amazon S3.
        public let s3DestinationUpdate: S3DestinationUpdate?

        public init(splunkDestinationUpdate: SplunkDestinationUpdate? = nil, elasticsearchDestinationUpdate: ElasticsearchDestinationUpdate? = nil, deliveryStreamName: String, currentDeliveryStreamVersionId: String, destinationId: String, extendedS3DestinationUpdate: ExtendedS3DestinationUpdate? = nil, redshiftDestinationUpdate: RedshiftDestinationUpdate? = nil, s3DestinationUpdate: S3DestinationUpdate? = nil) {
            self.splunkDestinationUpdate = splunkDestinationUpdate
            self.elasticsearchDestinationUpdate = elasticsearchDestinationUpdate
            self.deliveryStreamName = deliveryStreamName
            self.currentDeliveryStreamVersionId = currentDeliveryStreamVersionId
            self.destinationId = destinationId
            self.extendedS3DestinationUpdate = extendedS3DestinationUpdate
            self.redshiftDestinationUpdate = redshiftDestinationUpdate
            self.s3DestinationUpdate = s3DestinationUpdate
        }

        private enum CodingKeys: String, CodingKey {
            case splunkDestinationUpdate = "SplunkDestinationUpdate"
            case elasticsearchDestinationUpdate = "ElasticsearchDestinationUpdate"
            case deliveryStreamName = "DeliveryStreamName"
            case currentDeliveryStreamVersionId = "CurrentDeliveryStreamVersionId"
            case destinationId = "DestinationId"
            case extendedS3DestinationUpdate = "ExtendedS3DestinationUpdate"
            case redshiftDestinationUpdate = "RedshiftDestinationUpdate"
            case s3DestinationUpdate = "S3DestinationUpdate"
        }
    }

    public struct ListDeliveryStreamsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeliveryStreamNames", required: true, type: .list), 
            AWSShapeMember(label: "HasMoreDeliveryStreams", required: true, type: .boolean)
        ]
        /// The names of the delivery streams.
        public let deliveryStreamNames: [String]
        /// Indicates whether there are more delivery streams available to list.
        public let hasMoreDeliveryStreams: Bool

        public init(deliveryStreamNames: [String], hasMoreDeliveryStreams: Bool) {
            self.deliveryStreamNames = deliveryStreamNames
            self.hasMoreDeliveryStreams = hasMoreDeliveryStreams
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStreamNames = "DeliveryStreamNames"
            case hasMoreDeliveryStreams = "HasMoreDeliveryStreams"
        }
    }

    public struct RedshiftDestinationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3BackupDescription", required: false, type: .structure), 
            AWSShapeMember(label: "CopyCommand", required: true, type: .structure), 
            AWSShapeMember(label: "Username", required: true, type: .string), 
            AWSShapeMember(label: "S3DestinationDescription", required: true, type: .structure), 
            AWSShapeMember(label: "ClusterJDBCURL", required: true, type: .string), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "RetryOptions", required: false, type: .structure)
        ]
        /// The configuration for backup in Amazon S3.
        public let s3BackupDescription: S3DestinationDescription?
        /// The COPY command.
        public let copyCommand: CopyCommand
        /// The name of the user.
        public let username: String
        /// The Amazon S3 destination.
        public let s3DestinationDescription: S3DestinationDescription
        /// The database connection string.
        public let clusterJDBCURL: String
        /// The ARN of the AWS credentials.
        public let roleARN: String
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The Amazon S3 backup mode.
        public let s3BackupMode: RedshiftS3BackupMode?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The retry behavior in case Kinesis Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
        public let retryOptions: RedshiftRetryOptions?

        public init(s3BackupDescription: S3DestinationDescription? = nil, copyCommand: CopyCommand, username: String, s3DestinationDescription: S3DestinationDescription, clusterJDBCURL: String, roleARN: String, processingConfiguration: ProcessingConfiguration? = nil, s3BackupMode: RedshiftS3BackupMode? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, retryOptions: RedshiftRetryOptions? = nil) {
            self.s3BackupDescription = s3BackupDescription
            self.copyCommand = copyCommand
            self.username = username
            self.s3DestinationDescription = s3DestinationDescription
            self.clusterJDBCURL = clusterJDBCURL
            self.roleARN = roleARN
            self.processingConfiguration = processingConfiguration
            self.s3BackupMode = s3BackupMode
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.retryOptions = retryOptions
        }

        private enum CodingKeys: String, CodingKey {
            case s3BackupDescription = "S3BackupDescription"
            case copyCommand = "CopyCommand"
            case username = "Username"
            case s3DestinationDescription = "S3DestinationDescription"
            case clusterJDBCURL = "ClusterJDBCURL"
            case roleARN = "RoleARN"
            case processingConfiguration = "ProcessingConfiguration"
            case s3BackupMode = "S3BackupMode"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case retryOptions = "RetryOptions"
        }
    }

    public struct ListDeliveryStreamsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeliveryStreamType", required: false, type: .enum), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "ExclusiveStartDeliveryStreamName", required: false, type: .string)
        ]
        /// The delivery stream type. This can be one of the following values:    DirectPut: Provider applications access the delivery stream directly.    KinesisStreamAsSource: The delivery stream uses a Kinesis stream as a source.   This parameter is optional. If this parameter is omitted, delivery streams of all types are returned.
        public let deliveryStreamType: DeliveryStreamType?
        /// The maximum number of delivery streams to list. The default value is 10.
        public let limit: Int32?
        /// The name of the delivery stream to start the list with.
        public let exclusiveStartDeliveryStreamName: String?

        public init(deliveryStreamType: DeliveryStreamType? = nil, limit: Int32? = nil, exclusiveStartDeliveryStreamName: String? = nil) {
            self.deliveryStreamType = deliveryStreamType
            self.limit = limit
            self.exclusiveStartDeliveryStreamName = exclusiveStartDeliveryStreamName
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStreamType = "DeliveryStreamType"
            case limit = "Limit"
            case exclusiveStartDeliveryStreamName = "ExclusiveStartDeliveryStreamName"
        }
    }

    public enum DeliveryStreamStatus: String, CustomStringConvertible, Codable {
        case creating = "CREATING"
        case deleting = "DELETING"
        case active = "ACTIVE"
        public var description: String { return self.rawValue }
    }

    public enum HECEndpointType: String, CustomStringConvertible, Codable {
        case raw = "Raw"
        case event = "Event"
        public var description: String { return self.rawValue }
    }

    public enum ProcessorType: String, CustomStringConvertible, Codable {
        case lambda = "Lambda"
        public var description: String { return self.rawValue }
    }

    public struct S3DestinationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "EncryptionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "CompressionFormat", required: false, type: .enum), 
            AWSShapeMember(label: "BufferingHints", required: false, type: .structure)
        ]
        /// The ARN of the S3 bucket.
        public let bucketARN: String
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public let encryptionConfiguration: EncryptionConfiguration?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. If the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see Amazon S3 Object Name Format in the Amazon Kinesis Firehose Developer Guide.
        public let prefix: String?
        /// The ARN of the AWS credentials.
        public let roleARN: String
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED. The compression formats SNAPPY or ZIP cannot be specified for Amazon Redshift destinations because they are not supported by the Amazon Redshift COPY operation that reads from the S3 bucket.
        public let compressionFormat: CompressionFormat?
        /// The buffering option. If no value is specified, BufferingHints object default values are used.
        public let bufferingHints: BufferingHints?

        public init(bucketARN: String, encryptionConfiguration: EncryptionConfiguration? = nil, prefix: String? = nil, roleARN: String, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, compressionFormat: CompressionFormat? = nil, bufferingHints: BufferingHints? = nil) {
            self.bucketARN = bucketARN
            self.encryptionConfiguration = encryptionConfiguration
            self.prefix = prefix
            self.roleARN = roleARN
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.bufferingHints = bufferingHints
        }

        private enum CodingKeys: String, CodingKey {
            case bucketARN = "BucketARN"
            case encryptionConfiguration = "EncryptionConfiguration"
            case prefix = "Prefix"
            case roleARN = "RoleARN"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case compressionFormat = "CompressionFormat"
            case bufferingHints = "BufferingHints"
        }
    }

    public struct S3DestinationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "EncryptionConfiguration", required: true, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "CompressionFormat", required: true, type: .enum), 
            AWSShapeMember(label: "BufferingHints", required: true, type: .structure)
        ]
        /// The ARN of the S3 bucket.
        public let bucketARN: String
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public let encryptionConfiguration: EncryptionConfiguration
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. If the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see Amazon S3 Object Name Format in the Amazon Kinesis Firehose Developer Guide.
        public let prefix: String?
        /// The ARN of the AWS credentials.
        public let roleARN: String
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED.
        public let compressionFormat: CompressionFormat
        /// The buffering option. If no value is specified, BufferingHints object default values are used.
        public let bufferingHints: BufferingHints

        public init(bucketARN: String, encryptionConfiguration: EncryptionConfiguration, prefix: String? = nil, roleARN: String, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, compressionFormat: CompressionFormat, bufferingHints: BufferingHints) {
            self.bucketARN = bucketARN
            self.encryptionConfiguration = encryptionConfiguration
            self.prefix = prefix
            self.roleARN = roleARN
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.bufferingHints = bufferingHints
        }

        private enum CodingKeys: String, CodingKey {
            case bucketARN = "BucketARN"
            case encryptionConfiguration = "EncryptionConfiguration"
            case prefix = "Prefix"
            case roleARN = "RoleARN"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case compressionFormat = "CompressionFormat"
            case bufferingHints = "BufferingHints"
        }
    }

    public struct DeleteDeliveryStreamInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string)
        ]
        /// The name of the delivery stream.
        public let deliveryStreamName: String

        public init(deliveryStreamName: String) {
            self.deliveryStreamName = deliveryStreamName
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStreamName = "DeliveryStreamName"
        }
    }

    public enum SplunkS3BackupMode: String, CustomStringConvertible, Codable {
        case failedeventsonly = "FailedEventsOnly"
        case allevents = "AllEvents"
        public var description: String { return self.rawValue }
    }

    public struct UpdateDestinationOutput: AWSShape {

    }

    public struct BufferingHints: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IntervalInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "SizeInMBs", required: false, type: .integer)
        ]
        /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300.
        public let intervalInSeconds: Int32?
        /// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5. We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec, the value should be 10 MB or higher.
        public let sizeInMBs: Int32?

        public init(intervalInSeconds: Int32? = nil, sizeInMBs: Int32? = nil) {
            self.intervalInSeconds = intervalInSeconds
            self.sizeInMBs = sizeInMBs
        }

        private enum CodingKeys: String, CodingKey {
            case intervalInSeconds = "IntervalInSeconds"
            case sizeInMBs = "SizeInMBs"
        }
    }

    public struct RedshiftRetryOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DurationInSeconds", required: false, type: .integer)
        ]
        /// The length of time during which Kinesis Firehose retries delivery after a failure, starting from the initial request and including the first attempt. The default value is 3600 seconds (60 minutes). Kinesis Firehose does not retry if the value of DurationInSeconds is 0 (zero) or if the first delivery attempt takes longer than the current value.
        public let durationInSeconds: Int32?

        public init(durationInSeconds: Int32? = nil) {
            self.durationInSeconds = durationInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case durationInSeconds = "DurationInSeconds"
        }
    }

    public struct RedshiftDestinationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CopyCommand", required: false, type: .structure), 
            AWSShapeMember(label: "Username", required: false, type: .string), 
            AWSShapeMember(label: "S3BackupUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ClusterJDBCURL", required: false, type: .string), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "S3Update", required: false, type: .structure), 
            AWSShapeMember(label: "Password", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "RetryOptions", required: false, type: .structure)
        ]
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The COPY command.
        public let copyCommand: CopyCommand?
        /// The name of the user.
        public let username: String?
        /// The Amazon S3 destination for backup.
        public let s3BackupUpdate: S3DestinationUpdate?
        /// The database connection string.
        public let clusterJDBCURL: String?
        /// The Amazon S3 backup mode.
        public let s3BackupMode: RedshiftS3BackupMode?
        /// The ARN of the AWS credentials.
        public let roleARN: String?
        /// The Amazon S3 destination. The compression formats SNAPPY or ZIP cannot be specified in RedshiftDestinationUpdate.S3Update because the Amazon Redshift COPY operation that reads from the S3 bucket doesn't support these compression formats.
        public let s3Update: S3DestinationUpdate?
        /// The user password.
        public let password: String?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The retry behavior in case Kinesis Firehose is unable to deliver documents to Amazon Redshift. Default value is 3600 (60 minutes).
        public let retryOptions: RedshiftRetryOptions?

        public init(processingConfiguration: ProcessingConfiguration? = nil, copyCommand: CopyCommand? = nil, username: String? = nil, s3BackupUpdate: S3DestinationUpdate? = nil, clusterJDBCURL: String? = nil, s3BackupMode: RedshiftS3BackupMode? = nil, roleARN: String? = nil, s3Update: S3DestinationUpdate? = nil, password: String? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, retryOptions: RedshiftRetryOptions? = nil) {
            self.processingConfiguration = processingConfiguration
            self.copyCommand = copyCommand
            self.username = username
            self.s3BackupUpdate = s3BackupUpdate
            self.clusterJDBCURL = clusterJDBCURL
            self.s3BackupMode = s3BackupMode
            self.roleARN = roleARN
            self.s3Update = s3Update
            self.password = password
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.retryOptions = retryOptions
        }

        private enum CodingKeys: String, CodingKey {
            case processingConfiguration = "ProcessingConfiguration"
            case copyCommand = "CopyCommand"
            case username = "Username"
            case s3BackupUpdate = "S3BackupUpdate"
            case clusterJDBCURL = "ClusterJDBCURL"
            case s3BackupMode = "S3BackupMode"
            case roleARN = "RoleARN"
            case s3Update = "S3Update"
            case password = "Password"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case retryOptions = "RetryOptions"
        }
    }

    public struct S3DestinationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BucketARN", required: false, type: .string), 
            AWSShapeMember(label: "EncryptionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "CompressionFormat", required: false, type: .enum), 
            AWSShapeMember(label: "BufferingHints", required: false, type: .structure)
        ]
        /// The ARN of the S3 bucket.
        public let bucketARN: String?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public let encryptionConfiguration: EncryptionConfiguration?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. If the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see Amazon S3 Object Name Format in the Amazon Kinesis Firehose Developer Guide.
        public let prefix: String?
        /// The ARN of the AWS credentials.
        public let roleARN: String?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED. The compression formats SNAPPY or ZIP cannot be specified for Amazon Redshift destinations because they are not supported by the Amazon Redshift COPY operation that reads from the S3 bucket.
        public let compressionFormat: CompressionFormat?
        /// The buffering option. If no value is specified, BufferingHints object default values are used.
        public let bufferingHints: BufferingHints?

        public init(bucketARN: String? = nil, encryptionConfiguration: EncryptionConfiguration? = nil, prefix: String? = nil, roleARN: String? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, compressionFormat: CompressionFormat? = nil, bufferingHints: BufferingHints? = nil) {
            self.bucketARN = bucketARN
            self.encryptionConfiguration = encryptionConfiguration
            self.prefix = prefix
            self.roleARN = roleARN
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.bufferingHints = bufferingHints
        }

        private enum CodingKeys: String, CodingKey {
            case bucketARN = "BucketARN"
            case encryptionConfiguration = "EncryptionConfiguration"
            case prefix = "Prefix"
            case roleARN = "RoleARN"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case compressionFormat = "CompressionFormat"
            case bufferingHints = "BufferingHints"
        }
    }

    public struct PutRecordBatchOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestResponses", required: true, type: .list), 
            AWSShapeMember(label: "FailedPutCount", required: true, type: .integer)
        ]
        /// The results array. For each record, the index of the response element is the same as the index used in the request array.
        public let requestResponses: [PutRecordBatchResponseEntry]
        /// The number of records that might have failed processing.
        public let failedPutCount: Int32

        public init(requestResponses: [PutRecordBatchResponseEntry], failedPutCount: Int32) {
            self.requestResponses = requestResponses
            self.failedPutCount = failedPutCount
        }

        private enum CodingKeys: String, CodingKey {
            case requestResponses = "RequestResponses"
            case failedPutCount = "FailedPutCount"
        }
    }

    public enum RedshiftS3BackupMode: String, CustomStringConvertible, Codable {
        case disabled = "Disabled"
        case enabled = "Enabled"
        public var description: String { return self.rawValue }
    }

    public struct CreateDeliveryStreamOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeliveryStreamARN", required: false, type: .string)
        ]
        /// The ARN of the delivery stream.
        public let deliveryStreamARN: String?

        public init(deliveryStreamARN: String? = nil) {
            self.deliveryStreamARN = deliveryStreamARN
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStreamARN = "DeliveryStreamARN"
        }
    }

    public struct SplunkDestinationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RetryOptions", required: false, type: .structure), 
            AWSShapeMember(label: "HECAcknowledgmentTimeoutInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "S3Update", required: false, type: .structure), 
            AWSShapeMember(label: "HECToken", required: false, type: .string), 
            AWSShapeMember(label: "HECEndpoint", required: false, type: .string), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "HECEndpointType", required: false, type: .enum)
        ]
        /// The retry behavior in case Kinesis Firehose is unable to deliver data to Splunk or if it doesn't receive an acknowledgment of receipt from Splunk.
        public let retryOptions: SplunkRetryOptions?
        /// The amount of time that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data. At the end of the timeout period Kinesis Firehose either tries to send the data again or considers it an error, based on your retry settings.
        public let hECAcknowledgmentTimeoutInSeconds: Int32?
        /// Your update to the configuration of the backup Amazon S3 location.
        public let s3Update: S3DestinationUpdate?
        /// This is a GUID you obtain from your Splunk cluster when you create a new HEC endpoint.
        public let hECToken: String?
        /// The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
        public let hECEndpoint: String?
        /// Defines how documents should be delivered to Amazon S3. When set to FailedDocumentsOnly, Kinesis Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to AllDocuments, Kinesis Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. Default value is FailedDocumentsOnly. 
        public let s3BackupMode: SplunkS3BackupMode?
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// This type can be either "Raw" or "Event".
        public let hECEndpointType: HECEndpointType?

        public init(retryOptions: SplunkRetryOptions? = nil, hECAcknowledgmentTimeoutInSeconds: Int32? = nil, s3Update: S3DestinationUpdate? = nil, hECToken: String? = nil, hECEndpoint: String? = nil, s3BackupMode: SplunkS3BackupMode? = nil, processingConfiguration: ProcessingConfiguration? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, hECEndpointType: HECEndpointType? = nil) {
            self.retryOptions = retryOptions
            self.hECAcknowledgmentTimeoutInSeconds = hECAcknowledgmentTimeoutInSeconds
            self.s3Update = s3Update
            self.hECToken = hECToken
            self.hECEndpoint = hECEndpoint
            self.s3BackupMode = s3BackupMode
            self.processingConfiguration = processingConfiguration
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.hECEndpointType = hECEndpointType
        }

        private enum CodingKeys: String, CodingKey {
            case retryOptions = "RetryOptions"
            case hECAcknowledgmentTimeoutInSeconds = "HECAcknowledgmentTimeoutInSeconds"
            case s3Update = "S3Update"
            case hECToken = "HECToken"
            case hECEndpoint = "HECEndpoint"
            case s3BackupMode = "S3BackupMode"
            case processingConfiguration = "ProcessingConfiguration"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case hECEndpointType = "HECEndpointType"
        }
    }

    public struct ElasticsearchDestinationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypeName", required: false, type: .string), 
            AWSShapeMember(label: "IndexName", required: false, type: .string), 
            AWSShapeMember(label: "IndexRotationPeriod", required: false, type: .enum), 
            AWSShapeMember(label: "DomainARN", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "S3Update", required: false, type: .structure), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "RetryOptions", required: false, type: .structure), 
            AWSShapeMember(label: "BufferingHints", required: false, type: .structure)
        ]
        /// The Elasticsearch type name.
        public let typeName: String?
        /// The Elasticsearch index name.
        public let indexName: String?
        /// The Elasticsearch index rotation period. Index rotation appends a time stamp to IndexName to facilitate the expiration of old data. For more information, see Index Rotation for Amazon Elasticsearch Service Destination. Default value is OneDay.
        public let indexRotationPeriod: ElasticsearchIndexRotationPeriod?
        /// The ARN of the Amazon ES domain. The IAM role must have permissions for DescribeElasticsearchDomain, DescribeElasticsearchDomains, and DescribeElasticsearchDomainConfig after assuming the IAM role specified in RoleARN.
        public let domainARN: String?
        /// The ARN of the IAM role to be assumed by Kinesis Firehose for calling the Amazon ES Configuration API and for indexing documents. For more information, see Amazon S3 Bucket Access.
        public let roleARN: String?
        /// The Amazon S3 destination.
        public let s3Update: S3DestinationUpdate?
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The retry behavior in case Kinesis Firehose is unable to deliver documents to Amazon ES. The default value is 300 (5 minutes).
        public let retryOptions: ElasticsearchRetryOptions?
        /// The buffering options. If no value is specified, ElasticsearchBufferingHints object default values are used. 
        public let bufferingHints: ElasticsearchBufferingHints?

        public init(typeName: String? = nil, indexName: String? = nil, indexRotationPeriod: ElasticsearchIndexRotationPeriod? = nil, domainARN: String? = nil, roleARN: String? = nil, s3Update: S3DestinationUpdate? = nil, processingConfiguration: ProcessingConfiguration? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, retryOptions: ElasticsearchRetryOptions? = nil, bufferingHints: ElasticsearchBufferingHints? = nil) {
            self.typeName = typeName
            self.indexName = indexName
            self.indexRotationPeriod = indexRotationPeriod
            self.domainARN = domainARN
            self.roleARN = roleARN
            self.s3Update = s3Update
            self.processingConfiguration = processingConfiguration
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.retryOptions = retryOptions
            self.bufferingHints = bufferingHints
        }

        private enum CodingKeys: String, CodingKey {
            case typeName = "TypeName"
            case indexName = "IndexName"
            case indexRotationPeriod = "IndexRotationPeriod"
            case domainARN = "DomainARN"
            case roleARN = "RoleARN"
            case s3Update = "S3Update"
            case processingConfiguration = "ProcessingConfiguration"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case retryOptions = "RetryOptions"
            case bufferingHints = "BufferingHints"
        }
    }

    public struct SplunkRetryOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DurationInSeconds", required: false, type: .integer)
        ]
        /// The total amount of time that Kinesis Firehose spends on retries. This duration starts after the initial attempt to send data to Splunk fails and doesn't include the periods during which Kinesis Firehose waits for acknowledgment from Splunk after each attempt.
        public let durationInSeconds: Int32?

        public init(durationInSeconds: Int32? = nil) {
            self.durationInSeconds = durationInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case durationInSeconds = "DurationInSeconds"
        }
    }

    public struct CreateDeliveryStreamInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ElasticsearchDestinationConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "KinesisStreamSourceConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "DeliveryStreamType", required: false, type: .enum), 
            AWSShapeMember(label: "S3DestinationConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string), 
            AWSShapeMember(label: "ExtendedS3DestinationConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "RedshiftDestinationConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "SplunkDestinationConfiguration", required: false, type: .structure)
        ]
        /// The destination in Amazon ES. You can specify only one destination.
        public let elasticsearchDestinationConfiguration: ElasticsearchDestinationConfiguration?
        /// When a Kinesis stream is used as the source for the delivery stream, a KinesisStreamSourceConfiguration containing the Kinesis stream ARN and the role ARN for the source stream.
        public let kinesisStreamSourceConfiguration: KinesisStreamSourceConfiguration?
        /// The delivery stream type. This parameter can be one of the following values:    DirectPut: Provider applications access the delivery stream directly.    KinesisStreamAsSource: The delivery stream uses a Kinesis stream as a source.  
        public let deliveryStreamType: DeliveryStreamType?
        /// [Deprecated] The destination in Amazon S3. You can specify only one destination.
        public let s3DestinationConfiguration: S3DestinationConfiguration?
        /// The name of the delivery stream. This name must be unique per AWS account in the same region. If the delivery streams are in different accounts or different regions, you can have multiple delivery streams with the same name.
        public let deliveryStreamName: String
        /// The destination in Amazon S3. You can specify only one destination.
        public let extendedS3DestinationConfiguration: ExtendedS3DestinationConfiguration?
        /// The destination in Amazon Redshift. You can specify only one destination.
        public let redshiftDestinationConfiguration: RedshiftDestinationConfiguration?
        /// The destination in Splunk. You can specify only one destination.
        public let splunkDestinationConfiguration: SplunkDestinationConfiguration?

        public init(elasticsearchDestinationConfiguration: ElasticsearchDestinationConfiguration? = nil, kinesisStreamSourceConfiguration: KinesisStreamSourceConfiguration? = nil, deliveryStreamType: DeliveryStreamType? = nil, s3DestinationConfiguration: S3DestinationConfiguration? = nil, deliveryStreamName: String, extendedS3DestinationConfiguration: ExtendedS3DestinationConfiguration? = nil, redshiftDestinationConfiguration: RedshiftDestinationConfiguration? = nil, splunkDestinationConfiguration: SplunkDestinationConfiguration? = nil) {
            self.elasticsearchDestinationConfiguration = elasticsearchDestinationConfiguration
            self.kinesisStreamSourceConfiguration = kinesisStreamSourceConfiguration
            self.deliveryStreamType = deliveryStreamType
            self.s3DestinationConfiguration = s3DestinationConfiguration
            self.deliveryStreamName = deliveryStreamName
            self.extendedS3DestinationConfiguration = extendedS3DestinationConfiguration
            self.redshiftDestinationConfiguration = redshiftDestinationConfiguration
            self.splunkDestinationConfiguration = splunkDestinationConfiguration
        }

        private enum CodingKeys: String, CodingKey {
            case elasticsearchDestinationConfiguration = "ElasticsearchDestinationConfiguration"
            case kinesisStreamSourceConfiguration = "KinesisStreamSourceConfiguration"
            case deliveryStreamType = "DeliveryStreamType"
            case s3DestinationConfiguration = "S3DestinationConfiguration"
            case deliveryStreamName = "DeliveryStreamName"
            case extendedS3DestinationConfiguration = "ExtendedS3DestinationConfiguration"
            case redshiftDestinationConfiguration = "RedshiftDestinationConfiguration"
            case splunkDestinationConfiguration = "SplunkDestinationConfiguration"
        }
    }

    public struct ElasticsearchDestinationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypeName", required: true, type: .string), 
            AWSShapeMember(label: "IndexName", required: true, type: .string), 
            AWSShapeMember(label: "S3Configuration", required: true, type: .structure), 
            AWSShapeMember(label: "IndexRotationPeriod", required: false, type: .enum), 
            AWSShapeMember(label: "DomainARN", required: true, type: .string), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "RetryOptions", required: false, type: .structure), 
            AWSShapeMember(label: "BufferingHints", required: false, type: .structure)
        ]
        /// The Elasticsearch type name.
        public let typeName: String
        /// The Elasticsearch index name.
        public let indexName: String
        /// The configuration for the backup Amazon S3 location.
        public let s3Configuration: S3DestinationConfiguration
        /// The Elasticsearch index rotation period. Index rotation appends a time stamp to the IndexName to facilitate the expiration of old data. For more information, see Index Rotation for Amazon Elasticsearch Service Destination. The default value is OneDay.
        public let indexRotationPeriod: ElasticsearchIndexRotationPeriod?
        /// The ARN of the Amazon ES domain. The IAM role must have permissions for DescribeElasticsearchDomain, DescribeElasticsearchDomains, and DescribeElasticsearchDomainConfig after assuming the role specified in RoleARN.
        public let domainARN: String
        /// The ARN of the IAM role to be assumed by Kinesis Firehose for calling the Amazon ES Configuration API and for indexing documents. For more information, see Amazon S3 Bucket Access.
        public let roleARN: String
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// Defines how documents should be delivered to Amazon S3. When set to FailedDocumentsOnly, Kinesis Firehose writes any documents that could not be indexed to the configured Amazon S3 destination, with elasticsearch-failed/ appended to the key prefix. When set to AllDocuments, Kinesis Firehose delivers all incoming records to Amazon S3, and also writes failed documents with elasticsearch-failed/ appended to the prefix. For more information, see Amazon S3 Backup for Amazon Elasticsearch Service Destination. Default value is FailedDocumentsOnly.
        public let s3BackupMode: ElasticsearchS3BackupMode?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The retry behavior in case Kinesis Firehose is unable to deliver documents to Amazon ES. The default value is 300 (5 minutes).
        public let retryOptions: ElasticsearchRetryOptions?
        /// The buffering options. If no value is specified, the default values for ElasticsearchBufferingHints are used.
        public let bufferingHints: ElasticsearchBufferingHints?

        public init(typeName: String, indexName: String, s3Configuration: S3DestinationConfiguration, indexRotationPeriod: ElasticsearchIndexRotationPeriod? = nil, domainARN: String, roleARN: String, processingConfiguration: ProcessingConfiguration? = nil, s3BackupMode: ElasticsearchS3BackupMode? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, retryOptions: ElasticsearchRetryOptions? = nil, bufferingHints: ElasticsearchBufferingHints? = nil) {
            self.typeName = typeName
            self.indexName = indexName
            self.s3Configuration = s3Configuration
            self.indexRotationPeriod = indexRotationPeriod
            self.domainARN = domainARN
            self.roleARN = roleARN
            self.processingConfiguration = processingConfiguration
            self.s3BackupMode = s3BackupMode
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.retryOptions = retryOptions
            self.bufferingHints = bufferingHints
        }

        private enum CodingKeys: String, CodingKey {
            case typeName = "TypeName"
            case indexName = "IndexName"
            case s3Configuration = "S3Configuration"
            case indexRotationPeriod = "IndexRotationPeriod"
            case domainARN = "DomainARN"
            case roleARN = "RoleARN"
            case processingConfiguration = "ProcessingConfiguration"
            case s3BackupMode = "S3BackupMode"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case retryOptions = "RetryOptions"
            case bufferingHints = "BufferingHints"
        }
    }

    public struct Record: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Data", required: true, type: .blob)
        ]
        /// The data blob, which is base64-encoded when the blob is serialized. The maximum size of the data blob, before base64-encoding, is 1,000 KB.
        public let data: Data

        public init(data: Data) {
            self.data = data
        }

        private enum CodingKeys: String, CodingKey {
            case data = "Data"
        }
    }

    public struct PutRecordBatchInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Records", required: true, type: .list), 
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string)
        ]
        /// One or more records.
        public let records: [Record]
        /// The name of the delivery stream.
        public let deliveryStreamName: String

        public init(records: [Record], deliveryStreamName: String) {
            self.records = records
            self.deliveryStreamName = deliveryStreamName
        }

        private enum CodingKeys: String, CodingKey {
            case records = "Records"
            case deliveryStreamName = "DeliveryStreamName"
        }
    }

    public struct ProcessorParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterName", required: true, type: .enum), 
            AWSShapeMember(label: "ParameterValue", required: true, type: .string)
        ]
        /// The name of the parameter.
        public let parameterName: ProcessorParameterName
        /// The parameter value.
        public let parameterValue: String

        public init(parameterName: ProcessorParameterName, parameterValue: String) {
            self.parameterName = parameterName
            self.parameterValue = parameterValue
        }

        private enum CodingKeys: String, CodingKey {
            case parameterName = "ParameterName"
            case parameterValue = "ParameterValue"
        }
    }

    public struct KMSEncryptionConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AWSKMSKeyARN", required: true, type: .string)
        ]
        /// The ARN of the encryption key. Must belong to the same region as the destination Amazon S3 bucket.
        public let aWSKMSKeyARN: String

        public init(aWSKMSKeyARN: String) {
            self.aWSKMSKeyARN = aWSKMSKeyARN
        }

        private enum CodingKeys: String, CodingKey {
            case aWSKMSKeyARN = "AWSKMSKeyARN"
        }
    }

    public struct ExtendedS3DestinationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3BackupDescription", required: false, type: .structure), 
            AWSShapeMember(label: "BucketARN", required: true, type: .string), 
            AWSShapeMember(label: "EncryptionConfiguration", required: true, type: .structure), 
            AWSShapeMember(label: "RoleARN", required: true, type: .string), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "CompressionFormat", required: true, type: .enum), 
            AWSShapeMember(label: "BufferingHints", required: true, type: .structure)
        ]
        /// The configuration for backup in Amazon S3.
        public let s3BackupDescription: S3DestinationDescription?
        /// The ARN of the S3 bucket.
        public let bucketARN: String
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public let encryptionConfiguration: EncryptionConfiguration
        /// The ARN of the AWS credentials.
        public let roleARN: String
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. If the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see Amazon S3 Object Name Format in the Amazon Kinesis Firehose Developer Guide.
        public let prefix: String?
        /// The Amazon S3 backup mode.
        public let s3BackupMode: S3BackupMode?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED.
        public let compressionFormat: CompressionFormat
        /// The buffering option.
        public let bufferingHints: BufferingHints

        public init(s3BackupDescription: S3DestinationDescription? = nil, bucketARN: String, encryptionConfiguration: EncryptionConfiguration, roleARN: String, processingConfiguration: ProcessingConfiguration? = nil, prefix: String? = nil, s3BackupMode: S3BackupMode? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, compressionFormat: CompressionFormat, bufferingHints: BufferingHints) {
            self.s3BackupDescription = s3BackupDescription
            self.bucketARN = bucketARN
            self.encryptionConfiguration = encryptionConfiguration
            self.roleARN = roleARN
            self.processingConfiguration = processingConfiguration
            self.prefix = prefix
            self.s3BackupMode = s3BackupMode
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.bufferingHints = bufferingHints
        }

        private enum CodingKeys: String, CodingKey {
            case s3BackupDescription = "S3BackupDescription"
            case bucketARN = "BucketARN"
            case encryptionConfiguration = "EncryptionConfiguration"
            case roleARN = "RoleARN"
            case processingConfiguration = "ProcessingConfiguration"
            case prefix = "Prefix"
            case s3BackupMode = "S3BackupMode"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case compressionFormat = "CompressionFormat"
            case bufferingHints = "BufferingHints"
        }
    }

    public enum CompressionFormat: String, CustomStringConvertible, Codable {
        case uncompressed = "UNCOMPRESSED"
        case gzip = "GZIP"
        case zip = "ZIP"
        case snappy = "Snappy"
        public var description: String { return self.rawValue }
    }

    public struct PutRecordInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Record", required: true, type: .structure), 
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string)
        ]
        /// The record.
        public let record: Record
        /// The name of the delivery stream.
        public let deliveryStreamName: String

        public init(record: Record, deliveryStreamName: String) {
            self.record = record
            self.deliveryStreamName = deliveryStreamName
        }

        private enum CodingKeys: String, CodingKey {
            case record = "Record"
            case deliveryStreamName = "DeliveryStreamName"
        }
    }

    public struct DeleteDeliveryStreamOutput: AWSShape {

    }

    public struct SplunkDestinationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Configuration", required: true, type: .structure), 
            AWSShapeMember(label: "HECAcknowledgmentTimeoutInSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "HECToken", required: true, type: .string), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum), 
            AWSShapeMember(label: "HECEndpoint", required: true, type: .string), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "HECEndpointType", required: true, type: .enum), 
            AWSShapeMember(label: "RetryOptions", required: false, type: .structure)
        ]
        /// The configuration for the backup Amazon S3 location.
        public let s3Configuration: S3DestinationConfiguration
        /// The amount of time that Kinesis Firehose waits to receive an acknowledgment from Splunk after it sends it data. At the end of the timeout period Kinesis Firehose either tries to send the data again or considers it an error, based on your retry settings.
        public let hECAcknowledgmentTimeoutInSeconds: Int32?
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// This is a GUID you obtain from your Splunk cluster when you create a new HEC endpoint.
        public let hECToken: String
        /// Defines how documents should be delivered to Amazon S3. When set to FailedDocumentsOnly, Kinesis Firehose writes any data that could not be indexed to the configured Amazon S3 destination. When set to AllDocuments, Kinesis Firehose delivers all incoming records to Amazon S3, and also writes failed documents to Amazon S3. Default value is FailedDocumentsOnly. 
        public let s3BackupMode: SplunkS3BackupMode?
        /// The HTTP Event Collector (HEC) endpoint to which Kinesis Firehose sends your data.
        public let hECEndpoint: String
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// This type can be either "Raw" or "Event".
        public let hECEndpointType: HECEndpointType
        /// The retry behavior in case Kinesis Firehose is unable to deliver data to Splunk or if it doesn't receive an acknowledgment of receipt from Splunk.
        public let retryOptions: SplunkRetryOptions?

        public init(s3Configuration: S3DestinationConfiguration, hECAcknowledgmentTimeoutInSeconds: Int32? = nil, processingConfiguration: ProcessingConfiguration? = nil, hECToken: String, s3BackupMode: SplunkS3BackupMode? = nil, hECEndpoint: String, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, hECEndpointType: HECEndpointType, retryOptions: SplunkRetryOptions? = nil) {
            self.s3Configuration = s3Configuration
            self.hECAcknowledgmentTimeoutInSeconds = hECAcknowledgmentTimeoutInSeconds
            self.processingConfiguration = processingConfiguration
            self.hECToken = hECToken
            self.s3BackupMode = s3BackupMode
            self.hECEndpoint = hECEndpoint
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.hECEndpointType = hECEndpointType
            self.retryOptions = retryOptions
        }

        private enum CodingKeys: String, CodingKey {
            case s3Configuration = "S3Configuration"
            case hECAcknowledgmentTimeoutInSeconds = "HECAcknowledgmentTimeoutInSeconds"
            case processingConfiguration = "ProcessingConfiguration"
            case hECToken = "HECToken"
            case s3BackupMode = "S3BackupMode"
            case hECEndpoint = "HECEndpoint"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case hECEndpointType = "HECEndpointType"
            case retryOptions = "RetryOptions"
        }
    }

    public enum ElasticsearchIndexRotationPeriod: String, CustomStringConvertible, Codable {
        case norotation = "NoRotation"
        case onehour = "OneHour"
        case oneday = "OneDay"
        case oneweek = "OneWeek"
        case onemonth = "OneMonth"
        public var description: String { return self.rawValue }
    }

    public struct Processor: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "Parameters", required: false, type: .list)
        ]
        /// The type of processor.
        public let `type`: ProcessorType
        /// The processor parameters.
        public let parameters: [ProcessorParameter]?

        public init(type: ProcessorType, parameters: [ProcessorParameter]? = nil) {
            self.`type` = `type`
            self.parameters = parameters
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case parameters = "Parameters"
        }
    }

    public struct DescribeDeliveryStreamInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExclusiveStartDestinationId", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string)
        ]
        /// The ID of the destination to start returning the destination information. Currently, Kinesis Firehose supports one destination per delivery stream.
        public let exclusiveStartDestinationId: String?
        /// The limit on the number of destinations to return. Currently, you can have one destination per delivery stream.
        public let limit: Int32?
        /// The name of the delivery stream.
        public let deliveryStreamName: String

        public init(exclusiveStartDestinationId: String? = nil, limit: Int32? = nil, deliveryStreamName: String) {
            self.exclusiveStartDestinationId = exclusiveStartDestinationId
            self.limit = limit
            self.deliveryStreamName = deliveryStreamName
        }

        private enum CodingKeys: String, CodingKey {
            case exclusiveStartDestinationId = "ExclusiveStartDestinationId"
            case limit = "Limit"
            case deliveryStreamName = "DeliveryStreamName"
        }
    }

    public struct ExtendedS3DestinationUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BucketARN", required: false, type: .string), 
            AWSShapeMember(label: "EncryptionConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "S3BackupUpdate", required: false, type: .structure), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "Prefix", required: false, type: .string), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "CompressionFormat", required: false, type: .enum), 
            AWSShapeMember(label: "BufferingHints", required: false, type: .structure)
        ]
        /// The ARN of the S3 bucket.
        public let bucketARN: String?
        /// The encryption configuration. If no value is specified, the default is no encryption.
        public let encryptionConfiguration: EncryptionConfiguration?
        /// The ARN of the AWS credentials.
        public let roleARN: String?
        /// The Amazon S3 destination for backup.
        public let s3BackupUpdate: S3DestinationUpdate?
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The "YYYY/MM/DD/HH" time format prefix is automatically used for delivered S3 files. You can specify an extra prefix to be added in front of the time format prefix. If the prefix ends with a slash, it appears as a folder in the S3 bucket. For more information, see Amazon S3 Object Name Format in the Amazon Kinesis Firehose Developer Guide.
        public let prefix: String?
        /// Enables or disables Amazon S3 backup mode.
        public let s3BackupMode: S3BackupMode?
        /// The CloudWatch logging options for your delivery stream.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The compression format. If no value is specified, the default is UNCOMPRESSED. 
        public let compressionFormat: CompressionFormat?
        /// The buffering option.
        public let bufferingHints: BufferingHints?

        public init(bucketARN: String? = nil, encryptionConfiguration: EncryptionConfiguration? = nil, roleARN: String? = nil, s3BackupUpdate: S3DestinationUpdate? = nil, processingConfiguration: ProcessingConfiguration? = nil, prefix: String? = nil, s3BackupMode: S3BackupMode? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, compressionFormat: CompressionFormat? = nil, bufferingHints: BufferingHints? = nil) {
            self.bucketARN = bucketARN
            self.encryptionConfiguration = encryptionConfiguration
            self.roleARN = roleARN
            self.s3BackupUpdate = s3BackupUpdate
            self.processingConfiguration = processingConfiguration
            self.prefix = prefix
            self.s3BackupMode = s3BackupMode
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.compressionFormat = compressionFormat
            self.bufferingHints = bufferingHints
        }

        private enum CodingKeys: String, CodingKey {
            case bucketARN = "BucketARN"
            case encryptionConfiguration = "EncryptionConfiguration"
            case roleARN = "RoleARN"
            case s3BackupUpdate = "S3BackupUpdate"
            case processingConfiguration = "ProcessingConfiguration"
            case prefix = "Prefix"
            case s3BackupMode = "S3BackupMode"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case compressionFormat = "CompressionFormat"
            case bufferingHints = "BufferingHints"
        }
    }

    public struct KinesisStreamSourceDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeliveryStartTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "KinesisStreamARN", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string)
        ]
        /// Kinesis Firehose starts retrieving records from the Kinesis stream starting with this time stamp.
        public let deliveryStartTimestamp: TimeStamp?
        /// The ARN of the source Kinesis stream.
        public let kinesisStreamARN: String?
        /// The ARN of the role used by the source Kinesis stream.
        public let roleARN: String?

        public init(deliveryStartTimestamp: TimeStamp? = nil, kinesisStreamARN: String? = nil, roleARN: String? = nil) {
            self.deliveryStartTimestamp = deliveryStartTimestamp
            self.kinesisStreamARN = kinesisStreamARN
            self.roleARN = roleARN
        }

        private enum CodingKeys: String, CodingKey {
            case deliveryStartTimestamp = "DeliveryStartTimestamp"
            case kinesisStreamARN = "KinesisStreamARN"
            case roleARN = "RoleARN"
        }
    }

    public struct CloudWatchLoggingOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LogStreamName", required: false, type: .string), 
            AWSShapeMember(label: "LogGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// The CloudWatch log stream name for logging. This value is required if CloudWatch logging is enabled.
        public let logStreamName: String?
        /// The CloudWatch group name for logging. This value is required if CloudWatch logging is enabled.
        public let logGroupName: String?
        /// Enables or disables CloudWatch logging.
        public let enabled: Bool?

        public init(logStreamName: String? = nil, logGroupName: String? = nil, enabled: Bool? = nil) {
            self.logStreamName = logStreamName
            self.logGroupName = logGroupName
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case logStreamName = "LogStreamName"
            case logGroupName = "LogGroupName"
            case enabled = "Enabled"
        }
    }

    public struct EncryptionConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KMSEncryptionConfig", required: false, type: .structure), 
            AWSShapeMember(label: "NoEncryptionConfig", required: false, type: .enum)
        ]
        /// The encryption key.
        public let kMSEncryptionConfig: KMSEncryptionConfig?
        /// Specifically override existing encryption information to ensure that no encryption is used.
        public let noEncryptionConfig: NoEncryptionConfig?

        public init(kMSEncryptionConfig: KMSEncryptionConfig? = nil, noEncryptionConfig: NoEncryptionConfig? = nil) {
            self.kMSEncryptionConfig = kMSEncryptionConfig
            self.noEncryptionConfig = noEncryptionConfig
        }

        private enum CodingKeys: String, CodingKey {
            case kMSEncryptionConfig = "KMSEncryptionConfig"
            case noEncryptionConfig = "NoEncryptionConfig"
        }
    }

    public struct DeliveryStreamDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Destinations", required: true, type: .list), 
            AWSShapeMember(label: "DeliveryStreamType", required: true, type: .enum), 
            AWSShapeMember(label: "DeliveryStreamStatus", required: true, type: .enum), 
            AWSShapeMember(label: "LastUpdateTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "DeliveryStreamName", required: true, type: .string), 
            AWSShapeMember(label: "VersionId", required: true, type: .string), 
            AWSShapeMember(label: "CreateTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Source", required: false, type: .structure), 
            AWSShapeMember(label: "DeliveryStreamARN", required: true, type: .string), 
            AWSShapeMember(label: "HasMoreDestinations", required: true, type: .boolean)
        ]
        /// The destinations.
        public let destinations: [DestinationDescription]
        /// The delivery stream type. This can be one of the following values:    DirectPut: Provider applications access the delivery stream directly.    KinesisStreamAsSource: The delivery stream uses a Kinesis stream as a source.  
        public let deliveryStreamType: DeliveryStreamType
        /// The status of the delivery stream.
        public let deliveryStreamStatus: DeliveryStreamStatus
        /// The date and time that the delivery stream was last updated.
        public let lastUpdateTimestamp: TimeStamp?
        /// The name of the delivery stream.
        public let deliveryStreamName: String
        /// Each time the destination is updated for a delivery stream, the version ID is changed, and the current version ID is required when updating the destination. This is so that the service knows it is applying the changes to the correct version of the delivery stream.
        public let versionId: String
        /// The date and time that the delivery stream was created.
        public let createTimestamp: TimeStamp?
        /// If the DeliveryStreamType parameter is KinesisStreamAsSource, a SourceDescription object describing the source Kinesis stream.
        public let source: SourceDescription?
        /// The Amazon Resource Name (ARN) of the delivery stream.
        public let deliveryStreamARN: String
        /// Indicates whether there are more destinations available to list.
        public let hasMoreDestinations: Bool

        public init(destinations: [DestinationDescription], deliveryStreamType: DeliveryStreamType, deliveryStreamStatus: DeliveryStreamStatus, lastUpdateTimestamp: TimeStamp? = nil, deliveryStreamName: String, versionId: String, createTimestamp: TimeStamp? = nil, source: SourceDescription? = nil, deliveryStreamARN: String, hasMoreDestinations: Bool) {
            self.destinations = destinations
            self.deliveryStreamType = deliveryStreamType
            self.deliveryStreamStatus = deliveryStreamStatus
            self.lastUpdateTimestamp = lastUpdateTimestamp
            self.deliveryStreamName = deliveryStreamName
            self.versionId = versionId
            self.createTimestamp = createTimestamp
            self.source = source
            self.deliveryStreamARN = deliveryStreamARN
            self.hasMoreDestinations = hasMoreDestinations
        }

        private enum CodingKeys: String, CodingKey {
            case destinations = "Destinations"
            case deliveryStreamType = "DeliveryStreamType"
            case deliveryStreamStatus = "DeliveryStreamStatus"
            case lastUpdateTimestamp = "LastUpdateTimestamp"
            case deliveryStreamName = "DeliveryStreamName"
            case versionId = "VersionId"
            case createTimestamp = "CreateTimestamp"
            case source = "Source"
            case deliveryStreamARN = "DeliveryStreamARN"
            case hasMoreDestinations = "HasMoreDestinations"
        }
    }

    public struct ElasticsearchDestinationDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TypeName", required: false, type: .string), 
            AWSShapeMember(label: "IndexName", required: false, type: .string), 
            AWSShapeMember(label: "IndexRotationPeriod", required: false, type: .enum), 
            AWSShapeMember(label: "DomainARN", required: false, type: .string), 
            AWSShapeMember(label: "RoleARN", required: false, type: .string), 
            AWSShapeMember(label: "S3DestinationDescription", required: false, type: .structure), 
            AWSShapeMember(label: "ProcessingConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "S3BackupMode", required: false, type: .enum), 
            AWSShapeMember(label: "CloudWatchLoggingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "RetryOptions", required: false, type: .structure), 
            AWSShapeMember(label: "BufferingHints", required: false, type: .structure)
        ]
        /// The Elasticsearch type name.
        public let typeName: String?
        /// The Elasticsearch index name.
        public let indexName: String?
        /// The Elasticsearch index rotation period
        public let indexRotationPeriod: ElasticsearchIndexRotationPeriod?
        /// The ARN of the Amazon ES domain.
        public let domainARN: String?
        /// The ARN of the AWS credentials.
        public let roleARN: String?
        /// The Amazon S3 destination.
        public let s3DestinationDescription: S3DestinationDescription?
        /// The data processing configuration.
        public let processingConfiguration: ProcessingConfiguration?
        /// The Amazon S3 backup mode.
        public let s3BackupMode: ElasticsearchS3BackupMode?
        /// The CloudWatch logging options.
        public let cloudWatchLoggingOptions: CloudWatchLoggingOptions?
        /// The Amazon ES retry options.
        public let retryOptions: ElasticsearchRetryOptions?
        /// The buffering options.
        public let bufferingHints: ElasticsearchBufferingHints?

        public init(typeName: String? = nil, indexName: String? = nil, indexRotationPeriod: ElasticsearchIndexRotationPeriod? = nil, domainARN: String? = nil, roleARN: String? = nil, s3DestinationDescription: S3DestinationDescription? = nil, processingConfiguration: ProcessingConfiguration? = nil, s3BackupMode: ElasticsearchS3BackupMode? = nil, cloudWatchLoggingOptions: CloudWatchLoggingOptions? = nil, retryOptions: ElasticsearchRetryOptions? = nil, bufferingHints: ElasticsearchBufferingHints? = nil) {
            self.typeName = typeName
            self.indexName = indexName
            self.indexRotationPeriod = indexRotationPeriod
            self.domainARN = domainARN
            self.roleARN = roleARN
            self.s3DestinationDescription = s3DestinationDescription
            self.processingConfiguration = processingConfiguration
            self.s3BackupMode = s3BackupMode
            self.cloudWatchLoggingOptions = cloudWatchLoggingOptions
            self.retryOptions = retryOptions
            self.bufferingHints = bufferingHints
        }

        private enum CodingKeys: String, CodingKey {
            case typeName = "TypeName"
            case indexName = "IndexName"
            case indexRotationPeriod = "IndexRotationPeriod"
            case domainARN = "DomainARN"
            case roleARN = "RoleARN"
            case s3DestinationDescription = "S3DestinationDescription"
            case processingConfiguration = "ProcessingConfiguration"
            case s3BackupMode = "S3BackupMode"
            case cloudWatchLoggingOptions = "CloudWatchLoggingOptions"
            case retryOptions = "RetryOptions"
            case bufferingHints = "BufferingHints"
        }
    }

    public struct ElasticsearchBufferingHints: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SizeInMBs", required: false, type: .integer), 
            AWSShapeMember(label: "IntervalInSeconds", required: false, type: .integer)
        ]
        /// Buffer incoming data to the specified size, in MBs, before delivering it to the destination. The default value is 5. We recommend setting this parameter to a value greater than the amount of data you typically ingest into the delivery stream in 10 seconds. For example, if you typically ingest data at 1 MB/sec, the value should be 10 MB or higher.
        public let sizeInMBs: Int32?
        /// Buffer incoming data for the specified period of time, in seconds, before delivering it to the destination. The default value is 300 (5 minutes).
        public let intervalInSeconds: Int32?

        public init(sizeInMBs: Int32? = nil, intervalInSeconds: Int32? = nil) {
            self.sizeInMBs = sizeInMBs
            self.intervalInSeconds = intervalInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case sizeInMBs = "SizeInMBs"
            case intervalInSeconds = "IntervalInSeconds"
        }
    }

    public struct PutRecordBatchResponseEntry: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordId", required: false, type: .string), 
            AWSShapeMember(label: "ErrorCode", required: false, type: .string), 
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string)
        ]
        /// The ID of the record.
        public let recordId: String?
        /// The error code for an individual record result.
        public let errorCode: String?
        /// The error message for an individual record result.
        public let errorMessage: String?

        public init(recordId: String? = nil, errorCode: String? = nil, errorMessage: String? = nil) {
            self.recordId = recordId
            self.errorCode = errorCode
            self.errorMessage = errorMessage
        }

        private enum CodingKeys: String, CodingKey {
            case recordId = "RecordId"
            case errorCode = "ErrorCode"
            case errorMessage = "ErrorMessage"
        }
    }

}