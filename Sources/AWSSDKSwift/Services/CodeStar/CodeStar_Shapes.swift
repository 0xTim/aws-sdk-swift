// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension CodeStar {

    public struct CodeSource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "s3", required: true, type: .structure)
        ]
        /// Information about the Amazon S3 location where the source code files provided with the project request are stored. 
        public let s3: S3Location

        public init(s3: S3Location) {
            self.s3 = s3
        }

        private enum CodingKeys: String, CodingKey {
            case s3 = "s3"
        }
    }

    public struct ListTeamMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "projectId", required: true, type: .string)
        ]
        /// The continuation token for the next set of results, if the results cannot be returned in one response.
        public let nextToken: String?
        /// The maximum number of team members you want returned in a response.
        public let maxResults: Int32?
        /// The ID of the project for which you want to list team members.
        public let projectId: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, projectId: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.projectId = projectId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case projectId = "projectId"
        }
    }

    public struct TagProjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .map)
        ]
        /// The ID of the project you want to add a tag to.
        public let id: String
        /// The tags you want to add to the project.
        public let tags: [String: String]

        public init(id: String, tags: [String: String]) {
            self.id = id
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case tags = "tags"
        }
    }

    public struct ProjectStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "reason", required: false, type: .string), 
            AWSShapeMember(label: "state", required: true, type: .string)
        ]
        /// In the case of a project creation or deletion failure, a reason for the failure.
        public let reason: String?
        /// The phase of completion for a project creation or deletion.
        public let state: String

        public init(reason: String? = nil, state: String) {
            self.reason = reason
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case reason = "reason"
            case state = "state"
        }
    }

    public struct ListResourcesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "projectId", required: true, type: .string)
        ]
        /// The continuation token for the next set of results, if the results cannot be returned in one response.
        public let nextToken: String?
        /// The maximum amount of data that can be contained in a single set of results.
        public let maxResults: Int32?
        /// The ID of the project.
        public let projectId: String

        public init(nextToken: String? = nil, maxResults: Int32? = nil, projectId: String) {
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.projectId = projectId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case projectId = "projectId"
        }
    }

    public struct ListTagsForProjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: true, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The ID of the project to get tags for.
        public let id: String
        /// Reserved for future use.
        public let maxResults: Int32?
        /// Reserved for future use.
        public let nextToken: String?

        public init(id: String, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.id = id
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct CreateUserProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userArn", required: true, type: .string), 
            AWSShapeMember(label: "emailAddress", required: true, type: .string), 
            AWSShapeMember(label: "displayName", required: true, type: .string), 
            AWSShapeMember(label: "sshPublicKey", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the user in IAM.
        public let userArn: String
        /// The email address that will be displayed as part of the user's profile in AWS CodeStar.
        public let emailAddress: String
        /// The name that will be displayed as the friendly name for the user in AWS CodeStar. 
        public let displayName: String
        /// The SSH public key associated with the user in AWS CodeStar. If a project owner allows the user remote access to project resources, this public key will be used along with the user's private key for SSH access.
        public let sshPublicKey: String?

        public init(userArn: String, emailAddress: String, displayName: String, sshPublicKey: String? = nil) {
            self.userArn = userArn
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.sshPublicKey = sshPublicKey
        }

        private enum CodingKeys: String, CodingKey {
            case userArn = "userArn"
            case emailAddress = "emailAddress"
            case displayName = "displayName"
            case sshPublicKey = "sshPublicKey"
        }
    }

    public struct DescribeUserProfileResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "createdTimestamp", required: true, type: .timestamp), 
            AWSShapeMember(label: "userArn", required: true, type: .string), 
            AWSShapeMember(label: "lastModifiedTimestamp", required: true, type: .timestamp), 
            AWSShapeMember(label: "emailAddress", required: false, type: .string), 
            AWSShapeMember(label: "displayName", required: false, type: .string), 
            AWSShapeMember(label: "sshPublicKey", required: false, type: .string)
        ]
        /// The date and time when the user profile was created in AWS CodeStar, in timestamp format.
        public let createdTimestamp: TimeStamp
        /// The Amazon Resource Name (ARN) of the user.
        public let userArn: String
        /// The date and time when the user profile was last modified, in timestamp format.
        public let lastModifiedTimestamp: TimeStamp
        /// The email address for the user. Optional.
        public let emailAddress: String?
        /// The display name shown for the user in AWS CodeStar projects. For example, this could be set to both first and last name ("Mary Major") or a single name ("Mary"). The display name is also used to generate the initial icon associated with the user in AWS CodeStar projects. If spaces are included in the display name, the first character that appears after the space will be used as the second character in the user initial icon. The initial icon displays a maximum of two characters, so a display name with more than one space (for example "Mary Jane Major") would generate an initial icon using the first character and the first character after the space ("MJ", not "MM").
        public let displayName: String?
        /// The SSH public key associated with the user. This SSH public key is associated with the user profile, and can be used in conjunction with the associated private key for access to project resources, such as Amazon EC2 instances, if a project owner grants remote access to those resources.
        public let sshPublicKey: String?

        public init(createdTimestamp: TimeStamp, userArn: String, lastModifiedTimestamp: TimeStamp, emailAddress: String? = nil, displayName: String? = nil, sshPublicKey: String? = nil) {
            self.createdTimestamp = createdTimestamp
            self.userArn = userArn
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.sshPublicKey = sshPublicKey
        }

        private enum CodingKeys: String, CodingKey {
            case createdTimestamp = "createdTimestamp"
            case userArn = "userArn"
            case lastModifiedTimestamp = "lastModifiedTimestamp"
            case emailAddress = "emailAddress"
            case displayName = "displayName"
            case sshPublicKey = "sshPublicKey"
        }
    }

    public struct UpdateTeamMemberRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userArn", required: true, type: .string), 
            AWSShapeMember(label: "projectRole", required: false, type: .string), 
            AWSShapeMember(label: "projectId", required: true, type: .string), 
            AWSShapeMember(label: "remoteAccessAllowed", required: false, type: .boolean)
        ]
        /// The Amazon Resource Name (ARN) of the user for whom you want to change team membership attributes.
        public let userArn: String
        /// The role assigned to the user in the project. Project roles have different levels of access. For more information, see Working with Teams in the AWS CodeStar User Guide.
        public let projectRole: String?
        /// The ID of the project.
        public let projectId: String
        /// Whether a team member is allowed to remotely access project resources using the SSH public key associated with the user's profile. Even if this is set to True, the user must associate a public key with their profile before the user can access resources.
        public let remoteAccessAllowed: Bool?

        public init(userArn: String, projectRole: String? = nil, projectId: String, remoteAccessAllowed: Bool? = nil) {
            self.userArn = userArn
            self.projectRole = projectRole
            self.projectId = projectId
            self.remoteAccessAllowed = remoteAccessAllowed
        }

        private enum CodingKeys: String, CodingKey {
            case userArn = "userArn"
            case projectRole = "projectRole"
            case projectId = "projectId"
            case remoteAccessAllowed = "remoteAccessAllowed"
        }
    }

    public struct ListTagsForProjectResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .map), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The tags for the project.
        public let tags: [String: String]?
        /// Reserved for future use.
        public let nextToken: String?

        public init(tags: [String: String]? = nil, nextToken: String? = nil) {
            self.tags = tags
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case nextToken = "nextToken"
        }
    }

    public struct UntagProjectResult: AWSShape {

    }

    public struct Code: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "destination", required: true, type: .structure), 
            AWSShapeMember(label: "source", required: true, type: .structure)
        ]
        /// The repository to be created in AWS CodeStar. Valid values are AWS CodeCommit or GitHub. After AWS CodeStar provisions the new repository, the source code files provided with the project request are placed in the repository.
        public let destination: CodeDestination
        /// The location where the source code files provided with the project request are stored. AWS CodeStar retrieves the files during project creation.
        public let source: CodeSource

        public init(destination: CodeDestination, source: CodeSource) {
            self.destination = destination
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case destination = "destination"
            case source = "source"
        }
    }

    public struct S3Location: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "bucketName", required: false, type: .string), 
            AWSShapeMember(label: "bucketKey", required: false, type: .string)
        ]
        /// The Amazon S3 bucket name where the source code files provided with the project request are stored.
        public let bucketName: String?
        /// The Amazon S3 object key where the source code files provided with the project request are stored.
        public let bucketKey: String?

        public init(bucketName: String? = nil, bucketKey: String? = nil) {
            self.bucketName = bucketName
            self.bucketKey = bucketKey
        }

        private enum CodingKeys: String, CodingKey {
            case bucketName = "bucketName"
            case bucketKey = "bucketKey"
        }
    }

    public struct DescribeProjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: true, type: .string)
        ]
        /// The ID of the project.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
        }
    }

    public struct UpdateUserProfileResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "createdTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "userArn", required: true, type: .string), 
            AWSShapeMember(label: "lastModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "emailAddress", required: false, type: .string), 
            AWSShapeMember(label: "displayName", required: false, type: .string), 
            AWSShapeMember(label: "sshPublicKey", required: false, type: .string)
        ]
        /// The date the user profile was created, in timestamp format.
        public let createdTimestamp: TimeStamp?
        /// The Amazon Resource Name (ARN) of the user in IAM.
        public let userArn: String
        /// The date the user profile was last modified, in timestamp format.
        public let lastModifiedTimestamp: TimeStamp?
        /// The email address that is displayed as part of the user's profile in AWS CodeStar.
        public let emailAddress: String?
        /// The name that is displayed as the friendly name for the user in AWS CodeStar.
        public let displayName: String?
        /// The SSH public key associated with the user in AWS CodeStar. This is the public portion of the public/private keypair the user can use to access project resources if a project owner allows the user remote access to those resources.
        public let sshPublicKey: String?

        public init(createdTimestamp: TimeStamp? = nil, userArn: String, lastModifiedTimestamp: TimeStamp? = nil, emailAddress: String? = nil, displayName: String? = nil, sshPublicKey: String? = nil) {
            self.createdTimestamp = createdTimestamp
            self.userArn = userArn
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.sshPublicKey = sshPublicKey
        }

        private enum CodingKeys: String, CodingKey {
            case createdTimestamp = "createdTimestamp"
            case userArn = "userArn"
            case lastModifiedTimestamp = "lastModifiedTimestamp"
            case emailAddress = "emailAddress"
            case displayName = "displayName"
            case sshPublicKey = "sshPublicKey"
        }
    }

    public struct GitHubCodeDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "type", required: true, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "owner", required: true, type: .string), 
            AWSShapeMember(label: "token", required: true, type: .string), 
            AWSShapeMember(label: "privateRepository", required: true, type: .boolean), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "issuesEnabled", required: true, type: .boolean)
        ]
        /// The type of GitHub repository to be created in AWS CodeStar. Valid values are User or Organization.
        public let `type`: String
        /// Name of the GitHub repository to be created in AWS CodeStar.
        public let name: String
        /// The GitHub username for the owner of the GitHub repository to be created in AWS CodeStar. If this repository should be owned by a GitHub organization, provide its name.
        public let owner: String
        /// The GitHub user's personal access token for the GitHub repository.
        public let token: String
        /// Whether the GitHub repository is to be a private repository.
        public let privateRepository: Bool
        /// Description for the GitHub repository to be created in AWS CodeStar. This description displays in GitHub after the repository is created.
        public let description: String?
        /// Whether to enable issues for the GitHub repository.
        public let issuesEnabled: Bool

        public init(type: String, name: String, owner: String, token: String, privateRepository: Bool, description: String? = nil, issuesEnabled: Bool) {
            self.`type` = `type`
            self.name = name
            self.owner = owner
            self.token = token
            self.privateRepository = privateRepository
            self.description = description
            self.issuesEnabled = issuesEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "type"
            case name = "name"
            case owner = "owner"
            case token = "token"
            case privateRepository = "privateRepository"
            case description = "description"
            case issuesEnabled = "issuesEnabled"
        }
    }

    public struct DeleteUserProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the user to delete from AWS CodeStar.
        public let userArn: String

        public init(userArn: String) {
            self.userArn = userArn
        }

        private enum CodingKeys: String, CodingKey {
            case userArn = "userArn"
        }
    }

    public struct TagProjectResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .map)
        ]
        /// The tags for the project.
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct ListResourcesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "resources", required: false, type: .list)
        ]
        /// The continuation token to use when requesting the next set of results, if there are more results to be returned.
        public let nextToken: String?
        /// An array of resources associated with the project. 
        public let resources: [Resource]?

        public init(nextToken: String? = nil, resources: [Resource]? = nil) {
            self.nextToken = nextToken
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case resources = "resources"
        }
    }

    public struct UserProfileSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userArn", required: false, type: .string), 
            AWSShapeMember(label: "emailAddress", required: false, type: .string), 
            AWSShapeMember(label: "displayName", required: false, type: .string), 
            AWSShapeMember(label: "sshPublicKey", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the user in IAM.
        public let userArn: String?
        /// The email address associated with the user.
        public let emailAddress: String?
        /// The display name of a user in AWS CodeStar. For example, this could be set to both first and last name ("Mary Major") or a single name ("Mary"). The display name is also used to generate the initial icon associated with the user in AWS CodeStar projects. If spaces are included in the display name, the first character that appears after the space will be used as the second character in the user initial icon. The initial icon displays a maximum of two characters, so a display name with more than one space (for example "Mary Jane Major") would generate an initial icon using the first character and the first character after the space ("MJ", not "MM").
        public let displayName: String?
        /// The SSH public key associated with the user in AWS CodeStar. If a project owner allows the user remote access to project resources, this public key will be used along with the user's private key for SSH access.
        public let sshPublicKey: String?

        public init(userArn: String? = nil, emailAddress: String? = nil, displayName: String? = nil, sshPublicKey: String? = nil) {
            self.userArn = userArn
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.sshPublicKey = sshPublicKey
        }

        private enum CodingKeys: String, CodingKey {
            case userArn = "userArn"
            case emailAddress = "emailAddress"
            case displayName = "displayName"
            case sshPublicKey = "sshPublicKey"
        }
    }

    public struct DeleteProjectResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "projectArn", required: false, type: .string), 
            AWSShapeMember(label: "stackId", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the deleted project.
        public let projectArn: String?
        /// The ID of the primary stack in AWS CloudFormation that will be deleted as part of deleting the project and its resources.
        public let stackId: String?

        public init(projectArn: String? = nil, stackId: String? = nil) {
            self.projectArn = projectArn
            self.stackId = stackId
        }

        private enum CodingKeys: String, CodingKey {
            case projectArn = "projectArn"
            case stackId = "stackId"
        }
    }

    public struct DescribeProjectResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "status", required: false, type: .structure), 
            AWSShapeMember(label: "createdTimeStamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "projectTemplateId", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string), 
            AWSShapeMember(label: "stackId", required: false, type: .string)
        ]
        /// The ID of the project.
        public let id: String?
        /// The display name for the project.
        public let name: String?
        /// A user- or system-generated token that identifies the entity that requested project creation. 
        public let clientRequestToken: String?
        /// The project creation or deletion status.
        public let status: ProjectStatus?
        /// The date and time the project was created, in timestamp format.
        public let createdTimeStamp: TimeStamp?
        /// The description of the project, if any.
        public let description: String?
        /// The ID for the AWS CodeStar project template used to create the project.
        public let projectTemplateId: String?
        /// The Amazon Resource Name (ARN) for the project.
        public let arn: String?
        /// The ID of the primary stack in AWS CloudFormation used to generate resources for the project.
        public let stackId: String?

        public init(id: String? = nil, name: String? = nil, clientRequestToken: String? = nil, status: ProjectStatus? = nil, createdTimeStamp: TimeStamp? = nil, description: String? = nil, projectTemplateId: String? = nil, arn: String? = nil, stackId: String? = nil) {
            self.id = id
            self.name = name
            self.clientRequestToken = clientRequestToken
            self.status = status
            self.createdTimeStamp = createdTimeStamp
            self.description = description
            self.projectTemplateId = projectTemplateId
            self.arn = arn
            self.stackId = stackId
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case name = "name"
            case clientRequestToken = "clientRequestToken"
            case status = "status"
            case createdTimeStamp = "createdTimeStamp"
            case description = "description"
            case projectTemplateId = "projectTemplateId"
            case arn = "arn"
            case stackId = "stackId"
        }
    }

    public struct ToolchainSource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "s3", required: true, type: .structure)
        ]
        /// The Amazon S3 bucket where the toolchain template file provided with the project request is stored.
        public let s3: S3Location

        public init(s3: S3Location) {
            self.s3 = s3
        }

        private enum CodingKeys: String, CodingKey {
            case s3 = "s3"
        }
    }

    public struct ProjectSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "projectArn", required: false, type: .string), 
            AWSShapeMember(label: "projectId", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the project.
        public let projectArn: String?
        /// The ID of the project.
        public let projectId: String?

        public init(projectArn: String? = nil, projectId: String? = nil) {
            self.projectArn = projectArn
            self.projectId = projectId
        }

        private enum CodingKeys: String, CodingKey {
            case projectArn = "projectArn"
            case projectId = "projectId"
        }
    }

    public struct CreateUserProfileResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "createdTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "userArn", required: true, type: .string), 
            AWSShapeMember(label: "lastModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "emailAddress", required: false, type: .string), 
            AWSShapeMember(label: "displayName", required: false, type: .string), 
            AWSShapeMember(label: "sshPublicKey", required: false, type: .string)
        ]
        /// The date the user profile was created, in timestamp format.
        public let createdTimestamp: TimeStamp?
        /// The Amazon Resource Name (ARN) of the user in IAM.
        public let userArn: String
        /// The date the user profile was last modified, in timestamp format.
        public let lastModifiedTimestamp: TimeStamp?
        /// The email address that is displayed as part of the user's profile in AWS CodeStar.
        public let emailAddress: String?
        /// The name that is displayed as the friendly name for the user in AWS CodeStar.
        public let displayName: String?
        /// The SSH public key associated with the user in AWS CodeStar. This is the public portion of the public/private keypair the user can use to access project resources if a project owner allows the user remote access to those resources.
        public let sshPublicKey: String?

        public init(createdTimestamp: TimeStamp? = nil, userArn: String, lastModifiedTimestamp: TimeStamp? = nil, emailAddress: String? = nil, displayName: String? = nil, sshPublicKey: String? = nil) {
            self.createdTimestamp = createdTimestamp
            self.userArn = userArn
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.sshPublicKey = sshPublicKey
        }

        private enum CodingKeys: String, CodingKey {
            case createdTimestamp = "createdTimestamp"
            case userArn = "userArn"
            case lastModifiedTimestamp = "lastModifiedTimestamp"
            case emailAddress = "emailAddress"
            case displayName = "displayName"
            case sshPublicKey = "sshPublicKey"
        }
    }

    public struct DescribeUserProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the user.
        public let userArn: String

        public init(userArn: String) {
            self.userArn = userArn
        }

        private enum CodingKeys: String, CodingKey {
            case userArn = "userArn"
        }
    }

    public struct AssociateTeamMemberResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string)
        ]
        /// The user- or system-generated token from the initial request that can be used to repeat the request.
        public let clientRequestToken: String?

        public init(clientRequestToken: String? = nil) {
            self.clientRequestToken = clientRequestToken
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
        }
    }

    public struct DeleteUserProfileResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the user deleted from AWS CodeStar.
        public let userArn: String

        public init(userArn: String) {
            self.userArn = userArn
        }

        private enum CodingKeys: String, CodingKey {
            case userArn = "userArn"
        }
    }

    public struct DeleteProjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: true, type: .string), 
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "deleteStack", required: false, type: .boolean)
        ]
        /// The ID of the project to be deleted in AWS CodeStar.
        public let id: String
        /// A user- or system-generated token that identifies the entity that requested project deletion. This token can be used to repeat the request. 
        public let clientRequestToken: String?
        /// Whether to send a delete request for the primary stack in AWS CloudFormation originally used to generate the project and its resources. This option will delete all AWS resources for the project (except for any buckets in Amazon S3) as well as deleting the project itself. Recommended for most use cases.
        public let deleteStack: Bool?

        public init(id: String, clientRequestToken: String? = nil, deleteStack: Bool? = nil) {
            self.id = id
            self.clientRequestToken = clientRequestToken
            self.deleteStack = deleteStack
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case clientRequestToken = "clientRequestToken"
            case deleteStack = "deleteStack"
        }
    }

    public struct Toolchain: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stackParameters", required: false, type: .map), 
            AWSShapeMember(label: "roleArn", required: false, type: .string), 
            AWSShapeMember(label: "source", required: true, type: .structure)
        ]
        /// The list of parameter overrides to be passed into the toolchain template during stack provisioning, if any.
        public let stackParameters: [String: String]?
        /// The service role ARN for AWS CodeStar to use for the toolchain template during stack provisioning.
        public let roleArn: String?
        /// The Amazon S3 location where the toolchain template file provided with the project request is stored. AWS CodeStar retrieves the file during project creation.
        public let source: ToolchainSource

        public init(stackParameters: [String: String]? = nil, roleArn: String? = nil, source: ToolchainSource) {
            self.stackParameters = stackParameters
            self.roleArn = roleArn
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case stackParameters = "stackParameters"
            case roleArn = "roleArn"
            case source = "source"
        }
    }

    public struct DisassociateTeamMemberResult: AWSShape {

    }

    public struct TeamMember: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "remoteAccessAllowed", required: false, type: .boolean), 
            AWSShapeMember(label: "userArn", required: true, type: .string), 
            AWSShapeMember(label: "projectRole", required: true, type: .string)
        ]
        /// Whether the user is allowed to remotely access project resources using an SSH public/private key pair.
        public let remoteAccessAllowed: Bool?
        /// The Amazon Resource Name (ARN) of the user in IAM.
        public let userArn: String
        /// The role assigned to the user in the project. Project roles have different levels of access. For more information, see Working with Teams in the AWS CodeStar User Guide. 
        public let projectRole: String

        public init(remoteAccessAllowed: Bool? = nil, userArn: String, projectRole: String) {
            self.remoteAccessAllowed = remoteAccessAllowed
            self.userArn = userArn
            self.projectRole = projectRole
        }

        private enum CodingKeys: String, CodingKey {
            case remoteAccessAllowed = "remoteAccessAllowed"
            case userArn = "userArn"
            case projectRole = "projectRole"
        }
    }

    public struct UpdateProjectResult: AWSShape {

    }

    public struct UpdateTeamMemberResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "remoteAccessAllowed", required: false, type: .boolean), 
            AWSShapeMember(label: "userArn", required: false, type: .string), 
            AWSShapeMember(label: "projectRole", required: false, type: .string)
        ]
        /// Whether a team member is allowed to remotely access project resources using the SSH public key associated with the user's profile.
        public let remoteAccessAllowed: Bool?
        /// The Amazon Resource Name (ARN) of the user whose team membership attributes were updated.
        public let userArn: String?
        /// The project role granted to the user.
        public let projectRole: String?

        public init(remoteAccessAllowed: Bool? = nil, userArn: String? = nil, projectRole: String? = nil) {
            self.remoteAccessAllowed = remoteAccessAllowed
            self.userArn = userArn
            self.projectRole = projectRole
        }

        private enum CodingKeys: String, CodingKey {
            case remoteAccessAllowed = "remoteAccessAllowed"
            case userArn = "userArn"
            case projectRole = "projectRole"
        }
    }

    public struct CreateProjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: true, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .map), 
            AWSShapeMember(label: "sourceCode", required: false, type: .list), 
            AWSShapeMember(label: "toolchain", required: false, type: .structure), 
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// The ID of the project to be created in AWS CodeStar.
        public let id: String
        /// The display name for the project to be created in AWS CodeStar.
        public let name: String
        /// A user- or system-generated token that identifies the entity that requested project creation. This token can be used to repeat the request.
        public let clientRequestToken: String?
        /// The tags created for the project.
        public let tags: [String: String]?
        /// A list of the Code objects submitted with the project request. If this parameter is specified, the request must also include the toolchain parameter.
        public let sourceCode: [Code]?
        /// The name of the toolchain template file submitted with the project request. If this parameter is specified, the request must also include the sourceCode parameter.
        public let toolchain: Toolchain?
        /// The description of the project, if any.
        public let description: String?

        public init(id: String, name: String, clientRequestToken: String? = nil, tags: [String: String]? = nil, sourceCode: [Code]? = nil, toolchain: Toolchain? = nil, description: String? = nil) {
            self.id = id
            self.name = name
            self.clientRequestToken = clientRequestToken
            self.tags = tags
            self.sourceCode = sourceCode
            self.toolchain = toolchain
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case name = "name"
            case clientRequestToken = "clientRequestToken"
            case tags = "tags"
            case sourceCode = "sourceCode"
            case toolchain = "toolchain"
            case description = "description"
        }
    }

    public struct ListProjectsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The maximum amount of data that can be contained in a single set of results.
        public let maxResults: Int32?
        /// The continuation token to be used to return the next set of results, if the results cannot be returned in one response.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct ListUserProfilesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The maximum number of results to return in a response.
        public let maxResults: Int32?
        /// The continuation token for the next set of results, if the results cannot be returned in one response.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct UpdateUserProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userArn", required: true, type: .string), 
            AWSShapeMember(label: "emailAddress", required: false, type: .string), 
            AWSShapeMember(label: "displayName", required: false, type: .string), 
            AWSShapeMember(label: "sshPublicKey", required: false, type: .string)
        ]
        /// The name that will be displayed as the friendly name for the user in AWS CodeStar.
        public let userArn: String
        /// The email address that is displayed as part of the user's profile in AWS CodeStar.
        public let emailAddress: String?
        /// The name that is displayed as the friendly name for the user in AWS CodeStar.
        public let displayName: String?
        /// The SSH public key associated with the user in AWS CodeStar. If a project owner allows the user remote access to project resources, this public key will be used along with the user's private key for SSH access.
        public let sshPublicKey: String?

        public init(userArn: String, emailAddress: String? = nil, displayName: String? = nil, sshPublicKey: String? = nil) {
            self.userArn = userArn
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.sshPublicKey = sshPublicKey
        }

        private enum CodingKeys: String, CodingKey {
            case userArn = "userArn"
            case emailAddress = "emailAddress"
            case displayName = "displayName"
            case sshPublicKey = "sshPublicKey"
        }
    }

    public struct AssociateTeamMemberRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userArn", required: true, type: .string), 
            AWSShapeMember(label: "projectRole", required: true, type: .string), 
            AWSShapeMember(label: "projectId", required: true, type: .string), 
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "remoteAccessAllowed", required: false, type: .boolean)
        ]
        /// The Amazon Resource Name (ARN) for the IAM user you want to add to the AWS CodeStar project.
        public let userArn: String
        /// The AWS CodeStar project role that will apply to this user. This role determines what actions a user can take in an AWS CodeStar project.
        public let projectRole: String
        /// The ID of the project to which you will add the IAM user.
        public let projectId: String
        /// A user- or system-generated token that identifies the entity that requested the team member association to the project. This token can be used to repeat the request.
        public let clientRequestToken: String?
        /// Whether the team member is allowed to use an SSH public/private key pair to remotely access project resources, for example Amazon EC2 instances.
        public let remoteAccessAllowed: Bool?

        public init(userArn: String, projectRole: String, projectId: String, clientRequestToken: String? = nil, remoteAccessAllowed: Bool? = nil) {
            self.userArn = userArn
            self.projectRole = projectRole
            self.projectId = projectId
            self.clientRequestToken = clientRequestToken
            self.remoteAccessAllowed = remoteAccessAllowed
        }

        private enum CodingKeys: String, CodingKey {
            case userArn = "userArn"
            case projectRole = "projectRole"
            case projectId = "projectId"
            case clientRequestToken = "clientRequestToken"
            case remoteAccessAllowed = "remoteAccessAllowed"
        }
    }

    public struct UpdateProjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: true, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string)
        ]
        /// The ID of the project you want to update.
        public let id: String
        /// The description of the project, if any.
        public let description: String?
        /// The name of the project you want to update.
        public let name: String?

        public init(id: String, description: String? = nil, name: String? = nil) {
            self.id = id
            self.description = description
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case description = "description"
            case name = "name"
        }
    }

    public struct CodeDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "codeCommit", required: false, type: .structure), 
            AWSShapeMember(label: "gitHub", required: false, type: .structure)
        ]
        /// Information about the AWS CodeCommit repository to be created in AWS CodeStar. This is where the source code files provided with the project request will be uploaded after project creation.
        public let codeCommit: CodeCommitCodeDestination?
        /// Information about the GitHub repository to be created in AWS CodeStar. This is where the source code files provided with the project request will be uploaded after project creation.
        public let gitHub: GitHubCodeDestination?

        public init(codeCommit: CodeCommitCodeDestination? = nil, gitHub: GitHubCodeDestination? = nil) {
            self.codeCommit = codeCommit
            self.gitHub = gitHub
        }

        private enum CodingKeys: String, CodingKey {
            case codeCommit = "codeCommit"
            case gitHub = "gitHub"
        }
    }

    public struct Resource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the resource.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
        }
    }

    public struct UntagProjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .list)
        ]
        /// The ID of the project to remove tags from.
        public let id: String
        /// The tags to remove from the project.
        public let tags: [String]

        public init(id: String, tags: [String]) {
            self.id = id
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case tags = "tags"
        }
    }

    public struct ListUserProfilesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userProfiles", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// All the user profiles configured in AWS CodeStar for an AWS account.
        public let userProfiles: [UserProfileSummary]
        /// The continuation token to use when requesting the next set of results, if there are more results to be returned.
        public let nextToken: String?

        public init(userProfiles: [UserProfileSummary], nextToken: String? = nil) {
            self.userProfiles = userProfiles
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case userProfiles = "userProfiles"
            case nextToken = "nextToken"
        }
    }

    public struct CreateProjectResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: true, type: .string), 
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: true, type: .string), 
            AWSShapeMember(label: "projectTemplateId", required: false, type: .string)
        ]
        /// The ID of the project.
        public let id: String
        /// A user- or system-generated token that identifies the entity that requested project creation.
        public let clientRequestToken: String?
        /// The Amazon Resource Name (ARN) of the created project.
        public let arn: String
        /// Reserved for future use.
        public let projectTemplateId: String?

        public init(id: String, clientRequestToken: String? = nil, arn: String, projectTemplateId: String? = nil) {
            self.id = id
            self.clientRequestToken = clientRequestToken
            self.arn = arn
            self.projectTemplateId = projectTemplateId
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case clientRequestToken = "clientRequestToken"
            case arn = "arn"
            case projectTemplateId = "projectTemplateId"
        }
    }

    public struct ListTeamMembersResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "teamMembers", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of team member objects for the project.
        public let teamMembers: [TeamMember]
        /// The continuation token to use when requesting the next set of results, if there are more results to be returned.
        public let nextToken: String?

        public init(teamMembers: [TeamMember], nextToken: String? = nil) {
            self.teamMembers = teamMembers
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case teamMembers = "teamMembers"
            case nextToken = "nextToken"
        }
    }

    public struct ListProjectsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "projects", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of projects.
        public let projects: [ProjectSummary]
        /// The continuation token to use when requesting the next set of results, if there are more results to be returned.
        public let nextToken: String?

        public init(projects: [ProjectSummary], nextToken: String? = nil) {
            self.projects = projects
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case projects = "projects"
            case nextToken = "nextToken"
        }
    }

    public struct CodeCommitCodeDestination: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: true, type: .string)
        ]
        /// The name of the AWS CodeCommit repository to be created in AWS CodeStar.
        public let name: String

        public init(name: String) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
        }
    }

    public struct DisassociateTeamMemberRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userArn", required: true, type: .string), 
            AWSShapeMember(label: "projectId", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the IAM user or group whom you want to remove from the project.
        public let userArn: String
        /// The ID of the AWS CodeStar project from which you want to remove a team member.
        public let projectId: String

        public init(userArn: String, projectId: String) {
            self.userArn = userArn
            self.projectId = projectId
        }

        private enum CodingKeys: String, CodingKey {
            case userArn = "userArn"
            case projectId = "projectId"
        }
    }

}