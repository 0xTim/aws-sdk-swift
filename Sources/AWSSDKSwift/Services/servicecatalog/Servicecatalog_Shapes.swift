// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Servicecatalog {

    public struct DeletePortfolioShareInput: Serializable, Initializable {
        /// The account ID associated with the share to delete.
        var accountId: String = ""
        /// The portfolio identifier.
        var portfolioId: String = ""
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil

        public init() {}

        public init(accountId: String, portfolioId: String, acceptLanguage: String? = nil) {
            self.accountId = accountId
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

    }

    public struct DisassociatePrincipalFromPortfolioInput: Serializable, Initializable {
        /// The ARN representing the principal (IAM user, role, or group).
        var principalARN: String = ""
        /// The portfolio identifier.
        var portfolioId: String = ""
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil

        public init() {}

        public init(principalARN: String, portfolioId: String, acceptLanguage: String? = nil) {
            self.principalARN = principalARN
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

    }

    public struct DeletePortfolioInput: Serializable, Initializable {
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The identifier of the portfolio for the delete request.
        var id: String = ""

        public init() {}

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

    }

    public struct DescribeProvisioningParametersOutput: Serializable, Initializable {
        /// Any additional metadata specifically related to the provisioning of the product. For example, see the Version field of the CloudFormation template.
        var usageInstructions: [UsageInstruction]? = nil
        /// The list of parameters used to successfully provision the product. Each parameter includes a list of allowable values and additional metadata about each parameter.
        var provisioningArtifactParameters: [ProvisioningArtifactParameter]? = nil
        /// The list of constraint summaries that apply to provisioning this product.
        var constraintSummaries: [ConstraintSummary]? = nil

        public init() {}

        public init(usageInstructions: [UsageInstruction]? = nil, provisioningArtifactParameters: [ProvisioningArtifactParameter]? = nil, constraintSummaries: [ConstraintSummary]? = nil) {
            self.usageInstructions = usageInstructions
            self.provisioningArtifactParameters = provisioningArtifactParameters
            self.constraintSummaries = constraintSummaries
        }

    }

    public struct ProvisioningArtifactProperties: Serializable, Initializable {
        /// The text description of the provisioning artifact properties.
        var description: String? = nil
        /// The type of the provisioning artifact properties.
        var type: String? = nil
        /// The name assigned to the provisioning artifact properties.
        var name: String? = nil
        /// Additional information about the provisioning artifact properties.
        var info: [String: String] = [:]

        public init() {}

        public init(description: String? = nil, type: String? = nil, name: String? = nil, info: [String: String]) {
            self.description = description
            self.type = type
            self.name = name
            self.info = info
        }

    }

    public struct DescribeProductAsAdminOutput: Serializable, Initializable {
        /// Tags associated with the product.
        var tags: [Tag]? = nil
        /// Detailed product view information.
        var productViewDetail: ProductViewDetail? = nil

        public init() {}

        public init(tags: [Tag]? = nil, productViewDetail: ProductViewDetail? = nil) {
            self.tags = tags
            self.productViewDetail = productViewDetail
        }

    }

    public struct ListPortfolioAccessOutput: Serializable, Initializable {
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        var nextPageToken: String? = nil
        /// List of account IDs associated with access to the portfolio.
        var accountIds: [String]? = nil

        public init() {}

        public init(nextPageToken: String? = nil, accountIds: [String]? = nil) {
            self.nextPageToken = nextPageToken
            self.accountIds = accountIds
        }

    }

    public struct CreateProductOutput: Serializable, Initializable {
        /// Tags successfully associated with the new product.
        var tags: [Tag]? = nil
        /// The resulting detailed product view information.
        var productViewDetail: ProductViewDetail? = nil
        /// The resulting detailed provisioning artifact information.
        var provisioningArtifactDetail: ProvisioningArtifactDetail? = nil

        public init() {}

        public init(tags: [Tag]? = nil, productViewDetail: ProductViewDetail? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil) {
            self.tags = tags
            self.productViewDetail = productViewDetail
            self.provisioningArtifactDetail = provisioningArtifactDetail
        }

    }

    public struct UsageInstruction: Serializable, Initializable {
        /// The usage instruction type for the value.
        var type: String? = nil
        /// The usage instruction value for this type.
        var value: String? = nil

        public init() {}

        public init(type: String? = nil, value: String? = nil) {
            self.type = type
            self.value = value
        }

    }

    public struct CreatePortfolioShareInput: Serializable, Initializable {
        /// The account ID with which to share the portfolio.
        var accountId: String = ""
        /// The portfolio identifier.
        var portfolioId: String = ""
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil

        public init() {}

        public init(accountId: String, portfolioId: String, acceptLanguage: String? = nil) {
            self.accountId = accountId
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

    }

    public struct DescribeProductViewOutput: Serializable, Initializable {
        /// The summary metadata about the specified product.
        var productViewSummary: ProductViewSummary? = nil
        /// A list of provisioning artifact objects for the specified product. The ProvisioningArtifacts represent the ways in which the specified product can be provisioned.
        var provisioningArtifacts: [ProvisioningArtifact]? = nil

        public init() {}

        public init(productViewSummary: ProductViewSummary? = nil, provisioningArtifacts: [ProvisioningArtifact]? = nil) {
            self.productViewSummary = productViewSummary
            self.provisioningArtifacts = provisioningArtifacts
        }

    }

    public struct ScanProvisionedProductsOutput: Serializable, Initializable {
        /// A list of ProvisionedProduct detail objects.
        var provisionedProducts: [ProvisionedProductDetail]? = nil
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        var nextPageToken: String? = nil

        public init() {}

        public init(provisionedProducts: [ProvisionedProductDetail]? = nil, nextPageToken: String? = nil) {
            self.provisionedProducts = provisionedProducts
            self.nextPageToken = nextPageToken
        }

    }

    public struct DescribeConstraintInput: Serializable, Initializable {
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The identifier of the constraint.
        var id: String = ""

        public init() {}

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

    }

    public struct ConstraintDetail: Serializable, Initializable {
        /// The identifier of the constraint.
        var constraintId: String? = nil
        /// The type of the constraint.
        var type: String? = nil
        /// The owner of the constraint.
        var owner: String? = nil
        /// The text description of the constraint.
        var description: String? = nil

        public init() {}

        public init(constraintId: String? = nil, type: String? = nil, owner: String? = nil, description: String? = nil) {
            self.constraintId = constraintId
            self.type = type
            self.owner = owner
            self.description = description
        }

    }

    public struct Tag: Serializable, Initializable {
        /// The esired value for this key.
        var value: String = ""
        /// The ProvisioningArtifactParameter.TagKey parameter from DescribeProvisioningParameters.
        var key: String = ""

        public init() {}

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

    }

    public struct UpdatePortfolioOutput: Serializable, Initializable {
        /// The resulting detailed portfolio information.
        var portfolioDetail: PortfolioDetail? = nil
        /// Tags associated with the portfolio.
        var tags: [Tag]? = nil

        public init() {}

        public init(portfolioDetail: PortfolioDetail? = nil, tags: [Tag]? = nil) {
            self.portfolioDetail = portfolioDetail
            self.tags = tags
        }

    }

    public struct DescribeProductInput: Serializable, Initializable {
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The ProductId of the product to describe.
        var id: String = ""

        public init() {}

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

    }

    public struct ListRecordHistoryOutput: Serializable, Initializable {
        /// A list of record detail objects, listed in reverse chronological order.
        var recordDetails: [RecordDetail]? = nil
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        var nextPageToken: String? = nil

        public init() {}

        public init(recordDetails: [RecordDetail]? = nil, nextPageToken: String? = nil) {
            self.recordDetails = recordDetails
            self.nextPageToken = nextPageToken
        }

    }

    public struct ScanProvisionedProductsInput: Serializable, Initializable {
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        var pageSize: Int32? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The access level for obtaining results. If left unspecified, User level access is used.
        var accessLevelFilter: AccessLevelFilter? = nil
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        var pageToken: String? = nil

        public init() {}

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, accessLevelFilter: AccessLevelFilter? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.accessLevelFilter = accessLevelFilter
            self.pageToken = pageToken
        }

    }

    public struct CreatePortfolioInput: Serializable, Initializable {
        /// The text description of the portfolio.
        var description: String? = nil
        /// The name of the portfolio provider.
        var providerName: String = ""
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// Tags to associate with the new portfolio.
        var tags: [Tag]? = nil
        /// The name to use for display purposes.
        var displayName: String = ""
        /// A token to disambiguate duplicate requests. You can create multiple resources using the same input in multiple requests, provided that you also specify a different idempotency token for each request.
        var idempotencyToken: String = ""

        public init() {}

        public init(description: String? = nil, providerName: String, acceptLanguage: String? = nil, tags: [Tag]? = nil, displayName: String, idempotencyToken: String) {
            self.description = description
            self.providerName = providerName
            self.acceptLanguage = acceptLanguage
            self.tags = tags
            self.displayName = displayName
            self.idempotencyToken = idempotencyToken
        }

    }

    public struct ListRecordHistorySearchFilter: Serializable, Initializable {
        /// The filter value for Key.
        var value: String? = nil
        /// The filter key.
        var key: String? = nil

        public init() {}

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

    }

    public struct ListPortfoliosInput: Serializable, Initializable {
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        var pageSize: Int32? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        var pageToken: String? = nil

        public init() {}

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.pageToken = pageToken
        }

    }

    public struct AcceptPortfolioShareOutput: Serializable, Initializable {

        public init() {}

    }

    public struct ListLaunchPathsOutput: Serializable, Initializable {
        /// List of launch path information summaries for the specified PageToken.
        var launchPathSummaries: [LaunchPathSummary]? = nil
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        var nextPageToken: String? = nil

        public init() {}

        public init(launchPathSummaries: [LaunchPathSummary]? = nil, nextPageToken: String? = nil) {
            self.launchPathSummaries = launchPathSummaries
            self.nextPageToken = nextPageToken
        }

    }

    public struct ListConstraintsForPortfolioOutput: Serializable, Initializable {
        /// List of detailed constraint information objects.
        var constraintDetails: [ConstraintDetail]? = nil
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        var nextPageToken: String? = nil

        public init() {}

        public init(constraintDetails: [ConstraintDetail]? = nil, nextPageToken: String? = nil) {
            self.constraintDetails = constraintDetails
            self.nextPageToken = nextPageToken
        }

    }

    public struct UpdateProductOutput: Serializable, Initializable {
        /// Tags associated with the product.
        var tags: [Tag]? = nil
        /// The resulting detailed product view information.
        var productViewDetail: ProductViewDetail? = nil

        public init() {}

        public init(tags: [Tag]? = nil, productViewDetail: ProductViewDetail? = nil) {
            self.tags = tags
            self.productViewDetail = productViewDetail
        }

    }

    public struct SearchProductsAsAdminInput: Serializable, Initializable {
        /// The sort field specifier. If no value is specified, results are not sorted.
        var sortBy: String? = nil
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        var pageSize: Int32? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// Access level of the source of the product.
        var productSource: String? = nil
        /// The portfolio identifier.
        var portfolioId: String? = nil
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        var pageToken: String? = nil
        /// The sort order specifier. If no value is specified, results are not sorted.
        var sortOrder: String? = nil
        /// The list of filters with which to limit search results. If no search filters are specified, the output is all the products to which the administrator has access.
        var filters: [String: [String]]? = nil

        public init() {}

        public init(sortBy: String? = nil, pageSize: Int32? = nil, acceptLanguage: String? = nil, productSource: String? = nil, portfolioId: String? = nil, pageToken: String? = nil, sortOrder: String? = nil, filters: [String: [String]]? = nil) {
            self.sortBy = sortBy
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.productSource = productSource
            self.portfolioId = portfolioId
            self.pageToken = pageToken
            self.sortOrder = sortOrder
            self.filters = filters
        }

    }

    public struct ProvisionProductInput: Serializable, Initializable {
        /// The provisioning artifact identifier for this product.
        var provisioningArtifactId: String = ""
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.
        var notificationArns: [String]? = nil
        /// A list of tags to use as provisioning options.
        var tags: [Tag]? = nil
        /// An idempotency token that uniquely identifies the provisioning request. 
        var provisionToken: String = ""
        /// The identifier of the path for this product's provisioning. This value is optional if the product has a default path, and is required if there is more than one path for the specified product.
        var pathId: String? = nil
        /// Parameters specified by the administrator that are required for provisioning the product.
        var provisioningParameters: [ProvisioningParameter]? = nil
        /// The product identifier.
        var productId: String = ""
        /// A user-friendly name to identify the ProvisionedProduct object. This value must be unique for the AWS account and cannot be updated after the product is provisioned.
        var provisionedProductName: String = ""

        public init() {}

        public init(provisioningArtifactId: String, acceptLanguage: String? = nil, notificationArns: [String]? = nil, tags: [Tag]? = nil, provisionToken: String, pathId: String? = nil, provisioningParameters: [ProvisioningParameter]? = nil, productId: String, provisionedProductName: String) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.notificationArns = notificationArns
            self.tags = tags
            self.provisionToken = provisionToken
            self.pathId = pathId
            self.provisioningParameters = provisioningParameters
            self.productId = productId
            self.provisionedProductName = provisionedProductName
        }

    }

    public struct UpdateProvisioningParameter: Serializable, Initializable {
        /// The value to use for updating the product provisioning. Any constraints on this value can be found in the ProvisioningArtifactParameter parameter for Key.
        var value: String? = nil
        /// The ProvisioningArtifactParameter.ParameterKey parameter from DescribeProvisioningParameters.
        var key: String? = nil
        /// If true, uses the currently set value for Key, ignoring UpdateProvisioningParameter.Value.
        var usePreviousValue: Bool? = nil

        public init() {}

        public init(value: String? = nil, key: String? = nil, usePreviousValue: Bool? = nil) {
            self.value = value
            self.key = key
            self.usePreviousValue = usePreviousValue
        }

    }

    public struct CreateConstraintInput: Serializable, Initializable {
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The portfolio identifier.
        var portfolioId: String = ""
        /// The constraint parameters.
        var parameters: String = ""
        /// A token to disambiguate duplicate requests. You can create multiple resources using the same input in multiple requests, provided that you also specify a different idempotency token for each request.
        var idempotencyToken: String = ""
        /// The type of the constraint.
        var type: String = ""
        /// The product identifier.
        var productId: String = ""
        /// The text description of the constraint.
        var description: String? = nil

        public init() {}

        public init(acceptLanguage: String? = nil, portfolioId: String, parameters: String, idempotencyToken: String, type: String, productId: String, description: String? = nil) {
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.parameters = parameters
            self.idempotencyToken = idempotencyToken
            self.type = type
            self.productId = productId
            self.description = description
        }

    }

    public struct LaunchPathSummary: Serializable, Initializable {
        /// List of constraints on the portfolio-product relationship.
        var constraintSummaries: [ConstraintSummary]? = nil
        /// List of tags used by this launch path.
        var tags: [Tag]? = nil
        /// Corresponds to the name of the portfolio to which the user was assigned.
        var name: String? = nil
        /// The unique identifier of the product path.
        var id: String? = nil

        public init() {}

        public init(constraintSummaries: [ConstraintSummary]? = nil, tags: [Tag]? = nil, name: String? = nil, id: String? = nil) {
            self.constraintSummaries = constraintSummaries
            self.tags = tags
            self.name = name
            self.id = id
        }

    }

    public struct AssociatePrincipalWithPortfolioOutput: Serializable, Initializable {

        public init() {}

    }

    public struct UpdateProvisionedProductInput: Serializable, Initializable {
        /// The provisioning artifact identifier for this product.
        var provisioningArtifactId: String? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The idempotency token that uniquely identifies the provisioning update request.
        var updateToken: String = ""
        /// The identifier of the ProvisionedProduct object to update. You must specify either ProvisionedProductName or ProvisionedProductId, but not both.
        var provisionedProductId: String? = nil
        /// The identifier of the path to use in the updated ProvisionedProduct object. This value is optional if the product has a default path, and is required if there is more than one path for the specified product.
        var pathId: String? = nil
        /// A list of ProvisioningParameter objects used to update the ProvisionedProduct object.
        var provisioningParameters: [UpdateProvisioningParameter]? = nil
        /// The identifier of the ProvisionedProduct object.
        var productId: String? = nil
        /// The updated name of the ProvisionedProduct object . You must specify either ProvisionedProductName or ProvisionedProductId, but not both.
        var provisionedProductName: String? = nil

        public init() {}

        public init(provisioningArtifactId: String? = nil, acceptLanguage: String? = nil, updateToken: String, provisionedProductId: String? = nil, pathId: String? = nil, provisioningParameters: [UpdateProvisioningParameter]? = nil, productId: String? = nil, provisionedProductName: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.updateToken = updateToken
            self.provisionedProductId = provisionedProductId
            self.pathId = pathId
            self.provisioningParameters = provisioningParameters
            self.productId = productId
            self.provisionedProductName = provisionedProductName
        }

    }

    public struct CreatePortfolioShareOutput: Serializable, Initializable {

        public init() {}

    }

    public struct DisassociateProductFromPortfolioOutput: Serializable, Initializable {

        public init() {}

    }

    public struct ProvisioningArtifactParameter: Serializable, Initializable {
        /// The parameter type.
        var parameterType: String? = nil
        /// The text description of the parameter.
        var description: String? = nil
        /// The list of constraints that the administrator has put on the parameter.
        var parameterConstraints: ParameterConstraints? = nil
        /// The default value for this parameter.
        var defaultValue: String? = nil
        /// If this value is true, the value for this parameter is obfuscated from view when the parameter is retrieved. This parameter is used to hide sensitive information.
        var isNoEcho: Bool? = nil
        /// The parameter key. 
        var parameterKey: String? = nil

        public init() {}

        public init(parameterType: String? = nil, description: String? = nil, parameterConstraints: ParameterConstraints? = nil, defaultValue: String? = nil, isNoEcho: Bool? = nil, parameterKey: String? = nil) {
            self.parameterType = parameterType
            self.description = description
            self.parameterConstraints = parameterConstraints
            self.defaultValue = defaultValue
            self.isNoEcho = isNoEcho
            self.parameterKey = parameterKey
        }

    }

    public struct ListPrincipalsForPortfolioOutput: Serializable, Initializable {
        /// The IAM principals (users or roles) associated with the portfolio.
        var principals: [Principal]? = nil
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        var nextPageToken: String? = nil

        public init() {}

        public init(principals: [Principal]? = nil, nextPageToken: String? = nil) {
            self.principals = principals
            self.nextPageToken = nextPageToken
        }

    }

    public struct DescribeRecordInput: Serializable, Initializable {
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        var pageSize: Int32? = nil
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        var pageToken: String? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The record identifier of the ProvisionedProduct object for which to retrieve output information. This is the RecordDetail.RecordId obtained from the request operation's response.
        var id: String = ""

        public init() {}

        public init(pageSize: Int32? = nil, pageToken: String? = nil, acceptLanguage: String? = nil, id: String) {
            self.pageSize = pageSize
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

    }

    public struct ListPortfoliosForProductOutput: Serializable, Initializable {
        /// List of detailed portfolio information objects.
        var portfolioDetails: [PortfolioDetail]? = nil
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        var nextPageToken: String? = nil

        public init() {}

        public init(portfolioDetails: [PortfolioDetail]? = nil, nextPageToken: String? = nil) {
            self.portfolioDetails = portfolioDetails
            self.nextPageToken = nextPageToken
        }

    }

    public struct CreateConstraintOutput: Serializable, Initializable {
        /// The resulting detailed constraint information.
        var constraintDetail: ConstraintDetail? = nil
        /// The status of the current request.
        var status: String? = nil
        /// The resulting constraint parameters.
        var constraintParameters: String? = nil

        public init() {}

        public init(constraintDetail: ConstraintDetail? = nil, status: String? = nil, constraintParameters: String? = nil) {
            self.constraintDetail = constraintDetail
            self.status = status
            self.constraintParameters = constraintParameters
        }

    }

    public struct ProductViewDetail: Serializable, Initializable {
        /// Current status of the product.
        var status: String? = nil
        /// The ARN associated with the product.
        var productARN: String? = nil
        /// The summary metadata about the specified product view.
        var productViewSummary: ProductViewSummary? = nil
        /// The UTC timestamp of the creation time.
        var createdTime: Date? = nil

        public init() {}

        public init(status: String? = nil, productARN: String? = nil, productViewSummary: ProductViewSummary? = nil, createdTime: Date? = nil) {
            self.status = status
            self.productARN = productARN
            self.productViewSummary = productViewSummary
            self.createdTime = createdTime
        }

    }

    public struct CreateProvisioningArtifactInput: Serializable, Initializable {
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The parameters to use when creating the new provisioning artifact.
        var parameters: ProvisioningArtifactProperties = ProvisioningArtifactProperties()
        /// The product identifier.
        var productId: String = ""
        /// A token to disambiguate duplicate requests. You can create multiple resources using the same input in multiple requests, provided that you also specify a different idempotency token for each request.
        var idempotencyToken: String = ""

        public init() {}

        public init(acceptLanguage: String? = nil, parameters: ProvisioningArtifactProperties, productId: String, idempotencyToken: String) {
            self.acceptLanguage = acceptLanguage
            self.parameters = parameters
            self.productId = productId
            self.idempotencyToken = idempotencyToken
        }

    }

    public struct DescribeProvisioningArtifactInput: Serializable, Initializable {
        /// The identifier of the provisioning artifact.
        var provisioningArtifactId: String = ""
        /// The product identifier.
        var productId: String = ""
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil

        public init() {}

        public init(provisioningArtifactId: String, productId: String, acceptLanguage: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.productId = productId
            self.acceptLanguage = acceptLanguage
        }

    }

    public struct UpdateConstraintOutput: Serializable, Initializable {
        /// The resulting detailed constraint information.
        var constraintDetail: ConstraintDetail? = nil
        /// The status of the current request.
        var status: String? = nil
        /// The resulting updated constraint parameters.
        var constraintParameters: String? = nil

        public init() {}

        public init(constraintDetail: ConstraintDetail? = nil, status: String? = nil, constraintParameters: String? = nil) {
            self.constraintDetail = constraintDetail
            self.status = status
            self.constraintParameters = constraintParameters
        }

    }

    public struct DescribeRecordOutput: Serializable, Initializable {
        /// Detailed record information for the specified product. 
        var recordDetail: RecordDetail? = nil
        /// A list of outputs for the specified Product object created as the result of a request. For example, a CloudFormation-backed product that creates an S3 bucket would have an output for the S3 bucket URL.
        var recordOutputs: [RecordOutput]? = nil
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        var nextPageToken: String? = nil

        public init() {}

        public init(recordDetail: RecordDetail? = nil, recordOutputs: [RecordOutput]? = nil, nextPageToken: String? = nil) {
            self.recordDetail = recordDetail
            self.recordOutputs = recordOutputs
            self.nextPageToken = nextPageToken
        }

    }

    public struct UpdateProvisionedProductOutput: Serializable, Initializable {
        /// The detailed result of the UpdateProvisionedProduct request, containing the inputs made to that request, the current state of the request, a pointer to the ProvisionedProduct object that the request is modifying, and a list of any errors that the request encountered.
        var recordDetail: RecordDetail? = nil

        public init() {}

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

    }

    public struct ListProvisioningArtifactsOutput: Serializable, Initializable {
        /// List of detailed provisioning artifact information objects.
        var provisioningArtifactDetails: [ProvisioningArtifactDetail]? = nil
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        var nextPageToken: String? = nil

        public init() {}

        public init(provisioningArtifactDetails: [ProvisioningArtifactDetail]? = nil, nextPageToken: String? = nil) {
            self.provisioningArtifactDetails = provisioningArtifactDetails
            self.nextPageToken = nextPageToken
        }

    }

    public struct TerminateProvisionedProductOutput: Serializable, Initializable {
        /// The detailed result of the TerminateProvisionedProduct request, containing the inputs made to that request, the current state of the request, a pointer to the ProvisionedProduct object that the request is modifying, and a list of any errors that the request encountered.
        var recordDetail: RecordDetail? = nil

        public init() {}

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

    }

    public struct ProvisioningParameter: Serializable, Initializable {
        /// The value to use for provisioning. Any constraints on this value can be found in ProvisioningArtifactParameter for Key.
        var value: String? = nil
        /// The ProvisioningArtifactParameter.ParameterKey parameter from DescribeProvisioningParameters.
        var key: String? = nil

        public init() {}

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

    }

    public struct RecordOutput: Serializable, Initializable {
        /// The output value.
        var outputValue: String? = nil
        /// The output key.
        var outputKey: String? = nil
        /// The text description of the output.
        var description: String? = nil

        public init() {}

        public init(outputValue: String? = nil, outputKey: String? = nil, description: String? = nil) {
            self.outputValue = outputValue
            self.outputKey = outputKey
            self.description = description
        }

    }

    public struct ProvisioningArtifact: Serializable, Initializable {
        /// The text description of the artifact.
        var description: String? = nil
        /// The name of the artifact.
        var name: String? = nil
        /// The UTC timestamp of the creation time.
        var createdTime: Date? = nil
        /// The identifier for the artifact.
        var id: String? = nil

        public init() {}

        public init(description: String? = nil, name: String? = nil, createdTime: Date? = nil, id: String? = nil) {
            self.description = description
            self.name = name
            self.createdTime = createdTime
            self.id = id
        }

    }

    public struct AssociateProductWithPortfolioOutput: Serializable, Initializable {

        public init() {}

    }

    public struct ListLaunchPathsInput: Serializable, Initializable {
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        var pageSize: Int32? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The product identifier.. Identifies the product for which to retrieve LaunchPathSummaries information.
        var productId: String = ""
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        var pageToken: String? = nil

        public init() {}

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, productId: String, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.pageToken = pageToken
        }

    }

    public struct DeleteConstraintOutput: Serializable, Initializable {

        public init() {}

    }

    public struct SearchProductsOutput: Serializable, Initializable {
        /// A list of the product view aggregation value objects.
        var productViewAggregations: [String: [ProductViewAggregationValue]]? = nil
        /// A list of the product view summary objects.
        var productViewSummaries: [ProductViewSummary]? = nil
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        var nextPageToken: String? = nil

        public init() {}

        public init(productViewAggregations: [String: [ProductViewAggregationValue]]? = nil, productViewSummaries: [ProductViewSummary]? = nil, nextPageToken: String? = nil) {
            self.productViewAggregations = productViewAggregations
            self.productViewSummaries = productViewSummaries
            self.nextPageToken = nextPageToken
        }

    }

    public struct DisassociatePrincipalFromPortfolioOutput: Serializable, Initializable {

        public init() {}

    }

    public struct DeleteConstraintInput: Serializable, Initializable {
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The identifier of the constraint to delete.
        var id: String = ""

        public init() {}

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

    }

    public struct DescribeProductViewInput: Serializable, Initializable {
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The ProductViewId of the product to describe.
        var id: String = ""

        public init() {}

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

    }

    public struct DeleteProvisioningArtifactInput: Serializable, Initializable {
        /// The identifier of the provisioning artifact for the delete request.
        var provisioningArtifactId: String = ""
        /// The product identifier.
        var productId: String = ""
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil

        public init() {}

        public init(provisioningArtifactId: String, productId: String, acceptLanguage: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.productId = productId
            self.acceptLanguage = acceptLanguage
        }

    }

    public struct ParameterConstraints: Serializable, Initializable {
        /// The values that the administrator has allowed for the parameter.
        var allowedValues: [String]? = nil

        public init() {}

        public init(allowedValues: [String]? = nil) {
            self.allowedValues = allowedValues
        }

    }

    public struct ListPortfoliosForProductInput: Serializable, Initializable {
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        var pageSize: Int32? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The product identifier.
        var productId: String = ""
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        var pageToken: String? = nil

        public init() {}

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, productId: String, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.pageToken = pageToken
        }

    }

    public struct PortfolioDetail: Serializable, Initializable {
        /// The name to use for display purposes.
        var displayName: String? = nil
        /// The name of the portfolio provider.
        var providerName: String? = nil
        /// The ARN assigned to the portfolio.
        var aRN: String? = nil
        /// The text description of the portfolio.
        var description: String? = nil
        /// The UTC timestamp of the creation time.
        var createdTime: Date? = nil
        /// The identifier for the portfolio.
        var id: String? = nil

        public init() {}

        public init(displayName: String? = nil, providerName: String? = nil, aRN: String? = nil, description: String? = nil, createdTime: Date? = nil, id: String? = nil) {
            self.displayName = displayName
            self.providerName = providerName
            self.aRN = aRN
            self.description = description
            self.createdTime = createdTime
            self.id = id
        }

    }

    public struct DescribeProvisioningParametersInput: Serializable, Initializable {
        /// The provisioning artifact identifier for this product.
        var provisioningArtifactId: String = ""
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The product identifier.
        var productId: String = ""
        /// The identifier of the path for this product's provisioning. This value is optional if the product has a default path, and is required if there is more than one path for the specified product.
        var pathId: String? = nil

        public init() {}

        public init(provisioningArtifactId: String, acceptLanguage: String? = nil, productId: String, pathId: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.pathId = pathId
        }

    }

    public struct SearchProductsAsAdminOutput: Serializable, Initializable {
        /// List of detailed product view information objects.
        var productViewDetails: [ProductViewDetail]? = nil
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        var nextPageToken: String? = nil

        public init() {}

        public init(productViewDetails: [ProductViewDetail]? = nil, nextPageToken: String? = nil) {
            self.productViewDetails = productViewDetails
            self.nextPageToken = nextPageToken
        }

    }

    public struct ProductViewAggregationValue: Serializable, Initializable {
        /// The value of the product view aggregation.
        var value: String? = nil
        /// An approximate count of the products that match the value.
        var approximateCount: Int32? = nil

        public init() {}

        public init(value: String? = nil, approximateCount: Int32? = nil) {
            self.value = value
            self.approximateCount = approximateCount
        }

    }

    public struct ListAcceptedPortfolioSharesInput: Serializable, Initializable {
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        var pageSize: Int32? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        var pageToken: String? = nil

        public init() {}

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.pageToken = pageToken
        }

    }

    public struct SearchProductsInput: Serializable, Initializable {
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        var pageSize: Int32? = nil
        /// The sort field specifier. If no value is specified, results are not sorted.
        var sortBy: String? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The list of filters with which to limit search results. If no search filters are specified, the output is all the products to which the calling user has access. 
        var filters: [String: [String]]? = nil
        /// The sort order specifier. If no value is specified, results are not sorted.
        var sortOrder: String? = nil
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        var pageToken: String? = nil

        public init() {}

        public init(pageSize: Int32? = nil, sortBy: String? = nil, acceptLanguage: String? = nil, filters: [String: [String]]? = nil, sortOrder: String? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.sortBy = sortBy
            self.acceptLanguage = acceptLanguage
            self.filters = filters
            self.sortOrder = sortOrder
            self.pageToken = pageToken
        }

    }

    public struct RecordError: Serializable, Initializable {
        /// The numeric value of the error.
        var code: String? = nil
        /// The text description of the error.
        var description: String? = nil

        public init() {}

        public init(code: String? = nil, description: String? = nil) {
            self.code = code
            self.description = description
        }

    }

    public struct UpdateConstraintInput: Serializable, Initializable {
        /// The updated text description of the constraint.
        var description: String? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The identifier of the constraint to update.
        var id: String = ""

        public init() {}

        public init(description: String? = nil, acceptLanguage: String? = nil, id: String) {
            self.description = description
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

    }

    public struct ProvisionedProductDetail: Serializable, Initializable {
        /// The current status of the ProvisionedProduct.
        var status: String? = nil
        /// The ARN associated with the ProvisionedProduct object.
        var arn: String? = nil
        /// The record identifier of the last request performed on this ProvisionedProduct object.
        var lastRecordId: String? = nil
        /// The user-friendly name of the ProvisionedProduct object.
        var name: String? = nil
        /// A token to disambiguate duplicate requests. You can create multiple resources using the same input in multiple requests, provided that you also specify a different idempotency token for each request.
        var idempotencyToken: String? = nil
        /// The type of the ProvisionedProduct object.
        var type: String? = nil
        /// The current status message of the ProvisionedProduct.
        var statusMessage: String? = nil
        /// The UTC timestamp of the creation time.
        var createdTime: Date? = nil
        /// The identifier of the ProvisionedProduct object.
        var id: String? = nil

        public init() {}

        public init(status: String? = nil, arn: String? = nil, lastRecordId: String? = nil, name: String? = nil, idempotencyToken: String? = nil, type: String? = nil, statusMessage: String? = nil, createdTime: Date? = nil, id: String? = nil) {
            self.status = status
            self.arn = arn
            self.lastRecordId = lastRecordId
            self.name = name
            self.idempotencyToken = idempotencyToken
            self.type = type
            self.statusMessage = statusMessage
            self.createdTime = createdTime
            self.id = id
        }

    }

    public struct ProvisionProductOutput: Serializable, Initializable {
        /// The detailed result of the ProvisionProduct request, containing the inputs made to that request, the current state of the request, a pointer to the ProvisionedProduct object of the request, and a list of any errors that the request encountered. 
        var recordDetail: RecordDetail? = nil

        public init() {}

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

    }

    public struct DeleteProductInput: Serializable, Initializable {
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The identifier of the product for the delete request.
        var id: String = ""

        public init() {}

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

    }

    public struct ListProvisioningArtifactsInput: Serializable, Initializable {
        /// The product identifier.
        var productId: String = ""
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil

        public init() {}

        public init(productId: String, acceptLanguage: String? = nil) {
            self.productId = productId
            self.acceptLanguage = acceptLanguage
        }

    }

    public struct ListRecordHistoryInput: Serializable, Initializable {
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        var pageSize: Int32? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The access level for obtaining results. If left unspecified, User level access is used.
        var accessLevelFilter: AccessLevelFilter? = nil
        /// The filter to limit search results. 
        var searchFilter: ListRecordHistorySearchFilter? = nil
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        var pageToken: String? = nil

        public init() {}

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, accessLevelFilter: AccessLevelFilter? = nil, searchFilter: ListRecordHistorySearchFilter? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.accessLevelFilter = accessLevelFilter
            self.searchFilter = searchFilter
            self.pageToken = pageToken
        }

    }

    public struct AssociateProductWithPortfolioInput: Serializable, Initializable {
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The identifier of the source portfolio to use with this association.
        var sourcePortfolioId: String? = nil
        /// The portfolio identifier.
        var portfolioId: String = ""
        /// The product identifier.
        var productId: String = ""

        public init() {}

        public init(acceptLanguage: String? = nil, sourcePortfolioId: String? = nil, portfolioId: String, productId: String) {
            self.acceptLanguage = acceptLanguage
            self.sourcePortfolioId = sourcePortfolioId
            self.portfolioId = portfolioId
            self.productId = productId
        }

    }

    public struct UpdateProductInput: Serializable, Initializable {
        /// The identifier of the product for the update request.
        var id: String = ""
        /// Tags to remove from the existing list of tags associated with the product.
        var removeTags: [String]? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The updated support email for the product.
        var supportEmail: String? = nil
        /// The updated product name.
        var name: String? = nil
        /// The updated distributor of the product.
        var distributor: String? = nil
        /// Tags to add to the existing list of tags associated with the product.
        var addTags: [Tag]? = nil
        /// The updated support URL for the product.
        var supportUrl: String? = nil
        /// The updated owner of the product.
        var owner: String? = nil
        /// The updated support description for the product.
        var supportDescription: String? = nil
        /// The updated text description of the product.
        var description: String? = nil

        public init() {}

        public init(id: String, removeTags: [String]? = nil, acceptLanguage: String? = nil, supportEmail: String? = nil, name: String? = nil, distributor: String? = nil, addTags: [Tag]? = nil, supportUrl: String? = nil, owner: String? = nil, supportDescription: String? = nil, description: String? = nil) {
            self.id = id
            self.removeTags = removeTags
            self.acceptLanguage = acceptLanguage
            self.supportEmail = supportEmail
            self.name = name
            self.distributor = distributor
            self.addTags = addTags
            self.supportUrl = supportUrl
            self.owner = owner
            self.supportDescription = supportDescription
            self.description = description
        }

    }

    public struct TerminateProvisionedProductInput: Serializable, Initializable {
        /// If set to true, AWS Service Catalog stops managing the specified ProvisionedProduct object even if it cannot delete the underlying resources.
        var ignoreErrors: Bool? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// An idempotency token that uniquely identifies the termination request. This token is only valid during the termination process. After the ProvisionedProduct object is terminated, further requests to terminate the same ProvisionedProduct object always return ResourceNotFound regardless of the value of TerminateToken.
        var terminateToken: String = ""
        /// The identifier of the ProvisionedProduct object to terminate. You must specify either ProvisionedProductName or ProvisionedProductId, but not both.
        var provisionedProductId: String? = nil
        /// The name of the ProvisionedProduct object to terminate. You must specify either ProvisionedProductName or ProvisionedProductId, but not both.
        var provisionedProductName: String? = nil

        public init() {}

        public init(ignoreErrors: Bool? = nil, acceptLanguage: String? = nil, terminateToken: String, provisionedProductId: String? = nil, provisionedProductName: String? = nil) {
            self.ignoreErrors = ignoreErrors
            self.acceptLanguage = acceptLanguage
            self.terminateToken = terminateToken
            self.provisionedProductId = provisionedProductId
            self.provisionedProductName = provisionedProductName
        }

    }

    public struct RejectPortfolioShareOutput: Serializable, Initializable {

        public init() {}

    }

    public struct UpdateProvisioningArtifactInput: Serializable, Initializable {
        /// The identifier of the provisioning artifact for the update request.
        var provisioningArtifactId: String = ""
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The product identifier.
        var productId: String = ""
        /// The updated name of the provisioning artifact.
        var name: String? = nil
        /// The updated text description of the provisioning artifact.
        var description: String? = nil

        public init() {}

        public init(provisioningArtifactId: String, acceptLanguage: String? = nil, productId: String, name: String? = nil, description: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.name = name
            self.description = description
        }

    }

    public struct DescribePortfolioOutput: Serializable, Initializable {
        /// Detailed portfolio information.
        var portfolioDetail: PortfolioDetail? = nil
        /// Tags associated with the portfolio.
        var tags: [Tag]? = nil

        public init() {}

        public init(portfolioDetail: PortfolioDetail? = nil, tags: [Tag]? = nil) {
            self.portfolioDetail = portfolioDetail
            self.tags = tags
        }

    }

    public struct CreatePortfolioOutput: Serializable, Initializable {
        /// The resulting detailed portfolio information.
        var portfolioDetail: PortfolioDetail? = nil
        /// Tags successfully associated with the new portfolio.
        var tags: [Tag]? = nil

        public init() {}

        public init(portfolioDetail: PortfolioDetail? = nil, tags: [Tag]? = nil) {
            self.portfolioDetail = portfolioDetail
            self.tags = tags
        }

    }

    public struct AccessLevelFilter: Serializable, Initializable {
        /// Specifies the user to which the access level applies. A value of Self is currently supported.
        var value: String? = nil
        /// Specifies the access level.  Account allows results at the account level.   Role allows results based on the federated role of the specified user.  User allows results limited to the specified user. 
        var key: String? = nil

        public init() {}

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

    }

    public struct ConstraintSummary: Serializable, Initializable {
        /// The type of the constraint. 
        var type: String? = nil
        /// The text description of the constraint.
        var description: String? = nil

        public init() {}

        public init(type: String? = nil, description: String? = nil) {
            self.type = type
            self.description = description
        }

    }

    public struct ProductViewSummary: Serializable, Initializable {
        /// A value of false indicates that the product does not have a default path, while a value of true indicates that it does. If it's false, call ListLaunchPaths to disambiguate between paths. If true, ListLaunchPaths is not required, and the output of the ProductViewSummary operation can be used directly with DescribeProvisioningParameters.
        var hasDefaultPath: Bool? = nil
        /// Short description of the product.
        var shortDescription: String? = nil
        /// The product view identifier.
        var id: String? = nil
        /// The email contact information to obtain support for this Product.
        var supportEmail: String? = nil
        /// The name of the product.
        var name: String? = nil
        /// The distributor of the product. Contact the product administrator for the significance of this value.
        var distributor: String? = nil
        /// The URL information to obtain support for this Product.
        var supportUrl: String? = nil
        /// The owner of the product. Contact the product administrator for the significance of this value.
        var owner: String? = nil
        /// The product identifier.
        var productId: String? = nil
        /// The description of the support for this Product.
        var supportDescription: String? = nil
        /// The product type. Contact the product administrator for the significance of this value.
        var type: String? = nil

        public init() {}

        public init(hasDefaultPath: Bool? = nil, shortDescription: String? = nil, id: String? = nil, supportEmail: String? = nil, name: String? = nil, distributor: String? = nil, supportUrl: String? = nil, owner: String? = nil, productId: String? = nil, supportDescription: String? = nil, type: String? = nil) {
            self.hasDefaultPath = hasDefaultPath
            self.shortDescription = shortDescription
            self.id = id
            self.supportEmail = supportEmail
            self.name = name
            self.distributor = distributor
            self.supportUrl = supportUrl
            self.owner = owner
            self.productId = productId
            self.supportDescription = supportDescription
            self.type = type
        }

    }

    public struct RejectPortfolioShareInput: Serializable, Initializable {
        /// The portfolio identifier.
        var portfolioId: String = ""
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil

        public init() {}

        public init(portfolioId: String, acceptLanguage: String? = nil) {
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

    }

    public struct UpdateProvisioningArtifactOutput: Serializable, Initializable {
        /// The status of the current request.
        var status: String? = nil
        /// The resulting detailed provisioning artifact information.
        var provisioningArtifactDetail: ProvisioningArtifactDetail? = nil
        /// Additional information about the provisioning artifact update request.
        var info: [String: String]? = nil

        public init() {}

        public init(status: String? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, info: [String: String]? = nil) {
            self.status = status
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.info = info
        }

    }

    public struct DescribeConstraintOutput: Serializable, Initializable {
        /// Detailed constraint information.
        var constraintDetail: ConstraintDetail? = nil
        /// The status of the current request.
        var status: String? = nil
        /// The current parameters associated with the specified constraint.
        var constraintParameters: String? = nil

        public init() {}

        public init(constraintDetail: ConstraintDetail? = nil, status: String? = nil, constraintParameters: String? = nil) {
            self.constraintDetail = constraintDetail
            self.status = status
            self.constraintParameters = constraintParameters
        }

    }

    public struct Principal: Serializable, Initializable {
        /// The ARN representing the principal (IAM user, role, or group).
        var principalARN: String? = nil
        /// The principal type. Must be IAM 
        var principalType: String? = nil

        public init() {}

        public init(principalARN: String? = nil, principalType: String? = nil) {
            self.principalARN = principalARN
            self.principalType = principalType
        }

    }

    public struct ProvisioningArtifactDetail: Serializable, Initializable {
        /// The text description of the provisioning artifact.
        var description: String? = nil
        /// The type of the provisioning artifact.
        var type: String? = nil
        /// The name assigned to the provisioning artifact.
        var name: String? = nil
        /// The UTC timestamp of the creation time.
        var createdTime: Date? = nil
        /// The identifier of the provisioning artifact.
        var id: String? = nil

        public init() {}

        public init(description: String? = nil, type: String? = nil, name: String? = nil, createdTime: Date? = nil, id: String? = nil) {
            self.description = description
            self.type = type
            self.name = name
            self.createdTime = createdTime
            self.id = id
        }

    }

    public struct ListConstraintsForPortfolioInput: Serializable, Initializable {
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        var pageSize: Int32? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The portfolio identifier.
        var portfolioId: String = ""
        /// The product identifier.
        var productId: String? = nil
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        var pageToken: String? = nil

        public init() {}

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, portfolioId: String, productId: String? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.productId = productId
            self.pageToken = pageToken
        }

    }

    public struct DisassociateProductFromPortfolioInput: Serializable, Initializable {
        /// The portfolio identifier.
        var portfolioId: String = ""
        /// The product identifier.
        var productId: String = ""
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil

        public init() {}

        public init(portfolioId: String, productId: String, acceptLanguage: String? = nil) {
            self.portfolioId = portfolioId
            self.productId = productId
            self.acceptLanguage = acceptLanguage
        }

    }

    public struct ListPortfoliosOutput: Serializable, Initializable {
        /// List of detailed portfolio information objects.
        var portfolioDetails: [PortfolioDetail]? = nil
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        var nextPageToken: String? = nil

        public init() {}

        public init(portfolioDetails: [PortfolioDetail]? = nil, nextPageToken: String? = nil) {
            self.portfolioDetails = portfolioDetails
            self.nextPageToken = nextPageToken
        }

    }

    public struct DeleteProductOutput: Serializable, Initializable {

        public init() {}

    }

    public struct ListPrincipalsForPortfolioInput: Serializable, Initializable {
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        var pageSize: Int32? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The portfolio identifier.
        var portfolioId: String = ""
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        var pageToken: String? = nil

        public init() {}

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, portfolioId: String, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.pageToken = pageToken
        }

    }

    public struct DeleteProvisioningArtifactOutput: Serializable, Initializable {

        public init() {}

    }

    public struct DeletePortfolioShareOutput: Serializable, Initializable {

        public init() {}

    }

    public struct DescribeProductOutput: Serializable, Initializable {
        /// The summary metadata about the specified product.
        var productViewSummary: ProductViewSummary? = nil
        /// A list of provisioning artifact objects for the specified product. The ProvisioningArtifacts parameter represent the ways the specified product can be provisioned.
        var provisioningArtifacts: [ProvisioningArtifact]? = nil

        public init() {}

        public init(productViewSummary: ProductViewSummary? = nil, provisioningArtifacts: [ProvisioningArtifact]? = nil) {
            self.productViewSummary = productViewSummary
            self.provisioningArtifacts = provisioningArtifacts
        }

    }

    public struct RecordDetail: Serializable, Initializable {
        /// The provisioning artifact identifier for this product.
        var provisioningArtifactId: String? = nil
        /// The time when the record for the ProvisionedProduct object was last updated.
        var updatedTime: Date? = nil
        /// The user-friendly name of the ProvisionedProduct object.
        var provisionedProductName: String? = nil
        /// The identifier of the path for this product's provisioning.
        var pathId: String? = nil
        /// The product identifier.
        var productId: String? = nil
        /// The UTC timestamp of the creation time.
        var createdTime: Date? = nil
        /// A list of errors that occurred while processing the request.
        var recordErrors: [RecordError]? = nil
        /// The status of the ProvisionedProduct object.
        var status: String? = nil
        /// The identifier of the ProvisionedProduct object.
        var provisionedProductId: String? = nil
        /// The record type for this record.
        var recordType: String? = nil
        /// The identifier of the ProvisionedProduct object record.
        var recordId: String? = nil
        /// The type of the ProvisionedProduct object.
        var provisionedProductType: String? = nil
        /// List of tags associated with this record.
        var recordTags: [RecordTag]? = nil

        public init() {}

        public init(provisioningArtifactId: String? = nil, updatedTime: Date? = nil, provisionedProductName: String? = nil, pathId: String? = nil, productId: String? = nil, createdTime: Date? = nil, recordErrors: [RecordError]? = nil, status: String? = nil, provisionedProductId: String? = nil, recordType: String? = nil, recordId: String? = nil, provisionedProductType: String? = nil, recordTags: [RecordTag]? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.updatedTime = updatedTime
            self.provisionedProductName = provisionedProductName
            self.pathId = pathId
            self.productId = productId
            self.createdTime = createdTime
            self.recordErrors = recordErrors
            self.status = status
            self.provisionedProductId = provisionedProductId
            self.recordType = recordType
            self.recordId = recordId
            self.provisionedProductType = provisionedProductType
            self.recordTags = recordTags
        }

    }

    public struct DescribeProvisioningArtifactOutput: Serializable, Initializable {
        /// The status of the current request.
        var status: String? = nil
        /// Detailed provisioning artifact information.
        var provisioningArtifactDetail: ProvisioningArtifactDetail? = nil
        /// Additional information about the provisioning artifact.
        var info: [String: String]? = nil

        public init() {}

        public init(status: String? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, info: [String: String]? = nil) {
            self.status = status
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.info = info
        }

    }

    public struct AcceptPortfolioShareInput: Serializable, Initializable {
        /// The portfolio identifier.
        var portfolioId: String = ""
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil

        public init() {}

        public init(portfolioId: String, acceptLanguage: String? = nil) {
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

    }

    public struct RecordTag: Serializable, Initializable {
        /// The value for this tag.
        var value: String? = nil
        /// The key for this tag.
        var key: String? = nil

        public init() {}

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

    }

    public struct ListAcceptedPortfolioSharesOutput: Serializable, Initializable {
        /// List of detailed portfolio information objects.
        var portfolioDetails: [PortfolioDetail]? = nil
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        var nextPageToken: String? = nil

        public init() {}

        public init(portfolioDetails: [PortfolioDetail]? = nil, nextPageToken: String? = nil) {
            self.portfolioDetails = portfolioDetails
            self.nextPageToken = nextPageToken
        }

    }

    public struct UpdatePortfolioInput: Serializable, Initializable {
        /// The identifier of the portfolio for the update request.
        var id: String = ""
        /// Tags to remove from the existing list of tags associated with the portfolio.
        var removeTags: [String]? = nil
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The name to use for display purposes.
        var displayName: String? = nil
        /// Tags to add to the existing list of tags associated with the portfolio.
        var addTags: [Tag]? = nil
        /// The updated name of the portfolio provider.
        var providerName: String? = nil
        /// The updated text description of the portfolio.
        var description: String? = nil

        public init() {}

        public init(id: String, removeTags: [String]? = nil, acceptLanguage: String? = nil, displayName: String? = nil, addTags: [Tag]? = nil, providerName: String? = nil, description: String? = nil) {
            self.id = id
            self.removeTags = removeTags
            self.acceptLanguage = acceptLanguage
            self.displayName = displayName
            self.addTags = addTags
            self.providerName = providerName
            self.description = description
        }

    }

    public struct DeletePortfolioOutput: Serializable, Initializable {

        public init() {}

    }

    public struct AssociatePrincipalWithPortfolioInput: Serializable, Initializable {
        /// The ARN representing the principal (IAM user, role, or group).
        var principalARN: String = ""
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The principal type. Must be IAM 
        var principalType: String = ""
        /// The portfolio identifier.
        var portfolioId: String = ""

        public init() {}

        public init(principalARN: String, acceptLanguage: String? = nil, principalType: String, portfolioId: String) {
            self.principalARN = principalARN
            self.acceptLanguage = acceptLanguage
            self.principalType = principalType
            self.portfolioId = portfolioId
        }

    }

    public struct DescribeProductAsAdminInput: Serializable, Initializable {
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The identifier of the product for which to retrieve information.
        var id: String = ""

        public init() {}

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

    }

    public struct DescribePortfolioInput: Serializable, Initializable {
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// The identifier of the portfolio for which to retrieve information.
        var id: String = ""

        public init() {}

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

    }

    public struct CreateProductInput: Serializable, Initializable {
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil
        /// Contact email for product support.
        var supportEmail: String? = nil
        /// The name of the product.
        var name: String = ""
        /// The distributor of the product.
        var distributor: String? = nil
        /// The type of the product to create.
        var productType: String = ""
        /// A token to disambiguate duplicate requests. You can create multiple resources using the same input in multiple requests, provided that you also specify a different idempotency token for each request.
        var idempotencyToken: String = ""
        /// Tags to associate with the new product.
        var tags: [Tag]? = nil
        /// Parameters for the provisioning artifact.
        var provisioningArtifactParameters: ProvisioningArtifactProperties = ProvisioningArtifactProperties()
        /// Contact URL for product support.
        var supportUrl: String? = nil
        /// The owner of the product.
        var owner: String = ""
        /// Support information about the product.
        var supportDescription: String? = nil
        /// The text description of the product.
        var description: String? = nil

        public init() {}

        public init(acceptLanguage: String? = nil, supportEmail: String? = nil, name: String, distributor: String? = nil, productType: String, idempotencyToken: String, tags: [Tag]? = nil, provisioningArtifactParameters: ProvisioningArtifactProperties, supportUrl: String? = nil, owner: String, supportDescription: String? = nil, description: String? = nil) {
            self.acceptLanguage = acceptLanguage
            self.supportEmail = supportEmail
            self.name = name
            self.distributor = distributor
            self.productType = productType
            self.idempotencyToken = idempotencyToken
            self.tags = tags
            self.provisioningArtifactParameters = provisioningArtifactParameters
            self.supportUrl = supportUrl
            self.owner = owner
            self.supportDescription = supportDescription
            self.description = description
        }

    }

    public struct CreateProvisioningArtifactOutput: Serializable, Initializable {
        /// The status of the current request.
        var status: String? = nil
        /// The resulting detailed provisioning artifact information.
        var provisioningArtifactDetail: ProvisioningArtifactDetail? = nil
        /// Additional information about the provisioning artifact create request.
        var info: [String: String]? = nil

        public init() {}

        public init(status: String? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, info: [String: String]? = nil) {
            self.status = status
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.info = info
        }

    }

    public struct ListPortfolioAccessInput: Serializable, Initializable {
        /// The portfolio identifier.
        var portfolioId: String = ""
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        var acceptLanguage: String? = nil

        public init() {}

        public init(portfolioId: String, acceptLanguage: String? = nil) {
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

    }

}