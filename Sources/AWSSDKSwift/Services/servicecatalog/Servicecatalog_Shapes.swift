// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Servicecatalog {

    public struct CreateTagOptionInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The TagOption value.
        public let value: String
        /// The TagOption key.
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct DeletePortfolioShareInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The account ID associated with the share to delete.
        public let accountId: String
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(accountId: String, portfolioId: String, acceptLanguage: String? = nil) {
            self.accountId = accountId
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case portfolioId = "PortfolioId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct DisassociatePrincipalFromPortfolioInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrincipalARN", required: true, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The ARN representing the principal (IAM user, role, or group).
        public let principalARN: String
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(principalARN: String, portfolioId: String, acceptLanguage: String? = nil) {
            self.principalARN = principalARN
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case principalARN = "PrincipalARN"
            case portfolioId = "PortfolioId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public enum ProductViewFilterBy: String, CustomStringConvertible, Codable {
        case fulltextsearch = "FullTextSearch"
        case owner = "Owner"
        case producttype = "ProductType"
        case sourceproductid = "SourceProductId"
        public var description: String { return self.rawValue }
    }

    public struct DeletePortfolioInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The identifier of the portfolio for the delete request.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct DescribeProvisioningParametersOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptions", required: false, type: .list), 
            AWSShapeMember(label: "ConstraintSummaries", required: false, type: .list), 
            AWSShapeMember(label: "UsageInstructions", required: false, type: .list), 
            AWSShapeMember(label: "ProvisioningArtifactParameters", required: false, type: .list)
        ]
        /// List of TagOptions associated with the provisioned provisioning parameters.
        public let tagOptions: [TagOptionSummary]?
        /// The list of constraint summaries that apply to provisioning this product.
        public let constraintSummaries: [ConstraintSummary]?
        /// Any additional metadata specifically related to the provisioning of the product. For example, see the Version field of the CloudFormation template.
        public let usageInstructions: [UsageInstruction]?
        /// The list of parameters used to successfully provision the product. Each parameter includes a list of allowable values and additional metadata about each parameter.
        public let provisioningArtifactParameters: [ProvisioningArtifactParameter]?

        public init(tagOptions: [TagOptionSummary]? = nil, constraintSummaries: [ConstraintSummary]? = nil, usageInstructions: [UsageInstruction]? = nil, provisioningArtifactParameters: [ProvisioningArtifactParameter]? = nil) {
            self.tagOptions = tagOptions
            self.constraintSummaries = constraintSummaries
            self.usageInstructions = usageInstructions
            self.provisioningArtifactParameters = provisioningArtifactParameters
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptions = "TagOptions"
            case constraintSummaries = "ConstraintSummaries"
            case usageInstructions = "UsageInstructions"
            case provisioningArtifactParameters = "ProvisioningArtifactParameters"
        }
    }

    public struct DescribeProvisionedProductInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The provisioned product identifier.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct ProvisioningArtifactProperties: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Info", required: true, type: .map)
        ]
        /// The text description of the provisioning artifact properties.
        public let description: String?
        /// The type of the provisioning artifact properties. The following provisioning artifact property types are used by AWS Marketplace products:  MARKETPLACE_AMI - AMI products.  MARKETPLACE_CAR - CAR (Cluster and AWS Resources) products.
        public let `type`: ProvisioningArtifactType?
        /// The name assigned to the provisioning artifact properties.
        public let name: String?
        /// Additional information about the provisioning artifact properties. When using this element in a request, you must specify LoadTemplateFromURL. For more information, see CreateProvisioningArtifact.
        public let info: [String: String]

        public init(description: String? = nil, type: ProvisioningArtifactType? = nil, name: String? = nil, info: [String: String]) {
            self.description = description
            self.`type` = `type`
            self.name = name
            self.info = info
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case `type` = "Type"
            case name = "Name"
            case info = "Info"
        }
    }

    public struct DescribeProductAsAdminOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptions", required: false, type: .list), 
            AWSShapeMember(label: "ProvisioningArtifactSummaries", required: false, type: .list), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ProductViewDetail", required: false, type: .structure)
        ]
        /// List of TagOptions associated with the product.
        public let tagOptions: [TagOptionDetail]?
        /// A list of provisioning artifact summaries for the product.
        public let provisioningArtifactSummaries: [ProvisioningArtifactSummary]?
        /// Tags associated with the product.
        public let tags: [Tag]?
        /// Detailed product view information.
        public let productViewDetail: ProductViewDetail?

        public init(tagOptions: [TagOptionDetail]? = nil, provisioningArtifactSummaries: [ProvisioningArtifactSummary]? = nil, tags: [Tag]? = nil, productViewDetail: ProductViewDetail? = nil) {
            self.tagOptions = tagOptions
            self.provisioningArtifactSummaries = provisioningArtifactSummaries
            self.tags = tags
            self.productViewDetail = productViewDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptions = "TagOptions"
            case provisioningArtifactSummaries = "ProvisioningArtifactSummaries"
            case tags = "Tags"
            case productViewDetail = "ProductViewDetail"
        }
    }

    public struct ListPortfolioAccessOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "AccountIds", required: false, type: .list)
        ]
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?
        /// List of account IDs associated with access to the portfolio.
        public let accountIds: [String]?

        public init(nextPageToken: String? = nil, accountIds: [String]? = nil) {
            self.nextPageToken = nextPageToken
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "NextPageToken"
            case accountIds = "AccountIds"
        }
    }

    public struct ListResourcesForTagOptionInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionId", required: true, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "ResourceType", required: false, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// Identifier of the TagOption.
        public let tagOptionId: String
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// Resource type.
        public let resourceType: String?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(tagOptionId: String, pageSize: Int32? = nil, resourceType: String? = nil, pageToken: String? = nil) {
            self.tagOptionId = tagOptionId
            self.pageSize = pageSize
            self.resourceType = resourceType
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionId = "TagOptionId"
            case pageSize = "PageSize"
            case resourceType = "ResourceType"
            case pageToken = "PageToken"
        }
    }

    public enum PrincipalType: String, CustomStringConvertible, Codable {
        case iam = "IAM"
        public var description: String { return self.rawValue }
    }

    public struct CreateProductOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ProductViewDetail", required: false, type: .structure), 
            AWSShapeMember(label: "ProvisioningArtifactDetail", required: false, type: .structure)
        ]
        /// Tags successfully associated with the new product.
        public let tags: [Tag]?
        /// The resulting detailed product view information.
        public let productViewDetail: ProductViewDetail?
        /// The resulting detailed provisioning artifact information.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?

        public init(tags: [Tag]? = nil, productViewDetail: ProductViewDetail? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil) {
            self.tags = tags
            self.productViewDetail = productViewDetail
            self.provisioningArtifactDetail = provisioningArtifactDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case productViewDetail = "ProductViewDetail"
            case provisioningArtifactDetail = "ProvisioningArtifactDetail"
        }
    }

    public struct UsageInstruction: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The usage instruction type for the value.
        public let `type`: String?
        /// The usage instruction value for this type.
        public let value: String?

        public init(type: String? = nil, value: String? = nil) {
            self.`type` = `type`
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case value = "Value"
        }
    }

    public struct DescribeTagOptionOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionDetail", required: false, type: .structure)
        ]
        /// The resulting detailed TagOption information.
        public let tagOptionDetail: TagOptionDetail?

        public init(tagOptionDetail: TagOptionDetail? = nil) {
            self.tagOptionDetail = tagOptionDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionDetail = "TagOptionDetail"
        }
    }

    public struct CreatePortfolioShareInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The account ID with which to share the portfolio.
        public let accountId: String
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(accountId: String, portfolioId: String, acceptLanguage: String? = nil) {
            self.accountId = accountId
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case portfolioId = "PortfolioId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct DescribeConstraintInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The identifier of the constraint.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct ScanProvisionedProductsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionedProducts", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// A list of ProvisionedProduct detail objects.
        public let provisionedProducts: [ProvisionedProductDetail]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(provisionedProducts: [ProvisionedProductDetail]? = nil, nextPageToken: String? = nil) {
            self.provisionedProducts = provisionedProducts
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case provisionedProducts = "ProvisionedProducts"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct DescribeProductViewOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductViewSummary", required: false, type: .structure), 
            AWSShapeMember(label: "ProvisioningArtifacts", required: false, type: .list)
        ]
        /// The summary metadata about the specified product.
        public let productViewSummary: ProductViewSummary?
        /// A list of provisioning artifact objects for the specified product. The ProvisioningArtifacts represent the ways in which the specified product can be provisioned.
        public let provisioningArtifacts: [ProvisioningArtifact]?

        public init(productViewSummary: ProductViewSummary? = nil, provisioningArtifacts: [ProvisioningArtifact]? = nil) {
            self.productViewSummary = productViewSummary
            self.provisioningArtifacts = provisioningArtifacts
        }

        private enum CodingKeys: String, CodingKey {
            case productViewSummary = "ProductViewSummary"
            case provisioningArtifacts = "ProvisioningArtifacts"
        }
    }

    public struct ConstraintDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintId", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The identifier of the constraint.
        public let constraintId: String?
        /// The type of the constraint.
        public let `type`: String?
        /// The owner of the constraint.
        public let owner: String?
        /// The text description of the constraint.
        public let description: String?

        public init(constraintId: String? = nil, type: String? = nil, owner: String? = nil, description: String? = nil) {
            self.constraintId = constraintId
            self.`type` = `type`
            self.owner = owner
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case constraintId = "ConstraintId"
            case `type` = "Type"
            case owner = "Owner"
            case description = "Description"
        }
    }

    public struct Tag: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The desired value for this key.
        public let value: String
        /// The ProvisioningArtifactParameter.TagKey parameter from DescribeProvisioningParameters.
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct UpdatePortfolioOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// The resulting detailed portfolio information.
        public let portfolioDetail: PortfolioDetail?
        /// Tags associated with the portfolio.
        public let tags: [Tag]?

        public init(portfolioDetail: PortfolioDetail? = nil, tags: [Tag]? = nil) {
            self.portfolioDetail = portfolioDetail
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetail = "PortfolioDetail"
            case tags = "Tags"
        }
    }

    public struct DescribeProductInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The ProductId of the product to describe.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct ListRecordHistoryOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// A list of record detail objects, listed in reverse chronological order.
        public let recordDetails: [RecordDetail]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(recordDetails: [RecordDetail]? = nil, nextPageToken: String? = nil) {
            self.recordDetails = recordDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetails = "RecordDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ScanProvisionedProductsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "AccessLevelFilter", required: false, type: .structure), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The access level for obtaining results. If left unspecified, User level access is used.
        public let accessLevelFilter: AccessLevelFilter?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, accessLevelFilter: AccessLevelFilter? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.accessLevelFilter = accessLevelFilter
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case accessLevelFilter = "AccessLevelFilter"
            case pageToken = "PageToken"
        }
    }

    public struct CreatePortfolioInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ProviderName", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "DisplayName", required: true, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string)
        ]
        /// The text description of the portfolio.
        public let description: String?
        /// The name of the portfolio provider.
        public let providerName: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// Tags to associate with the new portfolio.
        public let tags: [Tag]?
        /// The name to use for display purposes.
        public let displayName: String
        /// A token to disambiguate duplicate requests. You can create multiple resources using the same input in multiple requests, provided that you also specify a different idempotency token for each request.
        public let idempotencyToken: String

        public init(description: String? = nil, providerName: String, acceptLanguage: String? = nil, tags: [Tag]? = nil, displayName: String, idempotencyToken: String) {
            self.description = description
            self.providerName = providerName
            self.acceptLanguage = acceptLanguage
            self.tags = tags
            self.displayName = displayName
            self.idempotencyToken = idempotencyToken
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case providerName = "ProviderName"
            case acceptLanguage = "AcceptLanguage"
            case tags = "Tags"
            case displayName = "DisplayName"
            case idempotencyToken = "IdempotencyToken"
        }
    }

    public struct TagOptionSummary: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// The TagOptionSummary key.
        public let key: String?
        /// The TagOptionSummary value.
        public let values: [String]?

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public struct ListRecordHistorySearchFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The filter value for Key.
        public let value: String?
        /// The filter key.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct ListPortfoliosInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case pageToken = "PageToken"
        }
    }

    public struct AcceptPortfolioShareOutput: AWSShape {
        /// The key for the payload

    }

    public struct ListLaunchPathsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchPathSummaries", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// List of launch path information summaries for the specified PageToken.
        public let launchPathSummaries: [LaunchPathSummary]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(launchPathSummaries: [LaunchPathSummary]? = nil, nextPageToken: String? = nil) {
            self.launchPathSummaries = launchPathSummaries
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case launchPathSummaries = "LaunchPathSummaries"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ListConstraintsForPortfolioOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// List of detailed constraint information objects.
        public let constraintDetails: [ConstraintDetail]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(constraintDetails: [ConstraintDetail]? = nil, nextPageToken: String? = nil) {
            self.constraintDetails = constraintDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case constraintDetails = "ConstraintDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct UpdateProductOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ProductViewDetail", required: false, type: .structure)
        ]
        /// Tags associated with the product.
        public let tags: [Tag]?
        /// The resulting detailed product view information.
        public let productViewDetail: ProductViewDetail?

        public init(tags: [Tag]? = nil, productViewDetail: ProductViewDetail? = nil) {
            self.tags = tags
            self.productViewDetail = productViewDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case productViewDetail = "ProductViewDetail"
        }
    }

    public struct SearchProductsAsAdminInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SortBy", required: false, type: .enum), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProductSource", required: false, type: .enum), 
            AWSShapeMember(label: "PortfolioId", required: false, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "SortOrder", required: false, type: .enum), 
            AWSShapeMember(label: "Filters", required: false, type: .map)
        ]
        /// The sort field specifier. If no value is specified, results are not sorted.
        public let sortBy: ProductViewSortBy?
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// Access level of the source of the product.
        public let productSource: ProductSource?
        /// The portfolio identifier.
        public let portfolioId: String?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?
        /// The sort order specifier. If no value is specified, results are not sorted.
        public let sortOrder: SortOrder?
        /// The list of filters with which to limit search results. If no search filters are specified, the output is all the products to which the administrator has access.
        public let filters: [ProductViewFilterBy: [String]]?

        public init(sortBy: ProductViewSortBy? = nil, pageSize: Int32? = nil, acceptLanguage: String? = nil, productSource: ProductSource? = nil, portfolioId: String? = nil, pageToken: String? = nil, sortOrder: SortOrder? = nil, filters: [ProductViewFilterBy: [String]]? = nil) {
            self.sortBy = sortBy
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.productSource = productSource
            self.portfolioId = portfolioId
            self.pageToken = pageToken
            self.sortOrder = sortOrder
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case sortBy = "SortBy"
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case productSource = "ProductSource"
            case portfolioId = "PortfolioId"
            case pageToken = "PageToken"
            case sortOrder = "SortOrder"
            case filters = "Filters"
        }
    }

    public struct ProvisionProductInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "NotificationArns", required: false, type: .list), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ProvisionToken", required: true, type: .string), 
            AWSShapeMember(label: "PathId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningParameters", required: false, type: .list), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "ProvisionedProductName", required: true, type: .string)
        ]
        /// The provisioning artifact identifier for this product. This is sometimes referred to as the product version.
        public let provisioningArtifactId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.
        public let notificationArns: [String]?
        /// A list of tags to use as provisioning options.
        public let tags: [Tag]?
        /// An idempotency token that uniquely identifies the provisioning request. 
        public let provisionToken: String
        /// The identifier of the path for this product's provisioning. This value is optional if the product has a default path, and is required if there is more than one path for the specified product.
        public let pathId: String?
        /// Parameters specified by the administrator that are required for provisioning the product.
        public let provisioningParameters: [ProvisioningParameter]?
        /// The product identifier.
        public let productId: String
        /// A user-friendly name to identify the ProvisionedProduct object. This value must be unique for the AWS account and cannot be updated after the product is provisioned.
        public let provisionedProductName: String

        public init(provisioningArtifactId: String, acceptLanguage: String? = nil, notificationArns: [String]? = nil, tags: [Tag]? = nil, provisionToken: String, pathId: String? = nil, provisioningParameters: [ProvisioningParameter]? = nil, productId: String, provisionedProductName: String) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.notificationArns = notificationArns
            self.tags = tags
            self.provisionToken = provisionToken
            self.pathId = pathId
            self.provisioningParameters = provisioningParameters
            self.productId = productId
            self.provisionedProductName = provisionedProductName
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case acceptLanguage = "AcceptLanguage"
            case notificationArns = "NotificationArns"
            case tags = "Tags"
            case provisionToken = "ProvisionToken"
            case pathId = "PathId"
            case provisioningParameters = "ProvisioningParameters"
            case productId = "ProductId"
            case provisionedProductName = "ProvisionedProductName"
        }
    }

    public struct UpdateProvisioningParameter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "UsePreviousValue", required: false, type: .boolean)
        ]
        /// The value to use for updating the product provisioning. Any constraints on this value can be found in the ProvisioningArtifactParameter parameter for Key.
        public let value: String?
        /// The ProvisioningArtifactParameter.ParameterKey parameter from DescribeProvisioningParameters.
        public let key: String?
        /// If true, uses the currently set value for Key, ignoring UpdateProvisioningParameter.Value.
        public let usePreviousValue: Bool?

        public init(value: String? = nil, key: String? = nil, usePreviousValue: Bool? = nil) {
            self.value = value
            self.key = key
            self.usePreviousValue = usePreviousValue
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
            case usePreviousValue = "UsePreviousValue"
        }
    }

    public enum ProvisionedProductStatus: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case under_change = "UNDER_CHANGE"
        case tainted = "TAINTED"
        case error = "ERROR"
        public var description: String { return self.rawValue }
    }

    public struct CreateConstraintInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "Parameters", required: true, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "Type", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The constraint parameters. Expected values vary depending on which Type is specified. For examples, see the bottom of this topic. For Type LAUNCH, the RoleArn property is required.  For Type NOTIFICATION, the NotificationArns property is required. For Type TEMPLATE, the Rules property is required.
        public let parameters: String
        /// A token to disambiguate duplicate requests. You can create multiple resources using the same input in multiple requests, provided that you also specify a different idempotency token for each request.
        public let idempotencyToken: String
        /// The type of the constraint. Case-sensitive valid values are: LAUNCH, NOTIFICATION, or TEMPLATE. 
        public let `type`: String
        /// The product identifier.
        public let productId: String
        /// The text description of the constraint.
        public let description: String?

        public init(acceptLanguage: String? = nil, portfolioId: String, parameters: String, idempotencyToken: String, type: String, productId: String, description: String? = nil) {
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.parameters = parameters
            self.idempotencyToken = idempotencyToken
            self.`type` = `type`
            self.productId = productId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case portfolioId = "PortfolioId"
            case parameters = "Parameters"
            case idempotencyToken = "IdempotencyToken"
            case `type` = "Type"
            case productId = "ProductId"
            case description = "Description"
        }
    }

    public enum ProductType: String, CustomStringConvertible, Codable {
        case cloud_formation_template = "CLOUD_FORMATION_TEMPLATE"
        case marketplace = "MARKETPLACE"
        public var description: String { return self.rawValue }
    }

    public struct LaunchPathSummary: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintSummaries", required: false, type: .list), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// List of constraints on the portfolio-product relationship.
        public let constraintSummaries: [ConstraintSummary]?
        /// List of tags used by this launch path.
        public let tags: [Tag]?
        /// Corresponds to the name of the portfolio to which the user was assigned.
        public let name: String?
        /// The unique identifier of the product path.
        public let id: String?

        public init(constraintSummaries: [ConstraintSummary]? = nil, tags: [Tag]? = nil, name: String? = nil, id: String? = nil) {
            self.constraintSummaries = constraintSummaries
            self.tags = tags
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case constraintSummaries = "ConstraintSummaries"
            case tags = "Tags"
            case name = "Name"
            case id = "Id"
        }
    }

    public struct AssociatePrincipalWithPortfolioOutput: AWSShape {
        /// The key for the payload

    }

    public struct UpdateProvisionedProductInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "UpdateToken", required: true, type: .string), 
            AWSShapeMember(label: "ProvisionedProductId", required: false, type: .string), 
            AWSShapeMember(label: "PathId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningParameters", required: false, type: .list), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductName", required: false, type: .string)
        ]
        /// The provisioning artifact identifier for this product. This is sometimes referred to as the product version.
        public let provisioningArtifactId: String?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The idempotency token that uniquely identifies the provisioning update request.
        public let updateToken: String
        /// The identifier of the ProvisionedProduct object to update. Specify either ProvisionedProductName or ProvisionedProductId, but not both.
        public let provisionedProductId: String?
        /// The identifier of the path to use in the updated ProvisionedProduct object. This value is optional if the product has a default path, and is required if there is more than one path for the specified product.
        public let pathId: String?
        /// A list of ProvisioningParameter objects used to update the ProvisionedProduct object.
        public let provisioningParameters: [UpdateProvisioningParameter]?
        /// The identifier of the ProvisionedProduct object.
        public let productId: String?
        /// The updated name of the ProvisionedProduct object. Specify either ProvisionedProductName or ProvisionedProductId, but not both.
        public let provisionedProductName: String?

        public init(provisioningArtifactId: String? = nil, acceptLanguage: String? = nil, updateToken: String, provisionedProductId: String? = nil, pathId: String? = nil, provisioningParameters: [UpdateProvisioningParameter]? = nil, productId: String? = nil, provisionedProductName: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.updateToken = updateToken
            self.provisionedProductId = provisionedProductId
            self.pathId = pathId
            self.provisioningParameters = provisioningParameters
            self.productId = productId
            self.provisionedProductName = provisionedProductName
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case acceptLanguage = "AcceptLanguage"
            case updateToken = "UpdateToken"
            case provisionedProductId = "ProvisionedProductId"
            case pathId = "PathId"
            case provisioningParameters = "ProvisioningParameters"
            case productId = "ProductId"
            case provisionedProductName = "ProvisionedProductName"
        }
    }

    public struct CreatePortfolioShareOutput: AWSShape {
        /// The key for the payload

    }

    public struct DisassociateProductFromPortfolioOutput: AWSShape {
        /// The key for the payload

    }

    public struct ProvisioningArtifactParameter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterType", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ParameterConstraints", required: false, type: .structure), 
            AWSShapeMember(label: "DefaultValue", required: false, type: .string), 
            AWSShapeMember(label: "IsNoEcho", required: false, type: .boolean), 
            AWSShapeMember(label: "ParameterKey", required: false, type: .string)
        ]
        /// The parameter type.
        public let parameterType: String?
        /// The text description of the parameter.
        public let description: String?
        /// The list of constraints that the administrator has put on the parameter.
        public let parameterConstraints: ParameterConstraints?
        /// The default value for this parameter.
        public let defaultValue: String?
        /// If this value is true, the value for this parameter is obfuscated from view when the parameter is retrieved. This parameter is used to hide sensitive information.
        public let isNoEcho: Bool?
        /// The parameter key. 
        public let parameterKey: String?

        public init(parameterType: String? = nil, description: String? = nil, parameterConstraints: ParameterConstraints? = nil, defaultValue: String? = nil, isNoEcho: Bool? = nil, parameterKey: String? = nil) {
            self.parameterType = parameterType
            self.description = description
            self.parameterConstraints = parameterConstraints
            self.defaultValue = defaultValue
            self.isNoEcho = isNoEcho
            self.parameterKey = parameterKey
        }

        private enum CodingKeys: String, CodingKey {
            case parameterType = "ParameterType"
            case description = "Description"
            case parameterConstraints = "ParameterConstraints"
            case defaultValue = "DefaultValue"
            case isNoEcho = "IsNoEcho"
            case parameterKey = "ParameterKey"
        }
    }

    public struct ListPrincipalsForPortfolioOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Principals", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// The IAM principals (users or roles) associated with the portfolio.
        public let principals: [Principal]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(principals: [Principal]? = nil, nextPageToken: String? = nil) {
            self.principals = principals
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case principals = "Principals"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct DescribeRecordInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The record identifier of the ProvisionedProduct object for which to retrieve output information. This is the RecordDetail.RecordId obtained from the request operation's response.
        public let id: String

        public init(pageSize: Int32? = nil, pageToken: String? = nil, acceptLanguage: String? = nil, id: String) {
            self.pageSize = pageSize
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct ListPortfoliosForProductOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// List of detailed portfolio information objects.
        public let portfolioDetails: [PortfolioDetail]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(portfolioDetails: [PortfolioDetail]? = nil, nextPageToken: String? = nil) {
            self.portfolioDetails = portfolioDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetails = "PortfolioDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct CreateConstraintOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ConstraintParameters", required: false, type: .string)
        ]
        /// The resulting detailed constraint information.
        public let constraintDetail: ConstraintDetail?
        /// The status of the current request.
        public let status: Status?
        /// The resulting constraint parameters.
        public let constraintParameters: String?

        public init(constraintDetail: ConstraintDetail? = nil, status: Status? = nil, constraintParameters: String? = nil) {
            self.constraintDetail = constraintDetail
            self.status = status
            self.constraintParameters = constraintParameters
        }

        private enum CodingKeys: String, CodingKey {
            case constraintDetail = "ConstraintDetail"
            case status = "Status"
            case constraintParameters = "ConstraintParameters"
        }
    }

    public struct ProductViewDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ProductARN", required: false, type: .string), 
            AWSShapeMember(label: "ProductViewSummary", required: false, type: .structure), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp)
        ]
        /// Current status of the product.  AVAILABLE - Product is available for use.  CREATING - Creation of product started, not ready for use.  FAILED - Action on product failed.
        public let status: Status?
        /// The ARN associated with the product.
        public let productARN: String?
        /// The summary metadata about the specified product view.
        public let productViewSummary: ProductViewSummary?
        /// The UTC timestamp of the creation time.
        public let createdTime: TimeStamp?

        public init(status: Status? = nil, productARN: String? = nil, productViewSummary: ProductViewSummary? = nil, createdTime: TimeStamp? = nil) {
            self.status = status
            self.productARN = productARN
            self.productViewSummary = productViewSummary
            self.createdTime = createdTime
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case productARN = "ProductARN"
            case productViewSummary = "ProductViewSummary"
            case createdTime = "CreatedTime"
        }
    }

    public struct DescribeProvisioningArtifactInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Verbose", required: false, type: .boolean), 
            AWSShapeMember(label: "ProductId", required: true, type: .string)
        ]
        /// The identifier of the provisioning artifact. This is sometimes referred to as the product version.
        public let provisioningArtifactId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// Enable a verbose level of details for the provisioning artifact.
        public let verbose: Bool?
        /// The product identifier.
        public let productId: String

        public init(provisioningArtifactId: String, acceptLanguage: String? = nil, verbose: Bool? = nil, productId: String) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.verbose = verbose
            self.productId = productId
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case acceptLanguage = "AcceptLanguage"
            case verbose = "Verbose"
            case productId = "ProductId"
        }
    }

    public struct CreateProvisioningArtifactInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Parameters", required: true, type: .structure), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string)
        ]
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The parameters to use when creating the new provisioning artifact.
        public let parameters: ProvisioningArtifactProperties
        /// The product identifier.
        public let productId: String
        /// A token to disambiguate duplicate requests. You can create multiple resources using the same input in multiple requests, provided that you also specify a different idempotency token for each request.
        public let idempotencyToken: String

        public init(acceptLanguage: String? = nil, parameters: ProvisioningArtifactProperties, productId: String, idempotencyToken: String) {
            self.acceptLanguage = acceptLanguage
            self.parameters = parameters
            self.productId = productId
            self.idempotencyToken = idempotencyToken
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case parameters = "Parameters"
            case productId = "ProductId"
            case idempotencyToken = "IdempotencyToken"
        }
    }

    public struct UpdateConstraintOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ConstraintParameters", required: false, type: .string)
        ]
        /// The resulting detailed constraint information.
        public let constraintDetail: ConstraintDetail?
        /// The status of the current request.
        public let status: Status?
        /// The resulting updated constraint parameters.
        public let constraintParameters: String?

        public init(constraintDetail: ConstraintDetail? = nil, status: Status? = nil, constraintParameters: String? = nil) {
            self.constraintDetail = constraintDetail
            self.status = status
            self.constraintParameters = constraintParameters
        }

        private enum CodingKeys: String, CodingKey {
            case constraintDetail = "ConstraintDetail"
            case status = "Status"
            case constraintParameters = "ConstraintParameters"
        }
    }

    public enum ProvisioningArtifactType: String, CustomStringConvertible, Codable {
        case cloud_formation_template = "CLOUD_FORMATION_TEMPLATE"
        case marketplace_ami = "MARKETPLACE_AMI"
        case marketplace_car = "MARKETPLACE_CAR"
        public var description: String { return self.rawValue }
    }

    public struct DescribeRecordOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure), 
            AWSShapeMember(label: "RecordOutputs", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Detailed record information for the specified product. 
        public let recordDetail: RecordDetail?
        /// A list of outputs for the specified Product object created as the result of a request. For example, a CloudFormation-backed product that creates an S3 bucket would have an output for the S3 bucket URL.
        public let recordOutputs: [RecordOutput]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(recordDetail: RecordDetail? = nil, recordOutputs: [RecordOutput]? = nil, nextPageToken: String? = nil) {
            self.recordDetail = recordDetail
            self.recordOutputs = recordOutputs
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetail = "RecordDetail"
            case recordOutputs = "RecordOutputs"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct UpdateProvisionedProductOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure)
        ]
        /// The detailed result of the UpdateProvisionedProduct request, containing the inputs made to that request, the current state of the request, a pointer to the ProvisionedProduct object that the request is modifying, and a list of any errors that the request encountered.
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetail = "RecordDetail"
        }
    }

    public struct ListProvisioningArtifactsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// List of detailed provisioning artifact information objects.
        public let provisioningArtifactDetails: [ProvisioningArtifactDetail]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(provisioningArtifactDetails: [ProvisioningArtifactDetail]? = nil, nextPageToken: String? = nil) {
            self.provisioningArtifactDetails = provisioningArtifactDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactDetails = "ProvisioningArtifactDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct TerminateProvisionedProductOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure)
        ]
        /// The detailed result of the TerminateProvisionedProduct request, containing the inputs made to that request, the current state of the request, a pointer to the ProvisionedProduct object that the request is modifying, and a list of any errors that the request encountered.
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetail = "RecordDetail"
        }
    }

    public struct ProvisioningParameter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The value to use for provisioning. Any constraints on this value can be found in ProvisioningArtifactParameter for Key.
        public let value: String?
        /// The ProvisioningArtifactParameter.ParameterKey parameter from DescribeProvisioningParameters.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct RecordOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputValue", required: false, type: .string), 
            AWSShapeMember(label: "OutputKey", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The output value.
        public let outputValue: String?
        /// The output key.
        public let outputKey: String?
        /// The text description of the output.
        public let description: String?

        public init(outputValue: String? = nil, outputKey: String? = nil, description: String? = nil) {
            self.outputValue = outputValue
            self.outputKey = outputKey
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case outputValue = "OutputValue"
            case outputKey = "OutputKey"
            case description = "Description"
        }
    }

    public struct ProvisioningArtifact: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The text description of the artifact.
        public let description: String?
        /// The name of the artifact.
        public let name: String?
        /// The UTC timestamp of the creation time.
        public let createdTime: TimeStamp?
        /// The identifier for the artifact. This is sometimes referred to as the product version.
        public let id: String?

        public init(description: String? = nil, name: String? = nil, createdTime: TimeStamp? = nil, id: String? = nil) {
            self.description = description
            self.name = name
            self.createdTime = createdTime
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case name = "Name"
            case createdTime = "CreatedTime"
            case id = "Id"
        }
    }

    public struct DescribeProvisionedProductOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionedProductDetail", required: false, type: .structure)
        ]
        /// Detailed provisioned product information.
        public let provisionedProductDetail: ProvisionedProductDetail?

        public init(provisionedProductDetail: ProvisionedProductDetail? = nil) {
            self.provisionedProductDetail = provisionedProductDetail
        }

        private enum CodingKeys: String, CodingKey {
            case provisionedProductDetail = "ProvisionedProductDetail"
        }
    }

    public struct ProvisioningArtifactSummary: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactMetadata", required: false, type: .map), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The provisioning artifact metadata. This data is used with products created by AWS Marketplace.
        public let provisioningArtifactMetadata: [String: String]?
        /// The description of the provisioning artifact.
        public let description: String?
        /// The name of the provisioning artifact.
        public let name: String?
        /// The UTC timestamp of the creation time.
        public let createdTime: TimeStamp?
        /// The identifier of the provisioning artifact.
        public let id: String?

        public init(provisioningArtifactMetadata: [String: String]? = nil, description: String? = nil, name: String? = nil, createdTime: TimeStamp? = nil, id: String? = nil) {
            self.provisioningArtifactMetadata = provisioningArtifactMetadata
            self.description = description
            self.name = name
            self.createdTime = createdTime
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactMetadata = "ProvisioningArtifactMetadata"
            case description = "Description"
            case name = "Name"
            case createdTime = "CreatedTime"
            case id = "Id"
        }
    }

    public struct AssociateProductWithPortfolioOutput: AWSShape {
        /// The key for the payload

    }

    public struct ListLaunchPathsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The product identifier. Identifies the product for which to retrieve LaunchPathSummaries information.
        public let productId: String
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, productId: String, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case productId = "ProductId"
            case pageToken = "PageToken"
        }
    }

    public struct SearchProductsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductViewAggregations", required: false, type: .map), 
            AWSShapeMember(label: "ProductViewSummaries", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// A list of the product view aggregation value objects.
        public let productViewAggregations: [String: [ProductViewAggregationValue]]?
        /// A list of the product view summary objects.
        public let productViewSummaries: [ProductViewSummary]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(productViewAggregations: [String: [ProductViewAggregationValue]]? = nil, productViewSummaries: [ProductViewSummary]? = nil, nextPageToken: String? = nil) {
            self.productViewAggregations = productViewAggregations
            self.productViewSummaries = productViewSummaries
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case productViewAggregations = "ProductViewAggregations"
            case productViewSummaries = "ProductViewSummaries"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ListTagOptionsFilters: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Active", required: false, type: .boolean)
        ]
        /// The ListTagOptionsFilters value.
        public let value: String?
        /// The ListTagOptionsFilters key.
        public let key: String?
        /// The ListTagOptionsFilters active state.
        public let active: Bool?

        public init(value: String? = nil, key: String? = nil, active: Bool? = nil) {
            self.value = value
            self.key = key
            self.active = active
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
            case active = "Active"
        }
    }

    public struct DeleteConstraintOutput: AWSShape {
        /// The key for the payload

    }

    public struct DescribeTagOptionInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The identifier of the TagOption.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct DisassociatePrincipalFromPortfolioOutput: AWSShape {
        /// The key for the payload

    }

    public struct DeleteConstraintInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The identifier of the constraint to delete.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct DescribeProductViewInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The ProductViewId of the product to describe.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct DeleteProvisioningArtifactInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The identifier of the provisioning artifact for the delete request. This is sometimes referred to as the product version.
        public let provisioningArtifactId: String
        /// The product identifier.
        public let productId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(provisioningArtifactId: String, productId: String, acceptLanguage: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.productId = productId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case productId = "ProductId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct ParameterConstraints: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedValues", required: false, type: .list)
        ]
        /// The values that the administrator has allowed for the parameter.
        public let allowedValues: [String]?

        public init(allowedValues: [String]? = nil) {
            self.allowedValues = allowedValues
        }

        private enum CodingKeys: String, CodingKey {
            case allowedValues = "AllowedValues"
        }
    }

    public enum ProductSource: String, CustomStringConvertible, Codable {
        case account = "ACCOUNT"
        public var description: String { return self.rawValue }
    }

    public struct ListPortfoliosForProductInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The product identifier.
        public let productId: String
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, productId: String, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case productId = "ProductId"
            case pageToken = "PageToken"
        }
    }

    public struct PortfolioDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisplayName", required: false, type: .string), 
            AWSShapeMember(label: "ProviderName", required: false, type: .string), 
            AWSShapeMember(label: "ARN", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The name to use for display purposes.
        public let displayName: String?
        /// The name of the portfolio provider.
        public let providerName: String?
        /// The ARN assigned to the portfolio.
        public let aRN: String?
        /// The text description of the portfolio.
        public let description: String?
        /// The UTC timestamp of the creation time.
        public let createdTime: TimeStamp?
        /// The identifier for the portfolio.
        public let id: String?

        public init(displayName: String? = nil, providerName: String? = nil, aRN: String? = nil, description: String? = nil, createdTime: TimeStamp? = nil, id: String? = nil) {
            self.displayName = displayName
            self.providerName = providerName
            self.aRN = aRN
            self.description = description
            self.createdTime = createdTime
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case displayName = "DisplayName"
            case providerName = "ProviderName"
            case aRN = "ARN"
            case description = "Description"
            case createdTime = "CreatedTime"
            case id = "Id"
        }
    }

    public struct CreateTagOptionOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionDetail", required: false, type: .structure)
        ]
        /// The resulting detailed TagOption information.
        public let tagOptionDetail: TagOptionDetail?

        public init(tagOptionDetail: TagOptionDetail? = nil) {
            self.tagOptionDetail = tagOptionDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionDetail = "TagOptionDetail"
        }
    }

    public struct DescribeProvisioningParametersInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "PathId", required: false, type: .string)
        ]
        /// The provisioning artifact identifier for this product. This is sometimes referred to as the product version.
        public let provisioningArtifactId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The product identifier.
        public let productId: String
        /// The identifier of the path for this product's provisioning. This value is optional if the product has a default path, and is required if there is more than one path for the specified product.
        public let pathId: String?

        public init(provisioningArtifactId: String, acceptLanguage: String? = nil, productId: String, pathId: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.pathId = pathId
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case acceptLanguage = "AcceptLanguage"
            case productId = "ProductId"
            case pathId = "PathId"
        }
    }

    public struct SearchProductsAsAdminOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductViewDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// List of detailed product view information objects.
        public let productViewDetails: [ProductViewDetail]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(productViewDetails: [ProductViewDetail]? = nil, nextPageToken: String? = nil) {
            self.productViewDetails = productViewDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case productViewDetails = "ProductViewDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ProductViewAggregationValue: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "ApproximateCount", required: false, type: .integer)
        ]
        /// The value of the product view aggregation.
        public let value: String?
        /// An approximate count of the products that match the value.
        public let approximateCount: Int32?

        public init(value: String? = nil, approximateCount: Int32? = nil) {
            self.value = value
            self.approximateCount = approximateCount
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case approximateCount = "ApproximateCount"
        }
    }

    public struct ResourceDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ARN", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Description of the resource.
        public let description: String?
        /// ARN of the resource.
        public let aRN: String?
        /// Name of the resource.
        public let name: String?
        /// Creation time of the resource.
        public let createdTime: TimeStamp?
        /// Identifier of the resource.
        public let id: String?

        public init(description: String? = nil, aRN: String? = nil, name: String? = nil, createdTime: TimeStamp? = nil, id: String? = nil) {
            self.description = description
            self.aRN = aRN
            self.name = name
            self.createdTime = createdTime
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case aRN = "ARN"
            case name = "Name"
            case createdTime = "CreatedTime"
            case id = "Id"
        }
    }

    public struct ListAcceptedPortfolioSharesInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case pageToken = "PageToken"
        }
    }

    public struct SearchProductsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "SortBy", required: false, type: .enum), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .map), 
            AWSShapeMember(label: "SortOrder", required: false, type: .enum), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The sort field specifier. If no value is specified, results are not sorted.
        public let sortBy: ProductViewSortBy?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The list of filters with which to limit search results. If no search filters are specified, the output is all the products to which the calling user has access. 
        public let filters: [ProductViewFilterBy: [String]]?
        /// The sort order specifier. If no value is specified, results are not sorted.
        public let sortOrder: SortOrder?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, sortBy: ProductViewSortBy? = nil, acceptLanguage: String? = nil, filters: [ProductViewFilterBy: [String]]? = nil, sortOrder: SortOrder? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.sortBy = sortBy
            self.acceptLanguage = acceptLanguage
            self.filters = filters
            self.sortOrder = sortOrder
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case sortBy = "SortBy"
            case acceptLanguage = "AcceptLanguage"
            case filters = "Filters"
            case sortOrder = "SortOrder"
            case pageToken = "PageToken"
        }
    }

    public struct RecordError: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The numeric value of the error.
        public let code: String?
        /// The text description of the error.
        public let description: String?

        public init(code: String? = nil, description: String? = nil) {
            self.code = code
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case description = "Description"
        }
    }

    public struct UpdateConstraintInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The updated text description of the constraint.
        public let description: String?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The identifier of the constraint to update.
        public let id: String

        public init(description: String? = nil, acceptLanguage: String? = nil, id: String) {
            self.description = description
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct ProvisionedProductDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LastRecordId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The current status of the ProvisionedProduct.  AVAILABLE - Stable state, ready to perform any operation. The most recent action request succeeded and completed.  UNDER_CHANGE - Transitive state, operations performed may or may not have valid results. Wait for an AVAILABLE status before performing operations.  TAINTED - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.   ERROR - Something unexpected happened such that the provisioned product exists but the stack is not running. For example, CloudFormation received an invalid parameter value and could not launch the stack.
        public let status: ProvisionedProductStatus?
        /// The ARN associated with the ProvisionedProduct object.
        public let arn: String?
        /// The record identifier of the last request performed on this ProvisionedProduct object.
        public let lastRecordId: String?
        /// The user-friendly name of the ProvisionedProduct object.
        public let name: String?
        /// A token to disambiguate duplicate requests. You can create multiple resources using the same input in multiple requests, provided that you also specify a different idempotency token for each request.
        public let idempotencyToken: String?
        /// The type of the ProvisionedProduct object.
        public let `type`: String?
        /// The current status message of the ProvisionedProduct.
        public let statusMessage: String?
        /// The UTC timestamp of the creation time.
        public let createdTime: TimeStamp?
        /// The identifier of the ProvisionedProduct object.
        public let id: String?

        public init(status: ProvisionedProductStatus? = nil, arn: String? = nil, lastRecordId: String? = nil, name: String? = nil, idempotencyToken: String? = nil, type: String? = nil, statusMessage: String? = nil, createdTime: TimeStamp? = nil, id: String? = nil) {
            self.status = status
            self.arn = arn
            self.lastRecordId = lastRecordId
            self.name = name
            self.idempotencyToken = idempotencyToken
            self.`type` = `type`
            self.statusMessage = statusMessage
            self.createdTime = createdTime
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case arn = "Arn"
            case lastRecordId = "LastRecordId"
            case name = "Name"
            case idempotencyToken = "IdempotencyToken"
            case `type` = "Type"
            case statusMessage = "StatusMessage"
            case createdTime = "CreatedTime"
            case id = "Id"
        }
    }

    public struct ProvisionProductOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure)
        ]
        /// The detailed result of the ProvisionProduct request, containing the inputs made to that request, the current state of the request, a pointer to the ProvisionedProduct object of the request, and a list of any errors that the request encountered. 
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetail = "RecordDetail"
        }
    }

    public struct DeleteProductInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The identifier of the product for the delete request.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct ListResourcesForTagOptionOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceDetails", required: false, type: .list), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The resulting detailed resource information.
        public let resourceDetails: [ResourceDetail]?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(resourceDetails: [ResourceDetail]? = nil, pageToken: String? = nil) {
            self.resourceDetails = resourceDetails
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceDetails = "ResourceDetails"
            case pageToken = "PageToken"
        }
    }

    public struct ListProvisioningArtifactsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The product identifier.
        public let productId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(productId: String, acceptLanguage: String? = nil) {
            self.productId = productId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct ListRecordHistoryInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "AccessLevelFilter", required: false, type: .structure), 
            AWSShapeMember(label: "SearchFilter", required: false, type: .structure), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The access level for obtaining results. If left unspecified, User level access is used.
        public let accessLevelFilter: AccessLevelFilter?
        /// The filter to limit search results. 
        public let searchFilter: ListRecordHistorySearchFilter?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, accessLevelFilter: AccessLevelFilter? = nil, searchFilter: ListRecordHistorySearchFilter? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.accessLevelFilter = accessLevelFilter
            self.searchFilter = searchFilter
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case accessLevelFilter = "AccessLevelFilter"
            case searchFilter = "SearchFilter"
            case pageToken = "PageToken"
        }
    }

    public struct AssociateProductWithPortfolioInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "SourcePortfolioId", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string)
        ]
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The identifier of the source portfolio to use with this association.
        public let sourcePortfolioId: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The product identifier.
        public let productId: String

        public init(acceptLanguage: String? = nil, sourcePortfolioId: String? = nil, portfolioId: String, productId: String) {
            self.acceptLanguage = acceptLanguage
            self.sourcePortfolioId = sourcePortfolioId
            self.portfolioId = portfolioId
            self.productId = productId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case sourcePortfolioId = "SourcePortfolioId"
            case portfolioId = "PortfolioId"
            case productId = "ProductId"
        }
    }

    public struct UpdateProductInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "RemoveTags", required: false, type: .list), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "SupportEmail", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Distributor", required: false, type: .string), 
            AWSShapeMember(label: "AddTags", required: false, type: .list), 
            AWSShapeMember(label: "SupportUrl", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "SupportDescription", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The identifier of the product for the update request.
        public let id: String
        /// Tags to remove from the existing list of tags associated with the product.
        public let removeTags: [String]?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The updated support email for the product.
        public let supportEmail: String?
        /// The updated product name.
        public let name: String?
        /// The updated distributor of the product.
        public let distributor: String?
        /// Tags to add to the existing list of tags associated with the product.
        public let addTags: [Tag]?
        /// The updated support URL for the product.
        public let supportUrl: String?
        /// The updated owner of the product.
        public let owner: String?
        /// The updated support description for the product.
        public let supportDescription: String?
        /// The updated text description of the product.
        public let description: String?

        public init(id: String, removeTags: [String]? = nil, acceptLanguage: String? = nil, supportEmail: String? = nil, name: String? = nil, distributor: String? = nil, addTags: [Tag]? = nil, supportUrl: String? = nil, owner: String? = nil, supportDescription: String? = nil, description: String? = nil) {
            self.id = id
            self.removeTags = removeTags
            self.acceptLanguage = acceptLanguage
            self.supportEmail = supportEmail
            self.name = name
            self.distributor = distributor
            self.addTags = addTags
            self.supportUrl = supportUrl
            self.owner = owner
            self.supportDescription = supportDescription
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case removeTags = "RemoveTags"
            case acceptLanguage = "AcceptLanguage"
            case supportEmail = "SupportEmail"
            case name = "Name"
            case distributor = "Distributor"
            case addTags = "AddTags"
            case supportUrl = "SupportUrl"
            case owner = "Owner"
            case supportDescription = "SupportDescription"
            case description = "Description"
        }
    }

    public enum ProductViewSortBy: String, CustomStringConvertible, Codable {
        case title = "Title"
        case versioncount = "VersionCount"
        case creationdate = "CreationDate"
        public var description: String { return self.rawValue }
    }

    public struct TerminateProvisionedProductInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "IgnoreErrors", required: false, type: .boolean), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "TerminateToken", required: true, type: .string), 
            AWSShapeMember(label: "ProvisionedProductId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductName", required: false, type: .string)
        ]
        /// If set to true, AWS Service Catalog stops managing the specified ProvisionedProduct object even if it cannot delete the underlying resources.
        public let ignoreErrors: Bool?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// An idempotency token that uniquely identifies the termination request. This token is only valid during the termination process. After the ProvisionedProduct object is terminated, further requests to terminate the same ProvisionedProduct object always return ResourceNotFound regardless of the value of TerminateToken.
        public let terminateToken: String
        /// The identifier of the ProvisionedProduct object to terminate. Specify either ProvisionedProductName or ProvisionedProductId, but not both.
        public let provisionedProductId: String?
        /// The name of the ProvisionedProduct object to terminate. Specify either ProvisionedProductName or ProvisionedProductId, but not both.
        public let provisionedProductName: String?

        public init(ignoreErrors: Bool? = nil, acceptLanguage: String? = nil, terminateToken: String, provisionedProductId: String? = nil, provisionedProductName: String? = nil) {
            self.ignoreErrors = ignoreErrors
            self.acceptLanguage = acceptLanguage
            self.terminateToken = terminateToken
            self.provisionedProductId = provisionedProductId
            self.provisionedProductName = provisionedProductName
        }

        private enum CodingKeys: String, CodingKey {
            case ignoreErrors = "IgnoreErrors"
            case acceptLanguage = "AcceptLanguage"
            case terminateToken = "TerminateToken"
            case provisionedProductId = "ProvisionedProductId"
            case provisionedProductName = "ProvisionedProductName"
        }
    }

    public enum SortOrder: String, CustomStringConvertible, Codable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
        public var description: String { return self.rawValue }
    }

    public struct RejectPortfolioShareOutput: AWSShape {
        /// The key for the payload

    }

    public struct UpdateProvisioningArtifactInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The identifier of the provisioning artifact for the update request. This is sometimes referred to as the product version.
        public let provisioningArtifactId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The product identifier.
        public let productId: String
        /// The updated name of the provisioning artifact.
        public let name: String?
        /// The updated text description of the provisioning artifact.
        public let description: String?

        public init(provisioningArtifactId: String, acceptLanguage: String? = nil, productId: String, name: String? = nil, description: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.name = name
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case acceptLanguage = "AcceptLanguage"
            case productId = "ProductId"
            case name = "Name"
            case description = "Description"
        }
    }

    public struct CreatePortfolioOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// The resulting detailed portfolio information.
        public let portfolioDetail: PortfolioDetail?
        /// Tags successfully associated with the new portfolio.
        public let tags: [Tag]?

        public init(portfolioDetail: PortfolioDetail? = nil, tags: [Tag]? = nil) {
            self.portfolioDetail = portfolioDetail
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetail = "PortfolioDetail"
            case tags = "Tags"
        }
    }

    public struct DescribePortfolioOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "TagOptions", required: false, type: .list)
        ]
        /// Detailed portfolio information.
        public let portfolioDetail: PortfolioDetail?
        /// Tags associated with the portfolio.
        public let tags: [Tag]?
        /// TagOptions associated with the portfolio.
        public let tagOptions: [TagOptionDetail]?

        public init(portfolioDetail: PortfolioDetail? = nil, tags: [Tag]? = nil, tagOptions: [TagOptionDetail]? = nil) {
            self.portfolioDetail = portfolioDetail
            self.tags = tags
            self.tagOptions = tagOptions
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetail = "PortfolioDetail"
            case tags = "Tags"
            case tagOptions = "TagOptions"
        }
    }

    public enum AccessLevelFilterKey: String, CustomStringConvertible, Codable {
        case account = "Account"
        case role = "Role"
        case user = "User"
        public var description: String { return self.rawValue }
    }

    public struct AccessLevelFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .enum)
        ]
        /// Specifies the user to which the access level applies. A value of Self is currently supported.
        public let value: String?
        /// Specifies the access level.  Account allows results at the account level.   Role allows results based on the federated role of the specified user.  User allows results limited to the specified user. 
        public let key: AccessLevelFilterKey?

        public init(value: String? = nil, key: AccessLevelFilterKey? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct TagOptionDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Active", required: false, type: .boolean), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The TagOptionDetail key.
        public let key: String?
        /// The TagOptionDetail value.
        public let value: String?
        /// The TagOptionDetail active state.
        public let active: Bool?
        /// The TagOptionDetail identifier.
        public let id: String?

        public init(key: String? = nil, value: String? = nil, active: Bool? = nil, id: String? = nil) {
            self.key = key
            self.value = value
            self.active = active
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
            case active = "Active"
            case id = "Id"
        }
    }

    public struct ConstraintSummary: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The type of the constraint. 
        public let `type`: String?
        /// The text description of the constraint.
        public let description: String?

        public init(type: String? = nil, description: String? = nil) {
            self.`type` = `type`
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case description = "Description"
        }
    }

    public struct ProductViewSummary: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HasDefaultPath", required: false, type: .boolean), 
            AWSShapeMember(label: "ShortDescription", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "SupportEmail", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Distributor", required: false, type: .string), 
            AWSShapeMember(label: "SupportUrl", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "SupportDescription", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        /// A value of false indicates that the product does not have a default path, while a value of true indicates that it does. If it's false, call ListLaunchPaths to disambiguate between paths. If true, ListLaunchPaths is not required, and the output of the ProductViewSummary operation can be used directly with DescribeProvisioningParameters.
        public let hasDefaultPath: Bool?
        /// Short description of the product.
        public let shortDescription: String?
        /// The product view identifier.
        public let id: String?
        /// The email contact information to obtain support for this Product.
        public let supportEmail: String?
        /// The name of the product.
        public let name: String?
        /// The distributor of the product. Contact the product administrator for the significance of this value.
        public let distributor: String?
        /// The URL information to obtain support for this Product.
        public let supportUrl: String?
        /// The owner of the product. Contact the product administrator for the significance of this value.
        public let owner: String?
        /// The product identifier.
        public let productId: String?
        /// The description of the support for this Product.
        public let supportDescription: String?
        /// The product type. Contact the product administrator for the significance of this value. If this value is MARKETPLACE, the product was created by AWS Marketplace.
        public let `type`: ProductType?

        public init(hasDefaultPath: Bool? = nil, shortDescription: String? = nil, id: String? = nil, supportEmail: String? = nil, name: String? = nil, distributor: String? = nil, supportUrl: String? = nil, owner: String? = nil, productId: String? = nil, supportDescription: String? = nil, type: ProductType? = nil) {
            self.hasDefaultPath = hasDefaultPath
            self.shortDescription = shortDescription
            self.id = id
            self.supportEmail = supportEmail
            self.name = name
            self.distributor = distributor
            self.supportUrl = supportUrl
            self.owner = owner
            self.productId = productId
            self.supportDescription = supportDescription
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case hasDefaultPath = "HasDefaultPath"
            case shortDescription = "ShortDescription"
            case id = "Id"
            case supportEmail = "SupportEmail"
            case name = "Name"
            case distributor = "Distributor"
            case supportUrl = "SupportUrl"
            case owner = "Owner"
            case productId = "ProductId"
            case supportDescription = "SupportDescription"
            case `type` = "Type"
        }
    }

    public enum RecordStatus: String, CustomStringConvertible, Codable {
        case created = "CREATED"
        case in_progress = "IN_PROGRESS"
        case in_progress_in_error = "IN_PROGRESS_IN_ERROR"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct UpdateProvisioningArtifactOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ProvisioningArtifactDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Info", required: false, type: .map)
        ]
        /// The status of the current request.
        public let status: Status?
        /// The resulting detailed provisioning artifact information.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?
        /// Additional information about the provisioning artifact update request.
        public let info: [String: String]?

        public init(status: Status? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, info: [String: String]? = nil) {
            self.status = status
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.info = info
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case provisioningArtifactDetail = "ProvisioningArtifactDetail"
            case info = "Info"
        }
    }

    public struct RejectPortfolioShareInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(portfolioId: String, acceptLanguage: String? = nil) {
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioId = "PortfolioId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct ListTagOptionsOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionDetails", required: false, type: .list), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The resulting detailed TagOption information.
        public let tagOptionDetails: [TagOptionDetail]?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(tagOptionDetails: [TagOptionDetail]? = nil, pageToken: String? = nil) {
            self.tagOptionDetails = tagOptionDetails
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionDetails = "TagOptionDetails"
            case pageToken = "PageToken"
        }
    }

    public struct DescribeConstraintOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ConstraintParameters", required: false, type: .string)
        ]
        /// Detailed constraint information.
        public let constraintDetail: ConstraintDetail?
        /// The status of the current request.
        public let status: Status?
        /// The current parameters associated with the specified constraint.
        public let constraintParameters: String?

        public init(constraintDetail: ConstraintDetail? = nil, status: Status? = nil, constraintParameters: String? = nil) {
            self.constraintDetail = constraintDetail
            self.status = status
            self.constraintParameters = constraintParameters
        }

        private enum CodingKeys: String, CodingKey {
            case constraintDetail = "ConstraintDetail"
            case status = "Status"
            case constraintParameters = "ConstraintParameters"
        }
    }

    public enum Status: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case creating = "CREATING"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct Principal: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrincipalARN", required: false, type: .string), 
            AWSShapeMember(label: "PrincipalType", required: false, type: .enum)
        ]
        /// The ARN representing the principal (IAM user, role, or group).
        public let principalARN: String?
        /// The principal type. Must be IAM 
        public let principalType: PrincipalType?

        public init(principalARN: String? = nil, principalType: PrincipalType? = nil) {
            self.principalARN = principalARN
            self.principalType = principalType
        }

        private enum CodingKeys: String, CodingKey {
            case principalARN = "PrincipalARN"
            case principalType = "PrincipalType"
        }
    }

    public struct ListTagOptionsInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The list of filters with which to limit search results. If no search filters are specified, the output is all TagOptions. 
        public let filters: ListTagOptionsFilters?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, filters: ListTagOptionsFilters? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.filters = filters
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case filters = "Filters"
            case pageToken = "PageToken"
        }
    }

    public struct UpdateTagOptionOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionDetail", required: false, type: .structure)
        ]
        /// The resulting detailed TagOption information.
        public let tagOptionDetail: TagOptionDetail?

        public init(tagOptionDetail: TagOptionDetail? = nil) {
            self.tagOptionDetail = tagOptionDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionDetail = "TagOptionDetail"
        }
    }

    public struct ProvisioningArtifactDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The text description of the provisioning artifact.
        public let description: String?
        /// The type of the provisioning artifact. The following provisioning artifact types are used by AWS Marketplace products:  MARKETPLACE_AMI - AMI products.  MARKETPLACE_CAR - CAR (Cluster and AWS Resources) products.
        public let `type`: ProvisioningArtifactType?
        /// The name assigned to the provisioning artifact.
        public let name: String?
        /// The UTC timestamp of the creation time.
        public let createdTime: TimeStamp?
        /// The identifier of the provisioning artifact. This is sometimes referred to as the product version.
        public let id: String?

        public init(description: String? = nil, type: ProvisioningArtifactType? = nil, name: String? = nil, createdTime: TimeStamp? = nil, id: String? = nil) {
            self.description = description
            self.`type` = `type`
            self.name = name
            self.createdTime = createdTime
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case `type` = "Type"
            case name = "Name"
            case createdTime = "CreatedTime"
            case id = "Id"
        }
    }

    public struct AssociateTagOptionWithResourceOutput: AWSShape {
        /// The key for the payload

    }

    public struct ListConstraintsForPortfolioInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The product identifier.
        public let productId: String?
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, portfolioId: String, productId: String? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.productId = productId
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case portfolioId = "PortfolioId"
            case productId = "ProductId"
            case pageToken = "PageToken"
        }
    }

    public struct DisassociateProductFromPortfolioInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The portfolio identifier.
        public let portfolioId: String
        /// The product identifier.
        public let productId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(portfolioId: String, productId: String, acceptLanguage: String? = nil) {
            self.portfolioId = portfolioId
            self.productId = productId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioId = "PortfolioId"
            case productId = "ProductId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct DeleteProductOutput: AWSShape {
        /// The key for the payload

    }

    public struct ListPortfoliosOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// List of detailed portfolio information objects.
        public let portfolioDetails: [PortfolioDetail]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(portfolioDetails: [PortfolioDetail]? = nil, nextPageToken: String? = nil) {
            self.portfolioDetails = portfolioDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetails = "PortfolioDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ListPrincipalsForPortfolioInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return in the results. If more results exist than fit in the specified PageSize, the value of NextPageToken in the response is non-null.
        public let pageSize: Int32?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The page token of the first page retrieved. If null, this retrieves the first page of size PageSize.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, portfolioId: String, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case portfolioId = "PortfolioId"
            case pageToken = "PageToken"
        }
    }

    public struct DeleteProvisioningArtifactOutput: AWSShape {
        /// The key for the payload

    }

    public struct DeletePortfolioShareOutput: AWSShape {
        /// The key for the payload

    }

    public struct DescribeProductOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductViewSummary", required: false, type: .structure), 
            AWSShapeMember(label: "ProvisioningArtifacts", required: false, type: .list)
        ]
        /// The summary metadata about the specified product.
        public let productViewSummary: ProductViewSummary?
        /// A list of provisioning artifact objects for the specified product. The ProvisioningArtifacts parameter represent the ways the specified product can be provisioned.
        public let provisioningArtifacts: [ProvisioningArtifact]?

        public init(productViewSummary: ProductViewSummary? = nil, provisioningArtifacts: [ProvisioningArtifact]? = nil) {
            self.productViewSummary = productViewSummary
            self.provisioningArtifacts = provisioningArtifacts
        }

        private enum CodingKeys: String, CodingKey {
            case productViewSummary = "ProductViewSummary"
            case provisioningArtifacts = "ProvisioningArtifacts"
        }
    }

    public struct RecordDetail: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ProvisionedProductName", required: false, type: .string), 
            AWSShapeMember(label: "PathId", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "RecordErrors", required: false, type: .list), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ProvisionedProductId", required: false, type: .string), 
            AWSShapeMember(label: "RecordType", required: false, type: .string), 
            AWSShapeMember(label: "RecordId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductType", required: false, type: .string), 
            AWSShapeMember(label: "RecordTags", required: false, type: .list)
        ]
        /// The provisioning artifact identifier for this product. This is sometimes referred to as the product version.
        public let provisioningArtifactId: String?
        /// The time when the record for the ProvisionedProduct object was last updated.
        public let updatedTime: TimeStamp?
        /// The user-friendly name of the ProvisionedProduct object.
        public let provisionedProductName: String?
        /// The identifier of the path for this product's provisioning.
        public let pathId: String?
        /// The product identifier.
        public let productId: String?
        /// The UTC timestamp of the creation time.
        public let createdTime: TimeStamp?
        /// A list of errors that occurred while processing the request.
        public let recordErrors: [RecordError]?
        /// The status of the ProvisionedProduct object.  CREATED - Request created but the operation has not yet started.  IN_PROGRESS - The requested operation is in-progress.  IN_PROGRESS_IN_ERROR - The provisioned product is under change but the requested operation failed and some remediation is occurring. For example, a rollback.  SUCCEEDED - The requested operation has successfully completed.  FAILED - The requested operation has completed but has failed. Investigate using the error messages returned.
        public let status: RecordStatus?
        /// The identifier of the ProvisionedProduct object.
        public let provisionedProductId: String?
        /// The record type for this record.
        public let recordType: String?
        /// The identifier of the ProvisionedProduct object record.
        public let recordId: String?
        /// The type of the ProvisionedProduct object.
        public let provisionedProductType: String?
        /// List of tags associated with this record.
        public let recordTags: [RecordTag]?

        public init(provisioningArtifactId: String? = nil, updatedTime: TimeStamp? = nil, provisionedProductName: String? = nil, pathId: String? = nil, productId: String? = nil, createdTime: TimeStamp? = nil, recordErrors: [RecordError]? = nil, status: RecordStatus? = nil, provisionedProductId: String? = nil, recordType: String? = nil, recordId: String? = nil, provisionedProductType: String? = nil, recordTags: [RecordTag]? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.updatedTime = updatedTime
            self.provisionedProductName = provisionedProductName
            self.pathId = pathId
            self.productId = productId
            self.createdTime = createdTime
            self.recordErrors = recordErrors
            self.status = status
            self.provisionedProductId = provisionedProductId
            self.recordType = recordType
            self.recordId = recordId
            self.provisionedProductType = provisionedProductType
            self.recordTags = recordTags
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case updatedTime = "UpdatedTime"
            case provisionedProductName = "ProvisionedProductName"
            case pathId = "PathId"
            case productId = "ProductId"
            case createdTime = "CreatedTime"
            case recordErrors = "RecordErrors"
            case status = "Status"
            case provisionedProductId = "ProvisionedProductId"
            case recordType = "RecordType"
            case recordId = "RecordId"
            case provisionedProductType = "ProvisionedProductType"
            case recordTags = "RecordTags"
        }
    }

    public struct DescribeProvisioningArtifactOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ProvisioningArtifactDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Info", required: false, type: .map)
        ]
        /// The status of the current request.
        public let status: Status?
        /// Detailed provisioning artifact information.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?
        /// Additional information about the provisioning artifact.
        public let info: [String: String]?

        public init(status: Status? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, info: [String: String]? = nil) {
            self.status = status
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.info = info
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case provisioningArtifactDetail = "ProvisioningArtifactDetail"
            case info = "Info"
        }
    }

    public struct DisassociateTagOptionFromResourceInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "TagOptionId", required: true, type: .string)
        ]
        /// Identifier of the resource from which to disassociate the TagOption.
        public let resourceId: String
        /// Identifier of the TagOption to disassociate from the resource.
        public let tagOptionId: String

        public init(resourceId: String, tagOptionId: String) {
            self.resourceId = resourceId
            self.tagOptionId = tagOptionId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tagOptionId = "TagOptionId"
        }
    }

    public struct AssociateTagOptionWithResourceInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "TagOptionId", required: true, type: .string)
        ]
        /// The resource identifier.
        public let resourceId: String
        /// The TagOption identifier.
        public let tagOptionId: String

        public init(resourceId: String, tagOptionId: String) {
            self.resourceId = resourceId
            self.tagOptionId = tagOptionId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tagOptionId = "TagOptionId"
        }
    }

    public struct DisassociateTagOptionFromResourceOutput: AWSShape {
        /// The key for the payload

    }

    public struct AcceptPortfolioShareInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(portfolioId: String, acceptLanguage: String? = nil) {
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioId = "PortfolioId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct RecordTag: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The value for this tag.
        public let value: String?
        /// The key for this tag.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct ListAcceptedPortfolioSharesOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// List of detailed portfolio information objects.
        public let portfolioDetails: [PortfolioDetail]?
        /// The page token to use to retrieve the next page of results for this operation. If there are no more pages, this value is null.
        public let nextPageToken: String?

        public init(portfolioDetails: [PortfolioDetail]? = nil, nextPageToken: String? = nil) {
            self.portfolioDetails = portfolioDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetails = "PortfolioDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct UpdatePortfolioInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "RemoveTags", required: false, type: .list), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "DisplayName", required: false, type: .string), 
            AWSShapeMember(label: "AddTags", required: false, type: .list), 
            AWSShapeMember(label: "ProviderName", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The identifier of the portfolio for the update request.
        public let id: String
        /// Tags to remove from the existing list of tags associated with the portfolio.
        public let removeTags: [String]?
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The name to use for display purposes.
        public let displayName: String?
        /// Tags to add to the existing list of tags associated with the portfolio.
        public let addTags: [Tag]?
        /// The updated name of the portfolio provider.
        public let providerName: String?
        /// The updated text description of the portfolio.
        public let description: String?

        public init(id: String, removeTags: [String]? = nil, acceptLanguage: String? = nil, displayName: String? = nil, addTags: [Tag]? = nil, providerName: String? = nil, description: String? = nil) {
            self.id = id
            self.removeTags = removeTags
            self.acceptLanguage = acceptLanguage
            self.displayName = displayName
            self.addTags = addTags
            self.providerName = providerName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case removeTags = "RemoveTags"
            case acceptLanguage = "AcceptLanguage"
            case displayName = "DisplayName"
            case addTags = "AddTags"
            case providerName = "ProviderName"
            case description = "Description"
        }
    }

    public struct DeletePortfolioOutput: AWSShape {
        /// The key for the payload

    }

    public struct AssociatePrincipalWithPortfolioInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrincipalARN", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PrincipalType", required: true, type: .enum), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string)
        ]
        /// The ARN representing the principal (IAM user, role, or group).
        public let principalARN: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The principal type. Must be IAM 
        public let principalType: PrincipalType
        /// The portfolio identifier.
        public let portfolioId: String

        public init(principalARN: String, acceptLanguage: String? = nil, principalType: PrincipalType, portfolioId: String) {
            self.principalARN = principalARN
            self.acceptLanguage = acceptLanguage
            self.principalType = principalType
            self.portfolioId = portfolioId
        }

        private enum CodingKeys: String, CodingKey {
            case principalARN = "PrincipalARN"
            case acceptLanguage = "AcceptLanguage"
            case principalType = "PrincipalType"
            case portfolioId = "PortfolioId"
        }
    }

    public struct DescribeProductAsAdminInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The identifier of the product for which to retrieve information.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct DescribePortfolioInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// The identifier of the portfolio for which to retrieve information.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct CreateProductInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "SupportEmail", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Distributor", required: false, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "ProductType", required: true, type: .enum), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ProvisioningArtifactParameters", required: true, type: .structure), 
            AWSShapeMember(label: "SupportUrl", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: true, type: .string), 
            AWSShapeMember(label: "SupportDescription", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?
        /// Contact email for product support.
        public let supportEmail: String?
        /// The name of the product.
        public let name: String
        /// The distributor of the product.
        public let distributor: String?
        /// A token to disambiguate duplicate requests. You can create multiple resources using the same input in multiple requests, provided that you also specify a different idempotency token for each request.
        public let idempotencyToken: String
        /// The type of the product to create.
        public let productType: ProductType
        /// Tags to associate with the new product.
        public let tags: [Tag]?
        /// Parameters for the provisioning artifact.
        public let provisioningArtifactParameters: ProvisioningArtifactProperties
        /// Contact URL for product support.
        public let supportUrl: String?
        /// The owner of the product.
        public let owner: String
        /// Support information about the product.
        public let supportDescription: String?
        /// The text description of the product.
        public let description: String?

        public init(acceptLanguage: String? = nil, supportEmail: String? = nil, name: String, distributor: String? = nil, idempotencyToken: String, productType: ProductType, tags: [Tag]? = nil, provisioningArtifactParameters: ProvisioningArtifactProperties, supportUrl: String? = nil, owner: String, supportDescription: String? = nil, description: String? = nil) {
            self.acceptLanguage = acceptLanguage
            self.supportEmail = supportEmail
            self.name = name
            self.distributor = distributor
            self.idempotencyToken = idempotencyToken
            self.productType = productType
            self.tags = tags
            self.provisioningArtifactParameters = provisioningArtifactParameters
            self.supportUrl = supportUrl
            self.owner = owner
            self.supportDescription = supportDescription
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case supportEmail = "SupportEmail"
            case name = "Name"
            case distributor = "Distributor"
            case idempotencyToken = "IdempotencyToken"
            case productType = "ProductType"
            case tags = "Tags"
            case provisioningArtifactParameters = "ProvisioningArtifactParameters"
            case supportUrl = "SupportUrl"
            case owner = "Owner"
            case supportDescription = "SupportDescription"
            case description = "Description"
        }
    }

    public struct CreateProvisioningArtifactOutput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ProvisioningArtifactDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Info", required: false, type: .map)
        ]
        /// The status of the current request.
        public let status: Status?
        /// The resulting detailed provisioning artifact information.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?
        /// Additional information about the creation request for the provisioning artifact.
        public let info: [String: String]?

        public init(status: Status? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, info: [String: String]? = nil) {
            self.status = status
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.info = info
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case provisioningArtifactDetail = "ProvisioningArtifactDetail"
            case info = "Info"
        }
    }

    public struct ListPortfolioAccessInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code to use for this operation. Supported language codes are as follows: "en" (English) "jp" (Japanese) "zh" (Chinese) If no code is specified, "en" is used as the default.
        public let acceptLanguage: String?

        public init(portfolioId: String, acceptLanguage: String? = nil) {
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioId = "PortfolioId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct UpdateTagOptionInput: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Active", required: false, type: .boolean), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The updated value.
        public let value: String?
        /// The updated active state.
        public let active: Bool?
        /// The identifier of the constraint to update.
        public let id: String

        public init(value: String? = nil, active: Bool? = nil, id: String) {
            self.value = value
            self.active = active
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case active = "Active"
            case id = "Id"
        }
    }

}