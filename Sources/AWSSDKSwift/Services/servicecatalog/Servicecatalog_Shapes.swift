// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Servicecatalog {

    public struct CreateTagOptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The TagOption value.
        public let value: String
        /// The TagOption key.
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct DeletePortfolioShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The AWS account ID.
        public let accountId: String
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(accountId: String, portfolioId: String, acceptLanguage: String? = nil) {
            self.accountId = accountId
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case portfolioId = "PortfolioId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public enum ChangeAction: String, CustomStringConvertible, Codable {
        case add = "ADD"
        case modify = "MODIFY"
        case remove = "REMOVE"
        public var description: String { return self.rawValue }
    }

    public struct DisassociatePrincipalFromPortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrincipalARN", required: true, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The ARN of the principal (IAM user, role, or group).
        public let principalARN: String
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(principalARN: String, portfolioId: String, acceptLanguage: String? = nil) {
            self.principalARN = principalARN
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case principalARN = "PrincipalARN"
            case portfolioId = "PortfolioId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public enum ProductViewFilterBy: String, CustomStringConvertible, Codable {
        case fulltextsearch = "FullTextSearch"
        case owner = "Owner"
        case producttype = "ProductType"
        case sourceproductid = "SourceProductId"
        public var description: String { return self.rawValue }
    }

    public struct DeletePortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct DescribeProvisioningParametersOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptions", required: false, type: .list), 
            AWSShapeMember(label: "ConstraintSummaries", required: false, type: .list), 
            AWSShapeMember(label: "UsageInstructions", required: false, type: .list), 
            AWSShapeMember(label: "ProvisioningArtifactParameters", required: false, type: .list)
        ]
        /// Information about the TagOptions associated with the resource.
        public let tagOptions: [TagOptionSummary]?
        /// Information about the constraints used to provision the product.
        public let constraintSummaries: [ConstraintSummary]?
        /// Any additional metadata specifically related to the provisioning of the product. For example, see the Version field of the CloudFormation template.
        public let usageInstructions: [UsageInstruction]?
        /// Information about the parameters used to provision the product.
        public let provisioningArtifactParameters: [ProvisioningArtifactParameter]?

        public init(tagOptions: [TagOptionSummary]? = nil, constraintSummaries: [ConstraintSummary]? = nil, usageInstructions: [UsageInstruction]? = nil, provisioningArtifactParameters: [ProvisioningArtifactParameter]? = nil) {
            self.tagOptions = tagOptions
            self.constraintSummaries = constraintSummaries
            self.usageInstructions = usageInstructions
            self.provisioningArtifactParameters = provisioningArtifactParameters
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptions = "TagOptions"
            case constraintSummaries = "ConstraintSummaries"
            case usageInstructions = "UsageInstructions"
            case provisioningArtifactParameters = "ProvisioningArtifactParameters"
        }
    }

    public struct DescribeProvisionedProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The provisioned product identifier.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct CreateProvisionedProductPlanOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionProductId", required: false, type: .string), 
            AWSShapeMember(label: "PlanId", required: false, type: .string), 
            AWSShapeMember(label: "PlanName", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductName", required: false, type: .string)
        ]
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String?
        /// The product identifier.
        public let provisionProductId: String?
        /// The plan identifier.
        public let planId: String?
        /// The name of the plan.
        public let planName: String?
        /// The user-friendly name of the provisioned product.
        public let provisionedProductName: String?

        public init(provisioningArtifactId: String? = nil, provisionProductId: String? = nil, planId: String? = nil, planName: String? = nil, provisionedProductName: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.provisionProductId = provisionProductId
            self.planId = planId
            self.planName = planName
            self.provisionedProductName = provisionedProductName
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case provisionProductId = "ProvisionProductId"
            case planId = "PlanId"
            case planName = "PlanName"
            case provisionedProductName = "ProvisionedProductName"
        }
    }

    public struct ProvisioningArtifactProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Info", required: true, type: .map), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The URL of the CloudFormation template in Amazon S3. Specify the URL in JSON format as follows:  "LoadTemplateFromURL": "https://s3.amazonaws.com/cf-templates-ozkq9d3hgiq2-us-east-1/..." 
        public let info: [String: String]
        /// The type of provisioning artifact.    CLOUD_FORMATION_TEMPLATE - AWS CloudFormation template    MARKETPLACE_AMI - AWS Marketplace AMI    MARKETPLACE_CAR - AWS Marketplace Clusters and AWS Resources  
        public let `type`: ProvisioningArtifactType?
        /// The name of the provisioning artifact (for example, v1 v2beta). No spaces are allowed.
        public let name: String?
        /// The description of the provisioning artifact, including how it differs from the previous provisioning artifact.
        public let description: String?

        public init(info: [String: String], type: ProvisioningArtifactType? = nil, name: String? = nil, description: String? = nil) {
            self.info = info
            self.`type` = `type`
            self.name = name
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case info = "Info"
            case `type` = "Type"
            case name = "Name"
            case description = "Description"
        }
    }

    public struct DescribeProductAsAdminOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptions", required: false, type: .list), 
            AWSShapeMember(label: "ProvisioningArtifactSummaries", required: false, type: .list), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ProductViewDetail", required: false, type: .structure)
        ]
        /// Information about the TagOptions associated with the product.
        public let tagOptions: [TagOptionDetail]?
        /// Information about the provisioning artifacts (also known as versions) for the specified product.
        public let provisioningArtifactSummaries: [ProvisioningArtifactSummary]?
        /// Information about the tags associated with the product.
        public let tags: [Tag]?
        /// Information about the product view.
        public let productViewDetail: ProductViewDetail?

        public init(tagOptions: [TagOptionDetail]? = nil, provisioningArtifactSummaries: [ProvisioningArtifactSummary]? = nil, tags: [Tag]? = nil, productViewDetail: ProductViewDetail? = nil) {
            self.tagOptions = tagOptions
            self.provisioningArtifactSummaries = provisioningArtifactSummaries
            self.tags = tags
            self.productViewDetail = productViewDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptions = "TagOptions"
            case provisioningArtifactSummaries = "ProvisioningArtifactSummaries"
            case tags = "Tags"
            case productViewDetail = "ProductViewDetail"
        }
    }

    public enum PortfolioShareType: String, CustomStringConvertible, Codable {
        case imported = "IMPORTED"
        case awsServicecatalog = "AWS_SERVICECATALOG"
        public var description: String { return self.rawValue }
    }

    public struct ListPortfolioAccessOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "AccountIds", required: false, type: .list)
        ]
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?
        /// Information about the AWS accounts with access to the portfolio.
        public let accountIds: [String]?

        public init(nextPageToken: String? = nil, accountIds: [String]? = nil) {
            self.nextPageToken = nextPageToken
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "NextPageToken"
            case accountIds = "AccountIds"
        }
    }

    public struct ListResourcesForTagOptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionId", required: true, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "ResourceType", required: false, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The TagOption identifier.
        public let tagOptionId: String
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The resource type.    Portfolio     Product   
        public let resourceType: String?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(tagOptionId: String, pageSize: Int32? = nil, resourceType: String? = nil, pageToken: String? = nil) {
            self.tagOptionId = tagOptionId
            self.pageSize = pageSize
            self.resourceType = resourceType
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionId = "TagOptionId"
            case pageSize = "PageSize"
            case resourceType = "ResourceType"
            case pageToken = "PageToken"
        }
    }

    public enum PrincipalType: String, CustomStringConvertible, Codable {
        case iam = "IAM"
        public var description: String { return self.rawValue }
    }

    public struct CreateProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ProductViewDetail", required: false, type: .structure), 
            AWSShapeMember(label: "ProvisioningArtifactDetail", required: false, type: .structure)
        ]
        /// Information about the tags associated with the product.
        public let tags: [Tag]?
        /// Information about the product view.
        public let productViewDetail: ProductViewDetail?
        /// Information about the provisioning artifact.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?

        public init(tags: [Tag]? = nil, productViewDetail: ProductViewDetail? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil) {
            self.tags = tags
            self.productViewDetail = productViewDetail
            self.provisioningArtifactDetail = provisioningArtifactDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case productViewDetail = "ProductViewDetail"
            case provisioningArtifactDetail = "ProvisioningArtifactDetail"
        }
    }

    public struct DeleteProvisionedProductPlanInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IgnoreErrors", required: false, type: .boolean), 
            AWSShapeMember(label: "PlanId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// If set to true, AWS Service Catalog stops managing the specified provisioned product even if it cannot delete the underlying resources.
        public let ignoreErrors: Bool?
        /// The plan identifier.
        public let planId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(ignoreErrors: Bool? = nil, planId: String, acceptLanguage: String? = nil) {
            self.ignoreErrors = ignoreErrors
            self.planId = planId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case ignoreErrors = "IgnoreErrors"
            case planId = "PlanId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct UsageInstruction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The usage instruction type for the value.
        public let `type`: String?
        /// The usage instruction value for this type.
        public let value: String?

        public init(type: String? = nil, value: String? = nil) {
            self.`type` = `type`
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case value = "Value"
        }
    }

    public struct DescribeTagOptionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionDetail", required: false, type: .structure)
        ]
        /// Information about the TagOption.
        public let tagOptionDetail: TagOptionDetail?

        public init(tagOptionDetail: TagOptionDetail? = nil) {
            self.tagOptionDetail = tagOptionDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionDetail = "TagOptionDetail"
        }
    }

    public enum RequiresRecreation: String, CustomStringConvertible, Codable {
        case never = "NEVER"
        case conditionally = "CONDITIONALLY"
        case always = "ALWAYS"
        public var description: String { return self.rawValue }
    }

    public struct CreatePortfolioShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The AWS account ID.
        public let accountId: String
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(accountId: String, portfolioId: String, acceptLanguage: String? = nil) {
            self.accountId = accountId
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case portfolioId = "PortfolioId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct DescribeConstraintInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The identifier of the constraint.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct ScanProvisionedProductsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionedProducts", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the provisioned products.
        public let provisionedProducts: [ProvisionedProductDetail]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(provisionedProducts: [ProvisionedProductDetail]? = nil, nextPageToken: String? = nil) {
            self.provisionedProducts = provisionedProducts
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case provisionedProducts = "ProvisionedProducts"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ConstraintDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintId", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The identifier of the constraint.
        public let constraintId: String?
        /// The type of constraint.    LAUNCH     NOTIFICATION     TEMPLATE   
        public let `type`: String?
        /// The owner of the constraint.
        public let owner: String?
        /// The description of the constraint.
        public let description: String?

        public init(constraintId: String? = nil, type: String? = nil, owner: String? = nil, description: String? = nil) {
            self.constraintId = constraintId
            self.`type` = `type`
            self.owner = owner
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case constraintId = "ConstraintId"
            case `type` = "Type"
            case owner = "Owner"
            case description = "Description"
        }
    }

    public struct DescribeProductViewOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductViewSummary", required: false, type: .structure), 
            AWSShapeMember(label: "ProvisioningArtifacts", required: false, type: .list)
        ]
        /// Summary information about the product.
        public let productViewSummary: ProductViewSummary?
        /// Information about the provisioning artifacts for the product.
        public let provisioningArtifacts: [ProvisioningArtifact]?

        public init(productViewSummary: ProductViewSummary? = nil, provisioningArtifacts: [ProvisioningArtifact]? = nil) {
            self.productViewSummary = productViewSummary
            self.provisioningArtifacts = provisioningArtifacts
        }

        private enum CodingKeys: String, CodingKey {
            case productViewSummary = "ProductViewSummary"
            case provisioningArtifacts = "ProvisioningArtifacts"
        }
    }

    public enum ProvisioningArtifactPropertyName: String, CustomStringConvertible, Codable {
        case id = "Id"
        public var description: String { return self.rawValue }
    }

    public struct UpdatePortfolioOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// Information about the portfolio.
        public let portfolioDetail: PortfolioDetail?
        /// Information about the tags associated with the portfolio.
        public let tags: [Tag]?

        public init(portfolioDetail: PortfolioDetail? = nil, tags: [Tag]? = nil) {
            self.portfolioDetail = portfolioDetail
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetail = "PortfolioDetail"
            case tags = "Tags"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// The value for this key.
        public let value: String
        /// The tag key.
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct DescribeProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The product identifier.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct ListRecordHistoryOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// The records, in reverse chronological order.
        public let recordDetails: [RecordDetail]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(recordDetails: [RecordDetail]? = nil, nextPageToken: String? = nil) {
            self.recordDetails = recordDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetails = "RecordDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ScanProvisionedProductsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "AccessLevelFilter", required: false, type: .structure), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The access level to use to obtain results. The default is User.
        public let accessLevelFilter: AccessLevelFilter?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, accessLevelFilter: AccessLevelFilter? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.accessLevelFilter = accessLevelFilter
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case accessLevelFilter = "AccessLevelFilter"
            case pageToken = "PageToken"
        }
    }

    public struct CreatePortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ProviderName", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "DisplayName", required: true, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string)
        ]
        /// The description of the portfolio.
        public let description: String?
        /// The name of the portfolio provider.
        public let providerName: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// One or more tags.
        public let tags: [Tag]?
        /// The name to use for display purposes.
        public let displayName: String
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String

        public init(description: String? = nil, providerName: String, acceptLanguage: String? = nil, tags: [Tag]? = nil, displayName: String, idempotencyToken: String) {
            self.description = description
            self.providerName = providerName
            self.acceptLanguage = acceptLanguage
            self.tags = tags
            self.displayName = displayName
            self.idempotencyToken = idempotencyToken
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case providerName = "ProviderName"
            case acceptLanguage = "AcceptLanguage"
            case tags = "Tags"
            case displayName = "DisplayName"
            case idempotencyToken = "IdempotencyToken"
        }
    }

    public struct TagOptionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// The TagOption key.
        public let key: String?
        /// The TagOption value.
        public let values: [String]?

        public init(key: String? = nil, values: [String]? = nil) {
            self.key = key
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case values = "Values"
        }
    }

    public struct ListRecordHistorySearchFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The filter value.
        public let value: String?
        /// The filter key.    product - Filter results based on the specified product identifier.    provisionedproduct - Filter results based on the provisioned product identifier.  
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct ListPortfoliosInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case pageToken = "PageToken"
        }
    }

    public struct ResourceChangeDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Target", required: false, type: .structure), 
            AWSShapeMember(label: "Evaluation", required: false, type: .enum), 
            AWSShapeMember(label: "CausingEntity", required: false, type: .string)
        ]
        /// Information about the resource attribute to be modified.
        public let target: ResourceTargetDefinition?
        /// For static evaluations, the value of the resource attribute will change and the new value is known. For dynamic evaluations, the value might change, and any new value will be determined when the plan is updated.
        public let evaluation: EvaluationType?
        /// The ID of the entity that caused the change.
        public let causingEntity: String?

        public init(target: ResourceTargetDefinition? = nil, evaluation: EvaluationType? = nil, causingEntity: String? = nil) {
            self.target = target
            self.evaluation = evaluation
            self.causingEntity = causingEntity
        }

        private enum CodingKeys: String, CodingKey {
            case target = "Target"
            case evaluation = "Evaluation"
            case causingEntity = "CausingEntity"
        }
    }

    public struct AcceptPortfolioShareOutput: AWSShape {

    }

    public struct ListLaunchPathsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchPathSummaries", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the launch path.
        public let launchPathSummaries: [LaunchPathSummary]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(launchPathSummaries: [LaunchPathSummary]? = nil, nextPageToken: String? = nil) {
            self.launchPathSummaries = launchPathSummaries
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case launchPathSummaries = "LaunchPathSummaries"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ListConstraintsForPortfolioOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the constraints.
        public let constraintDetails: [ConstraintDetail]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(constraintDetails: [ConstraintDetail]? = nil, nextPageToken: String? = nil) {
            self.constraintDetails = constraintDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case constraintDetails = "ConstraintDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct UpdateProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ProductViewDetail", required: false, type: .structure)
        ]
        /// Information about the tags associated with the product.
        public let tags: [Tag]?
        /// Information about the product view.
        public let productViewDetail: ProductViewDetail?

        public init(tags: [Tag]? = nil, productViewDetail: ProductViewDetail? = nil) {
            self.tags = tags
            self.productViewDetail = productViewDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case productViewDetail = "ProductViewDetail"
        }
    }

    public enum CopyOption: String, CustomStringConvertible, Codable {
        case copytags = "CopyTags"
        public var description: String { return self.rawValue }
    }

    public struct SearchProductsAsAdminInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SortBy", required: false, type: .enum), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProductSource", required: false, type: .enum), 
            AWSShapeMember(label: "PortfolioId", required: false, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "SortOrder", required: false, type: .enum), 
            AWSShapeMember(label: "Filters", required: false, type: .map)
        ]
        /// The sort field. If no value is specified, the results are not sorted.
        public let sortBy: ProductViewSortBy?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// Access level of the source of the product.
        public let productSource: ProductSource?
        /// The portfolio identifier.
        public let portfolioId: String?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The sort order. If no value is specified, the results are not sorted.
        public let sortOrder: SortOrder?
        /// The search filters. If no search filters are specified, the output includes all products to which the administrator has access.
        public let filters: [ProductViewFilterBy: [String]]?

        public init(sortBy: ProductViewSortBy? = nil, pageSize: Int32? = nil, acceptLanguage: String? = nil, productSource: ProductSource? = nil, portfolioId: String? = nil, pageToken: String? = nil, sortOrder: SortOrder? = nil, filters: [ProductViewFilterBy: [String]]? = nil) {
            self.sortBy = sortBy
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.productSource = productSource
            self.portfolioId = portfolioId
            self.pageToken = pageToken
            self.sortOrder = sortOrder
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case sortBy = "SortBy"
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case productSource = "ProductSource"
            case portfolioId = "PortfolioId"
            case pageToken = "PageToken"
            case sortOrder = "SortOrder"
            case filters = "Filters"
        }
    }

    public struct ProvisionProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "NotificationArns", required: false, type: .list), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ProvisionToken", required: true, type: .string), 
            AWSShapeMember(label: "PathId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningParameters", required: false, type: .list), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "ProvisionedProductName", required: true, type: .string)
        ]
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.
        public let notificationArns: [String]?
        /// One or more tags.
        public let tags: [Tag]?
        /// An idempotency token that uniquely identifies the provisioning request.
        public let provisionToken: String
        /// The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use ListLaunchPaths.
        public let pathId: String?
        /// Parameters specified by the administrator that are required for provisioning the product.
        public let provisioningParameters: [ProvisioningParameter]?
        /// The product identifier.
        public let productId: String
        /// A user-friendly name for the provisioned product. This value must be unique for the AWS account and cannot be updated after the product is provisioned.
        public let provisionedProductName: String

        public init(provisioningArtifactId: String, acceptLanguage: String? = nil, notificationArns: [String]? = nil, tags: [Tag]? = nil, provisionToken: String, pathId: String? = nil, provisioningParameters: [ProvisioningParameter]? = nil, productId: String, provisionedProductName: String) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.notificationArns = notificationArns
            self.tags = tags
            self.provisionToken = provisionToken
            self.pathId = pathId
            self.provisioningParameters = provisioningParameters
            self.productId = productId
            self.provisionedProductName = provisionedProductName
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case acceptLanguage = "AcceptLanguage"
            case notificationArns = "NotificationArns"
            case tags = "Tags"
            case provisionToken = "ProvisionToken"
            case pathId = "PathId"
            case provisioningParameters = "ProvisioningParameters"
            case productId = "ProductId"
            case provisionedProductName = "ProvisionedProductName"
        }
    }

    public struct UpdateProvisioningParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "UsePreviousValue", required: false, type: .boolean)
        ]
        /// The parameter value.
        public let value: String?
        /// The parameter key.
        public let key: String?
        /// If set to true, Value is ignored and the previous parameter value is kept.
        public let usePreviousValue: Bool?

        public init(value: String? = nil, key: String? = nil, usePreviousValue: Bool? = nil) {
            self.value = value
            self.key = key
            self.usePreviousValue = usePreviousValue
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
            case usePreviousValue = "UsePreviousValue"
        }
    }

    public enum ProvisionedProductStatus: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case underChange = "UNDER_CHANGE"
        case tainted = "TAINTED"
        case error = "ERROR"
        case planInProgress = "PLAN_IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public struct CreateConstraintInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "Parameters", required: true, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "Type", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The constraint parameters, in JSON format. The syntax depends on the constraint type as follows:  LAUNCH  Specify the RoleArn property as follows: \"RoleArn\" : \"arn:aws:iam::123456789012:role/LaunchRole\"  NOTIFICATION  Specify the NotificationArns property as follows: \"NotificationArns\" : [\"arn:aws:sns:us-east-1:123456789012:Topic\"]  TEMPLATE  Specify the Rules property. For more information, see Template Constraint Rules.  
        public let parameters: String
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String
        /// The type of constraint.    LAUNCH     NOTIFICATION     TEMPLATE   
        public let `type`: String
        /// The product identifier.
        public let productId: String
        /// The description of the constraint.
        public let description: String?

        public init(acceptLanguage: String? = nil, portfolioId: String, parameters: String, idempotencyToken: String, type: String, productId: String, description: String? = nil) {
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.parameters = parameters
            self.idempotencyToken = idempotencyToken
            self.`type` = `type`
            self.productId = productId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case portfolioId = "PortfolioId"
            case parameters = "Parameters"
            case idempotencyToken = "IdempotencyToken"
            case `type` = "Type"
            case productId = "ProductId"
            case description = "Description"
        }
    }

    public enum ProductType: String, CustomStringConvertible, Codable {
        case cloudFormationTemplate = "CLOUD_FORMATION_TEMPLATE"
        case marketplace = "MARKETPLACE"
        public var description: String { return self.rawValue }
    }

    public struct LaunchPathSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintSummaries", required: false, type: .list), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The constraints on the portfolio-product relationship.
        public let constraintSummaries: [ConstraintSummary]?
        /// The tags associated with this product path.
        public let tags: [Tag]?
        /// The name of the portfolio to which the user was assigned.
        public let name: String?
        /// The identifier of the product path.
        public let id: String?

        public init(constraintSummaries: [ConstraintSummary]? = nil, tags: [Tag]? = nil, name: String? = nil, id: String? = nil) {
            self.constraintSummaries = constraintSummaries
            self.tags = tags
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case constraintSummaries = "ConstraintSummaries"
            case tags = "Tags"
            case name = "Name"
            case id = "Id"
        }
    }

    public struct AssociatePrincipalWithPortfolioOutput: AWSShape {

    }

    public struct UpdateProvisionedProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "UpdateToken", required: true, type: .string), 
            AWSShapeMember(label: "ProvisionedProductId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningParameters", required: false, type: .list), 
            AWSShapeMember(label: "PathId", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductName", required: false, type: .string)
        ]
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The idempotency token that uniquely identifies the provisioning update request.
        public let updateToken: String
        /// The identifier of the provisioned product. You cannot specify both ProvisionedProductName and ProvisionedProductId.
        public let provisionedProductId: String?
        /// The new parameters.
        public let provisioningParameters: [UpdateProvisioningParameter]?
        /// The new path identifier. This value is optional if the product has a default path, and required if the product has more than one path.
        public let pathId: String?
        /// The identifier of the provisioned product.
        public let productId: String?
        /// The updated name of the provisioned product. You cannot specify both ProvisionedProductName and ProvisionedProductId.
        public let provisionedProductName: String?

        public init(provisioningArtifactId: String? = nil, acceptLanguage: String? = nil, updateToken: String, provisionedProductId: String? = nil, provisioningParameters: [UpdateProvisioningParameter]? = nil, pathId: String? = nil, productId: String? = nil, provisionedProductName: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.updateToken = updateToken
            self.provisionedProductId = provisionedProductId
            self.provisioningParameters = provisioningParameters
            self.pathId = pathId
            self.productId = productId
            self.provisionedProductName = provisionedProductName
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case acceptLanguage = "AcceptLanguage"
            case updateToken = "UpdateToken"
            case provisionedProductId = "ProvisionedProductId"
            case provisioningParameters = "ProvisioningParameters"
            case pathId = "PathId"
            case productId = "ProductId"
            case provisionedProductName = "ProvisionedProductName"
        }
    }

    public struct CreatePortfolioShareOutput: AWSShape {

    }

    public struct DisassociateProductFromPortfolioOutput: AWSShape {

    }

    public struct ProvisioningArtifactParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterType", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ParameterConstraints", required: false, type: .structure), 
            AWSShapeMember(label: "DefaultValue", required: false, type: .string), 
            AWSShapeMember(label: "IsNoEcho", required: false, type: .boolean), 
            AWSShapeMember(label: "ParameterKey", required: false, type: .string)
        ]
        /// The parameter type.
        public let parameterType: String?
        /// The description of the parameter.
        public let description: String?
        /// Constraints that the administrator has put on a parameter.
        public let parameterConstraints: ParameterConstraints?
        /// The default value.
        public let defaultValue: String?
        /// If this value is true, the value for this parameter is obfuscated from view when the parameter is retrieved. This parameter is used to hide sensitive information.
        public let isNoEcho: Bool?
        /// The parameter key.
        public let parameterKey: String?

        public init(parameterType: String? = nil, description: String? = nil, parameterConstraints: ParameterConstraints? = nil, defaultValue: String? = nil, isNoEcho: Bool? = nil, parameterKey: String? = nil) {
            self.parameterType = parameterType
            self.description = description
            self.parameterConstraints = parameterConstraints
            self.defaultValue = defaultValue
            self.isNoEcho = isNoEcho
            self.parameterKey = parameterKey
        }

        private enum CodingKeys: String, CodingKey {
            case parameterType = "ParameterType"
            case description = "Description"
            case parameterConstraints = "ParameterConstraints"
            case defaultValue = "DefaultValue"
            case isNoEcho = "IsNoEcho"
            case parameterKey = "ParameterKey"
        }
    }

    public struct ListPrincipalsForPortfolioOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Principals", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// The IAM principals (users or roles) associated with the portfolio.
        public let principals: [Principal]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(principals: [Principal]? = nil, nextPageToken: String? = nil) {
            self.principals = principals
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case principals = "Principals"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct DescribeRecordInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The record identifier of the provisioned product. This identifier is returned by the request operation.
        public let id: String

        public init(pageSize: Int32? = nil, pageToken: String? = nil, acceptLanguage: String? = nil, id: String) {
            self.pageSize = pageSize
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct ListPortfoliosForProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the portfolios.
        public let portfolioDetails: [PortfolioDetail]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(portfolioDetails: [PortfolioDetail]? = nil, nextPageToken: String? = nil) {
            self.portfolioDetails = portfolioDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetails = "PortfolioDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct CreateConstraintOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ConstraintParameters", required: false, type: .string)
        ]
        /// Information about the constraint.
        public let constraintDetail: ConstraintDetail?
        /// The status of the current request.
        public let status: Status?
        /// The constraint parameters.
        public let constraintParameters: String?

        public init(constraintDetail: ConstraintDetail? = nil, status: Status? = nil, constraintParameters: String? = nil) {
            self.constraintDetail = constraintDetail
            self.status = status
            self.constraintParameters = constraintParameters
        }

        private enum CodingKeys: String, CodingKey {
            case constraintDetail = "ConstraintDetail"
            case status = "Status"
            case constraintParameters = "ConstraintParameters"
        }
    }

    public struct ProductViewDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ProductARN", required: false, type: .string), 
            AWSShapeMember(label: "ProductViewSummary", required: false, type: .structure), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp)
        ]
        /// The status of the product.    AVAILABLE - The product is ready for use.    CREATING - Product creation has started; the product is not ready for use.    FAILED - An action failed.  
        public let status: Status?
        /// The ARN of the product.
        public let productARN: String?
        /// Summary information about the product view.
        public let productViewSummary: ProductViewSummary?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?

        public init(status: Status? = nil, productARN: String? = nil, productViewSummary: ProductViewSummary? = nil, createdTime: TimeStamp? = nil) {
            self.status = status
            self.productARN = productARN
            self.productViewSummary = productViewSummary
            self.createdTime = createdTime
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case productARN = "ProductARN"
            case productViewSummary = "ProductViewSummary"
            case createdTime = "CreatedTime"
        }
    }

    public struct DescribeProvisioningArtifactInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Verbose", required: false, type: .boolean), 
            AWSShapeMember(label: "ProductId", required: true, type: .string)
        ]
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// Indicates whether a verbose level of detail is enabled.
        public let verbose: Bool?
        /// The product identifier.
        public let productId: String

        public init(provisioningArtifactId: String, acceptLanguage: String? = nil, verbose: Bool? = nil, productId: String) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.verbose = verbose
            self.productId = productId
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case acceptLanguage = "AcceptLanguage"
            case verbose = "Verbose"
            case productId = "ProductId"
        }
    }

    public struct CreateProvisioningArtifactInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Parameters", required: true, type: .structure), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The configuration for the provisioning artifact.
        public let parameters: ProvisioningArtifactProperties
        /// The product identifier.
        public let productId: String
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String

        public init(acceptLanguage: String? = nil, parameters: ProvisioningArtifactProperties, productId: String, idempotencyToken: String) {
            self.acceptLanguage = acceptLanguage
            self.parameters = parameters
            self.productId = productId
            self.idempotencyToken = idempotencyToken
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case parameters = "Parameters"
            case productId = "ProductId"
            case idempotencyToken = "IdempotencyToken"
        }
    }

    public struct UpdateConstraintOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ConstraintParameters", required: false, type: .string)
        ]
        /// Information about the constraint.
        public let constraintDetail: ConstraintDetail?
        /// The status of the current request.
        public let status: Status?
        /// The constraint parameters.
        public let constraintParameters: String?

        public init(constraintDetail: ConstraintDetail? = nil, status: Status? = nil, constraintParameters: String? = nil) {
            self.constraintDetail = constraintDetail
            self.status = status
            self.constraintParameters = constraintParameters
        }

        private enum CodingKeys: String, CodingKey {
            case constraintDetail = "ConstraintDetail"
            case status = "Status"
            case constraintParameters = "ConstraintParameters"
        }
    }

    public enum ProvisioningArtifactType: String, CustomStringConvertible, Codable {
        case cloudFormationTemplate = "CLOUD_FORMATION_TEMPLATE"
        case marketplaceAmi = "MARKETPLACE_AMI"
        case marketplaceCar = "MARKETPLACE_CAR"
        public var description: String { return self.rawValue }
    }

    public struct DescribeProvisionedProductPlanInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PlanId", required: true, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The plan identifier.
        public let planId: String
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, planId: String, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.planId = planId
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case planId = "PlanId"
            case pageToken = "PageToken"
        }
    }

    public struct DescribeProvisionedProductPlanOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionedProductPlanDetails", required: false, type: .structure), 
            AWSShapeMember(label: "ResourceChanges", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the plan.
        public let provisionedProductPlanDetails: ProvisionedProductPlanDetails?
        /// Information about the resource changes that will occur when the plan is executed.
        public let resourceChanges: [ResourceChange]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(provisionedProductPlanDetails: ProvisionedProductPlanDetails? = nil, resourceChanges: [ResourceChange]? = nil, nextPageToken: String? = nil) {
            self.provisionedProductPlanDetails = provisionedProductPlanDetails
            self.resourceChanges = resourceChanges
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case provisionedProductPlanDetails = "ProvisionedProductPlanDetails"
            case resourceChanges = "ResourceChanges"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct DescribeRecordOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure), 
            AWSShapeMember(label: "RecordOutputs", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the product.
        public let recordDetail: RecordDetail?
        /// Information about the product created as the result of a request. For example, the output for a CloudFormation-backed product that creates an S3 bucket would include the S3 bucket URL.
        public let recordOutputs: [RecordOutput]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(recordDetail: RecordDetail? = nil, recordOutputs: [RecordOutput]? = nil, nextPageToken: String? = nil) {
            self.recordDetail = recordDetail
            self.recordOutputs = recordOutputs
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetail = "RecordDetail"
            case recordOutputs = "RecordOutputs"
            case nextPageToken = "NextPageToken"
        }
    }

    public enum Replacement: String, CustomStringConvertible, Codable {
        case `true` = "TRUE"
        case `false` = "FALSE"
        case conditional = "CONDITIONAL"
        public var description: String { return self.rawValue }
    }

    public struct UpdateProvisionedProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure)
        ]
        /// Information about the result of the request.
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetail = "RecordDetail"
        }
    }

    public struct TerminateProvisionedProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure)
        ]
        /// Information about the result of this request.
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetail = "RecordDetail"
        }
    }

    public struct ListProvisioningArtifactsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the provisioning artifacts.
        public let provisioningArtifactDetails: [ProvisioningArtifactDetail]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(provisioningArtifactDetails: [ProvisioningArtifactDetail]? = nil, nextPageToken: String? = nil) {
            self.provisioningArtifactDetails = provisioningArtifactDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactDetails = "ProvisioningArtifactDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ProvisioningParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The parameter value.
        public let value: String?
        /// The parameter key.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct RecordOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputValue", required: false, type: .string), 
            AWSShapeMember(label: "OutputKey", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The output value.
        public let outputValue: String?
        /// The output key.
        public let outputKey: String?
        /// The description of the output.
        public let description: String?

        public init(outputValue: String? = nil, outputKey: String? = nil, description: String? = nil) {
            self.outputValue = outputValue
            self.outputKey = outputKey
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case outputValue = "OutputValue"
            case outputKey = "OutputKey"
            case description = "Description"
        }
    }

    public struct ProvisioningArtifact: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The description of the provisioning artifact.
        public let description: String?
        /// The name of the provisioning artifact.
        public let name: String?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The identifier of the provisioning artifact.
        public let id: String?

        public init(description: String? = nil, name: String? = nil, createdTime: TimeStamp? = nil, id: String? = nil) {
            self.description = description
            self.name = name
            self.createdTime = createdTime
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case name = "Name"
            case createdTime = "CreatedTime"
            case id = "Id"
        }
    }

    public struct DescribeProvisionedProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionedProductDetail", required: false, type: .structure), 
            AWSShapeMember(label: "CloudWatchDashboards", required: false, type: .list)
        ]
        /// Information about the provisioned product.
        public let provisionedProductDetail: ProvisionedProductDetail?
        /// Any CloudWatch dashboards that were created when provisioning the product.
        public let cloudWatchDashboards: [CloudWatchDashboard]?

        public init(provisionedProductDetail: ProvisionedProductDetail? = nil, cloudWatchDashboards: [CloudWatchDashboard]? = nil) {
            self.provisionedProductDetail = provisionedProductDetail
            self.cloudWatchDashboards = cloudWatchDashboards
        }

        private enum CodingKeys: String, CodingKey {
            case provisionedProductDetail = "ProvisionedProductDetail"
            case cloudWatchDashboards = "CloudWatchDashboards"
        }
    }

    public struct SearchProvisionedProductsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SortBy", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AccessLevelFilter", required: false, type: .structure), 
            AWSShapeMember(label: "SortOrder", required: false, type: .enum), 
            AWSShapeMember(label: "Filters", required: false, type: .map)
        ]
        /// The sort field. If no value is specified, the results are not sorted. The valid values are arn, id, name, and lastRecordId.
        public let sortBy: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The access level to use to obtain results. The default is User.
        public let accessLevelFilter: AccessLevelFilter?
        /// The sort order. If no value is specified, the results are not sorted.
        public let sortOrder: SortOrder?
        /// The search filters. When the key is SearchQuery, the searchable fields are arn, createdTime, id, lastRecordId, idempotencyToken, name, physicalId, productId, provisioningArtifact, type, status, tags, userArn, and userArnSession. Example: "SearchQuery":["status:AVAILABLE"] 
        public let filters: [ProvisionedProductViewFilterBy: [String]]?

        public init(sortBy: String? = nil, pageSize: Int32? = nil, acceptLanguage: String? = nil, pageToken: String? = nil, accessLevelFilter: AccessLevelFilter? = nil, sortOrder: SortOrder? = nil, filters: [ProvisionedProductViewFilterBy: [String]]? = nil) {
            self.sortBy = sortBy
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.pageToken = pageToken
            self.accessLevelFilter = accessLevelFilter
            self.sortOrder = sortOrder
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case sortBy = "SortBy"
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case pageToken = "PageToken"
            case accessLevelFilter = "AccessLevelFilter"
            case sortOrder = "SortOrder"
            case filters = "Filters"
        }
    }

    public struct ProvisioningArtifactSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactMetadata", required: false, type: .map), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The metadata for the provisioning artifact. This is used with AWS Marketplace products.
        public let provisioningArtifactMetadata: [String: String]?
        /// The description of the provisioning artifact.
        public let description: String?
        /// The name of the provisioning artifact.
        public let name: String?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The identifier of the provisioning artifact.
        public let id: String?

        public init(provisioningArtifactMetadata: [String: String]? = nil, description: String? = nil, name: String? = nil, createdTime: TimeStamp? = nil, id: String? = nil) {
            self.provisioningArtifactMetadata = provisioningArtifactMetadata
            self.description = description
            self.name = name
            self.createdTime = createdTime
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactMetadata = "ProvisioningArtifactMetadata"
            case description = "Description"
            case name = "Name"
            case createdTime = "CreatedTime"
            case id = "Id"
        }
    }

    public struct DeleteTagOptionOutput: AWSShape {

    }

    public struct AssociateProductWithPortfolioOutput: AWSShape {

    }

    public struct ListLaunchPathsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The product identifier.
        public let productId: String
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, productId: String, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case productId = "ProductId"
            case pageToken = "PageToken"
        }
    }

    public struct SearchProductsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductViewAggregations", required: false, type: .map), 
            AWSShapeMember(label: "ProductViewSummaries", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// The product view aggregations.
        public let productViewAggregations: [String: [ProductViewAggregationValue]]?
        /// Information about the product views.
        public let productViewSummaries: [ProductViewSummary]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(productViewAggregations: [String: [ProductViewAggregationValue]]? = nil, productViewSummaries: [ProductViewSummary]? = nil, nextPageToken: String? = nil) {
            self.productViewAggregations = productViewAggregations
            self.productViewSummaries = productViewSummaries
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case productViewAggregations = "ProductViewAggregations"
            case productViewSummaries = "ProductViewSummaries"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ListTagOptionsFilters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Active", required: false, type: .boolean)
        ]
        /// The TagOption value.
        public let value: String?
        /// The TagOption key.
        public let key: String?
        /// The active state.
        public let active: Bool?

        public init(value: String? = nil, key: String? = nil, active: Bool? = nil) {
            self.value = value
            self.key = key
            self.active = active
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
            case active = "Active"
        }
    }

    public struct DeleteConstraintOutput: AWSShape {

    }

    public enum ResourceAttribute: String, CustomStringConvertible, Codable {
        case properties = "PROPERTIES"
        case metadata = "METADATA"
        case creationpolicy = "CREATIONPOLICY"
        case updatepolicy = "UPDATEPOLICY"
        case deletionpolicy = "DELETIONPOLICY"
        case tags = "TAGS"
        public var description: String { return self.rawValue }
    }

    public struct ProvisionedProductPlanSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionProductId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionProductName", required: false, type: .string), 
            AWSShapeMember(label: "PlanId", required: false, type: .string), 
            AWSShapeMember(label: "PlanName", required: false, type: .string), 
            AWSShapeMember(label: "PlanType", required: false, type: .enum)
        ]
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String?
        /// The product identifier.
        public let provisionProductId: String?
        /// The user-friendly name of the provisioned product.
        public let provisionProductName: String?
        /// The plan identifier.
        public let planId: String?
        /// The name of the plan.
        public let planName: String?
        /// The plan type.
        public let planType: ProvisionedProductPlanType?

        public init(provisioningArtifactId: String? = nil, provisionProductId: String? = nil, provisionProductName: String? = nil, planId: String? = nil, planName: String? = nil, planType: ProvisionedProductPlanType? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.provisionProductId = provisionProductId
            self.provisionProductName = provisionProductName
            self.planId = planId
            self.planName = planName
            self.planType = planType
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case provisionProductId = "ProvisionProductId"
            case provisionProductName = "ProvisionProductName"
            case planId = "PlanId"
            case planName = "PlanName"
            case planType = "PlanType"
        }
    }

    public struct DescribeTagOptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The TagOption identifier.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct DisassociatePrincipalFromPortfolioOutput: AWSShape {

    }

    public struct ExecuteProvisionedProductPlanOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure)
        ]
        /// Information about the result of provisioning the product.
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetail = "RecordDetail"
        }
    }

    public struct DeleteConstraintInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The identifier of the constraint.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct CopyProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CopyProductToken", required: false, type: .string)
        ]
        /// The token to use to track the progress of the operation.
        public let copyProductToken: String?

        public init(copyProductToken: String? = nil) {
            self.copyProductToken = copyProductToken
        }

        private enum CodingKeys: String, CodingKey {
            case copyProductToken = "CopyProductToken"
        }
    }

    public struct DescribeProductViewInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The product view identifier.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct DeleteProvisioningArtifactInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String
        /// The product identifier.
        public let productId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(provisioningArtifactId: String, productId: String, acceptLanguage: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.productId = productId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case productId = "ProductId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct ListProvisionedProductPlansOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionedProductPlans", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the plans.
        public let provisionedProductPlans: [ProvisionedProductPlanSummary]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(provisionedProductPlans: [ProvisionedProductPlanSummary]? = nil, nextPageToken: String? = nil) {
            self.provisionedProductPlans = provisionedProductPlans
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case provisionedProductPlans = "ProvisionedProductPlans"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ParameterConstraints: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedValues", required: false, type: .list)
        ]
        /// The values that the administrator has allowed for the parameter.
        public let allowedValues: [String]?

        public init(allowedValues: [String]? = nil) {
            self.allowedValues = allowedValues
        }

        private enum CodingKeys: String, CodingKey {
            case allowedValues = "AllowedValues"
        }
    }

    public struct ResourceTargetDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequiresRecreation", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Attribute", required: false, type: .enum)
        ]
        /// If the attribute is Properties, indicates whether a change to this property causes the resource to be re-created.
        public let requiresRecreation: RequiresRecreation?
        /// If the attribute is Properties, the value is the name of the property. Otherwise, the value is null.
        public let name: String?
        /// The attribute to be changed.
        public let attribute: ResourceAttribute?

        public init(requiresRecreation: RequiresRecreation? = nil, name: String? = nil, attribute: ResourceAttribute? = nil) {
            self.requiresRecreation = requiresRecreation
            self.name = name
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case requiresRecreation = "RequiresRecreation"
            case name = "Name"
            case attribute = "Attribute"
        }
    }

    public enum ProvisionedProductPlanType: String, CustomStringConvertible, Codable {
        case cloudformation = "CLOUDFORMATION"
        public var description: String { return self.rawValue }
    }

    public enum ProductSource: String, CustomStringConvertible, Codable {
        case account = "ACCOUNT"
        public var description: String { return self.rawValue }
    }

    public struct ListPortfoliosForProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The product identifier.
        public let productId: String
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, productId: String, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case productId = "ProductId"
            case pageToken = "PageToken"
        }
    }

    public struct PortfolioDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DisplayName", required: false, type: .string), 
            AWSShapeMember(label: "ProviderName", required: false, type: .string), 
            AWSShapeMember(label: "ARN", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The name to use for display purposes.
        public let displayName: String?
        /// The name of the portfolio provider.
        public let providerName: String?
        /// The ARN assigned to the portfolio.
        public let arn: String?
        /// The description of the portfolio.
        public let description: String?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The portfolio identifier.
        public let id: String?

        public init(displayName: String? = nil, providerName: String? = nil, arn: String? = nil, description: String? = nil, createdTime: TimeStamp? = nil, id: String? = nil) {
            self.displayName = displayName
            self.providerName = providerName
            self.arn = arn
            self.description = description
            self.createdTime = createdTime
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case displayName = "DisplayName"
            case providerName = "ProviderName"
            case arn = "ARN"
            case description = "Description"
            case createdTime = "CreatedTime"
            case id = "Id"
        }
    }

    public struct CreateTagOptionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionDetail", required: false, type: .structure)
        ]
        /// Information about the TagOption.
        public let tagOptionDetail: TagOptionDetail?

        public init(tagOptionDetail: TagOptionDetail? = nil) {
            self.tagOptionDetail = tagOptionDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionDetail = "TagOptionDetail"
        }
    }

    public struct DescribeProvisioningParametersInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "PathId", required: false, type: .string)
        ]
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The product identifier.
        public let productId: String
        /// The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use ListLaunchPaths.
        public let pathId: String?

        public init(provisioningArtifactId: String, acceptLanguage: String? = nil, productId: String, pathId: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.pathId = pathId
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case acceptLanguage = "AcceptLanguage"
            case productId = "ProductId"
            case pathId = "PathId"
        }
    }

    public struct SearchProductsAsAdminOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductViewDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the product views.
        public let productViewDetails: [ProductViewDetail]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(productViewDetails: [ProductViewDetail]? = nil, nextPageToken: String? = nil) {
            self.productViewDetails = productViewDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case productViewDetails = "ProductViewDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ProductViewAggregationValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "ApproximateCount", required: false, type: .integer)
        ]
        /// The value of the product view aggregation.
        public let value: String?
        /// An approximate count of the products that match the value.
        public let approximateCount: Int32?

        public init(value: String? = nil, approximateCount: Int32? = nil) {
            self.value = value
            self.approximateCount = approximateCount
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case approximateCount = "ApproximateCount"
        }
    }

    public struct ResourceDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ARN", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The description of the resource.
        public let description: String?
        /// The ARN of the resource.
        public let arn: String?
        /// The name of the resource.
        public let name: String?
        /// The creation time of the resource.
        public let createdTime: TimeStamp?
        /// The identifier of the resource.
        public let id: String?

        public init(description: String? = nil, arn: String? = nil, name: String? = nil, createdTime: TimeStamp? = nil, id: String? = nil) {
            self.description = description
            self.arn = arn
            self.name = name
            self.createdTime = createdTime
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case arn = "ARN"
            case name = "Name"
            case createdTime = "CreatedTime"
            case id = "Id"
        }
    }

    public struct DeleteTagOptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The TagOption identifier.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct ListAcceptedPortfolioSharesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioShareType", required: false, type: .enum), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The type of shared portfolios to list. The default is to list imported portfolios.    AWS_SERVICECATALOG - List default portfolios    IMPORTED - List imported portfolios  
        public let portfolioShareType: PortfolioShareType?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, portfolioShareType: PortfolioShareType? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.portfolioShareType = portfolioShareType
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case portfolioShareType = "PortfolioShareType"
            case pageToken = "PageToken"
        }
    }

    public struct ExecuteProvisionedProductPlanInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlanId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string)
        ]
        /// The plan identifier.
        public let planId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String

        public init(planId: String, acceptLanguage: String? = nil, idempotencyToken: String) {
            self.planId = planId
            self.acceptLanguage = acceptLanguage
            self.idempotencyToken = idempotencyToken
        }

        private enum CodingKeys: String, CodingKey {
            case planId = "PlanId"
            case acceptLanguage = "AcceptLanguage"
            case idempotencyToken = "IdempotencyToken"
        }
    }

    public struct SearchProductsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "SortBy", required: false, type: .enum), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .map), 
            AWSShapeMember(label: "SortOrder", required: false, type: .enum), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The sort field. If no value is specified, the results are not sorted.
        public let sortBy: ProductViewSortBy?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The search filters. If no search filters are specified, the output includes all products to which the caller has access.
        public let filters: [ProductViewFilterBy: [String]]?
        /// The sort order. If no value is specified, the results are not sorted.
        public let sortOrder: SortOrder?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, sortBy: ProductViewSortBy? = nil, acceptLanguage: String? = nil, filters: [ProductViewFilterBy: [String]]? = nil, sortOrder: SortOrder? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.sortBy = sortBy
            self.acceptLanguage = acceptLanguage
            self.filters = filters
            self.sortOrder = sortOrder
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case sortBy = "SortBy"
            case acceptLanguage = "AcceptLanguage"
            case filters = "Filters"
            case sortOrder = "SortOrder"
            case pageToken = "PageToken"
        }
    }

    public struct RecordError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Code", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The numeric value of the error.
        public let code: String?
        /// The description of the error.
        public let description: String?

        public init(code: String? = nil, description: String? = nil) {
            self.code = code
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case code = "Code"
            case description = "Description"
        }
    }

    public struct UpdateConstraintInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The updated description of the constraint.
        public let description: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The identifier of the constraint.
        public let id: String

        public init(description: String? = nil, acceptLanguage: String? = nil, id: String) {
            self.description = description
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct ProvisionedProductDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LastRecordId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The current status of the provisioned product.    AVAILABLE - Stable state, ready to perform any operation. The most recent operation succeeded and completed.    UNDER_CHANGE - Transitive state, operations performed might not have valid results. Wait for an AVAILABLE status before performing operations.    TAINTED - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.    ERROR - An unexpected error occurred, the provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack.  
        public let status: ProvisionedProductStatus?
        /// The ARN of the provisioned product.
        public let arn: String?
        /// The record identifier of the last request performed on this provisioned product.
        public let lastRecordId: String?
        /// The user-friendly name of the provisioned product.
        public let name: String?
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String?
        /// The type of provisioned product. The supported value is CFN_STACK.
        public let `type`: String?
        /// The current status message of the provisioned product.
        public let statusMessage: String?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The identifier of the provisioned product.
        public let id: String?

        public init(status: ProvisionedProductStatus? = nil, arn: String? = nil, lastRecordId: String? = nil, name: String? = nil, idempotencyToken: String? = nil, type: String? = nil, statusMessage: String? = nil, createdTime: TimeStamp? = nil, id: String? = nil) {
            self.status = status
            self.arn = arn
            self.lastRecordId = lastRecordId
            self.name = name
            self.idempotencyToken = idempotencyToken
            self.`type` = `type`
            self.statusMessage = statusMessage
            self.createdTime = createdTime
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case arn = "Arn"
            case lastRecordId = "LastRecordId"
            case name = "Name"
            case idempotencyToken = "IdempotencyToken"
            case `type` = "Type"
            case statusMessage = "StatusMessage"
            case createdTime = "CreatedTime"
            case id = "Id"
        }
    }

    public struct ProvisionedProductPlanDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "NotificationArns", required: false, type: .list), 
            AWSShapeMember(label: "PlanType", required: false, type: .enum), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "PathId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionProductId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningParameters", required: false, type: .list), 
            AWSShapeMember(label: "PlanId", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "PlanName", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ProvisionProductName", required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string)
        ]
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String?
        /// The time when the plan was last updated.
        public let updatedTime: TimeStamp?
        /// Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.
        public let notificationArns: [String]?
        /// The plan type.
        public let planType: ProvisionedProductPlanType?
        /// One or more tags.
        public let tags: [Tag]?
        /// The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use ListLaunchPaths.
        public let pathId: String?
        /// The product identifier.
        public let provisionProductId: String?
        /// Parameters specified by the administrator that are required for provisioning the product.
        public let provisioningParameters: [UpdateProvisioningParameter]?
        /// The plan identifier.
        public let planId: String?
        /// The product identifier.
        public let productId: String?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The name of the plan.
        public let planName: String?
        /// The status.
        public let status: ProvisionedProductPlanStatus?
        /// The user-friendly name of the provisioned product.
        public let provisionProductName: String?
        /// The status message.
        public let statusMessage: String?

        public init(provisioningArtifactId: String? = nil, updatedTime: TimeStamp? = nil, notificationArns: [String]? = nil, planType: ProvisionedProductPlanType? = nil, tags: [Tag]? = nil, pathId: String? = nil, provisionProductId: String? = nil, provisioningParameters: [UpdateProvisioningParameter]? = nil, planId: String? = nil, productId: String? = nil, createdTime: TimeStamp? = nil, planName: String? = nil, status: ProvisionedProductPlanStatus? = nil, provisionProductName: String? = nil, statusMessage: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.updatedTime = updatedTime
            self.notificationArns = notificationArns
            self.planType = planType
            self.tags = tags
            self.pathId = pathId
            self.provisionProductId = provisionProductId
            self.provisioningParameters = provisioningParameters
            self.planId = planId
            self.productId = productId
            self.createdTime = createdTime
            self.planName = planName
            self.status = status
            self.provisionProductName = provisionProductName
            self.statusMessage = statusMessage
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case updatedTime = "UpdatedTime"
            case notificationArns = "NotificationArns"
            case planType = "PlanType"
            case tags = "Tags"
            case pathId = "PathId"
            case provisionProductId = "ProvisionProductId"
            case provisioningParameters = "ProvisioningParameters"
            case planId = "PlanId"
            case productId = "ProductId"
            case createdTime = "CreatedTime"
            case planName = "PlanName"
            case status = "Status"
            case provisionProductName = "ProvisionProductName"
            case statusMessage = "StatusMessage"
        }
    }

    public struct ProvisionProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure)
        ]
        /// Information about the result of provisioning the product.
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetail = "RecordDetail"
        }
    }

    public struct DeleteProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The product identifier.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct ListResourcesForTagOptionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceDetails", required: false, type: .list), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// Information about the resources.
        public let resourceDetails: [ResourceDetail]?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(resourceDetails: [ResourceDetail]? = nil, pageToken: String? = nil) {
            self.resourceDetails = resourceDetails
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceDetails = "ResourceDetails"
            case pageToken = "PageToken"
        }
    }

    public struct ListProvisioningArtifactsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The product identifier.
        public let productId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(productId: String, acceptLanguage: String? = nil) {
            self.productId = productId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct ResourceChange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Details", required: false, type: .list), 
            AWSShapeMember(label: "Action", required: false, type: .enum), 
            AWSShapeMember(label: "ResourceType", required: false, type: .string), 
            AWSShapeMember(label: "PhysicalResourceId", required: false, type: .string), 
            AWSShapeMember(label: "Replacement", required: false, type: .enum), 
            AWSShapeMember(label: "LogicalResourceId", required: false, type: .string), 
            AWSShapeMember(label: "Scope", required: false, type: .list)
        ]
        /// Information about the resource changes.
        public let details: [ResourceChangeDetail]?
        /// The change action.
        public let action: ChangeAction?
        /// The type of resource.
        public let resourceType: String?
        /// The ID of the resource, if it was already created.
        public let physicalResourceId: String?
        /// If the change type is Modify, indicates whether the existing resource is deleted and replaced with a new one.
        public let replacement: Replacement?
        /// The ID of the resource, as defined in the CloudFormation template.
        public let logicalResourceId: String?
        /// The change scope.
        public let scope: [ResourceAttribute]?

        public init(details: [ResourceChangeDetail]? = nil, action: ChangeAction? = nil, resourceType: String? = nil, physicalResourceId: String? = nil, replacement: Replacement? = nil, logicalResourceId: String? = nil, scope: [ResourceAttribute]? = nil) {
            self.details = details
            self.action = action
            self.resourceType = resourceType
            self.physicalResourceId = physicalResourceId
            self.replacement = replacement
            self.logicalResourceId = logicalResourceId
            self.scope = scope
        }

        private enum CodingKeys: String, CodingKey {
            case details = "Details"
            case action = "Action"
            case resourceType = "ResourceType"
            case physicalResourceId = "PhysicalResourceId"
            case replacement = "Replacement"
            case logicalResourceId = "LogicalResourceId"
            case scope = "Scope"
        }
    }

    public struct ListRecordHistoryInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "AccessLevelFilter", required: false, type: .structure), 
            AWSShapeMember(label: "SearchFilter", required: false, type: .structure), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The access level to use to obtain results. The default is User.
        public let accessLevelFilter: AccessLevelFilter?
        /// The search filter to scope the results.
        public let searchFilter: ListRecordHistorySearchFilter?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, accessLevelFilter: AccessLevelFilter? = nil, searchFilter: ListRecordHistorySearchFilter? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.accessLevelFilter = accessLevelFilter
            self.searchFilter = searchFilter
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case accessLevelFilter = "AccessLevelFilter"
            case searchFilter = "SearchFilter"
            case pageToken = "PageToken"
        }
    }

    public struct AssociateProductWithPortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "SourcePortfolioId", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The identifier of the source portfolio.
        public let sourcePortfolioId: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The product identifier.
        public let productId: String

        public init(acceptLanguage: String? = nil, sourcePortfolioId: String? = nil, portfolioId: String, productId: String) {
            self.acceptLanguage = acceptLanguage
            self.sourcePortfolioId = sourcePortfolioId
            self.portfolioId = portfolioId
            self.productId = productId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case sourcePortfolioId = "SourcePortfolioId"
            case portfolioId = "PortfolioId"
            case productId = "ProductId"
        }
    }

    public enum ProvisionedProductViewFilterBy: String, CustomStringConvertible, Codable {
        case searchquery = "SearchQuery"
        public var description: String { return self.rawValue }
    }

    public struct UpdateProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "RemoveTags", required: false, type: .list), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "SupportEmail", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Distributor", required: false, type: .string), 
            AWSShapeMember(label: "AddTags", required: false, type: .list), 
            AWSShapeMember(label: "SupportUrl", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "SupportDescription", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The product identifier.
        public let id: String
        /// The tags to remove from the product.
        public let removeTags: [String]?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The updated support email for the product.
        public let supportEmail: String?
        /// The updated product name.
        public let name: String?
        /// The updated distributor of the product.
        public let distributor: String?
        /// The tags to add to the product.
        public let addTags: [Tag]?
        /// The updated support URL for the product.
        public let supportUrl: String?
        /// The updated owner of the product.
        public let owner: String?
        /// The updated support description for the product.
        public let supportDescription: String?
        /// The updated description of the product.
        public let description: String?

        public init(id: String, removeTags: [String]? = nil, acceptLanguage: String? = nil, supportEmail: String? = nil, name: String? = nil, distributor: String? = nil, addTags: [Tag]? = nil, supportUrl: String? = nil, owner: String? = nil, supportDescription: String? = nil, description: String? = nil) {
            self.id = id
            self.removeTags = removeTags
            self.acceptLanguage = acceptLanguage
            self.supportEmail = supportEmail
            self.name = name
            self.distributor = distributor
            self.addTags = addTags
            self.supportUrl = supportUrl
            self.owner = owner
            self.supportDescription = supportDescription
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case removeTags = "RemoveTags"
            case acceptLanguage = "AcceptLanguage"
            case supportEmail = "SupportEmail"
            case name = "Name"
            case distributor = "Distributor"
            case addTags = "AddTags"
            case supportUrl = "SupportUrl"
            case owner = "Owner"
            case supportDescription = "SupportDescription"
            case description = "Description"
        }
    }

    public enum CopyProductStatus: String, CustomStringConvertible, Codable {
        case succeeded = "SUCCEEDED"
        case inProgress = "IN_PROGRESS"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public enum ProductViewSortBy: String, CustomStringConvertible, Codable {
        case title = "Title"
        case versioncount = "VersionCount"
        case creationdate = "CreationDate"
        public var description: String { return self.rawValue }
    }

    public struct TerminateProvisionedProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IgnoreErrors", required: false, type: .boolean), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "TerminateToken", required: true, type: .string), 
            AWSShapeMember(label: "ProvisionedProductId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductName", required: false, type: .string)
        ]
        /// If set to true, AWS Service Catalog stops managing the specified provisioned product even if it cannot delete the underlying resources.
        public let ignoreErrors: Bool?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// An idempotency token that uniquely identifies the termination request. This token is only valid during the termination process. After the provisioned product is terminated, subsequent requests to terminate the same provisioned product always return ResourceNotFound.
        public let terminateToken: String
        /// The identifier of the provisioned product. You cannot specify both ProvisionedProductName and ProvisionedProductId.
        public let provisionedProductId: String?
        /// The name of the provisioned product. You cannot specify both ProvisionedProductName and ProvisionedProductId.
        public let provisionedProductName: String?

        public init(ignoreErrors: Bool? = nil, acceptLanguage: String? = nil, terminateToken: String, provisionedProductId: String? = nil, provisionedProductName: String? = nil) {
            self.ignoreErrors = ignoreErrors
            self.acceptLanguage = acceptLanguage
            self.terminateToken = terminateToken
            self.provisionedProductId = provisionedProductId
            self.provisionedProductName = provisionedProductName
        }

        private enum CodingKeys: String, CodingKey {
            case ignoreErrors = "IgnoreErrors"
            case acceptLanguage = "AcceptLanguage"
            case terminateToken = "TerminateToken"
            case provisionedProductId = "ProvisionedProductId"
            case provisionedProductName = "ProvisionedProductName"
        }
    }

    public enum SortOrder: String, CustomStringConvertible, Codable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
        public var description: String { return self.rawValue }
    }

    public struct DeleteProvisionedProductPlanOutput: AWSShape {

    }

    public struct UpdateProvisioningArtifactInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "Active", required: false, type: .boolean), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String
        /// The updated description of the provisioning artifact.
        public let description: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The product identifier.
        public let productId: String
        /// Indicates whether the product version is active.
        public let active: Bool?
        /// The updated name of the provisioning artifact.
        public let name: String?

        public init(provisioningArtifactId: String, description: String? = nil, acceptLanguage: String? = nil, productId: String, active: Bool? = nil, name: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.description = description
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.active = active
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case description = "Description"
            case acceptLanguage = "AcceptLanguage"
            case productId = "ProductId"
            case active = "Active"
            case name = "Name"
        }
    }

    public struct RejectPortfolioShareOutput: AWSShape {

    }

    public struct CreatePortfolioOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// Information about the portfolio.
        public let portfolioDetail: PortfolioDetail?
        /// Information about the tags associated with the portfolio.
        public let tags: [Tag]?

        public init(portfolioDetail: PortfolioDetail? = nil, tags: [Tag]? = nil) {
            self.portfolioDetail = portfolioDetail
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetail = "PortfolioDetail"
            case tags = "Tags"
        }
    }

    public struct DescribePortfolioOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "TagOptions", required: false, type: .list)
        ]
        /// Information about the portfolio.
        public let portfolioDetail: PortfolioDetail?
        /// Information about the tags associated with the portfolio.
        public let tags: [Tag]?
        /// Information about the TagOptions associated with the portfolio.
        public let tagOptions: [TagOptionDetail]?

        public init(portfolioDetail: PortfolioDetail? = nil, tags: [Tag]? = nil, tagOptions: [TagOptionDetail]? = nil) {
            self.portfolioDetail = portfolioDetail
            self.tags = tags
            self.tagOptions = tagOptions
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetail = "PortfolioDetail"
            case tags = "Tags"
            case tagOptions = "TagOptions"
        }
    }

    public enum AccessLevelFilterKey: String, CustomStringConvertible, Codable {
        case account = "Account"
        case role = "Role"
        case user = "User"
        public var description: String { return self.rawValue }
    }

    public struct AccessLevelFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .enum)
        ]
        /// The user to which the access level applies. The only supported value is Self.
        public let value: String?
        /// The access level.    Account - Filter results based on the account.    Role - Filter results based on the federated role of the specified user.    User - Filter results based on the specified user.  
        public let key: AccessLevelFilterKey?

        public init(value: String? = nil, key: AccessLevelFilterKey? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct TagOptionDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Active", required: false, type: .boolean), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The TagOption key.
        public let key: String?
        /// The TagOption value.
        public let value: String?
        /// The TagOption active state.
        public let active: Bool?
        /// The TagOption identifier.
        public let id: String?

        public init(key: String? = nil, value: String? = nil, active: Bool? = nil, id: String? = nil) {
            self.key = key
            self.value = value
            self.active = active
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
            case active = "Active"
            case id = "Id"
        }
    }

    public struct ConstraintSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The type of constraint.    LAUNCH     NOTIFICATION     TEMPLATE   
        public let `type`: String?
        /// The description of the constraint.
        public let description: String?

        public init(type: String? = nil, description: String? = nil) {
            self.`type` = `type`
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case description = "Description"
        }
    }

    public struct ProvisionedProductAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "LastRecordId", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "UserArnSession", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: false, type: .string), 
            AWSShapeMember(label: "UserArn", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "PhysicalId", required: false, type: .string)
        ]
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String?
        /// The ARN of the provisioned product.
        public let arn: String?
        /// The record identifier of the last request performed on this provisioned product.
        public let lastRecordId: String?
        /// One or more tags.
        public let tags: [Tag]?
        /// The product identifier.
        public let productId: String?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The identifier of the provisioned product.
        public let id: String?
        /// The current status of the provisioned product.    AVAILABLE - Stable state, ready to perform any operation. The most recent operation succeeded and completed.    UNDER_CHANGE - Transitive state, operations performed might not have valid results. Wait for an AVAILABLE status before performing operations.    TAINTED - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.    ERROR - An unexpected error occurred, the provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack.  
        public let status: ProvisionedProductStatus?
        /// The ARN of the IAM user in the session. This ARN might contain a session ID.
        public let userArnSession: String?
        /// The user-friendly name of the provisioned product.
        public let name: String?
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String?
        /// The Amazon Resource Name (ARN) of the IAM user.
        public let userArn: String?
        /// The type of provisioned product. The supported value is CFN_STACK.
        public let `type`: String?
        /// The current status message of the provisioned product.
        public let statusMessage: String?
        /// The assigned identifier for the resource, such as an EC2 instance ID or an S3 bucket name.
        public let physicalId: String?

        public init(provisioningArtifactId: String? = nil, arn: String? = nil, lastRecordId: String? = nil, tags: [Tag]? = nil, productId: String? = nil, createdTime: TimeStamp? = nil, id: String? = nil, status: ProvisionedProductStatus? = nil, userArnSession: String? = nil, name: String? = nil, idempotencyToken: String? = nil, userArn: String? = nil, type: String? = nil, statusMessage: String? = nil, physicalId: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.arn = arn
            self.lastRecordId = lastRecordId
            self.tags = tags
            self.productId = productId
            self.createdTime = createdTime
            self.id = id
            self.status = status
            self.userArnSession = userArnSession
            self.name = name
            self.idempotencyToken = idempotencyToken
            self.userArn = userArn
            self.`type` = `type`
            self.statusMessage = statusMessage
            self.physicalId = physicalId
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case arn = "Arn"
            case lastRecordId = "LastRecordId"
            case tags = "Tags"
            case productId = "ProductId"
            case createdTime = "CreatedTime"
            case id = "Id"
            case status = "Status"
            case userArnSession = "UserArnSession"
            case name = "Name"
            case idempotencyToken = "IdempotencyToken"
            case userArn = "UserArn"
            case `type` = "Type"
            case statusMessage = "StatusMessage"
            case physicalId = "PhysicalId"
        }
    }

    public struct ProductViewSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HasDefaultPath", required: false, type: .boolean), 
            AWSShapeMember(label: "ShortDescription", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "SupportEmail", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Distributor", required: false, type: .string), 
            AWSShapeMember(label: "SupportUrl", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "SupportDescription", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum)
        ]
        /// Indicates whether the product has a default path. If the product does not have a default path, call ListLaunchPaths to disambiguate between paths. Otherwise, ListLaunchPaths is not required, and the output of ProductViewSummary can be used directly with DescribeProvisioningParameters.
        public let hasDefaultPath: Bool?
        /// Short description of the product.
        public let shortDescription: String?
        /// The product view identifier.
        public let id: String?
        /// The email contact information to obtain support for this Product.
        public let supportEmail: String?
        /// The name of the product.
        public let name: String?
        /// The distributor of the product. Contact the product administrator for the significance of this value.
        public let distributor: String?
        /// The URL information to obtain support for this Product.
        public let supportUrl: String?
        /// The owner of the product. Contact the product administrator for the significance of this value.
        public let owner: String?
        /// The product identifier.
        public let productId: String?
        /// The description of the support for this Product.
        public let supportDescription: String?
        /// The product type. Contact the product administrator for the significance of this value. If this value is MARKETPLACE, the product was created by AWS Marketplace.
        public let `type`: ProductType?

        public init(hasDefaultPath: Bool? = nil, shortDescription: String? = nil, id: String? = nil, supportEmail: String? = nil, name: String? = nil, distributor: String? = nil, supportUrl: String? = nil, owner: String? = nil, productId: String? = nil, supportDescription: String? = nil, type: ProductType? = nil) {
            self.hasDefaultPath = hasDefaultPath
            self.shortDescription = shortDescription
            self.id = id
            self.supportEmail = supportEmail
            self.name = name
            self.distributor = distributor
            self.supportUrl = supportUrl
            self.owner = owner
            self.productId = productId
            self.supportDescription = supportDescription
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case hasDefaultPath = "HasDefaultPath"
            case shortDescription = "ShortDescription"
            case id = "Id"
            case supportEmail = "SupportEmail"
            case name = "Name"
            case distributor = "Distributor"
            case supportUrl = "SupportUrl"
            case owner = "Owner"
            case productId = "ProductId"
            case supportDescription = "SupportDescription"
            case `type` = "Type"
        }
    }

    public enum RecordStatus: String, CustomStringConvertible, Codable {
        case created = "CREATED"
        case inProgress = "IN_PROGRESS"
        case inProgressInError = "IN_PROGRESS_IN_ERROR"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct UpdateProvisioningArtifactOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ProvisioningArtifactDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Info", required: false, type: .map)
        ]
        /// The status of the current request.
        public let status: Status?
        /// Information about the provisioning artifact.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?
        /// The URL of the CloudFormation template in Amazon S3.
        public let info: [String: String]?

        public init(status: Status? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, info: [String: String]? = nil) {
            self.status = status
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.info = info
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case provisioningArtifactDetail = "ProvisioningArtifactDetail"
            case info = "Info"
        }
    }

    public struct RejectPortfolioShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(portfolioId: String, acceptLanguage: String? = nil) {
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioId = "PortfolioId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct ListTagOptionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionDetails", required: false, type: .list), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// Information about the TagOptions.
        public let tagOptionDetails: [TagOptionDetail]?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(tagOptionDetails: [TagOptionDetail]? = nil, pageToken: String? = nil) {
            self.tagOptionDetails = tagOptionDetails
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionDetails = "TagOptionDetails"
            case pageToken = "PageToken"
        }
    }

    public struct DescribeCopyProductStatusInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CopyProductToken", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The token for the copy product operation. This token is returned by CopyProduct.
        public let copyProductToken: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(copyProductToken: String, acceptLanguage: String? = nil) {
            self.copyProductToken = copyProductToken
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case copyProductToken = "CopyProductToken"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public enum EvaluationType: String, CustomStringConvertible, Codable {
        case `static` = "STATIC"
        case dynamic = "DYNAMIC"
        public var description: String { return self.rawValue }
    }

    public struct CloudWatchDashboard: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the CloudWatch dashboard.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct DescribeConstraintOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ConstraintParameters", required: false, type: .string)
        ]
        /// Information about the constraint.
        public let constraintDetail: ConstraintDetail?
        /// The status of the current request.
        public let status: Status?
        /// The constraint parameters.
        public let constraintParameters: String?

        public init(constraintDetail: ConstraintDetail? = nil, status: Status? = nil, constraintParameters: String? = nil) {
            self.constraintDetail = constraintDetail
            self.status = status
            self.constraintParameters = constraintParameters
        }

        private enum CodingKeys: String, CodingKey {
            case constraintDetail = "ConstraintDetail"
            case status = "Status"
            case constraintParameters = "ConstraintParameters"
        }
    }

    public enum Status: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case creating = "CREATING"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct Principal: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrincipalARN", required: false, type: .string), 
            AWSShapeMember(label: "PrincipalType", required: false, type: .enum)
        ]
        /// The ARN of the principal (IAM user, role, or group).
        public let principalARN: String?
        /// The principal type. The supported value is IAM.
        public let principalType: PrincipalType?

        public init(principalARN: String? = nil, principalType: PrincipalType? = nil) {
            self.principalARN = principalARN
            self.principalType = principalType
        }

        private enum CodingKeys: String, CodingKey {
            case principalARN = "PrincipalARN"
            case principalType = "PrincipalType"
        }
    }

    public struct ListTagOptionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The search filters. If no search filters are specified, the output includes all TagOptions.
        public let filters: ListTagOptionsFilters?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, filters: ListTagOptionsFilters? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.filters = filters
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case filters = "Filters"
            case pageToken = "PageToken"
        }
    }

    public struct UpdateTagOptionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionDetail", required: false, type: .structure)
        ]
        /// Information about the TagOption.
        public let tagOptionDetail: TagOptionDetail?

        public init(tagOptionDetail: TagOptionDetail? = nil) {
            self.tagOptionDetail = tagOptionDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionDetail = "TagOptionDetail"
        }
    }

    public struct ProvisioningArtifactDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Active", required: false, type: .boolean), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Indicates whether the product version is active.
        public let active: Bool?
        /// The description of the provisioning artifact.
        public let description: String?
        /// The type of provisioning artifact.    CLOUD_FORMATION_TEMPLATE - AWS CloudFormation template    MARKETPLACE_AMI - AWS Marketplace AMI    MARKETPLACE_CAR - AWS Marketplace Clusters and AWS Resources  
        public let `type`: ProvisioningArtifactType?
        /// The name of the provisioning artifact.
        public let name: String?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The identifier of the provisioning artifact.
        public let id: String?

        public init(active: Bool? = nil, description: String? = nil, type: ProvisioningArtifactType? = nil, name: String? = nil, createdTime: TimeStamp? = nil, id: String? = nil) {
            self.active = active
            self.description = description
            self.`type` = `type`
            self.name = name
            self.createdTime = createdTime
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case active = "Active"
            case description = "Description"
            case `type` = "Type"
            case name = "Name"
            case createdTime = "CreatedTime"
            case id = "Id"
        }
    }

    public struct AssociateTagOptionWithResourceOutput: AWSShape {

    }

    public struct ListConstraintsForPortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The product identifier.
        public let productId: String?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, portfolioId: String, productId: String? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.productId = productId
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case portfolioId = "PortfolioId"
            case productId = "ProductId"
            case pageToken = "PageToken"
        }
    }

    public struct DisassociateProductFromPortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The portfolio identifier.
        public let portfolioId: String
        /// The product identifier.
        public let productId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(portfolioId: String, productId: String, acceptLanguage: String? = nil) {
            self.portfolioId = portfolioId
            self.productId = productId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioId = "PortfolioId"
            case productId = "ProductId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct DeleteProductOutput: AWSShape {

    }

    public struct ListPortfoliosOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the portfolios.
        public let portfolioDetails: [PortfolioDetail]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(portfolioDetails: [PortfolioDetail]? = nil, nextPageToken: String? = nil) {
            self.portfolioDetails = portfolioDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetails = "PortfolioDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ListPrincipalsForPortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, acceptLanguage: String? = nil, portfolioId: String, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case acceptLanguage = "AcceptLanguage"
            case portfolioId = "PortfolioId"
            case pageToken = "PageToken"
        }
    }

    public struct CopyProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetProductId", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "TargetProductName", required: false, type: .string), 
            AWSShapeMember(label: "SourceProductArn", required: true, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "SourceProvisioningArtifactIdentifiers", required: false, type: .list), 
            AWSShapeMember(label: "CopyOptions", required: false, type: .list)
        ]
        /// The identifier of the target product. By default, a new product is created.
        public let targetProductId: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// A name for the target product. The default is the name of the source product.
        public let targetProductName: String?
        /// The Amazon Resource Name (ARN) of the source product.
        public let sourceProductArn: String
        ///  A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request. 
        public let idempotencyToken: String
        /// The identifiers of the provisioning artifacts (also known as versions) of the product to copy. By default, all provisioning artifacts are copied.
        public let sourceProvisioningArtifactIdentifiers: [[ProvisioningArtifactPropertyName: String]]?
        /// The copy options. If the value is CopyTags, the tags from the source product are copied to the target product.
        public let copyOptions: [CopyOption]?

        public init(targetProductId: String? = nil, acceptLanguage: String? = nil, targetProductName: String? = nil, sourceProductArn: String, idempotencyToken: String, sourceProvisioningArtifactIdentifiers: [[ProvisioningArtifactPropertyName: String]]? = nil, copyOptions: [CopyOption]? = nil) {
            self.targetProductId = targetProductId
            self.acceptLanguage = acceptLanguage
            self.targetProductName = targetProductName
            self.sourceProductArn = sourceProductArn
            self.idempotencyToken = idempotencyToken
            self.sourceProvisioningArtifactIdentifiers = sourceProvisioningArtifactIdentifiers
            self.copyOptions = copyOptions
        }

        private enum CodingKeys: String, CodingKey {
            case targetProductId = "TargetProductId"
            case acceptLanguage = "AcceptLanguage"
            case targetProductName = "TargetProductName"
            case sourceProductArn = "SourceProductArn"
            case idempotencyToken = "IdempotencyToken"
            case sourceProvisioningArtifactIdentifiers = "SourceProvisioningArtifactIdentifiers"
            case copyOptions = "CopyOptions"
        }
    }

    public struct DeleteProvisioningArtifactOutput: AWSShape {

    }

    public struct DeletePortfolioShareOutput: AWSShape {

    }

    public struct ListProvisionedProductPlansInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "ProvisionProductId", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "AccessLevelFilter", required: false, type: .structure), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The product identifier.
        public let provisionProductId: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The access level to use to obtain results. The default is User.
        public let accessLevelFilter: AccessLevelFilter?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(pageSize: Int32? = nil, provisionProductId: String? = nil, acceptLanguage: String? = nil, accessLevelFilter: AccessLevelFilter? = nil, pageToken: String? = nil) {
            self.pageSize = pageSize
            self.provisionProductId = provisionProductId
            self.acceptLanguage = acceptLanguage
            self.accessLevelFilter = accessLevelFilter
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case pageSize = "PageSize"
            case provisionProductId = "ProvisionProductId"
            case acceptLanguage = "AcceptLanguage"
            case accessLevelFilter = "AccessLevelFilter"
            case pageToken = "PageToken"
        }
    }

    public struct SearchProvisionedProductsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TotalResultsCount", required: false, type: .integer), 
            AWSShapeMember(label: "ProvisionedProducts", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// The number of provisioned products found.
        public let totalResultsCount: Int32?
        /// Information about the provisioned products.
        public let provisionedProducts: [ProvisionedProductAttribute]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(totalResultsCount: Int32? = nil, provisionedProducts: [ProvisionedProductAttribute]? = nil, nextPageToken: String? = nil) {
            self.totalResultsCount = totalResultsCount
            self.provisionedProducts = provisionedProducts
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case totalResultsCount = "TotalResultsCount"
            case provisionedProducts = "ProvisionedProducts"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct DescribeCopyProductStatusOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CopyProductStatus", required: false, type: .enum), 
            AWSShapeMember(label: "StatusDetail", required: false, type: .string), 
            AWSShapeMember(label: "TargetProductId", required: false, type: .string)
        ]
        /// The status of the copy product operation.
        public let copyProductStatus: CopyProductStatus?
        /// The status message.
        public let statusDetail: String?
        /// The identifier of the copied product.
        public let targetProductId: String?

        public init(copyProductStatus: CopyProductStatus? = nil, statusDetail: String? = nil, targetProductId: String? = nil) {
            self.copyProductStatus = copyProductStatus
            self.statusDetail = statusDetail
            self.targetProductId = targetProductId
        }

        private enum CodingKeys: String, CodingKey {
            case copyProductStatus = "CopyProductStatus"
            case statusDetail = "StatusDetail"
            case targetProductId = "TargetProductId"
        }
    }

    public struct DescribeProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductViewSummary", required: false, type: .structure), 
            AWSShapeMember(label: "ProvisioningArtifacts", required: false, type: .list)
        ]
        /// Summary information about the product view.
        public let productViewSummary: ProductViewSummary?
        /// Information about the provisioning artifacts for the specified product.
        public let provisioningArtifacts: [ProvisioningArtifact]?

        public init(productViewSummary: ProductViewSummary? = nil, provisioningArtifacts: [ProvisioningArtifact]? = nil) {
            self.productViewSummary = productViewSummary
            self.provisioningArtifacts = provisioningArtifacts
        }

        private enum CodingKeys: String, CodingKey {
            case productViewSummary = "ProductViewSummary"
            case provisioningArtifacts = "ProvisioningArtifacts"
        }
    }

    public struct RecordDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ProvisionedProductType", required: false, type: .string), 
            AWSShapeMember(label: "PathId", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "RecordErrors", required: false, type: .list), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ProvisionedProductId", required: false, type: .string), 
            AWSShapeMember(label: "RecordType", required: false, type: .string), 
            AWSShapeMember(label: "RecordId", required: false, type: .string), 
            AWSShapeMember(label: "RecordTags", required: false, type: .list), 
            AWSShapeMember(label: "ProvisionedProductName", required: false, type: .string)
        ]
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String?
        /// The time when the record was last updated.
        public let updatedTime: TimeStamp?
        /// The type of provisioned product. The supported value is CFN_STACK.
        public let provisionedProductType: String?
        /// The path identifier.
        public let pathId: String?
        /// The product identifier.
        public let productId: String?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The errors that occurred.
        public let recordErrors: [RecordError]?
        /// The status of the provisioned product.    CREATED - The request was created but the operation has not started.    IN_PROGRESS - The requested operation is in progress.    IN_PROGRESS_IN_ERROR - The provisioned product is under change but the requested operation failed and some remediation is occurring. For example, a rollback.    SUCCEEDED - The requested operation has successfully completed.    FAILED - The requested operation has unsuccessfully completed. Investigate using the error messages returned.  
        public let status: RecordStatus?
        /// The identifier of the provisioned product.
        public let provisionedProductId: String?
        /// The record type.    PROVISION_PRODUCT     UPDATE_PROVISIONED_PRODUCT     TERMINATE_PROVISIONED_PRODUCT   
        public let recordType: String?
        /// The identifier of the record.
        public let recordId: String?
        /// One or more tags.
        public let recordTags: [RecordTag]?
        /// The user-friendly name of the provisioned product.
        public let provisionedProductName: String?

        public init(provisioningArtifactId: String? = nil, updatedTime: TimeStamp? = nil, provisionedProductType: String? = nil, pathId: String? = nil, productId: String? = nil, createdTime: TimeStamp? = nil, recordErrors: [RecordError]? = nil, status: RecordStatus? = nil, provisionedProductId: String? = nil, recordType: String? = nil, recordId: String? = nil, recordTags: [RecordTag]? = nil, provisionedProductName: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.updatedTime = updatedTime
            self.provisionedProductType = provisionedProductType
            self.pathId = pathId
            self.productId = productId
            self.createdTime = createdTime
            self.recordErrors = recordErrors
            self.status = status
            self.provisionedProductId = provisionedProductId
            self.recordType = recordType
            self.recordId = recordId
            self.recordTags = recordTags
            self.provisionedProductName = provisionedProductName
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case updatedTime = "UpdatedTime"
            case provisionedProductType = "ProvisionedProductType"
            case pathId = "PathId"
            case productId = "ProductId"
            case createdTime = "CreatedTime"
            case recordErrors = "RecordErrors"
            case status = "Status"
            case provisionedProductId = "ProvisionedProductId"
            case recordType = "RecordType"
            case recordId = "RecordId"
            case recordTags = "RecordTags"
            case provisionedProductName = "ProvisionedProductName"
        }
    }

    public struct DescribeProvisioningArtifactOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ProvisioningArtifactDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Info", required: false, type: .map)
        ]
        /// The status of the current request.
        public let status: Status?
        /// Information about the provisioning artifact.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?
        /// The URL of the CloudFormation template in Amazon S3.
        public let info: [String: String]?

        public init(status: Status? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, info: [String: String]? = nil) {
            self.status = status
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.info = info
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case provisioningArtifactDetail = "ProvisioningArtifactDetail"
            case info = "Info"
        }
    }

    public struct CreateProvisionedProductPlanInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "NotificationArns", required: false, type: .list), 
            AWSShapeMember(label: "PlanType", required: true, type: .enum), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "PathId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningParameters", required: false, type: .list), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "PlanName", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "ProvisionedProductName", required: true, type: .string)
        ]
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.
        public let notificationArns: [String]?
        /// The plan type.
        public let planType: ProvisionedProductPlanType
        /// One or more tags.
        public let tags: [Tag]?
        /// The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use ListLaunchPaths.
        public let pathId: String?
        /// Parameters specified by the administrator that are required for provisioning the product.
        public let provisioningParameters: [UpdateProvisioningParameter]?
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String
        /// The name of the plan.
        public let planName: String
        /// The product identifier.
        public let productId: String
        /// A user-friendly name for the provisioned product. This value must be unique for the AWS account and cannot be updated after the product is provisioned.
        public let provisionedProductName: String

        public init(provisioningArtifactId: String, acceptLanguage: String? = nil, notificationArns: [String]? = nil, planType: ProvisionedProductPlanType, tags: [Tag]? = nil, pathId: String? = nil, provisioningParameters: [UpdateProvisioningParameter]? = nil, idempotencyToken: String, planName: String, productId: String, provisionedProductName: String) {
            self.provisioningArtifactId = provisioningArtifactId
            self.acceptLanguage = acceptLanguage
            self.notificationArns = notificationArns
            self.planType = planType
            self.tags = tags
            self.pathId = pathId
            self.provisioningParameters = provisioningParameters
            self.idempotencyToken = idempotencyToken
            self.planName = planName
            self.productId = productId
            self.provisionedProductName = provisionedProductName
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case acceptLanguage = "AcceptLanguage"
            case notificationArns = "NotificationArns"
            case planType = "PlanType"
            case tags = "Tags"
            case pathId = "PathId"
            case provisioningParameters = "ProvisioningParameters"
            case idempotencyToken = "IdempotencyToken"
            case planName = "PlanName"
            case productId = "ProductId"
            case provisionedProductName = "ProvisionedProductName"
        }
    }

    public struct DisassociateTagOptionFromResourceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "TagOptionId", required: true, type: .string)
        ]
        /// The resource identifier.
        public let resourceId: String
        /// The TagOption identifier.
        public let tagOptionId: String

        public init(resourceId: String, tagOptionId: String) {
            self.resourceId = resourceId
            self.tagOptionId = tagOptionId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tagOptionId = "TagOptionId"
        }
    }

    public struct AssociateTagOptionWithResourceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "TagOptionId", required: true, type: .string)
        ]
        /// The resource identifier.
        public let resourceId: String
        /// The TagOption identifier.
        public let tagOptionId: String

        public init(resourceId: String, tagOptionId: String) {
            self.resourceId = resourceId
            self.tagOptionId = tagOptionId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tagOptionId = "TagOptionId"
        }
    }

    public enum ProvisionedProductPlanStatus: String, CustomStringConvertible, Codable {
        case createInProgress = "CREATE_IN_PROGRESS"
        case createSuccess = "CREATE_SUCCESS"
        case createFailed = "CREATE_FAILED"
        case executeInProgress = "EXECUTE_IN_PROGRESS"
        case executeSuccess = "EXECUTE_SUCCESS"
        case executeFailed = "EXECUTE_FAILED"
        public var description: String { return self.rawValue }
    }

    public struct DisassociateTagOptionFromResourceOutput: AWSShape {

    }

    public struct AcceptPortfolioShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(portfolioId: String, acceptLanguage: String? = nil) {
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioId = "PortfolioId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct RecordTag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The value for this tag.
        public let value: String?
        /// The key for this tag.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct ListAcceptedPortfolioSharesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the portfolios.
        public let portfolioDetails: [PortfolioDetail]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(portfolioDetails: [PortfolioDetail]? = nil, nextPageToken: String? = nil) {
            self.portfolioDetails = portfolioDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetails = "PortfolioDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct UpdatePortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "RemoveTags", required: false, type: .list), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "AddTags", required: false, type: .list), 
            AWSShapeMember(label: "DisplayName", required: false, type: .string), 
            AWSShapeMember(label: "ProviderName", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The portfolio identifier.
        public let id: String
        /// The tags to remove.
        public let removeTags: [String]?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The tags to add.
        public let addTags: [Tag]?
        /// The name to use for display purposes.
        public let displayName: String?
        /// The updated name of the portfolio provider.
        public let providerName: String?
        /// The updated description of the portfolio.
        public let description: String?

        public init(id: String, removeTags: [String]? = nil, acceptLanguage: String? = nil, addTags: [Tag]? = nil, displayName: String? = nil, providerName: String? = nil, description: String? = nil) {
            self.id = id
            self.removeTags = removeTags
            self.acceptLanguage = acceptLanguage
            self.addTags = addTags
            self.displayName = displayName
            self.providerName = providerName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case removeTags = "RemoveTags"
            case acceptLanguage = "AcceptLanguage"
            case addTags = "AddTags"
            case displayName = "DisplayName"
            case providerName = "ProviderName"
            case description = "Description"
        }
    }

    public struct DeletePortfolioOutput: AWSShape {

    }

    public struct AssociatePrincipalWithPortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrincipalARN", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PrincipalType", required: true, type: .enum), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string)
        ]
        /// The ARN of the principal (IAM user, role, or group).
        public let principalARN: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The principal type. The supported value is IAM.
        public let principalType: PrincipalType
        /// The portfolio identifier.
        public let portfolioId: String

        public init(principalARN: String, acceptLanguage: String? = nil, principalType: PrincipalType, portfolioId: String) {
            self.principalARN = principalARN
            self.acceptLanguage = acceptLanguage
            self.principalType = principalType
            self.portfolioId = portfolioId
        }

        private enum CodingKeys: String, CodingKey {
            case principalARN = "PrincipalARN"
            case acceptLanguage = "AcceptLanguage"
            case principalType = "PrincipalType"
            case portfolioId = "PortfolioId"
        }
    }

    public struct DescribePortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct DescribeProductAsAdminInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The product identifier.
        public let id: String

        public init(acceptLanguage: String? = nil, id: String) {
            self.acceptLanguage = acceptLanguage
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case id = "Id"
        }
    }

    public struct CreateProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "SupportEmail", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Distributor", required: false, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "ProductType", required: true, type: .enum), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ProvisioningArtifactParameters", required: true, type: .structure), 
            AWSShapeMember(label: "SupportUrl", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: true, type: .string), 
            AWSShapeMember(label: "SupportDescription", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The contact email for product support.
        public let supportEmail: String?
        /// The name of the product.
        public let name: String
        /// The distributor of the product.
        public let distributor: String?
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String
        /// The type of product.
        public let productType: ProductType
        /// One or more tags.
        public let tags: [Tag]?
        /// The configuration of the provisioning artifact.
        public let provisioningArtifactParameters: ProvisioningArtifactProperties
        /// The contact URL for product support.
        public let supportUrl: String?
        /// The owner of the product.
        public let owner: String
        /// The support information about the product.
        public let supportDescription: String?
        /// The description of the product.
        public let description: String?

        public init(acceptLanguage: String? = nil, supportEmail: String? = nil, name: String, distributor: String? = nil, idempotencyToken: String, productType: ProductType, tags: [Tag]? = nil, provisioningArtifactParameters: ProvisioningArtifactProperties, supportUrl: String? = nil, owner: String, supportDescription: String? = nil, description: String? = nil) {
            self.acceptLanguage = acceptLanguage
            self.supportEmail = supportEmail
            self.name = name
            self.distributor = distributor
            self.idempotencyToken = idempotencyToken
            self.productType = productType
            self.tags = tags
            self.provisioningArtifactParameters = provisioningArtifactParameters
            self.supportUrl = supportUrl
            self.owner = owner
            self.supportDescription = supportDescription
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case supportEmail = "SupportEmail"
            case name = "Name"
            case distributor = "Distributor"
            case idempotencyToken = "IdempotencyToken"
            case productType = "ProductType"
            case tags = "Tags"
            case provisioningArtifactParameters = "ProvisioningArtifactParameters"
            case supportUrl = "SupportUrl"
            case owner = "Owner"
            case supportDescription = "SupportDescription"
            case description = "Description"
        }
    }

    public struct CreateProvisioningArtifactOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ProvisioningArtifactDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Info", required: false, type: .map)
        ]
        /// The status of the current request.
        public let status: Status?
        /// Information about the provisioning artifact.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?
        /// The URL of the CloudFormation template in Amazon S3, in JSON format.
        public let info: [String: String]?

        public init(status: Status? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, info: [String: String]? = nil) {
            self.status = status
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.info = info
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case provisioningArtifactDetail = "ProvisioningArtifactDetail"
            case info = "Info"
        }
    }

    public struct ListPortfolioAccessInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The portfolio identifier.
        public let portfolioId: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(portfolioId: String, acceptLanguage: String? = nil) {
            self.portfolioId = portfolioId
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioId = "PortfolioId"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct UpdateTagOptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Active", required: false, type: .boolean), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The updated value.
        public let value: String?
        /// The updated active state.
        public let active: Bool?
        /// The TagOption identifier.
        public let id: String

        public init(value: String? = nil, active: Bool? = nil, id: String) {
            self.value = value
            self.active = active
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case active = "Active"
            case id = "Id"
        }
    }

}