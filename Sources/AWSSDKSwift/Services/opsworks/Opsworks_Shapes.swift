// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Opsworks {

    public struct DeregisterVolumeRequest: Serializable, Initializable {
        /// The AWS OpsWorks volume ID, which is the GUID that AWS OpsWorks assigned to the instance when you registered the volume with the stack, not the Amazon EC2 volume ID.
        var volumeId: String = ""

        public init() {}

        public init(volumeId: String) {
            self.volumeId = volumeId
        }

    }

    public struct CreateUserProfileRequest: Serializable, Initializable {
        /// The user's IAM ARN; this can also be a federated user's ARN.
        var iamUserArn: String = ""
        /// The user's public SSH key.
        var sshPublicKey: String? = nil
        /// The user's SSH user name. The allowable characters are [a-z], [A-Z], [0-9], '-', and '_'. If the specified name includes other punctuation marks, AWS OpsWorks removes them. For example, my.name will be changed to myname. If you do not specify an SSH user name, AWS OpsWorks generates one from the IAM user name. 
        var sshUsername: String? = nil
        /// Whether users can specify their own SSH public key through the My Settings page. For more information, see Setting an IAM User's Public SSH Key.
        var allowSelfManagement: Bool? = nil

        public init() {}

        public init(iamUserArn: String, sshPublicKey: String? = nil, sshUsername: String? = nil, allowSelfManagement: Bool? = nil) {
            self.iamUserArn = iamUserArn
            self.sshPublicKey = sshPublicKey
            self.sshUsername = sshUsername
            self.allowSelfManagement = allowSelfManagement
        }

    }

    public struct DescribeRdsDbInstancesRequest: Serializable, Initializable {
        /// The stack ID that the instances are registered with. The operation returns descriptions of all registered Amazon RDS instances.
        var stackId: String = ""
        /// An array containing the ARNs of the instances to be described.
        var rdsDbInstanceArns: [String]? = nil

        public init() {}

        public init(stackId: String, rdsDbInstanceArns: [String]? = nil) {
            self.stackId = stackId
            self.rdsDbInstanceArns = rdsDbInstanceArns
        }

    }

    public struct Layer: Serializable, Initializable {
        /// The layer short name.
        var shortname: String? = nil
        /// An array of Package objects that describe the layer's packages.
        var packages: [String]? = nil
        /// A LifeCycleEventConfiguration object that specifies the Shutdown event configuration.
        var lifecycleEventConfiguration: LifecycleEventConfiguration? = nil
        /// A LayerCustomRecipes object that specifies the layer's custom recipes.
        var customRecipes: Recipes? = nil
        /// Whether to automatically assign an Elastic IP address to the layer's instances. For more information, see How to Edit a Layer.
        var autoAssignElasticIps: Bool? = nil
        /// Whether to install operating system and package updates when the instance boots. The default value is true. If this value is set to false, you must then update your instances manually by using CreateDeployment to run the update_dependencies stack command or manually running yum (Amazon Linux) or apt-get (Ubuntu) on the instances.   We strongly recommend using the default value of true, to ensure that your instances have the latest security updates. 
        var installUpdatesOnBoot: Bool? = nil
        /// A JSON formatted string containing the layer's custom stack configuration and deployment attributes.
        var customJson: String? = nil
        /// Date when the layer was created.
        var createdAt: String? = nil
        /// An array containing the layer's custom security group IDs.
        var customSecurityGroupIds: [String]? = nil
        /// The layer stack ID.
        var stackId: String? = nil
        /// The layer name.
        var name: String? = nil
        /// The layer ID.
        var layerId: String? = nil
        /// Whether auto healing is disabled for the layer.
        var enableAutoHealing: Bool? = nil
        /// A VolumeConfigurations object that describes the layer's Amazon EBS volumes.
        var volumeConfigurations: [VolumeConfiguration]? = nil
        /// An array containing the layer's security group names.
        var defaultSecurityGroupNames: [String]? = nil
        /// The layer attributes. For the HaproxyStatsPassword, MysqlRootPassword, and GangliaPassword attributes, AWS OpsWorks returns *****FILTERED***** instead of the actual value For an ECS Cluster layer, AWS OpsWorks the EcsClusterArn attribute is set to the cluster's ARN.
        var attributes: [String: String]? = nil
        /// Whether the layer uses Amazon EBS-optimized instances.
        var useEbsOptimizedInstances: Bool? = nil
        var defaultRecipes: Recipes? = nil
        /// The layer type.
        var type: String? = nil
        /// For stacks that are running in a VPC, whether to automatically assign a public IP address to the layer's instances. For more information, see How to Edit a Layer.
        var autoAssignPublicIps: Bool? = nil
        /// The ARN of the default IAM profile to be used for the layer's EC2 instances. For more information about IAM ARNs, see Using Identifiers.
        var customInstanceProfileArn: String? = nil

        public init() {}

        public init(shortname: String? = nil, packages: [String]? = nil, lifecycleEventConfiguration: LifecycleEventConfiguration? = nil, customRecipes: Recipes? = nil, autoAssignElasticIps: Bool? = nil, installUpdatesOnBoot: Bool? = nil, customJson: String? = nil, createdAt: String? = nil, customSecurityGroupIds: [String]? = nil, stackId: String? = nil, name: String? = nil, layerId: String? = nil, enableAutoHealing: Bool? = nil, volumeConfigurations: [VolumeConfiguration]? = nil, defaultSecurityGroupNames: [String]? = nil, attributes: [String: String]? = nil, useEbsOptimizedInstances: Bool? = nil, defaultRecipes: Recipes? = nil, type: String? = nil, autoAssignPublicIps: Bool? = nil, customInstanceProfileArn: String? = nil) {
            self.shortname = shortname
            self.packages = packages
            self.lifecycleEventConfiguration = lifecycleEventConfiguration
            self.customRecipes = customRecipes
            self.autoAssignElasticIps = autoAssignElasticIps
            self.installUpdatesOnBoot = installUpdatesOnBoot
            self.customJson = customJson
            self.createdAt = createdAt
            self.customSecurityGroupIds = customSecurityGroupIds
            self.stackId = stackId
            self.name = name
            self.layerId = layerId
            self.enableAutoHealing = enableAutoHealing
            self.volumeConfigurations = volumeConfigurations
            self.defaultSecurityGroupNames = defaultSecurityGroupNames
            self.attributes = attributes
            self.useEbsOptimizedInstances = useEbsOptimizedInstances
            self.defaultRecipes = defaultRecipes
            self.type = type
            self.autoAssignPublicIps = autoAssignPublicIps
            self.customInstanceProfileArn = customInstanceProfileArn
        }

    }

    public struct SetTimeBasedAutoScalingRequest: Serializable, Initializable {
        /// The instance ID.
        var instanceId: String = ""
        /// An AutoScalingSchedule with the instance schedule.
        var autoScalingSchedule: WeeklyAutoScalingSchedule? = nil

        public init() {}

        public init(instanceId: String, autoScalingSchedule: WeeklyAutoScalingSchedule? = nil) {
            self.instanceId = instanceId
            self.autoScalingSchedule = autoScalingSchedule
        }

    }

    public struct DescribeRaidArraysRequest: Serializable, Initializable {
        /// The stack ID.
        var stackId: String? = nil
        /// An array of RAID array IDs. If you use this parameter, DescribeRaidArrays returns descriptions of the specified arrays. Otherwise, it returns a description of every array.
        var raidArrayIds: [String]? = nil
        /// The instance ID. If you use this parameter, DescribeRaidArrays returns descriptions of the RAID arrays associated with the specified instance. 
        var instanceId: String? = nil

        public init() {}

        public init(stackId: String? = nil, raidArrayIds: [String]? = nil, instanceId: String? = nil) {
            self.stackId = stackId
            self.raidArrayIds = raidArrayIds
            self.instanceId = instanceId
        }

    }

    public struct StackSummary: Serializable, Initializable {
        /// An InstancesCount object with the number of instances in each status.
        var instancesCount: InstancesCount? = nil
        /// The number of layers.
        var layersCount: Int32? = nil
        /// The stack's ARN.
        var arn: String? = nil
        /// The stack ID.
        var stackId: String? = nil
        /// The stack name.
        var name: String? = nil
        /// The number of apps.
        var appsCount: Int32? = nil

        public init() {}

        public init(instancesCount: InstancesCount? = nil, layersCount: Int32? = nil, arn: String? = nil, stackId: String? = nil, name: String? = nil, appsCount: Int32? = nil) {
            self.instancesCount = instancesCount
            self.layersCount = layersCount
            self.arn = arn
            self.stackId = stackId
            self.name = name
            self.appsCount = appsCount
        }

    }

    public struct DescribeCommandsResult: Serializable, Initializable {
        /// An array of Command objects that describe each of the specified commands.
        var commands: [Command]? = nil

        public init() {}

        public init(commands: [Command]? = nil) {
            self.commands = commands
        }

    }

    public struct DeregisterEcsClusterRequest: Serializable, Initializable {
        /// The cluster's ARN.
        var ecsClusterArn: String = ""

        public init() {}

        public init(ecsClusterArn: String) {
            self.ecsClusterArn = ecsClusterArn
        }

    }

    public struct DescribeEcsClustersResult: Serializable, Initializable {
        /// A list of EcsCluster objects containing the cluster descriptions.
        var ecsClusters: [EcsCluster]? = nil
        /// If a paginated request does not return all of the remaining results, this parameter is set to a token that you can assign to the request object's NextToken parameter to retrieve the next set of results. If the previous paginated request returned all of the remaining results, this parameter is set to null.
        var nextToken: String? = nil

        public init() {}

        public init(ecsClusters: [EcsCluster]? = nil, nextToken: String? = nil) {
            self.ecsClusters = ecsClusters
            self.nextToken = nextToken
        }

    }

    public struct UpdateUserProfileRequest: Serializable, Initializable {
        /// The user IAM ARN. This can also be a federated user's ARN.
        var iamUserArn: String = ""
        /// The user's new SSH public key.
        var sshPublicKey: String? = nil
        /// The user's SSH user name. The allowable characters are [a-z], [A-Z], [0-9], '-', and '_'. If the specified name includes other punctuation marks, AWS OpsWorks removes them. For example, my.name will be changed to myname. If you do not specify an SSH user name, AWS OpsWorks generates one from the IAM user name. 
        var sshUsername: String? = nil
        /// Whether users can specify their own SSH public key through the My Settings page. For more information, see Managing User Permissions.
        var allowSelfManagement: Bool? = nil

        public init() {}

        public init(iamUserArn: String, sshPublicKey: String? = nil, sshUsername: String? = nil, allowSelfManagement: Bool? = nil) {
            self.iamUserArn = iamUserArn
            self.sshPublicKey = sshPublicKey
            self.sshUsername = sshUsername
            self.allowSelfManagement = allowSelfManagement
        }

    }

    public struct DescribeStacksRequest: Serializable, Initializable {
        /// An array of stack IDs that specify the stacks to be described. If you omit this parameter, DescribeStacks returns a description of every stack.
        var stackIds: [String]? = nil

        public init() {}

        public init(stackIds: [String]? = nil) {
            self.stackIds = stackIds
        }

    }

    public struct SslConfiguration: Serializable, Initializable {
        /// The contents of the certificate's domain.crt file.
        var certificate: String = ""
        /// Optional. Can be used to specify an intermediate certificate authority key or client authentication.
        var chain: String? = nil
        /// The private key; the contents of the certificate's domain.kex file.
        var privateKey: String = ""

        public init() {}

        public init(certificate: String, chain: String? = nil, privateKey: String) {
            self.certificate = certificate
            self.chain = chain
            self.privateKey = privateKey
        }

    }

    public struct DescribeElasticIpsRequest: Serializable, Initializable {
        /// A stack ID. If you include this parameter, DescribeElasticIps returns a description of the Elastic IP addresses that are registered with the specified stack.
        var stackId: String? = nil
        /// An array of Elastic IP addresses to be described. If you include this parameter, DescribeElasticIps returns a description of the specified Elastic IP addresses. Otherwise, it returns a description of every Elastic IP address.
        var ips: [String]? = nil
        /// The instance ID. If you include this parameter, DescribeElasticIps returns a description of the Elastic IP addresses associated with the specified instance.
        var instanceId: String? = nil

        public init() {}

        public init(stackId: String? = nil, ips: [String]? = nil, instanceId: String? = nil) {
            self.stackId = stackId
            self.ips = ips
            self.instanceId = instanceId
        }

    }

    public struct StackConfigurationManager: Serializable, Initializable {
        /// The name. This parameter must be set to "Chef".
        var name: String? = nil
        /// The Chef version. This parameter must be set to 12, 11.10, or 11.4 for Linux stacks, and to 12.2 for Windows stacks. The default value for Linux stacks is 11.4.
        var version: String? = nil

        public init() {}

        public init(name: String? = nil, version: String? = nil) {
            self.name = name
            self.version = version
        }

    }

    public struct UpdateAppRequest: Serializable, Initializable {
        /// The app ID.
        var appId: String = ""
        /// The app name.
        var name: String? = nil
        /// An SslConfiguration object with the SSL configuration.
        var sslConfiguration: SslConfiguration? = nil
        /// An array of EnvironmentVariable objects that specify environment variables to be associated with the app. After you deploy the app, these variables are defined on the associated app server instances.For more information, see  Environment Variables. There is no specific limit on the number of environment variables. However, the size of the associated data structure - which includes the variables' names, values, and protected flag values - cannot exceed 10 KB (10240 Bytes). This limit should accommodate most if not all use cases. Exceeding it will cause an exception with the message, "Environment: is too large (maximum is 10KB)."  This parameter is supported only by Chef 11.10 stacks. If you have specified one or more environment variables, you cannot modify the stack's Chef version. 
        var environment: [EnvironmentVariable]? = nil
        /// The app's data sources.
        var dataSources: [DataSource]? = nil
        /// A Source object that specifies the app repository.
        var appSource: Source? = nil
        /// One or more user-defined key/value pairs to be added to the stack attributes.
        var attributes: [String: String]? = nil
        /// Whether SSL is enabled for the app.
        var enableSsl: Bool? = nil
        /// The app type.
        var type: String? = nil
        /// The app's virtual host settings, with multiple domains separated by commas. For example: 'www.example.com, example.com' 
        var domains: [String]? = nil
        /// A description of the app.
        var description: String? = nil

        public init() {}

        public init(appId: String, name: String? = nil, sslConfiguration: SslConfiguration? = nil, environment: [EnvironmentVariable]? = nil, dataSources: [DataSource]? = nil, appSource: Source? = nil, attributes: [String: String]? = nil, enableSsl: Bool? = nil, type: String? = nil, domains: [String]? = nil, description: String? = nil) {
            self.appId = appId
            self.name = name
            self.sslConfiguration = sslConfiguration
            self.environment = environment
            self.dataSources = dataSources
            self.appSource = appSource
            self.attributes = attributes
            self.enableSsl = enableSsl
            self.type = type
            self.domains = domains
            self.description = description
        }

    }

    public struct Instance: Serializable, Initializable {
        /// For container instances, the instance's ARN.
        var ecsContainerInstanceArn: String? = nil
        /// The instance host name.
        var hostname: String? = nil
        /// Whether this is an Amazon EBS-optimized instance.
        var ebsOptimized: Bool? = nil
        /// Whether to install operating system and package updates when the instance boots. The default value is true. If this value is set to false, you must then update your instances manually by using CreateDeployment to run the update_dependencies stack command or by manually running yum (Amazon Linux) or apt-get (Ubuntu) on the instances.   We strongly recommend using the default value of true, to ensure that your instances have the latest security updates. 
        var installUpdatesOnBoot: Bool? = nil
        /// The instance public IP address.
        var publicIp: String? = nil
        /// The instance type, such as t2.micro.
        var instanceType: String? = nil
        /// The instance Availability Zone. For more information, see Regions and Endpoints.
        var availabilityZone: String? = nil
        /// The ID of the associated Amazon EC2 instance.
        var ec2InstanceId: String? = nil
        /// The instance status:    booting     connection_lost     online     pending     rebooting     requested     running_setup     setup_failed     shutting_down     start_failed     stop_failed     stopped     stopping     terminated     terminating   
        var status: String? = nil
        /// The instance's reported AWS OpsWorks agent version.
        var reportedAgentVersion: String? = nil
        /// The stack ID.
        var stackId: String? = nil
        /// The instance Elastic IP address .
        var elasticIp: String? = nil
        /// The instance ID.
        var instanceId: String? = nil
        /// The instance's Amazon EC2 key-pair name.
        var sshKeyName: String? = nil
        /// The instance's root device type. For more information, see Storage for the Root Device.
        var rootDeviceType: String? = nil
        /// The ID of the last service error. For more information, call DescribeServiceErrors.
        var lastServiceErrorId: String? = nil
        /// The instance public DNS name.
        var publicDns: String? = nil
        /// An array containing the instance layer IDs.
        var layerIds: [String]? = nil
        /// The instance's subnet ID; applicable only if the stack is running in a VPC.
        var subnetId: String? = nil
        /// An array of BlockDeviceMapping objects that specify the instance's block device mappings.
        var blockDeviceMappings: [BlockDeviceMapping]? = nil
        /// The instance's platform.
        var platform: String? = nil
        /// For container instances, the Amazon ECS cluster's ARN.
        var ecsClusterArn: String? = nil
        /// The instance's private IP address.
        var privateIp: String? = nil
        /// For registered instances, the infrastructure class: ec2 or on-premises.
        var infrastructureClass: String? = nil
        /// An array containing the instance security group IDs.
        var securityGroupIds: [String]? = nil
        /// A custom AMI ID to be used to create the instance. For more information, see Instances 
        var amiId: String? = nil
        /// The The instance's private DNS name.
        var privateDns: String? = nil
        /// The root device volume ID.
        var rootDeviceVolumeId: String? = nil
        /// The instance's tenancy option, such as dedicated or host.
        var tenancy: String? = nil
        /// The SSH key's RSA fingerprint.
        var sshHostRsaKeyFingerprint: String? = nil
        /// For registered instances, who performed the registration.
        var registeredBy: String? = nil
        /// The time that the instance was created.
        var createdAt: String? = nil
        /// For registered instances, the reported operating system.
        var reportedOs: ReportedOs? = nil
        /// The agent version. This parameter is set to INHERIT if the instance inherits the default stack setting or to a a version number for a fixed agent version.
        var agentVersion: String? = nil
        /// The SSH key's Deep Security Agent (DSA) fingerprint.
        var sshHostDsaKeyFingerprint: String? = nil
        /// The instance architecture: "i386" or "x86_64".
        var architecture: String? = nil
        /// The ARN of the instance's IAM profile. For more information about IAM ARNs, see Using Identifiers.
        var instanceProfileArn: String? = nil
        /// The instance's operating system.
        var os: String? = nil
        /// For load-based or time-based instances, the type.
        var autoScalingType: String? = nil
        /// The instance's virtualization type: paravirtual or hvm.
        var virtualizationType: String? = nil

        public init() {}

        public init(ecsContainerInstanceArn: String? = nil, hostname: String? = nil, ebsOptimized: Bool? = nil, installUpdatesOnBoot: Bool? = nil, publicIp: String? = nil, instanceType: String? = nil, availabilityZone: String? = nil, ec2InstanceId: String? = nil, status: String? = nil, reportedAgentVersion: String? = nil, stackId: String? = nil, elasticIp: String? = nil, instanceId: String? = nil, sshKeyName: String? = nil, rootDeviceType: String? = nil, lastServiceErrorId: String? = nil, publicDns: String? = nil, layerIds: [String]? = nil, subnetId: String? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, platform: String? = nil, ecsClusterArn: String? = nil, privateIp: String? = nil, infrastructureClass: String? = nil, securityGroupIds: [String]? = nil, amiId: String? = nil, privateDns: String? = nil, rootDeviceVolumeId: String? = nil, tenancy: String? = nil, sshHostRsaKeyFingerprint: String? = nil, registeredBy: String? = nil, createdAt: String? = nil, reportedOs: ReportedOs? = nil, agentVersion: String? = nil, sshHostDsaKeyFingerprint: String? = nil, architecture: String? = nil, instanceProfileArn: String? = nil, os: String? = nil, autoScalingType: String? = nil, virtualizationType: String? = nil) {
            self.ecsContainerInstanceArn = ecsContainerInstanceArn
            self.hostname = hostname
            self.ebsOptimized = ebsOptimized
            self.installUpdatesOnBoot = installUpdatesOnBoot
            self.publicIp = publicIp
            self.instanceType = instanceType
            self.availabilityZone = availabilityZone
            self.ec2InstanceId = ec2InstanceId
            self.status = status
            self.reportedAgentVersion = reportedAgentVersion
            self.stackId = stackId
            self.elasticIp = elasticIp
            self.instanceId = instanceId
            self.sshKeyName = sshKeyName
            self.rootDeviceType = rootDeviceType
            self.lastServiceErrorId = lastServiceErrorId
            self.publicDns = publicDns
            self.layerIds = layerIds
            self.subnetId = subnetId
            self.blockDeviceMappings = blockDeviceMappings
            self.platform = platform
            self.ecsClusterArn = ecsClusterArn
            self.privateIp = privateIp
            self.infrastructureClass = infrastructureClass
            self.securityGroupIds = securityGroupIds
            self.amiId = amiId
            self.privateDns = privateDns
            self.rootDeviceVolumeId = rootDeviceVolumeId
            self.tenancy = tenancy
            self.sshHostRsaKeyFingerprint = sshHostRsaKeyFingerprint
            self.registeredBy = registeredBy
            self.createdAt = createdAt
            self.reportedOs = reportedOs
            self.agentVersion = agentVersion
            self.sshHostDsaKeyFingerprint = sshHostDsaKeyFingerprint
            self.architecture = architecture
            self.instanceProfileArn = instanceProfileArn
            self.os = os
            self.autoScalingType = autoScalingType
            self.virtualizationType = virtualizationType
        }

    }

    public struct DescribeUserProfilesRequest: Serializable, Initializable {
        /// An array of IAM or federated user ARNs that identify the users to be described.
        var iamUserArns: [String]? = nil

        public init() {}

        public init(iamUserArns: [String]? = nil) {
            self.iamUserArns = iamUserArns
        }

    }

    public struct DeleteInstanceRequest: Serializable, Initializable {
        /// Whether to delete the instance's Amazon EBS volumes.
        var deleteVolumes: Bool? = nil
        /// The instance ID.
        var instanceId: String = ""
        /// Whether to delete the instance Elastic IP address.
        var deleteElasticIp: Bool? = nil

        public init() {}

        public init(deleteVolumes: Bool? = nil, instanceId: String, deleteElasticIp: Bool? = nil) {
            self.deleteVolumes = deleteVolumes
            self.instanceId = instanceId
            self.deleteElasticIp = deleteElasticIp
        }

    }

    public struct InstancesCount: Serializable, Initializable {
        /// The number of instances with pending status.
        var pending: Int32? = nil
        /// The number of instances with stopping status.
        var stopping: Int32? = nil
        /// The number of instances with booting status.
        var booting: Int32? = nil
        /// The number of instances with online status.
        var online: Int32? = nil
        /// The number of instances with running_setup status.
        var runningSetup: Int32? = nil
        /// The number of instances with terminated status.
        var terminated: Int32? = nil
        /// The number of instances with setup_failed status.
        var setupFailed: Int32? = nil
        /// The number of instances in the Assigning state.
        var assigning: Int32? = nil
        /// The number of instances with connection_lost status.
        var connectionLost: Int32? = nil
        /// The number of instances with terminating status.
        var terminating: Int32? = nil
        /// The number of instances with shutting_down status.
        var shuttingDown: Int32? = nil
        /// The number of instances in the Registering state.
        var registering: Int32? = nil
        /// The number of instances with rebooting status.
        var rebooting: Int32? = nil
        /// The number of instances in the Unassigning state.
        var unassigning: Int32? = nil
        /// The number of instances with stopped status.
        var stopped: Int32? = nil
        /// The number of instances with start_failed status.
        var startFailed: Int32? = nil
        /// The number of instances in the Registered state.
        var registered: Int32? = nil
        /// The number of instances in the Deregistering state.
        var deregistering: Int32? = nil
        /// The number of instances with requested status.
        var requested: Int32? = nil

        public init() {}

        public init(pending: Int32? = nil, stopping: Int32? = nil, booting: Int32? = nil, online: Int32? = nil, runningSetup: Int32? = nil, terminated: Int32? = nil, setupFailed: Int32? = nil, assigning: Int32? = nil, connectionLost: Int32? = nil, terminating: Int32? = nil, shuttingDown: Int32? = nil, registering: Int32? = nil, rebooting: Int32? = nil, unassigning: Int32? = nil, stopped: Int32? = nil, startFailed: Int32? = nil, registered: Int32? = nil, deregistering: Int32? = nil, requested: Int32? = nil) {
            self.pending = pending
            self.stopping = stopping
            self.booting = booting
            self.online = online
            self.runningSetup = runningSetup
            self.terminated = terminated
            self.setupFailed = setupFailed
            self.assigning = assigning
            self.connectionLost = connectionLost
            self.terminating = terminating
            self.shuttingDown = shuttingDown
            self.registering = registering
            self.rebooting = rebooting
            self.unassigning = unassigning
            self.stopped = stopped
            self.startFailed = startFailed
            self.registered = registered
            self.deregistering = deregistering
            self.requested = requested
        }

    }

    public struct CreateLayerRequest: Serializable, Initializable {
        /// For custom layers only, use this parameter to specify the layer's short name, which is used internally by AWS OpsWorks and by Chef recipes. The short name is also used as the name for the directory where your app files are installed. It can have a maximum of 200 characters, which are limited to the alphanumeric characters, '-', '_', and '.'. The built-in layers' short names are defined by AWS OpsWorks. For more information, see the Layer Reference.
        var shortname: String = ""
        /// An array of Package objects that describes the layer packages.
        var packages: [String]? = nil
        /// A LifeCycleEventConfiguration object that you can use to configure the Shutdown event to specify an execution timeout and enable or disable Elastic Load Balancer connection draining.
        var lifecycleEventConfiguration: LifecycleEventConfiguration? = nil
        /// A LayerCustomRecipes object that specifies the layer custom recipes.
        var customRecipes: Recipes? = nil
        /// Whether to automatically assign an Elastic IP address to the layer's instances. For more information, see How to Edit a Layer.
        var autoAssignElasticIps: Bool? = nil
        /// Whether to install operating system and package updates when the instance boots. The default value is true. To control when updates are installed, set this value to false. You must then update your instances manually by using CreateDeployment to run the update_dependencies stack command or by manually running yum (Amazon Linux) or apt-get (Ubuntu) on the instances.   To ensure that your instances have the latest security updates, we strongly recommend using the default value of true. 
        var installUpdatesOnBoot: Bool? = nil
        /// A JSON-formatted string containing custom stack configuration and deployment attributes to be installed on the layer's instances. For more information, see  Using Custom JSON. This feature is supported as of version 1.7.42 of the AWS CLI. 
        var customJson: String? = nil
        /// An array containing the layer custom security group IDs.
        var customSecurityGroupIds: [String]? = nil
        /// The layer stack ID.
        var stackId: String = ""
        /// The layer name, which is used by the console.
        var name: String = ""
        /// The ARN of an IAM profile to be used for the layer's EC2 instances. For more information about IAM ARNs, see Using Identifiers.
        var customInstanceProfileArn: String? = nil
        /// Whether to disable auto healing for the layer.
        var enableAutoHealing: Bool? = nil
        /// A VolumeConfigurations object that describes the layer's Amazon EBS volumes.
        var volumeConfigurations: [VolumeConfiguration]? = nil
        /// One or more user-defined key-value pairs to be added to the stack attributes. To create a cluster layer, set the EcsClusterArn attribute to the cluster's ARN.
        var attributes: [String: String]? = nil
        /// Whether to use Amazon EBS-optimized instances.
        var useEbsOptimizedInstances: Bool? = nil
        /// For stacks that are running in a VPC, whether to automatically assign a public IP address to the layer's instances. For more information, see How to Edit a Layer.
        var autoAssignPublicIps: Bool? = nil
        /// The layer type. A stack cannot have more than one built-in layer of the same type. It can have any number of custom layers. Built-in layers are not available in Chef 12 stacks.
        var type: String = ""

        public init() {}

        public init(shortname: String, packages: [String]? = nil, lifecycleEventConfiguration: LifecycleEventConfiguration? = nil, customRecipes: Recipes? = nil, autoAssignElasticIps: Bool? = nil, installUpdatesOnBoot: Bool? = nil, customJson: String? = nil, customSecurityGroupIds: [String]? = nil, stackId: String, name: String, customInstanceProfileArn: String? = nil, enableAutoHealing: Bool? = nil, volumeConfigurations: [VolumeConfiguration]? = nil, attributes: [String: String]? = nil, useEbsOptimizedInstances: Bool? = nil, autoAssignPublicIps: Bool? = nil, type: String) {
            self.shortname = shortname
            self.packages = packages
            self.lifecycleEventConfiguration = lifecycleEventConfiguration
            self.customRecipes = customRecipes
            self.autoAssignElasticIps = autoAssignElasticIps
            self.installUpdatesOnBoot = installUpdatesOnBoot
            self.customJson = customJson
            self.customSecurityGroupIds = customSecurityGroupIds
            self.stackId = stackId
            self.name = name
            self.customInstanceProfileArn = customInstanceProfileArn
            self.enableAutoHealing = enableAutoHealing
            self.volumeConfigurations = volumeConfigurations
            self.attributes = attributes
            self.useEbsOptimizedInstances = useEbsOptimizedInstances
            self.autoAssignPublicIps = autoAssignPublicIps
            self.type = type
        }

    }

    public struct UpdateInstanceRequest: Serializable, Initializable {
        /// The instance's layer IDs.
        var layerIds: [String]? = nil
        /// The instance host name.
        var hostname: String? = nil
        /// The default AWS OpsWorks agent version. You have the following options:    INHERIT - Use the stack's default agent version setting.    version_number - Use the specified agent version. This value overrides the stack's default setting. To update the agent version, you must edit the instance configuration and specify a new version. AWS OpsWorks then automatically installs that version on the instance.   The default setting is INHERIT. To specify an agent version, you must use the complete version number, not the abbreviated number shown on the console. For a list of available agent version numbers, call DescribeAgentVersions.
        var agentVersion: String? = nil
        /// This property cannot be updated.
        var ebsOptimized: Bool? = nil
        /// The instance architecture. Instance types do not necessarily support both architectures. For a list of the architectures that are supported by the different instance types, see Instance Families and Types.
        var architecture: String? = nil
        /// The ID of the AMI that was used to create the instance. The value of this parameter must be the same AMI ID that the instance is already using. You cannot apply a new AMI to an instance by running UpdateInstance. UpdateInstance does not work on instances that are using custom AMIs. 
        var amiId: String? = nil
        /// For load-based or time-based instances, the type. Windows stacks can use only time-based instances.
        var autoScalingType: String? = nil
        /// Whether to install operating system and package updates when the instance boots. The default value is true. To control when updates are installed, set this value to false. You must then update your instances manually by using CreateDeployment to run the update_dependencies stack command or by manually running yum (Amazon Linux) or apt-get (Ubuntu) on the instances.   We strongly recommend using the default value of true, to ensure that your instances have the latest security updates. 
        var installUpdatesOnBoot: Bool? = nil
        /// The instance ID.
        var instanceId: String = ""
        /// The instance type, such as t2.micro. For a list of supported instance types, open the stack in the console, choose Instances, and choose + Instance. The Size list contains the currently supported types. For more information, see Instance Families and Types. The parameter values that you use to specify the various types are in the API Name column of the Available Instance Types table.
        var instanceType: String? = nil
        /// The instance's operating system, which must be set to one of the following. You cannot update an instance that is using a custom AMI.   A supported Linux operating system: An Amazon Linux version, such as Amazon Linux 2016.03, Amazon Linux 2015.09, or Amazon Linux 2015.03.   A supported Ubuntu operating system, such as Ubuntu 16.04 LTS, Ubuntu 14.04 LTS, or Ubuntu 12.04 LTS.    CentOS 7     Red Hat Enterprise Linux 7    A supported Windows operating system, such as Microsoft Windows Server 2012 R2 Base, Microsoft Windows Server 2012 R2 with SQL Server Express, Microsoft Windows Server 2012 R2 with SQL Server Standard, or Microsoft Windows Server 2012 R2 with SQL Server Web.   For more information on the supported operating systems, see AWS OpsWorks Operating Systems. The default option is the current Amazon Linux version. If you set this parameter to Custom, you must use the AmiId parameter to specify the custom AMI that you want to use. For more information on the supported operating systems, see Operating Systems. For more information on how to use custom AMIs with OpsWorks, see Using Custom AMIs.  You can specify a different Linux operating system for the updated stack, but you cannot change from Linux to Windows or Windows to Linux. 
        var os: String? = nil
        /// The instance's Amazon EC2 key name.
        var sshKeyName: String? = nil

        public init() {}

        public init(layerIds: [String]? = nil, hostname: String? = nil, agentVersion: String? = nil, ebsOptimized: Bool? = nil, architecture: String? = nil, amiId: String? = nil, autoScalingType: String? = nil, installUpdatesOnBoot: Bool? = nil, instanceId: String, instanceType: String? = nil, os: String? = nil, sshKeyName: String? = nil) {
            self.layerIds = layerIds
            self.hostname = hostname
            self.agentVersion = agentVersion
            self.ebsOptimized = ebsOptimized
            self.architecture = architecture
            self.amiId = amiId
            self.autoScalingType = autoScalingType
            self.installUpdatesOnBoot = installUpdatesOnBoot
            self.instanceId = instanceId
            self.instanceType = instanceType
            self.os = os
            self.sshKeyName = sshKeyName
        }

    }

    public struct RaidArray: Serializable, Initializable {
        /// The array's Linux device. For example /dev/mdadm0.
        var device: String? = nil
        /// For PIOPS volumes, the IOPS per disk.
        var iops: Int32? = nil
        /// The array's Availability Zone. For more information, see Regions and Endpoints.
        var availabilityZone: String? = nil
        /// The RAID level.
        var raidLevel: Int32? = nil
        /// The array ID.
        var raidArrayId: String? = nil
        /// When the RAID array was created.
        var createdAt: String? = nil
        /// The volume type, standard or PIOPS.
        var volumeType: String? = nil
        /// The stack ID.
        var stackId: String? = nil
        /// The array's mount point.
        var mountPoint: String? = nil
        /// The array name.
        var name: String? = nil
        /// The instance ID.
        var instanceId: String? = nil
        /// The array's size.
        var size: Int32? = nil
        /// The number of disks in the array.
        var numberOfDisks: Int32? = nil

        public init() {}

        public init(device: String? = nil, iops: Int32? = nil, availabilityZone: String? = nil, raidLevel: Int32? = nil, raidArrayId: String? = nil, createdAt: String? = nil, volumeType: String? = nil, stackId: String? = nil, mountPoint: String? = nil, name: String? = nil, instanceId: String? = nil, size: Int32? = nil, numberOfDisks: Int32? = nil) {
            self.device = device
            self.iops = iops
            self.availabilityZone = availabilityZone
            self.raidLevel = raidLevel
            self.raidArrayId = raidArrayId
            self.createdAt = createdAt
            self.volumeType = volumeType
            self.stackId = stackId
            self.mountPoint = mountPoint
            self.name = name
            self.instanceId = instanceId
            self.size = size
            self.numberOfDisks = numberOfDisks
        }

    }

    public struct CloneStackResult: Serializable, Initializable {
        /// The cloned stack ID.
        var stackId: String? = nil

        public init() {}

        public init(stackId: String? = nil) {
            self.stackId = stackId
        }

    }

    public struct CreateStackResult: Serializable, Initializable {
        /// The stack ID, which is an opaque string that you use to identify the stack when performing actions such as DescribeStacks.
        var stackId: String? = nil

        public init() {}

        public init(stackId: String? = nil) {
            self.stackId = stackId
        }

    }

    public struct LoadBasedAutoScalingConfiguration: Serializable, Initializable {
        /// An AutoScalingThresholds object that describes the downscaling configuration, which defines how and when AWS OpsWorks reduces the number of instances.
        var downScaling: AutoScalingThresholds? = nil
        /// Whether load-based auto scaling is enabled for the layer.
        var enable: Bool? = nil
        /// An AutoScalingThresholds object that describes the upscaling configuration, which defines how and when AWS OpsWorks increases the number of instances.
        var upScaling: AutoScalingThresholds? = nil
        /// The layer ID.
        var layerId: String? = nil

        public init() {}

        public init(downScaling: AutoScalingThresholds? = nil, enable: Bool? = nil, upScaling: AutoScalingThresholds? = nil, layerId: String? = nil) {
            self.downScaling = downScaling
            self.enable = enable
            self.upScaling = upScaling
            self.layerId = layerId
        }

    }

    public struct App: Serializable, Initializable {
        /// The app's short name.
        var shortname: String? = nil
        /// An SslConfiguration object with the SSL configuration.
        var sslConfiguration: SslConfiguration? = nil
        /// A Source object that describes the app repository.
        var appSource: Source? = nil
        /// Whether to enable SSL for the app.
        var enableSsl: Bool? = nil
        /// The app vhost settings with multiple domains separated by commas. For example: 'www.example.com, example.com' 
        var domains: [String]? = nil
        /// A description of the app.
        var description: String? = nil
        /// When the app was created.
        var createdAt: String? = nil
        /// The app stack ID.
        var stackId: String? = nil
        /// The app name.
        var name: String? = nil
        /// The app's data sources.
        var dataSources: [DataSource]? = nil
        /// An array of EnvironmentVariable objects that specify environment variables to be associated with the app. After you deploy the app, these variables are defined on the associated app server instances. For more information, see  Environment Variables.   There is no specific limit on the number of environment variables. However, the size of the associated data structure - which includes the variable names, values, and protected flag values - cannot exceed 10 KB (10240 Bytes). This limit should accommodate most if not all use cases, but if you do exceed it, you will cause an exception (API) with an "Environment: is too large (maximum is 10KB)" message. 
        var environment: [EnvironmentVariable]? = nil
        /// The stack attributes.
        var attributes: [String: String]? = nil
        /// The app type.
        var type: String? = nil
        /// The app ID.
        var appId: String? = nil

        public init() {}

        public init(shortname: String? = nil, sslConfiguration: SslConfiguration? = nil, appSource: Source? = nil, enableSsl: Bool? = nil, domains: [String]? = nil, description: String? = nil, createdAt: String? = nil, stackId: String? = nil, name: String? = nil, dataSources: [DataSource]? = nil, environment: [EnvironmentVariable]? = nil, attributes: [String: String]? = nil, type: String? = nil, appId: String? = nil) {
            self.shortname = shortname
            self.sslConfiguration = sslConfiguration
            self.appSource = appSource
            self.enableSsl = enableSsl
            self.domains = domains
            self.description = description
            self.createdAt = createdAt
            self.stackId = stackId
            self.name = name
            self.dataSources = dataSources
            self.environment = environment
            self.attributes = attributes
            self.type = type
            self.appId = appId
        }

    }

    public struct Command: Serializable, Initializable {
        /// The URL of the command log.
        var logUrl: String? = nil
        /// Date and time when the command was acknowledged.
        var acknowledgedAt: String? = nil
        /// Date and time when the command was run.
        var createdAt: String? = nil
        /// The command status:   failed   successful   skipped   pending  
        var status: String? = nil
        /// The ID of the instance where the command was executed.
        var instanceId: String? = nil
        /// The command deployment ID.
        var deploymentId: String? = nil
        /// The command exit code.
        var exitCode: Int32? = nil
        /// The command ID.
        var commandId: String? = nil
        /// The command type:    deploy     rollback     start     stop     restart     undeploy     update_dependencies     install_dependencies     update_custom_cookbooks     execute_recipes   
        var type: String? = nil
        /// Date when the command completed.
        var completedAt: String? = nil

        public init() {}

        public init(logUrl: String? = nil, acknowledgedAt: String? = nil, createdAt: String? = nil, status: String? = nil, instanceId: String? = nil, deploymentId: String? = nil, exitCode: Int32? = nil, commandId: String? = nil, type: String? = nil, completedAt: String? = nil) {
            self.logUrl = logUrl
            self.acknowledgedAt = acknowledgedAt
            self.createdAt = createdAt
            self.status = status
            self.instanceId = instanceId
            self.deploymentId = deploymentId
            self.exitCode = exitCode
            self.commandId = commandId
            self.type = type
            self.completedAt = completedAt
        }

    }

    public struct UserProfile: Serializable, Initializable {
        /// The user's IAM ARN.
        var iamUserArn: String? = nil
        /// The user's SSH public key.
        var sshPublicKey: String? = nil
        /// The user's SSH user name.
        var sshUsername: String? = nil
        /// The user's name.
        var name: String? = nil
        /// Whether users can specify their own SSH public key through the My Settings page. For more information, see Managing User Permissions.
        var allowSelfManagement: Bool? = nil

        public init() {}

        public init(iamUserArn: String? = nil, sshPublicKey: String? = nil, sshUsername: String? = nil, name: String? = nil, allowSelfManagement: Bool? = nil) {
            self.iamUserArn = iamUserArn
            self.sshPublicKey = sshPublicKey
            self.sshUsername = sshUsername
            self.name = name
            self.allowSelfManagement = allowSelfManagement
        }

    }

    public struct WeeklyAutoScalingSchedule: Serializable, Initializable {
        /// The schedule for Saturday.
        var saturday: [String: String]? = nil
        /// The schedule for Tuesday.
        var tuesday: [String: String]? = nil
        /// The schedule for Sunday.
        var sunday: [String: String]? = nil
        /// The schedule for Friday.
        var friday: [String: String]? = nil
        /// The schedule for Monday.
        var monday: [String: String]? = nil
        /// The schedule for Thursday.
        var thursday: [String: String]? = nil
        /// The schedule for Wednesday.
        var wednesday: [String: String]? = nil

        public init() {}

        public init(saturday: [String: String]? = nil, tuesday: [String: String]? = nil, sunday: [String: String]? = nil, friday: [String: String]? = nil, monday: [String: String]? = nil, thursday: [String: String]? = nil, wednesday: [String: String]? = nil) {
            self.saturday = saturday
            self.tuesday = tuesday
            self.sunday = sunday
            self.friday = friday
            self.monday = monday
            self.thursday = thursday
            self.wednesday = wednesday
        }

    }

    public struct RegisterEcsClusterResult: Serializable, Initializable {
        /// The cluster's ARN.
        var ecsClusterArn: String? = nil

        public init() {}

        public init(ecsClusterArn: String? = nil) {
            self.ecsClusterArn = ecsClusterArn
        }

    }

    public struct RegisterElasticIpResult: Serializable, Initializable {
        /// The Elastic IP address.
        var elasticIp: String? = nil

        public init() {}

        public init(elasticIp: String? = nil) {
            self.elasticIp = elasticIp
        }

    }

    public struct GetHostnameSuggestionRequest: Serializable, Initializable {
        /// The layer ID.
        var layerId: String = ""

        public init() {}

        public init(layerId: String) {
            self.layerId = layerId
        }

    }

    public struct DeregisterInstanceRequest: Serializable, Initializable {
        /// The instance ID.
        var instanceId: String = ""

        public init() {}

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

    }

    public struct CreateInstanceRequest: Serializable, Initializable {
        /// An array of BlockDeviceMapping objects that specify the instance's block devices. For more information, see Block Device Mapping. Note that block device mappings are not supported for custom AMIs.
        var blockDeviceMappings: [BlockDeviceMapping]? = nil
        /// The ID of the instance's subnet. If the stack is running in a VPC, you can use this parameter to override the stack's default subnet ID value and direct AWS OpsWorks to launch the instance in a different subnet.
        var subnetId: String? = nil
        /// An array that contains the instance's layer IDs.
        var layerIds: [String] = []
        /// The instance host name.
        var hostname: String? = nil
        /// Whether to create an Amazon EBS-optimized instance.
        var ebsOptimized: Bool? = nil
        /// The instance's tenancy option. The default option is no tenancy, or if the instance is running in a VPC, inherit tenancy settings from the VPC. The following are valid values for this parameter: dedicated, default, or host. Because there are costs associated with changes in tenancy options, we recommend that you research tenancy options before choosing them for your instances. For more information about dedicated hosts, see Dedicated Hosts Overview and Amazon EC2 Dedicated Hosts. For more information about dedicated instances, see Dedicated Instances and Amazon EC2 Dedicated Instances.
        var tenancy: String? = nil
        /// A custom AMI ID to be used to create the instance. The AMI should be based on one of the supported operating systems. For more information, see Using Custom AMIs.  If you specify a custom AMI, you must set Os to Custom. 
        var amiId: String? = nil
        /// Whether to install operating system and package updates when the instance boots. The default value is true. To control when updates are installed, set this value to false. You must then update your instances manually by using CreateDeployment to run the update_dependencies stack command or by manually running yum (Amazon Linux) or apt-get (Ubuntu) on the instances.   We strongly recommend using the default value of true to ensure that your instances have the latest security updates. 
        var installUpdatesOnBoot: Bool? = nil
        /// The instance type, such as t2.micro. For a list of supported instance types, open the stack in the console, choose Instances, and choose + Instance. The Size list contains the currently supported types. For more information, see Instance Families and Types. The parameter values that you use to specify the various types are in the API Name column of the Available Instance Types table.
        var instanceType: String = ""
        /// The instance Availability Zone. For more information, see Regions and Endpoints.
        var availabilityZone: String? = nil
        /// The default AWS OpsWorks agent version. You have the following options:    INHERIT - Use the stack's default agent version setting.    version_number - Use the specified agent version. This value overrides the stack's default setting. To update the agent version, edit the instance configuration and specify a new version. AWS OpsWorks then automatically installs that version on the instance.   The default setting is INHERIT. To specify an agent version, you must use the complete version number, not the abbreviated number shown on the console. For a list of available agent version numbers, call DescribeAgentVersions.
        var agentVersion: String? = nil
        /// The stack ID.
        var stackId: String = ""
        /// The instance architecture. The default option is x86_64. Instance types do not necessarily support both architectures. For a list of the architectures that are supported by the different instance types, see Instance Families and Types.
        var architecture: String? = nil
        /// The instance root device type. For more information, see Storage for the Root Device.
        var rootDeviceType: String? = nil
        /// For load-based or time-based instances, the type. Windows stacks can use only time-based instances.
        var autoScalingType: String? = nil
        /// The instance's operating system, which must be set to one of the following.   A supported Linux operating system: An Amazon Linux version, such as Amazon Linux 2016.03, Amazon Linux 2015.09, or Amazon Linux 2015.03.   A supported Ubuntu operating system, such as Ubuntu 16.04 LTS, Ubuntu 14.04 LTS, or Ubuntu 12.04 LTS.    CentOS 7     Red Hat Enterprise Linux 7    A supported Windows operating system, such as Microsoft Windows Server 2012 R2 Base, Microsoft Windows Server 2012 R2 with SQL Server Express, Microsoft Windows Server 2012 R2 with SQL Server Standard, or Microsoft Windows Server 2012 R2 with SQL Server Web.   A custom AMI: Custom.   For more information on the supported operating systems, see AWS OpsWorks Operating Systems. The default option is the current Amazon Linux version. If you set this parameter to Custom, you must use the CreateInstance action's AmiId parameter to specify the custom AMI that you want to use. Block device mappings are not supported if the value is Custom. For more information on the supported operating systems, see Operating SystemsFor more information on how to use custom AMIs with AWS OpsWorks, see Using Custom AMIs.
        var os: String? = nil
        /// The instance's Amazon EC2 key-pair name.
        var sshKeyName: String? = nil
        /// The instance's virtualization type, paravirtual or hvm.
        var virtualizationType: String? = nil

        public init() {}

        public init(blockDeviceMappings: [BlockDeviceMapping]? = nil, subnetId: String? = nil, layerIds: [String], hostname: String? = nil, ebsOptimized: Bool? = nil, tenancy: String? = nil, amiId: String? = nil, installUpdatesOnBoot: Bool? = nil, instanceType: String, availabilityZone: String? = nil, agentVersion: String? = nil, stackId: String, architecture: String? = nil, rootDeviceType: String? = nil, autoScalingType: String? = nil, os: String? = nil, sshKeyName: String? = nil, virtualizationType: String? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.subnetId = subnetId
            self.layerIds = layerIds
            self.hostname = hostname
            self.ebsOptimized = ebsOptimized
            self.tenancy = tenancy
            self.amiId = amiId
            self.installUpdatesOnBoot = installUpdatesOnBoot
            self.instanceType = instanceType
            self.availabilityZone = availabilityZone
            self.agentVersion = agentVersion
            self.stackId = stackId
            self.architecture = architecture
            self.rootDeviceType = rootDeviceType
            self.autoScalingType = autoScalingType
            self.os = os
            self.sshKeyName = sshKeyName
            self.virtualizationType = virtualizationType
        }

    }

    public struct CreateAppRequest: Serializable, Initializable {
        /// The app's short name.
        var shortname: String? = nil
        /// The stack ID.
        var stackId: String = ""
        /// The app name.
        var name: String = ""
        /// An SslConfiguration object with the SSL configuration.
        var sslConfiguration: SslConfiguration? = nil
        /// The app's data source.
        var dataSources: [DataSource]? = nil
        /// A Source object that specifies the app repository.
        var appSource: Source? = nil
        /// One or more user-defined key/value pairs to be added to the stack attributes.
        var attributes: [String: String]? = nil
        /// An array of EnvironmentVariable objects that specify environment variables to be associated with the app. After you deploy the app, these variables are defined on the associated app server instance. For more information, see  Environment Variables. There is no specific limit on the number of environment variables. However, the size of the associated data structure - which includes the variables' names, values, and protected flag values - cannot exceed 10 KB (10240 Bytes). This limit should accommodate most if not all use cases. Exceeding it will cause an exception with the message, "Environment: is too large (maximum is 10KB)."  This parameter is supported only by Chef 11.10 stacks. If you have specified one or more environment variables, you cannot modify the stack's Chef version. 
        var environment: [EnvironmentVariable]? = nil
        /// Whether to enable SSL for the app.
        var enableSsl: Bool? = nil
        /// The app virtual host settings, with multiple domains separated by commas. For example: 'www.example.com, example.com' 
        var domains: [String]? = nil
        /// The app type. Each supported type is associated with a particular layer. For example, PHP applications are associated with a PHP layer. AWS OpsWorks deploys an application to those instances that are members of the corresponding layer. If your app isn't one of the standard types, or you prefer to implement your own Deploy recipes, specify other.
        var type: String = ""
        /// A description of the app.
        var description: String? = nil

        public init() {}

        public init(shortname: String? = nil, stackId: String, name: String, sslConfiguration: SslConfiguration? = nil, dataSources: [DataSource]? = nil, appSource: Source? = nil, attributes: [String: String]? = nil, environment: [EnvironmentVariable]? = nil, enableSsl: Bool? = nil, domains: [String]? = nil, type: String, description: String? = nil) {
            self.shortname = shortname
            self.stackId = stackId
            self.name = name
            self.sslConfiguration = sslConfiguration
            self.dataSources = dataSources
            self.appSource = appSource
            self.attributes = attributes
            self.environment = environment
            self.enableSsl = enableSsl
            self.domains = domains
            self.type = type
            self.description = description
        }

    }

    public struct ShutdownEventConfiguration: Serializable, Initializable {
        /// The time, in seconds, that AWS OpsWorks will wait after triggering a Shutdown event before shutting down an instance.
        var executionTimeout: Int32? = nil
        /// Whether to enable Elastic Load Balancing connection draining. For more information, see Connection Draining 
        var delayUntilElbConnectionsDrained: Bool? = nil

        public init() {}

        public init(executionTimeout: Int32? = nil, delayUntilElbConnectionsDrained: Bool? = nil) {
            self.executionTimeout = executionTimeout
            self.delayUntilElbConnectionsDrained = delayUntilElbConnectionsDrained
        }

    }

    public struct CreateUserProfileResult: Serializable, Initializable {
        /// The user's IAM ARN.
        var iamUserArn: String? = nil

        public init() {}

        public init(iamUserArn: String? = nil) {
            self.iamUserArn = iamUserArn
        }

    }

    public struct CloneStackRequest: Serializable, Initializable {
        /// The stack's operating system, which must be set to one of the following.   A supported Linux operating system: An Amazon Linux version, such as Amazon Linux 2016.03, Amazon Linux 2015.09, or Amazon Linux 2015.03.   A supported Ubuntu operating system, such as Ubuntu 16.04 LTS, Ubuntu 14.04 LTS, or Ubuntu 12.04 LTS.    CentOS 7     Red Hat Enterprise Linux 7     Microsoft Windows Server 2012 R2 Base, Microsoft Windows Server 2012 R2 with SQL Server Express, Microsoft Windows Server 2012 R2 with SQL Server Standard, or Microsoft Windows Server 2012 R2 with SQL Server Web.   A custom AMI: Custom. You specify the custom AMI you want to use when you create instances. For more information on how to use custom AMIs with OpsWorks, see Using Custom AMIs.   The default option is the parent stack's operating system. For more information on the supported operating systems, see AWS OpsWorks Operating Systems.  You can specify a different Linux operating system for the cloned stack, but you cannot change from Linux to Windows or Windows to Linux. 
        var defaultOs: String? = nil
        /// Whether to clone the source stack's permissions.
        var clonePermissions: Bool? = nil
        /// The stack AWS Identity and Access Management (IAM) role, which allows AWS OpsWorks to work with AWS resources on your behalf. You must set this parameter to the Amazon Resource Name (ARN) for an existing IAM role. If you create a stack by using the AWS OpsWorks console, it creates the role for you. You can obtain an existing stack's IAM ARN programmatically by calling DescribePermissions. For more information about IAM ARNs, see Using Identifiers.  You must set this parameter to a valid service role ARN or the action will fail; there is no default value. You can specify the source stack's service role ARN, if you prefer, but you must do so explicitly. 
        var serviceRoleArn: String = ""
        /// The default root device type. This value is used by default for all instances in the cloned stack, but you can override it when you create an instance. For more information, see Storage for the Root Device.
        var defaultRootDeviceType: String? = nil
        /// The Amazon Resource Name (ARN) of an IAM profile that is the default profile for all of the stack's EC2 instances. For more information about IAM ARNs, see Using Identifiers.
        var defaultInstanceProfileArn: String? = nil
        /// A ChefConfiguration object that specifies whether to enable Berkshelf and the Berkshelf version on Chef 11.10 stacks. For more information, see Create a New Stack.
        var chefConfiguration: ChefConfiguration? = nil
        /// The cloned stack AWS region, such as "ap-northeast-2". For more information about AWS regions, see Regions and Endpoints.
        var region: String? = nil
        /// The source stack ID.
        var sourceStackId: String = ""
        /// A string that contains user-defined, custom JSON. It is used to override the corresponding default stack configuration JSON values. The string should be in the following format:  "{\"key1\": \"value1\", \"key2\": \"value2\",...}"  For more information on custom JSON, see Use Custom JSON to Modify the Stack Configuration Attributes 
        var customJson: String? = nil
        /// Whether to use custom cookbooks.
        var useCustomCookbooks: Bool? = nil
        var customCookbooksSource: Source? = nil
        /// A default Amazon EC2 key pair name. The default value is none. If you specify a key pair name, AWS OpsWorks installs the public key on the instance and you can use the private key with an SSH client to log in to the instance. For more information, see  Using SSH to Communicate with an Instance and  Managing SSH Access. You can override this setting by specifying a different key pair, or no key pair, when you  create an instance. 
        var defaultSshKeyName: String? = nil
        /// The default AWS OpsWorks agent version. You have the following options:   Auto-update - Set this parameter to LATEST. AWS OpsWorks automatically installs new agent versions on the stack's instances as soon as they are available.   Fixed version - Set this parameter to your preferred agent version. To update the agent version, you must edit the stack configuration and specify a new version. AWS OpsWorks then automatically installs that version on the stack's instances.   The default setting is LATEST. To specify an agent version, you must use the complete version number, not the abbreviated number shown on the console. For a list of available agent version numbers, call DescribeAgentVersions.  You can also specify an agent version when you create or update an instance, which overrides the stack's default setting. 
        var agentVersion: String? = nil
        /// The ID of the VPC that the cloned stack is to be launched into. It must be in the specified region. All instances are launched into this VPC, and you cannot change the ID later.   If your account supports EC2 Classic, the default value is no VPC.   If your account does not support EC2 Classic, the default value is the default VPC for the specified region.   If the VPC ID corresponds to a default VPC and you have specified either the DefaultAvailabilityZone or the DefaultSubnetId parameter only, AWS OpsWorks infers the value of the other parameter. If you specify neither parameter, AWS OpsWorks sets these parameters to the first valid Availability Zone for the specified region and the corresponding default VPC subnet ID, respectively.  If you specify a nondefault VPC ID, note the following:   It must belong to a VPC in your account that is in the specified region.   You must specify a value for DefaultSubnetId.   For more information on how to use AWS OpsWorks with a VPC, see Running a Stack in a VPC. For more information on default VPC and EC2 Classic, see Supported Platforms. 
        var vpcId: String? = nil
        /// The cloned stack name.
        var name: String? = nil
        /// A list of source stack app IDs to be included in the cloned stack.
        var cloneAppIds: [String]? = nil
        /// A list of stack attributes and values as key/value pairs to be added to the cloned stack.
        var attributes: [String: String]? = nil
        /// The stack's default VPC subnet ID. This parameter is required if you specify a value for the VpcId parameter. All instances are launched into this subnet unless you specify otherwise when you create the instance. If you also specify a value for DefaultAvailabilityZone, the subnet must be in that zone. For information on default values and when this parameter is required, see the VpcId parameter description. 
        var defaultSubnetId: String? = nil
        /// The cloned stack's default Availability Zone, which must be in the specified region. For more information, see Regions and Endpoints. If you also specify a value for DefaultSubnetId, the subnet must be in the same zone. For more information, see the VpcId parameter description. 
        var defaultAvailabilityZone: String? = nil
        /// The stack's host name theme, with spaces are replaced by underscores. The theme is used to generate host names for the stack's instances. By default, HostnameTheme is set to Layer_Dependent, which creates host names by appending integers to the layer's short name. The other themes are:    Baked_Goods     Clouds     Europe_Cities     Fruits     Greek_Deities     Legendary_creatures_from_Japan     Planets_and_Moons     Roman_Deities     Scottish_Islands     US_Cities     Wild_Cats    To obtain a generated host name, call GetHostNameSuggestion, which returns a host name based on the current theme.
        var hostnameTheme: String? = nil
        /// The configuration manager. When you clone a stack we recommend that you use the configuration manager to specify the Chef version: 12, 11.10, or 11.4 for Linux stacks, or 12.2 for Windows stacks. The default value for Linux stacks is currently 12.
        var configurationManager: StackConfigurationManager? = nil
        /// Whether to associate the AWS OpsWorks built-in security groups with the stack's layers. AWS OpsWorks provides a standard set of built-in security groups, one for each layer, which are associated with layers by default. With UseOpsworksSecurityGroups you can instead provide your own custom security groups. UseOpsworksSecurityGroups has the following settings:    True - AWS OpsWorks automatically associates the appropriate built-in security group with each layer (default setting). You can associate additional security groups with a layer after you create it but you cannot delete the built-in security group.   False - AWS OpsWorks does not associate built-in security groups with layers. You must create appropriate Amazon Elastic Compute Cloud (Amazon EC2) security groups and associate a security group with each layer that you create. However, you can still manually associate a built-in security group with a layer on creation; custom security groups are required only for those layers that need custom settings.   For more information, see Create a New Stack.
        var useOpsworksSecurityGroups: Bool? = nil

        public init() {}

        public init(defaultOs: String? = nil, clonePermissions: Bool? = nil, serviceRoleArn: String, defaultRootDeviceType: String? = nil, defaultInstanceProfileArn: String? = nil, chefConfiguration: ChefConfiguration? = nil, region: String? = nil, sourceStackId: String, customJson: String? = nil, useCustomCookbooks: Bool? = nil, customCookbooksSource: Source? = nil, defaultSshKeyName: String? = nil, agentVersion: String? = nil, vpcId: String? = nil, name: String? = nil, cloneAppIds: [String]? = nil, attributes: [String: String]? = nil, defaultSubnetId: String? = nil, defaultAvailabilityZone: String? = nil, hostnameTheme: String? = nil, configurationManager: StackConfigurationManager? = nil, useOpsworksSecurityGroups: Bool? = nil) {
            self.defaultOs = defaultOs
            self.clonePermissions = clonePermissions
            self.serviceRoleArn = serviceRoleArn
            self.defaultRootDeviceType = defaultRootDeviceType
            self.defaultInstanceProfileArn = defaultInstanceProfileArn
            self.chefConfiguration = chefConfiguration
            self.region = region
            self.sourceStackId = sourceStackId
            self.customJson = customJson
            self.useCustomCookbooks = useCustomCookbooks
            self.customCookbooksSource = customCookbooksSource
            self.defaultSshKeyName = defaultSshKeyName
            self.agentVersion = agentVersion
            self.vpcId = vpcId
            self.name = name
            self.cloneAppIds = cloneAppIds
            self.attributes = attributes
            self.defaultSubnetId = defaultSubnetId
            self.defaultAvailabilityZone = defaultAvailabilityZone
            self.hostnameTheme = hostnameTheme
            self.configurationManager = configurationManager
            self.useOpsworksSecurityGroups = useOpsworksSecurityGroups
        }

    }

    public struct DescribeLayersRequest: Serializable, Initializable {
        /// The stack ID.
        var stackId: String? = nil
        /// An array of layer IDs that specify the layers to be described. If you omit this parameter, DescribeLayers returns a description of every layer in the specified stack.
        var layerIds: [String]? = nil

        public init() {}

        public init(stackId: String? = nil, layerIds: [String]? = nil) {
            self.stackId = stackId
            self.layerIds = layerIds
        }

    }

    public struct DescribeAgentVersionsRequest: Serializable, Initializable {
        /// The stack ID.
        var stackId: String? = nil
        /// The configuration manager.
        var configurationManager: StackConfigurationManager? = nil

        public init() {}

        public init(stackId: String? = nil, configurationManager: StackConfigurationManager? = nil) {
            self.stackId = stackId
            self.configurationManager = configurationManager
        }

    }

    public struct DescribeDeploymentsRequest: Serializable, Initializable {
        /// The stack ID. If you include this parameter, DescribeDeployments returns a description of the commands associated with the specified stack.
        var stackId: String? = nil
        /// An array of deployment IDs to be described. If you include this parameter, DescribeDeployments returns a description of the specified deployments. Otherwise, it returns a description of every deployment.
        var deploymentIds: [String]? = nil
        /// The app ID. If you include this parameter, DescribeDeployments returns a description of the commands associated with the specified app.
        var appId: String? = nil

        public init() {}

        public init(stackId: String? = nil, deploymentIds: [String]? = nil, appId: String? = nil) {
            self.stackId = stackId
            self.deploymentIds = deploymentIds
            self.appId = appId
        }

    }

    public struct DescribeAppsResult: Serializable, Initializable {
        /// An array of App objects that describe the specified apps. 
        var apps: [App]? = nil

        public init() {}

        public init(apps: [App]? = nil) {
            self.apps = apps
        }

    }

    public struct DescribeVolumesResult: Serializable, Initializable {
        /// An array of volume IDs.
        var volumes: [Volume]? = nil

        public init() {}

        public init(volumes: [Volume]? = nil) {
            self.volumes = volumes
        }

    }

    public struct GrantAccessRequest: Serializable, Initializable {
        /// The length of time (in minutes) that the grant is valid. When the grant expires at the end of this period, the user will no longer be able to use the credentials to log in. If the user is logged in at the time, he or she automatically will be logged out.
        var validForInMinutes: Int32? = nil
        /// The instance's AWS OpsWorks ID.
        var instanceId: String = ""

        public init() {}

        public init(validForInMinutes: Int32? = nil, instanceId: String) {
            self.validForInMinutes = validForInMinutes
            self.instanceId = instanceId
        }

    }

    public struct DescribeLayersResult: Serializable, Initializable {
        /// An array of Layer objects that describe the layers.
        var layers: [Layer]? = nil

        public init() {}

        public init(layers: [Layer]? = nil) {
            self.layers = layers
        }

    }

    public struct DetachElasticLoadBalancerRequest: Serializable, Initializable {
        /// The ID of the layer that the Elastic Load Balancing instance is attached to.
        var layerId: String = ""
        /// The Elastic Load Balancing instance's name.
        var elasticLoadBalancerName: String = ""

        public init() {}

        public init(layerId: String, elasticLoadBalancerName: String) {
            self.layerId = layerId
            self.elasticLoadBalancerName = elasticLoadBalancerName
        }

    }

    public struct RegisterInstanceResult: Serializable, Initializable {
        /// The registered instance's AWS OpsWorks ID.
        var instanceId: String? = nil

        public init() {}

        public init(instanceId: String? = nil) {
            self.instanceId = instanceId
        }

    }

    public struct ElasticIp: Serializable, Initializable {
        /// The domain.
        var domain: String? = nil
        /// The IP address.
        var ip: String? = nil
        /// The ID of the instance that the address is attached to.
        var instanceId: String? = nil
        /// The AWS region. For more information, see Regions and Endpoints.
        var region: String? = nil
        /// The name.
        var name: String? = nil

        public init() {}

        public init(domain: String? = nil, ip: String? = nil, instanceId: String? = nil, region: String? = nil, name: String? = nil) {
            self.domain = domain
            self.ip = ip
            self.instanceId = instanceId
            self.region = region
            self.name = name
        }

    }

    public struct GrantAccessResult: Serializable, Initializable {
        /// A TemporaryCredential object that contains the data needed to log in to the instance by RDP clients, such as the Microsoft Remote Desktop Connection.
        var temporaryCredential: TemporaryCredential? = nil

        public init() {}

        public init(temporaryCredential: TemporaryCredential? = nil) {
            self.temporaryCredential = temporaryCredential
        }

    }

    public struct AssignInstanceRequest: Serializable, Initializable {
        /// The layer ID, which must correspond to a custom layer. You cannot assign a registered instance to a built-in layer.
        var layerIds: [String] = []
        /// The instance ID.
        var instanceId: String = ""

        public init() {}

        public init(layerIds: [String], instanceId: String) {
            self.layerIds = layerIds
            self.instanceId = instanceId
        }

    }

    public struct AssociateElasticIpRequest: Serializable, Initializable {
        /// The Elastic IP address.
        var elasticIp: String = ""
        /// The instance ID.
        var instanceId: String? = nil

        public init() {}

        public init(elasticIp: String, instanceId: String? = nil) {
            self.elasticIp = elasticIp
            self.instanceId = instanceId
        }

    }

    public struct UnassignVolumeRequest: Serializable, Initializable {
        /// The volume ID.
        var volumeId: String = ""

        public init() {}

        public init(volumeId: String) {
            self.volumeId = volumeId
        }

    }

    public struct VolumeConfiguration: Serializable, Initializable {
        /// The number of disks in the volume.
        var numberOfDisks: Int32 = 0
        /// The volume type:    standard - Magnetic    io1 - Provisioned IOPS (SSD)    gp2 - General Purpose (SSD)  
        var volumeType: String? = nil
        /// For PIOPS volumes, the IOPS per disk.
        var iops: Int32? = nil
        /// The volume mount point. For example "/dev/sdh".
        var mountPoint: String = ""
        /// The volume size.
        var size: Int32 = 0
        /// The volume RAID level.
        var raidLevel: Int32? = nil

        public init() {}

        public init(numberOfDisks: Int32, volumeType: String? = nil, iops: Int32? = nil, mountPoint: String, size: Int32, raidLevel: Int32? = nil) {
            self.numberOfDisks = numberOfDisks
            self.volumeType = volumeType
            self.iops = iops
            self.mountPoint = mountPoint
            self.size = size
            self.raidLevel = raidLevel
        }

    }

    public struct CreateAppResult: Serializable, Initializable {
        /// The app ID.
        var appId: String? = nil

        public init() {}

        public init(appId: String? = nil) {
            self.appId = appId
        }

    }

    public struct DescribeUserProfilesResult: Serializable, Initializable {
        /// A Users object that describes the specified users.
        var userProfiles: [UserProfile]? = nil

        public init() {}

        public init(userProfiles: [UserProfile]? = nil) {
            self.userProfiles = userProfiles
        }

    }

    public struct SetLoadBasedAutoScalingRequest: Serializable, Initializable {
        /// An AutoScalingThresholds object with the downscaling threshold configuration. If the load falls below these thresholds for a specified amount of time, AWS OpsWorks stops a specified number of instances.
        var downScaling: AutoScalingThresholds? = nil
        /// Enables load-based auto scaling for the layer.
        var enable: Bool? = nil
        /// An AutoScalingThresholds object with the upscaling threshold configuration. If the load exceeds these thresholds for a specified amount of time, AWS OpsWorks starts a specified number of instances.
        var upScaling: AutoScalingThresholds? = nil
        /// The layer ID.
        var layerId: String = ""

        public init() {}

        public init(downScaling: AutoScalingThresholds? = nil, enable: Bool? = nil, upScaling: AutoScalingThresholds? = nil, layerId: String) {
            self.downScaling = downScaling
            self.enable = enable
            self.upScaling = upScaling
            self.layerId = layerId
        }

    }

    public struct DeleteStackRequest: Serializable, Initializable {
        /// The stack ID.
        var stackId: String = ""

        public init() {}

        public init(stackId: String) {
            self.stackId = stackId
        }

    }

    public struct UpdateMyUserProfileRequest: Serializable, Initializable {
        /// The user's SSH public key.
        var sshPublicKey: String? = nil

        public init() {}

        public init(sshPublicKey: String? = nil) {
            self.sshPublicKey = sshPublicKey
        }

    }

    public struct StopInstanceRequest: Serializable, Initializable {
        /// The instance ID.
        var instanceId: String = ""

        public init() {}

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

    }

    public struct DeploymentCommand: Serializable, Initializable {
        /// Specifies the operation. You can specify only one command. For stacks, the following commands are available:    execute_recipes: Execute one or more recipes. To specify the recipes, set an Args parameter named recipes to the list of recipes to be executed. For example, to execute phpapp::appsetup, set Args to {"recipes":["phpapp::appsetup"]}.    install_dependencies: Install the stack's dependencies.    update_custom_cookbooks: Update the stack's custom cookbooks.    update_dependencies: Update the stack's dependencies.    The update_dependencies and install_dependencies commands are supported only for Linux instances. You can run the commands successfully on Windows instances, but they do nothing.  For apps, the following commands are available:    deploy: Deploy an app. Ruby on Rails apps have an optional Args parameter named migrate. Set Args to {"migrate":["true"]} to migrate the database. The default setting is {"migrate":["false"]}.    rollback Roll the app back to the previous version. When you update an app, AWS OpsWorks stores the previous version, up to a maximum of five versions. You can use this command to roll an app back as many as four versions.    start: Start the app's web or application server.    stop: Stop the app's web or application server.    restart: Restart the app's web or application server.    undeploy: Undeploy the app.  
        var name: String = ""
        /// The arguments of those commands that take arguments. It should be set to a JSON object with the following format:  {"arg_name1" : ["value1", "value2", ...], "arg_name2" : ["value1", "value2", ...], ...}  The update_dependencies command takes two arguments:    upgrade_os_to - Specifies the desired Amazon Linux version for instances whose OS you want to upgrade, such as Amazon Linux 2014.09. You must also set the allow_reboot argument to true.    allow_reboot - Specifies whether to allow AWS OpsWorks to reboot the instances if necessary, after installing the updates. This argument can be set to either true or false. The default value is false.   For example, to upgrade an instance to Amazon Linux 2014.09, set Args to the following.   { "upgrade_os_to":["Amazon Linux 2014.09"], "allow_reboot":["true"] }  
        var args: [String: [String]]? = nil

        public init() {}

        public init(name: String, args: [String: [String]]? = nil) {
            self.name = name
            self.args = args
        }

    }

    public struct DescribeInstancesRequest: Serializable, Initializable {
        /// A stack ID. If you use this parameter, DescribeInstances returns descriptions of the instances associated with the specified stack.
        var stackId: String? = nil
        /// An array of instance IDs to be described. If you use this parameter, DescribeInstances returns a description of the specified instances. Otherwise, it returns a description of every instance.
        var instanceIds: [String]? = nil
        /// A layer ID. If you use this parameter, DescribeInstances returns descriptions of the instances associated with the specified layer.
        var layerId: String? = nil

        public init() {}

        public init(stackId: String? = nil, instanceIds: [String]? = nil, layerId: String? = nil) {
            self.stackId = stackId
            self.instanceIds = instanceIds
            self.layerId = layerId
        }

    }

    public struct DescribeLoadBasedAutoScalingResult: Serializable, Initializable {
        /// An array of LoadBasedAutoScalingConfiguration objects that describe each layer's configuration.
        var loadBasedAutoScalingConfigurations: [LoadBasedAutoScalingConfiguration]? = nil

        public init() {}

        public init(loadBasedAutoScalingConfigurations: [LoadBasedAutoScalingConfiguration]? = nil) {
            self.loadBasedAutoScalingConfigurations = loadBasedAutoScalingConfigurations
        }

    }

    public struct RegisterRdsDbInstanceRequest: Serializable, Initializable {
        /// The stack ID.
        var stackId: String = ""
        /// The Amazon RDS instance's ARN.
        var rdsDbInstanceArn: String = ""
        /// The database password.
        var dbPassword: String = ""
        /// The database's master user name.
        var dbUser: String = ""

        public init() {}

        public init(stackId: String, rdsDbInstanceArn: String, dbPassword: String, dbUser: String) {
            self.stackId = stackId
            self.rdsDbInstanceArn = rdsDbInstanceArn
            self.dbPassword = dbPassword
            self.dbUser = dbUser
        }

    }

    public struct CreateInstanceResult: Serializable, Initializable {
        /// The instance ID.
        var instanceId: String? = nil

        public init() {}

        public init(instanceId: String? = nil) {
            self.instanceId = instanceId
        }

    }

    public struct Deployment: Serializable, Initializable {
        /// Date when the deployment completed.
        var completedAt: String? = nil
        /// The deployment status:   running   successful   failed  
        var status: String? = nil
        /// Date when the deployment was created.
        var createdAt: String? = nil
        /// The stack ID.
        var stackId: String? = nil
        /// A user-defined comment.
        var comment: String? = nil
        /// The deployment ID.
        var deploymentId: String? = nil
        /// The user's IAM ARN.
        var iamUserArn: String? = nil
        /// A string that contains user-defined custom JSON. It can be used to override the corresponding default stack configuration attribute values for stack or to pass data to recipes. The string should be in the following format:  "{\"key1\": \"value1\", \"key2\": \"value2\",...}"  For more information on custom JSON, see Use Custom JSON to Modify the Stack Configuration Attributes.
        var customJson: String? = nil
        /// The deployment duration.
        var duration: Int32? = nil
        /// The IDs of the target instances.
        var instanceIds: [String]? = nil
        var command: DeploymentCommand? = nil
        /// The app ID.
        var appId: String? = nil

        public init() {}

        public init(completedAt: String? = nil, status: String? = nil, createdAt: String? = nil, stackId: String? = nil, comment: String? = nil, deploymentId: String? = nil, iamUserArn: String? = nil, customJson: String? = nil, duration: Int32? = nil, instanceIds: [String]? = nil, command: DeploymentCommand? = nil, appId: String? = nil) {
            self.completedAt = completedAt
            self.status = status
            self.createdAt = createdAt
            self.stackId = stackId
            self.comment = comment
            self.deploymentId = deploymentId
            self.iamUserArn = iamUserArn
            self.customJson = customJson
            self.duration = duration
            self.instanceIds = instanceIds
            self.command = command
            self.appId = appId
        }

    }

    public struct RegisterInstanceRequest: Serializable, Initializable {
        /// An InstanceIdentity object that contains the instance's identity.
        var instanceIdentity: InstanceIdentity? = nil
        /// The instance's hostname.
        var hostname: String? = nil
        /// The ID of the stack that the instance is to be registered with.
        var stackId: String = ""
        /// The instance's private IP address.
        var privateIp: String? = nil
        /// The instances public RSA key fingerprint.
        var rsaPublicKeyFingerprint: String? = nil
        /// The instance's public IP address.
        var publicIp: String? = nil
        /// The instances public RSA key. This key is used to encrypt communication between the instance and the service.
        var rsaPublicKey: String? = nil

        public init() {}

        public init(instanceIdentity: InstanceIdentity? = nil, hostname: String? = nil, stackId: String, privateIp: String? = nil, rsaPublicKeyFingerprint: String? = nil, publicIp: String? = nil, rsaPublicKey: String? = nil) {
            self.instanceIdentity = instanceIdentity
            self.hostname = hostname
            self.stackId = stackId
            self.privateIp = privateIp
            self.rsaPublicKeyFingerprint = rsaPublicKeyFingerprint
            self.publicIp = publicIp
            self.rsaPublicKey = rsaPublicKey
        }

    }

    public struct DescribeAppsRequest: Serializable, Initializable {
        /// The app stack ID. If you use this parameter, DescribeApps returns a description of the apps in the specified stack.
        var stackId: String? = nil
        /// An array of app IDs for the apps to be described. If you use this parameter, DescribeApps returns a description of the specified apps. Otherwise, it returns a description of every app.
        var appIds: [String]? = nil

        public init() {}

        public init(stackId: String? = nil, appIds: [String]? = nil) {
            self.stackId = stackId
            self.appIds = appIds
        }

    }

    public struct Source: Serializable, Initializable {
        /// In requests, the repository's SSH key. In responses, AWS OpsWorks returns *****FILTERED***** instead of the actual value.
        var sshKey: String? = nil
        /// This parameter depends on the repository type.   For Amazon S3 bundles, set Username to the appropriate IAM access key ID.   For HTTP bundles, Git repositories, and Subversion repositories, set Username to the user name.  
        var username: String? = nil
        /// When included in a request, the parameter depends on the repository type.   For Amazon S3 bundles, set Password to the appropriate IAM secret access key.   For HTTP bundles and Subversion repositories, set Password to the password.   For more information on how to safely handle IAM credentials, see http://docs.aws.amazon.com/general/latest/gr/aws-access-keys-best-practices.html. In responses, AWS OpsWorks returns *****FILTERED***** instead of the actual value.
        var password: String? = nil
        /// The repository type.
        var type: String? = nil
        /// The source URL.
        var url: String? = nil
        /// The application's version. AWS OpsWorks enables you to easily deploy new versions of an application. One of the simplest approaches is to have branches or revisions in your repository that represent different versions that can potentially be deployed.
        var revision: String? = nil

        public init() {}

        public init(sshKey: String? = nil, username: String? = nil, password: String? = nil, type: String? = nil, url: String? = nil, revision: String? = nil) {
            self.sshKey = sshKey
            self.username = username
            self.password = password
            self.type = type
            self.url = url
            self.revision = revision
        }

    }

    public struct DescribeRaidArraysResult: Serializable, Initializable {
        /// A RaidArrays object that describes the specified RAID arrays.
        var raidArrays: [RaidArray]? = nil

        public init() {}

        public init(raidArrays: [RaidArray]? = nil) {
            self.raidArrays = raidArrays
        }

    }

    public struct DescribeStacksResult: Serializable, Initializable {
        /// An array of Stack objects that describe the stacks.
        var stacks: [Stack]? = nil

        public init() {}

        public init(stacks: [Stack]? = nil) {
            self.stacks = stacks
        }

    }

    public struct DescribeServiceErrorsRequest: Serializable, Initializable {
        /// The stack ID. If you use this parameter, DescribeServiceErrors returns descriptions of the errors associated with the specified stack.
        var stackId: String? = nil
        /// The instance ID. If you use this parameter, DescribeServiceErrors returns descriptions of the errors associated with the specified instance.
        var instanceId: String? = nil
        /// An array of service error IDs. If you use this parameter, DescribeServiceErrors returns descriptions of the specified errors. Otherwise, it returns a description of every error.
        var serviceErrorIds: [String]? = nil

        public init() {}

        public init(stackId: String? = nil, instanceId: String? = nil, serviceErrorIds: [String]? = nil) {
            self.stackId = stackId
            self.instanceId = instanceId
            self.serviceErrorIds = serviceErrorIds
        }

    }

    public struct DescribeVolumesRequest: Serializable, Initializable {
        /// The RAID array ID. If you use this parameter, DescribeVolumes returns descriptions of the volumes associated with the specified RAID array.
        var raidArrayId: String? = nil
        /// Am array of volume IDs. If you use this parameter, DescribeVolumes returns descriptions of the specified volumes. Otherwise, it returns a description of every volume.
        var volumeIds: [String]? = nil
        /// A stack ID. The action describes the stack's registered Amazon EBS volumes.
        var stackId: String? = nil
        /// The instance ID. If you use this parameter, DescribeVolumes returns descriptions of the volumes associated with the specified instance.
        var instanceId: String? = nil

        public init() {}

        public init(raidArrayId: String? = nil, volumeIds: [String]? = nil, stackId: String? = nil, instanceId: String? = nil) {
            self.raidArrayId = raidArrayId
            self.volumeIds = volumeIds
            self.stackId = stackId
            self.instanceId = instanceId
        }

    }

    public struct AutoScalingThresholds: Serializable, Initializable {
        /// The CPU utilization threshold, as a percent of the available CPU. A value of -1 disables the threshold.
        var cpuThreshold: Double? = nil
        /// The amount of time (in minutes) after a scaling event occurs that AWS OpsWorks should ignore metrics and suppress additional scaling events. For example, AWS OpsWorks adds new instances following an upscaling event but the instances won't start reducing the load until they have been booted and configured. There is no point in raising additional scaling events during that operation, which typically takes several minutes. IgnoreMetricsTime allows you to direct AWS OpsWorks to suppress scaling events long enough to get the new instances online.
        var ignoreMetricsTime: Int32? = nil
        /// The memory utilization threshold, as a percent of the available memory. A value of -1 disables the threshold.
        var memoryThreshold: Double? = nil
        /// The load threshold. A value of -1 disables the threshold. For more information about how load is computed, see Load (computing).
        var loadThreshold: Double? = nil
        /// The number of instances to add or remove when the load exceeds a threshold.
        var instanceCount: Int32? = nil
        /// Custom Cloudwatch auto scaling alarms, to be used as thresholds. This parameter takes a list of up to five alarm names, which are case sensitive and must be in the same region as the stack.  To use custom alarms, you must update your service role to allow cloudwatch:DescribeAlarms. You can either have AWS OpsWorks update the role for you when you first use this feature or you can edit the role manually. For more information, see Allowing AWS OpsWorks to Act on Your Behalf. 
        var alarms: [String]? = nil
        /// The amount of time, in minutes, that the load must exceed a threshold before more instances are added or removed.
        var thresholdsWaitTime: Int32? = nil

        public init() {}

        public init(cpuThreshold: Double? = nil, ignoreMetricsTime: Int32? = nil, memoryThreshold: Double? = nil, loadThreshold: Double? = nil, instanceCount: Int32? = nil, alarms: [String]? = nil, thresholdsWaitTime: Int32? = nil) {
            self.cpuThreshold = cpuThreshold
            self.ignoreMetricsTime = ignoreMetricsTime
            self.memoryThreshold = memoryThreshold
            self.loadThreshold = loadThreshold
            self.instanceCount = instanceCount
            self.alarms = alarms
            self.thresholdsWaitTime = thresholdsWaitTime
        }

    }

    public struct DescribeEcsClustersRequest: Serializable, Initializable {
        /// A list of ARNs, one for each cluster to be described.
        var ecsClusterArns: [String]? = nil
        /// A stack ID. DescribeEcsClusters returns a description of the cluster that is registered with the stack.
        var stackId: String? = nil
        /// If the previous paginated request did not return all of the remaining results, the response object'sNextToken parameter value is set to a token. To retrieve the next set of results, call DescribeEcsClusters again and assign that token to the request object's NextToken parameter. If there are no remaining results, the previous response object's NextToken parameter is set to null.
        var nextToken: String? = nil
        /// To receive a paginated response, use this parameter to specify the maximum number of results to be returned with a single call. If the number of available results exceeds this maximum, the response includes a NextToken value that you can assign to the NextToken request parameter to get the next set of results.
        var maxResults: Int32? = nil

        public init() {}

        public init(ecsClusterArns: [String]? = nil, stackId: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.ecsClusterArns = ecsClusterArns
            self.stackId = stackId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct UpdateLayerRequest: Serializable, Initializable {
        /// For custom layers only, use this parameter to specify the layer's short name, which is used internally by AWS OpsWorksand by Chef. The short name is also used as the name for the directory where your app files are installed. It can have a maximum of 200 characters and must be in the following format: /\A[a-z0-9\-\_\.]+\Z/. The built-in layers' short names are defined by AWS OpsWorks. For more information, see the Layer Reference 
        var shortname: String? = nil
        /// An array of Package objects that describe the layer's packages.
        var packages: [String]? = nil
        var lifecycleEventConfiguration: LifecycleEventConfiguration? = nil
        /// A LayerCustomRecipes object that specifies the layer's custom recipes.
        var customRecipes: Recipes? = nil
        /// Whether to automatically assign an Elastic IP address to the layer's instances. For more information, see How to Edit a Layer.
        var autoAssignElasticIps: Bool? = nil
        /// Whether to install operating system and package updates when the instance boots. The default value is true. To control when updates are installed, set this value to false. You must then update your instances manually by using CreateDeployment to run the update_dependencies stack command or manually running yum (Amazon Linux) or apt-get (Ubuntu) on the instances.   We strongly recommend using the default value of true, to ensure that your instances have the latest security updates. 
        var installUpdatesOnBoot: Bool? = nil
        /// A JSON-formatted string containing custom stack configuration and deployment attributes to be installed on the layer's instances. For more information, see  Using Custom JSON. 
        var customJson: String? = nil
        /// An array containing the layer's custom security group IDs.
        var customSecurityGroupIds: [String]? = nil
        /// The layer name, which is used by the console.
        var name: String? = nil
        /// The layer ID.
        var layerId: String = ""
        /// The ARN of an IAM profile to be used for all of the layer's EC2 instances. For more information about IAM ARNs, see Using Identifiers.
        var customInstanceProfileArn: String? = nil
        /// Whether to disable auto healing for the layer.
        var enableAutoHealing: Bool? = nil
        /// A VolumeConfigurations object that describes the layer's Amazon EBS volumes.
        var volumeConfigurations: [VolumeConfiguration]? = nil
        /// One or more user-defined key/value pairs to be added to the stack attributes.
        var attributes: [String: String]? = nil
        /// Whether to use Amazon EBS-optimized instances.
        var useEbsOptimizedInstances: Bool? = nil
        /// For stacks that are running in a VPC, whether to automatically assign a public IP address to the layer's instances. For more information, see How to Edit a Layer.
        var autoAssignPublicIps: Bool? = nil

        public init() {}

        public init(shortname: String? = nil, packages: [String]? = nil, lifecycleEventConfiguration: LifecycleEventConfiguration? = nil, customRecipes: Recipes? = nil, autoAssignElasticIps: Bool? = nil, installUpdatesOnBoot: Bool? = nil, customJson: String? = nil, customSecurityGroupIds: [String]? = nil, name: String? = nil, layerId: String, customInstanceProfileArn: String? = nil, enableAutoHealing: Bool? = nil, volumeConfigurations: [VolumeConfiguration]? = nil, attributes: [String: String]? = nil, useEbsOptimizedInstances: Bool? = nil, autoAssignPublicIps: Bool? = nil) {
            self.shortname = shortname
            self.packages = packages
            self.lifecycleEventConfiguration = lifecycleEventConfiguration
            self.customRecipes = customRecipes
            self.autoAssignElasticIps = autoAssignElasticIps
            self.installUpdatesOnBoot = installUpdatesOnBoot
            self.customJson = customJson
            self.customSecurityGroupIds = customSecurityGroupIds
            self.name = name
            self.layerId = layerId
            self.customInstanceProfileArn = customInstanceProfileArn
            self.enableAutoHealing = enableAutoHealing
            self.volumeConfigurations = volumeConfigurations
            self.attributes = attributes
            self.useEbsOptimizedInstances = useEbsOptimizedInstances
            self.autoAssignPublicIps = autoAssignPublicIps
        }

    }

    public struct DescribeStackProvisioningParametersResult: Serializable, Initializable {
        /// An embedded object that contains the provisioning parameters.
        var parameters: [String: String]? = nil
        /// The AWS OpsWorks agent installer's URL.
        var agentInstallerUrl: String? = nil

        public init() {}

        public init(parameters: [String: String]? = nil, agentInstallerUrl: String? = nil) {
            self.parameters = parameters
            self.agentInstallerUrl = agentInstallerUrl
        }

    }

    public struct UnassignInstanceRequest: Serializable, Initializable {
        /// The instance ID.
        var instanceId: String = ""

        public init() {}

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

    }

    public struct Stack: Serializable, Initializable {
        /// The stack's default operating system.
        var defaultOs: String? = nil
        /// Whether the stack automatically associates the AWS OpsWorks built-in security groups with the stack's layers.
        var useOpsworksSecurityGroups: Bool? = nil
        /// The stack's ARN.
        var arn: String? = nil
        /// The default root device type. This value is used by default for all instances in the stack, but you can override it when you create an instance. For more information, see Storage for the Root Device.
        var defaultRootDeviceType: String? = nil
        /// The ARN of an IAM profile that is the default profile for all of the stack's EC2 instances. For more information about IAM ARNs, see Using Identifiers.
        var defaultInstanceProfileArn: String? = nil
        /// The stack AWS Identity and Access Management (IAM) role.
        var serviceRoleArn: String? = nil
        /// The stack AWS region, such as "ap-northeast-2". For more information about AWS regions, see Regions and Endpoints.
        var region: String? = nil
        /// Whether the stack uses custom cookbooks.
        var useCustomCookbooks: Bool? = nil
        /// A JSON object that contains user-defined attributes to be added to the stack configuration and deployment attributes. You can use custom JSON to override the corresponding default stack configuration attribute values or to pass data to recipes. The string should be in the following format:  "{\"key1\": \"value1\", \"key2\": \"value2\",...}"  For more information on custom JSON, see Use Custom JSON to Modify the Stack Configuration Attributes.
        var customJson: String? = nil
        var customCookbooksSource: Source? = nil
        /// A default Amazon EC2 key pair for the stack's instances. You can override this value when you create or update an instance.
        var defaultSshKeyName: String? = nil
        /// The date when the stack was created.
        var createdAt: String? = nil
        /// The VPC ID; applicable only if the stack is running in a VPC.
        var vpcId: String? = nil
        /// The stack ID.
        var stackId: String? = nil
        /// The stack name.
        var name: String? = nil
        /// The agent version. This parameter is set to LATEST for auto-update. or a version number for a fixed agent version.
        var agentVersion: String? = nil
        /// The stack's attributes.
        var attributes: [String: String]? = nil
        /// The default subnet ID; applicable only if the stack is running in a VPC.
        var defaultSubnetId: String? = nil
        /// The stack's default Availability Zone. For more information, see Regions and Endpoints.
        var defaultAvailabilityZone: String? = nil
        /// The stack host name theme, with spaces replaced by underscores.
        var hostnameTheme: String? = nil
        /// The configuration manager.
        var configurationManager: StackConfigurationManager? = nil
        /// A ChefConfiguration object that specifies whether to enable Berkshelf and the Berkshelf version. For more information, see Create a New Stack.
        var chefConfiguration: ChefConfiguration? = nil

        public init() {}

        public init(defaultOs: String? = nil, useOpsworksSecurityGroups: Bool? = nil, arn: String? = nil, defaultRootDeviceType: String? = nil, defaultInstanceProfileArn: String? = nil, serviceRoleArn: String? = nil, region: String? = nil, useCustomCookbooks: Bool? = nil, customJson: String? = nil, customCookbooksSource: Source? = nil, defaultSshKeyName: String? = nil, createdAt: String? = nil, vpcId: String? = nil, stackId: String? = nil, name: String? = nil, agentVersion: String? = nil, attributes: [String: String]? = nil, defaultSubnetId: String? = nil, defaultAvailabilityZone: String? = nil, hostnameTheme: String? = nil, configurationManager: StackConfigurationManager? = nil, chefConfiguration: ChefConfiguration? = nil) {
            self.defaultOs = defaultOs
            self.useOpsworksSecurityGroups = useOpsworksSecurityGroups
            self.arn = arn
            self.defaultRootDeviceType = defaultRootDeviceType
            self.defaultInstanceProfileArn = defaultInstanceProfileArn
            self.serviceRoleArn = serviceRoleArn
            self.region = region
            self.useCustomCookbooks = useCustomCookbooks
            self.customJson = customJson
            self.customCookbooksSource = customCookbooksSource
            self.defaultSshKeyName = defaultSshKeyName
            self.createdAt = createdAt
            self.vpcId = vpcId
            self.stackId = stackId
            self.name = name
            self.agentVersion = agentVersion
            self.attributes = attributes
            self.defaultSubnetId = defaultSubnetId
            self.defaultAvailabilityZone = defaultAvailabilityZone
            self.hostnameTheme = hostnameTheme
            self.configurationManager = configurationManager
            self.chefConfiguration = chefConfiguration
        }

    }

    public struct StartStackRequest: Serializable, Initializable {
        /// The stack ID.
        var stackId: String = ""

        public init() {}

        public init(stackId: String) {
            self.stackId = stackId
        }

    }

    public struct ReportedOs: Serializable, Initializable {
        /// The operating system family.
        var family: String? = nil
        /// The operating system name.
        var name: String? = nil
        /// The operating system version.
        var version: String? = nil

        public init() {}

        public init(family: String? = nil, name: String? = nil, version: String? = nil) {
            self.family = family
            self.name = name
            self.version = version
        }

    }

    public struct Recipes: Serializable, Initializable {
        /// An array of custom recipe names to be run following a undeploy event.
        var undeploy: [String]? = nil
        /// An array of custom recipe names to be run following a setup event.
        var setup: [String]? = nil
        /// An array of custom recipe names to be run following a configure event.
        var configure: [String]? = nil
        /// An array of custom recipe names to be run following a shutdown event.
        var shutdown: [String]? = nil
        /// An array of custom recipe names to be run following a deploy event.
        var deploy: [String]? = nil

        public init() {}

        public init(undeploy: [String]? = nil, setup: [String]? = nil, configure: [String]? = nil, shutdown: [String]? = nil, deploy: [String]? = nil) {
            self.undeploy = undeploy
            self.setup = setup
            self.configure = configure
            self.shutdown = shutdown
            self.deploy = deploy
        }

    }

    public struct SetPermissionRequest: Serializable, Initializable {
        /// The user's permission level, which must be set to one of the following strings. You cannot set your own permissions level.    deny     show     deploy     manage     iam_only    For more information on the permissions associated with these levels, see Managing User Permissions.
        var level: String? = nil
        /// The user's IAM ARN. This can also be a federated user's ARN.
        var iamUserArn: String = ""
        /// The user is allowed to use SSH to communicate with the instance.
        var allowSsh: Bool? = nil
        /// The stack ID.
        var stackId: String = ""
        /// The user is allowed to use sudo to elevate privileges.
        var allowSudo: Bool? = nil

        public init() {}

        public init(level: String? = nil, iamUserArn: String, allowSsh: Bool? = nil, stackId: String, allowSudo: Bool? = nil) {
            self.level = level
            self.iamUserArn = iamUserArn
            self.allowSsh = allowSsh
            self.stackId = stackId
            self.allowSudo = allowSudo
        }

    }

    public struct DescribeTimeBasedAutoScalingResult: Serializable, Initializable {
        /// An array of TimeBasedAutoScalingConfiguration objects that describe the configuration for the specified instances.
        var timeBasedAutoScalingConfigurations: [TimeBasedAutoScalingConfiguration]? = nil

        public init() {}

        public init(timeBasedAutoScalingConfigurations: [TimeBasedAutoScalingConfiguration]? = nil) {
            self.timeBasedAutoScalingConfigurations = timeBasedAutoScalingConfigurations
        }

    }

    public struct DescribeElasticLoadBalancersRequest: Serializable, Initializable {
        /// A stack ID. The action describes the stack's Elastic Load Balancing instances.
        var stackId: String? = nil
        /// A list of layer IDs. The action describes the Elastic Load Balancing instances for the specified layers.
        var layerIds: [String]? = nil

        public init() {}

        public init(stackId: String? = nil, layerIds: [String]? = nil) {
            self.stackId = stackId
            self.layerIds = layerIds
        }

    }

    public struct UpdateVolumeRequest: Serializable, Initializable {
        /// The new mount point.
        var mountPoint: String? = nil
        /// The volume ID.
        var volumeId: String = ""
        /// The new name.
        var name: String? = nil

        public init() {}

        public init(mountPoint: String? = nil, volumeId: String, name: String? = nil) {
            self.mountPoint = mountPoint
            self.volumeId = volumeId
            self.name = name
        }

    }

    public struct RegisterVolumeResult: Serializable, Initializable {
        /// The volume ID.
        var volumeId: String? = nil

        public init() {}

        public init(volumeId: String? = nil) {
            self.volumeId = volumeId
        }

    }

    public struct DescribeMyUserProfileResult: Serializable, Initializable {
        /// A UserProfile object that describes the user's SSH information.
        var userProfile: SelfUserProfile? = nil

        public init() {}

        public init(userProfile: SelfUserProfile? = nil) {
            self.userProfile = userProfile
        }

    }

    public struct RegisterElasticIpRequest: Serializable, Initializable {
        /// The Elastic IP address.
        var elasticIp: String = ""
        /// The stack ID.
        var stackId: String = ""

        public init() {}

        public init(elasticIp: String, stackId: String) {
            self.elasticIp = elasticIp
            self.stackId = stackId
        }

    }

    public struct DescribeCommandsRequest: Serializable, Initializable {
        /// An array of command IDs. If you include this parameter, DescribeCommands returns a description of the specified commands. Otherwise, it returns a description of every command.
        var commandIds: [String]? = nil
        /// The deployment ID. If you include this parameter, DescribeCommands returns a description of the commands associated with the specified deployment.
        var deploymentId: String? = nil
        /// The instance ID. If you include this parameter, DescribeCommands returns a description of the commands associated with the specified instance.
        var instanceId: String? = nil

        public init() {}

        public init(commandIds: [String]? = nil, deploymentId: String? = nil, instanceId: String? = nil) {
            self.commandIds = commandIds
            self.deploymentId = deploymentId
            self.instanceId = instanceId
        }

    }

    public struct DescribeAgentVersionsResult: Serializable, Initializable {
        /// The agent versions for the specified stack or configuration manager. Note that this value is the complete version number, not the abbreviated number used by the console.
        var agentVersions: [AgentVersion]? = nil

        public init() {}

        public init(agentVersions: [AgentVersion]? = nil) {
            self.agentVersions = agentVersions
        }

    }

    public struct CreateStackRequest: Serializable, Initializable {
        /// The stack's default operating system, which is installed on every instance unless you specify a different operating system when you create the instance. You can specify one of the following.   A supported Linux operating system: An Amazon Linux version, such as Amazon Linux 2016.03, Amazon Linux 2015.09, or Amazon Linux 2015.03.   A supported Ubuntu operating system, such as Ubuntu 16.04 LTS, Ubuntu 14.04 LTS, or Ubuntu 12.04 LTS.    CentOS 7     Red Hat Enterprise Linux 7    A supported Windows operating system, such as Microsoft Windows Server 2012 R2 Base, Microsoft Windows Server 2012 R2 with SQL Server Express, Microsoft Windows Server 2012 R2 with SQL Server Standard, or Microsoft Windows Server 2012 R2 with SQL Server Web.   A custom AMI: Custom. You specify the custom AMI you want to use when you create instances. For more information, see  Using Custom AMIs.   The default option is the current Amazon Linux version. For more information on the supported operating systems, see AWS OpsWorks Operating Systems.
        var defaultOs: String? = nil
        /// A ChefConfiguration object that specifies whether to enable Berkshelf and the Berkshelf version on Chef 11.10 stacks. For more information, see Create a New Stack.
        var chefConfiguration: ChefConfiguration? = nil
        /// The stack's AWS Identity and Access Management (IAM) role, which allows AWS OpsWorks to work with AWS resources on your behalf. You must set this parameter to the Amazon Resource Name (ARN) for an existing IAM role. For more information about IAM ARNs, see Using Identifiers.
        var serviceRoleArn: String = ""
        /// The default root device type. This value is the default for all instances in the stack, but you can override it when you create an instance. The default option is instance-store. For more information, see Storage for the Root Device.
        var defaultRootDeviceType: String? = nil
        /// The Amazon Resource Name (ARN) of an IAM profile that is the default profile for all of the stack's EC2 instances. For more information about IAM ARNs, see Using Identifiers.
        var defaultInstanceProfileArn: String = ""
        /// The stack's AWS region, such as "ap-south-1". For more information about Amazon regions, see Regions and Endpoints.
        var region: String = ""
        var customCookbooksSource: Source? = nil
        /// A string that contains user-defined, custom JSON. It can be used to override the corresponding default stack configuration attribute values or to pass data to recipes. The string should be in the following format:  "{\"key1\": \"value1\", \"key2\": \"value2\",...}"  For more information on custom JSON, see Use Custom JSON to Modify the Stack Configuration Attributes.
        var customJson: String? = nil
        /// Whether the stack uses custom cookbooks.
        var useCustomCookbooks: Bool? = nil
        /// A default Amazon EC2 key pair name. The default value is none. If you specify a key pair name, AWS OpsWorks installs the public key on the instance and you can use the private key with an SSH client to log in to the instance. For more information, see  Using SSH to Communicate with an Instance and  Managing SSH Access. You can override this setting by specifying a different key pair, or no key pair, when you  create an instance. 
        var defaultSshKeyName: String? = nil
        /// The default AWS OpsWorks agent version. You have the following options:   Auto-update - Set this parameter to LATEST. AWS OpsWorks automatically installs new agent versions on the stack's instances as soon as they are available.   Fixed version - Set this parameter to your preferred agent version. To update the agent version, you must edit the stack configuration and specify a new version. AWS OpsWorks then automatically installs that version on the stack's instances.   The default setting is the most recent release of the agent. To specify an agent version, you must use the complete version number, not the abbreviated number shown on the console. For a list of available agent version numbers, call DescribeAgentVersions.  You can also specify an agent version when you create or update an instance, which overrides the stack's default setting. 
        var agentVersion: String? = nil
        /// The stack name.
        var name: String = ""
        /// The ID of the VPC that the stack is to be launched into. The VPC must be in the stack's region. All instances are launched into this VPC. You cannot change the ID later.   If your account supports EC2-Classic, the default value is no VPC.   If your account does not support EC2-Classic, the default value is the default VPC for the specified region.   If the VPC ID corresponds to a default VPC and you have specified either the DefaultAvailabilityZone or the DefaultSubnetId parameter only, AWS OpsWorks infers the value of the other parameter. If you specify neither parameter, AWS OpsWorks sets these parameters to the first valid Availability Zone for the specified region and the corresponding default VPC subnet ID, respectively. If you specify a nondefault VPC ID, note the following:   It must belong to a VPC in your account that is in the specified region.   You must specify a value for DefaultSubnetId.   For more information on how to use AWS OpsWorks with a VPC, see Running a Stack in a VPC. For more information on default VPC and EC2-Classic, see Supported Platforms. 
        var vpcId: String? = nil
        /// One or more user-defined key-value pairs to be added to the stack attributes.
        var attributes: [String: String]? = nil
        /// The stack's default VPC subnet ID. This parameter is required if you specify a value for the VpcId parameter. All instances are launched into this subnet unless you specify otherwise when you create the instance. If you also specify a value for DefaultAvailabilityZone, the subnet must be in that zone. For information on default values and when this parameter is required, see the VpcId parameter description. 
        var defaultSubnetId: String? = nil
        /// The configuration manager. When you create a stack we recommend that you use the configuration manager to specify the Chef version: 12, 11.10, or 11.4 for Linux stacks, or 12.2 for Windows stacks. The default value for Linux stacks is currently 11.4.
        var configurationManager: StackConfigurationManager? = nil
        /// The stack's default Availability Zone, which must be in the specified region. For more information, see Regions and Endpoints. If you also specify a value for DefaultSubnetId, the subnet must be in the same zone. For more information, see the VpcId parameter description. 
        var defaultAvailabilityZone: String? = nil
        /// The stack's host name theme, with spaces replaced by underscores. The theme is used to generate host names for the stack's instances. By default, HostnameTheme is set to Layer_Dependent, which creates host names by appending integers to the layer's short name. The other themes are:    Baked_Goods     Clouds     Europe_Cities     Fruits     Greek_Deities     Legendary_creatures_from_Japan     Planets_and_Moons     Roman_Deities     Scottish_Islands     US_Cities     Wild_Cats    To obtain a generated host name, call GetHostNameSuggestion, which returns a host name based on the current theme.
        var hostnameTheme: String? = nil
        /// Whether to associate the AWS OpsWorks built-in security groups with the stack's layers. AWS OpsWorks provides a standard set of built-in security groups, one for each layer, which are associated with layers by default. With UseOpsworksSecurityGroups you can instead provide your own custom security groups. UseOpsworksSecurityGroups has the following settings:    True - AWS OpsWorks automatically associates the appropriate built-in security group with each layer (default setting). You can associate additional security groups with a layer after you create it, but you cannot delete the built-in security group.   False - AWS OpsWorks does not associate built-in security groups with layers. You must create appropriate EC2 security groups and associate a security group with each layer that you create. However, you can still manually associate a built-in security group with a layer on creation; custom security groups are required only for those layers that need custom settings.   For more information, see Create a New Stack.
        var useOpsworksSecurityGroups: Bool? = nil

        public init() {}

        public init(defaultOs: String? = nil, chefConfiguration: ChefConfiguration? = nil, serviceRoleArn: String, defaultRootDeviceType: String? = nil, defaultInstanceProfileArn: String, region: String, customCookbooksSource: Source? = nil, customJson: String? = nil, useCustomCookbooks: Bool? = nil, defaultSshKeyName: String? = nil, agentVersion: String? = nil, name: String, vpcId: String? = nil, attributes: [String: String]? = nil, defaultSubnetId: String? = nil, configurationManager: StackConfigurationManager? = nil, defaultAvailabilityZone: String? = nil, hostnameTheme: String? = nil, useOpsworksSecurityGroups: Bool? = nil) {
            self.defaultOs = defaultOs
            self.chefConfiguration = chefConfiguration
            self.serviceRoleArn = serviceRoleArn
            self.defaultRootDeviceType = defaultRootDeviceType
            self.defaultInstanceProfileArn = defaultInstanceProfileArn
            self.region = region
            self.customCookbooksSource = customCookbooksSource
            self.customJson = customJson
            self.useCustomCookbooks = useCustomCookbooks
            self.defaultSshKeyName = defaultSshKeyName
            self.agentVersion = agentVersion
            self.name = name
            self.vpcId = vpcId
            self.attributes = attributes
            self.defaultSubnetId = defaultSubnetId
            self.configurationManager = configurationManager
            self.defaultAvailabilityZone = defaultAvailabilityZone
            self.hostnameTheme = hostnameTheme
            self.useOpsworksSecurityGroups = useOpsworksSecurityGroups
        }

    }

    public struct DeleteLayerRequest: Serializable, Initializable {
        /// The layer ID.
        var layerId: String = ""

        public init() {}

        public init(layerId: String) {
            self.layerId = layerId
        }

    }

    public struct RegisterEcsClusterRequest: Serializable, Initializable {
        /// The stack ID.
        var stackId: String = ""
        /// The cluster's ARN.
        var ecsClusterArn: String = ""

        public init() {}

        public init(stackId: String, ecsClusterArn: String) {
            self.stackId = stackId
            self.ecsClusterArn = ecsClusterArn
        }

    }

    public struct UpdateRdsDbInstanceRequest: Serializable, Initializable {
        /// The database password.
        var dbPassword: String? = nil
        /// The master user name.
        var dbUser: String? = nil
        /// The Amazon RDS instance's ARN.
        var rdsDbInstanceArn: String = ""

        public init() {}

        public init(dbPassword: String? = nil, dbUser: String? = nil, rdsDbInstanceArn: String) {
            self.dbPassword = dbPassword
            self.dbUser = dbUser
            self.rdsDbInstanceArn = rdsDbInstanceArn
        }

    }

    public struct ChefConfiguration: Serializable, Initializable {
        /// Whether to enable Berkshelf.
        var manageBerkshelf: Bool? = nil
        /// The Berkshelf version.
        var berkshelfVersion: String? = nil

        public init() {}

        public init(manageBerkshelf: Bool? = nil, berkshelfVersion: String? = nil) {
            self.manageBerkshelf = manageBerkshelf
            self.berkshelfVersion = berkshelfVersion
        }

    }

    public struct DisassociateElasticIpRequest: Serializable, Initializable {
        /// The Elastic IP address.
        var elasticIp: String = ""

        public init() {}

        public init(elasticIp: String) {
            self.elasticIp = elasticIp
        }

    }

    public struct AttachElasticLoadBalancerRequest: Serializable, Initializable {
        /// The ID of the layer that the Elastic Load Balancing instance is to be attached to.
        var layerId: String = ""
        /// The Elastic Load Balancing instance's name.
        var elasticLoadBalancerName: String = ""

        public init() {}

        public init(layerId: String, elasticLoadBalancerName: String) {
            self.layerId = layerId
            self.elasticLoadBalancerName = elasticLoadBalancerName
        }

    }

    public struct EnvironmentVariable: Serializable, Initializable {
        /// (Optional) The environment variable's value, which can be left empty. If you specify a value, it can contain up to 256 characters, which must all be printable.
        var value: String = ""
        /// (Required) The environment variable's name, which can consist of up to 64 characters and must be specified. The name can contain upper- and lowercase letters, numbers, and underscores (_), but it must start with a letter or underscore.
        var key: String = ""
        /// (Optional) Whether the variable's value will be returned by the DescribeApps action. To conceal an environment variable's value, set Secure to true. DescribeApps then returns *****FILTERED***** instead of the actual value. The default value for Secure is false. 
        var secure: Bool? = nil

        public init() {}

        public init(value: String, key: String, secure: Bool? = nil) {
            self.value = value
            self.key = key
            self.secure = secure
        }

    }

    public struct DescribeLoadBasedAutoScalingRequest: Serializable, Initializable {
        /// An array of layer IDs.
        var layerIds: [String] = []

        public init() {}

        public init(layerIds: [String]) {
            self.layerIds = layerIds
        }

    }

    public struct RdsDbInstance: Serializable, Initializable {
        /// The ID of the stack that the instance is registered with.
        var stackId: String? = nil
        /// The instance's address.
        var address: String? = nil
        /// The master user name.
        var dbUser: String? = nil
        /// The instance's AWS region.
        var region: String? = nil
        /// The instance's database engine.
        var engine: String? = nil
        /// Set to true if AWS OpsWorks was unable to discover the Amazon RDS instance. AWS OpsWorks attempts to discover the instance only once. If this value is set to true, you must deregister the instance and then register it again.
        var missingOnRds: Bool? = nil
        /// The instance's ARN.
        var rdsDbInstanceArn: String? = nil
        /// AWS OpsWorks returns *****FILTERED***** instead of the actual value.
        var dbPassword: String? = nil
        /// The DB instance identifier.
        var dbInstanceIdentifier: String? = nil

        public init() {}

        public init(stackId: String? = nil, address: String? = nil, dbUser: String? = nil, region: String? = nil, engine: String? = nil, missingOnRds: Bool? = nil, rdsDbInstanceArn: String? = nil, dbPassword: String? = nil, dbInstanceIdentifier: String? = nil) {
            self.stackId = stackId
            self.address = address
            self.dbUser = dbUser
            self.region = region
            self.engine = engine
            self.missingOnRds = missingOnRds
            self.rdsDbInstanceArn = rdsDbInstanceArn
            self.dbPassword = dbPassword
            self.dbInstanceIdentifier = dbInstanceIdentifier
        }

    }

    public struct DescribeStackSummaryResult: Serializable, Initializable {
        /// A StackSummary object that contains the results.
        var stackSummary: StackSummary? = nil

        public init() {}

        public init(stackSummary: StackSummary? = nil) {
            self.stackSummary = stackSummary
        }

    }

    public struct Volume: Serializable, Initializable {
        /// The device name.
        var device: String? = nil
        /// The AWS region. For more information about AWS regions, see Regions and Endpoints.
        var region: String? = nil
        /// The volume ID.
        var volumeId: String? = nil
        /// The Amazon EC2 volume ID.
        var ec2VolumeId: String? = nil
        /// For PIOPS volumes, the IOPS per disk.
        var iops: Int32? = nil
        /// The volume Availability Zone. For more information, see Regions and Endpoints.
        var availabilityZone: String? = nil
        /// The RAID array ID.
        var raidArrayId: String? = nil
        /// The value returned by DescribeVolumes.
        var status: String? = nil
        /// The volume type, standard or PIOPS.
        var volumeType: String? = nil
        /// The volume mount point. For example, "/mnt/disk1".
        var mountPoint: String? = nil
        /// The volume name.
        var name: String? = nil
        /// The instance ID.
        var instanceId: String? = nil
        /// The volume size.
        var size: Int32? = nil

        public init() {}

        public init(device: String? = nil, region: String? = nil, volumeId: String? = nil, ec2VolumeId: String? = nil, iops: Int32? = nil, availabilityZone: String? = nil, raidArrayId: String? = nil, status: String? = nil, volumeType: String? = nil, mountPoint: String? = nil, name: String? = nil, instanceId: String? = nil, size: Int32? = nil) {
            self.device = device
            self.region = region
            self.volumeId = volumeId
            self.ec2VolumeId = ec2VolumeId
            self.iops = iops
            self.availabilityZone = availabilityZone
            self.raidArrayId = raidArrayId
            self.status = status
            self.volumeType = volumeType
            self.mountPoint = mountPoint
            self.name = name
            self.instanceId = instanceId
            self.size = size
        }

    }

    public struct SelfUserProfile: Serializable, Initializable {
        /// The user's IAM ARN.
        var iamUserArn: String? = nil
        /// The user's SSH public key.
        var sshPublicKey: String? = nil
        /// The user's SSH user name.
        var sshUsername: String? = nil
        /// The user's name.
        var name: String? = nil

        public init() {}

        public init(iamUserArn: String? = nil, sshPublicKey: String? = nil, sshUsername: String? = nil, name: String? = nil) {
            self.iamUserArn = iamUserArn
            self.sshPublicKey = sshPublicKey
            self.sshUsername = sshUsername
            self.name = name
        }

    }

    public struct EcsCluster: Serializable, Initializable {
        /// The cluster name.
        var ecsClusterName: String? = nil
        /// The time and date that the cluster was registered with the stack.
        var registeredAt: String? = nil
        /// The stack ID.
        var stackId: String? = nil
        /// The cluster's ARN.
        var ecsClusterArn: String? = nil

        public init() {}

        public init(ecsClusterName: String? = nil, registeredAt: String? = nil, stackId: String? = nil, ecsClusterArn: String? = nil) {
            self.ecsClusterName = ecsClusterName
            self.registeredAt = registeredAt
            self.stackId = stackId
            self.ecsClusterArn = ecsClusterArn
        }

    }

    public struct DescribeStackSummaryRequest: Serializable, Initializable {
        /// The stack ID.
        var stackId: String = ""

        public init() {}

        public init(stackId: String) {
            self.stackId = stackId
        }

    }

    public struct CreateLayerResult: Serializable, Initializable {
        /// The layer ID.
        var layerId: String? = nil

        public init() {}

        public init(layerId: String? = nil) {
            self.layerId = layerId
        }

    }

    public struct TemporaryCredential: Serializable, Initializable {
        /// The length of time (in minutes) that the grant is valid. When the grant expires, at the end of this period, the user will no longer be able to use the credentials to log in. If they are logged in at the time, they will be automatically logged out.
        var validForInMinutes: Int32? = nil
        /// The password.
        var password: String? = nil
        /// The instance's AWS OpsWorks ID.
        var instanceId: String? = nil
        /// The user name.
        var username: String? = nil

        public init() {}

        public init(validForInMinutes: Int32? = nil, password: String? = nil, instanceId: String? = nil, username: String? = nil) {
            self.validForInMinutes = validForInMinutes
            self.password = password
            self.instanceId = instanceId
            self.username = username
        }

    }

    public struct DeregisterElasticIpRequest: Serializable, Initializable {
        /// The Elastic IP address.
        var elasticIp: String = ""

        public init() {}

        public init(elasticIp: String) {
            self.elasticIp = elasticIp
        }

    }

    public struct CreateDeploymentRequest: Serializable, Initializable {
        /// The layer IDs for the deployment targets.
        var layerIds: [String]? = nil
        /// The stack ID.
        var stackId: String = ""
        /// A user-defined comment.
        var comment: String? = nil
        /// A string that contains user-defined, custom JSON. It is used to override the corresponding default stack configuration JSON values. The string should be in the following format:  "{\"key1\": \"value1\", \"key2\": \"value2\",...}"  For more information on custom JSON, see Use Custom JSON to Modify the Stack Configuration Attributes.
        var customJson: String? = nil
        /// A DeploymentCommand object that specifies the deployment command and any associated arguments.
        var command: DeploymentCommand = DeploymentCommand()
        /// The instance IDs for the deployment targets.
        var instanceIds: [String]? = nil
        /// The app ID. This parameter is required for app deployments, but not for other deployment commands.
        var appId: String? = nil

        public init() {}

        public init(layerIds: [String]? = nil, stackId: String, comment: String? = nil, customJson: String? = nil, command: DeploymentCommand, instanceIds: [String]? = nil, appId: String? = nil) {
            self.layerIds = layerIds
            self.stackId = stackId
            self.comment = comment
            self.customJson = customJson
            self.command = command
            self.instanceIds = instanceIds
            self.appId = appId
        }

    }

    public struct DescribeTimeBasedAutoScalingRequest: Serializable, Initializable {
        /// An array of instance IDs.
        var instanceIds: [String] = []

        public init() {}

        public init(instanceIds: [String]) {
            self.instanceIds = instanceIds
        }

    }

    public struct StopStackRequest: Serializable, Initializable {
        /// The stack ID.
        var stackId: String = ""

        public init() {}

        public init(stackId: String) {
            self.stackId = stackId
        }

    }

    public struct DescribeRdsDbInstancesResult: Serializable, Initializable {
        /// An a array of RdsDbInstance objects that describe the instances.
        var rdsDbInstances: [RdsDbInstance]? = nil

        public init() {}

        public init(rdsDbInstances: [RdsDbInstance]? = nil) {
            self.rdsDbInstances = rdsDbInstances
        }

    }

    public struct ServiceError: Serializable, Initializable {
        /// When the error occurred.
        var createdAt: String? = nil
        /// A message that describes the error.
        var message: String? = nil
        /// The stack ID.
        var stackId: String? = nil
        /// The error type.
        var type: String? = nil
        /// The instance ID.
        var instanceId: String? = nil
        /// The error ID.
        var serviceErrorId: String? = nil

        public init() {}

        public init(createdAt: String? = nil, message: String? = nil, stackId: String? = nil, type: String? = nil, instanceId: String? = nil, serviceErrorId: String? = nil) {
            self.createdAt = createdAt
            self.message = message
            self.stackId = stackId
            self.type = type
            self.instanceId = instanceId
            self.serviceErrorId = serviceErrorId
        }

    }

    public struct RebootInstanceRequest: Serializable, Initializable {
        /// The instance ID.
        var instanceId: String = ""

        public init() {}

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

    }

    public struct CreateDeploymentResult: Serializable, Initializable {
        /// The deployment ID, which can be used with other requests to identify the deployment.
        var deploymentId: String? = nil

        public init() {}

        public init(deploymentId: String? = nil) {
            self.deploymentId = deploymentId
        }

    }

    public struct DescribeServiceErrorsResult: Serializable, Initializable {
        /// An array of ServiceError objects that describe the specified service errors.
        var serviceErrors: [ServiceError]? = nil

        public init() {}

        public init(serviceErrors: [ServiceError]? = nil) {
            self.serviceErrors = serviceErrors
        }

    }

    public struct DescribePermissionsRequest: Serializable, Initializable {
        /// The stack ID.
        var stackId: String? = nil
        /// The user's IAM ARN. This can also be a federated user's ARN. For more information about IAM ARNs, see Using Identifiers.
        var iamUserArn: String? = nil

        public init() {}

        public init(stackId: String? = nil, iamUserArn: String? = nil) {
            self.stackId = stackId
            self.iamUserArn = iamUserArn
        }

    }

    public struct AgentVersion: Serializable, Initializable {
        /// The configuration manager.
        var configurationManager: StackConfigurationManager? = nil
        /// The agent version.
        var version: String? = nil

        public init() {}

        public init(configurationManager: StackConfigurationManager? = nil, version: String? = nil) {
            self.configurationManager = configurationManager
            self.version = version
        }

    }

    public struct DataSource: Serializable, Initializable {
        /// The data source's type, AutoSelectOpsworksMysqlInstance, OpsworksMysqlInstance, or RdsDbInstance.
        var type: String? = nil
        /// The data source's ARN.
        var arn: String? = nil
        /// The database name.
        var databaseName: String? = nil

        public init() {}

        public init(type: String? = nil, arn: String? = nil, databaseName: String? = nil) {
            self.type = type
            self.arn = arn
            self.databaseName = databaseName
        }

    }

    public struct DescribeElasticLoadBalancersResult: Serializable, Initializable {
        /// A list of ElasticLoadBalancer objects that describe the specified Elastic Load Balancing instances.
        var elasticLoadBalancers: [ElasticLoadBalancer]? = nil

        public init() {}

        public init(elasticLoadBalancers: [ElasticLoadBalancer]? = nil) {
            self.elasticLoadBalancers = elasticLoadBalancers
        }

    }

    public struct TimeBasedAutoScalingConfiguration: Serializable, Initializable {
        /// The instance ID.
        var instanceId: String? = nil
        /// A WeeklyAutoScalingSchedule object with the instance schedule.
        var autoScalingSchedule: WeeklyAutoScalingSchedule? = nil

        public init() {}

        public init(instanceId: String? = nil, autoScalingSchedule: WeeklyAutoScalingSchedule? = nil) {
            self.instanceId = instanceId
            self.autoScalingSchedule = autoScalingSchedule
        }

    }

    public struct GetHostnameSuggestionResult: Serializable, Initializable {
        /// The generated host name.
        var hostname: String? = nil
        /// The layer ID.
        var layerId: String? = nil

        public init() {}

        public init(hostname: String? = nil, layerId: String? = nil) {
            self.hostname = hostname
            self.layerId = layerId
        }

    }

    public struct EbsBlockDevice: Serializable, Initializable {
        /// The snapshot ID.
        var snapshotId: String? = nil
        /// The volume size, in GiB. For more information, see EbsBlockDevice.
        var volumeSize: Int32? = nil
        /// Whether the volume is deleted on instance termination.
        var deleteOnTermination: Bool? = nil
        /// The volume type. gp2 for General Purpose (SSD) volumes, io1 for Provisioned IOPS (SSD) volumes, and standard for Magnetic volumes.
        var volumeType: String? = nil
        /// The number of I/O operations per second (IOPS) that the volume supports. For more information, see EbsBlockDevice.
        var iops: Int32? = nil

        public init() {}

        public init(snapshotId: String? = nil, volumeSize: Int32? = nil, deleteOnTermination: Bool? = nil, volumeType: String? = nil, iops: Int32? = nil) {
            self.snapshotId = snapshotId
            self.volumeSize = volumeSize
            self.deleteOnTermination = deleteOnTermination
            self.volumeType = volumeType
            self.iops = iops
        }

    }

    public struct BlockDeviceMapping: Serializable, Initializable {
        /// Suppresses the specified device included in the AMI's block device mapping.
        var noDevice: String? = nil
        /// The virtual device name. For more information, see BlockDeviceMapping.
        var virtualName: String? = nil
        /// The device name that is exposed to the instance, such as /dev/sdh. For the root device, you can use the explicit device name or you can set this parameter to ROOT_DEVICE and AWS OpsWorks will provide the correct device name.
        var deviceName: String? = nil
        /// An EBSBlockDevice that defines how to configure an Amazon EBS volume when the instance is launched.
        var ebs: EbsBlockDevice? = nil

        public init() {}

        public init(noDevice: String? = nil, virtualName: String? = nil, deviceName: String? = nil, ebs: EbsBlockDevice? = nil) {
            self.noDevice = noDevice
            self.virtualName = virtualName
            self.deviceName = deviceName
            self.ebs = ebs
        }

    }

    public struct DeregisterRdsDbInstanceRequest: Serializable, Initializable {
        /// The Amazon RDS instance's ARN.
        var rdsDbInstanceArn: String = ""

        public init() {}

        public init(rdsDbInstanceArn: String) {
            self.rdsDbInstanceArn = rdsDbInstanceArn
        }

    }

    public struct UpdateStackRequest: Serializable, Initializable {
        /// The stack's operating system, which must be set to one of the following:   A supported Linux operating system: An Amazon Linux version, such as Amazon Linux 2016.03, Amazon Linux 2015.09, or Amazon Linux 2015.03.   A supported Ubuntu operating system, such as Ubuntu 16.04 LTS, Ubuntu 14.04 LTS, or Ubuntu 12.04 LTS.    CentOS 7     Red Hat Enterprise Linux 7    A supported Windows operating system, such as Microsoft Windows Server 2012 R2 Base, Microsoft Windows Server 2012 R2 with SQL Server Express, Microsoft Windows Server 2012 R2 with SQL Server Standard, or Microsoft Windows Server 2012 R2 with SQL Server Web.   A custom AMI: Custom. You specify the custom AMI you want to use when you create instances. For more information on how to use custom AMIs with OpsWorks, see Using Custom AMIs.   The default option is the stack's current operating system. For more information on the supported operating systems, see AWS OpsWorks Operating Systems.
        var defaultOs: String? = nil
        /// A ChefConfiguration object that specifies whether to enable Berkshelf and the Berkshelf version on Chef 11.10 stacks. For more information, see Create a New Stack.
        var chefConfiguration: ChefConfiguration? = nil
        /// Do not use this parameter. You cannot update a stack's service role.
        var serviceRoleArn: String? = nil
        /// The default root device type. This value is used by default for all instances in the stack, but you can override it when you create an instance. For more information, see Storage for the Root Device.
        var defaultRootDeviceType: String? = nil
        /// The ARN of an IAM profile that is the default profile for all of the stack's EC2 instances. For more information about IAM ARNs, see Using Identifiers.
        var defaultInstanceProfileArn: String? = nil
        var customCookbooksSource: Source? = nil
        /// A string that contains user-defined, custom JSON. It can be used to override the corresponding default stack configuration JSON values or to pass data to recipes. The string should be in the following format:  "{\"key1\": \"value1\", \"key2\": \"value2\",...}"  For more information on custom JSON, see Use Custom JSON to Modify the Stack Configuration Attributes.
        var customJson: String? = nil
        /// Whether the stack uses custom cookbooks.
        var useCustomCookbooks: Bool? = nil
        /// A default Amazon EC2 key-pair name. The default value is none. If you specify a key-pair name, AWS OpsWorks installs the public key on the instance and you can use the private key with an SSH client to log in to the instance. For more information, see  Using SSH to Communicate with an Instance and  Managing SSH Access. You can override this setting by specifying a different key pair, or no key pair, when you  create an instance. 
        var defaultSshKeyName: String? = nil
        /// The default AWS OpsWorks agent version. You have the following options:   Auto-update - Set this parameter to LATEST. AWS OpsWorks automatically installs new agent versions on the stack's instances as soon as they are available.   Fixed version - Set this parameter to your preferred agent version. To update the agent version, you must edit the stack configuration and specify a new version. AWS OpsWorks then automatically installs that version on the stack's instances.   The default setting is LATEST. To specify an agent version, you must use the complete version number, not the abbreviated number shown on the console. For a list of available agent version numbers, call DescribeAgentVersions.  You can also specify an agent version when you create or update an instance, which overrides the stack's default setting. 
        var agentVersion: String? = nil
        /// The stack's new name.
        var name: String? = nil
        /// The stack ID.
        var stackId: String = ""
        /// The configuration manager. When you update a stack, we recommend that you use the configuration manager to specify the Chef version: 12, 11.10, or 11.4 for Linux stacks, or 12.2 for Windows stacks. The default value for Linux stacks is currently 11.4.
        var configurationManager: StackConfigurationManager? = nil
        /// One or more user-defined key-value pairs to be added to the stack attributes.
        var attributes: [String: String]? = nil
        /// The stack's default VPC subnet ID. This parameter is required if you specify a value for the VpcId parameter. All instances are launched into this subnet unless you specify otherwise when you create the instance. If you also specify a value for DefaultAvailabilityZone, the subnet must be in that zone. For information on default values and when this parameter is required, see the VpcId parameter description. 
        var defaultSubnetId: String? = nil
        /// The stack's new host name theme, with spaces replaced by underscores. The theme is used to generate host names for the stack's instances. By default, HostnameTheme is set to Layer_Dependent, which creates host names by appending integers to the layer's short name. The other themes are:    Baked_Goods     Clouds     Europe_Cities     Fruits     Greek_Deities     Legendary_creatures_from_Japan     Planets_and_Moons     Roman_Deities     Scottish_Islands     US_Cities     Wild_Cats    To obtain a generated host name, call GetHostNameSuggestion, which returns a host name based on the current theme.
        var hostnameTheme: String? = nil
        /// The stack's default Availability Zone, which must be in the stack's region. For more information, see Regions and Endpoints. If you also specify a value for DefaultSubnetId, the subnet must be in the same zone. For more information, see CreateStack. 
        var defaultAvailabilityZone: String? = nil
        /// Whether to associate the AWS OpsWorks built-in security groups with the stack's layers. AWS OpsWorks provides a standard set of built-in security groups, one for each layer, which are associated with layers by default. UseOpsworksSecurityGroups allows you to provide your own custom security groups instead of using the built-in groups. UseOpsworksSecurityGroups has the following settings:    True - AWS OpsWorks automatically associates the appropriate built-in security group with each layer (default setting). You can associate additional security groups with a layer after you create it, but you cannot delete the built-in security group.   False - AWS OpsWorks does not associate built-in security groups with layers. You must create appropriate EC2 security groups and associate a security group with each layer that you create. However, you can still manually associate a built-in security group with a layer on. Custom security groups are required only for those layers that need custom settings.   For more information, see Create a New Stack.
        var useOpsworksSecurityGroups: Bool? = nil

        public init() {}

        public init(defaultOs: String? = nil, chefConfiguration: ChefConfiguration? = nil, serviceRoleArn: String? = nil, defaultRootDeviceType: String? = nil, defaultInstanceProfileArn: String? = nil, customCookbooksSource: Source? = nil, customJson: String? = nil, useCustomCookbooks: Bool? = nil, defaultSshKeyName: String? = nil, agentVersion: String? = nil, name: String? = nil, stackId: String, configurationManager: StackConfigurationManager? = nil, attributes: [String: String]? = nil, defaultSubnetId: String? = nil, hostnameTheme: String? = nil, defaultAvailabilityZone: String? = nil, useOpsworksSecurityGroups: Bool? = nil) {
            self.defaultOs = defaultOs
            self.chefConfiguration = chefConfiguration
            self.serviceRoleArn = serviceRoleArn
            self.defaultRootDeviceType = defaultRootDeviceType
            self.defaultInstanceProfileArn = defaultInstanceProfileArn
            self.customCookbooksSource = customCookbooksSource
            self.customJson = customJson
            self.useCustomCookbooks = useCustomCookbooks
            self.defaultSshKeyName = defaultSshKeyName
            self.agentVersion = agentVersion
            self.name = name
            self.stackId = stackId
            self.configurationManager = configurationManager
            self.attributes = attributes
            self.defaultSubnetId = defaultSubnetId
            self.hostnameTheme = hostnameTheme
            self.defaultAvailabilityZone = defaultAvailabilityZone
            self.useOpsworksSecurityGroups = useOpsworksSecurityGroups
        }

    }

    public struct UpdateElasticIpRequest: Serializable, Initializable {
        /// The address.
        var elasticIp: String = ""
        /// The new name.
        var name: String? = nil

        public init() {}

        public init(elasticIp: String, name: String? = nil) {
            self.elasticIp = elasticIp
            self.name = name
        }

    }

    public struct InstanceIdentity: Serializable, Initializable {
        /// A JSON document that contains the metadata.
        var document: String? = nil
        /// A signature that can be used to verify the document's accuracy and authenticity.
        var signature: String? = nil

        public init() {}

        public init(document: String? = nil, signature: String? = nil) {
            self.document = document
            self.signature = signature
        }

    }

    public struct DescribeInstancesResult: Serializable, Initializable {
        /// An array of Instance objects that describe the instances.
        var instances: [Instance]? = nil

        public init() {}

        public init(instances: [Instance]? = nil) {
            self.instances = instances
        }

    }

    public struct LifecycleEventConfiguration: Serializable, Initializable {
        /// A ShutdownEventConfiguration object that specifies the Shutdown event configuration.
        var shutdown: ShutdownEventConfiguration? = nil

        public init() {}

        public init(shutdown: ShutdownEventConfiguration? = nil) {
            self.shutdown = shutdown
        }

    }

    public struct DescribeStackProvisioningParametersRequest: Serializable, Initializable {
        /// The stack ID
        var stackId: String = ""

        public init() {}

        public init(stackId: String) {
            self.stackId = stackId
        }

    }

    public struct DeleteAppRequest: Serializable, Initializable {
        /// The app ID.
        var appId: String = ""

        public init() {}

        public init(appId: String) {
            self.appId = appId
        }

    }

    public struct DescribeDeploymentsResult: Serializable, Initializable {
        /// An array of Deployment objects that describe the deployments.
        var deployments: [Deployment]? = nil

        public init() {}

        public init(deployments: [Deployment]? = nil) {
            self.deployments = deployments
        }

    }

    public struct DescribePermissionsResult: Serializable, Initializable {
        /// An array of Permission objects that describe the stack permissions.   If the request object contains only a stack ID, the array contains a Permission object with permissions for each of the stack IAM ARNs.   If the request object contains only an IAM ARN, the array contains a Permission object with permissions for each of the user's stack IDs.   If the request contains a stack ID and an IAM ARN, the array contains a single Permission object with permissions for the specified stack and IAM ARN.  
        var permissions: [Permission]? = nil

        public init() {}

        public init(permissions: [Permission]? = nil) {
            self.permissions = permissions
        }

    }

    public struct RegisterVolumeRequest: Serializable, Initializable {
        /// The stack ID.
        var stackId: String = ""
        /// The Amazon EBS volume ID.
        var ec2VolumeId: String? = nil

        public init() {}

        public init(stackId: String, ec2VolumeId: String? = nil) {
            self.stackId = stackId
            self.ec2VolumeId = ec2VolumeId
        }

    }

    public struct StartInstanceRequest: Serializable, Initializable {
        /// The instance ID.
        var instanceId: String = ""

        public init() {}

        public init(instanceId: String) {
            self.instanceId = instanceId
        }

    }

    public struct Permission: Serializable, Initializable {
        /// The user's permission level, which must be the following:    deny     show     deploy     manage     iam_only    For more information on the permissions associated with these levels, see Managing User Permissions 
        var level: String? = nil
        /// The Amazon Resource Name (ARN) for an AWS Identity and Access Management (IAM) role. For more information about IAM ARNs, see Using Identifiers.
        var iamUserArn: String? = nil
        /// Whether the user can use SSH.
        var allowSsh: Bool? = nil
        /// A stack ID.
        var stackId: String? = nil
        /// Whether the user can use sudo.
        var allowSudo: Bool? = nil

        public init() {}

        public init(level: String? = nil, iamUserArn: String? = nil, allowSsh: Bool? = nil, stackId: String? = nil, allowSudo: Bool? = nil) {
            self.level = level
            self.iamUserArn = iamUserArn
            self.allowSsh = allowSsh
            self.stackId = stackId
            self.allowSudo = allowSudo
        }

    }

    public struct AssignVolumeRequest: Serializable, Initializable {
        /// The instance ID.
        var instanceId: String? = nil
        /// The volume ID.
        var volumeId: String = ""

        public init() {}

        public init(instanceId: String? = nil, volumeId: String) {
            self.instanceId = instanceId
            self.volumeId = volumeId
        }

    }

    public struct DeleteUserProfileRequest: Serializable, Initializable {
        /// The user's IAM ARN. This can also be a federated user's ARN.
        var iamUserArn: String = ""

        public init() {}

        public init(iamUserArn: String) {
            self.iamUserArn = iamUserArn
        }

    }

    public struct ElasticLoadBalancer: Serializable, Initializable {
        /// A list of subnet IDs, if the stack is running in a VPC.
        var subnetIds: [String]? = nil
        /// A list of Availability Zones.
        var availabilityZones: [String]? = nil
        /// The ID of the stack that the instance is associated with.
        var stackId: String? = nil
        /// A list of the EC2 instances that the Elastic Load Balancing instance is managing traffic for.
        var ec2InstanceIds: [String]? = nil
        /// The instance's AWS region.
        var region: String? = nil
        /// The ID of the layer that the instance is attached to.
        var layerId: String? = nil
        /// The VPC ID.
        var vpcId: String? = nil
        /// The Elastic Load Balancing instance's name.
        var elasticLoadBalancerName: String? = nil
        /// The instance's public DNS name.
        var dnsName: String? = nil

        public init() {}

        public init(subnetIds: [String]? = nil, availabilityZones: [String]? = nil, stackId: String? = nil, ec2InstanceIds: [String]? = nil, region: String? = nil, layerId: String? = nil, vpcId: String? = nil, elasticLoadBalancerName: String? = nil, dnsName: String? = nil) {
            self.subnetIds = subnetIds
            self.availabilityZones = availabilityZones
            self.stackId = stackId
            self.ec2InstanceIds = ec2InstanceIds
            self.region = region
            self.layerId = layerId
            self.vpcId = vpcId
            self.elasticLoadBalancerName = elasticLoadBalancerName
            self.dnsName = dnsName
        }

    }

    public struct DescribeElasticIpsResult: Serializable, Initializable {
        /// An ElasticIps object that describes the specified Elastic IP addresses.
        var elasticIps: [ElasticIp]? = nil

        public init() {}

        public init(elasticIps: [ElasticIp]? = nil) {
            self.elasticIps = elasticIps
        }

    }

}