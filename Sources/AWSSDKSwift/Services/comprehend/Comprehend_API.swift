// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

/**
Amazon Comprehend is an AWS service for gaining insight into the content of documents. Use these actions to determine the topics contained in your documents, the topics they discuss, the predominant sentiment expressed in them, the predominant language used, and more.
*/
public struct Comprehend {

    let client: AWSClient

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            amzTarget: "Comprehend_20171127",
            service: "comprehend",
            serviceProtocol: ServiceProtocol(type: .json, version: ServiceProtocol.Version(major: 1, minor: 1)),
            apiVersion: "2017-11-27",
            endpoint: endpoint,
            middlewares: [],
            possibleErrorTypes: [ComprehendError.self]
        )
    }

    ///  Determines the dominant language of the input text. For a list of languages that Amazon Comprehend can detect, see Amazon Comprehend Supported Languages. 
    public func detectDominantLanguage(_ input: DetectDominantLanguageRequest) throws -> DetectDominantLanguageResponse {
        return try client.send(operation: "DetectDominantLanguage", path: "/", httpMethod: "POST", input: input)
    }

    ///  Inspects text and returns an inference of the prevailing sentiment (POSITIVE, NEUTRAL, MIXED, or NEGATIVE). 
    public func detectSentiment(_ input: DetectSentimentRequest) throws -> DetectSentimentResponse {
        return try client.send(operation: "DetectSentiment", path: "/", httpMethod: "POST", input: input)
    }

    ///  Determines the dominant language of the input text for a batch of documents. For a list of languages that Amazon Comprehend can detect, see Amazon Comprehend Supported Languages. 
    public func batchDetectDominantLanguage(_ input: BatchDetectDominantLanguageRequest) throws -> BatchDetectDominantLanguageResponse {
        return try client.send(operation: "BatchDetectDominantLanguage", path: "/", httpMethod: "POST", input: input)
    }

    ///  Gets a list of the topic detection jobs that you have submitted.
    public func listTopicsDetectionJobs(_ input: ListTopicsDetectionJobsRequest) throws -> ListTopicsDetectionJobsResponse {
        return try client.send(operation: "ListTopicsDetectionJobs", path: "/", httpMethod: "POST", input: input)
    }

    ///  Starts an asynchronous topic detection job. Use the DescribeTopicDetectionJob operation to track the status of a job.
    public func startTopicsDetectionJob(_ input: StartTopicsDetectionJobRequest) throws -> StartTopicsDetectionJobResponse {
        return try client.send(operation: "StartTopicsDetectionJob", path: "/", httpMethod: "POST", input: input)
    }

    ///  Inspects a batch of documents and returns an inference of the prevailing sentiment, POSITIVE, NEUTRAL, MIXED, or NEGATIVE, in each one.
    public func batchDetectSentiment(_ input: BatchDetectSentimentRequest) throws -> BatchDetectSentimentResponse {
        return try client.send(operation: "BatchDetectSentiment", path: "/", httpMethod: "POST", input: input)
    }

    ///  Inspects the text of a batch of documents and returns information about them. For more information about entities, see how-entities 
    public func batchDetectEntities(_ input: BatchDetectEntitiesRequest) throws -> BatchDetectEntitiesResponse {
        return try client.send(operation: "BatchDetectEntities", path: "/", httpMethod: "POST", input: input)
    }

    ///  Inspects text for entities, and returns information about them. For more information, about entities, see how-entities. 
    public func detectEntities(_ input: DetectEntitiesRequest) throws -> DetectEntitiesResponse {
        return try client.send(operation: "DetectEntities", path: "/", httpMethod: "POST", input: input)
    }

    ///  Gets the properties associated with a topic detection job. Use this operation to get the status of a detection job.
    public func describeTopicsDetectionJob(_ input: DescribeTopicsDetectionJobRequest) throws -> DescribeTopicsDetectionJobResponse {
        return try client.send(operation: "DescribeTopicsDetectionJob", path: "/", httpMethod: "POST", input: input)
    }

    ///  Detects the key noun phrases found in a batch of documents.
    public func batchDetectKeyPhrases(_ input: BatchDetectKeyPhrasesRequest) throws -> BatchDetectKeyPhrasesResponse {
        return try client.send(operation: "BatchDetectKeyPhrases", path: "/", httpMethod: "POST", input: input)
    }

    ///  Detects the key noun phrases found in the text. 
    public func detectKeyPhrases(_ input: DetectKeyPhrasesRequest) throws -> DetectKeyPhrasesResponse {
        return try client.send(operation: "DetectKeyPhrases", path: "/", httpMethod: "POST", input: input)
    }


}