// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Comprehend {

    public struct BatchDetectDominantLanguageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorList", required: true, type: .list), 
            AWSShapeMember(label: "ResultList", required: true, type: .list)
        ]
        /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
        public let errorList: [BatchItemError]
        /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
        public let resultList: [BatchDetectDominantLanguageItemResult]

        public init(errorList: [BatchItemError], resultList: [BatchDetectDominantLanguageItemResult]) {
            self.errorList = errorList
            self.resultList = resultList
        }

        private enum CodingKeys: String, CodingKey {
            case errorList = "ErrorList"
            case resultList = "ResultList"
        }
    }

    public enum JobStatus: String, CustomStringConvertible, Codable {
        case submitted = "SUBMITTED"
        case inProgress = "IN_PROGRESS"
        case completed = "COMPLETED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct BatchDetectSentimentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorList", required: true, type: .list), 
            AWSShapeMember(label: "ResultList", required: true, type: .list)
        ]
        /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
        public let errorList: [BatchItemError]
        /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
        public let resultList: [BatchDetectSentimentItemResult]

        public init(errorList: [BatchItemError], resultList: [BatchDetectSentimentItemResult]) {
            self.errorList = errorList
            self.resultList = resultList
        }

        private enum CodingKeys: String, CodingKey {
            case errorList = "ErrorList"
            case resultList = "ResultList"
        }
    }

    public struct StartTopicsDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DataAccessRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "OutputDataConfig", required: true, type: .structure), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "ClientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "NumberOfTopics", required: false, type: .integer), 
            AWSShapeMember(label: "InputDataConfig", required: true, type: .structure)
        ]
        /// The Amazon Resource Name (ARN) of the AWS Identity and Access Management (IAM) role that grants Amazon Comprehend read access to your input data. 
        public let dataAccessRoleArn: String
        /// Specifies where to send the output files.
        public let outputDataConfig: OutputDataConfig
        /// The identifier of the job.
        public let jobName: String?
        /// A unique identifier for the request. If you do not set the client request token, Amazon Comprehend generates one.
        public let clientRequestToken: String?
        /// The number of topics to detect.
        public let numberOfTopics: Int32?
        /// Specifies the format and location of the input data for the job.
        public let inputDataConfig: InputDataConfig

        public init(dataAccessRoleArn: String, outputDataConfig: OutputDataConfig, jobName: String? = nil, clientRequestToken: String? = nil, numberOfTopics: Int32? = nil, inputDataConfig: InputDataConfig) {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.outputDataConfig = outputDataConfig
            self.jobName = jobName
            self.clientRequestToken = clientRequestToken
            self.numberOfTopics = numberOfTopics
            self.inputDataConfig = inputDataConfig
        }

        private enum CodingKeys: String, CodingKey {
            case dataAccessRoleArn = "DataAccessRoleArn"
            case outputDataConfig = "OutputDataConfig"
            case jobName = "JobName"
            case clientRequestToken = "ClientRequestToken"
            case numberOfTopics = "NumberOfTopics"
            case inputDataConfig = "InputDataConfig"
        }
    }

    public struct DetectEntitiesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum), 
            AWSShapeMember(label: "Text", required: true, type: .string)
        ]
        /// The RFC 5646 language code of the input text. If the request does not specify the language code, the service detects the dominant language. If you specify a language code that the service does not support, it returns UnsupportedLanguageException exception. For more information about RFC 5646, see Tags for Identifying Languages on the IETF Tools web site. 
        public let languageCode: LanguageCode
        /// A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let text: String

        public init(languageCode: LanguageCode, text: String) {
            self.languageCode = languageCode
            self.text = text
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case text = "Text"
        }
    }

    public struct DetectSentimentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum), 
            AWSShapeMember(label: "Text", required: true, type: .string)
        ]
        /// The RFC 5646 language code for the input text. If you don't specify a language code, Amazon Comprehend detects the dominant language. If you specify the code for a language that Amazon Comprehend does not support, it returns and UnsupportedLanguageException. For more information about RFC 5646, see Tags for Identifying Languages on the IETF Tools web site.
        public let languageCode: LanguageCode
        /// A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let text: String

        public init(languageCode: LanguageCode, text: String) {
            self.languageCode = languageCode
            self.text = text
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case text = "Text"
        }
    }

    public struct DetectKeyPhrasesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "KeyPhrases", required: false, type: .list)
        ]
        /// A collection of key phrases that Amazon Comprehend identified in the input text. For each key phrase, the response provides the text of the key phrase, where the key phrase begins and ends, and the level of confidence that Amazon Comprehend has in the accuracy of the detection. 
        public let keyPhrases: [KeyPhrase]?

        public init(keyPhrases: [KeyPhrase]? = nil) {
            self.keyPhrases = keyPhrases
        }

        private enum CodingKeys: String, CodingKey {
            case keyPhrases = "KeyPhrases"
        }
    }

    public enum LanguageCode: String, CustomStringConvertible, Codable {
        case en = "en"
        case es = "es"
        public var description: String { return self.rawValue }
    }

    public struct DescribeTopicsDetectionJobRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: true, type: .string)
        ]
        /// The identifier assigned by the user to the detection job.
        public let jobId: String

        public init(jobId: String) {
            self.jobId = jobId
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
        }
    }

    public struct DetectSentimentResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Sentiment", required: false, type: .enum), 
            AWSShapeMember(label: "SentimentScore", required: false, type: .structure)
        ]
        /// The inferred sentiment that Amazon Comprehend has the highest level of confidence in.
        public let sentiment: SentimentType?
        /// An object that lists the sentiments, and their corresponding confidence levels.
        public let sentimentScore: SentimentScore?

        public init(sentiment: SentimentType? = nil, sentimentScore: SentimentScore? = nil) {
            self.sentiment = sentiment
            self.sentimentScore = sentimentScore
        }

        private enum CodingKeys: String, CodingKey {
            case sentiment = "Sentiment"
            case sentimentScore = "SentimentScore"
        }
    }

    public struct StartTopicsDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum)
        ]
        /// The identifier generated for the job. To get the status of the job, use this identifier with the DescribeTopicDetectionJob operation.
        public let jobId: String?
        /// The status of the job:    SUBMITTED - The job has been received and is queued for processing.   IN_PROGRESS - Amazon Comprehend is processing the job.   COMPLETED - The job was successfully completed and the output is available.   FAILED - The job did not complete. To get details, use the DescribeTopicDetectionJob operation.  
        public let jobStatus: JobStatus?

        public init(jobId: String? = nil, jobStatus: JobStatus? = nil) {
            self.jobId = jobId
            self.jobStatus = jobStatus
        }

        private enum CodingKeys: String, CodingKey {
            case jobId = "JobId"
            case jobStatus = "JobStatus"
        }
    }

    public struct BatchDetectEntitiesItemResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Index", required: false, type: .integer), 
            AWSShapeMember(label: "Entities", required: false, type: .list)
        ]
        /// The zero-based index of the document in the input list.
        public let index: Int32?
        /// One or more Entity objects, one for each entity detected in the document.
        public let entities: [Entity]?

        public init(index: Int32? = nil, entities: [Entity]? = nil) {
            self.index = index
            self.entities = entities
        }

        private enum CodingKeys: String, CodingKey {
            case index = "Index"
            case entities = "Entities"
        }
    }

    public struct DescribeTopicsDetectionJobResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicsDetectionJobProperties", required: false, type: .structure)
        ]
        /// The list of properties for the requested job.
        public let topicsDetectionJobProperties: TopicsDetectionJobProperties?

        public init(topicsDetectionJobProperties: TopicsDetectionJobProperties? = nil) {
            self.topicsDetectionJobProperties = topicsDetectionJobProperties
        }

        private enum CodingKeys: String, CodingKey {
            case topicsDetectionJobProperties = "TopicsDetectionJobProperties"
        }
    }

    public enum InputFormat: String, CustomStringConvertible, Codable {
        case oneDocPerFile = "ONE_DOC_PER_FILE"
        case oneDocPerLine = "ONE_DOC_PER_LINE"
        public var description: String { return self.rawValue }
    }

    public struct Entity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Score", required: false, type: .float), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "EndOffset", required: false, type: .integer), 
            AWSShapeMember(label: "Text", required: false, type: .string), 
            AWSShapeMember(label: "BeginOffset", required: false, type: .integer)
        ]
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public let score: Float?
        /// The entity's type.
        public let `type`: EntityType?
        /// A character offset in the input text that shows where the entity ends. The offset returns the position of each UTF-8 code point in the string. A code point is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point. 
        public let endOffset: Int32?
        /// The text of the entity.
        public let text: String?
        /// A character offset in the input text that shows where the entity begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A code point is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.
        public let beginOffset: Int32?

        public init(score: Float? = nil, type: EntityType? = nil, endOffset: Int32? = nil, text: String? = nil, beginOffset: Int32? = nil) {
            self.score = score
            self.`type` = `type`
            self.endOffset = endOffset
            self.text = text
            self.beginOffset = beginOffset
        }

        private enum CodingKeys: String, CodingKey {
            case score = "Score"
            case `type` = "Type"
            case endOffset = "EndOffset"
            case text = "Text"
            case beginOffset = "BeginOffset"
        }
    }

    public struct ListTopicsDetectionJobsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filter", required: false, type: .structure)
        ]
        /// The maximum number of results to return in each page.
        public let maxResults: Int32?
        /// Identifies the next page of results to return.
        public let nextToken: String?
        /// Filters the jobs that are returned. Jobs can be filtered on their name, status, or the date and time that they were submitted. You can set only one filter at a time.
        public let filter: TopicsDetectionJobFilter?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, filter: TopicsDetectionJobFilter? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.filter = filter
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case filter = "Filter"
        }
    }

    public struct TopicsDetectionJobProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OutputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "InputDataConfig", required: false, type: .structure), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "NumberOfTopics", required: false, type: .integer), 
            AWSShapeMember(label: "JobId", required: false, type: .string), 
            AWSShapeMember(label: "SubmitTime", required: false, type: .timestamp)
        ]
        /// The output data configuration supplied when you created the topic detection job.
        public let outputDataConfig: OutputDataConfig?
        /// A description for the status of a job.
        public let message: String?
        /// The input data configuration supplied when you created the topic detection job.
        public let inputDataConfig: InputDataConfig?
        /// The time that the topic detection job was completed.
        public let endTime: TimeStamp?
        /// The name of the topic detection job.
        public let jobName: String?
        /// The current status of the topic detection job. If the status is Failed, the reason for the failure is shown in the Message field.
        public let jobStatus: JobStatus?
        /// The number of topics to detect supplied when you created the topic detection job. The default is 10. 
        public let numberOfTopics: Int32?
        /// The identifier assigned to the topic detection job.
        public let jobId: String?
        /// The time that the topic detection job was submitted for processing.
        public let submitTime: TimeStamp?

        public init(outputDataConfig: OutputDataConfig? = nil, message: String? = nil, inputDataConfig: InputDataConfig? = nil, endTime: TimeStamp? = nil, jobName: String? = nil, jobStatus: JobStatus? = nil, numberOfTopics: Int32? = nil, jobId: String? = nil, submitTime: TimeStamp? = nil) {
            self.outputDataConfig = outputDataConfig
            self.message = message
            self.inputDataConfig = inputDataConfig
            self.endTime = endTime
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.numberOfTopics = numberOfTopics
            self.jobId = jobId
            self.submitTime = submitTime
        }

        private enum CodingKeys: String, CodingKey {
            case outputDataConfig = "OutputDataConfig"
            case message = "Message"
            case inputDataConfig = "InputDataConfig"
            case endTime = "EndTime"
            case jobName = "JobName"
            case jobStatus = "JobStatus"
            case numberOfTopics = "NumberOfTopics"
            case jobId = "JobId"
            case submitTime = "SubmitTime"
        }
    }

    public struct SentimentScore: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Negative", required: false, type: .float), 
            AWSShapeMember(label: "Neutral", required: false, type: .float), 
            AWSShapeMember(label: "Mixed", required: false, type: .float), 
            AWSShapeMember(label: "Positive", required: false, type: .float)
        ]
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the NEGATIVE sentiment.
        public let negative: Float?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the NEUTRAL sentiment.
        public let neutral: Float?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the MIXED sentiment.
        public let mixed: Float?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its detection of the POSITIVE sentiment.
        public let positive: Float?

        public init(negative: Float? = nil, neutral: Float? = nil, mixed: Float? = nil, positive: Float? = nil) {
            self.negative = negative
            self.neutral = neutral
            self.mixed = mixed
            self.positive = positive
        }

        private enum CodingKeys: String, CodingKey {
            case negative = "Negative"
            case neutral = "Neutral"
            case mixed = "Mixed"
            case positive = "Positive"
        }
    }

    public struct ListTopicsDetectionJobsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicsDetectionJobPropertiesList", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list containing the properties of each job that is returned.
        public let topicsDetectionJobPropertiesList: [TopicsDetectionJobProperties]?
        /// Identifies the next page of results to return.
        public let nextToken: String?

        public init(topicsDetectionJobPropertiesList: [TopicsDetectionJobProperties]? = nil, nextToken: String? = nil) {
            self.topicsDetectionJobPropertiesList = topicsDetectionJobPropertiesList
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case topicsDetectionJobPropertiesList = "TopicsDetectionJobPropertiesList"
            case nextToken = "NextToken"
        }
    }

    public struct KeyPhrase: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Score", required: false, type: .float), 
            AWSShapeMember(label: "EndOffset", required: false, type: .integer), 
            AWSShapeMember(label: "BeginOffset", required: false, type: .integer), 
            AWSShapeMember(label: "Text", required: false, type: .string)
        ]
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public let score: Float?
        /// A character offset in the input text where the key phrase ends. The offset returns the position of each UTF-8 code point in the string. A code point is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.
        public let endOffset: Int32?
        /// A character offset in the input text that shows where the key phrase begins (the first character is at position 0). The offset returns the position of each UTF-8 code point in the string. A code point is the abstract character from a particular graphical representation. For example, a multi-byte UTF-8 character maps to a single code point.
        public let beginOffset: Int32?
        /// The text of a key noun phrase.
        public let text: String?

        public init(score: Float? = nil, endOffset: Int32? = nil, beginOffset: Int32? = nil, text: String? = nil) {
            self.score = score
            self.endOffset = endOffset
            self.beginOffset = beginOffset
            self.text = text
        }

        private enum CodingKeys: String, CodingKey {
            case score = "Score"
            case endOffset = "EndOffset"
            case beginOffset = "BeginOffset"
            case text = "Text"
        }
    }

    public struct BatchDetectDominantLanguageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TextList", required: true, type: .list)
        ]
        /// A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document should contain at least 20 characters and must contain fewer than 5,000 bytes of UTF-8 encoded characters.
        public let textList: [String]

        public init(textList: [String]) {
            self.textList = textList
        }

        private enum CodingKeys: String, CodingKey {
            case textList = "TextList"
        }
    }

    public struct BatchItemError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorMessage", required: false, type: .string), 
            AWSShapeMember(label: "Index", required: false, type: .integer), 
            AWSShapeMember(label: "ErrorCode", required: false, type: .string)
        ]
        /// A text description of the error.
        public let errorMessage: String?
        /// The zero-based index of the document in the input list.
        public let index: Int32?
        /// The numeric error code of the error.
        public let errorCode: String?

        public init(errorMessage: String? = nil, index: Int32? = nil, errorCode: String? = nil) {
            self.errorMessage = errorMessage
            self.index = index
            self.errorCode = errorCode
        }

        private enum CodingKeys: String, CodingKey {
            case errorMessage = "ErrorMessage"
            case index = "Index"
            case errorCode = "ErrorCode"
        }
    }

    public struct OutputDataConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Uri", required: true, type: .string)
        ]
        /// The Amazon S3 URI where you want to write the output data. The URI must be in the same region as the API endpoint that you are calling.  The service creates an output file called output.tar.gz. It is a compressed archive that contains two files, topic-terms.csv that lists the terms associated with each topic, and doc-topics.csv that lists the documents associated with each topic. For more information, see topic-modeling.
        public let s3Uri: String

        public init(s3Uri: String) {
            self.s3Uri = s3Uri
        }

        private enum CodingKeys: String, CodingKey {
            case s3Uri = "S3Uri"
        }
    }

    public struct TopicsDetectionJobFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubmitTimeBefore", required: false, type: .timestamp), 
            AWSShapeMember(label: "JobName", required: false, type: .string), 
            AWSShapeMember(label: "JobStatus", required: false, type: .enum), 
            AWSShapeMember(label: "SubmitTimeAfter", required: false, type: .timestamp)
        ]
        /// Filters the list of jobs based on the time that the job was submitted for processing. Only returns jobs submitted before the specified time. Jobs are returned in descending order, newest to oldest.
        public let submitTimeBefore: TimeStamp?
        public let jobName: String?
        /// Filters the list of topic detection jobs based on job status. Returns only jobs with the specified status.
        public let jobStatus: JobStatus?
        /// Filters the list of jobs based on the time that the job was submitted for processing. Only returns jobs submitted after the specified time. Jobs are returned in ascending order, oldest to newest.
        public let submitTimeAfter: TimeStamp?

        public init(submitTimeBefore: TimeStamp? = nil, jobName: String? = nil, jobStatus: JobStatus? = nil, submitTimeAfter: TimeStamp? = nil) {
            self.submitTimeBefore = submitTimeBefore
            self.jobName = jobName
            self.jobStatus = jobStatus
            self.submitTimeAfter = submitTimeAfter
        }

        private enum CodingKeys: String, CodingKey {
            case submitTimeBefore = "SubmitTimeBefore"
            case jobName = "JobName"
            case jobStatus = "JobStatus"
            case submitTimeAfter = "SubmitTimeAfter"
        }
    }

    public struct BatchDetectKeyPhrasesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", required: true, type: .string), 
            AWSShapeMember(label: "TextList", required: true, type: .list)
        ]
        /// The language of the input documents. All documents must be in the same language.
        public let languageCode: String
        /// A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let textList: [String]

        public init(languageCode: String, textList: [String]) {
            self.languageCode = languageCode
            self.textList = textList
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case textList = "TextList"
        }
    }

    public struct BatchDetectSentimentRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", required: true, type: .string), 
            AWSShapeMember(label: "TextList", required: true, type: .list)
        ]
        /// The language of the input documents. All documents must be in the same language.
        public let languageCode: String
        /// A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let textList: [String]

        public init(languageCode: String, textList: [String]) {
            self.languageCode = languageCode
            self.textList = textList
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case textList = "TextList"
        }
    }

    public struct DetectKeyPhrasesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", required: true, type: .enum), 
            AWSShapeMember(label: "Text", required: true, type: .string)
        ]
        /// The RFC 5646 language code for the input text. If you don't specify a language code, Amazon Comprehend detects the dominant language. If you specify the code for a language that Amazon Comprehend does not support, it returns and UnsupportedLanguageException. For more information about RFC 5646, see Tags for Identifying Languages on the IETF Tools web site.
        public let languageCode: LanguageCode
        /// A UTF-8 text string. Each string must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let text: String

        public init(languageCode: LanguageCode, text: String) {
            self.languageCode = languageCode
            self.text = text
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case text = "Text"
        }
    }

    public struct DominantLanguage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", required: false, type: .string), 
            AWSShapeMember(label: "Score", required: false, type: .float)
        ]
        /// The RFC 5646 language code for the dominant language. 
        public let languageCode: String?
        /// The level of confidence that Amazon Comprehend has in the accuracy of the detection.
        public let score: Float?

        public init(languageCode: String? = nil, score: Float? = nil) {
            self.languageCode = languageCode
            self.score = score
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case score = "Score"
        }
    }

    public enum EntityType: String, CustomStringConvertible, Codable {
        case person = "PERSON"
        case location = "LOCATION"
        case organization = "ORGANIZATION"
        case commercialItem = "COMMERCIAL_ITEM"
        case event = "EVENT"
        case date = "DATE"
        case quantity = "QUANTITY"
        case title = "TITLE"
        case other = "OTHER"
        public var description: String { return self.rawValue }
    }

    public struct DetectDominantLanguageResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Languages", required: false, type: .list)
        ]
        /// The languages that Amazon Comprehend detected in the input text. For each language, the response returns the RFC 5646 language code and the level of confidence that Amazon Comprehend has in the accuracy of its inference. For more information about RFC 5646, see Tags for Identifying Languages on the IETF Tools web site.
        public let languages: [DominantLanguage]?

        public init(languages: [DominantLanguage]? = nil) {
            self.languages = languages
        }

        private enum CodingKeys: String, CodingKey {
            case languages = "Languages"
        }
    }

    public struct BatchDetectEntitiesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorList", required: true, type: .list), 
            AWSShapeMember(label: "ResultList", required: true, type: .list)
        ]
        /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
        public let errorList: [BatchItemError]
        /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
        public let resultList: [BatchDetectEntitiesItemResult]

        public init(errorList: [BatchItemError], resultList: [BatchDetectEntitiesItemResult]) {
            self.errorList = errorList
            self.resultList = resultList
        }

        private enum CodingKeys: String, CodingKey {
            case errorList = "ErrorList"
            case resultList = "ResultList"
        }
    }

    public struct InputDataConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "S3Uri", required: true, type: .string), 
            AWSShapeMember(label: "InputFormat", required: false, type: .enum)
        ]
        /// The Amazon S3 URI for the input data. The URI must be in same region as the API endpoint that you are calling. The URI can point to a single input file or it can provide the prefix for a collection of data files.  For example, if you use the URI S3://bucketName/prefix, if the prefix is a single file, Amazon Comprehend uses that file as input. If more than one file begins with the prefix, Amazon Comprehend uses all of them as input.
        public let s3Uri: String
        /// Specifies how the text in an input file should be processed:    ONE_DOC_PER_FILE - Each file is considered a separate document. Use this option when you are processing large documents, such as newspaper articles or scientific papers.    ONE_DOC_PER_LINE - Each line in a file is considered a separate document. Use this option when you are processing many short documents, such as text messages.  
        public let inputFormat: InputFormat?

        public init(s3Uri: String, inputFormat: InputFormat? = nil) {
            self.s3Uri = s3Uri
            self.inputFormat = inputFormat
        }

        private enum CodingKeys: String, CodingKey {
            case s3Uri = "S3Uri"
            case inputFormat = "InputFormat"
        }
    }

    public struct DetectDominantLanguageRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Text", required: true, type: .string)
        ]
        /// A UTF-8 text string. Each string should contain at least 20 characters and must contain fewer that 5,000 bytes of UTF-8 encoded characters.
        public let text: String

        public init(text: String) {
            self.text = text
        }

        private enum CodingKeys: String, CodingKey {
            case text = "Text"
        }
    }

    public struct DetectEntitiesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Entities", required: false, type: .list)
        ]
        /// A collection of entities identified in the input text. For each entity, the response provides the entity text, entity type, where the entity text begins and ends, and the level of confidence that Amazon Comprehend has in the detection. For a list of entity types, see how-entities. 
        public let entities: [Entity]?

        public init(entities: [Entity]? = nil) {
            self.entities = entities
        }

        private enum CodingKeys: String, CodingKey {
            case entities = "Entities"
        }
    }

    public struct BatchDetectKeyPhrasesItemResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Index", required: false, type: .integer), 
            AWSShapeMember(label: "KeyPhrases", required: false, type: .list)
        ]
        /// The zero-based index of the document in the input list.
        public let index: Int32?
        /// One or more KeyPhrase objects, one for each key phrase detected in the document.
        public let keyPhrases: [KeyPhrase]?

        public init(index: Int32? = nil, keyPhrases: [KeyPhrase]? = nil) {
            self.index = index
            self.keyPhrases = keyPhrases
        }

        private enum CodingKeys: String, CodingKey {
            case index = "Index"
            case keyPhrases = "KeyPhrases"
        }
    }

    public struct BatchDetectEntitiesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LanguageCode", required: true, type: .string), 
            AWSShapeMember(label: "TextList", required: true, type: .list)
        ]
        /// The language of the input documents. All documents must be in the same language.
        public let languageCode: String
        /// A list containing the text of the input documents. The list can contain a maximum of 25 documents. Each document must contain fewer than 5,000 bytes of UTF-8 encoded characters.
        public let textList: [String]

        public init(languageCode: String, textList: [String]) {
            self.languageCode = languageCode
            self.textList = textList
        }

        private enum CodingKeys: String, CodingKey {
            case languageCode = "LanguageCode"
            case textList = "TextList"
        }
    }

    public struct BatchDetectKeyPhrasesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorList", required: true, type: .list), 
            AWSShapeMember(label: "ResultList", required: true, type: .list)
        ]
        /// A list containing one object for each document that contained an error. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If there are no errors in the batch, the ErrorList is empty.
        public let errorList: [BatchItemError]
        /// A list of objects containing the results of the operation. The results are sorted in ascending order by the Index field and match the order of the documents in the input list. If all of the documents contain an error, the ResultList is empty.
        public let resultList: [BatchDetectKeyPhrasesItemResult]

        public init(errorList: [BatchItemError], resultList: [BatchDetectKeyPhrasesItemResult]) {
            self.errorList = errorList
            self.resultList = resultList
        }

        private enum CodingKeys: String, CodingKey {
            case errorList = "ErrorList"
            case resultList = "ResultList"
        }
    }

    public struct BatchDetectDominantLanguageItemResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Languages", required: false, type: .list), 
            AWSShapeMember(label: "Index", required: false, type: .integer)
        ]
        /// One or more DominantLanguage objects describing the dominant languages in the document.
        public let languages: [DominantLanguage]?
        /// The zero-based index of the document in the input list.
        public let index: Int32?

        public init(languages: [DominantLanguage]? = nil, index: Int32? = nil) {
            self.languages = languages
            self.index = index
        }

        private enum CodingKeys: String, CodingKey {
            case languages = "Languages"
            case index = "Index"
        }
    }

    public struct BatchDetectSentimentItemResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Index", required: false, type: .integer), 
            AWSShapeMember(label: "SentimentScore", required: false, type: .structure), 
            AWSShapeMember(label: "Sentiment", required: false, type: .enum)
        ]
        /// The zero-based index of the document in the input list.
        public let index: Int32?
        /// The level of confidence that Amazon Comprehend has in the accuracy of its sentiment detection.
        public let sentimentScore: SentimentScore?
        /// The sentiment detected in the document.
        public let sentiment: SentimentType?

        public init(index: Int32? = nil, sentimentScore: SentimentScore? = nil, sentiment: SentimentType? = nil) {
            self.index = index
            self.sentimentScore = sentimentScore
            self.sentiment = sentiment
        }

        private enum CodingKeys: String, CodingKey {
            case index = "Index"
            case sentimentScore = "SentimentScore"
            case sentiment = "Sentiment"
        }
    }

    public enum SentimentType: String, CustomStringConvertible, Codable {
        case positive = "POSITIVE"
        case negative = "NEGATIVE"
        case neutral = "NEUTRAL"
        case mixed = "MIXED"
        public var description: String { return self.rawValue }
    }

}