// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Organizations {

    public struct HandshakeFilter: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ActionType", required: false, type: .enum), 
            AWSShapeMember(label: "ParentHandshakeId", required: false, type: .string)
        ]
        /// Specifies the type of handshake action. If you specify ActionType, you cannot also specify ParentHandshakeId.
        public let actionType: ActionType?
        /// Specifies the parent handshake. Only used for handshake types that are a child of another type. If you specify ParentHandshakeId, you cannot also specify ActionType. The regex pattern for handshake ID string requires "h-" followed by from 8 to 32 lower-case letters or digits.
        public let parentHandshakeId: String?

        public init(actionType: ActionType? = nil, parentHandshakeId: String? = nil) {
            self.actionType = actionType
            self.parentHandshakeId = parentHandshakeId
        }

        private enum CodingKeys: String, CodingKey {
            case actionType = "ActionType"
            case parentHandshakeId = "ParentHandshakeId"
        }
    }

    public struct CreatePolicyResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policy", required: false, type: .structure)
        ]
        /// A structure that contains details about the newly created policy.
        public let policy: Policy?

        public init(policy: Policy? = nil) {
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
        }
    }

    public struct ListAccountsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Accounts", required: false, type: .list)
        ]
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        public let nextToken: String?
        /// A list of objects in the organization.
        public let accounts: [Account]?

        public init(nextToken: String? = nil, accounts: [Account]? = nil) {
            self.nextToken = nextToken
            self.accounts = accounts
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case accounts = "Accounts"
        }
    }

    public enum HandshakeConstraintViolationExceptionReason: String, CustomStringConvertible, Codable {
        case accountNumberLimitExceeded = "ACCOUNT_NUMBER_LIMIT_EXCEEDED"
        case handshakeRateLimitExceeded = "HANDSHAKE_RATE_LIMIT_EXCEEDED"
        case alreadyInAnOrganization = "ALREADY_IN_AN_ORGANIZATION"
        case organizationAlreadyHasAllFeatures = "ORGANIZATION_ALREADY_HAS_ALL_FEATURES"
        case inviteDisabledDuringEnableAllFeatures = "INVITE_DISABLED_DURING_ENABLE_ALL_FEATURES"
        case paymentInstrumentRequired = "PAYMENT_INSTRUMENT_REQUIRED"
        case organizationFromDifferentSellerOfRecord = "ORGANIZATION_FROM_DIFFERENT_SELLER_OF_RECORD"
        case organizationMembershipChangeRateLimitExceeded = "ORGANIZATION_MEMBERSHIP_CHANGE_RATE_LIMIT_EXCEEDED"
        public var description: String { return self.rawValue }
    }

    public enum HandshakePartyType: String, CustomStringConvertible, Codable {
        case account = "ACCOUNT"
        case organization = "ORGANIZATION"
        case email = "EMAIL"
        public var description: String { return self.rawValue }
    }

    public struct Policy: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Content", required: false, type: .string), 
            AWSShapeMember(label: "PolicySummary", required: false, type: .structure)
        ]
        /// The text content of the policy.
        public let content: String?
        /// A structure that contains additional details about the policy.
        public let policySummary: PolicySummary?

        public init(content: String? = nil, policySummary: PolicySummary? = nil) {
            self.content = content
            self.policySummary = policySummary
        }

        private enum CodingKeys: String, CodingKey {
            case content = "Content"
            case policySummary = "PolicySummary"
        }
    }

    public struct InviteAccountToOrganizationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Notes", required: false, type: .string), 
            AWSShapeMember(label: "Target", required: true, type: .structure)
        ]
        /// Additional information that you want to include in the generated email to the recipient account owner.
        public let notes: String?
        /// The identifier (ID) of the AWS account that you want to invite to join your organization. This is a JSON object that contains the following elements:   { "Type": "ACCOUNT", "Id": "&lt; account id number &gt;" }  If you use the AWS CLI, you can submit this as a single string, similar to the following example:  --target id=123456789012,type=ACCOUNT  If you specify "Type": "ACCOUNT", then you must provide the AWS account ID number as the Id. If you specify "Type": "EMAIL", then you must specify the email address that is associated with the account.  --target id=bill@example.com,type=EMAIL 
        public let target: HandshakeParty

        public init(notes: String? = nil, target: HandshakeParty) {
            self.notes = notes
            self.target = target
        }

        private enum CodingKeys: String, CodingKey {
            case notes = "Notes"
            case target = "Target"
        }
    }

    public struct CancelHandshakeResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Handshake", required: false, type: .structure)
        ]
        /// A structure that contains details about the handshake that you canceled.
        public let handshake: Handshake?

        public init(handshake: Handshake? = nil) {
            self.handshake = handshake
        }

        private enum CodingKeys: String, CodingKey {
            case handshake = "Handshake"
        }
    }

    public enum OrganizationFeatureSet: String, CustomStringConvertible, Codable {
        case all = "ALL"
        case consolidatedBilling = "CONSOLIDATED_BILLING"
        public var description: String { return self.rawValue }
    }

    public enum CreateAccountState: String, CustomStringConvertible, Codable {
        case inProgress = "IN_PROGRESS"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct CreateAccountStatus: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: false, type: .string), 
            AWSShapeMember(label: "RequestedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "AccountName", required: false, type: .string), 
            AWSShapeMember(label: "CompletedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "FailureReason", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// If the account was created successfully, the unique identifier (ID) of the new account. The regex pattern for an account ID string requires exactly 12 digits.
        public let accountId: String?
        /// The date and time that the request was made for the account creation.
        public let requestedTimestamp: TimeStamp?
        /// The status of the request.
        public let state: CreateAccountState?
        /// The account name given to the account when it was created.
        public let accountName: String?
        /// The date and time that the account was created and the request completed.
        public let completedTimestamp: TimeStamp?
        /// If the request failed, a description of the reason for the failure.   ACCOUNT_LIMIT_EXCEEDED: The account could not be created because you have reached the limit on the number of accounts in your organization.   EMAIL_ALREADY_EXISTS: The account could not be created because another AWS account with that email address already exists.   INVALID_ADDRESS: The account could not be created because the address you provided is not valid.   INVALID_EMAIL: The account could not be created because the email address you provided is not valid.   INTERNAL_FAILURE: The account could not be created because of an internal failure. Try again later. If the problem persists, contact Customer Support.  
        public let failureReason: CreateAccountFailureReason?
        /// The unique identifier (ID) that references this request. You get this value from the response of the initial CreateAccount request to create the account. The regex pattern for an create account request ID string requires "car-" followed by from 8 to 32 lower-case letters or digits.
        public let id: String?

        public init(accountId: String? = nil, requestedTimestamp: TimeStamp? = nil, state: CreateAccountState? = nil, accountName: String? = nil, completedTimestamp: TimeStamp? = nil, failureReason: CreateAccountFailureReason? = nil, id: String? = nil) {
            self.accountId = accountId
            self.requestedTimestamp = requestedTimestamp
            self.state = state
            self.accountName = accountName
            self.completedTimestamp = completedTimestamp
            self.failureReason = failureReason
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case requestedTimestamp = "RequestedTimestamp"
            case state = "State"
            case accountName = "AccountName"
            case completedTimestamp = "CompletedTimestamp"
            case failureReason = "FailureReason"
            case id = "Id"
        }
    }

    public enum AccountJoinedMethod: String, CustomStringConvertible, Codable {
        case invited = "INVITED"
        case created = "CREATED"
        public var description: String { return self.rawValue }
    }

    public enum HandshakeState: String, CustomStringConvertible, Codable {
        case requested = "REQUESTED"
        case open = "OPEN"
        case canceled = "CANCELED"
        case accepted = "ACCEPTED"
        case declined = "DECLINED"
        case expired = "EXPIRED"
        public var description: String { return self.rawValue }
    }

    public struct DeclineHandshakeResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Handshake", required: false, type: .structure)
        ]
        /// A structure that contains details about the declined handshake. The state is updated to show the value DECLINED.
        public let handshake: Handshake?

        public init(handshake: Handshake? = nil) {
            self.handshake = handshake
        }

        private enum CodingKeys: String, CodingKey {
            case handshake = "Handshake"
        }
    }

    public struct ListTargetsForPolicyResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Targets", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of structures, each of which contains details about one of the entities to which the specified policy is attached.
        public let targets: [PolicyTargetSummary]?
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        public let nextToken: String?

        public init(targets: [PolicyTargetSummary]? = nil, nextToken: String? = nil) {
            self.targets = targets
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case targets = "Targets"
            case nextToken = "NextToken"
        }
    }

    public struct ListPoliciesRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filter", required: true, type: .enum)
        ]
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        public let maxResults: Int32?
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        public let nextToken: String?
        /// Specifies the type of policy that you want to include in the response.
        public let filter: PolicyType

        public init(maxResults: Int32? = nil, nextToken: String? = nil, filter: PolicyType) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.filter = filter
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case filter = "Filter"
        }
    }

    public struct ListPoliciesForTargetRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filter", required: true, type: .enum), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "TargetId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The type of policy that you want to include in the returned list.
        public let filter: PolicyType
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        public let nextToken: String?
        /// The unique identifier (ID) of the root, organizational unit, or account whose policies you want to list. The regex pattern for a target ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Account: a string that consists of exactly 12 digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        public let targetId: String
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        public let maxResults: Int32?

        public init(filter: PolicyType, nextToken: String? = nil, targetId: String, maxResults: Int32? = nil) {
            self.filter = filter
            self.nextToken = nextToken
            self.targetId = targetId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "Filter"
            case nextToken = "NextToken"
            case targetId = "TargetId"
            case maxResults = "MaxResults"
        }
    }

    public struct ListTargetsForPolicyRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The unique identifier (ID) of the policy for which you want to know its attachments. The regex pattern for a policy ID string requires "p-" followed by from 8 to 128 lower-case letters or digits.
        public let policyId: String
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        public let nextToken: String?
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        public let maxResults: Int32?

        public init(policyId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.policyId = policyId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case policyId = "PolicyId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct ListOrganizationalUnitsForParentResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "OrganizationalUnits", required: false, type: .list)
        ]
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        public let nextToken: String?
        /// A list of the OUs in the specified root or parent OU.
        public let organizationalUnits: [OrganizationalUnit]?

        public init(nextToken: String? = nil, organizationalUnits: [OrganizationalUnit]? = nil) {
            self.nextToken = nextToken
            self.organizationalUnits = organizationalUnits
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case organizationalUnits = "OrganizationalUnits"
        }
    }

    public struct HandshakeResource: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Resources", required: false, type: .list)
        ]
        /// The type of information being passed, specifying how the value is to be interpreted by the other party:    ACCOUNT - Specifies an AWS account ID number.    ORGANIZATION - Specifies an organization ID number.    EMAIL - Specifies the email address that is associated with the account that receives the handshake.     OWNER_EMAIL - Specifies the email address associated with the master account. Included as information about an organization.     OWNER_NAME - Specifies the name associated with the master account. Included as information about an organization.     NOTES - Additional text provided by the handshake initiator and intended for the recipient to read.  
        public let `type`: HandshakeResourceType?
        /// The information that is passed to the other party in the handshake. The format of the value string must match the requirements of the specified type.
        public let value: String?
        /// When needed, contains an additional array of HandshakeResource objects.
        public let resources: [HandshakeResource]?

        public init(type: HandshakeResourceType? = nil, value: String? = nil, resources: [HandshakeResource]? = nil) {
            self.`type` = `type`
            self.value = value
            self.resources = resources
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case value = "Value"
            case resources = "Resources"
        }
    }

    public struct EnableAllFeaturesResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Handshake", required: false, type: .structure)
        ]
        /// A structure that contains details about the handshake created to support this request to enable all features in the organization.
        public let handshake: Handshake?

        public init(handshake: Handshake? = nil) {
            self.handshake = handshake
        }

        private enum CodingKeys: String, CodingKey {
            case handshake = "Handshake"
        }
    }

    public struct DescribeOrganizationalUnitResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationalUnit", required: false, type: .structure)
        ]
        /// A structure that contains details about the specified OU.
        public let organizationalUnit: OrganizationalUnit?

        public init(organizationalUnit: OrganizationalUnit? = nil) {
            self.organizationalUnit = organizationalUnit
        }

        private enum CodingKeys: String, CodingKey {
            case organizationalUnit = "OrganizationalUnit"
        }
    }

    public struct InviteAccountToOrganizationResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Handshake", required: false, type: .structure)
        ]
        /// A structure that contains details about the handshake that is created to support this invitation request.
        public let handshake: Handshake?

        public init(handshake: Handshake? = nil) {
            self.handshake = handshake
        }

        private enum CodingKeys: String, CodingKey {
            case handshake = "Handshake"
        }
    }

    public struct DescribeOrganizationalUnitRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationalUnitId", required: true, type: .string)
        ]
        /// The unique identifier (ID) of the organizational unit that you want details about. You can get the ID from the ListOrganizationalUnitsForParent operation. The regex pattern for an organizational unit ID string requires "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that contains the OU) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.
        public let organizationalUnitId: String

        public init(organizationalUnitId: String) {
            self.organizationalUnitId = organizationalUnitId
        }

        private enum CodingKeys: String, CodingKey {
            case organizationalUnitId = "OrganizationalUnitId"
        }
    }

    public struct UpdateOrganizationalUnitResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationalUnit", required: false, type: .structure)
        ]
        /// A structure that contains the details about the specified OU, including its new name.
        public let organizationalUnit: OrganizationalUnit?

        public init(organizationalUnit: OrganizationalUnit? = nil) {
            self.organizationalUnit = organizationalUnit
        }

        private enum CodingKeys: String, CodingKey {
            case organizationalUnit = "OrganizationalUnit"
        }
    }

    public struct CreateAccountResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateAccountStatus", required: false, type: .structure)
        ]
        /// A structure that contains details about the request to create an account. This response structure might not be fully populated when you first receive it because account creation is an asynchronous process. You can pass the returned CreateAccountStatus ID as a parameter to  DescribeCreateAccountStatus  to get status about the progress of the request at later times. 
        public let createAccountStatus: CreateAccountStatus?

        public init(createAccountStatus: CreateAccountStatus? = nil) {
            self.createAccountStatus = createAccountStatus
        }

        private enum CodingKeys: String, CodingKey {
            case createAccountStatus = "CreateAccountStatus"
        }
    }

    public struct EnablePolicyTypeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyType", required: true, type: .enum), 
            AWSShapeMember(label: "RootId", required: true, type: .string)
        ]
        /// The policy type that you want to enable.
        public let policyType: PolicyType
        /// The unique identifier (ID) of the root in which you want to enable a policy type. You can get the ID from the ListRoots operation. The regex pattern for a root ID string requires "r-" followed by from 4 to 32 lower-case letters or digits.
        public let rootId: String

        public init(policyType: PolicyType, rootId: String) {
            self.policyType = policyType
            self.rootId = rootId
        }

        private enum CodingKeys: String, CodingKey {
            case policyType = "PolicyType"
            case rootId = "RootId"
        }
    }

    public struct CreateOrganizationalUnitRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ParentId", required: true, type: .string)
        ]
        /// The friendly name to assign to the new OU.
        public let name: String
        /// The unique identifier (ID) of the parent root or OU in which you want to create the new OU. The regex pattern for a parent ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        public let parentId: String

        public init(name: String, parentId: String) {
            self.name = name
            self.parentId = parentId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case parentId = "ParentId"
        }
    }

    public struct DescribeCreateAccountStatusResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateAccountStatus", required: false, type: .structure)
        ]
        /// A structure that contains the current status of an account creation request.
        public let createAccountStatus: CreateAccountStatus?

        public init(createAccountStatus: CreateAccountStatus? = nil) {
            self.createAccountStatus = createAccountStatus
        }

        private enum CodingKeys: String, CodingKey {
            case createAccountStatus = "CreateAccountStatus"
        }
    }

    public struct ListRootsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Roots", required: false, type: .list)
        ]
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        public let nextToken: String?
        /// A list of roots that are defined in an organization.
        public let roots: [Root]?

        public init(nextToken: String? = nil, roots: [Root]? = nil) {
            self.nextToken = nextToken
            self.roots = roots
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case roots = "Roots"
        }
    }

    public struct ListCreateAccountStatusRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "States", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// A list of one or more states that you want included in the response. If this parameter is not present, then all requests are included in the response.
        public let states: [CreateAccountState]?
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        public let nextToken: String?
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        public let maxResults: Int32?

        public init(states: [CreateAccountState]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.states = states
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case states = "States"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct CreateOrganizationResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Organization", required: false, type: .structure)
        ]
        /// A structure that contains details about the newly created organization.
        public let organization: Organization?

        public init(organization: Organization? = nil) {
            self.organization = organization
        }

        private enum CodingKeys: String, CodingKey {
            case organization = "Organization"
        }
    }

    public struct MoveAccountRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string), 
            AWSShapeMember(label: "SourceParentId", required: true, type: .string), 
            AWSShapeMember(label: "DestinationParentId", required: true, type: .string)
        ]
        /// The unique identifier (ID) of the account that you want to move. The regex pattern for an account ID string requires exactly 12 digits.
        public let accountId: String
        /// The unique identifier (ID) of the root or organizational unit that you want to move the account from. The regex pattern for a parent ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        public let sourceParentId: String
        /// The unique identifier (ID) of the root or organizational unit that you want to move the account to. The regex pattern for a parent ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        public let destinationParentId: String

        public init(accountId: String, sourceParentId: String, destinationParentId: String) {
            self.accountId = accountId
            self.sourceParentId = sourceParentId
            self.destinationParentId = destinationParentId
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case sourceParentId = "SourceParentId"
            case destinationParentId = "DestinationParentId"
        }
    }

    public enum InvalidInputExceptionReason: String, CustomStringConvertible, Codable {
        case invalidPartyTypeTarget = "INVALID_PARTY_TYPE_TARGET"
        case invalidSyntaxOrganizationArn = "INVALID_SYNTAX_ORGANIZATION_ARN"
        case invalidSyntaxPolicyId = "INVALID_SYNTAX_POLICY_ID"
        case invalidEnum = "INVALID_ENUM"
        case invalidListMember = "INVALID_LIST_MEMBER"
        case maxLengthExceeded = "MAX_LENGTH_EXCEEDED"
        case maxValueExceeded = "MAX_VALUE_EXCEEDED"
        case minLengthExceeded = "MIN_LENGTH_EXCEEDED"
        case minValueExceeded = "MIN_VALUE_EXCEEDED"
        case immutablePolicy = "IMMUTABLE_POLICY"
        case invalidPattern = "INVALID_PATTERN"
        case invalidPatternTargetId = "INVALID_PATTERN_TARGET_ID"
        case inputRequired = "INPUT_REQUIRED"
        case invalidNextToken = "INVALID_NEXT_TOKEN"
        case maxLimitExceededFilter = "MAX_LIMIT_EXCEEDED_FILTER"
        case movingAccountBetweenDifferentRoots = "MOVING_ACCOUNT_BETWEEN_DIFFERENT_ROOTS"
        case invalidFullNameTarget = "INVALID_FULL_NAME_TARGET"
        public var description: String { return self.rawValue }
    }

    public struct AttachPolicyRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyId", required: true, type: .string), 
            AWSShapeMember(label: "TargetId", required: true, type: .string)
        ]
        /// The unique identifier (ID) of the policy that you want to attach to the target. You can get the ID for the policy by calling the ListPolicies operation. The regex pattern for a policy ID string requires "p-" followed by from 8 to 128 lower-case letters or digits.
        public let policyId: String
        /// The unique identifier (ID) of the root, OU, or account that you want to attach the policy to. You can get the ID by calling the ListRoots, ListOrganizationalUnitsForParent, or ListAccounts operations. The regex pattern for a target ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Account: a string that consists of exactly 12 digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        public let targetId: String

        public init(policyId: String, targetId: String) {
            self.policyId = policyId
            self.targetId = targetId
        }

        private enum CodingKeys: String, CodingKey {
            case policyId = "PolicyId"
            case targetId = "TargetId"
        }
    }

    public struct ListParentsResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Parents", required: false, type: .list)
        ]
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        public let nextToken: String?
        /// A list of parents for the specified child account or OU.
        public let parents: [Parent]?

        public init(nextToken: String? = nil, parents: [Parent]? = nil) {
            self.nextToken = nextToken
            self.parents = parents
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case parents = "Parents"
        }
    }

    public struct UpdatePolicyRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Content", required: false, type: .string), 
            AWSShapeMember(label: "PolicyId", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// If provided, the new content for the policy. The text must be correctly formatted JSON that complies with the syntax for the policy's type. For more information, see Service Control Policy Syntax in the AWS Organizations User Guide.
        public let content: String?
        /// The unique identifier (ID) of the policy that you want to update. The regex pattern for a policy ID string requires "p-" followed by from 8 to 128 lower-case letters or digits.
        public let policyId: String
        /// If provided, the new name for the policy. The regex pattern that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        public let name: String?
        /// If provided, the new description for the policy.
        public let description: String?

        public init(content: String? = nil, policyId: String, name: String? = nil, description: String? = nil) {
            self.content = content
            self.policyId = policyId
            self.name = name
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case content = "Content"
            case policyId = "PolicyId"
            case name = "Name"
            case description = "Description"
        }
    }

    public struct Organization: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MasterAccountEmail", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "AvailablePolicyTypes", required: false, type: .list), 
            AWSShapeMember(label: "MasterAccountArn", required: false, type: .string), 
            AWSShapeMember(label: "FeatureSet", required: false, type: .enum), 
            AWSShapeMember(label: "MasterAccountId", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The email address that is associated with the AWS account that is designated as the master account for the organization.
        public let masterAccountEmail: String?
        /// The Amazon Resource Name (ARN) of an organization. For more information about ARNs in Organizations, see ARN Formats Supported by Organizations in the AWS Organizations User Guide.
        public let arn: String?
        /// A list of policy types that are enabled for this organization. For example, if your organization has all features enabled, then service control policies (SCPs) are included in the list.
        public let availablePolicyTypes: [PolicyTypeSummary]?
        /// The Amazon Resource Name (ARN) of the account that is designated as the master account for the organization. For more information about ARNs in Organizations, see ARN Formats Supported by Organizations in the AWS Organizations User Guide.
        public let masterAccountArn: String?
        /// Specifies the functionality that currently is available to the organization. If set to "ALL", then all features are enabled and policies can be applied to accounts in the organization. If set to "CONSOLIDATED_BILLING", then only consolidated billing functionality is available. For more information, see Enabling All Features in Your Organization in the AWS Organizations User Guide.
        public let featureSet: OrganizationFeatureSet?
        /// The unique identifier (ID) of the master account of an organization. The regex pattern for an account ID string requires exactly 12 digits.
        public let masterAccountId: String?
        /// The unique identifier (ID) of an organization. The regex pattern for an organization ID string requires "o-" followed by from 10 to 32 lower-case letters or digits.
        public let id: String?

        public init(masterAccountEmail: String? = nil, arn: String? = nil, availablePolicyTypes: [PolicyTypeSummary]? = nil, masterAccountArn: String? = nil, featureSet: OrganizationFeatureSet? = nil, masterAccountId: String? = nil, id: String? = nil) {
            self.masterAccountEmail = masterAccountEmail
            self.arn = arn
            self.availablePolicyTypes = availablePolicyTypes
            self.masterAccountArn = masterAccountArn
            self.featureSet = featureSet
            self.masterAccountId = masterAccountId
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case masterAccountEmail = "MasterAccountEmail"
            case arn = "Arn"
            case availablePolicyTypes = "AvailablePolicyTypes"
            case masterAccountArn = "MasterAccountArn"
            case featureSet = "FeatureSet"
            case masterAccountId = "MasterAccountId"
            case id = "Id"
        }
    }

    public struct Child: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The type of this child entity.
        public let `type`: ChildType?
        /// The unique identifier (ID) of this child entity. The regex pattern for a child ID string requires one of the following:   Account: a string that consists of exactly 12 digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that contains the OU) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        public let id: String?

        public init(type: ChildType? = nil, id: String? = nil) {
            self.`type` = `type`
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case id = "Id"
        }
    }

    public enum ChildType: String, CustomStringConvertible, Codable {
        case account = "ACCOUNT"
        case organizationalUnit = "ORGANIZATIONAL_UNIT"
        public var description: String { return self.rawValue }
    }

    public enum ConstraintViolationExceptionReason: String, CustomStringConvertible, Codable {
        case accountNumberLimitExceeded = "ACCOUNT_NUMBER_LIMIT_EXCEEDED"
        case handshakeRateLimitExceeded = "HANDSHAKE_RATE_LIMIT_EXCEEDED"
        case ouNumberLimitExceeded = "OU_NUMBER_LIMIT_EXCEEDED"
        case ouDepthLimitExceeded = "OU_DEPTH_LIMIT_EXCEEDED"
        case policyNumberLimitExceeded = "POLICY_NUMBER_LIMIT_EXCEEDED"
        case maxPolicyTypeAttachmentLimitExceeded = "MAX_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED"
        case minPolicyTypeAttachmentLimitExceeded = "MIN_POLICY_TYPE_ATTACHMENT_LIMIT_EXCEEDED"
        case accountCannotLeaveOrganization = "ACCOUNT_CANNOT_LEAVE_ORGANIZATION"
        case accountCannotLeaveWithoutEula = "ACCOUNT_CANNOT_LEAVE_WITHOUT_EULA"
        case accountCannotLeaveWithoutPhoneVerification = "ACCOUNT_CANNOT_LEAVE_WITHOUT_PHONE_VERIFICATION"
        case masterAccountPaymentInstrumentRequired = "MASTER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED"
        case memberAccountPaymentInstrumentRequired = "MEMBER_ACCOUNT_PAYMENT_INSTRUMENT_REQUIRED"
        case accountCreationRateLimitExceeded = "ACCOUNT_CREATION_RATE_LIMIT_EXCEEDED"
        case masterAccountAddressDoesNotMatchMarketplace = "MASTER_ACCOUNT_ADDRESS_DOES_NOT_MATCH_MARKETPLACE"
        public var description: String { return self.rawValue }
    }

    public enum IAMUserAccessToBilling: String, CustomStringConvertible, Codable {
        case allow = "ALLOW"
        case deny = "DENY"
        public var description: String { return self.rawValue }
    }

    public enum AccountStatus: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case suspended = "SUSPENDED"
        public var description: String { return self.rawValue }
    }

    public struct ListChildrenRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChildType", required: true, type: .enum), 
            AWSShapeMember(label: "ParentId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Filters the output to include only the specified child type.
        public let childType: ChildType
        /// The unique identifier (ID) for the parent root or OU whose children you want to list. The regex pattern for a parent ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        public let parentId: String
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        public let nextToken: String?
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        public let maxResults: Int32?

        public init(childType: ChildType, parentId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.childType = childType
            self.parentId = parentId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case childType = "ChildType"
            case parentId = "ParentId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public enum TargetType: String, CustomStringConvertible, Codable {
        case account = "ACCOUNT"
        case organizationalUnit = "ORGANIZATIONAL_UNIT"
        case root = "ROOT"
        public var description: String { return self.rawValue }
    }

    public struct PolicyTypeSummary: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The name of the policy type.
        public let `type`: PolicyType?
        /// The status of the policy type as it relates to the associated root. To attach a policy of the specified type to a root or to an OU or account in that root, it must be available in the organization and enabled for that root.
        public let status: PolicyTypeStatus?

        public init(type: PolicyType? = nil, status: PolicyTypeStatus? = nil) {
            self.`type` = `type`
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case status = "Status"
        }
    }

    public struct DeclineHandshakeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HandshakeId", required: true, type: .string)
        ]
        /// The unique identifier (ID) of the handshake that you want to decline. You can get the ID from the ListHandshakesForAccount operation. The regex pattern for handshake ID string requires "h-" followed by from 8 to 32 lower-case letters or digits.
        public let handshakeId: String

        public init(handshakeId: String) {
            self.handshakeId = handshakeId
        }

        private enum CodingKeys: String, CodingKey {
            case handshakeId = "HandshakeId"
        }
    }

    public struct AcceptHandshakeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HandshakeId", required: true, type: .string)
        ]
        /// The unique identifier (ID) of the handshake that you want to accept. The regex pattern for handshake ID string requires "h-" followed by from 8 to 32 lower-case letters or digits.
        public let handshakeId: String

        public init(handshakeId: String) {
            self.handshakeId = handshakeId
        }

        private enum CodingKeys: String, CodingKey {
            case handshakeId = "HandshakeId"
        }
    }

    public struct Account: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Email", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "JoinedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "JoinedMethod", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The status of the account in the organization.
        public let status: AccountStatus?
        /// The Amazon Resource Name (ARN) of the account. For more information about ARNs in Organizations, see ARN Formats Supported by Organizations in the AWS Organizations User Guide.
        public let arn: String?
        /// The email address associated with the AWS account. The regex pattern for this parameter is a string of characters that represents a standard Internet email address.
        public let email: String?
        /// The friendly name of the account. The regex pattern that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        public let name: String?
        /// The date the account became a part of the organization.
        public let joinedTimestamp: TimeStamp?
        /// The method by which the account joined the organization.
        public let joinedMethod: AccountJoinedMethod?
        /// The unique identifier (ID) of the account. The regex pattern for an account ID string requires exactly 12 digits.
        public let id: String?

        public init(status: AccountStatus? = nil, arn: String? = nil, email: String? = nil, name: String? = nil, joinedTimestamp: TimeStamp? = nil, joinedMethod: AccountJoinedMethod? = nil, id: String? = nil) {
            self.status = status
            self.arn = arn
            self.email = email
            self.name = name
            self.joinedTimestamp = joinedTimestamp
            self.joinedMethod = joinedMethod
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case arn = "Arn"
            case email = "Email"
            case name = "Name"
            case joinedTimestamp = "JoinedTimestamp"
            case joinedMethod = "JoinedMethod"
            case id = "Id"
        }
    }

    public struct ListAccountsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        public let nextToken: String?
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct HandshakeParty: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The type of party.
        public let `type`: HandshakePartyType?
        /// The unique identifier (ID) for the party. The regex pattern for handshake ID string requires "h-" followed by from 8 to 32 lower-case letters or digits.
        public let id: String?

        public init(type: HandshakePartyType? = nil, id: String? = nil) {
            self.`type` = `type`
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case id = "Id"
        }
    }

    public struct ListHandshakesForAccountRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filter", required: false, type: .structure)
        ]
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        public let maxResults: Int32?
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        public let nextToken: String?
        /// Filters the handshakes that you want included in the response. The default is all types. Use the ActionType element to limit the output to only a specified type, such as INVITE, ENABLE-FULL-CONTROL, or APPROVE-FULL-CONTROL. Alternatively, for the ENABLE-FULL-CONTROL handshake that generates a separate child handshake for each member account, you can specify ParentHandshakeId to see only the handshakes that were generated by that parent request.
        public let filter: HandshakeFilter?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, filter: HandshakeFilter? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.filter = filter
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case filter = "Filter"
        }
    }

    public struct ListCreateAccountStatusResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateAccountStatuses", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of objects with details about the requests. Certain elements, such as the accountId number, are present in the output only after the account has been successfully created.
        public let createAccountStatuses: [CreateAccountStatus]?
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        public let nextToken: String?

        public init(createAccountStatuses: [CreateAccountStatus]? = nil, nextToken: String? = nil) {
            self.createAccountStatuses = createAccountStatuses
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case createAccountStatuses = "CreateAccountStatuses"
            case nextToken = "NextToken"
        }
    }

    public struct Parent: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The type of the parent entity.
        public let `type`: ParentType?
        /// The unique identifier (ID) of the parent entity. The regex pattern for a parent ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        public let id: String?

        public init(type: ParentType? = nil, id: String? = nil) {
            self.`type` = `type`
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case id = "Id"
        }
    }

    public enum PolicyTypeStatus: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case pendingEnable = "PENDING_ENABLE"
        case pendingDisable = "PENDING_DISABLE"
        public var description: String { return self.rawValue }
    }

    public struct DescribePolicyResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policy", required: false, type: .structure)
        ]
        /// A structure that contains details about the specified policy.
        public let policy: Policy?

        public init(policy: Policy? = nil) {
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
        }
    }

    public struct UpdateOrganizationalUnitRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationalUnitId", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The unique identifier (ID) of the OU that you want to rename. You can get the ID from the ListOrganizationalUnitsForParent operation. The regex pattern for an organizational unit ID string requires "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that contains the OU) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.
        public let organizationalUnitId: String
        /// The new name that you want to assign to the OU. The regex pattern that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        public let name: String?

        public init(organizationalUnitId: String, name: String? = nil) {
            self.organizationalUnitId = organizationalUnitId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case organizationalUnitId = "OrganizationalUnitId"
            case name = "Name"
        }
    }

    public struct ListPoliciesResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policies", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of policies that match the filter criteria in the request. The output list does not include the policy contents. To see the content for a policy, see DescribePolicy.
        public let policies: [PolicySummary]?
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        public let nextToken: String?

        public init(policies: [PolicySummary]? = nil, nextToken: String? = nil) {
            self.policies = policies
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case policies = "Policies"
            case nextToken = "NextToken"
        }
    }

    public struct ListChildrenResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Children", required: false, type: .list)
        ]
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        public let nextToken: String?
        /// The list of children of the specified parent container.
        public let children: [Child]?

        public init(nextToken: String? = nil, children: [Child]? = nil) {
            self.nextToken = nextToken
            self.children = children
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case children = "Children"
        }
    }

    public struct DisablePolicyTypeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyType", required: true, type: .enum), 
            AWSShapeMember(label: "RootId", required: true, type: .string)
        ]
        /// The policy type that you want to disable in this root.
        public let policyType: PolicyType
        /// The unique identifier (ID) of the root in which you want to disable a policy type. You can get the ID from the ListPolicies operation. The regex pattern for a root ID string requires "r-" followed by from 4 to 32 lower-case letters or digits.
        public let rootId: String

        public init(policyType: PolicyType, rootId: String) {
            self.policyType = policyType
            self.rootId = rootId
        }

        private enum CodingKeys: String, CodingKey {
            case policyType = "PolicyType"
            case rootId = "RootId"
        }
    }

    public struct DetachPolicyRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyId", required: true, type: .string), 
            AWSShapeMember(label: "TargetId", required: true, type: .string)
        ]
        /// The unique identifier (ID) of the policy you want to detach. You can get the ID from the ListPolicies or ListPoliciesForTarget operations. The regex pattern for a policy ID string requires "p-" followed by from 8 to 128 lower-case letters or digits.
        public let policyId: String
        /// The unique identifier (ID) of the root, OU, or account from which you want to detach the policy. You can get the ID from the ListRoots, ListOrganizationalUnitsForParent, or ListAccounts operations. The regex pattern for a target ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Account: a string that consists of exactly 12 digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        public let targetId: String

        public init(policyId: String, targetId: String) {
            self.policyId = policyId
            self.targetId = targetId
        }

        private enum CodingKeys: String, CodingKey {
            case policyId = "PolicyId"
            case targetId = "TargetId"
        }
    }

    public struct CreateAccountRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountName", required: true, type: .string), 
            AWSShapeMember(label: "Email", required: true, type: .string), 
            AWSShapeMember(label: "RoleName", required: false, type: .string), 
            AWSShapeMember(label: "IamUserAccessToBilling", required: false, type: .enum)
        ]
        /// The friendly name of the member account.
        public let accountName: String
        /// The email address of the owner to assign to the new member account. This email address must not already be associated with another AWS account.
        public let email: String
        /// (Optional) The name of an IAM role that Organizations automatically preconfigures in the new member account. This role trusts the master account, allowing users in the master account to assume the role, as permitted by the master account administrator. The role has administrator permissions in the new member account. If you do not specify this parameter, the role name defaults to OrganizationAccountAccessRole. For more information about how to use this role to access the member account, see Accessing and Administering the Member Accounts in Your Organization in the AWS Organizations User Guide, and steps 2 and 3 in Tutorial: Delegate Access Across AWS Accounts Using IAM Roles in the IAM User Guide. The regex pattern that is used to validate this parameter is a string of characters that can consist of uppercase letters, lowercase letters, digits with no spaces, and any of the following characters: =,.@-
        public let roleName: String?
        /// If set to ALLOW, the new account enables IAM users to access account billing information if they have the required permissions. If set to DENY, then only the root user of the new account can access account billing information. For more information, see Activating Access to the Billing and Cost Management Console in the AWS Billing and Cost Management User Guide. If you do not specify this parameter, the value defaults to ALLOW, and IAM users and roles with the required permissions can access billing information for the new account.
        public let iamUserAccessToBilling: IAMUserAccessToBilling?

        public init(accountName: String, email: String, roleName: String? = nil, iamUserAccessToBilling: IAMUserAccessToBilling? = nil) {
            self.accountName = accountName
            self.email = email
            self.roleName = roleName
            self.iamUserAccessToBilling = iamUserAccessToBilling
        }

        private enum CodingKeys: String, CodingKey {
            case accountName = "AccountName"
            case email = "Email"
            case roleName = "RoleName"
            case iamUserAccessToBilling = "IamUserAccessToBilling"
        }
    }

    public struct ListParentsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ChildId", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The unique identifier (ID) of the OU or account whose parent containers you want to list. Do not specify a root. The regex pattern for a child ID string requires one of the following:   Account: a string that consists of exactly 12 digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that contains the OU) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        public let childId: String
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        public let nextToken: String?
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        public let maxResults: Int32?

        public init(childId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.childId = childId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case childId = "ChildId"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DescribeCreateAccountStatusRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreateAccountRequestId", required: true, type: .string)
        ]
        /// Specifies the operationId that uniquely identifies the request. You can get the ID from the response to an earlier CreateAccount request, or from the ListCreateAccountStatus operation. The regex pattern for an create account request ID string requires "car-" followed by from 8 to 32 lower-case letters or digits.
        public let createAccountRequestId: String

        public init(createAccountRequestId: String) {
            self.createAccountRequestId = createAccountRequestId
        }

        private enum CodingKeys: String, CodingKey {
            case createAccountRequestId = "CreateAccountRequestId"
        }
    }

    public enum ActionType: String, CustomStringConvertible, Codable {
        case invite = "INVITE"
        case enableAllFeatures = "ENABLE_ALL_FEATURES"
        case approveAllFeatures = "APPROVE_ALL_FEATURES"
        public var description: String { return self.rawValue }
    }

    public struct DeletePolicyRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyId", required: true, type: .string)
        ]
        /// The unique identifier (ID) of the policy that you want to delete. You can get the ID from the ListPolicies or ListPoliciesForTarget operations. The regex pattern for a policy ID string requires "p-" followed by from 8 to 128 lower-case letters or digits.
        public let policyId: String

        public init(policyId: String) {
            self.policyId = policyId
        }

        private enum CodingKeys: String, CodingKey {
            case policyId = "PolicyId"
        }
    }

    public struct EnablePolicyTypeResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Root", required: false, type: .structure)
        ]
        /// A structure that shows the root with the updated list of enabled policy types.
        public let root: Root?

        public init(root: Root? = nil) {
            self.root = root
        }

        private enum CodingKeys: String, CodingKey {
            case root = "Root"
        }
    }

    public struct CreateOrganizationalUnitResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationalUnit", required: false, type: .structure)
        ]
        /// A structure that contains details about the newly created OU.
        public let organizationalUnit: OrganizationalUnit?

        public init(organizationalUnit: OrganizationalUnit? = nil) {
            self.organizationalUnit = organizationalUnit
        }

        private enum CodingKeys: String, CodingKey {
            case organizationalUnit = "OrganizationalUnit"
        }
    }

    public struct DescribeHandshakeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HandshakeId", required: true, type: .string)
        ]
        /// The unique identifier (ID) of the handshake that you want information about. You can get the ID from the original call to InviteAccountToOrganization, or from a call to ListHandshakesForAccount or ListHandshakesForOrganization. The regex pattern for handshake ID string requires "h-" followed by from 8 to 32 lower-case letters or digits.
        public let handshakeId: String

        public init(handshakeId: String) {
            self.handshakeId = handshakeId
        }

        private enum CodingKeys: String, CodingKey {
            case handshakeId = "HandshakeId"
        }
    }

    public struct EnableAllFeaturesRequest: AWSShape {
        /// The key for the payload

    }

    public struct UpdatePolicyResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policy", required: false, type: .structure)
        ]
        /// A structure that contains details about the updated policy, showing the requested changes.
        public let policy: Policy?

        public init(policy: Policy? = nil) {
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
        }
    }

    public struct ListPoliciesForTargetResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policies", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The list of policies that match the criteria in the request.
        public let policies: [PolicySummary]?
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        public let nextToken: String?

        public init(policies: [PolicySummary]? = nil, nextToken: String? = nil) {
            self.policies = policies
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case policies = "Policies"
            case nextToken = "NextToken"
        }
    }

    public struct ListAccountsForParentResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Accounts", required: false, type: .list)
        ]
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        public let nextToken: String?
        /// A list of the accounts in the specified root or OU.
        public let accounts: [Account]?

        public init(nextToken: String? = nil, accounts: [Account]? = nil) {
            self.nextToken = nextToken
            self.accounts = accounts
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case accounts = "Accounts"
        }
    }

    public struct ListHandshakesForOrganizationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Filter", required: false, type: .structure)
        ]
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        public let maxResults: Int32?
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        public let nextToken: String?
        /// A filter of the handshakes that you want included in the response. The default is all types. Use the ActionType element to limit the output to only a specified type, such as INVITE, ENABLE-ALL-FEATURES, or APPROVE-ALL-FEATURES. Alternatively, for the ENABLE-ALL-FEATURES handshake that generates a separate child handshake for each member account, you can specify the ParentHandshakeId to see only the handshakes that were generated by that parent request.
        public let filter: HandshakeFilter?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, filter: HandshakeFilter? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.filter = filter
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case filter = "Filter"
        }
    }

    public struct RemoveAccountFromOrganizationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string)
        ]
        /// The unique identifier (ID) of the member account that you want to remove from the organization. The regex pattern for an account ID string requires exactly 12 digits.
        public let accountId: String

        public init(accountId: String) {
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
        }
    }

    public struct CreatePolicyRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Content", required: true, type: .string), 
            AWSShapeMember(label: "Type", required: true, type: .enum), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: true, type: .string)
        ]
        /// The policy content to add to the new policy. For example, if you create a service control policy (SCP), this string must be JSON text that specifies the permissions that admins in attached accounts can delegate to their users, groups, and roles. For more information about the SCP syntax, see Service Control Policy Syntax in the AWS Organizations User Guide.
        public let content: String
        /// The type of policy to create.  In the current release, the only type of policy that you can create is a service control policy (SCP). 
        public let `type`: PolicyType
        /// The friendly name to assign to the policy. The regex pattern that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        public let name: String
        /// An optional description to assign to the policy.
        public let description: String

        public init(content: String, type: PolicyType, name: String, description: String) {
            self.content = content
            self.`type` = `type`
            self.name = name
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case content = "Content"
            case `type` = "Type"
            case name = "Name"
            case description = "Description"
        }
    }

    public struct PolicySummary: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "AwsManaged", required: false, type: .boolean), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The description of the policy.
        public let description: String?
        /// The Amazon Resource Name (ARN) of the policy. For more information about ARNs in Organizations, see ARN Formats Supported by Organizations in the AWS Organizations User Guide.
        public let arn: String?
        /// A boolean value that indicates whether the specified policy is an AWS managed policy. If true, then you can attach the policy to roots, OUs, or accounts, but you cannot edit it.
        public let awsManaged: Bool?
        /// The type of policy.
        public let `type`: PolicyType?
        /// The friendly name of the policy. The regex pattern that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        public let name: String?
        /// The unique identifier (ID) of the policy. The regex pattern for a policy ID string requires "p-" followed by from 8 to 128 lower-case letters or digits.
        public let id: String?

        public init(description: String? = nil, arn: String? = nil, awsManaged: Bool? = nil, type: PolicyType? = nil, name: String? = nil, id: String? = nil) {
            self.description = description
            self.arn = arn
            self.awsManaged = awsManaged
            self.`type` = `type`
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case arn = "Arn"
            case awsManaged = "AwsManaged"
            case `type` = "Type"
            case name = "Name"
            case id = "Id"
        }
    }

    public struct DisablePolicyTypeResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Root", required: false, type: .structure)
        ]
        /// A structure that shows the root with the updated list of enabled policy types.
        public let root: Root?

        public init(root: Root? = nil) {
            self.root = root
        }

        private enum CodingKeys: String, CodingKey {
            case root = "Root"
        }
    }

    public struct ListHandshakesForOrganizationResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Handshakes", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of Handshake objects with details about each of the handshakes that are associated with an organization.
        public let handshakes: [Handshake]?
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        public let nextToken: String?

        public init(handshakes: [Handshake]? = nil, nextToken: String? = nil) {
            self.handshakes = handshakes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case handshakes = "Handshakes"
            case nextToken = "NextToken"
        }
    }

    public struct Handshake: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequestedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Action", required: false, type: .enum), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "ExpirationTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "Resources", required: false, type: .list), 
            AWSShapeMember(label: "Parties", required: false, type: .list), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The date and time that the handshake request was made.
        public let requestedTimestamp: TimeStamp?
        /// The Amazon Resource Name (ARN) of a handshake. For more information about ARNs in Organizations, see ARN Formats Supported by Organizations in the AWS Organizations User Guide.
        public let arn: String?
        /// The type of handshake, indicating what action occurs when the recipient accepts the handshake.
        public let action: ActionType?
        /// The current state of the handshake. Use the state to trace the flow of the handshake through the process from its creation to its acceptance. The meaning of each of the valid values is as follows:    REQUESTED: This handshake was sent to multiple recipients (applicable to only some handshake types) and not all recipients have responded yet. The request stays in this state until all recipients respond.    OPEN: This handshake was sent to multiple recipients (applicable to only some policy types) and all recipients have responded, allowing the originator to complete the handshake action.    CANCELED: This handshake is no longer active because it was canceled by the originating account.    ACCEPTED: This handshake is complete because it has been accepted by the recipient.    DECLINED: This handshake is no longer active because it was declined by the recipient account.    EXPIRED: This handshake is no longer active because the originator did not receive a response of any kind from the recipient before the expiration time (15 days).  
        public let state: HandshakeState?
        /// The date and time that the handshake expires. If the recipient of the handshake request fails to respond before the specified date and time, the handshake becomes inactive and is no longer valid.
        public let expirationTimestamp: TimeStamp?
        /// Additional information that is needed to process the handshake.
        public let resources: [HandshakeResource]?
        /// Information about the two accounts that are participating in the handshake.
        public let parties: [HandshakeParty]?
        /// The unique identifier (ID) of a handshake. The originating account creates the ID when it initiates the handshake. The regex pattern for handshake ID string requires "h-" followed by from 8 to 32 lower-case letters or digits.
        public let id: String?

        public init(requestedTimestamp: TimeStamp? = nil, arn: String? = nil, action: ActionType? = nil, state: HandshakeState? = nil, expirationTimestamp: TimeStamp? = nil, resources: [HandshakeResource]? = nil, parties: [HandshakeParty]? = nil, id: String? = nil) {
            self.requestedTimestamp = requestedTimestamp
            self.arn = arn
            self.action = action
            self.state = state
            self.expirationTimestamp = expirationTimestamp
            self.resources = resources
            self.parties = parties
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case requestedTimestamp = "RequestedTimestamp"
            case arn = "Arn"
            case action = "Action"
            case state = "State"
            case expirationTimestamp = "ExpirationTimestamp"
            case resources = "Resources"
            case parties = "Parties"
            case id = "Id"
        }
    }

    public struct DescribeHandshakeResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Handshake", required: false, type: .structure)
        ]
        /// A structure that contains information about the specified handshake.
        public let handshake: Handshake?

        public init(handshake: Handshake? = nil) {
            self.handshake = handshake
        }

        private enum CodingKeys: String, CodingKey {
            case handshake = "Handshake"
        }
    }

    public enum HandshakeResourceType: String, CustomStringConvertible, Codable {
        case account = "ACCOUNT"
        case organization = "ORGANIZATION"
        case organizationFeatureSet = "ORGANIZATION_FEATURE_SET"
        case email = "EMAIL"
        case masterEmail = "MASTER_EMAIL"
        case masterName = "MASTER_NAME"
        case notes = "NOTES"
        case parentHandshake = "PARENT_HANDSHAKE"
        public var description: String { return self.rawValue }
    }

    public struct CancelHandshakeRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "HandshakeId", required: true, type: .string)
        ]
        /// The unique identifier (ID) of the handshake that you want to cancel. You can get the ID from the ListHandshakesForOrganization operation. The regex pattern for handshake ID string requires "h-" followed by from 8 to 32 lower-case letters or digits.
        public let handshakeId: String

        public init(handshakeId: String) {
            self.handshakeId = handshakeId
        }

        private enum CodingKeys: String, CodingKey {
            case handshakeId = "HandshakeId"
        }
    }

    public struct CreateOrganizationRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "FeatureSet", required: false, type: .enum)
        ]
        /// Specifies the feature set supported by the new organization. Each feature set supports different levels of functionality.    CONSOLIDATED_BILLING: All member accounts have their bills consolidated to and paid by the master account. For more information, see Consolidated Billing in the AWS Organizations User Guide.    ALL: In addition to all the features supported by the consolidated billing feature set, the master account can also apply any type of policy to any member account in the organization. For more information, see All features in the AWS Organizations User Guide.  
        public let featureSet: OrganizationFeatureSet?

        public init(featureSet: OrganizationFeatureSet? = nil) {
            self.featureSet = featureSet
        }

        private enum CodingKeys: String, CodingKey {
            case featureSet = "FeatureSet"
        }
    }

    public struct ListOrganizationalUnitsForParentRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ParentId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        public let nextToken: String?
        /// The unique identifier (ID) of the root or OU whose child OUs you want to list. The regex pattern for a parent ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        public let parentId: String
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, parentId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.parentId = parentId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case parentId = "ParentId"
            case maxResults = "MaxResults"
        }
    }

    public enum CreateAccountFailureReason: String, CustomStringConvertible, Codable {
        case accountLimitExceeded = "ACCOUNT_LIMIT_EXCEEDED"
        case emailAlreadyExists = "EMAIL_ALREADY_EXISTS"
        case invalidAddress = "INVALID_ADDRESS"
        case invalidEmail = "INVALID_EMAIL"
        case internalFailure = "INTERNAL_FAILURE"
        public var description: String { return self.rawValue }
    }

    public struct PolicyTargetSummary: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "TargetId", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the policy target. For more information about ARNs in Organizations, see ARN Formats Supported by Organizations in the AWS Organizations User Guide.
        public let arn: String?
        /// The type of the policy target.
        public let `type`: TargetType?
        /// The friendly name of the policy target. The regex pattern that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        public let name: String?
        /// The unique identifier (ID) of the policy target. The regex pattern for a target ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Account: a string that consists of exactly 12 digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        public let targetId: String?

        public init(arn: String? = nil, type: TargetType? = nil, name: String? = nil, targetId: String? = nil) {
            self.arn = arn
            self.`type` = `type`
            self.name = name
            self.targetId = targetId
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case `type` = "Type"
            case name = "Name"
            case targetId = "TargetId"
        }
    }

    public struct AcceptHandshakeResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Handshake", required: false, type: .structure)
        ]
        /// A structure that contains details about the accepted handshake.
        public let handshake: Handshake?

        public init(handshake: Handshake? = nil) {
            self.handshake = handshake
        }

        private enum CodingKeys: String, CodingKey {
            case handshake = "Handshake"
        }
    }

    public enum PolicyType: String, CustomStringConvertible, Codable {
        case serviceControlPolicy = "SERVICE_CONTROL_POLICY"
        public var description: String { return self.rawValue }
    }

    public struct ListHandshakesForAccountResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Handshakes", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of Handshake objects with details about each of the handshakes that is associated with the specified account.
        public let handshakes: [Handshake]?
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        public let nextToken: String?

        public init(handshakes: [Handshake]? = nil, nextToken: String? = nil) {
            self.handshakes = handshakes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case handshakes = "Handshakes"
            case nextToken = "NextToken"
        }
    }

    public struct OrganizationalUnit: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The friendly name of this OU. The regex pattern that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        public let name: String?
        /// The Amazon Resource Name (ARN) of this OU. For more information about ARNs in Organizations, see ARN Formats Supported by Organizations in the AWS Organizations User Guide.
        public let arn: String?
        /// The unique identifier (ID) associated with this OU. The regex pattern for an organizational unit ID string requires "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that contains the OU) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.
        public let id: String?

        public init(name: String? = nil, arn: String? = nil, id: String? = nil) {
            self.name = name
            self.arn = arn
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case arn = "Arn"
            case id = "Id"
        }
    }

    public struct DescribeAccountRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: true, type: .string)
        ]
        /// The unique identifier (ID) of the AWS account that you want information about. You can get the ID from the ListAccounts or ListAccountsForParent operations. The regex pattern for an account ID string requires exactly 12 digits.
        public let accountId: String

        public init(accountId: String) {
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
        }
    }

    public struct Root: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "PolicyTypes", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the root. For more information about ARNs in Organizations, see ARN Formats Supported by Organizations in the AWS Organizations User Guide.
        public let arn: String?
        /// The types of policies that are currently enabled for the root and therefore can be attached to the root or to its OUs or accounts.
        public let policyTypes: [PolicyTypeSummary]?
        /// The friendly name of the root. The regex pattern that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        public let name: String?
        /// The unique identifier (ID) for the root. The regex pattern for a root ID string requires "r-" followed by from 4 to 32 lower-case letters or digits.
        public let id: String?

        public init(arn: String? = nil, policyTypes: [PolicyTypeSummary]? = nil, name: String? = nil, id: String? = nil) {
            self.arn = arn
            self.policyTypes = policyTypes
            self.name = name
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case policyTypes = "PolicyTypes"
            case name = "Name"
            case id = "Id"
        }
    }

    public enum ParentType: String, CustomStringConvertible, Codable {
        case root = "ROOT"
        case organizationalUnit = "ORGANIZATIONAL_UNIT"
        public var description: String { return self.rawValue }
    }

    public struct DescribeAccountResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Account", required: false, type: .structure)
        ]
        /// A structure that contains information about the requested account.
        public let account: Account?

        public init(account: Account? = nil) {
            self.account = account
        }

        private enum CodingKeys: String, CodingKey {
            case account = "Account"
        }
    }

    public struct DescribePolicyRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyId", required: true, type: .string)
        ]
        /// The unique identifier (ID) of the policy that you want details about. You can get the ID from the ListPolicies or ListPoliciesForTarget operations. The regex pattern for a policy ID string requires "p-" followed by from 8 to 128 lower-case letters or digits.
        public let policyId: String

        public init(policyId: String) {
            self.policyId = policyId
        }

        private enum CodingKeys: String, CodingKey {
            case policyId = "PolicyId"
        }
    }

    public struct DeleteOrganizationalUnitRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "OrganizationalUnitId", required: true, type: .string)
        ]
        /// The unique identifier (ID) of the organizational unit that you want to delete. You can get the ID from the ListOrganizationalUnitsForParent operation. The regex pattern for an organizational unit ID string requires "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that contains the OU) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.
        public let organizationalUnitId: String

        public init(organizationalUnitId: String) {
            self.organizationalUnitId = organizationalUnitId
        }

        private enum CodingKeys: String, CodingKey {
            case organizationalUnitId = "OrganizationalUnitId"
        }
    }

    public struct ListAccountsForParentRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ParentId", required: true, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        public let nextToken: String?
        /// The unique identifier (ID) for the parent root or organization unit (OU) whose accounts you want to list.
        public let parentId: String
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, parentId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.parentId = parentId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case parentId = "ParentId"
            case maxResults = "MaxResults"
        }
    }

    public struct ListRootsRequest: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        public let nextToken: String?
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct DescribeOrganizationResponse: AWSShape {
        /// The key for the payload
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Organization", required: false, type: .structure)
        ]
        /// A structure that contains information about the organization.
        public let organization: Organization?

        public init(organization: Organization? = nil) {
            self.organization = organization
        }

        private enum CodingKeys: String, CodingKey {
            case organization = "Organization"
        }
    }

}