// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Organizations {

    public struct HandshakeFilter: Serializable, Initializable {
        /// Specifies the type of handshake action. If you specify ActionType, you cannot also specify ParentHandshakeId.
        var actionType: String? = nil
        /// Specifies the parent handshake. Only used for handshake types that are a child of another type. If you specify ParentHandshakeId, you cannot also specify ActionType. The regex pattern for handshake ID string requires "h-" followed by from 8 to 32 lower-case letters or digits.
        var parentHandshakeId: String? = nil

        public init() {}

        public init(actionType: String? = nil, parentHandshakeId: String? = nil) {
            self.actionType = actionType
            self.parentHandshakeId = parentHandshakeId
        }

    }

    public struct CreatePolicyResponse: Serializable, Initializable {
        /// A structure that contains details about the newly created policy.
        var policy: Policy? = nil

        public init() {}

        public init(policy: Policy? = nil) {
            self.policy = policy
        }

    }

    public struct ListAccountsResponse: Serializable, Initializable {
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        var nextToken: String? = nil
        /// A list of objects in the organization.
        var accounts: [Account]? = nil

        public init() {}

        public init(nextToken: String? = nil, accounts: [Account]? = nil) {
            self.nextToken = nextToken
            self.accounts = accounts
        }

    }

    public struct Policy: Serializable, Initializable {
        /// The text content of the policy.
        var content: String? = nil
        /// A structure that contains additional details about the policy.
        var policySummary: PolicySummary? = nil

        public init() {}

        public init(content: String? = nil, policySummary: PolicySummary? = nil) {
            self.content = content
            self.policySummary = policySummary
        }

    }

    public struct InviteAccountToOrganizationRequest: Serializable, Initializable {
        /// Additional information that you want to include in the generated email to the recipient account owner.
        var notes: String? = nil
        /// The identifier (ID) of the AWS account that you want to invite to join your organization. This is a JSON object that contains the following elements:   { "Type": "ACCOUNT", "Id": "&lt; account id number &gt;" }  If you use the AWS CLI, you can submit this as a single string, similar to the following example:  --target id=123456789012,type=ACCOUNT  If you specify "Type": "ACCOUNT", then you must provide the AWS account ID number as the Id. If you specify "Type": "EMAIL", then you must specify the email address that is associated with the account.  --target id=bill@example.com,type=EMAIL 
        var target: HandshakeParty = HandshakeParty()

        public init() {}

        public init(notes: String? = nil, target: HandshakeParty) {
            self.notes = notes
            self.target = target
        }

    }

    public struct CancelHandshakeResponse: Serializable, Initializable {
        /// A structure that contains details about the handshake that you canceled.
        var handshake: Handshake? = nil

        public init() {}

        public init(handshake: Handshake? = nil) {
            self.handshake = handshake
        }

    }

    public struct CreateAccountStatus: Serializable, Initializable {
        /// If the account was created successfully, the unique identifier (ID) of the new account. The regex pattern for an account ID string requires exactly 12 digits.
        var accountId: String? = nil
        /// The date and time that the request was made for the account creation.
        var requestedTimestamp: Date? = nil
        /// The status of the request.
        var state: String? = nil
        /// The account name given to the account when it was created.
        var accountName: String? = nil
        /// The date and time that the account was created and the request completed.
        var completedTimestamp: Date? = nil
        /// If the request failed, a description of the reason for the failure.
        var failureReason: String? = nil
        /// The unique identifier (ID) that references this request. You get this value from the response of the initial CreateAccount request to create the account. The regex pattern for an create account request ID string requires "car-" followed by from 8 to 32 lower-case letters or digits.
        var id: String? = nil

        public init() {}

        public init(accountId: String? = nil, requestedTimestamp: Date? = nil, state: String? = nil, accountName: String? = nil, completedTimestamp: Date? = nil, failureReason: String? = nil, id: String? = nil) {
            self.accountId = accountId
            self.requestedTimestamp = requestedTimestamp
            self.state = state
            self.accountName = accountName
            self.completedTimestamp = completedTimestamp
            self.failureReason = failureReason
            self.id = id
        }

    }

    public struct DeclineHandshakeResponse: Serializable, Initializable {
        /// A structure that contains details about the declined handshake. The state is updated to show the value DECLINED.
        var handshake: Handshake? = nil

        public init() {}

        public init(handshake: Handshake? = nil) {
            self.handshake = handshake
        }

    }

    public struct ListTargetsForPolicyResponse: Serializable, Initializable {
        /// A list of structures, each of which contains details about one of the entities to which the specified policy is attached.
        var targets: [PolicyTargetSummary]? = nil
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        var nextToken: String? = nil

        public init() {}

        public init(targets: [PolicyTargetSummary]? = nil, nextToken: String? = nil) {
            self.targets = targets
            self.nextToken = nextToken
        }

    }

    public struct ListPoliciesRequest: Serializable, Initializable {
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        var maxResults: Int32? = nil
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        var nextToken: String? = nil
        /// Specifies the type of policy that you want to include in the response.
        var filter: String = ""

        public init() {}

        public init(maxResults: Int32? = nil, nextToken: String? = nil, filter: String) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.filter = filter
        }

    }

    public struct ListPoliciesForTargetRequest: Serializable, Initializable {
        /// The type of policy that you want to include in the returned list.
        var filter: String = ""
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        var nextToken: String? = nil
        /// The unique identifier (ID) of the root, organizational unit, or account whose policies you want to list. The regex pattern for a target ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Account: a string that consists of exactly 12 digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        var targetId: String = ""
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        var maxResults: Int32? = nil

        public init() {}

        public init(filter: String, nextToken: String? = nil, targetId: String, maxResults: Int32? = nil) {
            self.filter = filter
            self.nextToken = nextToken
            self.targetId = targetId
            self.maxResults = maxResults
        }

    }

    public struct ListTargetsForPolicyRequest: Serializable, Initializable {
        /// The unique identifier (ID) of the policy for which you want to know its attachments. The regex pattern for a policy ID string requires "p-" followed by from 8 to 128 lower-case letters or digits.
        var policyId: String = ""
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        var nextToken: String? = nil
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        var maxResults: Int32? = nil

        public init() {}

        public init(policyId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.policyId = policyId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct ListOrganizationalUnitsForParentResponse: Serializable, Initializable {
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        var nextToken: String? = nil
        /// A list of the OUs in the specified root or parent OU.
        var organizationalUnits: [OrganizationalUnit]? = nil

        public init() {}

        public init(nextToken: String? = nil, organizationalUnits: [OrganizationalUnit]? = nil) {
            self.nextToken = nextToken
            self.organizationalUnits = organizationalUnits
        }

    }

    public struct HandshakeResource: Serializable, Initializable {
        /// The type of information being passed, specifying how the value is to be interpreted by the other party:    ACCOUNT - Specifies an AWS account ID number.    ORGANIZATION - Specifies an organization ID number.    EMAIL - Specifies the email address that is associated with the account that receives the handshake.     OWNER_EMAIL - Specifies the email address associated with the master account. Included as information about an organization.     OWNER_NAME - Specifies the name associated with the master account. Included as information about an organization.     NOTES - Additional text provided by the handshake initiator and intended for the recipient to read.  
        var type: String? = nil
        /// The information that is passed to the other party in the handshake. The format of the value string must match the requirements of the specified type.
        var value: String? = nil
        /// When needed, contains an additional array of HandshakeResource objects.
        var resources: [HandshakeResource]? = nil

        public init() {}

        public init(type: String? = nil, value: String? = nil, resources: [HandshakeResource]? = nil) {
            self.type = type
            self.value = value
            self.resources = resources
        }

    }

    public struct EnableAllFeaturesResponse: Serializable, Initializable {
        /// A structure that contains details about the handshake created to support this request to enable all features in the organization.
        var handshake: Handshake? = nil

        public init() {}

        public init(handshake: Handshake? = nil) {
            self.handshake = handshake
        }

    }

    public struct DescribeOrganizationalUnitResponse: Serializable, Initializable {
        /// A structure that contains details about the specified OU.
        var organizationalUnit: OrganizationalUnit? = nil

        public init() {}

        public init(organizationalUnit: OrganizationalUnit? = nil) {
            self.organizationalUnit = organizationalUnit
        }

    }

    public struct InviteAccountToOrganizationResponse: Serializable, Initializable {
        /// A structure that contains details about the handshake that is created to support this invitation request.
        var handshake: Handshake? = nil

        public init() {}

        public init(handshake: Handshake? = nil) {
            self.handshake = handshake
        }

    }

    public struct DescribeOrganizationalUnitRequest: Serializable, Initializable {
        /// The unique identifier (ID) of the organizational unit that you want details about. You can get the ID from the ListOrganizationalUnitsForParent operation. The regex pattern for an organizational unit ID string requires "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that contains the OU) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.
        var organizationalUnitId: String = ""

        public init() {}

        public init(organizationalUnitId: String) {
            self.organizationalUnitId = organizationalUnitId
        }

    }

    public struct UpdateOrganizationalUnitResponse: Serializable, Initializable {
        /// A structure that contains the details about the specified OU, including its new name.
        var organizationalUnit: OrganizationalUnit? = nil

        public init() {}

        public init(organizationalUnit: OrganizationalUnit? = nil) {
            self.organizationalUnit = organizationalUnit
        }

    }

    public struct CreateAccountResponse: Serializable, Initializable {
        /// A structure that contains details about the request to create an account. This response structure might not be fully populated when you first receive it because account creation is an asynchronous process. You can pass the returned CreateAccountStatus ID as a parameter to  DescribeCreateAccountStatus  to get status about the progress of the request at later times. 
        var createAccountStatus: CreateAccountStatus? = nil

        public init() {}

        public init(createAccountStatus: CreateAccountStatus? = nil) {
            self.createAccountStatus = createAccountStatus
        }

    }

    public struct EnablePolicyTypeRequest: Serializable, Initializable {
        /// The policy type that you want to enable.
        var policyType: String = ""
        /// The unique identifier (ID) of the root in which you want to enable a policy type. You can get the ID from the ListRoots operation. The regex pattern for a root ID string requires "r-" followed by from 4 to 32 lower-case letters or digits.
        var rootId: String = ""

        public init() {}

        public init(policyType: String, rootId: String) {
            self.policyType = policyType
            self.rootId = rootId
        }

    }

    public struct CreateOrganizationalUnitRequest: Serializable, Initializable {
        /// The friendly name to assign to the new OU.
        var name: String = ""
        /// The unique identifier (ID) of the parent root or OU in which you want to create the new OU. The regex pattern for a parent ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        var parentId: String = ""

        public init() {}

        public init(name: String, parentId: String) {
            self.name = name
            self.parentId = parentId
        }

    }

    public struct DescribeCreateAccountStatusResponse: Serializable, Initializable {
        /// A structure that contains the current status of an account creation request.
        var createAccountStatus: CreateAccountStatus? = nil

        public init() {}

        public init(createAccountStatus: CreateAccountStatus? = nil) {
            self.createAccountStatus = createAccountStatus
        }

    }

    public struct ListRootsResponse: Serializable, Initializable {
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        var nextToken: String? = nil
        /// A list of roots that are defined in an organization.
        var roots: [Root]? = nil

        public init() {}

        public init(nextToken: String? = nil, roots: [Root]? = nil) {
            self.nextToken = nextToken
            self.roots = roots
        }

    }

    public struct ListCreateAccountStatusRequest: Serializable, Initializable {
        /// A list of one or more states that you want included in the response. If this parameter is not present, then all requests are included in the response.
        var states: [String]? = nil
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        var nextToken: String? = nil
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        var maxResults: Int32? = nil

        public init() {}

        public init(states: [String]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.states = states
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct CreateOrganizationResponse: Serializable, Initializable {
        /// A structure that contains details about the newly created organization.
        var organization: Organization? = nil

        public init() {}

        public init(organization: Organization? = nil) {
            self.organization = organization
        }

    }

    public struct MoveAccountRequest: Serializable, Initializable {
        /// The unique identifier (ID) of the account that you want to move. The regex pattern for an account ID string requires exactly 12 digits.
        var accountId: String = ""
        /// The unique identifier (ID) of the root or organizational unit that you want to move the account from. The regex pattern for a parent ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        var sourceParentId: String = ""
        /// The unique identifier (ID) of the root or organizational unit that you want to move the account to. The regex pattern for a parent ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        var destinationParentId: String = ""

        public init() {}

        public init(accountId: String, sourceParentId: String, destinationParentId: String) {
            self.accountId = accountId
            self.sourceParentId = sourceParentId
            self.destinationParentId = destinationParentId
        }

    }

    public struct AttachPolicyRequest: Serializable, Initializable {
        /// The unique identifier (ID) of the policy that you want to attach to the target. You can get the ID for the policy by calling the ListPolicies operation. The regex pattern for a policy ID string requires "p-" followed by from 8 to 128 lower-case letters or digits.
        var policyId: String = ""
        /// The unique identifier (ID) of the root, OU, or account that you want to attach the policy to. You can get the ID by calling the ListRoots, ListOrganizationalUnitsForParent, or ListAccounts operations. The regex pattern for a target ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Account: a string that consists of exactly 12 digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        var targetId: String = ""

        public init() {}

        public init(policyId: String, targetId: String) {
            self.policyId = policyId
            self.targetId = targetId
        }

    }

    public struct ListParentsResponse: Serializable, Initializable {
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        var nextToken: String? = nil
        /// A list of parents for the specified child account or OU.
        var parents: [Parent]? = nil

        public init() {}

        public init(nextToken: String? = nil, parents: [Parent]? = nil) {
            self.nextToken = nextToken
            self.parents = parents
        }

    }

    public struct UpdatePolicyRequest: Serializable, Initializable {
        /// If provided, the new content for the policy. The text must be correctly formatted JSON that complies with the syntax for the policy's type. For more information, see Service Control Policy Syntax in the AWS Organizations User Guide.
        var content: String? = nil
        /// The unique identifier (ID) of the policy that you want to update. The regex pattern for a policy ID string requires "p-" followed by from 8 to 128 lower-case letters or digits.
        var policyId: String = ""
        /// If provided, the new name for the policy. The regex pattern that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        var name: String? = nil
        /// If provided, the new description for the policy.
        var description: String? = nil

        public init() {}

        public init(content: String? = nil, policyId: String, name: String? = nil, description: String? = nil) {
            self.content = content
            self.policyId = policyId
            self.name = name
            self.description = description
        }

    }

    public struct Organization: Serializable, Initializable {
        /// The email address that is associated with the AWS account that is designated as the master account for the organization.
        var masterAccountEmail: String? = nil
        /// The Amazon Resource Name (ARN) of an organization. For more information about ARNs in Organizations, see ARN Formats Supported by Organizations in the AWS Organizations User Guide.
        var arn: String? = nil
        /// A list of policy types that are enabled for this organization. For example, if your organization has all features enabled, then service control policies (SCPs) are included in the list.
        var availablePolicyTypes: [PolicyTypeSummary]? = nil
        /// The Amazon Resource Name (ARN) of the account that is designated as the master account for the organization. For more information about ARNs in Organizations, see ARN Formats Supported by Organizations in the AWS Organizations User Guide.
        var masterAccountArn: String? = nil
        /// Specifies the functionality that currently is available to the organization. If set to "ALL", then all features are enabled and policies can be applied to accounts in the organization. If set to "CONSOLIDATED_BILLING", then only consolidated billing functionality is available. For more information, see Enabling All Features in Your Organization in the AWS Organizations User Guide.
        var featureSet: String? = nil
        /// The unique identifier (ID) of the master account of an organization. The regex pattern for an account ID string requires exactly 12 digits.
        var masterAccountId: String? = nil
        /// The unique identifier (ID) of an organization. The regex pattern for an organization ID string requires "o-" followed by from 10 to 32 lower-case letters or digits.
        var id: String? = nil

        public init() {}

        public init(masterAccountEmail: String? = nil, arn: String? = nil, availablePolicyTypes: [PolicyTypeSummary]? = nil, masterAccountArn: String? = nil, featureSet: String? = nil, masterAccountId: String? = nil, id: String? = nil) {
            self.masterAccountEmail = masterAccountEmail
            self.arn = arn
            self.availablePolicyTypes = availablePolicyTypes
            self.masterAccountArn = masterAccountArn
            self.featureSet = featureSet
            self.masterAccountId = masterAccountId
            self.id = id
        }

    }

    public struct Child: Serializable, Initializable {
        /// The type of this child entity.
        var type: String? = nil
        /// The unique identifier (ID) of this child entity. The regex pattern for a child ID string requires one of the following:   Account: a string that consists of exactly 12 digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that contains the OU) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        var id: String? = nil

        public init() {}

        public init(type: String? = nil, id: String? = nil) {
            self.type = type
            self.id = id
        }

    }

    public struct ListChildrenRequest: Serializable, Initializable {
        /// Filters the output to include only the specified child type.
        var childType: String = ""
        /// The unique identifier (ID) for the parent root or OU whose children you want to list. The regex pattern for a parent ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        var parentId: String = ""
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        var nextToken: String? = nil
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        var maxResults: Int32? = nil

        public init() {}

        public init(childType: String, parentId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.childType = childType
            self.parentId = parentId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct PolicyTypeSummary: Serializable, Initializable {
        /// The name of the policy type.
        var type: String? = nil
        /// The status of the policy type as it relates to the associated root. To attach a policy of the specified type to a root or to an OU or account in that root, it must be available in the organization and enabled for that root.
        var status: String? = nil

        public init() {}

        public init(type: String? = nil, status: String? = nil) {
            self.type = type
            self.status = status
        }

    }

    public struct DeclineHandshakeRequest: Serializable, Initializable {
        /// The unique identifier (ID) of the handshake that you want to decline. You can get the ID from the ListHandshakesForAccount operation. The regex pattern for handshake ID string requires "h-" followed by from 8 to 32 lower-case letters or digits.
        var handshakeId: String = ""

        public init() {}

        public init(handshakeId: String) {
            self.handshakeId = handshakeId
        }

    }

    public struct AcceptHandshakeRequest: Serializable, Initializable {
        /// The unique identifier (ID) of the handshake that you want to accept. The regex pattern for handshake ID string requires "h-" followed by from 8 to 32 lower-case letters or digits.
        var handshakeId: String = ""

        public init() {}

        public init(handshakeId: String) {
            self.handshakeId = handshakeId
        }

    }

    public struct Account: Serializable, Initializable {
        /// The date the account became a part of the organization.
        var joinedTimestamp: Date? = nil
        /// The status of the account in the organization.
        var status: String? = nil
        /// The Amazon Resource Name (ARN) of the account. For more information about ARNs in Organizations, see ARN Formats Supported by Organizations in the AWS Organizations User Guide.
        var arn: String? = nil
        /// The friendly name of the account. The regex pattern that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        var name: String? = nil
        /// The method by which the account joined the organization.
        var joinedMethod: String? = nil
        /// The unique identifier (ID) of the account. The regex pattern for an account ID string requires exactly 12 digits.
        var id: String? = nil

        public init() {}

        public init(joinedTimestamp: Date? = nil, status: String? = nil, arn: String? = nil, name: String? = nil, joinedMethod: String? = nil, id: String? = nil) {
            self.joinedTimestamp = joinedTimestamp
            self.status = status
            self.arn = arn
            self.name = name
            self.joinedMethod = joinedMethod
            self.id = id
        }

    }

    public struct ListAccountsRequest: Serializable, Initializable {
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        var nextToken: String? = nil
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct HandshakeParty: Serializable, Initializable {
        /// The type of party.
        var type: String? = nil
        /// The unique identifier (ID) for the party. The regex pattern for handshake ID string requires "h-" followed by from 8 to 32 lower-case letters or digits.
        var id: String? = nil

        public init() {}

        public init(type: String? = nil, id: String? = nil) {
            self.type = type
            self.id = id
        }

    }

    public struct ListHandshakesForAccountRequest: Serializable, Initializable {
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        var maxResults: Int32? = nil
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        var nextToken: String? = nil
        /// Filters the handshakes that you want included in the response. The default is all types. Use the ActionType element to limit the output to only a specified type, such as INVITE, ENABLE-FULL-CONTROL, or APPROVE-FULL-CONTROL. Alternatively, for the ENABLE-FULL-CONTROL handshake that generates a separate child handshake for each member account, you can specify ParentHandshakeId to see only the handshakes that were generated by that parent request.
        var filter: HandshakeFilter? = nil

        public init() {}

        public init(maxResults: Int32? = nil, nextToken: String? = nil, filter: HandshakeFilter? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.filter = filter
        }

    }

    public struct ListCreateAccountStatusResponse: Serializable, Initializable {
        /// A list of objects with details about the requests. Certain elements, such as the accountId number, are present in the output only after the account has been successfully created.
        var createAccountStatuses: [CreateAccountStatus]? = nil
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        var nextToken: String? = nil

        public init() {}

        public init(createAccountStatuses: [CreateAccountStatus]? = nil, nextToken: String? = nil) {
            self.createAccountStatuses = createAccountStatuses
            self.nextToken = nextToken
        }

    }

    public struct Parent: Serializable, Initializable {
        /// The type of the parent entity.
        var type: String? = nil
        /// The unique identifier (ID) of the parent entity. The regex pattern for a parent ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        var id: String? = nil

        public init() {}

        public init(type: String? = nil, id: String? = nil) {
            self.type = type
            self.id = id
        }

    }

    public struct DescribePolicyResponse: Serializable, Initializable {
        /// A structure that contains details about the specified policy.
        var policy: Policy? = nil

        public init() {}

        public init(policy: Policy? = nil) {
            self.policy = policy
        }

    }

    public struct UpdateOrganizationalUnitRequest: Serializable, Initializable {
        /// The unique identifier (ID) of the OU that you want to rename. You can get the ID from the ListOrganizationalUnitsForParent operation. The regex pattern for an organizational unit ID string requires "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that contains the OU) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.
        var organizationalUnitId: String = ""
        /// The new name that you want to assign to the OU. The regex pattern that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        var name: String? = nil

        public init() {}

        public init(organizationalUnitId: String, name: String? = nil) {
            self.organizationalUnitId = organizationalUnitId
            self.name = name
        }

    }

    public struct ListPoliciesResponse: Serializable, Initializable {
        /// A list of policies that match the filter criteria in the request. The output list does not include the policy contents. To see the content for a policy, see DescribePolicy.
        var policies: [PolicySummary]? = nil
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        var nextToken: String? = nil

        public init() {}

        public init(policies: [PolicySummary]? = nil, nextToken: String? = nil) {
            self.policies = policies
            self.nextToken = nextToken
        }

    }

    public struct ListChildrenResponse: Serializable, Initializable {
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        var nextToken: String? = nil
        /// The list of children of the specified parent container.
        var children: [Child]? = nil

        public init() {}

        public init(nextToken: String? = nil, children: [Child]? = nil) {
            self.nextToken = nextToken
            self.children = children
        }

    }

    public struct DisablePolicyTypeRequest: Serializable, Initializable {
        /// The policy type that you want to disable in this root.
        var policyType: String = ""
        /// The unique identifier (ID) of the root in which you want to disable a policy type. You can get the ID from the ListPolicies operation. The regex pattern for a root ID string requires "r-" followed by from 4 to 32 lower-case letters or digits.
        var rootId: String = ""

        public init() {}

        public init(policyType: String, rootId: String) {
            self.policyType = policyType
            self.rootId = rootId
        }

    }

    public struct DetachPolicyRequest: Serializable, Initializable {
        /// The unique identifier (ID) of the policy you want to detach. You can get the ID from the ListPolicies or ListPoliciesForTarget operations. The regex pattern for a policy ID string requires "p-" followed by from 8 to 128 lower-case letters or digits.
        var policyId: String = ""
        /// The unique identifier (ID) of the root, OU, or account from which you want to detach the policy. You can get the ID from the ListRoots, ListOrganizationalUnitsForParent, or ListAccounts operations. The regex pattern for a target ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Account: a string that consists of exactly 12 digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        var targetId: String = ""

        public init() {}

        public init(policyId: String, targetId: String) {
            self.policyId = policyId
            self.targetId = targetId
        }

    }

    public struct CreateAccountRequest: Serializable, Initializable {
        /// The friendly name of the member account.
        var accountName: String = ""
        /// The email address of the owner to assign to the new member account. This email address must not already be associated with another AWS account.
        var email: String = ""
        /// (Optional) The name of an IAM role that Organizations automatically preconfigures in the new member account. This role trusts the master account, allowing users in the master account to assume the role, as permitted by the master account administrator. The role has administrator permissions in the new member account. If you do not specify this parameter, the role name defaults to OrganizationAccountAccessRole. For more information about how to use this role to access the member account, see Accessing and Administering the Member Accounts in Your Organization in the AWS Organizations User Guide, and steps 2 and 3 in Tutorial: Delegate Access Across AWS Accounts Using IAM Roles in the IAM User Guide. The regex pattern that is used to validate this parameter is a string of characters that can consist of uppercase letters, lowercase letters, digits with no spaces, and any of the following characters: =,.@-
        var roleName: String? = nil
        /// If set to ALLOW, the new account enables IAM users to access account billing information if they have the required permissions. If set to DENY, then only the root user of the new account can access account billing information. For more information, see Activating Access to the Billing and Cost Management Console in the AWS Billing and Cost Management User Guide.
        var iamUserAccessToBilling: String? = nil

        public init() {}

        public init(accountName: String, email: String, roleName: String? = nil, iamUserAccessToBilling: String? = nil) {
            self.accountName = accountName
            self.email = email
            self.roleName = roleName
            self.iamUserAccessToBilling = iamUserAccessToBilling
        }

    }

    public struct ListParentsRequest: Serializable, Initializable {
        /// The unique identifier (ID) of the OU or account whose parent containers you want to list. Do not specify a root. The regex pattern for a child ID string requires one of the following:   Account: a string that consists of exactly 12 digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that contains the OU) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        var childId: String = ""
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        var nextToken: String? = nil
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        var maxResults: Int32? = nil

        public init() {}

        public init(childId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.childId = childId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct DescribeCreateAccountStatusRequest: Serializable, Initializable {
        /// Specifies the operationId that uniquely identifies the request. You can get the ID from the response to an earlier CreateAccount request, or from the ListCreateAccountStatus operation. The regex pattern for an create account request ID string requires "car-" followed by from 8 to 32 lower-case letters or digits.
        var createAccountRequestId: String = ""

        public init() {}

        public init(createAccountRequestId: String) {
            self.createAccountRequestId = createAccountRequestId
        }

    }

    public struct DeletePolicyRequest: Serializable, Initializable {
        /// The unique identifier (ID) of the policy that you want to delete. You can get the ID from the ListPolicies or ListPoliciesForTarget operations. The regex pattern for a policy ID string requires "p-" followed by from 8 to 128 lower-case letters or digits.
        var policyId: String = ""

        public init() {}

        public init(policyId: String) {
            self.policyId = policyId
        }

    }

    public struct EnablePolicyTypeResponse: Serializable, Initializable {
        /// A structure that shows the root with the updated list of enabled policy types.
        var root: Root? = nil

        public init() {}

        public init(root: Root? = nil) {
            self.root = root
        }

    }

    public struct CreateOrganizationalUnitResponse: Serializable, Initializable {
        /// A structure that contains details about the newly created OU.
        var organizationalUnit: OrganizationalUnit? = nil

        public init() {}

        public init(organizationalUnit: OrganizationalUnit? = nil) {
            self.organizationalUnit = organizationalUnit
        }

    }

    public struct DescribeHandshakeRequest: Serializable, Initializable {
        /// The unique identifier (ID) of the handshake that you want information about. You can get the ID from the original call to InviteAccountToOrganization, or from a call to ListHandshakesForAccount or ListHandshakesForOrganization. The regex pattern for handshake ID string requires "h-" followed by from 8 to 32 lower-case letters or digits.
        var handshakeId: String = ""

        public init() {}

        public init(handshakeId: String) {
            self.handshakeId = handshakeId
        }

    }

    public struct EnableAllFeaturesRequest: Serializable, Initializable {

        public init() {}

    }

    public struct UpdatePolicyResponse: Serializable, Initializable {
        /// A structure that contains details about the updated policy, showing the requested changes.
        var policy: Policy? = nil

        public init() {}

        public init(policy: Policy? = nil) {
            self.policy = policy
        }

    }

    public struct ListPoliciesForTargetResponse: Serializable, Initializable {
        /// The list of policies that match the criteria in the request.
        var policies: [PolicySummary]? = nil
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        var nextToken: String? = nil

        public init() {}

        public init(policies: [PolicySummary]? = nil, nextToken: String? = nil) {
            self.policies = policies
            self.nextToken = nextToken
        }

    }

    public struct ListAccountsForParentResponse: Serializable, Initializable {
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        var nextToken: String? = nil
        /// A list of the accounts in the specified root or OU.
        var accounts: [Account]? = nil

        public init() {}

        public init(nextToken: String? = nil, accounts: [Account]? = nil) {
            self.nextToken = nextToken
            self.accounts = accounts
        }

    }

    public struct ListHandshakesForOrganizationRequest: Serializable, Initializable {
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        var maxResults: Int32? = nil
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        var nextToken: String? = nil
        /// A filter of the handshakes that you want included in the response. The default is all types. Use the ActionType element to limit the output to only a specified type, such as INVITE, ENABLE-ALL-FEATURES, or APPROVE-ALL-FEATURES. Alternatively, for the ENABLE-ALL-FEATURES handshake that generates a separate child handshake for each member account, you can specify the ParentHandshakeId to see only the handshakes that were generated by that parent request.
        var filter: HandshakeFilter? = nil

        public init() {}

        public init(maxResults: Int32? = nil, nextToken: String? = nil, filter: HandshakeFilter? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.filter = filter
        }

    }

    public struct RemoveAccountFromOrganizationRequest: Serializable, Initializable {
        /// The unique identifier (ID) of the member account that you want to remove from the organization. The regex pattern for an account ID string requires exactly 12 digits.
        var accountId: String = ""

        public init() {}

        public init(accountId: String) {
            self.accountId = accountId
        }

    }

    public struct CreatePolicyRequest: Serializable, Initializable {
        /// The policy content to add to the new policy. For example, if you create a service control policy (SCP), this string must be JSON text that specifies the permissions that admins in attached accounts can delegate to their users, groups, and roles. For more information about the SCP syntax, see Service Control Policy Syntax in the AWS Organizations User Guide.
        var content: String = ""
        /// The type of policy to create.  In the current release, the only type of policy that you can create is a service control policy (SCP). 
        var type: String = ""
        /// The friendly name to assign to the policy. The regex pattern that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        var name: String = ""
        /// An optional description to assign to the policy.
        var description: String = ""

        public init() {}

        public init(content: String, type: String, name: String, description: String) {
            self.content = content
            self.type = type
            self.name = name
            self.description = description
        }

    }

    public struct PolicySummary: Serializable, Initializable {
        /// The description of the policy.
        var description: String? = nil
        /// The Amazon Resource Name (ARN) of the policy. For more information about ARNs in Organizations, see ARN Formats Supported by Organizations in the AWS Organizations User Guide.
        var arn: String? = nil
        /// A boolean value that indicates whether the specified policy is an AWS managed policy. If true, then you can attach the policy to roots, OUs, or accounts, but you cannot edit it.
        var awsManaged: Bool? = nil
        /// The type of policy.
        var type: String? = nil
        /// The friendly name of the policy. The regex pattern that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        var name: String? = nil
        /// The unique identifier (ID) of the policy. The regex pattern for a policy ID string requires "p-" followed by from 8 to 128 lower-case letters or digits.
        var id: String? = nil

        public init() {}

        public init(description: String? = nil, arn: String? = nil, awsManaged: Bool? = nil, type: String? = nil, name: String? = nil, id: String? = nil) {
            self.description = description
            self.arn = arn
            self.awsManaged = awsManaged
            self.type = type
            self.name = name
            self.id = id
        }

    }

    public struct DisablePolicyTypeResponse: Serializable, Initializable {
        /// A structure that shows the root with the updated list of enabled policy types.
        var root: Root? = nil

        public init() {}

        public init(root: Root? = nil) {
            self.root = root
        }

    }

    public struct ListHandshakesForOrganizationResponse: Serializable, Initializable {
        /// A list of Handshake objects with details about each of the handshakes that are associated with an organization.
        var handshakes: [Handshake]? = nil
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        var nextToken: String? = nil

        public init() {}

        public init(handshakes: [Handshake]? = nil, nextToken: String? = nil) {
            self.handshakes = handshakes
            self.nextToken = nextToken
        }

    }

    public struct Handshake: Serializable, Initializable {
        /// The date and time that the handshake request was made.
        var requestedTimestamp: Date? = nil
        /// The Amazon Resource Name (ARN) of a handshake. For more information about ARNs in Organizations, see ARN Formats Supported by Organizations in the AWS Organizations User Guide.
        var arn: String? = nil
        /// The type of handshake, indicating what action occurs when the recipient accepts the handshake.
        var action: String? = nil
        /// The current state of the handshake. Use the state to trace the flow of the handshake through the process from its creation to its acceptance. The meaning of each of the valid values is as follows:    REQUESTED: This handshake was sent to multiple recipients (applicable to only some handshake types) and not all recipients have responded yet. The request stays in this state until all recipients respond.    OPEN: This handshake was sent to multiple recipients (applicable to only some policy types) and all recipients have responded, allowing the originator to complete the handshake action.    CANCELED: This handshake is no longer active because it was canceled by the originating account.    ACCEPTED: This handshake is complete because it has been accepted by the recipient.    DECLINED: This handshake is no longer active because it was declined by the recipient account.    EXPIRED: This handshake is no longer active because the originator did not receive a response of any kind from the recipient before the expiration time (15 days).  
        var state: String? = nil
        /// The date and time that the handshake expires. If the recipient of the handshake request fails to respond before the specified date and time, the handshake becomes inactive and is no longer valid.
        var expirationTimestamp: Date? = nil
        /// Additional information that is needed to process the handshake.
        var resources: [HandshakeResource]? = nil
        /// Information about the two accounts that are participating in the handshake.
        var parties: [HandshakeParty]? = nil
        /// The unique identifier (ID) of a handshake. The originating account creates the ID when it initiates the handshake. The regex pattern for handshake ID string requires "h-" followed by from 8 to 32 lower-case letters or digits.
        var id: String? = nil

        public init() {}

        public init(requestedTimestamp: Date? = nil, arn: String? = nil, action: String? = nil, state: String? = nil, expirationTimestamp: Date? = nil, resources: [HandshakeResource]? = nil, parties: [HandshakeParty]? = nil, id: String? = nil) {
            self.requestedTimestamp = requestedTimestamp
            self.arn = arn
            self.action = action
            self.state = state
            self.expirationTimestamp = expirationTimestamp
            self.resources = resources
            self.parties = parties
            self.id = id
        }

    }

    public struct DescribeHandshakeResponse: Serializable, Initializable {
        /// A structure that contains information about the specified handshake.
        var handshake: Handshake? = nil

        public init() {}

        public init(handshake: Handshake? = nil) {
            self.handshake = handshake
        }

    }

    public struct CancelHandshakeRequest: Serializable, Initializable {
        /// The unique identifier (ID) of the handshake that you want to cancel. You can get the ID from the ListHandshakesForOrganization operation. The regex pattern for handshake ID string requires "h-" followed by from 8 to 32 lower-case letters or digits.
        var handshakeId: String = ""

        public init() {}

        public init(handshakeId: String) {
            self.handshakeId = handshakeId
        }

    }

    public struct CreateOrganizationRequest: Serializable, Initializable {
        /// Specifies the feature set supported by the new organization. Each feature set supports different levels of functionality.    CONSOLIDATED_BILLING: All member accounts have their bills consolidated to and paid by the master account. For more information, see Consolidated Billing in the AWS Organizations User Guide.    ALL: In addition to all the features supported by the consolidated billing feature set, the master account can also apply any type of policy to any member account in the organization. For more information, see All features in the AWS Organizations User Guide.  
        var featureSet: String? = nil

        public init() {}

        public init(featureSet: String? = nil) {
            self.featureSet = featureSet
        }

    }

    public struct ListOrganizationalUnitsForParentRequest: Serializable, Initializable {
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        var nextToken: String? = nil
        /// The unique identifier (ID) of the root or OU whose child OUs you want to list. The regex pattern for a parent ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        var parentId: String = ""
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, parentId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.parentId = parentId
            self.maxResults = maxResults
        }

    }

    public struct PolicyTargetSummary: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the policy target. For more information about ARNs in Organizations, see ARN Formats Supported by Organizations in the AWS Organizations User Guide.
        var arn: String? = nil
        /// The type of the policy target.
        var type: String? = nil
        /// The friendly name of the policy target. The regex pattern that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        var name: String? = nil
        /// The unique identifier (ID) of the policy target. The regex pattern for a target ID string requires one of the following:   Root: a string that begins with "r-" followed by from 4 to 32 lower-case letters or digits.   Account: a string that consists of exactly 12 digits.   Organizational unit (OU): a string that begins with "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that the OU is in) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.  
        var targetId: String? = nil

        public init() {}

        public init(arn: String? = nil, type: String? = nil, name: String? = nil, targetId: String? = nil) {
            self.arn = arn
            self.type = type
            self.name = name
            self.targetId = targetId
        }

    }

    public struct AcceptHandshakeResponse: Serializable, Initializable {
        /// A structure that contains details about the accepted handshake.
        var handshake: Handshake? = nil

        public init() {}

        public init(handshake: Handshake? = nil) {
            self.handshake = handshake
        }

    }

    public struct ListHandshakesForAccountResponse: Serializable, Initializable {
        /// A list of Handshake objects with details about each of the handshakes that is associated with the specified account.
        var handshakes: [Handshake]? = nil
        /// If present, this value indicates that there is more output available than is included in the current response. Use this value in the NextToken request parameter in a subsequent call to the operation to get the next part of the output. You should repeat this until the NextToken response element comes back as null.
        var nextToken: String? = nil

        public init() {}

        public init(handshakes: [Handshake]? = nil, nextToken: String? = nil) {
            self.handshakes = handshakes
            self.nextToken = nextToken
        }

    }

    public struct OrganizationalUnit: Serializable, Initializable {
        /// The friendly name of this OU. The regex pattern that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        var name: String? = nil
        /// The Amazon Resource Name (ARN) of this OU. For more information about ARNs in Organizations, see ARN Formats Supported by Organizations in the AWS Organizations User Guide.
        var arn: String? = nil
        /// The unique identifier (ID) associated with this OU. The regex pattern for an organizational unit ID string requires "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that contains the OU) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.
        var id: String? = nil

        public init() {}

        public init(name: String? = nil, arn: String? = nil, id: String? = nil) {
            self.name = name
            self.arn = arn
            self.id = id
        }

    }

    public struct DescribeAccountRequest: Serializable, Initializable {
        /// The unique identifier (ID) of the AWS account that you want information about. You can get the ID from the ListAccounts or ListAccountsForParent operations. The regex pattern for an account ID string requires exactly 12 digits.
        var accountId: String = ""

        public init() {}

        public init(accountId: String) {
            self.accountId = accountId
        }

    }

    public struct Root: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the root. For more information about ARNs in Organizations, see ARN Formats Supported by Organizations in the AWS Organizations User Guide.
        var arn: String? = nil
        /// The types of policies that are currently enabled for the root and therefore can be attached to the root or to its OUs or accounts.
        var policyTypes: [PolicyTypeSummary]? = nil
        /// The friendly name of the root. The regex pattern that is used to validate this parameter is a string of any of the characters in the ASCII character range.
        var name: String? = nil
        /// The unique identifier (ID) for the root. The regex pattern for a root ID string requires "r-" followed by from 4 to 32 lower-case letters or digits.
        var id: String? = nil

        public init() {}

        public init(arn: String? = nil, policyTypes: [PolicyTypeSummary]? = nil, name: String? = nil, id: String? = nil) {
            self.arn = arn
            self.policyTypes = policyTypes
            self.name = name
            self.id = id
        }

    }

    public struct DescribeAccountResponse: Serializable, Initializable {
        /// A structure that contains information about the requested account.
        var account: Account? = nil

        public init() {}

        public init(account: Account? = nil) {
            self.account = account
        }

    }

    public struct DescribePolicyRequest: Serializable, Initializable {
        /// The unique identifier (ID) of the policy that you want details about. You can get the ID from the ListPolicies or ListPoliciesForTarget operations. The regex pattern for a policy ID string requires "p-" followed by from 8 to 128 lower-case letters or digits.
        var policyId: String = ""

        public init() {}

        public init(policyId: String) {
            self.policyId = policyId
        }

    }

    public struct DeleteOrganizationalUnitRequest: Serializable, Initializable {
        /// The unique identifier (ID) of the organizational unit that you want to delete. You can get the ID from the ListOrganizationalUnitsForParent operation. The regex pattern for an organizational unit ID string requires "ou-" followed by from 4 to 32 lower-case letters or digits (the ID of the root that contains the OU) followed by a second "-" dash and from 8 to 32 additional lower-case letters or digits.
        var organizationalUnitId: String = ""

        public init() {}

        public init(organizationalUnitId: String) {
            self.organizationalUnitId = organizationalUnitId
        }

    }

    public struct ListAccountsForParentRequest: Serializable, Initializable {
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        var nextToken: String? = nil
        /// The unique identifier (ID) for the parent root or organization unit (OU) whose accounts you want to list.
        var parentId: String = ""
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, parentId: String, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.parentId = parentId
            self.maxResults = maxResults
        }

    }

    public struct ListRootsRequest: Serializable, Initializable {
        /// Use this parameter if you receive a NextToken response in a previous request that indicates that there is more output available. Set it to the value of the previous call's NextToken response to indicate where the output should continue from.
        var nextToken: String? = nil
        /// (Optional) Use this to limit the number of results you want included in the response. If you do not include this parameter, it defaults to a value that is specific to the operation. If additional items exist beyond the maximum you specify, the NextToken response element is present and has a value (is not null). Include that value as the NextToken request parameter in the next call to the operation to get the next part of the results. Note that Organizations might return fewer results than the maximum even when there are more results available. You should check NextToken after every operation to ensure that you receive all of the results.
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct DescribeOrganizationResponse: Serializable, Initializable {
        /// A structure that contains information about the organization.
        var organization: Organization? = nil

        public init() {}

        public init(organization: Organization? = nil) {
            self.organization = organization
        }

    }

}