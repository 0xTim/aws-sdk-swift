// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension DLM {

    public enum SettablePolicyStateValues: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        public var description: String { return self.rawValue }
    }

    public struct RetainRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Count", required: true, type: .integer)
        ]
        /// The number of snapshots to keep for each volume, up to a maximum of 1000.
        public let count: Int32

        public init(count: Int32) {
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case count = "Count"
        }
    }

    public enum ResourceTypeValues: String, CustomStringConvertible, Codable {
        case volume = "VOLUME"
        public var description: String { return self.rawValue }
    }

    public struct DeleteLifecyclePolicyResponse: AWSShape {

    }

    public struct CreateRule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Times", required: false, type: .list), 
            AWSShapeMember(label: "Interval", required: true, type: .integer), 
            AWSShapeMember(label: "IntervalUnit", required: true, type: .enum)
        ]
        /// The time, in UTC, to start the operation. The operation occurs within a one-hour window following the specified time.
        public let times: [String]?
        /// The interval. The supported values are 12 and 24.
        public let interval: Int32
        /// The interval unit.
        public let intervalUnit: IntervalUnitValues

        public init(times: [String]? = nil, interval: Int32, intervalUnit: IntervalUnitValues) {
            self.times = times
            self.interval = interval
            self.intervalUnit = intervalUnit
        }

        private enum CodingKeys: String, CodingKey {
            case times = "Times"
            case interval = "Interval"
            case intervalUnit = "IntervalUnit"
        }
    }

    public struct CreateLifecyclePolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyDetails", required: true, type: .structure), 
            AWSShapeMember(label: "Description", required: true, type: .string), 
            AWSShapeMember(label: "State", required: true, type: .enum), 
            AWSShapeMember(label: "ExecutionRoleArn", required: true, type: .string)
        ]
        /// The configuration details of the lifecycle policy. Target tags cannot be re-used across lifecycle policies.
        public let policyDetails: PolicyDetails
        /// A description of the lifecycle policy. The characters ^[0-9A-Za-z _-]+$ are supported.
        public let description: String
        /// The desired activation state of the lifecycle policy after creation.
        public let state: SettablePolicyStateValues
        /// The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.
        public let executionRoleArn: String

        public init(policyDetails: PolicyDetails, description: String, state: SettablePolicyStateValues, executionRoleArn: String) {
            self.policyDetails = policyDetails
            self.description = description
            self.state = state
            self.executionRoleArn = executionRoleArn
        }

        private enum CodingKeys: String, CodingKey {
            case policyDetails = "PolicyDetails"
            case description = "Description"
            case state = "State"
            case executionRoleArn = "ExecutionRoleArn"
        }
    }

    public struct GetLifecyclePoliciesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policies", required: false, type: .list)
        ]
        /// Summary information about the lifecycle policies.
        public let policies: [LifecyclePolicySummary]?

        public init(policies: [LifecyclePolicySummary]? = nil) {
            self.policies = policies
        }

        private enum CodingKeys: String, CodingKey {
            case policies = "Policies"
        }
    }

    public struct UpdateLifecyclePolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyDetails", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "ExecutionRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "PolicyId", location: .uri(locationName: "policyId"), required: true, type: .string)
        ]
        /// The configuration of the lifecycle policy. Target tags cannot be re-used across policies.
        public let policyDetails: PolicyDetails?
        /// A description of the lifecycle policy.
        public let description: String?
        /// The desired activation state of the lifecycle policy after creation.
        public let state: SettablePolicyStateValues?
        /// The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.
        public let executionRoleArn: String?
        /// The identifier of the lifecycle policy.
        public let policyId: String

        public init(policyDetails: PolicyDetails? = nil, description: String? = nil, state: SettablePolicyStateValues? = nil, executionRoleArn: String? = nil, policyId: String) {
            self.policyDetails = policyDetails
            self.description = description
            self.state = state
            self.executionRoleArn = executionRoleArn
            self.policyId = policyId
        }

        private enum CodingKeys: String, CodingKey {
            case policyDetails = "PolicyDetails"
            case description = "Description"
            case state = "State"
            case executionRoleArn = "ExecutionRoleArn"
            case policyId = "policyId"
        }
    }

    public enum GettablePolicyStateValues: String, CustomStringConvertible, Codable {
        case enabled = "ENABLED"
        case disabled = "DISABLED"
        case error = "ERROR"
        public var description: String { return self.rawValue }
    }

    public enum IntervalUnitValues: String, CustomStringConvertible, Codable {
        case hours = "HOURS"
        public var description: String { return self.rawValue }
    }

    public struct LifecyclePolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ExecutionRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "DateModified", required: false, type: .timestamp), 
            AWSShapeMember(label: "DateCreated", required: false, type: .timestamp), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "PolicyDetails", required: false, type: .structure), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "PolicyId", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the IAM role used to run the operations specified by the lifecycle policy.
        public let executionRoleArn: String?
        /// The local date and time when the lifecycle policy was last modified.
        public let dateModified: TimeStamp?
        /// The local date and time when the lifecycle policy was created.
        public let dateCreated: TimeStamp?
        /// The activation state of the lifecycle policy.
        public let state: GettablePolicyStateValues?
        /// The configuration of the lifecycle policy
        public let policyDetails: PolicyDetails?
        /// The description of the lifecycle policy.
        public let description: String?
        /// The identifier of the lifecycle policy.
        public let policyId: String?

        public init(executionRoleArn: String? = nil, dateModified: TimeStamp? = nil, dateCreated: TimeStamp? = nil, state: GettablePolicyStateValues? = nil, policyDetails: PolicyDetails? = nil, description: String? = nil, policyId: String? = nil) {
            self.executionRoleArn = executionRoleArn
            self.dateModified = dateModified
            self.dateCreated = dateCreated
            self.state = state
            self.policyDetails = policyDetails
            self.description = description
            self.policyId = policyId
        }

        private enum CodingKeys: String, CodingKey {
            case executionRoleArn = "ExecutionRoleArn"
            case dateModified = "DateModified"
            case dateCreated = "DateCreated"
            case state = "State"
            case policyDetails = "PolicyDetails"
            case description = "Description"
            case policyId = "PolicyId"
        }
    }

    public struct GetLifecyclePolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyId", location: .uri(locationName: "policyId"), required: true, type: .string)
        ]
        /// The identifier of the lifecycle policy.
        public let policyId: String

        public init(policyId: String) {
            self.policyId = policyId
        }

        private enum CodingKeys: String, CodingKey {
            case policyId = "policyId"
        }
    }

    public struct PolicyDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Schedules", required: false, type: .list), 
            AWSShapeMember(label: "ResourceTypes", required: false, type: .list), 
            AWSShapeMember(label: "TargetTags", required: false, type: .list)
        ]
        /// The schedule of policy-defined actions.
        public let schedules: [Schedule]?
        /// The resource type.
        public let resourceTypes: [ResourceTypeValues]?
        /// The single tag that identifies targeted resources for this policy.
        public let targetTags: [Tag]?

        public init(schedules: [Schedule]? = nil, resourceTypes: [ResourceTypeValues]? = nil, targetTags: [Tag]? = nil) {
            self.schedules = schedules
            self.resourceTypes = resourceTypes
            self.targetTags = targetTags
        }

        private enum CodingKeys: String, CodingKey {
            case schedules = "Schedules"
            case resourceTypes = "ResourceTypes"
            case targetTags = "TargetTags"
        }
    }

    public struct LifecyclePolicySummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "PolicyId", required: false, type: .string)
        ]
        /// The description of the lifecycle policy.
        public let description: String?
        /// The activation state of the lifecycle policy.
        public let state: GettablePolicyStateValues?
        /// The identifier of the lifecycle policy.
        public let policyId: String?

        public init(description: String? = nil, state: GettablePolicyStateValues? = nil, policyId: String? = nil) {
            self.description = description
            self.state = state
            self.policyId = policyId
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case state = "State"
            case policyId = "PolicyId"
        }
    }

    public struct GetLifecyclePolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Policy", required: false, type: .structure)
        ]
        /// Detailed information about the lifecycle policy.
        public let policy: LifecyclePolicy?

        public init(policy: LifecyclePolicy? = nil) {
            self.policy = policy
        }

        private enum CodingKeys: String, CodingKey {
            case policy = "Policy"
        }
    }

    public struct Schedule: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CopyTags", required: false, type: .boolean), 
            AWSShapeMember(label: "RetainRule", required: false, type: .structure), 
            AWSShapeMember(label: "CreateRule", required: false, type: .structure), 
            AWSShapeMember(label: "TagsToAdd", required: false, type: .list)
        ]
        /// The name of the schedule.
        public let name: String?
        public let copyTags: Bool?
        /// The retain rule.
        public let retainRule: RetainRule?
        /// The create rule.
        public let createRule: CreateRule?
        /// The tags to apply to policy-created resources. These user-defined tags are in addition to the AWS-added lifecycle tags.
        public let tagsToAdd: [Tag]?

        public init(name: String? = nil, copyTags: Bool? = nil, retainRule: RetainRule? = nil, createRule: CreateRule? = nil, tagsToAdd: [Tag]? = nil) {
            self.name = name
            self.copyTags = copyTags
            self.retainRule = retainRule
            self.createRule = createRule
            self.tagsToAdd = tagsToAdd
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case copyTags = "CopyTags"
            case retainRule = "RetainRule"
            case createRule = "CreateRule"
            case tagsToAdd = "TagsToAdd"
        }
    }

    public struct DeleteLifecyclePolicyRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyId", location: .uri(locationName: "policyId"), required: true, type: .string)
        ]
        /// The identifier of the lifecycle policy.
        public let policyId: String

        public init(policyId: String) {
            self.policyId = policyId
        }

        private enum CodingKeys: String, CodingKey {
            case policyId = "policyId"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]
        /// The tag key.
        public let key: String
        /// The tag value.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct GetLifecyclePoliciesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyIds", location: .querystring(locationName: "policyIds"), required: false, type: .list), 
            AWSShapeMember(label: "TargetTags", location: .querystring(locationName: "targetTags"), required: false, type: .list), 
            AWSShapeMember(label: "State", location: .querystring(locationName: "state"), required: false, type: .enum), 
            AWSShapeMember(label: "ResourceTypes", location: .querystring(locationName: "resourceTypes"), required: false, type: .list), 
            AWSShapeMember(label: "TagsToAdd", location: .querystring(locationName: "tagsToAdd"), required: false, type: .list)
        ]
        /// The identifiers of the data lifecycle policies.
        public let policyIds: [String]?
        /// The target tag for a policy. Tags are strings in the format key=value.
        public let targetTags: [String]?
        /// The activation state.
        public let state: GettablePolicyStateValues?
        /// The resource type.
        public let resourceTypes: [ResourceTypeValues]?
        /// The tags to add to objects created by the policy. Tags are strings in the format key=value. These user-defined tags are added in addition to the AWS-added lifecycle tags.
        public let tagsToAdd: [String]?

        public init(policyIds: [String]? = nil, targetTags: [String]? = nil, state: GettablePolicyStateValues? = nil, resourceTypes: [ResourceTypeValues]? = nil, tagsToAdd: [String]? = nil) {
            self.policyIds = policyIds
            self.targetTags = targetTags
            self.state = state
            self.resourceTypes = resourceTypes
            self.tagsToAdd = tagsToAdd
        }

        private enum CodingKeys: String, CodingKey {
            case policyIds = "policyIds"
            case targetTags = "targetTags"
            case state = "state"
            case resourceTypes = "resourceTypes"
            case tagsToAdd = "tagsToAdd"
        }
    }

    public struct CreateLifecyclePolicyResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyId", required: false, type: .string)
        ]
        /// The identifier of the lifecycle policy.
        public let policyId: String?

        public init(policyId: String? = nil) {
            self.policyId = policyId
        }

        private enum CodingKeys: String, CodingKey {
            case policyId = "PolicyId"
        }
    }

    public struct UpdateLifecyclePolicyResponse: AWSShape {

    }

}