// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Iam {

    public struct CreatePolicyResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure containing details about the new policy.
        public var policy: Policy? = nil

        public init() {}

        public init(policy: Policy? = nil) {
            self.policy = policy
        }

    }

    public struct GetSAMLProviderResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date and time when the SAML provider was created.
        public var createDate: Date? = nil
        /// The XML metadata document that includes information about an identity provider.
        public var sAMLMetadataDocument: String? = nil
        /// The expiration date and time for the SAML provider.
        public var validUntil: Date? = nil

        public init() {}

        public init(createDate: Date? = nil, sAMLMetadataDocument: String? = nil, validUntil: Date? = nil) {
            self.createDate = createDate
            self.sAMLMetadataDocument = sAMLMetadataDocument
            self.validUntil = validUntil
        }

    }

    public struct Policy: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A friendly description of the policy. This element is included in the response to the GetPolicy operation. It is not included in the response to the ListPolicies operation. 
        public var description: String? = nil
        /// The stable and unique string identifying the policy. For more information about IDs, see IAM Identifiers in the Using IAM guide.
        public var policyId: String? = nil
        public var arn: String? = nil
        /// Specifies whether the policy can be attached to an IAM user, group, or role.
        public var isAttachable: Bool? = nil
        /// The friendly name (not ARN) identifying the policy.
        public var policyName: String? = nil
        /// The date and time, in ISO 8601 date-time format, when the policy was last updated. When a policy has only one version, this field contains the date and time when the policy was created. When a policy has more than one version, this field contains the date and time when the most recent policy version was created.
        public var updateDate: Date? = nil
        /// The path to the policy. For more information about paths, see IAM Identifiers in the Using IAM guide.
        public var path: String? = nil
        /// The date and time, in ISO 8601 date-time format, when the policy was created.
        public var createDate: Date? = nil
        /// The number of entities (users, groups, and roles) that the policy is attached to.
        public var attachmentCount: Int32? = nil
        /// The identifier for the version of the policy that is set as the default version.
        public var defaultVersionId: String? = nil

        public init() {}

        public init(description: String? = nil, policyId: String? = nil, arn: String? = nil, isAttachable: Bool? = nil, policyName: String? = nil, updateDate: Date? = nil, path: String? = nil, createDate: Date? = nil, attachmentCount: Int32? = nil, defaultVersionId: String? = nil) {
            self.description = description
            self.policyId = policyId
            self.arn = arn
            self.isAttachable = isAttachable
            self.policyName = policyName
            self.updateDate = updateDate
            self.path = path
            self.createDate = createDate
            self.attachmentCount = attachmentCount
            self.defaultVersionId = defaultVersionId
        }

    }

    public struct ListRolePoliciesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil
        /// The name of the role to list policies for. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var roleName: String = ""

        public init() {}

        public init(marker: String? = nil, maxItems: Int32? = nil, roleName: String) {
            self.marker = marker
            self.maxItems = maxItems
            self.roleName = roleName
        }

    }

    public struct GetOpenIDConnectProviderRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the OIDC provider resource object in IAM to get information for. You can get a list of OIDC provider resource ARNs by using the ListOpenIDConnectProviders action. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var openIDConnectProviderArn: String = ""

        public init() {}

        public init(openIDConnectProviderArn: String) {
            self.openIDConnectProviderArn = openIDConnectProviderArn
        }

    }

    public struct DeleteRolePolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name (friendly name, not ARN) identifying the role that the policy is embedded in. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var roleName: String = ""
        /// The name of the inline policy to delete from the specified IAM role. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var policyName: String = ""

        public init() {}

        public init(roleName: String, policyName: String) {
            self.roleName = roleName
            self.policyName = policyName
        }

    }

    public struct UpdateGroupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// New path for the IAM group. Only include this if changing the group's path. This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var newPath: String? = nil
        /// New name for the IAM group. Only include this if changing the group's name. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var newGroupName: String? = nil
        /// Name of the IAM group to update. If you're changing the name of the group, this is the original name. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var groupName: String = ""

        public init() {}

        public init(newPath: String? = nil, newGroupName: String? = nil, groupName: String) {
            self.newPath = newPath
            self.newGroupName = newGroupName
            self.groupName = groupName
        }

    }

    public struct DeleteRoleRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the role to delete. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var roleName: String = ""

        public init() {}

        public init(roleName: String) {
            self.roleName = roleName
        }

    }

    public struct DeleteVirtualMFADeviceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the same as the ARN. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =/:,.@-
        public var serialNumber: String = ""

        public init() {}

        public init(serialNumber: String) {
            self.serialNumber = serialNumber
        }

    }

    public struct AttachUserPolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the IAM policy you want to attach. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var policyArn: String = ""
        /// The name (friendly name, not ARN) of the IAM user to attach the policy to. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""

        public init() {}

        public init(policyArn: String, userName: String) {
            self.policyArn = policyArn
            self.userName = userName
        }

    }

    public struct CreateVirtualMFADeviceResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure containing details about the new virtual MFA device.
        public var virtualMFADevice: VirtualMFADevice = VirtualMFADevice()

        public init() {}

        public init(virtualMFADevice: VirtualMFADevice) {
            self.virtualMFADevice = virtualMFADevice
        }

    }

    public struct ListOpenIDConnectProvidersResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The list of IAM OIDC provider resource objects defined in the AWS account.
        public var openIDConnectProviderList: [OpenIDConnectProviderListEntry]? = nil

        public init() {}

        public init(openIDConnectProviderList: [OpenIDConnectProviderListEntry]? = nil) {
            self.openIDConnectProviderList = openIDConnectProviderList
        }

    }

    public struct GetUserRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the user to get information about. This parameter is optional. If it is not included, it defaults to the user making the request. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String? = nil

        public init() {}

        public init(userName: String? = nil) {
            self.userName = userName
        }

    }

    public struct InstanceProfile: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name identifying the instance profile.
        public var instanceProfileName: String = ""
        /// The date when the instance profile was created.
        public var createDate: Date = Date()
        ///  The Amazon Resource Name (ARN) specifying the instance profile. For more information about ARNs and how to use them in policies, see IAM Identifiers in the Using IAM guide. 
        public var arn: String = ""
        /// The role associated with the instance profile.
        public var roles: [Role] = []
        ///  The stable and unique string identifying the instance profile. For more information about IDs, see IAM Identifiers in the Using IAM guide. 
        public var instanceProfileId: String = ""
        ///  The path to the instance profile. For more information about paths, see IAM Identifiers in the Using IAM guide. 
        public var path: String = ""

        public init() {}

        public init(instanceProfileName: String, createDate: Date, arn: String, roles: [Role], instanceProfileId: String, path: String) {
            self.instanceProfileName = instanceProfileName
            self.createDate = createDate
            self.arn = arn
            self.roles = roles
            self.instanceProfileId = instanceProfileId
            self.path = path
        }

    }

    public struct CreateServiceSpecificCredentialResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure that contains information about the newly created service-specific credential.  This is the only time that the password for this credential set is available. It cannot be recovered later. Instead, you will have to reset the password with ResetServiceSpecificCredential. 
        public var serviceSpecificCredential: ServiceSpecificCredential? = nil

        public init() {}

        public init(serviceSpecificCredential: ServiceSpecificCredential? = nil) {
            self.serviceSpecificCredential = serviceSpecificCredential
        }

    }

    public struct UpdateSAMLProviderRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP.
        public var sAMLMetadataDocument: String = ""
        /// The Amazon Resource Name (ARN) of the SAML provider to update. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var sAMLProviderArn: String = ""

        public init() {}

        public init(sAMLMetadataDocument: String, sAMLProviderArn: String) {
            self.sAMLMetadataDocument = sAMLMetadataDocument
            self.sAMLProviderArn = sAMLProviderArn
        }

    }

    public struct GetGroupPolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the group the policy is associated with. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var groupName: String = ""
        /// The name of the policy document to get. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var policyName: String = ""

        public init() {}

        public init(groupName: String, policyName: String) {
            self.groupName = groupName
            self.policyName = policyName
        }

    }

    public struct UploadServerCertificateResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The meta information of the uploaded server certificate without its certificate body, certificate chain, and private key.
        public var serverCertificateMetadata: ServerCertificateMetadata? = nil

        public init() {}

        public init(serverCertificateMetadata: ServerCertificateMetadata? = nil) {
            self.serverCertificateMetadata = serverCertificateMetadata
        }

    }

    public struct ContextEntry: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The value (or values, if the condition context key supports multiple values) to provide to the simulation for use when the key is referenced by a Condition element in an input policy.
        public var contextKeyValues: [String]? = nil
        /// The full name of a condition context key, including the service prefix. For example, aws:SourceIp or s3:VersionId.
        public var contextKeyName: String? = nil
        /// The data type of the value (or values) specified in the ContextKeyValues parameter.
        public var contextKeyType: String? = nil

        public init() {}

        public init(contextKeyValues: [String]? = nil, contextKeyName: String? = nil, contextKeyType: String? = nil) {
            self.contextKeyValues = contextKeyValues
            self.contextKeyName = contextKeyName
            self.contextKeyType = contextKeyType
        }

    }

    public struct GetSSHPublicKeyResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure containing details about the SSH public key.
        public var sSHPublicKey: SSHPublicKey? = nil

        public init() {}

        public init(sSHPublicKey: SSHPublicKey? = nil) {
            self.sSHPublicKey = sSHPublicKey
        }

    }

    public struct AttachGroupPolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the IAM policy you want to attach. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var policyArn: String = ""
        /// The name (friendly name, not ARN) of the group to attach the policy to. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var groupName: String = ""

        public init() {}

        public init(policyArn: String, groupName: String) {
            self.policyArn = policyArn
            self.groupName = groupName
        }

    }

    public struct ListEntitiesForPolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The entity type to use for filtering the results. For example, when EntityFilter is Role, only the roles that are attached to the specified policy are returned. This parameter is optional. If it is not included, all attached entities (users, groups, and roles) are returned. The argument for this parameter must be one of the valid values listed below.
        public var entityFilter: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil
        /// The Amazon Resource Name (ARN) of the IAM policy for which you want the versions. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var policyArn: String = ""
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all entities. This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var pathPrefix: String? = nil

        public init() {}

        public init(entityFilter: String? = nil, maxItems: Int32? = nil, policyArn: String, marker: String? = nil, pathPrefix: String? = nil) {
            self.entityFilter = entityFilter
            self.maxItems = maxItems
            self.policyArn = policyArn
            self.marker = marker
            self.pathPrefix = pathPrefix
        }

    }

    public struct SSHPublicKeyMetadata: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the IAM user associated with the SSH public key.
        public var userName: String = ""
        /// The status of the SSH public key. Active means the key can be used for authentication with an AWS CodeCommit repository. Inactive means the key cannot be used.
        public var status: String = ""
        /// The date and time, in ISO 8601 date-time format, when the SSH public key was uploaded.
        public var uploadDate: Date = Date()
        /// The unique identifier for the SSH public key.
        public var sSHPublicKeyId: String = ""

        public init() {}

        public init(userName: String, status: String, uploadDate: Date, sSHPublicKeyId: String) {
            self.userName = userName
            self.status = status
            self.uploadDate = uploadDate
            self.sSHPublicKeyId = sSHPublicKeyId
        }

    }

    public struct ListAttachedRolePoliciesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil
        /// A list of the attached policies.
        public var attachedPolicies: [AttachedPolicy]? = nil

        public init() {}

        public init(marker: String? = nil, isTruncated: Bool? = nil, attachedPolicies: [AttachedPolicy]? = nil) {
            self.marker = marker
            self.isTruncated = isTruncated
            self.attachedPolicies = attachedPolicies
        }

    }

    public struct ListMFADevicesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil
        /// A list of MFA devices.
        public var mFADevices: [MFADevice] = []

        public init() {}

        public init(marker: String? = nil, isTruncated: Bool? = nil, mFADevices: [MFADevice]) {
            self.marker = marker
            self.isTruncated = isTruncated
            self.mFADevices = mFADevices
        }

    }

    public struct ListInstanceProfilesForRoleRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil
        /// The name of the role to list instance profiles for. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var roleName: String = ""

        public init() {}

        public init(marker: String? = nil, maxItems: Int32? = nil, roleName: String) {
            self.marker = marker
            self.maxItems = maxItems
            self.roleName = roleName
        }

    }

    public struct ListGroupsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil
        /// A list of groups.
        public var groups: [Group] = []

        public init() {}

        public init(marker: String? = nil, isTruncated: Bool? = nil, groups: [Group]) {
            self.marker = marker
            self.isTruncated = isTruncated
            self.groups = groups
        }

    }

    public struct CreateUserRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the user to create. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-. User names are not distinguished by case. For example, you cannot create users named both "TESTUSER" and "testuser".
        public var userName: String = ""
        ///  The path for the user name. For more information about paths, see IAM Identifiers in the IAM User Guide. This parameter is optional. If it is not included, it defaults to a slash (/). This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var path: String? = nil

        public init() {}

        public init(userName: String, path: String? = nil) {
            self.userName = userName
            self.path = path
        }

    }

    public struct AccessKey: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date when the access key was created.
        public var createDate: Date? = nil
        /// The name of the IAM user that the access key is associated with.
        public var userName: String = ""
        /// The status of the access key. Active means the key is valid for API calls, while Inactive means it is not. 
        public var status: String = ""
        /// The secret key used to sign requests.
        public var secretAccessKey: String = ""
        /// The ID for this access key.
        public var accessKeyId: String = ""

        public init() {}

        public init(createDate: Date? = nil, userName: String, status: String, secretAccessKey: String, accessKeyId: String) {
            self.createDate = createDate
            self.userName = userName
            self.status = status
            self.secretAccessKey = secretAccessKey
            self.accessKeyId = accessKeyId
        }

    }

    public struct AddRoleToInstanceProfileRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the instance profile to update. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var instanceProfileName: String = ""
        /// The name of the role to add. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var roleName: String = ""

        public init() {}

        public init(instanceProfileName: String, roleName: String) {
            self.instanceProfileName = instanceProfileName
            self.roleName = roleName
        }

    }

    public struct CreateInstanceProfileRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the instance profile to create. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var instanceProfileName: String = ""
        ///  The path to the instance profile. For more information about paths, see IAM Identifiers in the IAM User Guide. This parameter is optional. If it is not included, it defaults to a slash (/). This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var path: String? = nil

        public init() {}

        public init(instanceProfileName: String, path: String? = nil) {
            self.instanceProfileName = instanceProfileName
            self.path = path
        }

    }

    public struct ListGroupsForUserResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil
        /// A list of groups.
        public var groups: [Group] = []

        public init() {}

        public init(marker: String? = nil, isTruncated: Bool? = nil, groups: [Group]) {
            self.marker = marker
            self.isTruncated = isTruncated
            self.groups = groups
        }

    }

    public struct ListInstanceProfilesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil
        ///  The path prefix for filtering the results. For example, the prefix /application_abc/component_xyz/ gets all instance profiles whose path starts with /application_abc/component_xyz/. This parameter is optional. If it is not included, it defaults to a slash (/), listing all instance profiles. This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var pathPrefix: String? = nil

        public init() {}

        public init(marker: String? = nil, maxItems: Int32? = nil, pathPrefix: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
            self.pathPrefix = pathPrefix
        }

    }

    public struct UploadSSHPublicKeyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The SSH public key. The public key must be encoded in ssh-rsa format or PEM format. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D).
        public var sSHPublicKeyBody: String = ""
        /// The name of the IAM user to associate the SSH public key with. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""

        public init() {}

        public init(sSHPublicKeyBody: String, userName: String) {
            self.sSHPublicKeyBody = sSHPublicKeyBody
            self.userName = userName
        }

    }

    public struct DeleteUserRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the user to delete. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""

        public init() {}

        public init(userName: String) {
            self.userName = userName
        }

    }

    public struct ListSSHPublicKeysRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// The name of the IAM user to list SSH public keys for. If none is specified, the UserName field is determined implicitly based on the AWS access key used to sign the request. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil

        public init() {}

        public init(marker: String? = nil, userName: String? = nil, maxItems: Int32? = nil) {
            self.marker = marker
            self.userName = userName
            self.maxItems = maxItems
        }

    }

    public struct UpdateAccessKeyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the user whose key you want to update. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String? = nil
        ///  The status you want to assign to the secret access key. Active means the key can be used for API calls to AWS, while Inactive means the key cannot be used.
        public var status: String = ""
        /// The access key ID of the secret access key you want to update. This parameter allows (per its regex pattern) a string of characters that can consist of any upper or lowercased letter or digit.
        public var accessKeyId: String = ""

        public init() {}

        public init(userName: String? = nil, status: String, accessKeyId: String) {
            self.userName = userName
            self.status = status
            self.accessKeyId = accessKeyId
        }

    }

    public struct UploadServerCertificateRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name for the server certificate. Do not include the path in this value. The name of the certificate cannot contain any spaces. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var serverCertificateName: String = ""
        /// The contents of the public key certificate in PEM-encoded format. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D).
        public var certificateBody: String = ""
        /// The contents of the private key in PEM-encoded format. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D).
        public var privateKey: String = ""
        /// The contents of the certificate chain. This is typically a concatenation of the PEM-encoded public key certificates of the chain. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D).
        public var certificateChain: String? = nil
        /// The path for the server certificate. For more information about paths, see IAM Identifiers in the IAM User Guide. This parameter is optional. If it is not included, it defaults to a slash (/). This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.   If you are uploading a server certificate specifically for use with Amazon CloudFront distributions, you must specify a path using the --path option. The path must begin with /cloudfront and must include a trailing slash (for example, /cloudfront/test/). 
        public var path: String? = nil

        public init() {}

        public init(serverCertificateName: String, certificateBody: String, privateKey: String, certificateChain: String? = nil, path: String? = nil) {
            self.serverCertificateName = serverCertificateName
            self.certificateBody = certificateBody
            self.privateKey = privateKey
            self.certificateChain = certificateChain
            self.path = path
        }

    }

    public struct SimulateCustomPolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil
        /// A list of names of API actions to evaluate in the simulation. Each action is evaluated against each resource. Each action must include the service identifier, such as iam:CreateUser.
        public var actionNames: [String] = []
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// A list of policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. Do not include any resource-based policies in this parameter. Any resource-based policy must be submitted with the ResourcePolicy parameter. The policies cannot be "scope-down" policies, such as you could include in a call to GetFederationToken or one of the AssumeRole APIs to restrict what a user can do while using the temporary credentials. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D).
        public var policyInputList: [String] = []
        /// Specifies the type of simulation to run. Different APIs that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation. Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see Supported Platforms in the AWS EC2 User Guide.    EC2-Classic-InstanceStore  instance, image, security-group    EC2-Classic-EBS  instance, image, security-group, volume    EC2-VPC-InstanceStore  instance, image, security-group, network-interface    EC2-VPC-InstanceStore-Subnet  instance, image, security-group, network-interface, subnet    EC2-VPC-EBS  instance, image, security-group, network-interface, volume    EC2-VPC-EBS-Subnet  instance, image, security-group, network-interface, subnet, volume  
        public var resourceHandlingOption: String? = nil
        /// A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided then the value defaults to * (all resources). Each API in the ActionNames parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response. The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the ResourcePolicy parameter. If you include a ResourcePolicy, then it must be applicable to all of the resources included in the simulation or you receive an invalid input error. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var resourceArns: [String]? = nil
        /// The ARN of the IAM user that you want to use as the simulated caller of the APIs. CallerArn is required if you include a ResourcePolicy so that the policy's Principal element has a value to use in evaluating the policy. You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.
        public var callerArn: String? = nil
        /// An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN, such as an S3 bucket or object. If ResourceOwner is specified, it is also used as the account owner of any ResourcePolicy included in the simulation. If the ResourceOwner parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in CallerArn. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user CallerArn.
        public var resourceOwner: String? = nil
        /// A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D).
        public var resourcePolicy: String? = nil
        /// A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permission policies, the corresponding value is supplied.
        public var contextEntries: [ContextEntry]? = nil

        public init() {}

        public init(maxItems: Int32? = nil, actionNames: [String], marker: String? = nil, policyInputList: [String], resourceHandlingOption: String? = nil, resourceArns: [String]? = nil, callerArn: String? = nil, resourceOwner: String? = nil, resourcePolicy: String? = nil, contextEntries: [ContextEntry]? = nil) {
            self.maxItems = maxItems
            self.actionNames = actionNames
            self.marker = marker
            self.policyInputList = policyInputList
            self.resourceHandlingOption = resourceHandlingOption
            self.resourceArns = resourceArns
            self.callerArn = callerArn
            self.resourceOwner = resourceOwner
            self.resourcePolicy = resourcePolicy
            self.contextEntries = contextEntries
        }

    }

    public struct GetGroupPolicyResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The group the policy is associated with.
        public var groupName: String = ""
        /// The policy document.
        public var policyDocument: String = ""
        /// The name of the policy.
        public var policyName: String = ""

        public init() {}

        public init(groupName: String, policyDocument: String, policyName: String) {
            self.groupName = groupName
            self.policyDocument = policyDocument
            self.policyName = policyName
        }

    }

    public struct GetAccountSummaryResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A set of key value pairs containing information about IAM entity usage and IAM quotas.
        public var summaryMap: [String: Int32]? = nil

        public init() {}

        public init(summaryMap: [String: Int32]? = nil) {
            self.summaryMap = summaryMap
        }

    }

    public struct CreateLoginProfileResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure containing the user name and password create date.
        public var loginProfile: LoginProfile = LoginProfile()

        public init() {}

        public init(loginProfile: LoginProfile) {
            self.loginProfile = loginProfile
        }

    }

    public struct RoleDetail: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of managed policies attached to the role. These policies are the role's access (permissions) policies.
        public var attachedManagedPolicies: [AttachedPolicy]? = nil
        public var arn: String? = nil
        /// The trust policy that grants permission to assume the role.
        public var assumeRolePolicyDocument: String? = nil
        /// The path to the role. For more information about paths, see IAM Identifiers in the Using IAM guide.
        public var path: String? = nil
        /// The date and time, in ISO 8601 date-time format, when the role was created.
        public var createDate: Date? = nil
        /// The stable and unique string identifying the role. For more information about IDs, see IAM Identifiers in the Using IAM guide.
        public var roleId: String? = nil
        /// The friendly name that identifies the role.
        public var roleName: String? = nil
        /// A list of inline policies embedded in the role. These policies are the role's access (permissions) policies.
        public var rolePolicyList: [PolicyDetail]? = nil
        /// A list of instance profiles that contain this role.
        public var instanceProfileList: [InstanceProfile]? = nil

        public init() {}

        public init(attachedManagedPolicies: [AttachedPolicy]? = nil, arn: String? = nil, assumeRolePolicyDocument: String? = nil, path: String? = nil, createDate: Date? = nil, roleId: String? = nil, roleName: String? = nil, rolePolicyList: [PolicyDetail]? = nil, instanceProfileList: [InstanceProfile]? = nil) {
            self.attachedManagedPolicies = attachedManagedPolicies
            self.arn = arn
            self.assumeRolePolicyDocument = assumeRolePolicyDocument
            self.path = path
            self.createDate = createDate
            self.roleId = roleId
            self.roleName = roleName
            self.rolePolicyList = rolePolicyList
            self.instanceProfileList = instanceProfileList
        }

    }

    public struct PutUserPolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the user to associate the policy with. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""
        /// The policy document. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D).
        public var policyDocument: String = ""
        /// The name of the policy document. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var policyName: String = ""

        public init() {}

        public init(userName: String, policyDocument: String, policyName: String) {
            self.userName = userName
            self.policyDocument = policyDocument
            self.policyName = policyName
        }

    }

    public struct PutRolePolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the role to associate the policy with. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var roleName: String = ""
        /// The policy document. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D).
        public var policyDocument: String = ""
        /// The name of the policy document. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var policyName: String = ""

        public init() {}

        public init(roleName: String, policyDocument: String, policyName: String) {
            self.roleName = roleName
            self.policyDocument = policyDocument
            self.policyName = policyName
        }

    }

    public struct ListAttachedRolePoliciesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil
        /// The name (friendly name, not ARN) of the role to list attached policies for. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var roleName: String = ""
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var pathPrefix: String? = nil

        public init() {}

        public init(maxItems: Int32? = nil, roleName: String, marker: String? = nil, pathPrefix: String? = nil) {
            self.maxItems = maxItems
            self.roleName = roleName
            self.marker = marker
            self.pathPrefix = pathPrefix
        }

    }

    public struct Position: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The line containing the specified position in the document.
        public var line: Int32? = nil
        /// The column in the line containing the specified position in the document.
        public var column: Int32? = nil

        public init() {}

        public init(line: Int32? = nil, column: Int32? = nil) {
            self.line = line
            self.column = column
        }

    }

    public struct ListAccessKeysResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil
        /// A list of objects containing metadata about the access keys.
        public var accessKeyMetadata: [AccessKeyMetadata] = []

        public init() {}

        public init(marker: String? = nil, isTruncated: Bool? = nil, accessKeyMetadata: [AccessKeyMetadata]) {
            self.marker = marker
            self.isTruncated = isTruncated
            self.accessKeyMetadata = accessKeyMetadata
        }

    }

    public struct UpdateServiceSpecificCredentialRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The unique identifier of the service-specific credential. This parameter allows (per its regex pattern) a string of characters that can consist of any upper or lowercased letter or digit.
        public var serviceSpecificCredentialId: String = ""
        /// The name of the IAM user associated with the service-specific credential. If you do not specify this value, then the operation assumes the user whose credentials are used to call the operation. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String? = nil
        /// The status to be assigned to the service-specific credential.
        public var status: String = ""

        public init() {}

        public init(serviceSpecificCredentialId: String, userName: String? = nil, status: String) {
            self.serviceSpecificCredentialId = serviceSpecificCredentialId
            self.userName = userName
            self.status = status
        }

    }

    public struct DetachRolePolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the IAM policy you want to detach. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var policyArn: String = ""
        /// The name (friendly name, not ARN) of the IAM role to detach the policy from. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var roleName: String = ""

        public init() {}

        public init(policyArn: String, roleName: String) {
            self.policyArn = policyArn
            self.roleName = roleName
        }

    }

    public struct CreateSAMLProviderRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the provider to create. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var name: String = ""
        /// An XML document generated by an identity provider (IdP) that supports SAML 2.0. The document includes the issuer's name, expiration information, and keys that can be used to validate the SAML authentication response (assertions) that are received from the IdP. You must generate the metadata document using the identity management software that is used as your organization's IdP. For more information, see About SAML 2.0-based Federation in the IAM User Guide 
        public var sAMLMetadataDocument: String = ""

        public init() {}

        public init(name: String, sAMLMetadataDocument: String) {
            self.name = name
            self.sAMLMetadataDocument = sAMLMetadataDocument
        }

    }

    public struct ListVirtualMFADevicesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  The status (Unassigned or Assigned) of the devices to list. If you do not specify an AssignmentStatus, the action defaults to Any which lists both assigned and unassigned virtual MFA devices.
        public var assignmentStatus: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil

        public init() {}

        public init(assignmentStatus: String? = nil, maxItems: Int32? = nil, marker: String? = nil) {
            self.assignmentStatus = assignmentStatus
            self.maxItems = maxItems
            self.marker = marker
        }

    }

    public struct GetRoleRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the IAM role to get information about. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var roleName: String = ""

        public init() {}

        public init(roleName: String) {
            self.roleName = roleName
        }

    }

    public struct AddUserToGroupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the user to add. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""
        /// The name of the group to update. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var groupName: String = ""

        public init() {}

        public init(userName: String, groupName: String) {
            self.userName = userName
            self.groupName = groupName
        }

    }

    public struct UpdateUserRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// New path for the IAM user. Include this parameter only if you're changing the user's path. This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var newPath: String? = nil
        /// Name of the user to update. If you're changing the name of the user, this is the original user name. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""
        /// New name for the user. Include this parameter only if you're changing the user's name. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var newUserName: String? = nil

        public init() {}

        public init(newPath: String? = nil, userName: String, newUserName: String? = nil) {
            self.newPath = newPath
            self.userName = userName
            self.newUserName = newUserName
        }

    }

    public struct OpenIDConnectProviderListEntry: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var arn: String? = nil

        public init() {}

        public init(arn: String? = nil) {
            self.arn = arn
        }

    }

    public struct CreatePolicyVersionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the IAM policy to which you want to add a new version. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var policyArn: String = ""
        /// The JSON policy document that you want to use as the content for this new version of the policy. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D).
        public var policyDocument: String = ""
        /// Specifies whether to set this version as the policy's default version. When this parameter is true, the new policy version becomes the operative version; that is, the version that is in effect for the IAM users, groups, and roles that the policy is attached to. For more information about managed policy versions, see Versioning for Managed Policies in the IAM User Guide.
        public var setAsDefault: Bool? = nil

        public init() {}

        public init(policyArn: String, policyDocument: String, setAsDefault: Bool? = nil) {
            self.policyArn = policyArn
            self.policyDocument = policyDocument
            self.setAsDefault = setAsDefault
        }

    }

    public struct CreateServiceSpecificCredentialRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the IAM user that is to be associated with the credentials. The new service-specific credentials have the same permissions as the associated user except that they can be used only to access the specified service. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""
        /// The name of the AWS service that is to be associated with the credentials. The service you specify here is the only service that can be accessed using these credentials.
        public var serviceName: String = ""

        public init() {}

        public init(userName: String, serviceName: String) {
            self.userName = userName
            self.serviceName = serviceName
        }

    }

    public struct PasswordPolicy: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specifies whether to require numbers for IAM user passwords.
        public var requireNumbers: Bool? = nil
        /// Indicates whether passwords in the account expire. Returns true if MaxPasswordAge is contains a value greater than 0. Returns false if MaxPasswordAge is 0 or not present.
        public var expirePasswords: Bool? = nil
        /// The number of days that an IAM user password is valid.
        public var maxPasswordAge: Int32? = nil
        /// Specifies whether to require lowercase characters for IAM user passwords.
        public var requireLowercaseCharacters: Bool? = nil
        /// Minimum length to require for IAM user passwords.
        public var minimumPasswordLength: Int32? = nil
        /// Specifies the number of previous passwords that IAM users are prevented from reusing.
        public var passwordReusePrevention: Int32? = nil
        /// Specifies whether to require symbols for IAM user passwords.
        public var requireSymbols: Bool? = nil
        /// Specifies whether to require uppercase characters for IAM user passwords.
        public var requireUppercaseCharacters: Bool? = nil
        /// Specifies whether IAM users are prevented from setting a new password after their password has expired.
        public var hardExpiry: Bool? = nil
        /// Specifies whether IAM users are allowed to change their own password.
        public var allowUsersToChangePassword: Bool? = nil

        public init() {}

        public init(requireNumbers: Bool? = nil, expirePasswords: Bool? = nil, maxPasswordAge: Int32? = nil, requireLowercaseCharacters: Bool? = nil, minimumPasswordLength: Int32? = nil, passwordReusePrevention: Int32? = nil, requireSymbols: Bool? = nil, requireUppercaseCharacters: Bool? = nil, hardExpiry: Bool? = nil, allowUsersToChangePassword: Bool? = nil) {
            self.requireNumbers = requireNumbers
            self.expirePasswords = expirePasswords
            self.maxPasswordAge = maxPasswordAge
            self.requireLowercaseCharacters = requireLowercaseCharacters
            self.minimumPasswordLength = minimumPasswordLength
            self.passwordReusePrevention = passwordReusePrevention
            self.requireSymbols = requireSymbols
            self.requireUppercaseCharacters = requireUppercaseCharacters
            self.hardExpiry = hardExpiry
            self.allowUsersToChangePassword = allowUsersToChangePassword
        }

    }

    public struct CreateRoleResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure containing details about the new role.
        public var role: Role = Role()

        public init() {}

        public init(role: Role) {
            self.role = role
        }

    }

    public struct ListServerCertificatesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil
        ///  The path prefix for filtering the results. For example: /company/servercerts would get all server certificates for which the path starts with /company/servercerts. This parameter is optional. If it is not included, it defaults to a slash (/), listing all server certificates. This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var pathPrefix: String? = nil

        public init() {}

        public init(marker: String? = nil, maxItems: Int32? = nil, pathPrefix: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
            self.pathPrefix = pathPrefix
        }

    }

    public struct SetDefaultPolicyVersionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the IAM policy whose default version you want to set. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var policyArn: String = ""
        /// The version of the policy to set as the default (operative) version. For more information about managed policy versions, see Versioning for Managed Policies in the IAM User Guide.
        public var versionId: String = ""

        public init() {}

        public init(policyArn: String, versionId: String) {
            self.policyArn = policyArn
            self.versionId = versionId
        }

    }

    public struct ListOpenIDConnectProvidersRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct UpdateServerCertificateRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The new path for the server certificate. Include this only if you are updating the server certificate's path. This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var newPath: String? = nil
        /// The name of the server certificate that you want to update. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var serverCertificateName: String = ""
        /// The new name for the server certificate. Include this only if you are updating the server certificate's name. The name of the certificate cannot contain any spaces. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var newServerCertificateName: String? = nil

        public init() {}

        public init(newPath: String? = nil, serverCertificateName: String, newServerCertificateName: String? = nil) {
            self.newPath = newPath
            self.serverCertificateName = serverCertificateName
            self.newServerCertificateName = newServerCertificateName
        }

    }

    public struct ListPoliciesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A list of policies.
        public var policies: [Policy]? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil

        public init() {}

        public init(marker: String? = nil, policies: [Policy]? = nil, isTruncated: Bool? = nil) {
            self.marker = marker
            self.policies = policies
            self.isTruncated = isTruncated
        }

    }

    public struct GetServerCertificateRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the server certificate you want to retrieve information about. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var serverCertificateName: String = ""

        public init() {}

        public init(serverCertificateName: String) {
            self.serverCertificateName = serverCertificateName
        }

    }

    public struct ServiceSpecificCredential: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The unique identifier for the service-specific credential.
        public var serviceSpecificCredentialId: String = ""
        /// The name of the IAM user associated with the service-specific credential.
        public var userName: String = ""
        /// The status of the service-specific credential. Active means the key is valid for API calls, while Inactive means it is not.
        public var status: String = ""
        /// The generated user name for the service-specific credential. This value is generated by combining the IAM user's name combined with the ID number of the AWS account, as in jane-at-123456789012, for example. This value cannot be configured by the user.
        public var serviceUserName: String = ""
        /// The name of the service associated with the service-specific credential.
        public var serviceName: String = ""
        /// The date and time, in ISO 8601 date-time format, when the service-specific credential were created.
        public var createDate: Date = Date()
        /// The generated password for the service-specific credential.
        public var servicePassword: String = ""

        public init() {}

        public init(serviceSpecificCredentialId: String, userName: String, status: String, serviceUserName: String, serviceName: String, createDate: Date, servicePassword: String) {
            self.serviceSpecificCredentialId = serviceSpecificCredentialId
            self.userName = userName
            self.status = status
            self.serviceUserName = serviceUserName
            self.serviceName = serviceName
            self.createDate = createDate
            self.servicePassword = servicePassword
        }

    }

    public struct GetOpenIDConnectProviderResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date and time when the IAM OIDC provider resource object was created in the AWS account.
        public var createDate: Date? = nil
        /// The URL that the IAM OIDC provider resource object is associated with. For more information, see CreateOpenIDConnectProvider.
        public var url: String? = nil
        /// A list of certificate thumbprints that are associated with the specified IAM OIDC provider resource object. For more information, see CreateOpenIDConnectProvider. 
        public var thumbprintList: [String]? = nil
        /// A list of client IDs (also known as audiences) that are associated with the specified IAM OIDC provider resource object. For more information, see CreateOpenIDConnectProvider.
        public var clientIDList: [String]? = nil

        public init() {}

        public init(createDate: Date? = nil, url: String? = nil, thumbprintList: [String]? = nil, clientIDList: [String]? = nil) {
            self.createDate = createDate
            self.url = url
            self.thumbprintList = thumbprintList
            self.clientIDList = clientIDList
        }

    }

    public struct UserDetail: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The friendly name identifying the user.
        public var userName: String? = nil
        /// The stable and unique string identifying the user. For more information about IDs, see IAM Identifiers in the Using IAM guide.
        public var userId: String? = nil
        public var arn: String? = nil
        /// A list of IAM groups that the user is in.
        public var groupList: [String]? = nil
        /// The path to the user. For more information about paths, see IAM Identifiers in the Using IAM guide.
        public var path: String? = nil
        /// The date and time, in ISO 8601 date-time format, when the user was created.
        public var createDate: Date? = nil
        /// A list of the inline policies embedded in the user.
        public var userPolicyList: [PolicyDetail]? = nil
        /// A list of the managed policies attached to the user.
        public var attachedManagedPolicies: [AttachedPolicy]? = nil

        public init() {}

        public init(userName: String? = nil, userId: String? = nil, arn: String? = nil, groupList: [String]? = nil, path: String? = nil, createDate: Date? = nil, userPolicyList: [PolicyDetail]? = nil, attachedManagedPolicies: [AttachedPolicy]? = nil) {
            self.userName = userName
            self.userId = userId
            self.arn = arn
            self.groupList = groupList
            self.path = path
            self.createDate = createDate
            self.userPolicyList = userPolicyList
            self.attachedManagedPolicies = attachedManagedPolicies
        }

    }

    public struct ListSAMLProvidersRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil

        public init() {}

    }

    public struct ListAttachedGroupPoliciesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil
        /// A list of the attached policies.
        public var attachedPolicies: [AttachedPolicy]? = nil

        public init() {}

        public init(marker: String? = nil, isTruncated: Bool? = nil, attachedPolicies: [AttachedPolicy]? = nil) {
            self.marker = marker
            self.isTruncated = isTruncated
            self.attachedPolicies = attachedPolicies
        }

    }

    public struct ListUserPoliciesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A list of policy names.
        public var policyNames: [String] = []
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil

        public init() {}

        public init(marker: String? = nil, policyNames: [String], isTruncated: Bool? = nil) {
            self.marker = marker
            self.policyNames = policyNames
            self.isTruncated = isTruncated
        }

    }

    public struct ListAccountAliasesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil

        public init() {}

        public init(marker: String? = nil, maxItems: Int32? = nil) {
            self.marker = marker
            self.maxItems = maxItems
        }

    }

    public struct UploadSigningCertificateRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the user the signing certificate is for. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String? = nil
        /// The contents of the signing certificate. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D).
        public var certificateBody: String = ""

        public init() {}

        public init(userName: String? = nil, certificateBody: String) {
            self.userName = userName
            self.certificateBody = certificateBody
        }

    }

    public struct DeactivateMFADeviceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the user whose MFA device you want to deactivate. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""
        /// The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =/:,.@-
        public var serialNumber: String = ""

        public init() {}

        public init(userName: String, serialNumber: String) {
            self.userName = userName
            self.serialNumber = serialNumber
        }

    }

    public struct DeleteAccountAliasRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the account alias to delete. This parameter allows (per its regex pattern) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.
        public var accountAlias: String = ""

        public init() {}

        public init(accountAlias: String) {
            self.accountAlias = accountAlias
        }

    }

    public struct GetSAMLProviderRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the SAML provider resource object in IAM to get information about. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var sAMLProviderArn: String = ""

        public init() {}

        public init(sAMLProviderArn: String) {
            self.sAMLProviderArn = sAMLProviderArn
        }

    }

    public struct GenerateCredentialReportResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the state of the credential report.
        public var state: String? = nil
        /// Information about the credential report.
        public var description: String? = nil

        public init() {}

        public init(state: String? = nil, description: String? = nil) {
            self.state = state
            self.description = description
        }

    }

    public struct ListGroupPoliciesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A list of policy names.
        public var policyNames: [String] = []
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil

        public init() {}

        public init(marker: String? = nil, policyNames: [String], isTruncated: Bool? = nil) {
            self.marker = marker
            self.policyNames = policyNames
            self.isTruncated = isTruncated
        }

    }

    public struct CreateUserResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure with details about the new IAM user.
        public var user: User? = nil

        public init() {}

        public init(user: User? = nil) {
            self.user = user
        }

    }

    public struct SigningCertificate: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID for the signing certificate.
        public var certificateId: String = ""
        /// The name of the user the signing certificate is associated with.
        public var userName: String = ""
        /// The status of the signing certificate. Active means the key is valid for API calls, while Inactive means it is not.
        public var status: String = ""
        /// The date when the signing certificate was uploaded.
        public var uploadDate: Date? = nil
        /// The contents of the signing certificate.
        public var certificateBody: String = ""

        public init() {}

        public init(certificateId: String, userName: String, status: String, uploadDate: Date? = nil, certificateBody: String) {
            self.certificateId = certificateId
            self.userName = userName
            self.status = status
            self.uploadDate = uploadDate
            self.certificateBody = certificateBody
        }

    }

    public struct GetGroupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil
        /// The name of the group. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var groupName: String = ""

        public init() {}

        public init(marker: String? = nil, maxItems: Int32? = nil, groupName: String) {
            self.marker = marker
            self.maxItems = maxItems
            self.groupName = groupName
        }

    }

    public struct AttachRolePolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the IAM policy you want to attach. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var policyArn: String = ""
        /// The name (friendly name, not ARN) of the role to attach the policy to. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var roleName: String = ""

        public init() {}

        public init(policyArn: String, roleName: String) {
            self.policyArn = policyArn
            self.roleName = roleName
        }

    }

    public struct ChangePasswordRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The IAM user's current password.
        public var oldPassword: String = ""
        /// The new password. The new password must conform to the AWS account's password policy, if one exists. The regex pattern used to validate this parameter is a string of characters consisting of almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Although any of these characters are valid in a password, note that many tools, such as the AWS Management Console, might restrict the ability to enter certain characters because they have special meaning within that tool.
        public var newPassword: String = ""

        public init() {}

        public init(oldPassword: String, newPassword: String) {
            self.oldPassword = oldPassword
            self.newPassword = newPassword
        }

    }

    public struct UpdateOpenIDConnectProviderThumbprintRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of certificate thumbprints that are associated with the specified IAM OpenID Connect provider. For more information, see CreateOpenIDConnectProvider. 
        public var thumbprintList: [String] = []
        /// The Amazon Resource Name (ARN) of the IAM OIDC provider resource object for which you want to update the thumbprint. You can get a list of OIDC provider ARNs by using the ListOpenIDConnectProviders action. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var openIDConnectProviderArn: String = ""

        public init() {}

        public init(thumbprintList: [String], openIDConnectProviderArn: String) {
            self.thumbprintList = thumbprintList
            self.openIDConnectProviderArn = openIDConnectProviderArn
        }

    }

    public struct User: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date and time, in ISO 8601 date-time format, when the user was created.
        public var createDate: Date = Date()
        /// The date and time, in ISO 8601 date-time format, when the user's password was last used to sign in to an AWS website. For a list of AWS websites that capture a user's last sign-in time, see the Credential Reports topic in the Using IAM guide. If a password is used more than once in a five-minute span, only the first use is returned in this field. This field is null (not present) when:   The user does not have a password   The password exists but has never been used (at least not since IAM started tracking this information on October 20th, 2014   there is no sign-in data associated with the user   This value is returned only in the GetUser and ListUsers actions. 
        public var passwordLastUsed: Date? = nil
        /// The stable and unique string identifying the user. For more information about IDs, see IAM Identifiers in the Using IAM guide.
        public var userId: String = ""
        /// The friendly name identifying the user.
        public var userName: String = ""
        /// The Amazon Resource Name (ARN) that identifies the user. For more information about ARNs and how to use ARNs in policies, see IAM Identifiers in the Using IAM guide. 
        public var arn: String = ""
        /// The path to the user. For more information about paths, see IAM Identifiers in the Using IAM guide.
        public var path: String = ""

        public init() {}

        public init(createDate: Date, passwordLastUsed: Date? = nil, userId: String, userName: String, arn: String, path: String) {
            self.createDate = createDate
            self.passwordLastUsed = passwordLastUsed
            self.userId = userId
            self.userName = userName
            self.arn = arn
            self.path = path
        }

    }

    public struct DeleteSSHPublicKeyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the IAM user associated with the SSH public key. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""
        /// The unique identifier for the SSH public key. This parameter allows (per its regex pattern) a string of characters that can consist of any upper or lowercased letter or digit.
        public var sSHPublicKeyId: String = ""

        public init() {}

        public init(userName: String, sSHPublicKeyId: String) {
            self.userName = userName
            self.sSHPublicKeyId = sSHPublicKeyId
        }

    }

    public struct CreateOpenIDConnectProviderRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The URL of the identity provider. The URL must begin with "https://" and should correspond to the iss claim in the provider's OpenID Connect ID tokens. Per the OIDC standard, path components are allowed but query parameters are not. Typically the URL consists of only a host name, like "https://server.example.org" or "https://example.com". You cannot register the same provider multiple times in a single AWS account. If you try to submit a URL that has already been used for an OpenID Connect provider in the AWS account, you will get an error.
        public var url: String = ""
        /// A list of server certificate thumbprints for the OpenID Connect (OIDC) identity provider's server certificate(s). Typically this list includes only one entry. However, IAM lets you have up to five thumbprints for an OIDC provider. This lets you maintain multiple thumbprints if the identity provider is rotating certificates. The server certificate thumbprint is the hex-encoded SHA-1 hash value of the X.509 certificate used by the domain where the OpenID Connect provider makes its keys available. It is always a 40-character string. You must provide at least one thumbprint when creating an IAM OIDC provider. For example, if the OIDC provider is server.example.com and the provider stores its keys at "https://keys.server.example.com/openid-connect", the thumbprint string would be the hex-encoded SHA-1 hash value of the certificate used by https://keys.server.example.com. For more information about obtaining the OIDC provider's thumbprint, see Obtaining the Thumbprint for an OpenID Connect Provider in the IAM User Guide.
        public var thumbprintList: [String] = []
        /// A list of client IDs (also known as audiences). When a mobile or web app registers with an OpenID Connect provider, they establish a value that identifies the application. (This is the value that's sent as the client_id parameter on OAuth requests.) You can register multiple client IDs with the same provider. For example, you might have multiple applications that use the same OIDC provider. You cannot register more than 100 client IDs with a single IAM OIDC provider. There is no defined format for a client ID. The CreateOpenIDConnectProviderRequest action accepts client IDs up to 255 characters long.
        public var clientIDList: [String]? = nil

        public init() {}

        public init(url: String, thumbprintList: [String], clientIDList: [String]? = nil) {
            self.url = url
            self.thumbprintList = thumbprintList
            self.clientIDList = clientIDList
        }

    }

    public struct CreatePolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The path for the policy. For more information about paths, see IAM Identifiers in the IAM User Guide. This parameter is optional. If it is not included, it defaults to a slash (/). This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var path: String? = nil
        /// The friendly name of the policy. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var policyName: String = ""
        /// The JSON policy document that you want to use as the content for the new policy. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D).
        public var policyDocument: String = ""
        /// A friendly description of the policy. Typically used to store information about the permissions defined in the policy. For example, "Grants access to production DynamoDB tables." The policy description is immutable. After a value is assigned, it cannot be changed.
        public var description: String? = nil

        public init() {}

        public init(path: String? = nil, policyName: String, policyDocument: String, description: String? = nil) {
            self.path = path
            self.policyName = policyName
            self.policyDocument = policyDocument
            self.description = description
        }

    }

    public struct ListUserPoliciesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// The name of the user to list policies for. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil

        public init() {}

        public init(marker: String? = nil, userName: String, maxItems: Int32? = nil) {
            self.marker = marker
            self.userName = userName
            self.maxItems = maxItems
        }

    }

    public struct DeleteServerCertificateRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the server certificate you want to delete. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var serverCertificateName: String = ""

        public init() {}

        public init(serverCertificateName: String) {
            self.serverCertificateName = serverCertificateName
        }

    }

    public struct SimulatePolicyResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil
        /// The results of the simulation.
        public var evaluationResults: [EvaluationResult]? = nil

        public init() {}

        public init(marker: String? = nil, isTruncated: Bool? = nil, evaluationResults: [EvaluationResult]? = nil) {
            self.marker = marker
            self.isTruncated = isTruncated
            self.evaluationResults = evaluationResults
        }

    }

    public struct GetUserPolicyResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user the policy is associated with.
        public var userName: String = ""
        /// The policy document.
        public var policyDocument: String = ""
        /// The name of the policy.
        public var policyName: String = ""

        public init() {}

        public init(userName: String, policyDocument: String, policyName: String) {
            self.userName = userName
            self.policyDocument = policyDocument
            self.policyName = policyName
        }

    }

    public struct DeletePolicyVersionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the IAM policy from which you want to delete a version. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var policyArn: String = ""
        /// The policy version to delete. This parameter allows (per its regex pattern) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits. For more information about managed policy versions, see Versioning for Managed Policies in the IAM User Guide.
        public var versionId: String = ""

        public init() {}

        public init(policyArn: String, versionId: String) {
            self.policyArn = policyArn
            self.versionId = versionId
        }

    }

    public struct SAMLProviderListEntry: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date and time when the SAML provider was created.
        public var createDate: Date? = nil
        /// The Amazon Resource Name (ARN) of the SAML provider.
        public var arn: String? = nil
        /// The expiration date and time for the SAML provider.
        public var validUntil: Date? = nil

        public init() {}

        public init(createDate: Date? = nil, arn: String? = nil, validUntil: Date? = nil) {
            self.createDate = createDate
            self.arn = arn
            self.validUntil = validUntil
        }

    }

    public struct UpdateSAMLProviderResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the SAML provider that was updated.
        public var sAMLProviderArn: String? = nil

        public init() {}

        public init(sAMLProviderArn: String? = nil) {
            self.sAMLProviderArn = sAMLProviderArn
        }

    }

    public struct GetContextKeysForPolicyResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The list of context keys that are referenced in the input policies.
        public var contextKeyNames: [String]? = nil

        public init() {}

        public init(contextKeyNames: [String]? = nil) {
            self.contextKeyNames = contextKeyNames
        }

    }

    public struct CreateAccountAliasRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The account alias to create. This parameter allows (per its regex pattern) a string of characters consisting of lowercase letters, digits, and dashes. You cannot start or finish with a dash, nor can you have two dashes in a row.
        public var accountAlias: String = ""

        public init() {}

        public init(accountAlias: String) {
            self.accountAlias = accountAlias
        }

    }

    public struct EvaluationResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The result of the simulation.
        public var evalDecision: String = ""
        /// Additional details about the results of the evaluation decision. When there are both IAM policies and resource policies, this parameter explains how each set of policies contributes to the final evaluation decision. When simulating cross-account access to a resource, both the resource-based policy and the caller's IAM policy must grant access. See How IAM Roles Differ from Resource-based Policies 
        public var evalDecisionDetails: [String: String]? = nil
        /// The ARN of the resource that the indicated API action was tested on.
        public var evalResourceName: String? = nil
        /// A list of the statements in the input policies that determine the result for this scenario. Remember that even if multiple statements allow the action on the resource, if only one statement denies that action, then the explicit deny overrides any allow, and the deny statement is the only entry included in the result.
        public var matchedStatements: [Statement]? = nil
        /// The name of the API action tested on the indicated resource.
        public var evalActionName: String = ""
        /// A structure that details how AWS Organizations and its service control policies affect the results of the simulation. Only applies if the simulated user's account is part of an organization.
        public var organizationsDecisionDetail: OrganizationsDecisionDetail? = nil
        /// A list of context keys that are required by the included input policies but that were not provided by one of the input parameters. This list is used when the resource in a simulation is "*", either explicitly, or when the ResourceArns parameter blank. If you include a list of resources, then any missing context values are instead included under the ResourceSpecificResults section. To discover the context keys used by a set of policies, you can call GetContextKeysForCustomPolicy or GetContextKeysForPrincipalPolicy.
        public var missingContextValues: [String]? = nil
        /// The individual results of the simulation of the API action specified in EvalActionName on each resource.
        public var resourceSpecificResults: [ResourceSpecificResult]? = nil

        public init() {}

        public init(evalDecision: String, evalDecisionDetails: [String: String]? = nil, evalResourceName: String? = nil, matchedStatements: [Statement]? = nil, evalActionName: String, organizationsDecisionDetail: OrganizationsDecisionDetail? = nil, missingContextValues: [String]? = nil, resourceSpecificResults: [ResourceSpecificResult]? = nil) {
            self.evalDecision = evalDecision
            self.evalDecisionDetails = evalDecisionDetails
            self.evalResourceName = evalResourceName
            self.matchedStatements = matchedStatements
            self.evalActionName = evalActionName
            self.organizationsDecisionDetail = organizationsDecisionDetail
            self.missingContextValues = missingContextValues
            self.resourceSpecificResults = resourceSpecificResults
        }

    }

    public struct ResourceSpecificResult: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of context keys that are required by the included input policies but that were not provided by one of the input parameters. This list is used when a list of ARNs is included in the ResourceArns parameter instead of "*". If you do not specify individual resources, by setting ResourceArns to "*" or by not including the ResourceArns parameter, then any missing context values are instead included under the EvaluationResults section. To discover the context keys used by a set of policies, you can call GetContextKeysForCustomPolicy or GetContextKeysForPrincipalPolicy.
        public var missingContextValues: [String]? = nil
        /// The result of the simulation of the simulated API action on the resource specified in EvalResourceName.
        public var evalResourceDecision: String = ""
        /// Additional details about the results of the evaluation decision. When there are both IAM policies and resource policies, this parameter explains how each set of policies contributes to the final evaluation decision. When simulating cross-account access to a resource, both the resource-based policy and the caller's IAM policy must grant access.
        public var evalDecisionDetails: [String: String]? = nil
        /// A list of the statements in the input policies that determine the result for this part of the simulation. Remember that even if multiple statements allow the action on the resource, if any statement denies that action, then the explicit deny overrides any allow, and the deny statement is the only entry included in the result.
        public var matchedStatements: [Statement]? = nil
        /// The name of the simulated resource, in Amazon Resource Name (ARN) format.
        public var evalResourceName: String = ""

        public init() {}

        public init(missingContextValues: [String]? = nil, evalResourceDecision: String, evalDecisionDetails: [String: String]? = nil, matchedStatements: [Statement]? = nil, evalResourceName: String) {
            self.missingContextValues = missingContextValues
            self.evalResourceDecision = evalResourceDecision
            self.evalDecisionDetails = evalDecisionDetails
            self.matchedStatements = matchedStatements
            self.evalResourceName = evalResourceName
        }

    }

    public struct ListEntitiesForPolicyResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil
        /// A list of IAM users that the policy is attached to.
        public var policyUsers: [PolicyUser]? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A list of IAM roles that the policy is attached to.
        public var policyRoles: [PolicyRole]? = nil
        /// A list of IAM groups that the policy is attached to.
        public var policyGroups: [PolicyGroup]? = nil

        public init() {}

        public init(isTruncated: Bool? = nil, policyUsers: [PolicyUser]? = nil, marker: String? = nil, policyRoles: [PolicyRole]? = nil, policyGroups: [PolicyGroup]? = nil) {
            self.isTruncated = isTruncated
            self.policyUsers = policyUsers
            self.marker = marker
            self.policyRoles = policyRoles
            self.policyGroups = policyGroups
        }

    }

    public struct GetUserPolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the user who the policy is associated with. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""
        /// The name of the policy document to get. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var policyName: String = ""

        public init() {}

        public init(userName: String, policyName: String) {
            self.userName = userName
            self.policyName = policyName
        }

    }

    public struct CreateGroupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  The path to the group. For more information about paths, see IAM Identifiers in the IAM User Guide. This parameter is optional. If it is not included, it defaults to a slash (/). This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var path: String? = nil
        /// The name of the group to create. Do not include the path in this value. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-. The group name must be unique within the account. Group names are not distinguished by case. For example, you cannot create groups named both "ADMINS" and "admins".
        public var groupName: String = ""

        public init() {}

        public init(path: String? = nil, groupName: String) {
            self.path = path
            self.groupName = groupName
        }

    }

    public struct DeleteAccessKeyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the user whose access key pair you want to delete. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String? = nil
        /// The access key ID for the access key ID and secret access key you want to delete. This parameter allows (per its regex pattern) a string of characters that can consist of any upper or lowercased letter or digit.
        public var accessKeyId: String = ""

        public init() {}

        public init(userName: String? = nil, accessKeyId: String) {
            self.userName = userName
            self.accessKeyId = accessKeyId
        }

    }

    public struct CreateLoginProfileRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The new password for the user. The regex pattern used to validate this parameter is a string of characters consisting of almost any printable ASCII character from the space (\u0020) through the end of the ASCII character range (\u00FF). You can also include the tab (\u0009), line feed (\u000A), and carriage return (\u000D) characters. Although any of these characters are valid in a password, note that many tools, such as the AWS Management Console, might restrict the ability to enter certain characters because they have special meaning within that tool.
        public var password: String = ""
        /// The name of the IAM user to create a password for. The user must already exist. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""
        /// Specifies whether the user is required to set a new password on next sign-in.
        public var passwordResetRequired: Bool? = nil

        public init() {}

        public init(password: String, userName: String, passwordResetRequired: Bool? = nil) {
            self.password = password
            self.userName = userName
            self.passwordResetRequired = passwordResetRequired
        }

    }

    public struct DeleteLoginProfileRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the user whose password you want to delete. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""

        public init() {}

        public init(userName: String) {
            self.userName = userName
        }

    }

    public struct UploadSSHPublicKeyResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Contains information about the SSH public key.
        public var sSHPublicKey: SSHPublicKey? = nil

        public init() {}

        public init(sSHPublicKey: SSHPublicKey? = nil) {
            self.sSHPublicKey = sSHPublicKey
        }

    }

    public struct GetLoginProfileRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the user whose login profile you want to retrieve. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""

        public init() {}

        public init(userName: String) {
            self.userName = userName
        }

    }

    public struct GetAccountAuthorizationDetailsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil
        /// A list of entity types used to filter the results. Only the entities that match the types you specify are included in the output. Use the value LocalManagedPolicy to include customer managed policies. The format for this parameter is a comma-separated (if more than one) list of strings. Each string value in the list must be one of the valid values listed below.
        public var filter: [String]? = nil

        public init() {}

        public init(marker: String? = nil, maxItems: Int32? = nil, filter: [String]? = nil) {
            self.marker = marker
            self.maxItems = maxItems
            self.filter = filter
        }

    }

    public struct AccessKeyMetadata: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date when the access key was created.
        public var createDate: Date? = nil
        /// The name of the IAM user that the key is associated with.
        public var userName: String? = nil
        /// The status of the access key. Active means the key is valid for API calls; Inactive means it is not.
        public var status: String? = nil
        /// The ID for this access key.
        public var accessKeyId: String? = nil

        public init() {}

        public init(createDate: Date? = nil, userName: String? = nil, status: String? = nil, accessKeyId: String? = nil) {
            self.createDate = createDate
            self.userName = userName
            self.status = status
            self.accessKeyId = accessKeyId
        }

    }

    public struct Statement: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The type of the policy.
        public var sourcePolicyType: String? = nil
        /// The row and column of the beginning of the Statement in an IAM policy.
        public var startPosition: Position? = nil
        /// The identifier of the policy that was provided as an input.
        public var sourcePolicyId: String? = nil
        /// The row and column of the end of a Statement in an IAM policy.
        public var endPosition: Position? = nil

        public init() {}

        public init(sourcePolicyType: String? = nil, startPosition: Position? = nil, sourcePolicyId: String? = nil, endPosition: Position? = nil) {
            self.sourcePolicyType = sourcePolicyType
            self.startPosition = startPosition
            self.sourcePolicyId = sourcePolicyId
            self.endPosition = endPosition
        }

    }

    public struct SimulatePrincipalPolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil
        /// A list of names of API actions to evaluate in the simulation. Each action is evaluated for each resource. Each action must include the service identifier, such as iam:CreateUser.
        public var actionNames: [String] = []
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// An optional list of additional policy documents to include in the simulation. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D).
        public var policyInputList: [String]? = nil
        /// Specifies the type of simulation to run. Different APIs that support resource-based policies require different combinations of resources. By specifying the type of simulation to run, you enable the policy simulator to enforce the presence of the required resources to ensure reliable simulation results. If your simulation does not match one of the following scenarios, then you can omit this parameter. The following list shows each of the supported scenario values and the resources that you must define to run the simulation. Each of the EC2 scenarios requires that you specify instance, image, and security-group resources. If your scenario includes an EBS volume, then you must specify that volume as a resource. If the EC2 scenario includes VPC, then you must supply the network-interface resource. If it includes an IP subnet, then you must specify the subnet resource. For more information on the EC2 scenario options, see Supported Platforms in the AWS EC2 User Guide.    EC2-Classic-InstanceStore  instance, image, security-group    EC2-Classic-EBS  instance, image, security-group, volume    EC2-VPC-InstanceStore  instance, image, security-group, network-interface    EC2-VPC-InstanceStore-Subnet  instance, image, security-group, network-interface, subnet    EC2-VPC-EBS  instance, image, security-group, network-interface, volume    EC2-VPC-EBS-Subnet  instance, image, security-group, network-interface, subnet, volume  
        public var resourceHandlingOption: String? = nil
        /// A list of ARNs of AWS resources to include in the simulation. If this parameter is not provided then the value defaults to * (all resources). Each API in the ActionNames parameter is evaluated for each resource in this list. The simulation determines the access result (allowed or denied) of each combination and reports it in the response. The simulation does not automatically retrieve policies for the specified resources. If you want to include a resource policy in the simulation, then you must include the policy as a string in the ResourcePolicy parameter. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var resourceArns: [String]? = nil
        /// The Amazon Resource Name (ARN) of a user, group, or role whose policies you want to include in the simulation. If you specify a user, group, or role, the simulation includes all policies that are associated with that entity. If you specify a user, the simulation also includes all policies that are attached to any groups the user belongs to. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var policySourceArn: String = ""
        /// An AWS account ID that specifies the owner of any simulated resource that does not identify its owner in the resource ARN, such as an S3 bucket or object. If ResourceOwner is specified, it is also used as the account owner of any ResourcePolicy included in the simulation. If the ResourceOwner parameter is not specified, then the owner of the resources and the resource policy defaults to the account of the identity provided in CallerArn. This parameter is required only if you specify a resource-based policy and account that owns the resource is different from the account that owns the simulated calling user CallerArn.
        public var resourceOwner: String? = nil
        /// A resource-based policy to include in the simulation provided as a string. Each resource in the simulation is treated as if it had this policy attached. You can include only one resource-based policy in a simulation. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D).
        public var resourcePolicy: String? = nil
        /// The ARN of the IAM user that you want to specify as the simulated caller of the APIs. If you do not specify a CallerArn, it defaults to the ARN of the user that you specify in PolicySourceArn, if you specified a user. If you include both a PolicySourceArn (for example, arn:aws:iam::123456789012:user/David) and a CallerArn (for example, arn:aws:iam::123456789012:user/Bob), the result is that you simulate calling the APIs as Bob, as if Bob had David's policies. You can specify only the ARN of an IAM user. You cannot specify the ARN of an assumed role, federated user, or a service principal.  CallerArn is required if you include a ResourcePolicy and the PolicySourceArn is not the ARN for an IAM user. This is required so that the resource-based policy's Principal element has a value to use in evaluating the policy. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var callerArn: String? = nil
        /// A list of context keys and corresponding values for the simulation to use. Whenever a context key is evaluated in one of the simulated IAM permission policies, the corresponding value is supplied.
        public var contextEntries: [ContextEntry]? = nil

        public init() {}

        public init(maxItems: Int32? = nil, actionNames: [String], marker: String? = nil, policyInputList: [String]? = nil, resourceHandlingOption: String? = nil, resourceArns: [String]? = nil, policySourceArn: String, resourceOwner: String? = nil, resourcePolicy: String? = nil, callerArn: String? = nil, contextEntries: [ContextEntry]? = nil) {
            self.maxItems = maxItems
            self.actionNames = actionNames
            self.marker = marker
            self.policyInputList = policyInputList
            self.resourceHandlingOption = resourceHandlingOption
            self.resourceArns = resourceArns
            self.policySourceArn = policySourceArn
            self.resourceOwner = resourceOwner
            self.resourcePolicy = resourcePolicy
            self.callerArn = callerArn
            self.contextEntries = contextEntries
        }

    }

    public struct GetUserResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure containing details about the IAM user.
        public var user: User = User()

        public init() {}

        public init(user: User) {
            self.user = user
        }

    }

    public struct RemoveClientIDFromOpenIDConnectProviderRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The client ID (also known as audience) to remove from the IAM OIDC provider resource. For more information about client IDs, see CreateOpenIDConnectProvider.
        public var clientID: String = ""
        /// The Amazon Resource Name (ARN) of the IAM OIDC provider resource to remove the client ID from. You can get a list of OIDC provider ARNs by using the ListOpenIDConnectProviders action. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var openIDConnectProviderArn: String = ""

        public init() {}

        public init(clientID: String, openIDConnectProviderArn: String) {
            self.clientID = clientID
            self.openIDConnectProviderArn = openIDConnectProviderArn
        }

    }

    public struct LoginProfile: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date when the password for the user was created.
        public var createDate: Date = Date()
        /// The name of the user, which can be used for signing in to the AWS Management Console.
        public var userName: String = ""
        /// Specifies whether the user is required to set a new password on next sign-in.
        public var passwordResetRequired: Bool? = nil

        public init() {}

        public init(createDate: Date, userName: String, passwordResetRequired: Bool? = nil) {
            self.createDate = createDate
            self.userName = userName
            self.passwordResetRequired = passwordResetRequired
        }

    }

    public struct ListAttachedUserPoliciesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil
        /// A list of the attached policies.
        public var attachedPolicies: [AttachedPolicy]? = nil

        public init() {}

        public init(marker: String? = nil, isTruncated: Bool? = nil, attachedPolicies: [AttachedPolicy]? = nil) {
            self.marker = marker
            self.isTruncated = isTruncated
            self.attachedPolicies = attachedPolicies
        }

    }

    public struct RemoveRoleFromInstanceProfileRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the instance profile to update. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var instanceProfileName: String = ""
        /// The name of the role to remove. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var roleName: String = ""

        public init() {}

        public init(instanceProfileName: String, roleName: String) {
            self.instanceProfileName = instanceProfileName
            self.roleName = roleName
        }

    }

    public struct CreateSAMLProviderResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the new SAML provider resource in IAM.
        public var sAMLProviderArn: String? = nil

        public init() {}

        public init(sAMLProviderArn: String? = nil) {
            self.sAMLProviderArn = sAMLProviderArn
        }

    }

    public struct CreateVirtualMFADeviceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the virtual MFA device. Use with path to uniquely identify a virtual MFA device. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var virtualMFADeviceName: String = ""
        ///  The path for the virtual MFA device. For more information about paths, see IAM Identifiers in the IAM User Guide. This parameter is optional. If it is not included, it defaults to a slash (/). This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var path: String? = nil

        public init() {}

        public init(virtualMFADeviceName: String, path: String? = nil) {
            self.virtualMFADeviceName = virtualMFADeviceName
            self.path = path
        }

    }

    public struct EnableMFADeviceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the IAM user for whom you want to enable the MFA device. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""
        /// An authentication code emitted by the device. The format for this parameter is a string of 6 digits.
        public var authenticationCode1: String = ""
        /// The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =/:,.@-
        public var serialNumber: String = ""
        /// A subsequent authentication code emitted by the device. The format for this parameter is a string of 6 digits.
        public var authenticationCode2: String = ""

        public init() {}

        public init(userName: String, authenticationCode1: String, serialNumber: String, authenticationCode2: String) {
            self.userName = userName
            self.authenticationCode1 = authenticationCode1
            self.serialNumber = serialNumber
            self.authenticationCode2 = authenticationCode2
        }

    }

    public struct UpdateAssumeRolePolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The policy that grants an entity permission to assume the role. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D).
        public var policyDocument: String = ""
        /// The name of the role to update with the new policy. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var roleName: String = ""

        public init() {}

        public init(policyDocument: String, roleName: String) {
            self.policyDocument = policyDocument
            self.roleName = roleName
        }

    }

    public struct ListSAMLProvidersResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The list of SAML provider resource objects defined in IAM for this AWS account.
        public var sAMLProviderList: [SAMLProviderListEntry]? = nil

        public init() {}

        public init(sAMLProviderList: [SAMLProviderListEntry]? = nil) {
            self.sAMLProviderList = sAMLProviderList
        }

    }

    public struct ServiceSpecificCredentialMetadata: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The unique identifier for the service-specific credential.
        public var serviceSpecificCredentialId: String = ""
        /// The name of the IAM user associated with the service-specific credential.
        public var userName: String = ""
        /// The status of the service-specific credential. Active means the key is valid for API calls, while Inactive means it is not.
        public var status: String = ""
        /// The name of the service associated with the service-specific credential.
        public var serviceName: String = ""
        /// The generated user name for the service-specific credential.
        public var serviceUserName: String = ""
        /// The date and time, in ISO 8601 date-time format, when the service-specific credential were created.
        public var createDate: Date = Date()

        public init() {}

        public init(serviceSpecificCredentialId: String, userName: String, status: String, serviceName: String, serviceUserName: String, createDate: Date) {
            self.serviceSpecificCredentialId = serviceSpecificCredentialId
            self.userName = userName
            self.status = status
            self.serviceName = serviceName
            self.serviceUserName = serviceUserName
            self.createDate = createDate
        }

    }

    public struct SSHPublicKey: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The SSH public key.
        public var sSHPublicKeyBody: String = ""
        /// The name of the IAM user associated with the SSH public key.
        public var userName: String = ""
        /// The status of the SSH public key. Active means the key can be used for authentication with an AWS CodeCommit repository. Inactive means the key cannot be used.
        public var status: String = ""
        /// The MD5 message digest of the SSH public key.
        public var fingerprint: String = ""
        /// The date and time, in ISO 8601 date-time format, when the SSH public key was uploaded.
        public var uploadDate: Date? = nil
        /// The unique identifier for the SSH public key.
        public var sSHPublicKeyId: String = ""

        public init() {}

        public init(sSHPublicKeyBody: String, userName: String, status: String, fingerprint: String, uploadDate: Date? = nil, sSHPublicKeyId: String) {
            self.sSHPublicKeyBody = sSHPublicKeyBody
            self.userName = userName
            self.status = status
            self.fingerprint = fingerprint
            self.uploadDate = uploadDate
            self.sSHPublicKeyId = sSHPublicKeyId
        }

    }

    public struct AccessKeyLastUsed: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date and time, in ISO 8601 date-time format, when the access key was most recently used. This field is null when:   The user does not have an access key.   An access key exists but has never been used, at least not since IAM started tracking this information on April 22nd, 2015.   There is no sign-in data associated with the user  
        public var lastUsedDate: Date = Date()
        /// The AWS region where this access key was most recently used. This field is null when:   The user does not have an access key.   An access key exists but has never been used, at least not since IAM started tracking this information on April 22nd, 2015.   There is no sign-in data associated with the user   For more information about AWS regions, see Regions and Endpoints in the Amazon Web Services General Reference.
        public var region: String = ""
        /// The name of the AWS service with which this access key was most recently used. This field is null when:   The user does not have an access key.   An access key exists but has never been used, at least not since IAM started tracking this information on April 22nd, 2015.   There is no sign-in data associated with the user  
        public var serviceName: String = ""

        public init() {}

        public init(lastUsedDate: Date, region: String, serviceName: String) {
            self.lastUsedDate = lastUsedDate
            self.region = region
            self.serviceName = serviceName
        }

    }

    public struct ResetServiceSpecificCredentialRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The unique identifier of the service-specific credential. This parameter allows (per its regex pattern) a string of characters that can consist of any upper or lowercased letter or digit.
        public var serviceSpecificCredentialId: String = ""
        /// The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String? = nil

        public init() {}

        public init(serviceSpecificCredentialId: String, userName: String? = nil) {
            self.serviceSpecificCredentialId = serviceSpecificCredentialId
            self.userName = userName
        }

    }

    public struct ListPolicyVersionsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the IAM policy for which you want the versions. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var policyArn: String = ""
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil

        public init() {}

        public init(policyArn: String, marker: String? = nil, maxItems: Int32? = nil) {
            self.policyArn = policyArn
            self.marker = marker
            self.maxItems = maxItems
        }

    }

    public struct GetLoginProfileResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure containing the user name and password create date for the user.
        public var loginProfile: LoginProfile = LoginProfile()

        public init() {}

        public init(loginProfile: LoginProfile) {
            self.loginProfile = loginProfile
        }

    }

    public struct ManagedPolicyDetail: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The identifier for the version of the policy that is set as the default (operative) version. For more information about policy versions, see Versioning for Managed Policies in the Using IAM guide. 
        public var defaultVersionId: String? = nil
        /// The stable and unique string identifying the policy. For more information about IDs, see IAM Identifiers in the Using IAM guide.
        public var policyId: String? = nil
        public var arn: String? = nil
        /// Specifies whether the policy can be attached to an IAM user, group, or role.
        public var isAttachable: Bool? = nil
        /// A friendly description of the policy.
        public var description: String? = nil
        /// A list containing information about the versions of the policy.
        public var policyVersionList: [PolicyVersion]? = nil
        /// The date and time, in ISO 8601 date-time format, when the policy was last updated. When a policy has only one version, this field contains the date and time when the policy was created. When a policy has more than one version, this field contains the date and time when the most recent policy version was created.
        public var updateDate: Date? = nil
        /// The path to the policy. For more information about paths, see IAM Identifiers in the Using IAM guide.
        public var path: String? = nil
        /// The date and time, in ISO 8601 date-time format, when the policy was created.
        public var createDate: Date? = nil
        /// The number of principal entities (users, groups, and roles) that the policy is attached to.
        public var attachmentCount: Int32? = nil
        /// The friendly name (not ARN) identifying the policy.
        public var policyName: String? = nil

        public init() {}

        public init(defaultVersionId: String? = nil, policyId: String? = nil, arn: String? = nil, isAttachable: Bool? = nil, description: String? = nil, policyVersionList: [PolicyVersion]? = nil, updateDate: Date? = nil, path: String? = nil, createDate: Date? = nil, attachmentCount: Int32? = nil, policyName: String? = nil) {
            self.defaultVersionId = defaultVersionId
            self.policyId = policyId
            self.arn = arn
            self.isAttachable = isAttachable
            self.description = description
            self.policyVersionList = policyVersionList
            self.updateDate = updateDate
            self.path = path
            self.createDate = createDate
            self.attachmentCount = attachmentCount
            self.policyName = policyName
        }

    }

    public struct GetAccountAuthorizationDetailsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list containing information about IAM roles.
        public var roleDetailList: [RoleDetail]? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil
        /// A list containing information about managed policies.
        public var policies: [ManagedPolicyDetail]? = nil
        /// A list containing information about IAM users.
        public var userDetailList: [UserDetail]? = nil
        /// A list containing information about IAM groups.
        public var groupDetailList: [GroupDetail]? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil

        public init() {}

        public init(roleDetailList: [RoleDetail]? = nil, isTruncated: Bool? = nil, policies: [ManagedPolicyDetail]? = nil, userDetailList: [UserDetail]? = nil, groupDetailList: [GroupDetail]? = nil, marker: String? = nil) {
            self.roleDetailList = roleDetailList
            self.isTruncated = isTruncated
            self.policies = policies
            self.userDetailList = userDetailList
            self.groupDetailList = groupDetailList
            self.marker = marker
        }

    }

    public struct ListUsersResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A list of users.
        public var users: [User] = []
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil

        public init() {}

        public init(marker: String? = nil, users: [User], isTruncated: Bool? = nil) {
            self.marker = marker
            self.users = users
            self.isTruncated = isTruncated
        }

    }

    public struct PolicyVersion: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date and time, in ISO 8601 date-time format, when the policy version was created.
        public var createDate: Date? = nil
        /// The identifier for the policy version. Policy version identifiers always begin with v (always lowercase). When a policy is created, the first policy version is v1. 
        public var versionId: String? = nil
        /// The policy document. The policy document is returned in the response to the GetPolicyVersion and GetAccountAuthorizationDetails operations. It is not returned in the response to the CreatePolicyVersion or ListPolicyVersions operations. 
        public var document: String? = nil
        /// Specifies whether the policy version is set as the policy's default version.
        public var isDefaultVersion: Bool? = nil

        public init() {}

        public init(createDate: Date? = nil, versionId: String? = nil, document: String? = nil, isDefaultVersion: Bool? = nil) {
            self.createDate = createDate
            self.versionId = versionId
            self.document = document
            self.isDefaultVersion = isDefaultVersion
        }

    }

    public struct DeleteInstanceProfileRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the instance profile to delete. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var instanceProfileName: String = ""

        public init() {}

        public init(instanceProfileName: String) {
            self.instanceProfileName = instanceProfileName
        }

    }

    public struct MFADevice: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The user with whom the MFA device is associated.
        public var userName: String = ""
        /// The date when the MFA device was enabled for the user.
        public var enableDate: Date = Date()
        /// The serial number that uniquely identifies the MFA device. For virtual MFA devices, the serial number is the device ARN.
        public var serialNumber: String = ""

        public init() {}

        public init(userName: String, enableDate: Date, serialNumber: String) {
            self.userName = userName
            self.enableDate = enableDate
            self.serialNumber = serialNumber
        }

    }

    public struct ServerCertificateMetadata: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name that identifies the server certificate.
        public var serverCertificateName: String = ""
        ///  The stable and unique string identifying the server certificate. For more information about IDs, see IAM Identifiers in the Using IAM guide. 
        public var serverCertificateId: String = ""
        ///  The Amazon Resource Name (ARN) specifying the server certificate. For more information about ARNs and how to use them in policies, see IAM Identifiers in the Using IAM guide. 
        public var arn: String = ""
        /// The date on which the certificate is set to expire.
        public var expiration: Date? = nil
        /// The date when the server certificate was uploaded.
        public var uploadDate: Date? = nil
        ///  The path to the server certificate. For more information about paths, see IAM Identifiers in the Using IAM guide. 
        public var path: String = ""

        public init() {}

        public init(serverCertificateName: String, serverCertificateId: String, arn: String, expiration: Date? = nil, uploadDate: Date? = nil, path: String) {
            self.serverCertificateName = serverCertificateName
            self.serverCertificateId = serverCertificateId
            self.arn = arn
            self.expiration = expiration
            self.uploadDate = uploadDate
            self.path = path
        }

    }

    public struct GroupDetail: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var arn: String? = nil
        /// The friendly name that identifies the group.
        public var groupName: String? = nil
        /// A list of the inline policies embedded in the group.
        public var groupPolicyList: [PolicyDetail]? = nil
        /// The path to the group. For more information about paths, see IAM Identifiers in the Using IAM guide.
        public var path: String? = nil
        /// The date and time, in ISO 8601 date-time format, when the group was created.
        public var createDate: Date? = nil
        /// The stable and unique string identifying the group. For more information about IDs, see IAM Identifiers in the Using IAM guide.
        public var groupId: String? = nil
        /// A list of the managed policies attached to the group.
        public var attachedManagedPolicies: [AttachedPolicy]? = nil

        public init() {}

        public init(arn: String? = nil, groupName: String? = nil, groupPolicyList: [PolicyDetail]? = nil, path: String? = nil, createDate: Date? = nil, groupId: String? = nil, attachedManagedPolicies: [AttachedPolicy]? = nil) {
            self.arn = arn
            self.groupName = groupName
            self.groupPolicyList = groupPolicyList
            self.path = path
            self.createDate = createDate
            self.groupId = groupId
            self.attachedManagedPolicies = attachedManagedPolicies
        }

    }

    public struct DeleteSigningCertificateRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the signing certificate to delete. The format of this parameter, as described by its regex pattern, is a string of characters that can be upper- or lower-cased letters or digits.
        public var certificateId: String = ""
        /// The name of the user the signing certificate belongs to. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String? = nil

        public init() {}

        public init(certificateId: String, userName: String? = nil) {
            self.certificateId = certificateId
            self.userName = userName
        }

    }

    public struct ListPoliciesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A flag to filter the results to only the attached policies. When OnlyAttached is true, the returned list contains only the policies that are attached to an IAM user, group, or role. When OnlyAttached is false, or when the parameter is not included, all policies are returned.
        public var onlyAttached: Bool? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil
        /// The scope to use for filtering the results. To list only AWS managed policies, set Scope to AWS. To list only the customer managed policies in your AWS account, set Scope to Local. This parameter is optional. If it is not included, or if it is set to All, all policies are returned.
        public var scope: String? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var pathPrefix: String? = nil

        public init() {}

        public init(onlyAttached: Bool? = nil, maxItems: Int32? = nil, scope: String? = nil, marker: String? = nil, pathPrefix: String? = nil) {
            self.onlyAttached = onlyAttached
            self.maxItems = maxItems
            self.scope = scope
            self.marker = marker
            self.pathPrefix = pathPrefix
        }

    }

    public struct ListAccessKeysRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// The name of the user. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil

        public init() {}

        public init(marker: String? = nil, userName: String? = nil, maxItems: Int32? = nil) {
            self.marker = marker
            self.userName = userName
            self.maxItems = maxItems
        }

    }

    public struct ListGroupsForUserRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// The name of the user to list groups for. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil

        public init() {}

        public init(marker: String? = nil, userName: String, maxItems: Int32? = nil) {
            self.marker = marker
            self.userName = userName
            self.maxItems = maxItems
        }

    }

    public struct ListInstanceProfilesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A list of instance profiles.
        public var instanceProfiles: [InstanceProfile] = []
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil

        public init() {}

        public init(marker: String? = nil, instanceProfiles: [InstanceProfile], isTruncated: Bool? = nil) {
            self.marker = marker
            self.instanceProfiles = instanceProfiles
            self.isTruncated = isTruncated
        }

    }

    public struct GetAccountPasswordPolicyResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Contains information about the account password policy.
        public var passwordPolicy: PasswordPolicy = PasswordPolicy()

        public init() {}

        public init(passwordPolicy: PasswordPolicy) {
            self.passwordPolicy = passwordPolicy
        }

    }

    public struct AddClientIDToOpenIDConnectProviderRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The client ID (also known as audience) to add to the IAM OpenID Connect provider resource.
        public var clientID: String = ""
        /// The Amazon Resource Name (ARN) of the IAM OpenID Connect (OIDC) provider resource to add the client ID to. You can get a list of OIDC provider ARNs by using the ListOpenIDConnectProviders action.
        public var openIDConnectProviderArn: String = ""

        public init() {}

        public init(clientID: String, openIDConnectProviderArn: String) {
            self.clientID = clientID
            self.openIDConnectProviderArn = openIDConnectProviderArn
        }

    }

    public struct ListPolicyVersionsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil
        /// A list of policy versions. For more information about managed policy versions, see Versioning for Managed Policies in the IAM User Guide.
        public var versions: [PolicyVersion]? = nil

        public init() {}

        public init(marker: String? = nil, isTruncated: Bool? = nil, versions: [PolicyVersion]? = nil) {
            self.marker = marker
            self.isTruncated = isTruncated
            self.versions = versions
        }

    }

    public struct GetPolicyVersionResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure containing details about the policy version.
        public var policyVersion: PolicyVersion? = nil

        public init() {}

        public init(policyVersion: PolicyVersion? = nil) {
            self.policyVersion = policyVersion
        }

    }

    public struct PolicyUser: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name (friendly name, not ARN) identifying the user.
        public var userName: String? = nil
        /// The stable and unique string identifying the user. For more information about IDs, see IAM Identifiers in the IAM User Guide.
        public var userId: String? = nil

        public init() {}

        public init(userName: String? = nil, userId: String? = nil) {
            self.userName = userName
            self.userId = userId
        }

    }

    public struct ListGroupsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil
        ///  The path prefix for filtering the results. For example, the prefix /division_abc/subdivision_xyz/ gets all groups whose path starts with /division_abc/subdivision_xyz/. This parameter is optional. If it is not included, it defaults to a slash (/), listing all groups. This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var pathPrefix: String? = nil

        public init() {}

        public init(marker: String? = nil, maxItems: Int32? = nil, pathPrefix: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
            self.pathPrefix = pathPrefix
        }

    }

    public struct GetAccessKeyLastUsedRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The identifier of an access key. This parameter allows (per its regex pattern) a string of characters that can consist of any upper or lowercased letter or digit.
        public var accessKeyId: String = ""

        public init() {}

        public init(accessKeyId: String) {
            self.accessKeyId = accessKeyId
        }

    }

    public struct GetRoleResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure containing details about the IAM role.
        public var role: Role = Role()

        public init() {}

        public init(role: Role) {
            self.role = role
        }

    }

    public struct GetPolicyVersionRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the managed policy that you want information about. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var policyArn: String = ""
        /// Identifies the policy version to retrieve. This parameter allows (per its regex pattern) a string of characters that consists of the lowercase letter 'v' followed by one or two digits, and optionally followed by a period '.' and a string of letters and digits.
        public var versionId: String = ""

        public init() {}

        public init(policyArn: String, versionId: String) {
            self.policyArn = policyArn
            self.versionId = versionId
        }

    }

    public struct DeleteServiceSpecificCredentialRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The unique identifier of the service-specific credential. You can get this value by calling ListServiceSpecificCredentials. This parameter allows (per its regex pattern) a string of characters that can consist of any upper or lowercased letter or digit.
        public var serviceSpecificCredentialId: String = ""
        /// The name of the IAM user associated with the service-specific credential. If this value is not specified, then the operation assumes the user whose credentials are used to call the operation. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String? = nil

        public init() {}

        public init(serviceSpecificCredentialId: String, userName: String? = nil) {
            self.serviceSpecificCredentialId = serviceSpecificCredentialId
            self.userName = userName
        }

    }

    public struct ListServiceSpecificCredentialsRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the user whose service-specific credentials you want information about. If this value is not specified then the operation assumes the user whose credentials are used to call the operation. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String? = nil
        /// Filters the returned results to only those for the specified AWS service. If not specified, then AWS returns service-specific credentials for all services.
        public var serviceName: String? = nil

        public init() {}

        public init(userName: String? = nil, serviceName: String? = nil) {
            self.userName = userName
            self.serviceName = serviceName
        }

    }

    public struct GetInstanceProfileResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure containing details about the instance profile.
        public var instanceProfile: InstanceProfile = InstanceProfile()

        public init() {}

        public init(instanceProfile: InstanceProfile) {
            self.instanceProfile = instanceProfile
        }

    }

    public struct UpdateSSHPublicKeyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the IAM user associated with the SSH public key. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""
        /// The status to assign to the SSH public key. Active means the key can be used for authentication with an AWS CodeCommit repository. Inactive means the key cannot be used.
        public var status: String = ""
        /// The unique identifier for the SSH public key. This parameter allows (per its regex pattern) a string of characters that can consist of any upper or lowercased letter or digit.
        public var sSHPublicKeyId: String = ""

        public init() {}

        public init(userName: String, status: String, sSHPublicKeyId: String) {
            self.userName = userName
            self.status = status
            self.sSHPublicKeyId = sSHPublicKeyId
        }

    }

    public struct GetServerCertificateResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure containing details about the server certificate.
        public var serverCertificate: ServerCertificate = ServerCertificate()

        public init() {}

        public init(serverCertificate: ServerCertificate) {
            self.serverCertificate = serverCertificate
        }

    }

    public struct CreateRoleRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the role to create. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-. Role names are not distinguished by case. For example, you cannot create roles named both "PRODROLE" and "prodrole".
        public var roleName: String = ""
        /// The trust relationship policy document that grants an entity permission to assume the role. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D).
        public var assumeRolePolicyDocument: String = ""
        ///  The path to the role. For more information about paths, see IAM Identifiers in the IAM User Guide. This parameter is optional. If it is not included, it defaults to a slash (/). This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var path: String? = nil

        public init() {}

        public init(roleName: String, assumeRolePolicyDocument: String, path: String? = nil) {
            self.roleName = roleName
            self.assumeRolePolicyDocument = assumeRolePolicyDocument
            self.path = path
        }

    }

    public struct GetGroupResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil
        /// A list of users in the group.
        public var users: [User] = []
        /// A structure that contains details about the group.
        public var group: Group = Group()
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil

        public init() {}

        public init(isTruncated: Bool? = nil, users: [User], group: Group, marker: String? = nil) {
            self.isTruncated = isTruncated
            self.users = users
            self.group = group
            self.marker = marker
        }

    }

    public struct DeleteOpenIDConnectProviderRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the IAM OpenID Connect provider resource object to delete. You can get a list of OpenID Connect provider resource ARNs by using the ListOpenIDConnectProviders action.
        public var openIDConnectProviderArn: String = ""

        public init() {}

        public init(openIDConnectProviderArn: String) {
            self.openIDConnectProviderArn = openIDConnectProviderArn
        }

    }

    public struct CreatePolicyVersionResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure containing details about the new policy version.
        public var policyVersion: PolicyVersion? = nil

        public init() {}

        public init(policyVersion: PolicyVersion? = nil) {
            self.policyVersion = policyVersion
        }

    }

    public struct PutGroupPolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the group to associate the policy with. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var groupName: String = ""
        /// The policy document. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D).
        public var policyDocument: String = ""
        /// The name of the policy document. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var policyName: String = ""

        public init() {}

        public init(groupName: String, policyDocument: String, policyName: String) {
            self.groupName = groupName
            self.policyDocument = policyDocument
            self.policyName = policyName
        }

    }

    public struct VirtualMFADevice: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date and time on which the virtual MFA device was enabled.
        public var enableDate: Date? = nil
        ///  A QR code PNG image that encodes otpauth://totp/$virtualMFADeviceName@$AccountName?secret=$Base32String where $virtualMFADeviceName is one of the create call arguments, AccountName is the user name if set (otherwise, the account ID otherwise), and Base32String is the seed in Base32 format. The Base32String value is Base64-encoded. 
        public var qRCodePNG: Data? = nil
        ///  The Base32 seed defined as specified in RFC3548. The Base32StringSeed is Base64-encoded. 
        public var base32StringSeed: Data? = nil
        /// The user to whom the MFA device is assigned.
        public var user: User? = nil
        /// The serial number associated with VirtualMFADevice.
        public var serialNumber: String = ""

        public init() {}

        public init(enableDate: Date? = nil, qRCodePNG: Data? = nil, base32StringSeed: Data? = nil, user: User? = nil, serialNumber: String) {
            self.enableDate = enableDate
            self.qRCodePNG = qRCodePNG
            self.base32StringSeed = base32StringSeed
            self.user = user
            self.serialNumber = serialNumber
        }

    }

    public struct GetRolePolicyResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The role the policy is associated with.
        public var roleName: String = ""
        /// The policy document.
        public var policyDocument: String = ""
        /// The name of the policy.
        public var policyName: String = ""

        public init() {}

        public init(roleName: String, policyDocument: String, policyName: String) {
            self.roleName = roleName
            self.policyDocument = policyDocument
            self.policyName = policyName
        }

    }

    public struct CreateGroupResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure containing details about the new group.
        public var group: Group = Group()

        public init() {}

        public init(group: Group) {
            self.group = group
        }

    }

    public struct UpdateSigningCertificateRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The ID of the signing certificate you want to update. This parameter allows (per its regex pattern) a string of characters that can consist of any upper or lowercased letter or digit.
        public var certificateId: String = ""
        /// The name of the IAM user the signing certificate belongs to. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String? = nil
        ///  The status you want to assign to the certificate. Active means the certificate can be used for API calls to AWS, while Inactive means the certificate cannot be used.
        public var status: String = ""

        public init() {}

        public init(certificateId: String, userName: String? = nil, status: String) {
            self.certificateId = certificateId
            self.userName = userName
            self.status = status
        }

    }

    public struct PolicyDetail: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The policy document.
        public var policyDocument: String? = nil
        /// The name of the policy.
        public var policyName: String? = nil

        public init() {}

        public init(policyDocument: String? = nil, policyName: String? = nil) {
            self.policyDocument = policyDocument
            self.policyName = policyName
        }

    }

    public struct UpdateAccountPasswordPolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specifies whether IAM user passwords must contain at least one numeric character (0 to 9). Default value: false
        public var requireNumbers: Bool? = nil
        /// The number of days that an IAM user password is valid. The default value of 0 means IAM user passwords never expire. Default value: 0
        public var maxPasswordAge: Int32? = nil
        /// Specifies whether IAM user passwords must contain at least one lowercase character from the ISO basic Latin alphabet (a to z). Default value: false
        public var requireLowercaseCharacters: Bool? = nil
        /// The minimum number of characters allowed in an IAM user password. Default value: 6
        public var minimumPasswordLength: Int32? = nil
        /// Specifies the number of previous passwords that IAM users are prevented from reusing. The default value of 0 means IAM users are not prevented from reusing previous passwords. Default value: 0
        public var passwordReusePrevention: Int32? = nil
        /// Specifies whether IAM user passwords must contain at least one of the following non-alphanumeric characters: ! @ # $ % ^ &amp;amp; * ( ) _ + - = [ ] { } | ' Default value: false
        public var requireSymbols: Bool? = nil
        /// Specifies whether IAM user passwords must contain at least one uppercase character from the ISO basic Latin alphabet (A to Z). Default value: false
        public var requireUppercaseCharacters: Bool? = nil
        /// Prevents IAM users from setting a new password after their password has expired. Default value: false
        public var hardExpiry: Bool? = nil
        ///  Allows all IAM users in your account to use the AWS Management Console to change their own passwords. For more information, see Letting IAM Users Change Their Own Passwords in the IAM User Guide. Default value: false
        public var allowUsersToChangePassword: Bool? = nil

        public init() {}

        public init(requireNumbers: Bool? = nil, maxPasswordAge: Int32? = nil, requireLowercaseCharacters: Bool? = nil, minimumPasswordLength: Int32? = nil, passwordReusePrevention: Int32? = nil, requireSymbols: Bool? = nil, requireUppercaseCharacters: Bool? = nil, hardExpiry: Bool? = nil, allowUsersToChangePassword: Bool? = nil) {
            self.requireNumbers = requireNumbers
            self.maxPasswordAge = maxPasswordAge
            self.requireLowercaseCharacters = requireLowercaseCharacters
            self.minimumPasswordLength = minimumPasswordLength
            self.passwordReusePrevention = passwordReusePrevention
            self.requireSymbols = requireSymbols
            self.requireUppercaseCharacters = requireUppercaseCharacters
            self.hardExpiry = hardExpiry
            self.allowUsersToChangePassword = allowUsersToChangePassword
        }

    }

    public struct GetCredentialReportResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Contains the credential report. The report is Base64-encoded.
        public var content: Data? = nil
        /// The format (MIME type) of the credential report.
        public var reportFormat: String? = nil
        ///  The date and time when the credential report was created, in ISO 8601 date-time format.
        public var generatedTime: Date? = nil

        public init() {}

        public init(content: Data? = nil, reportFormat: String? = nil, generatedTime: Date? = nil) {
            self.content = content
            self.reportFormat = reportFormat
            self.generatedTime = generatedTime
        }

    }

    public struct Group: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date and time, in ISO 8601 date-time format, when the group was created.
        public var createDate: Date = Date()
        ///  The Amazon Resource Name (ARN) specifying the group. For more information about ARNs and how to use them in policies, see IAM Identifiers in the Using IAM guide. 
        public var arn: String = ""
        /// The friendly name that identifies the group.
        public var groupName: String = ""
        ///  The stable and unique string identifying the group. For more information about IDs, see IAM Identifiers in the Using IAM guide. 
        public var groupId: String = ""
        /// The path to the group. For more information about paths, see IAM Identifiers in the Using IAM guide. 
        public var path: String = ""

        public init() {}

        public init(createDate: Date, arn: String, groupName: String, groupId: String, path: String) {
            self.createDate = createDate
            self.arn = arn
            self.groupName = groupName
            self.groupId = groupId
            self.path = path
        }

    }

    public struct ListSigningCertificatesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil
        /// A list of the user's signing certificate information.
        public var certificates: [SigningCertificate] = []

        public init() {}

        public init(marker: String? = nil, isTruncated: Bool? = nil, certificates: [SigningCertificate]) {
            self.marker = marker
            self.isTruncated = isTruncated
            self.certificates = certificates
        }

    }

    public struct DetachUserPolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the IAM policy you want to detach. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var policyArn: String = ""
        /// The name (friendly name, not ARN) of the IAM user to detach the policy from. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""

        public init() {}

        public init(policyArn: String, userName: String) {
            self.policyArn = policyArn
            self.userName = userName
        }

    }

    public struct GetRolePolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the role associated with the policy. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var roleName: String = ""
        /// The name of the policy document to get. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var policyName: String = ""

        public init() {}

        public init(roleName: String, policyName: String) {
            self.roleName = roleName
            self.policyName = policyName
        }

    }

    public struct ListAttachedUserPoliciesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil
        /// The name (friendly name, not ARN) of the user to list attached policies for. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var pathPrefix: String? = nil

        public init() {}

        public init(maxItems: Int32? = nil, userName: String, marker: String? = nil, pathPrefix: String? = nil) {
            self.maxItems = maxItems
            self.userName = userName
            self.marker = marker
            self.pathPrefix = pathPrefix
        }

    }

    public struct PolicyGroup: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The stable and unique string identifying the group. For more information about IDs, see IAM Identifiers in the IAM User Guide.
        public var groupId: String? = nil
        /// The name (friendly name, not ARN) identifying the group.
        public var groupName: String? = nil

        public init() {}

        public init(groupId: String? = nil, groupName: String? = nil) {
            self.groupId = groupId
            self.groupName = groupName
        }

    }

    public struct CreateAccessKeyResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure with details about the access key.
        public var accessKey: AccessKey = AccessKey()

        public init() {}

        public init(accessKey: AccessKey) {
            self.accessKey = accessKey
        }

    }

    public struct CreateInstanceProfileResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure containing details about the new instance profile.
        public var instanceProfile: InstanceProfile = InstanceProfile()

        public init() {}

        public init(instanceProfile: InstanceProfile) {
            self.instanceProfile = instanceProfile
        }

    }

    public struct CreateAccessKeyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the IAM user that the new key will belong to. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String? = nil

        public init() {}

        public init(userName: String? = nil) {
            self.userName = userName
        }

    }

    public struct GetAccessKeyLastUsedResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Contains information about the last time the access key was used.
        public var accessKeyLastUsed: AccessKeyLastUsed? = nil
        /// The name of the AWS IAM user that owns this access key. 
        public var userName: String? = nil

        public init() {}

        public init(accessKeyLastUsed: AccessKeyLastUsed? = nil, userName: String? = nil) {
            self.accessKeyLastUsed = accessKeyLastUsed
            self.userName = userName
        }

    }

    public struct GetPolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the managed policy that you want information about. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var policyArn: String = ""

        public init() {}

        public init(policyArn: String) {
            self.policyArn = policyArn
        }

    }

    public struct GetSSHPublicKeyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specifies the public key encoding format to use in the response. To retrieve the public key in ssh-rsa format, use SSH. To retrieve the public key in PEM format, use PEM.
        public var encoding: String = ""
        /// The name of the IAM user associated with the SSH public key. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""
        /// The unique identifier for the SSH public key. This parameter allows (per its regex pattern) a string of characters that can consist of any upper or lowercased letter or digit.
        public var sSHPublicKeyId: String = ""

        public init() {}

        public init(encoding: String, userName: String, sSHPublicKeyId: String) {
            self.encoding = encoding
            self.userName = userName
            self.sSHPublicKeyId = sSHPublicKeyId
        }

    }

    public struct CreateOpenIDConnectProviderResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the new IAM OpenID Connect provider that is created. For more information, see OpenIDConnectProviderListEntry. 
        public var openIDConnectProviderArn: String? = nil

        public init() {}

        public init(openIDConnectProviderArn: String? = nil) {
            self.openIDConnectProviderArn = openIDConnectProviderArn
        }

    }

    public struct ListRolePoliciesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A list of policy names.
        public var policyNames: [String] = []
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil

        public init() {}

        public init(marker: String? = nil, policyNames: [String], isTruncated: Bool? = nil) {
            self.marker = marker
            self.policyNames = policyNames
            self.isTruncated = isTruncated
        }

    }

    public struct UploadSigningCertificateResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Information about the certificate.
        public var certificate: SigningCertificate = SigningCertificate()

        public init() {}

        public init(certificate: SigningCertificate) {
            self.certificate = certificate
        }

    }

    public struct GetPolicyResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure containing details about the policy.
        public var policy: Policy? = nil

        public init() {}

        public init(policy: Policy? = nil) {
            self.policy = policy
        }

    }

    public struct RemoveUserFromGroupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the user to remove. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""
        /// The name of the group to update. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var groupName: String = ""

        public init() {}

        public init(userName: String, groupName: String) {
            self.userName = userName
            self.groupName = groupName
        }

    }

    public struct ServerCertificate: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The contents of the public key certificate chain.
        public var certificateChain: String? = nil
        /// The meta information of the server certificate, such as its name, path, ID, and ARN.
        public var serverCertificateMetadata: ServerCertificateMetadata = ServerCertificateMetadata()
        /// The contents of the public key certificate.
        public var certificateBody: String = ""

        public init() {}

        public init(certificateChain: String? = nil, serverCertificateMetadata: ServerCertificateMetadata, certificateBody: String) {
            self.certificateChain = certificateChain
            self.serverCertificateMetadata = serverCertificateMetadata
            self.certificateBody = certificateBody
        }

    }

    public struct ListSigningCertificatesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// The name of the IAM user whose signing certificates you want to examine. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil

        public init() {}

        public init(marker: String? = nil, userName: String? = nil, maxItems: Int32? = nil) {
            self.marker = marker
            self.userName = userName
            self.maxItems = maxItems
        }

    }

    public struct AttachedPolicy: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        public var policyArn: String? = nil
        /// The friendly name of the attached policy.
        public var policyName: String? = nil

        public init() {}

        public init(policyArn: String? = nil, policyName: String? = nil) {
            self.policyArn = policyArn
            self.policyName = policyName
        }

    }

    public struct Role: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The date and time, in ISO 8601 date-time format, when the role was created.
        public var createDate: Date = Date()
        ///  The stable and unique string identifying the role. For more information about IDs, see IAM Identifiers in the Using IAM guide. 
        public var roleId: String = ""
        ///  The Amazon Resource Name (ARN) specifying the role. For more information about ARNs and how to use them in policies, see IAM Identifiers in the Using IAM guide. 
        public var arn: String = ""
        /// The friendly name that identifies the role.
        public var roleName: String = ""
        /// The policy that grants an entity permission to assume the role.
        public var assumeRolePolicyDocument: String? = nil
        ///  The path to the role. For more information about paths, see IAM Identifiers in the Using IAM guide. 
        public var path: String = ""

        public init() {}

        public init(createDate: Date, roleId: String, arn: String, roleName: String, assumeRolePolicyDocument: String? = nil, path: String) {
            self.createDate = createDate
            self.roleId = roleId
            self.arn = arn
            self.roleName = roleName
            self.assumeRolePolicyDocument = assumeRolePolicyDocument
            self.path = path
        }

    }

    public struct ListAttachedGroupPoliciesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil
        /// The name (friendly name, not ARN) of the group to list attached policies for. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var groupName: String = ""
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// The path prefix for filtering the results. This parameter is optional. If it is not included, it defaults to a slash (/), listing all policies. This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var pathPrefix: String? = nil

        public init() {}

        public init(maxItems: Int32? = nil, groupName: String, marker: String? = nil, pathPrefix: String? = nil) {
            self.maxItems = maxItems
            self.groupName = groupName
            self.marker = marker
            self.pathPrefix = pathPrefix
        }

    }

    public struct ListServerCertificatesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil
        /// A list of server certificates.
        public var serverCertificateMetadataList: [ServerCertificateMetadata] = []

        public init() {}

        public init(marker: String? = nil, isTruncated: Bool? = nil, serverCertificateMetadataList: [ServerCertificateMetadata]) {
            self.marker = marker
            self.isTruncated = isTruncated
            self.serverCertificateMetadataList = serverCertificateMetadataList
        }

    }

    public struct ListRolesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil
        ///  The path prefix for filtering the results. For example, the prefix /application_abc/component_xyz/ gets all roles whose path starts with /application_abc/component_xyz/. This parameter is optional. If it is not included, it defaults to a slash (/), listing all roles. This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var pathPrefix: String? = nil

        public init() {}

        public init(marker: String? = nil, maxItems: Int32? = nil, pathPrefix: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
            self.pathPrefix = pathPrefix
        }

    }

    public struct DeletePolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the IAM policy you want to delete. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var policyArn: String = ""

        public init() {}

        public init(policyArn: String) {
            self.policyArn = policyArn
        }

    }

    public struct DeleteGroupPolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name (friendly name, not ARN) identifying the group that the policy is embedded in. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var groupName: String = ""
        /// The name identifying the policy document to delete. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var policyName: String = ""

        public init() {}

        public init(groupName: String, policyName: String) {
            self.groupName = groupName
            self.policyName = policyName
        }

    }

    public struct ResyncMFADeviceRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the user whose MFA device you want to resynchronize. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""
        /// An authentication code emitted by the device. The format for this parameter is a sequence of six digits.
        public var authenticationCode1: String = ""
        /// Serial number that uniquely identifies the MFA device. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var serialNumber: String = ""
        /// A subsequent authentication code emitted by the device. The format for this parameter is a sequence of six digits.
        public var authenticationCode2: String = ""

        public init() {}

        public init(userName: String, authenticationCode1: String, serialNumber: String, authenticationCode2: String) {
            self.userName = userName
            self.authenticationCode1 = authenticationCode1
            self.serialNumber = serialNumber
            self.authenticationCode2 = authenticationCode2
        }

    }

    public struct ListInstanceProfilesForRoleResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A list of instance profiles.
        public var instanceProfiles: [InstanceProfile] = []
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil

        public init() {}

        public init(marker: String? = nil, instanceProfiles: [InstanceProfile], isTruncated: Bool? = nil) {
            self.marker = marker
            self.instanceProfiles = instanceProfiles
            self.isTruncated = isTruncated
        }

    }

    public struct DeleteSAMLProviderRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the SAML provider to delete.
        public var sAMLProviderArn: String = ""

        public init() {}

        public init(sAMLProviderArn: String) {
            self.sAMLProviderArn = sAMLProviderArn
        }

    }

    public struct PolicyRole: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The stable and unique string identifying the role. For more information about IDs, see IAM Identifiers in the IAM User Guide.
        public var roleId: String? = nil
        /// The name (friendly name, not ARN) identifying the role.
        public var roleName: String? = nil

        public init() {}

        public init(roleId: String? = nil, roleName: String? = nil) {
            self.roleId = roleId
            self.roleName = roleName
        }

    }

    public struct GetContextKeysForCustomPolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of policies for which you want the list of context keys referenced in those policies. Each document is specified as a string containing the complete, valid JSON text of an IAM policy. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D).
        public var policyInputList: [String] = []

        public init() {}

        public init(policyInputList: [String]) {
            self.policyInputList = policyInputList
        }

    }

    public struct ListUsersRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil
        ///  The path prefix for filtering the results. For example: /division_abc/subdivision_xyz/, which would get all user names whose path starts with /division_abc/subdivision_xyz/. This parameter is optional. If it is not included, it defaults to a slash (/), listing all user names. This paramater allows (per its regex pattern) a string of characters consisting of either a forward slash (/) by itself or a string that must begin and end with forward slashes, containing any ASCII character from the ! (\u0021) thru the DEL character (\u007F), including most punctuation characters, digits, and upper and lowercased letters.
        public var pathPrefix: String? = nil

        public init() {}

        public init(marker: String? = nil, maxItems: Int32? = nil, pathPrefix: String? = nil) {
            self.marker = marker
            self.maxItems = maxItems
            self.pathPrefix = pathPrefix
        }

    }

    public struct OrganizationsDecisionDetail: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Specifies whether the simulated action is allowed by the AWS Organizations service control policies that impact the simulated user's account.
        public var allowedByOrganizations: Bool? = nil

        public init() {}

        public init(allowedByOrganizations: Bool? = nil) {
            self.allowedByOrganizations = allowedByOrganizations
        }

    }

    public struct GetContextKeysForPrincipalPolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// An optional list of additional policies for which you want the list of context keys that are referenced. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D).
        public var policyInputList: [String]? = nil
        /// The ARN of a user, group, or role whose policies contain the context keys that you want listed. If you specify a user, the list includes context keys that are found in all policies attached to the user as well as to all groups that the user is a member of. If you pick a group or a role, then it includes only those context keys that are found in policies attached to that entity. Note that all parameters are shown in unencoded form here for clarity, but must be URL encoded to be included as a part of a real HTML request. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var policySourceArn: String = ""

        public init() {}

        public init(policyInputList: [String]? = nil, policySourceArn: String) {
            self.policyInputList = policyInputList
            self.policySourceArn = policySourceArn
        }

    }

    public struct ListGroupPoliciesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil
        /// The name of the group to list policies for. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var groupName: String = ""

        public init() {}

        public init(marker: String? = nil, maxItems: Int32? = nil, groupName: String) {
            self.marker = marker
            self.maxItems = maxItems
            self.groupName = groupName
        }

    }

    public struct DetachGroupPolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The Amazon Resource Name (ARN) of the IAM policy you want to detach. For more information about ARNs, see Amazon Resource Names (ARNs) and AWS Service Namespaces in the AWS General Reference.
        public var policyArn: String = ""
        /// The name (friendly name, not ARN) of the IAM group to detach the policy from. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var groupName: String = ""

        public init() {}

        public init(policyArn: String, groupName: String) {
            self.policyArn = policyArn
            self.groupName = groupName
        }

    }

    public struct ListVirtualMFADevicesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        ///  The list of virtual MFA devices in the current account that match the AssignmentStatus value that was passed in the request.
        public var virtualMFADevices: [VirtualMFADevice] = []
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil

        public init() {}

        public init(virtualMFADevices: [VirtualMFADevice], marker: String? = nil, isTruncated: Bool? = nil) {
            self.virtualMFADevices = virtualMFADevices
            self.marker = marker
            self.isTruncated = isTruncated
        }

    }

    public struct GetInstanceProfileRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the instance profile to get information about. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var instanceProfileName: String = ""

        public init() {}

        public init(instanceProfileName: String) {
            self.instanceProfileName = instanceProfileName
        }

    }

    public struct ListRolesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil
        /// A list of roles.
        public var roles: [Role] = []

        public init() {}

        public init(marker: String? = nil, isTruncated: Bool? = nil, roles: [Role]) {
            self.marker = marker
            self.isTruncated = isTruncated
            self.roles = roles
        }

    }

    public struct DeleteUserPolicyRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name (friendly name, not ARN) identifying the user that the policy is embedded in. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""
        /// The name identifying the policy document to delete. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var policyName: String = ""

        public init() {}

        public init(userName: String, policyName: String) {
            self.userName = userName
            self.policyName = policyName
        }

    }

    public struct ResetServiceSpecificCredentialResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A structure with details about the updated service-specific credential, including the new password.  This is the only time that you can access the password. You cannot recover the password later, but you can reset it again. 
        public var serviceSpecificCredential: ServiceSpecificCredential? = nil

        public init() {}

        public init(serviceSpecificCredential: ServiceSpecificCredential? = nil) {
            self.serviceSpecificCredential = serviceSpecificCredential
        }

    }

    public struct UpdateLoginProfileRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The new password for the specified IAM user. The regex pattern used to validate this parameter is a string of characters consisting of any printable ASCII character ranging from the space character (\u0020) through end of the ASCII character range as well as the printable characters in the Basic Latin and Latin-1 Supplement character set (through \u00FF). It also includes the special characters tab (\u0009), line feed (\u000A), and carriage return (\u000D). However, the format can be further restricted by the account administrator by setting a password policy on the AWS account. For more information, see UpdateAccountPasswordPolicy.
        public var password: String? = nil
        /// The name of the user whose password you want to update. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String = ""
        /// Allows this new password to be used only once by requiring the specified IAM user to set a new password on next sign-in.
        public var passwordResetRequired: Bool? = nil

        public init() {}

        public init(password: String? = nil, userName: String, passwordResetRequired: Bool? = nil) {
            self.password = password
            self.userName = userName
            self.passwordResetRequired = passwordResetRequired
        }

    }

    public struct ListAccountAliasesResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil
        /// A list of aliases associated with the account. AWS supports only one alias per account.
        public var accountAliases: [String] = []

        public init() {}

        public init(marker: String? = nil, isTruncated: Bool? = nil, accountAliases: [String]) {
            self.marker = marker
            self.isTruncated = isTruncated
            self.accountAliases = accountAliases
        }

    }

    public struct ListSSHPublicKeysResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// When IsTruncated is true, this element is present and contains the value to use for the Marker parameter in a subsequent pagination request.
        public var marker: String? = nil
        /// A list of the SSH public keys assigned to IAM user.
        public var sSHPublicKeys: [SSHPublicKeyMetadata]? = nil
        /// A flag that indicates whether there are more items to return. If your results were truncated, you can make a subsequent pagination request using the Marker request parameter to retrieve more items. Note that IAM might return fewer than the MaxItems number of results even when there are more results available. We recommend that you check IsTruncated after every call to ensure that you receive all of your results.
        public var isTruncated: Bool? = nil

        public init() {}

        public init(marker: String? = nil, sSHPublicKeys: [SSHPublicKeyMetadata]? = nil, isTruncated: Bool? = nil) {
            self.marker = marker
            self.sSHPublicKeys = sSHPublicKeys
            self.isTruncated = isTruncated
        }

    }

    public struct ListServiceSpecificCredentialsResponse: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// A list of structures that each contain details about a service-specific credential.
        public var serviceSpecificCredentials: [ServiceSpecificCredentialMetadata]? = nil

        public init() {}

        public init(serviceSpecificCredentials: [ServiceSpecificCredentialMetadata]? = nil) {
            self.serviceSpecificCredentials = serviceSpecificCredentials
        }

    }

    public struct ListMFADevicesRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// Use this parameter only when paginating results and only after you receive a response indicating that the results are truncated. Set it to the value of the Marker element in the response that you received to indicate where the next call should start.
        public var marker: String? = nil
        /// The name of the user whose MFA devices you want to list. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var userName: String? = nil
        /// (Optional) Use this only when paginating results to indicate the maximum number of items you want in the response. If additional items exist beyond the maximum you specify, the IsTruncated response element is true. If you do not include this parameter, it defaults to 100. Note that IAM might return fewer results, even when there are more results available. In that case, the IsTruncated response element returns true and Marker contains a value to include in the subsequent call that tells the service where to continue from.
        public var maxItems: Int32? = nil

        public init() {}

        public init(marker: String? = nil, userName: String? = nil, maxItems: Int32? = nil) {
            self.marker = marker
            self.userName = userName
            self.maxItems = maxItems
        }

    }

    public struct DeleteGroupRequest: AWSShape {
        /// The key for the payload
        public let _payload: String? = nil
        /// The name of the IAM group to delete. This parameter allows (per its regex pattern) a string of characters consisting of upper and lowercase alphanumeric characters with no spaces. You can also include any of the following characters: =,.@-
        public var groupName: String = ""

        public init() {}

        public init(groupName: String) {
            self.groupName = groupName
        }

    }

}