// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Inspector {

    public struct GetExclusionsPreviewRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTemplateArn", required: true, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "previewToken", required: true, type: .string), 
            AWSShapeMember(label: "locale", required: false, type: .enum)
        ]
        /// The ARN that specifies the assessment template for which the exclusions preview was requested.
        public let assessmentTemplateArn: String
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the GetExclusionsPreviewRequest action. Subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 100. The maximum value is 500.
        public let maxResults: Int32?
        /// The unique identifier associated of the exclusions preview.
        public let previewToken: String
        /// The locale into which you want to translate the exclusion's title, description, and recommendation.
        public let locale: Locale?

        public init(assessmentTemplateArn: String, nextToken: String? = nil, maxResults: Int32? = nil, previewToken: String, locale: Locale? = nil) {
            self.assessmentTemplateArn = assessmentTemplateArn
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.previewToken = previewToken
            self.locale = locale
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTemplateArn = "assessmentTemplateArn"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case previewToken = "previewToken"
            case locale = "locale"
        }
    }

    public struct CreateExclusionsPreviewRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTemplateArn", required: true, type: .string)
        ]
        /// The ARN that specifies the assessment template for which you want to create an exclusions preview.
        public let assessmentTemplateArn: String

        public init(assessmentTemplateArn: String) {
            self.assessmentTemplateArn = assessmentTemplateArn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTemplateArn = "assessmentTemplateArn"
        }
    }

    public enum FailedItemErrorCode: String, CustomStringConvertible, Codable {
        case invalidArn = "INVALID_ARN"
        case duplicateArn = "DUPLICATE_ARN"
        case itemDoesNotExist = "ITEM_DOES_NOT_EXIST"
        case accessDenied = "ACCESS_DENIED"
        case limitExceeded = "LIMIT_EXCEEDED"
        case internalError = "INTERNAL_ERROR"
        public var description: String { return self.rawValue }
    }

    public struct ListFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "filter", required: false, type: .structure), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "assessmentRunArns", required: false, type: .list), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        public let filter: FindingFilter?
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListFindings action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// The ARNs of the assessment runs that generate the findings that you want to list.
        public let assessmentRunArns: [String]?
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        public let maxResults: Int32?

        public init(filter: FindingFilter? = nil, nextToken: String? = nil, assessmentRunArns: [String]? = nil, maxResults: Int32? = nil) {
            self.filter = filter
            self.nextToken = nextToken
            self.assessmentRunArns = assessmentRunArns
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "filter"
            case nextToken = "nextToken"
            case assessmentRunArns = "assessmentRunArns"
            case maxResults = "maxResults"
        }
    }

    public struct Exclusion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: true, type: .string), 
            AWSShapeMember(label: "scopes", required: true, type: .list), 
            AWSShapeMember(label: "attributes", required: false, type: .list), 
            AWSShapeMember(label: "title", required: true, type: .string), 
            AWSShapeMember(label: "arn", required: true, type: .string), 
            AWSShapeMember(label: "recommendation", required: true, type: .string)
        ]
        /// The description of the exclusion.
        public let description: String
        /// The AWS resources for which the exclusion pertains.
        public let scopes: [Scope]
        /// The system-defined attributes for the exclusion.
        public let attributes: [Attribute]?
        /// The name of the exclusion.
        public let title: String
        /// The ARN that specifies the exclusion.
        public let arn: String
        /// The recommendation for the exclusion.
        public let recommendation: String

        public init(description: String, scopes: [Scope], attributes: [Attribute]? = nil, title: String, arn: String, recommendation: String) {
            self.description = description
            self.scopes = scopes
            self.attributes = attributes
            self.title = title
            self.arn = arn
            self.recommendation = recommendation
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case scopes = "scopes"
            case attributes = "attributes"
            case title = "title"
            case arn = "arn"
            case recommendation = "recommendation"
        }
    }

    public enum PreviewStatus: String, CustomStringConvertible, Codable {
        case workInProgress = "WORK_IN_PROGRESS"
        case completed = "COMPLETED"
        public var description: String { return self.rawValue }
    }

    public struct CreateAssessmentTemplateResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTemplateArn", required: true, type: .string)
        ]
        /// The ARN that specifies the assessment template that is created.
        public let assessmentTemplateArn: String

        public init(assessmentTemplateArn: String) {
            self.assessmentTemplateArn = assessmentTemplateArn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTemplateArn = "assessmentTemplateArn"
        }
    }

    public struct AssessmentRunAgent: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentId", required: true, type: .string), 
            AWSShapeMember(label: "telemetryMetadata", required: true, type: .list), 
            AWSShapeMember(label: "assessmentRunArn", required: true, type: .string), 
            AWSShapeMember(label: "agentHealth", required: true, type: .enum), 
            AWSShapeMember(label: "agentHealthCode", required: true, type: .enum), 
            AWSShapeMember(label: "agentHealthDetails", required: false, type: .string), 
            AWSShapeMember(label: "autoScalingGroup", required: false, type: .string)
        ]
        /// The AWS account of the EC2 instance where the agent is installed.
        public let agentId: String
        /// The Amazon Inspector application data metrics that are collected by the agent.
        public let telemetryMetadata: [TelemetryMetadata]
        /// The ARN of the assessment run that is associated with the agent.
        public let assessmentRunArn: String
        /// The current health state of the agent.
        public let agentHealth: AgentHealth
        /// The detailed health state of the agent.
        public let agentHealthCode: AgentHealthCode
        /// The description for the agent health code.
        public let agentHealthDetails: String?
        /// The Auto Scaling group of the EC2 instance that is specified by the agent ID.
        public let autoScalingGroup: String?

        public init(agentId: String, telemetryMetadata: [TelemetryMetadata], assessmentRunArn: String, agentHealth: AgentHealth, agentHealthCode: AgentHealthCode, agentHealthDetails: String? = nil, autoScalingGroup: String? = nil) {
            self.agentId = agentId
            self.telemetryMetadata = telemetryMetadata
            self.assessmentRunArn = assessmentRunArn
            self.agentHealth = agentHealth
            self.agentHealthCode = agentHealthCode
            self.agentHealthDetails = agentHealthDetails
            self.autoScalingGroup = autoScalingGroup
        }

        private enum CodingKeys: String, CodingKey {
            case agentId = "agentId"
            case telemetryMetadata = "telemetryMetadata"
            case assessmentRunArn = "assessmentRunArn"
            case agentHealth = "agentHealth"
            case agentHealthCode = "agentHealthCode"
            case agentHealthDetails = "agentHealthDetails"
            case autoScalingGroup = "autoScalingGroup"
        }
    }

    public struct ListAssessmentRunAgentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "filter", required: false, type: .structure), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "assessmentRunArn", required: true, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        public let filter: AgentFilter?
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListAssessmentRunAgents action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// The ARN that specifies the assessment run whose agents you want to list.
        public let assessmentRunArn: String
        /// You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 10. The maximum value is 500.
        public let maxResults: Int32?

        public init(filter: AgentFilter? = nil, nextToken: String? = nil, assessmentRunArn: String, maxResults: Int32? = nil) {
            self.filter = filter
            self.nextToken = nextToken
            self.assessmentRunArn = assessmentRunArn
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "filter"
            case nextToken = "nextToken"
            case assessmentRunArn = "assessmentRunArn"
            case maxResults = "maxResults"
        }
    }

    public struct ListRulesPackagesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rulesPackageArns", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The list of ARNs that specifies the rules packages returned by the action.
        public let rulesPackageArns: [String]
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public let nextToken: String?

        public init(rulesPackageArns: [String], nextToken: String? = nil) {
            self.rulesPackageArns = rulesPackageArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case rulesPackageArns = "rulesPackageArns"
            case nextToken = "nextToken"
        }
    }

    public struct UpdateAssessmentTargetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTargetName", required: true, type: .string), 
            AWSShapeMember(label: "resourceGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "assessmentTargetArn", required: true, type: .string)
        ]
        /// The name of the assessment target that you want to update.
        public let assessmentTargetName: String
        /// The ARN of the resource group that is used to specify the new resource group to associate with the assessment target.
        public let resourceGroupArn: String?
        /// The ARN of the assessment target that you want to update.
        public let assessmentTargetArn: String

        public init(assessmentTargetName: String, resourceGroupArn: String? = nil, assessmentTargetArn: String) {
            self.assessmentTargetName = assessmentTargetName
            self.resourceGroupArn = resourceGroupArn
            self.assessmentTargetArn = assessmentTargetArn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTargetName = "assessmentTargetName"
            case resourceGroupArn = "resourceGroupArn"
            case assessmentTargetArn = "assessmentTargetArn"
        }
    }

    public struct ListExclusionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentRunArn", required: true, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// The ARN of the assessment run that generated the exclusions that you want to list.
        public let assessmentRunArn: String
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListExclusionsRequest action. Subsequent calls to the action fill nextToken in the request with the value of nextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 100. The maximum value is 500.
        public let maxResults: Int32?

        public init(assessmentRunArn: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.assessmentRunArn = assessmentRunArn
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentRunArn = "assessmentRunArn"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct AssessmentRunStateChange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "state", required: true, type: .enum), 
            AWSShapeMember(label: "stateChangedAt", required: true, type: .timestamp)
        ]
        /// The assessment run state.
        public let state: AssessmentRunState
        /// The last time the assessment run state changed.
        public let stateChangedAt: TimeStamp

        public init(state: AssessmentRunState, stateChangedAt: TimeStamp) {
            self.state = state
            self.stateChangedAt = stateChangedAt
        }

        private enum CodingKeys: String, CodingKey {
            case state = "state"
            case stateChangedAt = "stateChangedAt"
        }
    }

    public struct ListAssessmentTemplatesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTemplateArns", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of ARNs that specifies the assessment templates returned by the action.
        public let assessmentTemplateArns: [String]
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public let nextToken: String?

        public init(assessmentTemplateArns: [String], nextToken: String? = nil) {
            self.assessmentTemplateArns = assessmentTemplateArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTemplateArns = "assessmentTemplateArns"
            case nextToken = "nextToken"
        }
    }

    public struct FindingFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userAttributes", required: false, type: .list), 
            AWSShapeMember(label: "creationTimeRange", required: false, type: .structure), 
            AWSShapeMember(label: "severities", required: false, type: .list), 
            AWSShapeMember(label: "rulesPackageArns", required: false, type: .list), 
            AWSShapeMember(label: "attributes", required: false, type: .list), 
            AWSShapeMember(label: "autoScalingGroups", required: false, type: .list), 
            AWSShapeMember(label: "agentIds", required: false, type: .list), 
            AWSShapeMember(label: "ruleNames", required: false, type: .list)
        ]
        /// For a record to match a filter, the value that is specified for this data type property must be contained in the list of values of the userAttributes property of the Finding data type.
        public let userAttributes: [Attribute]?
        /// The time range during which the finding is generated.
        public let creationTimeRange: TimestampRange?
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the severity property of the Finding data type.
        public let severities: [Severity]?
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the rulesPackageArn property of the Finding data type.
        public let rulesPackageArns: [String]?
        /// For a record to match a filter, the list of values that are specified for this data type property must be contained in the list of values of the attributes property of the Finding data type.
        public let attributes: [Attribute]?
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the autoScalingGroup property of the Finding data type.
        public let autoScalingGroups: [String]?
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the agentId property of the Finding data type.
        public let agentIds: [String]?
        /// For a record to match a filter, one of the values that is specified for this data type property must be the exact match of the value of the ruleName property of the Finding data type.
        public let ruleNames: [String]?

        public init(userAttributes: [Attribute]? = nil, creationTimeRange: TimestampRange? = nil, severities: [Severity]? = nil, rulesPackageArns: [String]? = nil, attributes: [Attribute]? = nil, autoScalingGroups: [String]? = nil, agentIds: [String]? = nil, ruleNames: [String]? = nil) {
            self.userAttributes = userAttributes
            self.creationTimeRange = creationTimeRange
            self.severities = severities
            self.rulesPackageArns = rulesPackageArns
            self.attributes = attributes
            self.autoScalingGroups = autoScalingGroups
            self.agentIds = agentIds
            self.ruleNames = ruleNames
        }

        private enum CodingKeys: String, CodingKey {
            case userAttributes = "userAttributes"
            case creationTimeRange = "creationTimeRange"
            case severities = "severities"
            case rulesPackageArns = "rulesPackageArns"
            case attributes = "attributes"
            case autoScalingGroups = "autoScalingGroups"
            case agentIds = "agentIds"
            case ruleNames = "ruleNames"
        }
    }

    public struct DeleteAssessmentTargetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTargetArn", required: true, type: .string)
        ]
        /// The ARN that specifies the assessment target that you want to delete.
        public let assessmentTargetArn: String

        public init(assessmentTargetArn: String) {
            self.assessmentTargetArn = assessmentTargetArn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTargetArn = "assessmentTargetArn"
        }
    }

    public struct SubscribeToEventRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "event", required: true, type: .enum), 
            AWSShapeMember(label: "topicArn", required: true, type: .string)
        ]
        /// The ARN of the assessment template that is used during the event for which you want to receive SNS notifications.
        public let resourceArn: String
        /// The event for which you want to receive SNS notifications.
        public let event: InspectorEvent
        /// The ARN of the SNS topic to which the SNS notifications are sent.
        public let topicArn: String

        public init(resourceArn: String, event: InspectorEvent, topicArn: String) {
            self.resourceArn = resourceArn
            self.event = event
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case event = "event"
            case topicArn = "topicArn"
        }
    }

    public struct GetAssessmentReportRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "reportFileFormat", required: true, type: .enum), 
            AWSShapeMember(label: "assessmentRunArn", required: true, type: .string), 
            AWSShapeMember(label: "reportType", required: true, type: .enum)
        ]
        /// Specifies the file format (html or pdf) of the assessment report that you want to generate.
        public let reportFileFormat: ReportFileFormat
        /// The ARN that specifies the assessment run for which you want to generate a report.
        public let assessmentRunArn: String
        /// Specifies the type of the assessment report that you want to generate. There are two types of assessment reports: a finding report and a full report. For more information, see Assessment Reports. 
        public let reportType: ReportType

        public init(reportFileFormat: ReportFileFormat, assessmentRunArn: String, reportType: ReportType) {
            self.reportFileFormat = reportFileFormat
            self.assessmentRunArn = assessmentRunArn
            self.reportType = reportType
        }

        private enum CodingKeys: String, CodingKey {
            case reportFileFormat = "reportFileFormat"
            case assessmentRunArn = "assessmentRunArn"
            case reportType = "reportType"
        }
    }

    public struct DescribeAssessmentRunsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failedItems", required: true, type: .map), 
            AWSShapeMember(label: "assessmentRuns", required: true, type: .list)
        ]
        /// Assessment run details that cannot be described. An error code is provided for each failed item.
        public let failedItems: [String: FailedItemDetails]
        /// Information about the assessment run.
        public let assessmentRuns: [AssessmentRun]

        public init(failedItems: [String: FailedItemDetails], assessmentRuns: [AssessmentRun]) {
            self.failedItems = failedItems
            self.assessmentRuns = assessmentRuns
        }

        private enum CodingKeys: String, CodingKey {
            case failedItems = "failedItems"
            case assessmentRuns = "assessmentRuns"
        }
    }

    public struct ListAssessmentRunsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "assessmentRunArns", required: true, type: .list)
        ]
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public let nextToken: String?
        /// A list of ARNs that specifies the assessment runs that are returned by the action.
        public let assessmentRunArns: [String]

        public init(nextToken: String? = nil, assessmentRunArns: [String]) {
            self.nextToken = nextToken
            self.assessmentRunArns = assessmentRunArns
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case assessmentRunArns = "assessmentRunArns"
        }
    }

    public struct Scope: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: false, type: .enum), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]
        /// The type of the scope.
        public let key: ScopeType?
        /// The resource identifier for the specified scope type.
        public let value: String?

        public init(key: ScopeType? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct TimestampRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "beginDate", required: false, type: .timestamp), 
            AWSShapeMember(label: "endDate", required: false, type: .timestamp)
        ]
        /// The minimum value of the timestamp range.
        public let beginDate: TimeStamp?
        /// The maximum value of the timestamp range.
        public let endDate: TimeStamp?

        public init(beginDate: TimeStamp? = nil, endDate: TimeStamp? = nil) {
            self.beginDate = beginDate
            self.endDate = endDate
        }

        private enum CodingKeys: String, CodingKey {
            case beginDate = "beginDate"
            case endDate = "endDate"
        }
    }

    public struct DescribeExclusionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "locale", required: false, type: .enum), 
            AWSShapeMember(label: "exclusionArns", required: true, type: .list)
        ]
        /// The locale into which you want to translate the exclusion's title, description, and recommendation.
        public let locale: Locale?
        /// The list of ARNs that specify the exclusions that you want to describe.
        public let exclusionArns: [String]

        public init(locale: Locale? = nil, exclusionArns: [String]) {
            self.locale = locale
            self.exclusionArns = exclusionArns
        }

        private enum CodingKeys: String, CodingKey {
            case locale = "locale"
            case exclusionArns = "exclusionArns"
        }
    }

    public enum Severity: String, CustomStringConvertible, Codable {
        case low = "Low"
        case medium = "Medium"
        case high = "High"
        case informational = "Informational"
        case undefined = "Undefined"
        public var description: String { return self.rawValue }
    }

    public struct TelemetryMetadata: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "messageType", required: true, type: .string), 
            AWSShapeMember(label: "count", required: true, type: .long), 
            AWSShapeMember(label: "dataSize", required: false, type: .long)
        ]
        /// A specific type of behavioral data that is collected by the agent.
        public let messageType: String
        /// The count of messages that the agent sends to the Amazon Inspector service.
        public let count: Int64
        /// The data size of messages that the agent sends to the Amazon Inspector service.
        public let dataSize: Int64?

        public init(messageType: String, count: Int64, dataSize: Int64? = nil) {
            self.messageType = messageType
            self.count = count
            self.dataSize = dataSize
        }

        private enum CodingKeys: String, CodingKey {
            case messageType = "messageType"
            case count = "count"
            case dataSize = "dataSize"
        }
    }

    public struct AssessmentRunFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "startTimeRange", required: false, type: .structure), 
            AWSShapeMember(label: "stateChangeTimeRange", required: false, type: .structure), 
            AWSShapeMember(label: "durationRange", required: false, type: .structure), 
            AWSShapeMember(label: "rulesPackageArns", required: false, type: .list), 
            AWSShapeMember(label: "states", required: false, type: .list), 
            AWSShapeMember(label: "namePattern", required: false, type: .string), 
            AWSShapeMember(label: "completionTimeRange", required: false, type: .structure)
        ]
        /// For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the startTime property of the AssessmentRun data type.
        public let startTimeRange: TimestampRange?
        /// For a record to match a filter, the value that is specified for this data type property must match the stateChangedAt property of the AssessmentRun data type.
        public let stateChangeTimeRange: TimestampRange?
        /// For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the durationInSeconds property of the AssessmentRun data type.
        public let durationRange: DurationRange?
        /// For a record to match a filter, the value that is specified for this data type property must be contained in the list of values of the rulesPackages property of the AssessmentRun data type.
        public let rulesPackageArns: [String]?
        /// For a record to match a filter, one of the values specified for this data type property must be the exact match of the value of the assessmentRunState property of the AssessmentRun data type.
        public let states: [AssessmentRunState]?
        /// For a record to match a filter, an explicit value or a string containing a wildcard that is specified for this data type property must match the value of the assessmentRunName property of the AssessmentRun data type.
        public let namePattern: String?
        /// For a record to match a filter, the value that is specified for this data type property must inclusively match any value between the specified minimum and maximum values of the completedAt property of the AssessmentRun data type.
        public let completionTimeRange: TimestampRange?

        public init(startTimeRange: TimestampRange? = nil, stateChangeTimeRange: TimestampRange? = nil, durationRange: DurationRange? = nil, rulesPackageArns: [String]? = nil, states: [AssessmentRunState]? = nil, namePattern: String? = nil, completionTimeRange: TimestampRange? = nil) {
            self.startTimeRange = startTimeRange
            self.stateChangeTimeRange = stateChangeTimeRange
            self.durationRange = durationRange
            self.rulesPackageArns = rulesPackageArns
            self.states = states
            self.namePattern = namePattern
            self.completionTimeRange = completionTimeRange
        }

        private enum CodingKeys: String, CodingKey {
            case startTimeRange = "startTimeRange"
            case stateChangeTimeRange = "stateChangeTimeRange"
            case durationRange = "durationRange"
            case rulesPackageArns = "rulesPackageArns"
            case states = "states"
            case namePattern = "namePattern"
            case completionTimeRange = "completionTimeRange"
        }
    }

    public enum StopAction: String, CustomStringConvertible, Codable {
        case startEvaluation = "START_EVALUATION"
        case skipEvaluation = "SKIP_EVALUATION"
        public var description: String { return self.rawValue }
    }

    public struct RemoveAttributesFromFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "findingArns", required: true, type: .list), 
            AWSShapeMember(label: "attributeKeys", required: true, type: .list)
        ]
        /// The ARNs that specify the findings that you want to remove attributes from.
        public let findingArns: [String]
        /// The array of attribute keys that you want to remove from specified findings.
        public let attributeKeys: [String]

        public init(findingArns: [String], attributeKeys: [String]) {
            self.findingArns = findingArns
            self.attributeKeys = attributeKeys
        }

        private enum CodingKeys: String, CodingKey {
            case findingArns = "findingArns"
            case attributeKeys = "attributeKeys"
        }
    }

    public struct Subscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "eventSubscriptions", required: true, type: .list), 
            AWSShapeMember(label: "topicArn", required: true, type: .string)
        ]
        /// The ARN of the assessment template that is used during the event for which the SNS notification is sent.
        public let resourceArn: String
        /// The list of existing event subscriptions.
        public let eventSubscriptions: [EventSubscription]
        /// The ARN of the Amazon Simple Notification Service (SNS) topic to which the SNS notifications are sent.
        public let topicArn: String

        public init(resourceArn: String, eventSubscriptions: [EventSubscription], topicArn: String) {
            self.resourceArn = resourceArn
            self.eventSubscriptions = eventSubscriptions
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case eventSubscriptions = "eventSubscriptions"
            case topicArn = "topicArn"
        }
    }

    public struct AgentPreview: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentId", required: true, type: .string), 
            AWSShapeMember(label: "operatingSystem", required: false, type: .string), 
            AWSShapeMember(label: "ipv4Address", required: false, type: .string), 
            AWSShapeMember(label: "agentVersion", required: false, type: .string), 
            AWSShapeMember(label: "agentHealth", required: false, type: .enum), 
            AWSShapeMember(label: "hostname", required: false, type: .string), 
            AWSShapeMember(label: "kernelVersion", required: false, type: .string), 
            AWSShapeMember(label: "autoScalingGroup", required: false, type: .string)
        ]
        /// The ID of the EC2 instance where the agent is installed.
        public let agentId: String
        /// The operating system running on the EC2 instance on which the Amazon Inspector Agent is installed.
        public let operatingSystem: String?
        /// The IP address of the EC2 instance on which the Amazon Inspector Agent is installed.
        public let ipv4Address: String?
        /// The version of the Amazon Inspector Agent.
        public let agentVersion: String?
        /// The health status of the Amazon Inspector Agent.
        public let agentHealth: AgentHealth?
        /// The hostname of the EC2 instance on which the Amazon Inspector Agent is installed.
        public let hostname: String?
        /// The kernel version of the operating system running on the EC2 instance on which the Amazon Inspector Agent is installed.
        public let kernelVersion: String?
        /// The Auto Scaling group for the EC2 instance where the agent is installed.
        public let autoScalingGroup: String?

        public init(agentId: String, operatingSystem: String? = nil, ipv4Address: String? = nil, agentVersion: String? = nil, agentHealth: AgentHealth? = nil, hostname: String? = nil, kernelVersion: String? = nil, autoScalingGroup: String? = nil) {
            self.agentId = agentId
            self.operatingSystem = operatingSystem
            self.ipv4Address = ipv4Address
            self.agentVersion = agentVersion
            self.agentHealth = agentHealth
            self.hostname = hostname
            self.kernelVersion = kernelVersion
            self.autoScalingGroup = autoScalingGroup
        }

        private enum CodingKeys: String, CodingKey {
            case agentId = "agentId"
            case operatingSystem = "operatingSystem"
            case ipv4Address = "ipv4Address"
            case agentVersion = "agentVersion"
            case agentHealth = "agentHealth"
            case hostname = "hostname"
            case kernelVersion = "kernelVersion"
            case autoScalingGroup = "autoScalingGroup"
        }
    }

    public struct DescribeAssessmentTemplatesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTemplates", required: true, type: .list), 
            AWSShapeMember(label: "failedItems", required: true, type: .map)
        ]
        /// Information about the assessment templates.
        public let assessmentTemplates: [AssessmentTemplate]
        /// Assessment template details that cannot be described. An error code is provided for each failed item.
        public let failedItems: [String: FailedItemDetails]

        public init(assessmentTemplates: [AssessmentTemplate], failedItems: [String: FailedItemDetails]) {
            self.assessmentTemplates = assessmentTemplates
            self.failedItems = failedItems
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTemplates = "assessmentTemplates"
            case failedItems = "failedItems"
        }
    }

    public struct ExclusionPreview: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: true, type: .string), 
            AWSShapeMember(label: "scopes", required: true, type: .list), 
            AWSShapeMember(label: "attributes", required: false, type: .list), 
            AWSShapeMember(label: "title", required: true, type: .string), 
            AWSShapeMember(label: "recommendation", required: true, type: .string)
        ]
        /// The description of the exclusion preview.
        public let description: String
        /// The AWS resources for which the exclusion preview pertains.
        public let scopes: [Scope]
        /// The system-defined attributes for the exclusion preview.
        public let attributes: [Attribute]?
        /// The name of the exclusion preview.
        public let title: String
        /// The recommendation for the exclusion preview.
        public let recommendation: String

        public init(description: String, scopes: [Scope], attributes: [Attribute]? = nil, title: String, recommendation: String) {
            self.description = description
            self.scopes = scopes
            self.attributes = attributes
            self.title = title
            self.recommendation = recommendation
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case scopes = "scopes"
            case attributes = "attributes"
            case title = "title"
            case recommendation = "recommendation"
        }
    }

    public struct Attribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]
        /// The attribute key.
        public let key: String
        /// The value assigned to the attribute key.
        public let value: String?

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct AssessmentTargetFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTargetNamePattern", required: false, type: .string)
        ]
        /// For a record to match a filter, an explicit value or a string that contains a wildcard that is specified for this data type property must match the value of the assessmentTargetName property of the AssessmentTarget data type.
        public let assessmentTargetNamePattern: String?

        public init(assessmentTargetNamePattern: String? = nil) {
            self.assessmentTargetNamePattern = assessmentTargetNamePattern
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTargetNamePattern = "assessmentTargetNamePattern"
        }
    }

    public struct StartAssessmentRunRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTemplateArn", required: true, type: .string), 
            AWSShapeMember(label: "assessmentRunName", required: false, type: .string)
        ]
        /// The ARN of the assessment template of the assessment run that you want to start.
        public let assessmentTemplateArn: String
        /// You can specify the name for the assessment run. The name must be unique for the assessment template whose ARN is used to start the assessment run.
        public let assessmentRunName: String?

        public init(assessmentTemplateArn: String, assessmentRunName: String? = nil) {
            self.assessmentTemplateArn = assessmentTemplateArn
            self.assessmentRunName = assessmentRunName
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTemplateArn = "assessmentTemplateArn"
            case assessmentRunName = "assessmentRunName"
        }
    }

    public struct CreateResourceGroupResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceGroupArn", required: true, type: .string)
        ]
        /// The ARN that specifies the resource group that is created.
        public let resourceGroupArn: String

        public init(resourceGroupArn: String) {
            self.resourceGroupArn = resourceGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceGroupArn = "resourceGroupArn"
        }
    }

    public enum AccessDeniedErrorCode: String, CustomStringConvertible, Codable {
        case accessDeniedToAssessmentTarget = "ACCESS_DENIED_TO_ASSESSMENT_TARGET"
        case accessDeniedToAssessmentTemplate = "ACCESS_DENIED_TO_ASSESSMENT_TEMPLATE"
        case accessDeniedToAssessmentRun = "ACCESS_DENIED_TO_ASSESSMENT_RUN"
        case accessDeniedToFinding = "ACCESS_DENIED_TO_FINDING"
        case accessDeniedToResourceGroup = "ACCESS_DENIED_TO_RESOURCE_GROUP"
        case accessDeniedToRulesPackage = "ACCESS_DENIED_TO_RULES_PACKAGE"
        case accessDeniedToSnsTopic = "ACCESS_DENIED_TO_SNS_TOPIC"
        case accessDeniedToIamRole = "ACCESS_DENIED_TO_IAM_ROLE"
        public var description: String { return self.rawValue }
    }

    public struct AssessmentTemplate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userAttributesForFindings", required: true, type: .list), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "lastAssessmentRunArn", required: false, type: .string), 
            AWSShapeMember(label: "assessmentTargetArn", required: true, type: .string), 
            AWSShapeMember(label: "assessmentRunCount", required: true, type: .integer), 
            AWSShapeMember(label: "rulesPackageArns", required: true, type: .list), 
            AWSShapeMember(label: "arn", required: true, type: .string), 
            AWSShapeMember(label: "durationInSeconds", required: true, type: .integer), 
            AWSShapeMember(label: "createdAt", required: true, type: .timestamp)
        ]
        /// The user-defined attributes that are assigned to every generated finding from the assessment run that uses this assessment template.
        public let userAttributesForFindings: [Attribute]
        /// The name of the assessment template.
        public let name: String
        /// The Amazon Resource Name (ARN) of the most recent assessment run associated with this assessment template. This value exists only when the value of assessmentRunCount is greaterpa than zero.
        public let lastAssessmentRunArn: String?
        /// The ARN of the assessment target that corresponds to this assessment template.
        public let assessmentTargetArn: String
        /// The number of existing assessment runs associated with this assessment template. This value can be zero or a positive integer.
        public let assessmentRunCount: Int32
        /// The rules packages that are specified for this assessment template.
        public let rulesPackageArns: [String]
        /// The ARN of the assessment template.
        public let arn: String
        /// The duration in seconds specified for this assessment template. The default value is 3600 seconds (one hour). The maximum value is 86400 seconds (one day).
        public let durationInSeconds: Int32
        /// The time at which the assessment template is created.
        public let createdAt: TimeStamp

        public init(userAttributesForFindings: [Attribute], name: String, lastAssessmentRunArn: String? = nil, assessmentTargetArn: String, assessmentRunCount: Int32, rulesPackageArns: [String], arn: String, durationInSeconds: Int32, createdAt: TimeStamp) {
            self.userAttributesForFindings = userAttributesForFindings
            self.name = name
            self.lastAssessmentRunArn = lastAssessmentRunArn
            self.assessmentTargetArn = assessmentTargetArn
            self.assessmentRunCount = assessmentRunCount
            self.rulesPackageArns = rulesPackageArns
            self.arn = arn
            self.durationInSeconds = durationInSeconds
            self.createdAt = createdAt
        }

        private enum CodingKeys: String, CodingKey {
            case userAttributesForFindings = "userAttributesForFindings"
            case name = "name"
            case lastAssessmentRunArn = "lastAssessmentRunArn"
            case assessmentTargetArn = "assessmentTargetArn"
            case assessmentRunCount = "assessmentRunCount"
            case rulesPackageArns = "rulesPackageArns"
            case arn = "arn"
            case durationInSeconds = "durationInSeconds"
            case createdAt = "createdAt"
        }
    }

    public struct DurationRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "minSeconds", required: false, type: .integer), 
            AWSShapeMember(label: "maxSeconds", required: false, type: .integer)
        ]
        /// The minimum value of the duration range. Must be greater than zero.
        public let minSeconds: Int32?
        /// The maximum value of the duration range. Must be less than or equal to 604800 seconds (1 week).
        public let maxSeconds: Int32?

        public init(minSeconds: Int32? = nil, maxSeconds: Int32? = nil) {
            self.minSeconds = minSeconds
            self.maxSeconds = maxSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case minSeconds = "minSeconds"
            case maxSeconds = "maxSeconds"
        }
    }

    public struct ListTagsForResourceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: true, type: .list)
        ]
        /// A collection of key and value pairs.
        public let tags: [Tag]

        public init(tags: [Tag]) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct AgentFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentHealthCodes", required: true, type: .list), 
            AWSShapeMember(label: "agentHealths", required: true, type: .list)
        ]
        /// The detailed health state of the agent. Values can be set to IDLE, RUNNING, SHUTDOWN, UNHEALTHY, THROTTLED, and UNKNOWN. 
        public let agentHealthCodes: [AgentHealthCode]
        /// The current health state of the agent. Values can be set to HEALTHY or UNHEALTHY.
        public let agentHealths: [AgentHealth]

        public init(agentHealthCodes: [AgentHealthCode], agentHealths: [AgentHealth]) {
            self.agentHealthCodes = agentHealthCodes
            self.agentHealths = agentHealths
        }

        private enum CodingKeys: String, CodingKey {
            case agentHealthCodes = "agentHealthCodes"
            case agentHealths = "agentHealths"
        }
    }

    public struct ListRulesPackagesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListRulesPackages action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct DescribeRulesPackagesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rulesPackageArns", required: true, type: .list), 
            AWSShapeMember(label: "locale", required: false, type: .enum)
        ]
        /// The ARN that specifies the rules package that you want to describe.
        public let rulesPackageArns: [String]
        /// The locale that you want to translate a rules package description into.
        public let locale: Locale?

        public init(rulesPackageArns: [String], locale: Locale? = nil) {
            self.rulesPackageArns = rulesPackageArns
            self.locale = locale
        }

        private enum CodingKeys: String, CodingKey {
            case rulesPackageArns = "rulesPackageArns"
            case locale = "locale"
        }
    }

    public enum ReportType: String, CustomStringConvertible, Codable {
        case finding = "FINDING"
        case full = "FULL"
        public var description: String { return self.rawValue }
    }

    public struct InspectorServiceAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentRunArn", required: false, type: .string), 
            AWSShapeMember(label: "rulesPackageArn", required: false, type: .string), 
            AWSShapeMember(label: "schemaVersion", required: true, type: .integer)
        ]
        /// The ARN of the assessment run during which the finding is generated.
        public let assessmentRunArn: String?
        /// The ARN of the rules package that is used to generate the finding.
        public let rulesPackageArn: String?
        /// The schema version of this data type.
        public let schemaVersion: Int32

        public init(assessmentRunArn: String? = nil, rulesPackageArn: String? = nil, schemaVersion: Int32) {
            self.assessmentRunArn = assessmentRunArn
            self.rulesPackageArn = rulesPackageArn
            self.schemaVersion = schemaVersion
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentRunArn = "assessmentRunArn"
            case rulesPackageArn = "rulesPackageArn"
            case schemaVersion = "schemaVersion"
        }
    }

    public struct RulesPackage: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "version", required: true, type: .string), 
            AWSShapeMember(label: "provider", required: true, type: .string), 
            AWSShapeMember(label: "arn", required: true, type: .string)
        ]
        /// The description of the rules package.
        public let description: String?
        /// The name of the rules package.
        public let name: String
        /// The version ID of the rules package.
        public let version: String
        /// The provider of the rules package.
        public let provider: String
        /// The ARN of the rules package.
        public let arn: String

        public init(description: String? = nil, name: String, version: String, provider: String, arn: String) {
            self.description = description
            self.name = name
            self.version = version
            self.provider = provider
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case name = "name"
            case version = "version"
            case provider = "provider"
            case arn = "arn"
        }
    }

    public struct AssessmentRun: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stateChangedAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "rulesPackageArns", required: true, type: .list), 
            AWSShapeMember(label: "createdAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "completedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "findingCounts", required: true, type: .map), 
            AWSShapeMember(label: "assessmentTemplateArn", required: true, type: .string), 
            AWSShapeMember(label: "state", required: true, type: .enum), 
            AWSShapeMember(label: "stateChanges", required: true, type: .list), 
            AWSShapeMember(label: "arn", required: true, type: .string), 
            AWSShapeMember(label: "notifications", required: true, type: .list), 
            AWSShapeMember(label: "durationInSeconds", required: true, type: .integer), 
            AWSShapeMember(label: "dataCollected", required: true, type: .boolean), 
            AWSShapeMember(label: "userAttributesForFindings", required: true, type: .list), 
            AWSShapeMember(label: "startedAt", required: false, type: .timestamp)
        ]
        /// The last time when the assessment run's state changed.
        public let stateChangedAt: TimeStamp
        /// The rules packages selected for the assessment run.
        public let rulesPackageArns: [String]
        /// The time when StartAssessmentRun was called.
        public let createdAt: TimeStamp
        /// The auto-generated name for the assessment run.
        public let name: String
        /// The assessment run completion time that corresponds to the rules packages evaluation completion time or failure.
        public let completedAt: TimeStamp?
        /// Provides a total count of generated findings per severity.
        public let findingCounts: [Severity: Int32]
        /// The ARN of the assessment template that is associated with the assessment run.
        public let assessmentTemplateArn: String
        /// The state of the assessment run.
        public let state: AssessmentRunState
        /// A list of the assessment run state changes.
        public let stateChanges: [AssessmentRunStateChange]
        /// The ARN of the assessment run.
        public let arn: String
        /// A list of notifications for the event subscriptions. A notification about a particular generated finding is added to this list only once.
        public let notifications: [AssessmentRunNotification]
        /// The duration of the assessment run.
        public let durationInSeconds: Int32
        /// A Boolean value (true or false) that specifies whether the process of collecting data from the agents is completed.
        public let dataCollected: Bool
        /// The user-defined attributes that are assigned to every generated finding.
        public let userAttributesForFindings: [Attribute]
        /// The time when StartAssessmentRun was called.
        public let startedAt: TimeStamp?

        public init(stateChangedAt: TimeStamp, rulesPackageArns: [String], createdAt: TimeStamp, name: String, completedAt: TimeStamp? = nil, findingCounts: [Severity: Int32], assessmentTemplateArn: String, state: AssessmentRunState, stateChanges: [AssessmentRunStateChange], arn: String, notifications: [AssessmentRunNotification], durationInSeconds: Int32, dataCollected: Bool, userAttributesForFindings: [Attribute], startedAt: TimeStamp? = nil) {
            self.stateChangedAt = stateChangedAt
            self.rulesPackageArns = rulesPackageArns
            self.createdAt = createdAt
            self.name = name
            self.completedAt = completedAt
            self.findingCounts = findingCounts
            self.assessmentTemplateArn = assessmentTemplateArn
            self.state = state
            self.stateChanges = stateChanges
            self.arn = arn
            self.notifications = notifications
            self.durationInSeconds = durationInSeconds
            self.dataCollected = dataCollected
            self.userAttributesForFindings = userAttributesForFindings
            self.startedAt = startedAt
        }

        private enum CodingKeys: String, CodingKey {
            case stateChangedAt = "stateChangedAt"
            case rulesPackageArns = "rulesPackageArns"
            case createdAt = "createdAt"
            case name = "name"
            case completedAt = "completedAt"
            case findingCounts = "findingCounts"
            case assessmentTemplateArn = "assessmentTemplateArn"
            case state = "state"
            case stateChanges = "stateChanges"
            case arn = "arn"
            case notifications = "notifications"
            case durationInSeconds = "durationInSeconds"
            case dataCollected = "dataCollected"
            case userAttributesForFindings = "userAttributesForFindings"
            case startedAt = "startedAt"
        }
    }

    public struct EventSubscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "subscribedAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "event", required: true, type: .enum)
        ]
        /// The time at which SubscribeToEvent is called.
        public let subscribedAt: TimeStamp
        /// The event for which Amazon Simple Notification Service (SNS) notifications are sent.
        public let event: InspectorEvent

        public init(subscribedAt: TimeStamp, event: InspectorEvent) {
            self.subscribedAt = subscribedAt
            self.event = event
        }

        private enum CodingKeys: String, CodingKey {
            case subscribedAt = "subscribedAt"
            case event = "event"
        }
    }

    public struct StopAssessmentRunRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stopAction", required: false, type: .enum), 
            AWSShapeMember(label: "assessmentRunArn", required: true, type: .string)
        ]
        /// An input option that can be set to either START_EVALUATION or SKIP_EVALUATION. START_EVALUATION (the default value), stops the AWS agent from collecting data and begins the results evaluation and the findings generation process. SKIP_EVALUATION cancels the assessment run immediately, after which no findings are generated.
        public let stopAction: StopAction?
        /// The ARN of the assessment run that you want to stop.
        public let assessmentRunArn: String

        public init(stopAction: StopAction? = nil, assessmentRunArn: String) {
            self.stopAction = stopAction
            self.assessmentRunArn = assessmentRunArn
        }

        private enum CodingKeys: String, CodingKey {
            case stopAction = "stopAction"
            case assessmentRunArn = "assessmentRunArn"
        }
    }

    public struct CreateAssessmentTemplateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userAttributesForFindings", required: false, type: .list), 
            AWSShapeMember(label: "assessmentTargetArn", required: true, type: .string), 
            AWSShapeMember(label: "assessmentTemplateName", required: true, type: .string), 
            AWSShapeMember(label: "rulesPackageArns", required: true, type: .list), 
            AWSShapeMember(label: "durationInSeconds", required: true, type: .integer)
        ]
        /// The user-defined attributes that are assigned to every finding that is generated by the assessment run that uses this assessment template. An attribute is a key and value pair (an Attribute object). Within an assessment template, each key must be unique.
        public let userAttributesForFindings: [Attribute]?
        /// The ARN that specifies the assessment target for which you want to create the assessment template.
        public let assessmentTargetArn: String
        /// The user-defined name that identifies the assessment template that you want to create. You can create several assessment templates for an assessment target. The names of the assessment templates that correspond to a particular assessment target must be unique.
        public let assessmentTemplateName: String
        /// The ARNs that specify the rules packages that you want to attach to the assessment template.
        public let rulesPackageArns: [String]
        /// The duration of the assessment run in seconds.
        public let durationInSeconds: Int32

        public init(userAttributesForFindings: [Attribute]? = nil, assessmentTargetArn: String, assessmentTemplateName: String, rulesPackageArns: [String], durationInSeconds: Int32) {
            self.userAttributesForFindings = userAttributesForFindings
            self.assessmentTargetArn = assessmentTargetArn
            self.assessmentTemplateName = assessmentTemplateName
            self.rulesPackageArns = rulesPackageArns
            self.durationInSeconds = durationInSeconds
        }

        private enum CodingKeys: String, CodingKey {
            case userAttributesForFindings = "userAttributesForFindings"
            case assessmentTargetArn = "assessmentTargetArn"
            case assessmentTemplateName = "assessmentTemplateName"
            case rulesPackageArns = "rulesPackageArns"
            case durationInSeconds = "durationInSeconds"
        }
    }

    public enum AssessmentRunState: String, CustomStringConvertible, Codable {
        case created = "CREATED"
        case startDataCollectionPending = "START_DATA_COLLECTION_PENDING"
        case startDataCollectionInProgress = "START_DATA_COLLECTION_IN_PROGRESS"
        case collectingData = "COLLECTING_DATA"
        case stopDataCollectionPending = "STOP_DATA_COLLECTION_PENDING"
        case dataCollected = "DATA_COLLECTED"
        case startEvaluatingRulesPending = "START_EVALUATING_RULES_PENDING"
        case evaluatingRules = "EVALUATING_RULES"
        case failed = "FAILED"
        case error = "ERROR"
        case completed = "COMPLETED"
        case completedWithErrors = "COMPLETED_WITH_ERRORS"
        case canceled = "CANCELED"
        public var description: String { return self.rawValue }
    }

    public struct AssessmentTarget: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "createdAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "updatedAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "arn", required: true, type: .string)
        ]
        /// The ARN that specifies the resource group that is associated with the assessment target.
        public let resourceGroupArn: String?
        /// The name of the Amazon Inspector assessment target.
        public let name: String
        /// The time at which the assessment target is created.
        public let createdAt: TimeStamp
        /// The time at which UpdateAssessmentTarget is called.
        public let updatedAt: TimeStamp
        /// The ARN that specifies the Amazon Inspector assessment target.
        public let arn: String

        public init(resourceGroupArn: String? = nil, name: String, createdAt: TimeStamp, updatedAt: TimeStamp, arn: String) {
            self.resourceGroupArn = resourceGroupArn
            self.name = name
            self.createdAt = createdAt
            self.updatedAt = updatedAt
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceGroupArn = "resourceGroupArn"
            case name = "name"
            case createdAt = "createdAt"
            case updatedAt = "updatedAt"
            case arn = "arn"
        }
    }

    public struct CreateResourceGroupRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceGroupTags", required: true, type: .list)
        ]
        /// A collection of keys and an array of possible values, '[{"key":"key1","values":["Value1","Value2"]},{"key":"Key2","values":["Value3"]}]'. For example,'[{"key":"Name","values":["TestEC2Instance"]}]'.
        public let resourceGroupTags: [ResourceGroupTag]

        public init(resourceGroupTags: [ResourceGroupTag]) {
            self.resourceGroupTags = resourceGroupTags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceGroupTags = "resourceGroupTags"
        }
    }

    public struct DescribeFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failedItems", required: true, type: .map), 
            AWSShapeMember(label: "findings", required: true, type: .list)
        ]
        /// Finding details that cannot be described. An error code is provided for each failed item.
        public let failedItems: [String: FailedItemDetails]
        /// Information about the finding.
        public let findings: [Finding]

        public init(failedItems: [String: FailedItemDetails], findings: [Finding]) {
            self.failedItems = failedItems
            self.findings = findings
        }

        private enum CodingKeys: String, CodingKey {
            case failedItems = "failedItems"
            case findings = "findings"
        }
    }

    public struct ListAssessmentRunsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "filter", required: false, type: .structure), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "assessmentTemplateArns", required: false, type: .list)
        ]
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        public let filter: AssessmentRunFilter?
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListAssessmentRuns action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// You can use this parameter to indicate the maximum number of items that you want in the response. The default value is 10. The maximum value is 500.
        public let maxResults: Int32?
        /// The ARNs that specify the assessment templates whose assessment runs you want to list.
        public let assessmentTemplateArns: [String]?

        public init(filter: AssessmentRunFilter? = nil, nextToken: String? = nil, maxResults: Int32? = nil, assessmentTemplateArns: [String]? = nil) {
            self.filter = filter
            self.nextToken = nextToken
            self.maxResults = maxResults
            self.assessmentTemplateArns = assessmentTemplateArns
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "filter"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
            case assessmentTemplateArns = "assessmentTemplateArns"
        }
    }

    public struct AgentAlreadyRunningAssessment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentRunArn", required: true, type: .string), 
            AWSShapeMember(label: "agentId", required: true, type: .string)
        ]
        /// The ARN of the assessment run that has already been started.
        public let assessmentRunArn: String
        /// ID of the agent that is running on an EC2 instance that is already participating in another started assessment run.
        public let agentId: String

        public init(assessmentRunArn: String, agentId: String) {
            self.assessmentRunArn = assessmentRunArn
            self.agentId = agentId
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentRunArn = "assessmentRunArn"
            case agentId = "agentId"
        }
    }

    public struct ListExclusionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "exclusionArns", required: true, type: .list)
        ]
        /// When a response is generated, if there is more data to be listed, this parameters is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public let nextToken: String?
        /// A list of exclusions' ARNs returned by the action.
        public let exclusionArns: [String]

        public init(nextToken: String? = nil, exclusionArns: [String]) {
            self.nextToken = nextToken
            self.exclusionArns = exclusionArns
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case exclusionArns = "exclusionArns"
        }
    }

    public struct ListAssessmentRunAgentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentRunAgents", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of ARNs that specifies the agents returned by the action.
        public let assessmentRunAgents: [AssessmentRunAgent]
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public let nextToken: String?

        public init(assessmentRunAgents: [AssessmentRunAgent], nextToken: String? = nil) {
            self.assessmentRunAgents = assessmentRunAgents
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentRunAgents = "assessmentRunAgents"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeExclusionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failedItems", required: true, type: .map), 
            AWSShapeMember(label: "exclusions", required: true, type: .map)
        ]
        /// Exclusion details that cannot be described. An error code is provided for each failed item.
        public let failedItems: [String: FailedItemDetails]
        /// Information about the exclusions.
        public let exclusions: [String: Exclusion]

        public init(failedItems: [String: FailedItemDetails], exclusions: [String: Exclusion]) {
            self.failedItems = failedItems
            self.exclusions = exclusions
        }

        private enum CodingKeys: String, CodingKey {
            case failedItems = "failedItems"
            case exclusions = "exclusions"
        }
    }

    public struct GetTelemetryMetadataResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "telemetryMetadata", required: true, type: .list)
        ]
        /// Telemetry details.
        public let telemetryMetadata: [TelemetryMetadata]

        public init(telemetryMetadata: [TelemetryMetadata]) {
            self.telemetryMetadata = telemetryMetadata
        }

        private enum CodingKeys: String, CodingKey {
            case telemetryMetadata = "telemetryMetadata"
        }
    }

    public struct DescribeAssessmentRunsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentRunArns", required: true, type: .list)
        ]
        /// The ARN that specifies the assessment run that you want to describe.
        public let assessmentRunArns: [String]

        public init(assessmentRunArns: [String]) {
            self.assessmentRunArns = assessmentRunArns
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentRunArns = "assessmentRunArns"
        }
    }

    public struct SetTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]
        /// The ARN of the assessment template that you want to set tags to.
        public let resourceArn: String
        /// A collection of key and value pairs that you want to set to the assessment template.
        public let tags: [Tag]?

        public init(resourceArn: String, tags: [Tag]? = nil) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct PreviewAgentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "previewAgentsArn", required: true, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// The ARN of the assessment target whose agents you want to preview.
        public let previewAgentsArn: String
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the PreviewAgents action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        public let maxResults: Int32?

        public init(previewAgentsArn: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.previewAgentsArn = previewAgentsArn
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case previewAgentsArn = "previewAgentsArn"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct ListFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "findingArns", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// A list of ARNs that specifies the findings returned by the action.
        public let findingArns: [String]
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public let nextToken: String?

        public init(findingArns: [String], nextToken: String? = nil) {
            self.findingArns = findingArns
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case findingArns = "findingArns"
            case nextToken = "nextToken"
        }
    }

    public struct CreateAssessmentTargetResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTargetArn", required: true, type: .string)
        ]
        /// The ARN that specifies the assessment target that is created.
        public let assessmentTargetArn: String

        public init(assessmentTargetArn: String) {
            self.assessmentTargetArn = assessmentTargetArn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTargetArn = "assessmentTargetArn"
        }
    }

    public struct Finding: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assetType", required: false, type: .enum), 
            AWSShapeMember(label: "severity", required: false, type: .enum), 
            AWSShapeMember(label: "title", required: false, type: .string), 
            AWSShapeMember(label: "schemaVersion", required: false, type: .integer), 
            AWSShapeMember(label: "indicatorOfCompromise", required: false, type: .boolean), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "attributes", required: true, type: .list), 
            AWSShapeMember(label: "serviceAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "userAttributes", required: true, type: .list), 
            AWSShapeMember(label: "createdAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "arn", required: true, type: .string), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "updatedAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "recommendation", required: false, type: .string), 
            AWSShapeMember(label: "assetAttributes", required: false, type: .structure), 
            AWSShapeMember(label: "confidence", required: false, type: .integer), 
            AWSShapeMember(label: "service", required: false, type: .string), 
            AWSShapeMember(label: "numericSeverity", required: false, type: .double)
        ]
        /// The type of the host from which the finding is generated.
        public let assetType: AssetType?
        /// The finding severity. Values can be set to High, Medium, Low, and Informational.
        public let severity: Severity?
        /// The name of the finding.
        public let title: String?
        /// The schema version of this data type.
        public let schemaVersion: Int32?
        /// This data element is currently not used.
        public let indicatorOfCompromise: Bool?
        /// The description of the finding.
        public let description: String?
        /// The system-defined attributes for the finding.
        public let attributes: [Attribute]
        /// This data type is used in the Finding data type.
        public let serviceAttributes: InspectorServiceAttributes?
        /// The user-defined attributes that are assigned to the finding.
        public let userAttributes: [Attribute]
        /// The time when the finding was generated.
        public let createdAt: TimeStamp
        /// The ARN that specifies the finding.
        public let arn: String
        /// The ID of the finding.
        public let id: String?
        /// The time when AddAttributesToFindings is called.
        public let updatedAt: TimeStamp
        /// The recommendation for the finding.
        public let recommendation: String?
        /// A collection of attributes of the host from which the finding is generated.
        public let assetAttributes: AssetAttributes?
        /// This data element is currently not used.
        public let confidence: Int32?
        /// The data element is set to "Inspector".
        public let service: String?
        /// The numeric value of the finding severity.
        public let numericSeverity: Double?

        public init(assetType: AssetType? = nil, severity: Severity? = nil, title: String? = nil, schemaVersion: Int32? = nil, indicatorOfCompromise: Bool? = nil, description: String? = nil, attributes: [Attribute], serviceAttributes: InspectorServiceAttributes? = nil, userAttributes: [Attribute], createdAt: TimeStamp, arn: String, id: String? = nil, updatedAt: TimeStamp, recommendation: String? = nil, assetAttributes: AssetAttributes? = nil, confidence: Int32? = nil, service: String? = nil, numericSeverity: Double? = nil) {
            self.assetType = assetType
            self.severity = severity
            self.title = title
            self.schemaVersion = schemaVersion
            self.indicatorOfCompromise = indicatorOfCompromise
            self.description = description
            self.attributes = attributes
            self.serviceAttributes = serviceAttributes
            self.userAttributes = userAttributes
            self.createdAt = createdAt
            self.arn = arn
            self.id = id
            self.updatedAt = updatedAt
            self.recommendation = recommendation
            self.assetAttributes = assetAttributes
            self.confidence = confidence
            self.service = service
            self.numericSeverity = numericSeverity
        }

        private enum CodingKeys: String, CodingKey {
            case assetType = "assetType"
            case severity = "severity"
            case title = "title"
            case schemaVersion = "schemaVersion"
            case indicatorOfCompromise = "indicatorOfCompromise"
            case description = "description"
            case attributes = "attributes"
            case serviceAttributes = "serviceAttributes"
            case userAttributes = "userAttributes"
            case createdAt = "createdAt"
            case arn = "arn"
            case id = "id"
            case updatedAt = "updatedAt"
            case recommendation = "recommendation"
            case assetAttributes = "assetAttributes"
            case confidence = "confidence"
            case service = "service"
            case numericSeverity = "numericSeverity"
        }
    }

    public struct DescribeAssessmentTargetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failedItems", required: true, type: .map), 
            AWSShapeMember(label: "assessmentTargets", required: true, type: .list)
        ]
        /// Assessment target details that cannot be described. An error code is provided for each failed item.
        public let failedItems: [String: FailedItemDetails]
        /// Information about the assessment targets.
        public let assessmentTargets: [AssessmentTarget]

        public init(failedItems: [String: FailedItemDetails], assessmentTargets: [AssessmentTarget]) {
            self.failedItems = failedItems
            self.assessmentTargets = assessmentTargets
        }

        private enum CodingKeys: String, CodingKey {
            case failedItems = "failedItems"
            case assessmentTargets = "assessmentTargets"
        }
    }

    public struct ResourceGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "arn", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .list), 
            AWSShapeMember(label: "createdAt", required: true, type: .timestamp)
        ]
        /// The ARN of the resource group.
        public let arn: String
        /// The tags (key and value pairs) of the resource group. This data type property is used in the CreateResourceGroup action.
        public let tags: [ResourceGroupTag]
        /// The time at which resource group is created.
        public let createdAt: TimeStamp

        public init(arn: String, tags: [ResourceGroupTag], createdAt: TimeStamp) {
            self.arn = arn
            self.tags = tags
            self.createdAt = createdAt
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
            case tags = "tags"
            case createdAt = "createdAt"
        }
    }

    public struct GetExclusionsPreviewResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "previewStatus", required: true, type: .enum), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "exclusionPreviews", required: false, type: .list)
        ]
        /// Specifies the status of the request to generate an exclusions preview.
        public let previewStatus: PreviewStatus
        /// When a response is generated, if there is more data to be listed, this parameters is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public let nextToken: String?
        /// Information about the exclusions included in the preview.
        public let exclusionPreviews: [ExclusionPreview]?

        public init(previewStatus: PreviewStatus, nextToken: String? = nil, exclusionPreviews: [ExclusionPreview]? = nil) {
            self.previewStatus = previewStatus
            self.nextToken = nextToken
            self.exclusionPreviews = exclusionPreviews
        }

        private enum CodingKeys: String, CodingKey {
            case previewStatus = "previewStatus"
            case nextToken = "nextToken"
            case exclusionPreviews = "exclusionPreviews"
        }
    }

    public struct ResourceGroupTag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]
        /// A tag key.
        public let key: String
        /// The value assigned to a tag key.
        public let value: String?

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct AssetAttributes: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "amiId", required: false, type: .string), 
            AWSShapeMember(label: "schemaVersion", required: true, type: .integer), 
            AWSShapeMember(label: "agentId", required: false, type: .string), 
            AWSShapeMember(label: "autoScalingGroup", required: false, type: .string), 
            AWSShapeMember(label: "ipv4Addresses", required: false, type: .list), 
            AWSShapeMember(label: "hostname", required: false, type: .string)
        ]
        /// The ID of the Amazon Machine Image (AMI) that is installed on the EC2 instance where the finding is generated.
        public let amiId: String?
        /// The schema version of this data type.
        public let schemaVersion: Int32
        /// The ID of the agent that is installed on the EC2 instance where the finding is generated.
        public let agentId: String?
        /// The Auto Scaling group of the EC2 instance where the finding is generated.
        public let autoScalingGroup: String?
        /// The list of IP v4 addresses of the EC2 instance where the finding is generated.
        public let ipv4Addresses: [String]?
        /// The hostname of the EC2 instance where the finding is generated.
        public let hostname: String?

        public init(amiId: String? = nil, schemaVersion: Int32, agentId: String? = nil, autoScalingGroup: String? = nil, ipv4Addresses: [String]? = nil, hostname: String? = nil) {
            self.amiId = amiId
            self.schemaVersion = schemaVersion
            self.agentId = agentId
            self.autoScalingGroup = autoScalingGroup
            self.ipv4Addresses = ipv4Addresses
            self.hostname = hostname
        }

        private enum CodingKeys: String, CodingKey {
            case amiId = "amiId"
            case schemaVersion = "schemaVersion"
            case agentId = "agentId"
            case autoScalingGroup = "autoScalingGroup"
            case ipv4Addresses = "ipv4Addresses"
            case hostname = "hostname"
        }
    }

    public enum LimitExceededErrorCode: String, CustomStringConvertible, Codable {
        case assessmentTargetLimitExceeded = "ASSESSMENT_TARGET_LIMIT_EXCEEDED"
        case assessmentTemplateLimitExceeded = "ASSESSMENT_TEMPLATE_LIMIT_EXCEEDED"
        case assessmentRunLimitExceeded = "ASSESSMENT_RUN_LIMIT_EXCEEDED"
        case resourceGroupLimitExceeded = "RESOURCE_GROUP_LIMIT_EXCEEDED"
        case eventSubscriptionLimitExceeded = "EVENT_SUBSCRIPTION_LIMIT_EXCEEDED"
        public var description: String { return self.rawValue }
    }

    public struct CreateAssessmentTargetRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTargetName", required: true, type: .string), 
            AWSShapeMember(label: "resourceGroupArn", required: false, type: .string)
        ]
        /// The user-defined name that identifies the assessment target that you want to create. The name must be unique within the AWS account.
        public let assessmentTargetName: String
        /// The ARN that specifies the resource group that is used to create the assessment target. If resourceGroupArn is not specified, all EC2 instances in the current AWS account and region are included in the assessment target.
        public let resourceGroupArn: String?

        public init(assessmentTargetName: String, resourceGroupArn: String? = nil) {
            self.assessmentTargetName = assessmentTargetName
            self.resourceGroupArn = resourceGroupArn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTargetName = "assessmentTargetName"
            case resourceGroupArn = "resourceGroupArn"
        }
    }

    public struct AssessmentTemplateFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "rulesPackageArns", required: false, type: .list), 
            AWSShapeMember(label: "namePattern", required: false, type: .string), 
            AWSShapeMember(label: "durationRange", required: false, type: .structure)
        ]
        /// For a record to match a filter, the values that are specified for this data type property must be contained in the list of values of the rulesPackageArns property of the AssessmentTemplate data type.
        public let rulesPackageArns: [String]?
        /// For a record to match a filter, an explicit value or a string that contains a wildcard that is specified for this data type property must match the value of the assessmentTemplateName property of the AssessmentTemplate data type.
        public let namePattern: String?
        /// For a record to match a filter, the value specified for this data type property must inclusively match any value between the specified minimum and maximum values of the durationInSeconds property of the AssessmentTemplate data type.
        public let durationRange: DurationRange?

        public init(rulesPackageArns: [String]? = nil, namePattern: String? = nil, durationRange: DurationRange? = nil) {
            self.rulesPackageArns = rulesPackageArns
            self.namePattern = namePattern
            self.durationRange = durationRange
        }

        private enum CodingKeys: String, CodingKey {
            case rulesPackageArns = "rulesPackageArns"
            case namePattern = "namePattern"
            case durationRange = "durationRange"
        }
    }

    public struct RemoveAttributesFromFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failedItems", required: true, type: .map)
        ]
        /// Attributes details that cannot be described. An error code is provided for each failed item.
        public let failedItems: [String: FailedItemDetails]

        public init(failedItems: [String: FailedItemDetails]) {
            self.failedItems = failedItems
        }

        private enum CodingKeys: String, CodingKey {
            case failedItems = "failedItems"
        }
    }

    public struct GetAssessmentReportResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "status", required: true, type: .enum), 
            AWSShapeMember(label: "url", required: false, type: .string)
        ]
        /// Specifies the status of the request to generate an assessment report. 
        public let status: ReportStatus
        /// Specifies the URL where you can find the generated assessment report. This parameter is only returned if the report is successfully generated.
        public let url: String?

        public init(status: ReportStatus, url: String? = nil) {
            self.status = status
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case status = "status"
            case url = "url"
        }
    }

    public struct RegisterCrossAccountAccessRoleRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// The ARN of the IAM role that grants Amazon Inspector access to AWS Services needed to perform security assessments. 
        public let roleArn: String

        public init(roleArn: String) {
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case roleArn = "roleArn"
        }
    }

    public enum AssetType: String, CustomStringConvertible, Codable {
        case ec2Instance = "ec2-instance"
        public var description: String { return self.rawValue }
    }

    public struct ListAssessmentTargetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "filter", required: false, type: .structure), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        public let filter: AssessmentTargetFilter?
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListAssessmentTargets action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        public let maxResults: Int32?

        public init(filter: AssessmentTargetFilter? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.filter = filter
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case filter = "filter"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public enum AgentHealthCode: String, CustomStringConvertible, Codable {
        case idle = "IDLE"
        case running = "RUNNING"
        case shutdown = "SHUTDOWN"
        case unhealthy = "UNHEALTHY"
        case throttled = "THROTTLED"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public enum InspectorEvent: String, CustomStringConvertible, Codable {
        case assessmentRunStarted = "ASSESSMENT_RUN_STARTED"
        case assessmentRunCompleted = "ASSESSMENT_RUN_COMPLETED"
        case assessmentRunStateChanged = "ASSESSMENT_RUN_STATE_CHANGED"
        case findingReported = "FINDING_REPORTED"
        case other = "OTHER"
        public var description: String { return self.rawValue }
    }

    public struct DeleteAssessmentTemplateRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTemplateArn", required: true, type: .string)
        ]
        /// The ARN that specifies the assessment template that you want to delete.
        public let assessmentTemplateArn: String

        public init(assessmentTemplateArn: String) {
            self.assessmentTemplateArn = assessmentTemplateArn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTemplateArn = "assessmentTemplateArn"
        }
    }

    public struct DescribeAssessmentTemplatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTemplateArns", required: true, type: .list)
        ]
        public let assessmentTemplateArns: [String]

        public init(assessmentTemplateArns: [String]) {
            self.assessmentTemplateArns = assessmentTemplateArns
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTemplateArns = "assessmentTemplateArns"
        }
    }

    public enum ReportStatus: String, CustomStringConvertible, Codable {
        case workInProgress = "WORK_IN_PROGRESS"
        case failed = "FAILED"
        case completed = "COMPLETED"
        public var description: String { return self.rawValue }
    }

    public enum NoSuchEntityErrorCode: String, CustomStringConvertible, Codable {
        case assessmentTargetDoesNotExist = "ASSESSMENT_TARGET_DOES_NOT_EXIST"
        case assessmentTemplateDoesNotExist = "ASSESSMENT_TEMPLATE_DOES_NOT_EXIST"
        case assessmentRunDoesNotExist = "ASSESSMENT_RUN_DOES_NOT_EXIST"
        case findingDoesNotExist = "FINDING_DOES_NOT_EXIST"
        case resourceGroupDoesNotExist = "RESOURCE_GROUP_DOES_NOT_EXIST"
        case rulesPackageDoesNotExist = "RULES_PACKAGE_DOES_NOT_EXIST"
        case snsTopicDoesNotExist = "SNS_TOPIC_DOES_NOT_EXIST"
        case iamRoleDoesNotExist = "IAM_ROLE_DOES_NOT_EXIST"
        public var description: String { return self.rawValue }
    }

    public struct ListEventSubscriptionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// The ARN of the assessment template for which you want to list the existing event subscriptions.
        public let resourceArn: String?
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListEventSubscriptions action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        public let maxResults: Int32?

        public init(resourceArn: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.resourceArn = resourceArn
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public enum AssessmentRunNotificationSnsStatusCode: String, CustomStringConvertible, Codable {
        case success = "SUCCESS"
        case topicDoesNotExist = "TOPIC_DOES_NOT_EXIST"
        case accessDenied = "ACCESS_DENIED"
        case internalError = "INTERNAL_ERROR"
        public var description: String { return self.rawValue }
    }

    public struct GetTelemetryMetadataRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentRunArn", required: true, type: .string)
        ]
        /// The ARN that specifies the assessment run that has the telemetry data that you want to obtain.
        public let assessmentRunArn: String

        public init(assessmentRunArn: String) {
            self.assessmentRunArn = assessmentRunArn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentRunArn = "assessmentRunArn"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]
        /// A tag key.
        public let key: String
        /// A value assigned to a tag key.
        public let value: String?

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct PreviewAgentsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "agentPreviews", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The resulting list of agents.
        public let agentPreviews: [AgentPreview]
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public let nextToken: String?

        public init(agentPreviews: [AgentPreview], nextToken: String? = nil) {
            self.agentPreviews = agentPreviews
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case agentPreviews = "agentPreviews"
            case nextToken = "nextToken"
        }
    }

    public struct StartAssessmentRunResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentRunArn", required: true, type: .string)
        ]
        /// The ARN of the assessment run that has been started.
        public let assessmentRunArn: String

        public init(assessmentRunArn: String) {
            self.assessmentRunArn = assessmentRunArn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentRunArn = "assessmentRunArn"
        }
    }

    public struct ListAssessmentTargetsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "assessmentTargetArns", required: true, type: .list)
        ]
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public let nextToken: String?
        /// A list of ARNs that specifies the assessment targets that are returned by the action.
        public let assessmentTargetArns: [String]

        public init(nextToken: String? = nil, assessmentTargetArns: [String]) {
            self.nextToken = nextToken
            self.assessmentTargetArns = assessmentTargetArns
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case assessmentTargetArns = "assessmentTargetArns"
        }
    }

    public struct DescribeFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "findingArns", required: true, type: .list), 
            AWSShapeMember(label: "locale", required: false, type: .enum)
        ]
        /// The ARN that specifies the finding that you want to describe.
        public let findingArns: [String]
        /// The locale into which you want to translate a finding description, recommendation, and the short description that identifies the finding.
        public let locale: Locale?

        public init(findingArns: [String], locale: Locale? = nil) {
            self.findingArns = findingArns
            self.locale = locale
        }

        private enum CodingKeys: String, CodingKey {
            case findingArns = "findingArns"
            case locale = "locale"
        }
    }

    public enum ScopeType: String, CustomStringConvertible, Codable {
        case instanceId = "INSTANCE_ID"
        case rulesPackageArn = "RULES_PACKAGE_ARN"
        public var description: String { return self.rawValue }
    }

    public enum AgentHealth: String, CustomStringConvertible, Codable {
        case healthy = "HEALTHY"
        case unhealthy = "UNHEALTHY"
        case unknown = "UNKNOWN"
        public var description: String { return self.rawValue }
    }

    public enum InvalidInputErrorCode: String, CustomStringConvertible, Codable {
        case invalidAssessmentTargetArn = "INVALID_ASSESSMENT_TARGET_ARN"
        case invalidAssessmentTemplateArn = "INVALID_ASSESSMENT_TEMPLATE_ARN"
        case invalidAssessmentRunArn = "INVALID_ASSESSMENT_RUN_ARN"
        case invalidFindingArn = "INVALID_FINDING_ARN"
        case invalidResourceGroupArn = "INVALID_RESOURCE_GROUP_ARN"
        case invalidRulesPackageArn = "INVALID_RULES_PACKAGE_ARN"
        case invalidResourceArn = "INVALID_RESOURCE_ARN"
        case invalidSnsTopicArn = "INVALID_SNS_TOPIC_ARN"
        case invalidIamRoleArn = "INVALID_IAM_ROLE_ARN"
        case invalidAssessmentTargetName = "INVALID_ASSESSMENT_TARGET_NAME"
        case invalidAssessmentTargetNamePattern = "INVALID_ASSESSMENT_TARGET_NAME_PATTERN"
        case invalidAssessmentTemplateName = "INVALID_ASSESSMENT_TEMPLATE_NAME"
        case invalidAssessmentTemplateNamePattern = "INVALID_ASSESSMENT_TEMPLATE_NAME_PATTERN"
        case invalidAssessmentTemplateDuration = "INVALID_ASSESSMENT_TEMPLATE_DURATION"
        case invalidAssessmentTemplateDurationRange = "INVALID_ASSESSMENT_TEMPLATE_DURATION_RANGE"
        case invalidAssessmentRunDurationRange = "INVALID_ASSESSMENT_RUN_DURATION_RANGE"
        case invalidAssessmentRunStartTimeRange = "INVALID_ASSESSMENT_RUN_START_TIME_RANGE"
        case invalidAssessmentRunCompletionTimeRange = "INVALID_ASSESSMENT_RUN_COMPLETION_TIME_RANGE"
        case invalidAssessmentRunStateChangeTimeRange = "INVALID_ASSESSMENT_RUN_STATE_CHANGE_TIME_RANGE"
        case invalidAssessmentRunState = "INVALID_ASSESSMENT_RUN_STATE"
        case invalidTag = "INVALID_TAG"
        case invalidTagKey = "INVALID_TAG_KEY"
        case invalidTagValue = "INVALID_TAG_VALUE"
        case invalidResourceGroupTagKey = "INVALID_RESOURCE_GROUP_TAG_KEY"
        case invalidResourceGroupTagValue = "INVALID_RESOURCE_GROUP_TAG_VALUE"
        case invalidAttribute = "INVALID_ATTRIBUTE"
        case invalidUserAttribute = "INVALID_USER_ATTRIBUTE"
        case invalidUserAttributeKey = "INVALID_USER_ATTRIBUTE_KEY"
        case invalidUserAttributeValue = "INVALID_USER_ATTRIBUTE_VALUE"
        case invalidPaginationToken = "INVALID_PAGINATION_TOKEN"
        case invalidMaxResults = "INVALID_MAX_RESULTS"
        case invalidAgentId = "INVALID_AGENT_ID"
        case invalidAutoScalingGroup = "INVALID_AUTO_SCALING_GROUP"
        case invalidRuleName = "INVALID_RULE_NAME"
        case invalidSeverity = "INVALID_SEVERITY"
        case invalidLocale = "INVALID_LOCALE"
        case invalidEvent = "INVALID_EVENT"
        case assessmentTargetNameAlreadyTaken = "ASSESSMENT_TARGET_NAME_ALREADY_TAKEN"
        case assessmentTemplateNameAlreadyTaken = "ASSESSMENT_TEMPLATE_NAME_ALREADY_TAKEN"
        case invalidNumberOfAssessmentTargetArns = "INVALID_NUMBER_OF_ASSESSMENT_TARGET_ARNS"
        case invalidNumberOfAssessmentTemplateArns = "INVALID_NUMBER_OF_ASSESSMENT_TEMPLATE_ARNS"
        case invalidNumberOfAssessmentRunArns = "INVALID_NUMBER_OF_ASSESSMENT_RUN_ARNS"
        case invalidNumberOfFindingArns = "INVALID_NUMBER_OF_FINDING_ARNS"
        case invalidNumberOfResourceGroupArns = "INVALID_NUMBER_OF_RESOURCE_GROUP_ARNS"
        case invalidNumberOfRulesPackageArns = "INVALID_NUMBER_OF_RULES_PACKAGE_ARNS"
        case invalidNumberOfAssessmentRunStates = "INVALID_NUMBER_OF_ASSESSMENT_RUN_STATES"
        case invalidNumberOfTags = "INVALID_NUMBER_OF_TAGS"
        case invalidNumberOfResourceGroupTags = "INVALID_NUMBER_OF_RESOURCE_GROUP_TAGS"
        case invalidNumberOfAttributes = "INVALID_NUMBER_OF_ATTRIBUTES"
        case invalidNumberOfUserAttributes = "INVALID_NUMBER_OF_USER_ATTRIBUTES"
        case invalidNumberOfAgentIds = "INVALID_NUMBER_OF_AGENT_IDS"
        case invalidNumberOfAutoScalingGroups = "INVALID_NUMBER_OF_AUTO_SCALING_GROUPS"
        case invalidNumberOfRuleNames = "INVALID_NUMBER_OF_RULE_NAMES"
        case invalidNumberOfSeverities = "INVALID_NUMBER_OF_SEVERITIES"
        public var description: String { return self.rawValue }
    }

    public struct DescribeResourceGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failedItems", required: true, type: .map), 
            AWSShapeMember(label: "resourceGroups", required: true, type: .list)
        ]
        /// Resource group details that cannot be described. An error code is provided for each failed item.
        public let failedItems: [String: FailedItemDetails]
        /// Information about a resource group.
        public let resourceGroups: [ResourceGroup]

        public init(failedItems: [String: FailedItemDetails], resourceGroups: [ResourceGroup]) {
            self.failedItems = failedItems
            self.resourceGroups = resourceGroups
        }

        private enum CodingKeys: String, CodingKey {
            case failedItems = "failedItems"
            case resourceGroups = "resourceGroups"
        }
    }

    public struct UnsubscribeFromEventRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "event", required: true, type: .enum), 
            AWSShapeMember(label: "topicArn", required: true, type: .string)
        ]
        /// The ARN of the assessment template that is used during the event for which you want to stop receiving SNS notifications.
        public let resourceArn: String
        /// The event for which you want to stop receiving SNS notifications.
        public let event: InspectorEvent
        /// The ARN of the SNS topic to which SNS notifications are sent.
        public let topicArn: String

        public init(resourceArn: String, event: InspectorEvent, topicArn: String) {
            self.resourceArn = resourceArn
            self.event = event
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case event = "event"
            case topicArn = "topicArn"
        }
    }

    public enum Locale: String, CustomStringConvertible, Codable {
        case enUs = "EN_US"
        public var description: String { return self.rawValue }
    }

    public struct FailedItemDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failureCode", required: true, type: .enum), 
            AWSShapeMember(label: "retryable", required: true, type: .boolean)
        ]
        /// The status code of a failed item.
        public let failureCode: FailedItemErrorCode
        /// Indicates whether you can immediately retry a request for this item for a specified resource.
        public let retryable: Bool

        public init(failureCode: FailedItemErrorCode, retryable: Bool) {
            self.failureCode = failureCode
            self.retryable = retryable
        }

        private enum CodingKeys: String, CodingKey {
            case failureCode = "failureCode"
            case retryable = "retryable"
        }
    }

    public enum InvalidCrossAccountRoleErrorCode: String, CustomStringConvertible, Codable {
        case roleDoesNotExistOrInvalidTrustRelationship = "ROLE_DOES_NOT_EXIST_OR_INVALID_TRUST_RELATIONSHIP"
        case roleDoesNotHaveCorrectPolicy = "ROLE_DOES_NOT_HAVE_CORRECT_POLICY"
        public var description: String { return self.rawValue }
    }

    public enum ReportFileFormat: String, CustomStringConvertible, Codable {
        case html = "HTML"
        case pdf = "PDF"
        public var description: String { return self.rawValue }
    }

    public struct ListAssessmentTemplatesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTargetArns", required: false, type: .list), 
            AWSShapeMember(label: "filter", required: false, type: .structure), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// A list of ARNs that specifies the assessment targets whose assessment templates you want to list.
        public let assessmentTargetArns: [String]?
        /// You can use this parameter to specify a subset of data to be included in the action's response. For a record to match a filter, all specified filter attributes must match. When multiple values are specified for a filter attribute, any of the values can match.
        public let filter: AssessmentTemplateFilter?
        /// You can use this parameter when paginating results. Set the value of this parameter to null on your first call to the ListAssessmentTemplates action. Subsequent calls to the action fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// You can use this parameter to indicate the maximum number of items you want in the response. The default value is 10. The maximum value is 500.
        public let maxResults: Int32?

        public init(assessmentTargetArns: [String]? = nil, filter: AssessmentTemplateFilter? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.assessmentTargetArns = assessmentTargetArns
            self.filter = filter
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTargetArns = "assessmentTargetArns"
            case filter = "filter"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string)
        ]
        /// The ARN that specifies the assessment template whose tags you want to list.
        public let resourceArn: String

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
        }
    }

    public struct ListEventSubscriptionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "subscriptions", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// Details of the returned event subscriptions.
        public let subscriptions: [Subscription]
        ///  When a response is generated, if there is more data to be listed, this parameter is present in the response and contains the value to use for the nextToken parameter in a subsequent pagination request. If there is no more data to be listed, this parameter is set to null.
        public let nextToken: String?

        public init(subscriptions: [Subscription], nextToken: String? = nil) {
            self.subscriptions = subscriptions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case subscriptions = "subscriptions"
            case nextToken = "nextToken"
        }
    }

    public struct AddAttributesToFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failedItems", required: true, type: .map)
        ]
        /// Attribute details that cannot be described. An error code is provided for each failed item.
        public let failedItems: [String: FailedItemDetails]

        public init(failedItems: [String: FailedItemDetails]) {
            self.failedItems = failedItems
        }

        private enum CodingKeys: String, CodingKey {
            case failedItems = "failedItems"
        }
    }

    public struct AddAttributesToFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "findingArns", required: true, type: .list), 
            AWSShapeMember(label: "attributes", required: true, type: .list)
        ]
        /// The ARNs that specify the findings that you want to assign attributes to.
        public let findingArns: [String]
        /// The array of attributes that you want to assign to specified findings.
        public let attributes: [Attribute]

        public init(findingArns: [String], attributes: [Attribute]) {
            self.findingArns = findingArns
            self.attributes = attributes
        }

        private enum CodingKeys: String, CodingKey {
            case findingArns = "findingArns"
            case attributes = "attributes"
        }
    }

    public struct DeleteAssessmentRunRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentRunArn", required: true, type: .string)
        ]
        /// The ARN that specifies the assessment run that you want to delete.
        public let assessmentRunArn: String

        public init(assessmentRunArn: String) {
            self.assessmentRunArn = assessmentRunArn
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentRunArn = "assessmentRunArn"
        }
    }

    public struct DescribeCrossAccountAccessRoleResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "valid", required: true, type: .boolean), 
            AWSShapeMember(label: "registeredAt", required: true, type: .timestamp), 
            AWSShapeMember(label: "roleArn", required: true, type: .string)
        ]
        /// A Boolean value that specifies whether the IAM role has the necessary policies attached to enable Amazon Inspector to access your AWS account.
        public let valid: Bool
        /// The date when the cross-account access role was registered.
        public let registeredAt: TimeStamp
        /// The ARN that specifies the IAM role that Amazon Inspector uses to access your AWS account.
        public let roleArn: String

        public init(valid: Bool, registeredAt: TimeStamp, roleArn: String) {
            self.valid = valid
            self.registeredAt = registeredAt
            self.roleArn = roleArn
        }

        private enum CodingKeys: String, CodingKey {
            case valid = "valid"
            case registeredAt = "registeredAt"
            case roleArn = "roleArn"
        }
    }

    public struct DescribeRulesPackagesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "failedItems", required: true, type: .map), 
            AWSShapeMember(label: "rulesPackages", required: true, type: .list)
        ]
        /// Rules package details that cannot be described. An error code is provided for each failed item.
        public let failedItems: [String: FailedItemDetails]
        /// Information about the rules package.
        public let rulesPackages: [RulesPackage]

        public init(failedItems: [String: FailedItemDetails], rulesPackages: [RulesPackage]) {
            self.failedItems = failedItems
            self.rulesPackages = rulesPackages
        }

        private enum CodingKeys: String, CodingKey {
            case failedItems = "failedItems"
            case rulesPackages = "rulesPackages"
        }
    }

    public struct AssessmentRunNotification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "error", required: true, type: .boolean), 
            AWSShapeMember(label: "message", required: false, type: .string), 
            AWSShapeMember(label: "date", required: true, type: .timestamp), 
            AWSShapeMember(label: "snsTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "snsPublishStatusCode", required: false, type: .enum), 
            AWSShapeMember(label: "event", required: true, type: .enum)
        ]
        /// The Boolean value that specifies whether the notification represents an error.
        public let error: Bool
        /// The message included in the notification.
        public let message: String?
        /// The date of the notification.
        public let date: TimeStamp
        /// The SNS topic to which the SNS notification is sent.
        public let snsTopicArn: String?
        /// The status code of the SNS notification.
        public let snsPublishStatusCode: AssessmentRunNotificationSnsStatusCode?
        /// The event for which a notification is sent.
        public let event: InspectorEvent

        public init(error: Bool, message: String? = nil, date: TimeStamp, snsTopicArn: String? = nil, snsPublishStatusCode: AssessmentRunNotificationSnsStatusCode? = nil, event: InspectorEvent) {
            self.error = error
            self.message = message
            self.date = date
            self.snsTopicArn = snsTopicArn
            self.snsPublishStatusCode = snsPublishStatusCode
            self.event = event
        }

        private enum CodingKeys: String, CodingKey {
            case error = "error"
            case message = "message"
            case date = "date"
            case snsTopicArn = "snsTopicArn"
            case snsPublishStatusCode = "snsPublishStatusCode"
            case event = "event"
        }
    }

    public struct DescribeAssessmentTargetsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "assessmentTargetArns", required: true, type: .list)
        ]
        /// The ARNs that specifies the assessment targets that you want to describe.
        public let assessmentTargetArns: [String]

        public init(assessmentTargetArns: [String]) {
            self.assessmentTargetArns = assessmentTargetArns
        }

        private enum CodingKeys: String, CodingKey {
            case assessmentTargetArns = "assessmentTargetArns"
        }
    }

    public struct DescribeResourceGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceGroupArns", required: true, type: .list)
        ]
        /// The ARN that specifies the resource group that you want to describe.
        public let resourceGroupArns: [String]

        public init(resourceGroupArns: [String]) {
            self.resourceGroupArns = resourceGroupArns
        }

        private enum CodingKeys: String, CodingKey {
            case resourceGroupArns = "resourceGroupArns"
        }
    }

    public struct CreateExclusionsPreviewResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "previewToken", required: true, type: .string)
        ]
        /// Specifies the unique identifier of the requested exclusions preview. You can use the unique identifier to retrieve the exclusions preview when running the GetExclusionsPreview API.
        public let previewToken: String

        public init(previewToken: String) {
            self.previewToken = previewToken
        }

        private enum CodingKeys: String, CodingKey {
            case previewToken = "previewToken"
        }
    }

}