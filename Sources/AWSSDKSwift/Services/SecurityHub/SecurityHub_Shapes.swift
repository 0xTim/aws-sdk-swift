// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension SecurityHub {

    public struct Compliance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// Indicates the result of a compliance check.
        public let status: ComplianceStatus?

        public init(status: ComplianceStatus? = nil) {
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
        }
    }

    public struct DeclineInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", required: false, type: .list)
        ]
        /// A list of account IDs specifying accounts whose invitations to Security Hub you want to decline. 
        public let accountIds: [String]?

        public init(accountIds: [String]? = nil) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "AccountIds"
        }
    }

    public struct UpdateInsightRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "InsightArn", location: .uri(locationName: "InsightArn"), required: true, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "GroupByAttribute", required: false, type: .string)
        ]
        /// The updated name for the insight.
        public let name: String?
        /// The ARN of the insight that you want to update.
        public let insightArn: String
        /// The updated filters that define this insight.
        public let filters: AwsSecurityFindingFilters?
        /// The updated GroupBy attribute that defines this insight.
        public let groupByAttribute: String?

        public init(name: String? = nil, insightArn: String, filters: AwsSecurityFindingFilters? = nil, groupByAttribute: String? = nil) {
            self.name = name
            self.insightArn = insightArn
            self.filters = filters
            self.groupByAttribute = groupByAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case insightArn = "InsightArn"
            case filters = "Filters"
            case groupByAttribute = "GroupByAttribute"
        }
    }

    public struct DisassociateMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", required: false, type: .list)
        ]
        /// The account IDs of the member accounts that you want to disassociate from the master account.
        public let accountIds: [String]?

        public init(accountIds: [String]? = nil) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "AccountIds"
        }
    }

    public struct Invitation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: false, type: .string), 
            AWSShapeMember(label: "MemberStatus", required: false, type: .string), 
            AWSShapeMember(label: "InvitedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "InvitationId", required: false, type: .string)
        ]
        /// The account ID of the master Security Hub account who sent the invitation. 
        public let accountId: String?
        /// The current relationship status between the inviter and invitee accounts.
        public let memberStatus: String?
        /// The timestamp of when the invitation was sent.
        public let invitedAt: TimeStamp?
        /// The ID of the invitation sent by the master Security Hub account.
        public let invitationId: String?

        public init(accountId: String? = nil, memberStatus: String? = nil, invitedAt: TimeStamp? = nil, invitationId: String? = nil) {
            self.accountId = accountId
            self.memberStatus = memberStatus
            self.invitedAt = invitedAt
            self.invitationId = invitationId
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case memberStatus = "MemberStatus"
            case invitedAt = "InvitedAt"
            case invitationId = "InvitationId"
        }
    }

    public struct EnableSecurityHubResponse: AWSShape {

    }

    public struct NoteUpdate: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Text", required: true, type: .string), 
            AWSShapeMember(label: "UpdatedBy", required: true, type: .string)
        ]
        /// The updated note text.
        public let text: String
        /// The principal that updated the note.
        public let updatedBy: String

        public init(text: String, updatedBy: String) {
            self.text = text
            self.updatedBy = updatedBy
        }

        private enum CodingKeys: String, CodingKey {
            case text = "Text"
            case updatedBy = "UpdatedBy"
        }
    }

    public struct GetMasterAccountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Master", required: false, type: .structure)
        ]
        /// A list of details about the Security Hub master account for the current member account. 
        public let master: Invitation?

        public init(master: Invitation? = nil) {
            self.master = master
        }

        private enum CodingKeys: String, CodingKey {
            case master = "Master"
        }
    }

    public struct AwsS3BucketDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "OwnerName", required: false, type: .string), 
            AWSShapeMember(label: "OwnerId", required: false, type: .string)
        ]
        /// The display name of the owner of the S3 bucket.
        public let ownerName: String?
        /// The canonical user ID of the owner of the S3 bucket.
        public let ownerId: String?

        public init(ownerName: String? = nil, ownerId: String? = nil) {
            self.ownerName = ownerName
            self.ownerId = ownerId
        }

        private enum CodingKeys: String, CodingKey {
            case ownerName = "OwnerName"
            case ownerId = "OwnerId"
        }
    }

    public struct DeclineInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", required: false, type: .list)
        ]
        /// A list of account ID and email address pairs of the AWS accounts that could not be processed. 
        public let unprocessedAccounts: [Result]?

        public init(unprocessedAccounts: [Result]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "UnprocessedAccounts"
        }
    }

    public struct ListMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string), 
            AWSShapeMember(label: "OnlyAssociated", location: .querystring(locationName: "OnlyAssociated"), required: false, type: .boolean)
        ]
        /// Indicates the maximum number of items that you want in the response. 
        public let maxResults: Int32?
        /// Paginates results. Set the value of this parameter to NULL on your first call to the ListMembers operation. For subsequent calls to the operation, fill nextToken in the request with the value of NextToken from the previous response to continue listing data. 
        public let nextToken: String?
        /// Specifies what member accounts the response includes based on their relationship status with the master account. The default value is TRUE. If onlyAssociated is set to TRUE, the response includes member accounts whose relationship status with the master is set to ENABLED or DISABLED. If onlyAssociated is set to FALSE, the response includes all existing member accounts. 
        public let onlyAssociated: Bool?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, onlyAssociated: Bool? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.onlyAssociated = onlyAssociated
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case onlyAssociated = "OnlyAssociated"
        }
    }

    public struct EnableImportFindingsForProductRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductArn", required: true, type: .string)
        ]
        /// The ARN of the product that generates findings that you want to import into Security Hub.
        public let productArn: String

        public init(productArn: String) {
            self.productArn = productArn
        }

        private enum CodingKeys: String, CodingKey {
            case productArn = "ProductArn"
        }
    }

    public enum Partition: String, CustomStringConvertible, Codable {
        case aws = "aws"
        case awsCn = "aws-cn"
        case awsUsGov = "aws-us-gov"
        public var description: String { return self.rawValue }
    }

    public struct SortCriterion: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Field", required: false, type: .string), 
            AWSShapeMember(label: "SortOrder", required: false, type: .enum)
        ]
        /// The finding attribute used for sorting findings.
        public let field: String?
        /// The order used for sorting findings.
        public let sortOrder: SortOrder?

        public init(field: String? = nil, sortOrder: SortOrder? = nil) {
            self.field = field
            self.sortOrder = sortOrder
        }

        private enum CodingKeys: String, CodingKey {
            case field = "Field"
            case sortOrder = "SortOrder"
        }
    }

    public enum DateRangeUnit: String, CustomStringConvertible, Codable {
        case days = "DAYS"
        public var description: String { return self.rawValue }
    }

    public struct DisableImportFindingsForProductRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductSubscriptionArn", location: .uri(locationName: "ProductSubscriptionArn"), required: true, type: .string)
        ]
        /// The ARN of a resource that represents your subscription to a supported product.
        public let productSubscriptionArn: String

        public init(productSubscriptionArn: String) {
            self.productSubscriptionArn = productSubscriptionArn
        }

        private enum CodingKeys: String, CodingKey {
            case productSubscriptionArn = "ProductSubscriptionArn"
        }
    }

    public enum ThreatIntelIndicatorCategory: String, CustomStringConvertible, Codable {
        case backdoor = "BACKDOOR"
        case cardStealer = "CARD_STEALER"
        case commandAndControl = "COMMAND_AND_CONTROL"
        case dropSite = "DROP_SITE"
        case exploitSite = "EXPLOIT_SITE"
        case keylogger = "KEYLOGGER"
        public var description: String { return self.rawValue }
    }

    public enum ThreatIntelIndicatorType: String, CustomStringConvertible, Codable {
        case domain = "DOMAIN"
        case emailAddress = "EMAIL_ADDRESS"
        case hashMd5 = "HASH_MD5"
        case hashSha1 = "HASH_SHA1"
        case hashSha256 = "HASH_SHA256"
        case hashSha512 = "HASH_SHA512"
        case ipv4Address = "IPV4_ADDRESS"
        case ipv6Address = "IPV6_ADDRESS"
        case mutex = "MUTEX"
        case process = "PROCESS"
        case url = "URL"
        public var description: String { return self.rawValue }
    }

    public enum MalwareState: String, CustomStringConvertible, Codable {
        case observed = "OBSERVED"
        case removalFailed = "REMOVAL_FAILED"
        case removed = "REMOVED"
        public var description: String { return self.rawValue }
    }

    public struct DeleteInsightResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InsightArn", required: true, type: .string)
        ]
        /// The ARN of the insight that was deleted.
        public let insightArn: String

        public init(insightArn: String) {
            self.insightArn = insightArn
        }

        private enum CodingKeys: String, CodingKey {
            case insightArn = "InsightArn"
        }
    }

    public struct ListInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        /// Indicates the maximum number of items that you want in the response. 
        public let maxResults: Int32?
        /// Paginates results. Set the value of this parameter to NULL on your first call to the ListInvitations operation. For subsequent calls to the operation, fill nextToken in the request with the value of NextToken from the previous response to continue listing data. 
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct EnableImportFindingsForProductResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductSubscriptionArn", required: false, type: .string)
        ]
        /// The ARN of a resource that represents your subscription to the product that generates the findings that you want to import into Security Hub.
        public let productSubscriptionArn: String?

        public init(productSubscriptionArn: String? = nil) {
            self.productSubscriptionArn = productSubscriptionArn
        }

        private enum CodingKeys: String, CodingKey {
            case productSubscriptionArn = "ProductSubscriptionArn"
        }
    }

    public enum AwsIamAccessKeyStatus: String, CustomStringConvertible, Codable {
        case active = "Active"
        case inactive = "Inactive"
        public var description: String { return self.rawValue }
    }

    public struct Remediation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Recommendation", required: false, type: .structure)
        ]
        /// Provides a recommendation on how to remediate the issue identified within a finding.
        public let recommendation: Recommendation?

        public init(recommendation: Recommendation? = nil) {
            self.recommendation = recommendation
        }

        private enum CodingKeys: String, CodingKey {
            case recommendation = "Recommendation"
        }
    }

    public struct BatchImportFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SuccessCount", required: true, type: .integer), 
            AWSShapeMember(label: "FailedCount", required: true, type: .integer), 
            AWSShapeMember(label: "FailedFindings", required: false, type: .list)
        ]
        /// The number of findings that were successfully imported
        public let successCount: Int32
        /// The number of findings that cannot be imported.
        public let failedCount: Int32
        /// The list of the findings that cannot be imported.
        public let failedFindings: [ImportFindingsError]?

        public init(successCount: Int32, failedCount: Int32, failedFindings: [ImportFindingsError]? = nil) {
            self.successCount = successCount
            self.failedCount = failedCount
            self.failedFindings = failedFindings
        }

        private enum CodingKeys: String, CodingKey {
            case successCount = "SuccessCount"
            case failedCount = "FailedCount"
            case failedFindings = "FailedFindings"
        }
    }

    public struct CreateInsightResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InsightArn", required: true, type: .string)
        ]
        /// The ARN Of the created insight.
        public let insightArn: String

        public init(insightArn: String) {
            self.insightArn = insightArn
        }

        private enum CodingKeys: String, CodingKey {
            case insightArn = "InsightArn"
        }
    }

    public struct InsightResultValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "GroupByAttributeValue", required: true, type: .string), 
            AWSShapeMember(label: "Count", required: true, type: .integer)
        ]
        /// The value of the attribute by which the findings are grouped for the insight's whose results are returned by the GetInsightResults operation.
        public let groupByAttributeValue: String
        /// The number of findings returned for each GroupByAttributeValue.
        public let count: Int32

        public init(groupByAttributeValue: String, count: Int32) {
            self.groupByAttributeValue = groupByAttributeValue
            self.count = count
        }

        private enum CodingKeys: String, CodingKey {
            case groupByAttributeValue = "GroupByAttributeValue"
            case count = "Count"
        }
    }

    public struct Member: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: false, type: .string), 
            AWSShapeMember(label: "MemberStatus", required: false, type: .string), 
            AWSShapeMember(label: "Email", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "InvitedAt", required: false, type: .timestamp), 
            AWSShapeMember(label: "MasterId", required: false, type: .string)
        ]
        /// The AWS account ID of a Security Hub member account.
        public let accountId: String?
        /// The status of the relationship between the member account and its master account. 
        public let memberStatus: String?
        /// The email of a Security Hub member account.
        public let email: String?
        /// Time stamp at which this member account was updated.
        public let updatedAt: TimeStamp?
        /// Time stamp at which the member account was invited to Security Hub.
        public let invitedAt: TimeStamp?
        /// The AWS account ID of the master Security Hub account to this member account.
        public let masterId: String?

        public init(accountId: String? = nil, memberStatus: String? = nil, email: String? = nil, updatedAt: TimeStamp? = nil, invitedAt: TimeStamp? = nil, masterId: String? = nil) {
            self.accountId = accountId
            self.memberStatus = memberStatus
            self.email = email
            self.updatedAt = updatedAt
            self.invitedAt = invitedAt
            self.masterId = masterId
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case memberStatus = "MemberStatus"
            case email = "Email"
            case updatedAt = "UpdatedAt"
            case invitedAt = "InvitedAt"
            case masterId = "MasterId"
        }
    }

    public struct GetEnabledStandardsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "StandardsSubscriptions", required: false, type: .list)
        ]
        /// The token that is required for pagination.
        public let nextToken: String?
        /// The standards subscription details returned by the operation.
        public let standardsSubscriptions: [StandardsSubscription]?

        public init(nextToken: String? = nil, standardsSubscriptions: [StandardsSubscription]? = nil) {
            self.nextToken = nextToken
            self.standardsSubscriptions = standardsSubscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case standardsSubscriptions = "StandardsSubscriptions"
        }
    }

    public struct IpFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cidr", required: false, type: .string)
        ]
        /// Finding's CIDR value.
        public let cidr: String?

        public init(cidr: String? = nil) {
            self.cidr = cidr
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "Cidr"
        }
    }

    public struct GetFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "SortCriteria", required: false, type: .list), 
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Indicates the maximum number of items that you want in the response.
        public let maxResults: Int32?
        /// A collection of attributes used for sorting findings.
        public let sortCriteria: [SortCriterion]?
        /// A collection of attributes that is use for querying findings.
        public let filters: AwsSecurityFindingFilters?
        /// Paginates results. Set the value of this parameter to NULL on your first call to the GetFindings operation. For subsequent calls to the operation, fill nextToken in the request with the value of nextToken from the previous response to continue listing data.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, sortCriteria: [SortCriterion]? = nil, filters: AwsSecurityFindingFilters? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.sortCriteria = sortCriteria
            self.filters = filters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case sortCriteria = "SortCriteria"
            case filters = "Filters"
            case nextToken = "NextToken"
        }
    }

    public struct BatchEnableStandardsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StandardsSubscriptionRequests", required: true, type: .list)
        ]
        /// The list of standards that you want to enable.
        public let standardsSubscriptionRequests: [StandardsSubscriptionRequest]

        public init(standardsSubscriptionRequests: [StandardsSubscriptionRequest]) {
            self.standardsSubscriptionRequests = standardsSubscriptionRequests
        }

        private enum CodingKeys: String, CodingKey {
            case standardsSubscriptionRequests = "StandardsSubscriptionRequests"
        }
    }

    public struct AwsIamAccessKeyDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserName", required: false, type: .string), 
            AWSShapeMember(label: "CreatedAt", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The user associated with the IAM access key related to a finding.
        public let userName: String?
        /// The creation date/time of the IAM access key related to a finding.
        public let createdAt: String?
        /// The status of the IAM access key related to a finding.
        public let status: AwsIamAccessKeyStatus?

        public init(userName: String? = nil, createdAt: String? = nil, status: AwsIamAccessKeyStatus? = nil) {
            self.userName = userName
            self.createdAt = createdAt
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case userName = "UserName"
            case createdAt = "CreatedAt"
            case status = "Status"
        }
    }

    public struct DeleteInvitationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", required: false, type: .list)
        ]
        /// A list of account IDs specifying accounts whose invitations to Security Hub you want to delete. 
        public let accountIds: [String]?

        public init(accountIds: [String]? = nil) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "AccountIds"
        }
    }

    public struct AwsEc2InstanceDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ImageId", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "IpV4Addresses", required: false, type: .list), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "IpV6Addresses", required: false, type: .list), 
            AWSShapeMember(label: "KeyName", required: false, type: .string), 
            AWSShapeMember(label: "LaunchedAt", required: false, type: .string), 
            AWSShapeMember(label: "IamInstanceProfileArn", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string)
        ]
        /// The Amazon Machine Image (AMI) ID of the instance.
        public let imageId: String?
        /// The instance type of the instance. 
        public let `type`: String?
        /// The IPv4 addresses associated with the instance.
        public let ipV4Addresses: [String]?
        /// The identifier of the subnet in which the instance was launched.
        public let subnetId: String?
        /// The IPv6 addresses associated with the instance.
        public let ipV6Addresses: [String]?
        /// The key name associated with the instance.
        public let keyName: String?
        /// The date/time the instance was launched.
        public let launchedAt: String?
        /// The IAM profile ARN of the instance.
        public let iamInstanceProfileArn: String?
        /// The identifier of the VPC in which the instance was launched.
        public let vpcId: String?

        public init(imageId: String? = nil, type: String? = nil, ipV4Addresses: [String]? = nil, subnetId: String? = nil, ipV6Addresses: [String]? = nil, keyName: String? = nil, launchedAt: String? = nil, iamInstanceProfileArn: String? = nil, vpcId: String? = nil) {
            self.imageId = imageId
            self.`type` = `type`
            self.ipV4Addresses = ipV4Addresses
            self.subnetId = subnetId
            self.ipV6Addresses = ipV6Addresses
            self.keyName = keyName
            self.launchedAt = launchedAt
            self.iamInstanceProfileArn = iamInstanceProfileArn
            self.vpcId = vpcId
        }

        private enum CodingKeys: String, CodingKey {
            case imageId = "ImageId"
            case `type` = "Type"
            case ipV4Addresses = "IpV4Addresses"
            case subnetId = "SubnetId"
            case ipV6Addresses = "IpV6Addresses"
            case keyName = "KeyName"
            case launchedAt = "LaunchedAt"
            case iamInstanceProfileArn = "IamInstanceProfileArn"
            case vpcId = "VpcId"
        }
    }

    public struct DeleteMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", required: false, type: .list)
        ]
        /// A list of account IDs of the Security Hub member accounts that you want to delete. 
        public let accountIds: [String]?

        public init(accountIds: [String]? = nil) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "AccountIds"
        }
    }

    public struct DisassociateFromMasterAccountResponse: AWSShape {

    }

    public struct GetEnabledStandardsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "StandardsSubscriptionArns", required: false, type: .list)
        ]
        /// Indicates the maximum number of items that you want in the response.
        public let maxResults: Int32?
        /// Paginates results. Set the value of this parameter to NULL on your first call to the GetEnabledStandards operation. For subsequent calls to the operation, fill nextToken in the request with the value of nextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// The list of standards subscription ARNS that you want to list and describe.
        public let standardsSubscriptionArns: [String]?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, standardsSubscriptionArns: [String]? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.standardsSubscriptionArns = standardsSubscriptionArns
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case standardsSubscriptionArns = "StandardsSubscriptionArns"
        }
    }

    public struct BatchEnableStandardsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StandardsSubscriptions", required: false, type: .list)
        ]
        /// The details of the standards subscriptions that were enabled.
        public let standardsSubscriptions: [StandardsSubscription]?

        public init(standardsSubscriptions: [StandardsSubscription]? = nil) {
            self.standardsSubscriptions = standardsSubscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case standardsSubscriptions = "StandardsSubscriptions"
        }
    }

    public enum WorkflowState: String, CustomStringConvertible, Codable {
        case new = "NEW"
        case assigned = "ASSIGNED"
        case inProgress = "IN_PROGRESS"
        case deferred = "DEFERRED"
        case resolved = "RESOLVED"
        public var description: String { return self.rawValue }
    }

    public enum SortOrder: String, CustomStringConvertible, Codable {
        case asc = "asc"
        case desc = "desc"
        public var description: String { return self.rawValue }
    }

    public struct GetInsightsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Insights", required: true, type: .list)
        ]
        /// The token that is required for pagination.
        public let nextToken: String?
        /// The insights returned by the operation.
        public let insights: [Insight]

        public init(nextToken: String? = nil, insights: [Insight]) {
            self.nextToken = nextToken
            self.insights = insights
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case insights = "Insights"
        }
    }

    public struct GetInsightResultsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InsightArn", location: .uri(locationName: "InsightArn"), required: true, type: .string)
        ]
        /// The ARN of the insight whose results you want to see.
        public let insightArn: String

        public init(insightArn: String) {
            self.insightArn = insightArn
        }

        private enum CodingKeys: String, CodingKey {
            case insightArn = "InsightArn"
        }
    }

    public enum VerificationState: String, CustomStringConvertible, Codable {
        case unknown = "UNKNOWN"
        case truePositive = "TRUE_POSITIVE"
        case falsePositive = "FALSE_POSITIVE"
        case benignPositive = "BENIGN_POSITIVE"
        public var description: String { return self.rawValue }
    }

    public struct GetFindingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Findings", required: true, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Findings details returned by the operation.
        public let findings: [AwsSecurityFinding]
        /// The token that is required for pagination.
        public let nextToken: String?

        public init(findings: [AwsSecurityFinding], nextToken: String? = nil) {
            self.findings = findings
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case findings = "Findings"
            case nextToken = "NextToken"
        }
    }

    public struct KeywordFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// A value for the keyword.
        public let value: String?

        public init(value: String? = nil) {
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
        }
    }

    public struct ProcessDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchedAt", required: false, type: .string), 
            AWSShapeMember(label: "ParentPid", required: false, type: .integer), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "TerminatedAt", required: false, type: .string), 
            AWSShapeMember(label: "Path", required: false, type: .string), 
            AWSShapeMember(label: "Pid", required: false, type: .integer)
        ]
        /// The date/time that the process was launched.
        public let launchedAt: String?
        /// The parent process ID.
        public let parentPid: Int32?
        /// The name of the process.
        public let name: String?
        /// The date/time that the process was terminated.
        public let terminatedAt: String?
        /// The path to the process executable.
        public let path: String?
        /// The process ID.
        public let pid: Int32?

        public init(launchedAt: String? = nil, parentPid: Int32? = nil, name: String? = nil, terminatedAt: String? = nil, path: String? = nil, pid: Int32? = nil) {
            self.launchedAt = launchedAt
            self.parentPid = parentPid
            self.name = name
            self.terminatedAt = terminatedAt
            self.path = path
            self.pid = pid
        }

        private enum CodingKeys: String, CodingKey {
            case launchedAt = "LaunchedAt"
            case parentPid = "ParentPid"
            case name = "Name"
            case terminatedAt = "TerminatedAt"
            case path = "Path"
            case pid = "Pid"
        }
    }

    public enum RecordState: String, CustomStringConvertible, Codable {
        case active = "ACTIVE"
        case archived = "ARCHIVED"
        public var description: String { return self.rawValue }
    }

    public struct GetMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", required: false, type: .list), 
            AWSShapeMember(label: "Members", required: false, type: .list)
        ]
        /// A list of account ID and email address pairs of the AWS accounts that could not be processed.
        public let unprocessedAccounts: [Result]?
        /// A list of details about the Security Hub member accounts.
        public let members: [Member]?

        public init(unprocessedAccounts: [Result]? = nil, members: [Member]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
            self.members = members
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "UnprocessedAccounts"
            case members = "Members"
        }
    }

    public struct MapFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Comparison", required: false, type: .enum), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The key of the map filter.
        public let key: String?
        /// Represents the condition to be applied to a key value when querying for findings with a map filter.
        public let comparison: MapFilterComparison?
        /// The value for the key in the map filter.
        public let value: String?

        public init(key: String? = nil, comparison: MapFilterComparison? = nil, value: String? = nil) {
            self.key = key
            self.comparison = comparison
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case comparison = "Comparison"
            case value = "Value"
        }
    }

    public struct DisableSecurityHubResponse: AWSShape {

    }

    public enum MapFilterComparison: String, CustomStringConvertible, Codable {
        case contains = "CONTAINS"
        public var description: String { return self.rawValue }
    }

    public struct InsightResults: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InsightArn", required: true, type: .string), 
            AWSShapeMember(label: "ResultValues", required: true, type: .list), 
            AWSShapeMember(label: "GroupByAttribute", required: true, type: .string)
        ]
        /// The ARN of the insight whose results are returned by the GetInsightResults operation.
        public let insightArn: String
        /// The list of insight result values returned by the GetInsightResults operation.
        public let resultValues: [InsightResultValue]
        /// The attribute by which the findings are grouped for the insight's whose results are returned by the GetInsightResults operation.
        public let groupByAttribute: String

        public init(insightArn: String, resultValues: [InsightResultValue], groupByAttribute: String) {
            self.insightArn = insightArn
            self.resultValues = resultValues
            self.groupByAttribute = groupByAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case insightArn = "InsightArn"
            case resultValues = "ResultValues"
            case groupByAttribute = "GroupByAttribute"
        }
    }

    public enum ComplianceStatus: String, CustomStringConvertible, Codable {
        case passed = "PASSED"
        case warning = "WARNING"
        case failed = "FAILED"
        case notAvailable = "NOT_AVAILABLE"
        public var description: String { return self.rawValue }
    }

    public struct StandardsSubscription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StandardsSubscriptionArn", required: true, type: .string), 
            AWSShapeMember(label: "StandardsInput", required: true, type: .map), 
            AWSShapeMember(label: "StandardsArn", required: true, type: .string), 
            AWSShapeMember(label: "StandardsStatus", required: true, type: .enum)
        ]
        /// The ARN of a resource that represents your subscription to a supported standard.
        public let standardsSubscriptionArn: String
        public let standardsInput: [String: String]
        /// The ARN of a standard.
        public let standardsArn: String
        /// The standard's status.
        public let standardsStatus: StandardsStatus

        public init(standardsSubscriptionArn: String, standardsInput: [String: String], standardsArn: String, standardsStatus: StandardsStatus) {
            self.standardsSubscriptionArn = standardsSubscriptionArn
            self.standardsInput = standardsInput
            self.standardsArn = standardsArn
            self.standardsStatus = standardsStatus
        }

        private enum CodingKeys: String, CodingKey {
            case standardsSubscriptionArn = "StandardsSubscriptionArn"
            case standardsInput = "StandardsInput"
            case standardsArn = "StandardsArn"
            case standardsStatus = "StandardsStatus"
        }
    }

    public struct Resource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Region", required: false, type: .string), 
            AWSShapeMember(label: "Details", required: false, type: .structure), 
            AWSShapeMember(label: "Type", required: true, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .map), 
            AWSShapeMember(label: "Partition", required: false, type: .enum)
        ]
        /// The canonical AWS external region name where this resource is located.
        public let region: String?
        /// Provides additional details about the resource.
        public let details: ResourceDetails?
        /// Specifies the type of the resource for which details are provided.
        public let `type`: String
        /// The canonical identifier for the given resource type.
        public let id: String
        /// A list of AWS tags associated with a resource at the time the finding was processed.
        public let tags: [String: String]?
        /// The canonical AWS partition name to which the region is assigned.
        public let partition: Partition?

        public init(region: String? = nil, details: ResourceDetails? = nil, type: String, id: String, tags: [String: String]? = nil, partition: Partition? = nil) {
            self.region = region
            self.details = details
            self.`type` = `type`
            self.id = id
            self.tags = tags
            self.partition = partition
        }

        private enum CodingKeys: String, CodingKey {
            case region = "Region"
            case details = "Details"
            case `type` = "Type"
            case id = "Id"
            case tags = "Tags"
            case partition = "Partition"
        }
    }

    public struct GetInvitationsCountResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InvitationsCount", required: false, type: .integer)
        ]
        /// The number of all membership invitations sent to this Security Hub member account, not including the currently accepted invitation. 
        public let invitationsCount: Int32?

        public init(invitationsCount: Int32? = nil) {
            self.invitationsCount = invitationsCount
        }

        private enum CodingKeys: String, CodingKey {
            case invitationsCount = "InvitationsCount"
        }
    }

    public struct BatchDisableStandardsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StandardsSubscriptionArns", required: true, type: .list)
        ]
        /// The ARNS of the standards subscriptions that you want to disable.
        public let standardsSubscriptionArns: [String]

        public init(standardsSubscriptionArns: [String]) {
            self.standardsSubscriptionArns = standardsSubscriptionArns
        }

        private enum CodingKeys: String, CodingKey {
            case standardsSubscriptionArns = "StandardsSubscriptionArns"
        }
    }

    public struct DateRange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Unit", required: false, type: .enum), 
            AWSShapeMember(label: "Value", required: false, type: .integer)
        ]
        /// A date range unit for the date filter.
        public let unit: DateRangeUnit?
        /// A date range value for the date filter.
        public let value: Int32?

        public init(unit: DateRangeUnit? = nil, value: Int32? = nil) {
            self.unit = unit
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case unit = "Unit"
            case value = "Value"
        }
    }

    public struct EnableSecurityHubRequest: AWSShape {

    }

    public struct ThreatIntelIndicator: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LastObservedAt", required: false, type: .string), 
            AWSShapeMember(label: "Category", required: false, type: .enum), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "SourceUrl", required: false, type: .string), 
            AWSShapeMember(label: "Source", required: false, type: .string)
        ]
        /// The date/time of the last observation of a threat intel indicator.
        public let lastObservedAt: String?
        /// The category of a threat intel indicator.
        public let category: ThreatIntelIndicatorCategory?
        /// The type of a threat intel indicator.
        public let `type`: ThreatIntelIndicatorType?
        /// The value of a threat intel indicator.
        public let value: String?
        /// The URL for more details from the source of the threat intel.
        public let sourceUrl: String?
        /// The source of the threat intel.
        public let source: String?

        public init(lastObservedAt: String? = nil, category: ThreatIntelIndicatorCategory? = nil, type: ThreatIntelIndicatorType? = nil, value: String? = nil, sourceUrl: String? = nil, source: String? = nil) {
            self.lastObservedAt = lastObservedAt
            self.category = category
            self.`type` = `type`
            self.value = value
            self.sourceUrl = sourceUrl
            self.source = source
        }

        private enum CodingKeys: String, CodingKey {
            case lastObservedAt = "LastObservedAt"
            case category = "Category"
            case `type` = "Type"
            case value = "Value"
            case sourceUrl = "SourceUrl"
            case source = "Source"
        }
    }

    public struct AcceptInvitationResponse: AWSShape {

    }

    public struct ListEnabledProductsForImportRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "MaxResults"), required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "NextToken"), required: false, type: .string)
        ]
        /// Indicates the maximum number of items that you want in the response.
        public let maxResults: Int32?
        /// Paginates results. Set the value of this parameter to NULL on your first call to the ListEnabledProductsForImport operation. For subsequent calls to the operation, fill nextToken in the request with the value of NextToken from the previous response to continue listing data.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
        }
    }

    public struct CreateInsightRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "GroupByAttribute", required: true, type: .string)
        ]
        /// A collection of attributes that are applied to all active Security Hub-aggregated findings and that result in a subset of findings that are included in this insight.
        public let filters: AwsSecurityFindingFilters
        /// The user-defined name that identifies the insight that you want to create.
        public let name: String
        /// The attribute by which the insight's findings are grouped. This attribute is used as a findings aggregator for the purposes of viewing and managing multiple related findings under a single operand. 
        public let groupByAttribute: String

        public init(filters: AwsSecurityFindingFilters, name: String, groupByAttribute: String) {
            self.filters = filters
            self.name = name
            self.groupByAttribute = groupByAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case name = "Name"
            case groupByAttribute = "GroupByAttribute"
        }
    }

    public struct ResourceDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AwsS3Bucket", required: false, type: .structure), 
            AWSShapeMember(label: "AwsIamAccessKey", required: false, type: .structure), 
            AWSShapeMember(label: "Container", required: false, type: .structure), 
            AWSShapeMember(label: "Other", required: false, type: .map), 
            AWSShapeMember(label: "AwsEc2Instance", required: false, type: .structure)
        ]
        /// The details of an AWS S3 Bucket.
        public let awsS3Bucket: AwsS3BucketDetails?
        /// AWS IAM access key details related to a finding.
        public let awsIamAccessKey: AwsIamAccessKeyDetails?
        /// Container details related to a finding.
        public let container: ContainerDetails?
        /// The details of a resource that does not have a specific sub-field for the resource type defined.
        public let other: [String: String]?
        /// The details of an AWS EC2 instance.
        public let awsEc2Instance: AwsEc2InstanceDetails?

        public init(awsS3Bucket: AwsS3BucketDetails? = nil, awsIamAccessKey: AwsIamAccessKeyDetails? = nil, container: ContainerDetails? = nil, other: [String: String]? = nil, awsEc2Instance: AwsEc2InstanceDetails? = nil) {
            self.awsS3Bucket = awsS3Bucket
            self.awsIamAccessKey = awsIamAccessKey
            self.container = container
            self.other = other
            self.awsEc2Instance = awsEc2Instance
        }

        private enum CodingKeys: String, CodingKey {
            case awsS3Bucket = "AwsS3Bucket"
            case awsIamAccessKey = "AwsIamAccessKey"
            case container = "Container"
            case other = "Other"
            case awsEc2Instance = "AwsEc2Instance"
        }
    }

    public struct AwsSecurityFindingFilters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Confidence", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsEc2InstanceIpV4Addresses", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsEc2InstanceVpcId", required: false, type: .list), 
            AWSShapeMember(label: "NetworkSourceIpV6", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsIamAccessKeyStatus", required: false, type: .list), 
            AWSShapeMember(label: "NetworkSourcePort", required: false, type: .list), 
            AWSShapeMember(label: "SeverityProduct", required: false, type: .list), 
            AWSShapeMember(label: "ProcessParentPid", required: false, type: .list), 
            AWSShapeMember(label: "ResourceType", required: false, type: .list), 
            AWSShapeMember(label: "ComplianceStatus", required: false, type: .list), 
            AWSShapeMember(label: "MalwareType", required: false, type: .list), 
            AWSShapeMember(label: "RecommendationText", required: false, type: .list), 
            AWSShapeMember(label: "NetworkDestinationDomain", required: false, type: .list), 
            AWSShapeMember(label: "UserDefinedFields", required: false, type: .list), 
            AWSShapeMember(label: "SeverityLabel", required: false, type: .list), 
            AWSShapeMember(label: "GeneratorId", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsEc2InstanceType", required: false, type: .list), 
            AWSShapeMember(label: "Title", required: false, type: .list), 
            AWSShapeMember(label: "ResourceRegion", required: false, type: .list), 
            AWSShapeMember(label: "ResourceId", required: false, type: .list), 
            AWSShapeMember(label: "ResourceDetailsOther", required: false, type: .list), 
            AWSShapeMember(label: "FirstObservedAt", required: false, type: .list), 
            AWSShapeMember(label: "ProcessName", required: false, type: .list), 
            AWSShapeMember(label: "VerificationState", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsEc2InstanceImageId", required: false, type: .list), 
            AWSShapeMember(label: "ProcessPid", required: false, type: .list), 
            AWSShapeMember(label: "NetworkProtocol", required: false, type: .list), 
            AWSShapeMember(label: "NetworkSourceIpV4", required: false, type: .list), 
            AWSShapeMember(label: "ThreatIntelIndicatorSourceUrl", required: false, type: .list), 
            AWSShapeMember(label: "Keyword", required: false, type: .list), 
            AWSShapeMember(label: "NoteText", required: false, type: .list), 
            AWSShapeMember(label: "ProcessLaunchedAt", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsEc2InstanceIpV6Addresses", required: false, type: .list), 
            AWSShapeMember(label: "NetworkDestinationPort", required: false, type: .list), 
            AWSShapeMember(label: "ThreatIntelIndicatorLastObservedAt", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsIamAccessKeyUserName", required: false, type: .list), 
            AWSShapeMember(label: "SourceUrl", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsEc2InstanceSubnetId", required: false, type: .list), 
            AWSShapeMember(label: "NoteUpdatedBy", required: false, type: .list), 
            AWSShapeMember(label: "Type", required: false, type: .list), 
            AWSShapeMember(label: "CreatedAt", required: false, type: .list), 
            AWSShapeMember(label: "Criticality", required: false, type: .list), 
            AWSShapeMember(label: "ThreatIntelIndicatorCategory", required: false, type: .list), 
            AWSShapeMember(label: "ThreatIntelIndicatorValue", required: false, type: .list), 
            AWSShapeMember(label: "ProcessPath", required: false, type: .list), 
            AWSShapeMember(label: "NetworkSourceDomain", required: false, type: .list), 
            AWSShapeMember(label: "Description", required: false, type: .list), 
            AWSShapeMember(label: "ResourceContainerLaunchedAt", required: false, type: .list), 
            AWSShapeMember(label: "SeverityNormalized", required: false, type: .list), 
            AWSShapeMember(label: "NetworkDestinationIpV4", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsEc2InstanceIamInstanceProfileArn", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsS3BucketOwnerName", required: false, type: .list), 
            AWSShapeMember(label: "RelatedFindingsId", required: false, type: .list), 
            AWSShapeMember(label: "NoteUpdatedAt", required: false, type: .list), 
            AWSShapeMember(label: "Id", required: false, type: .list), 
            AWSShapeMember(label: "ThreatIntelIndicatorType", required: false, type: .list), 
            AWSShapeMember(label: "AwsAccountId", required: false, type: .list), 
            AWSShapeMember(label: "ResourceContainerName", required: false, type: .list), 
            AWSShapeMember(label: "ProductName", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsEc2InstanceKeyName", required: false, type: .list), 
            AWSShapeMember(label: "UpdatedAt", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsIamAccessKeyCreatedAt", required: false, type: .list), 
            AWSShapeMember(label: "ProductFields", required: false, type: .list), 
            AWSShapeMember(label: "MalwareState", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsEc2InstanceLaunchedAt", required: false, type: .list), 
            AWSShapeMember(label: "ThreatIntelIndicatorSource", required: false, type: .list), 
            AWSShapeMember(label: "ResourceAwsS3BucketOwnerId", required: false, type: .list), 
            AWSShapeMember(label: "NetworkSourceMac", required: false, type: .list), 
            AWSShapeMember(label: "RelatedFindingsProductArn", required: false, type: .list), 
            AWSShapeMember(label: "RecordState", required: false, type: .list), 
            AWSShapeMember(label: "ResourcePartition", required: false, type: .list), 
            AWSShapeMember(label: "ProductArn", required: false, type: .list), 
            AWSShapeMember(label: "ResourceTags", required: false, type: .list), 
            AWSShapeMember(label: "LastObservedAt", required: false, type: .list), 
            AWSShapeMember(label: "WorkflowState", required: false, type: .list), 
            AWSShapeMember(label: "CompanyName", required: false, type: .list), 
            AWSShapeMember(label: "MalwareName", required: false, type: .list), 
            AWSShapeMember(label: "NetworkDirection", required: false, type: .list), 
            AWSShapeMember(label: "ResourceContainerImageName", required: false, type: .list), 
            AWSShapeMember(label: "NetworkDestinationIpV6", required: false, type: .list), 
            AWSShapeMember(label: "MalwarePath", required: false, type: .list), 
            AWSShapeMember(label: "ProcessTerminatedAt", required: false, type: .list), 
            AWSShapeMember(label: "ResourceContainerImageId", required: false, type: .list)
        ]
        /// A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale. 0 equates zero percent confidence and 100 equates to 100 percent confidence.
        public let confidence: [NumberFilter]?
        /// The IPv4 addresses associated with the instance.
        public let resourceAwsEc2InstanceIpV4Addresses: [IpFilter]?
        /// The identifier of the VPC in which the instance was launched.
        public let resourceAwsEc2InstanceVpcId: [StringFilter]?
        /// The source IPv6 address of network-related information about a finding.
        public let networkSourceIpV6: [IpFilter]?
        /// The status of the IAM access key related to a finding.
        public let resourceAwsIamAccessKeyStatus: [StringFilter]?
        /// The source port of network-related information about a finding.
        public let networkSourcePort: [NumberFilter]?
        /// The native severity as defined by the security findings provider's solution that generated the finding.
        public let severityProduct: [NumberFilter]?
        /// The parent process ID.
        public let processParentPid: [NumberFilter]?
        /// Specifies the type of the resource for which details are provided.
        public let resourceType: [StringFilter]?
        /// Exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard (for example, AWS CIS Foundations). Contains compliance-related finding details.
        public let complianceStatus: [StringFilter]?
        /// The type of the malware that was observed.
        public let malwareType: [StringFilter]?
        /// The recommendation of what to do about the issue described in a finding.
        public let recommendationText: [StringFilter]?
        /// The destination domain of network-related information about a finding.
        public let networkDestinationDomain: [StringFilter]?
        /// A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. 
        public let userDefinedFields: [MapFilter]?
        /// The label of a finding's severity.
        public let severityLabel: [StringFilter]?
        /// This is the identifier for the solution-specific component (a discrete unit of logic) that generated a finding. In various security findings provider's solutions, this generator can be called a rule, a check, a detector, a plug-in, etc.
        public let generatorId: [StringFilter]?
        /// The instance type of the instance.
        public let resourceAwsEc2InstanceType: [StringFilter]?
        /// A finding's title.
        public let title: [StringFilter]?
        /// The canonical AWS external region name where this resource is located.
        public let resourceRegion: [StringFilter]?
        /// The canonical identifier for the given resource type.
        public let resourceId: [StringFilter]?
        /// The details of a resource that does not have a specific sub-field for the resource type defined.
        public let resourceDetailsOther: [MapFilter]?
        /// An ISO8601-formatted timestamp that indicates when the potential security issue captured by a finding was first observed by the security findings provider.
        public let firstObservedAt: [DateFilter]?
        /// The name of the process.
        public let processName: [StringFilter]?
        /// Indicates the veracity of a finding. 
        public let verificationState: [StringFilter]?
        /// The Amazon Machine Image (AMI) ID of the instance.
        public let resourceAwsEc2InstanceImageId: [StringFilter]?
        /// The process ID.
        public let processPid: [NumberFilter]?
        /// The protocol of network-related information about a finding.
        public let networkProtocol: [StringFilter]?
        /// The source IPv4 address of network-related information about a finding.
        public let networkSourceIpV4: [IpFilter]?
        /// The URL for more details from the source of the threat intel.
        public let threatIntelIndicatorSourceUrl: [StringFilter]?
        /// A keyword for a finding.
        public let keyword: [KeywordFilter]?
        /// The text of a note.
        public let noteText: [StringFilter]?
        /// The date/time that the process was launched.
        public let processLaunchedAt: [DateFilter]?
        /// The IPv6 addresses associated with the instance.
        public let resourceAwsEc2InstanceIpV6Addresses: [IpFilter]?
        /// The destination port of network-related information about a finding.
        public let networkDestinationPort: [NumberFilter]?
        /// The date/time of the last observation of a threat intel indicator.
        public let threatIntelIndicatorLastObservedAt: [DateFilter]?
        /// The user associated with the IAM access key related to a finding.
        public let resourceAwsIamAccessKeyUserName: [StringFilter]?
        /// A URL that links to a page about the current finding in the security findings provider's solution.
        public let sourceUrl: [StringFilter]?
        /// The identifier of the subnet in which the instance was launched.
        public let resourceAwsEc2InstanceSubnetId: [StringFilter]?
        /// The principal that created a note.
        public let noteUpdatedBy: [StringFilter]?
        /// A finding type in the format of 'namespace/category/classifier' that classifies a finding.
        public let `type`: [StringFilter]?
        /// An ISO8601-formatted timestamp that indicates when the potential security issue captured by a finding was created by the security findings provider.
        public let createdAt: [DateFilter]?
        /// The level of importance assigned to the resources associated with the finding. A score of 0 means the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources.
        public let criticality: [NumberFilter]?
        /// The category of a threat intel indicator.
        public let threatIntelIndicatorCategory: [StringFilter]?
        /// The value of a threat intel indicator.
        public let threatIntelIndicatorValue: [StringFilter]?
        /// The path to the process executable.
        public let processPath: [StringFilter]?
        /// The source domain of network-related information about a finding.
        public let networkSourceDomain: [StringFilter]?
        /// A finding's description.
        public let description: [StringFilter]?
        /// The date/time that the container was started.
        public let resourceContainerLaunchedAt: [DateFilter]?
        /// The normalized severity of a finding.
        public let severityNormalized: [NumberFilter]?
        /// The destination IPv4 address of network-related information about a finding.
        public let networkDestinationIpV4: [IpFilter]?
        /// The IAM profile ARN of the instance.
        public let resourceAwsEc2InstanceIamInstanceProfileArn: [StringFilter]?
        /// The display name of the owner of the S3 bucket.
        public let resourceAwsS3BucketOwnerName: [StringFilter]?
        /// The solution-generated identifier for a related finding.
        public let relatedFindingsId: [StringFilter]?
        /// The timestamp of when the note was updated.
        public let noteUpdatedAt: [DateFilter]?
        /// The security findings provider-specific identifier for a finding.
        public let id: [StringFilter]?
        /// The type of a threat intel indicator.
        public let threatIntelIndicatorType: [StringFilter]?
        /// The AWS account ID in which a finding is generated.
        public let awsAccountId: [StringFilter]?
        /// The name of the container related to a finding.
        public let resourceContainerName: [StringFilter]?
        /// The name of the solution (product) that generates findings.
        public let productName: [StringFilter]?
        /// The key name associated with the instance.
        public let resourceAwsEc2InstanceKeyName: [StringFilter]?
        /// An ISO8601-formatted timestamp that indicates when the finding record was last updated by the security findings provider. 
        public let updatedAt: [DateFilter]?
        /// The creation date/time of the IAM access key related to a finding.
        public let resourceAwsIamAccessKeyCreatedAt: [DateFilter]?
        /// A data type where security findings providers can include additional solution-specific details that are not part of the defined AwsSecurityFinding format.
        public let productFields: [MapFilter]?
        /// The state of the malware that was observed.
        public let malwareState: [StringFilter]?
        /// The date/time the instance was launched.
        public let resourceAwsEc2InstanceLaunchedAt: [DateFilter]?
        /// The source of the threat intel.
        public let threatIntelIndicatorSource: [StringFilter]?
        /// The canonical user ID of the owner of the S3 bucket.
        public let resourceAwsS3BucketOwnerId: [StringFilter]?
        /// The source media access control (MAC) address of network-related information about a finding.
        public let networkSourceMac: [StringFilter]?
        /// The ARN of the solution that generated a related finding.
        public let relatedFindingsProductArn: [StringFilter]?
        /// The updated record state for the finding.
        public let recordState: [StringFilter]?
        /// The canonical AWS partition name to which the region is assigned.
        public let resourcePartition: [StringFilter]?
        /// The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) once this provider's product (solution that generates findings) is registered with Security Hub.
        public let productArn: [StringFilter]?
        /// A list of AWS tags associated with a resource at the time the finding was processed.
        public let resourceTags: [MapFilter]?
        /// An ISO8601-formatted timestamp that indicates when the potential security issue captured by a finding was most recently observed by the security findings provider.
        public let lastObservedAt: [DateFilter]?
        /// The workflow state of a finding.
        public let workflowState: [StringFilter]?
        /// The name of the findings provider (company) that owns the solution (product) that generates findings.
        public let companyName: [StringFilter]?
        /// The name of the malware that was observed.
        public let malwareName: [StringFilter]?
        /// Indicates the direction of network traffic associated with a finding.
        public let networkDirection: [StringFilter]?
        /// The name of the image related to a finding.
        public let resourceContainerImageName: [StringFilter]?
        /// The destination IPv6 address of network-related information about a finding.
        public let networkDestinationIpV6: [IpFilter]?
        /// The filesystem path of the malware that was observed.
        public let malwarePath: [StringFilter]?
        /// The date/time that the process was terminated.
        public let processTerminatedAt: [DateFilter]?
        /// The identifier of the image related to a finding.
        public let resourceContainerImageId: [StringFilter]?

        public init(confidence: [NumberFilter]? = nil, resourceAwsEc2InstanceIpV4Addresses: [IpFilter]? = nil, resourceAwsEc2InstanceVpcId: [StringFilter]? = nil, networkSourceIpV6: [IpFilter]? = nil, resourceAwsIamAccessKeyStatus: [StringFilter]? = nil, networkSourcePort: [NumberFilter]? = nil, severityProduct: [NumberFilter]? = nil, processParentPid: [NumberFilter]? = nil, resourceType: [StringFilter]? = nil, complianceStatus: [StringFilter]? = nil, malwareType: [StringFilter]? = nil, recommendationText: [StringFilter]? = nil, networkDestinationDomain: [StringFilter]? = nil, userDefinedFields: [MapFilter]? = nil, severityLabel: [StringFilter]? = nil, generatorId: [StringFilter]? = nil, resourceAwsEc2InstanceType: [StringFilter]? = nil, title: [StringFilter]? = nil, resourceRegion: [StringFilter]? = nil, resourceId: [StringFilter]? = nil, resourceDetailsOther: [MapFilter]? = nil, firstObservedAt: [DateFilter]? = nil, processName: [StringFilter]? = nil, verificationState: [StringFilter]? = nil, resourceAwsEc2InstanceImageId: [StringFilter]? = nil, processPid: [NumberFilter]? = nil, networkProtocol: [StringFilter]? = nil, networkSourceIpV4: [IpFilter]? = nil, threatIntelIndicatorSourceUrl: [StringFilter]? = nil, keyword: [KeywordFilter]? = nil, noteText: [StringFilter]? = nil, processLaunchedAt: [DateFilter]? = nil, resourceAwsEc2InstanceIpV6Addresses: [IpFilter]? = nil, networkDestinationPort: [NumberFilter]? = nil, threatIntelIndicatorLastObservedAt: [DateFilter]? = nil, resourceAwsIamAccessKeyUserName: [StringFilter]? = nil, sourceUrl: [StringFilter]? = nil, resourceAwsEc2InstanceSubnetId: [StringFilter]? = nil, noteUpdatedBy: [StringFilter]? = nil, type: [StringFilter]? = nil, createdAt: [DateFilter]? = nil, criticality: [NumberFilter]? = nil, threatIntelIndicatorCategory: [StringFilter]? = nil, threatIntelIndicatorValue: [StringFilter]? = nil, processPath: [StringFilter]? = nil, networkSourceDomain: [StringFilter]? = nil, description: [StringFilter]? = nil, resourceContainerLaunchedAt: [DateFilter]? = nil, severityNormalized: [NumberFilter]? = nil, networkDestinationIpV4: [IpFilter]? = nil, resourceAwsEc2InstanceIamInstanceProfileArn: [StringFilter]? = nil, resourceAwsS3BucketOwnerName: [StringFilter]? = nil, relatedFindingsId: [StringFilter]? = nil, noteUpdatedAt: [DateFilter]? = nil, id: [StringFilter]? = nil, threatIntelIndicatorType: [StringFilter]? = nil, awsAccountId: [StringFilter]? = nil, resourceContainerName: [StringFilter]? = nil, productName: [StringFilter]? = nil, resourceAwsEc2InstanceKeyName: [StringFilter]? = nil, updatedAt: [DateFilter]? = nil, resourceAwsIamAccessKeyCreatedAt: [DateFilter]? = nil, productFields: [MapFilter]? = nil, malwareState: [StringFilter]? = nil, resourceAwsEc2InstanceLaunchedAt: [DateFilter]? = nil, threatIntelIndicatorSource: [StringFilter]? = nil, resourceAwsS3BucketOwnerId: [StringFilter]? = nil, networkSourceMac: [StringFilter]? = nil, relatedFindingsProductArn: [StringFilter]? = nil, recordState: [StringFilter]? = nil, resourcePartition: [StringFilter]? = nil, productArn: [StringFilter]? = nil, resourceTags: [MapFilter]? = nil, lastObservedAt: [DateFilter]? = nil, workflowState: [StringFilter]? = nil, companyName: [StringFilter]? = nil, malwareName: [StringFilter]? = nil, networkDirection: [StringFilter]? = nil, resourceContainerImageName: [StringFilter]? = nil, networkDestinationIpV6: [IpFilter]? = nil, malwarePath: [StringFilter]? = nil, processTerminatedAt: [DateFilter]? = nil, resourceContainerImageId: [StringFilter]? = nil) {
            self.confidence = confidence
            self.resourceAwsEc2InstanceIpV4Addresses = resourceAwsEc2InstanceIpV4Addresses
            self.resourceAwsEc2InstanceVpcId = resourceAwsEc2InstanceVpcId
            self.networkSourceIpV6 = networkSourceIpV6
            self.resourceAwsIamAccessKeyStatus = resourceAwsIamAccessKeyStatus
            self.networkSourcePort = networkSourcePort
            self.severityProduct = severityProduct
            self.processParentPid = processParentPid
            self.resourceType = resourceType
            self.complianceStatus = complianceStatus
            self.malwareType = malwareType
            self.recommendationText = recommendationText
            self.networkDestinationDomain = networkDestinationDomain
            self.userDefinedFields = userDefinedFields
            self.severityLabel = severityLabel
            self.generatorId = generatorId
            self.resourceAwsEc2InstanceType = resourceAwsEc2InstanceType
            self.title = title
            self.resourceRegion = resourceRegion
            self.resourceId = resourceId
            self.resourceDetailsOther = resourceDetailsOther
            self.firstObservedAt = firstObservedAt
            self.processName = processName
            self.verificationState = verificationState
            self.resourceAwsEc2InstanceImageId = resourceAwsEc2InstanceImageId
            self.processPid = processPid
            self.networkProtocol = networkProtocol
            self.networkSourceIpV4 = networkSourceIpV4
            self.threatIntelIndicatorSourceUrl = threatIntelIndicatorSourceUrl
            self.keyword = keyword
            self.noteText = noteText
            self.processLaunchedAt = processLaunchedAt
            self.resourceAwsEc2InstanceIpV6Addresses = resourceAwsEc2InstanceIpV6Addresses
            self.networkDestinationPort = networkDestinationPort
            self.threatIntelIndicatorLastObservedAt = threatIntelIndicatorLastObservedAt
            self.resourceAwsIamAccessKeyUserName = resourceAwsIamAccessKeyUserName
            self.sourceUrl = sourceUrl
            self.resourceAwsEc2InstanceSubnetId = resourceAwsEc2InstanceSubnetId
            self.noteUpdatedBy = noteUpdatedBy
            self.`type` = `type`
            self.createdAt = createdAt
            self.criticality = criticality
            self.threatIntelIndicatorCategory = threatIntelIndicatorCategory
            self.threatIntelIndicatorValue = threatIntelIndicatorValue
            self.processPath = processPath
            self.networkSourceDomain = networkSourceDomain
            self.description = description
            self.resourceContainerLaunchedAt = resourceContainerLaunchedAt
            self.severityNormalized = severityNormalized
            self.networkDestinationIpV4 = networkDestinationIpV4
            self.resourceAwsEc2InstanceIamInstanceProfileArn = resourceAwsEc2InstanceIamInstanceProfileArn
            self.resourceAwsS3BucketOwnerName = resourceAwsS3BucketOwnerName
            self.relatedFindingsId = relatedFindingsId
            self.noteUpdatedAt = noteUpdatedAt
            self.id = id
            self.threatIntelIndicatorType = threatIntelIndicatorType
            self.awsAccountId = awsAccountId
            self.resourceContainerName = resourceContainerName
            self.productName = productName
            self.resourceAwsEc2InstanceKeyName = resourceAwsEc2InstanceKeyName
            self.updatedAt = updatedAt
            self.resourceAwsIamAccessKeyCreatedAt = resourceAwsIamAccessKeyCreatedAt
            self.productFields = productFields
            self.malwareState = malwareState
            self.resourceAwsEc2InstanceLaunchedAt = resourceAwsEc2InstanceLaunchedAt
            self.threatIntelIndicatorSource = threatIntelIndicatorSource
            self.resourceAwsS3BucketOwnerId = resourceAwsS3BucketOwnerId
            self.networkSourceMac = networkSourceMac
            self.relatedFindingsProductArn = relatedFindingsProductArn
            self.recordState = recordState
            self.resourcePartition = resourcePartition
            self.productArn = productArn
            self.resourceTags = resourceTags
            self.lastObservedAt = lastObservedAt
            self.workflowState = workflowState
            self.companyName = companyName
            self.malwareName = malwareName
            self.networkDirection = networkDirection
            self.resourceContainerImageName = resourceContainerImageName
            self.networkDestinationIpV6 = networkDestinationIpV6
            self.malwarePath = malwarePath
            self.processTerminatedAt = processTerminatedAt
            self.resourceContainerImageId = resourceContainerImageId
        }

        private enum CodingKeys: String, CodingKey {
            case confidence = "Confidence"
            case resourceAwsEc2InstanceIpV4Addresses = "ResourceAwsEc2InstanceIpV4Addresses"
            case resourceAwsEc2InstanceVpcId = "ResourceAwsEc2InstanceVpcId"
            case networkSourceIpV6 = "NetworkSourceIpV6"
            case resourceAwsIamAccessKeyStatus = "ResourceAwsIamAccessKeyStatus"
            case networkSourcePort = "NetworkSourcePort"
            case severityProduct = "SeverityProduct"
            case processParentPid = "ProcessParentPid"
            case resourceType = "ResourceType"
            case complianceStatus = "ComplianceStatus"
            case malwareType = "MalwareType"
            case recommendationText = "RecommendationText"
            case networkDestinationDomain = "NetworkDestinationDomain"
            case userDefinedFields = "UserDefinedFields"
            case severityLabel = "SeverityLabel"
            case generatorId = "GeneratorId"
            case resourceAwsEc2InstanceType = "ResourceAwsEc2InstanceType"
            case title = "Title"
            case resourceRegion = "ResourceRegion"
            case resourceId = "ResourceId"
            case resourceDetailsOther = "ResourceDetailsOther"
            case firstObservedAt = "FirstObservedAt"
            case processName = "ProcessName"
            case verificationState = "VerificationState"
            case resourceAwsEc2InstanceImageId = "ResourceAwsEc2InstanceImageId"
            case processPid = "ProcessPid"
            case networkProtocol = "NetworkProtocol"
            case networkSourceIpV4 = "NetworkSourceIpV4"
            case threatIntelIndicatorSourceUrl = "ThreatIntelIndicatorSourceUrl"
            case keyword = "Keyword"
            case noteText = "NoteText"
            case processLaunchedAt = "ProcessLaunchedAt"
            case resourceAwsEc2InstanceIpV6Addresses = "ResourceAwsEc2InstanceIpV6Addresses"
            case networkDestinationPort = "NetworkDestinationPort"
            case threatIntelIndicatorLastObservedAt = "ThreatIntelIndicatorLastObservedAt"
            case resourceAwsIamAccessKeyUserName = "ResourceAwsIamAccessKeyUserName"
            case sourceUrl = "SourceUrl"
            case resourceAwsEc2InstanceSubnetId = "ResourceAwsEc2InstanceSubnetId"
            case noteUpdatedBy = "NoteUpdatedBy"
            case `type` = "Type"
            case createdAt = "CreatedAt"
            case criticality = "Criticality"
            case threatIntelIndicatorCategory = "ThreatIntelIndicatorCategory"
            case threatIntelIndicatorValue = "ThreatIntelIndicatorValue"
            case processPath = "ProcessPath"
            case networkSourceDomain = "NetworkSourceDomain"
            case description = "Description"
            case resourceContainerLaunchedAt = "ResourceContainerLaunchedAt"
            case severityNormalized = "SeverityNormalized"
            case networkDestinationIpV4 = "NetworkDestinationIpV4"
            case resourceAwsEc2InstanceIamInstanceProfileArn = "ResourceAwsEc2InstanceIamInstanceProfileArn"
            case resourceAwsS3BucketOwnerName = "ResourceAwsS3BucketOwnerName"
            case relatedFindingsId = "RelatedFindingsId"
            case noteUpdatedAt = "NoteUpdatedAt"
            case id = "Id"
            case threatIntelIndicatorType = "ThreatIntelIndicatorType"
            case awsAccountId = "AwsAccountId"
            case resourceContainerName = "ResourceContainerName"
            case productName = "ProductName"
            case resourceAwsEc2InstanceKeyName = "ResourceAwsEc2InstanceKeyName"
            case updatedAt = "UpdatedAt"
            case resourceAwsIamAccessKeyCreatedAt = "ResourceAwsIamAccessKeyCreatedAt"
            case productFields = "ProductFields"
            case malwareState = "MalwareState"
            case resourceAwsEc2InstanceLaunchedAt = "ResourceAwsEc2InstanceLaunchedAt"
            case threatIntelIndicatorSource = "ThreatIntelIndicatorSource"
            case resourceAwsS3BucketOwnerId = "ResourceAwsS3BucketOwnerId"
            case networkSourceMac = "NetworkSourceMac"
            case relatedFindingsProductArn = "RelatedFindingsProductArn"
            case recordState = "RecordState"
            case resourcePartition = "ResourcePartition"
            case productArn = "ProductArn"
            case resourceTags = "ResourceTags"
            case lastObservedAt = "LastObservedAt"
            case workflowState = "WorkflowState"
            case companyName = "CompanyName"
            case malwareName = "MalwareName"
            case networkDirection = "NetworkDirection"
            case resourceContainerImageName = "ResourceContainerImageName"
            case networkDestinationIpV6 = "NetworkDestinationIpV6"
            case malwarePath = "MalwarePath"
            case processTerminatedAt = "ProcessTerminatedAt"
            case resourceContainerImageId = "ResourceContainerImageId"
        }
    }

    public struct Insight: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "InsightArn", required: true, type: .string), 
            AWSShapeMember(label: "Filters", required: true, type: .structure), 
            AWSShapeMember(label: "GroupByAttribute", required: true, type: .string)
        ]
        /// The name of a Security Hub insight.
        public let name: String
        /// The ARN of a Security Hub insight.
        public let insightArn: String
        /// A collection of attributes that are applied to all active Security Hub-aggregated findings and that result in a subset of findings that are included in this insight. 
        public let filters: AwsSecurityFindingFilters
        /// The attribute by which the insight's findings are grouped. This attribute is used as a findings aggregator for the purposes of viewing and managing multiple related findings under a single operand.
        public let groupByAttribute: String

        public init(name: String, insightArn: String, filters: AwsSecurityFindingFilters, groupByAttribute: String) {
            self.name = name
            self.insightArn = insightArn
            self.filters = filters
            self.groupByAttribute = groupByAttribute
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case insightArn = "InsightArn"
            case filters = "Filters"
            case groupByAttribute = "GroupByAttribute"
        }
    }

    public struct AcceptInvitationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InvitationId", required: false, type: .string), 
            AWSShapeMember(label: "MasterId", required: false, type: .string)
        ]
        /// The ID of the invitation that is sent to the AWS account by the Security Hub master account. 
        public let invitationId: String?
        /// The account ID of the master Security Hub account whose invitation you're accepting. 
        public let masterId: String?

        public init(invitationId: String? = nil, masterId: String? = nil) {
            self.invitationId = invitationId
            self.masterId = masterId
        }

        private enum CodingKeys: String, CodingKey {
            case invitationId = "InvitationId"
            case masterId = "MasterId"
        }
    }

    public struct AccountDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountId", required: false, type: .string), 
            AWSShapeMember(label: "Email", required: false, type: .string)
        ]
        /// The ID of an AWS account.
        public let accountId: String?
        /// The email of an AWS account.
        public let email: String?

        public init(accountId: String? = nil, email: String? = nil) {
            self.accountId = accountId
            self.email = email
        }

        private enum CodingKeys: String, CodingKey {
            case accountId = "AccountId"
            case email = "Email"
        }
    }

    public struct RelatedFinding: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductArn", required: true, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The ARN of the solution that generated a related finding.
        public let productArn: String
        /// The solution-generated identifier for a related finding.
        public let id: String

        public init(productArn: String, id: String) {
            self.productArn = productArn
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case productArn = "ProductArn"
            case id = "Id"
        }
    }

    public struct GetInvitationsCountRequest: AWSShape {

    }

    public struct DeleteInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", required: false, type: .list)
        ]
        /// A list of account ID and email address pairs of the AWS accounts that could not be processed. 
        public let unprocessedAccounts: [Result]?

        public init(unprocessedAccounts: [Result]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "UnprocessedAccounts"
        }
    }

    public struct Recommendation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Text", required: false, type: .string), 
            AWSShapeMember(label: "Url", required: false, type: .string)
        ]
        /// The recommendation of what to do about the issue described in a finding. 
        public let text: String?
        /// A URL to link to general remediation information for the finding type of a finding. 
        public let url: String?

        public init(text: String? = nil, url: String? = nil) {
            self.text = text
            self.url = url
        }

        private enum CodingKeys: String, CodingKey {
            case text = "Text"
            case url = "Url"
        }
    }

    public struct DeleteMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", required: false, type: .list)
        ]
        /// A list of account ID and email address pairs of the AWS accounts that could not be processed. 
        public let unprocessedAccounts: [Result]?

        public init(unprocessedAccounts: [Result]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "UnprocessedAccounts"
        }
    }

    public struct BatchDisableStandardsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StandardsSubscriptions", required: false, type: .list)
        ]
        /// The details of the standards subscriptions that were disabled.
        public let standardsSubscriptions: [StandardsSubscription]?

        public init(standardsSubscriptions: [StandardsSubscription]? = nil) {
            self.standardsSubscriptions = standardsSubscriptions
        }

        private enum CodingKeys: String, CodingKey {
            case standardsSubscriptions = "StandardsSubscriptions"
        }
    }

    public struct DisableSecurityHubRequest: AWSShape {

    }

    public struct InviteMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", required: false, type: .list)
        ]
        /// A list of IDs of the AWS accounts that you want to invite to Security Hub as members. 
        public let accountIds: [String]?

        public init(accountIds: [String]? = nil) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "AccountIds"
        }
    }

    public struct Severity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Normalized", required: true, type: .integer), 
            AWSShapeMember(label: "Product", required: false, type: .double)
        ]
        /// The normalized severity of a finding.
        public let normalized: Int32
        /// The native severity as defined by the security findings provider's solution that generated the finding.
        public let product: Double?

        public init(normalized: Int32, product: Double? = nil) {
            self.normalized = normalized
            self.product = product
        }

        private enum CodingKeys: String, CodingKey {
            case normalized = "Normalized"
            case product = "Product"
        }
    }

    public struct GetMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", required: true, type: .list)
        ]
        /// A list of account IDs for the Security Hub member accounts on which you want to return the details. 
        public let accountIds: [String]

        public init(accountIds: [String]) {
            self.accountIds = accountIds
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "AccountIds"
        }
    }

    public struct Network: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Protocol", required: false, type: .string), 
            AWSShapeMember(label: "DestinationIpV6", required: false, type: .string), 
            AWSShapeMember(label: "DestinationPort", required: false, type: .integer), 
            AWSShapeMember(label: "DestinationIpV4", required: false, type: .string), 
            AWSShapeMember(label: "SourceIpV4", required: false, type: .string), 
            AWSShapeMember(label: "Direction", required: false, type: .enum), 
            AWSShapeMember(label: "DestinationDomain", required: false, type: .string), 
            AWSShapeMember(label: "SourcePort", required: false, type: .integer), 
            AWSShapeMember(label: "SourceIpV6", required: false, type: .string), 
            AWSShapeMember(label: "SourceDomain", required: false, type: .string), 
            AWSShapeMember(label: "SourceMac", required: false, type: .string)
        ]
        /// The protocol of network-related information about a finding.
        public let `protocol`: String?
        /// The destination IPv6 address of network-related information about a finding.
        public let destinationIpV6: String?
        /// The destination port of network-related information about a finding.
        public let destinationPort: Int32?
        /// The destination IPv4 address of network-related information about a finding.
        public let destinationIpV4: String?
        /// The source IPv4 address of network-related information about a finding.
        public let sourceIpV4: String?
        /// Indicates the direction of network traffic associated with a finding.
        public let direction: NetworkDirection?
        /// The destination domain of network-related information about a finding.
        public let destinationDomain: String?
        /// The source port of network-related information about a finding.
        public let sourcePort: Int32?
        /// The source IPv6 address of network-related information about a finding.
        public let sourceIpV6: String?
        /// The source domain of network-related information about a finding.
        public let sourceDomain: String?
        /// The source media access control (MAC) address of network-related information about a finding.
        public let sourceMac: String?

        public init(protocol: String? = nil, destinationIpV6: String? = nil, destinationPort: Int32? = nil, destinationIpV4: String? = nil, sourceIpV4: String? = nil, direction: NetworkDirection? = nil, destinationDomain: String? = nil, sourcePort: Int32? = nil, sourceIpV6: String? = nil, sourceDomain: String? = nil, sourceMac: String? = nil) {
            self.`protocol` = `protocol`
            self.destinationIpV6 = destinationIpV6
            self.destinationPort = destinationPort
            self.destinationIpV4 = destinationIpV4
            self.sourceIpV4 = sourceIpV4
            self.direction = direction
            self.destinationDomain = destinationDomain
            self.sourcePort = sourcePort
            self.sourceIpV6 = sourceIpV6
            self.sourceDomain = sourceDomain
            self.sourceMac = sourceMac
        }

        private enum CodingKeys: String, CodingKey {
            case `protocol` = "Protocol"
            case destinationIpV6 = "DestinationIpV6"
            case destinationPort = "DestinationPort"
            case destinationIpV4 = "DestinationIpV4"
            case sourceIpV4 = "SourceIpV4"
            case direction = "Direction"
            case destinationDomain = "DestinationDomain"
            case sourcePort = "SourcePort"
            case sourceIpV6 = "SourceIpV6"
            case sourceDomain = "SourceDomain"
            case sourceMac = "SourceMac"
        }
    }

    public enum StringFilterComparison: String, CustomStringConvertible, Codable {
        case equals = "EQUALS"
        case contains = "CONTAINS"
        case prefix = "PREFIX"
        public var description: String { return self.rawValue }
    }

    public struct StringFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Comparison", required: false, type: .enum), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// Represents the condition to be applied to a string value when querying for findings. 
        public let comparison: StringFilterComparison?
        /// The string filter value.
        public let value: String?

        public init(comparison: StringFilterComparison? = nil, value: String? = nil) {
            self.comparison = comparison
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case comparison = "Comparison"
            case value = "Value"
        }
    }

    public struct ContainerDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ImageName", required: false, type: .string), 
            AWSShapeMember(label: "LaunchedAt", required: false, type: .string), 
            AWSShapeMember(label: "ImageId", required: false, type: .string)
        ]
        /// The name of the container related to a finding.
        public let name: String?
        /// The name of the image related to a finding.
        public let imageName: String?
        /// The date/time that the container was started.
        public let launchedAt: String?
        /// The identifier of the image related to a finding.
        public let imageId: String?

        public init(name: String? = nil, imageName: String? = nil, launchedAt: String? = nil, imageId: String? = nil) {
            self.name = name
            self.imageName = imageName
            self.launchedAt = launchedAt
            self.imageId = imageId
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case imageName = "ImageName"
            case launchedAt = "LaunchedAt"
            case imageId = "ImageId"
        }
    }

    public struct NumberFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Eq", required: false, type: .double), 
            AWSShapeMember(label: "Gte", required: false, type: .double), 
            AWSShapeMember(label: "Lte", required: false, type: .double)
        ]
        /// Represents the "equal to" condition to be applied to a single field when querying for findings.
        public let eq: Double?
        /// Represents the "greater than equal" condition to be applied to a single field when querying for findings. 
        public let gte: Double?
        /// Represents the "less than equal" condition to be applied to a single field when querying for findings. 
        public let lte: Double?

        public init(eq: Double? = nil, gte: Double? = nil, lte: Double? = nil) {
            self.eq = eq
            self.gte = gte
            self.lte = lte
        }

        private enum CodingKeys: String, CodingKey {
            case eq = "Eq"
            case gte = "Gte"
            case lte = "Lte"
        }
    }

    public struct DeleteInsightRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InsightArn", location: .uri(locationName: "InsightArn"), required: true, type: .string)
        ]
        /// The ARN of the insight that you want to delete.
        public let insightArn: String

        public init(insightArn: String) {
            self.insightArn = insightArn
        }

        private enum CodingKeys: String, CodingKey {
            case insightArn = "InsightArn"
        }
    }

    public struct CreateMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountDetails", required: false, type: .list)
        ]
        /// A list of account ID and email address pairs of the accounts that you want to associate with the master Security Hub account.
        public let accountDetails: [AccountDetails]?

        public init(accountDetails: [AccountDetails]? = nil) {
            self.accountDetails = accountDetails
        }

        private enum CodingKeys: String, CodingKey {
            case accountDetails = "AccountDetails"
        }
    }

    public struct Result: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProcessingResult", required: false, type: .string), 
            AWSShapeMember(label: "AccountId", required: false, type: .string)
        ]
        /// The reason for why an account could not be processed.
        public let processingResult: String?
        /// An ID of the AWS account that could not be processed. 
        public let accountId: String?

        public init(processingResult: String? = nil, accountId: String? = nil) {
            self.processingResult = processingResult
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case processingResult = "ProcessingResult"
            case accountId = "AccountId"
        }
    }

    public struct Note: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Text", required: true, type: .string), 
            AWSShapeMember(label: "UpdatedAt", required: true, type: .string), 
            AWSShapeMember(label: "UpdatedBy", required: true, type: .string)
        ]
        /// The text of a note.
        public let text: String
        /// The timestamp of when the note was updated.
        public let updatedAt: String
        /// The principal that created a note.
        public let updatedBy: String

        public init(text: String, updatedAt: String, updatedBy: String) {
            self.text = text
            self.updatedAt = updatedAt
            self.updatedBy = updatedBy
        }

        private enum CodingKeys: String, CodingKey {
            case text = "Text"
            case updatedAt = "UpdatedAt"
            case updatedBy = "UpdatedBy"
        }
    }

    public struct StandardsSubscriptionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StandardsArn", required: true, type: .string), 
            AWSShapeMember(label: "StandardsInput", required: false, type: .map)
        ]
        /// The ARN of the standard that you want to enable.
        public let standardsArn: String
        public let standardsInput: [String: String]?

        public init(standardsArn: String, standardsInput: [String: String]? = nil) {
            self.standardsArn = standardsArn
            self.standardsInput = standardsInput
        }

        private enum CodingKeys: String, CodingKey {
            case standardsArn = "StandardsArn"
            case standardsInput = "StandardsInput"
        }
    }

    public struct CreateMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", required: false, type: .list)
        ]
        /// A list of account ID and email address pairs of the AWS accounts that could not be processed.
        public let unprocessedAccounts: [Result]?

        public init(unprocessedAccounts: [Result]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "UnprocessedAccounts"
        }
    }

    public struct DisableImportFindingsForProductResponse: AWSShape {

    }

    public struct GetMasterAccountRequest: AWSShape {

    }

    public struct ImportFindingsError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ErrorMessage", required: true, type: .string), 
            AWSShapeMember(label: "ErrorCode", required: true, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The message of the error made during the BatchImportFindings operation. 
        public let errorMessage: String
        /// The code of the error made during the BatchImportFindings operation. 
        public let errorCode: String
        /// The id of the error made during the BatchImportFindings operation.
        public let id: String

        public init(errorMessage: String, errorCode: String, id: String) {
            self.errorMessage = errorMessage
            self.errorCode = errorCode
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case errorMessage = "ErrorMessage"
            case errorCode = "ErrorCode"
            case id = "Id"
        }
    }

    public struct UpdateFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: true, type: .structure), 
            AWSShapeMember(label: "RecordState", required: false, type: .enum), 
            AWSShapeMember(label: "Note", required: false, type: .structure)
        ]
        /// A collection of attributes that specify what findings you want to update.
        public let filters: AwsSecurityFindingFilters
        /// The updated record state for the finding.
        public let recordState: RecordState?
        /// The updated note for the finding.
        public let note: NoteUpdate?

        public init(filters: AwsSecurityFindingFilters, recordState: RecordState? = nil, note: NoteUpdate? = nil) {
            self.filters = filters
            self.recordState = recordState
            self.note = note
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case recordState = "RecordState"
            case note = "Note"
        }
    }

    public enum StandardsStatus: String, CustomStringConvertible, Codable {
        case pending = "PENDING"
        case ready = "READY"
        case failed = "FAILED"
        case deleting = "DELETING"
        public var description: String { return self.rawValue }
    }

    public struct ListMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Members", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Member details returned by the operation.
        public let members: [Member]?
        /// The token that is required for pagination.
        public let nextToken: String?

        public init(members: [Member]? = nil, nextToken: String? = nil) {
            self.members = members
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case members = "Members"
            case nextToken = "NextToken"
        }
    }

    public struct DisassociateFromMasterAccountRequest: AWSShape {

    }

    public struct InviteMembersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UnprocessedAccounts", required: false, type: .list)
        ]
        /// A list of account ID and email address pairs of the AWS accounts that could not be processed. 
        public let unprocessedAccounts: [Result]?

        public init(unprocessedAccounts: [Result]? = nil) {
            self.unprocessedAccounts = unprocessedAccounts
        }

        private enum CodingKeys: String, CodingKey {
            case unprocessedAccounts = "UnprocessedAccounts"
        }
    }

    public struct GetInsightResultsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InsightResults", required: true, type: .structure)
        ]
        /// The insight results returned by the operation.
        public let insightResults: InsightResults

        public init(insightResults: InsightResults) {
            self.insightResults = insightResults
        }

        private enum CodingKeys: String, CodingKey {
            case insightResults = "InsightResults"
        }
    }

    public enum NetworkDirection: String, CustomStringConvertible, Codable {
        case `in` = "IN"
        case out = "OUT"
        public var description: String { return self.rawValue }
    }

    public struct ListEnabledProductsForImportResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductSubscriptions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of ARNs for the resources that represent your subscriptions to products. 
        public let productSubscriptions: [String]?
        /// The token that is required for pagination.
        public let nextToken: String?

        public init(productSubscriptions: [String]? = nil, nextToken: String? = nil) {
            self.productSubscriptions = productSubscriptions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case productSubscriptions = "ProductSubscriptions"
            case nextToken = "NextToken"
        }
    }

    public struct UpdateInsightResponse: AWSShape {

    }

    public enum MalwareType: String, CustomStringConvertible, Codable {
        case adware = "ADWARE"
        case blendedThreat = "BLENDED_THREAT"
        case botnetAgent = "BOTNET_AGENT"
        case coinMiner = "COIN_MINER"
        case exploitKit = "EXPLOIT_KIT"
        case keylogger = "KEYLOGGER"
        case macro = "MACRO"
        case potentiallyUnwanted = "POTENTIALLY_UNWANTED"
        case spyware = "SPYWARE"
        case ransomware = "RANSOMWARE"
        case remoteAccess = "REMOTE_ACCESS"
        case rootkit = "ROOTKIT"
        case trojan = "TROJAN"
        case virus = "VIRUS"
        case worm = "WORM"
        public var description: String { return self.rawValue }
    }

    public struct UpdateFindingsResponse: AWSShape {

    }

    public struct BatchImportFindingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Findings", required: true, type: .list)
        ]
        /// A list of findings that you want to import. Must be submitted in the AWSSecurityFinding format.
        public let findings: [AwsSecurityFinding]

        public init(findings: [AwsSecurityFinding]) {
            self.findings = findings
        }

        private enum CodingKeys: String, CodingKey {
            case findings = "Findings"
        }
    }

    public struct DateFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "End", required: false, type: .string), 
            AWSShapeMember(label: "Start", required: false, type: .string), 
            AWSShapeMember(label: "DateRange", required: false, type: .structure)
        ]
        /// An end date for the date filter.
        public let end: String?
        /// A start date for the date filter.
        public let start: String?
        /// A date range for the date filter.
        public let dateRange: DateRange?

        public init(end: String? = nil, start: String? = nil, dateRange: DateRange? = nil) {
            self.end = end
            self.start = start
            self.dateRange = dateRange
        }

        private enum CodingKeys: String, CodingKey {
            case end = "End"
            case start = "Start"
            case dateRange = "DateRange"
        }
    }

    public struct Malware: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "State", required: false, type: .enum), 
            AWSShapeMember(label: "Path", required: false, type: .string)
        ]
        /// The name of the malware that was observed.
        public let name: String
        /// The type of the malware that was observed.
        public let `type`: MalwareType?
        /// The state of the malware that was observed.
        public let state: MalwareState?
        /// The filesystem path of the malware that was observed.
        public let path: String?

        public init(name: String, type: MalwareType? = nil, state: MalwareState? = nil, path: String? = nil) {
            self.name = name
            self.`type` = `type`
            self.state = state
            self.path = path
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case `type` = "Type"
            case state = "State"
            case path = "Path"
        }
    }

    public struct ListInvitationsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Invitations", required: false, type: .list)
        ]
        /// The token that is required for pagination.
        public let nextToken: String?
        /// The details of the invitations returned by the operation.
        public let invitations: [Invitation]?

        public init(nextToken: String? = nil, invitations: [Invitation]? = nil) {
            self.nextToken = nextToken
            self.invitations = invitations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case invitations = "Invitations"
        }
    }

    public struct GetInsightsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxResults", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "InsightArns", required: false, type: .list)
        ]
        /// Indicates the maximum number of items that you want in the response.
        public let maxResults: Int32?
        /// Paginates results. Set the value of this parameter to NULL on your first call to the GetInsights operation. For subsequent calls to the operation, fill nextToken in the request with the value of nextToken from the previous response to continue listing data.
        public let nextToken: String?
        /// The ARNS of the insights that you want to describe.
        public let insightArns: [String]?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, insightArns: [String]? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.insightArns = insightArns
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "MaxResults"
            case nextToken = "NextToken"
            case insightArns = "InsightArns"
        }
    }

    public struct AwsSecurityFinding: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Types", required: true, type: .list), 
            AWSShapeMember(label: "ProductFields", required: false, type: .map), 
            AWSShapeMember(label: "UpdatedAt", required: true, type: .string), 
            AWSShapeMember(label: "Criticality", required: false, type: .integer), 
            AWSShapeMember(label: "VerificationState", required: false, type: .enum), 
            AWSShapeMember(label: "Severity", required: true, type: .structure), 
            AWSShapeMember(label: "Malware", required: false, type: .list), 
            AWSShapeMember(label: "Title", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "WorkflowState", required: false, type: .enum), 
            AWSShapeMember(label: "GeneratorId", required: true, type: .string), 
            AWSShapeMember(label: "Resources", required: true, type: .list), 
            AWSShapeMember(label: "UserDefinedFields", required: false, type: .map), 
            AWSShapeMember(label: "RelatedFindings", required: false, type: .list), 
            AWSShapeMember(label: "ThreatIntelIndicators", required: false, type: .list), 
            AWSShapeMember(label: "SchemaVersion", required: true, type: .string), 
            AWSShapeMember(label: "SourceUrl", required: false, type: .string), 
            AWSShapeMember(label: "Network", required: false, type: .structure), 
            AWSShapeMember(label: "Confidence", required: false, type: .integer), 
            AWSShapeMember(label: "ProductArn", required: true, type: .string), 
            AWSShapeMember(label: "Process", required: false, type: .structure), 
            AWSShapeMember(label: "Compliance", required: false, type: .structure), 
            AWSShapeMember(label: "CreatedAt", required: true, type: .string), 
            AWSShapeMember(label: "Remediation", required: false, type: .structure), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "FirstObservedAt", required: false, type: .string), 
            AWSShapeMember(label: "RecordState", required: false, type: .enum), 
            AWSShapeMember(label: "Note", required: false, type: .structure), 
            AWSShapeMember(label: "LastObservedAt", required: false, type: .string), 
            AWSShapeMember(label: "AwsAccountId", required: true, type: .string)
        ]
        /// One or more finding types in the format of 'namespace/category/classifier' that classify a finding. Valid namespace values are: Software and Configuration Checks | TTPs | Effects | Unusual Behaviors | Sensitive Data Identifications
        public let types: [String]
        /// A data type where security findings providers can include additional solution-specific details that are not part of the defined AwsSecurityFinding format.
        public let productFields: [String: String]?
        /// An ISO8601-formatted timestamp that indicates when the finding record was last updated by the security findings provider. 
        public let updatedAt: String
        /// The level of importance assigned to the resources associated with the finding. A score of 0 means the underlying resources have no criticality, and a score of 100 is reserved for the most critical resources.
        public let criticality: Int32?
        /// Indicates the veracity of a finding. 
        public let verificationState: VerificationState?
        /// A finding's severity.
        public let severity: Severity
        /// A list of malware related to a finding.
        public let malware: [Malware]?
        /// A finding's title.
        public let title: String?
        /// A finding's description.
        public let description: String?
        /// The workflow state of a finding. 
        public let workflowState: WorkflowState?
        /// This is the identifier for the solution-specific component (a discrete unit of logic) that generated a finding. In various security findings provider's solutions, this generator can be called a rule, a check, a detector, a plug-in, etc. 
        public let generatorId: String
        /// A set of resource data types that describe the resources to which the finding refers.
        public let resources: [Resource]
        /// A list of name/value string pairs associated with the finding. These are custom, user-defined fields added to a finding. 
        public let userDefinedFields: [String: String]?
        /// A list of related findings.
        public let relatedFindings: [RelatedFinding]?
        /// Threat intel details related to a finding.
        public let threatIntelIndicators: [ThreatIntelIndicator]?
        /// The schema version for which a finding is formatted.
        public let schemaVersion: String
        /// A URL that links to a page about the current finding in the security findings provider's solution.
        public let sourceUrl: String?
        /// The details of network-related information about a finding.
        public let network: Network?
        /// A finding's confidence. Confidence is defined as the likelihood that a finding accurately identifies the behavior or issue that it was intended to identify. Confidence is scored on a 0-100 basis using a ratio scale. 0 equates zero percent confidence and 100 equates to 100 percent confidence.
        public let confidence: Int32?
        /// The ARN generated by Security Hub that uniquely identifies a third-party company (security findings provider) once this provider's product (solution that generates findings) is registered with Security Hub. 
        public let productArn: String
        /// The details of process-related information about a finding.
        public let process: ProcessDetails?
        /// This data type is exclusive to findings that are generated as the result of a check run against a specific rule in a supported standard (for example, AWS CIS Foundations). Contains compliance-related finding details.
        public let compliance: Compliance?
        /// An ISO8601-formatted timestamp that indicates when the potential security issue captured by a finding was created by the security findings provider.
        public let createdAt: String
        /// An data type that describes the remediation options for a finding.
        public let remediation: Remediation?
        /// The security findings provider-specific identifier for a finding.
        public let id: String
        /// An ISO8601-formatted timestamp that indicates when the potential security issue captured by a finding was first observed by the security findings provider.
        public let firstObservedAt: String?
        /// The record state of a finding.
        public let recordState: RecordState?
        /// A user-defined note added to a finding.
        public let note: Note?
        /// An ISO8601-formatted timestamp that indicates when the potential security issue captured by a finding was most recently observed by the security findings provider.
        public let lastObservedAt: String?
        /// The AWS account ID in which a finding is generated.
        public let awsAccountId: String

        public init(types: [String], productFields: [String: String]? = nil, updatedAt: String, criticality: Int32? = nil, verificationState: VerificationState? = nil, severity: Severity, malware: [Malware]? = nil, title: String? = nil, description: String? = nil, workflowState: WorkflowState? = nil, generatorId: String, resources: [Resource], userDefinedFields: [String: String]? = nil, relatedFindings: [RelatedFinding]? = nil, threatIntelIndicators: [ThreatIntelIndicator]? = nil, schemaVersion: String, sourceUrl: String? = nil, network: Network? = nil, confidence: Int32? = nil, productArn: String, process: ProcessDetails? = nil, compliance: Compliance? = nil, createdAt: String, remediation: Remediation? = nil, id: String, firstObservedAt: String? = nil, recordState: RecordState? = nil, note: Note? = nil, lastObservedAt: String? = nil, awsAccountId: String) {
            self.types = types
            self.productFields = productFields
            self.updatedAt = updatedAt
            self.criticality = criticality
            self.verificationState = verificationState
            self.severity = severity
            self.malware = malware
            self.title = title
            self.description = description
            self.workflowState = workflowState
            self.generatorId = generatorId
            self.resources = resources
            self.userDefinedFields = userDefinedFields
            self.relatedFindings = relatedFindings
            self.threatIntelIndicators = threatIntelIndicators
            self.schemaVersion = schemaVersion
            self.sourceUrl = sourceUrl
            self.network = network
            self.confidence = confidence
            self.productArn = productArn
            self.process = process
            self.compliance = compliance
            self.createdAt = createdAt
            self.remediation = remediation
            self.id = id
            self.firstObservedAt = firstObservedAt
            self.recordState = recordState
            self.note = note
            self.lastObservedAt = lastObservedAt
            self.awsAccountId = awsAccountId
        }

        private enum CodingKeys: String, CodingKey {
            case types = "Types"
            case productFields = "ProductFields"
            case updatedAt = "UpdatedAt"
            case criticality = "Criticality"
            case verificationState = "VerificationState"
            case severity = "Severity"
            case malware = "Malware"
            case title = "Title"
            case description = "Description"
            case workflowState = "WorkflowState"
            case generatorId = "GeneratorId"
            case resources = "Resources"
            case userDefinedFields = "UserDefinedFields"
            case relatedFindings = "RelatedFindings"
            case threatIntelIndicators = "ThreatIntelIndicators"
            case schemaVersion = "SchemaVersion"
            case sourceUrl = "SourceUrl"
            case network = "Network"
            case confidence = "Confidence"
            case productArn = "ProductArn"
            case process = "Process"
            case compliance = "Compliance"
            case createdAt = "CreatedAt"
            case remediation = "Remediation"
            case id = "Id"
            case firstObservedAt = "FirstObservedAt"
            case recordState = "RecordState"
            case note = "Note"
            case lastObservedAt = "LastObservedAt"
            case awsAccountId = "AwsAccountId"
        }
    }

    public struct DisassociateMembersResponse: AWSShape {

    }

}