// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import AWSSDKSwiftCore

extension Codestar {

    public struct CreateUserProfileRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "emailAddress", required: true, type: .string), 
            AWSShapeProperty(label: "displayName", required: true, type: .string), 
            AWSShapeProperty(label: "userArn", required: true, type: .string), 
            AWSShapeProperty(label: "sshPublicKey", required: false, type: .string)
        ]
        /// The email address that will be displayed as part of the user's profile in AWS CodeStar.
        public let emailAddress: String
        /// The name that will be displayed as the friendly name for the user in AWS CodeStar. 
        public let displayName: String
        /// The Amazon Resource Name (ARN) of the user in IAM.
        public let userArn: String
        /// The SSH public key associated with the user in AWS CodeStar. If a project owner allows the user remote access to project resources, this public key will be used along with the user's private key for SSH access.
        public let sshPublicKey: String?

        public init(emailAddress: String, displayName: String, userArn: String, sshPublicKey: String? = nil) {
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.userArn = userArn
            self.sshPublicKey = sshPublicKey
        }

        public init(dictionary: [String: Any]) throws {
            guard let emailAddress = dictionary["emailAddress"] as? String else { throw InitializableError.missingRequiredParam("emailAddress") }
            self.emailAddress = emailAddress
            guard let displayName = dictionary["displayName"] as? String else { throw InitializableError.missingRequiredParam("displayName") }
            self.displayName = displayName
            guard let userArn = dictionary["userArn"] as? String else { throw InitializableError.missingRequiredParam("userArn") }
            self.userArn = userArn
            self.sshPublicKey = dictionary["sshPublicKey"] as? String
        }
    }

    public struct ListUserProfilesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "nextToken", required: false, type: .string), 
            AWSShapeProperty(label: "maxResults", required: false, type: .integer)
        ]
        /// The continuation token for the next set of results, if the results cannot be returned in one response.
        public let nextToken: String?
        /// The maximum number of results to return in a response.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            self.maxResults = dictionary["maxResults"] as? Int32
        }
    }

    public struct UpdateUserProfileResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "createdTimestamp", required: false, type: .timestamp), 
            AWSShapeProperty(label: "emailAddress", required: false, type: .string), 
            AWSShapeProperty(label: "displayName", required: false, type: .string), 
            AWSShapeProperty(label: "lastModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeProperty(label: "userArn", required: true, type: .string), 
            AWSShapeProperty(label: "sshPublicKey", required: false, type: .string)
        ]
        /// The date the user profile was created, in timestamp format.
        public let createdTimestamp: String?
        /// The email address that is displayed as part of the user's profile in AWS CodeStar.
        public let emailAddress: String?
        /// The name that is displayed as the friendly name for the user in AWS CodeStar.
        public let displayName: String?
        /// The date the user profile was last modified, in timestamp format.
        public let lastModifiedTimestamp: String?
        /// The Amazon Resource Name (ARN) of the user in IAM.
        public let userArn: String
        /// The SSH public key associated with the user in AWS CodeStar. This is the public portion of the public/private keypair the user can use to access project resources if a project owner allows the user remote access to those resources.
        public let sshPublicKey: String?

        public init(createdTimestamp: String? = nil, emailAddress: String? = nil, displayName: String? = nil, lastModifiedTimestamp: String? = nil, userArn: String, sshPublicKey: String? = nil) {
            self.createdTimestamp = createdTimestamp
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.userArn = userArn
            self.sshPublicKey = sshPublicKey
        }

        public init(dictionary: [String: Any]) throws {
            self.createdTimestamp = dictionary["createdTimestamp"] as? String
            self.emailAddress = dictionary["emailAddress"] as? String
            self.displayName = dictionary["displayName"] as? String
            self.lastModifiedTimestamp = dictionary["lastModifiedTimestamp"] as? String
            guard let userArn = dictionary["userArn"] as? String else { throw InitializableError.missingRequiredParam("userArn") }
            self.userArn = userArn
            self.sshPublicKey = dictionary["sshPublicKey"] as? String
        }
    }

    public struct CreateProjectRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "description", required: false, type: .string), 
            AWSShapeProperty(label: "name", required: true, type: .string), 
            AWSShapeProperty(label: "id", required: true, type: .string), 
            AWSShapeProperty(label: "clientRequestToken", required: false, type: .string)
        ]
        /// Reserved for future use.
        public let description: String?
        /// Reserved for future use.
        public let name: String
        /// Reserved for future use.
        public let id: String
        /// Reserved for future use.
        public let clientRequestToken: String?

        public init(description: String? = nil, name: String, id: String, clientRequestToken: String? = nil) {
            self.description = description
            self.name = name
            self.id = id
            self.clientRequestToken = clientRequestToken
        }

        public init(dictionary: [String: Any]) throws {
            self.description = dictionary["description"] as? String
            guard let name = dictionary["name"] as? String else { throw InitializableError.missingRequiredParam("name") }
            self.name = name
            guard let id = dictionary["id"] as? String else { throw InitializableError.missingRequiredParam("id") }
            self.id = id
            self.clientRequestToken = dictionary["clientRequestToken"] as? String
        }
    }

    public struct UpdateProjectResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct ListTeamMembersResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "nextToken", required: false, type: .string), 
            AWSShapeProperty(label: "teamMembers", required: true, type: .list)
        ]
        /// The continuation token to use when requesting the next set of results, if there are more results to be returned.
        public let nextToken: String?
        /// A list of team member objects for the project.
        public let teamMembers: [TeamMember]

        public init(nextToken: String? = nil, teamMembers: [TeamMember]) {
            self.nextToken = nextToken
            self.teamMembers = teamMembers
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            guard let teamMembers = dictionary["teamMembers"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("teamMembers") }
            self.teamMembers = try teamMembers.map({ try TeamMember(dictionary: $0) })
        }
    }

    public struct DeleteProjectRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "id", required: true, type: .string), 
            AWSShapeProperty(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeProperty(label: "deleteStack", required: false, type: .boolean)
        ]
        /// The ID of the project to be deleted in AWS CodeStar.
        public let id: String
        /// A user- or system-generated token that identifies the entity that requested project deletion. This token can be used to repeat the request. 
        public let clientRequestToken: String?
        /// Whether to send a delete request for the primary stack in AWS CloudFormation originally used to generate the project and its resources. This option will delete all AWS resources for the project (except for any buckets in Amazon S3) as well as deleting the project itself. Recommended for most use cases.
        public let deleteStack: Bool?

        public init(id: String, clientRequestToken: String? = nil, deleteStack: Bool? = nil) {
            self.id = id
            self.clientRequestToken = clientRequestToken
            self.deleteStack = deleteStack
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["id"] as? String else { throw InitializableError.missingRequiredParam("id") }
            self.id = id
            self.clientRequestToken = dictionary["clientRequestToken"] as? String
            self.deleteStack = dictionary["deleteStack"] as? Bool
        }
    }

    public struct DeleteUserProfileResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "userArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the user deleted from AWS CodeStar.
        public let userArn: String

        public init(userArn: String) {
            self.userArn = userArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let userArn = dictionary["userArn"] as? String else { throw InitializableError.missingRequiredParam("userArn") }
            self.userArn = userArn
        }
    }

    public struct UpdateTeamMemberResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "userArn", required: false, type: .string), 
            AWSShapeProperty(label: "projectRole", required: false, type: .string), 
            AWSShapeProperty(label: "remoteAccessAllowed", required: false, type: .boolean)
        ]
        /// The Amazon Resource Name (ARN) of the user whose team membership attributes were updated.
        public let userArn: String?
        /// The project role granted to the user.
        public let projectRole: String?
        /// Whether a team member is allowed to remotely access project resources using the SSH public key associated with the user's profile.
        public let remoteAccessAllowed: Bool?

        public init(userArn: String? = nil, projectRole: String? = nil, remoteAccessAllowed: Bool? = nil) {
            self.userArn = userArn
            self.projectRole = projectRole
            self.remoteAccessAllowed = remoteAccessAllowed
        }

        public init(dictionary: [String: Any]) throws {
            self.userArn = dictionary["userArn"] as? String
            self.projectRole = dictionary["projectRole"] as? String
            self.remoteAccessAllowed = dictionary["remoteAccessAllowed"] as? Bool
        }
    }

    public struct DisassociateTeamMemberRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "userArn", required: true, type: .string), 
            AWSShapeProperty(label: "projectId", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the IAM user or group whom you want to remove from the project.
        public let userArn: String
        /// The ID of the AWS CodeStar project from which you want to remove a team member.
        public let projectId: String

        public init(userArn: String, projectId: String) {
            self.userArn = userArn
            self.projectId = projectId
        }

        public init(dictionary: [String: Any]) throws {
            guard let userArn = dictionary["userArn"] as? String else { throw InitializableError.missingRequiredParam("userArn") }
            self.userArn = userArn
            guard let projectId = dictionary["projectId"] as? String else { throw InitializableError.missingRequiredParam("projectId") }
            self.projectId = projectId
        }
    }

    public struct CreateUserProfileResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "createdTimestamp", required: false, type: .timestamp), 
            AWSShapeProperty(label: "emailAddress", required: false, type: .string), 
            AWSShapeProperty(label: "displayName", required: false, type: .string), 
            AWSShapeProperty(label: "lastModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeProperty(label: "userArn", required: true, type: .string), 
            AWSShapeProperty(label: "sshPublicKey", required: false, type: .string)
        ]
        /// The date the user profile was created, in timestamp format.
        public let createdTimestamp: String?
        /// The email address that is displayed as part of the user's profile in AWS CodeStar.
        public let emailAddress: String?
        /// The name that is displayed as the friendly name for the user in AWS CodeStar.
        public let displayName: String?
        /// The date the user profile was last modified, in timestamp format.
        public let lastModifiedTimestamp: String?
        /// The Amazon Resource Name (ARN) of the user in IAM.
        public let userArn: String
        /// The SSH public key associated with the user in AWS CodeStar. This is the public portion of the public/private keypair the user can use to access project resources if a project owner allows the user remote access to those resources.
        public let sshPublicKey: String?

        public init(createdTimestamp: String? = nil, emailAddress: String? = nil, displayName: String? = nil, lastModifiedTimestamp: String? = nil, userArn: String, sshPublicKey: String? = nil) {
            self.createdTimestamp = createdTimestamp
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.userArn = userArn
            self.sshPublicKey = sshPublicKey
        }

        public init(dictionary: [String: Any]) throws {
            self.createdTimestamp = dictionary["createdTimestamp"] as? String
            self.emailAddress = dictionary["emailAddress"] as? String
            self.displayName = dictionary["displayName"] as? String
            self.lastModifiedTimestamp = dictionary["lastModifiedTimestamp"] as? String
            guard let userArn = dictionary["userArn"] as? String else { throw InitializableError.missingRequiredParam("userArn") }
            self.userArn = userArn
            self.sshPublicKey = dictionary["sshPublicKey"] as? String
        }
    }

    public struct CreateProjectResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "projectTemplateId", required: false, type: .string), 
            AWSShapeProperty(label: "id", required: true, type: .string), 
            AWSShapeProperty(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeProperty(label: "arn", required: true, type: .string)
        ]
        /// Reserved for future use.
        public let projectTemplateId: String?
        /// Reserved for future use.
        public let id: String
        /// Reserved for future use.
        public let clientRequestToken: String?
        /// Reserved for future use.
        public let arn: String

        public init(projectTemplateId: String? = nil, id: String, clientRequestToken: String? = nil, arn: String) {
            self.projectTemplateId = projectTemplateId
            self.id = id
            self.clientRequestToken = clientRequestToken
            self.arn = arn
        }

        public init(dictionary: [String: Any]) throws {
            self.projectTemplateId = dictionary["projectTemplateId"] as? String
            guard let id = dictionary["id"] as? String else { throw InitializableError.missingRequiredParam("id") }
            self.id = id
            self.clientRequestToken = dictionary["clientRequestToken"] as? String
            guard let arn = dictionary["arn"] as? String else { throw InitializableError.missingRequiredParam("arn") }
            self.arn = arn
        }
    }

    public struct ListUserProfilesResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "userProfiles", required: true, type: .list), 
            AWSShapeProperty(label: "nextToken", required: false, type: .string)
        ]
        /// All the user profiles configured in AWS CodeStar for an AWS account.
        public let userProfiles: [UserProfileSummary]
        /// The continuation token to use when requesting the next set of results, if there are more results to be returned.
        public let nextToken: String?

        public init(userProfiles: [UserProfileSummary], nextToken: String? = nil) {
            self.userProfiles = userProfiles
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            guard let userProfiles = dictionary["userProfiles"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("userProfiles") }
            self.userProfiles = try userProfiles.map({ try UserProfileSummary(dictionary: $0) })
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct DescribeUserProfileResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "createdTimestamp", required: true, type: .timestamp), 
            AWSShapeProperty(label: "emailAddress", required: false, type: .string), 
            AWSShapeProperty(label: "displayName", required: false, type: .string), 
            AWSShapeProperty(label: "lastModifiedTimestamp", required: true, type: .timestamp), 
            AWSShapeProperty(label: "userArn", required: true, type: .string), 
            AWSShapeProperty(label: "sshPublicKey", required: false, type: .string)
        ]
        /// The date and time when the user profile was created in AWS CodeStar, in timestamp format.
        public let createdTimestamp: String
        /// The email address for the user. Optional.
        public let emailAddress: String?
        /// The display name shown for the user in AWS CodeStar projects. For example, this could be set to both first and last name ("Mary Major") or a single name ("Mary"). The display name is also used to generate the initial icon associated with the user in AWS CodeStar projects. If spaces are included in the display name, the first character that appears after the space will be used as the second character in the user initial icon. The initial icon displays a maximum of two characters, so a display name with more than one space (for example "Mary Jane Major") would generate an initial icon using the first character and the first character after the space ("MJ", not "MM").
        public let displayName: String?
        /// The date and time when the user profile was last modified, in timestamp format.
        public let lastModifiedTimestamp: String
        /// The Amazon Resource Name (ARN) of the user.
        public let userArn: String
        /// The SSH public key associated with the user. This SSH public key is associated with the user profile, and can be used in conjunction with the associated private key for access to project resources, such as Amazon EC2 instances, if a project owner grants remote access to those resources.
        public let sshPublicKey: String?

        public init(createdTimestamp: String, emailAddress: String? = nil, displayName: String? = nil, lastModifiedTimestamp: String, userArn: String, sshPublicKey: String? = nil) {
            self.createdTimestamp = createdTimestamp
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.userArn = userArn
            self.sshPublicKey = sshPublicKey
        }

        public init(dictionary: [String: Any]) throws {
            guard let createdTimestamp = dictionary["createdTimestamp"] as? String else { throw InitializableError.missingRequiredParam("createdTimestamp") }
            self.createdTimestamp = createdTimestamp
            self.emailAddress = dictionary["emailAddress"] as? String
            self.displayName = dictionary["displayName"] as? String
            guard let lastModifiedTimestamp = dictionary["lastModifiedTimestamp"] as? String else { throw InitializableError.missingRequiredParam("lastModifiedTimestamp") }
            self.lastModifiedTimestamp = lastModifiedTimestamp
            guard let userArn = dictionary["userArn"] as? String else { throw InitializableError.missingRequiredParam("userArn") }
            self.userArn = userArn
            self.sshPublicKey = dictionary["sshPublicKey"] as? String
        }
    }

    public struct DescribeProjectRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "id", required: true, type: .string)
        ]
        /// The ID of the project.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["id"] as? String else { throw InitializableError.missingRequiredParam("id") }
            self.id = id
        }
    }

    public struct ListTeamMembersRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "projectId", required: true, type: .string), 
            AWSShapeProperty(label: "nextToken", required: false, type: .string), 
            AWSShapeProperty(label: "maxResults", required: false, type: .integer)
        ]
        /// The ID of the project for which you want to list team members.
        public let projectId: String
        /// The continuation token for the next set of results, if the results cannot be returned in one response.
        public let nextToken: String?
        /// The maximum number of team members you want returned in a response.
        public let maxResults: Int32?

        public init(projectId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.projectId = projectId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let projectId = dictionary["projectId"] as? String else { throw InitializableError.missingRequiredParam("projectId") }
            self.projectId = projectId
            self.nextToken = dictionary["nextToken"] as? String
            self.maxResults = dictionary["maxResults"] as? Int32
        }
    }

    public struct ListResourcesResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "resources", required: false, type: .list), 
            AWSShapeProperty(label: "nextToken", required: false, type: .string)
        ]
        /// An array of resources associated with the project. 
        public let resources: [Resource]?
        /// The continuation token to use when requesting the next set of results, if there are more results to be returned.
        public let nextToken: String?

        public init(resources: [Resource]? = nil, nextToken: String? = nil) {
            self.resources = resources
            self.nextToken = nextToken
        }

        public init(dictionary: [String: Any]) throws {
            if let resources = dictionary["resources"] as? [[String: Any]] {
                self.resources = try resources.map({ try Resource(dictionary: $0) })
            } else { 
                self.resources = nil
            }
            self.nextToken = dictionary["nextToken"] as? String
        }
    }

    public struct UserProfileSummary: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "emailAddress", required: false, type: .string), 
            AWSShapeProperty(label: "displayName", required: false, type: .string), 
            AWSShapeProperty(label: "userArn", required: false, type: .string), 
            AWSShapeProperty(label: "sshPublicKey", required: false, type: .string)
        ]
        /// The email address associated with the user.
        public let emailAddress: String?
        /// The display name of a user in AWS CodeStar. For example, this could be set to both first and last name ("Mary Major") or a single name ("Mary"). The display name is also used to generate the initial icon associated with the user in AWS CodeStar projects. If spaces are included in the display name, the first character that appears after the space will be used as the second character in the user initial icon. The initial icon displays a maximum of two characters, so a display name with more than one space (for example "Mary Jane Major") would generate an initial icon using the first character and the first character after the space ("MJ", not "MM").
        public let displayName: String?
        /// The Amazon Resource Name (ARN) of the user in IAM.
        public let userArn: String?
        /// The SSH public key associated with the user in AWS CodeStar. If a project owner allows the user remote access to project resources, this public key will be used along with the user's private key for SSH access.
        public let sshPublicKey: String?

        public init(emailAddress: String? = nil, displayName: String? = nil, userArn: String? = nil, sshPublicKey: String? = nil) {
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.userArn = userArn
            self.sshPublicKey = sshPublicKey
        }

        public init(dictionary: [String: Any]) throws {
            self.emailAddress = dictionary["emailAddress"] as? String
            self.displayName = dictionary["displayName"] as? String
            self.userArn = dictionary["userArn"] as? String
            self.sshPublicKey = dictionary["sshPublicKey"] as? String
        }
    }

    public struct AssociateTeamMemberResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "clientRequestToken", required: false, type: .string)
        ]
        /// The user- or system-generated token from the initial request that can be used to repeat the request. 
        public let clientRequestToken: String?

        public init(clientRequestToken: String? = nil) {
            self.clientRequestToken = clientRequestToken
        }

        public init(dictionary: [String: Any]) throws {
            self.clientRequestToken = dictionary["clientRequestToken"] as? String
        }
    }

    public struct UpdateUserProfileRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "emailAddress", required: false, type: .string), 
            AWSShapeProperty(label: "displayName", required: false, type: .string), 
            AWSShapeProperty(label: "userArn", required: true, type: .string), 
            AWSShapeProperty(label: "sshPublicKey", required: false, type: .string)
        ]
        /// The email address that is displayed as part of the user's profile in AWS CodeStar.
        public let emailAddress: String?
        /// The name that is displayed as the friendly name for the user in AWS CodeStar.
        public let displayName: String?
        /// The name that will be displayed as the friendly name for the user in AWS CodeStar.
        public let userArn: String
        /// The SSH public key associated with the user in AWS CodeStar. If a project owner allows the user remote access to project resources, this public key will be used along with the user's private key for SSH access.
        public let sshPublicKey: String?

        public init(emailAddress: String? = nil, displayName: String? = nil, userArn: String, sshPublicKey: String? = nil) {
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.userArn = userArn
            self.sshPublicKey = sshPublicKey
        }

        public init(dictionary: [String: Any]) throws {
            self.emailAddress = dictionary["emailAddress"] as? String
            self.displayName = dictionary["displayName"] as? String
            guard let userArn = dictionary["userArn"] as? String else { throw InitializableError.missingRequiredParam("userArn") }
            self.userArn = userArn
            self.sshPublicKey = dictionary["sshPublicKey"] as? String
        }
    }

    public struct ListProjectsResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "nextToken", required: false, type: .string), 
            AWSShapeProperty(label: "projects", required: true, type: .list)
        ]
        /// The continuation token to use when requesting the next set of results, if there are more results to be returned.
        public let nextToken: String?
        /// A list of projects.
        public let projects: [ProjectSummary]

        public init(nextToken: String? = nil, projects: [ProjectSummary]) {
            self.nextToken = nextToken
            self.projects = projects
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            guard let projects = dictionary["projects"] as? [[String: Any]] else { throw InitializableError.missingRequiredParam("projects") }
            self.projects = try projects.map({ try ProjectSummary(dictionary: $0) })
        }
    }

    public struct Resource: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "id", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the resource.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["id"] as? String else { throw InitializableError.missingRequiredParam("id") }
            self.id = id
        }
    }

    public struct AssociateTeamMemberRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "projectId", required: true, type: .string), 
            AWSShapeProperty(label: "projectRole", required: true, type: .string), 
            AWSShapeProperty(label: "remoteAccessAllowed", required: false, type: .boolean), 
            AWSShapeProperty(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeProperty(label: "userArn", required: true, type: .string)
        ]
        /// The ID of the project to which you will add the IAM user.
        public let projectId: String
        /// The AWS CodeStar project role that will apply to this user. This role determines what actions a user can take in an AWS CodeStar project.
        public let projectRole: String
        /// Whether the team member is allowed to use an SSH public/private key pair to remotely access project resources, for example Amazon EC2 instances.
        public let remoteAccessAllowed: Bool?
        /// A user- or system-generated token that identifies the entity that requested the team member association to the project. This token can be used to repeat the request. 
        public let clientRequestToken: String?
        /// The Amazon Resource Name (ARN) for the IAM user you want to add to the DevHub project.
        public let userArn: String

        public init(projectId: String, projectRole: String, remoteAccessAllowed: Bool? = nil, clientRequestToken: String? = nil, userArn: String) {
            self.projectId = projectId
            self.projectRole = projectRole
            self.remoteAccessAllowed = remoteAccessAllowed
            self.clientRequestToken = clientRequestToken
            self.userArn = userArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let projectId = dictionary["projectId"] as? String else { throw InitializableError.missingRequiredParam("projectId") }
            self.projectId = projectId
            guard let projectRole = dictionary["projectRole"] as? String else { throw InitializableError.missingRequiredParam("projectRole") }
            self.projectRole = projectRole
            self.remoteAccessAllowed = dictionary["remoteAccessAllowed"] as? Bool
            self.clientRequestToken = dictionary["clientRequestToken"] as? String
            guard let userArn = dictionary["userArn"] as? String else { throw InitializableError.missingRequiredParam("userArn") }
            self.userArn = userArn
        }
    }

    public struct DescribeUserProfileRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "userArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the user.
        public let userArn: String

        public init(userArn: String) {
            self.userArn = userArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let userArn = dictionary["userArn"] as? String else { throw InitializableError.missingRequiredParam("userArn") }
            self.userArn = userArn
        }
    }

    public struct ListResourcesRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "projectId", required: true, type: .string), 
            AWSShapeProperty(label: "nextToken", required: false, type: .string), 
            AWSShapeProperty(label: "maxResults", required: false, type: .integer)
        ]
        /// The ID of the project.
        public let projectId: String
        /// The continuation token for the next set of results, if the results cannot be returned in one response.
        public let nextToken: String?
        /// he maximum amount of data that can be contained in a single set of results.
        public let maxResults: Int32?

        public init(projectId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.projectId = projectId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            guard let projectId = dictionary["projectId"] as? String else { throw InitializableError.missingRequiredParam("projectId") }
            self.projectId = projectId
            self.nextToken = dictionary["nextToken"] as? String
            self.maxResults = dictionary["maxResults"] as? Int32
        }
    }

    public struct ProjectSummary: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "projectId", required: false, type: .string), 
            AWSShapeProperty(label: "projectArn", required: false, type: .string)
        ]
        /// The ID of the project.
        public let projectId: String?
        /// The Amazon Resource Name (ARN) of the project.
        public let projectArn: String?

        public init(projectId: String? = nil, projectArn: String? = nil) {
            self.projectId = projectId
            self.projectArn = projectArn
        }

        public init(dictionary: [String: Any]) throws {
            self.projectId = dictionary["projectId"] as? String
            self.projectArn = dictionary["projectArn"] as? String
        }
    }

    public struct ListProjectsRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "nextToken", required: false, type: .string), 
            AWSShapeProperty(label: "maxResults", required: false, type: .integer)
        ]
        /// The continuation token to be used to return the next set of results, if the results cannot be returned in one response.
        public let nextToken: String?
        /// The maximum amount of data that can be contained in a single set of results.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        public init(dictionary: [String: Any]) throws {
            self.nextToken = dictionary["nextToken"] as? String
            self.maxResults = dictionary["maxResults"] as? Int32
        }
    }

    public struct DeleteProjectResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "stackId", required: false, type: .string), 
            AWSShapeProperty(label: "projectArn", required: false, type: .string)
        ]
        /// The ID of the primary stack in AWS CloudFormation that will be deleted as part of deleting the project and its resources.
        public let stackId: String?
        /// The Amazon Resource Name (ARN) of the deleted project.
        public let projectArn: String?

        public init(stackId: String? = nil, projectArn: String? = nil) {
            self.stackId = stackId
            self.projectArn = projectArn
        }

        public init(dictionary: [String: Any]) throws {
            self.stackId = dictionary["stackId"] as? String
            self.projectArn = dictionary["projectArn"] as? String
        }
    }

    public struct UpdateProjectRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "id", required: true, type: .string), 
            AWSShapeProperty(label: "name", required: false, type: .string), 
            AWSShapeProperty(label: "description", required: false, type: .string)
        ]
        /// The ID of the project you want to update.
        public let id: String
        /// The name of the project you want to update.
        public let name: String?
        /// The description of the project, if any.
        public let description: String?

        public init(id: String, name: String? = nil, description: String? = nil) {
            self.id = id
            self.name = name
            self.description = description
        }

        public init(dictionary: [String: Any]) throws {
            guard let id = dictionary["id"] as? String else { throw InitializableError.missingRequiredParam("id") }
            self.id = id
            self.name = dictionary["name"] as? String
            self.description = dictionary["description"] as? String
        }
    }

    public struct TeamMember: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "userArn", required: true, type: .string), 
            AWSShapeProperty(label: "projectRole", required: true, type: .string), 
            AWSShapeProperty(label: "remoteAccessAllowed", required: false, type: .boolean)
        ]
        /// The Amazon Resource Name (ARN) of the user in IAM.
        public let userArn: String
        /// The role assigned to the user in the project. Project roles have different levels of access. For more information, see Working with Teams in the AWS CodeStar User Guide. 
        public let projectRole: String
        /// Whether the user is allowed to remotely access project resources using an SSH public/private key pair.
        public let remoteAccessAllowed: Bool?

        public init(userArn: String, projectRole: String, remoteAccessAllowed: Bool? = nil) {
            self.userArn = userArn
            self.projectRole = projectRole
            self.remoteAccessAllowed = remoteAccessAllowed
        }

        public init(dictionary: [String: Any]) throws {
            guard let userArn = dictionary["userArn"] as? String else { throw InitializableError.missingRequiredParam("userArn") }
            self.userArn = userArn
            guard let projectRole = dictionary["projectRole"] as? String else { throw InitializableError.missingRequiredParam("projectRole") }
            self.projectRole = projectRole
            self.remoteAccessAllowed = dictionary["remoteAccessAllowed"] as? Bool
        }
    }

    public struct DeleteUserProfileRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "userArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the user to delete from AWS CodeStar.
        public let userArn: String

        public init(userArn: String) {
            self.userArn = userArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let userArn = dictionary["userArn"] as? String else { throw InitializableError.missingRequiredParam("userArn") }
            self.userArn = userArn
        }
    }

    public struct DisassociateTeamMemberResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil

        public init(dictionary: [String: Any]) throws {
        }
    }

    public struct UpdateTeamMemberRequest: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "projectId", required: true, type: .string), 
            AWSShapeProperty(label: "projectRole", required: false, type: .string), 
            AWSShapeProperty(label: "remoteAccessAllowed", required: false, type: .boolean), 
            AWSShapeProperty(label: "userArn", required: true, type: .string)
        ]
        /// The ID of the project.
        public let projectId: String
        /// The role assigned to the user in the project. Project roles have different levels of access. For more information, see Working with Teams in the AWS CodeStar User Guide.
        public let projectRole: String?
        /// Whether a team member is allowed to remotely access project resources using the SSH public key associated with the user's profile. Even if this is set to True, the user must associate a public key with their profile before the user can access resources.
        public let remoteAccessAllowed: Bool?
        /// The Amazon Resource Name (ARN) of the user for whom you want to change team membership attributes.
        public let userArn: String

        public init(projectId: String, projectRole: String? = nil, remoteAccessAllowed: Bool? = nil, userArn: String) {
            self.projectId = projectId
            self.projectRole = projectRole
            self.remoteAccessAllowed = remoteAccessAllowed
            self.userArn = userArn
        }

        public init(dictionary: [String: Any]) throws {
            guard let projectId = dictionary["projectId"] as? String else { throw InitializableError.missingRequiredParam("projectId") }
            self.projectId = projectId
            self.projectRole = dictionary["projectRole"] as? String
            self.remoteAccessAllowed = dictionary["remoteAccessAllowed"] as? Bool
            guard let userArn = dictionary["userArn"] as? String else { throw InitializableError.missingRequiredParam("userArn") }
            self.userArn = userArn
        }
    }

    public struct DescribeProjectResult: AWSShape {
        /// The key for the payload
        public static let payload: String? = nil
        public static var parsingHints: [AWSShapeProperty] = [
            AWSShapeProperty(label: "name", required: false, type: .string), 
            AWSShapeProperty(label: "id", required: false, type: .string), 
            AWSShapeProperty(label: "stackId", required: false, type: .string), 
            AWSShapeProperty(label: "description", required: false, type: .string), 
            AWSShapeProperty(label: "projectTemplateId", required: false, type: .string), 
            AWSShapeProperty(label: "createdTimeStamp", required: false, type: .timestamp), 
            AWSShapeProperty(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeProperty(label: "arn", required: false, type: .string)
        ]
        /// The display name for the project.
        public let name: String?
        /// The ID of the project.
        public let id: String?
        /// The ID of the primary stack in AWS CloudFormation used to generate resources for the project.
        public let stackId: String?
        /// The description of the project, if any.
        public let description: String?
        /// The ID for the AWS CodeStar project template used to create the project.
        public let projectTemplateId: String?
        /// The date and time the project was created, in timestamp format.
        public let createdTimeStamp: String?
        /// A user- or system-generated token that identifies the entity that requested project creation. 
        public let clientRequestToken: String?
        /// The Amazon Resource Name (ARN) for the project.
        public let arn: String?

        public init(name: String? = nil, id: String? = nil, stackId: String? = nil, description: String? = nil, projectTemplateId: String? = nil, createdTimeStamp: String? = nil, clientRequestToken: String? = nil, arn: String? = nil) {
            self.name = name
            self.id = id
            self.stackId = stackId
            self.description = description
            self.projectTemplateId = projectTemplateId
            self.createdTimeStamp = createdTimeStamp
            self.clientRequestToken = clientRequestToken
            self.arn = arn
        }

        public init(dictionary: [String: Any]) throws {
            self.name = dictionary["name"] as? String
            self.id = dictionary["id"] as? String
            self.stackId = dictionary["stackId"] as? String
            self.description = dictionary["description"] as? String
            self.projectTemplateId = dictionary["projectTemplateId"] as? String
            self.createdTimeStamp = dictionary["createdTimeStamp"] as? String
            self.clientRequestToken = dictionary["clientRequestToken"] as? String
            self.arn = dictionary["arn"] as? String
        }
    }

}