// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Codestar {

    public struct UntagProjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .list)
        ]
        /// The ID of the project to remove tags from.
        public let id: String
        /// The tags to remove from the project.
        public let tags: [String]

        public init(id: String, tags: [String]) {
            self.id = id
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case tags = "tags"
        }
    }

    public struct CreateUserProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "emailAddress", required: true, type: .string), 
            AWSShapeMember(label: "displayName", required: true, type: .string), 
            AWSShapeMember(label: "userArn", required: true, type: .string), 
            AWSShapeMember(label: "sshPublicKey", required: false, type: .string)
        ]
        /// The email address that will be displayed as part of the user's profile in AWS CodeStar.
        public let emailAddress: String
        /// The name that will be displayed as the friendly name for the user in AWS CodeStar. 
        public let displayName: String
        /// The Amazon Resource Name (ARN) of the user in IAM.
        public let userArn: String
        /// The SSH public key associated with the user in AWS CodeStar. If a project owner allows the user remote access to project resources, this public key will be used along with the user's private key for SSH access.
        public let sshPublicKey: String?

        public init(emailAddress: String, displayName: String, userArn: String, sshPublicKey: String? = nil) {
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.userArn = userArn
            self.sshPublicKey = sshPublicKey
        }

        private enum CodingKeys: String, CodingKey {
            case emailAddress = "emailAddress"
            case displayName = "displayName"
            case userArn = "userArn"
            case sshPublicKey = "sshPublicKey"
        }
    }

    public struct ListUserProfilesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// The continuation token for the next set of results, if the results cannot be returned in one response.
        public let nextToken: String?
        /// The maximum number of results to return in a response.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct ListTagsForProjectResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .map), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The tags for the project.
        public let tags: [String: String]?
        /// Reserved for future use.
        public let nextToken: String?

        public init(tags: [String: String]? = nil, nextToken: String? = nil) {
            self.tags = tags
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
            case nextToken = "nextToken"
        }
    }

    public struct TagProjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .map)
        ]
        /// The ID of the project you want to add a tag to.
        public let id: String
        /// The tags you want to add to the project.
        public let tags: [String: String]

        public init(id: String, tags: [String: String]) {
            self.id = id
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case tags = "tags"
        }
    }

    public struct UpdateUserProfileResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "createdTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "emailAddress", required: false, type: .string), 
            AWSShapeMember(label: "displayName", required: false, type: .string), 
            AWSShapeMember(label: "lastModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "userArn", required: true, type: .string), 
            AWSShapeMember(label: "sshPublicKey", required: false, type: .string)
        ]
        /// The date the user profile was created, in timestamp format.
        public let createdTimestamp: TimeStamp?
        /// The email address that is displayed as part of the user's profile in AWS CodeStar.
        public let emailAddress: String?
        /// The name that is displayed as the friendly name for the user in AWS CodeStar.
        public let displayName: String?
        /// The date the user profile was last modified, in timestamp format.
        public let lastModifiedTimestamp: TimeStamp?
        /// The Amazon Resource Name (ARN) of the user in IAM.
        public let userArn: String
        /// The SSH public key associated with the user in AWS CodeStar. This is the public portion of the public/private keypair the user can use to access project resources if a project owner allows the user remote access to those resources.
        public let sshPublicKey: String?

        public init(createdTimestamp: TimeStamp? = nil, emailAddress: String? = nil, displayName: String? = nil, lastModifiedTimestamp: TimeStamp? = nil, userArn: String, sshPublicKey: String? = nil) {
            self.createdTimestamp = createdTimestamp
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.userArn = userArn
            self.sshPublicKey = sshPublicKey
        }

        private enum CodingKeys: String, CodingKey {
            case createdTimestamp = "createdTimestamp"
            case emailAddress = "emailAddress"
            case displayName = "displayName"
            case lastModifiedTimestamp = "lastModifiedTimestamp"
            case userArn = "userArn"
            case sshPublicKey = "sshPublicKey"
        }
    }

    public struct CreateProjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "name", required: true, type: .string), 
            AWSShapeMember(label: "id", required: true, type: .string), 
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string)
        ]
        /// Reserved for future use.
        public let description: String?
        /// Reserved for future use.
        public let name: String
        /// Reserved for future use.
        public let id: String
        /// Reserved for future use.
        public let clientRequestToken: String?

        public init(description: String? = nil, name: String, id: String, clientRequestToken: String? = nil) {
            self.description = description
            self.name = name
            self.id = id
            self.clientRequestToken = clientRequestToken
        }

        private enum CodingKeys: String, CodingKey {
            case description = "description"
            case name = "name"
            case id = "id"
            case clientRequestToken = "clientRequestToken"
        }
    }

    public struct UpdateProjectResult: AWSShape {

    }

    public struct ListTeamMembersResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "teamMembers", required: true, type: .list)
        ]
        /// The continuation token to use when requesting the next set of results, if there are more results to be returned.
        public let nextToken: String?
        /// A list of team member objects for the project.
        public let teamMembers: [TeamMember]

        public init(nextToken: String? = nil, teamMembers: [TeamMember]) {
            self.nextToken = nextToken
            self.teamMembers = teamMembers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case teamMembers = "teamMembers"
        }
    }

    public struct DeleteProjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: true, type: .string), 
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "deleteStack", required: false, type: .boolean)
        ]
        /// The ID of the project to be deleted in AWS CodeStar.
        public let id: String
        /// A user- or system-generated token that identifies the entity that requested project deletion. This token can be used to repeat the request. 
        public let clientRequestToken: String?
        /// Whether to send a delete request for the primary stack in AWS CloudFormation originally used to generate the project and its resources. This option will delete all AWS resources for the project (except for any buckets in Amazon S3) as well as deleting the project itself. Recommended for most use cases.
        public let deleteStack: Bool?

        public init(id: String, clientRequestToken: String? = nil, deleteStack: Bool? = nil) {
            self.id = id
            self.clientRequestToken = clientRequestToken
            self.deleteStack = deleteStack
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case clientRequestToken = "clientRequestToken"
            case deleteStack = "deleteStack"
        }
    }

    public struct DeleteUserProfileResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the user deleted from AWS CodeStar.
        public let userArn: String

        public init(userArn: String) {
            self.userArn = userArn
        }

        private enum CodingKeys: String, CodingKey {
            case userArn = "userArn"
        }
    }

    public struct UpdateTeamMemberResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userArn", required: false, type: .string), 
            AWSShapeMember(label: "projectRole", required: false, type: .string), 
            AWSShapeMember(label: "remoteAccessAllowed", required: false, type: .boolean)
        ]
        /// The Amazon Resource Name (ARN) of the user whose team membership attributes were updated.
        public let userArn: String?
        /// The project role granted to the user.
        public let projectRole: String?
        /// Whether a team member is allowed to remotely access project resources using the SSH public key associated with the user's profile.
        public let remoteAccessAllowed: Bool?

        public init(userArn: String? = nil, projectRole: String? = nil, remoteAccessAllowed: Bool? = nil) {
            self.userArn = userArn
            self.projectRole = projectRole
            self.remoteAccessAllowed = remoteAccessAllowed
        }

        private enum CodingKeys: String, CodingKey {
            case userArn = "userArn"
            case projectRole = "projectRole"
            case remoteAccessAllowed = "remoteAccessAllowed"
        }
    }

    public struct DisassociateTeamMemberRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userArn", required: true, type: .string), 
            AWSShapeMember(label: "projectId", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the IAM user or group whom you want to remove from the project.
        public let userArn: String
        /// The ID of the AWS CodeStar project from which you want to remove a team member.
        public let projectId: String

        public init(userArn: String, projectId: String) {
            self.userArn = userArn
            self.projectId = projectId
        }

        private enum CodingKeys: String, CodingKey {
            case userArn = "userArn"
            case projectId = "projectId"
        }
    }

    public struct CreateUserProfileResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "createdTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "emailAddress", required: false, type: .string), 
            AWSShapeMember(label: "displayName", required: false, type: .string), 
            AWSShapeMember(label: "lastModifiedTimestamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "userArn", required: true, type: .string), 
            AWSShapeMember(label: "sshPublicKey", required: false, type: .string)
        ]
        /// The date the user profile was created, in timestamp format.
        public let createdTimestamp: TimeStamp?
        /// The email address that is displayed as part of the user's profile in AWS CodeStar.
        public let emailAddress: String?
        /// The name that is displayed as the friendly name for the user in AWS CodeStar.
        public let displayName: String?
        /// The date the user profile was last modified, in timestamp format.
        public let lastModifiedTimestamp: TimeStamp?
        /// The Amazon Resource Name (ARN) of the user in IAM.
        public let userArn: String
        /// The SSH public key associated with the user in AWS CodeStar. This is the public portion of the public/private keypair the user can use to access project resources if a project owner allows the user remote access to those resources.
        public let sshPublicKey: String?

        public init(createdTimestamp: TimeStamp? = nil, emailAddress: String? = nil, displayName: String? = nil, lastModifiedTimestamp: TimeStamp? = nil, userArn: String, sshPublicKey: String? = nil) {
            self.createdTimestamp = createdTimestamp
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.userArn = userArn
            self.sshPublicKey = sshPublicKey
        }

        private enum CodingKeys: String, CodingKey {
            case createdTimestamp = "createdTimestamp"
            case emailAddress = "emailAddress"
            case displayName = "displayName"
            case lastModifiedTimestamp = "lastModifiedTimestamp"
            case userArn = "userArn"
            case sshPublicKey = "sshPublicKey"
        }
    }

    public struct CreateProjectResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "projectTemplateId", required: false, type: .string), 
            AWSShapeMember(label: "id", required: true, type: .string), 
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: true, type: .string)
        ]
        /// Reserved for future use.
        public let projectTemplateId: String?
        /// Reserved for future use.
        public let id: String
        /// Reserved for future use.
        public let clientRequestToken: String?
        /// Reserved for future use.
        public let arn: String

        public init(projectTemplateId: String? = nil, id: String, clientRequestToken: String? = nil, arn: String) {
            self.projectTemplateId = projectTemplateId
            self.id = id
            self.clientRequestToken = clientRequestToken
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case projectTemplateId = "projectTemplateId"
            case id = "id"
            case clientRequestToken = "clientRequestToken"
            case arn = "arn"
        }
    }

    public struct ListUserProfilesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userProfiles", required: true, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// All the user profiles configured in AWS CodeStar for an AWS account.
        public let userProfiles: [UserProfileSummary]
        /// The continuation token to use when requesting the next set of results, if there are more results to be returned.
        public let nextToken: String?

        public init(userProfiles: [UserProfileSummary], nextToken: String? = nil) {
            self.userProfiles = userProfiles
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case userProfiles = "userProfiles"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeUserProfileResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "createdTimestamp", required: true, type: .timestamp), 
            AWSShapeMember(label: "emailAddress", required: false, type: .string), 
            AWSShapeMember(label: "displayName", required: false, type: .string), 
            AWSShapeMember(label: "lastModifiedTimestamp", required: true, type: .timestamp), 
            AWSShapeMember(label: "userArn", required: true, type: .string), 
            AWSShapeMember(label: "sshPublicKey", required: false, type: .string)
        ]
        /// The date and time when the user profile was created in AWS CodeStar, in timestamp format.
        public let createdTimestamp: TimeStamp
        /// The email address for the user. Optional.
        public let emailAddress: String?
        /// The display name shown for the user in AWS CodeStar projects. For example, this could be set to both first and last name ("Mary Major") or a single name ("Mary"). The display name is also used to generate the initial icon associated with the user in AWS CodeStar projects. If spaces are included in the display name, the first character that appears after the space will be used as the second character in the user initial icon. The initial icon displays a maximum of two characters, so a display name with more than one space (for example "Mary Jane Major") would generate an initial icon using the first character and the first character after the space ("MJ", not "MM").
        public let displayName: String?
        /// The date and time when the user profile was last modified, in timestamp format.
        public let lastModifiedTimestamp: TimeStamp
        /// The Amazon Resource Name (ARN) of the user.
        public let userArn: String
        /// The SSH public key associated with the user. This SSH public key is associated with the user profile, and can be used in conjunction with the associated private key for access to project resources, such as Amazon EC2 instances, if a project owner grants remote access to those resources.
        public let sshPublicKey: String?

        public init(createdTimestamp: TimeStamp, emailAddress: String? = nil, displayName: String? = nil, lastModifiedTimestamp: TimeStamp, userArn: String, sshPublicKey: String? = nil) {
            self.createdTimestamp = createdTimestamp
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.lastModifiedTimestamp = lastModifiedTimestamp
            self.userArn = userArn
            self.sshPublicKey = sshPublicKey
        }

        private enum CodingKeys: String, CodingKey {
            case createdTimestamp = "createdTimestamp"
            case emailAddress = "emailAddress"
            case displayName = "displayName"
            case lastModifiedTimestamp = "lastModifiedTimestamp"
            case userArn = "userArn"
            case sshPublicKey = "sshPublicKey"
        }
    }

    public struct TagProjectResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "tags", required: false, type: .map)
        ]
        /// The tags for the project.
        public let tags: [String: String]?

        public init(tags: [String: String]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "tags"
        }
    }

    public struct DescribeProjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: true, type: .string)
        ]
        /// The ID of the project.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
        }
    }

    public struct UntagProjectResult: AWSShape {

    }

    public struct ListTeamMembersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "projectId", required: true, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// The ID of the project for which you want to list team members.
        public let projectId: String
        /// The continuation token for the next set of results, if the results cannot be returned in one response.
        public let nextToken: String?
        /// The maximum number of team members you want returned in a response.
        public let maxResults: Int32?

        public init(projectId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.projectId = projectId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case projectId = "projectId"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct ListResourcesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resources", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// An array of resources associated with the project. 
        public let resources: [Resource]?
        /// The continuation token to use when requesting the next set of results, if there are more results to be returned.
        public let nextToken: String?

        public init(resources: [Resource]? = nil, nextToken: String? = nil) {
            self.resources = resources
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case resources = "resources"
            case nextToken = "nextToken"
        }
    }

    public struct UserProfileSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "emailAddress", required: false, type: .string), 
            AWSShapeMember(label: "displayName", required: false, type: .string), 
            AWSShapeMember(label: "userArn", required: false, type: .string), 
            AWSShapeMember(label: "sshPublicKey", required: false, type: .string)
        ]
        /// The email address associated with the user.
        public let emailAddress: String?
        /// The display name of a user in AWS CodeStar. For example, this could be set to both first and last name ("Mary Major") or a single name ("Mary"). The display name is also used to generate the initial icon associated with the user in AWS CodeStar projects. If spaces are included in the display name, the first character that appears after the space will be used as the second character in the user initial icon. The initial icon displays a maximum of two characters, so a display name with more than one space (for example "Mary Jane Major") would generate an initial icon using the first character and the first character after the space ("MJ", not "MM").
        public let displayName: String?
        /// The Amazon Resource Name (ARN) of the user in IAM.
        public let userArn: String?
        /// The SSH public key associated with the user in AWS CodeStar. If a project owner allows the user remote access to project resources, this public key will be used along with the user's private key for SSH access.
        public let sshPublicKey: String?

        public init(emailAddress: String? = nil, displayName: String? = nil, userArn: String? = nil, sshPublicKey: String? = nil) {
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.userArn = userArn
            self.sshPublicKey = sshPublicKey
        }

        private enum CodingKeys: String, CodingKey {
            case emailAddress = "emailAddress"
            case displayName = "displayName"
            case userArn = "userArn"
            case sshPublicKey = "sshPublicKey"
        }
    }

    public struct AssociateTeamMemberResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string)
        ]
        /// The user- or system-generated token from the initial request that can be used to repeat the request.
        public let clientRequestToken: String?

        public init(clientRequestToken: String? = nil) {
            self.clientRequestToken = clientRequestToken
        }

        private enum CodingKeys: String, CodingKey {
            case clientRequestToken = "clientRequestToken"
        }
    }

    public struct UpdateUserProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "emailAddress", required: false, type: .string), 
            AWSShapeMember(label: "displayName", required: false, type: .string), 
            AWSShapeMember(label: "userArn", required: true, type: .string), 
            AWSShapeMember(label: "sshPublicKey", required: false, type: .string)
        ]
        /// The email address that is displayed as part of the user's profile in AWS CodeStar.
        public let emailAddress: String?
        /// The name that is displayed as the friendly name for the user in AWS CodeStar.
        public let displayName: String?
        /// The name that will be displayed as the friendly name for the user in AWS CodeStar.
        public let userArn: String
        /// The SSH public key associated with the user in AWS CodeStar. If a project owner allows the user remote access to project resources, this public key will be used along with the user's private key for SSH access.
        public let sshPublicKey: String?

        public init(emailAddress: String? = nil, displayName: String? = nil, userArn: String, sshPublicKey: String? = nil) {
            self.emailAddress = emailAddress
            self.displayName = displayName
            self.userArn = userArn
            self.sshPublicKey = sshPublicKey
        }

        private enum CodingKeys: String, CodingKey {
            case emailAddress = "emailAddress"
            case displayName = "displayName"
            case userArn = "userArn"
            case sshPublicKey = "sshPublicKey"
        }
    }

    public struct ListProjectsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "projects", required: true, type: .list)
        ]
        /// The continuation token to use when requesting the next set of results, if there are more results to be returned.
        public let nextToken: String?
        /// A list of projects.
        public let projects: [ProjectSummary]

        public init(nextToken: String? = nil, projects: [ProjectSummary]) {
            self.nextToken = nextToken
            self.projects = projects
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case projects = "projects"
        }
    }

    public struct ListTagsForProjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: true, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// The ID of the project to get tags for.
        public let id: String
        /// Reserved for future use.
        public let nextToken: String?
        /// Reserved for future use.
        public let maxResults: Int32?

        public init(id: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.id = id
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct Resource: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the resource.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
        }
    }

    public struct AssociateTeamMemberRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "projectId", required: true, type: .string), 
            AWSShapeMember(label: "projectRole", required: true, type: .string), 
            AWSShapeMember(label: "remoteAccessAllowed", required: false, type: .boolean), 
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "userArn", required: true, type: .string)
        ]
        /// The ID of the project to which you will add the IAM user.
        public let projectId: String
        /// The AWS CodeStar project role that will apply to this user. This role determines what actions a user can take in an AWS CodeStar project.
        public let projectRole: String
        /// Whether the team member is allowed to use an SSH public/private key pair to remotely access project resources, for example Amazon EC2 instances.
        public let remoteAccessAllowed: Bool?
        /// A user- or system-generated token that identifies the entity that requested the team member association to the project. This token can be used to repeat the request.
        public let clientRequestToken: String?
        /// The Amazon Resource Name (ARN) for the IAM user you want to add to the AWS CodeStar project.
        public let userArn: String

        public init(projectId: String, projectRole: String, remoteAccessAllowed: Bool? = nil, clientRequestToken: String? = nil, userArn: String) {
            self.projectId = projectId
            self.projectRole = projectRole
            self.remoteAccessAllowed = remoteAccessAllowed
            self.clientRequestToken = clientRequestToken
            self.userArn = userArn
        }

        private enum CodingKeys: String, CodingKey {
            case projectId = "projectId"
            case projectRole = "projectRole"
            case remoteAccessAllowed = "remoteAccessAllowed"
            case clientRequestToken = "clientRequestToken"
            case userArn = "userArn"
        }
    }

    public struct DescribeUserProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the user.
        public let userArn: String

        public init(userArn: String) {
            self.userArn = userArn
        }

        private enum CodingKeys: String, CodingKey {
            case userArn = "userArn"
        }
    }

    public struct ListResourcesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "projectId", required: true, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// The ID of the project.
        public let projectId: String
        /// The continuation token for the next set of results, if the results cannot be returned in one response.
        public let nextToken: String?
        /// The maximum amount of data that can be contained in a single set of results.
        public let maxResults: Int32?

        public init(projectId: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.projectId = projectId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case projectId = "projectId"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct ProjectSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "projectId", required: false, type: .string), 
            AWSShapeMember(label: "projectArn", required: false, type: .string)
        ]
        /// The ID of the project.
        public let projectId: String?
        /// The Amazon Resource Name (ARN) of the project.
        public let projectArn: String?

        public init(projectId: String? = nil, projectArn: String? = nil) {
            self.projectId = projectId
            self.projectArn = projectArn
        }

        private enum CodingKeys: String, CodingKey {
            case projectId = "projectId"
            case projectArn = "projectArn"
        }
    }

    public struct ListProjectsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// The continuation token to be used to return the next set of results, if the results cannot be returned in one response.
        public let nextToken: String?
        /// The maximum amount of data that can be contained in a single set of results.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct DeleteProjectResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "stackId", required: false, type: .string), 
            AWSShapeMember(label: "projectArn", required: false, type: .string)
        ]
        /// The ID of the primary stack in AWS CloudFormation that will be deleted as part of deleting the project and its resources.
        public let stackId: String?
        /// The Amazon Resource Name (ARN) of the deleted project.
        public let projectArn: String?

        public init(stackId: String? = nil, projectArn: String? = nil) {
            self.stackId = stackId
            self.projectArn = projectArn
        }

        private enum CodingKeys: String, CodingKey {
            case stackId = "stackId"
            case projectArn = "projectArn"
        }
    }

    public struct UpdateProjectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "id", required: true, type: .string), 
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string)
        ]
        /// The ID of the project you want to update.
        public let id: String
        /// The name of the project you want to update.
        public let name: String?
        /// The description of the project, if any.
        public let description: String?

        public init(id: String, name: String? = nil, description: String? = nil) {
            self.id = id
            self.name = name
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case id = "id"
            case name = "name"
            case description = "description"
        }
    }

    public struct TeamMember: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userArn", required: true, type: .string), 
            AWSShapeMember(label: "projectRole", required: true, type: .string), 
            AWSShapeMember(label: "remoteAccessAllowed", required: false, type: .boolean)
        ]
        /// The Amazon Resource Name (ARN) of the user in IAM.
        public let userArn: String
        /// The role assigned to the user in the project. Project roles have different levels of access. For more information, see Working with Teams in the AWS CodeStar User Guide. 
        public let projectRole: String
        /// Whether the user is allowed to remotely access project resources using an SSH public/private key pair.
        public let remoteAccessAllowed: Bool?

        public init(userArn: String, projectRole: String, remoteAccessAllowed: Bool? = nil) {
            self.userArn = userArn
            self.projectRole = projectRole
            self.remoteAccessAllowed = remoteAccessAllowed
        }

        private enum CodingKeys: String, CodingKey {
            case userArn = "userArn"
            case projectRole = "projectRole"
            case remoteAccessAllowed = "remoteAccessAllowed"
        }
    }

    public struct DeleteUserProfileRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "userArn", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the user to delete from AWS CodeStar.
        public let userArn: String

        public init(userArn: String) {
            self.userArn = userArn
        }

        private enum CodingKeys: String, CodingKey {
            case userArn = "userArn"
        }
    }

    public struct DisassociateTeamMemberResult: AWSShape {

    }

    public struct UpdateTeamMemberRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "projectId", required: true, type: .string), 
            AWSShapeMember(label: "projectRole", required: false, type: .string), 
            AWSShapeMember(label: "remoteAccessAllowed", required: false, type: .boolean), 
            AWSShapeMember(label: "userArn", required: true, type: .string)
        ]
        /// The ID of the project.
        public let projectId: String
        /// The role assigned to the user in the project. Project roles have different levels of access. For more information, see Working with Teams in the AWS CodeStar User Guide.
        public let projectRole: String?
        /// Whether a team member is allowed to remotely access project resources using the SSH public key associated with the user's profile. Even if this is set to True, the user must associate a public key with their profile before the user can access resources.
        public let remoteAccessAllowed: Bool?
        /// The Amazon Resource Name (ARN) of the user for whom you want to change team membership attributes.
        public let userArn: String

        public init(projectId: String, projectRole: String? = nil, remoteAccessAllowed: Bool? = nil, userArn: String) {
            self.projectId = projectId
            self.projectRole = projectRole
            self.remoteAccessAllowed = remoteAccessAllowed
            self.userArn = userArn
        }

        private enum CodingKeys: String, CodingKey {
            case projectId = "projectId"
            case projectRole = "projectRole"
            case remoteAccessAllowed = "remoteAccessAllowed"
            case userArn = "userArn"
        }
    }

    public struct DescribeProjectResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "name", required: false, type: .string), 
            AWSShapeMember(label: "id", required: false, type: .string), 
            AWSShapeMember(label: "stackId", required: false, type: .string), 
            AWSShapeMember(label: "description", required: false, type: .string), 
            AWSShapeMember(label: "projectTemplateId", required: false, type: .string), 
            AWSShapeMember(label: "createdTimeStamp", required: false, type: .timestamp), 
            AWSShapeMember(label: "clientRequestToken", required: false, type: .string), 
            AWSShapeMember(label: "arn", required: false, type: .string)
        ]
        /// The display name for the project.
        public let name: String?
        /// The ID of the project.
        public let id: String?
        /// The ID of the primary stack in AWS CloudFormation used to generate resources for the project.
        public let stackId: String?
        /// The description of the project, if any.
        public let description: String?
        /// The ID for the AWS CodeStar project template used to create the project.
        public let projectTemplateId: String?
        /// The date and time the project was created, in timestamp format.
        public let createdTimeStamp: TimeStamp?
        /// A user- or system-generated token that identifies the entity that requested project creation. 
        public let clientRequestToken: String?
        /// The Amazon Resource Name (ARN) for the project.
        public let arn: String?

        public init(name: String? = nil, id: String? = nil, stackId: String? = nil, description: String? = nil, projectTemplateId: String? = nil, createdTimeStamp: TimeStamp? = nil, clientRequestToken: String? = nil, arn: String? = nil) {
            self.name = name
            self.id = id
            self.stackId = stackId
            self.description = description
            self.projectTemplateId = projectTemplateId
            self.createdTimeStamp = createdTimeStamp
            self.clientRequestToken = clientRequestToken
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case name = "name"
            case id = "id"
            case stackId = "stackId"
            case description = "description"
            case projectTemplateId = "projectTemplateId"
            case createdTimeStamp = "createdTimeStamp"
            case clientRequestToken = "clientRequestToken"
            case arn = "arn"
        }
    }

}