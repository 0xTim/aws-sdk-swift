// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

/**
AWS Glue Defines the public endpoint for the AWS Glue service.
*/
public struct Glue {

    let client: AWSClient

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: AWSSDKSwiftCore.Region? = nil, endpoint: String? = nil) {
        self.client = AWSClient(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            amzTarget: "AWSGlue",
            service: "glue",
            serviceProtocol: ServiceProtocol(type: .json, version: ServiceProtocol.Version(major: 1, minor: 1)),
            apiVersion: "2017-03-31",
            endpoint: endpoint,
            middlewares: [],
            possibleErrorTypes: [GlueError.self]
        )
    }

    ///  Retrieves metadata for all runs of a given job definition.
    public func getJobRuns(_ input: GetJobRunsRequest) throws -> GetJobRunsResponse {
        return try client.send(operation: "GetJobRuns", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves all Databases defined in a given Data Catalog.
    public func getDatabases(_ input: GetDatabasesRequest) throws -> GetDatabasesResponse {
        return try client.send(operation: "GetDatabases", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the metadata for a given job run.
    public func getJobRun(_ input: GetJobRunRequest) throws -> GetJobRunResponse {
        return try client.send(operation: "GetJobRun", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves a multiple function definitions from the Data Catalog.
    public func getUserDefinedFunctions(_ input: GetUserDefinedFunctionsRequest) throws -> GetUserDefinedFunctionsResponse {
        return try client.send(operation: "GetUserDefinedFunctions", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the status of a migration operation.
    public func getCatalogImportStatus(_ input: GetCatalogImportStatusRequest) throws -> GetCatalogImportStatusResponse {
        return try client.send(operation: "GetCatalogImportStatus", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves a list of connection definitions from the Data Catalog.
    public func getConnections(_ input: GetConnectionsRequest) throws -> GetConnectionsResponse {
        return try client.send(operation: "GetConnections", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new job definition.
    public func createJob(_ input: CreateJobRequest) throws -> CreateJobResponse {
        return try client.send(operation: "CreateJob", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates an existing database definition in a Data Catalog.
    public func updateDatabase(_ input: UpdateDatabaseRequest) throws -> UpdateDatabaseResponse {
        return try client.send(operation: "UpdateDatabase", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates the schedule of a crawler using a cron expression. 
    public func updateCrawlerSchedule(_ input: UpdateCrawlerScheduleRequest) throws -> UpdateCrawlerScheduleResponse {
        return try client.send(operation: "UpdateCrawlerSchedule", path: "/", httpMethod: "POST", input: input)
    }

    ///  Imports an existing Athena Data Catalog to AWS Glue
    public func importCatalogToGlue(_ input: ImportCatalogToGlueRequest) throws -> ImportCatalogToGlueResponse {
        return try client.send(operation: "ImportCatalogToGlue", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves a specified version of a table.
    public func getTableVersion(_ input: GetTableVersionRequest) throws -> GetTableVersionResponse {
        return try client.send(operation: "GetTableVersion", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves a connection definition from the Data Catalog.
    public func getConnection(_ input: GetConnectionRequest) throws -> GetConnectionResponse {
        return try client.send(operation: "GetConnection", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new DevEndpoint.
    public func createDevEndpoint(_ input: CreateDevEndpointRequest) throws -> CreateDevEndpointResponse {
        return try client.send(operation: "CreateDevEndpoint", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the Table definition in a Data Catalog for a specified table.
    public func getTable(_ input: GetTableRequest) throws -> GetTableResponse {
        return try client.send(operation: "GetTable", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a specified version of a table.
    public func deleteTableVersion(_ input: DeleteTableVersionRequest) throws -> DeleteTableVersionResponse {
        return try client.send(operation: "DeleteTableVersion", path: "/", httpMethod: "POST", input: input)
    }

    ///  Removes a specified crawler from the Data Catalog, unless the crawler state is RUNNING.
    public func deleteCrawler(_ input: DeleteCrawlerRequest) throws -> DeleteCrawlerResponse {
        return try client.send(operation: "DeleteCrawler", path: "/", httpMethod: "POST", input: input)
    }

    ///  Removes a classifier from the Data Catalog.
    public func deleteClassifier(_ input: DeleteClassifierRequest) throws -> DeleteClassifierResponse {
        return try client.send(operation: "DeleteClassifier", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves metadata for a specified crawler.
    public func getCrawler(_ input: GetCrawlerRequest) throws -> GetCrawlerResponse {
        return try client.send(operation: "GetCrawler", path: "/", httpMethod: "POST", input: input)
    }

    ///  Starts a job run using a job definition.
    public func startJobRun(_ input: StartJobRunRequest) throws -> StartJobRunResponse {
        return try client.send(operation: "StartJobRun", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a specified batch of versions of a table.
    public func batchDeleteTableVersion(_ input: BatchDeleteTableVersionRequest) throws -> BatchDeleteTableVersionResponse {
        return try client.send(operation: "BatchDeleteTableVersion", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a classifier in the user's account. This may be a GrokClassifier, an XMLClassifier, or abbrev JsonClassifier, depending on which field of the request is present.
    public func createClassifier(_ input: CreateClassifierRequest) throws -> CreateClassifierResponse {
        return try client.send(operation: "CreateClassifier", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the definitions of some or all of the tables in a given Database.
    public func getTables(_ input: GetTablesRequest) throws -> GetTablesResponse {
        return try client.send(operation: "GetTables", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the definition of a trigger.
    public func getTrigger(_ input: GetTriggerRequest) throws -> GetTriggerResponse {
        return try client.send(operation: "GetTrigger", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves all current job definitions.
    public func getJobs(_ input: GetJobsRequest) throws -> GetJobsResponse {
        return try client.send(operation: "GetJobs", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a specified job definition. If the job definition is not found, no exception is thrown.
    public func deleteJob(_ input: DeleteJobRequest) throws -> DeleteJobResponse {
        return try client.send(operation: "DeleteJob", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves information about a specified partition.
    public func getPartition(_ input: GetPartitionRequest) throws -> GetPartitionResponse {
        return try client.send(operation: "GetPartition", path: "/", httpMethod: "POST", input: input)
    }

    ///  Lists all classifier objects in the Data Catalog.
    public func getClassifiers(_ input: GetClassifiersRequest) throws -> GetClassifiersResponse {
        return try client.send(operation: "GetClassifiers", path: "/", httpMethod: "POST", input: input)
    }

    ///  Gets all the triggers associated with a job.
    public func getTriggers(_ input: GetTriggersRequest) throws -> GetTriggersResponse {
        return try client.send(operation: "GetTriggers", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates one or more partitions in a batch operation.
    public func batchCreatePartition(_ input: BatchCreatePartitionRequest) throws -> BatchCreatePartitionResponse {
        return try client.send(operation: "BatchCreatePartition", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves information about the partitions in a table.
    public func getPartitions(_ input: GetPartitionsRequest) throws -> GetPartitionsResponse {
        return try client.send(operation: "GetPartitions", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new table definition in the Data Catalog.
    public func createTable(_ input: CreateTableRequest) throws -> CreateTableResponse {
        return try client.send(operation: "CreateTable", path: "/", httpMethod: "POST", input: input)
    }

    ///  Transforms a directed acyclic graph (DAG) into code.
    public func createScript(_ input: CreateScriptRequest) throws -> CreateScriptResponse {
        return try client.send(operation: "CreateScript", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves metadata for all crawlers defined in the customer account.
    public func getCrawlers(_ input: GetCrawlersRequest) throws -> GetCrawlersResponse {
        return try client.send(operation: "GetCrawlers", path: "/", httpMethod: "POST", input: input)
    }

    ///  Gets code to perform a specified mapping.
    public func getPlan(_ input: GetPlanRequest) throws -> GetPlanResponse {
        return try client.send(operation: "GetPlan", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves the definition of a specified database.
    public func getDatabase(_ input: GetDatabaseRequest) throws -> GetDatabaseResponse {
        return try client.send(operation: "GetDatabase", path: "/", httpMethod: "POST", input: input)
    }

    ///  Changes the schedule state of the specified crawler to SCHEDULED, unless the crawler is already running or the schedule state is already SCHEDULED.
    public func startCrawlerSchedule(_ input: StartCrawlerScheduleRequest) throws -> StartCrawlerScheduleResponse {
        return try client.send(operation: "StartCrawlerSchedule", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new trigger.
    public func createTrigger(_ input: CreateTriggerRequest) throws -> CreateTriggerResponse {
        return try client.send(operation: "CreateTrigger", path: "/", httpMethod: "POST", input: input)
    }

    ///  Stops one or more job runs for a specified job definition.
    public func batchStopJobRun(_ input: BatchStopJobRunRequest) throws -> BatchStopJobRunResponse {
        return try client.send(operation: "BatchStopJobRun", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves metrics about specified crawlers.
    public func getCrawlerMetrics(_ input: GetCrawlerMetricsRequest) throws -> GetCrawlerMetricsResponse {
        return try client.send(operation: "GetCrawlerMetrics", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes multiple tables at once.
    public func batchDeleteTable(_ input: BatchDeleteTableRequest) throws -> BatchDeleteTableResponse {
        return try client.send(operation: "BatchDeleteTable", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates an existing job definition.
    public func updateJob(_ input: UpdateJobRequest) throws -> UpdateJobResponse {
        return try client.send(operation: "UpdateJob", path: "/", httpMethod: "POST", input: input)
    }

    ///  If the specified crawler is running, stops the crawl.
    public func stopCrawler(_ input: StopCrawlerRequest) throws -> StopCrawlerResponse {
        return try client.send(operation: "StopCrawler", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves an existing job definition.
    public func getJob(_ input: GetJobRequest) throws -> GetJobResponse {
        return try client.send(operation: "GetJob", path: "/", httpMethod: "POST", input: input)
    }

    ///  Transforms a Python script into a directed acyclic graph (DAG). 
    public func getDataflowGraph(_ input: GetDataflowGraphRequest) throws -> GetDataflowGraphResponse {
        return try client.send(operation: "GetDataflowGraph", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a list of connection definitions from the Data Catalog.
    public func batchDeleteConnection(_ input: BatchDeleteConnectionRequest) throws -> BatchDeleteConnectionResponse {
        return try client.send(operation: "BatchDeleteConnection", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new crawler with specified targets, role, configuration, and optional schedule. At least one crawl target must be specified, in the s3Targets field, the jdbcTargets field, or the DynamoDBTargets field.
    public func createCrawler(_ input: CreateCrawlerRequest) throws -> CreateCrawlerResponse {
        return try client.send(operation: "CreateCrawler", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a specified trigger. If the trigger is not found, no exception is thrown.
    public func deleteTrigger(_ input: DeleteTriggerRequest) throws -> DeleteTriggerResponse {
        return try client.send(operation: "DeleteTrigger", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves a list of strings that identify available versions of a specified table.
    public func getTableVersions(_ input: GetTableVersionsRequest) throws -> GetTableVersionsResponse {
        return try client.send(operation: "GetTableVersions", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves all the DevEndpoints in this AWS account.
    public func getDevEndpoints(_ input: GetDevEndpointsRequest) throws -> GetDevEndpointsResponse {
        return try client.send(operation: "GetDevEndpoints", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves partitions in a batch request.
    public func batchGetPartition(_ input: BatchGetPartitionRequest) throws -> BatchGetPartitionResponse {
        return try client.send(operation: "BatchGetPartition", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new partition.
    public func createPartition(_ input: CreatePartitionRequest) throws -> CreatePartitionResponse {
        return try client.send(operation: "CreatePartition", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes an existing function definition from the Data Catalog.
    public func deleteUserDefinedFunction(_ input: DeleteUserDefinedFunctionRequest) throws -> DeleteUserDefinedFunctionResponse {
        return try client.send(operation: "DeleteUserDefinedFunction", path: "/", httpMethod: "POST", input: input)
    }

    ///  Modifies an existing classifier (a GrokClassifier, XMLClassifier, or JsonClassifier, depending on which field is present).
    public func updateClassifier(_ input: UpdateClassifierRequest) throws -> UpdateClassifierResponse {
        return try client.send(operation: "UpdateClassifier", path: "/", httpMethod: "POST", input: input)
    }

    ///  Stops a specified trigger.
    public func stopTrigger(_ input: StopTriggerRequest) throws -> StopTriggerResponse {
        return try client.send(operation: "StopTrigger", path: "/", httpMethod: "POST", input: input)
    }

    ///  Removes a specified Database from a Data Catalog.
    public func deleteDatabase(_ input: DeleteDatabaseRequest) throws -> DeleteDatabaseResponse {
        return try client.send(operation: "DeleteDatabase", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates a trigger definition.
    public func updateTrigger(_ input: UpdateTriggerRequest) throws -> UpdateTriggerResponse {
        return try client.send(operation: "UpdateTrigger", path: "/", httpMethod: "POST", input: input)
    }

    ///  Sets the schedule state of the specified crawler to NOT_SCHEDULED, but does not stop the crawler if it is already running.
    public func stopCrawlerSchedule(_ input: StopCrawlerScheduleRequest) throws -> StopCrawlerScheduleResponse {
        return try client.send(operation: "StopCrawlerSchedule", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes one or more partitions in a batch operation.
    public func batchDeletePartition(_ input: BatchDeletePartitionRequest) throws -> BatchDeletePartitionResponse {
        return try client.send(operation: "BatchDeletePartition", path: "/", httpMethod: "POST", input: input)
    }

    ///  Starts an existing trigger. See Triggering Jobs for information about how different types of trigger are started.
    public func startTrigger(_ input: StartTriggerRequest) throws -> StartTriggerResponse {
        return try client.send(operation: "StartTrigger", path: "/", httpMethod: "POST", input: input)
    }

    ///  Resets a bookmark entry.
    public func resetJobBookmark(_ input: ResetJobBookmarkRequest) throws -> ResetJobBookmarkResponse {
        return try client.send(operation: "ResetJobBookmark", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a connection from the Data Catalog.
    public func deleteConnection(_ input: DeleteConnectionRequest) throws -> DeleteConnectionResponse {
        return try client.send(operation: "DeleteConnection", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates a metadata table in the Data Catalog.
    public func updateTable(_ input: UpdateTableRequest) throws -> UpdateTableResponse {
        return try client.send(operation: "UpdateTable", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a specified DevEndpoint.
    public func deleteDevEndpoint(_ input: DeleteDevEndpointRequest) throws -> DeleteDevEndpointResponse {
        return try client.send(operation: "DeleteDevEndpoint", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates a connection definition in the Data Catalog.
    public func updateConnection(_ input: UpdateConnectionRequest) throws -> UpdateConnectionResponse {
        return try client.send(operation: "UpdateConnection", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates an existing function definition in the Data Catalog.
    public func updateUserDefinedFunction(_ input: UpdateUserDefinedFunctionRequest) throws -> UpdateUserDefinedFunctionResponse {
        return try client.send(operation: "UpdateUserDefinedFunction", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new database in a Data Catalog.
    public func createDatabase(_ input: CreateDatabaseRequest) throws -> CreateDatabaseResponse {
        return try client.send(operation: "CreateDatabase", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves information about a specified DevEndpoint.
    public func getDevEndpoint(_ input: GetDevEndpointRequest) throws -> GetDevEndpointResponse {
        return try client.send(operation: "GetDevEndpoint", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates a specified DevEndpoint.
    public func updateDevEndpoint(_ input: UpdateDevEndpointRequest) throws -> UpdateDevEndpointResponse {
        return try client.send(operation: "UpdateDevEndpoint", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieves a specified function definition from the Data Catalog.
    public func getUserDefinedFunction(_ input: GetUserDefinedFunctionRequest) throws -> GetUserDefinedFunctionResponse {
        return try client.send(operation: "GetUserDefinedFunction", path: "/", httpMethod: "POST", input: input)
    }

    ///  Retrieve a classifier by name.
    public func getClassifier(_ input: GetClassifierRequest) throws -> GetClassifierResponse {
        return try client.send(operation: "GetClassifier", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates a partition.
    public func updatePartition(_ input: UpdatePartitionRequest) throws -> UpdatePartitionResponse {
        return try client.send(operation: "UpdatePartition", path: "/", httpMethod: "POST", input: input)
    }

    ///  Updates a crawler. If a crawler is running, you must stop it using StopCrawler before updating it.
    public func updateCrawler(_ input: UpdateCrawlerRequest) throws -> UpdateCrawlerResponse {
        return try client.send(operation: "UpdateCrawler", path: "/", httpMethod: "POST", input: input)
    }

    ///  Starts a crawl using the specified crawler, regardless of what is scheduled. If the crawler is already running, returns a CrawlerRunningException.
    public func startCrawler(_ input: StartCrawlerRequest) throws -> StartCrawlerResponse {
        return try client.send(operation: "StartCrawler", path: "/", httpMethod: "POST", input: input)
    }

    ///  Removes a table definition from the Data Catalog.
    public func deleteTable(_ input: DeleteTableRequest) throws -> DeleteTableResponse {
        return try client.send(operation: "DeleteTable", path: "/", httpMethod: "POST", input: input)
    }

    ///  Deletes a specified partition.
    public func deletePartition(_ input: DeletePartitionRequest) throws -> DeletePartitionResponse {
        return try client.send(operation: "DeletePartition", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a connection definition in the Data Catalog.
    public func createConnection(_ input: CreateConnectionRequest) throws -> CreateConnectionResponse {
        return try client.send(operation: "CreateConnection", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates mappings.
    public func getMapping(_ input: GetMappingRequest) throws -> GetMappingResponse {
        return try client.send(operation: "GetMapping", path: "/", httpMethod: "POST", input: input)
    }

    ///  Creates a new function definition in the Data Catalog.
    public func createUserDefinedFunction(_ input: CreateUserDefinedFunctionRequest) throws -> CreateUserDefinedFunctionResponse {
        return try client.send(operation: "CreateUserDefinedFunction", path: "/", httpMethod: "POST", input: input)
    }


}