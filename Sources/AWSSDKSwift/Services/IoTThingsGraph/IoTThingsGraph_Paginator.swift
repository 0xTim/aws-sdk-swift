// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import NIO

extension IoTThingsGraph {

    ///  Gets revisions of the specified workflow. Only the last 100 revisions are stored. If the workflow has been deprecated, this action will return revisions that occurred before the deprecation. This action won't work for workflows that have been deleted.
    public func getFlowTemplateRevisionsPaginator(_ input: GetFlowTemplateRevisionsRequest) -> EventLoopFuture<[FlowTemplateSummary]> {
        return client.paginate(input: input, command: getFlowTemplateRevisions, resultKey: \.summaries, tokenKey: \.nextToken)
    }
    
    ///  Gets revisions made to the specified system template. Only the previous 100 revisions are stored. If the system has been deprecated, this action will return the revisions that occurred before its deprecation. This action won't work with systems that have been deleted.
    public func getSystemTemplateRevisionsPaginator(_ input: GetSystemTemplateRevisionsRequest) -> EventLoopFuture<[SystemTemplateSummary]> {
        return client.paginate(input: input, command: getSystemTemplateRevisions, resultKey: \.summaries, tokenKey: \.nextToken)
    }
    
    ///  Returns a list of objects that contain information about events in a flow execution.
    public func listFlowExecutionMessagesPaginator(_ input: ListFlowExecutionMessagesRequest) -> EventLoopFuture<[FlowExecutionMessage]> {
        return client.paginate(input: input, command: listFlowExecutionMessages, resultKey: \.messages, tokenKey: \.nextToken)
    }
    
    ///  Lists all tags on an AWS IoT Things Graph resource.
    public func listTagsForResourcePaginator(_ input: ListTagsForResourceRequest) -> EventLoopFuture<[Tag]> {
        return client.paginate(input: input, command: listTagsForResource, resultKey: \.tags, tokenKey: \.nextToken)
    }
    
    ///  Searches for entities of the specified type. You can search for entities in your namespace and the public namespace that you're tracking.
    public func searchEntitiesPaginator(_ input: SearchEntitiesRequest) -> EventLoopFuture<[EntityDescription]> {
        return client.paginate(input: input, command: searchEntities, resultKey: \.descriptions, tokenKey: \.nextToken)
    }
    
    ///  Searches for AWS IoT Things Graph workflow execution instances.
    public func searchFlowExecutionsPaginator(_ input: SearchFlowExecutionsRequest) -> EventLoopFuture<[FlowExecutionSummary]> {
        return client.paginate(input: input, command: searchFlowExecutions, resultKey: \.summaries, tokenKey: \.nextToken)
    }
    
    ///  Searches for summary information about workflows.
    public func searchFlowTemplatesPaginator(_ input: SearchFlowTemplatesRequest) -> EventLoopFuture<[FlowTemplateSummary]> {
        return client.paginate(input: input, command: searchFlowTemplates, resultKey: \.summaries, tokenKey: \.nextToken)
    }
    
    ///  Searches for system instances in the user's account.
    public func searchSystemInstancesPaginator(_ input: SearchSystemInstancesRequest) -> EventLoopFuture<[SystemInstanceSummary]> {
        return client.paginate(input: input, command: searchSystemInstances, resultKey: \.summaries, tokenKey: \.nextToken)
    }
    
    ///  Searches for summary information about systems in the user's account. You can filter by the ID of a workflow to return only systems that use the specified workflow.
    public func searchSystemTemplatesPaginator(_ input: SearchSystemTemplatesRequest) -> EventLoopFuture<[SystemTemplateSummary]> {
        return client.paginate(input: input, command: searchSystemTemplates, resultKey: \.summaries, tokenKey: \.nextToken)
    }
    
    ///  Searches for things associated with the specified entity. You can search by both device and device model. For example, if two different devices, camera1 and camera2, implement the camera device model, the user can associate thing1 to camera1 and thing2 to camera2. SearchThings(camera2) will return only thing2, but SearchThings(camera) will return both thing1 and thing2. This action searches for exact matches and doesn't perform partial text matching.
    public func searchThingsPaginator(_ input: SearchThingsRequest) -> EventLoopFuture<[Thing]> {
        return client.paginate(input: input, command: searchThings, resultKey: \.things, tokenKey: \.nextToken)
    }
    
}

extension IoTThingsGraph.GetFlowTemplateRevisionsRequest: AWSPaginateStringToken {
    public init(_ original: IoTThingsGraph.GetFlowTemplateRevisionsRequest, token: String) {
        self.init(
            id: original.id, 
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension IoTThingsGraph.GetSystemTemplateRevisionsRequest: AWSPaginateStringToken {
    public init(_ original: IoTThingsGraph.GetSystemTemplateRevisionsRequest, token: String) {
        self.init(
            id: original.id, 
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension IoTThingsGraph.ListFlowExecutionMessagesRequest: AWSPaginateStringToken {
    public init(_ original: IoTThingsGraph.ListFlowExecutionMessagesRequest, token: String) {
        self.init(
            flowExecutionId: original.flowExecutionId, 
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension IoTThingsGraph.ListTagsForResourceRequest: AWSPaginateStringToken {
    public init(_ original: IoTThingsGraph.ListTagsForResourceRequest, token: String) {
        self.init(
            maxResults: original.maxResults, 
            nextToken: token, 
            resourceArn: original.resourceArn
        )
    }
}

extension IoTThingsGraph.SearchEntitiesRequest: AWSPaginateStringToken {
    public init(_ original: IoTThingsGraph.SearchEntitiesRequest, token: String) {
        self.init(
            entityTypes: original.entityTypes, 
            filters: original.filters, 
            maxResults: original.maxResults, 
            namespaceVersion: original.namespaceVersion, 
            nextToken: token
        )
    }
}

extension IoTThingsGraph.SearchFlowExecutionsRequest: AWSPaginateStringToken {
    public init(_ original: IoTThingsGraph.SearchFlowExecutionsRequest, token: String) {
        self.init(
            endTime: original.endTime, 
            flowExecutionId: original.flowExecutionId, 
            maxResults: original.maxResults, 
            nextToken: token, 
            startTime: original.startTime, 
            systemInstanceId: original.systemInstanceId
        )
    }
}

extension IoTThingsGraph.SearchFlowTemplatesRequest: AWSPaginateStringToken {
    public init(_ original: IoTThingsGraph.SearchFlowTemplatesRequest, token: String) {
        self.init(
            filters: original.filters, 
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension IoTThingsGraph.SearchSystemInstancesRequest: AWSPaginateStringToken {
    public init(_ original: IoTThingsGraph.SearchSystemInstancesRequest, token: String) {
        self.init(
            filters: original.filters, 
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension IoTThingsGraph.SearchSystemTemplatesRequest: AWSPaginateStringToken {
    public init(_ original: IoTThingsGraph.SearchSystemTemplatesRequest, token: String) {
        self.init(
            filters: original.filters, 
            maxResults: original.maxResults, 
            nextToken: token
        )
    }
}

extension IoTThingsGraph.SearchThingsRequest: AWSPaginateStringToken {
    public init(_ original: IoTThingsGraph.SearchThingsRequest, token: String) {
        self.init(
            entityId: original.entityId, 
            maxResults: original.maxResults, 
            namespaceVersion: original.namespaceVersion, 
            nextToken: token
        )
    }
}


