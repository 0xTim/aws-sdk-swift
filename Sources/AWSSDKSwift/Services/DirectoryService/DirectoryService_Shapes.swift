// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension DirectoryService {

    public enum TrustState: String, CustomStringConvertible, Codable {
        case creating = "Creating"
        case created = "Created"
        case verifying = "Verifying"
        case verifyfailed = "VerifyFailed"
        case verified = "Verified"
        case deleting = "Deleting"
        case deleted = "Deleted"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct DescribeEventTopicsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "EventTopics", required: false, type: .list)
        ]
        /// A list of SNS topic names that receive status messages from the specified Directory ID.
        public let eventTopics: [EventTopic]?

        public init(eventTopics: [EventTopic]? = nil) {
            self.eventTopics = eventTopics
        }

        private enum CodingKeys: String, CodingKey {
            case eventTopics = "EventTopics"
        }
    }

    public struct DescribeEventTopicsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicNames", required: false, type: .list), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string)
        ]
        /// A list of SNS topic names for which to obtain the information. If this member is null, all associations for the specified Directory ID are returned. An empty list results in an InvalidParameterException being thrown.
        public let topicNames: [String]?
        /// The Directory ID for which to get the list of associated SNS topics. If this member is null, associations for all Directory IDs are returned.
        public let directoryId: String?

        public init(topicNames: [String]? = nil, directoryId: String? = nil) {
            self.topicNames = topicNames
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case topicNames = "TopicNames"
            case directoryId = "DirectoryId"
        }
    }

    public struct ConditionalForwarder: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RemoteDomainName", required: false, type: .string), 
            AWSShapeMember(label: "ReplicationScope", required: false, type: .enum), 
            AWSShapeMember(label: "DnsIpAddrs", required: false, type: .list)
        ]
        /// The fully qualified domain name (FQDN) of the remote domains pointed to by the conditional forwarder.
        public let remoteDomainName: String?
        /// The replication scope of the conditional forwarder. The only allowed value is Domain, which will replicate the conditional forwarder to all of the domain controllers for your AWS directory.
        public let replicationScope: ReplicationScope?
        /// The IP addresses of the remote DNS server associated with RemoteDomainName. This is the IP address of the DNS server that your conditional forwarder points to.
        public let dnsIpAddrs: [String]?

        public init(remoteDomainName: String? = nil, replicationScope: ReplicationScope? = nil, dnsIpAddrs: [String]? = nil) {
            self.remoteDomainName = remoteDomainName
            self.replicationScope = replicationScope
            self.dnsIpAddrs = dnsIpAddrs
        }

        private enum CodingKeys: String, CodingKey {
            case remoteDomainName = "RemoteDomainName"
            case replicationScope = "ReplicationScope"
            case dnsIpAddrs = "DnsIpAddrs"
        }
    }

    public struct DeleteConditionalForwarderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RemoteDomainName", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The fully qualified domain name (FQDN) of the remote domain with which you are deleting the conditional forwarder.
        public let remoteDomainName: String
        /// The directory ID for which you are deleting the conditional forwarder.
        public let directoryId: String

        public init(remoteDomainName: String, directoryId: String) {
            self.remoteDomainName = remoteDomainName
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case remoteDomainName = "RemoteDomainName"
            case directoryId = "DirectoryId"
        }
    }

    public struct DescribeTrustsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "TrustIds", required: false, type: .list), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string)
        ]
        /// The DescribeTrustsResult.NextToken value from a previous call to DescribeTrusts. Pass null if this is the first call.
        public let nextToken: String?
        /// The maximum number of objects to return.
        public let limit: Int32?
        /// A list of identifiers of the trust relationships for which to obtain the information. If this member is null, all trust relationships that belong to the current account are returned. An empty list results in an InvalidParameterException being thrown.
        public let trustIds: [String]?
        /// The Directory ID of the AWS directory that is a part of the requested trust relationship.
        public let directoryId: String?

        public init(nextToken: String? = nil, limit: Int32? = nil, trustIds: [String]? = nil, directoryId: String? = nil) {
            self.nextToken = nextToken
            self.limit = limit
            self.trustIds = trustIds
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case limit = "Limit"
            case trustIds = "TrustIds"
            case directoryId = "DirectoryId"
        }
    }

    public struct ResetUserPasswordRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NewPassword", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "UserName", required: true, type: .string)
        ]
        /// The new password that will be reset.
        public let newPassword: String
        /// Identifier of the AWS Managed Microsoft AD or Simple AD directory in which the user resides.
        public let directoryId: String
        /// The username of the user whose password will be reset.
        public let userName: String

        public init(newPassword: String, directoryId: String, userName: String) {
            self.newPassword = newPassword
            self.directoryId = directoryId
            self.userName = userName
        }

        private enum CodingKeys: String, CodingKey {
            case newPassword = "NewPassword"
            case directoryId = "DirectoryId"
            case userName = "UserName"
        }
    }

    public struct AddIpRoutesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IpRoutes", required: true, type: .list), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "UpdateSecurityGroupForDirectoryControllers", required: false, type: .boolean)
        ]
        /// IP address blocks, using CIDR format, of the traffic to route. This is often the IP address block of the DNS server used for your on-premises domain.
        public let ipRoutes: [IpRoute]
        /// Identifier (ID) of the directory to which to add the address block.
        public let directoryId: String
        /// If set to true, updates the inbound and outbound rules of the security group that has the description: "AWS created security group for directory ID directory controllers." Following are the new rules:  Inbound:   Type: Custom UDP Rule, Protocol: UDP, Range: 88, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 123, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 138, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 389, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 464, Source: 0.0.0.0/0   Type: Custom UDP Rule, Protocol: UDP, Range: 445, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 88, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 135, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 445, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 464, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 636, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 1024-65535, Source: 0.0.0.0/0   Type: Custom TCP Rule, Protocol: TCP, Range: 3268-33269, Source: 0.0.0.0/0   Type: DNS (UDP), Protocol: UDP, Range: 53, Source: 0.0.0.0/0   Type: DNS (TCP), Protocol: TCP, Range: 53, Source: 0.0.0.0/0   Type: LDAP, Protocol: TCP, Range: 389, Source: 0.0.0.0/0   Type: All ICMP, Protocol: All, Range: N/A, Source: 0.0.0.0/0    Outbound:   Type: All traffic, Protocol: All, Range: All, Destination: 0.0.0.0/0   These security rules impact an internal network interface that is not exposed publicly.
        public let updateSecurityGroupForDirectoryControllers: Bool?

        public init(ipRoutes: [IpRoute], directoryId: String, updateSecurityGroupForDirectoryControllers: Bool? = nil) {
            self.ipRoutes = ipRoutes
            self.directoryId = directoryId
            self.updateSecurityGroupForDirectoryControllers = updateSecurityGroupForDirectoryControllers
        }

        private enum CodingKeys: String, CodingKey {
            case ipRoutes = "IpRoutes"
            case directoryId = "DirectoryId"
            case updateSecurityGroupForDirectoryControllers = "UpdateSecurityGroupForDirectoryControllers"
        }
    }

    public struct EnableSsoRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserName", required: false, type: .string), 
            AWSShapeMember(label: "Password", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The username of an alternate account to use to enable single-sign on. This is only used for AD Connector directories. This account must have privileges to add a service principal name. If the AD Connector service account does not have privileges to add a service principal name, you can specify an alternate account with the UserName and Password parameters. These credentials are only used to enable single sign-on and are not stored by the service. The AD Connector service account is not changed.
        public let userName: String?
        /// The password of an alternate account to use to enable single-sign on. This is only used for AD Connector directories. For more information, see the UserName parameter.
        public let password: String?
        /// The identifier of the directory for which to enable single-sign on.
        public let directoryId: String

        public init(userName: String? = nil, password: String? = nil, directoryId: String) {
            self.userName = userName
            self.password = password
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case userName = "UserName"
            case password = "Password"
            case directoryId = "DirectoryId"
        }
    }

    public struct UpdateRadiusResult: AWSShape {

    }

    public struct CreateMicrosoftADResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: false, type: .string)
        ]
        /// The identifier of the directory that was created.
        public let directoryId: String?

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
        }
    }

    public struct AddIpRoutesResult: AWSShape {

    }

    public struct DirectoryVpcSettingsDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupId", required: false, type: .string), 
            AWSShapeMember(label: "SubnetIds", required: false, type: .list)
        ]
        /// The list of Availability Zones that the directory is in.
        public let availabilityZones: [String]?
        /// The identifier of the VPC that the directory is in.
        public let vpcId: String?
        /// The domain controller security group identifier for the directory.
        public let securityGroupId: String?
        /// The identifiers of the subnets for the directory servers.
        public let subnetIds: [String]?

        public init(availabilityZones: [String]? = nil, vpcId: String? = nil, securityGroupId: String? = nil, subnetIds: [String]? = nil) {
            self.availabilityZones = availabilityZones
            self.vpcId = vpcId
            self.securityGroupId = securityGroupId
            self.subnetIds = subnetIds
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case vpcId = "VpcId"
            case securityGroupId = "SecurityGroupId"
            case subnetIds = "SubnetIds"
        }
    }

    public struct StartSchemaExtensionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "CreateSnapshotBeforeSchemaExtension", required: true, type: .boolean), 
            AWSShapeMember(label: "Description", required: true, type: .string), 
            AWSShapeMember(label: "LdifContent", required: true, type: .string)
        ]
        /// The identifier of the directory for which the schema extension will be applied to.
        public let directoryId: String
        /// If true, creates a snapshot of the directory before applying the schema extension.
        public let createSnapshotBeforeSchemaExtension: Bool
        /// A description of the schema extension.
        public let description: String
        /// The LDIF file represented as a string. To construct the LdifContent string, precede each line as it would be formatted in an ldif file with \n. See the example request below for more details. The file size can be no larger than 1MB.
        public let ldifContent: String

        public init(directoryId: String, createSnapshotBeforeSchemaExtension: Bool, description: String, ldifContent: String) {
            self.directoryId = directoryId
            self.createSnapshotBeforeSchemaExtension = createSnapshotBeforeSchemaExtension
            self.description = description
            self.ldifContent = ldifContent
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case createSnapshotBeforeSchemaExtension = "CreateSnapshotBeforeSchemaExtension"
            case description = "Description"
            case ldifContent = "LdifContent"
        }
    }

    public struct CreateConditionalForwarderResult: AWSShape {

    }

    public struct RegisterEventTopicResult: AWSShape {

    }

    public struct DescribeDomainControllersResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "DomainControllers", required: false, type: .list)
        ]
        /// If not null, more results are available. Pass this value for the NextToken parameter in a subsequent call to DescribeDomainControllers retrieve the next set of items.
        public let nextToken: String?
        /// List of the DomainController objects that were retrieved.
        public let domainControllers: [DomainController]?

        public init(nextToken: String? = nil, domainControllers: [DomainController]? = nil) {
            self.nextToken = nextToken
            self.domainControllers = domainControllers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case domainControllers = "DomainControllers"
        }
    }

    public struct CreateSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The identifier of the directory of which to take a snapshot.
        public let directoryId: String
        /// The descriptive name to apply to the snapshot.
        public let name: String?

        public init(directoryId: String, name: String? = nil) {
            self.directoryId = directoryId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case name = "Name"
        }
    }

    public struct DescribeConditionalForwardersResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConditionalForwarders", required: false, type: .list)
        ]
        /// The list of conditional forwarders that have been created.
        public let conditionalForwarders: [ConditionalForwarder]?

        public init(conditionalForwarders: [ConditionalForwarder]? = nil) {
            self.conditionalForwarders = conditionalForwarders
        }

        private enum CodingKeys: String, CodingKey {
            case conditionalForwarders = "ConditionalForwarders"
        }
    }

    public struct EventTopic: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "TopicArn", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "TopicName", required: false, type: .string), 
            AWSShapeMember(label: "CreatedDateTime", required: false, type: .timestamp)
        ]
        /// The Directory ID of an AWS Directory Service directory that will publish status messages to an SNS topic.
        public let directoryId: String?
        /// The SNS topic ARN (Amazon Resource Name).
        public let topicArn: String?
        /// The topic registration status.
        public let status: TopicStatus?
        /// The name of an AWS SNS topic the receives status messages from the directory.
        public let topicName: String?
        /// The date and time of when you associated your directory with the SNS topic.
        public let createdDateTime: TimeStamp?

        public init(directoryId: String? = nil, topicArn: String? = nil, status: TopicStatus? = nil, topicName: String? = nil, createdDateTime: TimeStamp? = nil) {
            self.directoryId = directoryId
            self.topicArn = topicArn
            self.status = status
            self.topicName = topicName
            self.createdDateTime = createdDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case topicArn = "TopicArn"
            case status = "Status"
            case topicName = "TopicName"
            case createdDateTime = "CreatedDateTime"
        }
    }

    public struct DeleteTrustRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrustId", required: true, type: .string), 
            AWSShapeMember(label: "DeleteAssociatedConditionalForwarder", required: false, type: .boolean)
        ]
        /// The Trust ID of the trust relationship to be deleted.
        public let trustId: String
        /// Delete a conditional forwarder as part of a DeleteTrustRequest.
        public let deleteAssociatedConditionalForwarder: Bool?

        public init(trustId: String, deleteAssociatedConditionalForwarder: Bool? = nil) {
            self.trustId = trustId
            self.deleteAssociatedConditionalForwarder = deleteAssociatedConditionalForwarder
        }

        private enum CodingKeys: String, CodingKey {
            case trustId = "TrustId"
            case deleteAssociatedConditionalForwarder = "DeleteAssociatedConditionalForwarder"
        }
    }

    public struct EnableRadiusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "RadiusSettings", required: true, type: .structure)
        ]
        /// The identifier of the directory for which to enable MFA.
        public let directoryId: String
        /// A RadiusSettings object that contains information about the RADIUS server.
        public let radiusSettings: RadiusSettings

        public init(directoryId: String, radiusSettings: RadiusSettings) {
            self.directoryId = directoryId
            self.radiusSettings = radiusSettings
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case radiusSettings = "RadiusSettings"
        }
    }

    public struct ListTagsForResourceResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// Reserved for future use.
        public let nextToken: String?
        /// List of tags returned by the ListTagsForResource operation.
        public let tags: [Tag]?

        public init(nextToken: String? = nil, tags: [Tag]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case tags = "Tags"
        }
    }

    public enum SnapshotStatus: String, CustomStringConvertible, Codable {
        case creating = "Creating"
        case completed = "Completed"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct SnapshotLimits: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ManualSnapshotsLimit", required: false, type: .integer), 
            AWSShapeMember(label: "ManualSnapshotsLimitReached", required: false, type: .boolean), 
            AWSShapeMember(label: "ManualSnapshotsCurrentCount", required: false, type: .integer)
        ]
        /// The maximum number of manual snapshots allowed.
        public let manualSnapshotsLimit: Int32?
        /// Indicates if the manual snapshot limit has been reached.
        public let manualSnapshotsLimitReached: Bool?
        /// The current number of manual snapshots of the directory.
        public let manualSnapshotsCurrentCount: Int32?

        public init(manualSnapshotsLimit: Int32? = nil, manualSnapshotsLimitReached: Bool? = nil, manualSnapshotsCurrentCount: Int32? = nil) {
            self.manualSnapshotsLimit = manualSnapshotsLimit
            self.manualSnapshotsLimitReached = manualSnapshotsLimitReached
            self.manualSnapshotsCurrentCount = manualSnapshotsCurrentCount
        }

        private enum CodingKeys: String, CodingKey {
            case manualSnapshotsLimit = "ManualSnapshotsLimit"
            case manualSnapshotsLimitReached = "ManualSnapshotsLimitReached"
            case manualSnapshotsCurrentCount = "ManualSnapshotsCurrentCount"
        }
    }

    public struct IpRoute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "CidrIp", required: false, type: .string)
        ]
        /// Description of the address block.
        public let description: String?
        /// IP address block using CIDR format, for example 10.0.0.0/24. This is often the address block of the DNS server used for your on-premises domain. For a single IP address use a CIDR address block with /32. For example 10.0.0.0/32.
        public let cidrIp: String?

        public init(description: String? = nil, cidrIp: String? = nil) {
            self.description = description
            self.cidrIp = cidrIp
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case cidrIp = "CidrIp"
        }
    }

    public struct RemoveTagsFromResourceResult: AWSShape {

    }

    public struct CreateConditionalForwarderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RemoteDomainName", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "DnsIpAddrs", required: true, type: .list)
        ]
        /// The fully qualified domain name (FQDN) of the remote domain with which you will set up a trust relationship.
        public let remoteDomainName: String
        /// The directory ID of the AWS directory for which you are creating the conditional forwarder.
        public let directoryId: String
        /// The IP addresses of the remote DNS server associated with RemoteDomainName.
        public let dnsIpAddrs: [String]

        public init(remoteDomainName: String, directoryId: String, dnsIpAddrs: [String]) {
            self.remoteDomainName = remoteDomainName
            self.directoryId = directoryId
            self.dnsIpAddrs = dnsIpAddrs
        }

        private enum CodingKeys: String, CodingKey {
            case remoteDomainName = "RemoteDomainName"
            case directoryId = "DirectoryId"
            case dnsIpAddrs = "DnsIpAddrs"
        }
    }

    public enum DirectoryStage: String, CustomStringConvertible, Codable {
        case requested = "Requested"
        case creating = "Creating"
        case created = "Created"
        case active = "Active"
        case inoperable = "Inoperable"
        case impaired = "Impaired"
        case restoring = "Restoring"
        case restorefailed = "RestoreFailed"
        case deleting = "Deleting"
        case deleted = "Deleted"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct SchemaExtensionInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaExtensionId", required: false, type: .string), 
            AWSShapeMember(label: "EndDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SchemaExtensionStatusReason", required: false, type: .string), 
            AWSShapeMember(label: "SchemaExtensionStatus", required: false, type: .enum), 
            AWSShapeMember(label: "StartDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The identifier of the schema extension.
        public let schemaExtensionId: String?
        /// The date and time that the schema extension was completed.
        public let endDateTime: TimeStamp?
        /// The reason for the SchemaExtensionStatus.
        public let schemaExtensionStatusReason: String?
        /// The current status of the schema extension.
        public let schemaExtensionStatus: SchemaExtensionStatus?
        /// The date and time that the schema extension started being applied to the directory.
        public let startDateTime: TimeStamp?
        /// The identifier of the directory to which the schema extension is applied.
        public let directoryId: String?
        /// A description of the schema extension.
        public let description: String?

        public init(schemaExtensionId: String? = nil, endDateTime: TimeStamp? = nil, schemaExtensionStatusReason: String? = nil, schemaExtensionStatus: SchemaExtensionStatus? = nil, startDateTime: TimeStamp? = nil, directoryId: String? = nil, description: String? = nil) {
            self.schemaExtensionId = schemaExtensionId
            self.endDateTime = endDateTime
            self.schemaExtensionStatusReason = schemaExtensionStatusReason
            self.schemaExtensionStatus = schemaExtensionStatus
            self.startDateTime = startDateTime
            self.directoryId = directoryId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case schemaExtensionId = "SchemaExtensionId"
            case endDateTime = "EndDateTime"
            case schemaExtensionStatusReason = "SchemaExtensionStatusReason"
            case schemaExtensionStatus = "SchemaExtensionStatus"
            case startDateTime = "StartDateTime"
            case directoryId = "DirectoryId"
            case description = "Description"
        }
    }

    public struct DeregisterEventTopicResult: AWSShape {

    }

    public struct CreateDirectoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: false, type: .string)
        ]
        /// The identifier of the directory that was created.
        public let directoryId: String?

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
        }
    }

    public struct GetDirectoryLimitsRequest: AWSShape {

    }

    public struct Attribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The name of the attribute.
        public let name: String?
        /// The value of the attribute.
        public let value: String?

        public init(name: String? = nil, value: String? = nil) {
            self.name = name
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case value = "Value"
        }
    }

    public struct DirectoryLimits: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudOnlyDirectoriesLimitReached", required: false, type: .boolean), 
            AWSShapeMember(label: "ConnectedDirectoriesLimit", required: false, type: .integer), 
            AWSShapeMember(label: "CloudOnlyMicrosoftADLimitReached", required: false, type: .boolean), 
            AWSShapeMember(label: "ConnectedDirectoriesCurrentCount", required: false, type: .integer), 
            AWSShapeMember(label: "CloudOnlyMicrosoftADLimit", required: false, type: .integer), 
            AWSShapeMember(label: "CloudOnlyDirectoriesLimit", required: false, type: .integer), 
            AWSShapeMember(label: "CloudOnlyMicrosoftADCurrentCount", required: false, type: .integer), 
            AWSShapeMember(label: "CloudOnlyDirectoriesCurrentCount", required: false, type: .integer), 
            AWSShapeMember(label: "ConnectedDirectoriesLimitReached", required: false, type: .boolean)
        ]
        /// Indicates if the cloud directory limit has been reached.
        public let cloudOnlyDirectoriesLimitReached: Bool?
        /// The maximum number of connected directories allowed in the region.
        public let connectedDirectoriesLimit: Int32?
        /// Indicates if the Microsoft AD directory limit has been reached.
        public let cloudOnlyMicrosoftADLimitReached: Bool?
        /// The current number of connected directories in the region.
        public let connectedDirectoriesCurrentCount: Int32?
        /// The maximum number of Microsoft AD directories allowed in the region.
        public let cloudOnlyMicrosoftADLimit: Int32?
        /// The maximum number of cloud directories allowed in the region.
        public let cloudOnlyDirectoriesLimit: Int32?
        /// The current number of Microsoft AD directories in the region.
        public let cloudOnlyMicrosoftADCurrentCount: Int32?
        /// The current number of cloud directories in the region.
        public let cloudOnlyDirectoriesCurrentCount: Int32?
        /// Indicates if the connected directory limit has been reached.
        public let connectedDirectoriesLimitReached: Bool?

        public init(cloudOnlyDirectoriesLimitReached: Bool? = nil, connectedDirectoriesLimit: Int32? = nil, cloudOnlyMicrosoftADLimitReached: Bool? = nil, connectedDirectoriesCurrentCount: Int32? = nil, cloudOnlyMicrosoftADLimit: Int32? = nil, cloudOnlyDirectoriesLimit: Int32? = nil, cloudOnlyMicrosoftADCurrentCount: Int32? = nil, cloudOnlyDirectoriesCurrentCount: Int32? = nil, connectedDirectoriesLimitReached: Bool? = nil) {
            self.cloudOnlyDirectoriesLimitReached = cloudOnlyDirectoriesLimitReached
            self.connectedDirectoriesLimit = connectedDirectoriesLimit
            self.cloudOnlyMicrosoftADLimitReached = cloudOnlyMicrosoftADLimitReached
            self.connectedDirectoriesCurrentCount = connectedDirectoriesCurrentCount
            self.cloudOnlyMicrosoftADLimit = cloudOnlyMicrosoftADLimit
            self.cloudOnlyDirectoriesLimit = cloudOnlyDirectoriesLimit
            self.cloudOnlyMicrosoftADCurrentCount = cloudOnlyMicrosoftADCurrentCount
            self.cloudOnlyDirectoriesCurrentCount = cloudOnlyDirectoriesCurrentCount
            self.connectedDirectoriesLimitReached = connectedDirectoriesLimitReached
        }

        private enum CodingKeys: String, CodingKey {
            case cloudOnlyDirectoriesLimitReached = "CloudOnlyDirectoriesLimitReached"
            case connectedDirectoriesLimit = "ConnectedDirectoriesLimit"
            case cloudOnlyMicrosoftADLimitReached = "CloudOnlyMicrosoftADLimitReached"
            case connectedDirectoriesCurrentCount = "ConnectedDirectoriesCurrentCount"
            case cloudOnlyMicrosoftADLimit = "CloudOnlyMicrosoftADLimit"
            case cloudOnlyDirectoriesLimit = "CloudOnlyDirectoriesLimit"
            case cloudOnlyMicrosoftADCurrentCount = "CloudOnlyMicrosoftADCurrentCount"
            case cloudOnlyDirectoriesCurrentCount = "CloudOnlyDirectoriesCurrentCount"
            case connectedDirectoriesLimitReached = "ConnectedDirectoriesLimitReached"
        }
    }

    public struct ListSchemaExtensionsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SchemaExtensionsInfo", required: false, type: .list)
        ]
        /// If not null, more results are available. Pass this value for the NextToken parameter in a subsequent call to ListSchemaExtensions to retrieve the next set of items.
        public let nextToken: String?
        /// Information about the schema extensions applied to the directory.
        public let schemaExtensionsInfo: [SchemaExtensionInfo]?

        public init(nextToken: String? = nil, schemaExtensionsInfo: [SchemaExtensionInfo]? = nil) {
            self.nextToken = nextToken
            self.schemaExtensionsInfo = schemaExtensionsInfo
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case schemaExtensionsInfo = "SchemaExtensionsInfo"
        }
    }

    public struct EnableSsoResult: AWSShape {

    }

    public struct DeleteTrustResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrustId", required: false, type: .string)
        ]
        /// The Trust ID of the trust relationship that was deleted.
        public let trustId: String?

        public init(trustId: String? = nil) {
            self.trustId = trustId
        }

        private enum CodingKeys: String, CodingKey {
            case trustId = "TrustId"
        }
    }

    public struct UpdateConditionalForwarderRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RemoteDomainName", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "DnsIpAddrs", required: true, type: .list)
        ]
        /// The fully qualified domain name (FQDN) of the remote domain with which you will set up a trust relationship.
        public let remoteDomainName: String
        /// The directory ID of the AWS directory for which to update the conditional forwarder.
        public let directoryId: String
        /// The updated IP addresses of the remote DNS server associated with the conditional forwarder.
        public let dnsIpAddrs: [String]

        public init(remoteDomainName: String, directoryId: String, dnsIpAddrs: [String]) {
            self.remoteDomainName = remoteDomainName
            self.directoryId = directoryId
            self.dnsIpAddrs = dnsIpAddrs
        }

        private enum CodingKeys: String, CodingKey {
            case remoteDomainName = "RemoteDomainName"
            case directoryId = "DirectoryId"
            case dnsIpAddrs = "DnsIpAddrs"
        }
    }

    public struct Snapshot: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "SnapshotId", required: false, type: .string), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp)
        ]
        /// The descriptive name of the snapshot.
        public let name: String?
        /// The directory identifier.
        public let directoryId: String?
        /// The snapshot type.
        public let `type`: SnapshotType?
        /// The snapshot status.
        public let status: SnapshotStatus?
        /// The snapshot identifier.
        public let snapshotId: String?
        /// The date and time that the snapshot was taken.
        public let startTime: TimeStamp?

        public init(name: String? = nil, directoryId: String? = nil, type: SnapshotType? = nil, status: SnapshotStatus? = nil, snapshotId: String? = nil, startTime: TimeStamp? = nil) {
            self.name = name
            self.directoryId = directoryId
            self.`type` = `type`
            self.status = status
            self.snapshotId = snapshotId
            self.startTime = startTime
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case directoryId = "DirectoryId"
            case `type` = "Type"
            case status = "Status"
            case snapshotId = "SnapshotId"
            case startTime = "StartTime"
        }
    }

    public struct GetDirectoryLimitsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryLimits", required: false, type: .structure)
        ]
        /// A DirectoryLimits object that contains the directory limits for the current region.
        public let directoryLimits: DirectoryLimits?

        public init(directoryLimits: DirectoryLimits? = nil) {
            self.directoryLimits = directoryLimits
        }

        private enum CodingKeys: String, CodingKey {
            case directoryLimits = "DirectoryLimits"
        }
    }

    public enum SnapshotType: String, CustomStringConvertible, Codable {
        case auto = "Auto"
        case manual = "Manual"
        public var description: String { return self.rawValue }
    }

    public struct ResetUserPasswordResult: AWSShape {

    }

    public enum RadiusAuthenticationProtocol: String, CustomStringConvertible, Codable {
        case pap = "PAP"
        case chap = "CHAP"
        case msChapv1 = "MS-CHAPv1"
        case msChapv2 = "MS-CHAPv2"
        public var description: String { return self.rawValue }
    }

    public struct CreateAliasResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Alias", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string)
        ]
        /// The alias for the directory.
        public let alias: String?
        /// The identifier of the directory.
        public let directoryId: String?

        public init(alias: String? = nil, directoryId: String? = nil) {
            self.alias = alias
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case alias = "Alias"
            case directoryId = "DirectoryId"
        }
    }

    public struct RadiusSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AuthenticationProtocol", required: false, type: .enum), 
            AWSShapeMember(label: "RadiusTimeout", required: false, type: .integer), 
            AWSShapeMember(label: "SharedSecret", required: false, type: .string), 
            AWSShapeMember(label: "UseSameUsername", required: false, type: .boolean), 
            AWSShapeMember(label: "RadiusServers", required: false, type: .list), 
            AWSShapeMember(label: "RadiusPort", required: false, type: .integer), 
            AWSShapeMember(label: "RadiusRetries", required: false, type: .integer), 
            AWSShapeMember(label: "DisplayLabel", required: false, type: .string)
        ]
        /// The protocol specified for your RADIUS endpoints.
        public let authenticationProtocol: RadiusAuthenticationProtocol?
        /// The amount of time, in seconds, to wait for the RADIUS server to respond.
        public let radiusTimeout: Int32?
        /// Not currently used.
        public let sharedSecret: String?
        /// Not currently used.
        public let useSameUsername: Bool?
        /// An array of strings that contains the IP addresses of the RADIUS server endpoints, or the IP addresses of your RADIUS server load balancer.
        public let radiusServers: [String]?
        /// The port that your RADIUS server is using for communications. Your on-premises network must allow inbound traffic over this port from the AWS Directory Service servers.
        public let radiusPort: Int32?
        /// The maximum number of times that communication with the RADIUS server is attempted.
        public let radiusRetries: Int32?
        /// Not currently used.
        public let displayLabel: String?

        public init(authenticationProtocol: RadiusAuthenticationProtocol? = nil, radiusTimeout: Int32? = nil, sharedSecret: String? = nil, useSameUsername: Bool? = nil, radiusServers: [String]? = nil, radiusPort: Int32? = nil, radiusRetries: Int32? = nil, displayLabel: String? = nil) {
            self.authenticationProtocol = authenticationProtocol
            self.radiusTimeout = radiusTimeout
            self.sharedSecret = sharedSecret
            self.useSameUsername = useSameUsername
            self.radiusServers = radiusServers
            self.radiusPort = radiusPort
            self.radiusRetries = radiusRetries
            self.displayLabel = displayLabel
        }

        private enum CodingKeys: String, CodingKey {
            case authenticationProtocol = "AuthenticationProtocol"
            case radiusTimeout = "RadiusTimeout"
            case sharedSecret = "SharedSecret"
            case useSameUsername = "UseSameUsername"
            case radiusServers = "RadiusServers"
            case radiusPort = "RadiusPort"
            case radiusRetries = "RadiusRetries"
            case displayLabel = "DisplayLabel"
        }
    }

    public struct CreateAliasRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Alias", required: true, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The requested alias. The alias must be unique amongst all aliases in AWS. This operation throws an EntityAlreadyExistsException error if the alias already exists.
        public let alias: String
        /// The identifier of the directory for which to create the alias.
        public let directoryId: String

        public init(alias: String, directoryId: String) {
            self.alias = alias
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case alias = "Alias"
            case directoryId = "DirectoryId"
        }
    }

    public struct RegisterEventTopicRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "TopicName", required: true, type: .string)
        ]
        /// The Directory ID that will publish status messages to the SNS topic.
        public let directoryId: String
        /// The SNS topic name to which the directory will publish status messages. This SNS topic must be in the same region as the specified Directory ID.
        public let topicName: String

        public init(directoryId: String, topicName: String) {
            self.directoryId = directoryId
            self.topicName = topicName
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case topicName = "TopicName"
        }
    }

    public struct RemoveIpRoutesResult: AWSShape {

    }

    public struct VerifyTrustResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrustId", required: false, type: .string)
        ]
        /// The unique Trust ID of the trust relationship that was verified.
        public let trustId: String?

        public init(trustId: String? = nil) {
            self.trustId = trustId
        }

        private enum CodingKeys: String, CodingKey {
            case trustId = "TrustId"
        }
    }

    public enum SchemaExtensionStatus: String, CustomStringConvertible, Codable {
        case initializing = "Initializing"
        case creatingsnapshot = "CreatingSnapshot"
        case updatingschema = "UpdatingSchema"
        case replicating = "Replicating"
        case cancelinprogress = "CancelInProgress"
        case rollbackinprogress = "RollbackInProgress"
        case cancelled = "Cancelled"
        case failed = "Failed"
        case completed = "Completed"
        public var description: String { return self.rawValue }
    }

    public enum ReplicationScope: String, CustomStringConvertible, Codable {
        case domain = "Domain"
        public var description: String { return self.rawValue }
    }

    public struct RestoreFromSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: true, type: .string)
        ]
        /// The identifier of the snapshot to restore from.
        public let snapshotId: String

        public init(snapshotId: String) {
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
        }
    }

    public struct CreateSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: false, type: .string)
        ]
        /// The identifier of the snapshot that was created.
        public let snapshotId: String?

        public init(snapshotId: String? = nil) {
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
        }
    }

    public struct CreateComputerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "ComputerName", required: true, type: .string), 
            AWSShapeMember(label: "ComputerAttributes", required: false, type: .list), 
            AWSShapeMember(label: "OrganizationalUnitDistinguishedName", required: false, type: .string), 
            AWSShapeMember(label: "Password", required: true, type: .string)
        ]
        /// The identifier of the directory in which to create the computer account.
        public let directoryId: String
        /// The name of the computer account.
        public let computerName: String
        /// An array of Attribute objects that contain any LDAP attributes to apply to the computer account.
        public let computerAttributes: [Attribute]?
        /// The fully-qualified distinguished name of the organizational unit to place the computer account in.
        public let organizationalUnitDistinguishedName: String?
        /// A one-time password that is used to join the computer to the directory. You should generate a random, strong password to use for this parameter.
        public let password: String

        public init(directoryId: String, computerName: String, computerAttributes: [Attribute]? = nil, organizationalUnitDistinguishedName: String? = nil, password: String) {
            self.directoryId = directoryId
            self.computerName = computerName
            self.computerAttributes = computerAttributes
            self.organizationalUnitDistinguishedName = organizationalUnitDistinguishedName
            self.password = password
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case computerName = "ComputerName"
            case computerAttributes = "ComputerAttributes"
            case organizationalUnitDistinguishedName = "OrganizationalUnitDistinguishedName"
            case password = "Password"
        }
    }

    public struct ConnectDirectoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: false, type: .string)
        ]
        /// The identifier of the new directory.
        public let directoryId: String?

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
        }
    }

    public struct Trust: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrustStateReason", required: false, type: .string), 
            AWSShapeMember(label: "StateLastUpdatedDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreatedDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "TrustDirection", required: false, type: .enum), 
            AWSShapeMember(label: "RemoteDomainName", required: false, type: .string), 
            AWSShapeMember(label: "TrustId", required: false, type: .string), 
            AWSShapeMember(label: "TrustType", required: false, type: .enum), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "TrustState", required: false, type: .enum), 
            AWSShapeMember(label: "LastUpdatedDateTime", required: false, type: .timestamp)
        ]
        /// The reason for the TrustState.
        public let trustStateReason: String?
        /// The date and time that the TrustState was last updated.
        public let stateLastUpdatedDateTime: TimeStamp?
        /// The date and time that the trust relationship was created.
        public let createdDateTime: TimeStamp?
        /// The trust relationship direction.
        public let trustDirection: TrustDirection?
        /// The Fully Qualified Domain Name (FQDN) of the external domain involved in the trust relationship.
        public let remoteDomainName: String?
        /// The unique ID of the trust relationship.
        public let trustId: String?
        /// The trust relationship type.
        public let trustType: TrustType?
        /// The Directory ID of the AWS directory involved in the trust relationship.
        public let directoryId: String?
        /// The trust relationship state.
        public let trustState: TrustState?
        /// The date and time that the trust relationship was last updated.
        public let lastUpdatedDateTime: TimeStamp?

        public init(trustStateReason: String? = nil, stateLastUpdatedDateTime: TimeStamp? = nil, createdDateTime: TimeStamp? = nil, trustDirection: TrustDirection? = nil, remoteDomainName: String? = nil, trustId: String? = nil, trustType: TrustType? = nil, directoryId: String? = nil, trustState: TrustState? = nil, lastUpdatedDateTime: TimeStamp? = nil) {
            self.trustStateReason = trustStateReason
            self.stateLastUpdatedDateTime = stateLastUpdatedDateTime
            self.createdDateTime = createdDateTime
            self.trustDirection = trustDirection
            self.remoteDomainName = remoteDomainName
            self.trustId = trustId
            self.trustType = trustType
            self.directoryId = directoryId
            self.trustState = trustState
            self.lastUpdatedDateTime = lastUpdatedDateTime
        }

        private enum CodingKeys: String, CodingKey {
            case trustStateReason = "TrustStateReason"
            case stateLastUpdatedDateTime = "StateLastUpdatedDateTime"
            case createdDateTime = "CreatedDateTime"
            case trustDirection = "TrustDirection"
            case remoteDomainName = "RemoteDomainName"
            case trustId = "TrustId"
            case trustType = "TrustType"
            case directoryId = "DirectoryId"
            case trustState = "TrustState"
            case lastUpdatedDateTime = "LastUpdatedDateTime"
        }
    }

    public struct CreateComputerResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Computer", required: false, type: .structure)
        ]
        /// A Computer object that represents the computer account.
        public let computer: Computer?

        public init(computer: Computer? = nil) {
            self.computer = computer
        }

        private enum CodingKeys: String, CodingKey {
            case computer = "Computer"
        }
    }

    public struct DirectoryConnectSettingsDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConnectIps", required: false, type: .list), 
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "CustomerUserName", required: false, type: .string), 
            AWSShapeMember(label: "SubnetIds", required: false, type: .list), 
            AWSShapeMember(label: "SecurityGroupId", required: false, type: .string)
        ]
        /// The IP addresses of the AD Connector servers.
        public let connectIps: [String]?
        /// A list of the Availability Zones that the directory is in.
        public let availabilityZones: [String]?
        /// The identifier of the VPC that the AD Connector is in.
        public let vpcId: String?
        /// The username of the service account in the on-premises directory.
        public let customerUserName: String?
        /// A list of subnet identifiers in the VPC that the AD connector is in.
        public let subnetIds: [String]?
        /// The security group identifier for the AD Connector directory.
        public let securityGroupId: String?

        public init(connectIps: [String]? = nil, availabilityZones: [String]? = nil, vpcId: String? = nil, customerUserName: String? = nil, subnetIds: [String]? = nil, securityGroupId: String? = nil) {
            self.connectIps = connectIps
            self.availabilityZones = availabilityZones
            self.vpcId = vpcId
            self.customerUserName = customerUserName
            self.subnetIds = subnetIds
            self.securityGroupId = securityGroupId
        }

        private enum CodingKeys: String, CodingKey {
            case connectIps = "ConnectIps"
            case availabilityZones = "AvailabilityZones"
            case vpcId = "VpcId"
            case customerUserName = "CustomerUserName"
            case subnetIds = "SubnetIds"
            case securityGroupId = "SecurityGroupId"
        }
    }

    public struct DisableSsoResult: AWSShape {

    }

    public struct DeleteDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The identifier of the directory to delete.
        public let directoryId: String

        public init(directoryId: String) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
        }
    }

    public struct DisableRadiusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The identifier of the directory for which to disable MFA.
        public let directoryId: String

        public init(directoryId: String) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
        }
    }

    public struct StartSchemaExtensionResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SchemaExtensionId", required: false, type: .string)
        ]
        /// The identifier of the schema extension that will be applied.
        public let schemaExtensionId: String?

        public init(schemaExtensionId: String? = nil) {
            self.schemaExtensionId = schemaExtensionId
        }

        private enum CodingKeys: String, CodingKey {
            case schemaExtensionId = "SchemaExtensionId"
        }
    }

    public struct ListIpRoutesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The ListIpRoutes.NextToken value from a previous call to ListIpRoutes. Pass null if this is the first call.
        public let nextToken: String?
        /// Maximum number of items to return. If this value is zero, the maximum number of items is specified by the limitations of the operation.
        public let limit: Int32?
        /// Identifier (ID) of the directory for which you want to retrieve the IP addresses.
        public let directoryId: String

        public init(nextToken: String? = nil, limit: Int32? = nil, directoryId: String) {
            self.nextToken = nextToken
            self.limit = limit
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case limit = "Limit"
            case directoryId = "DirectoryId"
        }
    }

    public struct UpdateNumberOfDomainControllersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DesiredNumber", required: true, type: .integer), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The number of domain controllers desired in the directory.
        public let desiredNumber: Int32
        /// Identifier of the directory to which the domain controllers will be added or removed.
        public let directoryId: String

        public init(desiredNumber: Int32, directoryId: String) {
            self.desiredNumber = desiredNumber
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case desiredNumber = "DesiredNumber"
            case directoryId = "DirectoryId"
        }
    }

    public enum TrustDirection: String, CustomStringConvertible, Codable {
        case oneWayOutgoing = "One-Way: Outgoing"
        case oneWayIncoming = "One-Way: Incoming"
        case twoWay = "Two-Way"
        public var description: String { return self.rawValue }
    }

    public enum DirectoryEdition: String, CustomStringConvertible, Codable {
        case enterprise = "Enterprise"
        case standard = "Standard"
        public var description: String { return self.rawValue }
    }

    public struct RemoveTagsFromResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// Identifier (ID) of the directory from which to remove the tag.
        public let resourceId: String
        /// The tag key (name) of the tag to be removed.
        public let tagKeys: [String]

        public init(resourceId: String, tagKeys: [String]) {
            self.resourceId = resourceId
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tagKeys = "TagKeys"
        }
    }

    public enum RadiusStatus: String, CustomStringConvertible, Codable {
        case creating = "Creating"
        case completed = "Completed"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public struct Computer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ComputerName", required: false, type: .string), 
            AWSShapeMember(label: "ComputerId", required: false, type: .string), 
            AWSShapeMember(label: "ComputerAttributes", required: false, type: .list)
        ]
        /// The computer name.
        public let computerName: String?
        /// The identifier of the computer.
        public let computerId: String?
        /// An array of Attribute objects containing the LDAP attributes that belong to the computer account.
        public let computerAttributes: [Attribute]?

        public init(computerName: String? = nil, computerId: String? = nil, computerAttributes: [Attribute]? = nil) {
            self.computerName = computerName
            self.computerId = computerId
            self.computerAttributes = computerAttributes
        }

        private enum CodingKeys: String, CodingKey {
            case computerName = "ComputerName"
            case computerId = "ComputerId"
            case computerAttributes = "ComputerAttributes"
        }
    }

    public struct CreateDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "VpcSettings", required: false, type: .structure), 
            AWSShapeMember(label: "ShortName", required: false, type: .string), 
            AWSShapeMember(label: "Size", required: true, type: .enum), 
            AWSShapeMember(label: "Password", required: true, type: .string)
        ]
        /// The fully qualified name for the directory, such as corp.example.com.
        public let name: String
        /// A textual description for the directory.
        public let description: String?
        /// A DirectoryVpcSettings object that contains additional information for the operation.
        public let vpcSettings: DirectoryVpcSettings?
        /// The short name of the directory, such as CORP.
        public let shortName: String?
        /// The size of the directory.
        public let size: DirectorySize
        /// The password for the directory administrator. The directory creation process creates a directory administrator account with the username Administrator and this password.
        public let password: String

        public init(name: String, description: String? = nil, vpcSettings: DirectoryVpcSettings? = nil, shortName: String? = nil, size: DirectorySize, password: String) {
            self.name = name
            self.description = description
            self.vpcSettings = vpcSettings
            self.shortName = shortName
            self.size = size
            self.password = password
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case description = "Description"
            case vpcSettings = "VpcSettings"
            case shortName = "ShortName"
            case size = "Size"
            case password = "Password"
        }
    }

    public struct DescribeConditionalForwardersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "RemoteDomainNames", required: false, type: .list)
        ]
        /// The directory ID for which to get the list of associated conditional forwarders.
        public let directoryId: String
        /// The fully qualified domain names (FQDN) of the remote domains for which to get the list of associated conditional forwarders. If this member is null, all conditional forwarders are returned.
        public let remoteDomainNames: [String]?

        public init(directoryId: String, remoteDomainNames: [String]? = nil) {
            self.directoryId = directoryId
            self.remoteDomainNames = remoteDomainNames
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case remoteDomainNames = "RemoteDomainNames"
        }
    }

    public struct ListSchemaExtensionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The ListSchemaExtensions.NextToken value from a previous call to ListSchemaExtensions. Pass null if this is the first call.
        public let nextToken: String?
        /// The maximum number of items to return.
        public let limit: Int32?
        /// The identifier of the directory from which to retrieve the schema extension information.
        public let directoryId: String

        public init(nextToken: String? = nil, limit: Int32? = nil, directoryId: String) {
            self.nextToken = nextToken
            self.limit = limit
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case limit = "Limit"
            case directoryId = "DirectoryId"
        }
    }

    public struct UpdateRadiusRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "RadiusSettings", required: true, type: .structure)
        ]
        /// The identifier of the directory for which to update the RADIUS server information.
        public let directoryId: String
        /// A RadiusSettings object that contains information about the RADIUS server.
        public let radiusSettings: RadiusSettings

        public init(directoryId: String, radiusSettings: RadiusSettings) {
            self.directoryId = directoryId
            self.radiusSettings = radiusSettings
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case radiusSettings = "RadiusSettings"
        }
    }

    public struct CancelSchemaExtensionResult: AWSShape {

    }

    public struct DeregisterEventTopicRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "TopicName", required: true, type: .string)
        ]
        /// The Directory ID to remove as a publisher. This directory will no longer send messages to the specified SNS topic.
        public let directoryId: String
        /// The name of the SNS topic from which to remove the directory as a publisher.
        public let topicName: String

        public init(directoryId: String, topicName: String) {
            self.directoryId = directoryId
            self.topicName = topicName
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case topicName = "TopicName"
        }
    }

    public struct GetSnapshotLimitsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotLimits", required: false, type: .structure)
        ]
        /// A SnapshotLimits object that contains the manual snapshot limits for the specified directory.
        public let snapshotLimits: SnapshotLimits?

        public init(snapshotLimits: SnapshotLimits? = nil) {
            self.snapshotLimits = snapshotLimits
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotLimits = "SnapshotLimits"
        }
    }

    public struct GetSnapshotLimitsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// Contains the identifier of the directory to obtain the limits for.
        public let directoryId: String

        public init(directoryId: String) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
        }
    }

    public struct DescribeSnapshotsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SnapshotIds", required: false, type: .list), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string)
        ]
        /// The DescribeSnapshotsResult.NextToken value from a previous call to DescribeSnapshots. Pass null if this is the first call.
        public let nextToken: String?
        /// A list of identifiers of the snapshots to obtain the information for. If this member is null or empty, all snapshots are returned using the Limit and NextToken members.
        public let snapshotIds: [String]?
        /// The maximum number of objects to return.
        public let limit: Int32?
        /// The identifier of the directory for which to retrieve snapshot information.
        public let directoryId: String?

        public init(nextToken: String? = nil, snapshotIds: [String]? = nil, limit: Int32? = nil, directoryId: String? = nil) {
            self.nextToken = nextToken
            self.snapshotIds = snapshotIds
            self.limit = limit
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case snapshotIds = "SnapshotIds"
            case limit = "Limit"
            case directoryId = "DirectoryId"
        }
    }

    public struct DeleteSnapshotResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: false, type: .string)
        ]
        /// The identifier of the directory snapshot that was deleted.
        public let snapshotId: String?

        public init(snapshotId: String? = nil) {
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
        }
    }

    public struct UpdateConditionalForwarderResult: AWSShape {

    }

    public struct DeleteDirectoryResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: false, type: .string)
        ]
        /// The directory identifier.
        public let directoryId: String?

        public init(directoryId: String? = nil) {
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
        }
    }

    public enum DirectorySize: String, CustomStringConvertible, Codable {
        case small = "Small"
        case large = "Large"
        public var description: String { return self.rawValue }
    }

    public struct UpdateNumberOfDomainControllersResult: AWSShape {

    }

    public struct DescribeSnapshotsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Snapshots", required: false, type: .list)
        ]
        /// If not null, more results are available. Pass this value in the NextToken member of a subsequent call to DescribeSnapshots.
        public let nextToken: String?
        /// The list of Snapshot objects that were retrieved. It is possible that this list contains less than the number of items specified in the Limit member of the request. This occurs if there are less than the requested number of items left to retrieve, or if the limitations of the operation have been exceeded.
        public let snapshots: [Snapshot]?

        public init(nextToken: String? = nil, snapshots: [Snapshot]? = nil) {
            self.nextToken = nextToken
            self.snapshots = snapshots
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case snapshots = "Snapshots"
        }
    }

    public struct DisableSsoRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UserName", required: false, type: .string), 
            AWSShapeMember(label: "Password", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The username of an alternate account to use to disable single-sign on. This is only used for AD Connector directories. This account must have privileges to remove a service principal name. If the AD Connector service account does not have privileges to remove a service principal name, you can specify an alternate account with the UserName and Password parameters. These credentials are only used to disable single sign-on and are not stored by the service. The AD Connector service account is not changed.
        public let userName: String?
        /// The password of an alternate account to use to disable single-sign on. This is only used for AD Connector directories. For more information, see the UserName parameter.
        public let password: String?
        /// The identifier of the directory for which to disable single-sign on.
        public let directoryId: String

        public init(userName: String? = nil, password: String? = nil, directoryId: String) {
            self.userName = userName
            self.password = password
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case userName = "UserName"
            case password = "Password"
            case directoryId = "DirectoryId"
        }
    }

    public enum IpRouteStatusMsg: String, CustomStringConvertible, Codable {
        case adding = "Adding"
        case added = "Added"
        case removing = "Removing"
        case removed = "Removed"
        case addfailed = "AddFailed"
        case removefailed = "RemoveFailed"
        public var description: String { return self.rawValue }
    }

    public struct EnableRadiusResult: AWSShape {

    }

    public struct RemoveIpRoutesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "CidrIps", required: true, type: .list)
        ]
        /// Identifier (ID) of the directory from which you want to remove the IP addresses.
        public let directoryId: String
        /// IP address blocks that you want to remove.
        public let cidrIps: [String]

        public init(directoryId: String, cidrIps: [String]) {
            self.directoryId = directoryId
            self.cidrIps = cidrIps
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case cidrIps = "CidrIps"
        }
    }

    public struct CreateTrustResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrustId", required: false, type: .string)
        ]
        /// A unique identifier for the trust relationship that was created.
        public let trustId: String?

        public init(trustId: String? = nil) {
            self.trustId = trustId
        }

        private enum CodingKeys: String, CodingKey {
            case trustId = "TrustId"
        }
    }

    public struct ListIpRoutesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "IpRoutesInfo", required: false, type: .list)
        ]
        /// If not null, more results are available. Pass this value for the NextToken parameter in a subsequent call to ListIpRoutes to retrieve the next set of items.
        public let nextToken: String?
        /// A list of IpRoutes.
        public let ipRoutesInfo: [IpRouteInfo]?

        public init(nextToken: String? = nil, ipRoutesInfo: [IpRouteInfo]? = nil) {
            self.nextToken = nextToken
            self.ipRoutesInfo = ipRoutesInfo
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case ipRoutesInfo = "IpRoutesInfo"
        }
    }

    public struct VerifyTrustRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrustId", required: true, type: .string)
        ]
        /// The unique Trust ID of the trust relationship to verify.
        public let trustId: String

        public init(trustId: String) {
            self.trustId = trustId
        }

        private enum CodingKeys: String, CodingKey {
            case trustId = "TrustId"
        }
    }

    public struct CancelSchemaExtensionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "SchemaExtensionId", required: true, type: .string)
        ]
        /// The identifier of the directory whose schema extension will be canceled.
        public let directoryId: String
        /// The identifier of the schema extension that will be canceled.
        public let schemaExtensionId: String

        public init(directoryId: String, schemaExtensionId: String) {
            self.directoryId = directoryId
            self.schemaExtensionId = schemaExtensionId
        }

        private enum CodingKeys: String, CodingKey {
            case directoryId = "DirectoryId"
            case schemaExtensionId = "SchemaExtensionId"
        }
    }

    public struct RestoreFromSnapshotResult: AWSShape {

    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]
        /// Required name of the tag. The string value can be Unicode characters and cannot be prefixed with "aws:". The string can contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public let key: String
        /// The optional value of the tag. The string value can be Unicode characters. The string can contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct CreateMicrosoftADRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "ShortName", required: false, type: .string), 
            AWSShapeMember(label: "VpcSettings", required: true, type: .structure), 
            AWSShapeMember(label: "Edition", required: false, type: .enum), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Password", required: true, type: .string)
        ]
        /// The fully qualified domain name for the directory, such as corp.example.com. This name will resolve inside your VPC only. It does not need to be publicly resolvable.
        public let name: String
        /// The NetBIOS name for your domain. A short identifier for your domain, such as CORP. If you don't specify a NetBIOS name, it will default to the first part of your directory DNS. For example, CORP for the directory DNS corp.example.com. 
        public let shortName: String?
        /// Contains VPC information for the CreateDirectory or CreateMicrosoftAD operation.
        public let vpcSettings: DirectoryVpcSettings
        /// AWS Microsoft AD is available in two editions: Standard and Enterprise. Enterprise is the default.
        public let edition: DirectoryEdition?
        /// A textual description for the directory. This label will appear on the AWS console Directory Details page after the directory is created.
        public let description: String?
        /// The password for the default administrative user named Admin.
        public let password: String

        public init(name: String, shortName: String? = nil, vpcSettings: DirectoryVpcSettings, edition: DirectoryEdition? = nil, description: String? = nil, password: String) {
            self.name = name
            self.shortName = shortName
            self.vpcSettings = vpcSettings
            self.edition = edition
            self.description = description
            self.password = password
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case shortName = "ShortName"
            case vpcSettings = "VpcSettings"
            case edition = "Edition"
            case description = "Description"
            case password = "Password"
        }
    }

    public struct IpRouteInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IpRouteStatusMsg", required: false, type: .enum), 
            AWSShapeMember(label: "CidrIp", required: false, type: .string), 
            AWSShapeMember(label: "AddedDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "IpRouteStatusReason", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string)
        ]
        /// The status of the IP address block.
        public let ipRouteStatusMsg: IpRouteStatusMsg?
        /// IP address block in the IpRoute.
        public let cidrIp: String?
        /// The date and time the address block was added to the directory.
        public let addedDateTime: TimeStamp?
        /// The reason for the IpRouteStatusMsg.
        public let ipRouteStatusReason: String?
        /// Description of the IpRouteInfo.
        public let description: String?
        /// Identifier (ID) of the directory associated with the IP addresses.
        public let directoryId: String?

        public init(ipRouteStatusMsg: IpRouteStatusMsg? = nil, cidrIp: String? = nil, addedDateTime: TimeStamp? = nil, ipRouteStatusReason: String? = nil, description: String? = nil, directoryId: String? = nil) {
            self.ipRouteStatusMsg = ipRouteStatusMsg
            self.cidrIp = cidrIp
            self.addedDateTime = addedDateTime
            self.ipRouteStatusReason = ipRouteStatusReason
            self.description = description
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case ipRouteStatusMsg = "IpRouteStatusMsg"
            case cidrIp = "CidrIp"
            case addedDateTime = "AddedDateTime"
            case ipRouteStatusReason = "IpRouteStatusReason"
            case description = "Description"
            case directoryId = "DirectoryId"
        }
    }

    public struct DescribeDomainControllersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "DomainControllerIds", required: false, type: .list), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string)
        ]
        /// The DescribeDomainControllers.NextToken value from a previous call to DescribeDomainControllers. Pass null if this is the first call. 
        public let nextToken: String?
        /// The maximum number of items to return.
        public let limit: Int32?
        /// A list of identifiers for the domain controllers whose information will be provided.
        public let domainControllerIds: [String]?
        /// Identifier of the directory for which to retrieve the domain controller information.
        public let directoryId: String

        public init(nextToken: String? = nil, limit: Int32? = nil, domainControllerIds: [String]? = nil, directoryId: String) {
            self.nextToken = nextToken
            self.limit = limit
            self.domainControllerIds = domainControllerIds
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case limit = "Limit"
            case domainControllerIds = "DomainControllerIds"
            case directoryId = "DirectoryId"
        }
    }

    public struct DirectoryConnectSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CustomerDnsIps", required: true, type: .list), 
            AWSShapeMember(label: "CustomerUserName", required: true, type: .string), 
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "SubnetIds", required: true, type: .list)
        ]
        /// A list of one or more IP addresses of DNS servers or domain controllers in the on-premises directory.
        public let customerDnsIps: [String]
        /// The username of an account in the on-premises directory that is used to connect to the directory. This account must have the following privileges:   Read users and groups   Create computer objects   Join computers to the domain  
        public let customerUserName: String
        /// The identifier of the VPC in which the AD Connector is created.
        public let vpcId: String
        /// A list of subnet identifiers in the VPC in which the AD Connector is created.
        public let subnetIds: [String]

        public init(customerDnsIps: [String], customerUserName: String, vpcId: String, subnetIds: [String]) {
            self.customerDnsIps = customerDnsIps
            self.customerUserName = customerUserName
            self.vpcId = vpcId
            self.subnetIds = subnetIds
        }

        private enum CodingKeys: String, CodingKey {
            case customerDnsIps = "CustomerDnsIps"
            case customerUserName = "CustomerUserName"
            case vpcId = "VpcId"
            case subnetIds = "SubnetIds"
        }
    }

    public struct AddTagsToResourceResult: AWSShape {

    }

    public struct DeleteConditionalForwarderResult: AWSShape {

    }

    public struct CreateTrustRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TrustDirection", required: true, type: .enum), 
            AWSShapeMember(label: "DirectoryId", required: true, type: .string), 
            AWSShapeMember(label: "TrustType", required: false, type: .enum), 
            AWSShapeMember(label: "TrustPassword", required: true, type: .string), 
            AWSShapeMember(label: "ConditionalForwarderIpAddrs", required: false, type: .list), 
            AWSShapeMember(label: "RemoteDomainName", required: true, type: .string)
        ]
        /// The direction of the trust relationship.
        public let trustDirection: TrustDirection
        /// The Directory ID of the Microsoft AD in the AWS cloud for which to establish the trust relationship.
        public let directoryId: String
        /// The trust relationship type.
        public let trustType: TrustType?
        /// The trust password. The must be the same password that was used when creating the trust relationship on the external domain.
        public let trustPassword: String
        /// The IP addresses of the remote DNS server associated with RemoteDomainName.
        public let conditionalForwarderIpAddrs: [String]?
        /// The Fully Qualified Domain Name (FQDN) of the external domain for which to create the trust relationship.
        public let remoteDomainName: String

        public init(trustDirection: TrustDirection, directoryId: String, trustType: TrustType? = nil, trustPassword: String, conditionalForwarderIpAddrs: [String]? = nil, remoteDomainName: String) {
            self.trustDirection = trustDirection
            self.directoryId = directoryId
            self.trustType = trustType
            self.trustPassword = trustPassword
            self.conditionalForwarderIpAddrs = conditionalForwarderIpAddrs
            self.remoteDomainName = remoteDomainName
        }

        private enum CodingKeys: String, CodingKey {
            case trustDirection = "TrustDirection"
            case directoryId = "DirectoryId"
            case trustType = "TrustType"
            case trustPassword = "TrustPassword"
            case conditionalForwarderIpAddrs = "ConditionalForwarderIpAddrs"
            case remoteDomainName = "RemoteDomainName"
        }
    }

    public struct DirectoryVpcSettings: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VpcId", required: true, type: .string), 
            AWSShapeMember(label: "SubnetIds", required: true, type: .list)
        ]
        /// The identifier of the VPC in which to create the directory.
        public let vpcId: String
        /// The identifiers of the subnets for the directory servers. The two subnets must be in different Availability Zones. AWS Directory Service creates a directory server and a DNS server in each of these subnets.
        public let subnetIds: [String]

        public init(vpcId: String, subnetIds: [String]) {
            self.vpcId = vpcId
            self.subnetIds = subnetIds
        }

        private enum CodingKeys: String, CodingKey {
            case vpcId = "VpcId"
            case subnetIds = "SubnetIds"
        }
    }

    public struct DescribeDirectoriesResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryDescriptions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The list of DirectoryDescription objects that were retrieved. It is possible that this list contains less than the number of items specified in the Limit member of the request. This occurs if there are less than the requested number of items left to retrieve, or if the limitations of the operation have been exceeded.
        public let directoryDescriptions: [DirectoryDescription]?
        /// If not null, more results are available. Pass this value for the NextToken parameter in a subsequent call to DescribeDirectories to retrieve the next set of items.
        public let nextToken: String?

        public init(directoryDescriptions: [DirectoryDescription]? = nil, nextToken: String? = nil) {
            self.directoryDescriptions = directoryDescriptions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case directoryDescriptions = "DirectoryDescriptions"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeTrustsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Trusts", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The list of Trust objects that were retrieved. It is possible that this list contains less than the number of items specified in the Limit member of the request. This occurs if there are less than the requested number of items left to retrieve, or if the limitations of the operation have been exceeded.
        public let trusts: [Trust]?
        /// If not null, more results are available. Pass this value for the NextToken parameter in a subsequent call to DescribeTrusts to retrieve the next set of items.
        public let nextToken: String?

        public init(trusts: [Trust]? = nil, nextToken: String? = nil) {
            self.trusts = trusts
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case trusts = "Trusts"
            case nextToken = "NextToken"
        }
    }

    public enum TrustType: String, CustomStringConvertible, Codable {
        case forest = "Forest"
        public var description: String { return self.rawValue }
    }

    public struct ConnectDirectoryRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ConnectSettings", required: true, type: .structure), 
            AWSShapeMember(label: "ShortName", required: false, type: .string), 
            AWSShapeMember(label: "Size", required: true, type: .enum), 
            AWSShapeMember(label: "Password", required: true, type: .string)
        ]
        /// The fully-qualified name of the on-premises directory, such as corp.example.com.
        public let name: String
        /// A textual description for the directory.
        public let description: String?
        /// A DirectoryConnectSettings object that contains additional information for the operation.
        public let connectSettings: DirectoryConnectSettings
        /// The NetBIOS name of the on-premises directory, such as CORP.
        public let shortName: String?
        /// The size of the directory.
        public let size: DirectorySize
        /// The password for the on-premises user account.
        public let password: String

        public init(name: String, description: String? = nil, connectSettings: DirectoryConnectSettings, shortName: String? = nil, size: DirectorySize, password: String) {
            self.name = name
            self.description = description
            self.connectSettings = connectSettings
            self.shortName = shortName
            self.size = size
            self.password = password
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case description = "Description"
            case connectSettings = "ConnectSettings"
            case shortName = "ShortName"
            case size = "Size"
            case password = "Password"
        }
    }

    public struct DeleteSnapshotRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: true, type: .string)
        ]
        /// The identifier of the directory snapshot to be deleted.
        public let snapshotId: String

        public init(snapshotId: String) {
            self.snapshotId = snapshotId
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
        }
    }

    public struct AddTagsToResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// Identifier (ID) for the directory to which to add the tag.
        public let resourceId: String
        /// The tags to be assigned to the directory.
        public let tags: [Tag]

        public init(resourceId: String, tags: [Tag]) {
            self.resourceId = resourceId
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tags = "Tags"
        }
    }

    public struct DisableRadiusResult: AWSShape {

    }

    public struct DomainController: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "DnsIpAddr", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "StatusLastUpdatedDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DomainControllerId", required: false, type: .string), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "LaunchTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "StatusReason", required: false, type: .string), 
            AWSShapeMember(label: "SubnetId", required: false, type: .string), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string)
        ]
        /// The Availability Zone where the domain controller is located.
        public let availabilityZone: String?
        /// The IP address of the domain controller.
        public let dnsIpAddr: String?
        /// The status of the domain controller.
        public let status: DomainControllerStatus?
        /// The date and time that the status was last updated.
        public let statusLastUpdatedDateTime: TimeStamp?
        /// Identifies a specific domain controller in the directory.
        public let domainControllerId: String?
        /// The identifier of the VPC that contains the domain controller.
        public let vpcId: String?
        /// Specifies when the domain controller was created.
        public let launchTime: TimeStamp?
        /// A description of the domain controller state.
        public let statusReason: String?
        /// Identifier of the subnet in the VPC that contains the domain controller.
        public let subnetId: String?
        /// Identifier of the directory where the domain controller resides.
        public let directoryId: String?

        public init(availabilityZone: String? = nil, dnsIpAddr: String? = nil, status: DomainControllerStatus? = nil, statusLastUpdatedDateTime: TimeStamp? = nil, domainControllerId: String? = nil, vpcId: String? = nil, launchTime: TimeStamp? = nil, statusReason: String? = nil, subnetId: String? = nil, directoryId: String? = nil) {
            self.availabilityZone = availabilityZone
            self.dnsIpAddr = dnsIpAddr
            self.status = status
            self.statusLastUpdatedDateTime = statusLastUpdatedDateTime
            self.domainControllerId = domainControllerId
            self.vpcId = vpcId
            self.launchTime = launchTime
            self.statusReason = statusReason
            self.subnetId = subnetId
            self.directoryId = directoryId
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZone = "AvailabilityZone"
            case dnsIpAddr = "DnsIpAddr"
            case status = "Status"
            case statusLastUpdatedDateTime = "StatusLastUpdatedDateTime"
            case domainControllerId = "DomainControllerId"
            case vpcId = "VpcId"
            case launchTime = "LaunchTime"
            case statusReason = "StatusReason"
            case subnetId = "SubnetId"
            case directoryId = "DirectoryId"
        }
    }

    public enum TopicStatus: String, CustomStringConvertible, Codable {
        case registered = "Registered"
        case topicNotFound = "Topic not found"
        case failed = "Failed"
        case deleted = "Deleted"
        public var description: String { return self.rawValue }
    }

    public struct DescribeDirectoriesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DirectoryIds", required: false, type: .list), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of identifiers of the directories for which to obtain the information. If this member is null, all directories that belong to the current account are returned. An empty list results in an InvalidParameterException being thrown.
        public let directoryIds: [String]?
        /// The maximum number of items to return. If this value is zero, the maximum number of items is specified by the limitations of the operation.
        public let limit: Int32?
        /// The DescribeDirectoriesResult.NextToken value from a previous call to DescribeDirectories. Pass null if this is the first call.
        public let nextToken: String?

        public init(directoryIds: [String]? = nil, limit: Int32? = nil, nextToken: String? = nil) {
            self.directoryIds = directoryIds
            self.limit = limit
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case directoryIds = "DirectoryIds"
            case limit = "Limit"
            case nextToken = "NextToken"
        }
    }

    public struct DirectoryDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DnsIpAddrs", required: false, type: .list), 
            AWSShapeMember(label: "Size", required: false, type: .enum), 
            AWSShapeMember(label: "SsoEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Edition", required: false, type: .enum), 
            AWSShapeMember(label: "DesiredNumberOfDomainControllers", required: false, type: .integer), 
            AWSShapeMember(label: "Stage", required: false, type: .enum), 
            AWSShapeMember(label: "ShortName", required: false, type: .string), 
            AWSShapeMember(label: "AccessUrl", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "RadiusSettings", required: false, type: .structure), 
            AWSShapeMember(label: "LaunchTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "DirectoryId", required: false, type: .string), 
            AWSShapeMember(label: "StageLastUpdatedDateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Alias", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "VpcSettings", required: false, type: .structure), 
            AWSShapeMember(label: "RadiusStatus", required: false, type: .enum), 
            AWSShapeMember(label: "ConnectSettings", required: false, type: .structure), 
            AWSShapeMember(label: "StageReason", required: false, type: .string)
        ]
        /// The IP addresses of the DNS servers for the directory. For a Simple AD or Microsoft AD directory, these are the IP addresses of the Simple AD or Microsoft AD directory servers. For an AD Connector directory, these are the IP addresses of the DNS servers or domain controllers in the on-premises directory to which the AD Connector is connected.
        public let dnsIpAddrs: [String]?
        /// The directory size.
        public let size: DirectorySize?
        /// Indicates if single-sign on is enabled for the directory. For more information, see EnableSso and DisableSso.
        public let ssoEnabled: Bool?
        /// The fully-qualified name of the directory.
        public let name: String?
        /// The edition associated with this directory.
        public let edition: DirectoryEdition?
        /// The desired number of domain controllers in the directory if the directory is Microsoft AD.
        public let desiredNumberOfDomainControllers: Int32?
        /// The current stage of the directory.
        public let stage: DirectoryStage?
        /// The short name of the directory.
        public let shortName: String?
        /// The access URL for the directory, such as http://&lt;alias&gt;.awsapps.com. If no alias has been created for the directory, &lt;alias&gt; is the directory identifier, such as d-XXXXXXXXXX.
        public let accessUrl: String?
        /// The directory size.
        public let `type`: DirectoryType?
        /// A RadiusSettings object that contains information about the RADIUS server configured for this directory.
        public let radiusSettings: RadiusSettings?
        /// Specifies when the directory was created.
        public let launchTime: TimeStamp?
        /// The directory identifier.
        public let directoryId: String?
        /// The date and time that the stage was last updated.
        public let stageLastUpdatedDateTime: TimeStamp?
        /// The alias for the directory. If no alias has been created for the directory, the alias is the directory identifier, such as d-XXXXXXXXXX.
        public let alias: String?
        /// The textual description for the directory.
        public let description: String?
        /// A DirectoryVpcSettingsDescription object that contains additional information about a directory. This member is only present if the directory is a Simple AD or Managed AD directory.
        public let vpcSettings: DirectoryVpcSettingsDescription?
        /// The status of the RADIUS MFA server connection.
        public let radiusStatus: RadiusStatus?
        /// A DirectoryConnectSettingsDescription object that contains additional information about an AD Connector directory. This member is only present if the directory is an AD Connector directory.
        public let connectSettings: DirectoryConnectSettingsDescription?
        /// Additional information about the directory stage.
        public let stageReason: String?

        public init(dnsIpAddrs: [String]? = nil, size: DirectorySize? = nil, ssoEnabled: Bool? = nil, name: String? = nil, edition: DirectoryEdition? = nil, desiredNumberOfDomainControllers: Int32? = nil, stage: DirectoryStage? = nil, shortName: String? = nil, accessUrl: String? = nil, type: DirectoryType? = nil, radiusSettings: RadiusSettings? = nil, launchTime: TimeStamp? = nil, directoryId: String? = nil, stageLastUpdatedDateTime: TimeStamp? = nil, alias: String? = nil, description: String? = nil, vpcSettings: DirectoryVpcSettingsDescription? = nil, radiusStatus: RadiusStatus? = nil, connectSettings: DirectoryConnectSettingsDescription? = nil, stageReason: String? = nil) {
            self.dnsIpAddrs = dnsIpAddrs
            self.size = size
            self.ssoEnabled = ssoEnabled
            self.name = name
            self.edition = edition
            self.desiredNumberOfDomainControllers = desiredNumberOfDomainControllers
            self.stage = stage
            self.shortName = shortName
            self.accessUrl = accessUrl
            self.`type` = `type`
            self.radiusSettings = radiusSettings
            self.launchTime = launchTime
            self.directoryId = directoryId
            self.stageLastUpdatedDateTime = stageLastUpdatedDateTime
            self.alias = alias
            self.description = description
            self.vpcSettings = vpcSettings
            self.radiusStatus = radiusStatus
            self.connectSettings = connectSettings
            self.stageReason = stageReason
        }

        private enum CodingKeys: String, CodingKey {
            case dnsIpAddrs = "DnsIpAddrs"
            case size = "Size"
            case ssoEnabled = "SsoEnabled"
            case name = "Name"
            case edition = "Edition"
            case desiredNumberOfDomainControllers = "DesiredNumberOfDomainControllers"
            case stage = "Stage"
            case shortName = "ShortName"
            case accessUrl = "AccessUrl"
            case `type` = "Type"
            case radiusSettings = "RadiusSettings"
            case launchTime = "LaunchTime"
            case directoryId = "DirectoryId"
            case stageLastUpdatedDateTime = "StageLastUpdatedDateTime"
            case alias = "Alias"
            case description = "Description"
            case vpcSettings = "VpcSettings"
            case radiusStatus = "RadiusStatus"
            case connectSettings = "ConnectSettings"
            case stageReason = "StageReason"
        }
    }

    public struct ListTagsForResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Limit", required: false, type: .integer), 
            AWSShapeMember(label: "ResourceId", required: true, type: .string)
        ]
        /// Reserved for future use.
        public let nextToken: String?
        /// Reserved for future use.
        public let limit: Int32?
        /// Identifier (ID) of the directory for which you want to retrieve tags.
        public let resourceId: String

        public init(nextToken: String? = nil, limit: Int32? = nil, resourceId: String) {
            self.nextToken = nextToken
            self.limit = limit
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case limit = "Limit"
            case resourceId = "ResourceId"
        }
    }

    public enum DomainControllerStatus: String, CustomStringConvertible, Codable {
        case creating = "Creating"
        case active = "Active"
        case impaired = "Impaired"
        case restoring = "Restoring"
        case deleting = "Deleting"
        case deleted = "Deleted"
        case failed = "Failed"
        public var description: String { return self.rawValue }
    }

    public enum DirectoryType: String, CustomStringConvertible, Codable {
        case simplead = "SimpleAD"
        case adconnector = "ADConnector"
        case microsoftad = "MicrosoftAD"
        public var description: String { return self.rawValue }
    }

}