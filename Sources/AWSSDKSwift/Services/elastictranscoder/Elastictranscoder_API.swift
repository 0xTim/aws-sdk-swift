// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

/**
AWS Elastic Transcoder Service The AWS Elastic Transcoder Service.
*/
public struct Elastictranscoder {

    let request: AWSRequest

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: Core.Region? = nil, endpoint: String? = nil) {
        self.request = AWSRequest(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            service: "elastictranscoder",
            endpoint: endpoint
        )
    }

    ///   Use the UpdatePipeline operation to update settings for a pipeline.  When you change pipeline settings, your changes take effect immediately. Jobs that you have already submitted and that Elastic Transcoder has not started to process are affected in addition to jobs that you submit after you change settings.  
    public func updatePipeline(_ input: UpdatePipelineRequest) throws -> UpdatePipelineResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdatePipeline", path: "/2012-09-25/pipelines/\(input.id)", httpMethod: "PUT", httpHeaders: [:], input: input)
        return try ElastictranscoderResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  The ReadPipeline operation gets detailed information about a pipeline.
    public func readPipeline(_ input: ReadPipelineRequest) throws -> ReadPipelineResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ReadPipeline", path: "/2012-09-25/pipelines/\(input.id)", httpMethod: "GET", httpHeaders: [:], input: input)
        return try ElastictranscoderResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  The UpdatePipelineStatus operation pauses or reactivates a pipeline, so that the pipeline stops or restarts the processing of jobs. Changing the pipeline status is useful if you want to cancel one or more jobs. You can't cancel jobs after Elastic Transcoder has started processing them; if you pause the pipeline to which you submitted the jobs, you have more time to get the job IDs for the jobs that you want to cancel, and to send a CancelJob request. 
    public func updatePipelineStatus(_ input: UpdatePipelineStatusRequest) throws -> UpdatePipelineStatusResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdatePipelineStatus", path: "/2012-09-25/pipelines/\(input.id)/status", httpMethod: "POST", httpHeaders: [:], input: input)
        return try ElastictranscoderResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  The CreatePipeline operation creates a pipeline with settings that you specify.
    public func createPipeline(_ input: CreatePipelineRequest) throws -> CreatePipelineResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreatePipeline", path: "/2012-09-25/pipelines", httpMethod: "POST", httpHeaders: [:], input: input)
        return try ElastictranscoderResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  The DeletePipeline operation removes a pipeline.  You can only delete a pipeline that has never been used or that is not currently in use (doesn't contain any active jobs). If the pipeline is currently in use, DeletePipeline returns an error. 
    public func deletePipeline(_ input: DeletePipelineRequest) throws -> DeletePipelineResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeletePipeline", path: "/2012-09-25/pipelines/\(input.id)", httpMethod: "DELETE", httpHeaders: [:], input: input)
        return try ElastictranscoderResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  The DeletePreset operation removes a preset that you've added in an AWS region.  You can't delete the default presets that are included with Elastic Transcoder. 
    public func deletePreset(_ input: DeletePresetRequest) throws -> DeletePresetResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeletePreset", path: "/2012-09-25/presets/\(input.id)", httpMethod: "DELETE", httpHeaders: [:], input: input)
        return try ElastictranscoderResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  When you create a job, Elastic Transcoder returns JSON data that includes the values that you specified plus information about the job that is created. If you have specified more than one output for your jobs (for example, one output for the Kindle Fire and another output for the Apple iPhone 4s), you currently must use the Elastic Transcoder API to list the jobs (as opposed to the AWS Console).
    public func createJob(_ input: CreateJobRequest) throws -> CreateJobResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateJob", path: "/2012-09-25/jobs", httpMethod: "POST", httpHeaders: [:], input: input)
        return try ElastictranscoderResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  With the UpdatePipelineNotifications operation, you can update Amazon Simple Notification Service (Amazon SNS) notifications for a pipeline. When you update notifications for a pipeline, Elastic Transcoder returns the values that you specified in the request.
    public func updatePipelineNotifications(_ input: UpdatePipelineNotificationsRequest) throws -> UpdatePipelineNotificationsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdatePipelineNotifications", path: "/2012-09-25/pipelines/\(input.id)/notifications", httpMethod: "POST", httpHeaders: [:], input: input)
        return try ElastictranscoderResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  The ReadPreset operation gets detailed information about a preset.
    public func readPreset(_ input: ReadPresetRequest) throws -> ReadPresetResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ReadPreset", path: "/2012-09-25/presets/\(input.id)", httpMethod: "GET", httpHeaders: [:], input: input)
        return try ElastictranscoderResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  The ListJobsByStatus operation gets a list of jobs that have a specified status. The response body contains one element for each job that satisfies the search criteria.
    public func listJobsByStatus(_ input: ListJobsByStatusRequest) throws -> ListJobsByStatusResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListJobsByStatus", path: "/2012-09-25/jobsByStatus/\(input.status)?Ascending=\(input.ascending?.description ?? "")&PageToken=\(input.pageToken?.description ?? "")", httpMethod: "GET", httpHeaders: [:], input: input)
        return try ElastictranscoderResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  The TestRole operation tests the IAM role used to create the pipeline. The TestRole action lets you determine whether the IAM role you are using has sufficient permissions to let Elastic Transcoder perform tasks associated with the transcoding process. The action attempts to assume the specified IAM role, checks read access to the input and output buckets, and tries to send a test notification to Amazon SNS topics that you specify.
    public func testRole(_ input: TestRoleRequest) throws -> TestRoleResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "TestRole", path: "/2012-09-25/roleTests", httpMethod: "POST", httpHeaders: [:], input: input)
        return try ElastictranscoderResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  The ListJobsByPipeline operation gets a list of the jobs currently in a pipeline. Elastic Transcoder returns all of the jobs currently in the specified pipeline. The response body contains one element for each job that satisfies the search criteria.
    public func listJobsByPipeline(_ input: ListJobsByPipelineRequest) throws -> ListJobsByPipelineResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListJobsByPipeline", path: "/2012-09-25/jobsByPipeline/\(input.pipelineId)?Ascending=\(input.ascending?.description ?? "")&PageToken=\(input.pageToken?.description ?? "")", httpMethod: "GET", httpHeaders: [:], input: input)
        return try ElastictranscoderResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  The ReadJob operation returns detailed information about a job.
    public func readJob(_ input: ReadJobRequest) throws -> ReadJobResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ReadJob", path: "/2012-09-25/jobs/\(input.id)", httpMethod: "GET", httpHeaders: [:], input: input)
        return try ElastictranscoderResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  The ListPipelines operation gets a list of the pipelines associated with the current AWS account.
    public func listPipelines(_ input: ListPipelinesRequest) throws -> ListPipelinesResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListPipelines", path: "/2012-09-25/pipelines?Ascending=\(input.ascending?.description ?? "")&PageToken=\(input.pageToken?.description ?? "")", httpMethod: "GET", httpHeaders: [:], input: input)
        return try ElastictranscoderResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  The CreatePreset operation creates a preset with settings that you specify.  Elastic Transcoder checks the CreatePreset settings to ensure that they meet Elastic Transcoder requirements and to determine whether they comply with H.264 standards. If your settings are not valid for Elastic Transcoder, Elastic Transcoder returns an HTTP 400 response (ValidationException) and does not create the preset. If the settings are valid for Elastic Transcoder but aren't strictly compliant with the H.264 standard, Elastic Transcoder creates the preset and returns a warning message in the response. This helps you determine whether your settings comply with the H.264 standard while giving you greater flexibility with respect to the video that Elastic Transcoder produces.  Elastic Transcoder uses the H.264 video-compression format. For more information, see the International Telecommunication Union publication Recommendation ITU-T H.264: Advanced video coding for generic audiovisual services.
    public func createPreset(_ input: CreatePresetRequest) throws -> CreatePresetResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreatePreset", path: "/2012-09-25/presets", httpMethod: "POST", httpHeaders: [:], input: input)
        return try ElastictranscoderResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  The CancelJob operation cancels an unfinished job.  You can only cancel a job that has a status of Submitted. To prevent a pipeline from starting to process a job while you're getting the job identifier, use UpdatePipelineStatus to temporarily pause the pipeline. 
    public func cancelJob(_ input: CancelJobRequest) throws -> CancelJobResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "CancelJob", path: "/2012-09-25/jobs/\(input.id)", httpMethod: "DELETE", httpHeaders: [:], input: input)
        return try ElastictranscoderResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  The ListPresets operation gets a list of the default presets included with Elastic Transcoder and the presets that you've added in an AWS region.
    public func listPresets(_ input: ListPresetsRequest) throws -> ListPresetsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListPresets", path: "/2012-09-25/presets?Ascending=\(input.ascending?.description ?? "")&PageToken=\(input.pageToken?.description ?? "")", httpMethod: "GET", httpHeaders: [:], input: input)
        return try ElastictranscoderResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }


}