// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension ServiceCatalog {

    public struct DescribeCopyProductStatusInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "CopyProductToken", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The token for the copy product operation. This token is returned by CopyProduct.
        public let copyProductToken: String

        public init(acceptLanguage: String? = nil, copyProductToken: String) {
            self.acceptLanguage = acceptLanguage
            self.copyProductToken = copyProductToken
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case copyProductToken = "CopyProductToken"
        }
    }

    public struct UpdatePortfolioOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// Information about the portfolio.
        public let portfolioDetail: PortfolioDetail?
        /// Information about the tags associated with the portfolio.
        public let tags: [Tag]?

        public init(portfolioDetail: PortfolioDetail? = nil, tags: [Tag]? = nil) {
            self.portfolioDetail = portfolioDetail
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetail = "PortfolioDetail"
            case tags = "Tags"
        }
    }

    public enum RequiresRecreation: String, CustomStringConvertible, Codable {
        case never = "NEVER"
        case conditionally = "CONDITIONALLY"
        case always = "ALWAYS"
        public var description: String { return self.rawValue }
    }

    public struct CopyProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceProvisioningArtifactIdentifiers", required: false, type: .list), 
            AWSShapeMember(label: "SourceProductArn", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "CopyOptions", required: false, type: .list), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "TargetProductName", required: false, type: .string), 
            AWSShapeMember(label: "TargetProductId", required: false, type: .string)
        ]
        /// The identifiers of the provisioning artifacts (also known as versions) of the product to copy. By default, all provisioning artifacts are copied.
        public let sourceProvisioningArtifactIdentifiers: [[ProvisioningArtifactPropertyName: String]]?
        /// The Amazon Resource Name (ARN) of the source product.
        public let sourceProductArn: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The copy options. If the value is CopyTags, the tags from the source product are copied to the target product.
        public let copyOptions: [CopyOption]?
        ///  A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request. 
        public let idempotencyToken: String
        /// A name for the target product. The default is the name of the source product.
        public let targetProductName: String?
        /// The identifier of the target product. By default, a new product is created.
        public let targetProductId: String?

        public init(sourceProvisioningArtifactIdentifiers: [[ProvisioningArtifactPropertyName: String]]? = nil, sourceProductArn: String, acceptLanguage: String? = nil, copyOptions: [CopyOption]? = nil, idempotencyToken: String, targetProductName: String? = nil, targetProductId: String? = nil) {
            self.sourceProvisioningArtifactIdentifiers = sourceProvisioningArtifactIdentifiers
            self.sourceProductArn = sourceProductArn
            self.acceptLanguage = acceptLanguage
            self.copyOptions = copyOptions
            self.idempotencyToken = idempotencyToken
            self.targetProductName = targetProductName
            self.targetProductId = targetProductId
        }

        private enum CodingKeys: String, CodingKey {
            case sourceProvisioningArtifactIdentifiers = "SourceProvisioningArtifactIdentifiers"
            case sourceProductArn = "SourceProductArn"
            case acceptLanguage = "AcceptLanguage"
            case copyOptions = "CopyOptions"
            case idempotencyToken = "IdempotencyToken"
            case targetProductName = "TargetProductName"
            case targetProductId = "TargetProductId"
        }
    }

    public struct DeleteTagOptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The TagOption identifier.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct DescribeProvisionedProductPlanOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceChanges", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductPlanDetails", required: false, type: .structure)
        ]
        /// Information about the resource changes that will occur when the plan is executed.
        public let resourceChanges: [ResourceChange]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?
        /// Information about the plan.
        public let provisionedProductPlanDetails: ProvisionedProductPlanDetails?

        public init(resourceChanges: [ResourceChange]? = nil, nextPageToken: String? = nil, provisionedProductPlanDetails: ProvisionedProductPlanDetails? = nil) {
            self.resourceChanges = resourceChanges
            self.nextPageToken = nextPageToken
            self.provisionedProductPlanDetails = provisionedProductPlanDetails
        }

        private enum CodingKeys: String, CodingKey {
            case resourceChanges = "ResourceChanges"
            case nextPageToken = "NextPageToken"
            case provisionedProductPlanDetails = "ProvisionedProductPlanDetails"
        }
    }

    public struct DescribeTagOptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The TagOption identifier.
        public let id: String

        public init(id: String) {
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
        }
    }

    public struct CreateProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductType", required: true, type: .enum), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "SupportEmail", required: false, type: .string), 
            AWSShapeMember(label: "Distributor", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: true, type: .string), 
            AWSShapeMember(label: "SupportDescription", required: false, type: .string), 
            AWSShapeMember(label: "SupportUrl", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactParameters", required: true, type: .structure), 
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The type of product.
        public let productType: ProductType
        /// One or more tags.
        public let tags: [Tag]?
        /// The description of the product.
        public let description: String?
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String
        /// The contact email for product support.
        public let supportEmail: String?
        /// The distributor of the product.
        public let distributor: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The owner of the product.
        public let owner: String
        /// The support information about the product.
        public let supportDescription: String?
        /// The contact URL for product support.
        public let supportUrl: String?
        /// The configuration of the provisioning artifact.
        public let provisioningArtifactParameters: ProvisioningArtifactProperties
        /// The name of the product.
        public let name: String

        public init(productType: ProductType, tags: [Tag]? = nil, description: String? = nil, idempotencyToken: String, supportEmail: String? = nil, distributor: String? = nil, acceptLanguage: String? = nil, owner: String, supportDescription: String? = nil, supportUrl: String? = nil, provisioningArtifactParameters: ProvisioningArtifactProperties, name: String) {
            self.productType = productType
            self.tags = tags
            self.description = description
            self.idempotencyToken = idempotencyToken
            self.supportEmail = supportEmail
            self.distributor = distributor
            self.acceptLanguage = acceptLanguage
            self.owner = owner
            self.supportDescription = supportDescription
            self.supportUrl = supportUrl
            self.provisioningArtifactParameters = provisioningArtifactParameters
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case productType = "ProductType"
            case tags = "Tags"
            case description = "Description"
            case idempotencyToken = "IdempotencyToken"
            case supportEmail = "SupportEmail"
            case distributor = "Distributor"
            case acceptLanguage = "AcceptLanguage"
            case owner = "Owner"
            case supportDescription = "SupportDescription"
            case supportUrl = "SupportUrl"
            case provisioningArtifactParameters = "ProvisioningArtifactParameters"
            case name = "Name"
        }
    }

    public struct AssociateTagOptionWithResourceOutput: AWSShape {

    }

    public struct ProductViewSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "HasDefaultPath", required: false, type: .boolean), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "ShortDescription", required: false, type: .string), 
            AWSShapeMember(label: "SupportEmail", required: false, type: .string), 
            AWSShapeMember(label: "Distributor", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "SupportDescription", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "SupportUrl", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// Indicates whether the product has a default path. If the product does not have a default path, call ListLaunchPaths to disambiguate between paths. Otherwise, ListLaunchPaths is not required, and the output of ProductViewSummary can be used directly with DescribeProvisioningParameters.
        public let hasDefaultPath: Bool?
        /// The product identifier.
        public let productId: String?
        /// The product type. Contact the product administrator for the significance of this value. If this value is MARKETPLACE, the product was created by AWS Marketplace.
        public let `type`: ProductType?
        /// Short description of the product.
        public let shortDescription: String?
        /// The email contact information to obtain support for this Product.
        public let supportEmail: String?
        /// The distributor of the product. Contact the product administrator for the significance of this value.
        public let distributor: String?
        /// The owner of the product. Contact the product administrator for the significance of this value.
        public let owner: String?
        /// The description of the support for this Product.
        public let supportDescription: String?
        /// The name of the product.
        public let name: String?
        /// The URL information to obtain support for this Product.
        public let supportUrl: String?
        /// The product view identifier.
        public let id: String?

        public init(hasDefaultPath: Bool? = nil, productId: String? = nil, type: ProductType? = nil, shortDescription: String? = nil, supportEmail: String? = nil, distributor: String? = nil, owner: String? = nil, supportDescription: String? = nil, name: String? = nil, supportUrl: String? = nil, id: String? = nil) {
            self.hasDefaultPath = hasDefaultPath
            self.productId = productId
            self.`type` = `type`
            self.shortDescription = shortDescription
            self.supportEmail = supportEmail
            self.distributor = distributor
            self.owner = owner
            self.supportDescription = supportDescription
            self.name = name
            self.supportUrl = supportUrl
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case hasDefaultPath = "HasDefaultPath"
            case productId = "ProductId"
            case `type` = "Type"
            case shortDescription = "ShortDescription"
            case supportEmail = "SupportEmail"
            case distributor = "Distributor"
            case owner = "Owner"
            case supportDescription = "SupportDescription"
            case name = "Name"
            case supportUrl = "SupportUrl"
            case id = "Id"
        }
    }

    public struct ListRecordHistoryOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// The records, in reverse chronological order.
        public let recordDetails: [RecordDetail]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(recordDetails: [RecordDetail]? = nil, nextPageToken: String? = nil) {
            self.recordDetails = recordDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetails = "RecordDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct CreateProvisioningArtifactInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "Parameters", required: true, type: .structure), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The configuration for the provisioning artifact.
        public let parameters: ProvisioningArtifactProperties
        /// The product identifier.
        public let productId: String
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String

        public init(acceptLanguage: String? = nil, parameters: ProvisioningArtifactProperties, productId: String, idempotencyToken: String) {
            self.acceptLanguage = acceptLanguage
            self.parameters = parameters
            self.productId = productId
            self.idempotencyToken = idempotencyToken
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case parameters = "Parameters"
            case productId = "ProductId"
            case idempotencyToken = "IdempotencyToken"
        }
    }

    public struct ProvisioningArtifact: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The name of the provisioning artifact.
        public let name: String?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The description of the provisioning artifact.
        public let description: String?
        /// The identifier of the provisioning artifact.
        public let id: String?

        public init(name: String? = nil, createdTime: TimeStamp? = nil, description: String? = nil, id: String? = nil) {
            self.name = name
            self.createdTime = createdTime
            self.description = description
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case createdTime = "CreatedTime"
            case description = "Description"
            case id = "Id"
        }
    }

    public struct ProvisionedProductPlanSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PlanName", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionProductName", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "PlanId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionProductId", required: false, type: .string), 
            AWSShapeMember(label: "PlanType", required: false, type: .enum)
        ]
        /// The name of the plan.
        public let planName: String?
        /// The user-friendly name of the provisioned product.
        public let provisionProductName: String?
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String?
        /// The plan identifier.
        public let planId: String?
        /// The product identifier.
        public let provisionProductId: String?
        /// The plan type.
        public let planType: ProvisionedProductPlanType?

        public init(planName: String? = nil, provisionProductName: String? = nil, provisioningArtifactId: String? = nil, planId: String? = nil, provisionProductId: String? = nil, planType: ProvisionedProductPlanType? = nil) {
            self.planName = planName
            self.provisionProductName = provisionProductName
            self.provisioningArtifactId = provisioningArtifactId
            self.planId = planId
            self.provisionProductId = provisionProductId
            self.planType = planType
        }

        private enum CodingKeys: String, CodingKey {
            case planName = "PlanName"
            case provisionProductName = "ProvisionProductName"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case planId = "PlanId"
            case provisionProductId = "ProvisionProductId"
            case planType = "PlanType"
        }
    }

    public struct DescribeProductAsAdminOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ProductViewDetail", required: false, type: .structure), 
            AWSShapeMember(label: "TagOptions", required: false, type: .list), 
            AWSShapeMember(label: "ProvisioningArtifactSummaries", required: false, type: .list)
        ]
        /// Information about the tags associated with the product.
        public let tags: [Tag]?
        /// Information about the product view.
        public let productViewDetail: ProductViewDetail?
        /// Information about the TagOptions associated with the product.
        public let tagOptions: [TagOptionDetail]?
        /// Information about the provisioning artifacts (also known as versions) for the specified product.
        public let provisioningArtifactSummaries: [ProvisioningArtifactSummary]?

        public init(tags: [Tag]? = nil, productViewDetail: ProductViewDetail? = nil, tagOptions: [TagOptionDetail]? = nil, provisioningArtifactSummaries: [ProvisioningArtifactSummary]? = nil) {
            self.tags = tags
            self.productViewDetail = productViewDetail
            self.tagOptions = tagOptions
            self.provisioningArtifactSummaries = provisioningArtifactSummaries
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case productViewDetail = "ProductViewDetail"
            case tagOptions = "TagOptions"
            case provisioningArtifactSummaries = "ProvisioningArtifactSummaries"
        }
    }

    public struct SearchProductsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "ProductViewSummaries", required: false, type: .list), 
            AWSShapeMember(label: "ProductViewAggregations", required: false, type: .map)
        ]
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?
        /// Information about the product views.
        public let productViewSummaries: [ProductViewSummary]?
        /// The product view aggregations.
        public let productViewAggregations: [String: [ProductViewAggregationValue]]?

        public init(nextPageToken: String? = nil, productViewSummaries: [ProductViewSummary]? = nil, productViewAggregations: [String: [ProductViewAggregationValue]]? = nil) {
            self.nextPageToken = nextPageToken
            self.productViewSummaries = productViewSummaries
            self.productViewAggregations = productViewAggregations
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "NextPageToken"
            case productViewSummaries = "ProductViewSummaries"
            case productViewAggregations = "ProductViewAggregations"
        }
    }

    public struct CreateConstraintInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "Parameters", required: true, type: .string), 
            AWSShapeMember(label: "Type", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The product identifier.
        public let productId: String
        /// The constraint parameters, in JSON format. The syntax depends on the constraint type as follows:  LAUNCH  Specify the RoleArn property as follows: \"RoleArn\" : \"arn:aws:iam::123456789012:role/LaunchRole\"  NOTIFICATION  Specify the NotificationArns property as follows: \"NotificationArns\" : [\"arn:aws:sns:us-east-1:123456789012:Topic\"]  TEMPLATE  Specify the Rules property. For more information, see Template Constraint Rules.  
        public let parameters: String
        /// The type of constraint.    LAUNCH     NOTIFICATION     TEMPLATE   
        public let `type`: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String
        /// The portfolio identifier.
        public let portfolioId: String
        /// The description of the constraint.
        public let description: String?

        public init(productId: String, parameters: String, type: String, acceptLanguage: String? = nil, idempotencyToken: String, portfolioId: String, description: String? = nil) {
            self.productId = productId
            self.parameters = parameters
            self.`type` = `type`
            self.acceptLanguage = acceptLanguage
            self.idempotencyToken = idempotencyToken
            self.portfolioId = portfolioId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case parameters = "Parameters"
            case `type` = "Type"
            case acceptLanguage = "AcceptLanguage"
            case idempotencyToken = "IdempotencyToken"
            case portfolioId = "PortfolioId"
            case description = "Description"
        }
    }

    public struct AssociatePrincipalWithPortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrincipalType", required: true, type: .enum), 
            AWSShapeMember(label: "PrincipalARN", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string)
        ]
        /// The principal type. The supported value is IAM.
        public let principalType: PrincipalType
        /// The ARN of the principal (IAM user, role, or group).
        public let principalARN: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String

        public init(principalType: PrincipalType, principalARN: String, acceptLanguage: String? = nil, portfolioId: String) {
            self.principalType = principalType
            self.principalARN = principalARN
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
        }

        private enum CodingKeys: String, CodingKey {
            case principalType = "PrincipalType"
            case principalARN = "PrincipalARN"
            case acceptLanguage = "AcceptLanguage"
            case portfolioId = "PortfolioId"
        }
    }

    public struct ListResourcesForTagOptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceType", required: false, type: .string), 
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "TagOptionId", required: true, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer)
        ]
        /// The resource type.    Portfolio     Product   
        public let resourceType: String?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The TagOption identifier.
        public let tagOptionId: String
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?

        public init(resourceType: String? = nil, pageToken: String? = nil, tagOptionId: String, pageSize: Int32? = nil) {
            self.resourceType = resourceType
            self.pageToken = pageToken
            self.tagOptionId = tagOptionId
            self.pageSize = pageSize
        }

        private enum CodingKeys: String, CodingKey {
            case resourceType = "ResourceType"
            case pageToken = "PageToken"
            case tagOptionId = "TagOptionId"
            case pageSize = "PageSize"
        }
    }

    public struct SearchProductsAsAdminInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SortBy", required: false, type: .enum), 
            AWSShapeMember(label: "SortOrder", required: false, type: .enum), 
            AWSShapeMember(label: "ProductSource", required: false, type: .enum), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "PortfolioId", required: false, type: .string), 
            AWSShapeMember(label: "Filters", required: false, type: .map), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The sort field. If no value is specified, the results are not sorted.
        public let sortBy: ProductViewSortBy?
        /// The sort order. If no value is specified, the results are not sorted.
        public let sortOrder: SortOrder?
        /// Access level of the source of the product.
        public let productSource: ProductSource?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The portfolio identifier.
        public let portfolioId: String?
        /// The search filters. If no search filters are specified, the output includes all products to which the administrator has access.
        public let filters: [ProductViewFilterBy: [String]]?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(sortBy: ProductViewSortBy? = nil, sortOrder: SortOrder? = nil, productSource: ProductSource? = nil, acceptLanguage: String? = nil, pageSize: Int32? = nil, portfolioId: String? = nil, filters: [ProductViewFilterBy: [String]]? = nil, pageToken: String? = nil) {
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.productSource = productSource
            self.acceptLanguage = acceptLanguage
            self.pageSize = pageSize
            self.portfolioId = portfolioId
            self.filters = filters
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case productSource = "ProductSource"
            case acceptLanguage = "AcceptLanguage"
            case pageSize = "PageSize"
            case portfolioId = "PortfolioId"
            case filters = "Filters"
            case pageToken = "PageToken"
        }
    }

    public struct ListPortfoliosForProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the portfolios.
        public let portfolioDetails: [PortfolioDetail]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(portfolioDetails: [PortfolioDetail]? = nil, nextPageToken: String? = nil) {
            self.portfolioDetails = portfolioDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetails = "PortfolioDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public enum ProvisionedProductPlanStatus: String, CustomStringConvertible, Codable {
        case createInProgress = "CREATE_IN_PROGRESS"
        case createSuccess = "CREATE_SUCCESS"
        case createFailed = "CREATE_FAILED"
        case executeInProgress = "EXECUTE_IN_PROGRESS"
        case executeSuccess = "EXECUTE_SUCCESS"
        case executeFailed = "EXECUTE_FAILED"
        public var description: String { return self.rawValue }
    }

    public struct UpdateProvisioningParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UsePreviousValue", required: false, type: .boolean), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// If set to true, Value is ignored and the previous parameter value is kept.
        public let usePreviousValue: Bool?
        /// The parameter key.
        public let key: String?
        /// The parameter value.
        public let value: String?

        public init(usePreviousValue: Bool? = nil, key: String? = nil, value: String? = nil) {
            self.usePreviousValue = usePreviousValue
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case usePreviousValue = "UsePreviousValue"
            case key = "Key"
            case value = "Value"
        }
    }

    public struct ProductViewAggregationValue: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ApproximateCount", required: false, type: .integer), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// An approximate count of the products that match the value.
        public let approximateCount: Int32?
        /// The value of the product view aggregation.
        public let value: String?

        public init(approximateCount: Int32? = nil, value: String? = nil) {
            self.approximateCount = approximateCount
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case approximateCount = "ApproximateCount"
            case value = "Value"
        }
    }

    public struct ListLaunchPathsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "ProductId", required: true, type: .string)
        ]
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The product identifier.
        public let productId: String

        public init(pageToken: String? = nil, acceptLanguage: String? = nil, pageSize: Int32? = nil, productId: String) {
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.pageSize = pageSize
            self.productId = productId
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
            case pageSize = "PageSize"
            case productId = "ProductId"
        }
    }

    public struct AcceptPortfolioShareOutput: AWSShape {

    }

    public struct SearchProductsAsAdminOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductViewDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the product views.
        public let productViewDetails: [ProductViewDetail]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(productViewDetails: [ProductViewDetail]? = nil, nextPageToken: String? = nil) {
            self.productViewDetails = productViewDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case productViewDetails = "ProductViewDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct SearchProductsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .map), 
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "SortBy", required: false, type: .enum), 
            AWSShapeMember(label: "SortOrder", required: false, type: .enum)
        ]
        /// The search filters. If no search filters are specified, the output includes all products to which the caller has access.
        public let filters: [ProductViewFilterBy: [String]]?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The sort field. If no value is specified, the results are not sorted.
        public let sortBy: ProductViewSortBy?
        /// The sort order. If no value is specified, the results are not sorted.
        public let sortOrder: SortOrder?

        public init(filters: [ProductViewFilterBy: [String]]? = nil, pageToken: String? = nil, acceptLanguage: String? = nil, pageSize: Int32? = nil, sortBy: ProductViewSortBy? = nil, sortOrder: SortOrder? = nil) {
            self.filters = filters
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.pageSize = pageSize
            self.sortBy = sortBy
            self.sortOrder = sortOrder
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
            case pageSize = "PageSize"
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
        }
    }

    public struct SearchProvisionedProductsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SortBy", required: false, type: .string), 
            AWSShapeMember(label: "SortOrder", required: false, type: .enum), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "Filters", required: false, type: .map), 
            AWSShapeMember(label: "AccessLevelFilter", required: false, type: .structure), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The sort field. If no value is specified, the results are not sorted. The valid values are arn, id, name, and lastRecordId.
        public let sortBy: String?
        /// The sort order. If no value is specified, the results are not sorted.
        public let sortOrder: SortOrder?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The search filters. When the key is SearchQuery, the searchable fields are arn, createdTime, id, lastRecordId, idempotencyToken, name, physicalId, productId, provisioningArtifact, type, status, tags, userArn, and userArnSession. Example: "SearchQuery":["status:AVAILABLE"] 
        public let filters: [ProvisionedProductViewFilterBy: [String]]?
        /// The access level to use to obtain results. The default is User.
        public let accessLevelFilter: AccessLevelFilter?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(sortBy: String? = nil, sortOrder: SortOrder? = nil, acceptLanguage: String? = nil, pageSize: Int32? = nil, filters: [ProvisionedProductViewFilterBy: [String]]? = nil, accessLevelFilter: AccessLevelFilter? = nil, pageToken: String? = nil) {
            self.sortBy = sortBy
            self.sortOrder = sortOrder
            self.acceptLanguage = acceptLanguage
            self.pageSize = pageSize
            self.filters = filters
            self.accessLevelFilter = accessLevelFilter
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case sortBy = "SortBy"
            case sortOrder = "SortOrder"
            case acceptLanguage = "AcceptLanguage"
            case pageSize = "PageSize"
            case filters = "Filters"
            case accessLevelFilter = "AccessLevelFilter"
            case pageToken = "PageToken"
        }
    }

    public struct CreateProvisionedProductPlanInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "ProvisioningParameters", required: false, type: .list), 
            AWSShapeMember(label: "NotificationArns", required: false, type: .list), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PlanType", required: true, type: .enum), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "ProvisionedProductName", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "PlanName", required: true, type: .string), 
            AWSShapeMember(label: "PathId", required: false, type: .string)
        ]
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String
        /// The product identifier.
        public let productId: String
        /// Parameters specified by the administrator that are required for provisioning the product.
        public let provisioningParameters: [UpdateProvisioningParameter]?
        /// Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.
        public let notificationArns: [String]?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The plan type.
        public let planType: ProvisionedProductPlanType
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String
        /// A user-friendly name for the provisioned product. This value must be unique for the AWS account and cannot be updated after the product is provisioned.
        public let provisionedProductName: String
        /// One or more tags.
        public let tags: [Tag]?
        /// The name of the plan.
        public let planName: String
        /// The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use ListLaunchPaths.
        public let pathId: String?

        public init(provisioningArtifactId: String, productId: String, provisioningParameters: [UpdateProvisioningParameter]? = nil, notificationArns: [String]? = nil, acceptLanguage: String? = nil, planType: ProvisionedProductPlanType, idempotencyToken: String, provisionedProductName: String, tags: [Tag]? = nil, planName: String, pathId: String? = nil) {
            self.provisioningArtifactId = provisioningArtifactId
            self.productId = productId
            self.provisioningParameters = provisioningParameters
            self.notificationArns = notificationArns
            self.acceptLanguage = acceptLanguage
            self.planType = planType
            self.idempotencyToken = idempotencyToken
            self.provisionedProductName = provisionedProductName
            self.tags = tags
            self.planName = planName
            self.pathId = pathId
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactId = "ProvisioningArtifactId"
            case productId = "ProductId"
            case provisioningParameters = "ProvisioningParameters"
            case notificationArns = "NotificationArns"
            case acceptLanguage = "AcceptLanguage"
            case planType = "PlanType"
            case idempotencyToken = "IdempotencyToken"
            case provisionedProductName = "ProvisionedProductName"
            case tags = "Tags"
            case planName = "PlanName"
            case pathId = "PathId"
        }
    }

    public struct CloudWatchDashboard: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The name of the CloudWatch dashboard.
        public let name: String?

        public init(name: String? = nil) {
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
        }
    }

    public struct ListRecordHistoryInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "SearchFilter", required: false, type: .structure), 
            AWSShapeMember(label: "AccessLevelFilter", required: false, type: .structure)
        ]
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The search filter to scope the results.
        public let searchFilter: ListRecordHistorySearchFilter?
        /// The access level to use to obtain results. The default is User.
        public let accessLevelFilter: AccessLevelFilter?

        public init(pageToken: String? = nil, acceptLanguage: String? = nil, pageSize: Int32? = nil, searchFilter: ListRecordHistorySearchFilter? = nil, accessLevelFilter: AccessLevelFilter? = nil) {
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.pageSize = pageSize
            self.searchFilter = searchFilter
            self.accessLevelFilter = accessLevelFilter
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
            case pageSize = "PageSize"
            case searchFilter = "SearchFilter"
            case accessLevelFilter = "AccessLevelFilter"
        }
    }

    public struct DescribeProductViewOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductViewSummary", required: false, type: .structure), 
            AWSShapeMember(label: "ProvisioningArtifacts", required: false, type: .list)
        ]
        /// Summary information about the product.
        public let productViewSummary: ProductViewSummary?
        /// Information about the provisioning artifacts for the product.
        public let provisioningArtifacts: [ProvisioningArtifact]?

        public init(productViewSummary: ProductViewSummary? = nil, provisioningArtifacts: [ProvisioningArtifact]? = nil) {
            self.productViewSummary = productViewSummary
            self.provisioningArtifacts = provisioningArtifacts
        }

        private enum CodingKeys: String, CodingKey {
            case productViewSummary = "ProductViewSummary"
            case provisioningArtifacts = "ProvisioningArtifacts"
        }
    }

    public struct DeleteProvisioningArtifactInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The product identifier.
        public let productId: String
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String

        public init(acceptLanguage: String? = nil, productId: String, provisioningArtifactId: String) {
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.provisioningArtifactId = provisioningArtifactId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case productId = "ProductId"
            case provisioningArtifactId = "ProvisioningArtifactId"
        }
    }

    public struct ExecuteProvisionedProductPlanInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PlanId", required: true, type: .string)
        ]
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The plan identifier.
        public let planId: String

        public init(idempotencyToken: String, acceptLanguage: String? = nil, planId: String) {
            self.idempotencyToken = idempotencyToken
            self.acceptLanguage = acceptLanguage
            self.planId = planId
        }

        private enum CodingKeys: String, CodingKey {
            case idempotencyToken = "IdempotencyToken"
            case acceptLanguage = "AcceptLanguage"
            case planId = "PlanId"
        }
    }

    public struct ListConstraintsForPortfolioOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "ConstraintDetails", required: false, type: .list)
        ]
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?
        /// Information about the constraints.
        public let constraintDetails: [ConstraintDetail]?

        public init(nextPageToken: String? = nil, constraintDetails: [ConstraintDetail]? = nil) {
            self.nextPageToken = nextPageToken
            self.constraintDetails = constraintDetails
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "NextPageToken"
            case constraintDetails = "ConstraintDetails"
        }
    }

    public struct DescribeProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductViewSummary", required: false, type: .structure), 
            AWSShapeMember(label: "ProvisioningArtifacts", required: false, type: .list)
        ]
        /// Summary information about the product view.
        public let productViewSummary: ProductViewSummary?
        /// Information about the provisioning artifacts for the specified product.
        public let provisioningArtifacts: [ProvisioningArtifact]?

        public init(productViewSummary: ProductViewSummary? = nil, provisioningArtifacts: [ProvisioningArtifact]? = nil) {
            self.productViewSummary = productViewSummary
            self.provisioningArtifacts = provisioningArtifacts
        }

        private enum CodingKeys: String, CodingKey {
            case productViewSummary = "ProductViewSummary"
            case provisioningArtifacts = "ProvisioningArtifacts"
        }
    }

    public struct CreateTagOptionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionDetail", required: false, type: .structure)
        ]
        /// Information about the TagOption.
        public let tagOptionDetail: TagOptionDetail?

        public init(tagOptionDetail: TagOptionDetail? = nil) {
            self.tagOptionDetail = tagOptionDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionDetail = "TagOptionDetail"
        }
    }

    public struct UpdateProvisioningArtifactOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Info", required: false, type: .map)
        ]
        /// Information about the provisioning artifact.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?
        /// The status of the current request.
        public let status: Status?
        /// The URL of the CloudFormation template in Amazon S3.
        public let info: [String: String]?

        public init(provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, status: Status? = nil, info: [String: String]? = nil) {
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.status = status
            self.info = info
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactDetail = "ProvisioningArtifactDetail"
            case status = "Status"
            case info = "Info"
        }
    }

    public struct TagOptionSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Values", required: false, type: .list), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The TagOption value.
        public let values: [String]?
        /// The TagOption key.
        public let key: String?

        public init(values: [String]? = nil, key: String? = nil) {
            self.values = values
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case values = "Values"
            case key = "Key"
        }
    }

    public enum PrincipalType: String, CustomStringConvertible, Codable {
        case iam = "IAM"
        public var description: String { return self.rawValue }
    }

    public struct AssociatePrincipalWithPortfolioOutput: AWSShape {

    }

    public struct ListProvisionedProductPlansOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionedProductPlans", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the plans.
        public let provisionedProductPlans: [ProvisionedProductPlanSummary]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(provisionedProductPlans: [ProvisionedProductPlanSummary]? = nil, nextPageToken: String? = nil) {
            self.provisionedProductPlans = provisionedProductPlans
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case provisionedProductPlans = "ProvisionedProductPlans"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct DescribePortfolioOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptions", required: false, type: .list), 
            AWSShapeMember(label: "PortfolioDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// Information about the TagOptions associated with the portfolio.
        public let tagOptions: [TagOptionDetail]?
        /// Information about the portfolio.
        public let portfolioDetail: PortfolioDetail?
        /// Information about the tags associated with the portfolio.
        public let tags: [Tag]?

        public init(tagOptions: [TagOptionDetail]? = nil, portfolioDetail: PortfolioDetail? = nil, tags: [Tag]? = nil) {
            self.tagOptions = tagOptions
            self.portfolioDetail = portfolioDetail
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptions = "TagOptions"
            case portfolioDetail = "PortfolioDetail"
            case tags = "Tags"
        }
    }

    public struct ListProvisioningArtifactsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the provisioning artifacts.
        public let provisioningArtifactDetails: [ProvisioningArtifactDetail]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(provisioningArtifactDetails: [ProvisioningArtifactDetail]? = nil, nextPageToken: String? = nil) {
            self.provisioningArtifactDetails = provisioningArtifactDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactDetails = "ProvisioningArtifactDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ListTagOptionsFilters: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Active", required: false, type: .boolean), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The TagOption key.
        public let key: String?
        /// The active state.
        public let active: Bool?
        /// The TagOption value.
        public let value: String?

        public init(key: String? = nil, active: Bool? = nil, value: String? = nil) {
            self.key = key
            self.active = active
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case active = "Active"
            case value = "Value"
        }
    }

    public struct ListAcceptedPortfolioSharesInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "PortfolioShareType", required: false, type: .enum)
        ]
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The type of shared portfolios to list. The default is to list imported portfolios.    AWS_SERVICECATALOG - List default portfolios    IMPORTED - List imported portfolios  
        public let portfolioShareType: PortfolioShareType?

        public init(pageToken: String? = nil, acceptLanguage: String? = nil, pageSize: Int32? = nil, portfolioShareType: PortfolioShareType? = nil) {
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.pageSize = pageSize
            self.portfolioShareType = portfolioShareType
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
            case pageSize = "PageSize"
            case portfolioShareType = "PortfolioShareType"
        }
    }

    public struct DescribeRecordInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "Id", required: true, type: .string)
        ]
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The record identifier of the provisioned product. This identifier is returned by the request operation.
        public let id: String

        public init(pageToken: String? = nil, acceptLanguage: String? = nil, pageSize: Int32? = nil, id: String) {
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.pageSize = pageSize
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
            case pageSize = "PageSize"
            case id = "Id"
        }
    }

    public struct ResourceTargetDefinition: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RequiresRecreation", required: false, type: .enum), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Attribute", required: false, type: .enum)
        ]
        /// If the attribute is Properties, indicates whether a change to this property causes the resource to be re-created.
        public let requiresRecreation: RequiresRecreation?
        /// If the attribute is Properties, the value is the name of the property. Otherwise, the value is null.
        public let name: String?
        /// The attribute to be changed.
        public let attribute: ResourceAttribute?

        public init(requiresRecreation: RequiresRecreation? = nil, name: String? = nil, attribute: ResourceAttribute? = nil) {
            self.requiresRecreation = requiresRecreation
            self.name = name
            self.attribute = attribute
        }

        private enum CodingKeys: String, CodingKey {
            case requiresRecreation = "RequiresRecreation"
            case name = "Name"
            case attribute = "Attribute"
        }
    }

    public enum CopyOption: String, CustomStringConvertible, Codable {
        case copytags = "CopyTags"
        public var description: String { return self.rawValue }
    }

    public struct CreateProvisionedProductPlanOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionedProductName", required: false, type: .string), 
            AWSShapeMember(label: "PlanName", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "PlanId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionProductId", required: false, type: .string)
        ]
        /// The user-friendly name of the provisioned product.
        public let provisionedProductName: String?
        /// The name of the plan.
        public let planName: String?
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String?
        /// The plan identifier.
        public let planId: String?
        /// The product identifier.
        public let provisionProductId: String?

        public init(provisionedProductName: String? = nil, planName: String? = nil, provisioningArtifactId: String? = nil, planId: String? = nil, provisionProductId: String? = nil) {
            self.provisionedProductName = provisionedProductName
            self.planName = planName
            self.provisioningArtifactId = provisioningArtifactId
            self.planId = planId
            self.provisionProductId = provisionProductId
        }

        private enum CodingKeys: String, CodingKey {
            case provisionedProductName = "ProvisionedProductName"
            case planName = "PlanName"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case planId = "PlanId"
            case provisionProductId = "ProvisionProductId"
        }
    }

    public enum ProvisioningArtifactType: String, CustomStringConvertible, Codable {
        case cloudFormationTemplate = "CLOUD_FORMATION_TEMPLATE"
        case marketplaceAmi = "MARKETPLACE_AMI"
        case marketplaceCar = "MARKETPLACE_CAR"
        public var description: String { return self.rawValue }
    }

    public struct AccessLevelFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .enum), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The access level.    Account - Filter results based on the account.    Role - Filter results based on the federated role of the specified user.    User - Filter results based on the specified user.  
        public let key: AccessLevelFilterKey?
        /// The user to which the access level applies. The only supported value is Self.
        public let value: String?

        public init(key: AccessLevelFilterKey? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public enum ResourceAttribute: String, CustomStringConvertible, Codable {
        case properties = "PROPERTIES"
        case metadata = "METADATA"
        case creationpolicy = "CREATIONPOLICY"
        case updatepolicy = "UPDATEPOLICY"
        case deletionpolicy = "DELETIONPOLICY"
        case tags = "TAGS"
        public var description: String { return self.rawValue }
    }

    public struct ListConstraintsForPortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string)
        ]
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The product identifier.
        public let productId: String?
        /// The portfolio identifier.
        public let portfolioId: String

        public init(pageToken: String? = nil, acceptLanguage: String? = nil, pageSize: Int32? = nil, productId: String? = nil, portfolioId: String) {
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.pageSize = pageSize
            self.productId = productId
            self.portfolioId = portfolioId
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
            case pageSize = "PageSize"
            case productId = "ProductId"
            case portfolioId = "PortfolioId"
        }
    }

    public enum ProductSource: String, CustomStringConvertible, Codable {
        case account = "ACCOUNT"
        public var description: String { return self.rawValue }
    }

    public enum ProductType: String, CustomStringConvertible, Codable {
        case cloudFormationTemplate = "CLOUD_FORMATION_TEMPLATE"
        case marketplace = "MARKETPLACE"
        public var description: String { return self.rawValue }
    }

    public enum ProvisioningArtifactPropertyName: String, CustomStringConvertible, Codable {
        case id = "Id"
        public var description: String { return self.rawValue }
    }

    public struct UpdateProvisioningArtifactInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Active", required: false, type: .boolean), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The updated name of the provisioning artifact.
        public let name: String?
        /// Indicates whether the product version is active.
        public let active: Bool?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String
        /// The product identifier.
        public let productId: String
        /// The updated description of the provisioning artifact.
        public let description: String?

        public init(name: String? = nil, active: Bool? = nil, acceptLanguage: String? = nil, provisioningArtifactId: String, productId: String, description: String? = nil) {
            self.name = name
            self.active = active
            self.acceptLanguage = acceptLanguage
            self.provisioningArtifactId = provisioningArtifactId
            self.productId = productId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case active = "Active"
            case acceptLanguage = "AcceptLanguage"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case productId = "ProductId"
            case description = "Description"
        }
    }

    public struct ListRecordHistorySearchFilter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The filter key.    product - Filter results based on the specified product identifier.    provisionedproduct - Filter results based on the provisioned product identifier.  
        public let key: String?
        /// The filter value.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct ProvisionedProductPlanDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionProductId", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ProvisioningParameters", required: false, type: .list), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "PlanType", required: false, type: .enum), 
            AWSShapeMember(label: "PathId", required: false, type: .string), 
            AWSShapeMember(label: "PlanName", required: false, type: .string), 
            AWSShapeMember(label: "NotificationArns", required: false, type: .list), 
            AWSShapeMember(label: "PlanId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ProvisionProductName", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp)
        ]
        /// The product identifier.
        public let provisionProductId: String?
        /// The product identifier.
        public let productId: String?
        /// One or more tags.
        public let tags: [Tag]?
        /// Parameters specified by the administrator that are required for provisioning the product.
        public let provisioningParameters: [UpdateProvisioningParameter]?
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String?
        /// The status message.
        public let statusMessage: String?
        /// The plan type.
        public let planType: ProvisionedProductPlanType?
        /// The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use ListLaunchPaths.
        public let pathId: String?
        /// The name of the plan.
        public let planName: String?
        /// Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.
        public let notificationArns: [String]?
        /// The plan identifier.
        public let planId: String?
        /// The status.
        public let status: ProvisionedProductPlanStatus?
        /// The user-friendly name of the provisioned product.
        public let provisionProductName: String?
        /// The time when the plan was last updated.
        public let updatedTime: TimeStamp?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?

        public init(provisionProductId: String? = nil, productId: String? = nil, tags: [Tag]? = nil, provisioningParameters: [UpdateProvisioningParameter]? = nil, provisioningArtifactId: String? = nil, statusMessage: String? = nil, planType: ProvisionedProductPlanType? = nil, pathId: String? = nil, planName: String? = nil, notificationArns: [String]? = nil, planId: String? = nil, status: ProvisionedProductPlanStatus? = nil, provisionProductName: String? = nil, updatedTime: TimeStamp? = nil, createdTime: TimeStamp? = nil) {
            self.provisionProductId = provisionProductId
            self.productId = productId
            self.tags = tags
            self.provisioningParameters = provisioningParameters
            self.provisioningArtifactId = provisioningArtifactId
            self.statusMessage = statusMessage
            self.planType = planType
            self.pathId = pathId
            self.planName = planName
            self.notificationArns = notificationArns
            self.planId = planId
            self.status = status
            self.provisionProductName = provisionProductName
            self.updatedTime = updatedTime
            self.createdTime = createdTime
        }

        private enum CodingKeys: String, CodingKey {
            case provisionProductId = "ProvisionProductId"
            case productId = "ProductId"
            case tags = "Tags"
            case provisioningParameters = "ProvisioningParameters"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case statusMessage = "StatusMessage"
            case planType = "PlanType"
            case pathId = "PathId"
            case planName = "PlanName"
            case notificationArns = "NotificationArns"
            case planId = "PlanId"
            case status = "Status"
            case provisionProductName = "ProvisionProductName"
            case updatedTime = "UpdatedTime"
            case createdTime = "CreatedTime"
        }
    }

    public struct ScanProvisionedProductsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "AccessLevelFilter", required: false, type: .structure)
        ]
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The access level to use to obtain results. The default is User.
        public let accessLevelFilter: AccessLevelFilter?

        public init(pageToken: String? = nil, acceptLanguage: String? = nil, pageSize: Int32? = nil, accessLevelFilter: AccessLevelFilter? = nil) {
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.pageSize = pageSize
            self.accessLevelFilter = accessLevelFilter
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
            case pageSize = "PageSize"
            case accessLevelFilter = "AccessLevelFilter"
        }
    }

    public struct UpdateConstraintOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ConstraintParameters", required: false, type: .string)
        ]
        /// Information about the constraint.
        public let constraintDetail: ConstraintDetail?
        /// The status of the current request.
        public let status: Status?
        /// The constraint parameters.
        public let constraintParameters: String?

        public init(constraintDetail: ConstraintDetail? = nil, status: Status? = nil, constraintParameters: String? = nil) {
            self.constraintDetail = constraintDetail
            self.status = status
            self.constraintParameters = constraintParameters
        }

        private enum CodingKeys: String, CodingKey {
            case constraintDetail = "ConstraintDetail"
            case status = "Status"
            case constraintParameters = "ConstraintParameters"
        }
    }

    public struct ResourceChangeDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Target", required: false, type: .structure), 
            AWSShapeMember(label: "Evaluation", required: false, type: .enum), 
            AWSShapeMember(label: "CausingEntity", required: false, type: .string)
        ]
        /// Information about the resource attribute to be modified.
        public let target: ResourceTargetDefinition?
        /// For static evaluations, the value of the resource attribute will change and the new value is known. For dynamic evaluations, the value might change, and any new value will be determined when the plan is updated.
        public let evaluation: EvaluationType?
        /// The ID of the entity that caused the change.
        public let causingEntity: String?

        public init(target: ResourceTargetDefinition? = nil, evaluation: EvaluationType? = nil, causingEntity: String? = nil) {
            self.target = target
            self.evaluation = evaluation
            self.causingEntity = causingEntity
        }

        private enum CodingKeys: String, CodingKey {
            case target = "Target"
            case evaluation = "Evaluation"
            case causingEntity = "CausingEntity"
        }
    }

    public enum PortfolioShareType: String, CustomStringConvertible, Codable {
        case imported = "IMPORTED"
        case awsServicecatalog = "AWS_SERVICECATALOG"
        public var description: String { return self.rawValue }
    }

    public struct RejectPortfolioShareOutput: AWSShape {

    }

    public struct ListPortfolioAccessInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String

        public init(acceptLanguage: String? = nil, portfolioId: String) {
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case portfolioId = "PortfolioId"
        }
    }

    public struct DeleteConstraintInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The identifier of the constraint.
        public let id: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(id: String, acceptLanguage: String? = nil) {
            self.id = id
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct ProvisioningArtifactParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterType", required: false, type: .string), 
            AWSShapeMember(label: "DefaultValue", required: false, type: .string), 
            AWSShapeMember(label: "ParameterConstraints", required: false, type: .structure), 
            AWSShapeMember(label: "ParameterKey", required: false, type: .string), 
            AWSShapeMember(label: "IsNoEcho", required: false, type: .boolean), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The parameter type.
        public let parameterType: String?
        /// The default value.
        public let defaultValue: String?
        /// Constraints that the administrator has put on a parameter.
        public let parameterConstraints: ParameterConstraints?
        /// The parameter key.
        public let parameterKey: String?
        /// If this value is true, the value for this parameter is obfuscated from view when the parameter is retrieved. This parameter is used to hide sensitive information.
        public let isNoEcho: Bool?
        /// The description of the parameter.
        public let description: String?

        public init(parameterType: String? = nil, defaultValue: String? = nil, parameterConstraints: ParameterConstraints? = nil, parameterKey: String? = nil, isNoEcho: Bool? = nil, description: String? = nil) {
            self.parameterType = parameterType
            self.defaultValue = defaultValue
            self.parameterConstraints = parameterConstraints
            self.parameterKey = parameterKey
            self.isNoEcho = isNoEcho
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case parameterType = "ParameterType"
            case defaultValue = "DefaultValue"
            case parameterConstraints = "ParameterConstraints"
            case parameterKey = "ParameterKey"
            case isNoEcho = "IsNoEcho"
            case description = "Description"
        }
    }

    public struct DescribeProvisioningArtifactOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Info", required: false, type: .map)
        ]
        /// Information about the provisioning artifact.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?
        /// The status of the current request.
        public let status: Status?
        /// The URL of the CloudFormation template in Amazon S3.
        public let info: [String: String]?

        public init(provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, status: Status? = nil, info: [String: String]? = nil) {
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.status = status
            self.info = info
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactDetail = "ProvisioningArtifactDetail"
            case status = "Status"
            case info = "Info"
        }
    }

    public struct DeletePortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The portfolio identifier.
        public let id: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(id: String, acceptLanguage: String? = nil) {
            self.id = id
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct CreatePortfolioOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// Information about the portfolio.
        public let portfolioDetail: PortfolioDetail?
        /// Information about the tags associated with the portfolio.
        public let tags: [Tag]?

        public init(portfolioDetail: PortfolioDetail? = nil, tags: [Tag]? = nil) {
            self.portfolioDetail = portfolioDetail
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetail = "PortfolioDetail"
            case tags = "Tags"
        }
    }

    public struct ProvisioningArtifactSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ProvisioningArtifactMetadata", required: false, type: .map), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The name of the provisioning artifact.
        public let name: String?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The metadata for the provisioning artifact. This is used with AWS Marketplace products.
        public let provisioningArtifactMetadata: [String: String]?
        /// The description of the provisioning artifact.
        public let description: String?
        /// The identifier of the provisioning artifact.
        public let id: String?

        public init(name: String? = nil, createdTime: TimeStamp? = nil, provisioningArtifactMetadata: [String: String]? = nil, description: String? = nil, id: String? = nil) {
            self.name = name
            self.createdTime = createdTime
            self.provisioningArtifactMetadata = provisioningArtifactMetadata
            self.description = description
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case createdTime = "CreatedTime"
            case provisioningArtifactMetadata = "ProvisioningArtifactMetadata"
            case description = "Description"
            case id = "Id"
        }
    }

    public struct DisassociatePrincipalFromPortfolioOutput: AWSShape {

    }

    public struct DeletePortfolioShareOutput: AWSShape {

    }

    public struct ProvisionProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "ProvisionToken", required: true, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "ProvisioningParameters", required: false, type: .list), 
            AWSShapeMember(label: "NotificationArns", required: false, type: .list), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductName", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "PathId", required: false, type: .string)
        ]
        /// The product identifier.
        public let productId: String
        /// An idempotency token that uniquely identifies the provisioning request.
        public let provisionToken: String
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String
        /// Parameters specified by the administrator that are required for provisioning the product.
        public let provisioningParameters: [ProvisioningParameter]?
        /// Passed to CloudFormation. The SNS topic ARNs to which to publish stack-related events.
        public let notificationArns: [String]?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// A user-friendly name for the provisioned product. This value must be unique for the AWS account and cannot be updated after the product is provisioned.
        public let provisionedProductName: String
        /// One or more tags.
        public let tags: [Tag]?
        /// The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use ListLaunchPaths.
        public let pathId: String?

        public init(productId: String, provisionToken: String, provisioningArtifactId: String, provisioningParameters: [ProvisioningParameter]? = nil, notificationArns: [String]? = nil, acceptLanguage: String? = nil, provisionedProductName: String, tags: [Tag]? = nil, pathId: String? = nil) {
            self.productId = productId
            self.provisionToken = provisionToken
            self.provisioningArtifactId = provisioningArtifactId
            self.provisioningParameters = provisioningParameters
            self.notificationArns = notificationArns
            self.acceptLanguage = acceptLanguage
            self.provisionedProductName = provisionedProductName
            self.tags = tags
            self.pathId = pathId
        }

        private enum CodingKeys: String, CodingKey {
            case productId = "ProductId"
            case provisionToken = "ProvisionToken"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case provisioningParameters = "ProvisioningParameters"
            case notificationArns = "NotificationArns"
            case acceptLanguage = "AcceptLanguage"
            case provisionedProductName = "ProvisionedProductName"
            case tags = "Tags"
            case pathId = "PathId"
        }
    }

    public struct DisassociatePrincipalFromPortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "PrincipalARN", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The ARN of the principal (IAM user, role, or group).
        public let principalARN: String

        public init(acceptLanguage: String? = nil, portfolioId: String, principalARN: String) {
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.principalARN = principalARN
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case portfolioId = "PortfolioId"
            case principalARN = "PrincipalARN"
        }
    }

    public struct DescribeCopyProductStatusOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StatusDetail", required: false, type: .string), 
            AWSShapeMember(label: "TargetProductId", required: false, type: .string), 
            AWSShapeMember(label: "CopyProductStatus", required: false, type: .enum)
        ]
        /// The status message.
        public let statusDetail: String?
        /// The identifier of the copied product.
        public let targetProductId: String?
        /// The status of the copy product operation.
        public let copyProductStatus: CopyProductStatus?

        public init(statusDetail: String? = nil, targetProductId: String? = nil, copyProductStatus: CopyProductStatus? = nil) {
            self.statusDetail = statusDetail
            self.targetProductId = targetProductId
            self.copyProductStatus = copyProductStatus
        }

        private enum CodingKeys: String, CodingKey {
            case statusDetail = "StatusDetail"
            case targetProductId = "TargetProductId"
            case copyProductStatus = "CopyProductStatus"
        }
    }

    public struct DescribeProvisioningParametersOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintSummaries", required: false, type: .list), 
            AWSShapeMember(label: "ProvisioningArtifactParameters", required: false, type: .list), 
            AWSShapeMember(label: "TagOptions", required: false, type: .list), 
            AWSShapeMember(label: "UsageInstructions", required: false, type: .list)
        ]
        /// Information about the constraints used to provision the product.
        public let constraintSummaries: [ConstraintSummary]?
        /// Information about the parameters used to provision the product.
        public let provisioningArtifactParameters: [ProvisioningArtifactParameter]?
        /// Information about the TagOptions associated with the resource.
        public let tagOptions: [TagOptionSummary]?
        /// Any additional metadata specifically related to the provisioning of the product. For example, see the Version field of the CloudFormation template.
        public let usageInstructions: [UsageInstruction]?

        public init(constraintSummaries: [ConstraintSummary]? = nil, provisioningArtifactParameters: [ProvisioningArtifactParameter]? = nil, tagOptions: [TagOptionSummary]? = nil, usageInstructions: [UsageInstruction]? = nil) {
            self.constraintSummaries = constraintSummaries
            self.provisioningArtifactParameters = provisioningArtifactParameters
            self.tagOptions = tagOptions
            self.usageInstructions = usageInstructions
        }

        private enum CodingKeys: String, CodingKey {
            case constraintSummaries = "ConstraintSummaries"
            case provisioningArtifactParameters = "ProvisioningArtifactParameters"
            case tagOptions = "TagOptions"
            case usageInstructions = "UsageInstructions"
        }
    }

    public struct ListAcceptedPortfolioSharesOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the portfolios.
        public let portfolioDetails: [PortfolioDetail]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(portfolioDetails: [PortfolioDetail]? = nil, nextPageToken: String? = nil) {
            self.portfolioDetails = portfolioDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetails = "PortfolioDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct DescribeProductViewInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The product view identifier.
        public let id: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(id: String, acceptLanguage: String? = nil) {
            self.id = id
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct DeletePortfolioOutput: AWSShape {

    }

    public struct DisassociateProductFromPortfolioOutput: AWSShape {

    }

    public enum ChangeAction: String, CustomStringConvertible, Codable {
        case add = "ADD"
        case modify = "MODIFY"
        case remove = "REMOVE"
        public var description: String { return self.rawValue }
    }

    public struct DescribeRecordOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordOutputs", required: false, type: .list), 
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the product created as the result of a request. For example, the output for a CloudFormation-backed product that creates an S3 bucket would include the S3 bucket URL.
        public let recordOutputs: [RecordOutput]?
        /// Information about the product.
        public let recordDetail: RecordDetail?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(recordOutputs: [RecordOutput]? = nil, recordDetail: RecordDetail? = nil, nextPageToken: String? = nil) {
            self.recordOutputs = recordOutputs
            self.recordDetail = recordDetail
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case recordOutputs = "RecordOutputs"
            case recordDetail = "RecordDetail"
            case nextPageToken = "NextPageToken"
        }
    }

    public enum Replacement: String, CustomStringConvertible, Codable {
        case `true` = "TRUE"
        case `false` = "FALSE"
        case conditional = "CONDITIONAL"
        public var description: String { return self.rawValue }
    }

    public struct DeleteProductOutput: AWSShape {

    }

    public struct RecordTag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The key for this tag.
        public let key: String?
        /// The value for this tag.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct DescribeProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The product identifier.
        public let id: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(id: String, acceptLanguage: String? = nil) {
            self.id = id
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct UpdateProvisionedProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure)
        ]
        /// Information about the result of the request.
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetail = "RecordDetail"
        }
    }

    public struct LaunchPathSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ConstraintSummaries", required: false, type: .list), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The name of the portfolio to which the user was assigned.
        public let name: String?
        /// The constraints on the portfolio-product relationship.
        public let constraintSummaries: [ConstraintSummary]?
        /// The tags associated with this product path.
        public let tags: [Tag]?
        /// The identifier of the product path.
        public let id: String?

        public init(name: String? = nil, constraintSummaries: [ConstraintSummary]? = nil, tags: [Tag]? = nil, id: String? = nil) {
            self.name = name
            self.constraintSummaries = constraintSummaries
            self.tags = tags
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case constraintSummaries = "ConstraintSummaries"
            case tags = "Tags"
            case id = "Id"
        }
    }

    public struct ExecuteProvisionedProductPlanOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure)
        ]
        /// Information about the result of provisioning the product.
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetail = "RecordDetail"
        }
    }

    public struct DescribeProvisionedProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudWatchDashboards", required: false, type: .list), 
            AWSShapeMember(label: "ProvisionedProductDetail", required: false, type: .structure)
        ]
        /// Any CloudWatch dashboards that were created when provisioning the product.
        public let cloudWatchDashboards: [CloudWatchDashboard]?
        /// Information about the provisioned product.
        public let provisionedProductDetail: ProvisionedProductDetail?

        public init(cloudWatchDashboards: [CloudWatchDashboard]? = nil, provisionedProductDetail: ProvisionedProductDetail? = nil) {
            self.cloudWatchDashboards = cloudWatchDashboards
            self.provisionedProductDetail = provisionedProductDetail
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchDashboards = "CloudWatchDashboards"
            case provisionedProductDetail = "ProvisionedProductDetail"
        }
    }

    public struct ProvisionProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure)
        ]
        /// Information about the result of provisioning the product.
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetail = "RecordDetail"
        }
    }

    public struct DescribeConstraintInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The identifier of the constraint.
        public let id: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(id: String, acceptLanguage: String? = nil) {
            self.id = id
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct ParameterConstraints: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AllowedValues", required: false, type: .list)
        ]
        /// The values that the administrator has allowed for the parameter.
        public let allowedValues: [String]?

        public init(allowedValues: [String]? = nil) {
            self.allowedValues = allowedValues
        }

        private enum CodingKeys: String, CodingKey {
            case allowedValues = "AllowedValues"
        }
    }

    public struct DisassociateTagOptionFromResourceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "TagOptionId", required: true, type: .string)
        ]
        /// The resource identifier.
        public let resourceId: String
        /// The TagOption identifier.
        public let tagOptionId: String

        public init(resourceId: String, tagOptionId: String) {
            self.resourceId = resourceId
            self.tagOptionId = tagOptionId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tagOptionId = "TagOptionId"
        }
    }

    public struct RejectPortfolioShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String

        public init(acceptLanguage: String? = nil, portfolioId: String) {
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case portfolioId = "PortfolioId"
        }
    }

    public enum ProvisionedProductStatus: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case underChange = "UNDER_CHANGE"
        case tainted = "TAINTED"
        case error = "ERROR"
        case planInProgress = "PLAN_IN_PROGRESS"
        public var description: String { return self.rawValue }
    }

    public struct ListLaunchPathsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchPathSummaries", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the launch path.
        public let launchPathSummaries: [LaunchPathSummary]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(launchPathSummaries: [LaunchPathSummary]? = nil, nextPageToken: String? = nil) {
            self.launchPathSummaries = launchPathSummaries
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case launchPathSummaries = "LaunchPathSummaries"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ResourceChange: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PhysicalResourceId", required: false, type: .string), 
            AWSShapeMember(label: "Replacement", required: false, type: .enum), 
            AWSShapeMember(label: "Action", required: false, type: .enum), 
            AWSShapeMember(label: "ResourceType", required: false, type: .string), 
            AWSShapeMember(label: "LogicalResourceId", required: false, type: .string), 
            AWSShapeMember(label: "Details", required: false, type: .list), 
            AWSShapeMember(label: "Scope", required: false, type: .list)
        ]
        /// The ID of the resource, if it was already created.
        public let physicalResourceId: String?
        /// If the change type is Modify, indicates whether the existing resource is deleted and replaced with a new one.
        public let replacement: Replacement?
        /// The change action.
        public let action: ChangeAction?
        /// The type of resource.
        public let resourceType: String?
        /// The ID of the resource, as defined in the CloudFormation template.
        public let logicalResourceId: String?
        /// Information about the resource changes.
        public let details: [ResourceChangeDetail]?
        /// The change scope.
        public let scope: [ResourceAttribute]?

        public init(physicalResourceId: String? = nil, replacement: Replacement? = nil, action: ChangeAction? = nil, resourceType: String? = nil, logicalResourceId: String? = nil, details: [ResourceChangeDetail]? = nil, scope: [ResourceAttribute]? = nil) {
            self.physicalResourceId = physicalResourceId
            self.replacement = replacement
            self.action = action
            self.resourceType = resourceType
            self.logicalResourceId = logicalResourceId
            self.details = details
            self.scope = scope
        }

        private enum CodingKeys: String, CodingKey {
            case physicalResourceId = "PhysicalResourceId"
            case replacement = "Replacement"
            case action = "Action"
            case resourceType = "ResourceType"
            case logicalResourceId = "LogicalResourceId"
            case details = "Details"
            case scope = "Scope"
        }
    }

    public struct CreatePortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProviderName", required: true, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "DisplayName", required: true, type: .string)
        ]
        /// The name of the portfolio provider.
        public let providerName: String
        /// One or more tags.
        public let tags: [Tag]?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String
        /// The description of the portfolio.
        public let description: String?
        /// The name to use for display purposes.
        public let displayName: String

        public init(providerName: String, tags: [Tag]? = nil, acceptLanguage: String? = nil, idempotencyToken: String, description: String? = nil, displayName: String) {
            self.providerName = providerName
            self.tags = tags
            self.acceptLanguage = acceptLanguage
            self.idempotencyToken = idempotencyToken
            self.description = description
            self.displayName = displayName
        }

        private enum CodingKeys: String, CodingKey {
            case providerName = "ProviderName"
            case tags = "Tags"
            case acceptLanguage = "AcceptLanguage"
            case idempotencyToken = "IdempotencyToken"
            case description = "Description"
            case displayName = "DisplayName"
        }
    }

    public struct ConstraintDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "ConstraintId", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .string)
        ]
        /// The type of constraint.    LAUNCH     NOTIFICATION     TEMPLATE   
        public let `type`: String?
        /// The identifier of the constraint.
        public let constraintId: String?
        /// The description of the constraint.
        public let description: String?
        /// The owner of the constraint.
        public let owner: String?

        public init(type: String? = nil, constraintId: String? = nil, description: String? = nil, owner: String? = nil) {
            self.`type` = `type`
            self.constraintId = constraintId
            self.description = description
            self.owner = owner
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case constraintId = "ConstraintId"
            case description = "Description"
            case owner = "Owner"
        }
    }

    public struct CreatePortfolioShareOutput: AWSShape {

    }

    public struct ListPortfolioAccessOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AccountIds", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the AWS accounts with access to the portfolio.
        public let accountIds: [String]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(accountIds: [String]? = nil, nextPageToken: String? = nil) {
            self.accountIds = accountIds
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case accountIds = "AccountIds"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct DeletePortfolioShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "AccountId", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The AWS account ID.
        public let accountId: String

        public init(acceptLanguage: String? = nil, portfolioId: String, accountId: String) {
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case portfolioId = "PortfolioId"
            case accountId = "AccountId"
        }
    }

    public enum RecordStatus: String, CustomStringConvertible, Codable {
        case created = "CREATED"
        case inProgress = "IN_PROGRESS"
        case inProgressInError = "IN_PROGRESS_IN_ERROR"
        case succeeded = "SUCCEEDED"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct DescribeProvisioningParametersInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "PathId", required: false, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String
        /// The product identifier.
        public let productId: String
        /// The path identifier of the product. This value is optional if the product has a default path, and required if the product has more than one path. To list the paths for a product, use ListLaunchPaths.
        public let pathId: String?

        public init(acceptLanguage: String? = nil, provisioningArtifactId: String, productId: String, pathId: String? = nil) {
            self.acceptLanguage = acceptLanguage
            self.provisioningArtifactId = provisioningArtifactId
            self.productId = productId
            self.pathId = pathId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case productId = "ProductId"
            case pathId = "PathId"
        }
    }

    public enum ProvisionedProductViewFilterBy: String, CustomStringConvertible, Codable {
        case searchquery = "SearchQuery"
        public var description: String { return self.rawValue }
    }

    public enum ProductViewFilterBy: String, CustomStringConvertible, Codable {
        case fulltextsearch = "FullTextSearch"
        case owner = "Owner"
        case producttype = "ProductType"
        case sourceproductid = "SourceProductId"
        public var description: String { return self.rawValue }
    }

    public struct UpdateProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "AddTags", required: false, type: .list), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Distributor", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "SupportEmail", required: false, type: .string), 
            AWSShapeMember(label: "Owner", required: false, type: .string), 
            AWSShapeMember(label: "SupportDescription", required: false, type: .string), 
            AWSShapeMember(label: "RemoveTags", required: false, type: .list), 
            AWSShapeMember(label: "SupportUrl", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The product identifier.
        public let id: String
        /// The tags to add to the product.
        public let addTags: [Tag]?
        /// The updated product name.
        public let name: String?
        /// The updated distributor of the product.
        public let distributor: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The updated support email for the product.
        public let supportEmail: String?
        /// The updated owner of the product.
        public let owner: String?
        /// The updated support description for the product.
        public let supportDescription: String?
        /// The tags to remove from the product.
        public let removeTags: [String]?
        /// The updated support URL for the product.
        public let supportUrl: String?
        /// The updated description of the product.
        public let description: String?

        public init(id: String, addTags: [Tag]? = nil, name: String? = nil, distributor: String? = nil, acceptLanguage: String? = nil, supportEmail: String? = nil, owner: String? = nil, supportDescription: String? = nil, removeTags: [String]? = nil, supportUrl: String? = nil, description: String? = nil) {
            self.id = id
            self.addTags = addTags
            self.name = name
            self.distributor = distributor
            self.acceptLanguage = acceptLanguage
            self.supportEmail = supportEmail
            self.owner = owner
            self.supportDescription = supportDescription
            self.removeTags = removeTags
            self.supportUrl = supportUrl
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case addTags = "AddTags"
            case name = "Name"
            case distributor = "Distributor"
            case acceptLanguage = "AcceptLanguage"
            case supportEmail = "SupportEmail"
            case owner = "Owner"
            case supportDescription = "SupportDescription"
            case removeTags = "RemoveTags"
            case supportUrl = "SupportUrl"
            case description = "Description"
        }
    }

    public struct DeleteTagOptionOutput: AWSShape {

    }

    public struct SearchProvisionedProductsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextPageToken", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProducts", required: false, type: .list), 
            AWSShapeMember(label: "TotalResultsCount", required: false, type: .integer)
        ]
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?
        /// Information about the provisioned products.
        public let provisionedProducts: [ProvisionedProductAttribute]?
        /// The number of provisioned products found.
        public let totalResultsCount: Int32?

        public init(nextPageToken: String? = nil, provisionedProducts: [ProvisionedProductAttribute]? = nil, totalResultsCount: Int32? = nil) {
            self.nextPageToken = nextPageToken
            self.provisionedProducts = provisionedProducts
            self.totalResultsCount = totalResultsCount
        }

        private enum CodingKeys: String, CodingKey {
            case nextPageToken = "NextPageToken"
            case provisionedProducts = "ProvisionedProducts"
            case totalResultsCount = "TotalResultsCount"
        }
    }

    public struct ListTagOptionsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Filters", required: false, type: .structure), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The search filters. If no search filters are specified, the output includes all TagOptions.
        public let filters: ListTagOptionsFilters?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(filters: ListTagOptionsFilters? = nil, pageSize: Int32? = nil, pageToken: String? = nil) {
            self.filters = filters
            self.pageSize = pageSize
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case filters = "Filters"
            case pageSize = "PageSize"
            case pageToken = "PageToken"
        }
    }

    public struct RecordOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "OutputValue", required: false, type: .string), 
            AWSShapeMember(label: "OutputKey", required: false, type: .string)
        ]
        /// The description of the output.
        public let description: String?
        /// The output value.
        public let outputValue: String?
        /// The output key.
        public let outputKey: String?

        public init(description: String? = nil, outputValue: String? = nil, outputKey: String? = nil) {
            self.description = description
            self.outputValue = outputValue
            self.outputKey = outputKey
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case outputValue = "OutputValue"
            case outputKey = "OutputKey"
        }
    }

    public struct RecordDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordTags", required: false, type: .list), 
            AWSShapeMember(label: "RecordType", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductType", required: false, type: .string), 
            AWSShapeMember(label: "RecordErrors", required: false, type: .list), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "PathId", required: false, type: .string), 
            AWSShapeMember(label: "RecordId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductName", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ProvisionedProductId", required: false, type: .string), 
            AWSShapeMember(label: "UpdatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp)
        ]
        /// One or more tags.
        public let recordTags: [RecordTag]?
        /// The record type.    PROVISION_PRODUCT     UPDATE_PROVISIONED_PRODUCT     TERMINATE_PROVISIONED_PRODUCT   
        public let recordType: String?
        /// The product identifier.
        public let productId: String?
        /// The type of provisioned product. The supported value is CFN_STACK.
        public let provisionedProductType: String?
        /// The errors that occurred.
        public let recordErrors: [RecordError]?
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String?
        /// The path identifier.
        public let pathId: String?
        /// The identifier of the record.
        public let recordId: String?
        /// The user-friendly name of the provisioned product.
        public let provisionedProductName: String?
        /// The status of the provisioned product.    CREATED - The request was created but the operation has not started.    IN_PROGRESS - The requested operation is in progress.    IN_PROGRESS_IN_ERROR - The provisioned product is under change but the requested operation failed and some remediation is occurring. For example, a rollback.    SUCCEEDED - The requested operation has successfully completed.    FAILED - The requested operation has unsuccessfully completed. Investigate using the error messages returned.  
        public let status: RecordStatus?
        /// The identifier of the provisioned product.
        public let provisionedProductId: String?
        /// The time when the record was last updated.
        public let updatedTime: TimeStamp?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?

        public init(recordTags: [RecordTag]? = nil, recordType: String? = nil, productId: String? = nil, provisionedProductType: String? = nil, recordErrors: [RecordError]? = nil, provisioningArtifactId: String? = nil, pathId: String? = nil, recordId: String? = nil, provisionedProductName: String? = nil, status: RecordStatus? = nil, provisionedProductId: String? = nil, updatedTime: TimeStamp? = nil, createdTime: TimeStamp? = nil) {
            self.recordTags = recordTags
            self.recordType = recordType
            self.productId = productId
            self.provisionedProductType = provisionedProductType
            self.recordErrors = recordErrors
            self.provisioningArtifactId = provisioningArtifactId
            self.pathId = pathId
            self.recordId = recordId
            self.provisionedProductName = provisionedProductName
            self.status = status
            self.provisionedProductId = provisionedProductId
            self.updatedTime = updatedTime
            self.createdTime = createdTime
        }

        private enum CodingKeys: String, CodingKey {
            case recordTags = "RecordTags"
            case recordType = "RecordType"
            case productId = "ProductId"
            case provisionedProductType = "ProvisionedProductType"
            case recordErrors = "RecordErrors"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case pathId = "PathId"
            case recordId = "RecordId"
            case provisionedProductName = "ProvisionedProductName"
            case status = "Status"
            case provisionedProductId = "ProvisionedProductId"
            case updatedTime = "UpdatedTime"
            case createdTime = "CreatedTime"
        }
    }

    public struct TerminateProvisionedProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecordDetail", required: false, type: .structure)
        ]
        /// Information about the result of this request.
        public let recordDetail: RecordDetail?

        public init(recordDetail: RecordDetail? = nil) {
            self.recordDetail = recordDetail
        }

        private enum CodingKeys: String, CodingKey {
            case recordDetail = "RecordDetail"
        }
    }

    public struct DescribeProvisioningArtifactInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Verbose", required: false, type: .boolean), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: true, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string)
        ]
        /// Indicates whether a verbose level of detail is enabled.
        public let verbose: Bool?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String
        /// The product identifier.
        public let productId: String

        public init(verbose: Bool? = nil, acceptLanguage: String? = nil, provisioningArtifactId: String, productId: String) {
            self.verbose = verbose
            self.acceptLanguage = acceptLanguage
            self.provisioningArtifactId = provisioningArtifactId
            self.productId = productId
        }

        private enum CodingKeys: String, CodingKey {
            case verbose = "Verbose"
            case acceptLanguage = "AcceptLanguage"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case productId = "ProductId"
        }
    }

    public struct DeleteProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The product identifier.
        public let id: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(id: String, acceptLanguage: String? = nil) {
            self.id = id
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct UpdateProvisionedProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionedProductId", required: false, type: .string), 
            AWSShapeMember(label: "UpdateToken", required: true, type: .string), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisioningParameters", required: false, type: .list), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductName", required: false, type: .string), 
            AWSShapeMember(label: "PathId", required: false, type: .string)
        ]
        /// The identifier of the provisioned product. You cannot specify both ProvisionedProductName and ProvisionedProductId.
        public let provisionedProductId: String?
        /// The idempotency token that uniquely identifies the provisioning update request.
        public let updateToken: String
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String?
        /// The identifier of the provisioned product.
        public let productId: String?
        /// The new parameters.
        public let provisioningParameters: [UpdateProvisioningParameter]?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The updated name of the provisioned product. You cannot specify both ProvisionedProductName and ProvisionedProductId.
        public let provisionedProductName: String?
        /// The new path identifier. This value is optional if the product has a default path, and required if the product has more than one path.
        public let pathId: String?

        public init(provisionedProductId: String? = nil, updateToken: String, provisioningArtifactId: String? = nil, productId: String? = nil, provisioningParameters: [UpdateProvisioningParameter]? = nil, acceptLanguage: String? = nil, provisionedProductName: String? = nil, pathId: String? = nil) {
            self.provisionedProductId = provisionedProductId
            self.updateToken = updateToken
            self.provisioningArtifactId = provisioningArtifactId
            self.productId = productId
            self.provisioningParameters = provisioningParameters
            self.acceptLanguage = acceptLanguage
            self.provisionedProductName = provisionedProductName
            self.pathId = pathId
        }

        private enum CodingKeys: String, CodingKey {
            case provisionedProductId = "ProvisionedProductId"
            case updateToken = "UpdateToken"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case productId = "ProductId"
            case provisioningParameters = "ProvisioningParameters"
            case acceptLanguage = "AcceptLanguage"
            case provisionedProductName = "ProvisionedProductName"
            case pathId = "PathId"
        }
    }

    public struct CreateProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ProductViewDetail", required: false, type: .structure), 
            AWSShapeMember(label: "ProvisioningArtifactDetail", required: false, type: .structure)
        ]
        /// Information about the tags associated with the product.
        public let tags: [Tag]?
        /// Information about the product view.
        public let productViewDetail: ProductViewDetail?
        /// Information about the provisioning artifact.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?

        public init(tags: [Tag]? = nil, productViewDetail: ProductViewDetail? = nil, provisioningArtifactDetail: ProvisioningArtifactDetail? = nil) {
            self.tags = tags
            self.productViewDetail = productViewDetail
            self.provisioningArtifactDetail = provisioningArtifactDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case productViewDetail = "ProductViewDetail"
            case provisioningArtifactDetail = "ProvisioningArtifactDetail"
        }
    }

    public struct DeleteConstraintOutput: AWSShape {

    }

    public struct AssociateTagOptionWithResourceInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceId", required: true, type: .string), 
            AWSShapeMember(label: "TagOptionId", required: true, type: .string)
        ]
        /// The resource identifier.
        public let resourceId: String
        /// The TagOption identifier.
        public let tagOptionId: String

        public init(resourceId: String, tagOptionId: String) {
            self.resourceId = resourceId
            self.tagOptionId = tagOptionId
        }

        private enum CodingKeys: String, CodingKey {
            case resourceId = "ResourceId"
            case tagOptionId = "TagOptionId"
        }
    }

    public enum SortOrder: String, CustomStringConvertible, Codable {
        case ascending = "ASCENDING"
        case descending = "DESCENDING"
        public var description: String { return self.rawValue }
    }

    public struct DisassociateTagOptionFromResourceOutput: AWSShape {

    }

    public struct ProvisionedProductDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "IdempotencyToken", required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "LastRecordId", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string)
        ]
        /// The current status of the provisioned product.    AVAILABLE - Stable state, ready to perform any operation. The most recent operation succeeded and completed.    UNDER_CHANGE - Transitive state, operations performed might not have valid results. Wait for an AVAILABLE status before performing operations.    TAINTED - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.    ERROR - An unexpected error occurred, the provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack.  
        public let status: ProvisionedProductStatus?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The type of provisioned product. The supported value is CFN_STACK.
        public let `type`: String?
        /// The ARN of the provisioned product.
        public let arn: String?
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String?
        /// The current status message of the provisioned product.
        public let statusMessage: String?
        /// The identifier of the provisioned product.
        public let id: String?
        /// The record identifier of the last request performed on this provisioned product.
        public let lastRecordId: String?
        /// The user-friendly name of the provisioned product.
        public let name: String?

        public init(status: ProvisionedProductStatus? = nil, createdTime: TimeStamp? = nil, type: String? = nil, arn: String? = nil, idempotencyToken: String? = nil, statusMessage: String? = nil, id: String? = nil, lastRecordId: String? = nil, name: String? = nil) {
            self.status = status
            self.createdTime = createdTime
            self.`type` = `type`
            self.arn = arn
            self.idempotencyToken = idempotencyToken
            self.statusMessage = statusMessage
            self.id = id
            self.lastRecordId = lastRecordId
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case createdTime = "CreatedTime"
            case `type` = "Type"
            case arn = "Arn"
            case idempotencyToken = "IdempotencyToken"
            case statusMessage = "StatusMessage"
            case id = "Id"
            case lastRecordId = "LastRecordId"
            case name = "Name"
        }
    }

    public struct Principal: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PrincipalARN", required: false, type: .string), 
            AWSShapeMember(label: "PrincipalType", required: false, type: .enum)
        ]
        /// The ARN of the principal (IAM user, role, or group).
        public let principalARN: String?
        /// The principal type. The supported value is IAM.
        public let principalType: PrincipalType?

        public init(principalARN: String? = nil, principalType: PrincipalType? = nil) {
            self.principalARN = principalARN
            self.principalType = principalType
        }

        private enum CodingKeys: String, CodingKey {
            case principalARN = "PrincipalARN"
            case principalType = "PrincipalType"
        }
    }

    public enum ProvisionedProductPlanType: String, CustomStringConvertible, Codable {
        case cloudformation = "CLOUDFORMATION"
        public var description: String { return self.rawValue }
    }

    public struct DisassociateProductFromPortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The product identifier.
        public let productId: String
        /// The portfolio identifier.
        public let portfolioId: String

        public init(acceptLanguage: String? = nil, productId: String, portfolioId: String) {
            self.acceptLanguage = acceptLanguage
            self.productId = productId
            self.portfolioId = portfolioId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case productId = "ProductId"
            case portfolioId = "PortfolioId"
        }
    }

    public enum EvaluationType: String, CustomStringConvertible, Codable {
        case `static` = "STATIC"
        case dynamic = "DYNAMIC"
        public var description: String { return self.rawValue }
    }

    public struct UpdateProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProductViewDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// Information about the product view.
        public let productViewDetail: ProductViewDetail?
        /// Information about the tags associated with the product.
        public let tags: [Tag]?

        public init(productViewDetail: ProductViewDetail? = nil, tags: [Tag]? = nil) {
            self.productViewDetail = productViewDetail
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case productViewDetail = "ProductViewDetail"
            case tags = "Tags"
        }
    }

    public struct DeleteProvisioningArtifactOutput: AWSShape {

    }

    public struct ProvisioningParameter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The parameter key.
        public let key: String?
        /// The parameter value.
        public let value: String?

        public init(key: String? = nil, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct CopyProductOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CopyProductToken", required: false, type: .string)
        ]
        /// The token to use to track the progress of the operation.
        public let copyProductToken: String?

        public init(copyProductToken: String? = nil) {
            self.copyProductToken = copyProductToken
        }

        private enum CodingKeys: String, CodingKey {
            case copyProductToken = "CopyProductToken"
        }
    }

    public struct ListPortfoliosOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PortfolioDetails", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the portfolios.
        public let portfolioDetails: [PortfolioDetail]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(portfolioDetails: [PortfolioDetail]? = nil, nextPageToken: String? = nil) {
            self.portfolioDetails = portfolioDetails
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case portfolioDetails = "PortfolioDetails"
            case nextPageToken = "NextPageToken"
        }
    }

    public enum ProductViewSortBy: String, CustomStringConvertible, Codable {
        case title = "Title"
        case versioncount = "VersionCount"
        case creationdate = "CreationDate"
        public var description: String { return self.rawValue }
    }

    public struct TagOptionDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Active", required: false, type: .boolean), 
            AWSShapeMember(label: "Key", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The TagOption active state.
        public let active: Bool?
        /// The TagOption key.
        public let key: String?
        /// The TagOption value.
        public let value: String?
        /// The TagOption identifier.
        public let id: String?

        public init(active: Bool? = nil, key: String? = nil, value: String? = nil, id: String? = nil) {
            self.active = active
            self.key = key
            self.value = value
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case active = "Active"
            case key = "Key"
            case value = "Value"
            case id = "Id"
        }
    }

    public struct CreateProvisioningArtifactOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisioningArtifactDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "Info", required: false, type: .map)
        ]
        /// Information about the provisioning artifact.
        public let provisioningArtifactDetail: ProvisioningArtifactDetail?
        /// The status of the current request.
        public let status: Status?
        /// The URL of the CloudFormation template in Amazon S3, in JSON format.
        public let info: [String: String]?

        public init(provisioningArtifactDetail: ProvisioningArtifactDetail? = nil, status: Status? = nil, info: [String: String]? = nil) {
            self.provisioningArtifactDetail = provisioningArtifactDetail
            self.status = status
            self.info = info
        }

        private enum CodingKeys: String, CodingKey {
            case provisioningArtifactDetail = "ProvisioningArtifactDetail"
            case status = "Status"
            case info = "Info"
        }
    }

    public struct ProvisioningArtifactDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Active", required: false, type: .boolean), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The name of the provisioning artifact.
        public let name: String?
        /// Indicates whether the product version is active.
        public let active: Bool?
        /// The type of provisioning artifact.    CLOUD_FORMATION_TEMPLATE - AWS CloudFormation template    MARKETPLACE_AMI - AWS Marketplace AMI    MARKETPLACE_CAR - AWS Marketplace Clusters and AWS Resources  
        public let `type`: ProvisioningArtifactType?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The description of the provisioning artifact.
        public let description: String?
        /// The identifier of the provisioning artifact.
        public let id: String?

        public init(name: String? = nil, active: Bool? = nil, type: ProvisioningArtifactType? = nil, createdTime: TimeStamp? = nil, description: String? = nil, id: String? = nil) {
            self.name = name
            self.active = active
            self.`type` = `type`
            self.createdTime = createdTime
            self.description = description
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case active = "Active"
            case `type` = "Type"
            case createdTime = "CreatedTime"
            case description = "Description"
            case id = "Id"
        }
    }

    public struct ProvisionedProductAttribute: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Arn", required: false, type: .string), 
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "ProvisioningArtifactId", required: false, type: .string), 
            AWSShapeMember(label: "StatusMessage", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "UserArn", required: false, type: .string), 
            AWSShapeMember(label: "LastRecordId", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "PhysicalId", required: false, type: .string), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "IdempotencyToken", required: false, type: .string), 
            AWSShapeMember(label: "UserArnSession", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp)
        ]
        /// The ARN of the provisioned product.
        public let arn: String?
        /// The user-friendly name of the provisioned product.
        public let name: String?
        /// The product identifier.
        public let productId: String?
        /// One or more tags.
        public let tags: [Tag]?
        /// The identifier of the provisioning artifact.
        public let provisioningArtifactId: String?
        /// The current status message of the provisioned product.
        public let statusMessage: String?
        /// The type of provisioned product. The supported value is CFN_STACK.
        public let `type`: String?
        /// The Amazon Resource Name (ARN) of the IAM user.
        public let userArn: String?
        /// The record identifier of the last request performed on this provisioned product.
        public let lastRecordId: String?
        /// The identifier of the provisioned product.
        public let id: String?
        /// The assigned identifier for the resource, such as an EC2 instance ID or an S3 bucket name.
        public let physicalId: String?
        /// The current status of the provisioned product.    AVAILABLE - Stable state, ready to perform any operation. The most recent operation succeeded and completed.    UNDER_CHANGE - Transitive state, operations performed might not have valid results. Wait for an AVAILABLE status before performing operations.    TAINTED - Stable state, ready to perform any operation. The stack has completed the requested operation but is not exactly what was requested. For example, a request to update to a new version failed and the stack rolled back to the current version.    ERROR - An unexpected error occurred, the provisioned product exists but the stack is not running. For example, CloudFormation received a parameter value that was not valid and could not launch the stack.  
        public let status: ProvisionedProductStatus?
        /// A unique identifier that you provide to ensure idempotency. If multiple requests differ only by the idempotency token, the same response is returned for each repeated request.
        public let idempotencyToken: String?
        /// The ARN of the IAM user in the session. This ARN might contain a session ID.
        public let userArnSession: String?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?

        public init(arn: String? = nil, name: String? = nil, productId: String? = nil, tags: [Tag]? = nil, provisioningArtifactId: String? = nil, statusMessage: String? = nil, type: String? = nil, userArn: String? = nil, lastRecordId: String? = nil, id: String? = nil, physicalId: String? = nil, status: ProvisionedProductStatus? = nil, idempotencyToken: String? = nil, userArnSession: String? = nil, createdTime: TimeStamp? = nil) {
            self.arn = arn
            self.name = name
            self.productId = productId
            self.tags = tags
            self.provisioningArtifactId = provisioningArtifactId
            self.statusMessage = statusMessage
            self.`type` = `type`
            self.userArn = userArn
            self.lastRecordId = lastRecordId
            self.id = id
            self.physicalId = physicalId
            self.status = status
            self.idempotencyToken = idempotencyToken
            self.userArnSession = userArnSession
            self.createdTime = createdTime
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "Arn"
            case name = "Name"
            case productId = "ProductId"
            case tags = "Tags"
            case provisioningArtifactId = "ProvisioningArtifactId"
            case statusMessage = "StatusMessage"
            case `type` = "Type"
            case userArn = "UserArn"
            case lastRecordId = "LastRecordId"
            case id = "Id"
            case physicalId = "PhysicalId"
            case status = "Status"
            case idempotencyToken = "IdempotencyToken"
            case userArnSession = "UserArnSession"
            case createdTime = "CreatedTime"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]
        /// The tag key.
        public let key: String
        /// The value for this key.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct DescribeConstraintOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ConstraintParameters", required: false, type: .string)
        ]
        /// Information about the constraint.
        public let constraintDetail: ConstraintDetail?
        /// The status of the current request.
        public let status: Status?
        /// The constraint parameters.
        public let constraintParameters: String?

        public init(constraintDetail: ConstraintDetail? = nil, status: Status? = nil, constraintParameters: String? = nil) {
            self.constraintDetail = constraintDetail
            self.status = status
            self.constraintParameters = constraintParameters
        }

        private enum CodingKeys: String, CodingKey {
            case constraintDetail = "ConstraintDetail"
            case status = "Status"
            case constraintParameters = "ConstraintParameters"
        }
    }

    public struct ListTagOptionsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionDetails", required: false, type: .list), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// Information about the TagOptions.
        public let tagOptionDetails: [TagOptionDetail]?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(tagOptionDetails: [TagOptionDetail]? = nil, pageToken: String? = nil) {
            self.tagOptionDetails = tagOptionDetails
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionDetails = "TagOptionDetails"
            case pageToken = "PageToken"
        }
    }

    public struct RecordError: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Code", required: false, type: .string)
        ]
        /// The description of the error.
        public let description: String?
        /// The numeric value of the error.
        public let code: String?

        public init(description: String? = nil, code: String? = nil) {
            self.description = description
            self.code = code
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case code = "Code"
        }
    }

    public struct UpdateConstraintInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The updated description of the constraint.
        public let description: String?
        /// The identifier of the constraint.
        public let id: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(description: String? = nil, id: String, acceptLanguage: String? = nil) {
            self.description = description
            self.id = id
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case id = "Id"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct DescribeProductAsAdminInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The product identifier.
        public let id: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(id: String, acceptLanguage: String? = nil) {
            self.id = id
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public enum AccessLevelFilterKey: String, CustomStringConvertible, Codable {
        case account = "Account"
        case role = "Role"
        case user = "User"
        public var description: String { return self.rawValue }
    }

    public struct UsageInstruction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Type", required: false, type: .string), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The usage instruction type for the value.
        public let `type`: String?
        /// The usage instruction value for this type.
        public let value: String?

        public init(type: String? = nil, value: String? = nil) {
            self.`type` = `type`
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case `type` = "Type"
            case value = "Value"
        }
    }

    public struct ListPortfoliosInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(acceptLanguage: String? = nil, pageSize: Int32? = nil, pageToken: String? = nil) {
            self.acceptLanguage = acceptLanguage
            self.pageSize = pageSize
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case pageSize = "PageSize"
            case pageToken = "PageToken"
        }
    }

    public struct DescribePortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The portfolio identifier.
        public let id: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(id: String, acceptLanguage: String? = nil) {
            self.id = id
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct ResourceDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ARN", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string)
        ]
        /// The name of the resource.
        public let name: String?
        /// The creation time of the resource.
        public let createdTime: TimeStamp?
        /// The ARN of the resource.
        public let arn: String?
        /// The description of the resource.
        public let description: String?
        /// The identifier of the resource.
        public let id: String?

        public init(name: String? = nil, createdTime: TimeStamp? = nil, arn: String? = nil, description: String? = nil, id: String? = nil) {
            self.name = name
            self.createdTime = createdTime
            self.arn = arn
            self.description = description
            self.id = id
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case createdTime = "CreatedTime"
            case arn = "ARN"
            case description = "Description"
            case id = "Id"
        }
    }

    public struct CreateTagOptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string), 
            AWSShapeMember(label: "Value", required: true, type: .string)
        ]
        /// The TagOption key.
        public let key: String
        /// The TagOption value.
        public let value: String

        public init(key: String, value: String) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case value = "Value"
        }
    }

    public struct ListPrincipalsForPortfolioOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Principals", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// The IAM principals (users or roles) associated with the portfolio.
        public let principals: [Principal]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(principals: [Principal]? = nil, nextPageToken: String? = nil) {
            self.principals = principals
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case principals = "Principals"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct AssociateProductWithPortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "SourcePortfolioId", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The identifier of the source portfolio.
        public let sourcePortfolioId: String?
        /// The product identifier.
        public let productId: String
        /// The portfolio identifier.
        public let portfolioId: String

        public init(acceptLanguage: String? = nil, sourcePortfolioId: String? = nil, productId: String, portfolioId: String) {
            self.acceptLanguage = acceptLanguage
            self.sourcePortfolioId = sourcePortfolioId
            self.productId = productId
            self.portfolioId = portfolioId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case sourcePortfolioId = "SourcePortfolioId"
            case productId = "ProductId"
            case portfolioId = "PortfolioId"
        }
    }

    public struct DescribeTagOptionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionDetail", required: false, type: .structure)
        ]
        /// Information about the TagOption.
        public let tagOptionDetail: TagOptionDetail?

        public init(tagOptionDetail: TagOptionDetail? = nil) {
            self.tagOptionDetail = tagOptionDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionDetail = "TagOptionDetail"
        }
    }

    public struct TerminateProvisionedProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionedProductId", required: false, type: .string), 
            AWSShapeMember(label: "ProvisionedProductName", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "IgnoreErrors", required: false, type: .boolean), 
            AWSShapeMember(label: "TerminateToken", required: true, type: .string)
        ]
        /// The identifier of the provisioned product. You cannot specify both ProvisionedProductName and ProvisionedProductId.
        public let provisionedProductId: String?
        /// The name of the provisioned product. You cannot specify both ProvisionedProductName and ProvisionedProductId.
        public let provisionedProductName: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// If set to true, AWS Service Catalog stops managing the specified provisioned product even if it cannot delete the underlying resources.
        public let ignoreErrors: Bool?
        /// An idempotency token that uniquely identifies the termination request. This token is only valid during the termination process. After the provisioned product is terminated, subsequent requests to terminate the same provisioned product always return ResourceNotFound.
        public let terminateToken: String

        public init(provisionedProductId: String? = nil, provisionedProductName: String? = nil, acceptLanguage: String? = nil, ignoreErrors: Bool? = nil, terminateToken: String) {
            self.provisionedProductId = provisionedProductId
            self.provisionedProductName = provisionedProductName
            self.acceptLanguage = acceptLanguage
            self.ignoreErrors = ignoreErrors
            self.terminateToken = terminateToken
        }

        private enum CodingKeys: String, CodingKey {
            case provisionedProductId = "ProvisionedProductId"
            case provisionedProductName = "ProvisionedProductName"
            case acceptLanguage = "AcceptLanguage"
            case ignoreErrors = "IgnoreErrors"
            case terminateToken = "TerminateToken"
        }
    }

    public enum Status: String, CustomStringConvertible, Codable {
        case available = "AVAILABLE"
        case creating = "CREATING"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

    public struct AssociateProductWithPortfolioOutput: AWSShape {

    }

    public struct ListPrincipalsForPortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string)
        ]
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The portfolio identifier.
        public let portfolioId: String

        public init(pageToken: String? = nil, acceptLanguage: String? = nil, pageSize: Int32? = nil, portfolioId: String) {
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.pageSize = pageSize
            self.portfolioId = portfolioId
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
            case pageSize = "PageSize"
            case portfolioId = "PortfolioId"
        }
    }

    public struct ScanProvisionedProductsOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProvisionedProducts", required: false, type: .list), 
            AWSShapeMember(label: "NextPageToken", required: false, type: .string)
        ]
        /// Information about the provisioned products.
        public let provisionedProducts: [ProvisionedProductDetail]?
        /// The page token to use to retrieve the next set of results. If there are no additional results, this value is null.
        public let nextPageToken: String?

        public init(provisionedProducts: [ProvisionedProductDetail]? = nil, nextPageToken: String? = nil) {
            self.provisionedProducts = provisionedProducts
            self.nextPageToken = nextPageToken
        }

        private enum CodingKeys: String, CodingKey {
            case provisionedProducts = "ProvisionedProducts"
            case nextPageToken = "NextPageToken"
        }
    }

    public struct ConstraintSummary: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .string)
        ]
        /// The description of the constraint.
        public let description: String?
        /// The type of constraint.    LAUNCH     NOTIFICATION     TEMPLATE   
        public let `type`: String?

        public init(description: String? = nil, type: String? = nil) {
            self.description = description
            self.`type` = `type`
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case `type` = "Type"
        }
    }

    public struct ListResourcesForTagOptionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceDetails", required: false, type: .list), 
            AWSShapeMember(label: "PageToken", required: false, type: .string)
        ]
        /// Information about the resources.
        public let resourceDetails: [ResourceDetail]?
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?

        public init(resourceDetails: [ResourceDetail]? = nil, pageToken: String? = nil) {
            self.resourceDetails = resourceDetails
            self.pageToken = pageToken
        }

        private enum CodingKeys: String, CodingKey {
            case resourceDetails = "ResourceDetails"
            case pageToken = "PageToken"
        }
    }

    public struct ProvisioningArtifactProperties: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string), 
            AWSShapeMember(label: "Type", required: false, type: .enum), 
            AWSShapeMember(label: "Info", required: true, type: .map), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The name of the provisioning artifact (for example, v1 v2beta). No spaces are allowed.
        public let name: String?
        /// The type of provisioning artifact.    CLOUD_FORMATION_TEMPLATE - AWS CloudFormation template    MARKETPLACE_AMI - AWS Marketplace AMI    MARKETPLACE_CAR - AWS Marketplace Clusters and AWS Resources  
        public let `type`: ProvisioningArtifactType?
        /// The URL of the CloudFormation template in Amazon S3. Specify the URL in JSON format as follows:  "LoadTemplateFromURL": "https://s3.amazonaws.com/cf-templates-ozkq9d3hgiq2-us-east-1/..." 
        public let info: [String: String]
        /// The description of the provisioning artifact, including how it differs from the previous provisioning artifact.
        public let description: String?

        public init(name: String? = nil, type: ProvisioningArtifactType? = nil, info: [String: String], description: String? = nil) {
            self.name = name
            self.`type` = `type`
            self.info = info
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case `type` = "Type"
            case info = "Info"
            case description = "Description"
        }
    }

    public struct UpdateTagOptionInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "Active", required: false, type: .boolean), 
            AWSShapeMember(label: "Value", required: false, type: .string)
        ]
        /// The TagOption identifier.
        public let id: String
        /// The updated active state.
        public let active: Bool?
        /// The updated value.
        public let value: String?

        public init(id: String, active: Bool? = nil, value: String? = nil) {
            self.id = id
            self.active = active
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case active = "Active"
            case value = "Value"
        }
    }

    public struct AcceptPortfolioShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String

        public init(acceptLanguage: String? = nil, portfolioId: String) {
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case portfolioId = "PortfolioId"
        }
    }

    public struct ListProvisioningArtifactsInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProductId", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The product identifier.
        public let productId: String

        public init(acceptLanguage: String? = nil, productId: String) {
            self.acceptLanguage = acceptLanguage
            self.productId = productId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case productId = "ProductId"
        }
    }

    public struct ListPortfoliosForProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "ProductId", required: true, type: .string)
        ]
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The product identifier.
        public let productId: String

        public init(pageToken: String? = nil, acceptLanguage: String? = nil, pageSize: Int32? = nil, productId: String) {
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.pageSize = pageSize
            self.productId = productId
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
            case pageSize = "PageSize"
            case productId = "ProductId"
        }
    }

    public struct DeleteProvisionedProductPlanOutput: AWSShape {

    }

    public struct DescribeProvisionedProductInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string)
        ]
        /// The provisioned product identifier.
        public let id: String
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?

        public init(id: String, acceptLanguage: String? = nil) {
            self.id = id
            self.acceptLanguage = acceptLanguage
        }

        private enum CodingKeys: String, CodingKey {
            case id = "Id"
            case acceptLanguage = "AcceptLanguage"
        }
    }

    public struct CreatePortfolioShareInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PortfolioId", required: true, type: .string), 
            AWSShapeMember(label: "AccountId", required: true, type: .string)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The portfolio identifier.
        public let portfolioId: String
        /// The AWS account ID.
        public let accountId: String

        public init(acceptLanguage: String? = nil, portfolioId: String, accountId: String) {
            self.acceptLanguage = acceptLanguage
            self.portfolioId = portfolioId
            self.accountId = accountId
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case portfolioId = "PortfolioId"
            case accountId = "AccountId"
        }
    }

    public struct ProductViewDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ProductARN", required: false, type: .string), 
            AWSShapeMember(label: "ProductViewSummary", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .enum)
        ]
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The ARN of the product.
        public let productARN: String?
        /// Summary information about the product view.
        public let productViewSummary: ProductViewSummary?
        /// The status of the product.    AVAILABLE - The product is ready for use.    CREATING - Product creation has started; the product is not ready for use.    FAILED - An action failed.  
        public let status: Status?

        public init(createdTime: TimeStamp? = nil, productARN: String? = nil, productViewSummary: ProductViewSummary? = nil, status: Status? = nil) {
            self.createdTime = createdTime
            self.productARN = productARN
            self.productViewSummary = productViewSummary
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case createdTime = "CreatedTime"
            case productARN = "ProductARN"
            case productViewSummary = "ProductViewSummary"
            case status = "Status"
        }
    }

    public struct DeleteProvisionedProductPlanInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PlanId", required: true, type: .string), 
            AWSShapeMember(label: "IgnoreErrors", required: false, type: .boolean)
        ]
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The plan identifier.
        public let planId: String
        /// If set to true, AWS Service Catalog stops managing the specified provisioned product even if it cannot delete the underlying resources.
        public let ignoreErrors: Bool?

        public init(acceptLanguage: String? = nil, planId: String, ignoreErrors: Bool? = nil) {
            self.acceptLanguage = acceptLanguage
            self.planId = planId
            self.ignoreErrors = ignoreErrors
        }

        private enum CodingKeys: String, CodingKey {
            case acceptLanguage = "AcceptLanguage"
            case planId = "PlanId"
            case ignoreErrors = "IgnoreErrors"
        }
    }

    public struct ListProvisionedProductPlansInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "ProvisionProductId", required: false, type: .string), 
            AWSShapeMember(label: "AccessLevelFilter", required: false, type: .structure)
        ]
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The product identifier.
        public let provisionProductId: String?
        /// The access level to use to obtain results. The default is User.
        public let accessLevelFilter: AccessLevelFilter?

        public init(pageToken: String? = nil, acceptLanguage: String? = nil, pageSize: Int32? = nil, provisionProductId: String? = nil, accessLevelFilter: AccessLevelFilter? = nil) {
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.pageSize = pageSize
            self.provisionProductId = provisionProductId
            self.accessLevelFilter = accessLevelFilter
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
            case pageSize = "PageSize"
            case provisionProductId = "ProvisionProductId"
            case accessLevelFilter = "AccessLevelFilter"
        }
    }

    public struct UpdatePortfolioInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RemoveTags", required: false, type: .list), 
            AWSShapeMember(label: "AddTags", required: false, type: .list), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "ProviderName", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: true, type: .string), 
            AWSShapeMember(label: "DisplayName", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The tags to remove.
        public let removeTags: [String]?
        /// The tags to add.
        public let addTags: [Tag]?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The updated name of the portfolio provider.
        public let providerName: String?
        /// The portfolio identifier.
        public let id: String
        /// The name to use for display purposes.
        public let displayName: String?
        /// The updated description of the portfolio.
        public let description: String?

        public init(removeTags: [String]? = nil, addTags: [Tag]? = nil, acceptLanguage: String? = nil, providerName: String? = nil, id: String, displayName: String? = nil, description: String? = nil) {
            self.removeTags = removeTags
            self.addTags = addTags
            self.acceptLanguage = acceptLanguage
            self.providerName = providerName
            self.id = id
            self.displayName = displayName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case removeTags = "RemoveTags"
            case addTags = "AddTags"
            case acceptLanguage = "AcceptLanguage"
            case providerName = "ProviderName"
            case id = "Id"
            case displayName = "DisplayName"
            case description = "Description"
        }
    }

    public struct DescribeProvisionedProductPlanInput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PageToken", required: false, type: .string), 
            AWSShapeMember(label: "AcceptLanguage", required: false, type: .string), 
            AWSShapeMember(label: "PageSize", required: false, type: .integer), 
            AWSShapeMember(label: "PlanId", required: true, type: .string)
        ]
        /// The page token for the next set of results. To retrieve the first set of results, use null.
        public let pageToken: String?
        /// The language code.    en - English (default)    jp - Japanese    zh - Chinese  
        public let acceptLanguage: String?
        /// The maximum number of items to return with this call.
        public let pageSize: Int32?
        /// The plan identifier.
        public let planId: String

        public init(pageToken: String? = nil, acceptLanguage: String? = nil, pageSize: Int32? = nil, planId: String) {
            self.pageToken = pageToken
            self.acceptLanguage = acceptLanguage
            self.pageSize = pageSize
            self.planId = planId
        }

        private enum CodingKeys: String, CodingKey {
            case pageToken = "PageToken"
            case acceptLanguage = "AcceptLanguage"
            case pageSize = "PageSize"
            case planId = "PlanId"
        }
    }

    public struct UpdateTagOptionOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagOptionDetail", required: false, type: .structure)
        ]
        /// Information about the TagOption.
        public let tagOptionDetail: TagOptionDetail?

        public init(tagOptionDetail: TagOptionDetail? = nil) {
            self.tagOptionDetail = tagOptionDetail
        }

        private enum CodingKeys: String, CodingKey {
            case tagOptionDetail = "TagOptionDetail"
        }
    }

    public struct CreateConstraintOutput: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ConstraintDetail", required: false, type: .structure), 
            AWSShapeMember(label: "Status", required: false, type: .enum), 
            AWSShapeMember(label: "ConstraintParameters", required: false, type: .string)
        ]
        /// Information about the constraint.
        public let constraintDetail: ConstraintDetail?
        /// The status of the current request.
        public let status: Status?
        /// The constraint parameters.
        public let constraintParameters: String?

        public init(constraintDetail: ConstraintDetail? = nil, status: Status? = nil, constraintParameters: String? = nil) {
            self.constraintDetail = constraintDetail
            self.status = status
            self.constraintParameters = constraintParameters
        }

        private enum CodingKeys: String, CodingKey {
            case constraintDetail = "ConstraintDetail"
            case status = "Status"
            case constraintParameters = "ConstraintParameters"
        }
    }

    public struct PortfolioDetail: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProviderName", required: false, type: .string), 
            AWSShapeMember(label: "CreatedTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ARN", required: false, type: .string), 
            AWSShapeMember(label: "DisplayName", required: false, type: .string), 
            AWSShapeMember(label: "Id", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The name of the portfolio provider.
        public let providerName: String?
        /// The UTC time stamp of the creation time.
        public let createdTime: TimeStamp?
        /// The ARN assigned to the portfolio.
        public let arn: String?
        /// The name to use for display purposes.
        public let displayName: String?
        /// The portfolio identifier.
        public let id: String?
        /// The description of the portfolio.
        public let description: String?

        public init(providerName: String? = nil, createdTime: TimeStamp? = nil, arn: String? = nil, displayName: String? = nil, id: String? = nil, description: String? = nil) {
            self.providerName = providerName
            self.createdTime = createdTime
            self.arn = arn
            self.displayName = displayName
            self.id = id
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case providerName = "ProviderName"
            case createdTime = "CreatedTime"
            case arn = "ARN"
            case displayName = "DisplayName"
            case id = "Id"
            case description = "Description"
        }
    }

    public enum CopyProductStatus: String, CustomStringConvertible, Codable {
        case succeeded = "SUCCEEDED"
        case inProgress = "IN_PROGRESS"
        case failed = "FAILED"
        public var description: String { return self.rawValue }
    }

}