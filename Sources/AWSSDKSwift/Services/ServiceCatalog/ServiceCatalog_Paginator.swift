// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import NIO

extension ServiceCatalog {

    ///  Lists all portfolios for which sharing was accepted by this account.
    public func listAcceptedPortfolioSharesPaginator(_ input: ListAcceptedPortfolioSharesInput) -> EventLoopFuture<[PortfolioDetail]> {
        return client.paginate(input: input, command: listAcceptedPortfolioShares, resultKey: "portfolioDetails", tokenKey: "nextPageToken")
    }
    
    ///  Lists all the budgets associated to the specified resource.
    public func listBudgetsForResourcePaginator(_ input: ListBudgetsForResourceInput) -> EventLoopFuture<[BudgetDetail]> {
        return client.paginate(input: input, command: listBudgetsForResource, resultKey: "budgets", tokenKey: "nextPageToken")
    }
    
    ///  Lists the constraints for the specified portfolio and product.
    public func listConstraintsForPortfolioPaginator(_ input: ListConstraintsForPortfolioInput) -> EventLoopFuture<[ConstraintDetail]> {
        return client.paginate(input: input, command: listConstraintsForPortfolio, resultKey: "constraintDetails", tokenKey: "nextPageToken")
    }
    
    ///  Lists the paths to the specified product. A path is how the user has access to a specified product, and is necessary when provisioning a product. A path also determines the constraints put on the product.
    public func listLaunchPathsPaginator(_ input: ListLaunchPathsInput) -> EventLoopFuture<[LaunchPathSummary]> {
        return client.paginate(input: input, command: listLaunchPaths, resultKey: "launchPathSummaries", tokenKey: "nextPageToken")
    }
    
    ///  Lists the organization nodes that have access to the specified portfolio. This API can only be called by the master account in the organization.
    public func listOrganizationPortfolioAccessPaginator(_ input: ListOrganizationPortfolioAccessInput) -> EventLoopFuture<[OrganizationNode]> {
        return client.paginate(input: input, command: listOrganizationPortfolioAccess, resultKey: "organizationNodes", tokenKey: "nextPageToken")
    }
    
    ///  Lists all portfolios in the catalog.
    public func listPortfoliosPaginator(_ input: ListPortfoliosInput) -> EventLoopFuture<[PortfolioDetail]> {
        return client.paginate(input: input, command: listPortfolios, resultKey: "portfolioDetails", tokenKey: "nextPageToken")
    }
    
    ///  Lists all portfolios that the specified product is associated with.
    public func listPortfoliosForProductPaginator(_ input: ListPortfoliosForProductInput) -> EventLoopFuture<[PortfolioDetail]> {
        return client.paginate(input: input, command: listPortfoliosForProduct, resultKey: "portfolioDetails", tokenKey: "nextPageToken")
    }
    
    ///  Lists all principal ARNs associated with the specified portfolio.
    public func listPrincipalsForPortfolioPaginator(_ input: ListPrincipalsForPortfolioInput) -> EventLoopFuture<[Principal]> {
        return client.paginate(input: input, command: listPrincipalsForPortfolio, resultKey: "principals", tokenKey: "nextPageToken")
    }
    
    ///  Lists all provisioning artifacts (also known as versions) for the specified self-service action.
    public func listProvisioningArtifactsForServiceActionPaginator(_ input: ListProvisioningArtifactsForServiceActionInput) -> EventLoopFuture<[ProvisioningArtifactView]> {
        return client.paginate(input: input, command: listProvisioningArtifactsForServiceAction, resultKey: "provisioningArtifactViews", tokenKey: "nextPageToken")
    }
    
    ///  Lists the resources associated with the specified TagOption.
    public func listResourcesForTagOptionPaginator(_ input: ListResourcesForTagOptionInput) -> EventLoopFuture<[ResourceDetail]> {
        return client.paginate(input: input, command: listResourcesForTagOption, resultKey: "resourceDetails", tokenKey: "pageToken")
    }
    
    ///  Lists all self-service actions.
    public func listServiceActionsPaginator(_ input: ListServiceActionsInput) -> EventLoopFuture<[ServiceActionSummary]> {
        return client.paginate(input: input, command: listServiceActions, resultKey: "serviceActionSummaries", tokenKey: "nextPageToken")
    }
    
    ///  Returns a paginated list of self-service actions associated with the specified Product ID and Provisioning Artifact ID.
    public func listServiceActionsForProvisioningArtifactPaginator(_ input: ListServiceActionsForProvisioningArtifactInput) -> EventLoopFuture<[ServiceActionSummary]> {
        return client.paginate(input: input, command: listServiceActionsForProvisioningArtifact, resultKey: "serviceActionSummaries", tokenKey: "nextPageToken")
    }
    
    ///  Lists the specified TagOptions or all TagOptions.
    public func listTagOptionsPaginator(_ input: ListTagOptionsInput) -> EventLoopFuture<[TagOptionDetail]> {
        return client.paginate(input: input, command: listTagOptions, resultKey: "tagOptionDetails", tokenKey: "pageToken")
    }
    
    ///  Gets information about the products to which the caller has access.
    public func searchProductsPaginator(_ input: SearchProductsInput) -> EventLoopFuture<[ProductViewSummary]> {
        return client.paginate(input: input, command: searchProducts, resultKey: "productViewSummaries", tokenKey: "nextPageToken")
    }
    
    ///  Gets information about the products for the specified portfolio or all products.
    public func searchProductsAsAdminPaginator(_ input: SearchProductsAsAdminInput) -> EventLoopFuture<[ProductViewDetail]> {
        return client.paginate(input: input, command: searchProductsAsAdmin, resultKey: "productViewDetails", tokenKey: "nextPageToken")
    }
    
    ///  Gets information about the provisioned products that meet the specified criteria.
    public func searchProvisionedProductsPaginator(_ input: SearchProvisionedProductsInput) -> EventLoopFuture<[ProvisionedProductAttribute]> {
        return client.paginate(input: input, command: searchProvisionedProducts, resultKey: "provisionedProducts", tokenKey: "nextPageToken")
    }
    
}

extension ServiceCatalog.ListAcceptedPortfolioSharesInput: AWSPaginateable {
    public init(_ original: ServiceCatalog.ListAcceptedPortfolioSharesInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token, 
            portfolioShareType: original.portfolioShareType
        )
    }
}

extension ServiceCatalog.ListBudgetsForResourceInput: AWSPaginateable {
    public init(_ original: ServiceCatalog.ListBudgetsForResourceInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token, 
            resourceId: original.resourceId
        )
    }
}

extension ServiceCatalog.ListConstraintsForPortfolioInput: AWSPaginateable {
    public init(_ original: ServiceCatalog.ListConstraintsForPortfolioInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token, 
            portfolioId: original.portfolioId, 
            productId: original.productId
        )
    }
}

extension ServiceCatalog.ListLaunchPathsInput: AWSPaginateable {
    public init(_ original: ServiceCatalog.ListLaunchPathsInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token, 
            productId: original.productId
        )
    }
}

extension ServiceCatalog.ListOrganizationPortfolioAccessInput: AWSPaginateable {
    public init(_ original: ServiceCatalog.ListOrganizationPortfolioAccessInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            organizationNodeType: original.organizationNodeType, 
            pageSize: original.pageSize, 
            pageToken: token, 
            portfolioId: original.portfolioId
        )
    }
}

extension ServiceCatalog.ListPortfoliosInput: AWSPaginateable {
    public init(_ original: ServiceCatalog.ListPortfoliosInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token
        )
    }
}

extension ServiceCatalog.ListPortfoliosForProductInput: AWSPaginateable {
    public init(_ original: ServiceCatalog.ListPortfoliosForProductInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token, 
            productId: original.productId
        )
    }
}

extension ServiceCatalog.ListPrincipalsForPortfolioInput: AWSPaginateable {
    public init(_ original: ServiceCatalog.ListPrincipalsForPortfolioInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token, 
            portfolioId: original.portfolioId
        )
    }
}

extension ServiceCatalog.ListProvisioningArtifactsForServiceActionInput: AWSPaginateable {
    public init(_ original: ServiceCatalog.ListProvisioningArtifactsForServiceActionInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token, 
            serviceActionId: original.serviceActionId
        )
    }
}

extension ServiceCatalog.ListResourcesForTagOptionInput: AWSPaginateable {
    public init(_ original: ServiceCatalog.ListResourcesForTagOptionInput, token: String) {
        self.init(
            pageSize: original.pageSize, 
            pageToken: token, 
            resourceType: original.resourceType, 
            tagOptionId: original.tagOptionId
        )
    }
}

extension ServiceCatalog.ListServiceActionsInput: AWSPaginateable {
    public init(_ original: ServiceCatalog.ListServiceActionsInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token
        )
    }
}

extension ServiceCatalog.ListServiceActionsForProvisioningArtifactInput: AWSPaginateable {
    public init(_ original: ServiceCatalog.ListServiceActionsForProvisioningArtifactInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token, 
            productId: original.productId, 
            provisioningArtifactId: original.provisioningArtifactId
        )
    }
}

extension ServiceCatalog.ListTagOptionsInput: AWSPaginateable {
    public init(_ original: ServiceCatalog.ListTagOptionsInput, token: String) {
        self.init(
            filters: original.filters, 
            pageSize: original.pageSize, 
            pageToken: token
        )
    }
}

extension ServiceCatalog.SearchProductsInput: AWSPaginateable {
    public init(_ original: ServiceCatalog.SearchProductsInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            filters: original.filters, 
            pageSize: original.pageSize, 
            pageToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder
        )
    }
}

extension ServiceCatalog.SearchProductsAsAdminInput: AWSPaginateable {
    public init(_ original: ServiceCatalog.SearchProductsAsAdminInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            filters: original.filters, 
            pageSize: original.pageSize, 
            pageToken: token, 
            portfolioId: original.portfolioId, 
            productSource: original.productSource, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder
        )
    }
}

extension ServiceCatalog.SearchProvisionedProductsInput: AWSPaginateable {
    public init(_ original: ServiceCatalog.SearchProvisionedProductsInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            accessLevelFilter: original.accessLevelFilter, 
            filters: original.filters, 
            pageSize: original.pageSize, 
            pageToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder
        )
    }
}


