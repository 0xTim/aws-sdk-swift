// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift/blob/master/CodeGenerator/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import NIO

extension ServiceCatalog {

    ///  Lists all portfolios for which sharing was accepted by this account.
    public func listAcceptedPortfolioSharesPaginator(_ input: ListAcceptedPortfolioSharesInput, onPage: @escaping (ListAcceptedPortfolioSharesOutput, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listAcceptedPortfolioShares, tokenKey: \ListAcceptedPortfolioSharesOutput.nextPageToken, onPage: onPage)
    }

    ///  Lists all the budgets associated to the specified resource.
    public func listBudgetsForResourcePaginator(_ input: ListBudgetsForResourceInput, onPage: @escaping (ListBudgetsForResourceOutput, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listBudgetsForResource, tokenKey: \ListBudgetsForResourceOutput.nextPageToken, onPage: onPage)
    }

    ///  Lists the constraints for the specified portfolio and product.
    public func listConstraintsForPortfolioPaginator(_ input: ListConstraintsForPortfolioInput, onPage: @escaping (ListConstraintsForPortfolioOutput, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listConstraintsForPortfolio, tokenKey: \ListConstraintsForPortfolioOutput.nextPageToken, onPage: onPage)
    }

    ///  Lists the paths to the specified product. A path is how the user has access to a specified product, and is necessary when provisioning a product. A path also determines the constraints put on the product.
    public func listLaunchPathsPaginator(_ input: ListLaunchPathsInput, onPage: @escaping (ListLaunchPathsOutput, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listLaunchPaths, tokenKey: \ListLaunchPathsOutput.nextPageToken, onPage: onPage)
    }

    ///  Lists the organization nodes that have access to the specified portfolio. This API can only be called by the master account in the organization.
    public func listOrganizationPortfolioAccessPaginator(_ input: ListOrganizationPortfolioAccessInput, onPage: @escaping (ListOrganizationPortfolioAccessOutput, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listOrganizationPortfolioAccess, tokenKey: \ListOrganizationPortfolioAccessOutput.nextPageToken, onPage: onPage)
    }

    ///  Lists all portfolios in the catalog.
    public func listPortfoliosPaginator(_ input: ListPortfoliosInput, onPage: @escaping (ListPortfoliosOutput, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listPortfolios, tokenKey: \ListPortfoliosOutput.nextPageToken, onPage: onPage)
    }

    ///  Lists all portfolios that the specified product is associated with.
    public func listPortfoliosForProductPaginator(_ input: ListPortfoliosForProductInput, onPage: @escaping (ListPortfoliosForProductOutput, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listPortfoliosForProduct, tokenKey: \ListPortfoliosForProductOutput.nextPageToken, onPage: onPage)
    }

    ///  Lists all principal ARNs associated with the specified portfolio.
    public func listPrincipalsForPortfolioPaginator(_ input: ListPrincipalsForPortfolioInput, onPage: @escaping (ListPrincipalsForPortfolioOutput, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listPrincipalsForPortfolio, tokenKey: \ListPrincipalsForPortfolioOutput.nextPageToken, onPage: onPage)
    }

    ///  Lists all provisioning artifacts (also known as versions) for the specified self-service action.
    public func listProvisioningArtifactsForServiceActionPaginator(_ input: ListProvisioningArtifactsForServiceActionInput, onPage: @escaping (ListProvisioningArtifactsForServiceActionOutput, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listProvisioningArtifactsForServiceAction, tokenKey: \ListProvisioningArtifactsForServiceActionOutput.nextPageToken, onPage: onPage)
    }

    ///  Lists the resources associated with the specified TagOption.
    public func listResourcesForTagOptionPaginator(_ input: ListResourcesForTagOptionInput, onPage: @escaping (ListResourcesForTagOptionOutput, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listResourcesForTagOption, tokenKey: \ListResourcesForTagOptionOutput.pageToken, onPage: onPage)
    }

    ///  Lists all self-service actions.
    public func listServiceActionsPaginator(_ input: ListServiceActionsInput, onPage: @escaping (ListServiceActionsOutput, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listServiceActions, tokenKey: \ListServiceActionsOutput.nextPageToken, onPage: onPage)
    }

    ///  Returns a paginated list of self-service actions associated with the specified Product ID and Provisioning Artifact ID.
    public func listServiceActionsForProvisioningArtifactPaginator(_ input: ListServiceActionsForProvisioningArtifactInput, onPage: @escaping (ListServiceActionsForProvisioningArtifactOutput, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listServiceActionsForProvisioningArtifact, tokenKey: \ListServiceActionsForProvisioningArtifactOutput.nextPageToken, onPage: onPage)
    }

    ///  Lists the specified TagOptions or all TagOptions.
    public func listTagOptionsPaginator(_ input: ListTagOptionsInput, onPage: @escaping (ListTagOptionsOutput, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: listTagOptions, tokenKey: \ListTagOptionsOutput.pageToken, onPage: onPage)
    }

    ///  Gets information about the products to which the caller has access.
    public func searchProductsPaginator(_ input: SearchProductsInput, onPage: @escaping (SearchProductsOutput, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: searchProducts, tokenKey: \SearchProductsOutput.nextPageToken, onPage: onPage)
    }

    ///  Gets information about the products for the specified portfolio or all products.
    public func searchProductsAsAdminPaginator(_ input: SearchProductsAsAdminInput, onPage: @escaping (SearchProductsAsAdminOutput, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: searchProductsAsAdmin, tokenKey: \SearchProductsAsAdminOutput.nextPageToken, onPage: onPage)
    }

    ///  Gets information about the provisioned products that meet the specified criteria.
    public func searchProvisionedProductsPaginator(_ input: SearchProvisionedProductsInput, onPage: @escaping (SearchProvisionedProductsOutput, EventLoop)->EventLoopFuture<Bool>) -> EventLoopFuture<Void> {
        return client.paginate(input: input, command: searchProvisionedProducts, tokenKey: \SearchProvisionedProductsOutput.nextPageToken, onPage: onPage)
    }

}

extension ServiceCatalog.ListAcceptedPortfolioSharesInput: AWSPaginateStringToken {
    public init(_ original: ServiceCatalog.ListAcceptedPortfolioSharesInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token, 
            portfolioShareType: original.portfolioShareType
        )
    }
}

extension ServiceCatalog.ListBudgetsForResourceInput: AWSPaginateStringToken {
    public init(_ original: ServiceCatalog.ListBudgetsForResourceInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token, 
            resourceId: original.resourceId
        )
    }
}

extension ServiceCatalog.ListConstraintsForPortfolioInput: AWSPaginateStringToken {
    public init(_ original: ServiceCatalog.ListConstraintsForPortfolioInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token, 
            portfolioId: original.portfolioId, 
            productId: original.productId
        )
    }
}

extension ServiceCatalog.ListLaunchPathsInput: AWSPaginateStringToken {
    public init(_ original: ServiceCatalog.ListLaunchPathsInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token, 
            productId: original.productId
        )
    }
}

extension ServiceCatalog.ListOrganizationPortfolioAccessInput: AWSPaginateStringToken {
    public init(_ original: ServiceCatalog.ListOrganizationPortfolioAccessInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            organizationNodeType: original.organizationNodeType, 
            pageSize: original.pageSize, 
            pageToken: token, 
            portfolioId: original.portfolioId
        )
    }
}

extension ServiceCatalog.ListPortfoliosInput: AWSPaginateStringToken {
    public init(_ original: ServiceCatalog.ListPortfoliosInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token
        )
    }
}

extension ServiceCatalog.ListPortfoliosForProductInput: AWSPaginateStringToken {
    public init(_ original: ServiceCatalog.ListPortfoliosForProductInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token, 
            productId: original.productId
        )
    }
}

extension ServiceCatalog.ListPrincipalsForPortfolioInput: AWSPaginateStringToken {
    public init(_ original: ServiceCatalog.ListPrincipalsForPortfolioInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token, 
            portfolioId: original.portfolioId
        )
    }
}

extension ServiceCatalog.ListProvisioningArtifactsForServiceActionInput: AWSPaginateStringToken {
    public init(_ original: ServiceCatalog.ListProvisioningArtifactsForServiceActionInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token, 
            serviceActionId: original.serviceActionId
        )
    }
}

extension ServiceCatalog.ListResourcesForTagOptionInput: AWSPaginateStringToken {
    public init(_ original: ServiceCatalog.ListResourcesForTagOptionInput, token: String) {
        self.init(
            pageSize: original.pageSize, 
            pageToken: token, 
            resourceType: original.resourceType, 
            tagOptionId: original.tagOptionId
        )
    }
}

extension ServiceCatalog.ListServiceActionsInput: AWSPaginateStringToken {
    public init(_ original: ServiceCatalog.ListServiceActionsInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token
        )
    }
}

extension ServiceCatalog.ListServiceActionsForProvisioningArtifactInput: AWSPaginateStringToken {
    public init(_ original: ServiceCatalog.ListServiceActionsForProvisioningArtifactInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            pageSize: original.pageSize, 
            pageToken: token, 
            productId: original.productId, 
            provisioningArtifactId: original.provisioningArtifactId
        )
    }
}

extension ServiceCatalog.ListTagOptionsInput: AWSPaginateStringToken {
    public init(_ original: ServiceCatalog.ListTagOptionsInput, token: String) {
        self.init(
            filters: original.filters, 
            pageSize: original.pageSize, 
            pageToken: token
        )
    }
}

extension ServiceCatalog.SearchProductsInput: AWSPaginateStringToken {
    public init(_ original: ServiceCatalog.SearchProductsInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            filters: original.filters, 
            pageSize: original.pageSize, 
            pageToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder
        )
    }
}

extension ServiceCatalog.SearchProductsAsAdminInput: AWSPaginateStringToken {
    public init(_ original: ServiceCatalog.SearchProductsAsAdminInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            filters: original.filters, 
            pageSize: original.pageSize, 
            pageToken: token, 
            portfolioId: original.portfolioId, 
            productSource: original.productSource, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder
        )
    }
}

extension ServiceCatalog.SearchProvisionedProductsInput: AWSPaginateStringToken {
    public init(_ original: ServiceCatalog.SearchProvisionedProductsInput, token: String) {
        self.init(
            acceptLanguage: original.acceptLanguage, 
            accessLevelFilter: original.accessLevelFilter, 
            filters: original.filters, 
            pageSize: original.pageSize, 
            pageToken: token, 
            sortBy: original.sortBy, 
            sortOrder: original.sortOrder
        )
    }
}


