// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Dax {

    public struct NodeTypeSpecificValue: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "NodeType", required: false, type: .string)
        ]
        /// The parameter value for this node type.
        public let value: String?
        /// A node type to which the parameter value applies.
        public let nodeType: String?

        public init(value: String? = nil, nodeType: String? = nil) {
            self.value = value
            self.nodeType = nodeType
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case nodeType = "NodeType"
        }
    }

    public struct UpdateSubnetGroupResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetGroup", required: false, type: .structure)
        ]
        /// The subnet group that has been modified.
        public let subnetGroup: SubnetGroup?

        public init(subnetGroup: SubnetGroup? = nil) {
            self.subnetGroup = subnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case subnetGroup = "SubnetGroup"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .list), 
            AWSShapeMember(label: "ResourceName", required: true, type: .string)
        ]
        /// The tags to be assigned to the DAX resource. 
        public let tags: [Tag]
        /// The name of the DAX resource to which tags should be added.
        public let resourceName: String

        public init(tags: [Tag], resourceName: String) {
            self.tags = tags
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
            case resourceName = "ResourceName"
        }
    }

    public struct UpdateSubnetGroupRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIds", required: false, type: .list), 
            AWSShapeMember(label: "SubnetGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// A list of subnet IDs in the subnet group.
        public let subnetIds: [String]?
        /// The name of the subnet group.
        public let subnetGroupName: String
        /// A description of the subnet group.
        public let description: String?

        public init(subnetIds: [String]? = nil, subnetGroupName: String, description: String? = nil) {
            self.subnetIds = subnetIds
            self.subnetGroupName = subnetGroupName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIds = "SubnetIds"
            case subnetGroupName = "SubnetGroupName"
            case description = "Description"
        }
    }

    public struct CreateSubnetGroupRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIds", required: true, type: .list), 
            AWSShapeMember(label: "SubnetGroupName", required: true, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// A list of VPC subnet IDs for the subnet group.
        public let subnetIds: [String]
        /// A name for the subnet group. This value is stored as a lowercase string. 
        public let subnetGroupName: String
        /// A description for the subnet group
        public let description: String?

        public init(subnetIds: [String], subnetGroupName: String, description: String? = nil) {
            self.subnetIds = subnetIds
            self.subnetGroupName = subnetGroupName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIds = "SubnetIds"
            case subnetGroupName = "SubnetGroupName"
            case description = "Description"
        }
    }

    public struct DescribeParametersRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Source", required: false, type: .string), 
            AWSShapeMember(label: "ParameterGroupName", required: true, type: .string), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// How the parameter is defined. For example, system denotes a system-defined parameter.
        public let source: String?
        /// The name of the parameter group.
        public let parameterGroupName: String
        /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
        public let nextToken: String?
        /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved. The value for MaxResults must be between 20 and 100.
        public let maxResults: Int32?

        public init(source: String? = nil, parameterGroupName: String, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.source = source
            self.parameterGroupName = parameterGroupName
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case source = "Source"
            case parameterGroupName = "ParameterGroupName"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct NotificationConfiguration: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicStatus", required: false, type: .string), 
            AWSShapeMember(label: "TopicArn", required: false, type: .string)
        ]
        /// The current state of the topic.
        public let topicStatus: String?
        /// The Amazon Resource Name (ARN) that identifies the topic. 
        public let topicArn: String?

        public init(topicStatus: String? = nil, topicArn: String? = nil) {
            self.topicStatus = topicStatus
            self.topicArn = topicArn
        }

        private enum CodingKeys: String, CodingKey {
            case topicStatus = "TopicStatus"
            case topicArn = "TopicArn"
        }
    }

    public struct ListTagsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// If this value is present, there are additional results to be displayed. To retrieve them, call ListTags again, with NextToken set to this value.
        public let nextToken: String?
        /// A list of tags currently associated with the DAX cluster.
        public let tags: [Tag]?

        public init(nextToken: String? = nil, tags: [Tag]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case tags = "Tags"
        }
    }

    public struct RebootNodeResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        /// A description of the DAX cluster after a node has been rebooted.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public enum ChangeType: String, CustomStringConvertible, Codable {
        case immediate = "IMMEDIATE"
        case requiresReboot = "REQUIRES_REBOOT"
        public var description: String { return self.rawValue }
    }

    public struct Endpoint: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Address", required: false, type: .string), 
            AWSShapeMember(label: "Port", required: false, type: .integer)
        ]
        /// The DNS hostname of the endpoint.
        public let address: String?
        /// The port number that applications should use to connect to the endpoint.
        public let port: Int32?

        public init(address: String? = nil, port: Int32? = nil) {
            self.address = address
            self.port = port
        }

        private enum CodingKeys: String, CodingKey {
            case address = "Address"
            case port = "Port"
        }
    }

    public struct ParameterNameValue: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterName", required: false, type: .string), 
            AWSShapeMember(label: "ParameterValue", required: false, type: .string)
        ]
        /// The name of the parameter.
        public let parameterName: String?
        /// The value of the parameter.
        public let parameterValue: String?

        public init(parameterName: String? = nil, parameterValue: String? = nil) {
            self.parameterName = parameterName
            self.parameterValue = parameterValue
        }

        private enum CodingKeys: String, CodingKey {
            case parameterName = "ParameterName"
            case parameterValue = "ParameterValue"
        }
    }

    public struct CreateClusterResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        /// A description of the DAX cluster that you have created.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct DeleteSubnetGroupResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeletionMessage", required: false, type: .string)
        ]
        /// A user-specified message for this action (i.e., a reason for deleting the subnet group).
        public let deletionMessage: String?

        public init(deletionMessage: String? = nil) {
            self.deletionMessage = deletionMessage
        }

        private enum CodingKeys: String, CodingKey {
            case deletionMessage = "DeletionMessage"
        }
    }

    public struct IncreaseReplicationFactorResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        /// A description of the DAX cluster. with its new replication factor.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct UpdateParameterGroupResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterGroup", required: false, type: .structure)
        ]
        /// The parameter group that has been modified.
        public let parameterGroup: ParameterGroup?

        public init(parameterGroup: ParameterGroup? = nil) {
            self.parameterGroup = parameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case parameterGroup = "ParameterGroup"
        }
    }

    public struct CreateParameterGroupResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterGroup", required: false, type: .structure)
        ]
        /// Represents the output of a CreateParameterGroup action.
        public let parameterGroup: ParameterGroup?

        public init(parameterGroup: ParameterGroup? = nil) {
            self.parameterGroup = parameterGroup
        }

        private enum CodingKeys: String, CodingKey {
            case parameterGroup = "ParameterGroup"
        }
    }

    public struct UpdateParameterGroupRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterNameValues", required: true, type: .list), 
            AWSShapeMember(label: "ParameterGroupName", required: true, type: .string)
        ]
        /// An array of name-value pairs for the parameters in the group. Each element in the array represents a single parameter.
        public let parameterNameValues: [ParameterNameValue]
        /// The name of the parameter group.
        public let parameterGroupName: String

        public init(parameterNameValues: [ParameterNameValue], parameterGroupName: String) {
            self.parameterNameValues = parameterNameValues
            self.parameterGroupName = parameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case parameterNameValues = "ParameterNameValues"
            case parameterGroupName = "ParameterGroupName"
        }
    }

    public struct DescribeParameterGroupsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterGroupNames", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The names of the parameter groups.
        public let parameterGroupNames: [String]?
        /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
        public let nextToken: String?
        /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved. The value for MaxResults must be between 20 and 100.
        public let maxResults: Int32?

        public init(parameterGroupNames: [String]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.parameterGroupNames = parameterGroupNames
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case parameterGroupNames = "ParameterGroupNames"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct Tag: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: false, type: .string), 
            AWSShapeMember(label: "Key", required: false, type: .string)
        ]
        /// The value of the tag. Tag values are case-sensitive and can be null. 
        public let value: String?
        /// The key for the tag. Tag keys are case sensitive. Every DAX cluster can only have one tag with the same key. If you try to add an existing tag (same key), the existing tag value will be updated to the new value.
        public let key: String?

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct DeleteClusterRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterName", required: true, type: .string)
        ]
        /// The name of the cluster to be deleted.
        public let clusterName: String

        public init(clusterName: String) {
            self.clusterName = clusterName
        }

        private enum CodingKeys: String, CodingKey {
            case clusterName = "ClusterName"
        }
    }

    public struct DecreaseReplicationFactorRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "NodeIdsToRemove", required: false, type: .list), 
            AWSShapeMember(label: "ClusterName", required: true, type: .string), 
            AWSShapeMember(label: "NewReplicationFactor", required: true, type: .integer)
        ]
        /// The Availability Zone(s) from which to remove nodes.
        public let availabilityZones: [String]?
        /// The unique identifiers of the nodes to be removed from the cluster.
        public let nodeIdsToRemove: [String]?
        /// The name of the DAX cluster from which you want to remove nodes.
        public let clusterName: String
        /// The new number of nodes for the DAX cluster.
        public let newReplicationFactor: Int32

        public init(availabilityZones: [String]? = nil, nodeIdsToRemove: [String]? = nil, clusterName: String, newReplicationFactor: Int32) {
            self.availabilityZones = availabilityZones
            self.nodeIdsToRemove = nodeIdsToRemove
            self.clusterName = clusterName
            self.newReplicationFactor = newReplicationFactor
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case nodeIdsToRemove = "NodeIdsToRemove"
            case clusterName = "ClusterName"
            case newReplicationFactor = "NewReplicationFactor"
        }
    }

    public struct DescribeSubnetGroupsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "SubnetGroupNames", required: false, type: .list), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
        public let nextToken: String?
        /// The name of the subnet group.
        public let subnetGroupNames: [String]?
        /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved. The value for MaxResults must be between 20 and 100.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, subnetGroupNames: [String]? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.subnetGroupNames = subnetGroupNames
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case subnetGroupNames = "SubnetGroupNames"
            case maxResults = "MaxResults"
        }
    }

    public struct DescribeParametersResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of parameters within a parameter group. Each element in the list represents one parameter.
        public let parameters: [Parameter]?
        /// Provides an identifier to allow retrieval of paginated results.
        public let nextToken: String?

        public init(parameters: [Parameter]? = nil, nextToken: String? = nil) {
            self.parameters = parameters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case nextToken = "NextToken"
        }
    }

    public struct ParameterGroup: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ParameterGroupName", required: false, type: .string)
        ]
        /// A description of the parameter group.
        public let description: String?
        /// The name of the parameter group.
        public let parameterGroupName: String?

        public init(description: String? = nil, parameterGroupName: String? = nil) {
            self.description = description
            self.parameterGroupName = parameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case parameterGroupName = "ParameterGroupName"
        }
    }

    public struct DescribeClustersResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Clusters", required: false, type: .list)
        ]
        /// Provides an identifier to allow retrieval of paginated results.
        public let nextToken: String?
        /// The descriptions of your DAX clusters, in response to a DescribeClusters request.
        public let clusters: [Cluster]?

        public init(nextToken: String? = nil, clusters: [Cluster]? = nil) {
            self.nextToken = nextToken
            self.clusters = clusters
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case clusters = "Clusters"
        }
    }

    public enum SourceType: String, CustomStringConvertible, Codable {
        case cluster = "CLUSTER"
        case parameterGroup = "PARAMETER_GROUP"
        case subnetGroup = "SUBNET_GROUP"
        public var description: String { return self.rawValue }
    }

    public struct DescribeEventsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "SourceName", required: false, type: .string), 
            AWSShapeMember(label: "SourceType", required: false, type: .enum), 
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The beginning of the time interval to retrieve events for, specified in ISO 8601 format.
        public let startTime: TimeStamp?
        /// The identifier of the event source for which events will be returned. If not specified, then all sources are included in the response.
        public let sourceName: String?
        /// The event source to retrieve events for. If no value is specified, all events are returned.
        public let sourceType: SourceType?
        /// The end of the time interval for which to retrieve events, specified in ISO 8601 format.
        public let endTime: TimeStamp?
        /// The number of minutes' worth of events to retrieve.
        public let duration: Int32?
        /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
        public let nextToken: String?
        /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved. The value for MaxResults must be between 20 and 100.
        public let maxResults: Int32?

        public init(startTime: TimeStamp? = nil, sourceName: String? = nil, sourceType: SourceType? = nil, endTime: TimeStamp? = nil, duration: Int32? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.startTime = startTime
            self.sourceName = sourceName
            self.sourceType = sourceType
            self.endTime = endTime
            self.duration = duration
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case sourceName = "SourceName"
            case sourceType = "SourceType"
            case endTime = "EndTime"
            case duration = "Duration"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct UpdateClusterRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotificationTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "NotificationTopicStatus", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "ClusterName", required: true, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .list), 
            AWSShapeMember(label: "ParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) that identifies the topic.
        public let notificationTopicArn: String?
        /// The current state of the topic.
        public let notificationTopicStatus: String?
        /// A range of time when maintenance of DAX cluster software will be performed. For example: sun:01:00-sun:09:00. Cluster maintenance normally takes less than 30 minutes, and is performed automatically within the maintenance window.
        public let preferredMaintenanceWindow: String?
        /// The name of the DAX cluster to be modified.
        public let clusterName: String
        /// A list of user-specified security group IDs to be assigned to each node in the DAX cluster. If this parameter is not specified, DAX assigns the default VPC security group to each node.
        public let securityGroupIds: [String]?
        /// The name of a parameter group for this cluster.
        public let parameterGroupName: String?
        /// A description of the changes being made to the cluster.
        public let description: String?

        public init(notificationTopicArn: String? = nil, notificationTopicStatus: String? = nil, preferredMaintenanceWindow: String? = nil, clusterName: String, securityGroupIds: [String]? = nil, parameterGroupName: String? = nil, description: String? = nil) {
            self.notificationTopicArn = notificationTopicArn
            self.notificationTopicStatus = notificationTopicStatus
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.clusterName = clusterName
            self.securityGroupIds = securityGroupIds
            self.parameterGroupName = parameterGroupName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case notificationTopicArn = "NotificationTopicArn"
            case notificationTopicStatus = "NotificationTopicStatus"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case clusterName = "ClusterName"
            case securityGroupIds = "SecurityGroupIds"
            case parameterGroupName = "ParameterGroupName"
            case description = "Description"
        }
    }

    public struct DeleteSubnetGroupRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetGroupName", required: true, type: .string)
        ]
        /// The name of the subnet group to delete.
        public let subnetGroupName: String

        public init(subnetGroupName: String) {
            self.subnetGroupName = subnetGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case subnetGroupName = "SubnetGroupName"
        }
    }

    public struct DeleteParameterGroupResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "DeletionMessage", required: false, type: .string)
        ]
        /// A user-specified message for this action (i.e., a reason for deleting the parameter group).
        public let deletionMessage: String?

        public init(deletionMessage: String? = nil) {
            self.deletionMessage = deletionMessage
        }

        private enum CodingKeys: String, CodingKey {
            case deletionMessage = "DeletionMessage"
        }
    }

    public struct SubnetGroup: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Subnets", required: false, type: .list), 
            AWSShapeMember(label: "VpcId", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The name of the subnet group.
        public let subnetGroupName: String?
        /// A list of subnets associated with the subnet group. 
        public let subnets: [Subnet]?
        /// The Amazon Virtual Private Cloud identifier (VPC ID) of the subnet group.
        public let vpcId: String?
        /// The description of the subnet group.
        public let description: String?

        public init(subnetGroupName: String? = nil, subnets: [Subnet]? = nil, vpcId: String? = nil, description: String? = nil) {
            self.subnetGroupName = subnetGroupName
            self.subnets = subnets
            self.vpcId = vpcId
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case subnetGroupName = "SubnetGroupName"
            case subnets = "Subnets"
            case vpcId = "VpcId"
            case description = "Description"
        }
    }

    public struct CreateParameterGroupRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ParameterGroupName", required: true, type: .string)
        ]
        /// A description of the parameter group.
        public let description: String?
        /// The name of the parameter group to apply to all of the clusters in this replication group.
        public let parameterGroupName: String

        public init(description: String? = nil, parameterGroupName: String) {
            self.description = description
            self.parameterGroupName = parameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case description = "Description"
            case parameterGroupName = "ParameterGroupName"
        }
    }

    public struct DescribeDefaultParametersResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Parameters", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// A list of parameters. Each element in the list represents one parameter.
        public let parameters: [Parameter]?
        /// Provides an identifier to allow retrieval of paginated results.
        public let nextToken: String?

        public init(parameters: [Parameter]? = nil, nextToken: String? = nil) {
            self.parameters = parameters
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case parameters = "Parameters"
            case nextToken = "NextToken"
        }
    }

    public struct SecurityGroupMembership: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupIdentifier", required: false, type: .string)
        ]
        /// The status of this security group.
        public let status: String?
        /// The unique ID for this security group.
        public let securityGroupIdentifier: String?

        public init(status: String? = nil, securityGroupIdentifier: String? = nil) {
            self.status = status
            self.securityGroupIdentifier = securityGroupIdentifier
        }

        private enum CodingKeys: String, CodingKey {
            case status = "Status"
            case securityGroupIdentifier = "SecurityGroupIdentifier"
        }
    }

    public struct IncreaseReplicationFactorRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "ClusterName", required: true, type: .string), 
            AWSShapeMember(label: "NewReplicationFactor", required: true, type: .integer)
        ]
        /// The Availability Zones (AZs) in which the cluster nodes will be created. All nodes belonging to the cluster are placed in these Availability Zones. Use this parameter if you want to distribute the nodes across multiple AZs.
        public let availabilityZones: [String]?
        /// The name of the DAX cluster that will receive additional nodes.
        public let clusterName: String
        /// The new number of nodes for the DAX cluster.
        public let newReplicationFactor: Int32

        public init(availabilityZones: [String]? = nil, clusterName: String, newReplicationFactor: Int32) {
            self.availabilityZones = availabilityZones
            self.clusterName = clusterName
            self.newReplicationFactor = newReplicationFactor
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case clusterName = "ClusterName"
            case newReplicationFactor = "NewReplicationFactor"
        }
    }

    public struct DescribeEventsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "Events", required: false, type: .list)
        ]
        /// Provides an identifier to allow retrieval of paginated results.
        public let nextToken: String?
        /// An array of events. Each element in the array represents one event.
        public let events: [Event]?

        public init(nextToken: String? = nil, events: [Event]? = nil) {
            self.nextToken = nextToken
            self.events = events
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case events = "Events"
        }
    }

    public struct Cluster: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterDiscoveryEndpoint", required: false, type: .structure), 
            AWSShapeMember(label: "ClusterName", required: false, type: .string), 
            AWSShapeMember(label: "NodeType", required: false, type: .string), 
            AWSShapeMember(label: "TotalNodes", required: false, type: .integer), 
            AWSShapeMember(label: "SubnetGroup", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string), 
            AWSShapeMember(label: "ParameterGroup", required: false, type: .structure), 
            AWSShapeMember(label: "Nodes", required: false, type: .list), 
            AWSShapeMember(label: "Status", required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroups", required: false, type: .list), 
            AWSShapeMember(label: "IamRoleArn", required: false, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "ActiveNodes", required: false, type: .integer), 
            AWSShapeMember(label: "NotificationConfiguration", required: false, type: .structure), 
            AWSShapeMember(label: "NodeIdsToRemove", required: false, type: .list), 
            AWSShapeMember(label: "ClusterArn", required: false, type: .string)
        ]
        /// The configuration endpoint for this DAX cluster, consisting of a DNS name and a port number. Client applications can specify this endpoint, rather than an individual node endpoint, and allow the DAX client software to intelligently route requests and responses to nodes in the DAX cluster.
        public let clusterDiscoveryEndpoint: Endpoint?
        /// The name of the DAX cluster.
        public let clusterName: String?
        /// The node type for the nodes in the cluster. (All nodes in a DAX cluster are of the same type.)
        public let nodeType: String?
        /// The total number of nodes in the cluster.
        public let totalNodes: Int32?
        /// The subnet group where the DAX cluster is running.
        public let subnetGroup: String?
        /// The description of the cluster.
        public let description: String?
        /// The parameter group being used by nodes in the cluster.
        public let parameterGroup: ParameterGroupStatus?
        /// A list of nodes that are currently in the cluster.
        public let nodes: [Node]?
        /// The current status of the cluster.
        public let status: String?
        /// A list of security groups, and the status of each, for the nodes in the cluster.
        public let securityGroups: [SecurityGroupMembership]?
        /// A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime, DAX will assume this role and use the role's permissions to access DynamoDB on your behalf.
        public let iamRoleArn: String?
        /// A range of time when maintenance of DAX cluster software will be performed. For example: sun:01:00-sun:09:00. Cluster maintenance normally takes less than 30 minutes, and is performed automatically within the maintenance window.
        public let preferredMaintenanceWindow: String?
        /// The number of nodes in the cluster that are active (i.e., capable of serving requests).
        public let activeNodes: Int32?
        /// Describes a notification topic and its status. Notification topics are used for publishing DAX events to subscribers using Amazon Simple Notification Service (SNS).
        public let notificationConfiguration: NotificationConfiguration?
        /// A list of nodes to be removed from the cluster.
        public let nodeIdsToRemove: [String]?
        /// The Amazon Resource Name (ARN) that uniquely identifies the cluster. 
        public let clusterArn: String?

        public init(clusterDiscoveryEndpoint: Endpoint? = nil, clusterName: String? = nil, nodeType: String? = nil, totalNodes: Int32? = nil, subnetGroup: String? = nil, description: String? = nil, parameterGroup: ParameterGroupStatus? = nil, nodes: [Node]? = nil, status: String? = nil, securityGroups: [SecurityGroupMembership]? = nil, iamRoleArn: String? = nil, preferredMaintenanceWindow: String? = nil, activeNodes: Int32? = nil, notificationConfiguration: NotificationConfiguration? = nil, nodeIdsToRemove: [String]? = nil, clusterArn: String? = nil) {
            self.clusterDiscoveryEndpoint = clusterDiscoveryEndpoint
            self.clusterName = clusterName
            self.nodeType = nodeType
            self.totalNodes = totalNodes
            self.subnetGroup = subnetGroup
            self.description = description
            self.parameterGroup = parameterGroup
            self.nodes = nodes
            self.status = status
            self.securityGroups = securityGroups
            self.iamRoleArn = iamRoleArn
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.activeNodes = activeNodes
            self.notificationConfiguration = notificationConfiguration
            self.nodeIdsToRemove = nodeIdsToRemove
            self.clusterArn = clusterArn
        }

        private enum CodingKeys: String, CodingKey {
            case clusterDiscoveryEndpoint = "ClusterDiscoveryEndpoint"
            case clusterName = "ClusterName"
            case nodeType = "NodeType"
            case totalNodes = "TotalNodes"
            case subnetGroup = "SubnetGroup"
            case description = "Description"
            case parameterGroup = "ParameterGroup"
            case nodes = "Nodes"
            case status = "Status"
            case securityGroups = "SecurityGroups"
            case iamRoleArn = "IamRoleArn"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case activeNodes = "ActiveNodes"
            case notificationConfiguration = "NotificationConfiguration"
            case nodeIdsToRemove = "NodeIdsToRemove"
            case clusterArn = "ClusterArn"
        }
    }

    public struct DescribeParameterGroupsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ParameterGroups", required: false, type: .list)
        ]
        /// Provides an identifier to allow retrieval of paginated results.
        public let nextToken: String?
        /// An array of parameter groups. Each element in the array represents one parameter group.
        public let parameterGroups: [ParameterGroup]?

        public init(nextToken: String? = nil, parameterGroups: [ParameterGroup]? = nil) {
            self.nextToken = nextToken
            self.parameterGroups = parameterGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case parameterGroups = "ParameterGroups"
        }
    }

    public struct Subnet: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIdentifier", required: false, type: .string), 
            AWSShapeMember(label: "SubnetAvailabilityZone", required: false, type: .string)
        ]
        /// The system-assigned identifier for the subnet.
        public let subnetIdentifier: String?
        /// The Availability Zone (AZ) for subnet subnet.
        public let subnetAvailabilityZone: String?

        public init(subnetIdentifier: String? = nil, subnetAvailabilityZone: String? = nil) {
            self.subnetIdentifier = subnetIdentifier
            self.subnetAvailabilityZone = subnetAvailabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIdentifier = "SubnetIdentifier"
            case subnetAvailabilityZone = "SubnetAvailabilityZone"
        }
    }

    public enum IsModifiable: String, CustomStringConvertible, Codable {
        case `true` = "TRUE"
        case `false` = "FALSE"
        case conditional = "CONDITIONAL"
        public var description: String { return self.rawValue }
    }

    public struct Parameter: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterType", required: false, type: .enum), 
            AWSShapeMember(label: "NodeTypeSpecificValues", required: false, type: .list), 
            AWSShapeMember(label: "AllowedValues", required: false, type: .string), 
            AWSShapeMember(label: "ParameterValue", required: false, type: .string), 
            AWSShapeMember(label: "DataType", required: false, type: .string), 
            AWSShapeMember(label: "ParameterName", required: false, type: .string), 
            AWSShapeMember(label: "Source", required: false, type: .string), 
            AWSShapeMember(label: "IsModifiable", required: false, type: .enum), 
            AWSShapeMember(label: "ChangeType", required: false, type: .enum), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// Determines whether the parameter can be applied to any nodes, or only nodes of a particular type.
        public let parameterType: ParameterType?
        /// A list of node types, and specific parameter values for each node.
        public let nodeTypeSpecificValues: [NodeTypeSpecificValue]?
        /// A range of values within which the parameter can be set.
        public let allowedValues: String?
        /// The value for the parameter.
        public let parameterValue: String?
        /// The data type of the parameter. For example, integer:
        public let dataType: String?
        /// The name of the parameter.
        public let parameterName: String?
        /// How the parameter is defined. For example, system denotes a system-defined parameter.
        public let source: String?
        /// Whether the customer is allowed to modify the parameter.
        public let isModifiable: IsModifiable?
        /// The conditions under which changes to this parameter can be applied. For example, requires-reboot indicates that a new value for this parameter will only take effect if a node is rebooted.
        public let changeType: ChangeType?
        /// A description of the parameter
        public let description: String?

        public init(parameterType: ParameterType? = nil, nodeTypeSpecificValues: [NodeTypeSpecificValue]? = nil, allowedValues: String? = nil, parameterValue: String? = nil, dataType: String? = nil, parameterName: String? = nil, source: String? = nil, isModifiable: IsModifiable? = nil, changeType: ChangeType? = nil, description: String? = nil) {
            self.parameterType = parameterType
            self.nodeTypeSpecificValues = nodeTypeSpecificValues
            self.allowedValues = allowedValues
            self.parameterValue = parameterValue
            self.dataType = dataType
            self.parameterName = parameterName
            self.source = source
            self.isModifiable = isModifiable
            self.changeType = changeType
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case parameterType = "ParameterType"
            case nodeTypeSpecificValues = "NodeTypeSpecificValues"
            case allowedValues = "AllowedValues"
            case parameterValue = "ParameterValue"
            case dataType = "DataType"
            case parameterName = "ParameterName"
            case source = "Source"
            case isModifiable = "IsModifiable"
            case changeType = "ChangeType"
            case description = "Description"
        }
    }

    public struct DescribeSubnetGroupsResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetGroups", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// An array of subnet groups. Each element in the array represents a single subnet group.
        public let subnetGroups: [SubnetGroup]?
        /// Provides an identifier to allow retrieval of paginated results.
        public let nextToken: String?

        public init(subnetGroups: [SubnetGroup]? = nil, nextToken: String? = nil) {
            self.subnetGroups = subnetGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case subnetGroups = "SubnetGroups"
            case nextToken = "NextToken"
        }
    }

    public struct DescribeDefaultParametersRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
        public let nextToken: String?
        /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved. The value for MaxResults must be between 20 and 100.
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct TagResourceResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// The list of tags that are associated with the DAX resource.
        public let tags: [Tag]?

        public init(tags: [Tag]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct Event: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SourceName", required: false, type: .string), 
            AWSShapeMember(label: "Message", required: false, type: .string), 
            AWSShapeMember(label: "SourceType", required: false, type: .enum), 
            AWSShapeMember(label: "Date", required: false, type: .timestamp)
        ]
        /// The source of the event. For example, if the event occurred at the node level, the source would be the node ID.
        public let sourceName: String?
        /// A user-defined message associated with the event.
        public let message: String?
        /// Specifies the origin of this event - a cluster, a parameter group, a node ID, etc.
        public let sourceType: SourceType?
        /// The date and time when the event occurred.
        public let date: TimeStamp?

        public init(sourceName: String? = nil, message: String? = nil, sourceType: SourceType? = nil, date: TimeStamp? = nil) {
            self.sourceName = sourceName
            self.message = message
            self.sourceType = sourceType
            self.date = date
        }

        private enum CodingKeys: String, CodingKey {
            case sourceName = "SourceName"
            case message = "Message"
            case sourceType = "SourceType"
            case date = "Date"
        }
    }

    public struct CreateClusterRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "ReplicationFactor", required: true, type: .integer), 
            AWSShapeMember(label: "NotificationTopicArn", required: false, type: .string), 
            AWSShapeMember(label: "IamRoleArn", required: true, type: .string), 
            AWSShapeMember(label: "PreferredMaintenanceWindow", required: false, type: .string), 
            AWSShapeMember(label: "ClusterName", required: true, type: .string), 
            AWSShapeMember(label: "NodeType", required: true, type: .string), 
            AWSShapeMember(label: "SubnetGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Tags", required: false, type: .list), 
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .list), 
            AWSShapeMember(label: "ParameterGroupName", required: false, type: .string), 
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The Availability Zones (AZs) in which the cluster nodes will be created. All nodes belonging to the cluster are placed in these Availability Zones. Use this parameter if you want to distribute the nodes across multiple AZs.
        public let availabilityZones: [String]?
        /// The number of nodes in the DAX cluster. A replication factor of 1 will create a single-node cluster, without any read replicas. For additional fault tolerance, you can create a multiple node cluster with one or more read replicas. To do this, set ReplicationFactor to 2 or more.  AWS recommends that you have at least two read replicas per cluster. 
        public let replicationFactor: Int32
        /// The Amazon Resource Name (ARN) of the Amazon SNS topic to which notifications will be sent.  The Amazon SNS topic owner must be same as the DAX cluster owner. 
        public let notificationTopicArn: String?
        /// A valid Amazon Resource Name (ARN) that identifies an IAM role. At runtime, DAX will assume this role and use the role's permissions to access DynamoDB on your behalf.
        public let iamRoleArn: String
        /// Specifies the weekly time range during which maintenance on the DAX cluster is performed. It is specified as a range in the format ddd:hh24:mi-ddd:hh24:mi (24H Clock UTC). The minimum maintenance window is a 60 minute period. Valid values for ddd are:    sun     mon     tue     wed     thu     fri     sat    Example: sun:05:00-sun:09:00   If you don't specify a preferred maintenance window when you create or modify a cache cluster, DAX assigns a 60-minute maintenance window on a randomly selected day of the week. 
        public let preferredMaintenanceWindow: String?
        /// The cluster identifier. This parameter is stored as a lowercase string.  Constraints:    A name must contain from 1 to 20 alphanumeric characters or hyphens.   The first character must be a letter.   A name cannot end with a hyphen or contain two consecutive hyphens.  
        public let clusterName: String
        /// The compute and memory capacity of the nodes in the cluster.
        public let nodeType: String
        /// The name of the subnet group to be used for the replication group.  DAX clusters can only run in an Amazon VPC environment. All of the subnets that you specify in a subnet group must exist in the same VPC. 
        public let subnetGroupName: String?
        /// A set of tags to associate with the DAX cluster. 
        public let tags: [Tag]?
        /// A list of security group IDs to be assigned to each node in the DAX cluster. (Each of the security group ID is system-generated.) If this parameter is not specified, DAX assigns the default VPC security group to each node.
        public let securityGroupIds: [String]?
        /// The parameter group to be associated with the DAX cluster.
        public let parameterGroupName: String?
        /// A description of the cluster.
        public let description: String?

        public init(availabilityZones: [String]? = nil, replicationFactor: Int32, notificationTopicArn: String? = nil, iamRoleArn: String, preferredMaintenanceWindow: String? = nil, clusterName: String, nodeType: String, subnetGroupName: String? = nil, tags: [Tag]? = nil, securityGroupIds: [String]? = nil, parameterGroupName: String? = nil, description: String? = nil) {
            self.availabilityZones = availabilityZones
            self.replicationFactor = replicationFactor
            self.notificationTopicArn = notificationTopicArn
            self.iamRoleArn = iamRoleArn
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.clusterName = clusterName
            self.nodeType = nodeType
            self.subnetGroupName = subnetGroupName
            self.tags = tags
            self.securityGroupIds = securityGroupIds
            self.parameterGroupName = parameterGroupName
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case replicationFactor = "ReplicationFactor"
            case notificationTopicArn = "NotificationTopicArn"
            case iamRoleArn = "IamRoleArn"
            case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
            case clusterName = "ClusterName"
            case nodeType = "NodeType"
            case subnetGroupName = "SubnetGroupName"
            case tags = "Tags"
            case securityGroupIds = "SecurityGroupIds"
            case parameterGroupName = "ParameterGroupName"
            case description = "Description"
        }
    }

    public struct CreateSubnetGroupResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetGroup", required: false, type: .structure)
        ]
        /// Represents the output of a CreateSubnetGroup operation.
        public let subnetGroup: SubnetGroup?

        public init(subnetGroup: SubnetGroup? = nil) {
            self.subnetGroup = subnetGroup
        }

        private enum CodingKeys: String, CodingKey {
            case subnetGroup = "SubnetGroup"
        }
    }

    public struct DeleteClusterResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        /// A description of the DAX cluster that is being deleted.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct RebootNodeRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NodeId", required: true, type: .string), 
            AWSShapeMember(label: "ClusterName", required: true, type: .string)
        ]
        /// The system-assigned ID of the node to be rebooted.
        public let nodeId: String
        /// The name of the DAX cluster containing the node to be rebooted.
        public let clusterName: String

        public init(nodeId: String, clusterName: String) {
            self.nodeId = nodeId
            self.clusterName = clusterName
        }

        private enum CodingKeys: String, CodingKey {
            case nodeId = "NodeId"
            case clusterName = "ClusterName"
        }
    }

    public struct ParameterGroupStatus: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterApplyStatus", required: false, type: .string), 
            AWSShapeMember(label: "NodeIdsToReboot", required: false, type: .list), 
            AWSShapeMember(label: "ParameterGroupName", required: false, type: .string)
        ]
        /// The status of parameter updates. 
        public let parameterApplyStatus: String?
        /// The node IDs of one or more nodes to be rebooted.
        public let nodeIdsToReboot: [String]?
        /// The name of the parameter group.
        public let parameterGroupName: String?

        public init(parameterApplyStatus: String? = nil, nodeIdsToReboot: [String]? = nil, parameterGroupName: String? = nil) {
            self.parameterApplyStatus = parameterApplyStatus
            self.nodeIdsToReboot = nodeIdsToReboot
            self.parameterGroupName = parameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case parameterApplyStatus = "ParameterApplyStatus"
            case nodeIdsToReboot = "NodeIdsToReboot"
            case parameterGroupName = "ParameterGroupName"
        }
    }

    public enum ParameterType: String, CustomStringConvertible, Codable {
        case `default` = "DEFAULT"
        case nodeTypeSpecific = "NODE_TYPE_SPECIFIC"
        public var description: String { return self.rawValue }
    }

    public struct DecreaseReplicationFactorResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        /// A description of the DAX cluster, after you have decreased its replication factor.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct UpdateClusterResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Cluster", required: false, type: .structure)
        ]
        /// A description of the DAX cluster, after it has been modified.
        public let cluster: Cluster?

        public init(cluster: Cluster? = nil) {
            self.cluster = cluster
        }

        private enum CodingKeys: String, CodingKey {
            case cluster = "Cluster"
        }
    }

    public struct UntagResourceResponse: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// The tag keys that have been removed from the cluster.
        public let tags: [Tag]?

        public init(tags: [Tag]? = nil) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct DeleteParameterGroupRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterGroupName", required: true, type: .string)
        ]
        /// The name of the parameter group to delete.
        public let parameterGroupName: String

        public init(parameterGroupName: String) {
            self.parameterGroupName = parameterGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case parameterGroupName = "ParameterGroupName"
        }
    }

    public struct DescribeClustersRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ClusterNames", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", required: false, type: .integer)
        ]
        /// The names of the DAX clusters being described.
        public let clusterNames: [String]?
        /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token, up to the value specified by MaxResults.
        public let nextToken: String?
        /// The maximum number of results to include in the response. If more results exist than the specified MaxResults value, a token is included in the response so that the remaining results can be retrieved. The value for MaxResults must be between 20 and 100.
        public let maxResults: Int32?

        public init(clusterNames: [String]? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.clusterNames = clusterNames
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case clusterNames = "ClusterNames"
            case nextToken = "NextToken"
            case maxResults = "MaxResults"
        }
    }

    public struct Node: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ParameterGroupStatus", required: false, type: .string), 
            AWSShapeMember(label: "Endpoint", required: false, type: .structure), 
            AWSShapeMember(label: "NodeCreateTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "AvailabilityZone", required: false, type: .string), 
            AWSShapeMember(label: "NodeId", required: false, type: .string), 
            AWSShapeMember(label: "NodeStatus", required: false, type: .string)
        ]
        /// The status of the parameter group associated with this node. For example, in-sync.
        public let parameterGroupStatus: String?
        /// The endpoint for the node, consisting of a DNS name and a port number. Client applications can connect directly to a node endpoint, if desired (as an alternative to allowing DAX client software to intelligently route requests and responses to nodes in the DAX cluster.
        public let endpoint: Endpoint?
        /// The date and time (in UNIX epoch format) when the node was launched.
        public let nodeCreateTime: TimeStamp?
        /// The Availability Zone (AZ) in which the node has been deployed.
        public let availabilityZone: String?
        /// A system-generated identifier for the node.
        public let nodeId: String?
        /// The current status of the node. For example: available.
        public let nodeStatus: String?

        public init(parameterGroupStatus: String? = nil, endpoint: Endpoint? = nil, nodeCreateTime: TimeStamp? = nil, availabilityZone: String? = nil, nodeId: String? = nil, nodeStatus: String? = nil) {
            self.parameterGroupStatus = parameterGroupStatus
            self.endpoint = endpoint
            self.nodeCreateTime = nodeCreateTime
            self.availabilityZone = availabilityZone
            self.nodeId = nodeId
            self.nodeStatus = nodeStatus
        }

        private enum CodingKeys: String, CodingKey {
            case parameterGroupStatus = "ParameterGroupStatus"
            case endpoint = "Endpoint"
            case nodeCreateTime = "NodeCreateTime"
            case availabilityZone = "AvailabilityZone"
            case nodeId = "NodeId"
            case nodeStatus = "NodeStatus"
        }
    }

    public struct ListTagsRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ResourceName", required: true, type: .string)
        ]
        /// An optional token returned from a prior request. Use this token for pagination of results from this action. If this parameter is specified, the response includes only results beyond the token.
        public let nextToken: String?
        /// The name of the DAX resource to which the tags belong.
        public let resourceName: String

        public init(nextToken: String? = nil, resourceName: String) {
            self.nextToken = nextToken
            self.resourceName = resourceName
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case resourceName = "ResourceName"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var members: [AWSShapeMember] = [
            AWSShapeMember(label: "ResourceName", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// The name of the DAX resource from which the tags should be removed.
        public let resourceName: String
        /// A list of tag keys. If the DAX cluster has any tags with these keys, then the tags are removed from the cluster.
        public let tagKeys: [String]

        public init(resourceName: String, tagKeys: [String]) {
            self.resourceName = resourceName
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceName = "ResourceName"
            case tagKeys = "TagKeys"
        }
    }

}