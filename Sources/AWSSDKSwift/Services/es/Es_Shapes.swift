// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Es {

    public struct InstanceCountLimits: Serializable, Initializable {
        var minimumInstanceCount: Int32? = nil
        var maximumInstanceCount: Int32? = nil

        public init() {}

        public init(minimumInstanceCount: Int32? = nil, maximumInstanceCount: Int32? = nil) {
            self.minimumInstanceCount = minimumInstanceCount
            self.maximumInstanceCount = maximumInstanceCount
        }

    }

    public struct DescribeElasticsearchDomainsRequest: Serializable, Initializable {
        /// The Elasticsearch domains for which you want information.
        var domainNames: [String] = []

        public init() {}

        public init(domainNames: [String]) {
            self.domainNames = domainNames
        }

    }

    public struct DescribeElasticsearchDomainRequest: Serializable, Initializable {
        /// The name of the Elasticsearch domain for which you want information.
        var domainName: String = ""

        public init() {}

        public init(domainName: String) {
            self.domainName = domainName
        }

    }

    public struct AddTagsRequest: Serializable, Initializable {
        ///  Specify the ARN for which you want to add the tags.
        var aRN: String = ""
        ///  List of Tag that need to be added for the Elasticsearch domain. 
        var tagList: [Tag] = []

        public init() {}

        public init(aRN: String, tagList: [Tag]) {
            self.aRN = aRN
            self.tagList = tagList
        }

    }

    public struct ListElasticsearchInstanceTypesRequest: Serializable, Initializable {
        ///  Set this value to limit the number of results returned. Value provided must be greater than 30 else it wont be honored. 
        var maxResults: Int32? = nil
        /// DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for list of available Elasticsearch instance types when modifying existing domain. 
        var domainName: String? = nil
        /// NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination. 
        var nextToken: String? = nil
        /// Version of Elasticsearch for which list of supported elasticsearch instance types are needed. 
        var elasticsearchVersion: String = ""

        public init() {}

        public init(maxResults: Int32? = nil, domainName: String? = nil, nextToken: String? = nil, elasticsearchVersion: String) {
            self.maxResults = maxResults
            self.domainName = domainName
            self.nextToken = nextToken
            self.elasticsearchVersion = elasticsearchVersion
        }

    }

    public struct UpdateElasticsearchDomainConfigRequest: Serializable, Initializable {
        /// Option to set the time, in UTC format, for the daily automated snapshot. Default value is 0 hours. 
        var snapshotOptions: SnapshotOptions? = nil
        /// The type and number of instances to instantiate for the domain cluster.
        var elasticsearchClusterConfig: ElasticsearchClusterConfig? = nil
        /// Modifies the advanced option to allow references to indices in an HTTP request body. Must be false when configuring access to individual sub-resources. By default, the value is true. See Configuration Advanced Options for more information.
        var advancedOptions: [String: String]? = nil
        /// IAM access policy as a JSON-formatted string.
        var accessPolicies: String? = nil
        /// Specify the type and size of the EBS volume that you want to use. 
        var eBSOptions: EBSOptions? = nil
        /// The name of the Elasticsearch domain that you are updating. 
        var domainName: String = ""

        public init() {}

        public init(snapshotOptions: SnapshotOptions? = nil, elasticsearchClusterConfig: ElasticsearchClusterConfig? = nil, advancedOptions: [String: String]? = nil, accessPolicies: String? = nil, eBSOptions: EBSOptions? = nil, domainName: String) {
            self.snapshotOptions = snapshotOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.advancedOptions = advancedOptions
            self.accessPolicies = accessPolicies
            self.eBSOptions = eBSOptions
            self.domainName = domainName
        }

    }

    public struct CreateElasticsearchDomainResponse: Serializable, Initializable {
        /// The status of the newly created Elasticsearch domain. 
        var domainStatus: ElasticsearchDomainStatus? = nil

        public init() {}

        public init(domainStatus: ElasticsearchDomainStatus? = nil) {
            self.domainStatus = domainStatus
        }

    }

    public struct ElasticsearchClusterConfigStatus: Serializable, Initializable {
        ///  Specifies the cluster configuration for the specified Elasticsearch domain.
        var options: ElasticsearchClusterConfig = ElasticsearchClusterConfig()
        ///  Specifies the status of the configuration for the specified Elasticsearch domain.
        var status: OptionStatus = OptionStatus()

        public init() {}

        public init(options: ElasticsearchClusterConfig, status: OptionStatus) {
            self.options = options
            self.status = status
        }

    }

    public struct ListTagsResponse: Serializable, Initializable {
        ///  List of Tag for the requested Elasticsearch domain.
        var tagList: [Tag]? = nil

        public init() {}

        public init(tagList: [Tag]? = nil) {
            self.tagList = tagList
        }

    }

    public struct DescribeElasticsearchInstanceTypeLimitsRequest: Serializable, Initializable {
        ///  The instance type for an Elasticsearch cluster for which Elasticsearch  Limits  are needed. 
        var instanceType: String = ""
        ///  DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for Elasticsearch  Limits  for existing domain. 
        var domainName: String? = nil
        ///  Version of Elasticsearch for which  Limits  are needed. 
        var elasticsearchVersion: String = ""

        public init() {}

        public init(instanceType: String, domainName: String? = nil, elasticsearchVersion: String) {
            self.instanceType = instanceType
            self.domainName = domainName
            self.elasticsearchVersion = elasticsearchVersion
        }

    }

    public struct RemoveTagsRequest: Serializable, Initializable {
        /// Specifies the ARN for the Elasticsearch domain from which you want to delete the specified tags.
        var aRN: String = ""
        /// Specifies the TagKey list which you want to remove from the Elasticsearch domain.
        var tagKeys: [String] = []

        public init() {}

        public init(aRN: String, tagKeys: [String]) {
            self.aRN = aRN
            self.tagKeys = tagKeys
        }

    }

    public struct OptionStatus: Serializable, Initializable {
        /// Specifies the latest version for the entity.
        var updateVersion: Int32? = nil
        /// Indicates whether the Elasticsearch domain is being deleted.
        var pendingDeletion: Bool? = nil
        /// Timestamp which tells the creation date for the entity.
        var creationDate: Date = Date()
        /// Provides the OptionState for the Elasticsearch domain.
        var state: String = ""
        /// Timestamp which tells the last updated time for the entity.
        var updateDate: Date = Date()

        public init() {}

        public init(updateVersion: Int32? = nil, pendingDeletion: Bool? = nil, creationDate: Date, state: String, updateDate: Date) {
            self.updateVersion = updateVersion
            self.pendingDeletion = pendingDeletion
            self.creationDate = creationDate
            self.state = state
            self.updateDate = updateDate
        }

    }

    public struct DescribeElasticsearchInstanceTypeLimitsResponse: Serializable, Initializable {
        var limitsByRole: [String: Limits]? = nil

        public init() {}

        public init(limitsByRole: [String: Limits]? = nil) {
            self.limitsByRole = limitsByRole
        }

    }

    public struct DescribeElasticsearchDomainResponse: Serializable, Initializable {
        /// The current status of the Elasticsearch domain.
        var domainStatus: ElasticsearchDomainStatus = ElasticsearchDomainStatus()

        public init() {}

        public init(domainStatus: ElasticsearchDomainStatus) {
            self.domainStatus = domainStatus
        }

    }

    public struct AdditionalLimit: Serializable, Initializable {
        ///  Name of Additional Limit is specific to a given InstanceType and for each of it's  InstanceRole  etc.  Attributes and their details:   MaximumNumberOfDataNodesSupported This attribute will be present in Master node only to specify how much data nodes upto which given  ESPartitionInstanceType  can support as master node. MaximumNumberOfDataNodesWithoutMasterNode This attribute will be present in Data node only to specify how much data nodes of given  ESPartitionInstanceType  upto which you don't need any master nodes to govern them.  
        var limitName: String? = nil
        ///  Value for given  AdditionalLimit$LimitName  . 
        var limitValues: [String]? = nil

        public init() {}

        public init(limitName: String? = nil, limitValues: [String]? = nil) {
            self.limitName = limitName
            self.limitValues = limitValues
        }

    }

    public struct ListDomainNamesResponse: Serializable, Initializable {
        /// List of Elasticsearch domain names.
        var domainNames: [DomainInfo]? = nil

        public init() {}

        public init(domainNames: [DomainInfo]? = nil) {
            self.domainNames = domainNames
        }

    }

    public struct SnapshotOptions: Serializable, Initializable {
        /// Specifies the time, in UTC format, when the service takes a daily automated snapshot of the specified Elasticsearch domain. Default value is 0 hours.
        var automatedSnapshotStartHour: Int32? = nil

        public init() {}

        public init(automatedSnapshotStartHour: Int32? = nil) {
            self.automatedSnapshotStartHour = automatedSnapshotStartHour
        }

    }

    public struct EBSOptions: Serializable, Initializable {
        ///  Integer to specify the size of an EBS volume.
        var volumeSize: Int32? = nil
        ///  Specifies the volume type for EBS-based storage.
        var volumeType: String? = nil
        /// Specifies the IOPD for a Provisioned IOPS EBS volume (SSD).
        var iops: Int32? = nil
        /// Specifies whether EBS-based storage is enabled.
        var eBSEnabled: Bool? = nil

        public init() {}

        public init(volumeSize: Int32? = nil, volumeType: String? = nil, iops: Int32? = nil, eBSEnabled: Bool? = nil) {
            self.volumeSize = volumeSize
            self.volumeType = volumeType
            self.iops = iops
            self.eBSEnabled = eBSEnabled
        }

    }

    public struct DescribeElasticsearchDomainConfigRequest: Serializable, Initializable {
        /// The Elasticsearch domain that you want to get information about.
        var domainName: String = ""

        public init() {}

        public init(domainName: String) {
            self.domainName = domainName
        }

    }

    public struct DescribeElasticsearchDomainConfigResponse: Serializable, Initializable {
        /// The configuration information of the domain requested in the DescribeElasticsearchDomainConfig request.
        var domainConfig: ElasticsearchDomainConfig = ElasticsearchDomainConfig()

        public init() {}

        public init(domainConfig: ElasticsearchDomainConfig) {
            self.domainConfig = domainConfig
        }

    }

    public struct ListElasticsearchVersionsRequest: Serializable, Initializable {
        var nextToken: String? = nil
        ///  Set this value to limit the number of results returned. Value provided must be greater than 10 else it wont be honored. 
        var maxResults: Int32? = nil

        public init() {}

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

    }

    public struct SnapshotOptionsStatus: Serializable, Initializable {
        /// Specifies the daily snapshot options specified for the Elasticsearch domain.
        var options: SnapshotOptions = SnapshotOptions()
        /// Specifies the status of a daily automated snapshot.
        var status: OptionStatus = OptionStatus()

        public init() {}

        public init(options: SnapshotOptions, status: OptionStatus) {
            self.options = options
            self.status = status
        }

    }

    public struct ListElasticsearchInstanceTypesResponse: Serializable, Initializable {
        ///  List of instance types supported by Amazon Elasticsearch service for given  ElasticsearchVersion  
        var elasticsearchInstanceTypes: [String]? = nil
        /// In case if there are more results available NextToken would be present, make further request to the same API with received NextToken to paginate remaining results. 
        var nextToken: String? = nil

        public init() {}

        public init(elasticsearchInstanceTypes: [String]? = nil, nextToken: String? = nil) {
            self.elasticsearchInstanceTypes = elasticsearchInstanceTypes
            self.nextToken = nextToken
        }

    }

    public struct Tag: Serializable, Initializable {
        /// Specifies the TagValue, the value assigned to the corresponding tag key. Tag values can be null and do not have to be unique in a tag set. For example, you can have a key value pair in a tag set of project : Trinity and cost-center : Trinity
        var value: String = ""
        /// Specifies the TagKey, the name of the tag. Tag keys must be unique for the Elasticsearch domain to which they are attached.
        var key: String = ""

        public init() {}

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

    }

    public struct DomainInfo: Serializable, Initializable {
        ///  Specifies the DomainName.
        var domainName: String? = nil

        public init() {}

        public init(domainName: String? = nil) {
            self.domainName = domainName
        }

    }

    public struct DescribeElasticsearchDomainsResponse: Serializable, Initializable {
        /// The status of the domains requested in the DescribeElasticsearchDomains request.
        var domainStatusList: [ElasticsearchDomainStatus] = []

        public init() {}

        public init(domainStatusList: [ElasticsearchDomainStatus]) {
            self.domainStatusList = domainStatusList
        }

    }

    public struct UpdateElasticsearchDomainConfigResponse: Serializable, Initializable {
        /// The status of the updated Elasticsearch domain. 
        var domainConfig: ElasticsearchDomainConfig = ElasticsearchDomainConfig()

        public init() {}

        public init(domainConfig: ElasticsearchDomainConfig) {
            self.domainConfig = domainConfig
        }

    }

    public struct StorageTypeLimit: Serializable, Initializable {
        ///  Name of storage limits that are applicable for given storage type. If  StorageType  is ebs, following storage options are applicable  MinimumVolumeSize Minimum amount of volume size that is applicable for given storage type.It can be empty if it is not applicable. MaximumVolumeSize Maximum amount of volume size that is applicable for given storage type.It can be empty if it is not applicable. MaximumIops Maximum amount of Iops that is applicable for given storage type.It can be empty if it is not applicable. MinimumIops Minimum amount of Iops that is applicable for given storage type.It can be empty if it is not applicable.  
        var limitName: String? = nil
        ///  Values for the  StorageTypeLimit$LimitName  . 
        var limitValues: [String]? = nil

        public init() {}

        public init(limitName: String? = nil, limitValues: [String]? = nil) {
            self.limitName = limitName
            self.limitValues = limitValues
        }

    }

    public struct ElasticsearchVersionStatus: Serializable, Initializable {
        ///  Specifies the Elasticsearch version for the specified Elasticsearch domain.
        var options: String = ""
        ///  Specifies the status of the Elasticsearch version options for the specified Elasticsearch domain.
        var status: OptionStatus = OptionStatus()

        public init() {}

        public init(options: String, status: OptionStatus) {
            self.options = options
            self.status = status
        }

    }

    public struct ListElasticsearchVersionsResponse: Serializable, Initializable {
        var elasticsearchVersions: [String]? = nil
        var nextToken: String? = nil

        public init() {}

        public init(elasticsearchVersions: [String]? = nil, nextToken: String? = nil) {
            self.elasticsearchVersions = elasticsearchVersions
            self.nextToken = nextToken
        }

    }

    public struct InstanceLimits: Serializable, Initializable {
        var instanceCountLimits: InstanceCountLimits? = nil

        public init() {}

        public init(instanceCountLimits: InstanceCountLimits? = nil) {
            self.instanceCountLimits = instanceCountLimits
        }

    }

    public struct DeleteElasticsearchDomainRequest: Serializable, Initializable {
        /// The name of the Elasticsearch domain that you want to permanently delete.
        var domainName: String = ""

        public init() {}

        public init(domainName: String) {
            self.domainName = domainName
        }

    }

    public struct AdvancedOptionsStatus: Serializable, Initializable {
        ///  Specifies the status of advanced options for the specified Elasticsearch domain.
        var options: [String: String] = [:]
        ///  Specifies the status of OptionStatus for advanced options for the specified Elasticsearch domain.
        var status: OptionStatus = OptionStatus()

        public init() {}

        public init(options: [String: String], status: OptionStatus) {
            self.options = options
            self.status = status
        }

    }

    public struct Limits: Serializable, Initializable {
        ///  List of additional limits that are specific to a given InstanceType and for each of it's  InstanceRole  . 
        var additionalLimits: [AdditionalLimit]? = nil
        /// StorageType represents the list of storage related types and attributes that are available for given InstanceType. 
        var storageTypes: [StorageType]? = nil
        var instanceLimits: InstanceLimits? = nil

        public init() {}

        public init(additionalLimits: [AdditionalLimit]? = nil, storageTypes: [StorageType]? = nil, instanceLimits: InstanceLimits? = nil) {
            self.additionalLimits = additionalLimits
            self.storageTypes = storageTypes
            self.instanceLimits = instanceLimits
        }

    }

    public struct ElasticsearchDomainConfig: Serializable, Initializable {
        /// Specifies the SnapshotOptions for the Elasticsearch domain.
        var snapshotOptions: SnapshotOptionsStatus? = nil
        /// Specifies the ElasticsearchClusterConfig for the Elasticsearch domain.
        var elasticsearchClusterConfig: ElasticsearchClusterConfigStatus? = nil
        /// IAM access policy as a JSON-formatted string.
        var accessPolicies: AccessPoliciesStatus? = nil
        /// Specifies the AdvancedOptions for the domain. See Configuring Advanced Options for more information.
        var advancedOptions: AdvancedOptionsStatus? = nil
        /// Specifies the EBSOptions for the Elasticsearch domain.
        var eBSOptions: EBSOptionsStatus? = nil
        /// String of format X.Y to specify version for the Elasticsearch domain.
        var elasticsearchVersion: ElasticsearchVersionStatus? = nil

        public init() {}

        public init(snapshotOptions: SnapshotOptionsStatus? = nil, elasticsearchClusterConfig: ElasticsearchClusterConfigStatus? = nil, accessPolicies: AccessPoliciesStatus? = nil, advancedOptions: AdvancedOptionsStatus? = nil, eBSOptions: EBSOptionsStatus? = nil, elasticsearchVersion: ElasticsearchVersionStatus? = nil) {
            self.snapshotOptions = snapshotOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.eBSOptions = eBSOptions
            self.elasticsearchVersion = elasticsearchVersion
        }

    }

    public struct CreateElasticsearchDomainRequest: Serializable, Initializable {
        /// Option to set time, in UTC format, of the daily automated snapshot. Default value is 0 hours. 
        var snapshotOptions: SnapshotOptions? = nil
        /// Configuration options for an Elasticsearch domain. Specifies the instance type and number of instances in the domain cluster. 
        var elasticsearchClusterConfig: ElasticsearchClusterConfig? = nil
        /// Options to enable, disable and specify the type and size of EBS storage volumes. 
        var eBSOptions: EBSOptions? = nil
        /// String of format X.Y to specify version for the Elasticsearch domain eg. "1.5" or "2.3". For more information, see Creating Elasticsearch Domains in the Amazon Elasticsearch Service Developer Guide.
        var elasticsearchVersion: String? = nil
        ///  IAM access policy as a JSON-formatted string.
        var accessPolicies: String? = nil
        ///  Option to allow references to indices in an HTTP request body. Must be false when configuring access to individual sub-resources. By default, the value is true. See Configuration Advanced Options for more information.
        var advancedOptions: [String: String]? = nil
        /// The name of the Elasticsearch domain that you are creating. Domain names are unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
        var domainName: String = ""

        public init() {}

        public init(snapshotOptions: SnapshotOptions? = nil, elasticsearchClusterConfig: ElasticsearchClusterConfig? = nil, eBSOptions: EBSOptions? = nil, elasticsearchVersion: String? = nil, accessPolicies: String? = nil, advancedOptions: [String: String]? = nil, domainName: String) {
            self.snapshotOptions = snapshotOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.eBSOptions = eBSOptions
            self.elasticsearchVersion = elasticsearchVersion
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.domainName = domainName
        }

    }

    public struct StorageType: Serializable, Initializable {
        /// List of limits that are applicable for given storage type. 
        var storageTypeLimits: [StorageTypeLimit]? = nil
        var storageSubTypeName: String? = nil
        var storageTypeName: String? = nil

        public init() {}

        public init(storageTypeLimits: [StorageTypeLimit]? = nil, storageSubTypeName: String? = nil, storageTypeName: String? = nil) {
            self.storageTypeLimits = storageTypeLimits
            self.storageSubTypeName = storageSubTypeName
            self.storageTypeName = storageTypeName
        }

    }

    public struct DeleteElasticsearchDomainResponse: Serializable, Initializable {
        /// The status of the Elasticsearch domain being deleted.
        var domainStatus: ElasticsearchDomainStatus? = nil

        public init() {}

        public init(domainStatus: ElasticsearchDomainStatus? = nil) {
            self.domainStatus = domainStatus
        }

    }

    public struct EBSOptionsStatus: Serializable, Initializable {
        ///  Specifies the EBS options for the specified Elasticsearch domain.
        var options: EBSOptions = EBSOptions()
        ///  Specifies the status of the EBS options for the specified Elasticsearch domain.
        var status: OptionStatus = OptionStatus()

        public init() {}

        public init(options: EBSOptions, status: OptionStatus) {
            self.options = options
            self.status = status
        }

    }

    public struct ListTagsRequest: Serializable, Initializable {
        ///  Specify the ARN for the Elasticsearch domain to which the tags are attached that you want to view.
        var aRN: String = ""

        public init() {}

        public init(aRN: String) {
            self.aRN = aRN
        }

    }

    public struct ElasticsearchClusterConfig: Serializable, Initializable {
        /// Total number of dedicated master nodes, active and on standby, for the cluster.
        var dedicatedMasterCount: Int32? = nil
        /// The number of instances in the specified domain cluster.
        var instanceCount: Int32? = nil
        /// The instance type for an Elasticsearch cluster.
        var instanceType: String? = nil
        /// A boolean value to indicate whether a dedicated master node is enabled. See About Dedicated Master Nodes for more information.
        var dedicatedMasterEnabled: Bool? = nil
        /// The instance type for a dedicated master node.
        var dedicatedMasterType: String? = nil
        /// A boolean value to indicate whether zone awareness is enabled. See About Zone Awareness for more information.
        var zoneAwarenessEnabled: Bool? = nil

        public init() {}

        public init(dedicatedMasterCount: Int32? = nil, instanceCount: Int32? = nil, instanceType: String? = nil, dedicatedMasterEnabled: Bool? = nil, dedicatedMasterType: String? = nil, zoneAwarenessEnabled: Bool? = nil) {
            self.dedicatedMasterCount = dedicatedMasterCount
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.dedicatedMasterEnabled = dedicatedMasterEnabled
            self.dedicatedMasterType = dedicatedMasterType
            self.zoneAwarenessEnabled = zoneAwarenessEnabled
        }

    }

    public struct AccessPoliciesStatus: Serializable, Initializable {
        /// The access policy configured for the Elasticsearch domain. Access policies may be resource-based, IP-based, or IAM-based. See  Configuring Access Policiesfor more information.
        var options: String = ""
        /// The status of the access policy for the Elasticsearch domain. See OptionStatus for the status information that's included. 
        var status: OptionStatus = OptionStatus()

        public init() {}

        public init(options: String, status: OptionStatus) {
            self.options = options
            self.status = status
        }

    }

    public struct ElasticsearchDomainStatus: Serializable, Initializable {
        /// The status of the Elasticsearch domain configuration. True if Amazon Elasticsearch Service is processing configuration changes. False if the configuration is active.
        var processing: Bool? = nil
        var elasticsearchVersion: String? = nil
        /// The domain creation status. True if the creation of an Elasticsearch domain is complete. False if domain creation is still in progress.
        var created: Bool? = nil
        /// The Amazon resource name (ARN) of an Elasticsearch domain. See Identifiers for IAM Entities in Using AWS Identity and Access Management for more information.
        var aRN: String = ""
        /// The EBSOptions for the specified domain. See Configuring EBS-based Storage for more information.
        var eBSOptions: EBSOptions? = nil
        /// The type and number of instances in the domain cluster.
        var elasticsearchClusterConfig: ElasticsearchClusterConfig = ElasticsearchClusterConfig()
        /// Specifies the status of the SnapshotOptions
        var snapshotOptions: SnapshotOptions? = nil
        ///  IAM access policy as a JSON-formatted string.
        var accessPolicies: String? = nil
        /// Specifies the status of the AdvancedOptions
        var advancedOptions: [String: String]? = nil
        /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
        var domainName: String = ""
        /// The Elasticsearch domain endpoint that you use to submit index and search requests.
        var endpoint: String? = nil
        /// The unique identifier for the specified Elasticsearch domain.
        var domainId: String = ""
        /// The domain deletion status. True if a delete request has been received for the domain but resource cleanup is still in progress. False if the domain has not been deleted. Once domain deletion is complete, the status of the domain is no longer returned.
        var deleted: Bool? = nil

        public init() {}

        public init(processing: Bool? = nil, elasticsearchVersion: String? = nil, created: Bool? = nil, aRN: String, eBSOptions: EBSOptions? = nil, elasticsearchClusterConfig: ElasticsearchClusterConfig, snapshotOptions: SnapshotOptions? = nil, accessPolicies: String? = nil, advancedOptions: [String: String]? = nil, domainName: String, endpoint: String? = nil, domainId: String, deleted: Bool? = nil) {
            self.processing = processing
            self.elasticsearchVersion = elasticsearchVersion
            self.created = created
            self.aRN = aRN
            self.eBSOptions = eBSOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.snapshotOptions = snapshotOptions
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.domainName = domainName
            self.endpoint = endpoint
            self.domainId = domainId
            self.deleted = deleted
        }

    }

}