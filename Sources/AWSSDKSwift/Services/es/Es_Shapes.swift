// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Es {

    public struct DescribeElasticsearchDomainsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainNames", required: true, type: .list)
        ]
        /// The Elasticsearch domains for which you want information.
        public let domainNames: [String]

        public init(domainNames: [String]) {
            self.domainNames = domainNames
        }

        private enum CodingKeys: String, CodingKey {
            case domainNames = "DomainNames"
        }
    }

    public struct InstanceCountLimits: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinimumInstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "MaximumInstanceCount", required: false, type: .integer)
        ]
        public let minimumInstanceCount: Int32?
        public let maximumInstanceCount: Int32?

        public init(minimumInstanceCount: Int32? = nil, maximumInstanceCount: Int32? = nil) {
            self.minimumInstanceCount = minimumInstanceCount
            self.maximumInstanceCount = maximumInstanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case minimumInstanceCount = "MinimumInstanceCount"
            case maximumInstanceCount = "MaximumInstanceCount"
        }
    }

    public struct VPCOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIds", required: false, type: .list), 
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .list)
        ]
        /// Specifies the subnets for VPC endpoint.
        public let subnetIds: [String]?
        /// Specifies the security groups for VPC endpoint.
        public let securityGroupIds: [String]?

        public init(subnetIds: [String]? = nil, securityGroupIds: [String]? = nil) {
            self.subnetIds = subnetIds
            self.securityGroupIds = securityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIds = "SubnetIds"
            case securityGroupIds = "SecurityGroupIds"
        }
    }

    public struct DescribeElasticsearchDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "DomainName"), required: true, type: .string)
        ]
        /// The name of the Elasticsearch domain for which you want information.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
        }
    }

    public struct AddTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ARN", required: true, type: .string), 
            AWSShapeMember(label: "TagList", required: true, type: .list)
        ]
        ///  Specify the ARN for which you want to add the tags.
        public let arn: String
        ///  List of Tag that need to be added for the Elasticsearch domain. 
        public let tagList: [Tag]

        public init(arn: String, tagList: [Tag]) {
            self.arn = arn
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case tagList = "TagList"
        }
    }

    public struct CognitoOptionsStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]
        /// Specifies the Cognito options for the specified Elasticsearch domain.
        public let options: CognitoOptions
        /// Specifies the status of the Cognito options for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: CognitoOptions, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct ListTagsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TagList", required: false, type: .list)
        ]
        ///  List of Tag for the requested Elasticsearch domain.
        public let tagList: [Tag]?

        public init(tagList: [Tag]? = nil) {
            self.tagList = tagList
        }

        private enum CodingKeys: String, CodingKey {
            case tagList = "TagList"
        }
    }

    public struct RemoveTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ARN", required: true, type: .string), 
            AWSShapeMember(label: "TagKeys", required: true, type: .list)
        ]
        /// Specifies the ARN for the Elasticsearch domain from which you want to delete the specified tags.
        public let arn: String
        /// Specifies the TagKey list which you want to remove from the Elasticsearch domain.
        public let tagKeys: [String]

        public init(arn: String, tagKeys: [String]) {
            self.arn = arn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "ARN"
            case tagKeys = "TagKeys"
        }
    }

    public struct OptionStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "UpdateVersion", required: false, type: .integer), 
            AWSShapeMember(label: "PendingDeletion", required: false, type: .boolean), 
            AWSShapeMember(label: "CreationDate", required: true, type: .timestamp), 
            AWSShapeMember(label: "State", required: true, type: .enum), 
            AWSShapeMember(label: "UpdateDate", required: true, type: .timestamp)
        ]
        /// Specifies the latest version for the entity.
        public let updateVersion: Int32?
        /// Indicates whether the Elasticsearch domain is being deleted.
        public let pendingDeletion: Bool?
        /// Timestamp which tells the creation date for the entity.
        public let creationDate: TimeStamp
        /// Provides the OptionState for the Elasticsearch domain.
        public let state: OptionState
        /// Timestamp which tells the last updated time for the entity.
        public let updateDate: TimeStamp

        public init(updateVersion: Int32? = nil, pendingDeletion: Bool? = nil, creationDate: TimeStamp, state: OptionState, updateDate: TimeStamp) {
            self.updateVersion = updateVersion
            self.pendingDeletion = pendingDeletion
            self.creationDate = creationDate
            self.state = state
            self.updateDate = updateDate
        }

        private enum CodingKeys: String, CodingKey {
            case updateVersion = "UpdateVersion"
            case pendingDeletion = "PendingDeletion"
            case creationDate = "CreationDate"
            case state = "State"
            case updateDate = "UpdateDate"
        }
    }

    public struct ReservedElasticsearchInstance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedElasticsearchInstanceId", required: false, type: .string), 
            AWSShapeMember(label: "RecurringCharges", required: false, type: .list), 
            AWSShapeMember(label: "ElasticsearchInstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "ReservationName", required: false, type: .string), 
            AWSShapeMember(label: "UsagePrice", required: false, type: .double), 
            AWSShapeMember(label: "State", required: false, type: .string), 
            AWSShapeMember(label: "PaymentOption", required: false, type: .enum), 
            AWSShapeMember(label: "ElasticsearchInstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "ReservedElasticsearchInstanceOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", required: false, type: .string), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "FixedPrice", required: false, type: .double)
        ]
        /// The unique identifier for the reservation.
        public let reservedElasticsearchInstanceId: String?
        /// The charge to your account regardless of whether you are creating any domains using the instance offering.
        public let recurringCharges: [RecurringCharge]?
        /// The Elasticsearch instance type offered by the reserved instance offering.
        public let elasticsearchInstanceType: ESPartitionInstanceType?
        /// The customer-specified identifier to track this reservation.
        public let reservationName: String?
        /// The rate you are charged for each hour for the domain that is using this reserved instance.
        public let usagePrice: Double?
        /// The state of the reserved Elasticsearch instance.
        public let state: String?
        /// The payment option as defined in the reserved Elasticsearch instance offering.
        public let paymentOption: ReservedElasticsearchInstancePaymentOption?
        /// The number of Elasticsearch instances that have been reserved.
        public let elasticsearchInstanceCount: Int32?
        /// The time the reservation started.
        public let startTime: TimeStamp?
        /// The offering identifier.
        public let reservedElasticsearchInstanceOfferingId: String?
        /// The currency code for the reserved Elasticsearch instance offering.
        public let currencyCode: String?
        /// The duration, in seconds, for which the Elasticsearch instance is reserved.
        public let duration: Int32?
        /// The upfront fixed charge you will paid to purchase the specific reserved Elasticsearch instance offering. 
        public let fixedPrice: Double?

        public init(reservedElasticsearchInstanceId: String? = nil, recurringCharges: [RecurringCharge]? = nil, elasticsearchInstanceType: ESPartitionInstanceType? = nil, reservationName: String? = nil, usagePrice: Double? = nil, state: String? = nil, paymentOption: ReservedElasticsearchInstancePaymentOption? = nil, elasticsearchInstanceCount: Int32? = nil, startTime: TimeStamp? = nil, reservedElasticsearchInstanceOfferingId: String? = nil, currencyCode: String? = nil, duration: Int32? = nil, fixedPrice: Double? = nil) {
            self.reservedElasticsearchInstanceId = reservedElasticsearchInstanceId
            self.recurringCharges = recurringCharges
            self.elasticsearchInstanceType = elasticsearchInstanceType
            self.reservationName = reservationName
            self.usagePrice = usagePrice
            self.state = state
            self.paymentOption = paymentOption
            self.elasticsearchInstanceCount = elasticsearchInstanceCount
            self.startTime = startTime
            self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
            self.currencyCode = currencyCode
            self.duration = duration
            self.fixedPrice = fixedPrice
        }

        private enum CodingKeys: String, CodingKey {
            case reservedElasticsearchInstanceId = "ReservedElasticsearchInstanceId"
            case recurringCharges = "RecurringCharges"
            case elasticsearchInstanceType = "ElasticsearchInstanceType"
            case reservationName = "ReservationName"
            case usagePrice = "UsagePrice"
            case state = "State"
            case paymentOption = "PaymentOption"
            case elasticsearchInstanceCount = "ElasticsearchInstanceCount"
            case startTime = "StartTime"
            case reservedElasticsearchInstanceOfferingId = "ReservedElasticsearchInstanceOfferingId"
            case currencyCode = "CurrencyCode"
            case duration = "Duration"
            case fixedPrice = "FixedPrice"
        }
    }

    public struct DescribeElasticsearchInstanceTypeLimitsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LimitsByRole", required: false, type: .map)
        ]
        public let limitsByRole: [String: Limits]?

        public init(limitsByRole: [String: Limits]? = nil) {
            self.limitsByRole = limitsByRole
        }

        private enum CodingKeys: String, CodingKey {
            case limitsByRole = "LimitsByRole"
        }
    }

    public struct DescribeReservedElasticsearchInstancesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedElasticsearchInstanceId", location: .querystring(locationName: "reservationId"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The reserved instance identifier filter value. Use this parameter to show only the reservation that matches the specified reserved Elasticsearch instance ID.
        public let reservedElasticsearchInstanceId: String?
        /// NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination.
        public let nextToken: String?
        /// Set this value to limit the number of results returned. If not specified, defaults to 100.
        public let maxResults: Int32?

        public init(reservedElasticsearchInstanceId: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.reservedElasticsearchInstanceId = reservedElasticsearchInstanceId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case reservedElasticsearchInstanceId = "reservationId"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct ReservedElasticsearchInstanceOffering: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ElasticsearchInstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "RecurringCharges", required: false, type: .list), 
            AWSShapeMember(label: "UsagePrice", required: false, type: .double), 
            AWSShapeMember(label: "PaymentOption", required: false, type: .enum), 
            AWSShapeMember(label: "ReservedElasticsearchInstanceOfferingId", required: false, type: .string), 
            AWSShapeMember(label: "CurrencyCode", required: false, type: .string), 
            AWSShapeMember(label: "Duration", required: false, type: .integer), 
            AWSShapeMember(label: "FixedPrice", required: false, type: .double)
        ]
        /// The Elasticsearch instance type offered by the reserved instance offering.
        public let elasticsearchInstanceType: ESPartitionInstanceType?
        /// The charge to your account regardless of whether you are creating any domains using the instance offering.
        public let recurringCharges: [RecurringCharge]?
        /// The rate you are charged for each hour the domain that is using the offering is running.
        public let usagePrice: Double?
        /// Payment option for the reserved Elasticsearch instance offering
        public let paymentOption: ReservedElasticsearchInstancePaymentOption?
        /// The Elasticsearch reserved instance offering identifier.
        public let reservedElasticsearchInstanceOfferingId: String?
        /// The currency code for the reserved Elasticsearch instance offering.
        public let currencyCode: String?
        /// The duration, in seconds, for which the offering will reserve the Elasticsearch instance.
        public let duration: Int32?
        /// The upfront fixed charge you will pay to purchase the specific reserved Elasticsearch instance offering. 
        public let fixedPrice: Double?

        public init(elasticsearchInstanceType: ESPartitionInstanceType? = nil, recurringCharges: [RecurringCharge]? = nil, usagePrice: Double? = nil, paymentOption: ReservedElasticsearchInstancePaymentOption? = nil, reservedElasticsearchInstanceOfferingId: String? = nil, currencyCode: String? = nil, duration: Int32? = nil, fixedPrice: Double? = nil) {
            self.elasticsearchInstanceType = elasticsearchInstanceType
            self.recurringCharges = recurringCharges
            self.usagePrice = usagePrice
            self.paymentOption = paymentOption
            self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
            self.currencyCode = currencyCode
            self.duration = duration
            self.fixedPrice = fixedPrice
        }

        private enum CodingKeys: String, CodingKey {
            case elasticsearchInstanceType = "ElasticsearchInstanceType"
            case recurringCharges = "RecurringCharges"
            case usagePrice = "UsagePrice"
            case paymentOption = "PaymentOption"
            case reservedElasticsearchInstanceOfferingId = "ReservedElasticsearchInstanceOfferingId"
            case currencyCode = "CurrencyCode"
            case duration = "Duration"
            case fixedPrice = "FixedPrice"
        }
    }

    public struct AdditionalLimit: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LimitName", required: false, type: .string), 
            AWSShapeMember(label: "LimitValues", required: false, type: .list)
        ]
        ///  Name of Additional Limit is specific to a given InstanceType and for each of it's  InstanceRole  etc.  Attributes and their details:   MaximumNumberOfDataNodesSupported This attribute will be present in Master node only to specify how much data nodes upto which given  ESPartitionInstanceType  can support as master node. MaximumNumberOfDataNodesWithoutMasterNode This attribute will be present in Data node only to specify how much data nodes of given  ESPartitionInstanceType  upto which you don't need any master nodes to govern them.  
        public let limitName: String?
        ///  Value for given  AdditionalLimit$LimitName  . 
        public let limitValues: [String]?

        public init(limitName: String? = nil, limitValues: [String]? = nil) {
            self.limitName = limitName
            self.limitValues = limitValues
        }

        private enum CodingKeys: String, CodingKey {
            case limitName = "LimitName"
            case limitValues = "LimitValues"
        }
    }

    public struct ListDomainNamesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainNames", required: false, type: .list)
        ]
        /// List of Elasticsearch domain names.
        public let domainNames: [DomainInfo]?

        public init(domainNames: [DomainInfo]? = nil) {
            self.domainNames = domainNames
        }

        private enum CodingKeys: String, CodingKey {
            case domainNames = "DomainNames"
        }
    }

    public struct LogPublishingOption: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "CloudWatchLogsLogGroupArn", required: false, type: .string), 
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        public let cloudWatchLogsLogGroupArn: String?
        ///  Specifies whether given log publishing option is enabled or not.
        public let enabled: Bool?

        public init(cloudWatchLogsLogGroupArn: String? = nil, enabled: Bool? = nil) {
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
            case enabled = "Enabled"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string), 
            AWSShapeMember(label: "Key", required: true, type: .string)
        ]
        /// Specifies the TagValue, the value assigned to the corresponding tag key. Tag values can be null and do not have to be unique in a tag set. For example, you can have a key value pair in a tag set of project : Trinity and cost-center : Trinity
        public let value: String
        /// Specifies the TagKey, the name of the tag. Tag keys must be unique for the Elasticsearch domain to which they are attached.
        public let key: String

        public init(value: String, key: String) {
            self.value = value
            self.key = key
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case key = "Key"
        }
    }

    public struct DomainInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", required: false, type: .string)
        ]
        ///  Specifies the DomainName.
        public let domainName: String?

        public init(domainName: String? = nil) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
        }
    }

    public enum LogType: String, CustomStringConvertible, Codable {
        case indexSlowLogs = "INDEX_SLOW_LOGS"
        case searchSlowLogs = "SEARCH_SLOW_LOGS"
        case esApplicationLogs = "ES_APPLICATION_LOGS"
        public var description: String { return self.rawValue }
    }

    public struct StorageTypeLimit: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LimitName", required: false, type: .string), 
            AWSShapeMember(label: "LimitValues", required: false, type: .list)
        ]
        ///  Name of storage limits that are applicable for given storage type. If  StorageType  is ebs, following storage options are applicable  MinimumVolumeSize Minimum amount of volume size that is applicable for given storage type.It can be empty if it is not applicable. MaximumVolumeSize Maximum amount of volume size that is applicable for given storage type.It can be empty if it is not applicable. MaximumIops Maximum amount of Iops that is applicable for given storage type.It can be empty if it is not applicable. MinimumIops Minimum amount of Iops that is applicable for given storage type.It can be empty if it is not applicable.  
        public let limitName: String?
        ///  Values for the  StorageTypeLimit$LimitName  . 
        public let limitValues: [String]?

        public init(limitName: String? = nil, limitValues: [String]? = nil) {
            self.limitName = limitName
            self.limitValues = limitValues
        }

        private enum CodingKeys: String, CodingKey {
            case limitName = "LimitName"
            case limitValues = "LimitValues"
        }
    }

    public struct RecurringCharge: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "RecurringChargeAmount", required: false, type: .double), 
            AWSShapeMember(label: "RecurringChargeFrequency", required: false, type: .string)
        ]
        /// The monetary amount of the recurring charge.
        public let recurringChargeAmount: Double?
        /// The frequency of the recurring charge.
        public let recurringChargeFrequency: String?

        public init(recurringChargeAmount: Double? = nil, recurringChargeFrequency: String? = nil) {
            self.recurringChargeAmount = recurringChargeAmount
            self.recurringChargeFrequency = recurringChargeFrequency
        }

        private enum CodingKeys: String, CodingKey {
            case recurringChargeAmount = "RecurringChargeAmount"
            case recurringChargeFrequency = "RecurringChargeFrequency"
        }
    }

    public struct ElasticsearchVersionStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .string), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]
        ///  Specifies the Elasticsearch version for the specified Elasticsearch domain.
        public let options: String
        ///  Specifies the status of the Elasticsearch version options for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: String, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct ListElasticsearchVersionsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ElasticsearchVersions", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        public let elasticsearchVersions: [String]?
        public let nextToken: String?

        public init(elasticsearchVersions: [String]? = nil, nextToken: String? = nil) {
            self.elasticsearchVersions = elasticsearchVersions
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case elasticsearchVersions = "ElasticsearchVersions"
            case nextToken = "NextToken"
        }
    }

    public struct AdvancedOptionsStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .map), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]
        ///  Specifies the status of advanced options for the specified Elasticsearch domain.
        public let options: [String: String]
        ///  Specifies the status of OptionStatus for advanced options for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: [String: String], status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct InstanceLimits: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceCountLimits", required: false, type: .structure)
        ]
        public let instanceCountLimits: InstanceCountLimits?

        public init(instanceCountLimits: InstanceCountLimits? = nil) {
            self.instanceCountLimits = instanceCountLimits
        }

        private enum CodingKeys: String, CodingKey {
            case instanceCountLimits = "InstanceCountLimits"
        }
    }

    public struct VPCDerivedInfo: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SubnetIds", required: false, type: .list), 
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list), 
            AWSShapeMember(label: "VPCId", required: false, type: .string), 
            AWSShapeMember(label: "SecurityGroupIds", required: false, type: .list)
        ]
        /// Specifies the subnets for VPC endpoint.
        public let subnetIds: [String]?
        /// The availability zones for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
        public let availabilityZones: [String]?
        /// The VPC Id for the Elasticsearch domain. Exists only if the domain was created with VPCOptions.
        public let vPCId: String?
        /// Specifies the security groups for VPC endpoint.
        public let securityGroupIds: [String]?

        public init(subnetIds: [String]? = nil, availabilityZones: [String]? = nil, vPCId: String? = nil, securityGroupIds: [String]? = nil) {
            self.subnetIds = subnetIds
            self.availabilityZones = availabilityZones
            self.vPCId = vPCId
            self.securityGroupIds = securityGroupIds
        }

        private enum CodingKeys: String, CodingKey {
            case subnetIds = "SubnetIds"
            case availabilityZones = "AvailabilityZones"
            case vPCId = "VPCId"
            case securityGroupIds = "SecurityGroupIds"
        }
    }

    public struct ElasticsearchDomainConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotOptions", required: false, type: .structure), 
            AWSShapeMember(label: "EncryptionAtRestOptions", required: false, type: .structure), 
            AWSShapeMember(label: "ElasticsearchClusterConfig", required: false, type: .structure), 
            AWSShapeMember(label: "VPCOptions", required: false, type: .structure), 
            AWSShapeMember(label: "LogPublishingOptions", required: false, type: .structure), 
            AWSShapeMember(label: "EBSOptions", required: false, type: .structure), 
            AWSShapeMember(label: "CognitoOptions", required: false, type: .structure), 
            AWSShapeMember(label: "ElasticsearchVersion", required: false, type: .structure), 
            AWSShapeMember(label: "AccessPolicies", required: false, type: .structure), 
            AWSShapeMember(label: "AdvancedOptions", required: false, type: .structure)
        ]
        /// Specifies the SnapshotOptions for the Elasticsearch domain.
        public let snapshotOptions: SnapshotOptionsStatus?
        /// Specifies the EncryptionAtRestOptions for the Elasticsearch domain.
        public let encryptionAtRestOptions: EncryptionAtRestOptionsStatus?
        /// Specifies the ElasticsearchClusterConfig for the Elasticsearch domain.
        public let elasticsearchClusterConfig: ElasticsearchClusterConfigStatus?
        /// The VPCOptions for the specified domain. For more information, see VPC Endpoints for Amazon Elasticsearch Service Domains.
        public let vPCOptions: VPCDerivedInfoStatus?
        /// Log publishing options for the given domain.
        public let logPublishingOptions: LogPublishingOptionsStatus?
        /// Specifies the EBSOptions for the Elasticsearch domain.
        public let eBSOptions: EBSOptionsStatus?
        /// The CognitoOptions for the specified domain. For more information, see Amazon Cognito Authentication for Kibana.
        public let cognitoOptions: CognitoOptionsStatus?
        /// String of format X.Y to specify version for the Elasticsearch domain.
        public let elasticsearchVersion: ElasticsearchVersionStatus?
        /// IAM access policy as a JSON-formatted string.
        public let accessPolicies: AccessPoliciesStatus?
        /// Specifies the AdvancedOptions for the domain. See Configuring Advanced Options for more information.
        public let advancedOptions: AdvancedOptionsStatus?

        public init(snapshotOptions: SnapshotOptionsStatus? = nil, encryptionAtRestOptions: EncryptionAtRestOptionsStatus? = nil, elasticsearchClusterConfig: ElasticsearchClusterConfigStatus? = nil, vPCOptions: VPCDerivedInfoStatus? = nil, logPublishingOptions: LogPublishingOptionsStatus? = nil, eBSOptions: EBSOptionsStatus? = nil, cognitoOptions: CognitoOptionsStatus? = nil, elasticsearchVersion: ElasticsearchVersionStatus? = nil, accessPolicies: AccessPoliciesStatus? = nil, advancedOptions: AdvancedOptionsStatus? = nil) {
            self.snapshotOptions = snapshotOptions
            self.encryptionAtRestOptions = encryptionAtRestOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.vPCOptions = vPCOptions
            self.logPublishingOptions = logPublishingOptions
            self.eBSOptions = eBSOptions
            self.cognitoOptions = cognitoOptions
            self.elasticsearchVersion = elasticsearchVersion
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotOptions = "SnapshotOptions"
            case encryptionAtRestOptions = "EncryptionAtRestOptions"
            case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
            case vPCOptions = "VPCOptions"
            case logPublishingOptions = "LogPublishingOptions"
            case eBSOptions = "EBSOptions"
            case cognitoOptions = "CognitoOptions"
            case elasticsearchVersion = "ElasticsearchVersion"
            case accessPolicies = "AccessPolicies"
            case advancedOptions = "AdvancedOptions"
        }
    }

    public struct DescribeReservedElasticsearchInstanceOfferingsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ReservedElasticsearchInstanceOfferings", required: false, type: .list)
        ]
        /// Provides an identifier to allow retrieval of paginated results.
        public let nextToken: String?
        /// List of reserved Elasticsearch instance offerings
        public let reservedElasticsearchInstanceOfferings: [ReservedElasticsearchInstanceOffering]?

        public init(nextToken: String? = nil, reservedElasticsearchInstanceOfferings: [ReservedElasticsearchInstanceOffering]? = nil) {
            self.nextToken = nextToken
            self.reservedElasticsearchInstanceOfferings = reservedElasticsearchInstanceOfferings
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case reservedElasticsearchInstanceOfferings = "ReservedElasticsearchInstanceOfferings"
        }
    }

    public struct DeleteElasticsearchDomainResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainStatus", required: false, type: .structure)
        ]
        /// The status of the Elasticsearch domain being deleted.
        public let domainStatus: ElasticsearchDomainStatus?

        public init(domainStatus: ElasticsearchDomainStatus? = nil) {
            self.domainStatus = domainStatus
        }

        private enum CodingKeys: String, CodingKey {
            case domainStatus = "DomainStatus"
        }
    }

    public struct EBSOptionsStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]
        ///  Specifies the EBS options for the specified Elasticsearch domain.
        public let options: EBSOptions
        ///  Specifies the status of the EBS options for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: EBSOptions, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct ElasticsearchClusterConfig: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DedicatedMasterCount", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer), 
            AWSShapeMember(label: "InstanceType", required: false, type: .enum), 
            AWSShapeMember(label: "DedicatedMasterEnabled", required: false, type: .boolean), 
            AWSShapeMember(label: "DedicatedMasterType", required: false, type: .enum), 
            AWSShapeMember(label: "ZoneAwarenessEnabled", required: false, type: .boolean)
        ]
        /// Total number of dedicated master nodes, active and on standby, for the cluster.
        public let dedicatedMasterCount: Int32?
        /// The number of instances in the specified domain cluster.
        public let instanceCount: Int32?
        /// The instance type for an Elasticsearch cluster.
        public let instanceType: ESPartitionInstanceType?
        /// A boolean value to indicate whether a dedicated master node is enabled. See About Dedicated Master Nodes for more information.
        public let dedicatedMasterEnabled: Bool?
        /// The instance type for a dedicated master node.
        public let dedicatedMasterType: ESPartitionInstanceType?
        /// A boolean value to indicate whether zone awareness is enabled. See About Zone Awareness for more information.
        public let zoneAwarenessEnabled: Bool?

        public init(dedicatedMasterCount: Int32? = nil, instanceCount: Int32? = nil, instanceType: ESPartitionInstanceType? = nil, dedicatedMasterEnabled: Bool? = nil, dedicatedMasterType: ESPartitionInstanceType? = nil, zoneAwarenessEnabled: Bool? = nil) {
            self.dedicatedMasterCount = dedicatedMasterCount
            self.instanceCount = instanceCount
            self.instanceType = instanceType
            self.dedicatedMasterEnabled = dedicatedMasterEnabled
            self.dedicatedMasterType = dedicatedMasterType
            self.zoneAwarenessEnabled = zoneAwarenessEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case dedicatedMasterCount = "DedicatedMasterCount"
            case instanceCount = "InstanceCount"
            case instanceType = "InstanceType"
            case dedicatedMasterEnabled = "DedicatedMasterEnabled"
            case dedicatedMasterType = "DedicatedMasterType"
            case zoneAwarenessEnabled = "ZoneAwarenessEnabled"
        }
    }

    public enum VolumeType: String, CustomStringConvertible, Codable {
        case standard = "standard"
        case gp2 = "gp2"
        case io1 = "io1"
        public var description: String { return self.rawValue }
    }

    public struct AccessPoliciesStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .string), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]
        /// The access policy configured for the Elasticsearch domain. Access policies may be resource-based, IP-based, or IAM-based. See  Configuring Access Policiesfor more information.
        public let options: String
        /// The status of the access policy for the Elasticsearch domain. See OptionStatus for the status information that's included. 
        public let status: OptionStatus

        public init(options: String, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct ElasticsearchDomainStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Endpoints", required: false, type: .map), 
            AWSShapeMember(label: "VPCOptions", required: false, type: .structure), 
            AWSShapeMember(label: "CognitoOptions", required: false, type: .structure), 
            AWSShapeMember(label: "Processing", required: false, type: .boolean), 
            AWSShapeMember(label: "ElasticsearchVersion", required: false, type: .string), 
            AWSShapeMember(label: "Created", required: false, type: .boolean), 
            AWSShapeMember(label: "ARN", required: true, type: .string), 
            AWSShapeMember(label: "EBSOptions", required: false, type: .structure), 
            AWSShapeMember(label: "ElasticsearchClusterConfig", required: true, type: .structure), 
            AWSShapeMember(label: "EncryptionAtRestOptions", required: false, type: .structure), 
            AWSShapeMember(label: "LogPublishingOptions", required: false, type: .map), 
            AWSShapeMember(label: "SnapshotOptions", required: false, type: .structure), 
            AWSShapeMember(label: "AccessPolicies", required: false, type: .string), 
            AWSShapeMember(label: "AdvancedOptions", required: false, type: .map), 
            AWSShapeMember(label: "DomainName", required: true, type: .string), 
            AWSShapeMember(label: "Endpoint", required: false, type: .string), 
            AWSShapeMember(label: "Deleted", required: false, type: .boolean), 
            AWSShapeMember(label: "DomainId", required: true, type: .string)
        ]
        /// Map containing the Elasticsearch domain endpoints used to submit index and search requests. Example key, value: 'vpc','vpc-endpoint-h2dsd34efgyghrtguk5gt6j2foh4.us-east-1.es.amazonaws.com'.
        public let endpoints: [String: String]?
        /// The VPCOptions for the specified domain. For more information, see VPC Endpoints for Amazon Elasticsearch Service Domains.
        public let vPCOptions: VPCDerivedInfo?
        /// The CognitoOptions for the specified domain. For more information, see Amazon Cognito Authentication for Kibana.
        public let cognitoOptions: CognitoOptions?
        /// The status of the Elasticsearch domain configuration. True if Amazon Elasticsearch Service is processing configuration changes. False if the configuration is active.
        public let processing: Bool?
        public let elasticsearchVersion: String?
        /// The domain creation status. True if the creation of an Elasticsearch domain is complete. False if domain creation is still in progress.
        public let created: Bool?
        /// The Amazon resource name (ARN) of an Elasticsearch domain. See Identifiers for IAM Entities in Using AWS Identity and Access Management for more information.
        public let arn: String
        /// The EBSOptions for the specified domain. See Configuring EBS-based Storage for more information.
        public let eBSOptions: EBSOptions?
        /// The type and number of instances in the domain cluster.
        public let elasticsearchClusterConfig: ElasticsearchClusterConfig
        ///  Specifies the status of the EncryptionAtRestOptions.
        public let encryptionAtRestOptions: EncryptionAtRestOptions?
        /// Log publishing options for the given domain.
        public let logPublishingOptions: [LogType: LogPublishingOption]?
        /// Specifies the status of the SnapshotOptions
        public let snapshotOptions: SnapshotOptions?
        ///  IAM access policy as a JSON-formatted string.
        public let accessPolicies: String?
        /// Specifies the status of the AdvancedOptions
        public let advancedOptions: [String: String]?
        /// The name of an Elasticsearch domain. Domain names are unique across the domains owned by an account within an AWS region. Domain names start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
        public let domainName: String
        /// The Elasticsearch domain endpoint that you use to submit index and search requests.
        public let endpoint: String?
        /// The domain deletion status. True if a delete request has been received for the domain but resource cleanup is still in progress. False if the domain has not been deleted. Once domain deletion is complete, the status of the domain is no longer returned.
        public let deleted: Bool?
        /// The unique identifier for the specified Elasticsearch domain.
        public let domainId: String

        public init(endpoints: [String: String]? = nil, vPCOptions: VPCDerivedInfo? = nil, cognitoOptions: CognitoOptions? = nil, processing: Bool? = nil, elasticsearchVersion: String? = nil, created: Bool? = nil, arn: String, eBSOptions: EBSOptions? = nil, elasticsearchClusterConfig: ElasticsearchClusterConfig, encryptionAtRestOptions: EncryptionAtRestOptions? = nil, logPublishingOptions: [LogType: LogPublishingOption]? = nil, snapshotOptions: SnapshotOptions? = nil, accessPolicies: String? = nil, advancedOptions: [String: String]? = nil, domainName: String, endpoint: String? = nil, deleted: Bool? = nil, domainId: String) {
            self.endpoints = endpoints
            self.vPCOptions = vPCOptions
            self.cognitoOptions = cognitoOptions
            self.processing = processing
            self.elasticsearchVersion = elasticsearchVersion
            self.created = created
            self.arn = arn
            self.eBSOptions = eBSOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.encryptionAtRestOptions = encryptionAtRestOptions
            self.logPublishingOptions = logPublishingOptions
            self.snapshotOptions = snapshotOptions
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.domainName = domainName
            self.endpoint = endpoint
            self.deleted = deleted
            self.domainId = domainId
        }

        private enum CodingKeys: String, CodingKey {
            case endpoints = "Endpoints"
            case vPCOptions = "VPCOptions"
            case cognitoOptions = "CognitoOptions"
            case processing = "Processing"
            case elasticsearchVersion = "ElasticsearchVersion"
            case created = "Created"
            case arn = "ARN"
            case eBSOptions = "EBSOptions"
            case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
            case encryptionAtRestOptions = "EncryptionAtRestOptions"
            case logPublishingOptions = "LogPublishingOptions"
            case snapshotOptions = "SnapshotOptions"
            case accessPolicies = "AccessPolicies"
            case advancedOptions = "AdvancedOptions"
            case domainName = "DomainName"
            case endpoint = "Endpoint"
            case deleted = "Deleted"
            case domainId = "DomainId"
        }
    }

    public struct ListElasticsearchInstanceTypesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ElasticsearchVersion", location: .uri(locationName: "ElasticsearchVersion"), required: true, type: .string), 
            AWSShapeMember(label: "DomainName", location: .querystring(locationName: "domainName"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// Version of Elasticsearch for which list of supported elasticsearch instance types are needed. 
        public let elasticsearchVersion: String
        /// DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for list of available Elasticsearch instance types when modifying existing domain. 
        public let domainName: String?
        /// NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination. 
        public let nextToken: String?
        ///  Set this value to limit the number of results returned. Value provided must be greater than 30 else it wont be honored. 
        public let maxResults: Int32?

        public init(elasticsearchVersion: String, domainName: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.elasticsearchVersion = elasticsearchVersion
            self.domainName = domainName
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case elasticsearchVersion = "ElasticsearchVersion"
            case domainName = "domainName"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct EncryptionAtRestOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "KmsKeyId", required: false, type: .string)
        ]
        /// Specifies the option to enable Encryption At Rest.
        public let enabled: Bool?
        ///  Specifies the KMS Key ID for Encryption At Rest options.
        public let kmsKeyId: String?

        public init(enabled: Bool? = nil, kmsKeyId: String? = nil) {
            self.enabled = enabled
            self.kmsKeyId = kmsKeyId
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case kmsKeyId = "KmsKeyId"
        }
    }

    public struct UpdateElasticsearchDomainConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotOptions", required: false, type: .structure), 
            AWSShapeMember(label: "ElasticsearchClusterConfig", required: false, type: .structure), 
            AWSShapeMember(label: "EBSOptions", required: false, type: .structure), 
            AWSShapeMember(label: "VPCOptions", required: false, type: .structure), 
            AWSShapeMember(label: "LogPublishingOptions", required: false, type: .map), 
            AWSShapeMember(label: "CognitoOptions", required: false, type: .structure), 
            AWSShapeMember(label: "AdvancedOptions", required: false, type: .map), 
            AWSShapeMember(label: "AccessPolicies", required: false, type: .string), 
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "DomainName"), required: true, type: .string)
        ]
        /// Option to set the time, in UTC format, for the daily automated snapshot. Default value is 0 hours. 
        public let snapshotOptions: SnapshotOptions?
        /// The type and number of instances to instantiate for the domain cluster.
        public let elasticsearchClusterConfig: ElasticsearchClusterConfig?
        /// Specify the type and size of the EBS volume that you want to use. 
        public let eBSOptions: EBSOptions?
        /// Options to specify the subnets and security groups for VPC endpoint. For more information, see Creating a VPC in VPC Endpoints for Amazon Elasticsearch Service Domains
        public let vPCOptions: VPCOptions?
        /// Map of LogType and LogPublishingOption, each containing options to publish a given type of Elasticsearch log.
        public let logPublishingOptions: [LogType: LogPublishingOption]?
        /// Options to specify the Cognito user and identity pools for Kibana authentication. For more information, see Amazon Cognito Authentication for Kibana.
        public let cognitoOptions: CognitoOptions?
        /// Modifies the advanced option to allow references to indices in an HTTP request body. Must be false when configuring access to individual sub-resources. By default, the value is true. See Configuration Advanced Options for more information.
        public let advancedOptions: [String: String]?
        /// IAM access policy as a JSON-formatted string.
        public let accessPolicies: String?
        /// The name of the Elasticsearch domain that you are updating. 
        public let domainName: String

        public init(snapshotOptions: SnapshotOptions? = nil, elasticsearchClusterConfig: ElasticsearchClusterConfig? = nil, eBSOptions: EBSOptions? = nil, vPCOptions: VPCOptions? = nil, logPublishingOptions: [LogType: LogPublishingOption]? = nil, cognitoOptions: CognitoOptions? = nil, advancedOptions: [String: String]? = nil, accessPolicies: String? = nil, domainName: String) {
            self.snapshotOptions = snapshotOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.eBSOptions = eBSOptions
            self.vPCOptions = vPCOptions
            self.logPublishingOptions = logPublishingOptions
            self.cognitoOptions = cognitoOptions
            self.advancedOptions = advancedOptions
            self.accessPolicies = accessPolicies
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotOptions = "SnapshotOptions"
            case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
            case eBSOptions = "EBSOptions"
            case vPCOptions = "VPCOptions"
            case logPublishingOptions = "LogPublishingOptions"
            case cognitoOptions = "CognitoOptions"
            case advancedOptions = "AdvancedOptions"
            case accessPolicies = "AccessPolicies"
            case domainName = "DomainName"
        }
    }

    public struct ElasticsearchClusterConfigStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]
        ///  Specifies the cluster configuration for the specified Elasticsearch domain.
        public let options: ElasticsearchClusterConfig
        ///  Specifies the status of the configuration for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: ElasticsearchClusterConfig, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct CreateElasticsearchDomainResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainStatus", required: false, type: .structure)
        ]
        /// The status of the newly created Elasticsearch domain. 
        public let domainStatus: ElasticsearchDomainStatus?

        public init(domainStatus: ElasticsearchDomainStatus? = nil) {
            self.domainStatus = domainStatus
        }

        private enum CodingKeys: String, CodingKey {
            case domainStatus = "DomainStatus"
        }
    }

    public struct DescribeElasticsearchInstanceTypeLimitsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceType", location: .uri(locationName: "InstanceType"), required: true, type: .enum), 
            AWSShapeMember(label: "DomainName", location: .querystring(locationName: "domainName"), required: false, type: .string), 
            AWSShapeMember(label: "ElasticsearchVersion", location: .uri(locationName: "ElasticsearchVersion"), required: true, type: .string)
        ]
        ///  The instance type for an Elasticsearch cluster for which Elasticsearch  Limits  are needed. 
        public let instanceType: ESPartitionInstanceType
        ///  DomainName represents the name of the Domain that we are trying to modify. This should be present only if we are querying for Elasticsearch  Limits  for existing domain. 
        public let domainName: String?
        ///  Version of Elasticsearch for which  Limits  are needed. 
        public let elasticsearchVersion: String

        public init(instanceType: ESPartitionInstanceType, domainName: String? = nil, elasticsearchVersion: String) {
            self.instanceType = instanceType
            self.domainName = domainName
            self.elasticsearchVersion = elasticsearchVersion
        }

        private enum CodingKeys: String, CodingKey {
            case instanceType = "InstanceType"
            case domainName = "domainName"
            case elasticsearchVersion = "ElasticsearchVersion"
        }
    }

    public struct DescribeElasticsearchDomainResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainStatus", required: true, type: .structure)
        ]
        /// The current status of the Elasticsearch domain.
        public let domainStatus: ElasticsearchDomainStatus

        public init(domainStatus: ElasticsearchDomainStatus) {
            self.domainStatus = domainStatus
        }

        private enum CodingKeys: String, CodingKey {
            case domainStatus = "DomainStatus"
        }
    }

    public enum ESPartitionInstanceType: String, CustomStringConvertible, Codable {
        case m3MediumElasticsearch = "m3.medium.elasticsearch"
        case m3LargeElasticsearch = "m3.large.elasticsearch"
        case m3XlargeElasticsearch = "m3.xlarge.elasticsearch"
        case m32XlargeElasticsearch = "m3.2xlarge.elasticsearch"
        case m4LargeElasticsearch = "m4.large.elasticsearch"
        case m4XlargeElasticsearch = "m4.xlarge.elasticsearch"
        case m42XlargeElasticsearch = "m4.2xlarge.elasticsearch"
        case m44XlargeElasticsearch = "m4.4xlarge.elasticsearch"
        case m410XlargeElasticsearch = "m4.10xlarge.elasticsearch"
        case t2MicroElasticsearch = "t2.micro.elasticsearch"
        case t2SmallElasticsearch = "t2.small.elasticsearch"
        case t2MediumElasticsearch = "t2.medium.elasticsearch"
        case r3LargeElasticsearch = "r3.large.elasticsearch"
        case r3XlargeElasticsearch = "r3.xlarge.elasticsearch"
        case r32XlargeElasticsearch = "r3.2xlarge.elasticsearch"
        case r34XlargeElasticsearch = "r3.4xlarge.elasticsearch"
        case r38XlargeElasticsearch = "r3.8xlarge.elasticsearch"
        case i2XlargeElasticsearch = "i2.xlarge.elasticsearch"
        case i22XlargeElasticsearch = "i2.2xlarge.elasticsearch"
        case d2XlargeElasticsearch = "d2.xlarge.elasticsearch"
        case d22XlargeElasticsearch = "d2.2xlarge.elasticsearch"
        case d24XlargeElasticsearch = "d2.4xlarge.elasticsearch"
        case d28XlargeElasticsearch = "d2.8xlarge.elasticsearch"
        case c4LargeElasticsearch = "c4.large.elasticsearch"
        case c4XlargeElasticsearch = "c4.xlarge.elasticsearch"
        case c42XlargeElasticsearch = "c4.2xlarge.elasticsearch"
        case c44XlargeElasticsearch = "c4.4xlarge.elasticsearch"
        case c48XlargeElasticsearch = "c4.8xlarge.elasticsearch"
        case r4LargeElasticsearch = "r4.large.elasticsearch"
        case r4XlargeElasticsearch = "r4.xlarge.elasticsearch"
        case r42XlargeElasticsearch = "r4.2xlarge.elasticsearch"
        case r44XlargeElasticsearch = "r4.4xlarge.elasticsearch"
        case r48XlargeElasticsearch = "r4.8xlarge.elasticsearch"
        case r416XlargeElasticsearch = "r4.16xlarge.elasticsearch"
        case i3LargeElasticsearch = "i3.large.elasticsearch"
        case i3XlargeElasticsearch = "i3.xlarge.elasticsearch"
        case i32XlargeElasticsearch = "i3.2xlarge.elasticsearch"
        case i34XlargeElasticsearch = "i3.4xlarge.elasticsearch"
        case i38XlargeElasticsearch = "i3.8xlarge.elasticsearch"
        case i316XlargeElasticsearch = "i3.16xlarge.elasticsearch"
        public var description: String { return self.rawValue }
    }

    public struct DescribeReservedElasticsearchInstanceOfferingsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedElasticsearchInstanceOfferingId", location: .querystring(locationName: "offeringId"), required: false, type: .string), 
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        /// The offering identifier filter value. Use this parameter to show only the available offering that matches the specified reservation identifier.
        public let reservedElasticsearchInstanceOfferingId: String?
        /// NextToken should be sent in case if earlier API call produced result containing NextToken. It is used for pagination.
        public let nextToken: String?
        /// Set this value to limit the number of results returned. If not specified, defaults to 100.
        public let maxResults: Int32?

        public init(reservedElasticsearchInstanceOfferingId: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case reservedElasticsearchInstanceOfferingId = "offeringId"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct SnapshotOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutomatedSnapshotStartHour", required: false, type: .integer)
        ]
        /// Specifies the time, in UTC format, when the service takes a daily automated snapshot of the specified Elasticsearch domain. Default value is 0 hours.
        public let automatedSnapshotStartHour: Int32?

        public init(automatedSnapshotStartHour: Int32? = nil) {
            self.automatedSnapshotStartHour = automatedSnapshotStartHour
        }

        private enum CodingKeys: String, CodingKey {
            case automatedSnapshotStartHour = "AutomatedSnapshotStartHour"
        }
    }

    public struct EBSOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "VolumeSize", required: false, type: .integer), 
            AWSShapeMember(label: "VolumeType", required: false, type: .enum), 
            AWSShapeMember(label: "Iops", required: false, type: .integer), 
            AWSShapeMember(label: "EBSEnabled", required: false, type: .boolean)
        ]
        ///  Integer to specify the size of an EBS volume.
        public let volumeSize: Int32?
        ///  Specifies the volume type for EBS-based storage.
        public let volumeType: VolumeType?
        /// Specifies the IOPD for a Provisioned IOPS EBS volume (SSD).
        public let iops: Int32?
        /// Specifies whether EBS-based storage is enabled.
        public let eBSEnabled: Bool?

        public init(volumeSize: Int32? = nil, volumeType: VolumeType? = nil, iops: Int32? = nil, eBSEnabled: Bool? = nil) {
            self.volumeSize = volumeSize
            self.volumeType = volumeType
            self.iops = iops
            self.eBSEnabled = eBSEnabled
        }

        private enum CodingKeys: String, CodingKey {
            case volumeSize = "VolumeSize"
            case volumeType = "VolumeType"
            case iops = "Iops"
            case eBSEnabled = "EBSEnabled"
        }
    }

    public struct DescribeElasticsearchDomainConfigRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "DomainName"), required: true, type: .string)
        ]
        /// The Elasticsearch domain that you want to get information about.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
        }
    }

    public struct DescribeElasticsearchDomainConfigResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainConfig", required: true, type: .structure)
        ]
        /// The configuration information of the domain requested in the DescribeElasticsearchDomainConfig request.
        public let domainConfig: ElasticsearchDomainConfig

        public init(domainConfig: ElasticsearchDomainConfig) {
            self.domainConfig = domainConfig
        }

        private enum CodingKeys: String, CodingKey {
            case domainConfig = "DomainConfig"
        }
    }

    public enum ReservedElasticsearchInstancePaymentOption: String, CustomStringConvertible, Codable {
        case allUpfront = "ALL_UPFRONT"
        case partialUpfront = "PARTIAL_UPFRONT"
        case noUpfront = "NO_UPFRONT"
        public var description: String { return self.rawValue }
    }

    public struct ListElasticsearchVersionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", location: .querystring(locationName: "nextToken"), required: false, type: .string), 
            AWSShapeMember(label: "MaxResults", location: .querystring(locationName: "maxResults"), required: false, type: .integer)
        ]
        public let nextToken: String?
        ///  Set this value to limit the number of results returned. Value provided must be greater than 10 else it wont be honored. 
        public let maxResults: Int32?

        public init(nextToken: String? = nil, maxResults: Int32? = nil) {
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct ListElasticsearchInstanceTypesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ElasticsearchInstanceTypes", required: false, type: .list), 
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        ///  List of instance types supported by Amazon Elasticsearch service for given  ElasticsearchVersion  
        public let elasticsearchInstanceTypes: [ESPartitionInstanceType]?
        /// In case if there are more results available NextToken would be present, make further request to the same API with received NextToken to paginate remaining results. 
        public let nextToken: String?

        public init(elasticsearchInstanceTypes: [ESPartitionInstanceType]? = nil, nextToken: String? = nil) {
            self.elasticsearchInstanceTypes = elasticsearchInstanceTypes
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case elasticsearchInstanceTypes = "ElasticsearchInstanceTypes"
            case nextToken = "NextToken"
        }
    }

    public struct SnapshotOptionsStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]
        /// Specifies the daily snapshot options specified for the Elasticsearch domain.
        public let options: SnapshotOptions
        /// Specifies the status of a daily automated snapshot.
        public let status: OptionStatus

        public init(options: SnapshotOptions, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct EncryptionAtRestOptionsStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]
        ///  Specifies the Encryption At Rest options for the specified Elasticsearch domain.
        public let options: EncryptionAtRestOptions
        ///  Specifies the status of the Encryption At Rest options for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: EncryptionAtRestOptions, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct DescribeElasticsearchDomainsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainStatusList", required: true, type: .list)
        ]
        /// The status of the domains requested in the DescribeElasticsearchDomains request.
        public let domainStatusList: [ElasticsearchDomainStatus]

        public init(domainStatusList: [ElasticsearchDomainStatus]) {
            self.domainStatusList = domainStatusList
        }

        private enum CodingKeys: String, CodingKey {
            case domainStatusList = "DomainStatusList"
        }
    }

    public struct CognitoOptions: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean), 
            AWSShapeMember(label: "RoleArn", required: false, type: .string), 
            AWSShapeMember(label: "IdentityPoolId", required: false, type: .string), 
            AWSShapeMember(label: "UserPoolId", required: false, type: .string)
        ]
        /// Specifies the option to enable Cognito for Kibana authentication.
        public let enabled: Bool?
        /// Specifies the role ARN that provides Elasticsearch permissions for accessing Cognito resources.
        public let roleArn: String?
        /// Specifies the Cognito identity pool ID for Kibana authentication.
        public let identityPoolId: String?
        /// Specifies the Cognito user pool ID for Kibana authentication.
        public let userPoolId: String?

        public init(enabled: Bool? = nil, roleArn: String? = nil, identityPoolId: String? = nil, userPoolId: String? = nil) {
            self.enabled = enabled
            self.roleArn = roleArn
            self.identityPoolId = identityPoolId
            self.userPoolId = userPoolId
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
            case roleArn = "RoleArn"
            case identityPoolId = "IdentityPoolId"
            case userPoolId = "UserPoolId"
        }
    }

    public struct UpdateElasticsearchDomainConfigResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainConfig", required: true, type: .structure)
        ]
        /// The status of the updated Elasticsearch domain. 
        public let domainConfig: ElasticsearchDomainConfig

        public init(domainConfig: ElasticsearchDomainConfig) {
            self.domainConfig = domainConfig
        }

        private enum CodingKeys: String, CodingKey {
            case domainConfig = "DomainConfig"
        }
    }

    public struct DescribeReservedElasticsearchInstancesResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string), 
            AWSShapeMember(label: "ReservedElasticsearchInstances", required: false, type: .list)
        ]
        /// Provides an identifier to allow retrieval of paginated results.
        public let nextToken: String?
        /// List of reserved Elasticsearch instances.
        public let reservedElasticsearchInstances: [ReservedElasticsearchInstance]?

        public init(nextToken: String? = nil, reservedElasticsearchInstances: [ReservedElasticsearchInstance]? = nil) {
            self.nextToken = nextToken
            self.reservedElasticsearchInstances = reservedElasticsearchInstances
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case reservedElasticsearchInstances = "ReservedElasticsearchInstances"
        }
    }

    public struct DeleteElasticsearchDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DomainName", location: .uri(locationName: "DomainName"), required: true, type: .string)
        ]
        /// The name of the Elasticsearch domain that you want to permanently delete.
        public let domainName: String

        public init(domainName: String) {
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case domainName = "DomainName"
        }
    }

    public struct Limits: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdditionalLimits", required: false, type: .list), 
            AWSShapeMember(label: "StorageTypes", required: false, type: .list), 
            AWSShapeMember(label: "InstanceLimits", required: false, type: .structure)
        ]
        ///  List of additional limits that are specific to a given InstanceType and for each of it's  InstanceRole  . 
        public let additionalLimits: [AdditionalLimit]?
        /// StorageType represents the list of storage related types and attributes that are available for given InstanceType. 
        public let storageTypes: [StorageType]?
        public let instanceLimits: InstanceLimits?

        public init(additionalLimits: [AdditionalLimit]? = nil, storageTypes: [StorageType]? = nil, instanceLimits: InstanceLimits? = nil) {
            self.additionalLimits = additionalLimits
            self.storageTypes = storageTypes
            self.instanceLimits = instanceLimits
        }

        private enum CodingKeys: String, CodingKey {
            case additionalLimits = "AdditionalLimits"
            case storageTypes = "StorageTypes"
            case instanceLimits = "InstanceLimits"
        }
    }

    public struct VPCDerivedInfoStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: true, type: .structure), 
            AWSShapeMember(label: "Status", required: true, type: .structure)
        ]
        ///  Specifies the VPC options for the specified Elasticsearch domain.
        public let options: VPCDerivedInfo
        ///  Specifies the status of the VPC options for the specified Elasticsearch domain.
        public let status: OptionStatus

        public init(options: VPCDerivedInfo, status: OptionStatus) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct CreateElasticsearchDomainRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotOptions", required: false, type: .structure), 
            AWSShapeMember(label: "EncryptionAtRestOptions", required: false, type: .structure), 
            AWSShapeMember(label: "ElasticsearchClusterConfig", required: false, type: .structure), 
            AWSShapeMember(label: "VPCOptions", required: false, type: .structure), 
            AWSShapeMember(label: "LogPublishingOptions", required: false, type: .map), 
            AWSShapeMember(label: "EBSOptions", required: false, type: .structure), 
            AWSShapeMember(label: "CognitoOptions", required: false, type: .structure), 
            AWSShapeMember(label: "ElasticsearchVersion", required: false, type: .string), 
            AWSShapeMember(label: "AccessPolicies", required: false, type: .string), 
            AWSShapeMember(label: "AdvancedOptions", required: false, type: .map), 
            AWSShapeMember(label: "DomainName", required: true, type: .string)
        ]
        /// Option to set time, in UTC format, of the daily automated snapshot. Default value is 0 hours. 
        public let snapshotOptions: SnapshotOptions?
        /// Specifies the Encryption At Rest Options.
        public let encryptionAtRestOptions: EncryptionAtRestOptions?
        /// Configuration options for an Elasticsearch domain. Specifies the instance type and number of instances in the domain cluster. 
        public let elasticsearchClusterConfig: ElasticsearchClusterConfig?
        /// Options to specify the subnets and security groups for VPC endpoint. For more information, see Creating a VPC in VPC Endpoints for Amazon Elasticsearch Service Domains
        public let vPCOptions: VPCOptions?
        /// Map of LogType and LogPublishingOption, each containing options to publish a given type of Elasticsearch log.
        public let logPublishingOptions: [LogType: LogPublishingOption]?
        /// Options to enable, disable and specify the type and size of EBS storage volumes. 
        public let eBSOptions: EBSOptions?
        /// Options to specify the Cognito user and identity pools for Kibana authentication. For more information, see Amazon Cognito Authentication for Kibana.
        public let cognitoOptions: CognitoOptions?
        /// String of format X.Y to specify version for the Elasticsearch domain eg. "1.5" or "2.3". For more information, see Creating Elasticsearch Domains in the Amazon Elasticsearch Service Developer Guide.
        public let elasticsearchVersion: String?
        ///  IAM access policy as a JSON-formatted string.
        public let accessPolicies: String?
        ///  Option to allow references to indices in an HTTP request body. Must be false when configuring access to individual sub-resources. By default, the value is true. See Configuration Advanced Options for more information.
        public let advancedOptions: [String: String]?
        /// The name of the Elasticsearch domain that you are creating. Domain names are unique across the domains owned by an account within an AWS region. Domain names must start with a letter or number and can contain the following characters: a-z (lowercase), 0-9, and - (hyphen).
        public let domainName: String

        public init(snapshotOptions: SnapshotOptions? = nil, encryptionAtRestOptions: EncryptionAtRestOptions? = nil, elasticsearchClusterConfig: ElasticsearchClusterConfig? = nil, vPCOptions: VPCOptions? = nil, logPublishingOptions: [LogType: LogPublishingOption]? = nil, eBSOptions: EBSOptions? = nil, cognitoOptions: CognitoOptions? = nil, elasticsearchVersion: String? = nil, accessPolicies: String? = nil, advancedOptions: [String: String]? = nil, domainName: String) {
            self.snapshotOptions = snapshotOptions
            self.encryptionAtRestOptions = encryptionAtRestOptions
            self.elasticsearchClusterConfig = elasticsearchClusterConfig
            self.vPCOptions = vPCOptions
            self.logPublishingOptions = logPublishingOptions
            self.eBSOptions = eBSOptions
            self.cognitoOptions = cognitoOptions
            self.elasticsearchVersion = elasticsearchVersion
            self.accessPolicies = accessPolicies
            self.advancedOptions = advancedOptions
            self.domainName = domainName
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotOptions = "SnapshotOptions"
            case encryptionAtRestOptions = "EncryptionAtRestOptions"
            case elasticsearchClusterConfig = "ElasticsearchClusterConfig"
            case vPCOptions = "VPCOptions"
            case logPublishingOptions = "LogPublishingOptions"
            case eBSOptions = "EBSOptions"
            case cognitoOptions = "CognitoOptions"
            case elasticsearchVersion = "ElasticsearchVersion"
            case accessPolicies = "AccessPolicies"
            case advancedOptions = "AdvancedOptions"
            case domainName = "DomainName"
        }
    }

    public struct StorageType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StorageTypeLimits", required: false, type: .list), 
            AWSShapeMember(label: "StorageSubTypeName", required: false, type: .string), 
            AWSShapeMember(label: "StorageTypeName", required: false, type: .string)
        ]
        /// List of limits that are applicable for given storage type. 
        public let storageTypeLimits: [StorageTypeLimit]?
        public let storageSubTypeName: String?
        public let storageTypeName: String?

        public init(storageTypeLimits: [StorageTypeLimit]? = nil, storageSubTypeName: String? = nil, storageTypeName: String? = nil) {
            self.storageTypeLimits = storageTypeLimits
            self.storageSubTypeName = storageSubTypeName
            self.storageTypeName = storageTypeName
        }

        private enum CodingKeys: String, CodingKey {
            case storageTypeLimits = "StorageTypeLimits"
            case storageSubTypeName = "StorageSubTypeName"
            case storageTypeName = "StorageTypeName"
        }
    }

    public struct LogPublishingOptionsStatus: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Options", required: false, type: .map), 
            AWSShapeMember(label: "Status", required: false, type: .structure)
        ]
        /// The log publishing options configured for the Elasticsearch domain.
        public let options: [LogType: LogPublishingOption]?
        /// The status of the log publishing options for the Elasticsearch domain. See OptionStatus for the status information that's included. 
        public let status: OptionStatus?

        public init(options: [LogType: LogPublishingOption]? = nil, status: OptionStatus? = nil) {
            self.options = options
            self.status = status
        }

        private enum CodingKeys: String, CodingKey {
            case options = "Options"
            case status = "Status"
        }
    }

    public struct ListTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ARN", location: .querystring(locationName: "arn"), required: true, type: .string)
        ]
        ///  Specify the ARN for the Elasticsearch domain to which the tags are attached that you want to view.
        public let arn: String

        public init(arn: String) {
            self.arn = arn
        }

        private enum CodingKeys: String, CodingKey {
            case arn = "arn"
        }
    }

    public enum OptionState: String, CustomStringConvertible, Codable {
        case requiresindexdocuments = "RequiresIndexDocuments"
        case processing = "Processing"
        case active = "Active"
        public var description: String { return self.rawValue }
    }

    public struct PurchaseReservedElasticsearchInstanceOfferingResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservationName", required: false, type: .string), 
            AWSShapeMember(label: "ReservedElasticsearchInstanceId", required: false, type: .string)
        ]
        /// The customer-specified identifier used to track this reservation.
        public let reservationName: String?
        /// Details of the reserved Elasticsearch instance which was purchased.
        public let reservedElasticsearchInstanceId: String?

        public init(reservationName: String? = nil, reservedElasticsearchInstanceId: String? = nil) {
            self.reservationName = reservationName
            self.reservedElasticsearchInstanceId = reservedElasticsearchInstanceId
        }

        private enum CodingKeys: String, CodingKey {
            case reservationName = "ReservationName"
            case reservedElasticsearchInstanceId = "ReservedElasticsearchInstanceId"
        }
    }

    public struct PurchaseReservedElasticsearchInstanceOfferingRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ReservedElasticsearchInstanceOfferingId", required: true, type: .string), 
            AWSShapeMember(label: "ReservationName", required: true, type: .string), 
            AWSShapeMember(label: "InstanceCount", required: false, type: .integer)
        ]
        /// The ID of the reserved Elasticsearch instance offering to purchase.
        public let reservedElasticsearchInstanceOfferingId: String
        /// A customer-specified identifier to track this reservation.
        public let reservationName: String
        /// The number of Elasticsearch instances to reserve.
        public let instanceCount: Int32?

        public init(reservedElasticsearchInstanceOfferingId: String, reservationName: String, instanceCount: Int32? = nil) {
            self.reservedElasticsearchInstanceOfferingId = reservedElasticsearchInstanceOfferingId
            self.reservationName = reservationName
            self.instanceCount = instanceCount
        }

        private enum CodingKeys: String, CodingKey {
            case reservedElasticsearchInstanceOfferingId = "ReservedElasticsearchInstanceOfferingId"
            case reservationName = "ReservationName"
            case instanceCount = "InstanceCount"
        }
    }

}