// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

/**
AWS Database Migration Service AWS Database Migration Service (AWS DMS) can migrate your data to and from the most widely used commercial and open-source databases such as Oracle, PostgreSQL, Microsoft SQL Server, Amazon Redshift, MariaDB, Amazon Aurora, MySQL, and SAP Adaptive Server Enterprise (ASE). The service supports homogeneous migrations such as Oracle to Oracle, as well as heterogeneous migrations between different database platforms, such as Oracle to MySQL or SQL Server to PostgreSQL.
*/
public struct Dms {

    let request: AWSRequest

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: Core.Region? = nil, endpoint: String? = nil) {
        self.request = AWSRequest(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            amzTarget: "AmazonDMSv20160101",
            service: "dms",
            endpoint: endpoint
        )
    }

    ///  Modifies the specified endpoint.
    public func modifyEndpoint(_ input: ModifyEndpointMessage) throws -> ModifyEndpointResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ModifyEndpoint", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about replication instances for your account in the current region.
    public func describeReplicationInstances(_ input: DescribeReplicationInstancesMessage) throws -> DescribeReplicationInstancesResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeReplicationInstances", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about replication tasks for your account in the current region.
    public func describeReplicationTasks(_ input: DescribeReplicationTasksMessage) throws -> DescribeReplicationTasksResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeReplicationTasks", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Describes the status of the connections that have been made between the replication instance and an endpoint. Connections are created when you test an endpoint.
    public func describeConnections(_ input: DescribeConnectionsMessage) throws -> DescribeConnectionsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeConnections", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Creates a replication subnet group given a list of the subnet IDs in a VPC.
    public func createReplicationSubnetGroup(_ input: CreateReplicationSubnetGroupMessage) throws -> CreateReplicationSubnetGroupResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateReplicationSubnetGroup", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Stops the replication task. 
    public func stopReplicationTask(_ input: StopReplicationTaskMessage) throws -> StopReplicationTaskResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "StopReplicationTask", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes a subnet group.
    public func deleteReplicationSubnetGroup(_ input: DeleteReplicationSubnetGroupMessage) throws -> DeleteReplicationSubnetGroupResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteReplicationSubnetGroup", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Lists all tags for an AWS DMS resource.
    public func listTagsForResource(_ input: ListTagsForResourceMessage) throws -> ListTagsForResourceResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListTagsForResource", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Lists all of the AWS DMS attributes for a customer account. The attributes include AWS DMS quotas for the account, such as the number of replication instances allowed. The description for a quota includes the quota name, current usage toward that quota, and the quota's maximum value. This command does not take any parameters.
    public func describeAccountAttributes(_ input: DescribeAccountAttributesMessage) throws -> DescribeAccountAttributesResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeAccountAttributes", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Populates the schema for the specified endpoint. This is an asynchronous operation and can take several minutes. You can check the status of this operation by calling the DescribeRefreshSchemasStatus operation.
    public func refreshSchemas(_ input: RefreshSchemasMessage) throws -> RefreshSchemasResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "RefreshSchemas", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about the replication subnet groups.
    public func describeReplicationSubnetGroups(_ input: DescribeReplicationSubnetGroupsMessage) throws -> DescribeReplicationSubnetGroupsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeReplicationSubnetGroups", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Starts the replication task.
    public func startReplicationTask(_ input: StartReplicationTaskMessage) throws -> StartReplicationTaskResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "StartReplicationTask", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes the specified replication task.
    public func deleteReplicationTask(_ input: DeleteReplicationTaskMessage) throws -> DeleteReplicationTaskResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteReplicationTask", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about the endpoints for your account in the current region.
    public func describeEndpoints(_ input: DescribeEndpointsMessage) throws -> DescribeEndpointsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeEndpoints", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Modifies the settings for the specified replication subnet group.
    public func modifyReplicationSubnetGroup(_ input: ModifyReplicationSubnetGroupMessage) throws -> ModifyReplicationSubnetGroupResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ModifyReplicationSubnetGroup", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Uploads the specified certificate.
    public func importCertificate(_ input: ImportCertificateMessage) throws -> ImportCertificateResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ImportCertificate", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns table statistics on the database migration task, including table name, rows inserted, rows updated, and rows deleted.
    public func describeTableStatistics(_ input: DescribeTableStatisticsMessage) throws -> DescribeTableStatisticsResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeTableStatistics", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes the specified replication instance.  You must delete any migration tasks that are associated with the replication instance before you can delete it.  
    public func deleteReplicationInstance(_ input: DeleteReplicationInstanceMessage) throws -> DeleteReplicationInstanceResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteReplicationInstance", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Creates the replication instance using the specified parameters.
    public func createReplicationInstance(_ input: CreateReplicationInstanceMessage) throws -> CreateReplicationInstanceResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateReplicationInstance", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Modifies the replication instance to apply new settings. You can change one or more parameters by specifying these parameters and the new values in the request. Some settings are applied during the maintenance window. 
    public func modifyReplicationInstance(_ input: ModifyReplicationInstanceMessage) throws -> ModifyReplicationInstanceResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ModifyReplicationInstance", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes the specified certificate. 
    public func deleteCertificate(_ input: DeleteCertificateMessage) throws -> DeleteCertificateResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteCertificate", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Creates a replication task using the specified parameters.
    public func createReplicationTask(_ input: CreateReplicationTaskMessage) throws -> CreateReplicationTaskResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateReplicationTask", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Removes metadata tags from a DMS resource.
    public func removeTagsFromResource(_ input: RemoveTagsFromResourceMessage) throws -> RemoveTagsFromResourceResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "RemoveTagsFromResource", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns the status of the RefreshSchemas operation.
    public func describeRefreshSchemasStatus(_ input: DescribeRefreshSchemasStatusMessage) throws -> DescribeRefreshSchemasStatusResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeRefreshSchemasStatus", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about the replication instance types that can be created in the specified region.
    public func describeOrderableReplicationInstances(_ input: DescribeOrderableReplicationInstancesMessage) throws -> DescribeOrderableReplicationInstancesResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeOrderableReplicationInstances", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Tests the connection between the replication instance and the endpoint.
    public func testConnection(_ input: TestConnectionMessage) throws -> TestConnectionResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "TestConnection", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about the schema for the specified endpoint. 
    public func describeSchemas(_ input: DescribeSchemasMessage) throws -> DescribeSchemasResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeSchemas", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Deletes the specified endpoint.  All tasks associated with the endpoint must be deleted before you can delete the endpoint.  
    public func deleteEndpoint(_ input: DeleteEndpointMessage) throws -> DeleteEndpointResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DeleteEndpoint", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Returns information about the type of endpoints available.
    public func describeEndpointTypes(_ input: DescribeEndpointTypesMessage) throws -> DescribeEndpointTypesResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeEndpointTypes", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Provides a description of the certificate.
    public func describeCertificates(_ input: DescribeCertificatesMessage) throws -> DescribeCertificatesResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "DescribeCertificates", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Creates an endpoint using the provided settings.
    public func createEndpoint(_ input: CreateEndpointMessage) throws -> CreateEndpointResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateEndpoint", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Adds metadata tags to a DMS resource, including replication instance, endpoint, security group, and migration task. These tags can also be used with cost allocation reporting to track cost associated with DMS resources, or used in a Condition statement in an IAM policy for DMS.
    public func addTagsToResource(_ input: AddTagsToResourceMessage) throws -> AddTagsToResourceResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "AddTagsToResource", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  Modifies the specified replication task. You can't modify the task endpoints. The task must be stopped before you can modify it. 
    public func modifyReplicationTask(_ input: ModifyReplicationTaskMessage) throws -> ModifyReplicationTaskResponse {
        let (bodyData, urlResponse) = try request.invoke(operation: "ModifyReplicationTask", path: "/", httpMethod: "POST", httpHeaders: [:], input: input)
        return try DmsResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }


}