// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

extension Dms {

    public struct ModifyReplicationSubnetGroupResponse: Serializable, Initializable {
        /// The modified replication subnet group.
        var replicationSubnetGroup: ReplicationSubnetGroup? = nil

        public init() {}

        public init(replicationSubnetGroup: ReplicationSubnetGroup? = nil) {
            self.replicationSubnetGroup = replicationSubnetGroup
        }

    }

    public struct CreateReplicationTaskResponse: Serializable, Initializable {
        /// The replication task that was created.
        var replicationTask: ReplicationTask? = nil

        public init() {}

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

    }

    public struct CreateReplicationSubnetGroupMessage: Serializable, Initializable {
        /// The EC2 subnet IDs for the subnet group.
        var subnetIds: [String] = []
        /// The name for the replication subnet group. This value is stored as a lowercase string. Constraints: Must contain no more than 255 alphanumeric characters, periods, spaces, underscores, or hyphens. Must not be "default". Example: mySubnetgroup 
        var replicationSubnetGroupIdentifier: String = ""
        /// The description for the subnet group.
        var replicationSubnetGroupDescription: String = ""
        /// The tag to be assigned to the subnet group.
        var tags: [Tag]? = nil

        public init() {}

        public init(subnetIds: [String], replicationSubnetGroupIdentifier: String, replicationSubnetGroupDescription: String, tags: [Tag]? = nil) {
            self.subnetIds = subnetIds
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
            self.replicationSubnetGroupDescription = replicationSubnetGroupDescription
            self.tags = tags
        }

    }

    public struct ModifyEndpointResponse: Serializable, Initializable {
        /// The modified endpoint.
        var endpoint: Endpoint? = nil

        public init() {}

        public init(endpoint: Endpoint? = nil) {
            self.endpoint = endpoint
        }

    }

    public struct DescribeReplicationSubnetGroupsMessage: Serializable, Initializable {
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil
        /// Filters applied to the describe action.
        var filters: [Filter]? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, marker: String? = nil, filters: [Filter]? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.filters = filters
        }

    }

    public struct DescribeEndpointsMessage: Serializable, Initializable {
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil
        /// Filters applied to the describe action. Valid filter names: endpoint-arn | endpoint-type | endpoint-id | engine-name
        var filters: [Filter]? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, marker: String? = nil, filters: [Filter]? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.filters = filters
        }

    }

    public struct DeleteEndpointMessage: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        var endpointArn: String = ""

        public init() {}

        public init(endpointArn: String) {
            self.endpointArn = endpointArn
        }

    }

    public struct Endpoint: Serializable, Initializable {
        /// The KMS key identifier that will be used to encrypt the connection parameters. If you do not specify a value for the KmsKeyId parameter, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
        var kmsKeyId: String? = nil
        /// The database endpoint identifier. Identifiers must begin with a letter; must contain only ASCII letters, digits, and hyphens; and must not end with a hyphen or contain two consecutive hyphens.
        var endpointIdentifier: String? = nil
        /// The user name used to connect to the endpoint.
        var username: String? = nil
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        var endpointArn: String? = nil
        /// The status of the endpoint.
        var status: String? = nil
        /// The type of endpoint.
        var endpointType: String? = nil
        /// The name of the server at the endpoint.
        var serverName: String? = nil
        /// The name of the database at the endpoint.
        var databaseName: String? = nil
        /// The SSL mode used to connect to the endpoint. SSL mode can be one of four values: none, require, verify-ca, verify-full.  The default value is none.
        var sslMode: String? = nil
        /// The Amazon Resource Name (ARN) used for SSL connection to the endpoint.
        var certificateArn: String? = nil
        /// The database engine name. Valid values include MYSQL, ORACLE, POSTGRES, MARIADB, AURORA, REDSHIFT, SYBASE, and SQLSERVER.
        var engineName: String? = nil
        /// The port value used to access the endpoint.
        var port: Int32? = nil
        /// Additional connection attributes used to connect to the endpoint.
        var extraConnectionAttributes: String? = nil

        public init() {}

        public init(kmsKeyId: String? = nil, endpointIdentifier: String? = nil, username: String? = nil, endpointArn: String? = nil, status: String? = nil, endpointType: String? = nil, serverName: String? = nil, databaseName: String? = nil, sslMode: String? = nil, certificateArn: String? = nil, engineName: String? = nil, port: Int32? = nil, extraConnectionAttributes: String? = nil) {
            self.kmsKeyId = kmsKeyId
            self.endpointIdentifier = endpointIdentifier
            self.username = username
            self.endpointArn = endpointArn
            self.status = status
            self.endpointType = endpointType
            self.serverName = serverName
            self.databaseName = databaseName
            self.sslMode = sslMode
            self.certificateArn = certificateArn
            self.engineName = engineName
            self.port = port
            self.extraConnectionAttributes = extraConnectionAttributes
        }

    }

    public struct DescribeOrderableReplicationInstancesResponse: Serializable, Initializable {
        /// The order-able replication instances available.
        var orderableReplicationInstances: [OrderableReplicationInstance]? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil

        public init() {}

        public init(orderableReplicationInstances: [OrderableReplicationInstance]? = nil, marker: String? = nil) {
            self.orderableReplicationInstances = orderableReplicationInstances
            self.marker = marker
        }

    }

    public struct DescribeTableStatisticsResponse: Serializable, Initializable {
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil
        /// The table statistics.
        var tableStatistics: [TableStatistics]? = nil
        /// The Amazon Resource Name (ARN) of the replication task.
        var replicationTaskArn: String? = nil

        public init() {}

        public init(marker: String? = nil, tableStatistics: [TableStatistics]? = nil, replicationTaskArn: String? = nil) {
            self.marker = marker
            self.tableStatistics = tableStatistics
            self.replicationTaskArn = replicationTaskArn
        }

    }

    public struct DescribeEndpointTypesMessage: Serializable, Initializable {
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil
        /// Filters applied to the describe action. Valid filter names: engine-name | endpoint-type
        var filters: [Filter]? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, marker: String? = nil, filters: [Filter]? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.filters = filters
        }

    }

    public struct DeleteReplicationInstanceMessage: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the replication instance to be deleted.
        var replicationInstanceArn: String = ""

        public init() {}

        public init(replicationInstanceArn: String) {
            self.replicationInstanceArn = replicationInstanceArn
        }

    }

    public struct SupportedEndpointType: Serializable, Initializable {
        /// The database engine name. Valid values include MYSQL, ORACLE, POSTGRES, MARIADB, AURORA, REDSHIFT, SYBASE, and SQLSERVER.
        var engineName: String? = nil
        /// The type of endpoint.
        var endpointType: String? = nil
        /// Indicates if Change Data Capture (CDC) is supported.
        var supportsCDC: Bool? = nil

        public init() {}

        public init(engineName: String? = nil, endpointType: String? = nil, supportsCDC: Bool? = nil) {
            self.engineName = engineName
            self.endpointType = endpointType
            self.supportsCDC = supportsCDC
        }

    }

    public struct DescribeCertificatesResponse: Serializable, Initializable {
        /// The pagination token.
        var marker: String? = nil
        /// The Secure Sockets Layer (SSL) certificates associated with the replication instance.
        var certificates: [Certificate]? = nil

        public init() {}

        public init(marker: String? = nil, certificates: [Certificate]? = nil) {
            self.marker = marker
            self.certificates = certificates
        }

    }

    public struct RemoveTagsFromResourceResponse: Serializable, Initializable {

        public init() {}

    }

    public struct DescribeReplicationTasksMessage: Serializable, Initializable {
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil
        /// Filters applied to the describe action. Valid filter names: replication-task-arn | replication-task-id | migration-type | endpoint-arn | replication-instance-arn
        var filters: [Filter]? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, marker: String? = nil, filters: [Filter]? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.filters = filters
        }

    }

    public struct DeleteReplicationInstanceResponse: Serializable, Initializable {
        /// The replication instance that was deleted.
        var replicationInstance: ReplicationInstance? = nil

        public init() {}

        public init(replicationInstance: ReplicationInstance? = nil) {
            self.replicationInstance = replicationInstance
        }

    }

    public struct Tag: Serializable, Initializable {
        /// A value is the optional value of the tag. The string value can be from 1 to 256 Unicode characters in length and cannot be prefixed with "aws:" or "dms:". The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        var value: String? = nil
        /// A key is the required name of the tag. The string value can be from 1 to 128 Unicode characters in length and cannot be prefixed with "aws:" or "dms:". The string can only contain only the set of Unicode letters, digits, white-space, '_', '.', '/', '=', '+', '-' (Java regex: "^([\\p{L}\\p{Z}\\p{N}_.:/=+\\-]*)$").
        var key: String? = nil

        public init() {}

        public init(value: String? = nil, key: String? = nil) {
            self.value = value
            self.key = key
        }

    }

    public struct AddTagsToResourceResponse: Serializable, Initializable {

        public init() {}

    }

    public struct ListTagsForResourceMessage: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) string that uniquely identifies the AWS DMS resource.
        var resourceArn: String = ""

        public init() {}

        public init(resourceArn: String) {
            self.resourceArn = resourceArn
        }

    }

    public struct DescribeEndpointTypesResponse: Serializable, Initializable {
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil
        /// The type of endpoints that are supported.
        var supportedEndpointTypes: [SupportedEndpointType]? = nil

        public init() {}

        public init(marker: String? = nil, supportedEndpointTypes: [SupportedEndpointType]? = nil) {
            self.marker = marker
            self.supportedEndpointTypes = supportedEndpointTypes
        }

    }

    public struct StartReplicationTaskMessage: Serializable, Initializable {
        /// The Amazon Resource Number (ARN) of the replication task to be started.
        var replicationTaskArn: String = ""
        /// The start time for the Change Data Capture (CDC) operation.
        var cdcStartTime: Date? = nil
        /// The type of replication task.
        var startReplicationTaskType: String = ""

        public init() {}

        public init(replicationTaskArn: String, cdcStartTime: Date? = nil, startReplicationTaskType: String) {
            self.replicationTaskArn = replicationTaskArn
            self.cdcStartTime = cdcStartTime
            self.startReplicationTaskType = startReplicationTaskType
        }

    }

    public struct CreateReplicationInstanceMessage: Serializable, Initializable {
        ///  Specifies if the replication instance is a Multi-AZ deployment. You cannot set the AvailabilityZone parameter if the Multi-AZ parameter is set to true. 
        var multiAZ: Bool? = nil
        /// Tags to be associated with the replication instance.
        var tags: [Tag]? = nil
        /// The amount of storage (in gigabytes) to be initially allocated for the replication instance.
        var allocatedStorage: Int32? = nil
        ///  Specifies the VPC security group to be used with the replication instance. The VPC security group must work with the VPC containing the replication instance. 
        var vpcSecurityGroupIds: [String]? = nil
        /// The EC2 Availability Zone that the replication instance will be created in. Default: A random, system-chosen Availability Zone in the endpoint's region.  Example: us-east-1d 
        var availabilityZone: String? = nil
        ///  Specifies the accessibility options for the replication instance. A value of true represents an instance with a public IP address. A value of false represents an instance with a private IP address. The default value is true. 
        var publiclyAccessible: Bool? = nil
        /// Indicates that minor engine upgrades will be applied automatically to the replication instance during the maintenance window. Default: true 
        var autoMinorVersionUpgrade: Bool? = nil
        /// The replication instance identifier. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: myrepinstance 
        var replicationInstanceIdentifier: String = ""
        /// The engine version number of the replication instance.
        var engineVersion: String? = nil
        /// The compute and memory capacity of the replication instance as specified by the replication instance class.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        var replicationInstanceClass: String = ""
        /// The weekly time range during which system maintenance can occur, in Universal Coordinated Time (UTC).  Format: ddd:hh24:mi-ddd:hh24:mi  Default: A 30-minute window selected at random from an 8-hour block of time per region, occurring on a random day of the week. Valid Days: Mon, Tue, Wed, Thu, Fri, Sat, Sun Constraints: Minimum 30-minute window.
        var preferredMaintenanceWindow: String? = nil
        /// A subnet group to associate with the replication instance.
        var replicationSubnetGroupIdentifier: String? = nil
        /// The KMS key identifier that will be used to encrypt the content on the replication instance. If you do not specify a value for the KmsKeyId parameter, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
        var kmsKeyId: String? = nil

        public init() {}

        public init(multiAZ: Bool? = nil, tags: [Tag]? = nil, allocatedStorage: Int32? = nil, vpcSecurityGroupIds: [String]? = nil, availabilityZone: String? = nil, publiclyAccessible: Bool? = nil, autoMinorVersionUpgrade: Bool? = nil, replicationInstanceIdentifier: String, engineVersion: String? = nil, replicationInstanceClass: String, preferredMaintenanceWindow: String? = nil, replicationSubnetGroupIdentifier: String? = nil, kmsKeyId: String? = nil) {
            self.multiAZ = multiAZ
            self.tags = tags
            self.allocatedStorage = allocatedStorage
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.availabilityZone = availabilityZone
            self.publiclyAccessible = publiclyAccessible
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.replicationInstanceIdentifier = replicationInstanceIdentifier
            self.engineVersion = engineVersion
            self.replicationInstanceClass = replicationInstanceClass
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
            self.kmsKeyId = kmsKeyId
        }

    }

    public struct DeleteCertificateResponse: Serializable, Initializable {
        /// The Secure Sockets Layer (SSL) certificate.
        var certificate: Certificate? = nil

        public init() {}

        public init(certificate: Certificate? = nil) {
            self.certificate = certificate
        }

    }

    public struct DescribeConnectionsResponse: Serializable, Initializable {
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil
        /// A description of the connections.
        var connections: [Connection]? = nil

        public init() {}

        public init(marker: String? = nil, connections: [Connection]? = nil) {
            self.marker = marker
            self.connections = connections
        }

    }

    public struct DescribeTableStatisticsMessage: Serializable, Initializable {
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        /// The Amazon Resource Name (ARN) of the replication task.
        var replicationTaskArn: String = ""

        public init() {}

        public init(marker: String? = nil, maxRecords: Int32? = nil, replicationTaskArn: String) {
            self.marker = marker
            self.maxRecords = maxRecords
            self.replicationTaskArn = replicationTaskArn
        }

    }

    public struct DescribeRefreshSchemasStatusMessage: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        var endpointArn: String = ""

        public init() {}

        public init(endpointArn: String) {
            self.endpointArn = endpointArn
        }

    }

    public struct RemoveTagsFromResourceMessage: Serializable, Initializable {
        /// &gt;The Amazon Resource Name (ARN) of the AWS DMS resource the tag is to be removed from.
        var resourceArn: String = ""
        /// The tag key (name) of the tag to be removed.
        var tagKeys: [String] = []

        public init() {}

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

    }

    public struct ModifyReplicationInstanceResponse: Serializable, Initializable {
        /// The modified replication instance.
        var replicationInstance: ReplicationInstance? = nil

        public init() {}

        public init(replicationInstance: ReplicationInstance? = nil) {
            self.replicationInstance = replicationInstance
        }

    }

    public struct DescribeReplicationSubnetGroupsResponse: Serializable, Initializable {
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil
        /// A description of the replication subnet groups.
        var replicationSubnetGroups: [ReplicationSubnetGroup]? = nil

        public init() {}

        public init(marker: String? = nil, replicationSubnetGroups: [ReplicationSubnetGroup]? = nil) {
            self.marker = marker
            self.replicationSubnetGroups = replicationSubnetGroups
        }

    }

    public struct DescribeAccountAttributesResponse: Serializable, Initializable {
        /// Account quota information.
        var accountQuotas: [AccountQuota]? = nil

        public init() {}

        public init(accountQuotas: [AccountQuota]? = nil) {
            self.accountQuotas = accountQuotas
        }

    }

    public struct DescribeSchemasResponse: Serializable, Initializable {
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil
        /// The described schema.
        var schemas: [String]? = nil

        public init() {}

        public init(marker: String? = nil, schemas: [String]? = nil) {
            self.marker = marker
            self.schemas = schemas
        }

    }

    public struct DescribeAccountAttributesMessage: Serializable, Initializable {

        public init() {}

    }

    public struct Certificate: Serializable, Initializable {
        /// The beginning date that the certificate is valid.
        var validFromDate: Date? = nil
        /// The key length of the cryptographic algorithm being used.
        var keyLength: Int32? = nil
        /// The signing algorithm for the certificate.
        var signingAlgorithm: String? = nil
        /// The location of the imported Oracle Wallet certificate for use with SSL.
        var certificateWallet: Data? = nil
        /// The Amazon Resource Name (ARN) for the certificate.
        var certificateArn: String? = nil
        /// The contents of the .pem X.509 certificate file for the certificate.
        var certificatePem: String? = nil
        /// The final date that the certificate is valid.
        var validToDate: Date? = nil
        /// The owner of the certificate.
        var certificateOwner: String? = nil
        /// The customer-assigned name of the certificate. Valid characters are A-z and 0-9.
        var certificateIdentifier: String? = nil
        /// The date that the certificate was created.
        var certificateCreationDate: Date? = nil

        public init() {}

        public init(validFromDate: Date? = nil, keyLength: Int32? = nil, signingAlgorithm: String? = nil, certificateWallet: Data? = nil, certificateArn: String? = nil, certificatePem: String? = nil, validToDate: Date? = nil, certificateOwner: String? = nil, certificateIdentifier: String? = nil, certificateCreationDate: Date? = nil) {
            self.validFromDate = validFromDate
            self.keyLength = keyLength
            self.signingAlgorithm = signingAlgorithm
            self.certificateWallet = certificateWallet
            self.certificateArn = certificateArn
            self.certificatePem = certificatePem
            self.validToDate = validToDate
            self.certificateOwner = certificateOwner
            self.certificateIdentifier = certificateIdentifier
            self.certificateCreationDate = certificateCreationDate
        }

    }

    public struct ListTagsForResourceResponse: Serializable, Initializable {
        /// A list of tags for the resource.
        var tagList: [Tag]? = nil

        public init() {}

        public init(tagList: [Tag]? = nil) {
            self.tagList = tagList
        }

    }

    public struct Subnet: Serializable, Initializable {
        /// The subnet identifier.
        var subnetIdentifier: String? = nil
        /// The Availability Zone of the subnet.
        var subnetAvailabilityZone: AvailabilityZone? = nil
        /// The status of the subnet.
        var subnetStatus: String? = nil

        public init() {}

        public init(subnetIdentifier: String? = nil, subnetAvailabilityZone: AvailabilityZone? = nil, subnetStatus: String? = nil) {
            self.subnetIdentifier = subnetIdentifier
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetStatus = subnetStatus
        }

    }

    public struct StartReplicationTaskResponse: Serializable, Initializable {
        /// The replication task started.
        var replicationTask: ReplicationTask? = nil

        public init() {}

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

    }

    public struct AvailabilityZone: Serializable, Initializable {
        /// The name of the availability zone.
        var name: String? = nil

        public init() {}

        public init(name: String? = nil) {
            self.name = name
        }

    }

    public struct Connection: Serializable, Initializable {
        /// The error message when the connection last failed.
        var lastFailureMessage: String? = nil
        /// The replication instance identifier. This parameter is stored as a lowercase string.
        var replicationInstanceIdentifier: String? = nil
        /// The Amazon Resource Name (ARN) of the replication instance.
        var replicationInstanceArn: String? = nil
        /// The connection status.
        var status: String? = nil
        /// The identifier of the endpoint. Identifiers must begin with a letter; must contain only ASCII letters, digits, and hyphens; and must not end with a hyphen or contain two consecutive hyphens.
        var endpointIdentifier: String? = nil
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        var endpointArn: String? = nil

        public init() {}

        public init(lastFailureMessage: String? = nil, replicationInstanceIdentifier: String? = nil, replicationInstanceArn: String? = nil, status: String? = nil, endpointIdentifier: String? = nil, endpointArn: String? = nil) {
            self.lastFailureMessage = lastFailureMessage
            self.replicationInstanceIdentifier = replicationInstanceIdentifier
            self.replicationInstanceArn = replicationInstanceArn
            self.status = status
            self.endpointIdentifier = endpointIdentifier
            self.endpointArn = endpointArn
        }

    }

    public struct RefreshSchemasStatus: Serializable, Initializable {
        /// The last failure message for the schema.
        var lastFailureMessage: String? = nil
        /// The Amazon Resource Name (ARN) of the replication instance.
        var replicationInstanceArn: String? = nil
        /// The status of the schema.
        var status: String? = nil
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        var endpointArn: String? = nil
        /// The date the schema was last refreshed.
        var lastRefreshDate: Date? = nil

        public init() {}

        public init(lastFailureMessage: String? = nil, replicationInstanceArn: String? = nil, status: String? = nil, endpointArn: String? = nil, lastRefreshDate: Date? = nil) {
            self.lastFailureMessage = lastFailureMessage
            self.replicationInstanceArn = replicationInstanceArn
            self.status = status
            self.endpointArn = endpointArn
            self.lastRefreshDate = lastRefreshDate
        }

    }

    public struct DeleteReplicationTaskMessage: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the replication task to be deleted.
        var replicationTaskArn: String = ""

        public init() {}

        public init(replicationTaskArn: String) {
            self.replicationTaskArn = replicationTaskArn
        }

    }

    public struct DescribeReplicationInstancesMessage: Serializable, Initializable {
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil
        /// Filters applied to the describe action. Valid filter names: replication-instance-arn | replication-instance-id | replication-instance-class | engine-version
        var filters: [Filter]? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, marker: String? = nil, filters: [Filter]? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.filters = filters
        }

    }

    public struct RefreshSchemasMessage: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the replication instance.
        var replicationInstanceArn: String = ""
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        var endpointArn: String = ""

        public init() {}

        public init(replicationInstanceArn: String, endpointArn: String) {
            self.replicationInstanceArn = replicationInstanceArn
            self.endpointArn = endpointArn
        }

    }

    public struct ModifyReplicationInstanceMessage: Serializable, Initializable {
        /// Indicates that major version upgrades are allowed. Changing this parameter does not result in an outage and the change is asynchronously applied as soon as possible. Constraints: This parameter must be set to true when specifying a value for the EngineVersion parameter that is a different major version than the replication instance's current version.
        var allowMajorVersionUpgrade: Bool? = nil
        /// The replication instance identifier. This parameter is stored as a lowercase string.
        var replicationInstanceIdentifier: String? = nil
        ///  Specifies if the replication instance is a Multi-AZ deployment. You cannot set the AvailabilityZone parameter if the Multi-AZ parameter is set to true. 
        var multiAZ: Bool? = nil
        /// The engine version number of the replication instance.
        var engineVersion: String? = nil
        /// The compute and memory capacity of the replication instance.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        var replicationInstanceClass: String? = nil
        /// The weekly time range (in UTC) during which system maintenance can occur, which might result in an outage. Changing this parameter does not result in an outage, except in the following situation, and the change is asynchronously applied as soon as possible. If moving this window to the current time, there must be at least 30 minutes between the current time and end of the window to ensure pending changes are applied. Default: Uses existing setting Format: ddd:hh24:mi-ddd:hh24:mi Valid Days: Mon | Tue | Wed | Thu | Fri | Sat | Sun Constraints: Must be at least 30 minutes
        var preferredMaintenanceWindow: String? = nil
        /// The amount of storage (in gigabytes) to be allocated for the replication instance.
        var allocatedStorage: Int32? = nil
        ///  Specifies the VPC security group to be used with the replication instance. The VPC security group must work with the VPC containing the replication instance. 
        var vpcSecurityGroupIds: [String]? = nil
        /// The Amazon Resource Name (ARN) of the replication instance.
        var replicationInstanceArn: String = ""
        /// Indicates whether the changes should be applied immediately or during the next maintenance window.
        var applyImmediately: Bool? = nil
        ///  Indicates that minor version upgrades will be applied automatically to the replication instance during the maintenance window. Changing this parameter does not result in an outage except in the following case and the change is asynchronously applied as soon as possible. An outage will result if this parameter is set to true during the maintenance window, and a newer minor version is available, and AWS DMS has enabled auto patching for that engine version. 
        var autoMinorVersionUpgrade: Bool? = nil

        public init() {}

        public init(allowMajorVersionUpgrade: Bool? = nil, replicationInstanceIdentifier: String? = nil, multiAZ: Bool? = nil, engineVersion: String? = nil, replicationInstanceClass: String? = nil, preferredMaintenanceWindow: String? = nil, allocatedStorage: Int32? = nil, vpcSecurityGroupIds: [String]? = nil, replicationInstanceArn: String, applyImmediately: Bool? = nil, autoMinorVersionUpgrade: Bool? = nil) {
            self.allowMajorVersionUpgrade = allowMajorVersionUpgrade
            self.replicationInstanceIdentifier = replicationInstanceIdentifier
            self.multiAZ = multiAZ
            self.engineVersion = engineVersion
            self.replicationInstanceClass = replicationInstanceClass
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.allocatedStorage = allocatedStorage
            self.vpcSecurityGroupIds = vpcSecurityGroupIds
            self.replicationInstanceArn = replicationInstanceArn
            self.applyImmediately = applyImmediately
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
        }

    }

    public struct AccountQuota: Serializable, Initializable {
        /// The maximum allowed value for the quota.
        var max: Int64? = nil
        /// The amount currently used toward the quota maximum.
        var used: Int64? = nil
        /// The name of the AWS DMS quota for this AWS account.
        var accountQuotaName: String? = nil

        public init() {}

        public init(max: Int64? = nil, used: Int64? = nil, accountQuotaName: String? = nil) {
            self.max = max
            self.used = used
            self.accountQuotaName = accountQuotaName
        }

    }

    public struct DescribeCertificatesMessage: Serializable, Initializable {
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 10
        var maxRecords: Int32? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil
        /// Filters applied to the certificate described in the form of key-value pairs.
        var filters: [Filter]? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, marker: String? = nil, filters: [Filter]? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.filters = filters
        }

    }

    public struct CreateEndpointMessage: Serializable, Initializable {
        /// The KMS key identifier that will be used to encrypt the connection parameters. If you do not specify a value for the KmsKeyId parameter, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
        var kmsKeyId: String? = nil
        /// The database endpoint identifier. Identifiers must begin with a letter; must contain only ASCII letters, digits, and hyphens; and must not end with a hyphen or contain two consecutive hyphens.
        var endpointIdentifier: String = ""
        /// Tags to be added to the endpoint.
        var tags: [Tag]? = nil
        /// The user name to be used to login to the endpoint database.
        var username: String? = nil
        /// The type of endpoint.
        var endpointType: String = ""
        /// The name of the server where the endpoint database resides.
        var serverName: String? = nil
        /// The name of the endpoint database.
        var databaseName: String? = nil
        /// The SSL mode to use for the SSL connection. SSL mode can be one of four values: none, require, verify-ca, verify-full.  The default value is none.
        var sslMode: String? = nil
        /// The Amazon Resource Number (ARN) for the certificate.
        var certificateArn: String? = nil
        /// The type of engine for the endpoint. Valid values include MYSQL, ORACLE, POSTGRES, MARIADB, AURORA, REDSHIFT, SYBASE, and SQLSERVER.
        var engineName: String = ""
        /// The password to be used to login to the endpoint database.
        var password: String? = nil
        /// The port used by the endpoint database.
        var port: Int32? = nil
        /// Additional attributes associated with the connection.
        var extraConnectionAttributes: String? = nil

        public init() {}

        public init(kmsKeyId: String? = nil, endpointIdentifier: String, tags: [Tag]? = nil, username: String? = nil, endpointType: String, serverName: String? = nil, databaseName: String? = nil, sslMode: String? = nil, certificateArn: String? = nil, engineName: String, password: String? = nil, port: Int32? = nil, extraConnectionAttributes: String? = nil) {
            self.kmsKeyId = kmsKeyId
            self.endpointIdentifier = endpointIdentifier
            self.tags = tags
            self.username = username
            self.endpointType = endpointType
            self.serverName = serverName
            self.databaseName = databaseName
            self.sslMode = sslMode
            self.certificateArn = certificateArn
            self.engineName = engineName
            self.password = password
            self.port = port
            self.extraConnectionAttributes = extraConnectionAttributes
        }

    }

    public struct ReplicationSubnetGroup: Serializable, Initializable {
        /// The status of the subnet group.
        var subnetGroupStatus: String? = nil
        /// The subnets that are in the subnet group.
        var subnets: [Subnet]? = nil
        /// The identifier of the replication instance subnet group.
        var replicationSubnetGroupIdentifier: String? = nil
        /// The description of the replication subnet group.
        var replicationSubnetGroupDescription: String? = nil
        /// The ID of the VPC.
        var vpcId: String? = nil

        public init() {}

        public init(subnetGroupStatus: String? = nil, subnets: [Subnet]? = nil, replicationSubnetGroupIdentifier: String? = nil, replicationSubnetGroupDescription: String? = nil, vpcId: String? = nil) {
            self.subnetGroupStatus = subnetGroupStatus
            self.subnets = subnets
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
            self.replicationSubnetGroupDescription = replicationSubnetGroupDescription
            self.vpcId = vpcId
        }

    }

    public struct TestConnectionResponse: Serializable, Initializable {
        /// The connection tested.
        var connection: Connection? = nil

        public init() {}

        public init(connection: Connection? = nil) {
            self.connection = connection
        }

    }

    public struct DeleteReplicationTaskResponse: Serializable, Initializable {
        /// The deleted replication task.
        var replicationTask: ReplicationTask? = nil

        public init() {}

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

    }

    public struct CreateReplicationSubnetGroupResponse: Serializable, Initializable {
        /// The replication subnet group that was created.
        var replicationSubnetGroup: ReplicationSubnetGroup? = nil

        public init() {}

        public init(replicationSubnetGroup: ReplicationSubnetGroup? = nil) {
            self.replicationSubnetGroup = replicationSubnetGroup
        }

    }

    public struct TableStatistics: Serializable, Initializable {
        /// The number of delete actions performed on a table.
        var deletes: Int64? = nil
        /// The number of update actions performed on a table.
        var updates: Int64? = nil
        /// The state of the table.
        var tableState: String? = nil
        /// The schema name.
        var schemaName: String? = nil
        /// The number of rows added during the Full Load operation.
        var fullLoadRows: Int64? = nil
        /// The number of insert actions performed on a table.
        var inserts: Int64? = nil
        /// The name of the table.
        var tableName: String? = nil
        /// The last time the table was updated.
        var lastUpdateTime: Date? = nil
        /// The Data Definition Language (DDL) used to build and modify the structure of your tables.
        var ddls: Int64? = nil

        public init() {}

        public init(deletes: Int64? = nil, updates: Int64? = nil, tableState: String? = nil, schemaName: String? = nil, fullLoadRows: Int64? = nil, inserts: Int64? = nil, tableName: String? = nil, lastUpdateTime: Date? = nil, ddls: Int64? = nil) {
            self.deletes = deletes
            self.updates = updates
            self.tableState = tableState
            self.schemaName = schemaName
            self.fullLoadRows = fullLoadRows
            self.inserts = inserts
            self.tableName = tableName
            self.lastUpdateTime = lastUpdateTime
            self.ddls = ddls
        }

    }

    public struct ImportCertificateMessage: Serializable, Initializable {
        /// The location of the imported Oracle Wallet certificate for use with SSL.
        var certificateWallet: Data? = nil
        /// The customer-assigned name of the certificate. Valid characters are A-z and 0-9.
        var certificateIdentifier: String = ""
        /// The contents of the .pem X.509 certificate file for the certificate.
        var certificatePem: String? = nil

        public init() {}

        public init(certificateWallet: Data? = nil, certificateIdentifier: String, certificatePem: String? = nil) {
            self.certificateWallet = certificateWallet
            self.certificateIdentifier = certificateIdentifier
            self.certificatePem = certificatePem
        }

    }

    public struct TestConnectionMessage: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the replication instance.
        var replicationInstanceArn: String = ""
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        var endpointArn: String = ""

        public init() {}

        public init(replicationInstanceArn: String, endpointArn: String) {
            self.replicationInstanceArn = replicationInstanceArn
            self.endpointArn = endpointArn
        }

    }

    public struct CreateEndpointResponse: Serializable, Initializable {
        /// The endpoint that was created.
        var endpoint: Endpoint? = nil

        public init() {}

        public init(endpoint: Endpoint? = nil) {
            self.endpoint = endpoint
        }

    }

    public struct CreateReplicationInstanceResponse: Serializable, Initializable {
        /// The replication instance that was created.
        var replicationInstance: ReplicationInstance? = nil

        public init() {}

        public init(replicationInstance: ReplicationInstance? = nil) {
            self.replicationInstance = replicationInstance
        }

    }

    public struct ModifyReplicationTaskMessage: Serializable, Initializable {
        /// The path of the JSON file that contains the table mappings. Preceed the path with "file://". For example, --table-mappings file://mappingfile.json
        var tableMappings: String? = nil
        /// The Amazon Resource Name (ARN) of the replication task.
        var replicationTaskArn: String = ""
        /// The replication task identifier. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        var replicationTaskIdentifier: String? = nil
        /// The migration type. Valid values: full-load | cdc | full-load-and-cdc
        var migrationType: String? = nil
        /// The start time for the Change Data Capture (CDC) operation.
        var cdcStartTime: Date? = nil
        /// JSON file that contains settings for the task, such as target metadata settings.
        var replicationTaskSettings: String? = nil

        public init() {}

        public init(tableMappings: String? = nil, replicationTaskArn: String, replicationTaskIdentifier: String? = nil, migrationType: String? = nil, cdcStartTime: Date? = nil, replicationTaskSettings: String? = nil) {
            self.tableMappings = tableMappings
            self.replicationTaskArn = replicationTaskArn
            self.replicationTaskIdentifier = replicationTaskIdentifier
            self.migrationType = migrationType
            self.cdcStartTime = cdcStartTime
            self.replicationTaskSettings = replicationTaskSettings
        }

    }

    public struct ModifyReplicationSubnetGroupMessage: Serializable, Initializable {
        /// A list of subnet IDs.
        var subnetIds: [String] = []
        /// The name of the replication instance subnet group.
        var replicationSubnetGroupIdentifier: String = ""
        /// The description of the replication instance subnet group.
        var replicationSubnetGroupDescription: String? = nil

        public init() {}

        public init(subnetIds: [String], replicationSubnetGroupIdentifier: String, replicationSubnetGroupDescription: String? = nil) {
            self.subnetIds = subnetIds
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
            self.replicationSubnetGroupDescription = replicationSubnetGroupDescription
        }

    }

    public struct OrderableReplicationInstance: Serializable, Initializable {
        /// The version of the replication engine.
        var engineVersion: String? = nil
        /// The compute and memory capacity of the replication instance.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        var replicationInstanceClass: String? = nil
        /// The default amount of storage (in gigabytes) that is allocated for the replication instance.
        var defaultAllocatedStorage: Int32? = nil
        /// The type of storage used by the replication instance.
        var storageType: String? = nil
        /// The minimum amount of storage (in gigabytes) that can be allocated for the replication instance.
        var minAllocatedStorage: Int32? = nil
        /// The amount of storage (in gigabytes) that is allocated for the replication instance.
        var includedAllocatedStorage: Int32? = nil
        /// The minimum amount of storage (in gigabytes) that can be allocated for the replication instance.
        var maxAllocatedStorage: Int32? = nil

        public init() {}

        public init(engineVersion: String? = nil, replicationInstanceClass: String? = nil, defaultAllocatedStorage: Int32? = nil, storageType: String? = nil, minAllocatedStorage: Int32? = nil, includedAllocatedStorage: Int32? = nil, maxAllocatedStorage: Int32? = nil) {
            self.engineVersion = engineVersion
            self.replicationInstanceClass = replicationInstanceClass
            self.defaultAllocatedStorage = defaultAllocatedStorage
            self.storageType = storageType
            self.minAllocatedStorage = minAllocatedStorage
            self.includedAllocatedStorage = includedAllocatedStorage
            self.maxAllocatedStorage = maxAllocatedStorage
        }

    }

    public struct ReplicationTaskStats: Serializable, Initializable {
        /// The number of tables loaded for this task.
        var tablesLoaded: Int32? = nil
        /// The elapsed time of the task, in milliseconds.
        var elapsedTimeMillis: Int64? = nil
        /// The percent complete for the full load migration task.
        var fullLoadProgressPercent: Int32? = nil
        /// The number of tables queued for this task.
        var tablesQueued: Int32? = nil
        /// The number of errors that have occurred during this task.
        var tablesErrored: Int32? = nil
        /// The number of tables currently loading for this task.
        var tablesLoading: Int32? = nil

        public init() {}

        public init(tablesLoaded: Int32? = nil, elapsedTimeMillis: Int64? = nil, fullLoadProgressPercent: Int32? = nil, tablesQueued: Int32? = nil, tablesErrored: Int32? = nil, tablesLoading: Int32? = nil) {
            self.tablesLoaded = tablesLoaded
            self.elapsedTimeMillis = elapsedTimeMillis
            self.fullLoadProgressPercent = fullLoadProgressPercent
            self.tablesQueued = tablesQueued
            self.tablesErrored = tablesErrored
            self.tablesLoading = tablesLoading
        }

    }

    public struct ModifyReplicationTaskResponse: Serializable, Initializable {
        /// The replication task that was modified.
        var replicationTask: ReplicationTask? = nil

        public init() {}

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

    }

    public struct DeleteEndpointResponse: Serializable, Initializable {
        /// The endpoint that was deleted.
        var endpoint: Endpoint? = nil

        public init() {}

        public init(endpoint: Endpoint? = nil) {
            self.endpoint = endpoint
        }

    }

    public struct StopReplicationTaskResponse: Serializable, Initializable {
        /// The replication task stopped.
        var replicationTask: ReplicationTask? = nil

        public init() {}

        public init(replicationTask: ReplicationTask? = nil) {
            self.replicationTask = replicationTask
        }

    }

    public struct ReplicationTask: Serializable, Initializable {
        /// The statistics for the task, including elapsed time, tables loaded, and table errors.
        var replicationTaskStats: ReplicationTaskStats? = nil
        /// The last error (failure) message generated for the replication instance.
        var lastFailureMessage: String? = nil
        /// The date the replication task is scheduled to start.
        var replicationTaskStartDate: Date? = nil
        /// The date the replication task was created.
        var replicationTaskCreationDate: Date? = nil
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        var sourceEndpointArn: String? = nil
        /// Table mappings specified in the task.
        var tableMappings: String? = nil
        /// The Amazon Resource Name (ARN) of the replication task.
        var replicationTaskArn: String? = nil
        /// The status of the replication task.
        var status: String? = nil
        /// The reason the replication task was stopped.
        var stopReason: String? = nil
        /// The Amazon Resource Name (ARN) of the replication instance.
        var replicationInstanceArn: String? = nil
        /// The replication task identifier. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        var replicationTaskIdentifier: String? = nil
        /// The type of migration.
        var migrationType: String? = nil
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        var targetEndpointArn: String? = nil
        /// The settings for the replication task.
        var replicationTaskSettings: String? = nil

        public init() {}

        public init(replicationTaskStats: ReplicationTaskStats? = nil, lastFailureMessage: String? = nil, replicationTaskStartDate: Date? = nil, replicationTaskCreationDate: Date? = nil, sourceEndpointArn: String? = nil, tableMappings: String? = nil, replicationTaskArn: String? = nil, status: String? = nil, stopReason: String? = nil, replicationInstanceArn: String? = nil, replicationTaskIdentifier: String? = nil, migrationType: String? = nil, targetEndpointArn: String? = nil, replicationTaskSettings: String? = nil) {
            self.replicationTaskStats = replicationTaskStats
            self.lastFailureMessage = lastFailureMessage
            self.replicationTaskStartDate = replicationTaskStartDate
            self.replicationTaskCreationDate = replicationTaskCreationDate
            self.sourceEndpointArn = sourceEndpointArn
            self.tableMappings = tableMappings
            self.replicationTaskArn = replicationTaskArn
            self.status = status
            self.stopReason = stopReason
            self.replicationInstanceArn = replicationInstanceArn
            self.replicationTaskIdentifier = replicationTaskIdentifier
            self.migrationType = migrationType
            self.targetEndpointArn = targetEndpointArn
            self.replicationTaskSettings = replicationTaskSettings
        }

    }

    public struct RefreshSchemasResponse: Serializable, Initializable {
        /// The status of the refreshed schema.
        var refreshSchemasStatus: RefreshSchemasStatus? = nil

        public init() {}

        public init(refreshSchemasStatus: RefreshSchemasStatus? = nil) {
            self.refreshSchemasStatus = refreshSchemasStatus
        }

    }

    public struct DeleteCertificateMessage: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the deleted certificate.
        var certificateArn: String = ""

        public init() {}

        public init(certificateArn: String) {
            self.certificateArn = certificateArn
        }

    }

    public struct DescribeRefreshSchemasStatusResponse: Serializable, Initializable {
        /// The status of the schema.
        var refreshSchemasStatus: RefreshSchemasStatus? = nil

        public init() {}

        public init(refreshSchemasStatus: RefreshSchemasStatus? = nil) {
            self.refreshSchemasStatus = refreshSchemasStatus
        }

    }

    public struct DescribeSchemasMessage: Serializable, Initializable {
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        var endpointArn: String = ""
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        var maxRecords: Int32? = nil

        public init() {}

        public init(marker: String? = nil, endpointArn: String, maxRecords: Int32? = nil) {
            self.marker = marker
            self.endpointArn = endpointArn
            self.maxRecords = maxRecords
        }

    }

    public struct StopReplicationTaskMessage: Serializable, Initializable {
        /// The Amazon Resource Number(ARN) of the replication task to be stopped.
        var replicationTaskArn: String = ""

        public init() {}

        public init(replicationTaskArn: String) {
            self.replicationTaskArn = replicationTaskArn
        }

    }

    public struct DescribeReplicationTasksResponse: Serializable, Initializable {
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil
        /// A description of the replication tasks.
        var replicationTasks: [ReplicationTask]? = nil

        public init() {}

        public init(marker: String? = nil, replicationTasks: [ReplicationTask]? = nil) {
            self.marker = marker
            self.replicationTasks = replicationTasks
        }

    }

    public struct AddTagsToResourceMessage: Serializable, Initializable {
        /// The Amazon Resource Name (ARN) of the AWS DMS resource the tag is to be added to. AWS DMS resources include a replication instance, endpoint, and a replication task.
        var resourceArn: String = ""
        /// The tag to be assigned to the DMS resource.
        var tags: [Tag] = []

        public init() {}

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

    }

    public struct DescribeConnectionsMessage: Serializable, Initializable {
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil
        /// The filters applied to the connection. Valid filter names: endpoint-arn | replication-instance-arn
        var filters: [Filter]? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, marker: String? = nil, filters: [Filter]? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
            self.filters = filters
        }

    }

    public struct DeleteReplicationSubnetGroupResponse: Serializable, Initializable {

        public init() {}

    }

    public struct DeleteReplicationSubnetGroupMessage: Serializable, Initializable {
        /// The subnet group name of the replication instance.
        var replicationSubnetGroupIdentifier: String = ""

        public init() {}

        public init(replicationSubnetGroupIdentifier: String) {
            self.replicationSubnetGroupIdentifier = replicationSubnetGroupIdentifier
        }

    }

    public struct ReplicationPendingModifiedValues: Serializable, Initializable {
        ///  Specifies if the replication instance is a Multi-AZ deployment. You cannot set the AvailabilityZone parameter if the Multi-AZ parameter is set to true. 
        var multiAZ: Bool? = nil
        /// The engine version number of the replication instance.
        var engineVersion: String? = nil
        /// The compute and memory capacity of the replication instance.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        var replicationInstanceClass: String? = nil
        /// The amount of storage (in gigabytes) that is allocated for the replication instance.
        var allocatedStorage: Int32? = nil

        public init() {}

        public init(multiAZ: Bool? = nil, engineVersion: String? = nil, replicationInstanceClass: String? = nil, allocatedStorage: Int32? = nil) {
            self.multiAZ = multiAZ
            self.engineVersion = engineVersion
            self.replicationInstanceClass = replicationInstanceClass
            self.allocatedStorage = allocatedStorage
        }

    }

    public struct ReplicationInstance: Serializable, Initializable {
        /// The time the replication instance was created.
        var instanceCreateTime: Date? = nil
        /// The pending modification values.
        var pendingModifiedValues: ReplicationPendingModifiedValues? = nil
        /// The status of the replication instance.
        var replicationInstanceStatus: String? = nil
        /// The VPC security group for the instance.
        var vpcSecurityGroups: [VpcSecurityGroupMembership]? = nil
        ///  Specifies if the replication instance is a Multi-AZ deployment. You cannot set the AvailabilityZone parameter if the Multi-AZ parameter is set to true. 
        var multiAZ: Bool? = nil
        /// The public IP address of the replication instance.
        var replicationInstancePublicIpAddresses: [String]? = nil
        /// The amount of storage (in gigabytes) that is allocated for the replication instance.
        var allocatedStorage: Int32? = nil
        /// The subnet group for the replication instance.
        var replicationSubnetGroup: ReplicationSubnetGroup? = nil
        /// The private IP address of the replication instance.
        var replicationInstancePrivateIpAddress: String? = nil
        /// The Availability Zone for the instance.
        var availabilityZone: String? = nil
        ///  Specifies the accessibility options for the replication instance. A value of true represents an instance with a public IP address. A value of false represents an instance with a private IP address. The default value is true. 
        var publiclyAccessible: Bool? = nil
        /// Boolean value indicating if minor version upgrades will be automatically applied to the instance.
        var autoMinorVersionUpgrade: Bool? = nil
        /// The replication instance identifier. This parameter is stored as a lowercase string. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.   Example: myrepinstance 
        var replicationInstanceIdentifier: String? = nil
        /// The private IP address of the replication instance.
        var replicationInstancePrivateIpAddresses: [String]? = nil
        /// The engine version number of the replication instance.
        var engineVersion: String? = nil
        /// The compute and memory capacity of the replication instance.  Valid Values: dms.t2.micro | dms.t2.small | dms.t2.medium | dms.t2.large | dms.c4.large | dms.c4.xlarge | dms.c4.2xlarge | dms.c4.4xlarge  
        var replicationInstanceClass: String? = nil
        /// The maintenance window times for the replication instance.
        var preferredMaintenanceWindow: String? = nil
        /// The Amazon Resource Name (ARN) of the replication instance.
        var replicationInstanceArn: String? = nil
        /// The public IP address of the replication instance.
        var replicationInstancePublicIpAddress: String? = nil
        /// The availability zone of the standby replication instance in a Multi-AZ deployment.
        var secondaryAvailabilityZone: String? = nil
        /// The KMS key identifier that is used to encrypt the content on the replication instance. If you do not specify a value for the KmsKeyId parameter, then AWS DMS will use your default encryption key. AWS KMS creates the default encryption key for your AWS account. Your AWS account has a different default encryption key for each AWS region.
        var kmsKeyId: String? = nil

        public init() {}

        public init(instanceCreateTime: Date? = nil, pendingModifiedValues: ReplicationPendingModifiedValues? = nil, replicationInstanceStatus: String? = nil, vpcSecurityGroups: [VpcSecurityGroupMembership]? = nil, multiAZ: Bool? = nil, replicationInstancePublicIpAddresses: [String]? = nil, allocatedStorage: Int32? = nil, replicationSubnetGroup: ReplicationSubnetGroup? = nil, replicationInstancePrivateIpAddress: String? = nil, availabilityZone: String? = nil, publiclyAccessible: Bool? = nil, autoMinorVersionUpgrade: Bool? = nil, replicationInstanceIdentifier: String? = nil, replicationInstancePrivateIpAddresses: [String]? = nil, engineVersion: String? = nil, replicationInstanceClass: String? = nil, preferredMaintenanceWindow: String? = nil, replicationInstanceArn: String? = nil, replicationInstancePublicIpAddress: String? = nil, secondaryAvailabilityZone: String? = nil, kmsKeyId: String? = nil) {
            self.instanceCreateTime = instanceCreateTime
            self.pendingModifiedValues = pendingModifiedValues
            self.replicationInstanceStatus = replicationInstanceStatus
            self.vpcSecurityGroups = vpcSecurityGroups
            self.multiAZ = multiAZ
            self.replicationInstancePublicIpAddresses = replicationInstancePublicIpAddresses
            self.allocatedStorage = allocatedStorage
            self.replicationSubnetGroup = replicationSubnetGroup
            self.replicationInstancePrivateIpAddress = replicationInstancePrivateIpAddress
            self.availabilityZone = availabilityZone
            self.publiclyAccessible = publiclyAccessible
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.replicationInstanceIdentifier = replicationInstanceIdentifier
            self.replicationInstancePrivateIpAddresses = replicationInstancePrivateIpAddresses
            self.engineVersion = engineVersion
            self.replicationInstanceClass = replicationInstanceClass
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.replicationInstanceArn = replicationInstanceArn
            self.replicationInstancePublicIpAddress = replicationInstancePublicIpAddress
            self.secondaryAvailabilityZone = secondaryAvailabilityZone
            self.kmsKeyId = kmsKeyId
        }

    }

    public struct ImportCertificateResponse: Serializable, Initializable {
        /// The certificate to be uploaded.
        var certificate: Certificate? = nil

        public init() {}

        public init(certificate: Certificate? = nil) {
            self.certificate = certificate
        }

    }

    public struct DescribeEndpointsResponse: Serializable, Initializable {
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil
        /// Endpoint description.
        var endpoints: [Endpoint]? = nil

        public init() {}

        public init(marker: String? = nil, endpoints: [Endpoint]? = nil) {
            self.marker = marker
            self.endpoints = endpoints
        }

    }

    public struct ModifyEndpointMessage: Serializable, Initializable {
        /// The type of endpoint.
        var endpointType: String? = nil
        /// The name of the server where the endpoint database resides.
        var serverName: String? = nil
        /// The database endpoint identifier. Identifiers must begin with a letter; must contain only ASCII letters, digits, and hyphens; and must not end with a hyphen or contain two consecutive hyphens.
        var endpointIdentifier: String? = nil
        /// The user name to be used to login to the endpoint database.
        var username: String? = nil
        /// The name of the endpoint database.
        var databaseName: String? = nil
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        var endpointArn: String = ""
        /// The SSL mode to be used. SSL mode can be one of four values: none, require, verify-ca, verify-full.  The default value is none.
        var sslMode: String? = nil
        /// The Amazon Resource Name (ARN) of the certificate used for SSL connection.
        var certificateArn: String? = nil
        /// The type of engine for the endpoint. Valid values include MYSQL, ORACLE, POSTGRES, MARIADB, AURORA, REDSHIFT, SYBASE, and SQLSERVER.
        var engineName: String? = nil
        /// The password to be used to login to the endpoint database.
        var password: String? = nil
        /// The port used by the endpoint database.
        var port: Int32? = nil
        /// Additional attributes associated with the connection.
        var extraConnectionAttributes: String? = nil

        public init() {}

        public init(endpointType: String? = nil, serverName: String? = nil, endpointIdentifier: String? = nil, username: String? = nil, databaseName: String? = nil, endpointArn: String, sslMode: String? = nil, certificateArn: String? = nil, engineName: String? = nil, password: String? = nil, port: Int32? = nil, extraConnectionAttributes: String? = nil) {
            self.endpointType = endpointType
            self.serverName = serverName
            self.endpointIdentifier = endpointIdentifier
            self.username = username
            self.databaseName = databaseName
            self.endpointArn = endpointArn
            self.sslMode = sslMode
            self.certificateArn = certificateArn
            self.engineName = engineName
            self.password = password
            self.port = port
            self.extraConnectionAttributes = extraConnectionAttributes
        }

    }

    public struct DescribeOrderableReplicationInstancesMessage: Serializable, Initializable {
        ///  The maximum number of records to include in the response. If more records exist than the specified MaxRecords value, a pagination token called a marker is included in the response so that the remaining results can be retrieved.  Default: 100 Constraints: Minimum 20, maximum 100.
        var maxRecords: Int32? = nil
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil

        public init() {}

        public init(maxRecords: Int32? = nil, marker: String? = nil) {
            self.maxRecords = maxRecords
            self.marker = marker
        }

    }

    public struct VpcSecurityGroupMembership: Serializable, Initializable {
        /// The status of the VPC security group.
        var status: String? = nil
        /// The VPC security group Id.
        var vpcSecurityGroupId: String? = nil

        public init() {}

        public init(status: String? = nil, vpcSecurityGroupId: String? = nil) {
            self.status = status
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }

    }

    public struct CreateReplicationTaskMessage: Serializable, Initializable {
        /// The path of the JSON file that contains the table mappings. Preceed the path with "file://". For example, --table-mappings file://mappingfile.json
        var tableMappings: String = ""
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        var sourceEndpointArn: String = ""
        /// Tags to be added to the replication instance.
        var tags: [Tag]? = nil
        /// The Amazon Resource Name (ARN) of the replication instance.
        var replicationInstanceArn: String = ""
        /// The replication task identifier. Constraints:   Must contain from 1 to 63 alphanumeric characters or hyphens.   First character must be a letter.   Cannot end with a hyphen or contain two consecutive hyphens.  
        var replicationTaskIdentifier: String = ""
        /// The migration type.
        var migrationType: String = ""
        /// The Amazon Resource Name (ARN) string that uniquely identifies the endpoint.
        var targetEndpointArn: String = ""
        /// The start time for the Change Data Capture (CDC) operation.
        var cdcStartTime: Date? = nil
        /// Settings for the task, such as target metadata settings. For a complete list of task settings, see Task Settings for AWS Database Migration Service Tasks.
        var replicationTaskSettings: String? = nil

        public init() {}

        public init(tableMappings: String, sourceEndpointArn: String, tags: [Tag]? = nil, replicationInstanceArn: String, replicationTaskIdentifier: String, migrationType: String, targetEndpointArn: String, cdcStartTime: Date? = nil, replicationTaskSettings: String? = nil) {
            self.tableMappings = tableMappings
            self.sourceEndpointArn = sourceEndpointArn
            self.tags = tags
            self.replicationInstanceArn = replicationInstanceArn
            self.replicationTaskIdentifier = replicationTaskIdentifier
            self.migrationType = migrationType
            self.targetEndpointArn = targetEndpointArn
            self.cdcStartTime = cdcStartTime
            self.replicationTaskSettings = replicationTaskSettings
        }

    }

    public struct Filter: Serializable, Initializable {
        /// The name of the filter.
        var name: String = ""
        /// The filter value.
        var values: [String] = []

        public init() {}

        public init(name: String, values: [String]) {
            self.name = name
            self.values = values
        }

    }

    public struct DescribeReplicationInstancesResponse: Serializable, Initializable {
        ///  An optional pagination token provided by a previous request. If this parameter is specified, the response includes only records beyond the marker, up to the value specified by MaxRecords. 
        var marker: String? = nil
        /// The replication instances described.
        var replicationInstances: [ReplicationInstance]? = nil

        public init() {}

        public init(marker: String? = nil, replicationInstances: [ReplicationInstance]? = nil) {
            self.marker = marker
            self.replicationInstances = replicationInstances
        }

    }

}