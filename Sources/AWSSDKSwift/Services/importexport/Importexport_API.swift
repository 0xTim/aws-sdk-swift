// THIS FILE IS AUTOMATICALLY GENERATED. DO NOT EDIT.
/**
The MIT License (MIT)

Copyright (c) 2017 Yuki Takei(noppoMan)

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/

import Foundation
import Core

/**
AWS Import/Export Service AWS Import/Export accelerates transferring large amounts of data between the AWS cloud and portable storage devices that you mail to us. AWS Import/Export transfers data directly onto and off of your storage devices using Amazon's high-speed internal network and bypassing the Internet. For large data sets, AWS Import/Export is often faster than Internet transfer and more cost effective than upgrading your connectivity.
*/
public struct Importexport {

    let request: AWSRequest

    public init(accessKeyId: String? = nil, secretAccessKey: String? = nil, region: Core.Region? = nil, endpoint: String? = nil) {
        self.request = AWSRequest(
            accessKeyId: accessKeyId,
            secretAccessKey: secretAccessKey,
            region: region,
            service: "importexport",
            endpoint: endpoint
        )
    }

    ///  This operation initiates the process of scheduling an upload or download of your data. You include in the request a manifest that describes the data transfer specifics. The response to the request includes a job ID, which you can use in other operations, a signature that you use to identify your storage device, and the address where you should ship your storage device.
    public func createJob(_ input: CreateJobInput) throws -> CreateJobOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "CreateJob", path: "/?Operation=CreateJob", httpMethod: "POST", httpHeaders: [:], input: input)
        return try ImportexportResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  This operation returns the jobs associated with the requester. AWS Import/Export lists the jobs in reverse chronological order based on the date of creation. For example if Job Test1 was created 2009Dec30 and Test2 was created 2010Feb05, the ListJobs operation would return Test2 followed by Test1.
    public func listJobs(_ input: ListJobsInput) throws -> ListJobsOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "ListJobs", path: "/?Operation=ListJobs", httpMethod: "POST", httpHeaders: [:], input: input)
        return try ImportexportResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  This operation returns information about a job, including where the job is in the processing pipeline, the status of the results, and the signature value associated with the job. You can only return information about jobs you own.
    public func getStatus(_ input: GetStatusInput) throws -> GetStatusOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetStatus", path: "/?Operation=GetStatus", httpMethod: "POST", httpHeaders: [:], input: input)
        return try ImportexportResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  This operation generates a pre-paid UPS shipping label that you will use to ship your device to AWS for processing.
    public func getShippingLabel(_ input: GetShippingLabelInput) throws -> GetShippingLabelOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "GetShippingLabel", path: "/?Operation=GetShippingLabel", httpMethod: "POST", httpHeaders: [:], input: input)
        return try ImportexportResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  You use this operation to change the parameters specified in the original manifest file by supplying a new manifest file. The manifest file attached to this request replaces the original manifest file. You can only use the operation after a CreateJob request but before the data transfer starts and you can only use it on jobs you own.
    public func updateJob(_ input: UpdateJobInput) throws -> UpdateJobOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "UpdateJob", path: "/?Operation=UpdateJob", httpMethod: "POST", httpHeaders: [:], input: input)
        return try ImportexportResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }

    ///  This operation cancels a specified job. Only the job owner can cancel it. The operation fails if the job has already started or is complete.
    public func cancelJob(_ input: CancelJobInput) throws -> CancelJobOutput {
        let (bodyData, urlResponse) = try request.invoke(operation: "CancelJob", path: "/?Operation=CancelJob", httpMethod: "POST", httpHeaders: [:], input: input)
        return try ImportexportResponseBuilder(bodyData: bodyData, urlResponse: urlResponse).build()
    }


}