// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension DirectConnect {

    public struct DisassociateConnectionFromLagRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lagId", required: true, type: .string), 
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        /// The ID of the LAG. For example, dxlag-abc123.
        public let lagId: String
        /// The ID of the connection. For example, dxcon-abc123.
        public let connectionId: String

        public init(lagId: String, connectionId: String) {
            self.lagId = lagId
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case lagId = "lagId"
            case connectionId = "connectionId"
        }
    }

    public struct DescribeInterconnectLoaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loaContentType", required: false, type: .enum), 
            AWSShapeMember(label: "providerName", required: false, type: .string), 
            AWSShapeMember(label: "interconnectId", required: true, type: .string)
        ]
        /// The standard media type for the LOA-CFA document. The only supported value is application/pdf.
        public let loaContentType: LoaContentType?
        /// The name of the service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.
        public let providerName: String?
        /// The ID of the interconnect.
        public let interconnectId: String

        public init(loaContentType: LoaContentType? = nil, providerName: String? = nil, interconnectId: String) {
            self.loaContentType = loaContentType
            self.providerName = providerName
            self.interconnectId = interconnectId
        }

        private enum CodingKeys: String, CodingKey {
            case loaContentType = "loaContentType"
            case providerName = "providerName"
            case interconnectId = "interconnectId"
        }
    }

    public struct DescribeConnectionsOnInterconnectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "interconnectId", required: true, type: .string)
        ]
        /// The ID of the interconnect.
        public let interconnectId: String

        public init(interconnectId: String) {
            self.interconnectId = interconnectId
        }

        private enum CodingKeys: String, CodingKey {
            case interconnectId = "interconnectId"
        }
    }

    public struct DirectConnectGatewayAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceRegion", required: false, type: .string), 
            AWSShapeMember(label: "directConnectGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "attachmentState", required: false, type: .enum), 
            AWSShapeMember(label: "virtualInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "virtualInterfaceOwnerAccount", required: false, type: .string), 
            AWSShapeMember(label: "stateChangeError", required: false, type: .string)
        ]
        /// The AWS Region where the virtual interface is located.
        public let virtualInterfaceRegion: String?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The state of the attachment. The following are the possible values:    attaching: The initial state after a virtual interface is created using the Direct Connect gateway.    attached: The Direct Connect gateway and virtual interface are attached and ready to pass traffic.    detaching: The initial state after calling DeleteVirtualInterface.    detached: The virtual interface is detached from the Direct Connect gateway. Traffic flow between the Direct Connect gateway and virtual interface is stopped.  
        public let attachmentState: DirectConnectGatewayAttachmentState?
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String?
        /// The ID of the AWS account that owns the virtual interface.
        public let virtualInterfaceOwnerAccount: String?
        /// The error message if the state of an object failed to advance.
        public let stateChangeError: String?

        public init(virtualInterfaceRegion: String? = nil, directConnectGatewayId: String? = nil, attachmentState: DirectConnectGatewayAttachmentState? = nil, virtualInterfaceId: String? = nil, virtualInterfaceOwnerAccount: String? = nil, stateChangeError: String? = nil) {
            self.virtualInterfaceRegion = virtualInterfaceRegion
            self.directConnectGatewayId = directConnectGatewayId
            self.attachmentState = attachmentState
            self.virtualInterfaceId = virtualInterfaceId
            self.virtualInterfaceOwnerAccount = virtualInterfaceOwnerAccount
            self.stateChangeError = stateChangeError
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceRegion = "virtualInterfaceRegion"
            case directConnectGatewayId = "directConnectGatewayId"
            case attachmentState = "attachmentState"
            case virtualInterfaceId = "virtualInterfaceId"
            case virtualInterfaceOwnerAccount = "virtualInterfaceOwnerAccount"
            case stateChangeError = "stateChangeError"
        }
    }

    public struct TagResourceResponse: AWSShape {

    }

    public struct UpdateVirtualInterfaceAttributesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceId", required: true, type: .string), 
            AWSShapeMember(label: "mtu", required: false, type: .integer)
        ]
        /// The ID of the virtual private interface.
        public let virtualInterfaceId: String
        /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
        public let mtu: Int32?

        public init(virtualInterfaceId: String, mtu: Int32? = nil) {
            self.virtualInterfaceId = virtualInterfaceId
            self.mtu = mtu
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId = "virtualInterfaceId"
            case mtu = "mtu"
        }
    }

    public struct Connections: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connections", required: false, type: .list)
        ]
        /// The connections.
        public let connections: [Connection]?

        public init(connections: [Connection]? = nil) {
            self.connections = connections
        }

        private enum CodingKeys: String, CodingKey {
            case connections = "connections"
        }
    }

    public struct CreateDirectConnectGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGatewayName", required: true, type: .string), 
            AWSShapeMember(label: "amazonSideAsn", required: false, type: .long)
        ]
        /// The name of the Direct Connect gateway.
        public let directConnectGatewayName: String
        /// The autonomous system number (ASN) for Border Gateway Protocol (BGP) to be configured on the Amazon side of the connection. The ASN must be in the private range of 64,512 to 65,534 or 4,200,000,000 to 4,294,967,294. The default is 64512.
        public let amazonSideAsn: Int64?

        public init(directConnectGatewayName: String, amazonSideAsn: Int64? = nil) {
            self.directConnectGatewayName = directConnectGatewayName
            self.amazonSideAsn = amazonSideAsn
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayName = "directConnectGatewayName"
            case amazonSideAsn = "amazonSideAsn"
        }
    }

    public struct NewBGPPeer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "customerAddress", required: false, type: .string), 
            AWSShapeMember(label: "amazonAddress", required: false, type: .string), 
            AWSShapeMember(label: "addressFamily", required: false, type: .enum), 
            AWSShapeMember(label: "asn", required: false, type: .integer), 
            AWSShapeMember(label: "authKey", required: false, type: .string)
        ]
        /// The IP address assigned to the customer interface.
        public let customerAddress: String?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: String?
        /// The address family for the BGP peer.
        public let addressFamily: AddressFamily?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        public let asn: Int32?
        /// The authentication key for BGP configuration.
        public let authKey: String?

        public init(customerAddress: String? = nil, amazonAddress: String? = nil, addressFamily: AddressFamily? = nil, asn: Int32? = nil, authKey: String? = nil) {
            self.customerAddress = customerAddress
            self.amazonAddress = amazonAddress
            self.addressFamily = addressFamily
            self.asn = asn
            self.authKey = authKey
        }

        private enum CodingKeys: String, CodingKey {
            case customerAddress = "customerAddress"
            case amazonAddress = "amazonAddress"
            case addressFamily = "addressFamily"
            case asn = "asn"
            case authKey = "authKey"
        }
    }

    public struct DeleteInterconnectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "interconnectState", required: false, type: .enum)
        ]
        /// The state of the interconnect. The following are the possible values:    requested: The initial state of an interconnect. The interconnect stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.    pending: The interconnect is approved, and is being initialized.    available: The network link is up, and the interconnect is ready for use.    down: The network link is down.    deleting: The interconnect is being deleted.    deleted: The interconnect is deleted.  
        public let interconnectState: InterconnectState?

        public init(interconnectState: InterconnectState? = nil) {
            self.interconnectState = interconnectState
        }

        private enum CodingKeys: String, CodingKey {
            case interconnectState = "interconnectState"
        }
    }

    public enum HasLogicalRedundancy: String, CustomStringConvertible, Codable {
        case unknown = "unknown"
        case yes = "yes"
        case no = "no"
        public var description: String { return self.rawValue }
    }

    public struct DescribeTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArns", required: true, type: .list)
        ]
        /// The Amazon Resource Names (ARNs) of the resources.
        public let resourceArns: [String]

        public init(resourceArns: [String]) {
            self.resourceArns = resourceArns
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArns = "resourceArns"
        }
    }

    public struct CreateConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "location", required: true, type: .string), 
            AWSShapeMember(label: "lagId", required: false, type: .string), 
            AWSShapeMember(label: "connectionName", required: true, type: .string), 
            AWSShapeMember(label: "bandwidth", required: true, type: .string)
        ]
        /// The location of the connection.
        public let location: String
        /// The ID of the LAG.
        public let lagId: String?
        /// The name of the connection.
        public let connectionName: String
        /// The bandwidth of the connection.
        public let bandwidth: String

        public init(location: String, lagId: String? = nil, connectionName: String, bandwidth: String) {
            self.location = location
            self.lagId = lagId
            self.connectionName = connectionName
            self.bandwidth = bandwidth
        }

        private enum CodingKeys: String, CodingKey {
            case location = "location"
            case lagId = "lagId"
            case connectionName = "connectionName"
            case bandwidth = "bandwidth"
        }
    }

    public struct CreateDirectConnectGatewayAssociationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "virtualGatewayId", required: true, type: .string)
        ]
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String
        /// The ID of the virtual private gateway.
        public let virtualGatewayId: String

        public init(directConnectGatewayId: String, virtualGatewayId: String) {
            self.directConnectGatewayId = directConnectGatewayId
            self.virtualGatewayId = virtualGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayId = "directConnectGatewayId"
            case virtualGatewayId = "virtualGatewayId"
        }
    }

    public struct AssociateHostedConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "parentConnectionId", required: true, type: .string), 
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        /// The ID of the interconnect or the LAG.
        public let parentConnectionId: String
        /// The ID of the hosted connection.
        public let connectionId: String

        public init(parentConnectionId: String, connectionId: String) {
            self.parentConnectionId = parentConnectionId
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case parentConnectionId = "parentConnectionId"
            case connectionId = "connectionId"
        }
    }

    public enum DirectConnectGatewayAttachmentState: String, CustomStringConvertible, Codable {
        case attaching = "attaching"
        case attached = "attached"
        case detaching = "detaching"
        case detached = "detached"
        public var description: String { return self.rawValue }
    }

    public struct AllocateHostedConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "vlan", required: true, type: .integer), 
            AWSShapeMember(label: "connectionName", required: true, type: .string), 
            AWSShapeMember(label: "connectionId", required: true, type: .string), 
            AWSShapeMember(label: "ownerAccount", required: true, type: .string), 
            AWSShapeMember(label: "bandwidth", required: true, type: .string)
        ]
        /// The dedicated VLAN provisioned to the hosted connection.
        public let vlan: Int32
        /// The name of the hosted connection.
        public let connectionName: String
        /// The ID of the interconnect or LAG.
        public let connectionId: String
        /// The ID of the AWS account ID of the customer for the connection.
        public let ownerAccount: String
        /// The bandwidth of the hosted connection, in Mbps. The possible values are 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, and 500Mbps.
        public let bandwidth: String

        public init(vlan: Int32, connectionName: String, connectionId: String, ownerAccount: String, bandwidth: String) {
            self.vlan = vlan
            self.connectionName = connectionName
            self.connectionId = connectionId
            self.ownerAccount = ownerAccount
            self.bandwidth = bandwidth
        }

        private enum CodingKeys: String, CodingKey {
            case vlan = "vlan"
            case connectionName = "connectionName"
            case connectionId = "connectionId"
            case ownerAccount = "ownerAccount"
            case bandwidth = "bandwidth"
        }
    }

    public struct CreateDirectConnectGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGateway", required: false, type: .structure)
        ]
        /// The Direct Connect gateway.
        public let directConnectGateway: DirectConnectGateway?

        public init(directConnectGateway: DirectConnectGateway? = nil) {
            self.directConnectGateway = directConnectGateway
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGateway = "directConnectGateway"
        }
    }

    public struct ConfirmPublicVirtualInterfaceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceState", required: false, type: .enum)
        ]
        /// The state of the virtual interface. The following are the possible values:    confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.    verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.    pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.    available: A virtual interface that is able to forward traffic.    down: A virtual interface that is BGP down.    deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.    deleted: A virtual interface that cannot forward traffic.    rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.  
        public let virtualInterfaceState: VirtualInterfaceState?

        public init(virtualInterfaceState: VirtualInterfaceState? = nil) {
            self.virtualInterfaceState = virtualInterfaceState
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceState = "virtualInterfaceState"
        }
    }

    public struct DescribeDirectConnectGatewaysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The maximum number of Direct Connect gateways to return per page.
        public let maxResults: Int32?
        /// The token provided in the previous call to retrieve the next page.
        public let nextToken: String?

        public init(directConnectGatewayId: String? = nil, maxResults: Int32? = nil, nextToken: String? = nil) {
            self.directConnectGatewayId = directConnectGatewayId
            self.maxResults = maxResults
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayId = "directConnectGatewayId"
            case maxResults = "maxResults"
            case nextToken = "nextToken"
        }
    }

    public struct Connection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionId", required: false, type: .string), 
            AWSShapeMember(label: "ownerAccount", required: false, type: .string), 
            AWSShapeMember(label: "vlan", required: false, type: .integer), 
            AWSShapeMember(label: "lagId", required: false, type: .string), 
            AWSShapeMember(label: "jumboFrameCapable", required: false, type: .boolean), 
            AWSShapeMember(label: "awsDeviceV2", required: false, type: .string), 
            AWSShapeMember(label: "bandwidth", required: false, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .string), 
            AWSShapeMember(label: "hasLogicalRedundancy", required: false, type: .enum), 
            AWSShapeMember(label: "partnerName", required: false, type: .string), 
            AWSShapeMember(label: "connectionState", required: false, type: .enum), 
            AWSShapeMember(label: "region", required: false, type: .string), 
            AWSShapeMember(label: "connectionName", required: false, type: .string), 
            AWSShapeMember(label: "awsDevice", required: false, type: .string), 
            AWSShapeMember(label: "loaIssueTime", required: false, type: .timestamp)
        ]
        /// The ID of the connection.
        public let connectionId: String?
        /// The ID of the AWS account that owns the connection.
        public let ownerAccount: String?
        /// The ID of the VLAN.
        public let vlan: Int32?
        /// The ID of the LAG.
        public let lagId: String?
        /// Indicates whether jumbo frames (9001 MTU) are supported.
        public let jumboFrameCapable: Bool?
        /// The Direct Connect endpoint on which the physical connection terminates.
        public let awsDeviceV2: String?
        /// The bandwidth of the connection.
        public let bandwidth: String?
        /// The location of the connection.
        public let location: String?
        /// Indicates whether the connection supports a secondary BGP peer in the same address family (IPv4/IPv6).
        public let hasLogicalRedundancy: HasLogicalRedundancy?
        /// The name of the AWS Direct Connect service provider associated with the connection.
        public let partnerName: String?
        /// The state of the connection. The following are the possible values:    ordering: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.    requested: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.    pending: The connection has been approved and is being initialized.    available: The network link is up and the connection is ready for use.    down: The network link is down.    deleting: The connection is being deleted.    deleted: The connection has been deleted.    rejected: A hosted connection in the ordering state enters the rejected state if it is deleted by the customer.  
        public let connectionState: ConnectionState?
        /// The AWS Region where the connection is located.
        public let region: String?
        /// The name of the connection.
        public let connectionName: String?
        /// The Direct Connect endpoint on which the physical connection terminates.
        public let awsDevice: String?
        /// The time of the most recent call to DescribeLoa for this connection.
        public let loaIssueTime: TimeStamp?

        public init(connectionId: String? = nil, ownerAccount: String? = nil, vlan: Int32? = nil, lagId: String? = nil, jumboFrameCapable: Bool? = nil, awsDeviceV2: String? = nil, bandwidth: String? = nil, location: String? = nil, hasLogicalRedundancy: HasLogicalRedundancy? = nil, partnerName: String? = nil, connectionState: ConnectionState? = nil, region: String? = nil, connectionName: String? = nil, awsDevice: String? = nil, loaIssueTime: TimeStamp? = nil) {
            self.connectionId = connectionId
            self.ownerAccount = ownerAccount
            self.vlan = vlan
            self.lagId = lagId
            self.jumboFrameCapable = jumboFrameCapable
            self.awsDeviceV2 = awsDeviceV2
            self.bandwidth = bandwidth
            self.location = location
            self.hasLogicalRedundancy = hasLogicalRedundancy
            self.partnerName = partnerName
            self.connectionState = connectionState
            self.region = region
            self.connectionName = connectionName
            self.awsDevice = awsDevice
            self.loaIssueTime = loaIssueTime
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
            case ownerAccount = "ownerAccount"
            case vlan = "vlan"
            case lagId = "lagId"
            case jumboFrameCapable = "jumboFrameCapable"
            case awsDeviceV2 = "awsDeviceV2"
            case bandwidth = "bandwidth"
            case location = "location"
            case hasLogicalRedundancy = "hasLogicalRedundancy"
            case partnerName = "partnerName"
            case connectionState = "connectionState"
            case region = "region"
            case connectionName = "connectionName"
            case awsDevice = "awsDevice"
            case loaIssueTime = "loaIssueTime"
        }
    }

    public struct RouteFilterPrefix: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cidr", required: false, type: .string)
        ]
        /// The CIDR block for the advertised route. Separate multiple routes using commas. An IPv6 CIDR must use /64 or shorter.
        public let cidr: String?

        public init(cidr: String? = nil) {
            self.cidr = cidr
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "cidr"
        }
    }

    public struct ConfirmPrivateVirtualInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceId", required: true, type: .string), 
            AWSShapeMember(label: "directConnectGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "virtualGatewayId", required: false, type: .string)
        ]
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The ID of the virtual private gateway.
        public let virtualGatewayId: String?

        public init(virtualInterfaceId: String, directConnectGatewayId: String? = nil, virtualGatewayId: String? = nil) {
            self.virtualInterfaceId = virtualInterfaceId
            self.directConnectGatewayId = directConnectGatewayId
            self.virtualGatewayId = virtualGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId = "virtualInterfaceId"
            case directConnectGatewayId = "directConnectGatewayId"
            case virtualGatewayId = "virtualGatewayId"
        }
    }

    public struct Lags: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lags", required: false, type: .list)
        ]
        /// The LAGs.
        public let lags: [Lag]?

        public init(lags: [Lag]? = nil) {
            self.lags = lags
        }

        private enum CodingKeys: String, CodingKey {
            case lags = "lags"
        }
    }

    public enum InterconnectState: String, CustomStringConvertible, Codable {
        case requested = "requested"
        case pending = "pending"
        case available = "available"
        case down = "down"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public struct DescribeTagsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceTags", required: false, type: .list)
        ]
        /// Information about the tags.
        public let resourceTags: [ResourceTag]?

        public init(resourceTags: [ResourceTag]? = nil) {
            self.resourceTags = resourceTags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceTags = "resourceTags"
        }
    }

    public struct UpdateLagRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lagName", required: false, type: .string), 
            AWSShapeMember(label: "lagId", required: true, type: .string), 
            AWSShapeMember(label: "minimumLinks", required: false, type: .integer)
        ]
        /// The name of the LAG.
        public let lagName: String?
        /// The ID of the LAG.
        public let lagId: String
        /// The minimum number of physical connections that must be operational for the LAG itself to be operational.
        public let minimumLinks: Int32?

        public init(lagName: String? = nil, lagId: String, minimumLinks: Int32? = nil) {
            self.lagName = lagName
            self.lagId = lagId
            self.minimumLinks = minimumLinks
        }

        private enum CodingKeys: String, CodingKey {
            case lagName = "lagName"
            case lagId = "lagId"
            case minimumLinks = "minimumLinks"
        }
    }

    public struct BGPPeer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "amazonAddress", required: false, type: .string), 
            AWSShapeMember(label: "awsDeviceV2", required: false, type: .string), 
            AWSShapeMember(label: "bgpPeerId", required: false, type: .string), 
            AWSShapeMember(label: "authKey", required: false, type: .string), 
            AWSShapeMember(label: "addressFamily", required: false, type: .enum), 
            AWSShapeMember(label: "bgpPeerState", required: false, type: .enum), 
            AWSShapeMember(label: "customerAddress", required: false, type: .string), 
            AWSShapeMember(label: "asn", required: false, type: .integer), 
            AWSShapeMember(label: "bgpStatus", required: false, type: .enum)
        ]
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: String?
        /// The Direct Connect endpoint on which the BGP peer terminates.
        public let awsDeviceV2: String?
        /// The ID of the BGP peer.
        public let bgpPeerId: String?
        /// The authentication key for BGP configuration.
        public let authKey: String?
        /// The address family for the BGP peer.
        public let addressFamily: AddressFamily?
        /// The state of the BGP peer. The following are the possible values:    verifying: The BGP peering addresses or ASN require validation before the BGP peer can be created. This state applies only to public virtual interfaces.    pending: The BGP peer is created, and remains in this state until it is ready to be established.    available: The BGP peer is ready to be established.    deleting: The BGP peer is being deleted.    deleted: The BGP peer is deleted and cannot be established.  
        public let bgpPeerState: BGPPeerState?
        /// The IP address assigned to the customer interface.
        public let customerAddress: String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        public let asn: Int32?
        /// The status of the BGP peer. The following are the possible values:    up: The BGP peer is established. This state does not indicate the state of the routing function. Ensure that you are receiving routes over the BGP session.    down: The BGP peer is down.    unknown: The BGP peer status is unknown.  
        public let bgpStatus: BGPStatus?

        public init(amazonAddress: String? = nil, awsDeviceV2: String? = nil, bgpPeerId: String? = nil, authKey: String? = nil, addressFamily: AddressFamily? = nil, bgpPeerState: BGPPeerState? = nil, customerAddress: String? = nil, asn: Int32? = nil, bgpStatus: BGPStatus? = nil) {
            self.amazonAddress = amazonAddress
            self.awsDeviceV2 = awsDeviceV2
            self.bgpPeerId = bgpPeerId
            self.authKey = authKey
            self.addressFamily = addressFamily
            self.bgpPeerState = bgpPeerState
            self.customerAddress = customerAddress
            self.asn = asn
            self.bgpStatus = bgpStatus
        }

        private enum CodingKeys: String, CodingKey {
            case amazonAddress = "amazonAddress"
            case awsDeviceV2 = "awsDeviceV2"
            case bgpPeerId = "bgpPeerId"
            case authKey = "authKey"
            case addressFamily = "addressFamily"
            case bgpPeerState = "bgpPeerState"
            case customerAddress = "customerAddress"
            case asn = "asn"
            case bgpStatus = "bgpStatus"
        }
    }

    public struct VirtualGateway: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualGatewayState", required: false, type: .string), 
            AWSShapeMember(label: "virtualGatewayId", required: false, type: .string)
        ]
        /// The state of the virtual private gateway. The following are the possible values:    pending: Initial state after creating the virtual private gateway.    available: Ready for use by a private virtual interface.    deleting: Initial state after deleting the virtual private gateway.    deleted: The virtual private gateway is deleted. The private virtual interface is unable to send traffic over this gateway.  
        public let virtualGatewayState: String?
        /// The ID of the virtual private gateway.
        public let virtualGatewayId: String?

        public init(virtualGatewayState: String? = nil, virtualGatewayId: String? = nil) {
            self.virtualGatewayState = virtualGatewayState
            self.virtualGatewayId = virtualGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case virtualGatewayState = "virtualGatewayState"
            case virtualGatewayId = "virtualGatewayId"
        }
    }

    public struct DescribeLagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lagId", required: false, type: .string)
        ]
        /// The ID of the LAG.
        public let lagId: String?

        public init(lagId: String? = nil) {
            self.lagId = lagId
        }

        private enum CodingKeys: String, CodingKey {
            case lagId = "lagId"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: String
        /// The tags to add.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct NewPublicVirtualInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "amazonAddress", required: false, type: .string), 
            AWSShapeMember(label: "asn", required: true, type: .integer), 
            AWSShapeMember(label: "authKey", required: false, type: .string), 
            AWSShapeMember(label: "vlan", required: true, type: .integer), 
            AWSShapeMember(label: "addressFamily", required: false, type: .enum), 
            AWSShapeMember(label: "customerAddress", required: false, type: .string), 
            AWSShapeMember(label: "virtualInterfaceName", required: true, type: .string), 
            AWSShapeMember(label: "routeFilterPrefixes", required: false, type: .list)
        ]
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        public let asn: Int32
        /// The authentication key for BGP configuration.
        public let authKey: String?
        /// The ID of the VLAN.
        public let vlan: Int32
        /// The address family for the BGP peer.
        public let addressFamily: AddressFamily?
        /// The IP address assigned to the customer interface.
        public let customerAddress: String?
        /// The name of the virtual interface assigned by the customer network.
        public let virtualInterfaceName: String
        /// The routes to be advertised to the AWS network in this Region. Applies to public virtual interfaces.
        public let routeFilterPrefixes: [RouteFilterPrefix]?

        public init(amazonAddress: String? = nil, asn: Int32, authKey: String? = nil, vlan: Int32, addressFamily: AddressFamily? = nil, customerAddress: String? = nil, virtualInterfaceName: String, routeFilterPrefixes: [RouteFilterPrefix]? = nil) {
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.authKey = authKey
            self.vlan = vlan
            self.addressFamily = addressFamily
            self.customerAddress = customerAddress
            self.virtualInterfaceName = virtualInterfaceName
            self.routeFilterPrefixes = routeFilterPrefixes
        }

        private enum CodingKeys: String, CodingKey {
            case amazonAddress = "amazonAddress"
            case asn = "asn"
            case authKey = "authKey"
            case vlan = "vlan"
            case addressFamily = "addressFamily"
            case customerAddress = "customerAddress"
            case virtualInterfaceName = "virtualInterfaceName"
            case routeFilterPrefixes = "routeFilterPrefixes"
        }
    }

    public struct DeleteInterconnectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "interconnectId", required: true, type: .string)
        ]
        /// The ID of the interconnect.
        public let interconnectId: String

        public init(interconnectId: String) {
            self.interconnectId = interconnectId
        }

        private enum CodingKeys: String, CodingKey {
            case interconnectId = "interconnectId"
        }
    }

    public enum AddressFamily: String, CustomStringConvertible, Codable {
        case ipv4 = "ipv4"
        case ipv6 = "ipv6"
        public var description: String { return self.rawValue }
    }

    public struct NewPublicVirtualInterfaceAllocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "amazonAddress", required: false, type: .string), 
            AWSShapeMember(label: "asn", required: true, type: .integer), 
            AWSShapeMember(label: "authKey", required: false, type: .string), 
            AWSShapeMember(label: "vlan", required: true, type: .integer), 
            AWSShapeMember(label: "addressFamily", required: false, type: .enum), 
            AWSShapeMember(label: "customerAddress", required: false, type: .string), 
            AWSShapeMember(label: "virtualInterfaceName", required: true, type: .string), 
            AWSShapeMember(label: "routeFilterPrefixes", required: false, type: .list)
        ]
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        public let asn: Int32
        /// The authentication key for BGP configuration.
        public let authKey: String?
        /// The ID of the VLAN.
        public let vlan: Int32
        /// The address family for the BGP peer.
        public let addressFamily: AddressFamily?
        /// The IP address assigned to the customer interface.
        public let customerAddress: String?
        /// The name of the virtual interface assigned by the customer network.
        public let virtualInterfaceName: String
        /// The routes to be advertised to the AWS network in this Region. Applies to public virtual interfaces.
        public let routeFilterPrefixes: [RouteFilterPrefix]?

        public init(amazonAddress: String? = nil, asn: Int32, authKey: String? = nil, vlan: Int32, addressFamily: AddressFamily? = nil, customerAddress: String? = nil, virtualInterfaceName: String, routeFilterPrefixes: [RouteFilterPrefix]? = nil) {
            self.amazonAddress = amazonAddress
            self.asn = asn
            self.authKey = authKey
            self.vlan = vlan
            self.addressFamily = addressFamily
            self.customerAddress = customerAddress
            self.virtualInterfaceName = virtualInterfaceName
            self.routeFilterPrefixes = routeFilterPrefixes
        }

        private enum CodingKeys: String, CodingKey {
            case amazonAddress = "amazonAddress"
            case asn = "asn"
            case authKey = "authKey"
            case vlan = "vlan"
            case addressFamily = "addressFamily"
            case customerAddress = "customerAddress"
            case virtualInterfaceName = "virtualInterfaceName"
            case routeFilterPrefixes = "routeFilterPrefixes"
        }
    }

    public enum DirectConnectGatewayState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public struct Location: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "locationCode", required: false, type: .string), 
            AWSShapeMember(label: "locationName", required: false, type: .string), 
            AWSShapeMember(label: "region", required: false, type: .string)
        ]
        /// The code for the location.
        public let locationCode: String?
        /// The name of the location. This includes the name of the colocation partner and the physical site of the building.
        public let locationName: String?
        /// The AWS Region for the location.
        public let region: String?

        public init(locationCode: String? = nil, locationName: String? = nil, region: String? = nil) {
            self.locationCode = locationCode
            self.locationName = locationName
            self.region = region
        }

        private enum CodingKeys: String, CodingKey {
            case locationCode = "locationCode"
            case locationName = "locationName"
            case region = "region"
        }
    }

    public struct CreateBGPPeerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "newBGPPeer", required: false, type: .structure)
        ]
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String?
        /// Information about the BGP peer.
        public let newBGPPeer: NewBGPPeer?

        public init(virtualInterfaceId: String? = nil, newBGPPeer: NewBGPPeer? = nil) {
            self.virtualInterfaceId = virtualInterfaceId
            self.newBGPPeer = newBGPPeer
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId = "virtualInterfaceId"
            case newBGPPeer = "newBGPPeer"
        }
    }

    public enum ConnectionState: String, CustomStringConvertible, Codable {
        case ordering = "ordering"
        case requested = "requested"
        case pending = "pending"
        case available = "available"
        case down = "down"
        case deleting = "deleting"
        case deleted = "deleted"
        case rejected = "rejected"
        public var description: String { return self.rawValue }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]
        /// The key.
        public let key: String
        /// The value.
        public let value: String?

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct DescribeConnectionLoaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loa", required: false, type: .structure)
        ]
        /// The Letter of Authorization - Connecting Facility Assignment (LOA-CFA).
        public let loa: Loa?

        public init(loa: Loa? = nil) {
            self.loa = loa
        }

        private enum CodingKeys: String, CodingKey {
            case loa = "loa"
        }
    }

    public struct Interconnect: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "awsDeviceV2", required: false, type: .string), 
            AWSShapeMember(label: "loaIssueTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "bandwidth", required: false, type: .string), 
            AWSShapeMember(label: "interconnectState", required: false, type: .enum), 
            AWSShapeMember(label: "lagId", required: false, type: .string), 
            AWSShapeMember(label: "interconnectId", required: false, type: .string), 
            AWSShapeMember(label: "awsDevice", required: false, type: .string), 
            AWSShapeMember(label: "interconnectName", required: false, type: .string), 
            AWSShapeMember(label: "hasLogicalRedundancy", required: false, type: .enum), 
            AWSShapeMember(label: "region", required: false, type: .string), 
            AWSShapeMember(label: "jumboFrameCapable", required: false, type: .boolean), 
            AWSShapeMember(label: "location", required: false, type: .string)
        ]
        /// The Direct Connect endpoint on which the physical connection terminates.
        public let awsDeviceV2: String?
        /// The time of the most recent call to DescribeLoa for this connection.
        public let loaIssueTime: TimeStamp?
        /// The bandwidth of the connection.
        public let bandwidth: String?
        /// The state of the interconnect. The following are the possible values:    requested: The initial state of an interconnect. The interconnect stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.    pending: The interconnect is approved, and is being initialized.    available: The network link is up, and the interconnect is ready for use.    down: The network link is down.    deleting: The interconnect is being deleted.    deleted: The interconnect is deleted.  
        public let interconnectState: InterconnectState?
        /// The ID of the LAG.
        public let lagId: String?
        /// The ID of the interconnect.
        public let interconnectId: String?
        /// The Direct Connect endpoint on which the physical connection terminates.
        public let awsDevice: String?
        /// The name of the interconnect.
        public let interconnectName: String?
        /// Indicates whether the interconnect supports a secondary BGP in the same address family (IPv4/IPv6).
        public let hasLogicalRedundancy: HasLogicalRedundancy?
        /// The AWS Region where the connection is located.
        public let region: String?
        /// Indicates whether jumbo frames (9001 MTU) are supported.
        public let jumboFrameCapable: Bool?
        /// The location of the connection.
        public let location: String?

        public init(awsDeviceV2: String? = nil, loaIssueTime: TimeStamp? = nil, bandwidth: String? = nil, interconnectState: InterconnectState? = nil, lagId: String? = nil, interconnectId: String? = nil, awsDevice: String? = nil, interconnectName: String? = nil, hasLogicalRedundancy: HasLogicalRedundancy? = nil, region: String? = nil, jumboFrameCapable: Bool? = nil, location: String? = nil) {
            self.awsDeviceV2 = awsDeviceV2
            self.loaIssueTime = loaIssueTime
            self.bandwidth = bandwidth
            self.interconnectState = interconnectState
            self.lagId = lagId
            self.interconnectId = interconnectId
            self.awsDevice = awsDevice
            self.interconnectName = interconnectName
            self.hasLogicalRedundancy = hasLogicalRedundancy
            self.region = region
            self.jumboFrameCapable = jumboFrameCapable
            self.location = location
        }

        private enum CodingKeys: String, CodingKey {
            case awsDeviceV2 = "awsDeviceV2"
            case loaIssueTime = "loaIssueTime"
            case bandwidth = "bandwidth"
            case interconnectState = "interconnectState"
            case lagId = "lagId"
            case interconnectId = "interconnectId"
            case awsDevice = "awsDevice"
            case interconnectName = "interconnectName"
            case hasLogicalRedundancy = "hasLogicalRedundancy"
            case region = "region"
            case jumboFrameCapable = "jumboFrameCapable"
            case location = "location"
        }
    }

    public struct Lag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "numberOfConnections", required: false, type: .integer), 
            AWSShapeMember(label: "ownerAccount", required: false, type: .string), 
            AWSShapeMember(label: "allowsHostedConnections", required: false, type: .boolean), 
            AWSShapeMember(label: "lagId", required: false, type: .string), 
            AWSShapeMember(label: "connections", required: false, type: .list), 
            AWSShapeMember(label: "lagState", required: false, type: .enum), 
            AWSShapeMember(label: "awsDeviceV2", required: false, type: .string), 
            AWSShapeMember(label: "jumboFrameCapable", required: false, type: .boolean), 
            AWSShapeMember(label: "minimumLinks", required: false, type: .integer), 
            AWSShapeMember(label: "location", required: false, type: .string), 
            AWSShapeMember(label: "lagName", required: false, type: .string), 
            AWSShapeMember(label: "connectionsBandwidth", required: false, type: .string), 
            AWSShapeMember(label: "hasLogicalRedundancy", required: false, type: .enum), 
            AWSShapeMember(label: "region", required: false, type: .string), 
            AWSShapeMember(label: "awsDevice", required: false, type: .string)
        ]
        /// The number of physical connections bundled by the LAG, up to a maximum of 10.
        public let numberOfConnections: Int32?
        /// The ID of the AWS account that owns the LAG.
        public let ownerAccount: String?
        /// Indicates whether the LAG can host other connections.
        public let allowsHostedConnections: Bool?
        /// The ID of the LAG.
        public let lagId: String?
        /// The connections bundled by the LAG.
        public let connections: [Connection]?
        /// The state of the LAG. The following are the possible values:    requested: The initial state of a LAG. The LAG stays in the requested state until the Letter of Authorization (LOA) is available.    pending: The LAG has been approved and is being initialized.    available: The network link is established and the LAG is ready for use.    down: The network link is down.    deleting: The LAG is being deleted.    deleted: The LAG is deleted.  
        public let lagState: LagState?
        /// The Direct Connect endpoint that hosts the LAG.
        public let awsDeviceV2: String?
        /// Indicates whether jumbo frames (9001 MTU) are supported.
        public let jumboFrameCapable: Bool?
        /// The minimum number of physical connections that must be operational for the LAG itself to be operational.
        public let minimumLinks: Int32?
        /// The location of the LAG.
        public let location: String?
        /// The name of the LAG.
        public let lagName: String?
        /// The individual bandwidth of the physical connections bundled by the LAG. The possible values are 1Gbps and 10Gbps.
        public let connectionsBandwidth: String?
        /// Indicates whether the LAG supports a secondary BGP peer in the same address family (IPv4/IPv6).
        public let hasLogicalRedundancy: HasLogicalRedundancy?
        /// The AWS Region where the connection is located.
        public let region: String?
        /// The Direct Connect endpoint that hosts the LAG.
        public let awsDevice: String?

        public init(numberOfConnections: Int32? = nil, ownerAccount: String? = nil, allowsHostedConnections: Bool? = nil, lagId: String? = nil, connections: [Connection]? = nil, lagState: LagState? = nil, awsDeviceV2: String? = nil, jumboFrameCapable: Bool? = nil, minimumLinks: Int32? = nil, location: String? = nil, lagName: String? = nil, connectionsBandwidth: String? = nil, hasLogicalRedundancy: HasLogicalRedundancy? = nil, region: String? = nil, awsDevice: String? = nil) {
            self.numberOfConnections = numberOfConnections
            self.ownerAccount = ownerAccount
            self.allowsHostedConnections = allowsHostedConnections
            self.lagId = lagId
            self.connections = connections
            self.lagState = lagState
            self.awsDeviceV2 = awsDeviceV2
            self.jumboFrameCapable = jumboFrameCapable
            self.minimumLinks = minimumLinks
            self.location = location
            self.lagName = lagName
            self.connectionsBandwidth = connectionsBandwidth
            self.hasLogicalRedundancy = hasLogicalRedundancy
            self.region = region
            self.awsDevice = awsDevice
        }

        private enum CodingKeys: String, CodingKey {
            case numberOfConnections = "numberOfConnections"
            case ownerAccount = "ownerAccount"
            case allowsHostedConnections = "allowsHostedConnections"
            case lagId = "lagId"
            case connections = "connections"
            case lagState = "lagState"
            case awsDeviceV2 = "awsDeviceV2"
            case jumboFrameCapable = "jumboFrameCapable"
            case minimumLinks = "minimumLinks"
            case location = "location"
            case lagName = "lagName"
            case connectionsBandwidth = "connectionsBandwidth"
            case hasLogicalRedundancy = "hasLogicalRedundancy"
            case region = "region"
            case awsDevice = "awsDevice"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "tagKeys", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: String
        /// The tag keys of the tags to remove.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tagKeys = "tagKeys"
        }
    }

    public struct DescribeHostedConnectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        /// The ID of the interconnect or LAG.
        public let connectionId: String

        public init(connectionId: String) {
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
        }
    }

    public struct ConfirmConnectionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionState", required: false, type: .enum)
        ]
        /// The state of the connection. The following are the possible values:    ordering: The initial state of a hosted connection provisioned on an interconnect. The connection stays in the ordering state until the owner of the hosted connection confirms or declines the connection order.    requested: The initial state of a standard connection. The connection stays in the requested state until the Letter of Authorization (LOA) is sent to the customer.    pending: The connection has been approved and is being initialized.    available: The network link is up and the connection is ready for use.    down: The network link is down.    deleting: The connection is being deleted.    deleted: The connection has been deleted.    rejected: A hosted connection in the ordering state enters the rejected state if it is deleted by the customer.  
        public let connectionState: ConnectionState?

        public init(connectionState: ConnectionState? = nil) {
            self.connectionState = connectionState
        }

        private enum CodingKeys: String, CodingKey {
            case connectionState = "connectionState"
        }
    }

    public struct CreateInterconnectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "location", required: true, type: .string), 
            AWSShapeMember(label: "interconnectName", required: true, type: .string), 
            AWSShapeMember(label: "lagId", required: false, type: .string), 
            AWSShapeMember(label: "bandwidth", required: true, type: .string)
        ]
        /// The location of the interconnect.
        public let location: String
        /// The name of the interconnect.
        public let interconnectName: String
        /// The ID of the LAG.
        public let lagId: String?
        /// The port bandwidth, in Gbps. The possible values are 1 and 10.
        public let bandwidth: String

        public init(location: String, interconnectName: String, lagId: String? = nil, bandwidth: String) {
            self.location = location
            self.interconnectName = interconnectName
            self.lagId = lagId
            self.bandwidth = bandwidth
        }

        private enum CodingKeys: String, CodingKey {
            case location = "location"
            case interconnectName = "interconnectName"
            case lagId = "lagId"
            case bandwidth = "bandwidth"
        }
    }

    public struct DescribeDirectConnectGatewayAssociationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "directConnectGatewayAssociations", required: false, type: .list)
        ]
        /// The token to retrieve the next page.
        public let nextToken: String?
        /// The associations.
        public let directConnectGatewayAssociations: [DirectConnectGatewayAssociation]?

        public init(nextToken: String? = nil, directConnectGatewayAssociations: [DirectConnectGatewayAssociation]? = nil) {
            self.nextToken = nextToken
            self.directConnectGatewayAssociations = directConnectGatewayAssociations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case directConnectGatewayAssociations = "directConnectGatewayAssociations"
        }
    }

    public struct DescribeDirectConnectGatewayAttachmentsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGatewayAttachments", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The attachments.
        public let directConnectGatewayAttachments: [DirectConnectGatewayAttachment]?
        /// The token to retrieve the next page.
        public let nextToken: String?

        public init(directConnectGatewayAttachments: [DirectConnectGatewayAttachment]? = nil, nextToken: String? = nil) {
            self.directConnectGatewayAttachments = directConnectGatewayAttachments
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayAttachments = "directConnectGatewayAttachments"
            case nextToken = "nextToken"
        }
    }

    public struct DeleteBGPPeerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "customerAddress", required: false, type: .string), 
            AWSShapeMember(label: "asn", required: false, type: .integer), 
            AWSShapeMember(label: "virtualInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "bgpPeerId", required: false, type: .string)
        ]
        /// The IP address assigned to the customer interface.
        public let customerAddress: String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        public let asn: Int32?
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String?
        /// The ID of the BGP peer.
        public let bgpPeerId: String?

        public init(customerAddress: String? = nil, asn: Int32? = nil, virtualInterfaceId: String? = nil, bgpPeerId: String? = nil) {
            self.customerAddress = customerAddress
            self.asn = asn
            self.virtualInterfaceId = virtualInterfaceId
            self.bgpPeerId = bgpPeerId
        }

        private enum CodingKeys: String, CodingKey {
            case customerAddress = "customerAddress"
            case asn = "asn"
            case virtualInterfaceId = "virtualInterfaceId"
            case bgpPeerId = "bgpPeerId"
        }
    }

    public struct AllocateConnectionOnInterconnectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "vlan", required: true, type: .integer), 
            AWSShapeMember(label: "ownerAccount", required: true, type: .string), 
            AWSShapeMember(label: "connectionName", required: true, type: .string), 
            AWSShapeMember(label: "interconnectId", required: true, type: .string), 
            AWSShapeMember(label: "bandwidth", required: true, type: .string)
        ]
        /// The dedicated VLAN provisioned to the connection.
        public let vlan: Int32
        /// The ID of the AWS account of the customer for whom the connection will be provisioned.
        public let ownerAccount: String
        /// The name of the provisioned connection.
        public let connectionName: String
        /// The ID of the interconnect on which the connection will be provisioned. For example, dxcon-456abc78.
        public let interconnectId: String
        /// The bandwidth of the connection, in Mbps. The possible values are 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, and 500Mbps.
        public let bandwidth: String

        public init(vlan: Int32, ownerAccount: String, connectionName: String, interconnectId: String, bandwidth: String) {
            self.vlan = vlan
            self.ownerAccount = ownerAccount
            self.connectionName = connectionName
            self.interconnectId = interconnectId
            self.bandwidth = bandwidth
        }

        private enum CodingKeys: String, CodingKey {
            case vlan = "vlan"
            case ownerAccount = "ownerAccount"
            case connectionName = "connectionName"
            case interconnectId = "interconnectId"
            case bandwidth = "bandwidth"
        }
    }

    public enum BGPStatus: String, CustomStringConvertible, Codable {
        case up = "up"
        case down = "down"
        public var description: String { return self.rawValue }
    }

    public struct DeleteBGPPeerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterface", required: false, type: .structure)
        ]
        /// The virtual interface.
        public let virtualInterface: VirtualInterface?

        public init(virtualInterface: VirtualInterface? = nil) {
            self.virtualInterface = virtualInterface
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterface = "virtualInterface"
        }
    }

    public struct DescribeVirtualInterfacesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "connectionId", required: false, type: .string)
        ]
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String?
        /// The ID of the connection.
        public let connectionId: String?

        public init(virtualInterfaceId: String? = nil, connectionId: String? = nil) {
            self.virtualInterfaceId = virtualInterfaceId
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId = "virtualInterfaceId"
            case connectionId = "connectionId"
        }
    }

    public struct ResourceTag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the resource.
        public let resourceArn: String?
        /// The tags.
        public let tags: [Tag]?

        public init(resourceArn: String? = nil, tags: [Tag]? = nil) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct DeleteVirtualInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceId", required: true, type: .string)
        ]
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String

        public init(virtualInterfaceId: String) {
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId = "virtualInterfaceId"
        }
    }

    public struct DescribeDirectConnectGatewayAssociationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "directConnectGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "virtualGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The maximum number of associations to return per page.
        public let maxResults: Int32?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The ID of the virtual private gateway.
        public let virtualGatewayId: String?
        /// The token provided in the previous call to retrieve the next page.
        public let nextToken: String?

        public init(maxResults: Int32? = nil, directConnectGatewayId: String? = nil, virtualGatewayId: String? = nil, nextToken: String? = nil) {
            self.maxResults = maxResults
            self.directConnectGatewayId = directConnectGatewayId
            self.virtualGatewayId = virtualGatewayId
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case directConnectGatewayId = "directConnectGatewayId"
            case virtualGatewayId = "virtualGatewayId"
            case nextToken = "nextToken"
        }
    }

    public struct Locations: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "locations", required: false, type: .list)
        ]
        /// The locations.
        public let locations: [Location]?

        public init(locations: [Location]? = nil) {
            self.locations = locations
        }

        private enum CodingKeys: String, CodingKey {
            case locations = "locations"
        }
    }

    public struct CreateLagRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "location", required: true, type: .string), 
            AWSShapeMember(label: "numberOfConnections", required: true, type: .integer), 
            AWSShapeMember(label: "connectionId", required: false, type: .string), 
            AWSShapeMember(label: "lagName", required: true, type: .string), 
            AWSShapeMember(label: "connectionsBandwidth", required: true, type: .string)
        ]
        /// The location for the LAG.
        public let location: String
        /// The number of physical connections initially provisioned and bundled by the LAG.
        public let numberOfConnections: Int32
        /// The ID of an existing connection to migrate to the LAG.
        public let connectionId: String?
        /// The name of the LAG.
        public let lagName: String
        /// The bandwidth of the individual physical connections bundled by the LAG. The possible values are 1Gbps and 10Gbps.
        public let connectionsBandwidth: String

        public init(location: String, numberOfConnections: Int32, connectionId: String? = nil, lagName: String, connectionsBandwidth: String) {
            self.location = location
            self.numberOfConnections = numberOfConnections
            self.connectionId = connectionId
            self.lagName = lagName
            self.connectionsBandwidth = connectionsBandwidth
        }

        private enum CodingKeys: String, CodingKey {
            case location = "location"
            case numberOfConnections = "numberOfConnections"
            case connectionId = "connectionId"
            case lagName = "lagName"
            case connectionsBandwidth = "connectionsBandwidth"
        }
    }

    public struct AssociateConnectionWithLagRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lagId", required: true, type: .string), 
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        /// The ID of the LAG with which to associate the connection. For example, dxlag-abc123.
        public let lagId: String
        /// The ID of the connection. For example, dxcon-abc123.
        public let connectionId: String

        public init(lagId: String, connectionId: String) {
            self.lagId = lagId
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case lagId = "lagId"
            case connectionId = "connectionId"
        }
    }

    public struct DeleteDirectConnectGatewayAssociationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "virtualGatewayId", required: true, type: .string)
        ]
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String
        /// The ID of the virtual private gateway.
        public let virtualGatewayId: String

        public init(directConnectGatewayId: String, virtualGatewayId: String) {
            self.directConnectGatewayId = directConnectGatewayId
            self.virtualGatewayId = virtualGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayId = "directConnectGatewayId"
            case virtualGatewayId = "virtualGatewayId"
        }
    }

    public struct AllocatePublicVirtualInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionId", required: true, type: .string), 
            AWSShapeMember(label: "ownerAccount", required: true, type: .string), 
            AWSShapeMember(label: "newPublicVirtualInterfaceAllocation", required: true, type: .structure)
        ]
        /// The ID of the connection on which the public virtual interface is provisioned.
        public let connectionId: String
        /// The ID of the AWS account that owns the public virtual interface.
        public let ownerAccount: String
        /// Information about the public virtual interface.
        public let newPublicVirtualInterfaceAllocation: NewPublicVirtualInterfaceAllocation

        public init(connectionId: String, ownerAccount: String, newPublicVirtualInterfaceAllocation: NewPublicVirtualInterfaceAllocation) {
            self.connectionId = connectionId
            self.ownerAccount = ownerAccount
            self.newPublicVirtualInterfaceAllocation = newPublicVirtualInterfaceAllocation
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
            case ownerAccount = "ownerAccount"
            case newPublicVirtualInterfaceAllocation = "newPublicVirtualInterfaceAllocation"
        }
    }

    public struct Interconnects: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "interconnects", required: false, type: .list)
        ]
        /// The interconnects.
        public let interconnects: [Interconnect]?

        public init(interconnects: [Interconnect]? = nil) {
            self.interconnects = interconnects
        }

        private enum CodingKeys: String, CodingKey {
            case interconnects = "interconnects"
        }
    }

    public struct CreatePublicVirtualInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "newPublicVirtualInterface", required: true, type: .structure), 
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        /// Information about the public virtual interface.
        public let newPublicVirtualInterface: NewPublicVirtualInterface
        /// The ID of the connection.
        public let connectionId: String

        public init(newPublicVirtualInterface: NewPublicVirtualInterface, connectionId: String) {
            self.newPublicVirtualInterface = newPublicVirtualInterface
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case newPublicVirtualInterface = "newPublicVirtualInterface"
            case connectionId = "connectionId"
        }
    }

    public struct DeleteLagRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lagId", required: true, type: .string)
        ]
        /// The ID of the LAG.
        public let lagId: String

        public init(lagId: String) {
            self.lagId = lagId
        }

        private enum CodingKeys: String, CodingKey {
            case lagId = "lagId"
        }
    }

    public struct DeleteDirectConnectGatewayAssociationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGatewayAssociation", required: false, type: .structure)
        ]
        /// The association to be deleted.
        public let directConnectGatewayAssociation: DirectConnectGatewayAssociation?

        public init(directConnectGatewayAssociation: DirectConnectGatewayAssociation? = nil) {
            self.directConnectGatewayAssociation = directConnectGatewayAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayAssociation = "directConnectGatewayAssociation"
        }
    }

    public struct DirectConnectGatewayAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "virtualGatewayOwnerAccount", required: false, type: .string), 
            AWSShapeMember(label: "virtualGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "virtualGatewayRegion", required: false, type: .string), 
            AWSShapeMember(label: "stateChangeError", required: false, type: .string), 
            AWSShapeMember(label: "associationState", required: false, type: .enum)
        ]
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The ID of the AWS account that owns the virtual private gateway.
        public let virtualGatewayOwnerAccount: String?
        /// The ID of the virtual private gateway. Applies only to private virtual interfaces.
        public let virtualGatewayId: String?
        /// The AWS Region where the virtual private gateway is located.
        public let virtualGatewayRegion: String?
        /// The error message if the state of an object failed to advance.
        public let stateChangeError: String?
        /// The state of the association. The following are the possible values:    associating: The initial state after calling CreateDirectConnectGatewayAssociation.    associated: The Direct Connect gateway and virtual private gateway are successfully associated and ready to pass traffic.    disassociating: The initial state after calling DeleteDirectConnectGatewayAssociation.    disassociated: The virtual private gateway is disassociated from the Direct Connect gateway. Traffic flow between the Direct Connect gateway and virtual private gateway is stopped.  
        public let associationState: DirectConnectGatewayAssociationState?

        public init(directConnectGatewayId: String? = nil, virtualGatewayOwnerAccount: String? = nil, virtualGatewayId: String? = nil, virtualGatewayRegion: String? = nil, stateChangeError: String? = nil, associationState: DirectConnectGatewayAssociationState? = nil) {
            self.directConnectGatewayId = directConnectGatewayId
            self.virtualGatewayOwnerAccount = virtualGatewayOwnerAccount
            self.virtualGatewayId = virtualGatewayId
            self.virtualGatewayRegion = virtualGatewayRegion
            self.stateChangeError = stateChangeError
            self.associationState = associationState
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayId = "directConnectGatewayId"
            case virtualGatewayOwnerAccount = "virtualGatewayOwnerAccount"
            case virtualGatewayId = "virtualGatewayId"
            case virtualGatewayRegion = "virtualGatewayRegion"
            case stateChangeError = "stateChangeError"
            case associationState = "associationState"
        }
    }

    public struct DescribeInterconnectLoaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loa", required: false, type: .structure)
        ]
        /// The Letter of Authorization - Connecting Facility Assignment (LOA-CFA).
        public let loa: Loa?

        public init(loa: Loa? = nil) {
            self.loa = loa
        }

        private enum CodingKeys: String, CodingKey {
            case loa = "loa"
        }
    }

    public struct UntagResourceResponse: AWSShape {

    }

    public struct CreateDirectConnectGatewayAssociationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGatewayAssociation", required: false, type: .structure)
        ]
        /// The association to be created.
        public let directConnectGatewayAssociation: DirectConnectGatewayAssociation?

        public init(directConnectGatewayAssociation: DirectConnectGatewayAssociation? = nil) {
            self.directConnectGatewayAssociation = directConnectGatewayAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayAssociation = "directConnectGatewayAssociation"
        }
    }

    public struct DeleteDirectConnectGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGateway", required: false, type: .structure)
        ]
        /// The Direct Connect gateway.
        public let directConnectGateway: DirectConnectGateway?

        public init(directConnectGateway: DirectConnectGateway? = nil) {
            self.directConnectGateway = directConnectGateway
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGateway = "directConnectGateway"
        }
    }

    public struct ConfirmConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        /// The ID of the hosted connection.
        public let connectionId: String

        public init(connectionId: String) {
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
        }
    }

    public struct NewPrivateVirtualInterfaceAllocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "asn", required: true, type: .integer), 
            AWSShapeMember(label: "authKey", required: false, type: .string), 
            AWSShapeMember(label: "vlan", required: true, type: .integer), 
            AWSShapeMember(label: "addressFamily", required: false, type: .enum), 
            AWSShapeMember(label: "mtu", required: false, type: .integer), 
            AWSShapeMember(label: "customerAddress", required: false, type: .string), 
            AWSShapeMember(label: "virtualInterfaceName", required: true, type: .string), 
            AWSShapeMember(label: "amazonAddress", required: false, type: .string)
        ]
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        public let asn: Int32
        /// The authentication key for BGP configuration.
        public let authKey: String?
        /// The ID of the VLAN.
        public let vlan: Int32
        /// The address family for the BGP peer.
        public let addressFamily: AddressFamily?
        /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
        public let mtu: Int32?
        /// The IP address assigned to the customer interface.
        public let customerAddress: String?
        /// The name of the virtual interface assigned by the customer network.
        public let virtualInterfaceName: String
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: String?

        public init(asn: Int32, authKey: String? = nil, vlan: Int32, addressFamily: AddressFamily? = nil, mtu: Int32? = nil, customerAddress: String? = nil, virtualInterfaceName: String, amazonAddress: String? = nil) {
            self.asn = asn
            self.authKey = authKey
            self.vlan = vlan
            self.addressFamily = addressFamily
            self.mtu = mtu
            self.customerAddress = customerAddress
            self.virtualInterfaceName = virtualInterfaceName
            self.amazonAddress = amazonAddress
        }

        private enum CodingKeys: String, CodingKey {
            case asn = "asn"
            case authKey = "authKey"
            case vlan = "vlan"
            case addressFamily = "addressFamily"
            case mtu = "mtu"
            case customerAddress = "customerAddress"
            case virtualInterfaceName = "virtualInterfaceName"
            case amazonAddress = "amazonAddress"
        }
    }

    public struct ConfirmPublicVirtualInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceId", required: true, type: .string)
        ]
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String

        public init(virtualInterfaceId: String) {
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId = "virtualInterfaceId"
        }
    }

    public struct NewPrivateVirtualInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "asn", required: true, type: .integer), 
            AWSShapeMember(label: "authKey", required: false, type: .string), 
            AWSShapeMember(label: "directConnectGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "vlan", required: true, type: .integer), 
            AWSShapeMember(label: "addressFamily", required: false, type: .enum), 
            AWSShapeMember(label: "mtu", required: false, type: .integer), 
            AWSShapeMember(label: "virtualGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "virtualInterfaceName", required: true, type: .string), 
            AWSShapeMember(label: "customerAddress", required: false, type: .string), 
            AWSShapeMember(label: "amazonAddress", required: false, type: .string)
        ]
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        public let asn: Int32
        /// The authentication key for BGP configuration.
        public let authKey: String?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The ID of the VLAN.
        public let vlan: Int32
        /// The address family for the BGP peer.
        public let addressFamily: AddressFamily?
        /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
        public let mtu: Int32?
        /// The ID of the virtual private gateway.
        public let virtualGatewayId: String?
        /// The name of the virtual interface assigned by the customer network.
        public let virtualInterfaceName: String
        /// The IP address assigned to the customer interface.
        public let customerAddress: String?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: String?

        public init(asn: Int32, authKey: String? = nil, directConnectGatewayId: String? = nil, vlan: Int32, addressFamily: AddressFamily? = nil, mtu: Int32? = nil, virtualGatewayId: String? = nil, virtualInterfaceName: String, customerAddress: String? = nil, amazonAddress: String? = nil) {
            self.asn = asn
            self.authKey = authKey
            self.directConnectGatewayId = directConnectGatewayId
            self.vlan = vlan
            self.addressFamily = addressFamily
            self.mtu = mtu
            self.virtualGatewayId = virtualGatewayId
            self.virtualInterfaceName = virtualInterfaceName
            self.customerAddress = customerAddress
            self.amazonAddress = amazonAddress
        }

        private enum CodingKeys: String, CodingKey {
            case asn = "asn"
            case authKey = "authKey"
            case directConnectGatewayId = "directConnectGatewayId"
            case vlan = "vlan"
            case addressFamily = "addressFamily"
            case mtu = "mtu"
            case virtualGatewayId = "virtualGatewayId"
            case virtualInterfaceName = "virtualInterfaceName"
            case customerAddress = "customerAddress"
            case amazonAddress = "amazonAddress"
        }
    }

    public struct AllocatePrivateVirtualInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionId", required: true, type: .string), 
            AWSShapeMember(label: "newPrivateVirtualInterfaceAllocation", required: true, type: .structure), 
            AWSShapeMember(label: "ownerAccount", required: true, type: .string)
        ]
        /// The ID of the connection on which the private virtual interface is provisioned.
        public let connectionId: String
        /// Information about the private virtual interface.
        public let newPrivateVirtualInterfaceAllocation: NewPrivateVirtualInterfaceAllocation
        /// The ID of the AWS account that owns the virtual private interface.
        public let ownerAccount: String

        public init(connectionId: String, newPrivateVirtualInterfaceAllocation: NewPrivateVirtualInterfaceAllocation, ownerAccount: String) {
            self.connectionId = connectionId
            self.newPrivateVirtualInterfaceAllocation = newPrivateVirtualInterfaceAllocation
            self.ownerAccount = ownerAccount
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
            case newPrivateVirtualInterfaceAllocation = "newPrivateVirtualInterfaceAllocation"
            case ownerAccount = "ownerAccount"
        }
    }

    public enum BGPPeerState: String, CustomStringConvertible, Codable {
        case verifying = "verifying"
        case pending = "pending"
        case available = "available"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public struct DeleteDirectConnectGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGatewayId", required: true, type: .string)
        ]
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String

        public init(directConnectGatewayId: String) {
            self.directConnectGatewayId = directConnectGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayId = "directConnectGatewayId"
        }
    }

    public struct DescribeDirectConnectGatewaysResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGateways", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// The Direct Connect gateways.
        public let directConnectGateways: [DirectConnectGateway]?
        /// The token to retrieve the next page.
        public let nextToken: String?

        public init(directConnectGateways: [DirectConnectGateway]? = nil, nextToken: String? = nil) {
            self.directConnectGateways = directConnectGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGateways = "directConnectGateways"
            case nextToken = "nextToken"
        }
    }

    public struct DescribeConnectionLoaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "providerName", required: false, type: .string), 
            AWSShapeMember(label: "loaContentType", required: false, type: .enum), 
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        /// The name of the APN partner or service provider who establishes connectivity on your behalf. If you specify this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.
        public let providerName: String?
        /// The standard media type for the LOA-CFA document. The only supported value is application/pdf.
        public let loaContentType: LoaContentType?
        /// The ID of the connection.
        public let connectionId: String

        public init(providerName: String? = nil, loaContentType: LoaContentType? = nil, connectionId: String) {
            self.providerName = providerName
            self.loaContentType = loaContentType
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case providerName = "providerName"
            case loaContentType = "loaContentType"
            case connectionId = "connectionId"
        }
    }

    public struct DescribeDirectConnectGatewayAttachmentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "directConnectGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "virtualInterfaceId", required: false, type: .string)
        ]
        /// The maximum number of attachments to return per page.
        public let maxResults: Int32?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The token provided in the previous call to retrieve the next page.
        public let nextToken: String?
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String?

        public init(maxResults: Int32? = nil, directConnectGatewayId: String? = nil, nextToken: String? = nil, virtualInterfaceId: String? = nil) {
            self.maxResults = maxResults
            self.directConnectGatewayId = directConnectGatewayId
            self.nextToken = nextToken
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case directConnectGatewayId = "directConnectGatewayId"
            case nextToken = "nextToken"
            case virtualInterfaceId = "virtualInterfaceId"
        }
    }

    public enum DirectConnectGatewayAssociationState: String, CustomStringConvertible, Codable {
        case associating = "associating"
        case associated = "associated"
        case disassociating = "disassociating"
        case disassociated = "disassociated"
        public var description: String { return self.rawValue }
    }

    public struct VirtualInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionId", required: false, type: .string), 
            AWSShapeMember(label: "virtualInterfaceType", required: false, type: .string), 
            AWSShapeMember(label: "asn", required: false, type: .integer), 
            AWSShapeMember(label: "ownerAccount", required: false, type: .string), 
            AWSShapeMember(label: "vlan", required: false, type: .integer), 
            AWSShapeMember(label: "customerRouterConfig", required: false, type: .string), 
            AWSShapeMember(label: "addressFamily", required: false, type: .enum), 
            AWSShapeMember(label: "virtualInterfaceState", required: false, type: .enum), 
            AWSShapeMember(label: "virtualInterfaceName", required: false, type: .string), 
            AWSShapeMember(label: "customerAddress", required: false, type: .string), 
            AWSShapeMember(label: "virtualGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "amazonAddress", required: false, type: .string), 
            AWSShapeMember(label: "routeFilterPrefixes", required: false, type: .list), 
            AWSShapeMember(label: "jumboFrameCapable", required: false, type: .boolean), 
            AWSShapeMember(label: "awsDeviceV2", required: false, type: .string), 
            AWSShapeMember(label: "mtu", required: false, type: .integer), 
            AWSShapeMember(label: "bgpPeers", required: false, type: .list), 
            AWSShapeMember(label: "virtualInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "authKey", required: false, type: .string), 
            AWSShapeMember(label: "amazonSideAsn", required: false, type: .long), 
            AWSShapeMember(label: "location", required: false, type: .string), 
            AWSShapeMember(label: "region", required: false, type: .string), 
            AWSShapeMember(label: "directConnectGatewayId", required: false, type: .string)
        ]
        /// The ID of the connection.
        public let connectionId: String?
        /// The type of virtual interface. The possible values are private and public.
        public let virtualInterfaceType: String?
        /// The autonomous system (AS) number for Border Gateway Protocol (BGP) configuration.
        public let asn: Int32?
        /// The ID of the AWS account that owns the virtual interface.
        public let ownerAccount: String?
        /// The ID of the VLAN.
        public let vlan: Int32?
        /// The customer router configuration.
        public let customerRouterConfig: String?
        /// The address family for the BGP peer.
        public let addressFamily: AddressFamily?
        /// The state of the virtual interface. The following are the possible values:    confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.    verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.    pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.    available: A virtual interface that is able to forward traffic.    down: A virtual interface that is BGP down.    deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.    deleted: A virtual interface that cannot forward traffic.    rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.  
        public let virtualInterfaceState: VirtualInterfaceState?
        /// The name of the virtual interface assigned by the customer network.
        public let virtualInterfaceName: String?
        /// The IP address assigned to the customer interface.
        public let customerAddress: String?
        /// The ID of the virtual private gateway. Applies only to private virtual interfaces.
        public let virtualGatewayId: String?
        /// The IP address assigned to the Amazon interface.
        public let amazonAddress: String?
        /// The routes to be advertised to the AWS network in this Region. Applies to public virtual interfaces.
        public let routeFilterPrefixes: [RouteFilterPrefix]?
        /// Indicates whether jumbo frames (9001 MTU) are supported.
        public let jumboFrameCapable: Bool?
        /// The Direct Connect endpoint on which the virtual interface terminates.
        public let awsDeviceV2: String?
        /// The maximum transmission unit (MTU), in bytes. The supported values are 1500 and 9001. The default value is 1500.
        public let mtu: Int32?
        /// The BGP peers configured on this virtual interface.
        public let bgpPeers: [BGPPeer]?
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String?
        /// The authentication key for BGP configuration.
        public let authKey: String?
        /// The autonomous system number (ASN) for the Amazon side of the connection.
        public let amazonSideAsn: Int64?
        /// The location of the connection.
        public let location: String?
        /// The AWS Region where the virtual interface is located.
        public let region: String?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?

        public init(connectionId: String? = nil, virtualInterfaceType: String? = nil, asn: Int32? = nil, ownerAccount: String? = nil, vlan: Int32? = nil, customerRouterConfig: String? = nil, addressFamily: AddressFamily? = nil, virtualInterfaceState: VirtualInterfaceState? = nil, virtualInterfaceName: String? = nil, customerAddress: String? = nil, virtualGatewayId: String? = nil, amazonAddress: String? = nil, routeFilterPrefixes: [RouteFilterPrefix]? = nil, jumboFrameCapable: Bool? = nil, awsDeviceV2: String? = nil, mtu: Int32? = nil, bgpPeers: [BGPPeer]? = nil, virtualInterfaceId: String? = nil, authKey: String? = nil, amazonSideAsn: Int64? = nil, location: String? = nil, region: String? = nil, directConnectGatewayId: String? = nil) {
            self.connectionId = connectionId
            self.virtualInterfaceType = virtualInterfaceType
            self.asn = asn
            self.ownerAccount = ownerAccount
            self.vlan = vlan
            self.customerRouterConfig = customerRouterConfig
            self.addressFamily = addressFamily
            self.virtualInterfaceState = virtualInterfaceState
            self.virtualInterfaceName = virtualInterfaceName
            self.customerAddress = customerAddress
            self.virtualGatewayId = virtualGatewayId
            self.amazonAddress = amazonAddress
            self.routeFilterPrefixes = routeFilterPrefixes
            self.jumboFrameCapable = jumboFrameCapable
            self.awsDeviceV2 = awsDeviceV2
            self.mtu = mtu
            self.bgpPeers = bgpPeers
            self.virtualInterfaceId = virtualInterfaceId
            self.authKey = authKey
            self.amazonSideAsn = amazonSideAsn
            self.location = location
            self.region = region
            self.directConnectGatewayId = directConnectGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
            case virtualInterfaceType = "virtualInterfaceType"
            case asn = "asn"
            case ownerAccount = "ownerAccount"
            case vlan = "vlan"
            case customerRouterConfig = "customerRouterConfig"
            case addressFamily = "addressFamily"
            case virtualInterfaceState = "virtualInterfaceState"
            case virtualInterfaceName = "virtualInterfaceName"
            case customerAddress = "customerAddress"
            case virtualGatewayId = "virtualGatewayId"
            case amazonAddress = "amazonAddress"
            case routeFilterPrefixes = "routeFilterPrefixes"
            case jumboFrameCapable = "jumboFrameCapable"
            case awsDeviceV2 = "awsDeviceV2"
            case mtu = "mtu"
            case bgpPeers = "bgpPeers"
            case virtualInterfaceId = "virtualInterfaceId"
            case authKey = "authKey"
            case amazonSideAsn = "amazonSideAsn"
            case location = "location"
            case region = "region"
            case directConnectGatewayId = "directConnectGatewayId"
        }
    }

    public struct DeleteVirtualInterfaceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceState", required: false, type: .enum)
        ]
        /// The state of the virtual interface. The following are the possible values:    confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.    verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.    pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.    available: A virtual interface that is able to forward traffic.    down: A virtual interface that is BGP down.    deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.    deleted: A virtual interface that cannot forward traffic.    rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.  
        public let virtualInterfaceState: VirtualInterfaceState?

        public init(virtualInterfaceState: VirtualInterfaceState? = nil) {
            self.virtualInterfaceState = virtualInterfaceState
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceState = "virtualInterfaceState"
        }
    }

    public struct DirectConnectGateway: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGatewayName", required: false, type: .string), 
            AWSShapeMember(label: "directConnectGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "directConnectGatewayState", required: false, type: .enum), 
            AWSShapeMember(label: "ownerAccount", required: false, type: .string), 
            AWSShapeMember(label: "stateChangeError", required: false, type: .string), 
            AWSShapeMember(label: "amazonSideAsn", required: false, type: .long)
        ]
        /// The name of the Direct Connect gateway.
        public let directConnectGatewayName: String?
        /// The ID of the Direct Connect gateway.
        public let directConnectGatewayId: String?
        /// The state of the Direct Connect gateway. The following are the possible values:    pending: The initial state after calling CreateDirectConnectGateway.    available: The Direct Connect gateway is ready for use.    deleting: The initial state after calling DeleteDirectConnectGateway.    deleted: The Direct Connect gateway is deleted and cannot pass traffic.  
        public let directConnectGatewayState: DirectConnectGatewayState?
        /// The ID of the AWS account that owns the Direct Connect gateway.
        public let ownerAccount: String?
        /// The error message if the state of an object failed to advance.
        public let stateChangeError: String?
        /// The autonomous system number (ASN) for the Amazon side of the connection.
        public let amazonSideAsn: Int64?

        public init(directConnectGatewayName: String? = nil, directConnectGatewayId: String? = nil, directConnectGatewayState: DirectConnectGatewayState? = nil, ownerAccount: String? = nil, stateChangeError: String? = nil, amazonSideAsn: Int64? = nil) {
            self.directConnectGatewayName = directConnectGatewayName
            self.directConnectGatewayId = directConnectGatewayId
            self.directConnectGatewayState = directConnectGatewayState
            self.ownerAccount = ownerAccount
            self.stateChangeError = stateChangeError
            self.amazonSideAsn = amazonSideAsn
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayName = "directConnectGatewayName"
            case directConnectGatewayId = "directConnectGatewayId"
            case directConnectGatewayState = "directConnectGatewayState"
            case ownerAccount = "ownerAccount"
            case stateChangeError = "stateChangeError"
            case amazonSideAsn = "amazonSideAsn"
        }
    }

    public struct ConfirmPrivateVirtualInterfaceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceState", required: false, type: .enum)
        ]
        /// The state of the virtual interface. The following are the possible values:    confirming: The creation of the virtual interface is pending confirmation from the virtual interface owner. If the owner of the virtual interface is different from the owner of the connection on which it is provisioned, then the virtual interface will remain in this state until it is confirmed by the virtual interface owner.    verifying: This state only applies to public virtual interfaces. Each public virtual interface needs validation before the virtual interface can be created.    pending: A virtual interface is in this state from the time that it is created until the virtual interface is ready to forward traffic.    available: A virtual interface that is able to forward traffic.    down: A virtual interface that is BGP down.    deleting: A virtual interface is in this state immediately after calling DeleteVirtualInterface until it can no longer forward traffic.    deleted: A virtual interface that cannot forward traffic.    rejected: The virtual interface owner has declined creation of the virtual interface. If a virtual interface in the Confirming state is deleted by the virtual interface owner, the virtual interface enters the Rejected state.  
        public let virtualInterfaceState: VirtualInterfaceState?

        public init(virtualInterfaceState: VirtualInterfaceState? = nil) {
            self.virtualInterfaceState = virtualInterfaceState
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceState = "virtualInterfaceState"
        }
    }

    public struct AssociateVirtualInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceId", required: true, type: .string), 
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        /// The ID of the virtual interface.
        public let virtualInterfaceId: String
        /// The ID of the LAG or connection.
        public let connectionId: String

        public init(virtualInterfaceId: String, connectionId: String) {
            self.virtualInterfaceId = virtualInterfaceId
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId = "virtualInterfaceId"
            case connectionId = "connectionId"
        }
    }

    public struct Loa: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loaContent", required: false, type: .blob), 
            AWSShapeMember(label: "loaContentType", required: false, type: .enum)
        ]
        /// The binary contents of the LOA-CFA document.
        public let loaContent: Data?
        /// The standard media type for the LOA-CFA document. The only supported value is application/pdf.
        public let loaContentType: LoaContentType?

        public init(loaContent: Data? = nil, loaContentType: LoaContentType? = nil) {
            self.loaContent = loaContent
            self.loaContentType = loaContentType
        }

        private enum CodingKeys: String, CodingKey {
            case loaContent = "loaContent"
            case loaContentType = "loaContentType"
        }
    }

    public struct DescribeConnectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionId", required: false, type: .string)
        ]
        /// The ID of the connection.
        public let connectionId: String?

        public init(connectionId: String? = nil) {
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
        }
    }

    public struct DescribeInterconnectsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "interconnectId", required: false, type: .string)
        ]
        /// The ID of the interconnect.
        public let interconnectId: String?

        public init(interconnectId: String? = nil) {
            self.interconnectId = interconnectId
        }

        private enum CodingKeys: String, CodingKey {
            case interconnectId = "interconnectId"
        }
    }

    public struct VirtualInterfaces: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaces", required: false, type: .list)
        ]
        /// The virtual interfaces
        public let virtualInterfaces: [VirtualInterface]?

        public init(virtualInterfaces: [VirtualInterface]? = nil) {
            self.virtualInterfaces = virtualInterfaces
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaces = "virtualInterfaces"
        }
    }

    public struct CreatePrivateVirtualInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "newPrivateVirtualInterface", required: true, type: .structure), 
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        /// Information about the private virtual interface.
        public let newPrivateVirtualInterface: NewPrivateVirtualInterface
        /// The ID of the connection.
        public let connectionId: String

        public init(newPrivateVirtualInterface: NewPrivateVirtualInterface, connectionId: String) {
            self.newPrivateVirtualInterface = newPrivateVirtualInterface
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case newPrivateVirtualInterface = "newPrivateVirtualInterface"
            case connectionId = "connectionId"
        }
    }

    public struct CreateBGPPeerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterface", required: false, type: .structure)
        ]
        /// The virtual interface.
        public let virtualInterface: VirtualInterface?

        public init(virtualInterface: VirtualInterface? = nil) {
            self.virtualInterface = virtualInterface
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterface = "virtualInterface"
        }
    }

    public enum VirtualInterfaceState: String, CustomStringConvertible, Codable {
        case confirming = "confirming"
        case verifying = "verifying"
        case pending = "pending"
        case available = "available"
        case down = "down"
        case deleting = "deleting"
        case deleted = "deleted"
        case rejected = "rejected"
        public var description: String { return self.rawValue }
    }

    public enum LoaContentType: String, CustomStringConvertible, Codable {
        case applicationPdf = "application/pdf"
        public var description: String { return self.rawValue }
    }

    public struct DeleteConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        /// The ID of the connection.
        public let connectionId: String

        public init(connectionId: String) {
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
        }
    }

    public struct DescribeLoaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "providerName", required: false, type: .string), 
            AWSShapeMember(label: "loaContentType", required: false, type: .enum), 
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        /// The name of the service provider who establishes connectivity on your behalf. If you specify this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect.
        public let providerName: String?
        /// The standard media type for the LOA-CFA document. The only supported value is application/pdf.
        public let loaContentType: LoaContentType?
        /// The ID of a connection, LAG, or interconnect.
        public let connectionId: String

        public init(providerName: String? = nil, loaContentType: LoaContentType? = nil, connectionId: String) {
            self.providerName = providerName
            self.loaContentType = loaContentType
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case providerName = "providerName"
            case loaContentType = "loaContentType"
            case connectionId = "connectionId"
        }
    }

    public enum LagState: String, CustomStringConvertible, Codable {
        case requested = "requested"
        case pending = "pending"
        case available = "available"
        case down = "down"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public struct VirtualGateways: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualGateways", required: false, type: .list)
        ]
        /// The virtual private gateways.
        public let virtualGateways: [VirtualGateway]?

        public init(virtualGateways: [VirtualGateway]? = nil) {
            self.virtualGateways = virtualGateways
        }

        private enum CodingKeys: String, CodingKey {
            case virtualGateways = "virtualGateways"
        }
    }

}