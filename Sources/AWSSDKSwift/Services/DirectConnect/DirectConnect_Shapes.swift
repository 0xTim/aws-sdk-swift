// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension DirectConnect {

    public struct VirtualGateways: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualGateways", required: false, type: .list)
        ]
        /// A list of virtual private gateways.
        public let virtualGateways: [VirtualGateway]?

        public init(virtualGateways: [VirtualGateway]? = nil) {
            self.virtualGateways = virtualGateways
        }

        private enum CodingKeys: String, CodingKey {
            case virtualGateways = "virtualGateways"
        }
    }

    public struct NewPrivateVirtualInterfaceAllocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "asn", required: true, type: .integer), 
            AWSShapeMember(label: "customerAddress", required: false, type: .string), 
            AWSShapeMember(label: "authKey", required: false, type: .string), 
            AWSShapeMember(label: "addressFamily", required: false, type: .enum), 
            AWSShapeMember(label: "virtualInterfaceName", required: true, type: .string), 
            AWSShapeMember(label: "vlan", required: true, type: .integer), 
            AWSShapeMember(label: "amazonAddress", required: false, type: .string)
        ]
        public let asn: Int32
        public let customerAddress: String?
        public let authKey: String?
        public let addressFamily: AddressFamily?
        public let virtualInterfaceName: String
        public let vlan: Int32
        public let amazonAddress: String?

        public init(asn: Int32, customerAddress: String? = nil, authKey: String? = nil, addressFamily: AddressFamily? = nil, virtualInterfaceName: String, vlan: Int32, amazonAddress: String? = nil) {
            self.asn = asn
            self.customerAddress = customerAddress
            self.authKey = authKey
            self.addressFamily = addressFamily
            self.virtualInterfaceName = virtualInterfaceName
            self.vlan = vlan
            self.amazonAddress = amazonAddress
        }

        private enum CodingKeys: String, CodingKey {
            case asn = "asn"
            case customerAddress = "customerAddress"
            case authKey = "authKey"
            case addressFamily = "addressFamily"
            case virtualInterfaceName = "virtualInterfaceName"
            case vlan = "vlan"
            case amazonAddress = "amazonAddress"
        }
    }

    public struct CreateDirectConnectGatewayAssociationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "virtualGatewayId", required: true, type: .string)
        ]
        /// The ID of the direct connect gateway. Example: "abcd1234-dcba-5678-be23-cdef9876ab45" Default: None
        public let directConnectGatewayId: String
        /// The ID of the virtual private gateway. Example: "vgw-abc123ef" Default: None
        public let virtualGatewayId: String

        public init(directConnectGatewayId: String, virtualGatewayId: String) {
            self.directConnectGatewayId = directConnectGatewayId
            self.virtualGatewayId = virtualGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayId = "directConnectGatewayId"
            case virtualGatewayId = "virtualGatewayId"
        }
    }

    public struct ConfirmPrivateVirtualInterfaceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceState", required: false, type: .enum)
        ]
        public let virtualInterfaceState: VirtualInterfaceState?

        public init(virtualInterfaceState: VirtualInterfaceState? = nil) {
            self.virtualInterfaceState = virtualInterfaceState
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceState = "virtualInterfaceState"
        }
    }

    public enum LoaContentType: String, CustomStringConvertible, Codable {
        case applicationPdf = "application/pdf"
        public var description: String { return self.rawValue }
    }

    public struct DescribeDirectConnectGatewayAttachmentsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "directConnectGatewayAttachments", required: false, type: .list)
        ]
        public let nextToken: String?
        /// Information about the direct connect gateway attachments.
        public let directConnectGatewayAttachments: [DirectConnectGatewayAttachment]?

        public init(nextToken: String? = nil, directConnectGatewayAttachments: [DirectConnectGatewayAttachment]? = nil) {
            self.nextToken = nextToken
            self.directConnectGatewayAttachments = directConnectGatewayAttachments
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case directConnectGatewayAttachments = "directConnectGatewayAttachments"
        }
    }

    public struct DisassociateConnectionFromLagRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionId", required: true, type: .string), 
            AWSShapeMember(label: "lagId", required: true, type: .string)
        ]
        /// The ID of the connection to disassociate from the LAG. Example: dxcon-abc123 Default: None
        public let connectionId: String
        /// The ID of the LAG. Example: dxlag-abc123 Default: None
        public let lagId: String

        public init(connectionId: String, lagId: String) {
            self.connectionId = connectionId
            self.lagId = lagId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
            case lagId = "lagId"
        }
    }

    public struct DirectConnectGateway: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGatewayState", required: false, type: .enum), 
            AWSShapeMember(label: "directConnectGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "amazonSideAsn", required: false, type: .long), 
            AWSShapeMember(label: "ownerAccount", required: false, type: .string), 
            AWSShapeMember(label: "directConnectGatewayName", required: false, type: .string), 
            AWSShapeMember(label: "stateChangeError", required: false, type: .string)
        ]
        public let directConnectGatewayState: DirectConnectGatewayState?
        public let directConnectGatewayId: String?
        /// The autonomous system number (ASN) for the Amazon side of the connection.
        public let amazonSideAsn: Int64?
        /// The AWS account ID of the owner of the direct connect gateway.
        public let ownerAccount: String?
        public let directConnectGatewayName: String?
        public let stateChangeError: String?

        public init(directConnectGatewayState: DirectConnectGatewayState? = nil, directConnectGatewayId: String? = nil, amazonSideAsn: Int64? = nil, ownerAccount: String? = nil, directConnectGatewayName: String? = nil, stateChangeError: String? = nil) {
            self.directConnectGatewayState = directConnectGatewayState
            self.directConnectGatewayId = directConnectGatewayId
            self.amazonSideAsn = amazonSideAsn
            self.ownerAccount = ownerAccount
            self.directConnectGatewayName = directConnectGatewayName
            self.stateChangeError = stateChangeError
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayState = "directConnectGatewayState"
            case directConnectGatewayId = "directConnectGatewayId"
            case amazonSideAsn = "amazonSideAsn"
            case ownerAccount = "ownerAccount"
            case directConnectGatewayName = "directConnectGatewayName"
            case stateChangeError = "stateChangeError"
        }
    }

    public struct ConfirmConnectionResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionState", required: false, type: .enum)
        ]
        public let connectionState: ConnectionState?

        public init(connectionState: ConnectionState? = nil) {
            self.connectionState = connectionState
        }

        private enum CodingKeys: String, CodingKey {
            case connectionState = "connectionState"
        }
    }

    public struct ConfirmConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        public let connectionId: String

        public init(connectionId: String) {
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
        }
    }

    public struct DeleteDirectConnectGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGateway", required: false, type: .structure)
        ]
        /// The direct connect gateway to be deleted.
        public let directConnectGateway: DirectConnectGateway?

        public init(directConnectGateway: DirectConnectGateway? = nil) {
            self.directConnectGateway = directConnectGateway
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGateway = "directConnectGateway"
        }
    }

    public struct DeleteBGPPeerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "customerAddress", required: false, type: .string), 
            AWSShapeMember(label: "asn", required: false, type: .integer)
        ]
        /// The ID of the virtual interface from which the BGP peer will be deleted. Example: dxvif-456abc78 Default: None
        public let virtualInterfaceId: String?
        public let customerAddress: String?
        public let asn: Int32?

        public init(virtualInterfaceId: String? = nil, customerAddress: String? = nil, asn: Int32? = nil) {
            self.virtualInterfaceId = virtualInterfaceId
            self.customerAddress = customerAddress
            self.asn = asn
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId = "virtualInterfaceId"
            case customerAddress = "customerAddress"
            case asn = "asn"
        }
    }

    public struct DeleteDirectConnectGatewayAssociationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGatewayAssociation", required: false, type: .structure)
        ]
        /// The direct connect gateway association to be deleted.
        public let directConnectGatewayAssociation: DirectConnectGatewayAssociation?

        public init(directConnectGatewayAssociation: DirectConnectGatewayAssociation? = nil) {
            self.directConnectGatewayAssociation = directConnectGatewayAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayAssociation = "directConnectGatewayAssociation"
        }
    }

    public struct DescribeConnectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionId", required: false, type: .string)
        ]
        public let connectionId: String?

        public init(connectionId: String? = nil) {
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
        }
    }

    public struct UntagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "tagKeys", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the Direct Connect resource.
        public let resourceArn: String
        /// The list of tag keys to remove.
        public let tagKeys: [String]

        public init(resourceArn: String, tagKeys: [String]) {
            self.resourceArn = resourceArn
            self.tagKeys = tagKeys
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tagKeys = "tagKeys"
        }
    }

    public struct DescribeInterconnectsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "interconnectId", required: false, type: .string)
        ]
        public let interconnectId: String?

        public init(interconnectId: String? = nil) {
            self.interconnectId = interconnectId
        }

        private enum CodingKeys: String, CodingKey {
            case interconnectId = "interconnectId"
        }
    }

    public struct DirectConnectGatewayAttachment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "directConnectGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "virtualInterfaceOwnerAccount", required: false, type: .string), 
            AWSShapeMember(label: "attachmentState", required: false, type: .enum), 
            AWSShapeMember(label: "virtualInterfaceRegion", required: false, type: .string), 
            AWSShapeMember(label: "stateChangeError", required: false, type: .string)
        ]
        public let virtualInterfaceId: String?
        public let directConnectGatewayId: String?
        /// The AWS account ID of the owner of the virtual interface.
        public let virtualInterfaceOwnerAccount: String?
        public let attachmentState: DirectConnectGatewayAttachmentState?
        public let virtualInterfaceRegion: String?
        public let stateChangeError: String?

        public init(virtualInterfaceId: String? = nil, directConnectGatewayId: String? = nil, virtualInterfaceOwnerAccount: String? = nil, attachmentState: DirectConnectGatewayAttachmentState? = nil, virtualInterfaceRegion: String? = nil, stateChangeError: String? = nil) {
            self.virtualInterfaceId = virtualInterfaceId
            self.directConnectGatewayId = directConnectGatewayId
            self.virtualInterfaceOwnerAccount = virtualInterfaceOwnerAccount
            self.attachmentState = attachmentState
            self.virtualInterfaceRegion = virtualInterfaceRegion
            self.stateChangeError = stateChangeError
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId = "virtualInterfaceId"
            case directConnectGatewayId = "directConnectGatewayId"
            case virtualInterfaceOwnerAccount = "virtualInterfaceOwnerAccount"
            case attachmentState = "attachmentState"
            case virtualInterfaceRegion = "virtualInterfaceRegion"
            case stateChangeError = "stateChangeError"
        }
    }

    public struct DescribeDirectConnectGatewayAttachmentsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "directConnectGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// The ID of the virtual interface. Example: "dxvif-abc123ef" Default: None
        public let virtualInterfaceId: String?
        /// The ID of the direct connect gateway. Example: "abcd1234-dcba-5678-be23-cdef9876ab45" Default: None
        public let directConnectGatewayId: String?
        /// The token provided in the previous describe result to retrieve the next page of the result. Default: None
        public let nextToken: String?
        /// The maximum number of direct connect gateway attachments to return per page. Example: 15 Default: None
        public let maxResults: Int32?

        public init(virtualInterfaceId: String? = nil, directConnectGatewayId: String? = nil, nextToken: String? = nil, maxResults: Int32? = nil) {
            self.virtualInterfaceId = virtualInterfaceId
            self.directConnectGatewayId = directConnectGatewayId
            self.nextToken = nextToken
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId = "virtualInterfaceId"
            case directConnectGatewayId = "directConnectGatewayId"
            case nextToken = "nextToken"
            case maxResults = "maxResults"
        }
    }

    public struct DescribeInterconnectLoaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loaContentType", required: false, type: .enum), 
            AWSShapeMember(label: "providerName", required: false, type: .string), 
            AWSShapeMember(label: "interconnectId", required: true, type: .string)
        ]
        public let loaContentType: LoaContentType?
        /// The name of the service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect. Default: None
        public let providerName: String?
        public let interconnectId: String

        public init(loaContentType: LoaContentType? = nil, providerName: String? = nil, interconnectId: String) {
            self.loaContentType = loaContentType
            self.providerName = providerName
            self.interconnectId = interconnectId
        }

        private enum CodingKeys: String, CodingKey {
            case loaContentType = "loaContentType"
            case providerName = "providerName"
            case interconnectId = "interconnectId"
        }
    }

    public struct DeleteBGPPeerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterface", required: false, type: .structure)
        ]
        public let virtualInterface: VirtualInterface?

        public init(virtualInterface: VirtualInterface? = nil) {
            self.virtualInterface = virtualInterface
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterface = "virtualInterface"
        }
    }

    public struct AssociateHostedConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionId", required: true, type: .string), 
            AWSShapeMember(label: "parentConnectionId", required: true, type: .string)
        ]
        /// The ID of the hosted connection. Example: dxcon-abc123 Default: None
        public let connectionId: String
        /// The ID of the interconnect or the LAG. Example: dxcon-abc123 or dxlag-abc123 Default: None
        public let parentConnectionId: String

        public init(connectionId: String, parentConnectionId: String) {
            self.connectionId = connectionId
            self.parentConnectionId = parentConnectionId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
            case parentConnectionId = "parentConnectionId"
        }
    }

    public struct DescribeLoaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "providerName", required: false, type: .string), 
            AWSShapeMember(label: "loaContentType", required: false, type: .enum), 
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        /// The name of the service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect. Default: None
        public let providerName: String?
        /// A standard media type indicating the content type of the LOA-CFA document. Currently, the only supported value is "application/pdf". Default: application/pdf
        public let loaContentType: LoaContentType?
        /// The ID of a connection, LAG, or interconnect for which to get the LOA-CFA information. Example: dxcon-abc123 or dxlag-abc123 Default: None
        public let connectionId: String

        public init(providerName: String? = nil, loaContentType: LoaContentType? = nil, connectionId: String) {
            self.providerName = providerName
            self.loaContentType = loaContentType
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case providerName = "providerName"
            case loaContentType = "loaContentType"
            case connectionId = "connectionId"
        }
    }

    public struct Lags: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lags", required: false, type: .list)
        ]
        /// A list of LAGs.
        public let lags: [Lag]?

        public init(lags: [Lag]? = nil) {
            self.lags = lags
        }

        private enum CodingKeys: String, CodingKey {
            case lags = "lags"
        }
    }

    public struct UntagResourceResponse: AWSShape {

    }

    public struct Locations: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "locations", required: false, type: .list)
        ]
        /// A list of colocation hubs where network providers have equipment. Most regions have multiple locations available.
        public let locations: [Location]?

        public init(locations: [Location]? = nil) {
            self.locations = locations
        }

        private enum CodingKeys: String, CodingKey {
            case locations = "locations"
        }
    }

    public struct DescribeConnectionLoaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loa", required: false, type: .structure)
        ]
        public let loa: Loa?

        public init(loa: Loa? = nil) {
            self.loa = loa
        }

        private enum CodingKeys: String, CodingKey {
            case loa = "loa"
        }
    }

    public struct AllocatePublicVirtualInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "newPublicVirtualInterfaceAllocation", required: true, type: .structure), 
            AWSShapeMember(label: "connectionId", required: true, type: .string), 
            AWSShapeMember(label: "ownerAccount", required: true, type: .string)
        ]
        /// Detailed information for the public virtual interface to be provisioned. Default: None
        public let newPublicVirtualInterfaceAllocation: NewPublicVirtualInterfaceAllocation
        /// The connection ID on which the public virtual interface is provisioned. Default: None
        public let connectionId: String
        /// The AWS account that will own the new public virtual interface. Default: None
        public let ownerAccount: String

        public init(newPublicVirtualInterfaceAllocation: NewPublicVirtualInterfaceAllocation, connectionId: String, ownerAccount: String) {
            self.newPublicVirtualInterfaceAllocation = newPublicVirtualInterfaceAllocation
            self.connectionId = connectionId
            self.ownerAccount = ownerAccount
        }

        private enum CodingKeys: String, CodingKey {
            case newPublicVirtualInterfaceAllocation = "newPublicVirtualInterfaceAllocation"
            case connectionId = "connectionId"
            case ownerAccount = "ownerAccount"
        }
    }

    public struct VirtualInterfaces: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaces", required: false, type: .list)
        ]
        /// A list of virtual interfaces.
        public let virtualInterfaces: [VirtualInterface]?

        public init(virtualInterfaces: [VirtualInterface]? = nil) {
            self.virtualInterfaces = virtualInterfaces
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaces = "virtualInterfaces"
        }
    }

    public struct ConfirmPublicVirtualInterfaceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceState", required: false, type: .enum)
        ]
        public let virtualInterfaceState: VirtualInterfaceState?

        public init(virtualInterfaceState: VirtualInterfaceState? = nil) {
            self.virtualInterfaceState = virtualInterfaceState
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceState = "virtualInterfaceState"
        }
    }

    public struct UpdateLagRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lagId", required: true, type: .string), 
            AWSShapeMember(label: "lagName", required: false, type: .string), 
            AWSShapeMember(label: "minimumLinks", required: false, type: .integer)
        ]
        /// The ID of the LAG to update. Example: dxlag-abc123 Default: None
        public let lagId: String
        /// The name for the LAG. Example: "3x10G LAG to AWS" Default: None
        public let lagName: String?
        /// The minimum number of physical connections that must be operational for the LAG itself to be operational. Default: None
        public let minimumLinks: Int32?

        public init(lagId: String, lagName: String? = nil, minimumLinks: Int32? = nil) {
            self.lagId = lagId
            self.lagName = lagName
            self.minimumLinks = minimumLinks
        }

        private enum CodingKeys: String, CodingKey {
            case lagId = "lagId"
            case lagName = "lagName"
            case minimumLinks = "minimumLinks"
        }
    }

    public struct DescribeInterconnectLoaResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loa", required: false, type: .structure)
        ]
        public let loa: Loa?

        public init(loa: Loa? = nil) {
            self.loa = loa
        }

        private enum CodingKeys: String, CodingKey {
            case loa = "loa"
        }
    }

    public enum BGPStatus: String, CustomStringConvertible, Codable {
        case up = "up"
        case down = "down"
        public var description: String { return self.rawValue }
    }

    public struct NewBGPPeer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "amazonAddress", required: false, type: .string), 
            AWSShapeMember(label: "customerAddress", required: false, type: .string), 
            AWSShapeMember(label: "authKey", required: false, type: .string), 
            AWSShapeMember(label: "asn", required: false, type: .integer), 
            AWSShapeMember(label: "addressFamily", required: false, type: .enum)
        ]
        public let amazonAddress: String?
        public let customerAddress: String?
        public let authKey: String?
        public let asn: Int32?
        public let addressFamily: AddressFamily?

        public init(amazonAddress: String? = nil, customerAddress: String? = nil, authKey: String? = nil, asn: Int32? = nil, addressFamily: AddressFamily? = nil) {
            self.amazonAddress = amazonAddress
            self.customerAddress = customerAddress
            self.authKey = authKey
            self.asn = asn
            self.addressFamily = addressFamily
        }

        private enum CodingKeys: String, CodingKey {
            case amazonAddress = "amazonAddress"
            case customerAddress = "customerAddress"
            case authKey = "authKey"
            case asn = "asn"
            case addressFamily = "addressFamily"
        }
    }

    public enum LagState: String, CustomStringConvertible, Codable {
        case requested = "requested"
        case pending = "pending"
        case available = "available"
        case down = "down"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public struct CreateDirectConnectGatewayAssociationResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGatewayAssociation", required: false, type: .structure)
        ]
        /// The direct connect gateway association to be created.
        public let directConnectGatewayAssociation: DirectConnectGatewayAssociation?

        public init(directConnectGatewayAssociation: DirectConnectGatewayAssociation? = nil) {
            self.directConnectGatewayAssociation = directConnectGatewayAssociation
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayAssociation = "directConnectGatewayAssociation"
        }
    }

    public struct CreatePrivateVirtualInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "newPrivateVirtualInterface", required: true, type: .structure), 
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        /// Detailed information for the private virtual interface to be created. Default: None
        public let newPrivateVirtualInterface: NewPrivateVirtualInterface
        public let connectionId: String

        public init(newPrivateVirtualInterface: NewPrivateVirtualInterface, connectionId: String) {
            self.newPrivateVirtualInterface = newPrivateVirtualInterface
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case newPrivateVirtualInterface = "newPrivateVirtualInterface"
            case connectionId = "connectionId"
        }
    }

    public enum BGPPeerState: String, CustomStringConvertible, Codable {
        case verifying = "verifying"
        case pending = "pending"
        case available = "available"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public struct NewPublicVirtualInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "asn", required: true, type: .integer), 
            AWSShapeMember(label: "customerAddress", required: false, type: .string), 
            AWSShapeMember(label: "authKey", required: false, type: .string), 
            AWSShapeMember(label: "addressFamily", required: false, type: .enum), 
            AWSShapeMember(label: "routeFilterPrefixes", required: false, type: .list), 
            AWSShapeMember(label: "virtualInterfaceName", required: true, type: .string), 
            AWSShapeMember(label: "vlan", required: true, type: .integer), 
            AWSShapeMember(label: "amazonAddress", required: false, type: .string)
        ]
        public let asn: Int32
        public let customerAddress: String?
        public let authKey: String?
        public let addressFamily: AddressFamily?
        public let routeFilterPrefixes: [RouteFilterPrefix]?
        public let virtualInterfaceName: String
        public let vlan: Int32
        public let amazonAddress: String?

        public init(asn: Int32, customerAddress: String? = nil, authKey: String? = nil, addressFamily: AddressFamily? = nil, routeFilterPrefixes: [RouteFilterPrefix]? = nil, virtualInterfaceName: String, vlan: Int32, amazonAddress: String? = nil) {
            self.asn = asn
            self.customerAddress = customerAddress
            self.authKey = authKey
            self.addressFamily = addressFamily
            self.routeFilterPrefixes = routeFilterPrefixes
            self.virtualInterfaceName = virtualInterfaceName
            self.vlan = vlan
            self.amazonAddress = amazonAddress
        }

        private enum CodingKeys: String, CodingKey {
            case asn = "asn"
            case customerAddress = "customerAddress"
            case authKey = "authKey"
            case addressFamily = "addressFamily"
            case routeFilterPrefixes = "routeFilterPrefixes"
            case virtualInterfaceName = "virtualInterfaceName"
            case vlan = "vlan"
            case amazonAddress = "amazonAddress"
        }
    }

    public struct Location: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "locationCode", required: false, type: .string), 
            AWSShapeMember(label: "locationName", required: false, type: .string), 
            AWSShapeMember(label: "region", required: false, type: .string)
        ]
        /// The code used to indicate the AWS Direct Connect location.
        public let locationCode: String?
        /// The name of the AWS Direct Connect location. The name includes the colocation partner name and the physical site of the lit building.
        public let locationName: String?
        /// The AWS region where the AWS Direct connect location is located. Example: us-east-1 Default: None
        public let region: String?

        public init(locationCode: String? = nil, locationName: String? = nil, region: String? = nil) {
            self.locationCode = locationCode
            self.locationName = locationName
            self.region = region
        }

        private enum CodingKeys: String, CodingKey {
            case locationCode = "locationCode"
            case locationName = "locationName"
            case region = "region"
        }
    }

    public struct ConfirmPublicVirtualInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceId", required: true, type: .string)
        ]
        public let virtualInterfaceId: String

        public init(virtualInterfaceId: String) {
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId = "virtualInterfaceId"
        }
    }

    public struct Loa: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "loaContentType", required: false, type: .enum), 
            AWSShapeMember(label: "loaContent", required: false, type: .blob)
        ]
        public let loaContentType: LoaContentType?
        public let loaContent: Data?

        public init(loaContentType: LoaContentType? = nil, loaContent: Data? = nil) {
            self.loaContentType = loaContentType
            self.loaContent = loaContent
        }

        private enum CodingKeys: String, CodingKey {
            case loaContentType = "loaContentType"
            case loaContent = "loaContent"
        }
    }

    public enum DirectConnectGatewayAssociationState: String, CustomStringConvertible, Codable {
        case associating = "associating"
        case associated = "associated"
        case disassociating = "disassociating"
        case disassociated = "disassociated"
        public var description: String { return self.rawValue }
    }

    public enum VirtualInterfaceState: String, CustomStringConvertible, Codable {
        case confirming = "confirming"
        case verifying = "verifying"
        case pending = "pending"
        case available = "available"
        case down = "down"
        case deleting = "deleting"
        case deleted = "deleted"
        case rejected = "rejected"
        public var description: String { return self.rawValue }
    }

    public struct ConfirmPrivateVirtualInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceId", required: true, type: .string), 
            AWSShapeMember(label: "directConnectGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "virtualGatewayId", required: false, type: .string)
        ]
        public let virtualInterfaceId: String
        /// ID of the direct connect gateway that will be attached to the virtual interface.  A direct connect gateway can be managed via the AWS Direct Connect console or the CreateDirectConnectGateway action. Default: None
        public let directConnectGatewayId: String?
        /// ID of the virtual private gateway that will be attached to the virtual interface.  A virtual private gateway can be managed via the Amazon Virtual Private Cloud (VPC) console or the EC2 CreateVpnGateway action. Default: None
        public let virtualGatewayId: String?

        public init(virtualInterfaceId: String, directConnectGatewayId: String? = nil, virtualGatewayId: String? = nil) {
            self.virtualInterfaceId = virtualInterfaceId
            self.directConnectGatewayId = directConnectGatewayId
            self.virtualGatewayId = virtualGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId = "virtualInterfaceId"
            case directConnectGatewayId = "directConnectGatewayId"
            case virtualGatewayId = "virtualGatewayId"
        }
    }

    public struct Lag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "awsDevice", required: false, type: .string), 
            AWSShapeMember(label: "allowsHostedConnections", required: false, type: .boolean), 
            AWSShapeMember(label: "ownerAccount", required: false, type: .string), 
            AWSShapeMember(label: "connections", required: false, type: .list), 
            AWSShapeMember(label: "location", required: false, type: .string), 
            AWSShapeMember(label: "numberOfConnections", required: false, type: .integer), 
            AWSShapeMember(label: "connectionsBandwidth", required: false, type: .string), 
            AWSShapeMember(label: "region", required: false, type: .string), 
            AWSShapeMember(label: "lagName", required: false, type: .string), 
            AWSShapeMember(label: "awsDeviceV2", required: false, type: .string), 
            AWSShapeMember(label: "minimumLinks", required: false, type: .integer), 
            AWSShapeMember(label: "lagId", required: false, type: .string), 
            AWSShapeMember(label: "lagState", required: false, type: .enum)
        ]
        /// Deprecated in favor of awsDeviceV2. The AWS Direct Connection endpoint that hosts the LAG.
        public let awsDevice: String?
        /// Indicates whether the LAG can host other connections.  This is intended for use by AWS Direct Connect partners only. 
        public let allowsHostedConnections: Bool?
        /// The owner of the LAG.
        public let ownerAccount: String?
        /// A list of connections bundled by this LAG.
        public let connections: [Connection]?
        public let location: String?
        /// The number of physical connections bundled by the LAG, up to a maximum of 10.
        public let numberOfConnections: Int32?
        /// The individual bandwidth of the physical connections bundled by the LAG. Available values: 1Gbps, 10Gbps
        public let connectionsBandwidth: String?
        public let region: String?
        /// The name of the LAG.
        public let lagName: String?
        /// The AWS Direct Connection endpoint that hosts the LAG.
        public let awsDeviceV2: String?
        /// The minimum number of physical connections that must be operational for the LAG itself to be operational. If the number of operational connections drops below this setting, the LAG state changes to down. This value can help to ensure that a LAG is not overutilized if a significant number of its bundled connections go down.
        public let minimumLinks: Int32?
        public let lagId: String?
        public let lagState: LagState?

        public init(awsDevice: String? = nil, allowsHostedConnections: Bool? = nil, ownerAccount: String? = nil, connections: [Connection]? = nil, location: String? = nil, numberOfConnections: Int32? = nil, connectionsBandwidth: String? = nil, region: String? = nil, lagName: String? = nil, awsDeviceV2: String? = nil, minimumLinks: Int32? = nil, lagId: String? = nil, lagState: LagState? = nil) {
            self.awsDevice = awsDevice
            self.allowsHostedConnections = allowsHostedConnections
            self.ownerAccount = ownerAccount
            self.connections = connections
            self.location = location
            self.numberOfConnections = numberOfConnections
            self.connectionsBandwidth = connectionsBandwidth
            self.region = region
            self.lagName = lagName
            self.awsDeviceV2 = awsDeviceV2
            self.minimumLinks = minimumLinks
            self.lagId = lagId
            self.lagState = lagState
        }

        private enum CodingKeys: String, CodingKey {
            case awsDevice = "awsDevice"
            case allowsHostedConnections = "allowsHostedConnections"
            case ownerAccount = "ownerAccount"
            case connections = "connections"
            case location = "location"
            case numberOfConnections = "numberOfConnections"
            case connectionsBandwidth = "connectionsBandwidth"
            case region = "region"
            case lagName = "lagName"
            case awsDeviceV2 = "awsDeviceV2"
            case minimumLinks = "minimumLinks"
            case lagId = "lagId"
            case lagState = "lagState"
        }
    }

    public struct NewPrivateVirtualInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "asn", required: true, type: .integer), 
            AWSShapeMember(label: "amazonAddress", required: false, type: .string), 
            AWSShapeMember(label: "customerAddress", required: false, type: .string), 
            AWSShapeMember(label: "authKey", required: false, type: .string), 
            AWSShapeMember(label: "addressFamily", required: false, type: .enum), 
            AWSShapeMember(label: "virtualGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "virtualInterfaceName", required: true, type: .string), 
            AWSShapeMember(label: "vlan", required: true, type: .integer), 
            AWSShapeMember(label: "directConnectGatewayId", required: false, type: .string)
        ]
        public let asn: Int32
        public let amazonAddress: String?
        public let customerAddress: String?
        public let authKey: String?
        public let addressFamily: AddressFamily?
        public let virtualGatewayId: String?
        public let virtualInterfaceName: String
        public let vlan: Int32
        public let directConnectGatewayId: String?

        public init(asn: Int32, amazonAddress: String? = nil, customerAddress: String? = nil, authKey: String? = nil, addressFamily: AddressFamily? = nil, virtualGatewayId: String? = nil, virtualInterfaceName: String, vlan: Int32, directConnectGatewayId: String? = nil) {
            self.asn = asn
            self.amazonAddress = amazonAddress
            self.customerAddress = customerAddress
            self.authKey = authKey
            self.addressFamily = addressFamily
            self.virtualGatewayId = virtualGatewayId
            self.virtualInterfaceName = virtualInterfaceName
            self.vlan = vlan
            self.directConnectGatewayId = directConnectGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case asn = "asn"
            case amazonAddress = "amazonAddress"
            case customerAddress = "customerAddress"
            case authKey = "authKey"
            case addressFamily = "addressFamily"
            case virtualGatewayId = "virtualGatewayId"
            case virtualInterfaceName = "virtualInterfaceName"
            case vlan = "vlan"
            case directConnectGatewayId = "directConnectGatewayId"
        }
    }

    public struct CreateBGPPeerRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "newBGPPeer", required: false, type: .structure)
        ]
        /// The ID of the virtual interface on which the BGP peer will be provisioned. Example: dxvif-456abc78 Default: None
        public let virtualInterfaceId: String?
        /// Detailed information for the BGP peer to be created. Default: None
        public let newBGPPeer: NewBGPPeer?

        public init(virtualInterfaceId: String? = nil, newBGPPeer: NewBGPPeer? = nil) {
            self.virtualInterfaceId = virtualInterfaceId
            self.newBGPPeer = newBGPPeer
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId = "virtualInterfaceId"
            case newBGPPeer = "newBGPPeer"
        }
    }

    public struct AssociateVirtualInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceId", required: true, type: .string), 
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        /// The ID of the virtual interface. Example: dxvif-123dfg56 Default: None
        public let virtualInterfaceId: String
        /// The ID of the LAG or connection with which to associate the virtual interface. Example: dxlag-abc123 or dxcon-abc123 Default: None
        public let connectionId: String

        public init(virtualInterfaceId: String, connectionId: String) {
            self.virtualInterfaceId = virtualInterfaceId
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId = "virtualInterfaceId"
            case connectionId = "connectionId"
        }
    }

    public struct NewPublicVirtualInterfaceAllocation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "asn", required: true, type: .integer), 
            AWSShapeMember(label: "customerAddress", required: false, type: .string), 
            AWSShapeMember(label: "authKey", required: false, type: .string), 
            AWSShapeMember(label: "addressFamily", required: false, type: .enum), 
            AWSShapeMember(label: "routeFilterPrefixes", required: false, type: .list), 
            AWSShapeMember(label: "virtualInterfaceName", required: true, type: .string), 
            AWSShapeMember(label: "vlan", required: true, type: .integer), 
            AWSShapeMember(label: "amazonAddress", required: false, type: .string)
        ]
        public let asn: Int32
        public let customerAddress: String?
        public let authKey: String?
        public let addressFamily: AddressFamily?
        public let routeFilterPrefixes: [RouteFilterPrefix]?
        public let virtualInterfaceName: String
        public let vlan: Int32
        public let amazonAddress: String?

        public init(asn: Int32, customerAddress: String? = nil, authKey: String? = nil, addressFamily: AddressFamily? = nil, routeFilterPrefixes: [RouteFilterPrefix]? = nil, virtualInterfaceName: String, vlan: Int32, amazonAddress: String? = nil) {
            self.asn = asn
            self.customerAddress = customerAddress
            self.authKey = authKey
            self.addressFamily = addressFamily
            self.routeFilterPrefixes = routeFilterPrefixes
            self.virtualInterfaceName = virtualInterfaceName
            self.vlan = vlan
            self.amazonAddress = amazonAddress
        }

        private enum CodingKeys: String, CodingKey {
            case asn = "asn"
            case customerAddress = "customerAddress"
            case authKey = "authKey"
            case addressFamily = "addressFamily"
            case routeFilterPrefixes = "routeFilterPrefixes"
            case virtualInterfaceName = "virtualInterfaceName"
            case vlan = "vlan"
            case amazonAddress = "amazonAddress"
        }
    }

    public struct CreateLagRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "location", required: true, type: .string), 
            AWSShapeMember(label: "numberOfConnections", required: true, type: .integer), 
            AWSShapeMember(label: "connectionsBandwidth", required: true, type: .string), 
            AWSShapeMember(label: "lagName", required: true, type: .string), 
            AWSShapeMember(label: "connectionId", required: false, type: .string)
        ]
        /// The AWS Direct Connect location in which the LAG should be allocated. Example: EqSV5 Default: None
        public let location: String
        /// The number of physical connections initially provisioned and bundled by the LAG. Default: None
        public let numberOfConnections: Int32
        /// The bandwidth of the individual physical connections bundled by the LAG. Default: None Available values: 1Gbps, 10Gbps
        public let connectionsBandwidth: String
        /// The name of the LAG. Example: "3x10G LAG to AWS" Default: None
        public let lagName: String
        /// The ID of an existing connection to migrate to the LAG. Default: None
        public let connectionId: String?

        public init(location: String, numberOfConnections: Int32, connectionsBandwidth: String, lagName: String, connectionId: String? = nil) {
            self.location = location
            self.numberOfConnections = numberOfConnections
            self.connectionsBandwidth = connectionsBandwidth
            self.lagName = lagName
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case location = "location"
            case numberOfConnections = "numberOfConnections"
            case connectionsBandwidth = "connectionsBandwidth"
            case lagName = "lagName"
            case connectionId = "connectionId"
        }
    }

    public struct AllocateHostedConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionName", required: true, type: .string), 
            AWSShapeMember(label: "bandwidth", required: true, type: .string), 
            AWSShapeMember(label: "connectionId", required: true, type: .string), 
            AWSShapeMember(label: "ownerAccount", required: true, type: .string), 
            AWSShapeMember(label: "vlan", required: true, type: .integer)
        ]
        /// The name of the provisioned connection. Example: "500M Connection to AWS" Default: None
        public let connectionName: String
        /// The bandwidth of the connection. Example: 500Mbps  Default: None Values: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, or 500Mbps
        public let bandwidth: String
        /// The ID of the interconnect or LAG on which the connection will be provisioned. Example: dxcon-456abc78 or dxlag-abc123 Default: None
        public let connectionId: String
        /// The numeric account ID of the customer for whom the connection will be provisioned. Example: 123443215678 Default: None
        public let ownerAccount: String
        /// The dedicated VLAN provisioned to the hosted connection. Example: 101 Default: None
        public let vlan: Int32

        public init(connectionName: String, bandwidth: String, connectionId: String, ownerAccount: String, vlan: Int32) {
            self.connectionName = connectionName
            self.bandwidth = bandwidth
            self.connectionId = connectionId
            self.ownerAccount = ownerAccount
            self.vlan = vlan
        }

        private enum CodingKeys: String, CodingKey {
            case connectionName = "connectionName"
            case bandwidth = "bandwidth"
            case connectionId = "connectionId"
            case ownerAccount = "ownerAccount"
            case vlan = "vlan"
        }
    }

    public struct CreateDirectConnectGatewayResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGateway", required: false, type: .structure)
        ]
        /// The direct connect gateway to be created.
        public let directConnectGateway: DirectConnectGateway?

        public init(directConnectGateway: DirectConnectGateway? = nil) {
            self.directConnectGateway = directConnectGateway
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGateway = "directConnectGateway"
        }
    }

    public struct CreateConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionName", required: true, type: .string), 
            AWSShapeMember(label: "location", required: true, type: .string), 
            AWSShapeMember(label: "lagId", required: false, type: .string), 
            AWSShapeMember(label: "bandwidth", required: true, type: .string)
        ]
        public let connectionName: String
        public let location: String
        public let lagId: String?
        public let bandwidth: String

        public init(connectionName: String, location: String, lagId: String? = nil, bandwidth: String) {
            self.connectionName = connectionName
            self.location = location
            self.lagId = lagId
            self.bandwidth = bandwidth
        }

        private enum CodingKeys: String, CodingKey {
            case connectionName = "connectionName"
            case location = "location"
            case lagId = "lagId"
            case bandwidth = "bandwidth"
        }
    }

    public struct DescribeDirectConnectGatewaysResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGateways", required: false, type: .list), 
            AWSShapeMember(label: "nextToken", required: false, type: .string)
        ]
        /// Information about the direct connect gateways.
        public let directConnectGateways: [DirectConnectGateway]?
        public let nextToken: String?

        public init(directConnectGateways: [DirectConnectGateway]? = nil, nextToken: String? = nil) {
            self.directConnectGateways = directConnectGateways
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGateways = "directConnectGateways"
            case nextToken = "nextToken"
        }
    }

    public struct BGPPeer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "asn", required: false, type: .integer), 
            AWSShapeMember(label: "customerAddress", required: false, type: .string), 
            AWSShapeMember(label: "awsDeviceV2", required: false, type: .string), 
            AWSShapeMember(label: "authKey", required: false, type: .string), 
            AWSShapeMember(label: "addressFamily", required: false, type: .enum), 
            AWSShapeMember(label: "bgpPeerState", required: false, type: .enum), 
            AWSShapeMember(label: "bgpStatus", required: false, type: .enum), 
            AWSShapeMember(label: "amazonAddress", required: false, type: .string)
        ]
        public let asn: Int32?
        public let customerAddress: String?
        /// The Direct Connection endpoint which the BGP peer terminates on.
        public let awsDeviceV2: String?
        public let authKey: String?
        public let addressFamily: AddressFamily?
        public let bgpPeerState: BGPPeerState?
        public let bgpStatus: BGPStatus?
        public let amazonAddress: String?

        public init(asn: Int32? = nil, customerAddress: String? = nil, awsDeviceV2: String? = nil, authKey: String? = nil, addressFamily: AddressFamily? = nil, bgpPeerState: BGPPeerState? = nil, bgpStatus: BGPStatus? = nil, amazonAddress: String? = nil) {
            self.asn = asn
            self.customerAddress = customerAddress
            self.awsDeviceV2 = awsDeviceV2
            self.authKey = authKey
            self.addressFamily = addressFamily
            self.bgpPeerState = bgpPeerState
            self.bgpStatus = bgpStatus
            self.amazonAddress = amazonAddress
        }

        private enum CodingKeys: String, CodingKey {
            case asn = "asn"
            case customerAddress = "customerAddress"
            case awsDeviceV2 = "awsDeviceV2"
            case authKey = "authKey"
            case addressFamily = "addressFamily"
            case bgpPeerState = "bgpPeerState"
            case bgpStatus = "bgpStatus"
            case amazonAddress = "amazonAddress"
        }
    }

    public struct DeleteDirectConnectGatewayAssociationRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGatewayId", required: true, type: .string), 
            AWSShapeMember(label: "virtualGatewayId", required: true, type: .string)
        ]
        /// The ID of the direct connect gateway. Example: "abcd1234-dcba-5678-be23-cdef9876ab45" Default: None
        public let directConnectGatewayId: String
        /// The ID of the virtual private gateway. Example: "vgw-abc123ef" Default: None
        public let virtualGatewayId: String

        public init(directConnectGatewayId: String, virtualGatewayId: String) {
            self.directConnectGatewayId = directConnectGatewayId
            self.virtualGatewayId = virtualGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayId = "directConnectGatewayId"
            case virtualGatewayId = "virtualGatewayId"
        }
    }

    public struct Connection: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "awsDevice", required: false, type: .string), 
            AWSShapeMember(label: "ownerAccount", required: false, type: .string), 
            AWSShapeMember(label: "partnerName", required: false, type: .string), 
            AWSShapeMember(label: "connectionState", required: false, type: .enum), 
            AWSShapeMember(label: "location", required: false, type: .string), 
            AWSShapeMember(label: "vlan", required: false, type: .integer), 
            AWSShapeMember(label: "connectionName", required: false, type: .string), 
            AWSShapeMember(label: "loaIssueTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "connectionId", required: false, type: .string), 
            AWSShapeMember(label: "region", required: false, type: .string), 
            AWSShapeMember(label: "bandwidth", required: false, type: .string), 
            AWSShapeMember(label: "awsDeviceV2", required: false, type: .string), 
            AWSShapeMember(label: "lagId", required: false, type: .string)
        ]
        /// Deprecated in favor of awsDeviceV2. The Direct Connection endpoint which the physical connection terminates on.
        public let awsDevice: String?
        /// The AWS account that will own the new connection.
        public let ownerAccount: String?
        /// The name of the AWS Direct Connect service provider associated with the connection.
        public let partnerName: String?
        public let connectionState: ConnectionState?
        public let location: String?
        public let vlan: Int32?
        public let connectionName: String?
        /// The time of the most recent call to DescribeLoa for this connection.
        public let loaIssueTime: TimeStamp?
        public let connectionId: String?
        public let region: String?
        /// Bandwidth of the connection. Example: 1Gbps (for regular connections), or 500Mbps (for hosted connections) Default: None
        public let bandwidth: String?
        /// The Direct Connection endpoint which the physical connection terminates on.
        public let awsDeviceV2: String?
        public let lagId: String?

        public init(awsDevice: String? = nil, ownerAccount: String? = nil, partnerName: String? = nil, connectionState: ConnectionState? = nil, location: String? = nil, vlan: Int32? = nil, connectionName: String? = nil, loaIssueTime: TimeStamp? = nil, connectionId: String? = nil, region: String? = nil, bandwidth: String? = nil, awsDeviceV2: String? = nil, lagId: String? = nil) {
            self.awsDevice = awsDevice
            self.ownerAccount = ownerAccount
            self.partnerName = partnerName
            self.connectionState = connectionState
            self.location = location
            self.vlan = vlan
            self.connectionName = connectionName
            self.loaIssueTime = loaIssueTime
            self.connectionId = connectionId
            self.region = region
            self.bandwidth = bandwidth
            self.awsDeviceV2 = awsDeviceV2
            self.lagId = lagId
        }

        private enum CodingKeys: String, CodingKey {
            case awsDevice = "awsDevice"
            case ownerAccount = "ownerAccount"
            case partnerName = "partnerName"
            case connectionState = "connectionState"
            case location = "location"
            case vlan = "vlan"
            case connectionName = "connectionName"
            case loaIssueTime = "loaIssueTime"
            case connectionId = "connectionId"
            case region = "region"
            case bandwidth = "bandwidth"
            case awsDeviceV2 = "awsDeviceV2"
            case lagId = "lagId"
        }
    }

    public struct DescribeTagsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceTags", required: false, type: .list)
        ]
        /// Information about the tags.
        public let resourceTags: [ResourceTag]?

        public init(resourceTags: [ResourceTag]? = nil) {
            self.resourceTags = resourceTags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceTags = "resourceTags"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "key", required: true, type: .string), 
            AWSShapeMember(label: "value", required: false, type: .string)
        ]
        /// The key of the tag.
        public let key: String
        /// The value of the tag.
        public let value: String?

        public init(key: String, value: String? = nil) {
            self.key = key
            self.value = value
        }

        private enum CodingKeys: String, CodingKey {
            case key = "key"
            case value = "value"
        }
    }

    public struct DescribeHostedConnectionsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        /// The ID of the interconnect or LAG on which the hosted connections are provisioned. Example: dxcon-abc123 or dxlag-abc123 Default: None
        public let connectionId: String

        public init(connectionId: String) {
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
        }
    }

    public enum InterconnectState: String, CustomStringConvertible, Codable {
        case requested = "requested"
        case pending = "pending"
        case available = "available"
        case down = "down"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public struct DescribeDirectConnectGatewayAssociationsResult: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "directConnectGatewayAssociations", required: false, type: .list)
        ]
        public let nextToken: String?
        /// Information about the direct connect gateway associations.
        public let directConnectGatewayAssociations: [DirectConnectGatewayAssociation]?

        public init(nextToken: String? = nil, directConnectGatewayAssociations: [DirectConnectGatewayAssociation]? = nil) {
            self.nextToken = nextToken
            self.directConnectGatewayAssociations = directConnectGatewayAssociations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "nextToken"
            case directConnectGatewayAssociations = "directConnectGatewayAssociations"
        }
    }

    public struct CreatePublicVirtualInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "newPublicVirtualInterface", required: true, type: .structure), 
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        /// Detailed information for the public virtual interface to be created. Default: None
        public let newPublicVirtualInterface: NewPublicVirtualInterface
        public let connectionId: String

        public init(newPublicVirtualInterface: NewPublicVirtualInterface, connectionId: String) {
            self.newPublicVirtualInterface = newPublicVirtualInterface
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case newPublicVirtualInterface = "newPublicVirtualInterface"
            case connectionId = "connectionId"
        }
    }

    public struct AssociateConnectionWithLagRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionId", required: true, type: .string), 
            AWSShapeMember(label: "lagId", required: true, type: .string)
        ]
        /// The ID of the connection. Example: dxcon-abc123 Default: None
        public let connectionId: String
        /// The ID of the LAG with which to associate the connection. Example: dxlag-abc123 Default: None
        public let lagId: String

        public init(connectionId: String, lagId: String) {
            self.connectionId = connectionId
            self.lagId = lagId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
            case lagId = "lagId"
        }
    }

    public struct TagResourceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: true, type: .string), 
            AWSShapeMember(label: "tags", required: true, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the Direct Connect resource. Example: arn:aws:directconnect:us-east-1:123456789012:dxcon/dxcon-fg5678gh
        public let resourceArn: String
        /// The list of tags to add.
        public let tags: [Tag]

        public init(resourceArn: String, tags: [Tag]) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct VirtualInterface: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "customerAddress", required: false, type: .string), 
            AWSShapeMember(label: "directConnectGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "asn", required: false, type: .integer), 
            AWSShapeMember(label: "virtualInterfaceState", required: false, type: .enum), 
            AWSShapeMember(label: "virtualInterfaceType", required: false, type: .string), 
            AWSShapeMember(label: "virtualGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .string), 
            AWSShapeMember(label: "virtualInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "ownerAccount", required: false, type: .string), 
            AWSShapeMember(label: "routeFilterPrefixes", required: false, type: .list), 
            AWSShapeMember(label: "vlan", required: false, type: .integer), 
            AWSShapeMember(label: "amazonSideAsn", required: false, type: .long), 
            AWSShapeMember(label: "authKey", required: false, type: .string), 
            AWSShapeMember(label: "virtualInterfaceName", required: false, type: .string), 
            AWSShapeMember(label: "connectionId", required: false, type: .string), 
            AWSShapeMember(label: "addressFamily", required: false, type: .enum), 
            AWSShapeMember(label: "region", required: false, type: .string), 
            AWSShapeMember(label: "customerRouterConfig", required: false, type: .string), 
            AWSShapeMember(label: "amazonAddress", required: false, type: .string), 
            AWSShapeMember(label: "awsDeviceV2", required: false, type: .string), 
            AWSShapeMember(label: "bgpPeers", required: false, type: .list)
        ]
        public let customerAddress: String?
        public let directConnectGatewayId: String?
        public let asn: Int32?
        public let virtualInterfaceState: VirtualInterfaceState?
        public let virtualInterfaceType: String?
        public let virtualGatewayId: String?
        public let location: String?
        public let virtualInterfaceId: String?
        /// The AWS account that will own the new virtual interface.
        public let ownerAccount: String?
        public let routeFilterPrefixes: [RouteFilterPrefix]?
        public let vlan: Int32?
        /// The autonomous system number (ASN) for the Amazon side of the connection.
        public let amazonSideAsn: Int64?
        public let authKey: String?
        public let virtualInterfaceName: String?
        public let connectionId: String?
        public let addressFamily: AddressFamily?
        /// The AWS region where the virtual interface is located. Example: us-east-1 Default: None
        public let region: String?
        /// Information for generating the customer router configuration.
        public let customerRouterConfig: String?
        public let amazonAddress: String?
        /// The Direct Connection endpoint which the virtual interface terminates on.
        public let awsDeviceV2: String?
        public let bgpPeers: [BGPPeer]?

        public init(customerAddress: String? = nil, directConnectGatewayId: String? = nil, asn: Int32? = nil, virtualInterfaceState: VirtualInterfaceState? = nil, virtualInterfaceType: String? = nil, virtualGatewayId: String? = nil, location: String? = nil, virtualInterfaceId: String? = nil, ownerAccount: String? = nil, routeFilterPrefixes: [RouteFilterPrefix]? = nil, vlan: Int32? = nil, amazonSideAsn: Int64? = nil, authKey: String? = nil, virtualInterfaceName: String? = nil, connectionId: String? = nil, addressFamily: AddressFamily? = nil, region: String? = nil, customerRouterConfig: String? = nil, amazonAddress: String? = nil, awsDeviceV2: String? = nil, bgpPeers: [BGPPeer]? = nil) {
            self.customerAddress = customerAddress
            self.directConnectGatewayId = directConnectGatewayId
            self.asn = asn
            self.virtualInterfaceState = virtualInterfaceState
            self.virtualInterfaceType = virtualInterfaceType
            self.virtualGatewayId = virtualGatewayId
            self.location = location
            self.virtualInterfaceId = virtualInterfaceId
            self.ownerAccount = ownerAccount
            self.routeFilterPrefixes = routeFilterPrefixes
            self.vlan = vlan
            self.amazonSideAsn = amazonSideAsn
            self.authKey = authKey
            self.virtualInterfaceName = virtualInterfaceName
            self.connectionId = connectionId
            self.addressFamily = addressFamily
            self.region = region
            self.customerRouterConfig = customerRouterConfig
            self.amazonAddress = amazonAddress
            self.awsDeviceV2 = awsDeviceV2
            self.bgpPeers = bgpPeers
        }

        private enum CodingKeys: String, CodingKey {
            case customerAddress = "customerAddress"
            case directConnectGatewayId = "directConnectGatewayId"
            case asn = "asn"
            case virtualInterfaceState = "virtualInterfaceState"
            case virtualInterfaceType = "virtualInterfaceType"
            case virtualGatewayId = "virtualGatewayId"
            case location = "location"
            case virtualInterfaceId = "virtualInterfaceId"
            case ownerAccount = "ownerAccount"
            case routeFilterPrefixes = "routeFilterPrefixes"
            case vlan = "vlan"
            case amazonSideAsn = "amazonSideAsn"
            case authKey = "authKey"
            case virtualInterfaceName = "virtualInterfaceName"
            case connectionId = "connectionId"
            case addressFamily = "addressFamily"
            case region = "region"
            case customerRouterConfig = "customerRouterConfig"
            case amazonAddress = "amazonAddress"
            case awsDeviceV2 = "awsDeviceV2"
            case bgpPeers = "bgpPeers"
        }
    }

    public struct AllocateConnectionOnInterconnectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionName", required: true, type: .string), 
            AWSShapeMember(label: "bandwidth", required: true, type: .string), 
            AWSShapeMember(label: "interconnectId", required: true, type: .string), 
            AWSShapeMember(label: "ownerAccount", required: true, type: .string), 
            AWSShapeMember(label: "vlan", required: true, type: .integer)
        ]
        /// Name of the provisioned connection. Example: "500M Connection to AWS" Default: None
        public let connectionName: String
        /// Bandwidth of the connection. Example: "500Mbps" Default: None Values: 50Mbps, 100Mbps, 200Mbps, 300Mbps, 400Mbps, or 500Mbps
        public let bandwidth: String
        /// ID of the interconnect on which the connection will be provisioned. Example: dxcon-456abc78 Default: None
        public let interconnectId: String
        /// Numeric account Id of the customer for whom the connection will be provisioned. Example: 123443215678 Default: None
        public let ownerAccount: String
        /// The dedicated VLAN provisioned to the connection. Example: 101 Default: None
        public let vlan: Int32

        public init(connectionName: String, bandwidth: String, interconnectId: String, ownerAccount: String, vlan: Int32) {
            self.connectionName = connectionName
            self.bandwidth = bandwidth
            self.interconnectId = interconnectId
            self.ownerAccount = ownerAccount
            self.vlan = vlan
        }

        private enum CodingKeys: String, CodingKey {
            case connectionName = "connectionName"
            case bandwidth = "bandwidth"
            case interconnectId = "interconnectId"
            case ownerAccount = "ownerAccount"
            case vlan = "vlan"
        }
    }

    public struct DescribeDirectConnectGatewayAssociationsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "virtualGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "maxResults", required: false, type: .integer)
        ]
        /// The ID of the direct connect gateway. Example: "abcd1234-dcba-5678-be23-cdef9876ab45" Default: None
        public let directConnectGatewayId: String?
        /// The token provided in the previous describe result to retrieve the next page of the result. Default: None
        public let nextToken: String?
        /// The ID of the virtual private gateway. Example: "vgw-abc123ef" Default: None
        public let virtualGatewayId: String?
        /// The maximum number of direct connect gateway associations to return per page. Example: 15 Default: None
        public let maxResults: Int32?

        public init(directConnectGatewayId: String? = nil, nextToken: String? = nil, virtualGatewayId: String? = nil, maxResults: Int32? = nil) {
            self.directConnectGatewayId = directConnectGatewayId
            self.nextToken = nextToken
            self.virtualGatewayId = virtualGatewayId
            self.maxResults = maxResults
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayId = "directConnectGatewayId"
            case nextToken = "nextToken"
            case virtualGatewayId = "virtualGatewayId"
            case maxResults = "maxResults"
        }
    }

    public enum DirectConnectGatewayState: String, CustomStringConvertible, Codable {
        case pending = "pending"
        case available = "available"
        case deleting = "deleting"
        case deleted = "deleted"
        public var description: String { return self.rawValue }
    }

    public struct Connections: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connections", required: false, type: .list)
        ]
        /// A list of connections.
        public let connections: [Connection]?

        public init(connections: [Connection]? = nil) {
            self.connections = connections
        }

        private enum CodingKeys: String, CodingKey {
            case connections = "connections"
        }
    }

    public struct DeleteVirtualInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceId", required: true, type: .string)
        ]
        public let virtualInterfaceId: String

        public init(virtualInterfaceId: String) {
            self.virtualInterfaceId = virtualInterfaceId
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId = "virtualInterfaceId"
        }
    }

    public struct RouteFilterPrefix: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "cidr", required: false, type: .string)
        ]
        /// CIDR notation for the advertised route. Multiple routes are separated by commas. IPv6 CIDRs must be at least a /64 or shorter Example: 10.10.10.0/24,10.10.11.0/24,2001:db8::/64
        public let cidr: String?

        public init(cidr: String? = nil) {
            self.cidr = cidr
        }

        private enum CodingKeys: String, CodingKey {
            case cidr = "cidr"
        }
    }

    public struct DeleteDirectConnectGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGatewayId", required: true, type: .string)
        ]
        /// The ID of the direct connect gateway. Example: "abcd1234-dcba-5678-be23-cdef9876ab45" Default: None
        public let directConnectGatewayId: String

        public init(directConnectGatewayId: String) {
            self.directConnectGatewayId = directConnectGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayId = "directConnectGatewayId"
        }
    }

    public struct VirtualGateway: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualGatewayState", required: false, type: .string), 
            AWSShapeMember(label: "virtualGatewayId", required: false, type: .string)
        ]
        public let virtualGatewayState: String?
        public let virtualGatewayId: String?

        public init(virtualGatewayState: String? = nil, virtualGatewayId: String? = nil) {
            self.virtualGatewayState = virtualGatewayState
            self.virtualGatewayId = virtualGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case virtualGatewayState = "virtualGatewayState"
            case virtualGatewayId = "virtualGatewayId"
        }
    }

    public struct DeleteInterconnectResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "interconnectState", required: false, type: .enum)
        ]
        public let interconnectState: InterconnectState?

        public init(interconnectState: InterconnectState? = nil) {
            self.interconnectState = interconnectState
        }

        private enum CodingKeys: String, CodingKey {
            case interconnectState = "interconnectState"
        }
    }

    public enum ConnectionState: String, CustomStringConvertible, Codable {
        case ordering = "ordering"
        case requested = "requested"
        case pending = "pending"
        case available = "available"
        case down = "down"
        case deleting = "deleting"
        case deleted = "deleted"
        case rejected = "rejected"
        public var description: String { return self.rawValue }
    }

    public struct Interconnect: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "interconnectName", required: false, type: .string), 
            AWSShapeMember(label: "region", required: false, type: .string), 
            AWSShapeMember(label: "bandwidth", required: false, type: .string), 
            AWSShapeMember(label: "location", required: false, type: .string), 
            AWSShapeMember(label: "awsDeviceV2", required: false, type: .string), 
            AWSShapeMember(label: "interconnectState", required: false, type: .enum), 
            AWSShapeMember(label: "interconnectId", required: false, type: .string), 
            AWSShapeMember(label: "awsDevice", required: false, type: .string), 
            AWSShapeMember(label: "loaIssueTime", required: false, type: .timestamp), 
            AWSShapeMember(label: "lagId", required: false, type: .string)
        ]
        public let interconnectName: String?
        public let region: String?
        public let bandwidth: String?
        public let location: String?
        /// The Direct Connection endpoint which the physical connection terminates on.
        public let awsDeviceV2: String?
        public let interconnectState: InterconnectState?
        public let interconnectId: String?
        /// Deprecated in favor of awsDeviceV2. The Direct Connection endpoint which the physical connection terminates on.
        public let awsDevice: String?
        /// The time of the most recent call to DescribeInterconnectLoa for this Interconnect.
        public let loaIssueTime: TimeStamp?
        public let lagId: String?

        public init(interconnectName: String? = nil, region: String? = nil, bandwidth: String? = nil, location: String? = nil, awsDeviceV2: String? = nil, interconnectState: InterconnectState? = nil, interconnectId: String? = nil, awsDevice: String? = nil, loaIssueTime: TimeStamp? = nil, lagId: String? = nil) {
            self.interconnectName = interconnectName
            self.region = region
            self.bandwidth = bandwidth
            self.location = location
            self.awsDeviceV2 = awsDeviceV2
            self.interconnectState = interconnectState
            self.interconnectId = interconnectId
            self.awsDevice = awsDevice
            self.loaIssueTime = loaIssueTime
            self.lagId = lagId
        }

        private enum CodingKeys: String, CodingKey {
            case interconnectName = "interconnectName"
            case region = "region"
            case bandwidth = "bandwidth"
            case location = "location"
            case awsDeviceV2 = "awsDeviceV2"
            case interconnectState = "interconnectState"
            case interconnectId = "interconnectId"
            case awsDevice = "awsDevice"
            case loaIssueTime = "loaIssueTime"
            case lagId = "lagId"
        }
    }

    public struct DescribeConnectionsOnInterconnectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "interconnectId", required: true, type: .string)
        ]
        /// ID of the interconnect on which a list of connection is provisioned. Example: dxcon-abc123 Default: None
        public let interconnectId: String

        public init(interconnectId: String) {
            self.interconnectId = interconnectId
        }

        private enum CodingKeys: String, CodingKey {
            case interconnectId = "interconnectId"
        }
    }

    public struct DeleteConnectionRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        public let connectionId: String

        public init(connectionId: String) {
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case connectionId = "connectionId"
        }
    }

    public struct CreateDirectConnectGatewayRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "directConnectGatewayName", required: true, type: .string), 
            AWSShapeMember(label: "amazonSideAsn", required: false, type: .long)
        ]
        /// The name of the direct connect gateway. Example: "My direct connect gateway" Default: None
        public let directConnectGatewayName: String
        /// The autonomous system number (ASN) for Border Gateway Protocol (BGP) to be configured on the Amazon side of the connection. The ASN must be in the private range of 64,512 to 65,534 or 4,200,000,000 to 4,294,967,294  Example: 65200 Default: 64512
        public let amazonSideAsn: Int64?

        public init(directConnectGatewayName: String, amazonSideAsn: Int64? = nil) {
            self.directConnectGatewayName = directConnectGatewayName
            self.amazonSideAsn = amazonSideAsn
        }

        private enum CodingKeys: String, CodingKey {
            case directConnectGatewayName = "directConnectGatewayName"
            case amazonSideAsn = "amazonSideAsn"
        }
    }

    public struct CreateBGPPeerResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterface", required: false, type: .structure)
        ]
        public let virtualInterface: VirtualInterface?

        public init(virtualInterface: VirtualInterface? = nil) {
            self.virtualInterface = virtualInterface
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterface = "virtualInterface"
        }
    }

    public struct DescribeVirtualInterfacesRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceId", required: false, type: .string), 
            AWSShapeMember(label: "connectionId", required: false, type: .string)
        ]
        public let virtualInterfaceId: String?
        public let connectionId: String?

        public init(virtualInterfaceId: String? = nil, connectionId: String? = nil) {
            self.virtualInterfaceId = virtualInterfaceId
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceId = "virtualInterfaceId"
            case connectionId = "connectionId"
        }
    }

    public enum AddressFamily: String, CustomStringConvertible, Codable {
        case ipv4 = "ipv4"
        case ipv6 = "ipv6"
        public var description: String { return self.rawValue }
    }

    public struct DirectConnectGatewayAssociation: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualGatewayRegion", required: false, type: .string), 
            AWSShapeMember(label: "directConnectGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "virtualGatewayOwnerAccount", required: false, type: .string), 
            AWSShapeMember(label: "virtualGatewayId", required: false, type: .string), 
            AWSShapeMember(label: "stateChangeError", required: false, type: .string), 
            AWSShapeMember(label: "associationState", required: false, type: .enum)
        ]
        public let virtualGatewayRegion: String?
        public let directConnectGatewayId: String?
        /// The AWS account ID of the owner of the virtual private gateway.
        public let virtualGatewayOwnerAccount: String?
        public let virtualGatewayId: String?
        public let stateChangeError: String?
        public let associationState: DirectConnectGatewayAssociationState?

        public init(virtualGatewayRegion: String? = nil, directConnectGatewayId: String? = nil, virtualGatewayOwnerAccount: String? = nil, virtualGatewayId: String? = nil, stateChangeError: String? = nil, associationState: DirectConnectGatewayAssociationState? = nil) {
            self.virtualGatewayRegion = virtualGatewayRegion
            self.directConnectGatewayId = directConnectGatewayId
            self.virtualGatewayOwnerAccount = virtualGatewayOwnerAccount
            self.virtualGatewayId = virtualGatewayId
            self.stateChangeError = stateChangeError
            self.associationState = associationState
        }

        private enum CodingKeys: String, CodingKey {
            case virtualGatewayRegion = "virtualGatewayRegion"
            case directConnectGatewayId = "directConnectGatewayId"
            case virtualGatewayOwnerAccount = "virtualGatewayOwnerAccount"
            case virtualGatewayId = "virtualGatewayId"
            case stateChangeError = "stateChangeError"
            case associationState = "associationState"
        }
    }

    public struct DescribeLagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lagId", required: false, type: .string)
        ]
        /// The ID of the LAG. Example: dxlag-abc123 Default: None
        public let lagId: String?

        public init(lagId: String? = nil) {
            self.lagId = lagId
        }

        private enum CodingKeys: String, CodingKey {
            case lagId = "lagId"
        }
    }

    public struct CreateInterconnectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lagId", required: false, type: .string), 
            AWSShapeMember(label: "bandwidth", required: true, type: .string), 
            AWSShapeMember(label: "location", required: true, type: .string), 
            AWSShapeMember(label: "interconnectName", required: true, type: .string)
        ]
        public let lagId: String?
        /// The port bandwidth Example: 1Gbps Default: None Available values: 1Gbps,10Gbps
        public let bandwidth: String
        /// Where the interconnect is located Example: EqSV5 Default: None
        public let location: String
        /// The name of the interconnect. Example: "1G Interconnect to AWS" Default: None
        public let interconnectName: String

        public init(lagId: String? = nil, bandwidth: String, location: String, interconnectName: String) {
            self.lagId = lagId
            self.bandwidth = bandwidth
            self.location = location
            self.interconnectName = interconnectName
        }

        private enum CodingKeys: String, CodingKey {
            case lagId = "lagId"
            case bandwidth = "bandwidth"
            case location = "location"
            case interconnectName = "interconnectName"
        }
    }

    public struct DeleteInterconnectRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "interconnectId", required: true, type: .string)
        ]
        public let interconnectId: String

        public init(interconnectId: String) {
            self.interconnectId = interconnectId
        }

        private enum CodingKeys: String, CodingKey {
            case interconnectId = "interconnectId"
        }
    }

    public struct DescribeDirectConnectGatewaysRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "maxResults", required: false, type: .integer), 
            AWSShapeMember(label: "nextToken", required: false, type: .string), 
            AWSShapeMember(label: "directConnectGatewayId", required: false, type: .string)
        ]
        /// The maximum number of direct connect gateways to return per page. Example: 15 Default: None
        public let maxResults: Int32?
        /// The token provided in the previous describe result to retrieve the next page of the result. Default: None
        public let nextToken: String?
        /// The ID of the direct connect gateway. Example: "abcd1234-dcba-5678-be23-cdef9876ab45" Default: None
        public let directConnectGatewayId: String?

        public init(maxResults: Int32? = nil, nextToken: String? = nil, directConnectGatewayId: String? = nil) {
            self.maxResults = maxResults
            self.nextToken = nextToken
            self.directConnectGatewayId = directConnectGatewayId
        }

        private enum CodingKeys: String, CodingKey {
            case maxResults = "maxResults"
            case nextToken = "nextToken"
            case directConnectGatewayId = "directConnectGatewayId"
        }
    }

    public struct TagResourceResponse: AWSShape {

    }

    public struct DeleteVirtualInterfaceResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "virtualInterfaceState", required: false, type: .enum)
        ]
        public let virtualInterfaceState: VirtualInterfaceState?

        public init(virtualInterfaceState: VirtualInterfaceState? = nil) {
            self.virtualInterfaceState = virtualInterfaceState
        }

        private enum CodingKeys: String, CodingKey {
            case virtualInterfaceState = "virtualInterfaceState"
        }
    }

    public enum DirectConnectGatewayAttachmentState: String, CustomStringConvertible, Codable {
        case attaching = "attaching"
        case attached = "attached"
        case detaching = "detaching"
        case detached = "detached"
        public var description: String { return self.rawValue }
    }

    public struct AllocatePrivateVirtualInterfaceRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "newPrivateVirtualInterfaceAllocation", required: true, type: .structure), 
            AWSShapeMember(label: "connectionId", required: true, type: .string), 
            AWSShapeMember(label: "ownerAccount", required: true, type: .string)
        ]
        /// Detailed information for the private virtual interface to be provisioned. Default: None
        public let newPrivateVirtualInterfaceAllocation: NewPrivateVirtualInterfaceAllocation
        /// The connection ID on which the private virtual interface is provisioned. Default: None
        public let connectionId: String
        /// The AWS account that will own the new private virtual interface. Default: None
        public let ownerAccount: String

        public init(newPrivateVirtualInterfaceAllocation: NewPrivateVirtualInterfaceAllocation, connectionId: String, ownerAccount: String) {
            self.newPrivateVirtualInterfaceAllocation = newPrivateVirtualInterfaceAllocation
            self.connectionId = connectionId
            self.ownerAccount = ownerAccount
        }

        private enum CodingKeys: String, CodingKey {
            case newPrivateVirtualInterfaceAllocation = "newPrivateVirtualInterfaceAllocation"
            case connectionId = "connectionId"
            case ownerAccount = "ownerAccount"
        }
    }

    public struct ResourceTag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArn", required: false, type: .string), 
            AWSShapeMember(label: "tags", required: false, type: .list)
        ]
        /// The Amazon Resource Name (ARN) of the Direct Connect resource.
        public let resourceArn: String?
        /// The tags.
        public let tags: [Tag]?

        public init(resourceArn: String? = nil, tags: [Tag]? = nil) {
            self.resourceArn = resourceArn
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArn = "resourceArn"
            case tags = "tags"
        }
    }

    public struct DeleteLagRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "lagId", required: true, type: .string)
        ]
        /// The ID of the LAG to delete. Example: dxlag-abc123 Default: None
        public let lagId: String

        public init(lagId: String) {
            self.lagId = lagId
        }

        private enum CodingKeys: String, CodingKey {
            case lagId = "lagId"
        }
    }

    public struct DescribeTagsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "resourceArns", required: true, type: .list)
        ]
        /// The Amazon Resource Names (ARNs) of the Direct Connect resources.
        public let resourceArns: [String]

        public init(resourceArns: [String]) {
            self.resourceArns = resourceArns
        }

        private enum CodingKeys: String, CodingKey {
            case resourceArns = "resourceArns"
        }
    }

    public struct DescribeConnectionLoaRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "providerName", required: false, type: .string), 
            AWSShapeMember(label: "loaContentType", required: false, type: .enum), 
            AWSShapeMember(label: "connectionId", required: true, type: .string)
        ]
        /// The name of the APN partner or service provider who establishes connectivity on your behalf. If you supply this parameter, the LOA-CFA lists the provider name alongside your company name as the requester of the cross connect. Default: None
        public let providerName: String?
        public let loaContentType: LoaContentType?
        public let connectionId: String

        public init(providerName: String? = nil, loaContentType: LoaContentType? = nil, connectionId: String) {
            self.providerName = providerName
            self.loaContentType = loaContentType
            self.connectionId = connectionId
        }

        private enum CodingKeys: String, CodingKey {
            case providerName = "providerName"
            case loaContentType = "loaContentType"
            case connectionId = "connectionId"
        }
    }

    public struct Interconnects: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "interconnects", required: false, type: .list)
        ]
        /// A list of interconnects.
        public let interconnects: [Interconnect]?

        public init(interconnects: [Interconnect]? = nil) {
            self.interconnects = interconnects
        }

        private enum CodingKeys: String, CodingKey {
            case interconnects = "interconnects"
        }
    }

}